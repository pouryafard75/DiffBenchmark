{
  "matchedElements" : [
 {
    "left" : "class : NonBlockingJsonParser",
    "right" : "class : NonBlockingJsonParser",
    "info" : "TypeDeclaration[475-107379]:TypeDeclaration[475-107413]"
  }, {
    "left" : "FEAT_MASK_TRAILING_COMMA",
    "right" : "FEAT_MASK_TRAILING_COMMA",
    "info" : "FieldDeclaration[585-713]:FieldDeclaration[585-713]"
  }, {
    "left" : "FEAT_MASK_LEADING_ZEROS",
    "right" : "FEAT_MASK_LEADING_ZEROS",
    "info" : "FieldDeclaration[718-852]:FieldDeclaration[718-852]"
  }, {
    "left" : "FEAT_MASK_ALLOW_MISSING",
    "right" : "FEAT_MASK_ALLOW_MISSING",
    "info" : "FieldDeclaration[857-984]:FieldDeclaration[857-984]"
  }, {
    "left" : "FEAT_MASK_ALLOW_SINGLE_QUOTES",
    "right" : "FEAT_MASK_ALLOW_SINGLE_QUOTES",
    "info" : "FieldDeclaration[989-1084]:FieldDeclaration[989-1084]"
  }, {
    "left" : "FEAT_MASK_ALLOW_UNQUOTED_NAMES",
    "right" : "FEAT_MASK_ALLOW_UNQUOTED_NAMES",
    "info" : "FieldDeclaration[1089-1192]:FieldDeclaration[1089-1192]"
  }, {
    "left" : "FEAT_MASK_ALLOW_JAVA_COMMENTS",
    "right" : "FEAT_MASK_ALLOW_JAVA_COMMENTS",
    "info" : "FieldDeclaration[1197-1287]:FieldDeclaration[1197-1287]"
  }, {
    "left" : "FEAT_MASK_ALLOW_YAML_COMMENTS",
    "right" : "FEAT_MASK_ALLOW_YAML_COMMENTS",
    "info" : "FieldDeclaration[1292-1387]:FieldDeclaration[1292-1387]"
  }, {
    "left" : "_icUTF8",
    "right" : "_icUTF8",
    "info" : "FieldDeclaration[1458-1524]:FieldDeclaration[1458-1524]"
  }, {
    "left" : "_icLatin1",
    "right" : "_icLatin1",
    "info" : "FieldDeclaration[1668-1740]:FieldDeclaration[1668-1740]"
  }, {
    "left" : "_inputBuffer",
    "right" : "_inputBuffer",
    "info" : "FieldDeclaration[1941-2073]:FieldDeclaration[1941-2073]"
  }, {
    "left" : "_origBufferLen",
    "right" : "_origBufferLen",
    "info" : "FieldDeclaration[2079-2363]:FieldDeclaration[2079-2363]"
  }, {
    "left" : "public NonBlockingJsonParser(ctxt , parserFeatures int, sym )",
    "right" : "public NonBlockingJsonParser(ctxt , parserFeatures int, sym )",
    "info" : "MethodDeclaration[2642-2800]:MethodDeclaration[2642-2800]"
  }, {
    "left" : "public getNonBlockingInputFeeder() : ",
    "right" : "public getNonBlockingInputFeeder() : ",
    "info" : "MethodDeclaration[3003-3096]:MethodDeclaration[3003-3096]"
  }, {
    "left" : "public needMoreInput() : boolean",
    "right" : "public needMoreInput() : boolean",
    "info" : "MethodDeclaration[3102-3216]:MethodDeclaration[3102-3216]"
  }, {
    "left" : "public feedInput(buf , start int, end int) : void",
    "right" : "public feedInput(buf , start int, end int) : void",
    "info" : "MethodDeclaration[3222-4224]:MethodDeclaration[3222-4258]"
  }, {
    "left" : "public endOfInput() : void",
    "right" : "public endOfInput() : void",
    "info" : "MethodDeclaration[4230-4304]:MethodDeclaration[4264-4338]"
  }, {
    "left" : "public releaseBuffered(out ) : int",
    "right" : "public releaseBuffered(out ) : int",
    "info" : "MethodDeclaration[5039-5279]:MethodDeclaration[5073-5313]"
  }, {
    "left" : "protected _decodeEscaped() : char",
    "right" : "protected _decodeEscaped() : char",
    "info" : "MethodDeclaration[5393-5522]:MethodDeclaration[5427-5556]"
  }, {
    "left" : "public nextToken() : ",
    "right" : "public nextToken() : ",
    "info" : "MethodDeclaration[5723-7819]:MethodDeclaration[5757-7853]"
  }, {
    "left" : "protected _finishToken() : ",
    "right" : "protected _finishToken() : ",
    "info" : "MethodDeclaration[7825-13041]:MethodDeclaration[7859-13075]"
  }, {
    "left" : "protected _finishTokenWithEOF() : ",
    "right" : "protected _finishTokenWithEOF() : ",
    "info" : "MethodDeclaration[13047-16316]:MethodDeclaration[13081-16350]"
  }, {
    "left" : "private _startDocument(ch int) : ",
    "right" : "private _startDocument(ch int) : ",
    "info" : "MethodDeclaration[16531-17837]:MethodDeclaration[16565-17871]"
  }, {
    "left" : "private _finishBOM(bytesHandled int) : ",
    "right" : "private _finishBOM(bytesHandled int) : ",
    "info" : "MethodDeclaration[17843-19117]:MethodDeclaration[17877-19151]"
  }, {
    "left" : "private _startFieldName(ch int) : ",
    "right" : "private _startFieldName(ch int) : ",
    "info" : "MethodDeclaration[19349-20340]:MethodDeclaration[19383-20374]"
  }, {
    "left" : "private _startFieldNameAfterComma(ch int) : ",
    "right" : "private _startFieldNameAfterComma(ch int) : ",
    "info" : "MethodDeclaration[20346-22335]:MethodDeclaration[20380-22369]"
  }, {
    "left" : "private _startValue(ch int) : ",
    "right" : "private _startValue(ch int) : ",
    "info" : "MethodDeclaration[22558-24429]:MethodDeclaration[22592-24463]"
  }, {
    "left" : "private _startValueExpectComma(ch int) : ",
    "right" : "private _startValueExpectComma(ch int) : ",
    "info" : "MethodDeclaration[24435-27526]:MethodDeclaration[24469-27560]"
  }, {
    "left" : "private _startValueExpectColon(ch int) : ",
    "right" : "private _startValueExpectColon(ch int) : ",
    "info" : "MethodDeclaration[27532-30212]:MethodDeclaration[27566-30246]"
  }, {
    "left" : "private _startValueAfterComma(ch int) : ",
    "right" : "private _startValueAfterComma(ch int) : ",
    "info" : "MethodDeclaration[30310-32225]:MethodDeclaration[30344-32259]"
  }, {
    "left" : "protected _startUnexpectedValue(leadingComma boolean, ch int) : ",
    "right" : "protected _startUnexpectedValue(leadingComma boolean, ch int) : ",
    "info" : "MethodDeclaration[32231-33737]:MethodDeclaration[32265-33771]"
  }, {
    "left" : "private _skipWS(ch int) : int",
    "right" : "private _skipWS(ch int) : int",
    "info" : "MethodDeclaration[33976-34706]:MethodDeclaration[34010-34740]"
  }, {
    "left" : "private _startSlashComment(fromMinorState int) : ",
    "right" : "private _startSlashComment(fromMinorState int) : ",
    "info" : "MethodDeclaration[34712-35677]:MethodDeclaration[34746-35711]"
  }, {
    "left" : "private _finishHashComment(fromMinorState int) : ",
    "right" : "private _finishHashComment(fromMinorState int) : ",
    "info" : "MethodDeclaration[35683-36905]:MethodDeclaration[35717-36939]"
  }, {
    "left" : "private _finishCppComment(fromMinorState int) : ",
    "right" : "private _finishCppComment(fromMinorState int) : ",
    "info" : "MethodDeclaration[36911-37819]:MethodDeclaration[36945-37853]"
  }, {
    "left" : "private _finishCComment(fromMinorState int, gotStar boolean) : ",
    "right" : "private _finishCComment(fromMinorState int, gotStar boolean) : ",
    "info" : "MethodDeclaration[37825-38985]:MethodDeclaration[37859-39019]"
  }, {
    "left" : "private _startAfterComment(fromMinorState int) : ",
    "right" : "private _startAfterComment(fromMinorState int) : ",
    "info" : "MethodDeclaration[38991-39956]:MethodDeclaration[39025-39990]"
  }, {
    "left" : "protected _startFalseToken() : ",
    "right" : "protected _startFalseToken() : ",
    "info" : "MethodDeclaration[40170-40955]:MethodDeclaration[40204-40989]"
  }, {
    "left" : "protected _startTrueToken() : ",
    "right" : "protected _startTrueToken() : ",
    "info" : "MethodDeclaration[40961-41699]:MethodDeclaration[40995-41733]"
  }, {
    "left" : "protected _startNullToken() : ",
    "right" : "protected _startNullToken() : ",
    "info" : "MethodDeclaration[41705-42443]:MethodDeclaration[41739-42477]"
  }, {
    "left" : "protected _finishKeywordToken(expToken , matched int, result ) : ",
    "right" : "protected _finishKeywordToken(expToken , matched int, result ) : ",
    "info" : "MethodDeclaration[42449-43417]:MethodDeclaration[42483-43451]"
  }, {
    "left" : "protected _finishKeywordTokenWithEOF(expToken , matched int, result ) : ",
    "right" : "protected _finishKeywordTokenWithEOF(expToken , matched int, result ) : ",
    "info" : "MethodDeclaration[43423-43756]:MethodDeclaration[43457-43790]"
  }, {
    "left" : "protected _finishNonStdToken(type int, matched int) : ",
    "right" : "protected _finishNonStdToken(type int, matched int) : ",
    "info" : "MethodDeclaration[43762-44852]:MethodDeclaration[43796-44886]"
  }, {
    "left" : "protected _finishNonStdTokenWithEOF(type int, matched int) : ",
    "right" : "protected _finishNonStdTokenWithEOF(type int, matched int) : ",
    "info" : "MethodDeclaration[44858-45216]:MethodDeclaration[44892-45250]"
  }, {
    "left" : "protected _finishErrorToken() : ",
    "right" : "protected _finishErrorToken() : ",
    "info" : "MethodDeclaration[45222-46048]:MethodDeclaration[45256-46082]"
  }, {
    "left" : "protected _finishErrorTokenWithEOF() : ",
    "right" : "protected _finishErrorTokenWithEOF() : ",
    "info" : "MethodDeclaration[46054-46197]:MethodDeclaration[46088-46231]"
  }, {
    "left" : "protected _reportErrorToken(actualToken ) : ",
    "right" : "protected _reportErrorToken(actualToken ) : ",
    "info" : "MethodDeclaration[46203-46552]:MethodDeclaration[46237-46586]"
  }, {
    "left" : "protected _startPositiveNumber(ch int) : ",
    "right" : "protected _startPositiveNumber(ch int) : ",
    "info" : "MethodDeclaration[46776-48610]:MethodDeclaration[46810-48644]"
  }, {
    "left" : "protected _startNegativeNumber() : ",
    "right" : "protected _startNegativeNumber() : ",
    "info" : "MethodDeclaration[48616-51179]:MethodDeclaration[48650-51213]"
  }, {
    "left" : "protected _startNumberLeadingZero() : ",
    "right" : "protected _startNumberLeadingZero() : ",
    "info" : "MethodDeclaration[51185-53065]:MethodDeclaration[51219-53099]"
  }, {
    "left" : "protected _finishNumberMinus(ch int) : ",
    "right" : "protected _finishNumberMinus(ch int) : ",
    "info" : "MethodDeclaration[53071-53864]:MethodDeclaration[53105-53898]"
  }, {
    "left" : "protected _finishNumberLeadingZeroes() : ",
    "right" : "protected _finishNumberLeadingZeroes() : ",
    "info" : "MethodDeclaration[53870-56250]:MethodDeclaration[53904-56284]"
  }, {
    "left" : "protected _finishNumberLeadingNegZeroes() : ",
    "right" : "protected _finishNumberLeadingNegZeroes() : ",
    "info" : "MethodDeclaration[56256-58764]:MethodDeclaration[56290-58798]"
  }, {
    "left" : "protected _finishNumberIntegralPart(outBuf , outPtr int) : ",
    "right" : "protected _finishNumberIntegralPart(outBuf , outPtr int) : ",
    "info" : "MethodDeclaration[58770-60246]:MethodDeclaration[58804-60280]"
  }, {
    "left" : "protected _startFloat(outBuf , outPtr int, ch int) : ",
    "right" : "protected _startFloat(outBuf , outPtr int, ch int) : ",
    "info" : "MethodDeclaration[60252-63909]:MethodDeclaration[60286-63943]"
  }, {
    "left" : "protected _finishFloatFraction() : ",
    "right" : "protected _finishFloatFraction() : ",
    "info" : "MethodDeclaration[63915-65792]:MethodDeclaration[63949-65826]"
  }, {
    "left" : "protected _finishFloatExponent(checkSign boolean, ch int) : ",
    "right" : "protected _finishFloatExponent(checkSign boolean, ch int) : ",
    "info" : "MethodDeclaration[65798-67460]:MethodDeclaration[65832-67494]"
  }, {
    "left" : "private _fastParseName() : ",
    "right" : "private _fastParseName() : ",
    "info" : "MethodDeclaration[67674-69781]:MethodDeclaration[67708-69815]"
  }, {
    "left" : "private _parseMediumName(ptr int, q2 int) : ",
    "right" : "private _parseMediumName(ptr int, q2 int) : ",
    "info" : "MethodDeclaration[69787-71232]:MethodDeclaration[69821-71266]"
  }, {
    "left" : "private _parseMediumName2(ptr int, q3 int, q2 int) : ",
    "right" : "private _parseMediumName2(ptr int, q3 int, q2 int) : ",
    "info" : "MethodDeclaration[71238-72482]:MethodDeclaration[71272-72516]"
  }, {
    "left" : "private _parseEscapedName(qlen int, currQuad int, currQuadBytes int) : ",
    "right" : "private _parseEscapedName(qlen int, currQuad int, currQuadBytes int) : ",
    "info" : "MethodDeclaration[72488-77275]:MethodDeclaration[72522-77309]"
  }, {
    "left" : "private _handleOddName(ch int) : ",
    "right" : "private _handleOddName(ch int) : ",
    "info" : "MethodDeclaration[77281-79209]:MethodDeclaration[77315-79243]"
  }, {
    "left" : "private _finishUnquotedName(qlen int, currQuad int, currQuadBytes int) : ",
    "right" : "private _finishUnquotedName(qlen int, currQuad int, currQuadBytes int) : ",
    "info" : "MethodDeclaration[79215-81141]:MethodDeclaration[79249-81175]"
  }, {
    "left" : "private _finishAposName(qlen int, currQuad int, currQuadBytes int) : ",
    "right" : "private _finishAposName(qlen int, currQuad int, currQuadBytes int) : ",
    "info" : "MethodDeclaration[81147-85228]:MethodDeclaration[81181-85262]"
  }, {
    "left" : "protected _finishFieldWithEscape() : ",
    "right" : "protected _finishFieldWithEscape() : ",
    "info" : "MethodDeclaration[85234-87287]:MethodDeclaration[85268-87321]"
  }, {
    "left" : "private _decodeSplitEscaped(value int, bytesRead int) : int",
    "right" : "private _decodeSplitEscaped(value int, bytesRead int) : int",
    "info" : "MethodDeclaration[87293-89309]:MethodDeclaration[87327-89343]"
  }, {
    "left" : "protected _startString() : ",
    "right" : "protected _startString() : ",
    "info" : "MethodDeclaration[89529-90416]:MethodDeclaration[89563-90450]"
  }, {
    "left" : "private _finishRegularString() : ",
    "right" : "private _finishRegularString() : ",
    "info" : "MethodDeclaration[90422-94419]:MethodDeclaration[90456-94453]"
  }, {
    "left" : "protected _startAposString() : ",
    "right" : "protected _startAposString() : ",
    "info" : "MethodDeclaration[94425-95293]:MethodDeclaration[94459-95327]"
  }, {
    "left" : "private _finishAposString() : ",
    "right" : "private _finishAposString() : ",
    "info" : "MethodDeclaration[95299-99235]:MethodDeclaration[95333-99269]"
  }, {
    "left" : "private _decodeSplitMultiByte(c int, type int, gotNext boolean) : boolean",
    "right" : "private _decodeSplitMultiByte(c int, type int, gotNext boolean) : boolean",
    "info" : "MethodDeclaration[99245-101071]:MethodDeclaration[99279-101105]"
  }, {
    "left" : "private _decodeSplitUTF8_3(prev int, prevCount int, next int) : boolean",
    "right" : "private _decodeSplitUTF8_3(prev int, prevCount int, next int) : boolean",
    "info" : "MethodDeclaration[101077-101847]:MethodDeclaration[101111-101881]"
  }, {
    "left" : "private _decodeSplitUTF8_4(prev int, prevCount int, next int) : boolean",
    "right" : "private _decodeSplitUTF8_4(prev int, prevCount int, next int) : boolean",
    "info" : "MethodDeclaration[101979-103456]:MethodDeclaration[102013-103490]"
  }, {
    "left" : "private _decodeCharEscape() : int",
    "right" : "private _decodeCharEscape() : int",
    "info" : "MethodDeclaration[103669-103935]:MethodDeclaration[103703-103969]"
  }, {
    "left" : "private _decodeFastCharEscape() : int",
    "right" : "private _decodeFastCharEscape() : int",
    "info" : "MethodDeclaration[103941-105716]:MethodDeclaration[103975-105750]"
  }, {
    "left" : "private _decodeUTF8_2(c int, d int) : int",
    "right" : "private _decodeUTF8_2(c int, d int) : int",
    "info" : "MethodDeclaration[105929-106151]:MethodDeclaration[105963-106185]"
  }, {
    "left" : "private _decodeUTF8_3(c int, d int, e int) : int",
    "right" : "private _decodeUTF8_3(c int, d int, e int) : int",
    "info" : "MethodDeclaration[106157-106530]:MethodDeclaration[106191-106564]"
  }, {
    "left" : "private _decodeUTF8_4(c int, d int, e int, f int) : int",
    "right" : "private _decodeUTF8_4(c int, d int, e int, f int) : int",
    "info" : "MethodDeclaration[106662-107178]:MethodDeclaration[106696-107212]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2642-2648]:Modifier[2642-2648]"
  }, {
    "left" : "NonBlockingJsonParser",
    "right" : "NonBlockingJsonParser",
    "info" : "SimpleName[2649-2670]:SimpleName[2649-2670]"
  }, {
    "left" : "IOContext ctxt",
    "right" : "IOContext ctxt",
    "info" : "SingleVariableDeclaration[2671-2685]:SingleVariableDeclaration[2671-2685]"
  }, {
    "left" : "int parserFeatures",
    "right" : "int parserFeatures",
    "info" : "SingleVariableDeclaration[2687-2705]:SingleVariableDeclaration[2687-2705]"
  }, {
    "left" : "ByteQuadsCanonicalizer sym",
    "right" : "ByteQuadsCanonicalizer sym",
    "info" : "SingleVariableDeclaration[2719-2745]:SingleVariableDeclaration[2719-2745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2751-2800]:Block[2751-2800]"
  }, {
    "left" : "super(ctxt, parserFeatures, sym);",
    "right" : "super(ctxt, parserFeatures, sym);",
    "info" : "SuperConstructorInvocation[2761-2794]:SuperConstructorInvocation[2761-2794]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3003-3012]:MarkerAnnotation[3003-3012]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3017-3023]:Modifier[3017-3023]"
  }, {
    "left" : "ByteArrayFeeder",
    "right" : "ByteArrayFeeder",
    "info" : "SimpleType[3024-3039]:SimpleType[3024-3039]"
  }, {
    "left" : "getNonBlockingInputFeeder",
    "right" : "getNonBlockingInputFeeder",
    "info" : "SimpleName[3040-3065]:SimpleName[3040-3065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3068-3096]:Block[3068-3096]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[3078-3090]:ReturnStatement[3078-3090]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3102-3111]:MarkerAnnotation[3102-3111]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3116-3122]:Modifier[3116-3122]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[3123-3128]:Modifier[3123-3128]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[3129-3136]:PrimitiveType[3129-3136]"
  }, {
    "left" : "needMoreInput",
    "right" : "needMoreInput",
    "info" : "SimpleName[3137-3150]:SimpleName[3137-3150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3153-3216]:Block[3153-3216]"
  }, {
    "left" : "return (_inputPtr >=_inputEnd) && !_endOfInput;",
    "right" : "return (_inputPtr >=_inputEnd) && !_endOfInput;",
    "info" : "ReturnStatement[3163-3210]:ReturnStatement[3163-3210]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3222-3231]:MarkerAnnotation[3222-3231]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3236-3242]:Modifier[3236-3242]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3243-3247]:PrimitiveType[3243-3247]"
  }, {
    "left" : "feedInput",
    "right" : "feedInput",
    "info" : "SimpleName[3248-3257]:SimpleName[3248-3257]"
  }, {
    "left" : "byte[] buf",
    "right" : "byte[] buf",
    "info" : "SingleVariableDeclaration[3258-3268]:SingleVariableDeclaration[3258-3268]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[3270-3279]:SingleVariableDeclaration[3270-3279]"
  }, {
    "left" : "int end",
    "right" : "int end",
    "info" : "SingleVariableDeclaration[3281-3288]:SingleVariableDeclaration[3281-3288]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[3297-3308]:SimpleType[3297-3308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3313-4224]:Block[3313-4258]"
  }, {
    "left" : "if (_inputPtr < _inputEnd)",
    "right" : "if (_inputPtr < _inputEnd)",
    "info" : "IfStatement[3364-3513]:IfStatement[3364-3513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3391-3513]:Block[3391-3513]"
  }, {
    "left" : "_reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);",
    "right" : "_reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);",
    "info" : "ExpressionStatement[3405-3503]:ExpressionStatement[3405-3503]"
  }, {
    "left" : "if (end < start)",
    "right" : "if (end < start)",
    "info" : "IfStatement[3522-3635]:IfStatement[3522-3635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3539-3635]:Block[3539-3635]"
  }, {
    "left" : "_reportError(\"Input end (%d) may not be before start (%d)\", end, start);",
    "right" : "_reportError(\"Input end (%d) may not be before start (%d)\", end, start);",
    "info" : "ExpressionStatement[3553-3625]:ExpressionStatement[3553-3625]"
  }, {
    "left" : "if (_endOfInput)",
    "right" : "if (_endOfInput)",
    "info" : "IfStatement[3702-3799]:IfStatement[3702-3799]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3719-3799]:Block[3719-3799]"
  }, {
    "left" : "_reportError(\"Already closed, can not feed more input\");",
    "right" : "_reportError(\"Already closed, can not feed more input\");",
    "info" : "ExpressionStatement[3733-3789]:ExpressionStatement[3733-3789]"
  }, {
    "left" : "_currInputProcessed += _origBufferLen;",
    "right" : "_currInputProcessed += _origBufferLen;",
    "info" : "ExpressionStatement[3849-3887]:ExpressionStatement[3849-3887]"
  }, {
    "left" : "_currInputRowStart = start - (_inputEnd - _currInputRowStart);",
    "right" : "_currInputRowStart = start - (_inputEnd - _currInputRowStart);",
    "info" : "ExpressionStatement[3994-4056]:ExpressionStatement[3994-4056]"
  }, {
    "left" : "_inputBuffer = buf;",
    "right" : "_inputBuffer = buf;",
    "info" : "ExpressionStatement[4109-4128]:ExpressionStatement[4143-4162]"
  }, {
    "left" : "_inputPtr = start;",
    "right" : "_inputPtr = start;",
    "info" : "ExpressionStatement[4137-4155]:ExpressionStatement[4171-4189]"
  }, {
    "left" : "_inputEnd = end;",
    "right" : "_inputEnd = end;",
    "info" : "ExpressionStatement[4164-4180]:ExpressionStatement[4198-4214]"
  }, {
    "left" : "_origBufferLen = end - start;",
    "right" : "_origBufferLen = end - start;",
    "info" : "ExpressionStatement[4189-4218]:ExpressionStatement[4223-4252]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4230-4239]:MarkerAnnotation[4264-4273]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4244-4250]:Modifier[4278-4284]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4251-4255]:PrimitiveType[4285-4289]"
  }, {
    "left" : "endOfInput",
    "right" : "endOfInput",
    "info" : "SimpleName[4256-4266]:SimpleName[4290-4300]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4269-4304]:Block[4303-4338]"
  }, {
    "left" : "_endOfInput = true;",
    "right" : "_endOfInput = true;",
    "info" : "ExpressionStatement[4279-4298]:ExpressionStatement[4313-4332]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5039-5048]:MarkerAnnotation[5073-5082]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5053-5059]:Modifier[5087-5093]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[5060-5063]:PrimitiveType[5094-5097]"
  }, {
    "left" : "releaseBuffered",
    "right" : "releaseBuffered",
    "info" : "SimpleName[5064-5079]:SimpleName[5098-5113]"
  }, {
    "left" : "OutputStream out",
    "right" : "OutputStream out",
    "info" : "SingleVariableDeclaration[5080-5096]:SingleVariableDeclaration[5114-5130]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[5105-5116]:SimpleType[5139-5150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5117-5279]:Block[5151-5313]"
  }, {
    "left" : "int avail = _inputEnd - _inputPtr;",
    "right" : "int avail = _inputEnd - _inputPtr;",
    "info" : "VariableDeclarationStatement[5127-5161]:VariableDeclarationStatement[5161-5195]"
  }, {
    "left" : "if (avail > 0)",
    "right" : "if (avail > 0)",
    "info" : "IfStatement[5170-5251]:IfStatement[5204-5285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5185-5251]:Block[5219-5285]"
  }, {
    "left" : "out.write(_inputBuffer, _inputPtr, avail);",
    "right" : "out.write(_inputBuffer, _inputPtr, avail);",
    "info" : "ExpressionStatement[5199-5241]:ExpressionStatement[5233-5275]"
  }, {
    "left" : "return avail;",
    "right" : "return avail;",
    "info" : "ReturnStatement[5260-5273]:ReturnStatement[5294-5307]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5393-5402]:MarkerAnnotation[5427-5436]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5407-5416]:Modifier[5441-5450]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[5417-5421]:PrimitiveType[5451-5455]"
  }, {
    "left" : "_decodeEscaped",
    "right" : "_decodeEscaped",
    "info" : "SimpleName[5422-5436]:SimpleName[5456-5470]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[5446-5457]:SimpleType[5480-5491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5458-5522]:Block[5492-5556]"
  }, {
    "left" : "VersionUtil.throwInternal();",
    "right" : "VersionUtil.throwInternal();",
    "info" : "ExpressionStatement[5468-5496]:ExpressionStatement[5502-5530]"
  }, {
    "left" : "return ' ';",
    "right" : "return ' ';",
    "info" : "ReturnStatement[5505-5516]:ReturnStatement[5539-5550]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5723-5732]:MarkerAnnotation[5757-5766]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5737-5743]:Modifier[5771-5777]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[5744-5753]:SimpleType[5778-5787]"
  }, {
    "left" : "nextToken",
    "right" : "nextToken",
    "info" : "SimpleName[5754-5763]:SimpleName[5788-5797]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[5773-5784]:SimpleType[5807-5818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5789-7819]:Block[5823-7853]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[5955-6535]:IfStatement[5989-6569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5983-6535]:Block[6017-6569]"
  }, {
    "left" : "if (_closed)",
    "right" : "if (_closed)",
    "info" : "IfStatement[5997-6054]:IfStatement[6031-6088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6010-6054]:Block[6044-6088]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[6028-6040]:ReturnStatement[6062-6074]"
  }, {
    "left" : "if (_endOfInput)",
    "right" : "if (_endOfInput)",
    "info" : "IfStatement[6129-6481]:IfStatement[6163-6515]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6146-6481]:Block[6180-6515]"
  }, {
    "left" : "if (_currToken == JsonToken.NOT_AVAILABLE)",
    "right" : "if (_currToken == JsonToken.NOT_AVAILABLE)",
    "info" : "IfStatement[6313-6425]:IfStatement[6347-6459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6356-6425]:Block[6390-6459]"
  }, {
    "left" : "return _finishTokenWithEOF();",
    "right" : "return _finishTokenWithEOF();",
    "info" : "ReturnStatement[6378-6407]:ReturnStatement[6412-6441]"
  }, {
    "left" : "return _eofAsNextToken();",
    "right" : "return _eofAsNextToken();",
    "info" : "ReturnStatement[6442-6467]:ReturnStatement[6476-6501]"
  }, {
    "left" : "return JsonToken.NOT_AVAILABLE;",
    "right" : "return JsonToken.NOT_AVAILABLE;",
    "info" : "ReturnStatement[6494-6525]:ReturnStatement[6528-6559]"
  }, {
    "left" : "if (_currToken == JsonToken.NOT_AVAILABLE)",
    "right" : "if (_currToken == JsonToken.NOT_AVAILABLE)",
    "info" : "IfStatement[6586-6675]:IfStatement[6620-6709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6629-6675]:Block[6663-6709]"
  }, {
    "left" : "return _finishToken();",
    "right" : "return _finishToken();",
    "info" : "ReturnStatement[6643-6665]:ReturnStatement[6677-6699]"
  }, {
    "left" : "_numTypesValid = NR_UNKNOWN;",
    "right" : "_numTypesValid = NR_UNKNOWN;",
    "info" : "ExpressionStatement[6750-6778]:ExpressionStatement[6784-6812]"
  }, {
    "left" : "_tokenInputTotal = _currInputProcessed + _inputPtr;",
    "right" : "_tokenInputTotal = _currInputProcessed + _inputPtr;",
    "info" : "ExpressionStatement[6787-6838]:ExpressionStatement[6821-6872]"
  }, {
    "left" : "_binaryValue = null;",
    "right" : "_binaryValue = null;",
    "info" : "ExpressionStatement[6895-6915]:ExpressionStatement[6929-6949]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[6924-6966]:VariableDeclarationStatement[6958-7000]"
  }, {
    "left" : "switch (_majorState) {\n        case MAJOR_INITIAL:\n            return _startDocument(ch);\n\n        case MAJOR_ROOT:\n            return _startValue(ch);\n\n        case MAJOR_OBJECT_FIELD_FIRST: // expect field-name or end-object\n            return _startFieldName(ch);\n        case MAJOR_OBJECT_FIELD_NEXT: // expect comma + field-name or end-object\n            return _startFieldNameAfterComma(ch);\n\n        case MAJOR_OBJECT_VALUE: // expect colon, followed by value\n            return _startValueExpectColon(ch);\n\n        case MAJOR_ARRAY_ELEMENT_FIRST: // expect value or end-array\n            return _startValue(ch);\n\n        case MAJOR_ARRAY_ELEMENT_NEXT: // expect leading comma + value or end-array\n            return _startValueExpectComma(ch);\n\n        default:\n        }",
    "right" : "switch (_majorState) {\n        case MAJOR_INITIAL:\n            return _startDocument(ch);\n\n        case MAJOR_ROOT:\n            return _startValue(ch);\n\n        case MAJOR_OBJECT_FIELD_FIRST: // expect field-name or end-object\n            return _startFieldName(ch);\n        case MAJOR_OBJECT_FIELD_NEXT: // expect comma + field-name or end-object\n            return _startFieldNameAfterComma(ch);\n\n        case MAJOR_OBJECT_VALUE: // expect colon, followed by value\n            return _startValueExpectColon(ch);\n\n        case MAJOR_ARRAY_ELEMENT_FIRST: // expect value or end-array\n            return _startValue(ch);\n\n        case MAJOR_ARRAY_ELEMENT_NEXT: // expect leading comma + value or end-array\n            return _startValueExpectComma(ch);\n\n        default:\n        }",
    "info" : "SwitchStatement[6976-7755]:SwitchStatement[7010-7789]"
  }, {
    "left" : "case MAJOR_INITIAL:",
    "right" : "case MAJOR_INITIAL:",
    "info" : "SwitchCase[7007-7026]:SwitchCase[7041-7060]"
  }, {
    "left" : "return _startDocument(ch);",
    "right" : "return _startDocument(ch);",
    "info" : "ReturnStatement[7039-7065]:ReturnStatement[7073-7099]"
  }, {
    "left" : "case MAJOR_ROOT:",
    "right" : "case MAJOR_ROOT:",
    "info" : "SwitchCase[7075-7091]:SwitchCase[7109-7125]"
  }, {
    "left" : "return _startValue(ch);",
    "right" : "return _startValue(ch);",
    "info" : "ReturnStatement[7104-7127]:ReturnStatement[7138-7161]"
  }, {
    "left" : "case MAJOR_OBJECT_FIELD_FIRST:",
    "right" : "case MAJOR_OBJECT_FIELD_FIRST:",
    "info" : "SwitchCase[7137-7167]:SwitchCase[7171-7201]"
  }, {
    "left" : "return _startFieldName(ch);",
    "right" : "return _startFieldName(ch);",
    "info" : "ReturnStatement[7215-7242]:ReturnStatement[7249-7276]"
  }, {
    "left" : "case MAJOR_OBJECT_FIELD_NEXT:",
    "right" : "case MAJOR_OBJECT_FIELD_NEXT:",
    "info" : "SwitchCase[7251-7280]:SwitchCase[7285-7314]"
  }, {
    "left" : "return _startFieldNameAfterComma(ch);",
    "right" : "return _startFieldNameAfterComma(ch);",
    "info" : "ReturnStatement[7336-7373]:ReturnStatement[7370-7407]"
  }, {
    "left" : "case MAJOR_OBJECT_VALUE:",
    "right" : "case MAJOR_OBJECT_VALUE:",
    "info" : "SwitchCase[7383-7407]:SwitchCase[7417-7441]"
  }, {
    "left" : "return _startValueExpectColon(ch);",
    "right" : "return _startValueExpectColon(ch);",
    "info" : "ReturnStatement[7455-7489]:ReturnStatement[7489-7523]"
  }, {
    "left" : "case MAJOR_ARRAY_ELEMENT_FIRST:",
    "right" : "case MAJOR_ARRAY_ELEMENT_FIRST:",
    "info" : "SwitchCase[7499-7530]:SwitchCase[7533-7564]"
  }, {
    "left" : "return _startValue(ch);",
    "right" : "return _startValue(ch);",
    "info" : "ReturnStatement[7572-7595]:ReturnStatement[7606-7629]"
  }, {
    "left" : "case MAJOR_ARRAY_ELEMENT_NEXT:",
    "right" : "case MAJOR_ARRAY_ELEMENT_NEXT:",
    "info" : "SwitchCase[7605-7635]:SwitchCase[7639-7669]"
  }, {
    "left" : "return _startValueExpectComma(ch);",
    "right" : "return _startValueExpectComma(ch);",
    "info" : "ReturnStatement[7693-7727]:ReturnStatement[7727-7761]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[7737-7745]:SwitchCase[7771-7779]"
  }, {
    "left" : "VersionUtil.throwInternal();",
    "right" : "VersionUtil.throwInternal();",
    "info" : "ExpressionStatement[7764-7792]:ExpressionStatement[7798-7826]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[7801-7813]:ReturnStatement[7835-7847]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[8056-8065]:Modifier[8090-8099]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[8066-8071]:Modifier[8100-8105]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[8072-8081]:SimpleType[8106-8115]"
  }, {
    "left" : "_finishToken",
    "right" : "_finishToken",
    "info" : "SimpleName[8082-8094]:SimpleName[8116-8128]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[8104-8115]:SimpleType[8138-8149]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8120-13041]:Block[8154-13075]"
  }, {
    "left" : "switch (_minorState) {\n        case MINOR_ROOT_BOM:\n            return _finishBOM(_pending32);\n        case MINOR_FIELD_LEADING_WS:\n            return _startFieldName(_inputBuffer[_inputPtr++] & 0xFF);\n        case MINOR_FIELD_LEADING_COMMA:\n            return _startFieldNameAfterComma(_inputBuffer[_inputPtr++] & 0xFF);\n\n        // Field name states\n        case MINOR_FIELD_NAME:\n            return _parseEscapedName(_quadLength,  _pending32, _pendingBytes);\n        case MINOR_FIELD_NAME_ESCAPE:\n            return _finishFieldWithEscape();\n        case MINOR_FIELD_APOS_NAME:\n            return _finishAposName(_quadLength,  _pending32, _pendingBytes);\n        case MINOR_FIELD_UNQUOTED_NAME:\n            return _finishUnquotedName(_quadLength,  _pending32, _pendingBytes);\n\n        // Value states\n\n        case MINOR_VALUE_LEADING_WS:\n            return _startValue(_inputBuffer[_inputPtr++] & 0xFF);\n        case MINOR_VALUE_WS_AFTER_COMMA:\n            return _startValueAfterComma(_inputBuffer[_inputPtr++] & 0xFF);\n        case MINOR_VALUE_EXPECTING_COMMA:\n            return _startValueExpectComma(_inputBuffer[_inputPtr++] & 0xFF);\n        case MINOR_VALUE_EXPECTING_COLON:\n            return _startValueExpectColon(_inputBuffer[_inputPtr++] & 0xFF);\n\n        case MINOR_VALUE_TOKEN_NULL:\n            return _finishKeywordToken(\"null\", _pending32, JsonToken.VALUE_NULL);\n        case MINOR_VALUE_TOKEN_TRUE:\n            return _finishKeywordToken(\"true\", _pending32, JsonToken.VALUE_TRUE);\n        case MINOR_VALUE_TOKEN_FALSE:\n            return _finishKeywordToken(\"false\", _pending32, JsonToken.VALUE_FALSE);\n        case MINOR_VALUE_TOKEN_NON_STD:\n            return _finishNonStdToken(_nonStdTokenType, _pending32);\n\n        case MINOR_NUMBER_MINUS:\n            return _finishNumberMinus(_inputBuffer[_inputPtr++] & 0xFF);\n        case MINOR_NUMBER_ZERO:\n            return _finishNumberLeadingZeroes();\n        case MINOR_NUMBER_MINUSZERO:\n            return _finishNumberLeadingNegZeroes();\n        case MINOR_NUMBER_INTEGER_DIGITS:\n            return _finishNumberIntegralPart(_textBuffer.getBufferWithoutReset(),\n                    _textBuffer.getCurrentSegmentSize());\n        case MINOR_NUMBER_FRACTION_DIGITS:\n            return _finishFloatFraction();\n        case MINOR_NUMBER_EXPONENT_MARKER:\n            return _finishFloatExponent(true, _inputBuffer[_inputPtr++] & 0xFF);\n        case MINOR_NUMBER_EXPONENT_DIGITS:\n            return _finishFloatExponent(false, _inputBuffer[_inputPtr++] & 0xFF);\n\n        case MINOR_VALUE_STRING:\n            return _finishRegularString();\n        case MINOR_VALUE_STRING_UTF8_2:\n            _textBuffer.append((char) _decodeUTF8_2(_pending32, _inputBuffer[_inputPtr++]));\n            if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING) {\n                return _finishAposString();\n            }\n            return _finishRegularString();\n        case MINOR_VALUE_STRING_UTF8_3:\n            if (!_decodeSplitUTF8_3(_pending32, _pendingBytes, _inputBuffer[_inputPtr++])) {\n                return JsonToken.NOT_AVAILABLE;\n            }\n            if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING) {\n                return _finishAposString();\n            }\n            return _finishRegularString();\n        case MINOR_VALUE_STRING_UTF8_4:\n            if (!_decodeSplitUTF8_4(_pending32, _pendingBytes, _inputBuffer[_inputPtr++])) {\n                return JsonToken.NOT_AVAILABLE;\n            }\n            if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING) {\n                return _finishAposString();\n            }\n            return _finishRegularString();\n\n        case MINOR_VALUE_STRING_ESCAPE:\n            {\n                int c = _decodeSplitEscaped(_quoted32, _quotedDigits);\n                if (c < 0) {\n                    return JsonToken.NOT_AVAILABLE;\n                }\n                _textBuffer.append((char) c);\n            }\n            if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING) {\n                return _finishAposString();\n            }\n            return _finishRegularString();\n\n        case MINOR_VALUE_APOS_STRING:\n            return _finishAposString();\n\n        case MINOR_VALUE_TOKEN_ERROR: // case of \"almost token\", just need tokenize for error\n            return _finishErrorToken();\n\n        // Comments\n            \n        case MINOR_COMMENT_LEADING_SLASH:\n            return _startSlashComment(_pending32);\n        case MINOR_COMMENT_CLOSING_ASTERISK:\n            return _finishCComment(_pending32, true);\n        case MINOR_COMMENT_C:\n            return _finishCComment(_pending32, false);\n        case MINOR_COMMENT_CPP:\n            return _finishCppComment(_pending32);\n        case MINOR_COMMENT_YAML:\n            return _finishHashComment(_pending32);\n        }",
    "right" : "switch (_minorState) {\n        case MINOR_ROOT_BOM:\n            return _finishBOM(_pending32);\n        case MINOR_FIELD_LEADING_WS:\n            return _startFieldName(_inputBuffer[_inputPtr++] & 0xFF);\n        case MINOR_FIELD_LEADING_COMMA:\n            return _startFieldNameAfterComma(_inputBuffer[_inputPtr++] & 0xFF);\n\n        // Field name states\n        case MINOR_FIELD_NAME:\n            return _parseEscapedName(_quadLength,  _pending32, _pendingBytes);\n        case MINOR_FIELD_NAME_ESCAPE:\n            return _finishFieldWithEscape();\n        case MINOR_FIELD_APOS_NAME:\n            return _finishAposName(_quadLength,  _pending32, _pendingBytes);\n        case MINOR_FIELD_UNQUOTED_NAME:\n            return _finishUnquotedName(_quadLength,  _pending32, _pendingBytes);\n\n        // Value states\n\n        case MINOR_VALUE_LEADING_WS:\n            return _startValue(_inputBuffer[_inputPtr++] & 0xFF);\n        case MINOR_VALUE_WS_AFTER_COMMA:\n            return _startValueAfterComma(_inputBuffer[_inputPtr++] & 0xFF);\n        case MINOR_VALUE_EXPECTING_COMMA:\n            return _startValueExpectComma(_inputBuffer[_inputPtr++] & 0xFF);\n        case MINOR_VALUE_EXPECTING_COLON:\n            return _startValueExpectColon(_inputBuffer[_inputPtr++] & 0xFF);\n\n        case MINOR_VALUE_TOKEN_NULL:\n            return _finishKeywordToken(\"null\", _pending32, JsonToken.VALUE_NULL);\n        case MINOR_VALUE_TOKEN_TRUE:\n            return _finishKeywordToken(\"true\", _pending32, JsonToken.VALUE_TRUE);\n        case MINOR_VALUE_TOKEN_FALSE:\n            return _finishKeywordToken(\"false\", _pending32, JsonToken.VALUE_FALSE);\n        case MINOR_VALUE_TOKEN_NON_STD:\n            return _finishNonStdToken(_nonStdTokenType, _pending32);\n\n        case MINOR_NUMBER_MINUS:\n            return _finishNumberMinus(_inputBuffer[_inputPtr++] & 0xFF);\n        case MINOR_NUMBER_ZERO:\n            return _finishNumberLeadingZeroes();\n        case MINOR_NUMBER_MINUSZERO:\n            return _finishNumberLeadingNegZeroes();\n        case MINOR_NUMBER_INTEGER_DIGITS:\n            return _finishNumberIntegralPart(_textBuffer.getBufferWithoutReset(),\n                    _textBuffer.getCurrentSegmentSize());\n        case MINOR_NUMBER_FRACTION_DIGITS:\n            return _finishFloatFraction();\n        case MINOR_NUMBER_EXPONENT_MARKER:\n            return _finishFloatExponent(true, _inputBuffer[_inputPtr++] & 0xFF);\n        case MINOR_NUMBER_EXPONENT_DIGITS:\n            return _finishFloatExponent(false, _inputBuffer[_inputPtr++] & 0xFF);\n\n        case MINOR_VALUE_STRING:\n            return _finishRegularString();\n        case MINOR_VALUE_STRING_UTF8_2:\n            _textBuffer.append((char) _decodeUTF8_2(_pending32, _inputBuffer[_inputPtr++]));\n            if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING) {\n                return _finishAposString();\n            }\n            return _finishRegularString();\n        case MINOR_VALUE_STRING_UTF8_3:\n            if (!_decodeSplitUTF8_3(_pending32, _pendingBytes, _inputBuffer[_inputPtr++])) {\n                return JsonToken.NOT_AVAILABLE;\n            }\n            if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING) {\n                return _finishAposString();\n            }\n            return _finishRegularString();\n        case MINOR_VALUE_STRING_UTF8_4:\n            if (!_decodeSplitUTF8_4(_pending32, _pendingBytes, _inputBuffer[_inputPtr++])) {\n                return JsonToken.NOT_AVAILABLE;\n            }\n            if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING) {\n                return _finishAposString();\n            }\n            return _finishRegularString();\n\n        case MINOR_VALUE_STRING_ESCAPE:\n            {\n                int c = _decodeSplitEscaped(_quoted32, _quotedDigits);\n                if (c < 0) {\n                    return JsonToken.NOT_AVAILABLE;\n                }\n                _textBuffer.append((char) c);\n            }\n            if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING) {\n                return _finishAposString();\n            }\n            return _finishRegularString();\n\n        case MINOR_VALUE_APOS_STRING:\n            return _finishAposString();\n\n        case MINOR_VALUE_TOKEN_ERROR: // case of \"almost token\", just need tokenize for error\n            return _finishErrorToken();\n\n        // Comments\n            \n        case MINOR_COMMENT_LEADING_SLASH:\n            return _startSlashComment(_pending32);\n        case MINOR_COMMENT_CLOSING_ASTERISK:\n            return _finishCComment(_pending32, true);\n        case MINOR_COMMENT_C:\n            return _finishCComment(_pending32, false);\n        case MINOR_COMMENT_CPP:\n            return _finishCppComment(_pending32);\n        case MINOR_COMMENT_YAML:\n            return _finishHashComment(_pending32);\n        }",
    "info" : "SwitchStatement[8189-12977]:SwitchStatement[8223-13011]"
  }, {
    "left" : "case MINOR_ROOT_BOM:",
    "right" : "case MINOR_ROOT_BOM:",
    "info" : "SwitchCase[8220-8240]:SwitchCase[8254-8274]"
  }, {
    "left" : "return _finishBOM(_pending32);",
    "right" : "return _finishBOM(_pending32);",
    "info" : "ReturnStatement[8253-8283]:ReturnStatement[8287-8317]"
  }, {
    "left" : "case MINOR_FIELD_LEADING_WS:",
    "right" : "case MINOR_FIELD_LEADING_WS:",
    "info" : "SwitchCase[8292-8320]:SwitchCase[8326-8354]"
  }, {
    "left" : "return _startFieldName(_inputBuffer[_inputPtr++] & 0xFF);",
    "right" : "return _startFieldName(_inputBuffer[_inputPtr++] & 0xFF);",
    "info" : "ReturnStatement[8333-8390]:ReturnStatement[8367-8424]"
  }, {
    "left" : "case MINOR_FIELD_LEADING_COMMA:",
    "right" : "case MINOR_FIELD_LEADING_COMMA:",
    "info" : "SwitchCase[8399-8430]:SwitchCase[8433-8464]"
  }, {
    "left" : "return _startFieldNameAfterComma(_inputBuffer[_inputPtr++] & 0xFF);",
    "right" : "return _startFieldNameAfterComma(_inputBuffer[_inputPtr++] & 0xFF);",
    "info" : "ReturnStatement[8443-8510]:ReturnStatement[8477-8544]"
  }, {
    "left" : "case MINOR_FIELD_NAME:",
    "right" : "case MINOR_FIELD_NAME:",
    "info" : "SwitchCase[8549-8571]:SwitchCase[8583-8605]"
  }, {
    "left" : "return _parseEscapedName(_quadLength,  _pending32, _pendingBytes);",
    "right" : "return _parseEscapedName(_quadLength,  _pending32, _pendingBytes);",
    "info" : "ReturnStatement[8584-8650]:ReturnStatement[8618-8684]"
  }, {
    "left" : "case MINOR_FIELD_NAME_ESCAPE:",
    "right" : "case MINOR_FIELD_NAME_ESCAPE:",
    "info" : "SwitchCase[8659-8688]:SwitchCase[8693-8722]"
  }, {
    "left" : "return _finishFieldWithEscape();",
    "right" : "return _finishFieldWithEscape();",
    "info" : "ReturnStatement[8701-8733]:ReturnStatement[8735-8767]"
  }, {
    "left" : "case MINOR_FIELD_APOS_NAME:",
    "right" : "case MINOR_FIELD_APOS_NAME:",
    "info" : "SwitchCase[8742-8769]:SwitchCase[8776-8803]"
  }, {
    "left" : "return _finishAposName(_quadLength,  _pending32, _pendingBytes);",
    "right" : "return _finishAposName(_quadLength,  _pending32, _pendingBytes);",
    "info" : "ReturnStatement[8782-8846]:ReturnStatement[8816-8880]"
  }, {
    "left" : "case MINOR_FIELD_UNQUOTED_NAME:",
    "right" : "case MINOR_FIELD_UNQUOTED_NAME:",
    "info" : "SwitchCase[8855-8886]:SwitchCase[8889-8920]"
  }, {
    "left" : "return _finishUnquotedName(_quadLength,  _pending32, _pendingBytes);",
    "right" : "return _finishUnquotedName(_quadLength,  _pending32, _pendingBytes);",
    "info" : "ReturnStatement[8899-8967]:ReturnStatement[8933-9001]"
  }, {
    "left" : "case MINOR_VALUE_LEADING_WS:",
    "right" : "case MINOR_VALUE_LEADING_WS:",
    "info" : "SwitchCase[9002-9030]:SwitchCase[9036-9064]"
  }, {
    "left" : "return _startValue(_inputBuffer[_inputPtr++] & 0xFF);",
    "right" : "return _startValue(_inputBuffer[_inputPtr++] & 0xFF);",
    "info" : "ReturnStatement[9043-9096]:ReturnStatement[9077-9130]"
  }, {
    "left" : "case MINOR_VALUE_WS_AFTER_COMMA:",
    "right" : "case MINOR_VALUE_WS_AFTER_COMMA:",
    "info" : "SwitchCase[9105-9137]:SwitchCase[9139-9171]"
  }, {
    "left" : "return _startValueAfterComma(_inputBuffer[_inputPtr++] & 0xFF);",
    "right" : "return _startValueAfterComma(_inputBuffer[_inputPtr++] & 0xFF);",
    "info" : "ReturnStatement[9150-9213]:ReturnStatement[9184-9247]"
  }, {
    "left" : "case MINOR_VALUE_EXPECTING_COMMA:",
    "right" : "case MINOR_VALUE_EXPECTING_COMMA:",
    "info" : "SwitchCase[9222-9255]:SwitchCase[9256-9289]"
  }, {
    "left" : "return _startValueExpectComma(_inputBuffer[_inputPtr++] & 0xFF);",
    "right" : "return _startValueExpectComma(_inputBuffer[_inputPtr++] & 0xFF);",
    "info" : "ReturnStatement[9268-9332]:ReturnStatement[9302-9366]"
  }, {
    "left" : "case MINOR_VALUE_EXPECTING_COLON:",
    "right" : "case MINOR_VALUE_EXPECTING_COLON:",
    "info" : "SwitchCase[9341-9374]:SwitchCase[9375-9408]"
  }, {
    "left" : "return _startValueExpectColon(_inputBuffer[_inputPtr++] & 0xFF);",
    "right" : "return _startValueExpectColon(_inputBuffer[_inputPtr++] & 0xFF);",
    "info" : "ReturnStatement[9387-9451]:ReturnStatement[9421-9485]"
  }, {
    "left" : "case MINOR_VALUE_TOKEN_NULL:",
    "right" : "case MINOR_VALUE_TOKEN_NULL:",
    "info" : "SwitchCase[9461-9489]:SwitchCase[9495-9523]"
  }, {
    "left" : "return _finishKeywordToken(\"null\", _pending32, JsonToken.VALUE_NULL);",
    "right" : "return _finishKeywordToken(\"null\", _pending32, JsonToken.VALUE_NULL);",
    "info" : "ReturnStatement[9502-9571]:ReturnStatement[9536-9605]"
  }, {
    "left" : "case MINOR_VALUE_TOKEN_TRUE:",
    "right" : "case MINOR_VALUE_TOKEN_TRUE:",
    "info" : "SwitchCase[9580-9608]:SwitchCase[9614-9642]"
  }, {
    "left" : "return _finishKeywordToken(\"true\", _pending32, JsonToken.VALUE_TRUE);",
    "right" : "return _finishKeywordToken(\"true\", _pending32, JsonToken.VALUE_TRUE);",
    "info" : "ReturnStatement[9621-9690]:ReturnStatement[9655-9724]"
  }, {
    "left" : "case MINOR_VALUE_TOKEN_FALSE:",
    "right" : "case MINOR_VALUE_TOKEN_FALSE:",
    "info" : "SwitchCase[9699-9728]:SwitchCase[9733-9762]"
  }, {
    "left" : "return _finishKeywordToken(\"false\", _pending32, JsonToken.VALUE_FALSE);",
    "right" : "return _finishKeywordToken(\"false\", _pending32, JsonToken.VALUE_FALSE);",
    "info" : "ReturnStatement[9741-9812]:ReturnStatement[9775-9846]"
  }, {
    "left" : "case MINOR_VALUE_TOKEN_NON_STD:",
    "right" : "case MINOR_VALUE_TOKEN_NON_STD:",
    "info" : "SwitchCase[9821-9852]:SwitchCase[9855-9886]"
  }, {
    "left" : "return _finishNonStdToken(_nonStdTokenType, _pending32);",
    "right" : "return _finishNonStdToken(_nonStdTokenType, _pending32);",
    "info" : "ReturnStatement[9865-9921]:ReturnStatement[9899-9955]"
  }, {
    "left" : "case MINOR_NUMBER_MINUS:",
    "right" : "case MINOR_NUMBER_MINUS:",
    "info" : "SwitchCase[9931-9955]:SwitchCase[9965-9989]"
  }, {
    "left" : "return _finishNumberMinus(_inputBuffer[_inputPtr++] & 0xFF);",
    "right" : "return _finishNumberMinus(_inputBuffer[_inputPtr++] & 0xFF);",
    "info" : "ReturnStatement[9968-10028]:ReturnStatement[10002-10062]"
  }, {
    "left" : "case MINOR_NUMBER_ZERO:",
    "right" : "case MINOR_NUMBER_ZERO:",
    "info" : "SwitchCase[10037-10060]:SwitchCase[10071-10094]"
  }, {
    "left" : "return _finishNumberLeadingZeroes();",
    "right" : "return _finishNumberLeadingZeroes();",
    "info" : "ReturnStatement[10073-10109]:ReturnStatement[10107-10143]"
  }, {
    "left" : "case MINOR_NUMBER_MINUSZERO:",
    "right" : "case MINOR_NUMBER_MINUSZERO:",
    "info" : "SwitchCase[10118-10146]:SwitchCase[10152-10180]"
  }, {
    "left" : "return _finishNumberLeadingNegZeroes();",
    "right" : "return _finishNumberLeadingNegZeroes();",
    "info" : "ReturnStatement[10159-10198]:ReturnStatement[10193-10232]"
  }, {
    "left" : "case MINOR_NUMBER_INTEGER_DIGITS:",
    "right" : "case MINOR_NUMBER_INTEGER_DIGITS:",
    "info" : "SwitchCase[10207-10240]:SwitchCase[10241-10274]"
  }, {
    "left" : "return _finishNumberIntegralPart(_textBuffer.getBufferWithoutReset(),\n                    _textBuffer.getCurrentSegmentSize());",
    "right" : "return _finishNumberIntegralPart(_textBuffer.getBufferWithoutReset(),\n                    _textBuffer.getCurrentSegmentSize());",
    "info" : "ReturnStatement[10253-10380]:ReturnStatement[10287-10414]"
  }, {
    "left" : "case MINOR_NUMBER_FRACTION_DIGITS:",
    "right" : "case MINOR_NUMBER_FRACTION_DIGITS:",
    "info" : "SwitchCase[10389-10423]:SwitchCase[10423-10457]"
  }, {
    "left" : "return _finishFloatFraction();",
    "right" : "return _finishFloatFraction();",
    "info" : "ReturnStatement[10436-10466]:ReturnStatement[10470-10500]"
  }, {
    "left" : "case MINOR_NUMBER_EXPONENT_MARKER:",
    "right" : "case MINOR_NUMBER_EXPONENT_MARKER:",
    "info" : "SwitchCase[10475-10509]:SwitchCase[10509-10543]"
  }, {
    "left" : "return _finishFloatExponent(true, _inputBuffer[_inputPtr++] & 0xFF);",
    "right" : "return _finishFloatExponent(true, _inputBuffer[_inputPtr++] & 0xFF);",
    "info" : "ReturnStatement[10522-10590]:ReturnStatement[10556-10624]"
  }, {
    "left" : "case MINOR_NUMBER_EXPONENT_DIGITS:",
    "right" : "case MINOR_NUMBER_EXPONENT_DIGITS:",
    "info" : "SwitchCase[10599-10633]:SwitchCase[10633-10667]"
  }, {
    "left" : "return _finishFloatExponent(false, _inputBuffer[_inputPtr++] & 0xFF);",
    "right" : "return _finishFloatExponent(false, _inputBuffer[_inputPtr++] & 0xFF);",
    "info" : "ReturnStatement[10646-10715]:ReturnStatement[10680-10749]"
  }, {
    "left" : "case MINOR_VALUE_STRING:",
    "right" : "case MINOR_VALUE_STRING:",
    "info" : "SwitchCase[10725-10749]:SwitchCase[10759-10783]"
  }, {
    "left" : "return _finishRegularString();",
    "right" : "return _finishRegularString();",
    "info" : "ReturnStatement[10762-10792]:ReturnStatement[10796-10826]"
  }, {
    "left" : "case MINOR_VALUE_STRING_UTF8_2:",
    "right" : "case MINOR_VALUE_STRING_UTF8_2:",
    "info" : "SwitchCase[10801-10832]:SwitchCase[10835-10866]"
  }, {
    "left" : "_textBuffer.append((char) _decodeUTF8_2(_pending32, _inputBuffer[_inputPtr++]));",
    "right" : "_textBuffer.append((char) _decodeUTF8_2(_pending32, _inputBuffer[_inputPtr++]));",
    "info" : "ExpressionStatement[10845-10925]:ExpressionStatement[10879-10959]"
  }, {
    "left" : "if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING)",
    "right" : "if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING)",
    "info" : "IfStatement[10938-11051]:IfStatement[10972-11085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10992-11051]:Block[11026-11085]"
  }, {
    "left" : "return _finishAposString();",
    "right" : "return _finishAposString();",
    "info" : "ReturnStatement[11010-11037]:ReturnStatement[11044-11071]"
  }, {
    "left" : "return _finishRegularString();",
    "right" : "return _finishRegularString();",
    "info" : "ReturnStatement[11064-11094]:ReturnStatement[11098-11128]"
  }, {
    "left" : "case MINOR_VALUE_STRING_UTF8_3:",
    "right" : "case MINOR_VALUE_STRING_UTF8_3:",
    "info" : "SwitchCase[11103-11134]:SwitchCase[11137-11168]"
  }, {
    "left" : "if (!_decodeSplitUTF8_3(_pending32, _pendingBytes, _inputBuffer[_inputPtr++]))",
    "right" : "if (!_decodeSplitUTF8_3(_pending32, _pendingBytes, _inputBuffer[_inputPtr++]))",
    "info" : "IfStatement[11147-11289]:IfStatement[11181-11323]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11226-11289]:Block[11260-11323]"
  }, {
    "left" : "return JsonToken.NOT_AVAILABLE;",
    "right" : "return JsonToken.NOT_AVAILABLE;",
    "info" : "ReturnStatement[11244-11275]:ReturnStatement[11278-11309]"
  }, {
    "left" : "if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING)",
    "right" : "if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING)",
    "info" : "IfStatement[11302-11415]:IfStatement[11336-11449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11356-11415]:Block[11390-11449]"
  }, {
    "left" : "return _finishAposString();",
    "right" : "return _finishAposString();",
    "info" : "ReturnStatement[11374-11401]:ReturnStatement[11408-11435]"
  }, {
    "left" : "return _finishRegularString();",
    "right" : "return _finishRegularString();",
    "info" : "ReturnStatement[11428-11458]:ReturnStatement[11462-11492]"
  }, {
    "left" : "case MINOR_VALUE_STRING_UTF8_4:",
    "right" : "case MINOR_VALUE_STRING_UTF8_4:",
    "info" : "SwitchCase[11467-11498]:SwitchCase[11501-11532]"
  }, {
    "left" : "if (!_decodeSplitUTF8_4(_pending32, _pendingBytes, _inputBuffer[_inputPtr++]))",
    "right" : "if (!_decodeSplitUTF8_4(_pending32, _pendingBytes, _inputBuffer[_inputPtr++]))",
    "info" : "IfStatement[11511-11653]:IfStatement[11545-11687]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11590-11653]:Block[11624-11687]"
  }, {
    "left" : "return JsonToken.NOT_AVAILABLE;",
    "right" : "return JsonToken.NOT_AVAILABLE;",
    "info" : "ReturnStatement[11608-11639]:ReturnStatement[11642-11673]"
  }, {
    "left" : "if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING)",
    "right" : "if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING)",
    "info" : "IfStatement[11666-11779]:IfStatement[11700-11813]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11720-11779]:Block[11754-11813]"
  }, {
    "left" : "return _finishAposString();",
    "right" : "return _finishAposString();",
    "info" : "ReturnStatement[11738-11765]:ReturnStatement[11772-11799]"
  }, {
    "left" : "return _finishRegularString();",
    "right" : "return _finishRegularString();",
    "info" : "ReturnStatement[11792-11822]:ReturnStatement[11826-11856]"
  }, {
    "left" : "case MINOR_VALUE_STRING_ESCAPE:",
    "right" : "case MINOR_VALUE_STRING_ESCAPE:",
    "info" : "SwitchCase[11832-11863]:SwitchCase[11866-11897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11876-12107]:Block[11910-12141]"
  }, {
    "left" : "int c = _decodeSplitEscaped(_quoted32, _quotedDigits);",
    "right" : "int c = _decodeSplitEscaped(_quoted32, _quotedDigits);",
    "info" : "VariableDeclarationStatement[11894-11948]:VariableDeclarationStatement[11928-11982]"
  }, {
    "left" : "if (c < 0)",
    "right" : "if (c < 0)",
    "info" : "IfStatement[11965-12047]:IfStatement[11999-12081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11976-12047]:Block[12010-12081]"
  }, {
    "left" : "return JsonToken.NOT_AVAILABLE;",
    "right" : "return JsonToken.NOT_AVAILABLE;",
    "info" : "ReturnStatement[11998-12029]:ReturnStatement[12032-12063]"
  }, {
    "left" : "_textBuffer.append((char) c);",
    "right" : "_textBuffer.append((char) c);",
    "info" : "ExpressionStatement[12064-12093]:ExpressionStatement[12098-12127]"
  }, {
    "left" : "if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING)",
    "right" : "if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING)",
    "info" : "IfStatement[12120-12233]:IfStatement[12154-12267]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12174-12233]:Block[12208-12267]"
  }, {
    "left" : "return _finishAposString();",
    "right" : "return _finishAposString();",
    "info" : "ReturnStatement[12192-12219]:ReturnStatement[12226-12253]"
  }, {
    "left" : "return _finishRegularString();",
    "right" : "return _finishRegularString();",
    "info" : "ReturnStatement[12246-12276]:ReturnStatement[12280-12310]"
  }, {
    "left" : "case MINOR_VALUE_APOS_STRING:",
    "right" : "case MINOR_VALUE_APOS_STRING:",
    "info" : "SwitchCase[12286-12315]:SwitchCase[12320-12349]"
  }, {
    "left" : "return _finishAposString();",
    "right" : "return _finishAposString();",
    "info" : "ReturnStatement[12328-12355]:ReturnStatement[12362-12389]"
  }, {
    "left" : "case MINOR_VALUE_TOKEN_ERROR:",
    "right" : "case MINOR_VALUE_TOKEN_ERROR:",
    "info" : "SwitchCase[12365-12394]:SwitchCase[12399-12428]"
  }, {
    "left" : "return _finishErrorToken();",
    "right" : "return _finishErrorToken();",
    "info" : "ReturnStatement[12463-12490]:ReturnStatement[12497-12524]"
  }, {
    "left" : "case MINOR_COMMENT_LEADING_SLASH:",
    "right" : "case MINOR_COMMENT_LEADING_SLASH:",
    "info" : "SwitchCase[12533-12566]:SwitchCase[12567-12600]"
  }, {
    "left" : "return _startSlashComment(_pending32);",
    "right" : "return _startSlashComment(_pending32);",
    "info" : "ReturnStatement[12579-12617]:ReturnStatement[12613-12651]"
  }, {
    "left" : "case MINOR_COMMENT_CLOSING_ASTERISK:",
    "right" : "case MINOR_COMMENT_CLOSING_ASTERISK:",
    "info" : "SwitchCase[12626-12662]:SwitchCase[12660-12696]"
  }, {
    "left" : "return _finishCComment(_pending32, true);",
    "right" : "return _finishCComment(_pending32, true);",
    "info" : "ReturnStatement[12675-12716]:ReturnStatement[12709-12750]"
  }, {
    "left" : "case MINOR_COMMENT_C:",
    "right" : "case MINOR_COMMENT_C:",
    "info" : "SwitchCase[12725-12746]:SwitchCase[12759-12780]"
  }, {
    "left" : "return _finishCComment(_pending32, false);",
    "right" : "return _finishCComment(_pending32, false);",
    "info" : "ReturnStatement[12759-12801]:ReturnStatement[12793-12835]"
  }, {
    "left" : "case MINOR_COMMENT_CPP:",
    "right" : "case MINOR_COMMENT_CPP:",
    "info" : "SwitchCase[12810-12833]:SwitchCase[12844-12867]"
  }, {
    "left" : "return _finishCppComment(_pending32);",
    "right" : "return _finishCppComment(_pending32);",
    "info" : "ReturnStatement[12846-12883]:ReturnStatement[12880-12917]"
  }, {
    "left" : "case MINOR_COMMENT_YAML:",
    "right" : "case MINOR_COMMENT_YAML:",
    "info" : "SwitchCase[12892-12916]:SwitchCase[12926-12950]"
  }, {
    "left" : "return _finishHashComment(_pending32);",
    "right" : "return _finishHashComment(_pending32);",
    "info" : "ReturnStatement[12929-12967]:ReturnStatement[12963-13001]"
  }, {
    "left" : "VersionUtil.throwInternal();",
    "right" : "VersionUtil.throwInternal();",
    "info" : "ExpressionStatement[12986-13014]:ExpressionStatement[13020-13048]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[13023-13035]:ReturnStatement[13057-13069]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[13370-13379]:Modifier[13404-13413]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[13380-13385]:Modifier[13414-13419]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[13386-13395]:SimpleType[13420-13429]"
  }, {
    "left" : "_finishTokenWithEOF",
    "right" : "_finishTokenWithEOF",
    "info" : "SimpleName[13396-13415]:SimpleName[13430-13449]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13425-13436]:SimpleType[13459-13470]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13441-16316]:Block[13475-16350]"
  }, {
    "left" : "JsonToken t = _currToken;",
    "right" : "JsonToken t = _currToken;",
    "info" : "VariableDeclarationStatement[13510-13535]:VariableDeclarationStatement[13544-13569]"
  }, {
    "left" : "switch (_minorState) {\n        case MINOR_ROOT_GOT_SEPARATOR: // fine, just skip some trailing space\n            return _eofAsNextToken();\n        case MINOR_VALUE_LEADING_WS: // finished at token boundary; probably fine\n            return _eofAsNextToken();\n//        case MINOR_VALUE_EXPECTING_COMMA: // not fine\n//        case MINOR_VALUE_EXPECTING_COLON: // not fine\n        case MINOR_VALUE_TOKEN_NULL:\n            return _finishKeywordTokenWithEOF(\"null\", _pending32, JsonToken.VALUE_NULL);\n        case MINOR_VALUE_TOKEN_TRUE:\n            return _finishKeywordTokenWithEOF(\"true\", _pending32, JsonToken.VALUE_TRUE);\n        case MINOR_VALUE_TOKEN_FALSE:\n            return _finishKeywordTokenWithEOF(\"false\", _pending32, JsonToken.VALUE_FALSE);\n        case MINOR_VALUE_TOKEN_NON_STD:\n            return _finishNonStdTokenWithEOF(_nonStdTokenType, _pending32);\n        case MINOR_VALUE_TOKEN_ERROR: // case of \"almost token\", just need tokenize for error\n            return _finishErrorTokenWithEOF();\n\n        // Number-parsing states; valid stopping points, more explicit errors\n        case MINOR_NUMBER_ZERO:\n        case MINOR_NUMBER_MINUSZERO:\n            // NOTE: does NOT retain possible leading minus-sign (can change if\n            // absolutely needs be)\n            return _valueCompleteInt(0, \"0\");\n        case MINOR_NUMBER_INTEGER_DIGITS:\n            // Fine: just need to ensure we have value fully defined\n            {\n                int len = _textBuffer.getCurrentSegmentSize();\n                if (_numberNegative) {\n                    --len;\n                }\n                _intLength = len;\n            }\n            return _valueComplete(JsonToken.VALUE_NUMBER_INT);\n\n        case MINOR_NUMBER_FRACTION_DIGITS:\n            _expLength = 0;\n            // fall through\n        case MINOR_NUMBER_EXPONENT_DIGITS:\n            return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);\n\n        case MINOR_NUMBER_EXPONENT_MARKER:\n            _reportInvalidEOF(\": was expecting fraction after exponent marker\", JsonToken.VALUE_NUMBER_FLOAT);\n\n            // How about comments? \n            // Inside C-comments; not legal\n\n//        case MINOR_COMMENT_LEADING_SLASH: // not legal, but use default error\n        case MINOR_COMMENT_CLOSING_ASTERISK:\n        case MINOR_COMMENT_C:\n            _reportInvalidEOF(\": was expecting closing '*/' for comment\", JsonToken.NOT_AVAILABLE);\n\n        case MINOR_COMMENT_CPP:\n        case MINOR_COMMENT_YAML:\n            // within C++/YAML comments, ok, as long as major state agrees...\n            return _eofAsNextToken();\n            \n        default:\n        }",
    "right" : "switch (_minorState) {\n        case MINOR_ROOT_GOT_SEPARATOR: // fine, just skip some trailing space\n            return _eofAsNextToken();\n        case MINOR_VALUE_LEADING_WS: // finished at token boundary; probably fine\n            return _eofAsNextToken();\n//        case MINOR_VALUE_EXPECTING_COMMA: // not fine\n//        case MINOR_VALUE_EXPECTING_COLON: // not fine\n        case MINOR_VALUE_TOKEN_NULL:\n            return _finishKeywordTokenWithEOF(\"null\", _pending32, JsonToken.VALUE_NULL);\n        case MINOR_VALUE_TOKEN_TRUE:\n            return _finishKeywordTokenWithEOF(\"true\", _pending32, JsonToken.VALUE_TRUE);\n        case MINOR_VALUE_TOKEN_FALSE:\n            return _finishKeywordTokenWithEOF(\"false\", _pending32, JsonToken.VALUE_FALSE);\n        case MINOR_VALUE_TOKEN_NON_STD:\n            return _finishNonStdTokenWithEOF(_nonStdTokenType, _pending32);\n        case MINOR_VALUE_TOKEN_ERROR: // case of \"almost token\", just need tokenize for error\n            return _finishErrorTokenWithEOF();\n\n        // Number-parsing states; valid stopping points, more explicit errors\n        case MINOR_NUMBER_ZERO:\n        case MINOR_NUMBER_MINUSZERO:\n            // NOTE: does NOT retain possible leading minus-sign (can change if\n            // absolutely needs be)\n            return _valueCompleteInt(0, \"0\");\n        case MINOR_NUMBER_INTEGER_DIGITS:\n            // Fine: just need to ensure we have value fully defined\n            {\n                int len = _textBuffer.getCurrentSegmentSize();\n                if (_numberNegative) {\n                    --len;\n                }\n                _intLength = len;\n            }\n            return _valueComplete(JsonToken.VALUE_NUMBER_INT);\n\n        case MINOR_NUMBER_FRACTION_DIGITS:\n            _expLength = 0;\n            // fall through\n        case MINOR_NUMBER_EXPONENT_DIGITS:\n            return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);\n\n        case MINOR_NUMBER_EXPONENT_MARKER:\n            _reportInvalidEOF(\": was expecting fraction after exponent marker\", JsonToken.VALUE_NUMBER_FLOAT);\n\n            // How about comments? \n            // Inside C-comments; not legal\n\n//        case MINOR_COMMENT_LEADING_SLASH: // not legal, but use default error\n        case MINOR_COMMENT_CLOSING_ASTERISK:\n        case MINOR_COMMENT_C:\n            _reportInvalidEOF(\": was expecting closing '*/' for comment\", JsonToken.NOT_AVAILABLE);\n\n        case MINOR_COMMENT_CPP:\n        case MINOR_COMMENT_YAML:\n            // within C++/YAML comments, ok, as long as major state agrees...\n            return _eofAsNextToken();\n            \n        default:\n        }",
    "info" : "SwitchStatement[13544-16167]:SwitchStatement[13578-16201]"
  }, {
    "left" : "case MINOR_ROOT_GOT_SEPARATOR:",
    "right" : "case MINOR_ROOT_GOT_SEPARATOR:",
    "info" : "SwitchCase[13575-13605]:SwitchCase[13609-13639]"
  }, {
    "left" : "return _eofAsNextToken();",
    "right" : "return _eofAsNextToken();",
    "info" : "ReturnStatement[13657-13682]:ReturnStatement[13691-13716]"
  }, {
    "left" : "case MINOR_VALUE_LEADING_WS:",
    "right" : "case MINOR_VALUE_LEADING_WS:",
    "info" : "SwitchCase[13691-13719]:SwitchCase[13725-13753]"
  }, {
    "left" : "return _eofAsNextToken();",
    "right" : "return _eofAsNextToken();",
    "info" : "ReturnStatement[13777-13802]:ReturnStatement[13811-13836]"
  }, {
    "left" : "case MINOR_VALUE_TOKEN_NULL:",
    "right" : "case MINOR_VALUE_TOKEN_NULL:",
    "info" : "SwitchCase[13923-13951]:SwitchCase[13957-13985]"
  }, {
    "left" : "return _finishKeywordTokenWithEOF(\"null\", _pending32, JsonToken.VALUE_NULL);",
    "right" : "return _finishKeywordTokenWithEOF(\"null\", _pending32, JsonToken.VALUE_NULL);",
    "info" : "ReturnStatement[13964-14040]:ReturnStatement[13998-14074]"
  }, {
    "left" : "case MINOR_VALUE_TOKEN_TRUE:",
    "right" : "case MINOR_VALUE_TOKEN_TRUE:",
    "info" : "SwitchCase[14049-14077]:SwitchCase[14083-14111]"
  }, {
    "left" : "return _finishKeywordTokenWithEOF(\"true\", _pending32, JsonToken.VALUE_TRUE);",
    "right" : "return _finishKeywordTokenWithEOF(\"true\", _pending32, JsonToken.VALUE_TRUE);",
    "info" : "ReturnStatement[14090-14166]:ReturnStatement[14124-14200]"
  }, {
    "left" : "case MINOR_VALUE_TOKEN_FALSE:",
    "right" : "case MINOR_VALUE_TOKEN_FALSE:",
    "info" : "SwitchCase[14175-14204]:SwitchCase[14209-14238]"
  }, {
    "left" : "return _finishKeywordTokenWithEOF(\"false\", _pending32, JsonToken.VALUE_FALSE);",
    "right" : "return _finishKeywordTokenWithEOF(\"false\", _pending32, JsonToken.VALUE_FALSE);",
    "info" : "ReturnStatement[14217-14295]:ReturnStatement[14251-14329]"
  }, {
    "left" : "case MINOR_VALUE_TOKEN_NON_STD:",
    "right" : "case MINOR_VALUE_TOKEN_NON_STD:",
    "info" : "SwitchCase[14304-14335]:SwitchCase[14338-14369]"
  }, {
    "left" : "return _finishNonStdTokenWithEOF(_nonStdTokenType, _pending32);",
    "right" : "return _finishNonStdTokenWithEOF(_nonStdTokenType, _pending32);",
    "info" : "ReturnStatement[14348-14411]:ReturnStatement[14382-14445]"
  }, {
    "left" : "case MINOR_VALUE_TOKEN_ERROR:",
    "right" : "case MINOR_VALUE_TOKEN_ERROR:",
    "info" : "SwitchCase[14420-14449]:SwitchCase[14454-14483]"
  }, {
    "left" : "return _finishErrorTokenWithEOF();",
    "right" : "return _finishErrorTokenWithEOF();",
    "info" : "ReturnStatement[14518-14552]:ReturnStatement[14552-14586]"
  }, {
    "left" : "case MINOR_NUMBER_ZERO:",
    "right" : "case MINOR_NUMBER_ZERO:",
    "info" : "SwitchCase[14640-14663]:SwitchCase[14674-14697]"
  }, {
    "left" : "case MINOR_NUMBER_MINUSZERO:",
    "right" : "case MINOR_NUMBER_MINUSZERO:",
    "info" : "SwitchCase[14672-14700]:SwitchCase[14706-14734]"
  }, {
    "left" : "return _valueCompleteInt(0, \"0\");",
    "right" : "return _valueCompleteInt(0, \"0\");",
    "info" : "ReturnStatement[14829-14862]:ReturnStatement[14863-14896]"
  }, {
    "left" : "case MINOR_NUMBER_INTEGER_DIGITS:",
    "right" : "case MINOR_NUMBER_INTEGER_DIGITS:",
    "info" : "SwitchCase[14871-14904]:SwitchCase[14905-14938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14986-15182]:Block[15020-15216]"
  }, {
    "left" : "int len = _textBuffer.getCurrentSegmentSize();",
    "right" : "int len = _textBuffer.getCurrentSegmentSize();",
    "info" : "VariableDeclarationStatement[15004-15050]:VariableDeclarationStatement[15038-15084]"
  }, {
    "left" : "if (_numberNegative)",
    "right" : "if (_numberNegative)",
    "info" : "IfStatement[15067-15134]:IfStatement[15101-15168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15088-15134]:Block[15122-15168]"
  }, {
    "left" : "--len;",
    "right" : "--len;",
    "info" : "ExpressionStatement[15110-15116]:ExpressionStatement[15144-15150]"
  }, {
    "left" : "_intLength = len;",
    "right" : "_intLength = len;",
    "info" : "ExpressionStatement[15151-15168]:ExpressionStatement[15185-15202]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_NUMBER_INT);",
    "right" : "return _valueComplete(JsonToken.VALUE_NUMBER_INT);",
    "info" : "ReturnStatement[15195-15245]:ReturnStatement[15229-15279]"
  }, {
    "left" : "case MINOR_NUMBER_FRACTION_DIGITS:",
    "right" : "case MINOR_NUMBER_FRACTION_DIGITS:",
    "info" : "SwitchCase[15255-15289]:SwitchCase[15289-15323]"
  }, {
    "left" : "_expLength = 0;",
    "right" : "_expLength = 0;",
    "info" : "ExpressionStatement[15302-15317]:ExpressionStatement[15336-15351]"
  }, {
    "left" : "case MINOR_NUMBER_EXPONENT_DIGITS:",
    "right" : "case MINOR_NUMBER_EXPONENT_DIGITS:",
    "info" : "SwitchCase[15354-15388]:SwitchCase[15388-15422]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);",
    "right" : "return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);",
    "info" : "ReturnStatement[15401-15453]:ReturnStatement[15435-15487]"
  }, {
    "left" : "case MINOR_NUMBER_EXPONENT_MARKER:",
    "right" : "case MINOR_NUMBER_EXPONENT_MARKER:",
    "info" : "SwitchCase[15463-15497]:SwitchCase[15497-15531]"
  }, {
    "left" : "_reportInvalidEOF(\": was expecting fraction after exponent marker\", JsonToken.VALUE_NUMBER_FLOAT);",
    "right" : "_reportInvalidEOF(\": was expecting fraction after exponent marker\", JsonToken.VALUE_NUMBER_FLOAT);",
    "info" : "ExpressionStatement[15510-15608]:ExpressionStatement[15544-15642]"
  }, {
    "left" : "case MINOR_COMMENT_CLOSING_ASTERISK:",
    "right" : "case MINOR_COMMENT_CLOSING_ASTERISK:",
    "info" : "SwitchCase[15779-15815]:SwitchCase[15813-15849]"
  }, {
    "left" : "case MINOR_COMMENT_C:",
    "right" : "case MINOR_COMMENT_C:",
    "info" : "SwitchCase[15824-15845]:SwitchCase[15858-15879]"
  }, {
    "left" : "_reportInvalidEOF(\": was expecting closing '*/' for comment\", JsonToken.NOT_AVAILABLE);",
    "right" : "_reportInvalidEOF(\": was expecting closing '*/' for comment\", JsonToken.NOT_AVAILABLE);",
    "info" : "ExpressionStatement[15858-15945]:ExpressionStatement[15892-15979]"
  }, {
    "left" : "case MINOR_COMMENT_CPP:",
    "right" : "case MINOR_COMMENT_CPP:",
    "info" : "SwitchCase[15955-15978]:SwitchCase[15989-16012]"
  }, {
    "left" : "case MINOR_COMMENT_YAML:",
    "right" : "case MINOR_COMMENT_YAML:",
    "info" : "SwitchCase[15987-16011]:SwitchCase[16021-16045]"
  }, {
    "left" : "return _eofAsNextToken();",
    "right" : "return _eofAsNextToken();",
    "info" : "ReturnStatement[16102-16127]:ReturnStatement[16136-16161]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[16149-16157]:SwitchCase[16183-16191]"
  }, {
    "left" : "_reportInvalidEOF(\": was expecting rest of token (internal state: \"+_minorState+\")\", _currToken);",
    "right" : "_reportInvalidEOF(\": was expecting rest of token (internal state: \"+_minorState+\")\", _currToken);",
    "info" : "ExpressionStatement[16176-16273]:ExpressionStatement[16210-16307]"
  }, {
    "left" : "return t;",
    "right" : "return t;",
    "info" : "ReturnStatement[16282-16291]:ReturnStatement[16316-16325]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16531-16538]:Modifier[16565-16572]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[16539-16544]:Modifier[16573-16578]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[16545-16554]:SimpleType[16579-16588]"
  }, {
    "left" : "_startDocument",
    "right" : "_startDocument",
    "info" : "SimpleName[16555-16569]:SimpleName[16589-16603]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[16570-16576]:SingleVariableDeclaration[16604-16610]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[16585-16596]:SimpleType[16619-16630]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16601-17837]:Block[16635-17871]"
  }, {
    "left" : "ch &= 0xFF;",
    "right" : "ch &= 0xFF;",
    "info" : "ExpressionStatement[16611-16622]:ExpressionStatement[16645-16656]"
  }, {
    "left" : "if ((ch == 0xEF) && (_minorState != MINOR_ROOT_BOM))",
    "right" : "if ((ch == 0xEF) && (_minorState != MINOR_ROOT_BOM))",
    "info" : "IfStatement[16673-16771]:IfStatement[16707-16805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16726-16771]:Block[16760-16805]"
  }, {
    "left" : "return _finishBOM(1);",
    "right" : "return _finishBOM(1);",
    "info" : "ReturnStatement[16740-16761]:ReturnStatement[16774-16795]"
  }, {
    "left" : "while (ch <= 0x020)",
    "right" : "while (ch <= 0x020)",
    "info" : "WhileStatement[16863-17799]:WhileStatement[16897-17833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16883-17799]:Block[16917-17833]"
  }, {
    "left" : "if (ch != INT_SPACE)",
    "right" : "if (ch != INT_SPACE)",
    "info" : "IfStatement[16897-17299]:IfStatement[16931-17333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16918-17299]:Block[16952-17333]"
  }, {
    "left" : "if (ch == INT_LF)",
    "right" : "if (ch == INT_LF)",
    "info" : "IfStatement[16936-17285]:IfStatement[16970-17319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16954-17062]:Block[16988-17096]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[16976-16992]:ExpressionStatement[17010-17026]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[17013-17044]:ExpressionStatement[17047-17078]"
  }, {
    "left" : "if (ch == INT_CR)",
    "right" : "if (ch == INT_CR)",
    "info" : "IfStatement[17068-17285]:IfStatement[17102-17319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17086-17197]:Block[17120-17231]"
  }, {
    "left" : "++_currInputRowAlt;",
    "right" : "++_currInputRowAlt;",
    "info" : "ExpressionStatement[17108-17127]:ExpressionStatement[17142-17161]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[17148-17179]:ExpressionStatement[17182-17213]"
  }, {
    "left" : "if (ch != INT_TAB)",
    "right" : "if (ch != INT_TAB)",
    "info" : "IfStatement[17203-17285]:IfStatement[17237-17319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17222-17285]:Block[17256-17319]"
  }, {
    "left" : "_throwInvalidSpace(ch);",
    "right" : "_throwInvalidSpace(ch);",
    "info" : "ExpressionStatement[17244-17267]:ExpressionStatement[17278-17301]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[17312-17738]:IfStatement[17346-17772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17340-17738]:Block[17374-17772]"
  }, {
    "left" : "_minorState = MINOR_ROOT_GOT_SEPARATOR;",
    "right" : "_minorState = MINOR_ROOT_GOT_SEPARATOR;",
    "info" : "ExpressionStatement[17358-17397]:ExpressionStatement[17392-17431]"
  }, {
    "left" : "if (_closed)",
    "right" : "if (_closed)",
    "info" : "IfStatement[17414-17479]:IfStatement[17448-17513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17427-17479]:Block[17461-17513]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[17449-17461]:ReturnStatement[17483-17495]"
  }, {
    "left" : "if (_endOfInput)",
    "right" : "if (_endOfInput)",
    "info" : "IfStatement[17562-17676]:IfStatement[17596-17710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17579-17676]:Block[17613-17710]"
  }, {
    "left" : "return _eofAsNextToken();",
    "right" : "return _eofAsNextToken();",
    "info" : "ReturnStatement[17633-17658]:ReturnStatement[17667-17692]"
  }, {
    "left" : "return JsonToken.NOT_AVAILABLE;",
    "right" : "return JsonToken.NOT_AVAILABLE;",
    "info" : "ReturnStatement[17693-17724]:ReturnStatement[17727-17758]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[17751-17789]:ExpressionStatement[17785-17823]"
  }, {
    "left" : "return _startValue(ch);",
    "right" : "return _startValue(ch);",
    "info" : "ReturnStatement[17808-17831]:ReturnStatement[17842-17865]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[17843-17850]:Modifier[17877-17884]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[17851-17856]:Modifier[17885-17890]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[17857-17866]:SimpleType[17891-17900]"
  }, {
    "left" : "_finishBOM",
    "right" : "_finishBOM",
    "info" : "SimpleName[17867-17877]:SimpleName[17901-17911]"
  }, {
    "left" : "int bytesHandled",
    "right" : "int bytesHandled",
    "info" : "SingleVariableDeclaration[17878-17894]:SingleVariableDeclaration[17912-17928]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[17903-17914]:SimpleType[17937-17948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17919-19117]:Block[17953-19151]"
  }, {
    "left" : "while (_inputPtr < _inputEnd)",
    "right" : "while (_inputPtr < _inputEnd)",
    "info" : "WhileStatement[18116-18983]:WhileStatement[18150-19017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18146-18983]:Block[18180-19017]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[18160-18202]:VariableDeclarationStatement[18194-18236]"
  }, {
    "left" : "switch (bytesHandled) {\n            case 3:\n                // got it all; go back to \"start document\" handling, without changing\n                // minor state (to let it know we've done BOM)\n                _currInputProcessed -= 3;\n                return _startDocument(ch);\n            case 2:\n                if (ch != 0xBF) {\n                    _reportError(\"Unexpected byte 0x%02x following 0xEF 0xBB; should get 0xBF as third byte of UTF-8 BOM\", ch);\n                }\n                break;\n            case 1:\n                if (ch != 0xBB) {\n                    _reportError(\"Unexpected byte 0x%02x following 0xEF; should get 0xBB as second byte UTF-8 BOM\", ch);\n                }\n                break;\n            }",
    "right" : "switch (bytesHandled) {\n            case 3:\n                // got it all; go back to \"start document\" handling, without changing\n                // minor state (to let it know we've done BOM)\n                _currInputProcessed -= 3;\n                return _startDocument(ch);\n            case 2:\n                if (ch != 0xBF) {\n                    _reportError(\"Unexpected byte 0x%02x following 0xEF 0xBB; should get 0xBF as third byte of UTF-8 BOM\", ch);\n                }\n                break;\n            case 1:\n                if (ch != 0xBB) {\n                    _reportError(\"Unexpected byte 0x%02x following 0xEF; should get 0xBB as second byte UTF-8 BOM\", ch);\n                }\n                break;\n            }",
    "info" : "SwitchStatement[18215-18945]:SwitchStatement[18249-18979]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[18251-18258]:SwitchCase[18285-18292]"
  }, {
    "left" : "_currInputProcessed -= 3;",
    "right" : "_currInputProcessed -= 3;",
    "info" : "ExpressionStatement[18424-18449]:ExpressionStatement[18458-18483]"
  }, {
    "left" : "return _startDocument(ch);",
    "right" : "return _startDocument(ch);",
    "info" : "ReturnStatement[18466-18492]:ReturnStatement[18500-18526]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[18505-18512]:SwitchCase[18539-18546]"
  }, {
    "left" : "if (ch != 0xBF)",
    "right" : "if (ch != 0xBF)",
    "info" : "IfStatement[18529-18692]:IfStatement[18563-18726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18545-18692]:Block[18579-18726]"
  }, {
    "left" : "_reportError(\"Unexpected byte 0x%02x following 0xEF 0xBB; should get 0xBF as third byte of UTF-8 BOM\", ch);",
    "right" : "_reportError(\"Unexpected byte 0x%02x following 0xEF 0xBB; should get 0xBF as third byte of UTF-8 BOM\", ch);",
    "info" : "ExpressionStatement[18567-18674]:ExpressionStatement[18601-18708]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18709-18715]:BreakStatement[18743-18749]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[18728-18735]:SwitchCase[18762-18769]"
  }, {
    "left" : "if (ch != 0xBB)",
    "right" : "if (ch != 0xBB)",
    "info" : "IfStatement[18752-18908]:IfStatement[18786-18942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18768-18908]:Block[18802-18942]"
  }, {
    "left" : "_reportError(\"Unexpected byte 0x%02x following 0xEF; should get 0xBB as second byte UTF-8 BOM\", ch);",
    "right" : "_reportError(\"Unexpected byte 0x%02x following 0xEF; should get 0xBB as second byte UTF-8 BOM\", ch);",
    "info" : "ExpressionStatement[18790-18890]:ExpressionStatement[18824-18924]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18925-18931]:BreakStatement[18959-18965]"
  }, {
    "left" : "++bytesHandled;",
    "right" : "++bytesHandled;",
    "info" : "ExpressionStatement[18958-18973]:ExpressionStatement[18992-19007]"
  }, {
    "left" : "_pending32 = bytesHandled;",
    "right" : "_pending32 = bytesHandled;",
    "info" : "ExpressionStatement[18992-19018]:ExpressionStatement[19026-19052]"
  }, {
    "left" : "_minorState = MINOR_ROOT_BOM;",
    "right" : "_minorState = MINOR_ROOT_BOM;",
    "info" : "ExpressionStatement[19027-19056]:ExpressionStatement[19061-19090]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[19065-19111]:ReturnStatement[19099-19145]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19488-19495]:Modifier[19522-19529]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[19496-19501]:Modifier[19530-19535]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[19502-19511]:SimpleType[19536-19545]"
  }, {
    "left" : "_startFieldName",
    "right" : "_startFieldName",
    "info" : "SimpleName[19512-19527]:SimpleName[19546-19561]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[19528-19534]:SingleVariableDeclaration[19562-19568]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[19543-19554]:SimpleType[19577-19588]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19559-20340]:Block[19593-20374]"
  }, {
    "left" : "if (ch <= 0x0020)",
    "right" : "if (ch <= 0x0020)",
    "info" : "IfStatement[19612-19801]:IfStatement[19646-19835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19630-19801]:Block[19664-19835]"
  }, {
    "left" : "ch = _skipWS(ch);",
    "right" : "ch = _skipWS(ch);",
    "info" : "ExpressionStatement[19644-19661]:ExpressionStatement[19678-19695]"
  }, {
    "left" : "if (ch <= 0)",
    "right" : "if (ch <= 0)",
    "info" : "IfStatement[19674-19791]:IfStatement[19708-19825]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19687-19791]:Block[19721-19825]"
  }, {
    "left" : "_minorState = MINOR_FIELD_LEADING_WS;",
    "right" : "_minorState = MINOR_FIELD_LEADING_WS;",
    "info" : "ExpressionStatement[19705-19742]:ExpressionStatement[19739-19776]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[19759-19777]:ReturnStatement[19793-19811]"
  }, {
    "left" : "_updateTokenLocation();",
    "right" : "_updateTokenLocation();",
    "info" : "ExpressionStatement[19810-19833]:ExpressionStatement[19844-19867]"
  }, {
    "left" : "if (ch != INT_QUOTE)",
    "right" : "if (ch != INT_QUOTE)",
    "info" : "IfStatement[19842-20007]:IfStatement[19876-20041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19863-20007]:Block[19897-20041]"
  }, {
    "left" : "if (ch == INT_RCURLY)",
    "right" : "if (ch == INT_RCURLY)",
    "info" : "IfStatement[19877-19958]:IfStatement[19911-19992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19899-19958]:Block[19933-19992]"
  }, {
    "left" : "return _closeObjectScope();",
    "right" : "return _closeObjectScope();",
    "info" : "ReturnStatement[19917-19944]:ReturnStatement[19951-19978]"
  }, {
    "left" : "return _handleOddName(ch);",
    "right" : "return _handleOddName(ch);",
    "info" : "ReturnStatement[19971-19997]:ReturnStatement[20005-20031]"
  }, {
    "left" : "if ((_inputPtr + 13) <= _inputEnd)",
    "right" : "if ((_inputPtr + 13) <= _inputEnd)",
    "info" : "IfStatement[20069-20291]:IfStatement[20103-20325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20104-20291]:Block[20138-20325]"
  }, {
    "left" : "String n = _fastParseName();",
    "right" : "String n = _fastParseName();",
    "info" : "VariableDeclarationStatement[20168-20196]:VariableDeclarationStatement[20202-20230]"
  }, {
    "left" : "if (n != null)",
    "right" : "if (n != null)",
    "info" : "IfStatement[20209-20281]:IfStatement[20243-20315]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20224-20281]:Block[20258-20315]"
  }, {
    "left" : "return _fieldComplete(n);",
    "right" : "return _fieldComplete(n);",
    "info" : "ReturnStatement[20242-20267]:ReturnStatement[20276-20301]"
  }, {
    "left" : "return _parseEscapedName(0, 0, 0);",
    "right" : "return _parseEscapedName(0, 0, 0);",
    "info" : "ReturnStatement[20300-20334]:ReturnStatement[20334-20368]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20346-20353]:Modifier[20380-20387]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[20354-20359]:Modifier[20388-20393]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[20360-20369]:SimpleType[20394-20403]"
  }, {
    "left" : "_startFieldNameAfterComma",
    "right" : "_startFieldNameAfterComma",
    "info" : "SimpleName[20370-20395]:SimpleName[20404-20429]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[20396-20402]:SingleVariableDeclaration[20430-20436]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[20411-20422]:SimpleType[20445-20456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20427-22335]:Block[20461-22369]"
  }, {
    "left" : "if (ch <= 0x0020)",
    "right" : "if (ch <= 0x0020)",
    "info" : "IfStatement[20480-20725]:IfStatement[20514-20759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20498-20725]:Block[20532-20759]"
  }, {
    "left" : "ch = _skipWS(ch);",
    "right" : "ch = _skipWS(ch);",
    "info" : "ExpressionStatement[20512-20529]:ExpressionStatement[20546-20563]"
  }, {
    "left" : "if (ch <= 0)",
    "right" : "if (ch <= 0)",
    "info" : "IfStatement[20595-20715]:IfStatement[20629-20749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20608-20715]:Block[20642-20749]"
  }, {
    "left" : "_minorState = MINOR_FIELD_LEADING_COMMA;",
    "right" : "_minorState = MINOR_FIELD_LEADING_COMMA;",
    "info" : "ExpressionStatement[20626-20666]:ExpressionStatement[20660-20700]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[20683-20701]:ReturnStatement[20717-20735]"
  }, {
    "left" : "if (ch != INT_COMMA)",
    "right" : "if (ch != INT_COMMA)",
    "info" : "IfStatement[20734-21270]:IfStatement[20768-21304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20755-21270]:Block[20789-21304]"
  }, {
    "left" : "if (ch == INT_RCURLY)",
    "right" : "if (ch == INT_RCURLY)",
    "info" : "IfStatement[20829-20910]:IfStatement[20863-20944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20851-20910]:Block[20885-20944]"
  }, {
    "left" : "return _closeObjectScope();",
    "right" : "return _closeObjectScope();",
    "info" : "ReturnStatement[20869-20896]:ReturnStatement[20903-20930]"
  }, {
    "left" : "if (ch == INT_HASH)",
    "right" : "if (ch == INT_HASH)",
    "info" : "IfStatement[20923-21028]:IfStatement[20957-21062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20943-21028]:Block[20977-21062]"
  }, {
    "left" : "return _finishHashComment(MINOR_FIELD_LEADING_COMMA);",
    "right" : "return _finishHashComment(MINOR_FIELD_LEADING_COMMA);",
    "info" : "ReturnStatement[20961-21014]:ReturnStatement[20995-21048]"
  }, {
    "left" : "if (ch == INT_SLASH)",
    "right" : "if (ch == INT_SLASH)",
    "info" : "IfStatement[21041-21147]:IfStatement[21075-21181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21062-21147]:Block[21096-21181]"
  }, {
    "left" : "return _startSlashComment(MINOR_FIELD_LEADING_COMMA);",
    "right" : "return _startSlashComment(MINOR_FIELD_LEADING_COMMA);",
    "info" : "ReturnStatement[21080-21133]:ReturnStatement[21114-21167]"
  }, {
    "left" : "_reportUnexpectedChar(ch, \"was expecting comma to separate \"+_parsingContext.typeDesc()+\" entries\");",
    "right" : "_reportUnexpectedChar(ch, \"was expecting comma to separate \"+_parsingContext.typeDesc()+\" entries\");",
    "info" : "ExpressionStatement[21160-21260]:ExpressionStatement[21194-21294]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[21279-21299]:VariableDeclarationStatement[21313-21333]"
  }, {
    "left" : "if (ptr >= _inputEnd)",
    "right" : "if (ptr >= _inputEnd)",
    "info" : "IfStatement[21308-21450]:IfStatement[21342-21484]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21330-21450]:Block[21364-21484]"
  }, {
    "left" : "_minorState = MINOR_FIELD_LEADING_WS;",
    "right" : "_minorState = MINOR_FIELD_LEADING_WS;",
    "info" : "ExpressionStatement[21344-21381]:ExpressionStatement[21378-21415]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[21394-21440]:ReturnStatement[21428-21474]"
  }, {
    "left" : "ch = _inputBuffer[ptr];",
    "right" : "ch = _inputBuffer[ptr];",
    "info" : "ExpressionStatement[21459-21482]:ExpressionStatement[21493-21516]"
  }, {
    "left" : "_inputPtr = ptr+1;",
    "right" : "_inputPtr = ptr+1;",
    "info" : "ExpressionStatement[21491-21509]:ExpressionStatement[21525-21543]"
  }, {
    "left" : "if (ch <= 0x0020)",
    "right" : "if (ch <= 0x0020)",
    "info" : "IfStatement[21518-21707]:IfStatement[21552-21741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21536-21707]:Block[21570-21741]"
  }, {
    "left" : "ch = _skipWS(ch);",
    "right" : "ch = _skipWS(ch);",
    "info" : "ExpressionStatement[21550-21567]:ExpressionStatement[21584-21601]"
  }, {
    "left" : "if (ch <= 0)",
    "right" : "if (ch <= 0)",
    "info" : "IfStatement[21580-21697]:IfStatement[21614-21731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21593-21697]:Block[21627-21731]"
  }, {
    "left" : "_minorState = MINOR_FIELD_LEADING_WS;",
    "right" : "_minorState = MINOR_FIELD_LEADING_WS;",
    "info" : "ExpressionStatement[21611-21648]:ExpressionStatement[21645-21682]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[21665-21683]:ReturnStatement[21699-21717]"
  }, {
    "left" : "_updateTokenLocation();",
    "right" : "_updateTokenLocation();",
    "info" : "ExpressionStatement[21716-21739]:ExpressionStatement[21750-21773]"
  }, {
    "left" : "if (ch != INT_QUOTE)",
    "right" : "if (ch != INT_QUOTE)",
    "info" : "IfStatement[21748-22002]:IfStatement[21782-22036]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21769-22002]:Block[21803-22036]"
  }, {
    "left" : "if (ch == INT_RCURLY)",
    "right" : "if (ch == INT_RCURLY)",
    "info" : "IfStatement[21783-21953]:IfStatement[21817-21987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21805-21953]:Block[21839-21987]"
  }, {
    "left" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "right" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "info" : "IfStatement[21823-21939]:IfStatement[21857-21973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21872-21939]:Block[21906-21973]"
  }, {
    "left" : "return _closeObjectScope();",
    "right" : "return _closeObjectScope();",
    "info" : "ReturnStatement[21894-21921]:ReturnStatement[21928-21955]"
  }, {
    "left" : "return _handleOddName(ch);",
    "right" : "return _handleOddName(ch);",
    "info" : "ReturnStatement[21966-21992]:ReturnStatement[22000-22026]"
  }, {
    "left" : "if ((_inputPtr + 13) <= _inputEnd)",
    "right" : "if ((_inputPtr + 13) <= _inputEnd)",
    "info" : "IfStatement[22064-22286]:IfStatement[22098-22320]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22099-22286]:Block[22133-22320]"
  }, {
    "left" : "String n = _fastParseName();",
    "right" : "String n = _fastParseName();",
    "info" : "VariableDeclarationStatement[22163-22191]:VariableDeclarationStatement[22197-22225]"
  }, {
    "left" : "if (n != null)",
    "right" : "if (n != null)",
    "info" : "IfStatement[22204-22276]:IfStatement[22238-22310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22219-22276]:Block[22253-22310]"
  }, {
    "left" : "return _fieldComplete(n);",
    "right" : "return _fieldComplete(n);",
    "info" : "ReturnStatement[22237-22262]:ReturnStatement[22271-22296]"
  }, {
    "left" : "return _parseEscapedName(0, 0, 0);",
    "right" : "return _parseEscapedName(0, 0, 0);",
    "info" : "ReturnStatement[22295-22329]:ReturnStatement[22329-22363]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22789-22796]:Modifier[22823-22830]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[22797-22802]:Modifier[22831-22836]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[22803-22812]:SimpleType[22837-22846]"
  }, {
    "left" : "_startValue",
    "right" : "_startValue",
    "info" : "SimpleName[22813-22824]:SimpleName[22847-22858]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[22825-22831]:SingleVariableDeclaration[22859-22865]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[22840-22851]:SimpleType[22874-22885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22856-24429]:Block[22890-24463]"
  }, {
    "left" : "if (ch <= 0x0020)",
    "right" : "if (ch <= 0x0020)",
    "info" : "IfStatement[22909-23098]:IfStatement[22943-23132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22927-23098]:Block[22961-23132]"
  }, {
    "left" : "ch = _skipWS(ch);",
    "right" : "ch = _skipWS(ch);",
    "info" : "ExpressionStatement[22941-22958]:ExpressionStatement[22975-22992]"
  }, {
    "left" : "if (ch <= 0)",
    "right" : "if (ch <= 0)",
    "info" : "IfStatement[22971-23088]:IfStatement[23005-23122]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22984-23088]:Block[23018-23122]"
  }, {
    "left" : "_minorState = MINOR_VALUE_LEADING_WS;",
    "right" : "_minorState = MINOR_VALUE_LEADING_WS;",
    "info" : "ExpressionStatement[23002-23039]:ExpressionStatement[23036-23073]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[23056-23074]:ReturnStatement[23090-23108]"
  }, {
    "left" : "_updateTokenLocation();",
    "right" : "_updateTokenLocation();",
    "info" : "ExpressionStatement[23107-23130]:ExpressionStatement[23141-23164]"
  }, {
    "left" : "if (ch == INT_QUOTE)",
    "right" : "if (ch == INT_QUOTE)",
    "info" : "IfStatement[23139-23206]:IfStatement[23173-23240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23160-23206]:Block[23194-23240]"
  }, {
    "left" : "return _startString();",
    "right" : "return _startString();",
    "info" : "ReturnStatement[23174-23196]:ReturnStatement[23208-23230]"
  }, {
    "left" : "switch (ch) {\n        case '#':\n            return _finishHashComment(MINOR_VALUE_LEADING_WS);\n        case '-':\n            return _startNegativeNumber();\n        case '/': // c/c++ comments\n            return _startSlashComment(MINOR_VALUE_LEADING_WS);\n            \n        // Should we have separate handling for plus? Although\n        // it is not allowed per se, it may be erroneously used,\n        // and could be indicate by a more specific error message.\n        case '0':\n            return _startNumberLeadingZero();\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return _startPositiveNumber(ch);\n        case 'f':\n            return _startFalseToken();\n        case 'n':\n            return _startNullToken();\n        case 't':\n            return _startTrueToken();\n        case '[':\n            return _startArrayScope();\n        case ']':\n            return _closeArrayScope();\n        case '{':\n            return _startObjectScope();\n        case '}':\n            return _closeObjectScope();\n        default:\n        }",
    "right" : "switch (ch) {\n        case '#':\n            return _finishHashComment(MINOR_VALUE_LEADING_WS);\n        case '-':\n            return _startNegativeNumber();\n        case '/': // c/c++ comments\n            return _startSlashComment(MINOR_VALUE_LEADING_WS);\n            \n        // Should we have separate handling for plus? Although\n        // it is not allowed per se, it may be erroneously used,\n        // and could be indicate by a more specific error message.\n        case '0':\n            return _startNumberLeadingZero();\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return _startPositiveNumber(ch);\n        case 'f':\n            return _startFalseToken();\n        case 'n':\n            return _startNullToken();\n        case 't':\n            return _startTrueToken();\n        case '[':\n            return _startArrayScope();\n        case ']':\n            return _closeArrayScope();\n        case '{':\n            return _startObjectScope();\n        case '}':\n            return _closeObjectScope();\n        default:\n        }",
    "info" : "SwitchStatement[23215-24374]:SwitchStatement[23249-24408]"
  }, {
    "left" : "case '#':",
    "right" : "case '#':",
    "info" : "SwitchCase[23237-23246]:SwitchCase[23271-23280]"
  }, {
    "left" : "return _finishHashComment(MINOR_VALUE_LEADING_WS);",
    "right" : "return _finishHashComment(MINOR_VALUE_LEADING_WS);",
    "info" : "ReturnStatement[23259-23309]:ReturnStatement[23293-23343]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[23318-23327]:SwitchCase[23352-23361]"
  }, {
    "left" : "return _startNegativeNumber();",
    "right" : "return _startNegativeNumber();",
    "info" : "ReturnStatement[23340-23370]:ReturnStatement[23374-23404]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[23379-23388]:SwitchCase[23413-23422]"
  }, {
    "left" : "return _startSlashComment(MINOR_VALUE_LEADING_WS);",
    "right" : "return _startSlashComment(MINOR_VALUE_LEADING_WS);",
    "info" : "ReturnStatement[23419-23469]:ReturnStatement[23453-23503]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[23686-23695]:SwitchCase[23720-23729]"
  }, {
    "left" : "return _startNumberLeadingZero();",
    "right" : "return _startNumberLeadingZero();",
    "info" : "ReturnStatement[23708-23741]:ReturnStatement[23742-23775]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[23750-23759]:SwitchCase[23784-23793]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[23768-23777]:SwitchCase[23802-23811]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[23786-23795]:SwitchCase[23820-23829]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[23804-23813]:SwitchCase[23838-23847]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[23822-23831]:SwitchCase[23856-23865]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[23840-23849]:SwitchCase[23874-23883]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[23858-23867]:SwitchCase[23892-23901]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[23876-23885]:SwitchCase[23910-23919]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[23894-23903]:SwitchCase[23928-23937]"
  }, {
    "left" : "return _startPositiveNumber(ch);",
    "right" : "return _startPositiveNumber(ch);",
    "info" : "ReturnStatement[23916-23948]:ReturnStatement[23950-23982]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[23957-23966]:SwitchCase[23991-24000]"
  }, {
    "left" : "return _startFalseToken();",
    "right" : "return _startFalseToken();",
    "info" : "ReturnStatement[23979-24005]:ReturnStatement[24013-24039]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[24014-24023]:SwitchCase[24048-24057]"
  }, {
    "left" : "return _startNullToken();",
    "right" : "return _startNullToken();",
    "info" : "ReturnStatement[24036-24061]:ReturnStatement[24070-24095]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[24070-24079]:SwitchCase[24104-24113]"
  }, {
    "left" : "return _startTrueToken();",
    "right" : "return _startTrueToken();",
    "info" : "ReturnStatement[24092-24117]:ReturnStatement[24126-24151]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[24126-24135]:SwitchCase[24160-24169]"
  }, {
    "left" : "return _startArrayScope();",
    "right" : "return _startArrayScope();",
    "info" : "ReturnStatement[24148-24174]:ReturnStatement[24182-24208]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[24183-24192]:SwitchCase[24217-24226]"
  }, {
    "left" : "return _closeArrayScope();",
    "right" : "return _closeArrayScope();",
    "info" : "ReturnStatement[24205-24231]:ReturnStatement[24239-24265]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[24240-24249]:SwitchCase[24274-24283]"
  }, {
    "left" : "return _startObjectScope();",
    "right" : "return _startObjectScope();",
    "info" : "ReturnStatement[24262-24289]:ReturnStatement[24296-24323]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[24298-24307]:SwitchCase[24332-24341]"
  }, {
    "left" : "return _closeObjectScope();",
    "right" : "return _closeObjectScope();",
    "info" : "ReturnStatement[24320-24347]:ReturnStatement[24354-24381]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[24356-24364]:SwitchCase[24390-24398]"
  }, {
    "left" : "return _startUnexpectedValue(false, ch);",
    "right" : "return _startUnexpectedValue(false, ch);",
    "info" : "ReturnStatement[24383-24423]:ReturnStatement[24417-24457]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[24559-24566]:Modifier[24593-24600]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[24567-24572]:Modifier[24601-24606]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[24573-24582]:SimpleType[24607-24616]"
  }, {
    "left" : "_startValueExpectComma",
    "right" : "_startValueExpectComma",
    "info" : "SimpleName[24583-24605]:SimpleName[24617-24639]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[24606-24612]:SingleVariableDeclaration[24640-24646]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[24621-24632]:SimpleType[24655-24666]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24637-27526]:Block[24671-27560]"
  }, {
    "left" : "if (ch <= 0x0020)",
    "right" : "if (ch <= 0x0020)",
    "info" : "IfStatement[24690-24937]:IfStatement[24724-24971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24708-24937]:Block[24742-24971]"
  }, {
    "left" : "ch = _skipWS(ch);",
    "right" : "ch = _skipWS(ch);",
    "info" : "ExpressionStatement[24722-24739]:ExpressionStatement[24756-24773]"
  }, {
    "left" : "if (ch <= 0)",
    "right" : "if (ch <= 0)",
    "info" : "IfStatement[24805-24927]:IfStatement[24839-24961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24818-24927]:Block[24852-24961]"
  }, {
    "left" : "_minorState = MINOR_VALUE_EXPECTING_COMMA;",
    "right" : "_minorState = MINOR_VALUE_EXPECTING_COMMA;",
    "info" : "ExpressionStatement[24836-24878]:ExpressionStatement[24870-24912]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[24895-24913]:ReturnStatement[24929-24947]"
  }, {
    "left" : "if (ch != INT_COMMA)",
    "right" : "if (ch != INT_COMMA)",
    "info" : "IfStatement[24946-25520]:IfStatement[24980-25554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24967-25520]:Block[25001-25554]"
  }, {
    "left" : "if (ch == INT_RBRACKET)",
    "right" : "if (ch == INT_RBRACKET)",
    "info" : "IfStatement[24981-25063]:IfStatement[25015-25097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25005-25063]:Block[25039-25097]"
  }, {
    "left" : "return _closeArrayScope();",
    "right" : "return _closeArrayScope();",
    "info" : "ReturnStatement[25023-25049]:ReturnStatement[25057-25083]"
  }, {
    "left" : "if (ch == INT_RCURLY)",
    "right" : "if (ch == INT_RCURLY)",
    "info" : "IfStatement[25076-25156]:IfStatement[25110-25190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25097-25156]:Block[25131-25190]"
  }, {
    "left" : "return _closeObjectScope();",
    "right" : "return _closeObjectScope();",
    "info" : "ReturnStatement[25115-25142]:ReturnStatement[25149-25176]"
  }, {
    "left" : "if (ch == INT_SLASH)",
    "right" : "if (ch == INT_SLASH)",
    "info" : "IfStatement[25169-25277]:IfStatement[25203-25311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25190-25277]:Block[25224-25311]"
  }, {
    "left" : "return _startSlashComment(MINOR_VALUE_EXPECTING_COMMA);",
    "right" : "return _startSlashComment(MINOR_VALUE_EXPECTING_COMMA);",
    "info" : "ReturnStatement[25208-25263]:ReturnStatement[25242-25297]"
  }, {
    "left" : "if (ch == INT_HASH)",
    "right" : "if (ch == INT_HASH)",
    "info" : "IfStatement[25290-25397]:IfStatement[25324-25431]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25310-25397]:Block[25344-25431]"
  }, {
    "left" : "return _finishHashComment(MINOR_VALUE_EXPECTING_COMMA);",
    "right" : "return _finishHashComment(MINOR_VALUE_EXPECTING_COMMA);",
    "info" : "ReturnStatement[25328-25383]:ReturnStatement[25362-25417]"
  }, {
    "left" : "_reportUnexpectedChar(ch, \"was expecting comma to separate \"+_parsingContext.typeDesc()+\" entries\");",
    "right" : "_reportUnexpectedChar(ch, \"was expecting comma to separate \"+_parsingContext.typeDesc()+\" entries\");",
    "info" : "ExpressionStatement[25410-25510]:ExpressionStatement[25444-25544]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[25529-25549]:VariableDeclarationStatement[25563-25583]"
  }, {
    "left" : "if (ptr >= _inputEnd)",
    "right" : "if (ptr >= _inputEnd)",
    "info" : "IfStatement[25558-25704]:IfStatement[25592-25738]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25580-25704]:Block[25614-25738]"
  }, {
    "left" : "_minorState = MINOR_VALUE_WS_AFTER_COMMA;",
    "right" : "_minorState = MINOR_VALUE_WS_AFTER_COMMA;",
    "info" : "ExpressionStatement[25594-25635]:ExpressionStatement[25628-25669]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[25648-25694]:ReturnStatement[25682-25728]"
  }, {
    "left" : "ch = _inputBuffer[ptr];",
    "right" : "ch = _inputBuffer[ptr];",
    "info" : "ExpressionStatement[25713-25736]:ExpressionStatement[25747-25770]"
  }, {
    "left" : "_inputPtr = ptr+1;",
    "right" : "_inputPtr = ptr+1;",
    "info" : "ExpressionStatement[25745-25763]:ExpressionStatement[25779-25797]"
  }, {
    "left" : "if (ch <= 0x0020)",
    "right" : "if (ch <= 0x0020)",
    "info" : "IfStatement[25772-25965]:IfStatement[25806-25999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25790-25965]:Block[25824-25999]"
  }, {
    "left" : "ch = _skipWS(ch);",
    "right" : "ch = _skipWS(ch);",
    "info" : "ExpressionStatement[25804-25821]:ExpressionStatement[25838-25855]"
  }, {
    "left" : "if (ch <= 0)",
    "right" : "if (ch <= 0)",
    "info" : "IfStatement[25834-25955]:IfStatement[25868-25989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25847-25955]:Block[25881-25989]"
  }, {
    "left" : "_minorState = MINOR_VALUE_WS_AFTER_COMMA;",
    "right" : "_minorState = MINOR_VALUE_WS_AFTER_COMMA;",
    "info" : "ExpressionStatement[25865-25906]:ExpressionStatement[25899-25940]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[25923-25941]:ReturnStatement[25957-25975]"
  }, {
    "left" : "_updateTokenLocation();",
    "right" : "_updateTokenLocation();",
    "info" : "ExpressionStatement[25974-25997]:ExpressionStatement[26008-26031]"
  }, {
    "left" : "if (ch == INT_QUOTE)",
    "right" : "if (ch == INT_QUOTE)",
    "info" : "IfStatement[26006-26073]:IfStatement[26040-26107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26027-26073]:Block[26061-26107]"
  }, {
    "left" : "return _startString();",
    "right" : "return _startString();",
    "info" : "ReturnStatement[26041-26063]:ReturnStatement[26075-26097]"
  }, {
    "left" : "switch (ch) {\n        case '#':\n            return _finishHashComment(MINOR_VALUE_WS_AFTER_COMMA);\n        case '-':\n            return _startNegativeNumber();\n        case '/':\n            return _startSlashComment(MINOR_VALUE_WS_AFTER_COMMA);\n\n        // Should we have separate handling for plus? Although\n        // it is not allowed per se, it may be erroneously used,\n        // and could be indicate by a more specific error message.\n        case '0':\n            return _startNumberLeadingZero();\n\n        case '1':\n        case '2': case '3':\n        case '4': case '5':\n        case '6': case '7':\n        case '8': case '9':\n            return _startPositiveNumber(ch);\n        case 'f':\n            return _startFalseToken();\n        case 'n':\n            return _startNullToken();\n        case 't':\n            return _startTrueToken();\n        case '[':\n            return _startArrayScope();\n        case ']':\n            // Was that a trailing comma?\n            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {\n                return _closeArrayScope();\n            }\n            break;\n        case '{':\n            return _startObjectScope();\n        case '}':\n            // Was that a trailing comma?\n            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {\n                return _closeObjectScope();\n            }\n            break;\n        default:\n        }",
    "right" : "switch (ch) {\n        case '#':\n            return _finishHashComment(MINOR_VALUE_WS_AFTER_COMMA);\n        case '-':\n            return _startNegativeNumber();\n        case '/':\n            return _startSlashComment(MINOR_VALUE_WS_AFTER_COMMA);\n\n        // Should we have separate handling for plus? Although\n        // it is not allowed per se, it may be erroneously used,\n        // and could be indicate by a more specific error message.\n        case '0':\n            return _startNumberLeadingZero();\n\n        case '1':\n        case '2': case '3':\n        case '4': case '5':\n        case '6': case '7':\n        case '8': case '9':\n            return _startPositiveNumber(ch);\n        case 'f':\n            return _startFalseToken();\n        case 'n':\n            return _startNullToken();\n        case 't':\n            return _startTrueToken();\n        case '[':\n            return _startArrayScope();\n        case ']':\n            // Was that a trailing comma?\n            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {\n                return _closeArrayScope();\n            }\n            break;\n        case '{':\n            return _startObjectScope();\n        case '}':\n            // Was that a trailing comma?\n            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {\n                return _closeObjectScope();\n            }\n            break;\n        default:\n        }",
    "info" : "SwitchStatement[26082-27472]:SwitchStatement[26116-27506]"
  }, {
    "left" : "case '#':",
    "right" : "case '#':",
    "info" : "SwitchCase[26104-26113]:SwitchCase[26138-26147]"
  }, {
    "left" : "return _finishHashComment(MINOR_VALUE_WS_AFTER_COMMA);",
    "right" : "return _finishHashComment(MINOR_VALUE_WS_AFTER_COMMA);",
    "info" : "ReturnStatement[26126-26180]:ReturnStatement[26160-26214]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[26189-26198]:SwitchCase[26223-26232]"
  }, {
    "left" : "return _startNegativeNumber();",
    "right" : "return _startNegativeNumber();",
    "info" : "ReturnStatement[26211-26241]:ReturnStatement[26245-26275]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[26250-26259]:SwitchCase[26284-26293]"
  }, {
    "left" : "return _startSlashComment(MINOR_VALUE_WS_AFTER_COMMA);",
    "right" : "return _startSlashComment(MINOR_VALUE_WS_AFTER_COMMA);",
    "info" : "ReturnStatement[26272-26326]:ReturnStatement[26306-26360]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[26531-26540]:SwitchCase[26565-26574]"
  }, {
    "left" : "return _startNumberLeadingZero();",
    "right" : "return _startNumberLeadingZero();",
    "info" : "ReturnStatement[26553-26586]:ReturnStatement[26587-26620]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[26596-26605]:SwitchCase[26630-26639]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[26614-26623]:SwitchCase[26648-26657]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[26624-26633]:SwitchCase[26658-26667]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[26642-26651]:SwitchCase[26676-26685]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[26652-26661]:SwitchCase[26686-26695]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[26670-26679]:SwitchCase[26704-26713]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[26680-26689]:SwitchCase[26714-26723]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[26698-26707]:SwitchCase[26732-26741]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[26708-26717]:SwitchCase[26742-26751]"
  }, {
    "left" : "return _startPositiveNumber(ch);",
    "right" : "return _startPositiveNumber(ch);",
    "info" : "ReturnStatement[26730-26762]:ReturnStatement[26764-26796]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[26771-26780]:SwitchCase[26805-26814]"
  }, {
    "left" : "return _startFalseToken();",
    "right" : "return _startFalseToken();",
    "info" : "ReturnStatement[26793-26819]:ReturnStatement[26827-26853]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[26828-26837]:SwitchCase[26862-26871]"
  }, {
    "left" : "return _startNullToken();",
    "right" : "return _startNullToken();",
    "info" : "ReturnStatement[26850-26875]:ReturnStatement[26884-26909]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[26884-26893]:SwitchCase[26918-26927]"
  }, {
    "left" : "return _startTrueToken();",
    "right" : "return _startTrueToken();",
    "info" : "ReturnStatement[26906-26931]:ReturnStatement[26940-26965]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[26940-26949]:SwitchCase[26974-26983]"
  }, {
    "left" : "return _startArrayScope();",
    "right" : "return _startArrayScope();",
    "info" : "ReturnStatement[26962-26988]:ReturnStatement[26996-27022]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[26997-27006]:SwitchCase[27031-27040]"
  }, {
    "left" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "right" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "info" : "IfStatement[27061-27168]:IfStatement[27095-27202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27110-27168]:Block[27144-27202]"
  }, {
    "left" : "return _closeArrayScope();",
    "right" : "return _closeArrayScope();",
    "info" : "ReturnStatement[27128-27154]:ReturnStatement[27162-27188]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[27181-27187]:BreakStatement[27215-27221]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[27196-27205]:SwitchCase[27230-27239]"
  }, {
    "left" : "return _startObjectScope();",
    "right" : "return _startObjectScope();",
    "info" : "ReturnStatement[27218-27245]:ReturnStatement[27252-27279]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[27254-27263]:SwitchCase[27288-27297]"
  }, {
    "left" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "right" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "info" : "IfStatement[27318-27426]:IfStatement[27352-27460]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27367-27426]:Block[27401-27460]"
  }, {
    "left" : "return _closeObjectScope();",
    "right" : "return _closeObjectScope();",
    "info" : "ReturnStatement[27385-27412]:ReturnStatement[27419-27446]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[27439-27445]:BreakStatement[27473-27479]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[27454-27462]:SwitchCase[27488-27496]"
  }, {
    "left" : "return _startUnexpectedValue(true, ch);",
    "right" : "return _startUnexpectedValue(true, ch);",
    "info" : "ReturnStatement[27481-27520]:ReturnStatement[27515-27554]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27771-27778]:Modifier[27805-27812]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[27779-27784]:Modifier[27813-27818]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[27785-27794]:SimpleType[27819-27828]"
  }, {
    "left" : "_startValueExpectColon",
    "right" : "_startValueExpectColon",
    "info" : "SimpleName[27795-27817]:SimpleName[27829-27851]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[27818-27824]:SingleVariableDeclaration[27852-27858]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[27833-27844]:SimpleType[27867-27878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27849-30212]:Block[27883-30246]"
  }, {
    "left" : "if (ch <= 0x0020)",
    "right" : "if (ch <= 0x0020)",
    "info" : "IfStatement[27902-28149]:IfStatement[27936-28183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27920-28149]:Block[27954-28183]"
  }, {
    "left" : "ch = _skipWS(ch);",
    "right" : "ch = _skipWS(ch);",
    "info" : "ExpressionStatement[27934-27951]:ExpressionStatement[27968-27985]"
  }, {
    "left" : "if (ch <= 0)",
    "right" : "if (ch <= 0)",
    "info" : "IfStatement[28017-28139]:IfStatement[28051-28173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28030-28139]:Block[28064-28173]"
  }, {
    "left" : "_minorState = MINOR_VALUE_EXPECTING_COLON;",
    "right" : "_minorState = MINOR_VALUE_EXPECTING_COLON;",
    "info" : "ExpressionStatement[28048-28090]:ExpressionStatement[28082-28124]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[28107-28125]:ReturnStatement[28141-28159]"
  }, {
    "left" : "if (ch != INT_COLON)",
    "right" : "if (ch != INT_COLON)",
    "info" : "IfStatement[28158-28567]:IfStatement[28192-28601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28179-28567]:Block[28213-28601]"
  }, {
    "left" : "if (ch == INT_SLASH)",
    "right" : "if (ch == INT_SLASH)",
    "info" : "IfStatement[28193-28301]:IfStatement[28227-28335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28214-28301]:Block[28248-28335]"
  }, {
    "left" : "return _startSlashComment(MINOR_VALUE_EXPECTING_COLON);",
    "right" : "return _startSlashComment(MINOR_VALUE_EXPECTING_COLON);",
    "info" : "ReturnStatement[28232-28287]:ReturnStatement[28266-28321]"
  }, {
    "left" : "if (ch == INT_HASH)",
    "right" : "if (ch == INT_HASH)",
    "info" : "IfStatement[28314-28421]:IfStatement[28348-28455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28334-28421]:Block[28368-28455]"
  }, {
    "left" : "return _finishHashComment(MINOR_VALUE_EXPECTING_COLON);",
    "right" : "return _finishHashComment(MINOR_VALUE_EXPECTING_COLON);",
    "info" : "ReturnStatement[28352-28407]:ReturnStatement[28386-28441]"
  }, {
    "left" : "_reportUnexpectedChar(ch, \"was expecting a colon to separate field name and value\");",
    "right" : "_reportUnexpectedChar(ch, \"was expecting a colon to separate field name and value\");",
    "info" : "ExpressionStatement[28473-28557]:ExpressionStatement[28507-28591]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[28576-28596]:VariableDeclarationStatement[28610-28630]"
  }, {
    "left" : "if (ptr >= _inputEnd)",
    "right" : "if (ptr >= _inputEnd)",
    "info" : "IfStatement[28605-28747]:IfStatement[28639-28781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28627-28747]:Block[28661-28781]"
  }, {
    "left" : "_minorState = MINOR_VALUE_LEADING_WS;",
    "right" : "_minorState = MINOR_VALUE_LEADING_WS;",
    "info" : "ExpressionStatement[28641-28678]:ExpressionStatement[28675-28712]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[28691-28737]:ReturnStatement[28725-28771]"
  }, {
    "left" : "ch = _inputBuffer[ptr];",
    "right" : "ch = _inputBuffer[ptr];",
    "info" : "ExpressionStatement[28756-28779]:ExpressionStatement[28790-28813]"
  }, {
    "left" : "_inputPtr = ptr+1;",
    "right" : "_inputPtr = ptr+1;",
    "info" : "ExpressionStatement[28788-28806]:ExpressionStatement[28822-28840]"
  }, {
    "left" : "if (ch <= 0x0020)",
    "right" : "if (ch <= 0x0020)",
    "info" : "IfStatement[28815-29057]:IfStatement[28849-29091]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28833-29057]:Block[28867-29091]"
  }, {
    "left" : "ch = _skipWS(ch);",
    "right" : "ch = _skipWS(ch);",
    "info" : "ExpressionStatement[28847-28864]:ExpressionStatement[28881-28898]"
  }, {
    "left" : "if (ch <= 0)",
    "right" : "if (ch <= 0)",
    "info" : "IfStatement[28930-29047]:IfStatement[28964-29081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28943-29047]:Block[28977-29081]"
  }, {
    "left" : "_minorState = MINOR_VALUE_LEADING_WS;",
    "right" : "_minorState = MINOR_VALUE_LEADING_WS;",
    "info" : "ExpressionStatement[28961-28998]:ExpressionStatement[28995-29032]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[29015-29033]:ReturnStatement[29049-29067]"
  }, {
    "left" : "_updateTokenLocation();",
    "right" : "_updateTokenLocation();",
    "info" : "ExpressionStatement[29066-29089]:ExpressionStatement[29100-29123]"
  }, {
    "left" : "if (ch == INT_QUOTE)",
    "right" : "if (ch == INT_QUOTE)",
    "info" : "IfStatement[29098-29165]:IfStatement[29132-29199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29119-29165]:Block[29153-29199]"
  }, {
    "left" : "return _startString();",
    "right" : "return _startString();",
    "info" : "ReturnStatement[29133-29155]:ReturnStatement[29167-29189]"
  }, {
    "left" : "switch (ch) {\n        case '#':\n            return _finishHashComment(MINOR_VALUE_LEADING_WS);\n        case '-':\n            return _startNegativeNumber();\n        case '/':\n            return _startSlashComment(MINOR_VALUE_LEADING_WS);\n\n        // Should we have separate handling for plus? Although\n        // it is not allowed per se, it may be erroneously used,\n        // and could be indicate by a more specific error message.\n        case '0':\n            return _startNumberLeadingZero();\n\n        case '1':\n        case '2': case '3':\n        case '4': case '5':\n        case '6': case '7':\n        case '8': case '9':\n            return _startPositiveNumber(ch);\n        case 'f':\n            return _startFalseToken();\n        case 'n':\n            return _startNullToken();\n        case 't':\n            return _startTrueToken();\n        case '[':\n            return _startArrayScope();\n        case '{':\n            return _startObjectScope();\n        default:\n        }",
    "right" : "switch (ch) {\n        case '#':\n            return _finishHashComment(MINOR_VALUE_LEADING_WS);\n        case '-':\n            return _startNegativeNumber();\n        case '/':\n            return _startSlashComment(MINOR_VALUE_LEADING_WS);\n\n        // Should we have separate handling for plus? Although\n        // it is not allowed per se, it may be erroneously used,\n        // and could be indicate by a more specific error message.\n        case '0':\n            return _startNumberLeadingZero();\n\n        case '1':\n        case '2': case '3':\n        case '4': case '5':\n        case '6': case '7':\n        case '8': case '9':\n            return _startPositiveNumber(ch);\n        case 'f':\n            return _startFalseToken();\n        case 'n':\n            return _startNullToken();\n        case 't':\n            return _startTrueToken();\n        case '[':\n            return _startArrayScope();\n        case '{':\n            return _startObjectScope();\n        default:\n        }",
    "info" : "SwitchStatement[29174-30157]:SwitchStatement[29208-30191]"
  }, {
    "left" : "case '#':",
    "right" : "case '#':",
    "info" : "SwitchCase[29196-29205]:SwitchCase[29230-29239]"
  }, {
    "left" : "return _finishHashComment(MINOR_VALUE_LEADING_WS);",
    "right" : "return _finishHashComment(MINOR_VALUE_LEADING_WS);",
    "info" : "ReturnStatement[29218-29268]:ReturnStatement[29252-29302]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[29277-29286]:SwitchCase[29311-29320]"
  }, {
    "left" : "return _startNegativeNumber();",
    "right" : "return _startNegativeNumber();",
    "info" : "ReturnStatement[29299-29329]:ReturnStatement[29333-29363]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[29338-29347]:SwitchCase[29372-29381]"
  }, {
    "left" : "return _startSlashComment(MINOR_VALUE_LEADING_WS);",
    "right" : "return _startSlashComment(MINOR_VALUE_LEADING_WS);",
    "info" : "ReturnStatement[29360-29410]:ReturnStatement[29394-29444]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[29615-29624]:SwitchCase[29649-29658]"
  }, {
    "left" : "return _startNumberLeadingZero();",
    "right" : "return _startNumberLeadingZero();",
    "info" : "ReturnStatement[29637-29670]:ReturnStatement[29671-29704]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[29680-29689]:SwitchCase[29714-29723]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[29698-29707]:SwitchCase[29732-29741]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[29708-29717]:SwitchCase[29742-29751]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[29726-29735]:SwitchCase[29760-29769]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[29736-29745]:SwitchCase[29770-29779]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[29754-29763]:SwitchCase[29788-29797]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[29764-29773]:SwitchCase[29798-29807]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[29782-29791]:SwitchCase[29816-29825]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[29792-29801]:SwitchCase[29826-29835]"
  }, {
    "left" : "return _startPositiveNumber(ch);",
    "right" : "return _startPositiveNumber(ch);",
    "info" : "ReturnStatement[29814-29846]:ReturnStatement[29848-29880]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[29855-29864]:SwitchCase[29889-29898]"
  }, {
    "left" : "return _startFalseToken();",
    "right" : "return _startFalseToken();",
    "info" : "ReturnStatement[29877-29903]:ReturnStatement[29911-29937]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[29912-29921]:SwitchCase[29946-29955]"
  }, {
    "left" : "return _startNullToken();",
    "right" : "return _startNullToken();",
    "info" : "ReturnStatement[29934-29959]:ReturnStatement[29968-29993]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[29968-29977]:SwitchCase[30002-30011]"
  }, {
    "left" : "return _startTrueToken();",
    "right" : "return _startTrueToken();",
    "info" : "ReturnStatement[29990-30015]:ReturnStatement[30024-30049]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[30024-30033]:SwitchCase[30058-30067]"
  }, {
    "left" : "return _startArrayScope();",
    "right" : "return _startArrayScope();",
    "info" : "ReturnStatement[30046-30072]:ReturnStatement[30080-30106]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[30081-30090]:SwitchCase[30115-30124]"
  }, {
    "left" : "return _startObjectScope();",
    "right" : "return _startObjectScope();",
    "info" : "ReturnStatement[30103-30130]:ReturnStatement[30137-30164]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[30139-30147]:SwitchCase[30173-30181]"
  }, {
    "left" : "return _startUnexpectedValue(false, ch);",
    "right" : "return _startUnexpectedValue(false, ch);",
    "info" : "ReturnStatement[30166-30206]:ReturnStatement[30200-30240]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[30310-30317]:Modifier[30344-30351]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[30318-30323]:Modifier[30352-30357]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[30324-30333]:SimpleType[30358-30367]"
  }, {
    "left" : "_startValueAfterComma",
    "right" : "_startValueAfterComma",
    "info" : "SimpleName[30334-30355]:SimpleName[30368-30389]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[30356-30362]:SingleVariableDeclaration[30390-30396]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[30371-30382]:SimpleType[30405-30416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30387-32225]:Block[30421-32259]"
  }, {
    "left" : "if (ch <= 0x0020)",
    "right" : "if (ch <= 0x0020)",
    "info" : "IfStatement[30440-30633]:IfStatement[30474-30667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30458-30633]:Block[30492-30667]"
  }, {
    "left" : "ch = _skipWS(ch);",
    "right" : "ch = _skipWS(ch);",
    "info" : "ExpressionStatement[30472-30489]:ExpressionStatement[30506-30523]"
  }, {
    "left" : "if (ch <= 0)",
    "right" : "if (ch <= 0)",
    "info" : "IfStatement[30502-30623]:IfStatement[30536-30657]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30515-30623]:Block[30549-30657]"
  }, {
    "left" : "_minorState = MINOR_VALUE_WS_AFTER_COMMA;",
    "right" : "_minorState = MINOR_VALUE_WS_AFTER_COMMA;",
    "info" : "ExpressionStatement[30533-30574]:ExpressionStatement[30567-30608]"
  }, {
    "left" : "return _currToken;",
    "right" : "return _currToken;",
    "info" : "ReturnStatement[30591-30609]:ReturnStatement[30625-30643]"
  }, {
    "left" : "_updateTokenLocation();",
    "right" : "_updateTokenLocation();",
    "info" : "ExpressionStatement[30642-30665]:ExpressionStatement[30676-30699]"
  }, {
    "left" : "if (ch == INT_QUOTE)",
    "right" : "if (ch == INT_QUOTE)",
    "info" : "IfStatement[30674-30741]:IfStatement[30708-30775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30695-30741]:Block[30729-30775]"
  }, {
    "left" : "return _startString();",
    "right" : "return _startString();",
    "info" : "ReturnStatement[30709-30731]:ReturnStatement[30743-30765]"
  }, {
    "left" : "switch (ch) {\n        case '#':\n            return _finishHashComment(MINOR_VALUE_WS_AFTER_COMMA);\n        case '-':\n            return _startNegativeNumber();\n        case '/':\n            return _startSlashComment(MINOR_VALUE_WS_AFTER_COMMA);\n\n        // Should we have separate handling for plus? Although\n        // it is not allowed per se, it may be erroneously used,\n        // and could be indicate by a more specific error message.\n        case '0':\n            return _startNumberLeadingZero();\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return _startPositiveNumber(ch);\n        case 'f':\n            return _startFalseToken();\n        case 'n':\n            return _startNullToken();\n        case 't':\n            return _startTrueToken();\n        case '[':\n            return _startArrayScope();\n        case ']':\n            // Was that a trailing comma?\n            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {\n                return _closeArrayScope();\n            }\n            break;\n        case '{':\n            return _startObjectScope();\n        case '}':\n            // Was that a trailing comma?\n            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {\n                return _closeObjectScope();\n            }\n            break;\n        default:\n        }",
    "right" : "switch (ch) {\n        case '#':\n            return _finishHashComment(MINOR_VALUE_WS_AFTER_COMMA);\n        case '-':\n            return _startNegativeNumber();\n        case '/':\n            return _startSlashComment(MINOR_VALUE_WS_AFTER_COMMA);\n\n        // Should we have separate handling for plus? Although\n        // it is not allowed per se, it may be erroneously used,\n        // and could be indicate by a more specific error message.\n        case '0':\n            return _startNumberLeadingZero();\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return _startPositiveNumber(ch);\n        case 'f':\n            return _startFalseToken();\n        case 'n':\n            return _startNullToken();\n        case 't':\n            return _startTrueToken();\n        case '[':\n            return _startArrayScope();\n        case ']':\n            // Was that a trailing comma?\n            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {\n                return _closeArrayScope();\n            }\n            break;\n        case '{':\n            return _startObjectScope();\n        case '}':\n            // Was that a trailing comma?\n            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {\n                return _closeObjectScope();\n            }\n            break;\n        default:\n        }",
    "info" : "SwitchStatement[30750-32171]:SwitchStatement[30784-32205]"
  }, {
    "left" : "case '#':",
    "right" : "case '#':",
    "info" : "SwitchCase[30772-30781]:SwitchCase[30806-30815]"
  }, {
    "left" : "return _finishHashComment(MINOR_VALUE_WS_AFTER_COMMA);",
    "right" : "return _finishHashComment(MINOR_VALUE_WS_AFTER_COMMA);",
    "info" : "ReturnStatement[30794-30848]:ReturnStatement[30828-30882]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[30857-30866]:SwitchCase[30891-30900]"
  }, {
    "left" : "return _startNegativeNumber();",
    "right" : "return _startNegativeNumber();",
    "info" : "ReturnStatement[30879-30909]:ReturnStatement[30913-30943]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[30918-30927]:SwitchCase[30952-30961]"
  }, {
    "left" : "return _startSlashComment(MINOR_VALUE_WS_AFTER_COMMA);",
    "right" : "return _startSlashComment(MINOR_VALUE_WS_AFTER_COMMA);",
    "info" : "ReturnStatement[30940-30994]:ReturnStatement[30974-31028]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[31199-31208]:SwitchCase[31233-31242]"
  }, {
    "left" : "return _startNumberLeadingZero();",
    "right" : "return _startNumberLeadingZero();",
    "info" : "ReturnStatement[31221-31254]:ReturnStatement[31255-31288]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[31263-31272]:SwitchCase[31297-31306]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[31281-31290]:SwitchCase[31315-31324]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[31299-31308]:SwitchCase[31333-31342]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[31317-31326]:SwitchCase[31351-31360]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[31335-31344]:SwitchCase[31369-31378]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[31353-31362]:SwitchCase[31387-31396]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[31371-31380]:SwitchCase[31405-31414]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[31389-31398]:SwitchCase[31423-31432]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[31407-31416]:SwitchCase[31441-31450]"
  }, {
    "left" : "return _startPositiveNumber(ch);",
    "right" : "return _startPositiveNumber(ch);",
    "info" : "ReturnStatement[31429-31461]:ReturnStatement[31463-31495]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[31470-31479]:SwitchCase[31504-31513]"
  }, {
    "left" : "return _startFalseToken();",
    "right" : "return _startFalseToken();",
    "info" : "ReturnStatement[31492-31518]:ReturnStatement[31526-31552]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[31527-31536]:SwitchCase[31561-31570]"
  }, {
    "left" : "return _startNullToken();",
    "right" : "return _startNullToken();",
    "info" : "ReturnStatement[31549-31574]:ReturnStatement[31583-31608]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[31583-31592]:SwitchCase[31617-31626]"
  }, {
    "left" : "return _startTrueToken();",
    "right" : "return _startTrueToken();",
    "info" : "ReturnStatement[31605-31630]:ReturnStatement[31639-31664]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[31639-31648]:SwitchCase[31673-31682]"
  }, {
    "left" : "return _startArrayScope();",
    "right" : "return _startArrayScope();",
    "info" : "ReturnStatement[31661-31687]:ReturnStatement[31695-31721]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[31696-31705]:SwitchCase[31730-31739]"
  }, {
    "left" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "right" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "info" : "IfStatement[31760-31867]:IfStatement[31794-31901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31809-31867]:Block[31843-31901]"
  }, {
    "left" : "return _closeArrayScope();",
    "right" : "return _closeArrayScope();",
    "info" : "ReturnStatement[31827-31853]:ReturnStatement[31861-31887]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[31880-31886]:BreakStatement[31914-31920]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[31895-31904]:SwitchCase[31929-31938]"
  }, {
    "left" : "return _startObjectScope();",
    "right" : "return _startObjectScope();",
    "info" : "ReturnStatement[31917-31944]:ReturnStatement[31951-31978]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[31953-31962]:SwitchCase[31987-31996]"
  }, {
    "left" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "right" : "if ((_features & FEAT_MASK_TRAILING_COMMA) != 0)",
    "info" : "IfStatement[32017-32125]:IfStatement[32051-32159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32066-32125]:Block[32100-32159]"
  }, {
    "left" : "return _closeObjectScope();",
    "right" : "return _closeObjectScope();",
    "info" : "ReturnStatement[32084-32111]:ReturnStatement[32118-32145]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32138-32144]:BreakStatement[32172-32178]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[32153-32161]:SwitchCase[32187-32195]"
  }, {
    "left" : "return _startUnexpectedValue(true, ch);",
    "right" : "return _startUnexpectedValue(true, ch);",
    "info" : "ReturnStatement[32180-32219]:ReturnStatement[32214-32253]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[32231-32240]:Modifier[32265-32274]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[32241-32250]:SimpleType[32275-32284]"
  }, {
    "left" : "_startUnexpectedValue",
    "right" : "_startUnexpectedValue",
    "info" : "SimpleName[32251-32272]:SimpleName[32285-32306]"
  }, {
    "left" : "boolean leadingComma",
    "right" : "boolean leadingComma",
    "info" : "SingleVariableDeclaration[32273-32293]:SingleVariableDeclaration[32307-32327]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[32295-32301]:SingleVariableDeclaration[32329-32335]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[32310-32321]:SimpleType[32344-32355]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32326-33737]:Block[32360-33771]"
  }, {
    "left" : "switch (ch) {\n        case ']':\n            if (!_parsingContext.inArray()) {\n                break;\n            }\n            // fall through\n        case ',':\n            // 28-Mar-2016: [
core#116]: If Feature.ALLOW_MISSING_VALUES is enabled\n            //   we may allow \"missing values\", that is, encountering a trailing\n            //   comma or closing marker where value would be expected\n            if ((_features & FEAT_MASK_ALLOW_MISSING) != 0) {\n                --_inputPtr;\n                return _valueComplete(JsonToken.VALUE_NULL);\n            }\n            // fall through\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            break;\n        case '\\'':\n            if ((_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0) {\n                return _startAposString();\n            }\n            break;\n        case '+':\n            return _finishNonStdToken(NON_STD_TOKEN_PLUS_INFINITY, 1);\n        case 'N':\n            return _finishNonStdToken(NON_STD_TOKEN_NAN, 1);            \n        case 'I':\n            return _finishNonStdToken(NON_STD_TOKEN_INFINITY, 1);\n        }",
    "right" : "switch (ch) {\n        case ']':\n            if (!_parsingContext.inArray()) {\n                break;\n            }\n            // fall through\n        case ',':\n            // 28-Mar-2016: [
core#116]: If Feature.ALLOW_MISSING_VALUES is enabled\n            //   we may allow \"missing values\", that is, encountering a trailing\n            //   comma or closing marker where value would be expected\n            if ((_features & FEAT_MASK_ALLOW_MISSING) != 0) {\n                --_inputPtr;\n                return _valueComplete(JsonToken.VALUE_NULL);\n            }\n            // fall through\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            break;\n        case '\\'':\n            if ((_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0) {\n                return _startAposString();\n            }\n            break;\n        case '+':\n            return _finishNonStdToken(NON_STD_TOKEN_PLUS_INFINITY, 1);\n        case 'N':\n            return _finishNonStdToken(NON_STD_TOKEN_NAN, 1);            \n        case 'I':\n            return _finishNonStdToken(NON_STD_TOKEN_INFINITY, 1);\n        }",
    "info" : "SwitchStatement[32336-33508]:SwitchStatement[32370-33542]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[32358-32367]:SwitchCase[32392-32401]"
  }, {
    "left" : "if (!_parsingContext.inArray())",
    "right" : "if (!_parsingContext.inArray())",
    "info" : "IfStatement[32380-32450]:IfStatement[32414-32484]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32412-32450]:Block[32446-32484]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32430-32436]:BreakStatement[32464-32470]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[32487-32496]:SwitchCase[32521-32530]"
  }, {
    "left" : "if ((_features & FEAT_MASK_ALLOW_MISSING) != 0)",
    "right" : "if ((_features & FEAT_MASK_ALLOW_MISSING) != 0)",
    "info" : "IfStatement[32744-32897]:IfStatement[32778-32931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32792-32897]:Block[32826-32931]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[32810-32822]:ExpressionStatement[32844-32856]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_NULL);",
    "right" : "return _valueComplete(JsonToken.VALUE_NULL);",
    "info" : "ReturnStatement[32839-32883]:ReturnStatement[32873-32917]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[32934-32943]:SwitchCase[32968-32977]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[33065-33071]:BreakStatement[33099-33105]"
  }, {
    "left" : "case '\\'':",
    "right" : "case '\\'':",
    "info" : "SwitchCase[33080-33090]:SwitchCase[33114-33124]"
  }, {
    "left" : "if ((_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0)",
    "right" : "if ((_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0)",
    "info" : "IfStatement[33103-33215]:IfStatement[33137-33249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33157-33215]:Block[33191-33249]"
  }, {
    "left" : "return _startAposString();",
    "right" : "return _startAposString();",
    "info" : "ReturnStatement[33175-33201]:ReturnStatement[33209-33235]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[33228-33234]:BreakStatement[33262-33268]"
  }, {
    "left" : "case '+':",
    "right" : "case '+':",
    "info" : "SwitchCase[33243-33252]:SwitchCase[33277-33286]"
  }, {
    "left" : "return _finishNonStdToken(NON_STD_TOKEN_PLUS_INFINITY, 1);",
    "right" : "return _finishNonStdToken(NON_STD_TOKEN_PLUS_INFINITY, 1);",
    "info" : "ReturnStatement[33265-33323]:ReturnStatement[33299-33357]"
  }, {
    "left" : "case 'N':",
    "right" : "case 'N':",
    "info" : "SwitchCase[33332-33341]:SwitchCase[33366-33375]"
  }, {
    "left" : "return _finishNonStdToken(NON_STD_TOKEN_NAN, 1);",
    "right" : "return _finishNonStdToken(NON_STD_TOKEN_NAN, 1);",
    "info" : "ReturnStatement[33354-33402]:ReturnStatement[33388-33436]"
  }, {
    "left" : "case 'I':",
    "right" : "case 'I':",
    "info" : "SwitchCase[33423-33432]:SwitchCase[33457-33466]"
  }, {
    "left" : "return _finishNonStdToken(NON_STD_TOKEN_INFINITY, 1);",
    "right" : "return _finishNonStdToken(NON_STD_TOKEN_INFINITY, 1);",
    "info" : "ReturnStatement[33445-33498]:ReturnStatement[33479-33532]"
  }, {
    "left" : "_reportUnexpectedChar(ch, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
    "right" : "_reportUnexpectedChar(ch, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
    "info" : "ExpressionStatement[33599-33710]:ExpressionStatement[33633-33744]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[33719-33731]:ReturnStatement[33753-33765]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33976-33983]:Modifier[34010-34017]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[33984-33989]:Modifier[34018-34023]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[33990-33993]:PrimitiveType[34024-34027]"
  }, {
    "left" : "_skipWS",
    "right" : "_skipWS",
    "info" : "SimpleName[33994-34001]:SimpleName[34028-34035]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[34002-34008]:SingleVariableDeclaration[34036-34042]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[34017-34028]:SimpleType[34051-34062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34033-34706]:Block[34067-34740]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[34043-34681]:DoStatement[34077-34715]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34046-34659]:Block[34080-34693]"
  }, {
    "left" : "if (ch != INT_SPACE)",
    "right" : "if (ch != INT_SPACE)",
    "info" : "IfStatement[34060-34462]:IfStatement[34094-34496]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34081-34462]:Block[34115-34496]"
  }, {
    "left" : "if (ch == INT_LF)",
    "right" : "if (ch == INT_LF)",
    "info" : "IfStatement[34099-34448]:IfStatement[34133-34482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34117-34225]:Block[34151-34259]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[34139-34155]:ExpressionStatement[34173-34189]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[34176-34207]:ExpressionStatement[34210-34241]"
  }, {
    "left" : "if (ch == INT_CR)",
    "right" : "if (ch == INT_CR)",
    "info" : "IfStatement[34231-34448]:IfStatement[34265-34482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34249-34360]:Block[34283-34394]"
  }, {
    "left" : "++_currInputRowAlt;",
    "right" : "++_currInputRowAlt;",
    "info" : "ExpressionStatement[34271-34290]:ExpressionStatement[34305-34324]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[34311-34342]:ExpressionStatement[34345-34376]"
  }, {
    "left" : "if (ch != INT_TAB)",
    "right" : "if (ch != INT_TAB)",
    "info" : "IfStatement[34366-34448]:IfStatement[34400-34482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34385-34448]:Block[34419-34482]"
  }, {
    "left" : "_throwInvalidSpace(ch);",
    "right" : "_throwInvalidSpace(ch);",
    "info" : "ExpressionStatement[34407-34430]:ExpressionStatement[34441-34464]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[34475-34598]:IfStatement[34509-34632]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34503-34598]:Block[34537-34632]"
  }, {
    "left" : "_currToken = JsonToken.NOT_AVAILABLE;",
    "right" : "_currToken = JsonToken.NOT_AVAILABLE;",
    "info" : "ExpressionStatement[34521-34558]:ExpressionStatement[34555-34592]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[34575-34584]:ReturnStatement[34609-34618]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[34611-34649]:ExpressionStatement[34645-34683]"
  }, {
    "left" : "return ch;",
    "right" : "return ch;",
    "info" : "ReturnStatement[34690-34700]:ReturnStatement[34724-34734]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[34712-34719]:Modifier[34746-34753]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[34720-34725]:Modifier[34754-34759]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[34726-34735]:SimpleType[34760-34769]"
  }, {
    "left" : "_startSlashComment",
    "right" : "_startSlashComment",
    "info" : "SimpleName[34736-34754]:SimpleName[34770-34788]"
  }, {
    "left" : "int fromMinorState",
    "right" : "int fromMinorState",
    "info" : "SingleVariableDeclaration[34755-34773]:SingleVariableDeclaration[34789-34807]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[34782-34793]:SimpleType[34816-34827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34798-35677]:Block[34832-35711]"
  }, {
    "left" : "if ((_features & FEAT_MASK_ALLOW_JAVA_COMMENTS) == 0)",
    "right" : "if ((_features & FEAT_MASK_ALLOW_JAVA_COMMENTS) == 0)",
    "info" : "IfStatement[34808-35026]:IfStatement[34842-35060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34862-35026]:Block[34896-35060]"
  }, {
    "left" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
    "right" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
    "info" : "ExpressionStatement[34876-35016]:ExpressionStatement[34910-35050]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[35099-35293]:IfStatement[35133-35327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35127-35293]:Block[35161-35327]"
  }, {
    "left" : "_pending32 = fromMinorState;",
    "right" : "_pending32 = fromMinorState;",
    "info" : "ExpressionStatement[35141-35169]:ExpressionStatement[35175-35203]"
  }, {
    "left" : "_minorState = MINOR_COMMENT_LEADING_SLASH;",
    "right" : "_minorState = MINOR_COMMENT_LEADING_SLASH;",
    "info" : "ExpressionStatement[35182-35224]:ExpressionStatement[35216-35258]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[35237-35283]:ReturnStatement[35271-35317]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr++];",
    "right" : "int ch = _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[35302-35337]:VariableDeclarationStatement[35336-35371]"
  }, {
    "left" : "if (ch == INT_ASTERISK)",
    "right" : "if (ch == INT_ASTERISK)",
    "info" : "IfStatement[35346-35451]:IfStatement[35380-35485]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35370-35451]:Block[35404-35485]"
  }, {
    "left" : "return _finishCComment(fromMinorState, false);",
    "right" : "return _finishCComment(fromMinorState, false);",
    "info" : "ReturnStatement[35395-35441]:ReturnStatement[35429-35475]"
  }, {
    "left" : "if (ch == INT_SLASH)",
    "right" : "if (ch == INT_SLASH)",
    "info" : "IfStatement[35460-35559]:IfStatement[35494-35593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35481-35559]:Block[35515-35593]"
  }, {
    "left" : "return _finishCppComment(fromMinorState);",
    "right" : "return _finishCppComment(fromMinorState);",
    "info" : "ReturnStatement[35508-35549]:ReturnStatement[35542-35583]"
  }, {
    "left" : "_reportUnexpectedChar(ch & 0xFF, \"was expecting either '*' or '/' for a comment\");",
    "right" : "_reportUnexpectedChar(ch & 0xFF, \"was expecting either '*' or '/' for a comment\");",
    "info" : "ExpressionStatement[35568-35650]:ExpressionStatement[35602-35684]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[35659-35671]:ReturnStatement[35693-35705]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35683-35690]:Modifier[35717-35724]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[35691-35696]:Modifier[35725-35730]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[35697-35706]:SimpleType[35731-35740]"
  }, {
    "left" : "_finishHashComment",
    "right" : "_finishHashComment",
    "info" : "SimpleName[35707-35725]:SimpleName[35741-35759]"
  }, {
    "left" : "int fromMinorState",
    "right" : "int fromMinorState",
    "info" : "SingleVariableDeclaration[35726-35744]:SingleVariableDeclaration[35760-35778]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[35753-35764]:SimpleType[35787-35798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35769-36905]:Block[35803-36939]"
  }, {
    "left" : "if ((_features & FEAT_MASK_ALLOW_YAML_COMMENTS) == 0)",
    "right" : "if ((_features & FEAT_MASK_ALLOW_YAML_COMMENTS) == 0)",
    "info" : "IfStatement[35859-36082]:IfStatement[35893-36116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35913-36082]:Block[35947-36116]"
  }, {
    "left" : "_reportUnexpectedChar('#', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_YAML_COMMENTS' not enabled for parser)\");",
    "right" : "_reportUnexpectedChar('#', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_YAML_COMMENTS' not enabled for parser)\");",
    "info" : "ExpressionStatement[35927-36072]:ExpressionStatement[35961-36106]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[36091-36848]:WhileStatement[36125-36882]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36104-36848]:Block[36138-36882]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[36118-36319]:IfStatement[36152-36353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36146-36319]:Block[36180-36353]"
  }, {
    "left" : "_minorState = MINOR_COMMENT_YAML;",
    "right" : "_minorState = MINOR_COMMENT_YAML;",
    "info" : "ExpressionStatement[36164-36197]:ExpressionStatement[36198-36231]"
  }, {
    "left" : "_pending32 = fromMinorState;",
    "right" : "_pending32 = fromMinorState;",
    "info" : "ExpressionStatement[36214-36242]:ExpressionStatement[36248-36276]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[36259-36305]:ReturnStatement[36293-36339]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[36332-36374]:VariableDeclarationStatement[36366-36408]"
  }, {
    "left" : "if (ch < 0x020)",
    "right" : "if (ch < 0x020)",
    "info" : "IfStatement[36387-36838]:IfStatement[36421-36872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36403-36838]:Block[36437-36872]"
  }, {
    "left" : "if (ch == INT_LF)",
    "right" : "if (ch == INT_LF)",
    "info" : "IfStatement[36421-36824]:IfStatement[36455-36858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36439-36574]:Block[36473-36608]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[36461-36477]:ExpressionStatement[36495-36511]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[36498-36529]:ExpressionStatement[36532-36563]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[36550-36556]:BreakStatement[36584-36590]"
  }, {
    "left" : "if (ch == INT_CR)",
    "right" : "if (ch == INT_CR)",
    "info" : "IfStatement[36580-36824]:IfStatement[36614-36858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36598-36736]:Block[36632-36770]"
  }, {
    "left" : "++_currInputRowAlt;",
    "right" : "++_currInputRowAlt;",
    "info" : "ExpressionStatement[36620-36639]:ExpressionStatement[36654-36673]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[36660-36691]:ExpressionStatement[36694-36725]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[36712-36718]:BreakStatement[36746-36752]"
  }, {
    "left" : "if (ch != INT_TAB)",
    "right" : "if (ch != INT_TAB)",
    "info" : "IfStatement[36742-36824]:IfStatement[36776-36858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36761-36824]:Block[36795-36858]"
  }, {
    "left" : "_throwInvalidSpace(ch);",
    "right" : "_throwInvalidSpace(ch);",
    "info" : "ExpressionStatement[36783-36806]:ExpressionStatement[36817-36840]"
  }, {
    "left" : "return _startAfterComment(fromMinorState);",
    "right" : "return _startAfterComment(fromMinorState);",
    "info" : "ReturnStatement[36857-36899]:ReturnStatement[36891-36933]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36911-36918]:Modifier[36945-36952]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[36919-36924]:Modifier[36953-36958]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[36925-36934]:SimpleType[36959-36968]"
  }, {
    "left" : "_finishCppComment",
    "right" : "_finishCppComment",
    "info" : "SimpleName[36935-36952]:SimpleName[36969-36986]"
  }, {
    "left" : "int fromMinorState",
    "right" : "int fromMinorState",
    "info" : "SingleVariableDeclaration[36953-36971]:SingleVariableDeclaration[36987-37005]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[36980-36991]:SimpleType[37014-37025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36996-37819]:Block[37030-37853]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[37006-37762]:WhileStatement[37040-37796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37019-37762]:Block[37053-37796]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[37033-37233]:IfStatement[37067-37267]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37061-37233]:Block[37095-37267]"
  }, {
    "left" : "_minorState = MINOR_COMMENT_CPP;",
    "right" : "_minorState = MINOR_COMMENT_CPP;",
    "info" : "ExpressionStatement[37079-37111]:ExpressionStatement[37113-37145]"
  }, {
    "left" : "_pending32 = fromMinorState;",
    "right" : "_pending32 = fromMinorState;",
    "info" : "ExpressionStatement[37128-37156]:ExpressionStatement[37162-37190]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[37173-37219]:ReturnStatement[37207-37253]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[37246-37288]:VariableDeclarationStatement[37280-37322]"
  }, {
    "left" : "if (ch < 0x020)",
    "right" : "if (ch < 0x020)",
    "info" : "IfStatement[37301-37752]:IfStatement[37335-37786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37317-37752]:Block[37351-37786]"
  }, {
    "left" : "if (ch == INT_LF)",
    "right" : "if (ch == INT_LF)",
    "info" : "IfStatement[37335-37738]:IfStatement[37369-37772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37353-37488]:Block[37387-37522]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[37375-37391]:ExpressionStatement[37409-37425]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[37412-37443]:ExpressionStatement[37446-37477]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[37464-37470]:BreakStatement[37498-37504]"
  }, {
    "left" : "if (ch == INT_CR)",
    "right" : "if (ch == INT_CR)",
    "info" : "IfStatement[37494-37738]:IfStatement[37528-37772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37512-37650]:Block[37546-37684]"
  }, {
    "left" : "++_currInputRowAlt;",
    "right" : "++_currInputRowAlt;",
    "info" : "ExpressionStatement[37534-37553]:ExpressionStatement[37568-37587]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[37574-37605]:ExpressionStatement[37608-37639]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[37626-37632]:BreakStatement[37660-37666]"
  }, {
    "left" : "if (ch != INT_TAB)",
    "right" : "if (ch != INT_TAB)",
    "info" : "IfStatement[37656-37738]:IfStatement[37690-37772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37675-37738]:Block[37709-37772]"
  }, {
    "left" : "_throwInvalidSpace(ch);",
    "right" : "_throwInvalidSpace(ch);",
    "info" : "ExpressionStatement[37697-37720]:ExpressionStatement[37731-37754]"
  }, {
    "left" : "return _startAfterComment(fromMinorState);",
    "right" : "return _startAfterComment(fromMinorState);",
    "info" : "ReturnStatement[37771-37813]:ReturnStatement[37805-37847]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37825-37832]:Modifier[37859-37866]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[37833-37838]:Modifier[37867-37872]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[37839-37848]:SimpleType[37873-37882]"
  }, {
    "left" : "_finishCComment",
    "right" : "_finishCComment",
    "info" : "SimpleName[37849-37864]:SimpleName[37883-37898]"
  }, {
    "left" : "int fromMinorState",
    "right" : "int fromMinorState",
    "info" : "SingleVariableDeclaration[37865-37883]:SingleVariableDeclaration[37899-37917]"
  }, {
    "left" : "boolean gotStar",
    "right" : "boolean gotStar",
    "info" : "SingleVariableDeclaration[37885-37900]:SingleVariableDeclaration[37919-37934]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[37909-37920]:SimpleType[37943-37954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37925-38985]:Block[37959-39019]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[37935-38928]:WhileStatement[37969-38962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37948-38928]:Block[37982-38962]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[37962-38203]:IfStatement[37996-38237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37990-38203]:Block[38024-38237]"
  }, {
    "left" : "_minorState = gotStar ? MINOR_COMMENT_CLOSING_ASTERISK : MINOR_COMMENT_C;",
    "right" : "_minorState = gotStar ? MINOR_COMMENT_CLOSING_ASTERISK : MINOR_COMMENT_C;",
    "info" : "ExpressionStatement[38008-38081]:ExpressionStatement[38042-38115]"
  }, {
    "left" : "_pending32 = fromMinorState;",
    "right" : "_pending32 = fromMinorState;",
    "info" : "ExpressionStatement[38098-38126]:ExpressionStatement[38132-38160]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[38143-38189]:ReturnStatement[38177-38223]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[38216-38258]:VariableDeclarationStatement[38250-38292]"
  }, {
    "left" : "if (ch < 0x020)",
    "right" : "if (ch < 0x020)",
    "info" : "IfStatement[38271-38889]:IfStatement[38305-38923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38287-38668]:Block[38321-38702]"
  }, {
    "left" : "if (ch == INT_LF)",
    "right" : "if (ch == INT_LF)",
    "info" : "IfStatement[38305-38654]:IfStatement[38339-38688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38323-38431]:Block[38357-38465]"
  }, {
    "left" : "++_currInputRow;",
    "right" : "++_currInputRow;",
    "info" : "ExpressionStatement[38345-38361]:ExpressionStatement[38379-38395]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[38382-38413]:ExpressionStatement[38416-38447]"
  }, {
    "left" : "if (ch == INT_CR)",
    "right" : "if (ch == INT_CR)",
    "info" : "IfStatement[38437-38654]:IfStatement[38471-38688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38455-38566]:Block[38489-38600]"
  }, {
    "left" : "++_currInputRowAlt;",
    "right" : "++_currInputRowAlt;",
    "info" : "ExpressionStatement[38477-38496]:ExpressionStatement[38511-38530]"
  }, {
    "left" : "_currInputRowStart = _inputPtr;",
    "right" : "_currInputRowStart = _inputPtr;",
    "info" : "ExpressionStatement[38517-38548]:ExpressionStatement[38551-38582]"
  }, {
    "left" : "if (ch != INT_TAB)",
    "right" : "if (ch != INT_TAB)",
    "info" : "IfStatement[38572-38654]:IfStatement[38606-38688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38591-38654]:Block[38625-38688]"
  }, {
    "left" : "_throwInvalidSpace(ch);",
    "right" : "_throwInvalidSpace(ch);",
    "info" : "ExpressionStatement[38613-38636]:ExpressionStatement[38647-38670]"
  }, {
    "left" : "if (ch == INT_ASTERISK)",
    "right" : "if (ch == INT_ASTERISK)",
    "info" : "IfStatement[38674-38889]:IfStatement[38708-38923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38698-38771]:Block[38732-38805]"
  }, {
    "left" : "gotStar = true;",
    "right" : "gotStar = true;",
    "info" : "ExpressionStatement[38716-38731]:ExpressionStatement[38750-38765]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[38748-38757]:ContinueStatement[38782-38791]"
  }, {
    "left" : "if (ch == INT_SLASH)",
    "right" : "if (ch == INT_SLASH)",
    "info" : "IfStatement[38777-38889]:IfStatement[38811-38923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38798-38889]:Block[38832-38923]"
  }, {
    "left" : "if (gotStar)",
    "right" : "if (gotStar)",
    "info" : "IfStatement[38816-38875]:IfStatement[38850-38909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38829-38875]:Block[38863-38909]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[38851-38857]:BreakStatement[38885-38891]"
  }, {
    "left" : "gotStar = false;",
    "right" : "gotStar = false;",
    "info" : "ExpressionStatement[38902-38918]:ExpressionStatement[38936-38952]"
  }, {
    "left" : "return _startAfterComment(fromMinorState);",
    "right" : "return _startAfterComment(fromMinorState);",
    "info" : "ReturnStatement[38937-38979]:ReturnStatement[38971-39013]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38991-38998]:Modifier[39025-39032]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[38999-39004]:Modifier[39033-39038]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[39005-39014]:SimpleType[39039-39048]"
  }, {
    "left" : "_startAfterComment",
    "right" : "_startAfterComment",
    "info" : "SimpleName[39015-39033]:SimpleName[39049-39067]"
  }, {
    "left" : "int fromMinorState",
    "right" : "int fromMinorState",
    "info" : "SingleVariableDeclaration[39034-39052]:SingleVariableDeclaration[39068-39086]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[39061-39072]:SimpleType[39095-39106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39077-39956]:Block[39111-39990]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[39135-39275]:IfStatement[39169-39309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39163-39275]:Block[39197-39309]"
  }, {
    "left" : "_minorState = fromMinorState;",
    "right" : "_minorState = fromMinorState;",
    "info" : "ExpressionStatement[39177-39206]:ExpressionStatement[39211-39240]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[39219-39265]:ReturnStatement[39253-39299]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[39284-39326]:VariableDeclarationStatement[39318-39360]"
  }, {
    "left" : "switch (fromMinorState) {\n        case MINOR_FIELD_LEADING_WS:\n            return _startFieldName(ch);\n        case MINOR_FIELD_LEADING_COMMA:\n            return _startFieldNameAfterComma(ch);\n        case MINOR_VALUE_LEADING_WS:\n            return _startValue(ch);\n        case MINOR_VALUE_EXPECTING_COMMA:\n            return _startValueExpectComma(ch);\n        case MINOR_VALUE_EXPECTING_COLON:\n            return _startValueExpectColon(ch);\n        case MINOR_VALUE_WS_AFTER_COMMA:\n            return _startValueAfterComma(ch);\n        default:\n        }",
    "right" : "switch (fromMinorState) {\n        case MINOR_FIELD_LEADING_WS:\n            return _startFieldName(ch);\n        case MINOR_FIELD_LEADING_COMMA:\n            return _startFieldNameAfterComma(ch);\n        case MINOR_VALUE_LEADING_WS:\n            return _startValue(ch);\n        case MINOR_VALUE_EXPECTING_COMMA:\n            return _startValueExpectComma(ch);\n        case MINOR_VALUE_EXPECTING_COLON:\n            return _startValueExpectColon(ch);\n        case MINOR_VALUE_WS_AFTER_COMMA:\n            return _startValueAfterComma(ch);\n        default:\n        }",
    "info" : "SwitchStatement[39335-39892]:SwitchStatement[39369-39926]"
  }, {
    "left" : "case MINOR_FIELD_LEADING_WS:",
    "right" : "case MINOR_FIELD_LEADING_WS:",
    "info" : "SwitchCase[39369-39397]:SwitchCase[39403-39431]"
  }, {
    "left" : "return _startFieldName(ch);",
    "right" : "return _startFieldName(ch);",
    "info" : "ReturnStatement[39410-39437]:ReturnStatement[39444-39471]"
  }, {
    "left" : "case MINOR_FIELD_LEADING_COMMA:",
    "right" : "case MINOR_FIELD_LEADING_COMMA:",
    "info" : "SwitchCase[39446-39477]:SwitchCase[39480-39511]"
  }, {
    "left" : "return _startFieldNameAfterComma(ch);",
    "right" : "return _startFieldNameAfterComma(ch);",
    "info" : "ReturnStatement[39490-39527]:ReturnStatement[39524-39561]"
  }, {
    "left" : "case MINOR_VALUE_LEADING_WS:",
    "right" : "case MINOR_VALUE_LEADING_WS:",
    "info" : "SwitchCase[39536-39564]:SwitchCase[39570-39598]"
  }, {
    "left" : "return _startValue(ch);",
    "right" : "return _startValue(ch);",
    "info" : "ReturnStatement[39577-39600]:ReturnStatement[39611-39634]"
  }, {
    "left" : "case MINOR_VALUE_EXPECTING_COMMA:",
    "right" : "case MINOR_VALUE_EXPECTING_COMMA:",
    "info" : "SwitchCase[39609-39642]:SwitchCase[39643-39676]"
  }, {
    "left" : "return _startValueExpectComma(ch);",
    "right" : "return _startValueExpectComma(ch);",
    "info" : "ReturnStatement[39655-39689]:ReturnStatement[39689-39723]"
  }, {
    "left" : "case MINOR_VALUE_EXPECTING_COLON:",
    "right" : "case MINOR_VALUE_EXPECTING_COLON:",
    "info" : "SwitchCase[39698-39731]:SwitchCase[39732-39765]"
  }, {
    "left" : "return _startValueExpectColon(ch);",
    "right" : "return _startValueExpectColon(ch);",
    "info" : "ReturnStatement[39744-39778]:ReturnStatement[39778-39812]"
  }, {
    "left" : "case MINOR_VALUE_WS_AFTER_COMMA:",
    "right" : "case MINOR_VALUE_WS_AFTER_COMMA:",
    "info" : "SwitchCase[39787-39819]:SwitchCase[39821-39853]"
  }, {
    "left" : "return _startValueAfterComma(ch);",
    "right" : "return _startValueAfterComma(ch);",
    "info" : "ReturnStatement[39832-39865]:ReturnStatement[39866-39899]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[39874-39882]:SwitchCase[39908-39916]"
  }, {
    "left" : "VersionUtil.throwInternal();",
    "right" : "VersionUtil.throwInternal();",
    "info" : "ExpressionStatement[39901-39929]:ExpressionStatement[39935-39963]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[39938-39950]:ReturnStatement[39972-39984]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[40170-40179]:Modifier[40204-40213]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[40180-40189]:SimpleType[40214-40223]"
  }, {
    "left" : "_startFalseToken",
    "right" : "_startFalseToken",
    "info" : "SimpleName[40190-40206]:SimpleName[40224-40240]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[40216-40227]:SimpleType[40250-40261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40232-40955]:Block[40266-40989]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[40242-40262]:VariableDeclarationStatement[40276-40296]"
  }, {
    "left" : "if ((ptr + 4) < _inputEnd)",
    "right" : "if ((ptr + 4) < _inputEnd)",
    "info" : "IfStatement[40271-40831]:IfStatement[40305-40865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40298-40831]:Block[40332-40865]"
  }, {
    "left" : "byte[] buf = _inputBuffer;",
    "right" : "byte[] buf = _inputBuffer;",
    "info" : "VariableDeclarationStatement[40346-40372]:VariableDeclarationStatement[40380-40406]"
  }, {
    "left" : "if ((buf[ptr++] == 'a') \n                   && (buf[ptr++] == 'l')\n                   && (buf[ptr++] == 's')\n                   && (buf[ptr++] == 'e'))",
    "right" : "if ((buf[ptr++] == 'a') \n                   && (buf[ptr++] == 'l')\n                   && (buf[ptr++] == 's')\n                   && (buf[ptr++] == 'e'))",
    "info" : "IfStatement[40385-40821]:IfStatement[40419-40855]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40537-40821]:Block[40571-40855]"
  }, {
    "left" : "int ch = buf[ptr] & 0xFF;",
    "right" : "int ch = buf[ptr] & 0xFF;",
    "info" : "VariableDeclarationStatement[40555-40580]:VariableDeclarationStatement[40589-40614]"
  }, {
    "left" : "if (ch < INT_0 || (ch == INT_RBRACKET) || (ch == INT_RCURLY))",
    "right" : "if (ch < INT_0 || (ch == INT_RBRACKET) || (ch == INT_RCURLY))",
    "info" : "IfStatement[40597-40807]:IfStatement[40631-40841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40659-40807]:Block[40693-40841]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[40707-40723]:ExpressionStatement[40741-40757]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_FALSE);",
    "right" : "return _valueComplete(JsonToken.VALUE_FALSE);",
    "info" : "ReturnStatement[40744-40789]:ReturnStatement[40778-40823]"
  }, {
    "left" : "_minorState = MINOR_VALUE_TOKEN_FALSE;",
    "right" : "_minorState = MINOR_VALUE_TOKEN_FALSE;",
    "info" : "ExpressionStatement[40840-40878]:ExpressionStatement[40874-40912]"
  }, {
    "left" : "return _finishKeywordToken(\"false\", 1, JsonToken.VALUE_FALSE);",
    "right" : "return _finishKeywordToken(\"false\", 1, JsonToken.VALUE_FALSE);",
    "info" : "ReturnStatement[40887-40949]:ReturnStatement[40921-40983]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[40961-40970]:Modifier[40995-41004]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[40971-40980]:SimpleType[41005-41014]"
  }, {
    "left" : "_startTrueToken",
    "right" : "_startTrueToken",
    "info" : "SimpleName[40981-40996]:SimpleName[41015-41030]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[41006-41017]:SimpleType[41040-41051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41022-41699]:Block[41056-41733]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[41032-41052]:VariableDeclarationStatement[41066-41086]"
  }, {
    "left" : "if ((ptr + 3) < _inputEnd)",
    "right" : "if ((ptr + 3) < _inputEnd)",
    "info" : "IfStatement[41061-41578]:IfStatement[41095-41612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41088-41578]:Block[41122-41612]"
  }, {
    "left" : "byte[] buf = _inputBuffer;",
    "right" : "byte[] buf = _inputBuffer;",
    "info" : "VariableDeclarationStatement[41136-41162]:VariableDeclarationStatement[41170-41196]"
  }, {
    "left" : "if ((buf[ptr++] == 'r') \n                   && (buf[ptr++] == 'u')\n                   && (buf[ptr++] == 'e'))",
    "right" : "if ((buf[ptr++] == 'r') \n                   && (buf[ptr++] == 'u')\n                   && (buf[ptr++] == 'e'))",
    "info" : "IfStatement[41175-41568]:IfStatement[41209-41602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41285-41568]:Block[41319-41602]"
  }, {
    "left" : "int ch = buf[ptr] & 0xFF;",
    "right" : "int ch = buf[ptr] & 0xFF;",
    "info" : "VariableDeclarationStatement[41303-41328]:VariableDeclarationStatement[41337-41362]"
  }, {
    "left" : "if (ch < INT_0 || (ch == INT_RBRACKET) || (ch == INT_RCURLY))",
    "right" : "if (ch < INT_0 || (ch == INT_RBRACKET) || (ch == INT_RCURLY))",
    "info" : "IfStatement[41345-41554]:IfStatement[41379-41588]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41407-41554]:Block[41441-41588]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[41455-41471]:ExpressionStatement[41489-41505]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_TRUE);",
    "right" : "return _valueComplete(JsonToken.VALUE_TRUE);",
    "info" : "ReturnStatement[41492-41536]:ReturnStatement[41526-41570]"
  }, {
    "left" : "_minorState = MINOR_VALUE_TOKEN_TRUE;",
    "right" : "_minorState = MINOR_VALUE_TOKEN_TRUE;",
    "info" : "ExpressionStatement[41587-41624]:ExpressionStatement[41621-41658]"
  }, {
    "left" : "return _finishKeywordToken(\"true\", 1, JsonToken.VALUE_TRUE);",
    "right" : "return _finishKeywordToken(\"true\", 1, JsonToken.VALUE_TRUE);",
    "info" : "ReturnStatement[41633-41693]:ReturnStatement[41667-41727]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[41705-41714]:Modifier[41739-41748]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[41715-41724]:SimpleType[41749-41758]"
  }, {
    "left" : "_startNullToken",
    "right" : "_startNullToken",
    "info" : "SimpleName[41725-41740]:SimpleName[41759-41774]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[41750-41761]:SimpleType[41784-41795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41766-42443]:Block[41800-42477]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[41776-41796]:VariableDeclarationStatement[41810-41830]"
  }, {
    "left" : "if ((ptr + 3) < _inputEnd)",
    "right" : "if ((ptr + 3) < _inputEnd)",
    "info" : "IfStatement[41805-42322]:IfStatement[41839-42356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41832-42322]:Block[41866-42356]"
  }, {
    "left" : "byte[] buf = _inputBuffer;",
    "right" : "byte[] buf = _inputBuffer;",
    "info" : "VariableDeclarationStatement[41880-41906]:VariableDeclarationStatement[41914-41940]"
  }, {
    "left" : "if ((buf[ptr++] == 'u') \n                   && (buf[ptr++] == 'l')\n                   && (buf[ptr++] == 'l'))",
    "right" : "if ((buf[ptr++] == 'u') \n                   && (buf[ptr++] == 'l')\n                   && (buf[ptr++] == 'l'))",
    "info" : "IfStatement[41919-42312]:IfStatement[41953-42346]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42029-42312]:Block[42063-42346]"
  }, {
    "left" : "int ch = buf[ptr] & 0xFF;",
    "right" : "int ch = buf[ptr] & 0xFF;",
    "info" : "VariableDeclarationStatement[42047-42072]:VariableDeclarationStatement[42081-42106]"
  }, {
    "left" : "if (ch < INT_0 || (ch == INT_RBRACKET) || (ch == INT_RCURLY))",
    "right" : "if (ch < INT_0 || (ch == INT_RBRACKET) || (ch == INT_RCURLY))",
    "info" : "IfStatement[42089-42298]:IfStatement[42123-42332]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42151-42298]:Block[42185-42332]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[42199-42215]:ExpressionStatement[42233-42249]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_NULL);",
    "right" : "return _valueComplete(JsonToken.VALUE_NULL);",
    "info" : "ReturnStatement[42236-42280]:ReturnStatement[42270-42314]"
  }, {
    "left" : "_minorState = MINOR_VALUE_TOKEN_NULL;",
    "right" : "_minorState = MINOR_VALUE_TOKEN_NULL;",
    "info" : "ExpressionStatement[42331-42368]:ExpressionStatement[42365-42402]"
  }, {
    "left" : "return _finishKeywordToken(\"null\", 1, JsonToken.VALUE_NULL);",
    "right" : "return _finishKeywordToken(\"null\", 1, JsonToken.VALUE_NULL);",
    "info" : "ReturnStatement[42377-42437]:ReturnStatement[42411-42471]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[42449-42458]:Modifier[42483-42492]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[42459-42468]:SimpleType[42493-42502]"
  }, {
    "left" : "_finishKeywordToken",
    "right" : "_finishKeywordToken",
    "info" : "SimpleName[42469-42488]:SimpleName[42503-42522]"
  }, {
    "left" : "String expToken",
    "right" : "String expToken",
    "info" : "SingleVariableDeclaration[42489-42504]:SingleVariableDeclaration[42523-42538]"
  }, {
    "left" : "int matched",
    "right" : "int matched",
    "info" : "SingleVariableDeclaration[42506-42517]:SingleVariableDeclaration[42540-42551]"
  }, {
    "left" : "JsonToken result",
    "right" : "JsonToken result",
    "info" : "SingleVariableDeclaration[42531-42547]:SingleVariableDeclaration[42565-42581]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[42556-42567]:SimpleType[42590-42601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42572-43417]:Block[42606-43451]"
  }, {
    "left" : "final int end = expToken.length();",
    "right" : "final int end = expToken.length();",
    "info" : "VariableDeclarationStatement[42582-42616]:VariableDeclarationStatement[42616-42650]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[42626-43271]:WhileStatement[42660-43305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42639-43271]:Block[42673-43305]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[42653-42797]:IfStatement[42687-42831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42681-42797]:Block[42715-42831]"
  }, {
    "left" : "_pending32 = matched;",
    "right" : "_pending32 = matched;",
    "info" : "ExpressionStatement[42699-42720]:ExpressionStatement[42733-42754]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[42737-42783]:ReturnStatement[42771-42817]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr];",
    "right" : "int ch = _inputBuffer[_inputPtr];",
    "info" : "VariableDeclarationStatement[42810-42843]:VariableDeclarationStatement[42844-42877]"
  }, {
    "left" : "if (matched == end)",
    "right" : "if (matched == end)",
    "info" : "IfStatement[42856-43126]:IfStatement[42890-43160]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42876-43126]:Block[42910-43160]"
  }, {
    "left" : "if (ch < INT_0 || (ch == INT_RBRACKET) || (ch == INT_RCURLY))",
    "right" : "if (ch < INT_0 || (ch == INT_RBRACKET) || (ch == INT_RCURLY))",
    "info" : "IfStatement[42931-43089]:IfStatement[42965-43123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42993-43089]:Block[43027-43123]"
  }, {
    "left" : "return _valueComplete(result);",
    "right" : "return _valueComplete(result);",
    "info" : "ReturnStatement[43041-43071]:ReturnStatement[43075-43105]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[43106-43112]:BreakStatement[43140-43146]"
  }, {
    "left" : "if (ch != expToken.charAt(matched))",
    "right" : "if (ch != expToken.charAt(matched))",
    "info" : "IfStatement[43139-43213]:IfStatement[43173-43247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43175-43213]:Block[43209-43247]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[43193-43199]:BreakStatement[43227-43233]"
  }, {
    "left" : "++matched;",
    "right" : "++matched;",
    "info" : "ExpressionStatement[43226-43236]:ExpressionStatement[43260-43270]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[43249-43261]:ExpressionStatement[43283-43295]"
  }, {
    "left" : "_minorState = MINOR_VALUE_TOKEN_ERROR;",
    "right" : "_minorState = MINOR_VALUE_TOKEN_ERROR;",
    "info" : "ExpressionStatement[43280-43318]:ExpressionStatement[43314-43352]"
  }, {
    "left" : "_textBuffer.resetWithCopy(expToken, 0, matched);",
    "right" : "_textBuffer.resetWithCopy(expToken, 0, matched);",
    "info" : "ExpressionStatement[43327-43375]:ExpressionStatement[43361-43409]"
  }, {
    "left" : "return _finishErrorToken();",
    "right" : "return _finishErrorToken();",
    "info" : "ReturnStatement[43384-43411]:ReturnStatement[43418-43445]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[43423-43432]:Modifier[43457-43466]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[43433-43442]:SimpleType[43467-43476]"
  }, {
    "left" : "_finishKeywordTokenWithEOF",
    "right" : "_finishKeywordTokenWithEOF",
    "info" : "SimpleName[43443-43469]:SimpleName[43477-43503]"
  }, {
    "left" : "String expToken",
    "right" : "String expToken",
    "info" : "SingleVariableDeclaration[43470-43485]:SingleVariableDeclaration[43504-43519]"
  }, {
    "left" : "int matched",
    "right" : "int matched",
    "info" : "SingleVariableDeclaration[43487-43498]:SingleVariableDeclaration[43521-43532]"
  }, {
    "left" : "JsonToken result",
    "right" : "JsonToken result",
    "info" : "SingleVariableDeclaration[43512-43528]:SingleVariableDeclaration[43546-43562]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[43537-43548]:SimpleType[43571-43582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43553-43756]:Block[43587-43790]"
  }, {
    "left" : "if (matched == expToken.length())",
    "right" : "if (matched == expToken.length())",
    "info" : "IfStatement[43563-43650]:IfStatement[43597-43684]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43597-43650]:Block[43631-43684]"
  }, {
    "left" : "return (_currToken = result);",
    "right" : "return (_currToken = result);",
    "info" : "ReturnStatement[43611-43640]:ReturnStatement[43645-43674]"
  }, {
    "left" : "_textBuffer.resetWithCopy(expToken, 0, matched);",
    "right" : "_textBuffer.resetWithCopy(expToken, 0, matched);",
    "info" : "ExpressionStatement[43659-43707]:ExpressionStatement[43693-43741]"
  }, {
    "left" : "return _finishErrorTokenWithEOF();",
    "right" : "return _finishErrorTokenWithEOF();",
    "info" : "ReturnStatement[43716-43750]:ReturnStatement[43750-43784]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[43762-43771]:Modifier[43796-43805]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[43772-43781]:SimpleType[43806-43815]"
  }, {
    "left" : "_finishNonStdToken",
    "right" : "_finishNonStdToken",
    "info" : "SimpleName[43782-43800]:SimpleName[43816-43834]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[43801-43809]:SingleVariableDeclaration[43835-43843]"
  }, {
    "left" : "int matched",
    "right" : "int matched",
    "info" : "SingleVariableDeclaration[43811-43822]:SingleVariableDeclaration[43845-43856]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[43831-43842]:SimpleType[43865-43876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43847-44852]:Block[43881-44886]"
  }, {
    "left" : "final String expToken = _nonStdToken(type);",
    "right" : "final String expToken = _nonStdToken(type);",
    "info" : "VariableDeclarationStatement[43857-43900]:VariableDeclarationStatement[43891-43934]"
  }, {
    "left" : "final int end = expToken.length();",
    "right" : "final int end = expToken.length();",
    "info" : "VariableDeclarationStatement[43909-43943]:VariableDeclarationStatement[43943-43977]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[43953-44706]:WhileStatement[43987-44740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43966-44706]:Block[44000-44740]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[43980-44222]:IfStatement[44014-44256]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44008-44222]:Block[44042-44256]"
  }, {
    "left" : "_nonStdTokenType = type;",
    "right" : "_nonStdTokenType = type;",
    "info" : "ExpressionStatement[44026-44050]:ExpressionStatement[44060-44084]"
  }, {
    "left" : "_pending32 = matched;",
    "right" : "_pending32 = matched;",
    "info" : "ExpressionStatement[44067-44088]:ExpressionStatement[44101-44122]"
  }, {
    "left" : "_minorState = MINOR_VALUE_TOKEN_NON_STD;",
    "right" : "_minorState = MINOR_VALUE_TOKEN_NON_STD;",
    "info" : "ExpressionStatement[44105-44145]:ExpressionStatement[44139-44179]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[44162-44208]:ReturnStatement[44196-44242]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr];",
    "right" : "int ch = _inputBuffer[_inputPtr];",
    "info" : "VariableDeclarationStatement[44235-44268]:VariableDeclarationStatement[44269-44302]"
  }, {
    "left" : "if (matched == end)",
    "right" : "if (matched == end)",
    "info" : "IfStatement[44281-44561]:IfStatement[44315-44595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44301-44561]:Block[44335-44595]"
  }, {
    "left" : "if (ch < INT_0 || (ch == INT_RBRACKET) || (ch == INT_RCURLY))",
    "right" : "if (ch < INT_0 || (ch == INT_RBRACKET) || (ch == INT_RCURLY))",
    "info" : "IfStatement[44356-44524]:IfStatement[44390-44558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44418-44524]:Block[44452-44558]"
  }, {
    "left" : "return _valueNonStdNumberComplete(type);",
    "right" : "return _valueNonStdNumberComplete(type);",
    "info" : "ReturnStatement[44466-44506]:ReturnStatement[44500-44540]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[44541-44547]:BreakStatement[44575-44581]"
  }, {
    "left" : "if (ch != expToken.charAt(matched))",
    "right" : "if (ch != expToken.charAt(matched))",
    "info" : "IfStatement[44574-44648]:IfStatement[44608-44682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44610-44648]:Block[44644-44682]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[44628-44634]:BreakStatement[44662-44668]"
  }, {
    "left" : "++matched;",
    "right" : "++matched;",
    "info" : "ExpressionStatement[44661-44671]:ExpressionStatement[44695-44705]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[44684-44696]:ExpressionStatement[44718-44730]"
  }, {
    "left" : "_minorState = MINOR_VALUE_TOKEN_ERROR;",
    "right" : "_minorState = MINOR_VALUE_TOKEN_ERROR;",
    "info" : "ExpressionStatement[44715-44753]:ExpressionStatement[44749-44787]"
  }, {
    "left" : "_textBuffer.resetWithCopy(expToken, 0, matched);",
    "right" : "_textBuffer.resetWithCopy(expToken, 0, matched);",
    "info" : "ExpressionStatement[44762-44810]:ExpressionStatement[44796-44844]"
  }, {
    "left" : "return _finishErrorToken();",
    "right" : "return _finishErrorToken();",
    "info" : "ReturnStatement[44819-44846]:ReturnStatement[44853-44880]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[44858-44867]:Modifier[44892-44901]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[44868-44877]:SimpleType[44902-44911]"
  }, {
    "left" : "_finishNonStdTokenWithEOF",
    "right" : "_finishNonStdTokenWithEOF",
    "info" : "SimpleName[44878-44903]:SimpleName[44912-44937]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[44904-44912]:SingleVariableDeclaration[44938-44946]"
  }, {
    "left" : "int matched",
    "right" : "int matched",
    "info" : "SingleVariableDeclaration[44914-44925]:SingleVariableDeclaration[44948-44959]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[44934-44945]:SimpleType[44968-44979]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44950-45216]:Block[44984-45250]"
  }, {
    "left" : "final String expToken = _nonStdToken(type);",
    "right" : "final String expToken = _nonStdToken(type);",
    "info" : "VariableDeclarationStatement[44960-45003]:VariableDeclarationStatement[44994-45037]"
  }, {
    "left" : "if (matched == expToken.length())",
    "right" : "if (matched == expToken.length())",
    "info" : "IfStatement[45012-45110]:IfStatement[45046-45144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45046-45110]:Block[45080-45144]"
  }, {
    "left" : "return _valueNonStdNumberComplete(type);",
    "right" : "return _valueNonStdNumberComplete(type);",
    "info" : "ReturnStatement[45060-45100]:ReturnStatement[45094-45134]"
  }, {
    "left" : "_textBuffer.resetWithCopy(expToken, 0, matched);",
    "right" : "_textBuffer.resetWithCopy(expToken, 0, matched);",
    "info" : "ExpressionStatement[45119-45167]:ExpressionStatement[45153-45201]"
  }, {
    "left" : "return _finishErrorTokenWithEOF();",
    "right" : "return _finishErrorTokenWithEOF();",
    "info" : "ReturnStatement[45176-45210]:ReturnStatement[45210-45244]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[45222-45231]:Modifier[45256-45265]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[45232-45241]:SimpleType[45266-45275]"
  }, {
    "left" : "_finishErrorToken",
    "right" : "_finishErrorToken",
    "info" : "SimpleName[45242-45259]:SimpleName[45276-45293]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[45269-45280]:SimpleType[45303-45314]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45285-46048]:Block[45319-46082]"
  }, {
    "left" : "while (_inputPtr < _inputEnd)",
    "right" : "while (_inputPtr < _inputEnd)",
    "info" : "WhileStatement[45295-45987]:WhileStatement[45329-46021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45325-45987]:Block[45359-46021]"
  }, {
    "left" : "int i = (int) _inputBuffer[_inputPtr++];",
    "right" : "int i = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[45339-45379]:VariableDeclarationStatement[45373-45413]"
  }, {
    "left" : "char ch = (char) i;",
    "right" : "char ch = (char) i;",
    "info" : "VariableDeclarationStatement[45497-45516]:VariableDeclarationStatement[45531-45550]"
  }, {
    "left" : "if (Character.isJavaIdentifierPart(ch))",
    "right" : "if (Character.isJavaIdentifierPart(ch))",
    "info" : "IfStatement[45529-45907]:IfStatement[45563-45941]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45569-45907]:Block[45603-45941]"
  }, {
    "left" : "_textBuffer.append(ch);",
    "right" : "_textBuffer.append(ch);",
    "info" : "ExpressionStatement[45755-45778]:ExpressionStatement[45789-45812]"
  }, {
    "left" : "if (_textBuffer.size() < MAX_ERROR_TOKEN_LENGTH)",
    "right" : "if (_textBuffer.size() < MAX_ERROR_TOKEN_LENGTH)",
    "info" : "IfStatement[45795-45893]:IfStatement[45829-45927]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45844-45893]:Block[45878-45927]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[45866-45875]:ContinueStatement[45900-45909]"
  }, {
    "left" : "return _reportErrorToken(_textBuffer.contentsAsString());",
    "right" : "return _reportErrorToken(_textBuffer.contentsAsString());",
    "info" : "ReturnStatement[45920-45977]:ReturnStatement[45954-46011]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[45996-46042]:ReturnStatement[46030-46076]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[46054-46063]:Modifier[46088-46097]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[46064-46073]:SimpleType[46098-46107]"
  }, {
    "left" : "_finishErrorTokenWithEOF",
    "right" : "_finishErrorTokenWithEOF",
    "info" : "SimpleName[46074-46098]:SimpleName[46108-46132]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[46108-46119]:SimpleType[46142-46153]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46124-46197]:Block[46158-46231]"
  }, {
    "left" : "return _reportErrorToken(_textBuffer.contentsAsString());",
    "right" : "return _reportErrorToken(_textBuffer.contentsAsString());",
    "info" : "ReturnStatement[46134-46191]:ReturnStatement[46168-46225]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[46203-46212]:Modifier[46237-46246]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[46213-46222]:SimpleType[46247-46256]"
  }, {
    "left" : "_reportErrorToken",
    "right" : "_reportErrorToken",
    "info" : "SimpleName[46223-46240]:SimpleName[46257-46274]"
  }, {
    "left" : "String actualToken",
    "right" : "String actualToken",
    "info" : "SingleVariableDeclaration[46241-46259]:SingleVariableDeclaration[46275-46293]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[46268-46279]:SimpleType[46302-46313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46284-46552]:Block[46318-46586]"
  }, {
    "left" : "_reportError(\"Unrecognized token '%s': was expecting %s\", _textBuffer.contentsAsString(),\n                \"'null', 'true' or 'false'\");",
    "right" : "_reportError(\"Unrecognized token '%s': was expecting %s\", _textBuffer.contentsAsString(),\n                \"'null', 'true' or 'false'\");",
    "info" : "ExpressionStatement[46352-46487]:ExpressionStatement[46386-46521]"
  }, {
    "left" : "return JsonToken.NOT_AVAILABLE;",
    "right" : "return JsonToken.NOT_AVAILABLE;",
    "info" : "ReturnStatement[46496-46527]:ReturnStatement[46530-46561]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[46776-46785]:Modifier[46810-46819]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[46786-46795]:SimpleType[46820-46829]"
  }, {
    "left" : "_startPositiveNumber",
    "right" : "_startPositiveNumber",
    "info" : "SimpleName[46796-46816]:SimpleName[46830-46850]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[46817-46823]:SingleVariableDeclaration[46851-46857]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[46832-46843]:SimpleType[46866-46877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46848-48610]:Block[46882-48644]"
  }, {
    "left" : "_numberNegative = false;",
    "right" : "_numberNegative = false;",
    "info" : "ExpressionStatement[46858-46882]:ExpressionStatement[46892-46916]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[46891-46947]:VariableDeclarationStatement[46925-46981]"
  }, {
    "left" : "outBuf[0] = (char) ch;",
    "right" : "outBuf[0] = (char) ch;",
    "info" : "ExpressionStatement[46956-46978]:ExpressionStatement[46990-47012]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[47058-47256]:IfStatement[47092-47290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47086-47256]:Block[47120-47290]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_INTEGER_DIGITS;",
    "right" : "_minorState = MINOR_NUMBER_INTEGER_DIGITS;",
    "info" : "ExpressionStatement[47100-47142]:ExpressionStatement[47134-47176]"
  }, {
    "left" : "_textBuffer.setCurrentLength(1);",
    "right" : "_textBuffer.setCurrentLength(1);",
    "info" : "ExpressionStatement[47155-47187]:ExpressionStatement[47189-47221]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[47200-47246]:ReturnStatement[47234-47280]"
  }, {
    "left" : "int outPtr = 1;",
    "right" : "int outPtr = 1;",
    "info" : "VariableDeclarationStatement[47266-47281]:VariableDeclarationStatement[47300-47315]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
    "info" : "ExpressionStatement[47291-47327]:ExpressionStatement[47325-47361]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[47336-48470]:WhileStatement[47370-48504]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47349-48470]:Block[47383-48504]"
  }, {
    "left" : "if (ch < INT_0)",
    "right" : "if (ch < INT_0)",
    "info" : "IfStatement[47363-47609]:IfStatement[47397-47643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47379-47609]:Block[47413-47643]"
  }, {
    "left" : "if (ch == INT_PERIOD)",
    "right" : "if (ch == INT_PERIOD)",
    "info" : "IfStatement[47397-47572]:IfStatement[47431-47606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47419-47572]:Block[47453-47606]"
  }, {
    "left" : "_intLength = outPtr;",
    "right" : "_intLength = outPtr;",
    "info" : "ExpressionStatement[47441-47461]:ExpressionStatement[47475-47495]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[47482-47494]:ExpressionStatement[47516-47528]"
  }, {
    "left" : "return _startFloat(outBuf, outPtr, ch);",
    "right" : "return _startFloat(outBuf, outPtr, ch);",
    "info" : "ReturnStatement[47515-47554]:ReturnStatement[47549-47588]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[47589-47595]:BreakStatement[47623-47629]"
  }, {
    "left" : "if (ch > INT_9)",
    "right" : "if (ch > INT_9)",
    "info" : "IfStatement[47622-47878]:IfStatement[47656-47912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47638-47878]:Block[47672-47912]"
  }, {
    "left" : "if (ch == INT_e || ch == INT_E)",
    "right" : "if (ch == INT_e || ch == INT_E)",
    "info" : "IfStatement[47656-47841]:IfStatement[47690-47875]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47688-47841]:Block[47722-47875]"
  }, {
    "left" : "_intLength = outPtr;",
    "right" : "_intLength = outPtr;",
    "info" : "ExpressionStatement[47710-47730]:ExpressionStatement[47744-47764]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[47751-47763]:ExpressionStatement[47785-47797]"
  }, {
    "left" : "return _startFloat(outBuf, outPtr, ch);",
    "right" : "return _startFloat(outBuf, outPtr, ch);",
    "info" : "ReturnStatement[47784-47823]:ReturnStatement[47818-47857]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[47858-47864]:BreakStatement[47892-47898]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[47891-48135]:IfStatement[47925-48169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47920-48135]:Block[47954-48169]"
  }, {
    "left" : "outBuf = _textBuffer.expandCurrentSegment();",
    "right" : "outBuf = _textBuffer.expandCurrentSegment();",
    "info" : "ExpressionStatement[48077-48121]:ExpressionStatement[48111-48155]"
  }, {
    "left" : "outBuf[outPtr++] = (char) ch;",
    "right" : "outBuf[outPtr++] = (char) ch;",
    "info" : "ExpressionStatement[48148-48177]:ExpressionStatement[48182-48211]"
  }, {
    "left" : "if (++_inputPtr >= _inputEnd)",
    "right" : "if (++_inputPtr >= _inputEnd)",
    "info" : "IfStatement[48190-48411]:IfStatement[48224-48445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48220-48411]:Block[48254-48445]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_INTEGER_DIGITS;",
    "right" : "_minorState = MINOR_NUMBER_INTEGER_DIGITS;",
    "info" : "ExpressionStatement[48238-48280]:ExpressionStatement[48272-48314]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[48297-48334]:ExpressionStatement[48331-48368]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[48351-48397]:ReturnStatement[48385-48431]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
    "info" : "ExpressionStatement[48424-48460]:ExpressionStatement[48458-48494]"
  }, {
    "left" : "_intLength = outPtr;",
    "right" : "_intLength = outPtr;",
    "info" : "ExpressionStatement[48479-48499]:ExpressionStatement[48513-48533]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[48508-48545]:ExpressionStatement[48542-48579]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_NUMBER_INT);",
    "right" : "return _valueComplete(JsonToken.VALUE_NUMBER_INT);",
    "info" : "ReturnStatement[48554-48604]:ReturnStatement[48588-48638]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[48616-48625]:Modifier[48650-48659]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[48626-48635]:SimpleType[48660-48669]"
  }, {
    "left" : "_startNegativeNumber",
    "right" : "_startNegativeNumber",
    "info" : "SimpleName[48636-48656]:SimpleName[48670-48690]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[48666-48677]:SimpleType[48700-48711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48682-51179]:Block[48716-51213]"
  }, {
    "left" : "_numberNegative = true;",
    "right" : "_numberNegative = true;",
    "info" : "ExpressionStatement[48692-48715]:ExpressionStatement[48726-48749]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[48724-48868]:IfStatement[48758-48902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48752-48868]:Block[48786-48902]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_MINUS;",
    "right" : "_minorState = MINOR_NUMBER_MINUS;",
    "info" : "ExpressionStatement[48766-48799]:ExpressionStatement[48800-48833]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[48812-48858]:ReturnStatement[48846-48892]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[48877-48919]:VariableDeclarationStatement[48911-48953]"
  }, {
    "left" : "if (ch <= INT_0)",
    "right" : "if (ch <= INT_0)",
    "info" : "IfStatement[48928-49522]:IfStatement[48962-49556]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48945-49256]:Block[48979-49290]"
  }, {
    "left" : "if (ch == INT_0)",
    "right" : "if (ch == INT_0)",
    "info" : "IfStatement[48959-49047]:IfStatement[48993-49081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48976-49047]:Block[49010-49081]"
  }, {
    "left" : "return _finishNumberLeadingNegZeroes();",
    "right" : "return _finishNumberLeadingNegZeroes();",
    "info" : "ReturnStatement[48994-49033]:ReturnStatement[49028-49067]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
    "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
    "info" : "ExpressionStatement[49145-49246]:ExpressionStatement[49179-49280]"
  }, {
    "left" : "if (ch > INT_9)",
    "right" : "if (ch > INT_9)",
    "info" : "IfStatement[49262-49522]:IfStatement[49296-49556]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49278-49522]:Block[49312-49556]"
  }, {
    "left" : "if (ch == 'I')",
    "right" : "if (ch == 'I')",
    "info" : "IfStatement[49292-49398]:IfStatement[49326-49432]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49307-49398]:Block[49341-49432]"
  }, {
    "left" : "return _finishNonStdToken(NON_STD_TOKEN_MINUS_INFINITY, 2);",
    "right" : "return _finishNonStdToken(NON_STD_TOKEN_MINUS_INFINITY, 2);",
    "info" : "ReturnStatement[49325-49384]:ReturnStatement[49359-49418]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
    "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
    "info" : "ExpressionStatement[49411-49512]:ExpressionStatement[49445-49546]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[49531-49587]:VariableDeclarationStatement[49565-49621]"
  }, {
    "left" : "outBuf[0] = '-';",
    "right" : "outBuf[0] = '-';",
    "info" : "ExpressionStatement[49596-49612]:ExpressionStatement[49630-49646]"
  }, {
    "left" : "outBuf[1] = (char) ch;",
    "right" : "outBuf[1] = (char) ch;",
    "info" : "ExpressionStatement[49621-49643]:ExpressionStatement[49655-49677]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[49652-49878]:IfStatement[49686-49912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49680-49878]:Block[49714-49912]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_INTEGER_DIGITS;",
    "right" : "_minorState = MINOR_NUMBER_INTEGER_DIGITS;",
    "info" : "ExpressionStatement[49694-49736]:ExpressionStatement[49728-49770]"
  }, {
    "left" : "_textBuffer.setCurrentLength(2);",
    "right" : "_textBuffer.setCurrentLength(2);",
    "info" : "ExpressionStatement[49749-49781]:ExpressionStatement[49783-49815]"
  }, {
    "left" : "_intLength = 1;",
    "right" : "_intLength = 1;",
    "info" : "ExpressionStatement[49794-49809]:ExpressionStatement[49828-49843]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[49822-49868]:ReturnStatement[49856-49902]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr];",
    "right" : "ch = _inputBuffer[_inputPtr];",
    "info" : "ExpressionStatement[49887-49916]:ExpressionStatement[49921-49950]"
  }, {
    "left" : "int outPtr = 2;",
    "right" : "int outPtr = 2;",
    "info" : "VariableDeclarationStatement[49925-49940]:VariableDeclarationStatement[49959-49974]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[49950-51037]:WhileStatement[49984-51071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49963-51037]:Block[49997-51071]"
  }, {
    "left" : "if (ch < INT_0)",
    "right" : "if (ch < INT_0)",
    "info" : "IfStatement[49977-50225]:IfStatement[50011-50259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49993-50225]:Block[50027-50259]"
  }, {
    "left" : "if (ch == INT_PERIOD)",
    "right" : "if (ch == INT_PERIOD)",
    "info" : "IfStatement[50011-50188]:IfStatement[50045-50222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50033-50188]:Block[50067-50222]"
  }, {
    "left" : "_intLength = outPtr-1;",
    "right" : "_intLength = outPtr-1;",
    "info" : "ExpressionStatement[50055-50077]:ExpressionStatement[50089-50111]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[50098-50110]:ExpressionStatement[50132-50144]"
  }, {
    "left" : "return _startFloat(outBuf, outPtr, ch);",
    "right" : "return _startFloat(outBuf, outPtr, ch);",
    "info" : "ReturnStatement[50131-50170]:ReturnStatement[50165-50204]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[50205-50211]:BreakStatement[50239-50245]"
  }, {
    "left" : "if (ch > INT_9)",
    "right" : "if (ch > INT_9)",
    "info" : "IfStatement[50238-50496]:IfStatement[50272-50530]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50254-50496]:Block[50288-50530]"
  }, {
    "left" : "if (ch == INT_e || ch == INT_E)",
    "right" : "if (ch == INT_e || ch == INT_E)",
    "info" : "IfStatement[50272-50459]:IfStatement[50306-50493]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50304-50459]:Block[50338-50493]"
  }, {
    "left" : "_intLength = outPtr-1;",
    "right" : "_intLength = outPtr-1;",
    "info" : "ExpressionStatement[50326-50348]:ExpressionStatement[50360-50382]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[50369-50381]:ExpressionStatement[50403-50415]"
  }, {
    "left" : "return _startFloat(outBuf, outPtr, ch);",
    "right" : "return _startFloat(outBuf, outPtr, ch);",
    "info" : "ReturnStatement[50402-50441]:ReturnStatement[50436-50475]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[50476-50482]:BreakStatement[50510-50516]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[50509-50702]:IfStatement[50543-50736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50538-50702]:Block[50572-50736]"
  }, {
    "left" : "outBuf = _textBuffer.expandCurrentSegment();",
    "right" : "outBuf = _textBuffer.expandCurrentSegment();",
    "info" : "ExpressionStatement[50644-50688]:ExpressionStatement[50678-50722]"
  }, {
    "left" : "outBuf[outPtr++] = (char) ch;",
    "right" : "outBuf[outPtr++] = (char) ch;",
    "info" : "ExpressionStatement[50715-50744]:ExpressionStatement[50749-50778]"
  }, {
    "left" : "if (++_inputPtr >= _inputEnd)",
    "right" : "if (++_inputPtr >= _inputEnd)",
    "info" : "IfStatement[50757-50978]:IfStatement[50791-51012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50787-50978]:Block[50821-51012]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_INTEGER_DIGITS;",
    "right" : "_minorState = MINOR_NUMBER_INTEGER_DIGITS;",
    "info" : "ExpressionStatement[50805-50847]:ExpressionStatement[50839-50881]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[50864-50901]:ExpressionStatement[50898-50935]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[50918-50964]:ReturnStatement[50952-50998]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
    "right" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
    "info" : "ExpressionStatement[50991-51027]:ExpressionStatement[51025-51061]"
  }, {
    "left" : "_intLength = outPtr-1;",
    "right" : "_intLength = outPtr-1;",
    "info" : "ExpressionStatement[51046-51068]:ExpressionStatement[51080-51102]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[51077-51114]:ExpressionStatement[51111-51148]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_NUMBER_INT);",
    "right" : "return _valueComplete(JsonToken.VALUE_NUMBER_INT);",
    "info" : "ReturnStatement[51123-51173]:ReturnStatement[51157-51207]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[51185-51194]:Modifier[51219-51228]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[51195-51204]:SimpleType[51229-51238]"
  }, {
    "left" : "_startNumberLeadingZero",
    "right" : "_startNumberLeadingZero",
    "info" : "SimpleName[51205-51228]:SimpleName[51239-51262]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[51238-51249]:SimpleType[51272-51283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51254-53065]:Block[51288-53099]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[51264-51284]:VariableDeclarationStatement[51298-51318]"
  }, {
    "left" : "if (ptr >= _inputEnd)",
    "right" : "if (ptr >= _inputEnd)",
    "info" : "IfStatement[51293-51430]:IfStatement[51327-51464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51315-51430]:Block[51349-51464]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_ZERO;",
    "right" : "_minorState = MINOR_NUMBER_ZERO;",
    "info" : "ExpressionStatement[51329-51361]:ExpressionStatement[51363-51395]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[51374-51420]:ReturnStatement[51408-51454]"
  }, {
    "left" : "int ch = _inputBuffer[ptr++] & 0xFF;",
    "right" : "int ch = _inputBuffer[ptr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[51638-51674]:VariableDeclarationStatement[51672-51708]"
  }, {
    "left" : "if (ch < INT_0)",
    "right" : "if (ch < INT_0)",
    "info" : "IfStatement[51752-52954]:IfStatement[51786-52988]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51768-52051]:Block[51802-52085]"
  }, {
    "left" : "if (ch == INT_PERIOD)",
    "right" : "if (ch == INT_PERIOD)",
    "info" : "IfStatement[51782-52041]:IfStatement[51816-52075]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51804-52041]:Block[51838-52075]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[51822-51838]:ExpressionStatement[51856-51872]"
  }, {
    "left" : "_intLength = 1;",
    "right" : "_intLength = 1;",
    "info" : "ExpressionStatement[51855-51870]:ExpressionStatement[51889-51904]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[51887-51943]:VariableDeclarationStatement[51921-51977]"
  }, {
    "left" : "outBuf[0] = '0';",
    "right" : "outBuf[0] = '0';",
    "info" : "ExpressionStatement[51960-51976]:ExpressionStatement[51994-52010]"
  }, {
    "left" : "return _startFloat(outBuf, 1, ch);",
    "right" : "return _startFloat(outBuf, 1, ch);",
    "info" : "ReturnStatement[51993-52027]:ReturnStatement[52027-52061]"
  }, {
    "left" : "if (ch > INT_9)",
    "right" : "if (ch > INT_9)",
    "info" : "IfStatement[52057-52954]:IfStatement[52091-52988]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52073-52779]:Block[52107-52813]"
  }, {
    "left" : "if (ch == INT_e || ch == INT_E)",
    "right" : "if (ch == INT_e || ch == INT_E)",
    "info" : "IfStatement[52087-52356]:IfStatement[52121-52390]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52119-52356]:Block[52153-52390]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[52137-52153]:ExpressionStatement[52171-52187]"
  }, {
    "left" : "_intLength = 1;",
    "right" : "_intLength = 1;",
    "info" : "ExpressionStatement[52170-52185]:ExpressionStatement[52204-52219]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[52202-52258]:VariableDeclarationStatement[52236-52292]"
  }, {
    "left" : "outBuf[0] = '0';",
    "right" : "outBuf[0] = '0';",
    "info" : "ExpressionStatement[52275-52291]:ExpressionStatement[52309-52325]"
  }, {
    "left" : "return _startFloat(outBuf, 1, ch);",
    "right" : "return _startFloat(outBuf, 1, ch);",
    "info" : "ReturnStatement[52308-52342]:ReturnStatement[52342-52376]"
  }, {
    "left" : "if ((ch != INT_RBRACKET) && (ch != INT_RCURLY))",
    "right" : "if ((ch != INT_RBRACKET) && (ch != INT_RCURLY))",
    "info" : "IfStatement[52549-52769]:IfStatement[52583-52803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52597-52769]:Block[52631-52803]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch,\n                        \"expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'\");",
    "right" : "reportUnexpectedNumberChar(ch,\n                        \"expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'\");",
    "info" : "ExpressionStatement[52615-52755]:ExpressionStatement[52649-52789]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52785-52954]:Block[52819-52988]"
  }, {
    "left" : "return _finishNumberLeadingZeroes();",
    "right" : "return _finishNumberLeadingZeroes();",
    "info" : "ReturnStatement[52908-52944]:ReturnStatement[52942-52978]"
  }, {
    "left" : "return _valueCompleteInt(0, \"0\");",
    "right" : "return _valueCompleteInt(0, \"0\");",
    "info" : "ReturnStatement[53026-53059]:ReturnStatement[53060-53093]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[53071-53080]:Modifier[53105-53114]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[53081-53090]:SimpleType[53115-53124]"
  }, {
    "left" : "_finishNumberMinus",
    "right" : "_finishNumberMinus",
    "info" : "SimpleName[53091-53109]:SimpleName[53125-53143]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[53110-53116]:SingleVariableDeclaration[53144-53150]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[53125-53136]:SimpleType[53159-53170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53141-53864]:Block[53175-53898]"
  }, {
    "left" : "if (ch <= INT_0)",
    "right" : "if (ch <= INT_0)",
    "info" : "IfStatement[53151-53660]:IfStatement[53185-53694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53168-53394]:Block[53202-53428]"
  }, {
    "left" : "if (ch == INT_0)",
    "right" : "if (ch == INT_0)",
    "info" : "IfStatement[53182-53270]:IfStatement[53216-53304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53199-53270]:Block[53233-53304]"
  }, {
    "left" : "return _finishNumberLeadingNegZeroes();",
    "right" : "return _finishNumberLeadingNegZeroes();",
    "info" : "ReturnStatement[53217-53256]:ReturnStatement[53251-53290]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
    "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
    "info" : "ExpressionStatement[53283-53384]:ExpressionStatement[53317-53418]"
  }, {
    "left" : "if (ch > INT_9)",
    "right" : "if (ch > INT_9)",
    "info" : "IfStatement[53400-53660]:IfStatement[53434-53694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53416-53660]:Block[53450-53694]"
  }, {
    "left" : "if (ch == 'I')",
    "right" : "if (ch == 'I')",
    "info" : "IfStatement[53430-53536]:IfStatement[53464-53570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53445-53536]:Block[53479-53570]"
  }, {
    "left" : "return _finishNonStdToken(NON_STD_TOKEN_MINUS_INFINITY, 2);",
    "right" : "return _finishNonStdToken(NON_STD_TOKEN_MINUS_INFINITY, 2);",
    "info" : "ReturnStatement[53463-53522]:ReturnStatement[53497-53556]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
    "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
    "info" : "ExpressionStatement[53549-53650]:ExpressionStatement[53583-53684]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[53669-53725]:VariableDeclarationStatement[53703-53759]"
  }, {
    "left" : "outBuf[0] = '-';",
    "right" : "outBuf[0] = '-';",
    "info" : "ExpressionStatement[53734-53750]:ExpressionStatement[53768-53784]"
  }, {
    "left" : "outBuf[1] = (char) ch;",
    "right" : "outBuf[1] = (char) ch;",
    "info" : "ExpressionStatement[53759-53781]:ExpressionStatement[53793-53815]"
  }, {
    "left" : "_intLength = 1;",
    "right" : "_intLength = 1;",
    "info" : "ExpressionStatement[53790-53805]:ExpressionStatement[53824-53839]"
  }, {
    "left" : "return _finishNumberIntegralPart(outBuf, 2);",
    "right" : "return _finishNumberIntegralPart(outBuf, 2);",
    "info" : "ReturnStatement[53814-53858]:ReturnStatement[53848-53892]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[53870-53879]:Modifier[53904-53913]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[53880-53889]:SimpleType[53914-53923]"
  }, {
    "left" : "_finishNumberLeadingZeroes",
    "right" : "_finishNumberLeadingZeroes",
    "info" : "SimpleName[53890-53916]:SimpleName[53924-53950]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[53926-53937]:SimpleType[53960-53971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53942-56250]:Block[53976-56284]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[54119-56244]:WhileStatement[54153-56278]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54132-56244]:Block[54166-56278]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[54146-54301]:IfStatement[54180-54335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54174-54301]:Block[54208-54335]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_ZERO;",
    "right" : "_minorState = MINOR_NUMBER_ZERO;",
    "info" : "ExpressionStatement[54192-54224]:ExpressionStatement[54226-54258]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[54241-54287]:ReturnStatement[54275-54321]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[54314-54356]:VariableDeclarationStatement[54348-54390]"
  }, {
    "left" : "if (ch < INT_0)",
    "right" : "if (ch < INT_0)",
    "info" : "IfStatement[54369-56163]:IfStatement[54403-56197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54385-54663]:Block[54419-54697]"
  }, {
    "left" : "if (ch == INT_PERIOD)",
    "right" : "if (ch == INT_PERIOD)",
    "info" : "IfStatement[54403-54649]:IfStatement[54437-54683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54425-54649]:Block[54459-54683]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[54447-54503]:VariableDeclarationStatement[54481-54537]"
  }, {
    "left" : "outBuf[0] = '0';",
    "right" : "outBuf[0] = '0';",
    "info" : "ExpressionStatement[54524-54540]:ExpressionStatement[54558-54574]"
  }, {
    "left" : "_intLength = 1;",
    "right" : "_intLength = 1;",
    "info" : "ExpressionStatement[54561-54576]:ExpressionStatement[54595-54610]"
  }, {
    "left" : "return _startFloat(outBuf, 1, ch);",
    "right" : "return _startFloat(outBuf, 1, ch);",
    "info" : "ReturnStatement[54597-54631]:ReturnStatement[54631-54665]"
  }, {
    "left" : "if (ch > INT_9)",
    "right" : "if (ch > INT_9)",
    "info" : "IfStatement[54669-56163]:IfStatement[54703-56197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54685-55414]:Block[54719-55448]"
  }, {
    "left" : "if (ch == INT_e || ch == INT_E)",
    "right" : "if (ch == INT_e || ch == INT_E)",
    "info" : "IfStatement[54703-54959]:IfStatement[54737-54993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54735-54959]:Block[54769-54993]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[54757-54813]:VariableDeclarationStatement[54791-54847]"
  }, {
    "left" : "outBuf[0] = '0';",
    "right" : "outBuf[0] = '0';",
    "info" : "ExpressionStatement[54834-54850]:ExpressionStatement[54868-54884]"
  }, {
    "left" : "_intLength = 1;",
    "right" : "_intLength = 1;",
    "info" : "ExpressionStatement[54871-54886]:ExpressionStatement[54905-54920]"
  }, {
    "left" : "return _startFloat(outBuf, 1, ch);",
    "right" : "return _startFloat(outBuf, 1, ch);",
    "info" : "ReturnStatement[54907-54941]:ReturnStatement[54941-54975]"
  }, {
    "left" : "if ((ch != INT_RBRACKET) && (ch != INT_RCURLY))",
    "right" : "if ((ch != INT_RBRACKET) && (ch != INT_RCURLY))",
    "info" : "IfStatement[55168-55400]:IfStatement[55202-55434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55216-55400]:Block[55250-55434]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch,\n                            \"expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'\");",
    "right" : "reportUnexpectedNumberChar(ch,\n                            \"expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'\");",
    "info" : "ExpressionStatement[55238-55382]:ExpressionStatement[55272-55416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55420-56163]:Block[55454-56197]"
  }, {
    "left" : "if ((_features & FEAT_MASK_LEADING_ZEROS) == 0)",
    "right" : "if ((_features & FEAT_MASK_LEADING_ZEROS) == 0)",
    "info" : "IfStatement[55632-55770]:IfStatement[55666-55804]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55680-55770]:Block[55714-55804]"
  }, {
    "left" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
    "right" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
    "info" : "ExpressionStatement[55702-55752]:ExpressionStatement[55736-55786]"
  }, {
    "left" : "if (ch == INT_0)",
    "right" : "if (ch == INT_0)",
    "info" : "IfStatement[55787-55903]:IfStatement[55821-55937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55804-55903]:Block[55838-55937]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[55876-55885]:ContinueStatement[55910-55919]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[55920-55976]:VariableDeclarationStatement[55954-56010]"
  }, {
    "left" : "outBuf[0] = (char) ch;",
    "right" : "outBuf[0] = (char) ch;",
    "info" : "ExpressionStatement[56034-56056]:ExpressionStatement[56068-56090]"
  }, {
    "left" : "_intLength = 1;",
    "right" : "_intLength = 1;",
    "info" : "ExpressionStatement[56073-56088]:ExpressionStatement[56107-56122]"
  }, {
    "left" : "return _finishNumberIntegralPart(outBuf, 1);",
    "right" : "return _finishNumberIntegralPart(outBuf, 1);",
    "info" : "ReturnStatement[56105-56149]:ReturnStatement[56139-56183]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[56176-56188]:ExpressionStatement[56210-56222]"
  }, {
    "left" : "return _valueCompleteInt(0, \"0\");",
    "right" : "return _valueCompleteInt(0, \"0\");",
    "info" : "ReturnStatement[56201-56234]:ReturnStatement[56235-56268]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[56256-56265]:Modifier[56290-56299]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[56266-56275]:SimpleType[56300-56309]"
  }, {
    "left" : "_finishNumberLeadingNegZeroes",
    "right" : "_finishNumberLeadingNegZeroes",
    "info" : "SimpleName[56276-56305]:SimpleName[56310-56339]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[56315-56326]:SimpleType[56349-56360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56331-58764]:Block[56365-58798]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[56508-58758]:WhileStatement[56542-58792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56521-58758]:Block[56555-58792]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[56535-56695]:IfStatement[56569-56729]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56563-56695]:Block[56597-56729]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_MINUSZERO;",
    "right" : "_minorState = MINOR_NUMBER_MINUSZERO;",
    "info" : "ExpressionStatement[56581-56618]:ExpressionStatement[56615-56652]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[56635-56681]:ReturnStatement[56669-56715]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[56708-56750]:VariableDeclarationStatement[56742-56784]"
  }, {
    "left" : "if (ch < INT_0)",
    "right" : "if (ch < INT_0)",
    "info" : "IfStatement[56763-58677]:IfStatement[56797-58711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56779-57094]:Block[56813-57128]"
  }, {
    "left" : "if (ch == INT_PERIOD)",
    "right" : "if (ch == INT_PERIOD)",
    "info" : "IfStatement[56797-57080]:IfStatement[56831-57114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56819-57080]:Block[56853-57114]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[56841-56897]:VariableDeclarationStatement[56875-56931]"
  }, {
    "left" : "outBuf[0] = '-';",
    "right" : "outBuf[0] = '-';",
    "info" : "ExpressionStatement[56918-56934]:ExpressionStatement[56952-56968]"
  }, {
    "left" : "outBuf[1] = '0';",
    "right" : "outBuf[1] = '0';",
    "info" : "ExpressionStatement[56955-56971]:ExpressionStatement[56989-57005]"
  }, {
    "left" : "_intLength = 1;",
    "right" : "_intLength = 1;",
    "info" : "ExpressionStatement[56992-57007]:ExpressionStatement[57026-57041]"
  }, {
    "left" : "return _startFloat(outBuf, 2, ch);",
    "right" : "return _startFloat(outBuf, 2, ch);",
    "info" : "ReturnStatement[57028-57062]:ReturnStatement[57062-57096]"
  }, {
    "left" : "if (ch > INT_9)",
    "right" : "if (ch > INT_9)",
    "info" : "IfStatement[57100-58677]:IfStatement[57134-58711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57116-57882]:Block[57150-57916]"
  }, {
    "left" : "if (ch == INT_e || ch == INT_E)",
    "right" : "if (ch == INT_e || ch == INT_E)",
    "info" : "IfStatement[57134-57427]:IfStatement[57168-57461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57166-57427]:Block[57200-57461]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[57188-57244]:VariableDeclarationStatement[57222-57278]"
  }, {
    "left" : "outBuf[0] = '-';",
    "right" : "outBuf[0] = '-';",
    "info" : "ExpressionStatement[57265-57281]:ExpressionStatement[57299-57315]"
  }, {
    "left" : "outBuf[1] = '0';",
    "right" : "outBuf[1] = '0';",
    "info" : "ExpressionStatement[57302-57318]:ExpressionStatement[57336-57352]"
  }, {
    "left" : "_intLength = 1;",
    "right" : "_intLength = 1;",
    "info" : "ExpressionStatement[57339-57354]:ExpressionStatement[57373-57388]"
  }, {
    "left" : "return _startFloat(outBuf, 2, ch);",
    "right" : "return _startFloat(outBuf, 2, ch);",
    "info" : "ReturnStatement[57375-57409]:ReturnStatement[57409-57443]"
  }, {
    "left" : "if ((ch != INT_RBRACKET) && (ch != INT_RCURLY))",
    "right" : "if ((ch != INT_RBRACKET) && (ch != INT_RCURLY))",
    "info" : "IfStatement[57636-57868]:IfStatement[57670-57902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57684-57868]:Block[57718-57902]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch,\n                            \"expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'\");",
    "right" : "reportUnexpectedNumberChar(ch,\n                            \"expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'\");",
    "info" : "ExpressionStatement[57706-57850]:ExpressionStatement[57740-57884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57888-58677]:Block[57922-58711]"
  }, {
    "left" : "if ((_features & FEAT_MASK_LEADING_ZEROS) == 0)",
    "right" : "if ((_features & FEAT_MASK_LEADING_ZEROS) == 0)",
    "info" : "IfStatement[58113-58251]:IfStatement[58147-58285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58161-58251]:Block[58195-58285]"
  }, {
    "left" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
    "right" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
    "info" : "ExpressionStatement[58183-58233]:ExpressionStatement[58217-58267]"
  }, {
    "left" : "if (ch == INT_0)",
    "right" : "if (ch == INT_0)",
    "info" : "IfStatement[58268-58384]:IfStatement[58302-58418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58285-58384]:Block[58319-58418]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[58357-58366]:ContinueStatement[58391-58400]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[58401-58457]:VariableDeclarationStatement[58435-58491]"
  }, {
    "left" : "outBuf[0] = '-';",
    "right" : "outBuf[0] = '-';",
    "info" : "ExpressionStatement[58515-58531]:ExpressionStatement[58549-58565]"
  }, {
    "left" : "outBuf[1] = (char) ch;",
    "right" : "outBuf[1] = (char) ch;",
    "info" : "ExpressionStatement[58548-58570]:ExpressionStatement[58582-58604]"
  }, {
    "left" : "_intLength = 1;",
    "right" : "_intLength = 1;",
    "info" : "ExpressionStatement[58587-58602]:ExpressionStatement[58621-58636]"
  }, {
    "left" : "return _finishNumberIntegralPart(outBuf, 2);",
    "right" : "return _finishNumberIntegralPart(outBuf, 2);",
    "info" : "ReturnStatement[58619-58663]:ReturnStatement[58653-58697]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[58690-58702]:ExpressionStatement[58724-58736]"
  }, {
    "left" : "return _valueCompleteInt(0, \"0\");",
    "right" : "return _valueCompleteInt(0, \"0\");",
    "info" : "ReturnStatement[58715-58748]:ReturnStatement[58749-58782]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[58770-58779]:Modifier[58804-58813]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[58780-58789]:SimpleType[58814-58823]"
  }, {
    "left" : "_finishNumberIntegralPart",
    "right" : "_finishNumberIntegralPart",
    "info" : "SimpleName[58790-58815]:SimpleName[58824-58849]"
  }, {
    "left" : "char[] outBuf",
    "right" : "char[] outBuf",
    "info" : "SingleVariableDeclaration[58816-58829]:SingleVariableDeclaration[58850-58863]"
  }, {
    "left" : "int outPtr",
    "right" : "int outPtr",
    "info" : "SingleVariableDeclaration[58831-58841]:SingleVariableDeclaration[58865-58875]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[58850-58861]:SimpleType[58884-58895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58866-60246]:Block[58900-60280]"
  }, {
    "left" : "int negMod = _numberNegative ? -1 : 0;",
    "right" : "int negMod = _numberNegative ? -1 : 0;",
    "info" : "VariableDeclarationStatement[58876-58914]:VariableDeclarationStatement[58910-58948]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[58924-60099]:WhileStatement[58958-60133]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58937-60099]:Block[58971-60133]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[58951-59170]:IfStatement[58985-59204]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58979-59170]:Block[59013-59204]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_INTEGER_DIGITS;",
    "right" : "_minorState = MINOR_NUMBER_INTEGER_DIGITS;",
    "info" : "ExpressionStatement[58997-59039]:ExpressionStatement[59031-59073]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[59056-59093]:ExpressionStatement[59090-59127]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[59110-59156]:ReturnStatement[59144-59190]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
    "info" : "VariableDeclarationStatement[59183-59223]:VariableDeclarationStatement[59217-59257]"
  }, {
    "left" : "if (ch < INT_0)",
    "right" : "if (ch < INT_0)",
    "info" : "IfStatement[59236-59489]:IfStatement[59270-59523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59252-59489]:Block[59286-59523]"
  }, {
    "left" : "if (ch == INT_PERIOD)",
    "right" : "if (ch == INT_PERIOD)",
    "info" : "IfStatement[59270-59452]:IfStatement[59304-59486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59292-59452]:Block[59326-59486]"
  }, {
    "left" : "_intLength = outPtr+negMod;",
    "right" : "_intLength = outPtr+negMod;",
    "info" : "ExpressionStatement[59314-59341]:ExpressionStatement[59348-59375]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[59362-59374]:ExpressionStatement[59396-59408]"
  }, {
    "left" : "return _startFloat(outBuf, outPtr, ch);",
    "right" : "return _startFloat(outBuf, outPtr, ch);",
    "info" : "ReturnStatement[59395-59434]:ReturnStatement[59429-59468]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59469-59475]:BreakStatement[59503-59509]"
  }, {
    "left" : "if (ch > INT_9)",
    "right" : "if (ch > INT_9)",
    "info" : "IfStatement[59502-59765]:IfStatement[59536-59799]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59518-59765]:Block[59552-59799]"
  }, {
    "left" : "if (ch == INT_e || ch == INT_E)",
    "right" : "if (ch == INT_e || ch == INT_E)",
    "info" : "IfStatement[59536-59728]:IfStatement[59570-59762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59568-59728]:Block[59602-59762]"
  }, {
    "left" : "_intLength = outPtr+negMod;",
    "right" : "_intLength = outPtr+negMod;",
    "info" : "ExpressionStatement[59590-59617]:ExpressionStatement[59624-59651]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[59638-59650]:ExpressionStatement[59672-59684]"
  }, {
    "left" : "return _startFloat(outBuf, outPtr, ch);",
    "right" : "return _startFloat(outBuf, outPtr, ch);",
    "info" : "ReturnStatement[59671-59710]:ReturnStatement[59705-59744]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59745-59751]:BreakStatement[59779-59785]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[59778-59790]:ExpressionStatement[59812-59824]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[59803-60047]:IfStatement[59837-60081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59832-60047]:Block[59866-60081]"
  }, {
    "left" : "outBuf = _textBuffer.expandCurrentSegment();",
    "right" : "outBuf = _textBuffer.expandCurrentSegment();",
    "info" : "ExpressionStatement[59989-60033]:ExpressionStatement[60023-60067]"
  }, {
    "left" : "outBuf[outPtr++] = (char) ch;",
    "right" : "outBuf[outPtr++] = (char) ch;",
    "info" : "ExpressionStatement[60060-60089]:ExpressionStatement[60094-60123]"
  }, {
    "left" : "_intLength = outPtr+negMod;",
    "right" : "_intLength = outPtr+negMod;",
    "info" : "ExpressionStatement[60108-60135]:ExpressionStatement[60142-60169]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[60144-60181]:ExpressionStatement[60178-60215]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_NUMBER_INT);",
    "right" : "return _valueComplete(JsonToken.VALUE_NUMBER_INT);",
    "info" : "ReturnStatement[60190-60240]:ReturnStatement[60224-60274]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[60252-60261]:Modifier[60286-60295]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[60262-60271]:SimpleType[60296-60305]"
  }, {
    "left" : "_startFloat",
    "right" : "_startFloat",
    "info" : "SimpleName[60272-60283]:SimpleName[60306-60317]"
  }, {
    "left" : "char[] outBuf",
    "right" : "char[] outBuf",
    "info" : "SingleVariableDeclaration[60284-60297]:SingleVariableDeclaration[60318-60331]"
  }, {
    "left" : "int outPtr",
    "right" : "int outPtr",
    "info" : "SingleVariableDeclaration[60299-60309]:SingleVariableDeclaration[60333-60343]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[60311-60317]:SingleVariableDeclaration[60345-60351]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[60326-60337]:SimpleType[60360-60371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60342-63909]:Block[60376-63943]"
  }, {
    "left" : "int fractLen = 0;",
    "right" : "int fractLen = 0;",
    "info" : "VariableDeclarationStatement[60352-60369]:VariableDeclarationStatement[60386-60403]"
  }, {
    "left" : "if (ch == INT_PERIOD)",
    "right" : "if (ch == INT_PERIOD)",
    "info" : "IfStatement[60378-61603]:IfStatement[60412-61637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60400-61603]:Block[60434-61637]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[60414-60519]:IfStatement[60448-60553]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60443-60519]:Block[60477-60553]"
  }, {
    "left" : "outBuf = _textBuffer.expandCurrentSegment();",
    "right" : "outBuf = _textBuffer.expandCurrentSegment();",
    "info" : "ExpressionStatement[60461-60505]:ExpressionStatement[60495-60539]"
  }, {
    "left" : "outBuf[outPtr++] = '.';",
    "right" : "outBuf[outPtr++] = '.';",
    "info" : "ExpressionStatement[60532-60555]:ExpressionStatement[60566-60589]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[60568-61593]:WhileStatement[60602-61627]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60581-61593]:Block[60615-61627]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[60599-60880]:IfStatement[60633-60914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60627-60880]:Block[60661-60914]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[60649-60686]:ExpressionStatement[60683-60720]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_FRACTION_DIGITS;",
    "right" : "_minorState = MINOR_NUMBER_FRACTION_DIGITS;",
    "info" : "ExpressionStatement[60707-60750]:ExpressionStatement[60741-60784]"
  }, {
    "left" : "_fractLength = fractLen;",
    "right" : "_fractLength = fractLen;",
    "info" : "ExpressionStatement[60771-60795]:ExpressionStatement[60805-60829]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[60816-60862]:ReturnStatement[60850-60896]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[60897-60928]:ExpressionStatement[60931-60962]"
  }, {
    "left" : "if (ch < INT_0 || ch > INT_9)",
    "right" : "if (ch < INT_0 || ch > INT_9)",
    "info" : "IfStatement[60982-61375]:IfStatement[61016-61409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61012-61375]:Block[61046-61409]"
  }, {
    "left" : "ch &= 0xFF;",
    "right" : "ch &= 0xFF;",
    "info" : "ExpressionStatement[61034-61045]:ExpressionStatement[61068-61079]"
  }, {
    "left" : "if (fractLen == 0)",
    "right" : "if (fractLen == 0)",
    "info" : "IfStatement[61191-61330]:IfStatement[61225-61364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61210-61330]:Block[61244-61364]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
    "right" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
    "info" : "ExpressionStatement[61236-61308]:ExpressionStatement[61270-61342]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[61351-61357]:BreakStatement[61385-61391]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[61392-61505]:IfStatement[61426-61539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61421-61505]:Block[61455-61539]"
  }, {
    "left" : "outBuf = _textBuffer.expandCurrentSegment();",
    "right" : "outBuf = _textBuffer.expandCurrentSegment();",
    "info" : "ExpressionStatement[61443-61487]:ExpressionStatement[61477-61521]"
  }, {
    "left" : "outBuf[outPtr++] = (char) ch;",
    "right" : "outBuf[outPtr++] = (char) ch;",
    "info" : "ExpressionStatement[61522-61551]:ExpressionStatement[61556-61585]"
  }, {
    "left" : "++fractLen;",
    "right" : "++fractLen;",
    "info" : "ExpressionStatement[61568-61579]:ExpressionStatement[61602-61613]"
  }, {
    "left" : "_fractLength = fractLen;",
    "right" : "_fractLength = fractLen;",
    "info" : "ExpressionStatement[61612-61636]:ExpressionStatement[61646-61670]"
  }, {
    "left" : "int expLen = 0;",
    "right" : "int expLen = 0;",
    "info" : "VariableDeclarationStatement[61645-61660]:VariableDeclarationStatement[61679-61694]"
  }, {
    "left" : "if (ch == INT_e || ch == INT_E)",
    "right" : "if (ch == INT_e || ch == INT_E)",
    "info" : "IfStatement[61669-63646]:IfStatement[61703-63680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61701-63646]:Block[61735-63680]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[61728-61833]:IfStatement[61762-61867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61757-61833]:Block[61791-61867]"
  }, {
    "left" : "outBuf = _textBuffer.expandCurrentSegment();",
    "right" : "outBuf = _textBuffer.expandCurrentSegment();",
    "info" : "ExpressionStatement[61775-61819]:ExpressionStatement[61809-61853]"
  }, {
    "left" : "outBuf[outPtr++] = (char) ch;",
    "right" : "outBuf[outPtr++] = (char) ch;",
    "info" : "ExpressionStatement[61846-61875]:ExpressionStatement[61880-61909]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[61888-62140]:IfStatement[61922-62174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61916-62140]:Block[61950-62174]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[61934-61971]:ExpressionStatement[61968-62005]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_EXPONENT_MARKER;",
    "right" : "_minorState = MINOR_NUMBER_EXPONENT_MARKER;",
    "info" : "ExpressionStatement[61988-62031]:ExpressionStatement[62022-62065]"
  }, {
    "left" : "_expLength = 0;",
    "right" : "_expLength = 0;",
    "info" : "ExpressionStatement[62048-62063]:ExpressionStatement[62082-62097]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[62080-62126]:ReturnStatement[62114-62160]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[62153-62184]:ExpressionStatement[62187-62218]"
  }, {
    "left" : "if (ch == INT_MINUS || ch == INT_PLUS)",
    "right" : "if (ch == INT_MINUS || ch == INT_PLUS)",
    "info" : "IfStatement[62234-62801]:IfStatement[62268-62835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62273-62801]:Block[62307-62835]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[62291-62404]:IfStatement[62325-62438]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62320-62404]:Block[62354-62438]"
  }, {
    "left" : "outBuf = _textBuffer.expandCurrentSegment();",
    "right" : "outBuf = _textBuffer.expandCurrentSegment();",
    "info" : "ExpressionStatement[62342-62386]:ExpressionStatement[62376-62420]"
  }, {
    "left" : "outBuf[outPtr++] = (char) ch;",
    "right" : "outBuf[outPtr++] = (char) ch;",
    "info" : "ExpressionStatement[62421-62450]:ExpressionStatement[62455-62484]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[62467-62739]:IfStatement[62501-62773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62495-62739]:Block[62529-62773]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[62517-62554]:ExpressionStatement[62551-62588]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_EXPONENT_DIGITS;",
    "right" : "_minorState = MINOR_NUMBER_EXPONENT_DIGITS;",
    "info" : "ExpressionStatement[62575-62618]:ExpressionStatement[62609-62652]"
  }, {
    "left" : "_expLength = 0;",
    "right" : "_expLength = 0;",
    "info" : "ExpressionStatement[62639-62654]:ExpressionStatement[62673-62688]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[62675-62721]:ReturnStatement[62709-62755]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[62756-62787]:ExpressionStatement[62790-62821]"
  }, {
    "left" : "while (ch >= INT_0 && ch <= INT_9)",
    "right" : "while (ch >= INT_0 && ch <= INT_9)",
    "info" : "WhileStatement[62814-63408]:WhileStatement[62848-63442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62849-63408]:Block[62883-63442]"
  }, {
    "left" : "++expLen;",
    "right" : "++expLen;",
    "info" : "ExpressionStatement[62867-62876]:ExpressionStatement[62901-62910]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[62893-63006]:IfStatement[62927-63040]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62922-63006]:Block[62956-63040]"
  }, {
    "left" : "outBuf = _textBuffer.expandCurrentSegment();",
    "right" : "outBuf = _textBuffer.expandCurrentSegment();",
    "info" : "ExpressionStatement[62944-62988]:ExpressionStatement[62978-63022]"
  }, {
    "left" : "outBuf[outPtr++] = (char) ch;",
    "right" : "outBuf[outPtr++] = (char) ch;",
    "info" : "ExpressionStatement[63023-63052]:ExpressionStatement[63057-63086]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[63069-63346]:IfStatement[63103-63380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63097-63346]:Block[63131-63380]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[63119-63156]:ExpressionStatement[63153-63190]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_EXPONENT_DIGITS;",
    "right" : "_minorState = MINOR_NUMBER_EXPONENT_DIGITS;",
    "info" : "ExpressionStatement[63177-63220]:ExpressionStatement[63211-63254]"
  }, {
    "left" : "_expLength = expLen;",
    "right" : "_expLength = expLen;",
    "info" : "ExpressionStatement[63241-63261]:ExpressionStatement[63275-63295]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[63282-63328]:ReturnStatement[63316-63362]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[63363-63394]:ExpressionStatement[63397-63428]"
  }, {
    "left" : "ch &= 0xFF;",
    "right" : "ch &= 0xFF;",
    "info" : "ExpressionStatement[63486-63497]:ExpressionStatement[63520-63531]"
  }, {
    "left" : "if (expLen == 0)",
    "right" : "if (expLen == 0)",
    "info" : "IfStatement[63510-63636]:IfStatement[63544-63670]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63527-63636]:Block[63561-63670]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
    "right" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
    "info" : "ExpressionStatement[63545-63622]:ExpressionStatement[63579-63656]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[63690-63702]:ExpressionStatement[63724-63736]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[63711-63748]:ExpressionStatement[63745-63782]"
  }, {
    "left" : "_expLength = expLen;",
    "right" : "_expLength = expLen;",
    "info" : "ExpressionStatement[63822-63842]:ExpressionStatement[63856-63876]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);",
    "right" : "return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);",
    "info" : "ReturnStatement[63851-63903]:ReturnStatement[63885-63937]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[63915-63924]:Modifier[63949-63958]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[63925-63934]:SimpleType[63959-63968]"
  }, {
    "left" : "_finishFloatFraction",
    "right" : "_finishFloatFraction",
    "info" : "SimpleName[63935-63955]:SimpleName[63969-63989]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[63965-63976]:SimpleType[63999-64010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63981-65792]:Block[64015-65826]"
  }, {
    "left" : "int fractLen = _fractLength;",
    "right" : "int fractLen = _fractLength;",
    "info" : "VariableDeclarationStatement[63991-64019]:VariableDeclarationStatement[64025-64053]"
  }, {
    "left" : "char[] outBuf = _textBuffer.getBufferWithoutReset();",
    "right" : "char[] outBuf = _textBuffer.getBufferWithoutReset();",
    "info" : "VariableDeclarationStatement[64028-64080]:VariableDeclarationStatement[64062-64114]"
  }, {
    "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "info" : "VariableDeclarationStatement[64089-64138]:VariableDeclarationStatement[64123-64172]"
  }, {
    "left" : "int ch;",
    "right" : "int ch;",
    "info" : "VariableDeclarationStatement[64233-64240]:VariableDeclarationStatement[64267-64274]"
  }, {
    "left" : "while (((ch = _inputBuffer[_inputPtr++]) >= INT_0) && (ch <= INT_9))",
    "right" : "while (((ch = _inputBuffer[_inputPtr++]) >= INT_0) && (ch <= INT_9))",
    "info" : "WhileStatement[64249-64712]:WhileStatement[64283-64746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64318-64712]:Block[64352-64746]"
  }, {
    "left" : "++fractLen;",
    "right" : "++fractLen;",
    "info" : "ExpressionStatement[64332-64343]:ExpressionStatement[64366-64377]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[64356-64461]:IfStatement[64390-64495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64385-64461]:Block[64419-64495]"
  }, {
    "left" : "outBuf = _textBuffer.expandCurrentSegment();",
    "right" : "outBuf = _textBuffer.expandCurrentSegment();",
    "info" : "ExpressionStatement[64403-64447]:ExpressionStatement[64437-64481]"
  }, {
    "left" : "outBuf[outPtr++] = (char) ch;",
    "right" : "outBuf[outPtr++] = (char) ch;",
    "info" : "ExpressionStatement[64474-64503]:ExpressionStatement[64508-64537]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[64516-64702]:IfStatement[64550-64736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64544-64702]:Block[64578-64736]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[64562-64599]:ExpressionStatement[64596-64633]"
  }, {
    "left" : "_fractLength = fractLen;",
    "right" : "_fractLength = fractLen;",
    "info" : "ExpressionStatement[64616-64640]:ExpressionStatement[64650-64674]"
  }, {
    "left" : "return JsonToken.NOT_AVAILABLE;",
    "right" : "return JsonToken.NOT_AVAILABLE;",
    "info" : "ReturnStatement[64657-64688]:ReturnStatement[64691-64722]"
  }, {
    "left" : "if (fractLen == 0)",
    "right" : "if (fractLen == 0)",
    "info" : "IfStatement[64844-64959]:IfStatement[64878-64993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64863-64959]:Block[64897-64993]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
    "right" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
    "info" : "ExpressionStatement[64877-64949]:ExpressionStatement[64911-64983]"
  }, {
    "left" : "_fractLength = fractLen;",
    "right" : "_fractLength = fractLen;",
    "info" : "ExpressionStatement[64968-64992]:ExpressionStatement[65002-65026]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[65001-65038]:ExpressionStatement[65035-65072]"
  }, {
    "left" : "if (ch == INT_e || ch == INT_E)",
    "right" : "if (ch == INT_e || ch == INT_E)",
    "info" : "IfStatement[65105-65533]:IfStatement[65139-65567]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65137-65533]:Block[65171-65567]"
  }, {
    "left" : "_textBuffer.append((char) ch);",
    "right" : "_textBuffer.append((char) ch);",
    "info" : "ExpressionStatement[65164-65194]:ExpressionStatement[65198-65228]"
  }, {
    "left" : "_expLength = 0;",
    "right" : "_expLength = 0;",
    "info" : "ExpressionStatement[65207-65222]:ExpressionStatement[65241-65256]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[65235-65386]:IfStatement[65269-65420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65263-65386]:Block[65297-65420]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_EXPONENT_MARKER;",
    "right" : "_minorState = MINOR_NUMBER_EXPONENT_MARKER;",
    "info" : "ExpressionStatement[65281-65324]:ExpressionStatement[65315-65358]"
  }, {
    "left" : "return JsonToken.NOT_AVAILABLE;",
    "right" : "return JsonToken.NOT_AVAILABLE;",
    "info" : "ReturnStatement[65341-65372]:ReturnStatement[65375-65406]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_EXPONENT_DIGITS;",
    "right" : "_minorState = MINOR_NUMBER_EXPONENT_DIGITS;",
    "info" : "ExpressionStatement[65399-65442]:ExpressionStatement[65433-65476]"
  }, {
    "left" : "return _finishFloatExponent(true, _inputBuffer[_inputPtr++] & 0xFF);",
    "right" : "return _finishFloatExponent(true, _inputBuffer[_inputPtr++] & 0xFF);",
    "info" : "ReturnStatement[65455-65523]:ReturnStatement[65489-65557]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[65578-65590]:ExpressionStatement[65612-65624]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[65599-65636]:ExpressionStatement[65633-65670]"
  }, {
    "left" : "_expLength = 0;",
    "right" : "_expLength = 0;",
    "info" : "ExpressionStatement[65710-65725]:ExpressionStatement[65744-65759]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);",
    "right" : "return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);",
    "info" : "ReturnStatement[65734-65786]:ReturnStatement[65768-65820]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[65798-65807]:Modifier[65832-65841]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[65808-65817]:SimpleType[65842-65851]"
  }, {
    "left" : "_finishFloatExponent",
    "right" : "_finishFloatExponent",
    "info" : "SimpleName[65818-65838]:SimpleName[65852-65872]"
  }, {
    "left" : "boolean checkSign",
    "right" : "boolean checkSign",
    "info" : "SingleVariableDeclaration[65839-65856]:SingleVariableDeclaration[65873-65890]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[65858-65864]:SingleVariableDeclaration[65892-65898]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[65873-65884]:SimpleType[65907-65918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65889-67460]:Block[65923-67494]"
  }, {
    "left" : "if (checkSign)",
    "right" : "if (checkSign)",
    "info" : "IfStatement[65899-66359]:IfStatement[65933-66393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65914-66359]:Block[65948-66393]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_EXPONENT_DIGITS;",
    "right" : "_minorState = MINOR_NUMBER_EXPONENT_DIGITS;",
    "info" : "ExpressionStatement[65928-65971]:ExpressionStatement[65962-66005]"
  }, {
    "left" : "if (ch == INT_MINUS || ch == INT_PLUS)",
    "right" : "if (ch == INT_MINUS || ch == INT_PLUS)",
    "info" : "IfStatement[65984-66349]:IfStatement[66018-66383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66023-66349]:Block[66057-66383]"
  }, {
    "left" : "_textBuffer.append((char) ch);",
    "right" : "_textBuffer.append((char) ch);",
    "info" : "ExpressionStatement[66041-66071]:ExpressionStatement[66075-66105]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[66088-66287]:IfStatement[66122-66321]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66116-66287]:Block[66150-66321]"
  }, {
    "left" : "_minorState = MINOR_NUMBER_EXPONENT_DIGITS;",
    "right" : "_minorState = MINOR_NUMBER_EXPONENT_DIGITS;",
    "info" : "ExpressionStatement[66138-66181]:ExpressionStatement[66172-66215]"
  }, {
    "left" : "_expLength = 0;",
    "right" : "_expLength = 0;",
    "info" : "ExpressionStatement[66202-66217]:ExpressionStatement[66236-66251]"
  }, {
    "left" : "return JsonToken.NOT_AVAILABLE;",
    "right" : "return JsonToken.NOT_AVAILABLE;",
    "info" : "ReturnStatement[66238-66269]:ReturnStatement[66272-66303]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[66304-66335]:ExpressionStatement[66338-66369]"
  }, {
    "left" : "char[] outBuf = _textBuffer.getBufferWithoutReset();",
    "right" : "char[] outBuf = _textBuffer.getBufferWithoutReset();",
    "info" : "VariableDeclarationStatement[66369-66421]:VariableDeclarationStatement[66403-66455]"
  }, {
    "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "info" : "VariableDeclarationStatement[66430-66479]:VariableDeclarationStatement[66464-66513]"
  }, {
    "left" : "int expLen = _expLength;",
    "right" : "int expLen = _expLength;",
    "info" : "VariableDeclarationStatement[66488-66512]:VariableDeclarationStatement[66522-66546]"
  }, {
    "left" : "while (ch >= INT_0 && ch <= INT_9)",
    "right" : "while (ch >= INT_0 && ch <= INT_9)",
    "info" : "WhileStatement[66522-66989]:WhileStatement[66556-67023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66557-66989]:Block[66591-67023]"
  }, {
    "left" : "++expLen;",
    "right" : "++expLen;",
    "info" : "ExpressionStatement[66571-66580]:ExpressionStatement[66605-66614]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[66593-66698]:IfStatement[66627-66732]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66622-66698]:Block[66656-66732]"
  }, {
    "left" : "outBuf = _textBuffer.expandCurrentSegment();",
    "right" : "outBuf = _textBuffer.expandCurrentSegment();",
    "info" : "ExpressionStatement[66640-66684]:ExpressionStatement[66674-66718]"
  }, {
    "left" : "outBuf[outPtr++] = (char) ch;",
    "right" : "outBuf[outPtr++] = (char) ch;",
    "info" : "ExpressionStatement[66711-66740]:ExpressionStatement[66745-66774]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[66753-66935]:IfStatement[66787-66969]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66781-66935]:Block[66815-66969]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[66799-66836]:ExpressionStatement[66833-66870]"
  }, {
    "left" : "_expLength = expLen;",
    "right" : "_expLength = expLen;",
    "info" : "ExpressionStatement[66853-66873]:ExpressionStatement[66887-66907]"
  }, {
    "left" : "return JsonToken.NOT_AVAILABLE;",
    "right" : "return JsonToken.NOT_AVAILABLE;",
    "info" : "ReturnStatement[66890-66921]:ReturnStatement[66924-66955]"
  }, {
    "left" : "ch = _inputBuffer[_inputPtr++];",
    "right" : "ch = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[66948-66979]:ExpressionStatement[66982-67013]"
  }, {
    "left" : "ch &= 0xFF;",
    "right" : "ch &= 0xFF;",
    "info" : "ExpressionStatement[67059-67070]:ExpressionStatement[67093-67104]"
  }, {
    "left" : "if (expLen == 0)",
    "right" : "if (expLen == 0)",
    "info" : "IfStatement[67079-67197]:IfStatement[67113-67231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67096-67197]:Block[67130-67231]"
  }, {
    "left" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
    "right" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
    "info" : "ExpressionStatement[67110-67187]:ExpressionStatement[67144-67221]"
  }, {
    "left" : "--_inputPtr;",
    "right" : "--_inputPtr;",
    "info" : "ExpressionStatement[67241-67253]:ExpressionStatement[67275-67287]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[67262-67299]:ExpressionStatement[67296-67333]"
  }, {
    "left" : "_expLength = expLen;",
    "right" : "_expLength = expLen;",
    "info" : "ExpressionStatement[67373-67393]:ExpressionStatement[67407-67427]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);",
    "right" : "return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);",
    "info" : "ReturnStatement[67402-67454]:ReturnStatement[67436-67488]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[67674-67681]:Modifier[67708-67715]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[67682-67687]:Modifier[67716-67721]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[67688-67694]:SimpleType[67722-67728]"
  }, {
    "left" : "_fastParseName",
    "right" : "_fastParseName",
    "info" : "SimpleName[67695-67709]:SimpleName[67729-67743]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[67719-67730]:SimpleType[67753-67764]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67735-69781]:Block[67769-69815]"
  }, {
    "left" : "final byte[] input = _inputBuffer;",
    "right" : "final byte[] input = _inputBuffer;",
    "info" : "VariableDeclarationStatement[68021-68055]:VariableDeclarationStatement[68055-68089]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[68064-68094]:VariableDeclarationStatement[68098-68128]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[68103-68123]:VariableDeclarationStatement[68137-68157]"
  }, {
    "left" : "int q0 = input[ptr++] & 0xFF;",
    "right" : "int q0 = input[ptr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[68133-68162]:VariableDeclarationStatement[68167-68196]"
  }, {
    "left" : "if (codes[q0] == 0)",
    "right" : "if (codes[q0] == 0)",
    "info" : "IfStatement[68171-69661]:IfStatement[68205-69695]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68191-69661]:Block[68225-69695]"
  }, {
    "left" : "int i = input[ptr++] & 0xFF;",
    "right" : "int i = input[ptr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[68205-68233]:VariableDeclarationStatement[68239-68267]"
  }, {
    "left" : "if (codes[i] == 0)",
    "right" : "if (codes[i] == 0)",
    "info" : "IfStatement[68246-69472]:IfStatement[68280-69506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68265-69472]:Block[68299-69506]"
  }, {
    "left" : "int q = (q0 << 8) | i;",
    "right" : "int q = (q0 << 8) | i;",
    "info" : "VariableDeclarationStatement[68283-68305]:VariableDeclarationStatement[68317-68339]"
  }, {
    "left" : "i = input[ptr++] & 0xFF;",
    "right" : "i = input[ptr++] & 0xFF;",
    "info" : "ExpressionStatement[68322-68346]:ExpressionStatement[68356-68380]"
  }, {
    "left" : "if (codes[i] == 0)",
    "right" : "if (codes[i] == 0)",
    "info" : "IfStatement[68363-69262]:IfStatement[68397-69296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68382-69262]:Block[68416-69296]"
  }, {
    "left" : "q = (q << 8) | i;",
    "right" : "q = (q << 8) | i;",
    "info" : "ExpressionStatement[68404-68421]:ExpressionStatement[68438-68455]"
  }, {
    "left" : "i = input[ptr++] & 0xFF;",
    "right" : "i = input[ptr++] & 0xFF;",
    "info" : "ExpressionStatement[68442-68466]:ExpressionStatement[68476-68500]"
  }, {
    "left" : "if (codes[i] == 0)",
    "right" : "if (codes[i] == 0)",
    "info" : "IfStatement[68487-69028]:IfStatement[68521-69062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68506-69028]:Block[68540-69062]"
  }, {
    "left" : "q = (q << 8) | i;",
    "right" : "q = (q << 8) | i;",
    "info" : "ExpressionStatement[68532-68549]:ExpressionStatement[68566-68583]"
  }, {
    "left" : "i = input[ptr++] & 0xFF;",
    "right" : "i = input[ptr++] & 0xFF;",
    "info" : "ExpressionStatement[68574-68598]:ExpressionStatement[68608-68632]"
  }, {
    "left" : "if (codes[i] == 0)",
    "right" : "if (codes[i] == 0)",
    "info" : "IfStatement[68623-68770]:IfStatement[68657-68804]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68642-68770]:Block[68676-68804]"
  }, {
    "left" : "_quad1 = q;",
    "right" : "_quad1 = q;",
    "info" : "ExpressionStatement[68672-68683]:ExpressionStatement[68706-68717]"
  }, {
    "left" : "return _parseMediumName(ptr, i);",
    "right" : "return _parseMediumName(ptr, i);",
    "info" : "ReturnStatement[68712-68744]:ReturnStatement[68746-68778]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[68795-68969]:IfStatement[68829-69003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68815-68969]:Block[68849-69003]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[68875-68891]:ExpressionStatement[68909-68925]"
  }, {
    "left" : "return _findName(q, 4);",
    "right" : "return _findName(q, 4);",
    "info" : "ReturnStatement[68920-68943]:ReturnStatement[68954-68977]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[68994-69006]:ReturnStatement[69028-69040]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[69049-69211]:IfStatement[69083-69245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69069-69211]:Block[69103-69245]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[69125-69141]:ExpressionStatement[69159-69175]"
  }, {
    "left" : "return _findName(q, 3);",
    "right" : "return _findName(q, 3);",
    "info" : "ReturnStatement[69166-69189]:ReturnStatement[69200-69223]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[69232-69244]:ReturnStatement[69266-69278]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[69279-69429]:IfStatement[69313-69463]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69299-69429]:Block[69333-69463]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[69351-69367]:ExpressionStatement[69385-69401]"
  }, {
    "left" : "return _findName(q, 2);",
    "right" : "return _findName(q, 2);",
    "info" : "ReturnStatement[69388-69411]:ReturnStatement[69422-69445]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[69446-69458]:ReturnStatement[69480-69492]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[69485-69626]:IfStatement[69519-69660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69505-69626]:Block[69539-69660]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[69555-69571]:ExpressionStatement[69589-69605]"
  }, {
    "left" : "return _findName(q0, 1);",
    "right" : "return _findName(q0, 1);",
    "info" : "ReturnStatement[69588-69612]:ReturnStatement[69622-69646]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[69639-69651]:ReturnStatement[69673-69685]"
  }, {
    "left" : "if (q0 == INT_QUOTE)",
    "right" : "if (q0 == INT_QUOTE)",
    "info" : "IfStatement[69670-69754]:IfStatement[69704-69788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69691-69754]:Block[69725-69788]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[69705-69721]:ExpressionStatement[69739-69755]"
  }, {
    "left" : "return \"\";",
    "right" : "return \"\";",
    "info" : "ReturnStatement[69734-69744]:ReturnStatement[69768-69778]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[69763-69775]:ReturnStatement[69797-69809]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[69787-69794]:Modifier[69821-69828]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[69795-69800]:Modifier[69829-69834]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[69801-69807]:SimpleType[69835-69841]"
  }, {
    "left" : "_parseMediumName",
    "right" : "_parseMediumName",
    "info" : "SimpleName[69808-69824]:SimpleName[69842-69858]"
  }, {
    "left" : "int ptr",
    "right" : "int ptr",
    "info" : "SingleVariableDeclaration[69825-69832]:SingleVariableDeclaration[69859-69866]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[69834-69840]:SingleVariableDeclaration[69868-69874]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[69849-69860]:SimpleType[69883-69894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69865-71232]:Block[69899-71266]"
  }, {
    "left" : "final byte[] input = _inputBuffer;",
    "right" : "final byte[] input = _inputBuffer;",
    "info" : "VariableDeclarationStatement[69875-69909]:VariableDeclarationStatement[69909-69943]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[69918-69948]:VariableDeclarationStatement[69952-69982]"
  }, {
    "left" : "int i = input[ptr++] & 0xFF;",
    "right" : "int i = input[ptr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[69997-70025]:VariableDeclarationStatement[70031-70059]"
  }, {
    "left" : "if (codes[i] == 0)",
    "right" : "if (codes[i] == 0)",
    "info" : "IfStatement[70034-71080]:IfStatement[70068-71114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70053-71080]:Block[70087-71114]"
  }, {
    "left" : "q2 = (q2 << 8) | i;",
    "right" : "q2 = (q2 << 8) | i;",
    "info" : "ExpressionStatement[70067-70086]:ExpressionStatement[70101-70120]"
  }, {
    "left" : "i = input[ptr++] & 0xFF;",
    "right" : "i = input[ptr++] & 0xFF;",
    "info" : "ExpressionStatement[70099-70123]:ExpressionStatement[70133-70157]"
  }, {
    "left" : "if (codes[i] == 0)",
    "right" : "if (codes[i] == 0)",
    "info" : "IfStatement[70136-70904]:IfStatement[70170-70938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70155-70904]:Block[70189-70938]"
  }, {
    "left" : "q2 = (q2 << 8) | i;",
    "right" : "q2 = (q2 << 8) | i;",
    "info" : "ExpressionStatement[70173-70192]:ExpressionStatement[70207-70226]"
  }, {
    "left" : "i = input[ptr++] & 0xFF;",
    "right" : "i = input[ptr++] & 0xFF;",
    "info" : "ExpressionStatement[70209-70233]:ExpressionStatement[70243-70267]"
  }, {
    "left" : "if (codes[i] == 0)",
    "right" : "if (codes[i] == 0)",
    "info" : "IfStatement[70250-70704]:IfStatement[70284-70738]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70269-70704]:Block[70303-70738]"
  }, {
    "left" : "q2 = (q2 << 8) | i;",
    "right" : "q2 = (q2 << 8) | i;",
    "info" : "ExpressionStatement[70291-70310]:ExpressionStatement[70325-70344]"
  }, {
    "left" : "i = input[ptr++] & 0xFF;",
    "right" : "i = input[ptr++] & 0xFF;",
    "info" : "ExpressionStatement[70331-70355]:ExpressionStatement[70365-70389]"
  }, {
    "left" : "if (codes[i] == 0)",
    "right" : "if (codes[i] == 0)",
    "info" : "IfStatement[70376-70480]:IfStatement[70410-70514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70395-70480]:Block[70429-70514]"
  }, {
    "left" : "return _parseMediumName2(ptr, i, q2);",
    "right" : "return _parseMediumName2(ptr, i, q2);",
    "info" : "ReturnStatement[70421-70458]:ReturnStatement[70455-70492]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[70501-70653]:IfStatement[70535-70687]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70521-70653]:Block[70555-70687]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[70558-70574]:ExpressionStatement[70592-70608]"
  }, {
    "left" : "return _findName(_quad1, q2, 4);",
    "right" : "return _findName(_quad1, q2, 4);",
    "info" : "ReturnStatement[70599-70631]:ReturnStatement[70633-70665]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[70674-70686]:ReturnStatement[70708-70720]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[70721-70861]:IfStatement[70755-70895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70741-70861]:Block[70775-70895]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[70774-70790]:ExpressionStatement[70808-70824]"
  }, {
    "left" : "return _findName(_quad1, q2, 3);",
    "right" : "return _findName(_quad1, q2, 3);",
    "info" : "ReturnStatement[70811-70843]:ReturnStatement[70845-70877]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[70878-70890]:ReturnStatement[70912-70924]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[70917-71045]:IfStatement[70951-71079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70937-71045]:Block[70971-71079]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[70966-70982]:ExpressionStatement[71000-71016]"
  }, {
    "left" : "return _findName(_quad1, q2, 2);",
    "right" : "return _findName(_quad1, q2, 2);",
    "info" : "ReturnStatement[70999-71031]:ReturnStatement[71033-71065]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[71058-71070]:ReturnStatement[71092-71104]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[71089-71205]:IfStatement[71123-71239]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71109-71205]:Block[71143-71239]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[71134-71150]:ExpressionStatement[71168-71184]"
  }, {
    "left" : "return _findName(_quad1, q2, 1);",
    "right" : "return _findName(_quad1, q2, 1);",
    "info" : "ReturnStatement[71163-71195]:ReturnStatement[71197-71229]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[71214-71226]:ReturnStatement[71248-71260]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[71238-71245]:Modifier[71272-71279]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[71246-71251]:Modifier[71280-71285]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[71252-71258]:SimpleType[71286-71292]"
  }, {
    "left" : "_parseMediumName2",
    "right" : "_parseMediumName2",
    "info" : "SimpleName[71259-71276]:SimpleName[71293-71310]"
  }, {
    "left" : "int ptr",
    "right" : "int ptr",
    "info" : "SingleVariableDeclaration[71277-71284]:SingleVariableDeclaration[71311-71318]"
  }, {
    "left" : "int q3",
    "right" : "int q3",
    "info" : "SingleVariableDeclaration[71286-71292]:SingleVariableDeclaration[71320-71326]"
  }, {
    "left" : "final int q2",
    "right" : "final int q2",
    "info" : "SingleVariableDeclaration[71294-71306]:SingleVariableDeclaration[71328-71340]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[71315-71326]:SimpleType[71349-71360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71331-72482]:Block[71365-72516]"
  }, {
    "left" : "final byte[] input = _inputBuffer;",
    "right" : "final byte[] input = _inputBuffer;",
    "info" : "VariableDeclarationStatement[71341-71375]:VariableDeclarationStatement[71375-71409]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[71384-71414]:VariableDeclarationStatement[71418-71448]"
  }, {
    "left" : "int i = input[ptr++] & 0xFF;",
    "right" : "int i = input[ptr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[71459-71487]:VariableDeclarationStatement[71493-71521]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[71496-71696]:IfStatement[71530-71730]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71515-71696]:Block[71549-71730]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[71529-71661]:IfStatement[71563-71695]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71549-71661]:Block[71583-71695]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[71578-71594]:ExpressionStatement[71612-71628]"
  }, {
    "left" : "return _findName(_quad1, q2, q3, 1);",
    "right" : "return _findName(_quad1, q2, q3, 1);",
    "info" : "ReturnStatement[71611-71647]:ReturnStatement[71645-71681]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[71674-71686]:ReturnStatement[71708-71720]"
  }, {
    "left" : "q3 = (q3 << 8) | i;",
    "right" : "q3 = (q3 << 8) | i;",
    "info" : "ExpressionStatement[71705-71724]:ExpressionStatement[71739-71758]"
  }, {
    "left" : "i = input[ptr++] & 0xFF;",
    "right" : "i = input[ptr++] & 0xFF;",
    "info" : "ExpressionStatement[71733-71757]:ExpressionStatement[71767-71791]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[71766-71967]:IfStatement[71800-72001]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71785-71967]:Block[71819-72001]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[71799-71932]:IfStatement[71833-71966]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71819-71932]:Block[71853-71966]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[71849-71865]:ExpressionStatement[71883-71899]"
  }, {
    "left" : "return _findName(_quad1, q2, q3, 2);",
    "right" : "return _findName(_quad1, q2, q3, 2);",
    "info" : "ReturnStatement[71882-71918]:ReturnStatement[71916-71952]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[71945-71957]:ReturnStatement[71979-71991]"
  }, {
    "left" : "q3 = (q3 << 8) | i;",
    "right" : "q3 = (q3 << 8) | i;",
    "info" : "ExpressionStatement[71976-71995]:ExpressionStatement[72010-72029]"
  }, {
    "left" : "i = input[ptr++] & 0xFF;",
    "right" : "i = input[ptr++] & 0xFF;",
    "info" : "ExpressionStatement[72004-72028]:ExpressionStatement[72038-72062]"
  }, {
    "left" : "if (codes[i] != 0)",
    "right" : "if (codes[i] != 0)",
    "info" : "IfStatement[72037-72238]:IfStatement[72071-72272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72056-72238]:Block[72090-72272]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[72070-72203]:IfStatement[72104-72237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72090-72203]:Block[72124-72237]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[72120-72136]:ExpressionStatement[72154-72170]"
  }, {
    "left" : "return _findName(_quad1, q2, q3, 3);",
    "right" : "return _findName(_quad1, q2, q3, 3);",
    "info" : "ReturnStatement[72153-72189]:ReturnStatement[72187-72223]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[72216-72228]:ReturnStatement[72250-72262]"
  }, {
    "left" : "q3 = (q3 << 8) | i;",
    "right" : "q3 = (q3 << 8) | i;",
    "info" : "ExpressionStatement[72247-72266]:ExpressionStatement[72281-72300]"
  }, {
    "left" : "i = input[ptr++] & 0xFF;",
    "right" : "i = input[ptr++] & 0xFF;",
    "info" : "ExpressionStatement[72275-72299]:ExpressionStatement[72309-72333]"
  }, {
    "left" : "if (i == INT_QUOTE)",
    "right" : "if (i == INT_QUOTE)",
    "info" : "IfStatement[72308-72429]:IfStatement[72342-72463]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72328-72429]:Block[72362-72463]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[72354-72370]:ExpressionStatement[72388-72404]"
  }, {
    "left" : "return _findName(_quad1, q2, q3, 4);",
    "right" : "return _findName(_quad1, q2, q3, 4);",
    "info" : "ReturnStatement[72383-72419]:ReturnStatement[72417-72453]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[72464-72476]:ReturnStatement[72498-72510]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[72807-72814]:Modifier[72841-72848]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[72815-72820]:Modifier[72849-72854]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[72821-72830]:SimpleType[72855-72864]"
  }, {
    "left" : "_parseEscapedName",
    "right" : "_parseEscapedName",
    "info" : "SimpleName[72831-72848]:SimpleName[72865-72882]"
  }, {
    "left" : "int qlen",
    "right" : "int qlen",
    "info" : "SingleVariableDeclaration[72849-72857]:SingleVariableDeclaration[72883-72891]"
  }, {
    "left" : "int currQuad",
    "right" : "int currQuad",
    "info" : "SingleVariableDeclaration[72859-72871]:SingleVariableDeclaration[72893-72905]"
  }, {
    "left" : "int currQuadBytes",
    "right" : "int currQuadBytes",
    "info" : "SingleVariableDeclaration[72873-72890]:SingleVariableDeclaration[72907-72924]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[72907-72918]:SimpleType[72941-72952]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72923-77275]:Block[72957-77309]"
  }, {
    "left" : "int[] quads = _quadBuffer;",
    "right" : "int[] quads = _quadBuffer;",
    "info" : "VariableDeclarationStatement[73166-73192]:VariableDeclarationStatement[73200-73226]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[73201-73231]:VariableDeclarationStatement[73235-73265]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[73241-76751]:WhileStatement[73275-76785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73254-76751]:Block[73288-76785]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[73268-73544]:IfStatement[73302-73578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73296-73544]:Block[73330-73578]"
  }, {
    "left" : "_quadLength = qlen;",
    "right" : "_quadLength = qlen;",
    "info" : "ExpressionStatement[73314-73333]:ExpressionStatement[73348-73367]"
  }, {
    "left" : "_pending32 = currQuad;",
    "right" : "_pending32 = currQuad;",
    "info" : "ExpressionStatement[73350-73372]:ExpressionStatement[73384-73406]"
  }, {
    "left" : "_pendingBytes = currQuadBytes;",
    "right" : "_pendingBytes = currQuadBytes;",
    "info" : "ExpressionStatement[73389-73419]:ExpressionStatement[73423-73453]"
  }, {
    "left" : "_minorState = MINOR_FIELD_NAME;",
    "right" : "_minorState = MINOR_FIELD_NAME;",
    "info" : "ExpressionStatement[73436-73467]:ExpressionStatement[73470-73501]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[73484-73530]:ReturnStatement[73518-73564]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[73557-73599]:VariableDeclarationStatement[73591-73633]"
  }, {
    "left" : "if (codes[ch] == 0)",
    "right" : "if (codes[ch] == 0)",
    "info" : "IfStatement[73612-74098]:IfStatement[73646-74132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73632-74098]:Block[73666-74132]"
  }, {
    "left" : "if (currQuadBytes < 4)",
    "right" : "if (currQuadBytes < 4)",
    "info" : "IfStatement[73650-73812]:IfStatement[73684-73846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73673-73812]:Block[73707-73846]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[73695-73711]:ExpressionStatement[73729-73745]"
  }, {
    "left" : "currQuad = (currQuad << 8) | ch;",
    "right" : "currQuad = (currQuad << 8) | ch;",
    "info" : "ExpressionStatement[73732-73764]:ExpressionStatement[73766-73798]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[73785-73794]:ContinueStatement[73819-73828]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[73829-73950]:IfStatement[73863-73984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73855-73950]:Block[73889-73984]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[73877-73932]:ExpressionStatement[73911-73966]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[73967-73992]:ExpressionStatement[74001-74026]"
  }, {
    "left" : "currQuad = ch;",
    "right" : "currQuad = ch;",
    "info" : "ExpressionStatement[74009-74023]:ExpressionStatement[74043-74057]"
  }, {
    "left" : "currQuadBytes = 1;",
    "right" : "currQuadBytes = 1;",
    "info" : "ExpressionStatement[74040-74058]:ExpressionStatement[74074-74092]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[74075-74084]:ContinueStatement[74109-74118]"
  }, {
    "left" : "if (ch == INT_QUOTE)",
    "right" : "if (ch == INT_QUOTE)",
    "info" : "IfStatement[74157-74231]:IfStatement[74191-74265]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74178-74231]:Block[74212-74265]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[74211-74217]:BreakStatement[74245-74251]"
  }, {
    "left" : "if (ch != INT_BACKSLASH)",
    "right" : "if (ch != INT_BACKSLASH)",
    "info" : "IfStatement[74281-74973]:IfStatement[74315-75007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74306-74450]:Block[74340-74484]"
  }, {
    "left" : "_throwUnquotedSpace(ch, \"name\");",
    "right" : "_throwUnquotedSpace(ch, \"name\");",
    "info" : "ExpressionStatement[74404-74436]:ExpressionStatement[74438-74470]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74456-74973]:Block[74490-75007]"
  }, {
    "left" : "ch = _decodeCharEscape();",
    "right" : "ch = _decodeCharEscape();",
    "info" : "ExpressionStatement[74515-74540]:ExpressionStatement[74549-74574]"
  }, {
    "left" : "if (ch < 0)",
    "right" : "if (ch < 0)",
    "info" : "IfStatement[74557-74959]:IfStatement[74591-74993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74569-74959]:Block[74603-74993]"
  }, {
    "left" : "_minorState = MINOR_FIELD_NAME_ESCAPE;",
    "right" : "_minorState = MINOR_FIELD_NAME_ESCAPE;",
    "info" : "ExpressionStatement[74640-74678]:ExpressionStatement[74674-74712]"
  }, {
    "left" : "_minorStateAfterSplit = MINOR_FIELD_NAME;",
    "right" : "_minorStateAfterSplit = MINOR_FIELD_NAME;",
    "info" : "ExpressionStatement[74699-74740]:ExpressionStatement[74733-74774]"
  }, {
    "left" : "_quadLength = qlen;",
    "right" : "_quadLength = qlen;",
    "info" : "ExpressionStatement[74761-74780]:ExpressionStatement[74795-74814]"
  }, {
    "left" : "_pending32 = currQuad;",
    "right" : "_pending32 = currQuad;",
    "info" : "ExpressionStatement[74801-74823]:ExpressionStatement[74835-74857]"
  }, {
    "left" : "_pendingBytes = currQuadBytes;",
    "right" : "_pendingBytes = currQuadBytes;",
    "info" : "ExpressionStatement[74844-74874]:ExpressionStatement[74878-74908]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[74895-74941]:ReturnStatement[74929-74975]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[75205-75318]:IfStatement[75239-75352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75231-75318]:Block[75265-75352]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[75249-75304]:ExpressionStatement[75283-75338]"
  }, {
    "left" : "if (ch > 127)",
    "right" : "if (ch > 127)",
    "info" : "IfStatement[75331-76486]:IfStatement[75365-76520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75345-76486]:Block[75379-76520]"
  }, {
    "left" : "if (currQuadBytes >= 4)",
    "right" : "if (currQuadBytes >= 4)",
    "info" : "IfStatement[75428-75590]:IfStatement[75462-75624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75452-75590]:Block[75486-75624]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[75474-75499]:ExpressionStatement[75508-75533]"
  }, {
    "left" : "currQuad = 0;",
    "right" : "currQuad = 0;",
    "info" : "ExpressionStatement[75520-75533]:ExpressionStatement[75554-75567]"
  }, {
    "left" : "currQuadBytes = 0;",
    "right" : "currQuadBytes = 0;",
    "info" : "ExpressionStatement[75554-75572]:ExpressionStatement[75588-75606]"
  }, {
    "left" : "if (ch < 0x800)",
    "right" : "if (ch < 0x800)",
    "info" : "IfStatement[75607-76359]:IfStatement[75641-76393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75623-75812]:Block[75657-75846]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
    "right" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
    "info" : "ExpressionStatement[75655-75703]:ExpressionStatement[75689-75737]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[75724-75740]:ExpressionStatement[75758-75774]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75818-76359]:Block[75852-76393]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
    "right" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
    "info" : "ExpressionStatement[75891-75940]:ExpressionStatement[75925-75974]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[75961-75977]:ExpressionStatement[75995-76011]"
  }, {
    "left" : "if (currQuadBytes >= 4)",
    "right" : "if (currQuadBytes >= 4)",
    "info" : "IfStatement[76048-76226]:IfStatement[76082-76260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76072-76226]:Block[76106-76260]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[76098-76123]:ExpressionStatement[76132-76157]"
  }, {
    "left" : "currQuad = 0;",
    "right" : "currQuad = 0;",
    "info" : "ExpressionStatement[76148-76161]:ExpressionStatement[76182-76195]"
  }, {
    "left" : "currQuadBytes = 0;",
    "right" : "currQuadBytes = 0;",
    "info" : "ExpressionStatement[76186-76204]:ExpressionStatement[76220-76238]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
    "right" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
    "info" : "ExpressionStatement[76247-76304]:ExpressionStatement[76281-76338]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[76325-76341]:ExpressionStatement[76359-76375]"
  }, {
    "left" : "ch = 0x80 | (ch & 0x3f);",
    "right" : "ch = 0x80 | (ch & 0x3f);",
    "info" : "ExpressionStatement[76448-76472]:ExpressionStatement[76482-76506]"
  }, {
    "left" : "if (currQuadBytes < 4)",
    "right" : "if (currQuadBytes < 4)",
    "info" : "IfStatement[76499-76645]:IfStatement[76533-76679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76522-76645]:Block[76556-76679]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[76540-76556]:ExpressionStatement[76574-76590]"
  }, {
    "left" : "currQuad = (currQuad << 8) | ch;",
    "right" : "currQuad = (currQuad << 8) | ch;",
    "info" : "ExpressionStatement[76573-76605]:ExpressionStatement[76607-76639]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[76622-76631]:ContinueStatement[76656-76665]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[76658-76683]:ExpressionStatement[76692-76717]"
  }, {
    "left" : "currQuad = ch;",
    "right" : "currQuad = ch;",
    "info" : "ExpressionStatement[76696-76710]:ExpressionStatement[76730-76744]"
  }, {
    "left" : "currQuadBytes = 1;",
    "right" : "currQuadBytes = 1;",
    "info" : "ExpressionStatement[76723-76741]:ExpressionStatement[76757-76775]"
  }, {
    "left" : "if (currQuadBytes > 0)",
    "right" : "if (currQuadBytes > 0)",
    "info" : "IfStatement[76761-77083]:IfStatement[76795-77117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76784-76988]:Block[76818-77022]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[76798-76911]:IfStatement[76832-76945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76824-76911]:Block[76858-76945]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[76842-76897]:ExpressionStatement[76876-76931]"
  }, {
    "left" : "quads[qlen++] = _padLastQuad(currQuad, currQuadBytes);",
    "right" : "quads[qlen++] = _padLastQuad(currQuad, currQuadBytes);",
    "info" : "ExpressionStatement[76924-76978]:ExpressionStatement[76958-77012]"
  }, {
    "left" : "if (qlen == 0)",
    "right" : "if (qlen == 0)",
    "info" : "IfStatement[76994-77083]:IfStatement[77028-77117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77009-77083]:Block[77043-77117]"
  }, {
    "left" : "return _fieldComplete(\"\");",
    "right" : "return _fieldComplete(\"\");",
    "info" : "ReturnStatement[77047-77073]:ReturnStatement[77081-77107]"
  }, {
    "left" : "String name = _symbols.findName(quads, qlen);",
    "right" : "String name = _symbols.findName(quads, qlen);",
    "info" : "VariableDeclarationStatement[77092-77137]:VariableDeclarationStatement[77126-77171]"
  }, {
    "left" : "if (name == null)",
    "right" : "if (name == null)",
    "info" : "IfStatement[77146-77232]:IfStatement[77180-77266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77164-77232]:Block[77198-77266]"
  }, {
    "left" : "name = _addName(quads, qlen, currQuadBytes);",
    "right" : "name = _addName(quads, qlen, currQuadBytes);",
    "info" : "ExpressionStatement[77178-77222]:ExpressionStatement[77212-77256]"
  }, {
    "left" : "return _fieldComplete(name);",
    "right" : "return _fieldComplete(name);",
    "info" : "ReturnStatement[77241-77269]:ReturnStatement[77275-77303]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[77531-77538]:Modifier[77565-77572]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[77539-77548]:SimpleType[77573-77582]"
  }, {
    "left" : "_handleOddName",
    "right" : "_handleOddName",
    "info" : "SimpleName[77549-77563]:SimpleName[77583-77597]"
  }, {
    "left" : "int ch",
    "right" : "int ch",
    "info" : "SingleVariableDeclaration[77564-77570]:SingleVariableDeclaration[77598-77604]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[77579-77590]:SimpleType[77613-77624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77595-79209]:Block[77629-79243]"
  }, {
    "left" : "switch (ch) {\n        case '#':\n            // Careful, since this may alternatively be leading char of\n            // unquoted name...\n            if ((_features & FEAT_MASK_ALLOW_YAML_COMMENTS) != 0) {\n                return _finishHashComment(MINOR_FIELD_LEADING_WS);\n            }\n            break;\n        case '/':\n            return _startSlashComment(MINOR_FIELD_LEADING_WS);\n        case '\\'':\n            if ((_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0) {\n                return _finishAposName(0, 0, 0);\n            }\n            break;\n        case ']': // for better error reporting...\n            return _closeArrayScope();\n        }",
    "right" : "switch (ch) {\n        case '#':\n            // Careful, since this may alternatively be leading char of\n            // unquoted name...\n            if ((_features & FEAT_MASK_ALLOW_YAML_COMMENTS) != 0) {\n                return _finishHashComment(MINOR_FIELD_LEADING_WS);\n            }\n            break;\n        case '/':\n            return _startSlashComment(MINOR_FIELD_LEADING_WS);\n        case '\\'':\n            if ((_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0) {\n                return _finishAposName(0, 0, 0);\n            }\n            break;\n        case ']': // for better error reporting...\n            return _closeArrayScope();\n        }",
    "info" : "SwitchStatement[77647-78300]:SwitchStatement[77681-78334]"
  }, {
    "left" : "case '#':",
    "right" : "case '#':",
    "info" : "SwitchCase[77669-77678]:SwitchCase[77703-77712]"
  }, {
    "left" : "if ((_features & FEAT_MASK_ALLOW_YAML_COMMENTS) != 0)",
    "right" : "if ((_features & FEAT_MASK_ALLOW_YAML_COMMENTS) != 0)",
    "info" : "IfStatement[77795-77931]:IfStatement[77829-77965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77849-77931]:Block[77883-77965]"
  }, {
    "left" : "return _finishHashComment(MINOR_FIELD_LEADING_WS);",
    "right" : "return _finishHashComment(MINOR_FIELD_LEADING_WS);",
    "info" : "ReturnStatement[77867-77917]:ReturnStatement[77901-77951]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[77944-77950]:BreakStatement[77978-77984]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[77959-77968]:SwitchCase[77993-78002]"
  }, {
    "left" : "return _startSlashComment(MINOR_FIELD_LEADING_WS);",
    "right" : "return _startSlashComment(MINOR_FIELD_LEADING_WS);",
    "info" : "ReturnStatement[77981-78031]:ReturnStatement[78015-78065]"
  }, {
    "left" : "case '\\'':",
    "right" : "case '\\'':",
    "info" : "SwitchCase[78040-78050]:SwitchCase[78074-78084]"
  }, {
    "left" : "if ((_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0)",
    "right" : "if ((_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0)",
    "info" : "IfStatement[78063-78181]:IfStatement[78097-78215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78117-78181]:Block[78151-78215]"
  }, {
    "left" : "return _finishAposName(0, 0, 0);",
    "right" : "return _finishAposName(0, 0, 0);",
    "info" : "ReturnStatement[78135-78167]:ReturnStatement[78169-78201]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[78194-78200]:BreakStatement[78228-78234]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[78209-78218]:SwitchCase[78243-78252]"
  }, {
    "left" : "return _closeArrayScope();",
    "right" : "return _closeArrayScope();",
    "info" : "ReturnStatement[78264-78290]:ReturnStatement[78298-78324]"
  }, {
    "left" : "if ((_features & FEAT_MASK_ALLOW_UNQUOTED_NAMES) == 0)",
    "right" : "if ((_features & FEAT_MASK_ALLOW_UNQUOTED_NAMES) == 0)",
    "info" : "IfStatement[78361-78660]:IfStatement[78395-78694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78416-78660]:Block[78450-78694]"
  }, {
    "left" : "char c = (char) ch;",
    "right" : "char c = (char) ch;",
    "info" : "VariableDeclarationStatement[78543-78562]:VariableDeclarationStatement[78577-78596]"
  }, {
    "left" : "_reportUnexpectedChar(c, \"was expecting double-quote to start field name\");",
    "right" : "_reportUnexpectedChar(c, \"was expecting double-quote to start field name\");",
    "info" : "ExpressionStatement[78575-78650]:ExpressionStatement[78609-78684]"
  }, {
    "left" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
    "right" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
    "info" : "VariableDeclarationStatement[78853-78909]:VariableDeclarationStatement[78887-78943]"
  }, {
    "left" : "if (codes[ch] != 0)",
    "right" : "if (codes[ch] != 0)",
    "info" : "IfStatement[78972-79156]:IfStatement[79006-79190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78992-79156]:Block[79026-79190]"
  }, {
    "left" : "_reportUnexpectedChar(ch, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
    "right" : "_reportUnexpectedChar(ch, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
    "info" : "ExpressionStatement[79006-79146]:ExpressionStatement[79040-79180]"
  }, {
    "left" : "return _finishUnquotedName(0, ch, 1);",
    "right" : "return _finishUnquotedName(0, ch, 1);",
    "info" : "ReturnStatement[79166-79203]:ReturnStatement[79200-79237]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[79397-79404]:Modifier[79431-79438]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[79405-79414]:SimpleType[79439-79448]"
  }, {
    "left" : "_finishUnquotedName",
    "right" : "_finishUnquotedName",
    "info" : "SimpleName[79415-79434]:SimpleName[79449-79468]"
  }, {
    "left" : "int qlen",
    "right" : "int qlen",
    "info" : "SingleVariableDeclaration[79435-79443]:SingleVariableDeclaration[79469-79477]"
  }, {
    "left" : "int currQuad",
    "right" : "int currQuad",
    "info" : "SingleVariableDeclaration[79445-79457]:SingleVariableDeclaration[79479-79491]"
  }, {
    "left" : "int currQuadBytes",
    "right" : "int currQuadBytes",
    "info" : "SingleVariableDeclaration[79459-79476]:SingleVariableDeclaration[79493-79510]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[79493-79504]:SimpleType[79527-79538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79509-81141]:Block[79543-81175]"
  }, {
    "left" : "int[] quads = _quadBuffer;",
    "right" : "int[] quads = _quadBuffer;",
    "info" : "VariableDeclarationStatement[79519-79545]:VariableDeclarationStatement[79553-79579]"
  }, {
    "left" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
    "right" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
    "info" : "VariableDeclarationStatement[79554-79610]:VariableDeclarationStatement[79588-79644]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[79809-80741]:WhileStatement[79843-80775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79822-80741]:Block[79856-80775]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[79836-80121]:IfStatement[79870-80155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79864-80121]:Block[79898-80155]"
  }, {
    "left" : "_quadLength = qlen;",
    "right" : "_quadLength = qlen;",
    "info" : "ExpressionStatement[79882-79901]:ExpressionStatement[79916-79935]"
  }, {
    "left" : "_pending32 = currQuad;",
    "right" : "_pending32 = currQuad;",
    "info" : "ExpressionStatement[79918-79940]:ExpressionStatement[79952-79974]"
  }, {
    "left" : "_pendingBytes = currQuadBytes;",
    "right" : "_pendingBytes = currQuadBytes;",
    "info" : "ExpressionStatement[79957-79987]:ExpressionStatement[79991-80021]"
  }, {
    "left" : "_minorState = MINOR_FIELD_UNQUOTED_NAME;",
    "right" : "_minorState = MINOR_FIELD_UNQUOTED_NAME;",
    "info" : "ExpressionStatement[80004-80044]:ExpressionStatement[80038-80078]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[80061-80107]:ReturnStatement[80095-80141]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
    "info" : "VariableDeclarationStatement[80134-80174]:VariableDeclarationStatement[80168-80208]"
  }, {
    "left" : "if (codes[ch] != 0)",
    "right" : "if (codes[ch] != 0)",
    "info" : "IfStatement[80187-80245]:IfStatement[80221-80279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80207-80245]:Block[80241-80279]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[80225-80231]:BreakStatement[80259-80265]"
  }, {
    "left" : "++_inputPtr;",
    "right" : "++_inputPtr;",
    "info" : "ExpressionStatement[80258-80270]:ExpressionStatement[80292-80304]"
  }, {
    "left" : "if (currQuadBytes < 4)",
    "right" : "if (currQuadBytes < 4)",
    "info" : "IfStatement[80344-80731]:IfStatement[80378-80765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80367-80464]:Block[80401-80498]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[80385-80401]:ExpressionStatement[80419-80435]"
  }, {
    "left" : "currQuad = (currQuad << 8) | ch;",
    "right" : "currQuad = (currQuad << 8) | ch;",
    "info" : "ExpressionStatement[80418-80450]:ExpressionStatement[80452-80484]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80470-80731]:Block[80504-80765]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[80488-80609]:IfStatement[80522-80643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80514-80609]:Block[80548-80643]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[80536-80591]:ExpressionStatement[80570-80625]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[80626-80651]:ExpressionStatement[80660-80685]"
  }, {
    "left" : "currQuad = ch;",
    "right" : "currQuad = ch;",
    "info" : "ExpressionStatement[80668-80682]:ExpressionStatement[80702-80716]"
  }, {
    "left" : "currQuadBytes = 1;",
    "right" : "currQuadBytes = 1;",
    "info" : "ExpressionStatement[80699-80717]:ExpressionStatement[80733-80751]"
  }, {
    "left" : "if (currQuadBytes > 0)",
    "right" : "if (currQuadBytes > 0)",
    "info" : "IfStatement[80751-80949]:IfStatement[80785-80983]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80774-80949]:Block[80808-80983]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[80788-80901]:IfStatement[80822-80935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80814-80901]:Block[80848-80935]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[80832-80887]:ExpressionStatement[80866-80921]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[80914-80939]:ExpressionStatement[80948-80973]"
  }, {
    "left" : "String name = _symbols.findName(quads, qlen);",
    "right" : "String name = _symbols.findName(quads, qlen);",
    "info" : "VariableDeclarationStatement[80958-81003]:VariableDeclarationStatement[80992-81037]"
  }, {
    "left" : "if (name == null)",
    "right" : "if (name == null)",
    "info" : "IfStatement[81012-81098]:IfStatement[81046-81132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81030-81098]:Block[81064-81132]"
  }, {
    "left" : "name = _addName(quads, qlen, currQuadBytes);",
    "right" : "name = _addName(quads, qlen, currQuadBytes);",
    "info" : "ExpressionStatement[81044-81088]:ExpressionStatement[81078-81122]"
  }, {
    "left" : "return _fieldComplete(name);",
    "right" : "return _fieldComplete(name);",
    "info" : "ReturnStatement[81107-81135]:ReturnStatement[81141-81169]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[81147-81154]:Modifier[81181-81188]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[81155-81164]:SimpleType[81189-81198]"
  }, {
    "left" : "_finishAposName",
    "right" : "_finishAposName",
    "info" : "SimpleName[81165-81180]:SimpleName[81199-81214]"
  }, {
    "left" : "int qlen",
    "right" : "int qlen",
    "info" : "SingleVariableDeclaration[81181-81189]:SingleVariableDeclaration[81215-81223]"
  }, {
    "left" : "int currQuad",
    "right" : "int currQuad",
    "info" : "SingleVariableDeclaration[81191-81203]:SingleVariableDeclaration[81225-81237]"
  }, {
    "left" : "int currQuadBytes",
    "right" : "int currQuadBytes",
    "info" : "SingleVariableDeclaration[81205-81222]:SingleVariableDeclaration[81239-81256]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[81239-81250]:SimpleType[81273-81284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81255-85228]:Block[81289-85262]"
  }, {
    "left" : "int[] quads = _quadBuffer;",
    "right" : "int[] quads = _quadBuffer;",
    "info" : "VariableDeclarationStatement[81265-81291]:VariableDeclarationStatement[81299-81325]"
  }, {
    "left" : "final int[] codes = _icLatin1;",
    "right" : "final int[] codes = _icLatin1;",
    "info" : "VariableDeclarationStatement[81300-81330]:VariableDeclarationStatement[81334-81364]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[81340-84702]:WhileStatement[81374-84736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81353-84702]:Block[81387-84736]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[81367-81648]:IfStatement[81401-81682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81395-81648]:Block[81429-81682]"
  }, {
    "left" : "_quadLength = qlen;",
    "right" : "_quadLength = qlen;",
    "info" : "ExpressionStatement[81413-81432]:ExpressionStatement[81447-81466]"
  }, {
    "left" : "_pending32 = currQuad;",
    "right" : "_pending32 = currQuad;",
    "info" : "ExpressionStatement[81449-81471]:ExpressionStatement[81483-81505]"
  }, {
    "left" : "_pendingBytes = currQuadBytes;",
    "right" : "_pendingBytes = currQuadBytes;",
    "info" : "ExpressionStatement[81488-81518]:ExpressionStatement[81522-81552]"
  }, {
    "left" : "_minorState = MINOR_FIELD_APOS_NAME;",
    "right" : "_minorState = MINOR_FIELD_APOS_NAME;",
    "info" : "ExpressionStatement[81535-81571]:ExpressionStatement[81569-81605]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[81588-81634]:ReturnStatement[81622-81668]"
  }, {
    "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "VariableDeclarationStatement[81661-81703]:VariableDeclarationStatement[81695-81737]"
  }, {
    "left" : "if (ch == INT_APOS)",
    "right" : "if (ch == INT_APOS)",
    "info" : "IfStatement[81716-81774]:IfStatement[81750-81808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81736-81774]:Block[81770-81808]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[81754-81760]:BreakStatement[81788-81794]"
  }, {
    "left" : "if (ch != '\"' && codes[ch] != 0)",
    "right" : "if (ch != '\"' && codes[ch] != 0)",
    "info" : "IfStatement[81853-84231]:IfStatement[81887-84265]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81886-84231]:Block[81920-84265]"
  }, {
    "left" : "if (ch != '\\\\')",
    "right" : "if (ch != '\\\\')",
    "info" : "IfStatement[81904-82609]:IfStatement[81938-82643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81920-82037]:Block[81954-82071]"
  }, {
    "left" : "_throwUnquotedSpace(ch, \"name\");",
    "right" : "_throwUnquotedSpace(ch, \"name\");",
    "info" : "ExpressionStatement[81987-82019]:ExpressionStatement[82021-82053]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82043-82609]:Block[82077-82643]"
  }, {
    "left" : "ch = _decodeCharEscape();",
    "right" : "ch = _decodeCharEscape();",
    "info" : "ExpressionStatement[82110-82135]:ExpressionStatement[82144-82169]"
  }, {
    "left" : "if (ch < 0)",
    "right" : "if (ch < 0)",
    "info" : "IfStatement[82156-82591]:IfStatement[82190-82625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82168-82591]:Block[82202-82625]"
  }, {
    "left" : "_minorState = MINOR_FIELD_NAME_ESCAPE;",
    "right" : "_minorState = MINOR_FIELD_NAME_ESCAPE;",
    "info" : "ExpressionStatement[82243-82281]:ExpressionStatement[82277-82315]"
  }, {
    "left" : "_minorStateAfterSplit = MINOR_FIELD_APOS_NAME;",
    "right" : "_minorStateAfterSplit = MINOR_FIELD_APOS_NAME;",
    "info" : "ExpressionStatement[82306-82352]:ExpressionStatement[82340-82386]"
  }, {
    "left" : "_quadLength = qlen;",
    "right" : "_quadLength = qlen;",
    "info" : "ExpressionStatement[82377-82396]:ExpressionStatement[82411-82430]"
  }, {
    "left" : "_pending32 = currQuad;",
    "right" : "_pending32 = currQuad;",
    "info" : "ExpressionStatement[82421-82443]:ExpressionStatement[82455-82477]"
  }, {
    "left" : "_pendingBytes = currQuadBytes;",
    "right" : "_pendingBytes = currQuadBytes;",
    "info" : "ExpressionStatement[82468-82498]:ExpressionStatement[82502-82532]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[82523-82569]:ReturnStatement[82557-82603]"
  }, {
    "left" : "if (ch > 127)",
    "right" : "if (ch > 127)",
    "info" : "IfStatement[82626-84217]:IfStatement[82660-84251]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82640-84217]:Block[82674-84251]"
  }, {
    "left" : "if (currQuadBytes >= 4)",
    "right" : "if (currQuadBytes >= 4)",
    "info" : "IfStatement[82731-83071]:IfStatement[82765-83105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82755-83071]:Block[82789-83105]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[82781-82918]:IfStatement[82815-82952]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82807-82918]:Block[82841-82952]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[82837-82892]:ExpressionStatement[82871-82926]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[82943-82968]:ExpressionStatement[82977-83002]"
  }, {
    "left" : "currQuad = 0;",
    "right" : "currQuad = 0;",
    "info" : "ExpressionStatement[82993-83006]:ExpressionStatement[83027-83040]"
  }, {
    "left" : "currQuadBytes = 0;",
    "right" : "currQuadBytes = 0;",
    "info" : "ExpressionStatement[83031-83049]:ExpressionStatement[83065-83083]"
  }, {
    "left" : "if (ch < 0x800)",
    "right" : "if (ch < 0x800)",
    "info" : "IfStatement[83092-84078]:IfStatement[83126-84112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83108-83313]:Block[83142-83347]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
    "right" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
    "info" : "ExpressionStatement[83144-83192]:ExpressionStatement[83178-83226]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[83217-83233]:ExpressionStatement[83251-83267]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83319-84078]:Block[83353-84112]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
    "right" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
    "info" : "ExpressionStatement[83396-83445]:ExpressionStatement[83430-83479]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[83470-83486]:ExpressionStatement[83504-83520]"
  }, {
    "left" : "if (currQuadBytes >= 4)",
    "right" : "if (currQuadBytes >= 4)",
    "info" : "IfStatement[83565-83933]:IfStatement[83599-83967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83589-83933]:Block[83623-83967]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[83619-83764]:IfStatement[83653-83798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83645-83764]:Block[83679-83798]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[83679-83734]:ExpressionStatement[83713-83768]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[83793-83818]:ExpressionStatement[83827-83852]"
  }, {
    "left" : "currQuad = 0;",
    "right" : "currQuad = 0;",
    "info" : "ExpressionStatement[83847-83860]:ExpressionStatement[83881-83894]"
  }, {
    "left" : "currQuadBytes = 0;",
    "right" : "currQuadBytes = 0;",
    "info" : "ExpressionStatement[83889-83907]:ExpressionStatement[83923-83941]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
    "right" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
    "info" : "ExpressionStatement[83958-84015]:ExpressionStatement[83992-84049]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[84040-84056]:ExpressionStatement[84074-84090]"
  }, {
    "left" : "ch = 0x80 | (ch & 0x3f);",
    "right" : "ch = 0x80 | (ch & 0x3f);",
    "info" : "ExpressionStatement[84175-84199]:ExpressionStatement[84209-84233]"
  }, {
    "left" : "if (currQuadBytes < 4)",
    "right" : "if (currQuadBytes < 4)",
    "info" : "IfStatement[84305-84692]:IfStatement[84339-84726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84328-84425]:Block[84362-84459]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[84346-84362]:ExpressionStatement[84380-84396]"
  }, {
    "left" : "currQuad = (currQuad << 8) | ch;",
    "right" : "currQuad = (currQuad << 8) | ch;",
    "info" : "ExpressionStatement[84379-84411]:ExpressionStatement[84413-84445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84431-84692]:Block[84465-84726]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[84449-84570]:IfStatement[84483-84604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84475-84570]:Block[84509-84604]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[84497-84552]:ExpressionStatement[84531-84586]"
  }, {
    "left" : "quads[qlen++] = currQuad;",
    "right" : "quads[qlen++] = currQuad;",
    "info" : "ExpressionStatement[84587-84612]:ExpressionStatement[84621-84646]"
  }, {
    "left" : "currQuad = ch;",
    "right" : "currQuad = ch;",
    "info" : "ExpressionStatement[84629-84643]:ExpressionStatement[84663-84677]"
  }, {
    "left" : "currQuadBytes = 1;",
    "right" : "currQuadBytes = 1;",
    "info" : "ExpressionStatement[84660-84678]:ExpressionStatement[84694-84712]"
  }, {
    "left" : "if (currQuadBytes > 0)",
    "right" : "if (currQuadBytes > 0)",
    "info" : "IfStatement[84712-85036]:IfStatement[84746-85070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84735-84939]:Block[84769-84973]"
  }, {
    "left" : "if (qlen >= quads.length)",
    "right" : "if (qlen >= quads.length)",
    "info" : "IfStatement[84749-84862]:IfStatement[84783-84896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84775-84862]:Block[84809-84896]"
  }, {
    "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
    "info" : "ExpressionStatement[84793-84848]:ExpressionStatement[84827-84882]"
  }, {
    "left" : "quads[qlen++] = _padLastQuad(currQuad, currQuadBytes);",
    "right" : "quads[qlen++] = _padLastQuad(currQuad, currQuadBytes);",
    "info" : "ExpressionStatement[84875-84929]:ExpressionStatement[84909-84963]"
  }, {
    "left" : "if (qlen == 0)",
    "right" : "if (qlen == 0)",
    "info" : "IfStatement[84945-85036]:IfStatement[84979-85070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84960-85036]:Block[84994-85070]"
  }, {
    "left" : "return _fieldComplete(\"\");",
    "right" : "return _fieldComplete(\"\");",
    "info" : "ReturnStatement[85000-85026]:ReturnStatement[85034-85060]"
  }, {
    "left" : "String name = _symbols.findName(quads, qlen);",
    "right" : "String name = _symbols.findName(quads, qlen);",
    "info" : "VariableDeclarationStatement[85045-85090]:VariableDeclarationStatement[85079-85124]"
  }, {
    "left" : "if (name == null)",
    "right" : "if (name == null)",
    "info" : "IfStatement[85099-85185]:IfStatement[85133-85219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85117-85185]:Block[85151-85219]"
  }, {
    "left" : "name = _addName(quads, qlen, currQuadBytes);",
    "right" : "name = _addName(quads, qlen, currQuadBytes);",
    "info" : "ExpressionStatement[85131-85175]:ExpressionStatement[85165-85209]"
  }, {
    "left" : "return _fieldComplete(name);",
    "right" : "return _fieldComplete(name);",
    "info" : "ReturnStatement[85194-85222]:ReturnStatement[85228-85256]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[85234-85243]:Modifier[85268-85277]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[85244-85249]:Modifier[85278-85283]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[85250-85259]:SimpleType[85284-85293]"
  }, {
    "left" : "_finishFieldWithEscape",
    "right" : "_finishFieldWithEscape",
    "info" : "SimpleName[85260-85282]:SimpleName[85294-85316]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[85292-85303]:SimpleType[85326-85337]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85308-87287]:Block[85342-87321]"
  }, {
    "left" : "int ch = _decodeSplitEscaped(_quoted32, _quotedDigits);",
    "right" : "int ch = _decodeSplitEscaped(_quoted32, _quotedDigits);",
    "info" : "VariableDeclarationStatement[85367-85422]:VariableDeclarationStatement[85401-85456]"
  }, {
    "left" : "if (ch < 0)",
    "right" : "if (ch < 0)",
    "info" : "IfStatement[85431-85568]:IfStatement[85465-85602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85443-85568]:Block[85477-85602]"
  }, {
    "left" : "_minorState = MINOR_FIELD_NAME_ESCAPE;",
    "right" : "_minorState = MINOR_FIELD_NAME_ESCAPE;",
    "info" : "ExpressionStatement[85476-85514]:ExpressionStatement[85510-85548]"
  }, {
    "left" : "return JsonToken.NOT_AVAILABLE;",
    "right" : "return JsonToken.NOT_AVAILABLE;",
    "info" : "ReturnStatement[85527-85558]:ReturnStatement[85561-85592]"
  }, {
    "left" : "if (_quadLength >= _quadBuffer.length)",
    "right" : "if (_quadLength >= _quadBuffer.length)",
    "info" : "IfStatement[85577-85683]:IfStatement[85611-85717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85616-85683]:Block[85650-85717]"
  }, {
    "left" : "_quadBuffer = growArrayBy(_quadBuffer, 32);",
    "right" : "_quadBuffer = growArrayBy(_quadBuffer, 32);",
    "info" : "ExpressionStatement[85630-85673]:ExpressionStatement[85664-85707]"
  }, {
    "left" : "int currQuad = _pending32;",
    "right" : "int currQuad = _pending32;",
    "info" : "VariableDeclarationStatement[85692-85718]:VariableDeclarationStatement[85726-85752]"
  }, {
    "left" : "int currQuadBytes = _pendingBytes;",
    "right" : "int currQuadBytes = _pendingBytes;",
    "info" : "VariableDeclarationStatement[85727-85761]:VariableDeclarationStatement[85761-85795]"
  }, {
    "left" : "if (ch > 127)",
    "right" : "if (ch > 127)",
    "info" : "IfStatement[85770-86820]:IfStatement[85804-86854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85784-86820]:Block[85818-86854]"
  }, {
    "left" : "if (currQuadBytes >= 4)",
    "right" : "if (currQuadBytes >= 4)",
    "info" : "IfStatement[85859-86018]:IfStatement[85893-86052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85883-86018]:Block[85917-86052]"
  }, {
    "left" : "_quadBuffer[_quadLength++] = currQuad;",
    "right" : "_quadBuffer[_quadLength++] = currQuad;",
    "info" : "ExpressionStatement[85901-85939]:ExpressionStatement[85935-85973]"
  }, {
    "left" : "currQuad = 0;",
    "right" : "currQuad = 0;",
    "info" : "ExpressionStatement[85956-85969]:ExpressionStatement[85990-86003]"
  }, {
    "left" : "currQuadBytes = 0;",
    "right" : "currQuadBytes = 0;",
    "info" : "ExpressionStatement[85986-86004]:ExpressionStatement[86020-86038]"
  }, {
    "left" : "if (ch < 0x800)",
    "right" : "if (ch < 0x800)",
    "info" : "IfStatement[86031-86705]:IfStatement[86065-86739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86047-86220]:Block[86081-86254]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
    "right" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
    "info" : "ExpressionStatement[86075-86123]:ExpressionStatement[86109-86157]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[86140-86156]:ExpressionStatement[86174-86190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86226-86705]:Block[86260-86739]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
    "right" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
    "info" : "ExpressionStatement[86295-86344]:ExpressionStatement[86329-86378]"
  }, {
    "left" : "if (++currQuadBytes >= 4)",
    "right" : "if (++currQuadBytes >= 4)",
    "info" : "IfStatement[86407-86584]:IfStatement[86441-86618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86433-86584]:Block[86467-86618]"
  }, {
    "left" : "_quadBuffer[_quadLength++] = currQuad;",
    "right" : "_quadBuffer[_quadLength++] = currQuad;",
    "info" : "ExpressionStatement[86455-86493]:ExpressionStatement[86489-86527]"
  }, {
    "left" : "currQuad = 0;",
    "right" : "currQuad = 0;",
    "info" : "ExpressionStatement[86514-86527]:ExpressionStatement[86548-86561]"
  }, {
    "left" : "currQuadBytes = 0;",
    "right" : "currQuadBytes = 0;",
    "info" : "ExpressionStatement[86548-86566]:ExpressionStatement[86582-86600]"
  }, {
    "left" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
    "right" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
    "info" : "ExpressionStatement[86601-86658]:ExpressionStatement[86635-86692]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[86675-86691]:ExpressionStatement[86709-86725]"
  }, {
    "left" : "ch = 0x80 | (ch & 0x3f);",
    "right" : "ch = 0x80 | (ch & 0x3f);",
    "info" : "ExpressionStatement[86786-86810]:ExpressionStatement[86820-86844]"
  }, {
    "left" : "if (currQuadBytes < 4)",
    "right" : "if (currQuadBytes < 4)",
    "info" : "IfStatement[86829-87063]:IfStatement[86863-87097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86852-86937]:Block[86886-86971]"
  }, {
    "left" : "++currQuadBytes;",
    "right" : "++currQuadBytes;",
    "info" : "ExpressionStatement[86866-86882]:ExpressionStatement[86900-86916]"
  }, {
    "left" : "currQuad = (currQuad << 8) | ch;",
    "right" : "currQuad = (currQuad << 8) | ch;",
    "info" : "ExpressionStatement[86895-86927]:ExpressionStatement[86929-86961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86943-87063]:Block[86977-87097]"
  }, {
    "left" : "_quadBuffer[_quadLength++] = currQuad;",
    "right" : "_quadBuffer[_quadLength++] = currQuad;",
    "info" : "ExpressionStatement[86957-86995]:ExpressionStatement[86991-87029]"
  }, {
    "left" : "currQuad = ch;",
    "right" : "currQuad = ch;",
    "info" : "ExpressionStatement[87008-87022]:ExpressionStatement[87042-87056]"
  }, {
    "left" : "currQuadBytes = 1;",
    "right" : "currQuadBytes = 1;",
    "info" : "ExpressionStatement[87035-87053]:ExpressionStatement[87069-87087]"
  }, {
    "left" : "if (_minorStateAfterSplit == MINOR_FIELD_APOS_NAME)",
    "right" : "if (_minorStateAfterSplit == MINOR_FIELD_APOS_NAME)",
    "info" : "IfStatement[87072-87209]:IfStatement[87106-87243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87124-87209]:Block[87158-87243]"
  }, {
    "left" : "return _finishAposName(_quadLength, currQuad, currQuadBytes);",
    "right" : "return _finishAposName(_quadLength, currQuad, currQuadBytes);",
    "info" : "ReturnStatement[87138-87199]:ReturnStatement[87172-87233]"
  }, {
    "left" : "return _parseEscapedName(_quadLength, currQuad, currQuadBytes);",
    "right" : "return _parseEscapedName(_quadLength, currQuad, currQuadBytes);",
    "info" : "ReturnStatement[87218-87281]:ReturnStatement[87252-87315]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[87293-87300]:Modifier[87327-87334]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[87301-87304]:PrimitiveType[87335-87338]"
  }, {
    "left" : "_decodeSplitEscaped",
    "right" : "_decodeSplitEscaped",
    "info" : "SimpleName[87305-87324]:SimpleName[87339-87358]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[87325-87334]:SingleVariableDeclaration[87359-87368]"
  }, {
    "left" : "int bytesRead",
    "right" : "int bytesRead",
    "info" : "SingleVariableDeclaration[87336-87349]:SingleVariableDeclaration[87370-87383]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[87358-87369]:SimpleType[87392-87403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87374-89309]:Block[87408-89343]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[87384-87516]:IfStatement[87418-87550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87412-87516]:Block[87446-87550]"
  }, {
    "left" : "_quoted32 = value;",
    "right" : "_quoted32 = value;",
    "info" : "ExpressionStatement[87426-87444]:ExpressionStatement[87460-87478]"
  }, {
    "left" : "_quotedDigits = bytesRead;",
    "right" : "_quotedDigits = bytesRead;",
    "info" : "ExpressionStatement[87457-87483]:ExpressionStatement[87491-87517]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[87496-87506]:ReturnStatement[87530-87540]"
  }, {
    "left" : "int c = _inputBuffer[_inputPtr++];",
    "right" : "int c = _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[87525-87559]:VariableDeclarationStatement[87559-87593]"
  }, {
    "left" : "if (bytesRead == -1)",
    "right" : "if (bytesRead == -1)",
    "info" : "IfStatement[87568-88731]:IfStatement[87602-88765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87589-88731]:Block[87623-88765]"
  }, {
    "left" : "switch (c) {\n                // First, ones that are mapped\n            case 'b':\n                return '\\b';\n            case 't':\n                return '\\t';\n            case 'n':\n                return '\\n';\n            case 'f':\n                return '\\f';\n            case 'r':\n                return '\\r';\n    \n                // And these are to be returned as they are\n            case '\"':\n            case '/':\n            case '\\\\':\n                return c;\n    \n            case 'u': // and finally hex-escaped\n                break;\n    \n            default:\n                {\n                 // !!! TODO: Decode UTF-8 characters properly...\n    //              char ch = (char) _decodeCharForError(c);\n                    char ch = (char) c;\n                    return _handleUnrecognizedCharacterEscape(ch);\n                }\n            }",
    "right" : "switch (c) {\n                // First, ones that are mapped\n            case 'b':\n                return '\\b';\n            case 't':\n                return '\\t';\n            case 'n':\n                return '\\n';\n            case 'f':\n                return '\\f';\n            case 'r':\n                return '\\r';\n    \n                // And these are to be returned as they are\n            case '\"':\n            case '/':\n            case '\\\\':\n                return c;\n    \n            case 'u': // and finally hex-escaped\n                break;\n    \n            default:\n                {\n                 // !!! TODO: Decode UTF-8 characters properly...\n    //              char ch = (char) _decodeCharForError(c);\n                    char ch = (char) c;\n                    return _handleUnrecognizedCharacterEscape(ch);\n                }\n            }",
    "info" : "SwitchStatement[87643-88502]:SwitchStatement[87677-88536]"
  }, {
    "left" : "case 'b':",
    "right" : "case 'b':",
    "info" : "SwitchCase[87715-87724]:SwitchCase[87749-87758]"
  }, {
    "left" : "return '\\b';",
    "right" : "return '\\b';",
    "info" : "ReturnStatement[87741-87753]:ReturnStatement[87775-87787]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[87766-87775]:SwitchCase[87800-87809]"
  }, {
    "left" : "return '\\t';",
    "right" : "return '\\t';",
    "info" : "ReturnStatement[87792-87804]:ReturnStatement[87826-87838]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[87817-87826]:SwitchCase[87851-87860]"
  }, {
    "left" : "return '\\n';",
    "right" : "return '\\n';",
    "info" : "ReturnStatement[87843-87855]:ReturnStatement[87877-87889]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[87868-87877]:SwitchCase[87902-87911]"
  }, {
    "left" : "return '\\f';",
    "right" : "return '\\f';",
    "info" : "ReturnStatement[87894-87906]:ReturnStatement[87928-87940]"
  }, {
    "left" : "case 'r':",
    "right" : "case 'r':",
    "info" : "SwitchCase[87919-87928]:SwitchCase[87953-87962]"
  }, {
    "left" : "return '\\r';",
    "right" : "return '\\r';",
    "info" : "ReturnStatement[87945-87957]:ReturnStatement[87979-87991]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[88035-88044]:SwitchCase[88069-88078]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[88057-88066]:SwitchCase[88091-88100]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[88079-88089]:SwitchCase[88113-88123]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[88106-88115]:ReturnStatement[88140-88149]"
  }, {
    "left" : "case 'u':",
    "right" : "case 'u':",
    "info" : "SwitchCase[88133-88142]:SwitchCase[88167-88176]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[88186-88192]:BreakStatement[88220-88226]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[88210-88218]:SwitchCase[88244-88252]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88235-88488]:Block[88269-88522]"
  }, {
    "left" : "char ch = (char) c;",
    "right" : "char ch = (char) c;",
    "info" : "VariableDeclarationStatement[88384-88403]:VariableDeclarationStatement[88418-88437]"
  }, {
    "left" : "return _handleUnrecognizedCharacterEscape(ch);",
    "right" : "return _handleUnrecognizedCharacterEscape(ch);",
    "info" : "ReturnStatement[88424-88470]:ReturnStatement[88458-88504]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[88515-88651]:IfStatement[88549-88685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88543-88651]:Block[88577-88685]"
  }, {
    "left" : "_quotedDigits = 0;",
    "right" : "_quotedDigits = 0;",
    "info" : "ExpressionStatement[88561-88579]:ExpressionStatement[88595-88613]"
  }, {
    "left" : "_quoted32 = 0;",
    "right" : "_quoted32 = 0;",
    "info" : "ExpressionStatement[88596-88610]:ExpressionStatement[88630-88644]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[88627-88637]:ReturnStatement[88661-88671]"
  }, {
    "left" : "c = _inputBuffer[_inputPtr++];",
    "right" : "c = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[88664-88694]:ExpressionStatement[88698-88728]"
  }, {
    "left" : "bytesRead = 0;",
    "right" : "bytesRead = 0;",
    "info" : "ExpressionStatement[88707-88721]:ExpressionStatement[88741-88755]"
  }, {
    "left" : "c &= 0xFF;",
    "right" : "c &= 0xFF;",
    "info" : "ExpressionStatement[88740-88750]:ExpressionStatement[88774-88784]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[88759-89303]:WhileStatement[88793-89337]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88772-89303]:Block[88806-89337]"
  }, {
    "left" : "int digit = CharTypes.charToHex(c);",
    "right" : "int digit = CharTypes.charToHex(c);",
    "info" : "VariableDeclarationStatement[88786-88821]:VariableDeclarationStatement[88820-88855]"
  }, {
    "left" : "if (digit < 0)",
    "right" : "if (digit < 0)",
    "info" : "IfStatement[88834-88960]:IfStatement[88868-88994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88849-88960]:Block[88883-88994]"
  }, {
    "left" : "_reportUnexpectedChar(c, \"expected a hex-digit for character escape sequence\");",
    "right" : "_reportUnexpectedChar(c, \"expected a hex-digit for character escape sequence\");",
    "info" : "ExpressionStatement[88867-88946]:ExpressionStatement[88901-88980]"
  }, {
    "left" : "value = (value << 4) | digit;",
    "right" : "value = (value << 4) | digit;",
    "info" : "ExpressionStatement[88973-89002]:ExpressionStatement[89007-89036]"
  }, {
    "left" : "if (++bytesRead == 4)",
    "right" : "if (++bytesRead == 4)",
    "info" : "IfStatement[89015-89082]:IfStatement[89049-89116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89037-89082]:Block[89071-89116]"
  }, {
    "left" : "return value;",
    "right" : "return value;",
    "info" : "ReturnStatement[89055-89068]:ReturnStatement[89089-89102]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[89095-89243]:IfStatement[89129-89277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89123-89243]:Block[89157-89277]"
  }, {
    "left" : "_quotedDigits = bytesRead;",
    "right" : "_quotedDigits = bytesRead;",
    "info" : "ExpressionStatement[89141-89167]:ExpressionStatement[89175-89201]"
  }, {
    "left" : "_quoted32 = value;",
    "right" : "_quoted32 = value;",
    "info" : "ExpressionStatement[89184-89202]:ExpressionStatement[89218-89236]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[89219-89229]:ReturnStatement[89253-89263]"
  }, {
    "left" : "c = _inputBuffer[_inputPtr++] & 0xFF;",
    "right" : "c = _inputBuffer[_inputPtr++] & 0xFF;",
    "info" : "ExpressionStatement[89256-89293]:ExpressionStatement[89290-89327]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[89529-89538]:Modifier[89563-89572]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[89539-89548]:SimpleType[89573-89582]"
  }, {
    "left" : "_startString",
    "right" : "_startString",
    "info" : "SimpleName[89549-89561]:SimpleName[89583-89595]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[89571-89582]:SimpleType[89605-89616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89587-90416]:Block[89621-90450]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[89597-89617]:VariableDeclarationStatement[89631-89651]"
  }, {
    "left" : "int outPtr = 0;",
    "right" : "int outPtr = 0;",
    "info" : "VariableDeclarationStatement[89626-89641]:VariableDeclarationStatement[89660-89675]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[89650-89706]:VariableDeclarationStatement[89684-89740]"
  }, {
    "left" : "final int[] codes = _icUTF8;",
    "right" : "final int[] codes = _icUTF8;",
    "info" : "VariableDeclarationStatement[89715-89743]:VariableDeclarationStatement[89749-89777]"
  }, {
    "left" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
    "right" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
    "info" : "VariableDeclarationStatement[89753-89812]:VariableDeclarationStatement[89787-89846]"
  }, {
    "left" : "final byte[] inputBuffer = _inputBuffer;",
    "right" : "final byte[] inputBuffer = _inputBuffer;",
    "info" : "VariableDeclarationStatement[89821-89861]:VariableDeclarationStatement[89855-89895]"
  }, {
    "left" : "while (ptr < max)",
    "right" : "while (ptr < max)",
    "info" : "WhileStatement[89870-90300]:WhileStatement[89904-90334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89888-90300]:Block[89922-90334]"
  }, {
    "left" : "int c = (int) inputBuffer[ptr] & 0xFF;",
    "right" : "int c = (int) inputBuffer[ptr] & 0xFF;",
    "info" : "VariableDeclarationStatement[89902-89940]:VariableDeclarationStatement[89936-89974]"
  }, {
    "left" : "if (codes[c] != 0)",
    "right" : "if (codes[c] != 0)",
    "info" : "IfStatement[89953-90230]:IfStatement[89987-90264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89972-90230]:Block[90006-90264]"
  }, {
    "left" : "if (c == INT_QUOTE)",
    "right" : "if (c == INT_QUOTE)",
    "info" : "IfStatement[89990-90193]:IfStatement[90024-90227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90010-90193]:Block[90044-90227]"
  }, {
    "left" : "_inputPtr = ptr+1;",
    "right" : "_inputPtr = ptr+1;",
    "info" : "ExpressionStatement[90032-90050]:ExpressionStatement[90066-90084]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[90071-90108]:ExpressionStatement[90105-90142]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_STRING);",
    "right" : "return _valueComplete(JsonToken.VALUE_STRING);",
    "info" : "ReturnStatement[90129-90175]:ReturnStatement[90163-90209]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[90210-90216]:BreakStatement[90244-90250]"
  }, {
    "left" : "++ptr;",
    "right" : "++ptr;",
    "info" : "ExpressionStatement[90243-90249]:ExpressionStatement[90277-90283]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[90262-90290]:ExpressionStatement[90296-90324]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[90309-90346]:ExpressionStatement[90343-90380]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[90355-90371]:ExpressionStatement[90389-90405]"
  }, {
    "left" : "return _finishRegularString();",
    "right" : "return _finishRegularString();",
    "info" : "ReturnStatement[90380-90410]:ReturnStatement[90414-90444]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[90422-90429]:Modifier[90456-90463]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[90430-90435]:Modifier[90464-90469]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[90436-90445]:SimpleType[90470-90479]"
  }, {
    "left" : "_finishRegularString",
    "right" : "_finishRegularString",
    "info" : "SimpleName[90446-90466]:SimpleName[90480-90500]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[90476-90487]:SimpleType[90510-90521]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90492-94419]:Block[90526-94453]"
  }, {
    "left" : "int c;",
    "right" : "int c;",
    "info" : "VariableDeclarationStatement[90502-90508]:VariableDeclarationStatement[90536-90542]"
  }, {
    "left" : "final int[] codes = _icUTF8;",
    "right" : "final int[] codes = _icUTF8;",
    "info" : "VariableDeclarationStatement[90573-90601]:VariableDeclarationStatement[90607-90635]"
  }, {
    "left" : "final byte[] inputBuffer = _inputBuffer;",
    "right" : "final byte[] inputBuffer = _inputBuffer;",
    "info" : "VariableDeclarationStatement[90610-90650]:VariableDeclarationStatement[90644-90684]"
  }, {
    "left" : "char[] outBuf = _textBuffer.getBufferWithoutReset();",
    "right" : "char[] outBuf = _textBuffer.getBufferWithoutReset();",
    "info" : "VariableDeclarationStatement[90660-90712]:VariableDeclarationStatement[90694-90746]"
  }, {
    "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "info" : "VariableDeclarationStatement[90721-90770]:VariableDeclarationStatement[90755-90804]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[90779-90799]:VariableDeclarationStatement[90813-90833]"
  }, {
    "left" : "final int safeEnd = _inputEnd - 5;",
    "right" : "final int safeEnd = _inputEnd - 5;",
    "info" : "VariableDeclarationStatement[90808-90842]:VariableDeclarationStatement[90842-90876]"
  }, {
    "left" : "main_loop:\n        while (true) {\n            // Then the tight ASCII non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                if (ptr >= _inputEnd) {\n                    _inputPtr = ptr;\n                    _minorState = MINOR_VALUE_STRING;\n                    _textBuffer.setCurrentLength(outPtr);\n                    return (_currToken = JsonToken.NOT_AVAILABLE);\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                _inputPtr = ptr;\n                _textBuffer.setCurrentLength(outPtr);\n                return _valueComplete(JsonToken.VALUE_STRING);\n            }\n            // If possibly split, use off-lined longer version\n            if (ptr >= safeEnd) {\n                _inputPtr = ptr;\n                _textBuffer.setCurrentLength(outPtr);\n                if (!_decodeSplitMultiByte(c, codes[c], ptr < _inputEnd)) {\n                    _minorStateAfterSplit = MINOR_VALUE_STRING;\n                    return (_currToken = JsonToken.NOT_AVAILABLE);\n                }\n                outBuf = _textBuffer.getBufferWithoutReset();\n                outPtr = _textBuffer.getCurrentSegmentSize();\n                ptr = _inputPtr;\n                continue main_loop;\n            }\n            // otherwise use inlined\n            switch (codes[c]) {\n            case 1: // backslash\n                _inputPtr = ptr;\n                c = _decodeFastCharEscape(); // since we know it's not split\n                ptr = _inputPtr;\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUTF8_2(c, _inputBuffer[ptr++]);\n                break;\n            case 3: // 3-byte UTF\n                c = _decodeUTF8_3(c, _inputBuffer[ptr++], _inputBuffer[ptr++]);\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUTF8_4(c, _inputBuffer[ptr++], _inputBuffer[ptr++],\n                        _inputBuffer[ptr++]);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // Note: call can now actually return (to allow unquoted linefeeds)\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
    "right" : "main_loop:\n        while (true) {\n            // Then the tight ASCII non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                if (ptr >= _inputEnd) {\n                    _inputPtr = ptr;\n                    _minorState = MINOR_VALUE_STRING;\n                    _textBuffer.setCurrentLength(outPtr);\n                    return (_currToken = JsonToken.NOT_AVAILABLE);\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                _inputPtr = ptr;\n                _textBuffer.setCurrentLength(outPtr);\n                return _valueComplete(JsonToken.VALUE_STRING);\n            }\n            // If possibly split, use off-lined longer version\n            if (ptr >= safeEnd) {\n                _inputPtr = ptr;\n                _textBuffer.setCurrentLength(outPtr);\n                if (!_decodeSplitMultiByte(c, codes[c], ptr < _inputEnd)) {\n                    _minorStateAfterSplit = MINOR_VALUE_STRING;\n                    return (_currToken = JsonToken.NOT_AVAILABLE);\n                }\n                outBuf = _textBuffer.getBufferWithoutReset();\n                outPtr = _textBuffer.getCurrentSegmentSize();\n                ptr = _inputPtr;\n                continue main_loop;\n            }\n            // otherwise use inlined\n            switch (codes[c]) {\n            case 1: // backslash\n                _inputPtr = ptr;\n                c = _decodeFastCharEscape(); // since we know it's not split\n                ptr = _inputPtr;\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUTF8_2(c, _inputBuffer[ptr++]);\n                break;\n            case 3: // 3-byte UTF\n                c = _decodeUTF8_3(c, _inputBuffer[ptr++], _inputBuffer[ptr++]);\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUTF8_4(c, _inputBuffer[ptr++], _inputBuffer[ptr++],\n                        _inputBuffer[ptr++]);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // Note: call can now actually return (to allow unquoted linefeeds)\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
    "info" : "LabeledStatement[90889-94413]:LabeledStatement[90923-94447]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[90908-94413]:WhileStatement[90942-94447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90921-94413]:Block[90955-94447]"
  }, {
    "left" : "ascii_loop:\n            while (true) {\n                if (ptr >= _inputEnd) {\n                    _inputPtr = ptr;\n                    _minorState = MINOR_VALUE_STRING;\n                    _textBuffer.setCurrentLength(outPtr);\n                    return (_currToken = JsonToken.NOT_AVAILABLE);\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
    "right" : "ascii_loop:\n            while (true) {\n                if (ptr >= _inputEnd) {\n                    _inputPtr = ptr;\n                    _minorState = MINOR_VALUE_STRING;\n                    _textBuffer.setCurrentLength(outPtr);\n                    return (_currToken = JsonToken.NOT_AVAILABLE);\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
    "info" : "LabeledStatement[90992-91826]:LabeledStatement[91026-91860]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[91016-91826]:WhileStatement[91050-91860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91029-91826]:Block[91063-91860]"
  }, {
    "left" : "if (ptr >= _inputEnd)",
    "right" : "if (ptr >= _inputEnd)",
    "info" : "IfStatement[91047-91304]:IfStatement[91081-91338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91069-91304]:Block[91103-91338]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[91091-91107]:ExpressionStatement[91125-91141]"
  }, {
    "left" : "_minorState = MINOR_VALUE_STRING;",
    "right" : "_minorState = MINOR_VALUE_STRING;",
    "info" : "ExpressionStatement[91128-91161]:ExpressionStatement[91162-91195]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[91182-91219]:ExpressionStatement[91216-91253]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[91240-91286]:ReturnStatement[91274-91320]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[91321-91466]:IfStatement[91355-91500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91350-91466]:Block[91384-91500]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[91372-91416]:ExpressionStatement[91406-91450]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[91437-91448]:ExpressionStatement[91471-91482]"
  }, {
    "left" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
    "right" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
    "info" : "VariableDeclarationStatement[91483-91553]:VariableDeclarationStatement[91517-91587]"
  }, {
    "left" : "while (ptr < max)",
    "right" : "while (ptr < max)",
    "info" : "WhileStatement[91570-91812]:WhileStatement[91604-91846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91588-91812]:Block[91622-91846]"
  }, {
    "left" : "c = inputBuffer[ptr++] & 0xFF;",
    "right" : "c = inputBuffer[ptr++] & 0xFF;",
    "info" : "ExpressionStatement[91610-91640]:ExpressionStatement[91644-91674]"
  }, {
    "left" : "if (codes[c] != 0)",
    "right" : "if (codes[c] != 0)",
    "info" : "IfStatement[91661-91745]:IfStatement[91695-91779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91680-91745]:Block[91714-91779]"
  }, {
    "left" : "break ascii_loop;",
    "right" : "break ascii_loop;",
    "info" : "BreakStatement[91706-91723]:BreakStatement[91740-91757]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[91766-91794]:ExpressionStatement[91800-91828]"
  }, {
    "left" : "if (c == INT_QUOTE)",
    "right" : "if (c == INT_QUOTE)",
    "info" : "IfStatement[91892-92077]:IfStatement[91926-92111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91912-92077]:Block[91946-92111]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[91930-91946]:ExpressionStatement[91964-91980]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[91963-92000]:ExpressionStatement[91997-92034]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_STRING);",
    "right" : "return _valueComplete(JsonToken.VALUE_STRING);",
    "info" : "ReturnStatement[92017-92063]:ReturnStatement[92051-92097]"
  }, {
    "left" : "if (ptr >= safeEnd)",
    "right" : "if (ptr >= safeEnd)",
    "info" : "IfStatement[92153-92693]:IfStatement[92187-92727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92173-92693]:Block[92207-92727]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[92191-92207]:ExpressionStatement[92225-92241]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[92224-92261]:ExpressionStatement[92258-92295]"
  }, {
    "left" : "if (!_decodeSplitMultiByte(c, codes[c], ptr < _inputEnd))",
    "right" : "if (!_decodeSplitMultiByte(c, codes[c], ptr < _inputEnd))",
    "info" : "IfStatement[92278-92486]:IfStatement[92312-92520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92336-92486]:Block[92370-92520]"
  }, {
    "left" : "_minorStateAfterSplit = MINOR_VALUE_STRING;",
    "right" : "_minorStateAfterSplit = MINOR_VALUE_STRING;",
    "info" : "ExpressionStatement[92358-92401]:ExpressionStatement[92392-92435]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[92422-92468]:ReturnStatement[92456-92502]"
  }, {
    "left" : "outBuf = _textBuffer.getBufferWithoutReset();",
    "right" : "outBuf = _textBuffer.getBufferWithoutReset();",
    "info" : "ExpressionStatement[92503-92548]:ExpressionStatement[92537-92582]"
  }, {
    "left" : "outPtr = _textBuffer.getCurrentSegmentSize();",
    "right" : "outPtr = _textBuffer.getCurrentSegmentSize();",
    "info" : "ExpressionStatement[92565-92610]:ExpressionStatement[92599-92644]"
  }, {
    "left" : "ptr = _inputPtr;",
    "right" : "ptr = _inputPtr;",
    "info" : "ExpressionStatement[92627-92643]:ExpressionStatement[92661-92677]"
  }, {
    "left" : "continue main_loop;",
    "right" : "continue main_loop;",
    "info" : "ContinueStatement[92660-92679]:ContinueStatement[92694-92713]"
  }, {
    "left" : "switch (codes[c]) {\n            case 1: // backslash\n                _inputPtr = ptr;\n                c = _decodeFastCharEscape(); // since we know it's not split\n                ptr = _inputPtr;\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUTF8_2(c, _inputBuffer[ptr++]);\n                break;\n            case 3: // 3-byte UTF\n                c = _decodeUTF8_3(c, _inputBuffer[ptr++], _inputBuffer[ptr++]);\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUTF8_4(c, _inputBuffer[ptr++], _inputBuffer[ptr++],\n                        _inputBuffer[ptr++]);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // Note: call can now actually return (to allow unquoted linefeeds)\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
    "right" : "switch (codes[c]) {\n            case 1: // backslash\n                _inputPtr = ptr;\n                c = _decodeFastCharEscape(); // since we know it's not split\n                ptr = _inputPtr;\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUTF8_2(c, _inputBuffer[ptr++]);\n                break;\n            case 3: // 3-byte UTF\n                c = _decodeUTF8_3(c, _inputBuffer[ptr++], _inputBuffer[ptr++]);\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUTF8_4(c, _inputBuffer[ptr++], _inputBuffer[ptr++],\n                        _inputBuffer[ptr++]);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // Note: call can now actually return (to allow unquoted linefeeds)\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
    "info" : "SwitchStatement[92743-94140]:SwitchStatement[92777-94174]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[92775-92782]:SwitchCase[92809-92816]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[92812-92828]:ExpressionStatement[92846-92862]"
  }, {
    "left" : "c = _decodeFastCharEscape();",
    "right" : "c = _decodeFastCharEscape();",
    "info" : "ExpressionStatement[92845-92873]:ExpressionStatement[92879-92907]"
  }, {
    "left" : "ptr = _inputPtr;",
    "right" : "ptr = _inputPtr;",
    "info" : "ExpressionStatement[92922-92938]:ExpressionStatement[92956-92972]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[92955-92961]:BreakStatement[92989-92995]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[92974-92981]:SwitchCase[93008-93015]"
  }, {
    "left" : "c = _decodeUTF8_2(c, _inputBuffer[ptr++]);",
    "right" : "c = _decodeUTF8_2(c, _inputBuffer[ptr++]);",
    "info" : "ExpressionStatement[93012-93054]:ExpressionStatement[93046-93088]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[93071-93077]:BreakStatement[93105-93111]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[93090-93097]:SwitchCase[93124-93131]"
  }, {
    "left" : "c = _decodeUTF8_3(c, _inputBuffer[ptr++], _inputBuffer[ptr++]);",
    "right" : "c = _decodeUTF8_3(c, _inputBuffer[ptr++], _inputBuffer[ptr++]);",
    "info" : "ExpressionStatement[93128-93191]:ExpressionStatement[93162-93225]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[93208-93214]:BreakStatement[93242-93248]"
  }, {
    "left" : "case 4:",
    "right" : "case 4:",
    "info" : "SwitchCase[93227-93234]:SwitchCase[93261-93268]"
  }, {
    "left" : "c = _decodeUTF8_4(c, _inputBuffer[ptr++], _inputBuffer[ptr++],\n                        _inputBuffer[ptr++]);",
    "right" : "c = _decodeUTF8_4(c, _inputBuffer[ptr++], _inputBuffer[ptr++],\n                        _inputBuffer[ptr++]);",
    "info" : "ExpressionStatement[93265-93373]:ExpressionStatement[93299-93407]"
  }, {
    "left" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
    "right" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
    "info" : "ExpressionStatement[93442-93489]:ExpressionStatement[93476-93523]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[93506-93651]:IfStatement[93540-93685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93535-93651]:Block[93569-93685]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[93557-93601]:ExpressionStatement[93591-93635]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[93622-93633]:ExpressionStatement[93656-93667]"
  }, {
    "left" : "c = 0xDC00 | (c & 0x3FF);",
    "right" : "c = 0xDC00 | (c & 0x3FF);",
    "info" : "ExpressionStatement[93668-93693]:ExpressionStatement[93702-93727]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[93770-93776]:BreakStatement[93804-93810]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[93789-93797]:SwitchCase[93823-93831]"
  }, {
    "left" : "if (c < INT_SPACE)",
    "right" : "if (c < INT_SPACE)",
    "info" : "IfStatement[93814-94126]:IfStatement[93848-94160]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93833-94000]:Block[93867-94034]"
  }, {
    "left" : "_throwUnquotedSpace(c, \"string value\");",
    "right" : "_throwUnquotedSpace(c, \"string value\");",
    "info" : "ExpressionStatement[93943-93982]:ExpressionStatement[93977-94016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[94006-94126]:Block[94040-94160]"
  }, {
    "left" : "_reportInvalidChar(c);",
    "right" : "_reportInvalidChar(c);",
    "info" : "ExpressionStatement[94086-94108]:ExpressionStatement[94120-94142]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[94184-94317]:IfStatement[94218-94351]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[94213-94317]:Block[94247-94351]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[94231-94275]:ExpressionStatement[94265-94309]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[94292-94303]:ExpressionStatement[94326-94337]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[94375-94403]:ExpressionStatement[94409-94437]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[94425-94434]:Modifier[94459-94468]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[94435-94444]:SimpleType[94469-94478]"
  }, {
    "left" : "_startAposString",
    "right" : "_startAposString",
    "info" : "SimpleName[94445-94461]:SimpleName[94479-94495]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[94471-94482]:SimpleType[94505-94516]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[94487-95293]:Block[94521-95327]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[94497-94517]:VariableDeclarationStatement[94531-94551]"
  }, {
    "left" : "int outPtr = 0;",
    "right" : "int outPtr = 0;",
    "info" : "VariableDeclarationStatement[94526-94541]:VariableDeclarationStatement[94560-94575]"
  }, {
    "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
    "info" : "VariableDeclarationStatement[94550-94606]:VariableDeclarationStatement[94584-94640]"
  }, {
    "left" : "final int[] codes = _icUTF8;",
    "right" : "final int[] codes = _icUTF8;",
    "info" : "VariableDeclarationStatement[94615-94643]:VariableDeclarationStatement[94649-94677]"
  }, {
    "left" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
    "right" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
    "info" : "VariableDeclarationStatement[94653-94712]:VariableDeclarationStatement[94687-94746]"
  }, {
    "left" : "final byte[] inputBuffer = _inputBuffer;",
    "right" : "final byte[] inputBuffer = _inputBuffer;",
    "info" : "VariableDeclarationStatement[94721-94761]:VariableDeclarationStatement[94755-94795]"
  }, {
    "left" : "while (ptr < max)",
    "right" : "while (ptr < max)",
    "info" : "WhileStatement[94770-95180]:WhileStatement[94804-95214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[94788-95180]:Block[94822-95214]"
  }, {
    "left" : "int c = (int) inputBuffer[ptr] & 0xFF;",
    "right" : "int c = (int) inputBuffer[ptr] & 0xFF;",
    "info" : "VariableDeclarationStatement[94802-94840]:VariableDeclarationStatement[94836-94874]"
  }, {
    "left" : "if (c == INT_APOS)",
    "right" : "if (c == INT_APOS)",
    "info" : "IfStatement[94853-95039]:IfStatement[94887-95073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[94872-95039]:Block[94906-95073]"
  }, {
    "left" : "_inputPtr = ptr+1;",
    "right" : "_inputPtr = ptr+1;",
    "info" : "ExpressionStatement[94890-94908]:ExpressionStatement[94924-94942]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[94925-94962]:ExpressionStatement[94959-94996]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_STRING);",
    "right" : "return _valueComplete(JsonToken.VALUE_STRING);",
    "info" : "ReturnStatement[94979-95025]:ReturnStatement[95013-95059]"
  }, {
    "left" : "if (codes[c] != 0)",
    "right" : "if (codes[c] != 0)",
    "info" : "IfStatement[95053-95110]:IfStatement[95087-95144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95072-95110]:Block[95106-95144]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[95090-95096]:BreakStatement[95124-95130]"
  }, {
    "left" : "++ptr;",
    "right" : "++ptr;",
    "info" : "ExpressionStatement[95123-95129]:ExpressionStatement[95157-95163]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[95142-95170]:ExpressionStatement[95176-95204]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[95189-95226]:ExpressionStatement[95223-95260]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[95235-95251]:ExpressionStatement[95269-95285]"
  }, {
    "left" : "return _finishAposString();",
    "right" : "return _finishAposString();",
    "info" : "ReturnStatement[95260-95287]:ReturnStatement[95294-95321]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[95299-95306]:Modifier[95333-95340]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[95307-95312]:Modifier[95341-95346]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[95313-95322]:SimpleType[95347-95356]"
  }, {
    "left" : "_finishAposString",
    "right" : "_finishAposString",
    "info" : "SimpleName[95323-95340]:SimpleName[95357-95374]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[95350-95361]:SimpleType[95384-95395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95366-99235]:Block[95400-99269]"
  }, {
    "left" : "int c;",
    "right" : "int c;",
    "info" : "VariableDeclarationStatement[95376-95382]:VariableDeclarationStatement[95410-95416]"
  }, {
    "left" : "final int[] codes = _icUTF8;",
    "right" : "final int[] codes = _icUTF8;",
    "info" : "VariableDeclarationStatement[95391-95419]:VariableDeclarationStatement[95425-95453]"
  }, {
    "left" : "final byte[] inputBuffer = _inputBuffer;",
    "right" : "final byte[] inputBuffer = _inputBuffer;",
    "info" : "VariableDeclarationStatement[95428-95468]:VariableDeclarationStatement[95462-95502]"
  }, {
    "left" : "char[] outBuf = _textBuffer.getBufferWithoutReset();",
    "right" : "char[] outBuf = _textBuffer.getBufferWithoutReset();",
    "info" : "VariableDeclarationStatement[95478-95530]:VariableDeclarationStatement[95512-95564]"
  }, {
    "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
    "info" : "VariableDeclarationStatement[95539-95588]:VariableDeclarationStatement[95573-95622]"
  }, {
    "left" : "int ptr = _inputPtr;",
    "right" : "int ptr = _inputPtr;",
    "info" : "VariableDeclarationStatement[95597-95617]:VariableDeclarationStatement[95631-95651]"
  }, {
    "left" : "final int safeEnd = _inputEnd - 5;",
    "right" : "final int safeEnd = _inputEnd - 5;",
    "info" : "VariableDeclarationStatement[95626-95660]:VariableDeclarationStatement[95660-95694]"
  }, {
    "left" : "main_loop:\n        while (true) {\n            ascii_loop:\n            while (true) {\n                if (ptr >= _inputEnd) {\n                    _inputPtr = ptr;\n                    _minorState = MINOR_VALUE_APOS_STRING;\n                    _textBuffer.setCurrentLength(outPtr);\n                    return (_currToken = JsonToken.NOT_AVAILABLE);\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = inputBuffer[ptr++] & 0xFF;\n                    if ((codes[c] != 0) && (c != INT_QUOTE)) {\n                        break ascii_loop;\n                    }\n                    if (c == INT_APOS) {\n                        _inputPtr = ptr;\n                        _textBuffer.setCurrentLength(outPtr);\n                        return _valueComplete(JsonToken.VALUE_STRING);\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n            // Escape or multi-byte?\n            // If possibly split, use off-lined longer version\n            if (ptr >= safeEnd) {\n                _inputPtr = ptr;\n                _textBuffer.setCurrentLength(outPtr);\n                if (!_decodeSplitMultiByte(c, codes[c], ptr < _inputEnd)) {\n                    _minorStateAfterSplit = MINOR_VALUE_APOS_STRING;\n                    return (_currToken = JsonToken.NOT_AVAILABLE);\n                }\n                outBuf = _textBuffer.getBufferWithoutReset();\n                outPtr = _textBuffer.getCurrentSegmentSize();\n                ptr = _inputPtr;\n                continue main_loop;\n            }\n            // otherwise use inlined\n            switch (codes[c]) {\n            case 1: // backslash\n                _inputPtr = ptr;\n                c = _decodeFastCharEscape(); // since we know it's not split\n                ptr = _inputPtr;\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUTF8_2(c, _inputBuffer[ptr++]);\n                break;\n            case 3: // 3-byte UTF\n                c = _decodeUTF8_3(c, _inputBuffer[ptr++], _inputBuffer[ptr++]);\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUTF8_4(c, _inputBuffer[ptr++], _inputBuffer[ptr++],\n                        _inputBuffer[ptr++]);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // Note: call can now actually return (to allow unquoted linefeeds)\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
    "right" : "main_loop:\n        while (true) {\n            ascii_loop:\n            while (true) {\n                if (ptr >= _inputEnd) {\n                    _inputPtr = ptr;\n                    _minorState = MINOR_VALUE_APOS_STRING;\n                    _textBuffer.setCurrentLength(outPtr);\n                    return (_currToken = JsonToken.NOT_AVAILABLE);\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = inputBuffer[ptr++] & 0xFF;\n                    if ((codes[c] != 0) && (c != INT_QUOTE)) {\n                        break ascii_loop;\n                    }\n                    if (c == INT_APOS) {\n                        _inputPtr = ptr;\n                        _textBuffer.setCurrentLength(outPtr);\n                        return _valueComplete(JsonToken.VALUE_STRING);\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n            // Escape or multi-byte?\n            // If possibly split, use off-lined longer version\n            if (ptr >= safeEnd) {\n                _inputPtr = ptr;\n                _textBuffer.setCurrentLength(outPtr);\n                if (!_decodeSplitMultiByte(c, codes[c], ptr < _inputEnd)) {\n                    _minorStateAfterSplit = MINOR_VALUE_APOS_STRING;\n                    return (_currToken = JsonToken.NOT_AVAILABLE);\n                }\n                outBuf = _textBuffer.getBufferWithoutReset();\n                outPtr = _textBuffer.getCurrentSegmentSize();\n                ptr = _inputPtr;\n                continue main_loop;\n            }\n            // otherwise use inlined\n            switch (codes[c]) {\n            case 1: // backslash\n                _inputPtr = ptr;\n                c = _decodeFastCharEscape(); // since we know it's not split\n                ptr = _inputPtr;\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUTF8_2(c, _inputBuffer[ptr++]);\n                break;\n            case 3: // 3-byte UTF\n                c = _decodeUTF8_3(c, _inputBuffer[ptr++], _inputBuffer[ptr++]);\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUTF8_4(c, _inputBuffer[ptr++], _inputBuffer[ptr++],\n                        _inputBuffer[ptr++]);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // Note: call can now actually return (to allow unquoted linefeeds)\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
    "info" : "LabeledStatement[95707-99229]:LabeledStatement[95741-99263]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[95726-99229]:WhileStatement[95760-99263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95739-99229]:Block[95773-99263]"
  }, {
    "left" : "ascii_loop:\n            while (true) {\n                if (ptr >= _inputEnd) {\n                    _inputPtr = ptr;\n                    _minorState = MINOR_VALUE_APOS_STRING;\n                    _textBuffer.setCurrentLength(outPtr);\n                    return (_currToken = JsonToken.NOT_AVAILABLE);\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = inputBuffer[ptr++] & 0xFF;\n                    if ((codes[c] != 0) && (c != INT_QUOTE)) {\n                        break ascii_loop;\n                    }\n                    if (c == INT_APOS) {\n                        _inputPtr = ptr;\n                        _textBuffer.setCurrentLength(outPtr);\n                        return _valueComplete(JsonToken.VALUE_STRING);\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
    "right" : "ascii_loop:\n            while (true) {\n                if (ptr >= _inputEnd) {\n                    _inputPtr = ptr;\n                    _minorState = MINOR_VALUE_APOS_STRING;\n                    _textBuffer.setCurrentLength(outPtr);\n                    return (_currToken = JsonToken.NOT_AVAILABLE);\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = inputBuffer[ptr++] & 0xFF;\n                    if ((codes[c] != 0) && (c != INT_QUOTE)) {\n                        break ascii_loop;\n                    }\n                    if (c == INT_APOS) {\n                        _inputPtr = ptr;\n                        _textBuffer.setCurrentLength(outPtr);\n                        return _valueComplete(JsonToken.VALUE_STRING);\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
    "info" : "LabeledStatement[95753-96851]:LabeledStatement[95787-96885]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[95777-96851]:WhileStatement[95811-96885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95790-96851]:Block[95824-96885]"
  }, {
    "left" : "if (ptr >= _inputEnd)",
    "right" : "if (ptr >= _inputEnd)",
    "info" : "IfStatement[95808-96070]:IfStatement[95842-96104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95830-96070]:Block[95864-96104]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[95852-95868]:ExpressionStatement[95886-95902]"
  }, {
    "left" : "_minorState = MINOR_VALUE_APOS_STRING;",
    "right" : "_minorState = MINOR_VALUE_APOS_STRING;",
    "info" : "ExpressionStatement[95889-95927]:ExpressionStatement[95923-95961]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[95948-95985]:ExpressionStatement[95982-96019]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[96006-96052]:ReturnStatement[96040-96086]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[96087-96232]:IfStatement[96121-96266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96116-96232]:Block[96150-96266]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[96138-96182]:ExpressionStatement[96172-96216]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[96203-96214]:ExpressionStatement[96237-96248]"
  }, {
    "left" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
    "right" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
    "info" : "VariableDeclarationStatement[96249-96319]:VariableDeclarationStatement[96283-96353]"
  }, {
    "left" : "while (ptr < max)",
    "right" : "while (ptr < max)",
    "info" : "WhileStatement[96336-96837]:WhileStatement[96370-96871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96354-96837]:Block[96388-96871]"
  }, {
    "left" : "c = inputBuffer[ptr++] & 0xFF;",
    "right" : "c = inputBuffer[ptr++] & 0xFF;",
    "info" : "ExpressionStatement[96376-96406]:ExpressionStatement[96410-96440]"
  }, {
    "left" : "if ((codes[c] != 0) && (c != INT_QUOTE))",
    "right" : "if ((codes[c] != 0) && (c != INT_QUOTE))",
    "info" : "IfStatement[96427-96533]:IfStatement[96461-96567]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96468-96533]:Block[96502-96567]"
  }, {
    "left" : "break ascii_loop;",
    "right" : "break ascii_loop;",
    "info" : "BreakStatement[96494-96511]:BreakStatement[96528-96545]"
  }, {
    "left" : "if (c == INT_APOS)",
    "right" : "if (c == INT_APOS)",
    "info" : "IfStatement[96554-96770]:IfStatement[96588-96804]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96573-96770]:Block[96607-96804]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[96599-96615]:ExpressionStatement[96633-96649]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[96640-96677]:ExpressionStatement[96674-96711]"
  }, {
    "left" : "return _valueComplete(JsonToken.VALUE_STRING);",
    "right" : "return _valueComplete(JsonToken.VALUE_STRING);",
    "info" : "ReturnStatement[96702-96748]:ReturnStatement[96736-96782]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[96791-96819]:ExpressionStatement[96825-96853]"
  }, {
    "left" : "if (ptr >= safeEnd)",
    "right" : "if (ptr >= safeEnd)",
    "info" : "IfStatement[96964-97509]:IfStatement[96998-97543]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96984-97509]:Block[97018-97543]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[97002-97018]:ExpressionStatement[97036-97052]"
  }, {
    "left" : "_textBuffer.setCurrentLength(outPtr);",
    "right" : "_textBuffer.setCurrentLength(outPtr);",
    "info" : "ExpressionStatement[97035-97072]:ExpressionStatement[97069-97106]"
  }, {
    "left" : "if (!_decodeSplitMultiByte(c, codes[c], ptr < _inputEnd))",
    "right" : "if (!_decodeSplitMultiByte(c, codes[c], ptr < _inputEnd))",
    "info" : "IfStatement[97089-97302]:IfStatement[97123-97336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97147-97302]:Block[97181-97336]"
  }, {
    "left" : "_minorStateAfterSplit = MINOR_VALUE_APOS_STRING;",
    "right" : "_minorStateAfterSplit = MINOR_VALUE_APOS_STRING;",
    "info" : "ExpressionStatement[97169-97217]:ExpressionStatement[97203-97251]"
  }, {
    "left" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "right" : "return (_currToken = JsonToken.NOT_AVAILABLE);",
    "info" : "ReturnStatement[97238-97284]:ReturnStatement[97272-97318]"
  }, {
    "left" : "outBuf = _textBuffer.getBufferWithoutReset();",
    "right" : "outBuf = _textBuffer.getBufferWithoutReset();",
    "info" : "ExpressionStatement[97319-97364]:ExpressionStatement[97353-97398]"
  }, {
    "left" : "outPtr = _textBuffer.getCurrentSegmentSize();",
    "right" : "outPtr = _textBuffer.getCurrentSegmentSize();",
    "info" : "ExpressionStatement[97381-97426]:ExpressionStatement[97415-97460]"
  }, {
    "left" : "ptr = _inputPtr;",
    "right" : "ptr = _inputPtr;",
    "info" : "ExpressionStatement[97443-97459]:ExpressionStatement[97477-97493]"
  }, {
    "left" : "continue main_loop;",
    "right" : "continue main_loop;",
    "info" : "ContinueStatement[97476-97495]:ContinueStatement[97510-97529]"
  }, {
    "left" : "switch (codes[c]) {\n            case 1: // backslash\n                _inputPtr = ptr;\n                c = _decodeFastCharEscape(); // since we know it's not split\n                ptr = _inputPtr;\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUTF8_2(c, _inputBuffer[ptr++]);\n                break;\n            case 3: // 3-byte UTF\n                c = _decodeUTF8_3(c, _inputBuffer[ptr++], _inputBuffer[ptr++]);\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUTF8_4(c, _inputBuffer[ptr++], _inputBuffer[ptr++],\n                        _inputBuffer[ptr++]);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // Note: call can now actually return (to allow unquoted linefeeds)\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
    "right" : "switch (codes[c]) {\n            case 1: // backslash\n                _inputPtr = ptr;\n                c = _decodeFastCharEscape(); // since we know it's not split\n                ptr = _inputPtr;\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUTF8_2(c, _inputBuffer[ptr++]);\n                break;\n            case 3: // 3-byte UTF\n                c = _decodeUTF8_3(c, _inputBuffer[ptr++], _inputBuffer[ptr++]);\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUTF8_4(c, _inputBuffer[ptr++], _inputBuffer[ptr++],\n                        _inputBuffer[ptr++]);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // Note: call can now actually return (to allow unquoted linefeeds)\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
    "info" : "SwitchStatement[97559-98956]:SwitchStatement[97593-98990]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[97591-97598]:SwitchCase[97625-97632]"
  }, {
    "left" : "_inputPtr = ptr;",
    "right" : "_inputPtr = ptr;",
    "info" : "ExpressionStatement[97628-97644]:ExpressionStatement[97662-97678]"
  }, {
    "left" : "c = _decodeFastCharEscape();",
    "right" : "c = _decodeFastCharEscape();",
    "info" : "ExpressionStatement[97661-97689]:ExpressionStatement[97695-97723]"
  }, {
    "left" : "ptr = _inputPtr;",
    "right" : "ptr = _inputPtr;",
    "info" : "ExpressionStatement[97738-97754]:ExpressionStatement[97772-97788]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[97771-97777]:BreakStatement[97805-97811]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[97790-97797]:SwitchCase[97824-97831]"
  }, {
    "left" : "c = _decodeUTF8_2(c, _inputBuffer[ptr++]);",
    "right" : "c = _decodeUTF8_2(c, _inputBuffer[ptr++]);",
    "info" : "ExpressionStatement[97828-97870]:ExpressionStatement[97862-97904]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[97887-97893]:BreakStatement[97921-97927]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[97906-97913]:SwitchCase[97940-97947]"
  }, {
    "left" : "c = _decodeUTF8_3(c, _inputBuffer[ptr++], _inputBuffer[ptr++]);",
    "right" : "c = _decodeUTF8_3(c, _inputBuffer[ptr++], _inputBuffer[ptr++]);",
    "info" : "ExpressionStatement[97944-98007]:ExpressionStatement[97978-98041]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[98024-98030]:BreakStatement[98058-98064]"
  }, {
    "left" : "case 4:",
    "right" : "case 4:",
    "info" : "SwitchCase[98043-98050]:SwitchCase[98077-98084]"
  }, {
    "left" : "c = _decodeUTF8_4(c, _inputBuffer[ptr++], _inputBuffer[ptr++],\n                        _inputBuffer[ptr++]);",
    "right" : "c = _decodeUTF8_4(c, _inputBuffer[ptr++], _inputBuffer[ptr++],\n                        _inputBuffer[ptr++]);",
    "info" : "ExpressionStatement[98081-98189]:ExpressionStatement[98115-98223]"
  }, {
    "left" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
    "right" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
    "info" : "ExpressionStatement[98258-98305]:ExpressionStatement[98292-98339]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[98322-98467]:IfStatement[98356-98501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98351-98467]:Block[98385-98501]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[98373-98417]:ExpressionStatement[98407-98451]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[98438-98449]:ExpressionStatement[98472-98483]"
  }, {
    "left" : "c = 0xDC00 | (c & 0x3FF);",
    "right" : "c = 0xDC00 | (c & 0x3FF);",
    "info" : "ExpressionStatement[98484-98509]:ExpressionStatement[98518-98543]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[98586-98592]:BreakStatement[98620-98626]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[98605-98613]:SwitchCase[98639-98647]"
  }, {
    "left" : "if (c < INT_SPACE)",
    "right" : "if (c < INT_SPACE)",
    "info" : "IfStatement[98630-98942]:IfStatement[98664-98976]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98649-98816]:Block[98683-98850]"
  }, {
    "left" : "_throwUnquotedSpace(c, \"string value\");",
    "right" : "_throwUnquotedSpace(c, \"string value\");",
    "info" : "ExpressionStatement[98759-98798]:ExpressionStatement[98793-98832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98822-98942]:Block[98856-98976]"
  }, {
    "left" : "_reportInvalidChar(c);",
    "right" : "_reportInvalidChar(c);",
    "info" : "ExpressionStatement[98902-98924]:ExpressionStatement[98936-98958]"
  }, {
    "left" : "if (outPtr >= outBuf.length)",
    "right" : "if (outPtr >= outBuf.length)",
    "info" : "IfStatement[99000-99133]:IfStatement[99034-99167]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99029-99133]:Block[99063-99167]"
  }, {
    "left" : "outBuf = _textBuffer.finishCurrentSegment();",
    "right" : "outBuf = _textBuffer.finishCurrentSegment();",
    "info" : "ExpressionStatement[99047-99091]:ExpressionStatement[99081-99125]"
  }, {
    "left" : "outPtr = 0;",
    "right" : "outPtr = 0;",
    "info" : "ExpressionStatement[99108-99119]:ExpressionStatement[99142-99153]"
  }, {
    "left" : "outBuf[outPtr++] = (char) c;",
    "right" : "outBuf[outPtr++] = (char) c;",
    "info" : "ExpressionStatement[99191-99219]:ExpressionStatement[99225-99253]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[99245-99252]:Modifier[99279-99286]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[99253-99258]:Modifier[99287-99292]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[99259-99266]:PrimitiveType[99293-99300]"
  }, {
    "left" : "_decodeSplitMultiByte",
    "right" : "_decodeSplitMultiByte",
    "info" : "SimpleName[99267-99288]:SimpleName[99301-99322]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[99289-99294]:SingleVariableDeclaration[99323-99328]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[99296-99304]:SingleVariableDeclaration[99330-99338]"
  }, {
    "left" : "boolean gotNext",
    "right" : "boolean gotNext",
    "info" : "SingleVariableDeclaration[99306-99321]:SingleVariableDeclaration[99340-99355]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[99342-99353]:SimpleType[99376-99387]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99358-101071]:Block[99392-101105]"
  }, {
    "left" : "switch (type) {\n        case 1:\n            c = _decodeSplitEscaped(0, -1);\n            if (c < 0) {\n                _minorState = MINOR_VALUE_STRING_ESCAPE;\n                return false;\n            }\n            _textBuffer.append((char) c);\n            return true;\n        case 2: // 2-byte UTF; easy, either got both, or just miss one\n            if (gotNext) {\n                // NOTE: always succeeds, no need to check\n                c = _decodeUTF8_2(c, _inputBuffer[_inputPtr++]);\n                _textBuffer.append((char) c);\n                return true;\n            }\n            _minorState = MINOR_VALUE_STRING_UTF8_2;\n            _pending32 = c;\n            return false;\n        case 3: // 3-byte UTF\n            c &= 0x0F;\n            if (gotNext) {\n                return _decodeSplitUTF8_3(c, 1, _inputBuffer[_inputPtr++]);\n            }\n            _minorState = MINOR_VALUE_STRING_UTF8_3;\n            _pending32 = c;\n            _pendingBytes = 1;\n            return false;\n        case 4: // 4-byte UTF\n            c &= 0x07;\n            if (gotNext) {\n                return _decodeSplitUTF8_4(c, 1, _inputBuffer[_inputPtr++]);\n            }\n            _pending32 = c;\n            _pendingBytes = 1;\n            _minorState = MINOR_VALUE_STRING_UTF8_4;\n            return false;\n        default:\n            if (c < INT_SPACE) {\n                // Note: call can now actually return (to allow unquoted linefeeds)\n                _throwUnquotedSpace(c, \"string value\");\n            } else {\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }\n            _textBuffer.append((char) c);\n            return true;\n        }",
    "right" : "switch (type) {\n        case 1:\n            c = _decodeSplitEscaped(0, -1);\n            if (c < 0) {\n                _minorState = MINOR_VALUE_STRING_ESCAPE;\n                return false;\n            }\n            _textBuffer.append((char) c);\n            return true;\n        case 2: // 2-byte UTF; easy, either got both, or just miss one\n            if (gotNext) {\n                // NOTE: always succeeds, no need to check\n                c = _decodeUTF8_2(c, _inputBuffer[_inputPtr++]);\n                _textBuffer.append((char) c);\n                return true;\n            }\n            _minorState = MINOR_VALUE_STRING_UTF8_2;\n            _pending32 = c;\n            return false;\n        case 3: // 3-byte UTF\n            c &= 0x0F;\n            if (gotNext) {\n                return _decodeSplitUTF8_3(c, 1, _inputBuffer[_inputPtr++]);\n            }\n            _minorState = MINOR_VALUE_STRING_UTF8_3;\n            _pending32 = c;\n            _pendingBytes = 1;\n            return false;\n        case 4: // 4-byte UTF\n            c &= 0x07;\n            if (gotNext) {\n                return _decodeSplitUTF8_4(c, 1, _inputBuffer[_inputPtr++]);\n            }\n            _pending32 = c;\n            _pendingBytes = 1;\n            _minorState = MINOR_VALUE_STRING_UTF8_4;\n            return false;\n        default:\n            if (c < INT_SPACE) {\n                // Note: call can now actually return (to allow unquoted linefeeds)\n                _throwUnquotedSpace(c, \"string value\");\n            } else {\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }\n            _textBuffer.append((char) c);\n            return true;\n        }",
    "info" : "SwitchStatement[99368-101065]:SwitchStatement[99402-101099]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[99392-99399]:SwitchCase[99426-99433]"
  }, {
    "left" : "c = _decodeSplitEscaped(0, -1);",
    "right" : "c = _decodeSplitEscaped(0, -1);",
    "info" : "ExpressionStatement[99412-99443]:ExpressionStatement[99446-99477]"
  }, {
    "left" : "if (c < 0)",
    "right" : "if (c < 0)",
    "info" : "IfStatement[99456-99569]:IfStatement[99490-99603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99467-99569]:Block[99501-99603]"
  }, {
    "left" : "_minorState = MINOR_VALUE_STRING_ESCAPE;",
    "right" : "_minorState = MINOR_VALUE_STRING_ESCAPE;",
    "info" : "ExpressionStatement[99485-99525]:ExpressionStatement[99519-99559]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[99542-99555]:ReturnStatement[99576-99589]"
  }, {
    "left" : "_textBuffer.append((char) c);",
    "right" : "_textBuffer.append((char) c);",
    "info" : "ExpressionStatement[99582-99611]:ExpressionStatement[99616-99645]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[99624-99636]:ReturnStatement[99658-99670]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[99645-99652]:SwitchCase[99679-99686]"
  }, {
    "left" : "if (gotNext)",
    "right" : "if (gotNext)",
    "info" : "IfStatement[99720-99947]:IfStatement[99754-99981]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99733-99947]:Block[99767-99981]"
  }, {
    "left" : "c = _decodeUTF8_2(c, _inputBuffer[_inputPtr++]);",
    "right" : "c = _decodeUTF8_2(c, _inputBuffer[_inputPtr++]);",
    "info" : "ExpressionStatement[99810-99858]:ExpressionStatement[99844-99892]"
  }, {
    "left" : "_textBuffer.append((char) c);",
    "right" : "_textBuffer.append((char) c);",
    "info" : "ExpressionStatement[99875-99904]:ExpressionStatement[99909-99938]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[99921-99933]:ReturnStatement[99955-99967]"
  }, {
    "left" : "_minorState = MINOR_VALUE_STRING_UTF8_2;",
    "right" : "_minorState = MINOR_VALUE_STRING_UTF8_2;",
    "info" : "ExpressionStatement[99960-100000]:ExpressionStatement[99994-100034]"
  }, {
    "left" : "_pending32 = c;",
    "right" : "_pending32 = c;",
    "info" : "ExpressionStatement[100013-100028]:ExpressionStatement[100047-100062]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[100041-100054]:ReturnStatement[100075-100088]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[100063-100070]:SwitchCase[100097-100104]"
  }, {
    "left" : "c &= 0x0F;",
    "right" : "c &= 0x0F;",
    "info" : "ExpressionStatement[100097-100107]:ExpressionStatement[100131-100141]"
  }, {
    "left" : "if (gotNext)",
    "right" : "if (gotNext)",
    "info" : "IfStatement[100120-100224]:IfStatement[100154-100258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100133-100224]:Block[100167-100258]"
  }, {
    "left" : "return _decodeSplitUTF8_3(c, 1, _inputBuffer[_inputPtr++]);",
    "right" : "return _decodeSplitUTF8_3(c, 1, _inputBuffer[_inputPtr++]);",
    "info" : "ReturnStatement[100151-100210]:ReturnStatement[100185-100244]"
  }, {
    "left" : "_minorState = MINOR_VALUE_STRING_UTF8_3;",
    "right" : "_minorState = MINOR_VALUE_STRING_UTF8_3;",
    "info" : "ExpressionStatement[100237-100277]:ExpressionStatement[100271-100311]"
  }, {
    "left" : "_pending32 = c;",
    "right" : "_pending32 = c;",
    "info" : "ExpressionStatement[100290-100305]:ExpressionStatement[100324-100339]"
  }, {
    "left" : "_pendingBytes = 1;",
    "right" : "_pendingBytes = 1;",
    "info" : "ExpressionStatement[100318-100336]:ExpressionStatement[100352-100370]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[100349-100362]:ReturnStatement[100383-100396]"
  }, {
    "left" : "case 4:",
    "right" : "case 4:",
    "info" : "SwitchCase[100371-100378]:SwitchCase[100405-100412]"
  }, {
    "left" : "c &= 0x07;",
    "right" : "c &= 0x07;",
    "info" : "ExpressionStatement[100405-100415]:ExpressionStatement[100439-100449]"
  }, {
    "left" : "if (gotNext)",
    "right" : "if (gotNext)",
    "info" : "IfStatement[100428-100532]:IfStatement[100462-100566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100441-100532]:Block[100475-100566]"
  }, {
    "left" : "return _decodeSplitUTF8_4(c, 1, _inputBuffer[_inputPtr++]);",
    "right" : "return _decodeSplitUTF8_4(c, 1, _inputBuffer[_inputPtr++]);",
    "info" : "ReturnStatement[100459-100518]:ReturnStatement[100493-100552]"
  }, {
    "left" : "_pending32 = c;",
    "right" : "_pending32 = c;",
    "info" : "ExpressionStatement[100545-100560]:ExpressionStatement[100579-100594]"
  }, {
    "left" : "_pendingBytes = 1;",
    "right" : "_pendingBytes = 1;",
    "info" : "ExpressionStatement[100573-100591]:ExpressionStatement[100607-100625]"
  }, {
    "left" : "_minorState = MINOR_VALUE_STRING_UTF8_4;",
    "right" : "_minorState = MINOR_VALUE_STRING_UTF8_4;",
    "info" : "ExpressionStatement[100604-100644]:ExpressionStatement[100638-100678]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[100657-100670]:ReturnStatement[100691-100704]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[100679-100687]:SwitchCase[100713-100721]"
  }, {
    "left" : "if (c < INT_SPACE)",
    "right" : "if (c < INT_SPACE)",
    "info" : "IfStatement[100700-100988]:IfStatement[100734-101022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100719-100874]:Block[100753-100908]"
  }, {
    "left" : "_throwUnquotedSpace(c, \"string value\");",
    "right" : "_throwUnquotedSpace(c, \"string value\");",
    "info" : "ExpressionStatement[100821-100860]:ExpressionStatement[100855-100894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100880-100988]:Block[100914-101022]"
  }, {
    "left" : "_reportInvalidChar(c);",
    "right" : "_reportInvalidChar(c);",
    "info" : "ExpressionStatement[100952-100974]:ExpressionStatement[100986-101008]"
  }, {
    "left" : "_textBuffer.append((char) c);",
    "right" : "_textBuffer.append((char) c);",
    "info" : "ExpressionStatement[101001-101030]:ExpressionStatement[101035-101064]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[101043-101055]:ReturnStatement[101077-101089]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[101077-101084]:Modifier[101111-101118]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[101085-101090]:Modifier[101119-101124]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[101091-101098]:PrimitiveType[101125-101132]"
  }, {
    "left" : "_decodeSplitUTF8_3",
    "right" : "_decodeSplitUTF8_3",
    "info" : "SimpleName[101099-101117]:SimpleName[101133-101151]"
  }, {
    "left" : "int prev",
    "right" : "int prev",
    "info" : "SingleVariableDeclaration[101118-101126]:SingleVariableDeclaration[101152-101160]"
  }, {
    "left" : "int prevCount",
    "right" : "int prevCount",
    "info" : "SingleVariableDeclaration[101128-101141]:SingleVariableDeclaration[101162-101175]"
  }, {
    "left" : "int next",
    "right" : "int next",
    "info" : "SingleVariableDeclaration[101143-101151]:SingleVariableDeclaration[101177-101185]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[101168-101179]:SimpleType[101202-101213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101184-101847]:Block[101218-101881]"
  }, {
    "left" : "if (prevCount == 1)",
    "right" : "if (prevCount == 1)",
    "info" : "IfStatement[101194-101649]:IfStatement[101228-101683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101214-101649]:Block[101248-101683]"
  }, {
    "left" : "if ((next & 0xC0) != 0x080)",
    "right" : "if ((next & 0xC0) != 0x080)",
    "info" : "IfStatement[101228-101332]:IfStatement[101262-101366]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101256-101332]:Block[101290-101366]"
  }, {
    "left" : "_reportInvalidOther(next & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(next & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[101274-101318]:ExpressionStatement[101308-101352]"
  }, {
    "left" : "prev = (prev << 6) | (next & 0x3F);",
    "right" : "prev = (prev << 6) | (next & 0x3F);",
    "info" : "ExpressionStatement[101345-101380]:ExpressionStatement[101379-101414]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[101393-101593]:IfStatement[101427-101627]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101421-101593]:Block[101455-101627]"
  }, {
    "left" : "_minorState = MINOR_VALUE_STRING_UTF8_3;",
    "right" : "_minorState = MINOR_VALUE_STRING_UTF8_3;",
    "info" : "ExpressionStatement[101439-101479]:ExpressionStatement[101473-101513]"
  }, {
    "left" : "_pending32 = prev;",
    "right" : "_pending32 = prev;",
    "info" : "ExpressionStatement[101496-101514]:ExpressionStatement[101530-101548]"
  }, {
    "left" : "_pendingBytes = 2;",
    "right" : "_pendingBytes = 2;",
    "info" : "ExpressionStatement[101531-101549]:ExpressionStatement[101565-101583]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[101566-101579]:ReturnStatement[101600-101613]"
  }, {
    "left" : "next = _inputBuffer[_inputPtr++];",
    "right" : "next = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[101606-101639]:ExpressionStatement[101640-101673]"
  }, {
    "left" : "if ((next & 0xC0) != 0x080)",
    "right" : "if ((next & 0xC0) != 0x080)",
    "info" : "IfStatement[101658-101754]:IfStatement[101692-101788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101686-101754]:Block[101720-101788]"
  }, {
    "left" : "_reportInvalidOther(next & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(next & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[101700-101744]:ExpressionStatement[101734-101778]"
  }, {
    "left" : "_textBuffer.append((char) ((prev << 6) | (next & 0x3F)));",
    "right" : "_textBuffer.append((char) ((prev << 6) | (next & 0x3F)));",
    "info" : "ExpressionStatement[101763-101820]:ExpressionStatement[101797-101854]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[101829-101841]:ReturnStatement[101863-101875]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[101979-101986]:Modifier[102013-102020]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[101987-101992]:Modifier[102021-102026]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[101993-102000]:PrimitiveType[102027-102034]"
  }, {
    "left" : "_decodeSplitUTF8_4",
    "right" : "_decodeSplitUTF8_4",
    "info" : "SimpleName[102001-102019]:SimpleName[102035-102053]"
  }, {
    "left" : "int prev",
    "right" : "int prev",
    "info" : "SingleVariableDeclaration[102020-102028]:SingleVariableDeclaration[102054-102062]"
  }, {
    "left" : "int prevCount",
    "right" : "int prevCount",
    "info" : "SingleVariableDeclaration[102030-102043]:SingleVariableDeclaration[102064-102077]"
  }, {
    "left" : "int next",
    "right" : "int next",
    "info" : "SingleVariableDeclaration[102045-102053]:SingleVariableDeclaration[102079-102087]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[102070-102081]:SimpleType[102104-102115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102086-103456]:Block[102120-103490]"
  }, {
    "left" : "if (prevCount == 1)",
    "right" : "if (prevCount == 1)",
    "info" : "IfStatement[102096-102578]:IfStatement[102130-102612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102116-102578]:Block[102150-102612]"
  }, {
    "left" : "if ((next & 0xC0) != 0x080)",
    "right" : "if ((next & 0xC0) != 0x080)",
    "info" : "IfStatement[102130-102234]:IfStatement[102164-102268]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102158-102234]:Block[102192-102268]"
  }, {
    "left" : "_reportInvalidOther(next & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(next & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[102176-102220]:ExpressionStatement[102210-102254]"
  }, {
    "left" : "prev = (prev << 6) | (next & 0x3F);",
    "right" : "prev = (prev << 6) | (next & 0x3F);",
    "info" : "ExpressionStatement[102247-102282]:ExpressionStatement[102281-102316]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[102295-102495]:IfStatement[102329-102529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102323-102495]:Block[102357-102529]"
  }, {
    "left" : "_minorState = MINOR_VALUE_STRING_UTF8_4;",
    "right" : "_minorState = MINOR_VALUE_STRING_UTF8_4;",
    "info" : "ExpressionStatement[102341-102381]:ExpressionStatement[102375-102415]"
  }, {
    "left" : "_pending32 = prev;",
    "right" : "_pending32 = prev;",
    "info" : "ExpressionStatement[102398-102416]:ExpressionStatement[102432-102450]"
  }, {
    "left" : "_pendingBytes = 2;",
    "right" : "_pendingBytes = 2;",
    "info" : "ExpressionStatement[102433-102451]:ExpressionStatement[102467-102485]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[102468-102481]:ReturnStatement[102502-102515]"
  }, {
    "left" : "prevCount = 2;",
    "right" : "prevCount = 2;",
    "info" : "ExpressionStatement[102508-102522]:ExpressionStatement[102542-102556]"
  }, {
    "left" : "next = _inputBuffer[_inputPtr++];",
    "right" : "next = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[102535-102568]:ExpressionStatement[102569-102602]"
  }, {
    "left" : "if (prevCount == 2)",
    "right" : "if (prevCount == 2)",
    "info" : "IfStatement[102587-103042]:IfStatement[102621-103076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102607-103042]:Block[102641-103076]"
  }, {
    "left" : "if ((next & 0xC0) != 0x080)",
    "right" : "if ((next & 0xC0) != 0x080)",
    "info" : "IfStatement[102621-102725]:IfStatement[102655-102759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102649-102725]:Block[102683-102759]"
  }, {
    "left" : "_reportInvalidOther(next & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(next & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[102667-102711]:ExpressionStatement[102701-102745]"
  }, {
    "left" : "prev = (prev << 6) | (next & 0x3F);",
    "right" : "prev = (prev << 6) | (next & 0x3F);",
    "info" : "ExpressionStatement[102738-102773]:ExpressionStatement[102772-102807]"
  }, {
    "left" : "if (_inputPtr >= _inputEnd)",
    "right" : "if (_inputPtr >= _inputEnd)",
    "info" : "IfStatement[102786-102986]:IfStatement[102820-103020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102814-102986]:Block[102848-103020]"
  }, {
    "left" : "_minorState = MINOR_VALUE_STRING_UTF8_4;",
    "right" : "_minorState = MINOR_VALUE_STRING_UTF8_4;",
    "info" : "ExpressionStatement[102832-102872]:ExpressionStatement[102866-102906]"
  }, {
    "left" : "_pending32 = prev;",
    "right" : "_pending32 = prev;",
    "info" : "ExpressionStatement[102889-102907]:ExpressionStatement[102923-102941]"
  }, {
    "left" : "_pendingBytes = 3;",
    "right" : "_pendingBytes = 3;",
    "info" : "ExpressionStatement[102924-102942]:ExpressionStatement[102958-102976]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[102959-102972]:ReturnStatement[102993-103006]"
  }, {
    "left" : "next = _inputBuffer[_inputPtr++];",
    "right" : "next = _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[102999-103032]:ExpressionStatement[103033-103066]"
  }, {
    "left" : "if ((next & 0xC0) != 0x080)",
    "right" : "if ((next & 0xC0) != 0x080)",
    "info" : "IfStatement[103051-103147]:IfStatement[103085-103181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[103079-103147]:Block[103113-103181]"
  }, {
    "left" : "_reportInvalidOther(next & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(next & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[103093-103137]:ExpressionStatement[103127-103171]"
  }, {
    "left" : "int c = ((prev << 6) | (next & 0x3F)) - 0x10000;",
    "right" : "int c = ((prev << 6) | (next & 0x3F)) - 0x10000;",
    "info" : "VariableDeclarationStatement[103156-103204]:VariableDeclarationStatement[103190-103238]"
  }, {
    "left" : "_textBuffer.append((char) (0xD800 | (c >> 10)));",
    "right" : "_textBuffer.append((char) (0xD800 | (c >> 10)));",
    "info" : "ExpressionStatement[103257-103305]:ExpressionStatement[103291-103339]"
  }, {
    "left" : "c = 0xDC00 | (c & 0x3FF);",
    "right" : "c = 0xDC00 | (c & 0x3FF);",
    "info" : "ExpressionStatement[103314-103339]:ExpressionStatement[103348-103373]"
  }, {
    "left" : "_textBuffer.append((char) c);",
    "right" : "_textBuffer.append((char) c);",
    "info" : "ExpressionStatement[103400-103429]:ExpressionStatement[103434-103463]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[103438-103450]:ReturnStatement[103472-103484]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[103669-103676]:Modifier[103703-103710]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[103677-103682]:Modifier[103711-103716]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[103683-103686]:PrimitiveType[103717-103720]"
  }, {
    "left" : "_decodeCharEscape",
    "right" : "_decodeCharEscape",
    "info" : "SimpleName[103687-103704]:SimpleName[103721-103738]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[103714-103725]:SimpleType[103748-103759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[103730-103935]:Block[103764-103969]"
  }, {
    "left" : "int left = _inputEnd - _inputPtr;",
    "right" : "int left = _inputEnd - _inputPtr;",
    "info" : "VariableDeclarationStatement[103740-103773]:VariableDeclarationStatement[103774-103807]"
  }, {
    "left" : "if (left < 5)",
    "right" : "if (left < 5)",
    "info" : "IfStatement[103782-103889]:IfStatement[103816-103923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[103796-103889]:Block[103830-103923]"
  }, {
    "left" : "return _decodeSplitEscaped(0, -1);",
    "right" : "return _decodeSplitEscaped(0, -1);",
    "info" : "ReturnStatement[103845-103879]:ReturnStatement[103879-103913]"
  }, {
    "left" : "return _decodeFastCharEscape();",
    "right" : "return _decodeFastCharEscape();",
    "info" : "ReturnStatement[103898-103929]:ReturnStatement[103932-103963]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[103941-103948]:Modifier[103975-103982]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[103949-103954]:Modifier[103983-103988]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[103955-103958]:PrimitiveType[103989-103992]"
  }, {
    "left" : "_decodeFastCharEscape",
    "right" : "_decodeFastCharEscape",
    "info" : "SimpleName[103959-103980]:SimpleName[103993-104014]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[103990-104001]:SimpleType[104024-104035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104006-105716]:Block[104040-105750]"
  }, {
    "left" : "int c = (int) _inputBuffer[_inputPtr++];",
    "right" : "int c = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[104016-104056]:VariableDeclarationStatement[104050-104090]"
  }, {
    "left" : "switch (c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return (char) c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            {\n             // !!! TODO: Decode UTF-8 characters properly...\n//              char ch = (char) _decodeCharForError(c);\n                char ch = (char) c;\n                return _handleUnrecognizedCharacterEscape(ch);\n            }\n        }",
    "right" : "switch (c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return (char) c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            {\n             // !!! TODO: Decode UTF-8 characters properly...\n//              char ch = (char) _decodeCharForError(c);\n                char ch = (char) c;\n                return _handleUnrecognizedCharacterEscape(ch);\n            }\n        }",
    "info" : "SwitchStatement[104065-104815]:SwitchStatement[104099-104849]"
  }, {
    "left" : "case 'b':",
    "right" : "case 'b':",
    "info" : "SwitchCase[104129-104138]:SwitchCase[104163-104172]"
  }, {
    "left" : "return '\\b';",
    "right" : "return '\\b';",
    "info" : "ReturnStatement[104151-104163]:ReturnStatement[104185-104197]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[104172-104181]:SwitchCase[104206-104215]"
  }, {
    "left" : "return '\\t';",
    "right" : "return '\\t';",
    "info" : "ReturnStatement[104194-104206]:ReturnStatement[104228-104240]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[104215-104224]:SwitchCase[104249-104258]"
  }, {
    "left" : "return '\\n';",
    "right" : "return '\\n';",
    "info" : "ReturnStatement[104237-104249]:ReturnStatement[104271-104283]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[104258-104267]:SwitchCase[104292-104301]"
  }, {
    "left" : "return '\\f';",
    "right" : "return '\\f';",
    "info" : "ReturnStatement[104280-104292]:ReturnStatement[104314-104326]"
  }, {
    "left" : "case 'r':",
    "right" : "case 'r':",
    "info" : "SwitchCase[104301-104310]:SwitchCase[104335-104344]"
  }, {
    "left" : "return '\\r';",
    "right" : "return '\\r';",
    "info" : "ReturnStatement[104323-104335]:ReturnStatement[104357-104369]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[104401-104410]:SwitchCase[104435-104444]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[104419-104428]:SwitchCase[104453-104462]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[104437-104447]:SwitchCase[104471-104481]"
  }, {
    "left" : "return (char) c;",
    "right" : "return (char) c;",
    "info" : "ReturnStatement[104460-104476]:ReturnStatement[104494-104510]"
  }, {
    "left" : "case 'u':",
    "right" : "case 'u':",
    "info" : "SwitchCase[104486-104495]:SwitchCase[104520-104529]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[104535-104541]:BreakStatement[104569-104575]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[104551-104559]:SwitchCase[104585-104593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104572-104805]:Block[104606-104839]"
  }, {
    "left" : "char ch = (char) c;",
    "right" : "char ch = (char) c;",
    "info" : "VariableDeclarationStatement[104709-104728]:VariableDeclarationStatement[104743-104762]"
  }, {
    "left" : "return _handleUnrecognizedCharacterEscape(ch);",
    "right" : "return _handleUnrecognizedCharacterEscape(ch);",
    "info" : "ReturnStatement[104745-104791]:ReturnStatement[104779-104825]"
  }, {
    "left" : "int ch = (int) _inputBuffer[_inputPtr++];",
    "right" : "int ch = (int) _inputBuffer[_inputPtr++];",
    "info" : "VariableDeclarationStatement[104825-104866]:VariableDeclarationStatement[104859-104900]"
  }, {
    "left" : "int digit = CharTypes.charToHex(ch);",
    "right" : "int digit = CharTypes.charToHex(ch);",
    "info" : "VariableDeclarationStatement[104875-104911]:VariableDeclarationStatement[104909-104945]"
  }, {
    "left" : "int result = digit;",
    "right" : "int result = digit;",
    "info" : "VariableDeclarationStatement[104920-104939]:VariableDeclarationStatement[104954-104973]"
  }, {
    "left" : "if (digit >= 0)",
    "right" : "if (digit >= 0)",
    "info" : "IfStatement[104949-105595]:IfStatement[104983-105629]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104965-105595]:Block[104999-105629]"
  }, {
    "left" : "ch = (int) _inputBuffer[_inputPtr++];",
    "right" : "ch = (int) _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[104979-105016]:ExpressionStatement[105013-105050]"
  }, {
    "left" : "digit = CharTypes.charToHex(ch);",
    "right" : "digit = CharTypes.charToHex(ch);",
    "info" : "ExpressionStatement[105029-105061]:ExpressionStatement[105063-105095]"
  }, {
    "left" : "if (digit >= 0)",
    "right" : "if (digit >= 0)",
    "info" : "IfStatement[105074-105585]:IfStatement[105108-105619]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105090-105585]:Block[105124-105619]"
  }, {
    "left" : "result = (result << 4) | digit;",
    "right" : "result = (result << 4) | digit;",
    "info" : "ExpressionStatement[105108-105139]:ExpressionStatement[105142-105173]"
  }, {
    "left" : "ch = (int) _inputBuffer[_inputPtr++];",
    "right" : "ch = (int) _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[105156-105193]:ExpressionStatement[105190-105227]"
  }, {
    "left" : "digit = CharTypes.charToHex(ch);",
    "right" : "digit = CharTypes.charToHex(ch);",
    "info" : "ExpressionStatement[105210-105242]:ExpressionStatement[105244-105276]"
  }, {
    "left" : "if (digit >= 0)",
    "right" : "if (digit >= 0)",
    "info" : "IfStatement[105259-105571]:IfStatement[105293-105605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105275-105571]:Block[105309-105605]"
  }, {
    "left" : "result = (result << 4) | digit;",
    "right" : "result = (result << 4) | digit;",
    "info" : "ExpressionStatement[105297-105328]:ExpressionStatement[105331-105362]"
  }, {
    "left" : "ch = (int) _inputBuffer[_inputPtr++];",
    "right" : "ch = (int) _inputBuffer[_inputPtr++];",
    "info" : "ExpressionStatement[105349-105386]:ExpressionStatement[105383-105420]"
  }, {
    "left" : "digit = CharTypes.charToHex(ch);",
    "right" : "digit = CharTypes.charToHex(ch);",
    "info" : "ExpressionStatement[105407-105439]:ExpressionStatement[105441-105473]"
  }, {
    "left" : "if (digit >= 0)",
    "right" : "if (digit >= 0)",
    "info" : "IfStatement[105460-105553]:IfStatement[105494-105587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105476-105553]:Block[105510-105587]"
  }, {
    "left" : "return (result << 4) | digit;",
    "right" : "return (result << 4) | digit;",
    "info" : "ReturnStatement[105502-105531]:ReturnStatement[105536-105565]"
  }, {
    "left" : "_reportUnexpectedChar(ch & 0xFF, \"expected a hex-digit for character escape sequence\");",
    "right" : "_reportUnexpectedChar(ch & 0xFF, \"expected a hex-digit for character escape sequence\");",
    "info" : "ExpressionStatement[105604-105691]:ExpressionStatement[105638-105725]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[105700-105710]:ReturnStatement[105734-105744]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[105929-105936]:Modifier[105963-105970]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[105937-105942]:Modifier[105971-105976]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[105943-105946]:PrimitiveType[105977-105980]"
  }, {
    "left" : "_decodeUTF8_2",
    "right" : "_decodeUTF8_2",
    "info" : "SimpleName[105947-105960]:SimpleName[105981-105994]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[105961-105966]:SingleVariableDeclaration[105995-106000]"
  }, {
    "left" : "int d",
    "right" : "int d",
    "info" : "SingleVariableDeclaration[105968-105973]:SingleVariableDeclaration[106002-106007]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[105982-105993]:SimpleType[106016-106027]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105998-106151]:Block[106032-106185]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[106008-106098]:IfStatement[106042-106132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106033-106098]:Block[106067-106132]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[106047-106088]:ExpressionStatement[106081-106122]"
  }, {
    "left" : "return ((c & 0x1F) << 6) | (d & 0x3F);",
    "right" : "return ((c & 0x1F) << 6) | (d & 0x3F);",
    "info" : "ReturnStatement[106107-106145]:ReturnStatement[106141-106179]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[106157-106164]:Modifier[106191-106198]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[106165-106170]:Modifier[106199-106204]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[106171-106174]:PrimitiveType[106205-106208]"
  }, {
    "left" : "_decodeUTF8_3",
    "right" : "_decodeUTF8_3",
    "info" : "SimpleName[106175-106188]:SimpleName[106209-106222]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[106189-106194]:SingleVariableDeclaration[106223-106228]"
  }, {
    "left" : "int d",
    "right" : "int d",
    "info" : "SingleVariableDeclaration[106196-106201]:SingleVariableDeclaration[106230-106235]"
  }, {
    "left" : "int e",
    "right" : "int e",
    "info" : "SingleVariableDeclaration[106203-106208]:SingleVariableDeclaration[106237-106242]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[106217-106228]:SimpleType[106251-106262]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106233-106530]:Block[106267-106564]"
  }, {
    "left" : "c &= 0x0F;",
    "right" : "c &= 0x0F;",
    "info" : "ExpressionStatement[106243-106253]:ExpressionStatement[106277-106287]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[106262-106352]:IfStatement[106296-106386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106287-106352]:Block[106321-106386]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[106301-106342]:ExpressionStatement[106335-106376]"
  }, {
    "left" : "c = (c << 6) | (d & 0x3F);",
    "right" : "c = (c << 6) | (d & 0x3F);",
    "info" : "ExpressionStatement[106361-106387]:ExpressionStatement[106395-106421]"
  }, {
    "left" : "if ((e & 0xC0) != 0x080)",
    "right" : "if ((e & 0xC0) != 0x080)",
    "info" : "IfStatement[106396-106486]:IfStatement[106430-106520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106421-106486]:Block[106455-106520]"
  }, {
    "left" : "_reportInvalidOther(e & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(e & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[106435-106476]:ExpressionStatement[106469-106510]"
  }, {
    "left" : "return (c << 6) | (e & 0x3F);",
    "right" : "return (c << 6) | (e & 0x3F);",
    "info" : "ReturnStatement[106495-106524]:ReturnStatement[106529-106558]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[106662-106669]:Modifier[106696-106703]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[106670-106675]:Modifier[106704-106709]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[106676-106679]:PrimitiveType[106710-106713]"
  }, {
    "left" : "_decodeUTF8_4",
    "right" : "_decodeUTF8_4",
    "info" : "SimpleName[106680-106693]:SimpleName[106714-106727]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[106694-106699]:SingleVariableDeclaration[106728-106733]"
  }, {
    "left" : "int d",
    "right" : "int d",
    "info" : "SingleVariableDeclaration[106701-106706]:SingleVariableDeclaration[106735-106740]"
  }, {
    "left" : "int e",
    "right" : "int e",
    "info" : "SingleVariableDeclaration[106708-106713]:SingleVariableDeclaration[106742-106747]"
  }, {
    "left" : "int f",
    "right" : "int f",
    "info" : "SingleVariableDeclaration[106715-106720]:SingleVariableDeclaration[106749-106754]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[106729-106740]:SimpleType[106763-106774]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106745-107178]:Block[106779-107212]"
  }, {
    "left" : "if ((d & 0xC0) != 0x080)",
    "right" : "if ((d & 0xC0) != 0x080)",
    "info" : "IfStatement[106755-106845]:IfStatement[106789-106879]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106780-106845]:Block[106814-106879]"
  }, {
    "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[106794-106835]:ExpressionStatement[106828-106869]"
  }, {
    "left" : "c = ((c & 0x07) << 6) | (d & 0x3F);",
    "right" : "c = ((c & 0x07) << 6) | (d & 0x3F);",
    "info" : "ExpressionStatement[106854-106889]:ExpressionStatement[106888-106923]"
  }, {
    "left" : "if ((e & 0xC0) != 0x080)",
    "right" : "if ((e & 0xC0) != 0x080)",
    "info" : "IfStatement[106898-106988]:IfStatement[106932-107022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106923-106988]:Block[106957-107022]"
  }, {
    "left" : "_reportInvalidOther(e & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(e & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[106937-106978]:ExpressionStatement[106971-107012]"
  }, {
    "left" : "c = (c << 6) | (e & 0x3F);",
    "right" : "c = (c << 6) | (e & 0x3F);",
    "info" : "ExpressionStatement[106997-107023]:ExpressionStatement[107031-107057]"
  }, {
    "left" : "if ((f & 0xC0) != 0x080)",
    "right" : "if ((f & 0xC0) != 0x080)",
    "info" : "IfStatement[107032-107122]:IfStatement[107066-107156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[107057-107122]:Block[107091-107156]"
  }, {
    "left" : "_reportInvalidOther(f & 0xFF, _inputPtr);",
    "right" : "_reportInvalidOther(f & 0xFF, _inputPtr);",
    "info" : "ExpressionStatement[107071-107112]:ExpressionStatement[107105-107146]"
  }, {
    "left" : "return ((c << 6) | (f & 0x3F)) - 0x10000;",
    "right" : "return ((c << 6) | (f & 0x3F)) - 0x10000;",
    "info" : "ReturnStatement[107131-107172]:ReturnStatement[107165-107206]"
  } ]
}