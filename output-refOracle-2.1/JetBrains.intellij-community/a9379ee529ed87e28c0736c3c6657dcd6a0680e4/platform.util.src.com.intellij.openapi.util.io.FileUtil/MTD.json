{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "TypeDeclaration[1557-54009]:TypeDeclaration[1557-56181]"
    }, {
      "left" : "@NonNls public static final String ASYNC_DELETE_EXTENSION = \".__del__\";",
      "right" : "@NonNls public static final String ASYNC_DELETE_EXTENSION = \".__del__\";",
      "info" : "FieldDeclaration[1707-1778]:FieldDeclaration[1707-1778]"
    }, {
      "left" : "public static final int REGEX_PATTERN_FLAGS = SystemInfo.isFileSystemCaseSensitive ? 0 : Pattern.CASE_INSENSITIVE;",
      "right" : "public static final int REGEX_PATTERN_FLAGS = SystemInfo.isFileSystemCaseSensitive ? 0 : Pattern.CASE_INSENSITIVE;",
      "info" : "FieldDeclaration[1782-1896]:FieldDeclaration[1782-1896]"
    }, {
      "left" : "public static final TObjectHashingStrategy<String> PATH_HASHING_STRATEGY = FilePathHashingStrategy.create();",
      "right" : "public static final TObjectHashingStrategy<String> PATH_HASHING_STRATEGY = FilePathHashingStrategy.create();",
      "info" : "FieldDeclaration[1900-2008]:FieldDeclaration[1900-2008]"
    }, {
      "left" : "public static final TObjectHashingStrategy<File> FILE_HASHING_STRATEGY =\n    SystemInfo.isFileSystemCaseSensitive ? ContainerUtil.<File>canonicalStrategy() : new TObjectHashingStrategy<File>() {\n      @Override\n      public int computeHashCode(File object) {\n        return fileHashCode(object);\n      }\n\n      @Override\n      public boolean equals(File o1, File o2) {\n        return filesEqual(o1, o2);\n      }\n    };",
      "right" : "public static final TObjectHashingStrategy<File> FILE_HASHING_STRATEGY =\n    SystemInfo.isFileSystemCaseSensitive ? ContainerUtil.<File>canonicalStrategy() : new TObjectHashingStrategy<File>() {\n      @Override\n      public int computeHashCode(File object) {\n        return fileHashCode(object);\n      }\n\n      @Override\n      public boolean equals(File o1, File o2) {\n        return filesEqual(o1, o2);\n      }\n    };",
      "info" : "FieldDeclaration[2012-2430]:FieldDeclaration[2012-2430]"
    }, {
      "left" : "public int computeHashCode(File object)",
      "right" : "public int computeHashCode(File object)",
      "info" : "MethodDeclaration[2213-2315]:MethodDeclaration[2213-2315]"
    }, {
      "left" : "public boolean equals(File o1, File o2)",
      "right" : "public boolean equals(File o1, File o2)",
      "info" : "MethodDeclaration[2323-2423]:MethodDeclaration[2323-2423]"
    }, {
      "left" : "private static final Logger LOG = Logger.getInstance(\"#com.intellij.openapi.util.io.FileUtil\");",
      "right" : "private static final Logger LOG = Logger.getInstance(\"#com.intellij.openapi.util.io.FileUtil\");",
      "info" : "FieldDeclaration[2434-2529]:FieldDeclaration[2434-2529]"
    }, {
      "left" : "public static String join(@NotNull final String... parts)",
      "right" : "public static String join(@NotNull final String... parts)",
      "info" : "MethodDeclaration[2533-2658]:MethodDeclaration[2533-2658]"
    }, {
      "left" : "public static String getRelativePath(File base, File file)",
      "right" : "public static String getRelativePath(File base, File file)",
      "info" : "MethodDeclaration[2662-2789]:MethodDeclaration[2662-2789]"
    }, {
      "left" : "public static String getRelativePath(@NotNull String basePath, @NotNull String filePath, final char separator)",
      "right" : "public static String getRelativePath(@NotNull String basePath, @NotNull String filePath, final char separator)",
      "info" : "MethodDeclaration[2793-2991]:MethodDeclaration[2793-2991]"
    }, {
      "left" : "public static String getRelativePath(@NotNull String basePath,\n                                       @NotNull String filePath,\n                                       final char separator,\n                                       final boolean caseSensitive)",
      "right" : "public static String getRelativePath(@NotNull String basePath,\n                                       @NotNull String filePath,\n                                       final char separator,\n                                       final boolean caseSensitive)",
      "info" : "MethodDeclaration[2995-3354]:MethodDeclaration[2995-3354]"
    }, {
      "left" : "public static boolean isAbsolute(@NotNull String path)",
      "right" : "public static boolean isAbsolute(@NotNull String path)",
      "info" : "MethodDeclaration[3358-3458]:MethodDeclaration[3358-3458]"
    }, {
      "left" : "public static boolean isAncestor(@NotNull File ancestor, @NotNull File file, boolean strict)",
      "right" : "public static boolean isAncestor(@NotNull File ancestor, @NotNull File file, boolean strict)",
      "info" : "MethodDeclaration[3462-4011]:MethodDeclaration[3462-4011]"
    }, {
      "left" : "public static boolean isAncestor(@NotNull String ancestor, @NotNull String file, boolean strict)",
      "right" : "public static boolean isAncestor(@NotNull String ancestor, @NotNull String file, boolean strict)",
      "info" : "MethodDeclaration[4015-4197]:MethodDeclaration[4015-4197]"
    }, {
      "left" : "public static ThreeState isAncestorThreeState(@NotNull String ancestor, @NotNull String file, boolean strict)",
      "right" : "public static ThreeState isAncestorThreeState(@NotNull String ancestor, @NotNull String file, boolean strict)",
      "info" : "MethodDeclaration[4201-5183]:MethodDeclaration[4201-5183]"
    }, {
      "left" : "public static boolean startsWith(@NotNull String path, @NotNull String start)",
      "right" : "public static boolean startsWith(@NotNull String path, @NotNull String start)",
      "info" : "MethodDeclaration[5187-5381]:MethodDeclaration[5187-5381]"
    }, {
      "left" : "public static boolean startsWith(@NotNull String path, @NotNull String start, boolean caseSensitive)",
      "right" : "public static boolean startsWith(@NotNull String path, @NotNull String start, boolean caseSensitive)",
      "info" : "MethodDeclaration[5385-5579]:MethodDeclaration[5385-5579]"
    }, {
      "left" : "private static ThreeState startsWith(@NotNull String path, @NotNull String prefix, boolean strict, boolean caseSensitive,\n                                       boolean checkImmediateParent)",
      "right" : "private static ThreeState startsWith(@NotNull String path, @NotNull String prefix, boolean strict, boolean caseSensitive,\n                                       boolean checkImmediateParent)",
      "info" : "MethodDeclaration[5583-6969]:MethodDeclaration[5583-6969]"
    }, {
      "left" : "public static <T> Collection<T> removeAncestors(final Collection<T> files,\n                                                  final Convertor<T, String> convertor,\n                                                  final PairProcessor<T, T> removeProcessor)",
      "right" : "public static <T> Collection<T> removeAncestors(final Collection<T> files,\n                                                  final Convertor<T, String> convertor,\n                                                  final PairProcessor<T, T> removeProcessor)",
      "info" : "MethodDeclaration[6973-8430]:MethodDeclaration[6973-8430]"
    }, {
      "left" : "public static File getParentFile(@NotNull File file)",
      "right" : "public static File getParentFile(@NotNull File file)",
      "info" : "MethodDeclaration[8434-8547]:MethodDeclaration[8434-8547]"
    }, {
      "left" : "public static byte[] loadFileBytes(@NotNull File file) throws IOException",
      "right" : "public static byte[] loadFileBytes(@NotNull File file) throws IOException",
      "info" : "MethodDeclaration[8551-9155]:MethodDeclaration[8551-9155]"
    }, {
      "left" : "public static boolean processFirstBytes(@NotNull InputStream stream, int length, @NotNull Processor<ByteSequence> processor)\n    throws IOException",
      "right" : "public static boolean processFirstBytes(@NotNull InputStream stream, int length, @NotNull Processor<ByteSequence> processor)\n    throws IOException",
      "info" : "MethodDeclaration[9159-9605]:MethodDeclaration[9159-9605]"
    }, {
      "left" : "public static byte[] loadFirst(@NotNull InputStream stream, int maxLength) throws IOException",
      "right" : "public static byte[] loadFirst(@NotNull InputStream stream, int maxLength) throws IOException",
      "info" : "MethodDeclaration[9609-10061]:MethodDeclaration[9609-10061]"
    }, {
      "left" : "public static String loadTextAndClose(@NotNull InputStream stream) throws IOException",
      "right" : "public static String loadTextAndClose(@NotNull InputStream stream) throws IOException",
      "info" : "MethodDeclaration[10065-10281]:MethodDeclaration[10065-10281]"
    }, {
      "left" : "public static String loadTextAndClose(@NotNull Reader reader) throws IOException",
      "right" : "public static String loadTextAndClose(@NotNull Reader reader) throws IOException",
      "info" : "MethodDeclaration[10285-10507]:MethodDeclaration[10285-10507]"
    }, {
      "left" : "public static char[] adaptiveLoadText(@NotNull Reader reader) throws IOException",
      "right" : "public static char[] adaptiveLoadText(@NotNull Reader reader) throws IOException",
      "info" : "MethodDeclaration[10511-11554]:MethodDeclaration[10511-11554]"
    }, {
      "left" : "public static byte[] adaptiveLoadBytes(@NotNull InputStream stream) throws IOException",
      "right" : "public static byte[] adaptiveLoadBytes(@NotNull InputStream stream) throws IOException",
      "info" : "MethodDeclaration[11558-12607]:MethodDeclaration[11558-12607]"
    }, {
      "left" : "public static Future<Void> asyncDelete(@NotNull File file)",
      "right" : "public static Future<Void> asyncDelete(@NotNull File file)",
      "info" : "MethodDeclaration[12611-12739]:MethodDeclaration[12611-12739]"
    }, {
      "left" : "public static Future<Void> asyncDelete(@NotNull Collection<File> files)",
      "right" : "public static Future<Void> asyncDelete(@NotNull Collection<File> files)",
      "info" : "MethodDeclaration[12743-13207]:MethodDeclaration[12743-13207]"
    }, {
      "left" : "private static Future<Void> startDeletionThread(@NotNull final File... tempFiles)",
      "right" : "private static Future<Void> startDeletionThread(@NotNull final File... tempFiles)",
      "info" : "MethodDeclaration[13211-14446]:MethodDeclaration[13211-14446]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[13388-13791]:MethodDeclaration[13388-13791]"
    }, {
      "left" : "private static File renameToTempFileOrDelete(@NotNull File file)",
      "right" : "private static File renameToTempFileOrDelete(@NotNull File file)",
      "info" : "MethodDeclaration[14450-15169]:MethodDeclaration[14450-15169]"
    }, {
      "left" : "private static File getTempFile(@NotNull String originalFileName, @NotNull String parent)",
      "right" : "private static File getTempFile(@NotNull String originalFileName, @NotNull String parent)",
      "info" : "MethodDeclaration[15173-15555]:MethodDeclaration[15173-15555]"
    }, {
      "left" : "public static boolean delete(@NotNull File file)",
      "right" : "public static boolean delete(@NotNull File file)",
      "info" : "MethodDeclaration[15559-15731]:MethodDeclaration[15559-15731]"
    }, {
      "left" : "private static boolean deleteRecursively(@NotNull File file)",
      "right" : "private static boolean deleteRecursively(@NotNull File file)",
      "info" : "MethodDeclaration[15735-16184]:MethodDeclaration[15735-16184]"
    }, {
      "left" : "public static boolean createParentDirs(@NotNull File file)",
      "right" : "public static boolean createParentDirs(@NotNull File file)",
      "info" : "MethodDeclaration[16188-16298]:MethodDeclaration[16188-16298]"
    }, {
      "left" : "public static boolean createDirectory(@NotNull File path)",
      "right" : "public static boolean createDirectory(@NotNull File path)",
      "info" : "MethodDeclaration[16302-16410]:MethodDeclaration[16302-16410]"
    }, {
      "left" : "public static boolean createIfDoesntExist(@NotNull File file)",
      "right" : "public static boolean createIfDoesntExist(@NotNull File file)",
      "info" : "MethodDeclaration[16414-16528]:MethodDeclaration[16414-16528]"
    }, {
      "left" : "public static boolean ensureCanCreateFile(@NotNull File file)",
      "right" : "public static boolean ensureCanCreateFile(@NotNull File file)",
      "info" : "MethodDeclaration[16532-16648]:MethodDeclaration[16532-16648]"
    }, {
      "left" : "public static void copy(@NotNull File fromFile, @NotNull File toFile) throws IOException",
      "right" : "public static void copy(@NotNull File fromFile, @NotNull File toFile) throws IOException",
      "info" : "MethodDeclaration[16652-16787]:MethodDeclaration[16652-16787]"
    }, {
      "left" : "public static void copyContent(@NotNull File fromFile, @NotNull File toFile) throws IOException",
      "right" : "public static void copyContent(@NotNull File fromFile, @NotNull File toFile) throws IOException",
      "info" : "MethodDeclaration[16791-16934]:MethodDeclaration[16791-16934]"
    }, {
      "left" : "private static void performCopy(@NotNull File fromFile, @NotNull File toFile, final boolean syncTimestamp) throws IOException",
      "right" : "private static void performCopy(@NotNull File fromFile, @NotNull File toFile, final boolean syncTimestamp) throws IOException",
      "info" : "MethodDeclaration[16938-18102]:MethodDeclaration[16938-18102]"
    }, {
      "left" : "private static FileOutputStream openOutputStream(@NotNull final File file) throws IOException",
      "right" : "private static FileOutputStream openOutputStream(@NotNull final File file) throws IOException",
      "info" : "MethodDeclaration[18106-18548]:MethodDeclaration[18106-18548]"
    }, {
      "left" : "public static void copy(@NotNull InputStream inputStream, @NotNull OutputStream outputStream) throws IOException",
      "right" : "public static void copy(@NotNull InputStream inputStream, @NotNull OutputStream outputStream) throws IOException",
      "info" : "MethodDeclaration[18552-18718]:MethodDeclaration[18552-18718]"
    }, {
      "left" : "public static void copy(@NotNull InputStream inputStream, int maxSize, @NotNull OutputStream outputStream) throws IOException",
      "right" : "public static void copy(@NotNull InputStream inputStream, int maxSize, @NotNull OutputStream outputStream) throws IOException",
      "info" : "MethodDeclaration[18722-19121]:MethodDeclaration[18722-19121]"
    }, {
      "left" : "public static void copyDir(@NotNull File fromDir, @NotNull File toDir) throws IOException",
      "right" : "public static void copyDir(@NotNull File fromDir, @NotNull File toDir) throws IOException",
      "info" : "MethodDeclaration[19125-19255]:MethodDeclaration[19125-19255]"
    }, {
      "left" : "public static void copyDirContent(@NotNull File fromDir, @NotNull File toDir) throws IOException",
      "right" : "public static void copyDirContent(@NotNull File fromDir, @NotNull File toDir) throws IOException",
      "info" : "MethodDeclaration[19259-19938]:MethodDeclaration[19259-19938]"
    }, {
      "left" : "public static void copyDir(@NotNull File fromDir, @NotNull File toDir, boolean copySystemFiles) throws IOException",
      "right" : "public static void copyDir(@NotNull File fromDir, @NotNull File toDir, boolean copySystemFiles) throws IOException",
      "info" : "MethodDeclaration[19942-20271]:MethodDeclaration[19942-20271]"
    }, {
      "left" : "public boolean accept(File file)",
      "right" : "public boolean accept(File file)",
      "info" : "MethodDeclaration[20137-20259]:MethodDeclaration[20137-20259]"
    }, {
      "left" : "public static void copyDir(@NotNull File fromDir, @NotNull File toDir, @Nullable final FileFilter filter) throws IOException",
      "right" : "public static void copyDir(@NotNull File fromDir, @NotNull File toDir, @Nullable final FileFilter filter) throws IOException",
      "info" : "MethodDeclaration[20275-21179]:MethodDeclaration[20275-21179]"
    }, {
      "left" : "public static void ensureExists(@NotNull File dir) throws IOException",
      "right" : "public static void ensureExists(@NotNull File dir) throws IOException",
      "info" : "MethodDeclaration[21183-21410]:MethodDeclaration[21183-21410]"
    }, {
      "left" : "public static String getNameWithoutExtension(@NotNull File file)",
      "right" : "public static String getNameWithoutExtension(@NotNull File file)",
      "info" : "MethodDeclaration[21414-21547]:MethodDeclaration[21414-21547]"
    }, {
      "left" : "public static String getNameWithoutExtension(@NotNull String name)",
      "right" : "public static String getNameWithoutExtension(@NotNull String name)",
      "info" : "MethodDeclaration[21551-21687]:MethodDeclaration[21551-21687]"
    }, {
      "left" : "public static String createSequentFileName(@NotNull File aParentFolder, @NotNull @NonNls String aFilePrefix, @NotNull String aExtension)",
      "right" : "public static String createSequentFileName(@NotNull File aParentFolder, @NotNull @NonNls String aFilePrefix, @NotNull String aExtension)",
      "info" : "MethodDeclaration[21691-21922]:MethodDeclaration[21691-21922]"
    }, {
      "left" : "public static File findSequentNonexistentFile(@NotNull File parentFolder, @NotNull  String filePrefix, @NotNull String extension)",
      "right" : "public static File findSequentNonexistentFile(@NotNull File parentFolder, @NotNull  String filePrefix, @NotNull String extension)",
      "info" : "MethodDeclaration[21926-22372]:MethodDeclaration[21926-22372]"
    }, {
      "left" : "public static String toSystemDependentName(@NonNls @NotNull String aFileName)",
      "right" : "public static String toSystemDependentName(@NonNls @NotNull String aFileName)",
      "info" : "MethodDeclaration[22376-22526]:MethodDeclaration[22376-22526]"
    }, {
      "left" : "public static String toSystemIndependentName(@NonNls @NotNull String aFileName)",
      "right" : "public static String toSystemIndependentName(@NonNls @NotNull String aFileName)",
      "info" : "MethodDeclaration[22530-22684]:MethodDeclaration[22530-22684]"
    }, {
      "left" : "public static String nameToCompare(@NonNls @NotNull String name)",
      "right" : "public static String nameToCompare(@NonNls @NotNull String name)",
      "info" : "MethodDeclaration[22688-22867]:MethodDeclaration[22688-22867]"
    }, {
      "left" : "public static String toCanonicalPath(@Nullable String path)",
      "right" : "public static String toCanonicalPath(@Nullable String path, boolean resolveSymlinksIfNecessary)",
      "info" : "MethodDeclaration[22871-23373]:MethodDeclaration[23488-24210]"
    }, {
      "left" : "public static String toCanonicalPath(@Nullable String path, char separatorChar)",
      "right" : "public static String toCanonicalPath(@Nullable String path, char separatorChar)",
      "info" : "MethodDeclaration[23377-23548]:MethodDeclaration[24214-24385]"
    }, {
      "left" : "public static String toCanonicalUriPath(@Nullable String path)",
      "right" : "public static String toCanonicalUriPath(@Nullable String path)",
      "info" : "MethodDeclaration[23552-23694]:MethodDeclaration[24389-24531]"
    }, {
      "left" : "private static String toCanonicalPath(@Nullable String path, char separatorChar, boolean removeLastSlash)",
      "right" : "private static String toCanonicalPath(@Nullable String path,\n                                        final char separatorChar,\n                                        final boolean removeLastSlash,\n                                        final boolean resolveSymlinksIfNecessary)",
      "info" : "MethodDeclaration[23698-25105]:MethodDeclaration[24757-27041]"
    }, {
      "left" : "private static int processRoot(String path, StringBuilder result)",
      "right" : "private static int processRoot(String path, StringBuilder result)",
      "info" : "MethodDeclaration[25109-26315]:MethodDeclaration[27045-28251]"
    }, {
      "left" : "private static void processDots(StringBuilder result, int dots, int start)",
      "right" : "private static boolean processDots(@NotNull StringBuilder result, int dots, int start, boolean resolveSymlinksIfNecessary)",
      "info" : "MethodDeclaration[26319-27218]:MethodDeclaration[28255-29390]"
    }, {
      "left" : "public static String normalize(@NotNull String path)",
      "right" : "public static String normalize(@NotNull String path)",
      "info" : "MethodDeclaration[27222-28075]:MethodDeclaration[29394-30247]"
    }, {
      "left" : "private static String normalizeTail(int prefixEnd, @NotNull String path, boolean separator)",
      "right" : "private static String normalizeTail(int prefixEnd, @NotNull String path, boolean separator)",
      "info" : "MethodDeclaration[28079-28804]:MethodDeclaration[30251-30976]"
    }, {
      "left" : "public static String unquote(@NotNull String urlString)",
      "right" : "public static String unquote(@NotNull String urlString)",
      "info" : "MethodDeclaration[28808-28996]:MethodDeclaration[30980-31168]"
    }, {
      "left" : "public static boolean isFilePathAcceptable(@NotNull File root, @Nullable FileFilter fileFilter)",
      "right" : "public static boolean isFilePathAcceptable(@NotNull File root, @Nullable FileFilter fileFilter)",
      "info" : "MethodDeclaration[29000-29307]:MethodDeclaration[31172-31479]"
    }, {
      "left" : "public static void rename(@NotNull File source, @NotNull File target) throws IOException",
      "right" : "public static void rename(@NotNull File source, @NotNull File target) throws IOException",
      "info" : "MethodDeclaration[29311-29527]:MethodDeclaration[31483-31699]"
    }, {
      "left" : "public static boolean filesEqual(@Nullable File file1, @Nullable File file2)",
      "right" : "public static boolean filesEqual(@Nullable File file1, @Nullable File file2)",
      "info" : "MethodDeclaration[29531-29806]:MethodDeclaration[31703-31978]"
    }, {
      "left" : "public static boolean pathsEqual(@Nullable String path1, @Nullable String path2)",
      "right" : "public static boolean pathsEqual(@Nullable String path1, @Nullable String path2)",
      "info" : "MethodDeclaration[29810-30115]:MethodDeclaration[31982-32287]"
    }, {
      "left" : "public static boolean namesEqual(@Nullable String name1, @Nullable String name2)",
      "right" : "public static boolean namesEqual(@Nullable String name1, @Nullable String name2)",
      "info" : "MethodDeclaration[30119-30456]:MethodDeclaration[32291-32628]"
    }, {
      "left" : "public static int compareFiles(@Nullable File file1, @Nullable File file2)",
      "right" : "public static int compareFiles(@Nullable File file1, @Nullable File file2)",
      "info" : "MethodDeclaration[30460-30645]:MethodDeclaration[32632-32817]"
    }, {
      "left" : "public static int comparePaths(@Nullable String path1, @Nullable String path2)",
      "right" : "public static int comparePaths(@Nullable String path1, @Nullable String path2)",
      "info" : "MethodDeclaration[30649-30951]:MethodDeclaration[32821-33123]"
    }, {
      "left" : "public static int fileHashCode(@Nullable File file)",
      "right" : "public static int fileHashCode(@Nullable File file)",
      "info" : "MethodDeclaration[30955-31075]:MethodDeclaration[33127-33247]"
    }, {
      "left" : "public static int pathHashCode(@Nullable String path)",
      "right" : "public static int pathHashCode(@Nullable String path)",
      "info" : "MethodDeclaration[31079-31242]:MethodDeclaration[33251-33414]"
    }, {
      "left" : "public static String getExtension(@NotNull String fileName)",
      "right" : "public static String getExtension(@NotNull String fileName)",
      "info" : "MethodDeclaration[31246-31748]:MethodDeclaration[33418-33920]"
    }, {
      "left" : "public static String resolveShortWindowsName(@NotNull String path) throws IOException",
      "right" : "public static String resolveShortWindowsName(@NotNull String path) throws IOException",
      "info" : "MethodDeclaration[31752-31968]:MethodDeclaration[33924-34140]"
    }, {
      "left" : "public static void collectMatchedFiles(@NotNull File root, @NotNull Pattern pattern, @NotNull List<File> outFiles)",
      "right" : "public static void collectMatchedFiles(@NotNull File root, @NotNull Pattern pattern, @NotNull List<File> outFiles)",
      "info" : "MethodDeclaration[31972-32148]:MethodDeclaration[34144-34320]"
    }, {
      "left" : "private static void collectMatchedFiles(@NotNull File absoluteRoot,\n                                          @NotNull File root,\n                                          @NotNull Pattern pattern,\n                                          @NotNull List<File> files)",
      "right" : "private static void collectMatchedFiles(@NotNull File absoluteRoot,\n                                          @NotNull File root,\n                                          @NotNull Pattern pattern,\n                                          @NotNull List<File> files)",
      "info" : "MethodDeclaration[32152-32925]:MethodDeclaration[34324-35097]"
    }, {
      "left" : "public static String convertAntToRegexp(@NotNull String antPattern)",
      "right" : "public static String convertAntToRegexp(@NotNull String antPattern)",
      "info" : "MethodDeclaration[32929-33072]:MethodDeclaration[35101-35244]"
    }, {
      "left" : "public static String convertAntToRegexp(@NotNull String antPattern, boolean ignoreStartingSlash)",
      "right" : "public static String convertAntToRegexp(@NotNull String antPattern, boolean ignoreStartingSlash)",
      "info" : "MethodDeclaration[33076-35688]:MethodDeclaration[35248-37860]"
    }, {
      "left" : "public static boolean moveDirWithContent(@NotNull File fromDir, @NotNull File toDir)",
      "right" : "public static boolean moveDirWithContent(@NotNull File fromDir, @NotNull File toDir)",
      "info" : "MethodDeclaration[35692-36186]:MethodDeclaration[37864-38358]"
    }, {
      "left" : "public static String sanitizeFileName(@NotNull String name)",
      "right" : "public static String sanitizeFileName(@NotNull String name)",
      "info" : "MethodDeclaration[36190-36490]:MethodDeclaration[38362-38662]"
    }, {
      "left" : "public static String sanitizeName(@NotNull String name)",
      "right" : "public static String sanitizeName(@NotNull String name)",
      "info" : "MethodDeclaration[36494-36688]:MethodDeclaration[38666-38860]"
    }, {
      "left" : "private static String sanitizeFileName(@NotNull String name, boolean strict)",
      "right" : "private static String sanitizeFileName(@NotNull String name, boolean strict)",
      "info" : "MethodDeclaration[36692-37634]:MethodDeclaration[38864-39806]"
    }, {
      "left" : "public static boolean canExecute(@NotNull File file)",
      "right" : "public static boolean canExecute(@NotNull File file)",
      "info" : "MethodDeclaration[37638-37726]:MethodDeclaration[39810-39898]"
    }, {
      "left" : "public static void setReadOnlyAttribute(@NotNull String path, boolean readOnlyFlag)",
      "right" : "public static void setReadOnlyAttribute(@NotNull String path, boolean readOnlyFlag)",
      "info" : "MethodDeclaration[37730-38074]:MethodDeclaration[39902-40246]"
    }, {
      "left" : "public static void appendToFile(@NotNull File file, @NotNull String text) throws IOException",
      "right" : "public static void appendToFile(@NotNull File file, @NotNull String text) throws IOException",
      "info" : "MethodDeclaration[38078-38249]:MethodDeclaration[40250-40421]"
    }, {
      "left" : "public static void writeToFile(@NotNull File file, @NotNull byte[] text) throws IOException",
      "right" : "public static void writeToFile(@NotNull File file, @NotNull byte[] text) throws IOException",
      "info" : "MethodDeclaration[38253-38386]:MethodDeclaration[40425-40558]"
    }, {
      "left" : "public static void writeToFile(@NotNull File file, @NotNull String text) throws IOException",
      "right" : "public static void writeToFile(@NotNull File file, @NotNull String text) throws IOException",
      "info" : "MethodDeclaration[38390-38561]:MethodDeclaration[40562-40733]"
    }, {
      "left" : "public static void writeToFile(@NotNull File file, @NotNull byte[] text, int off, int len) throws IOException",
      "right" : "public static void writeToFile(@NotNull File file, @NotNull byte[] text, int off, int len) throws IOException",
      "info" : "MethodDeclaration[38565-38726]:MethodDeclaration[40737-40898]"
    }, {
      "left" : "public static void writeToFile(@NotNull File file, @NotNull byte[] text, boolean append) throws IOException",
      "right" : "public static void writeToFile(@NotNull File file, @NotNull byte[] text, boolean append) throws IOException",
      "info" : "MethodDeclaration[38730-38896]:MethodDeclaration[40902-41068]"
    }, {
      "left" : "private static void writeToFile(@NotNull File file, @NotNull byte[] text, int off, int len, boolean append) throws IOException",
      "right" : "private static void writeToFile(@NotNull File file, @NotNull byte[] text, int off, int len, boolean append) throws IOException",
      "info" : "MethodDeclaration[38900-39217]:MethodDeclaration[41072-41389]"
    }, {
      "left" : "public static boolean processFilesRecursively(@NotNull File root, @NotNull Processor<File> processor)",
      "right" : "public static boolean processFilesRecursively(@NotNull File root, @NotNull Processor<File> processor)",
      "info" : "MethodDeclaration[39221-39387]:MethodDeclaration[41393-41559]"
    }, {
      "left" : "public static boolean processFilesRecursively(@NotNull File root, @NotNull Processor<File> processor,\n                                                @Nullable final Processor<File> directoryFilter)",
      "right" : "public static boolean processFilesRecursively(@NotNull File root, @NotNull Processor<File> processor,\n                                                @Nullable final Processor<File> directoryFilter)",
      "info" : "MethodDeclaration[39391-40062]:MethodDeclaration[41563-42234]"
    }, {
      "left" : "public static File findFirstThatExist(@NotNull String... paths)",
      "right" : "public static File findFirstThatExist(@NotNull String... paths)",
      "info" : "MethodDeclaration[40066-40357]:MethodDeclaration[42238-42529]"
    }, {
      "left" : "public static List<File> findFilesByMask(@NotNull Pattern pattern, @NotNull File dir)",
      "right" : "public static List<File> findFilesByMask(@NotNull Pattern pattern, @NotNull File dir)",
      "info" : "MethodDeclaration[40361-40850]:MethodDeclaration[42533-43022]"
    }, {
      "left" : "public static List<File> findFilesOrDirsByMask(@NotNull Pattern pattern, @NotNull File dir)",
      "right" : "public static List<File> findFilesOrDirsByMask(@NotNull Pattern pattern, @NotNull File dir)",
      "info" : "MethodDeclaration[40854-41350]:MethodDeclaration[43026-43522]"
    }, {
      "left" : "public static String findFileInProvidedPath(String providedPath, String... fileNames)",
      "right" : "public static String findFileInProvidedPath(String providedPath, String... fileNames)",
      "info" : "MethodDeclaration[41354-42992]:MethodDeclaration[43526-45164]"
    }, {
      "left" : "public static boolean isAbsolutePlatformIndependent(@NotNull String path)",
      "right" : "public static boolean isAbsolutePlatformIndependent(@NotNull String path)",
      "info" : "MethodDeclaration[42996-43143]:MethodDeclaration[45168-45315]"
    }, {
      "left" : "public static boolean isUnixAbsolutePath(@NotNull String path)",
      "right" : "public static boolean isUnixAbsolutePath(@NotNull String path)",
      "info" : "MethodDeclaration[43147-43248]:MethodDeclaration[45319-45420]"
    }, {
      "left" : "public static boolean isWindowsAbsolutePath(@NotNull String pathString)",
      "right" : "public static boolean isWindowsAbsolutePath(@NotNull String pathString)",
      "info" : "MethodDeclaration[43252-43441]:MethodDeclaration[45424-45613]"
    }, {
      "left" : "public static String getLocationRelativeToUserHome(@Nullable String path)",
      "right" : "public static String getLocationRelativeToUserHome(@Nullable String path)",
      "info" : "MethodDeclaration[43445-43622]:MethodDeclaration[45617-45794]"
    }, {
      "left" : "public static String getLocationRelativeToUserHome(@Nullable String path, boolean unixOnly)",
      "right" : "public static String getLocationRelativeToUserHome(@Nullable String path, boolean unixOnly)",
      "info" : "MethodDeclaration[43626-44123]:MethodDeclaration[45798-46295]"
    }, {
      "left" : "public static String expandUserHome(@NotNull String path)",
      "right" : "public static String expandUserHome(@NotNull String path)",
      "info" : "MethodDeclaration[44127-44348]:MethodDeclaration[46299-46520]"
    }, {
      "left" : "public static File[] notNullize(@Nullable File[] files)",
      "right" : "public static File[] notNullize(@Nullable File[] files)",
      "info" : "MethodDeclaration[44352-44482]:MethodDeclaration[46524-46654]"
    }, {
      "left" : "public static File[] notNullize(@Nullable File[] files, @NotNull File[] defaultFiles)",
      "right" : "public static File[] notNullize(@Nullable File[] files, @NotNull File[] defaultFiles)",
      "info" : "MethodDeclaration[44486-44637]:MethodDeclaration[46658-46809]"
    }, {
      "left" : "public static boolean isHashBangLine(CharSequence firstCharsIfText, String marker)",
      "right" : "public static boolean isHashBangLine(CharSequence firstCharsIfText, String marker)",
      "info" : "MethodDeclaration[44641-45094]:MethodDeclaration[46813-47266]"
    }, {
      "left" : "public static File createTempDirectory(@NotNull @NonNls String prefix, @Nullable @NonNls String suffix) throws IOException",
      "right" : "public static File createTempDirectory(@NotNull @NonNls String prefix, @Nullable @NonNls String suffix) throws IOException",
      "info" : "MethodDeclaration[45098-45296]:MethodDeclaration[47270-47468]"
    }, {
      "left" : "public static File createTempDirectory(@NotNull @NonNls String prefix, @Nullable @NonNls String suffix, boolean deleteOnExit)\n    throws IOException",
      "right" : "public static File createTempDirectory(@NotNull @NonNls String prefix, @Nullable @NonNls String suffix, boolean deleteOnExit)\n    throws IOException",
      "info" : "MethodDeclaration[45300-45538]:MethodDeclaration[47472-47710]"
    }, {
      "left" : "public static File createTempDirectory(@NotNull File dir, @NotNull @NonNls String prefix, @Nullable @NonNls String suffix)\n    throws IOException",
      "right" : "public static File createTempDirectory(@NotNull File dir, @NotNull @NonNls String prefix, @Nullable @NonNls String suffix)\n    throws IOException",
      "info" : "MethodDeclaration[45542-45768]:MethodDeclaration[47714-47940]"
    }, {
      "left" : "public static File createTempDirectory(@NotNull File dir,\n                                         @NotNull @NonNls String prefix,\n                                         @Nullable @NonNls String suffix,\n                                         boolean deleteOnExit) throws IOException",
      "right" : "public static File createTempDirectory(@NotNull File dir,\n                                         @NotNull @NonNls String prefix,\n                                         @Nullable @NonNls String suffix,\n                                         boolean deleteOnExit) throws IOException",
      "info" : "MethodDeclaration[45772-46153]:MethodDeclaration[47944-48325]"
    }, {
      "left" : "public static File createTempFile(@NotNull @NonNls String prefix, @Nullable @NonNls String suffix) throws IOException",
      "right" : "public static File createTempFile(@NotNull @NonNls String prefix, @Nullable @NonNls String suffix) throws IOException",
      "info" : "MethodDeclaration[46157-46345]:MethodDeclaration[48329-48517]"
    }, {
      "left" : "public static File createTempFile(@NotNull @NonNls String prefix, @Nullable @NonNls String suffix, boolean deleteOnExit)\n    throws IOException",
      "right" : "public static File createTempFile(@NotNull @NonNls String prefix, @Nullable @NonNls String suffix, boolean deleteOnExit)\n    throws IOException",
      "info" : "MethodDeclaration[46349-46577]:MethodDeclaration[48521-48749]"
    }, {
      "left" : "public static File createTempFile(@NonNls File dir, @NotNull @NonNls String prefix, @Nullable @NonNls String suffix) throws IOException",
      "right" : "public static File createTempFile(@NonNls File dir, @NotNull @NonNls String prefix, @Nullable @NonNls String suffix) throws IOException",
      "info" : "MethodDeclaration[46581-46792]:MethodDeclaration[48753-48964]"
    }, {
      "left" : "public static File createTempFile(@NonNls File dir, @NotNull @NonNls String prefix, @Nullable @NonNls String suffix, boolean create)\n    throws IOException",
      "right" : "public static File createTempFile(@NonNls File dir, @NotNull @NonNls String prefix, @Nullable @NonNls String suffix, boolean create)\n    throws IOException",
      "info" : "MethodDeclaration[46796-47035]:MethodDeclaration[48968-49207]"
    }, {
      "left" : "public static File createTempFile(@NonNls File dir,\n                                    @NotNull @NonNls String prefix,\n                                    @Nullable @NonNls String suffix,\n                                    boolean create,\n                                    boolean deleteOnExit) throws IOException",
      "right" : "public static File createTempFile(@NonNls File dir,\n                                    @NotNull @NonNls String prefix,\n                                    @Nullable @NonNls String suffix,\n                                    boolean create,\n                                    boolean deleteOnExit) throws IOException",
      "info" : "MethodDeclaration[47039-47454]:MethodDeclaration[49211-49626]"
    }, {
      "left" : "public static String getTempDirectory()",
      "right" : "public static String getTempDirectory()",
      "info" : "MethodDeclaration[47458-47556]:MethodDeclaration[49630-49728]"
    }, {
      "left" : "public static void resetCanonicalTempPathCache(final String tempPath)",
      "right" : "public static void resetCanonicalTempPathCache(final String tempPath)",
      "info" : "MethodDeclaration[47560-47701]:MethodDeclaration[49732-49873]"
    }, {
      "left" : "public static File generateRandomTemporaryPath() throws IOException",
      "right" : "public static File generateRandomTemporaryPath() throws IOException",
      "info" : "MethodDeclaration[47705-47842]:MethodDeclaration[49877-50014]"
    }, {
      "left" : "public static void setExecutableAttribute(@NotNull String path, boolean executableFlag) throws IOException",
      "right" : "public static void setExecutableAttribute(@NotNull String path, boolean executableFlag) throws IOException",
      "info" : "MethodDeclaration[47846-48019]:MethodDeclaration[50018-50191]"
    }, {
      "left" : "public static void setLastModified(@NotNull File file, long timeStamp) throws IOException",
      "right" : "public static void setLastModified(@NotNull File file, long timeStamp) throws IOException",
      "info" : "MethodDeclaration[48023-48200]:MethodDeclaration[50195-50372]"
    }, {
      "left" : "public static String loadFile(@NotNull File file) throws IOException",
      "right" : "public static String loadFile(@NotNull File file) throws IOException",
      "info" : "MethodDeclaration[48204-48327]:MethodDeclaration[50376-50499]"
    }, {
      "left" : "public static String loadFile(@NotNull File file, boolean convertLineSeparators) throws IOException",
      "right" : "public static String loadFile(@NotNull File file, boolean convertLineSeparators) throws IOException",
      "info" : "MethodDeclaration[48331-48508]:MethodDeclaration[50503-50680]"
    }, {
      "left" : "public static String loadFile(@NotNull File file, @Nullable @NonNls String encoding) throws IOException",
      "right" : "public static String loadFile(@NotNull File file, @Nullable @NonNls String encoding) throws IOException",
      "info" : "MethodDeclaration[48512-48680]:MethodDeclaration[50684-50852]"
    }, {
      "left" : "public static String loadFile(@NotNull File file, @NotNull @NonNls Charset encoding) throws IOException",
      "right" : "public static String loadFile(@NotNull File file, @NotNull @NonNls Charset encoding) throws IOException",
      "info" : "MethodDeclaration[48683-48871]:MethodDeclaration[50855-51043]"
    }, {
      "left" : "public static String loadFile(@NotNull File file, @Nullable @NonNls String encoding, boolean convertLineSeparators) throws IOException",
      "right" : "public static String loadFile(@NotNull File file, @Nullable @NonNls String encoding, boolean convertLineSeparators) throws IOException",
      "info" : "MethodDeclaration[48875-49097]:MethodDeclaration[51047-51269]"
    }, {
      "left" : "public static char[] loadFileText(@NotNull File file) throws IOException",
      "right" : "public static char[] loadFileText(@NotNull File file) throws IOException",
      "info" : "MethodDeclaration[49101-49232]:MethodDeclaration[51273-51404]"
    }, {
      "left" : "public static char[] loadFileText(@NotNull File file, @Nullable @NonNls String encoding) throws IOException",
      "right" : "public static char[] loadFileText(@NotNull File file, @Nullable @NonNls String encoding) throws IOException",
      "info" : "MethodDeclaration[49236-49412]:MethodDeclaration[51408-51584]"
    }, {
      "left" : "public static char[] loadText(@NotNull Reader reader, int length) throws IOException",
      "right" : "public static char[] loadText(@NotNull Reader reader, int length) throws IOException",
      "info" : "MethodDeclaration[49416-49565]:MethodDeclaration[51588-51737]"
    }, {
      "left" : "public static List<String> loadLines(@NotNull File file) throws IOException",
      "right" : "public static List<String> loadLines(@NotNull File file) throws IOException",
      "info" : "MethodDeclaration[49569-49700]:MethodDeclaration[51741-51872]"
    }, {
      "left" : "public static List<String> loadLines(@NotNull File file, @Nullable @NonNls String encoding) throws IOException",
      "right" : "public static List<String> loadLines(@NotNull File file, @Nullable @NonNls String encoding) throws IOException",
      "info" : "MethodDeclaration[49704-49880]:MethodDeclaration[51876-52052]"
    }, {
      "left" : "public static List<String> loadLines(@NotNull String path) throws IOException",
      "right" : "public static List<String> loadLines(@NotNull String path) throws IOException",
      "info" : "MethodDeclaration[49884-50017]:MethodDeclaration[52056-52189]"
    }, {
      "left" : "public static List<String> loadLines(@NotNull String path, @Nullable @NonNls String encoding) throws IOException",
      "right" : "public static List<String> loadLines(@NotNull String path, @Nullable @NonNls String encoding) throws IOException",
      "info" : "MethodDeclaration[50021-50199]:MethodDeclaration[52193-52371]"
    }, {
      "left" : "public static List<String> loadLines(@NotNull BufferedReader reader) throws IOException",
      "right" : "public static List<String> loadLines(@NotNull BufferedReader reader) throws IOException",
      "info" : "MethodDeclaration[50203-50348]:MethodDeclaration[52375-52520]"
    }, {
      "left" : "public static List<String> loadLines(@NotNull InputStream stream) throws IOException",
      "right" : "public static List<String> loadLines(@NotNull InputStream stream) throws IOException",
      "info" : "MethodDeclaration[50352-50632]:MethodDeclaration[52524-52804]"
    }, {
      "left" : "public static List<String> loadLines(@NotNull Reader reader) throws IOException",
      "right" : "public static List<String> loadLines(@NotNull Reader reader) throws IOException",
      "info" : "MethodDeclaration[50636-51011]:MethodDeclaration[52808-53183]"
    }, {
      "left" : "public static byte[] loadBytes(@NotNull InputStream stream) throws IOException",
      "right" : "public static byte[] loadBytes(@NotNull InputStream stream) throws IOException",
      "info" : "MethodDeclaration[51015-51151]:MethodDeclaration[53187-53323]"
    }, {
      "left" : "public static byte[] loadBytes(@NotNull InputStream stream, int length) throws IOException",
      "right" : "public static byte[] loadBytes(@NotNull InputStream stream, int length) throws IOException",
      "info" : "MethodDeclaration[51155-51311]:MethodDeclaration[53327-53483]"
    }, {
      "left" : "public static List<String> splitPath(@NotNull String path)",
      "right" : "public static List<String> splitPath(@NotNull String path)",
      "info" : "MethodDeclaration[51315-51726]:MethodDeclaration[53487-53898]"
    }, {
      "left" : "public static boolean isJarOrZip(File file)",
      "right" : "public static boolean isJarOrZip(File file)",
      "info" : "MethodDeclaration[51730-52026]:MethodDeclaration[53902-54198]"
    }, {
      "left" : "public static boolean visitFiles(@NotNull File root, @NotNull Processor<File> processor)",
      "right" : "public static boolean visitFiles(@NotNull File root, @NotNull Processor<File> processor)",
      "info" : "MethodDeclaration[52030-52402]:MethodDeclaration[54202-54574]"
    }, {
      "left" : "public static Map<String, String> loadProperties(@NotNull Reader reader) throws IOException",
      "right" : "public static Map<String, String> loadProperties(@NotNull Reader reader) throws IOException",
      "info" : "MethodDeclaration[52406-52982]:MethodDeclaration[54578-55154]"
    }, {
      "left" : "public synchronized Object put(Object key, Object value)",
      "right" : "public synchronized Object put(Object key, Object value)",
      "info" : "MethodDeclaration[52710-52941]:MethodDeclaration[54882-55113]"
    }, {
      "left" : "public static boolean isRootPath(@NotNull File file)",
      "right" : "public static boolean isRootPath(@NotNull File file)",
      "info" : "MethodDeclaration[52986-53083]:MethodDeclaration[55158-55255]"
    }, {
      "left" : "public static boolean isRootPath(@NotNull String path)",
      "right" : "public static boolean isRootPath(@NotNull String path)",
      "info" : "MethodDeclaration[53087-53212]:MethodDeclaration[55259-55384]"
    }, {
      "left" : "public static boolean deleteWithRenaming(File file)",
      "right" : "public static boolean deleteWithRenaming(File file)",
      "info" : "MethodDeclaration[53216-53499]:MethodDeclaration[55388-55671]"
    }, {
      "left" : "public static boolean isFileSystemCaseSensitive(@NotNull String path) throws FileNotFoundException",
      "right" : "public static boolean isFileSystemCaseSensitive(@NotNull String path) throws FileNotFoundException",
      "info" : "MethodDeclaration[53503-54007]:MethodDeclaration[55675-56179]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2269-2315]:Block[2269-2315]"
    }, {
      "left" : "return fileHashCode(object);",
      "right" : "return fileHashCode(object);",
      "info" : "ReturnStatement[2279-2307]:ReturnStatement[2279-2307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2379-2423]:Block[2379-2423]"
    }, {
      "left" : "return filesEqual(o1, o2);",
      "right" : "return filesEqual(o1, o2);",
      "info" : "ReturnStatement[2389-2415]:ReturnStatement[2389-2415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2602-2658]:Block[2602-2658]"
    }, {
      "left" : "return StringUtil.join(parts, File.separator);",
      "right" : "return StringUtil.join(parts, File.separator);",
      "info" : "ReturnStatement[2608-2654]:ReturnStatement[2608-2654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2733-2789]:Block[2733-2789]"
    }, {
      "left" : "return FileUtilRt.getRelativePath(base, file);",
      "right" : "return FileUtilRt.getRelativePath(base, file);",
      "info" : "ReturnStatement[2739-2785]:ReturnStatement[2739-2785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2916-2991]:Block[2916-2991]"
    }, {
      "left" : "return FileUtilRt.getRelativePath(basePath, filePath, separator);",
      "right" : "return FileUtilRt.getRelativePath(basePath, filePath, separator);",
      "info" : "ReturnStatement[2922-2987]:ReturnStatement[2922-2987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3264-3354]:Block[3264-3354]"
    }, {
      "left" : "return FileUtilRt.getRelativePath(basePath, filePath, separator, caseSensitive);",
      "right" : "return FileUtilRt.getRelativePath(basePath, filePath, separator, caseSensitive);",
      "info" : "ReturnStatement[3270-3350]:ReturnStatement[3270-3350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3413-3458]:Block[3413-3458]"
    }, {
      "left" : "return new File(path).isAbsolute();",
      "right" : "return new File(path).isAbsolute();",
      "info" : "ReturnStatement[3419-3454]:ReturnStatement[3419-3454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3939-4011]:Block[3939-4011]"
    }, {
      "left" : "return isAncestor(ancestor.getPath(), file.getPath(), strict);",
      "right" : "return isAncestor(ancestor.getPath(), file.getPath(), strict);",
      "info" : "ReturnStatement[3945-4007]:ReturnStatement[3945-4007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4112-4197]:Block[4112-4197]"
    }, {
      "left" : "return !ThreeState.NO.equals(isAncestorThreeState(ancestor, file, strict));",
      "right" : "return !ThreeState.NO.equals(isAncestorThreeState(ancestor, file, strict));",
      "info" : "ReturnStatement[4118-4193]:ReturnStatement[4118-4193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4981-5183]:Block[4981-5183]"
    }, {
      "left" : "String ancestorPath = toCanonicalPath(ancestor);",
      "right" : "String ancestorPath = toCanonicalPath(ancestor);",
      "info" : "VariableDeclarationStatement[4987-5035]:VariableDeclarationStatement[4987-5035]"
    }, {
      "left" : "String filePath = toCanonicalPath(file);",
      "right" : "String filePath = toCanonicalPath(file);",
      "info" : "VariableDeclarationStatement[5040-5080]:VariableDeclarationStatement[5040-5080]"
    }, {
      "left" : "return startsWith(filePath, ancestorPath, strict, SystemInfo.isFileSystemCaseSensitive, true);",
      "right" : "return startsWith(filePath, ancestorPath, strict, SystemInfo.isFileSystemCaseSensitive, true);",
      "info" : "ReturnStatement[5085-5179]:ReturnStatement[5085-5179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5265-5381]:Block[5265-5381]"
    }, {
      "left" : "return !ThreeState.NO.equals(startsWith(path, start, false, SystemInfo.isFileSystemCaseSensitive, false));",
      "right" : "return !ThreeState.NO.equals(startsWith(path, start, false, SystemInfo.isFileSystemCaseSensitive, false));",
      "info" : "ReturnStatement[5271-5377]:ReturnStatement[5271-5377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5486-5579]:Block[5486-5579]"
    }, {
      "left" : "return !ThreeState.NO.equals(startsWith(path, start, false, caseSensitive, false));",
      "right" : "return !ThreeState.NO.equals(startsWith(path, start, false, caseSensitive, false));",
      "info" : "ReturnStatement[5492-5575]:ReturnStatement[5492-5575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5785-6969]:Block[5785-6969]"
    }, {
      "left" : "final int pathLength = path.length();",
      "right" : "final int pathLength = path.length();",
      "info" : "VariableDeclarationStatement[5791-5828]:VariableDeclarationStatement[5791-5828]"
    }, {
      "left" : "final int prefixLength = prefix.length();",
      "right" : "final int prefixLength = prefix.length();",
      "info" : "VariableDeclarationStatement[5833-5874]:VariableDeclarationStatement[5833-5874]"
    }, {
      "left" : "if (prefixLength == 0)",
      "right" : "if (prefixLength == 0)",
      "info" : "IfStatement[5879-5962]:IfStatement[5879-5962]"
    }, {
      "left" : "return pathLength == 0 ? ThreeState.YES : ThreeState.UNSURE;",
      "right" : "return pathLength == 0 ? ThreeState.YES : ThreeState.UNSURE;",
      "info" : "ReturnStatement[5902-5962]:ReturnStatement[5902-5962]"
    }, {
      "left" : "if (prefixLength > pathLength)",
      "right" : "if (prefixLength > pathLength)",
      "info" : "IfStatement[5967-6019]:IfStatement[5967-6019]"
    }, {
      "left" : "return ThreeState.NO;",
      "right" : "return ThreeState.NO;",
      "info" : "ReturnStatement[5998-6019]:ReturnStatement[5998-6019]"
    }, {
      "left" : "if (!path.regionMatches(!caseSensitive, 0, prefix, 0, prefixLength))",
      "right" : "if (!path.regionMatches(!caseSensitive, 0, prefix, 0, prefixLength))",
      "info" : "IfStatement[6024-6114]:IfStatement[6024-6114]"
    }, {
      "left" : "return ThreeState.NO;",
      "right" : "return ThreeState.NO;",
      "info" : "ReturnStatement[6093-6114]:ReturnStatement[6093-6114]"
    }, {
      "left" : "if (pathLength == prefixLength)",
      "right" : "if (pathLength == prefixLength)",
      "info" : "IfStatement[6119-6212]:IfStatement[6119-6212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6151-6212]:Block[6151-6212]"
    }, {
      "left" : "return strict ? ThreeState.NO : ThreeState.YES;",
      "right" : "return strict ? ThreeState.NO : ThreeState.YES;",
      "info" : "ReturnStatement[6159-6206]:ReturnStatement[6159-6206]"
    }, {
      "left" : "char lastPrefixChar = prefix.charAt(prefixLength - 1);",
      "right" : "char lastPrefixChar = prefix.charAt(prefixLength - 1);",
      "info" : "VariableDeclarationStatement[6217-6271]:VariableDeclarationStatement[6217-6271]"
    }, {
      "left" : "int slashOrSeparatorIdx = prefixLength;",
      "right" : "int slashOrSeparatorIdx = prefixLength;",
      "info" : "VariableDeclarationStatement[6276-6315]:VariableDeclarationStatement[6276-6315]"
    }, {
      "left" : "if (lastPrefixChar == '/' || lastPrefixChar == File.separatorChar)",
      "right" : "if (lastPrefixChar == '/' || lastPrefixChar == File.separatorChar)",
      "info" : "IfStatement[6320-6440]:IfStatement[6320-6440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6387-6440]:Block[6387-6440]"
    }, {
      "left" : "slashOrSeparatorIdx = prefixLength - 1;",
      "right" : "slashOrSeparatorIdx = prefixLength - 1;",
      "info" : "ExpressionStatement[6395-6434]:ExpressionStatement[6395-6434]"
    }, {
      "left" : "char next1 = path.charAt(slashOrSeparatorIdx);",
      "right" : "char next1 = path.charAt(slashOrSeparatorIdx);",
      "info" : "VariableDeclarationStatement[6445-6491]:VariableDeclarationStatement[6445-6491]"
    }, {
      "left" : "if (next1 == '/' || next1 == File.separatorChar)",
      "right" : "if (next1 == '/' || next1 == File.separatorChar)",
      "info" : "IfStatement[6496-6965]:IfStatement[6496-6965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6545-6920]:Block[6545-6920]"
    }, {
      "left" : "if (!checkImmediateParent)",
      "right" : "if (!checkImmediateParent)",
      "info" : "IfStatement[6553-6602]:IfStatement[6553-6602]"
    }, {
      "left" : "return ThreeState.YES;",
      "right" : "return ThreeState.YES;",
      "info" : "ReturnStatement[6580-6602]:ReturnStatement[6580-6602]"
    }, {
      "left" : "if (slashOrSeparatorIdx == pathLength - 1)",
      "right" : "if (slashOrSeparatorIdx == pathLength - 1)",
      "info" : "IfStatement[6610-6675]:IfStatement[6610-6675]"
    }, {
      "left" : "return ThreeState.YES;",
      "right" : "return ThreeState.YES;",
      "info" : "ReturnStatement[6653-6675]:ReturnStatement[6653-6675]"
    }, {
      "left" : "int idxNext = path.indexOf(next1, slashOrSeparatorIdx + 1);",
      "right" : "int idxNext = path.indexOf(next1, slashOrSeparatorIdx + 1);",
      "info" : "VariableDeclarationStatement[6682-6741]:VariableDeclarationStatement[6682-6741]"
    }, {
      "left" : "idxNext = idxNext == -1 ? path.indexOf(next1 == '/' ? '\\\\' : '/', slashOrSeparatorIdx + 1) : idxNext;",
      "right" : "idxNext = idxNext == -1 ? path.indexOf(next1 == '/' ? '\\\\' : '/', slashOrSeparatorIdx + 1) : idxNext;",
      "info" : "ExpressionStatement[6748-6849]:ExpressionStatement[6748-6849]"
    }, {
      "left" : "return idxNext == -1 ? ThreeState.YES : ThreeState.UNSURE;",
      "right" : "return idxNext == -1 ? ThreeState.YES : ThreeState.UNSURE;",
      "info" : "ReturnStatement[6856-6914]:ReturnStatement[6856-6914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6930-6965]:Block[6930-6965]"
    }, {
      "left" : "return ThreeState.NO;",
      "right" : "return ThreeState.NO;",
      "info" : "ReturnStatement[6938-6959]:ReturnStatement[6938-6959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7283-8430]:Block[7283-8430]"
    }, {
      "left" : "if (files.isEmpty())",
      "right" : "if (files.isEmpty())",
      "info" : "IfStatement[7289-7323]:IfStatement[7289-7323]"
    }, {
      "left" : "return files;",
      "right" : "return files;",
      "info" : "ReturnStatement[7310-7323]:ReturnStatement[7310-7323]"
    }, {
      "left" : "final TreeMap<String, T> paths = new TreeMap<String, T>();",
      "right" : "final TreeMap<String, T> paths = new TreeMap<String, T>();",
      "info" : "VariableDeclarationStatement[7328-7386]:VariableDeclarationStatement[7328-7386]"
    }, {
      "left" : "for (T file : files)",
      "right" : "for (T file : files)",
      "info" : "EnhancedForStatement[7391-7593]:EnhancedForStatement[7391-7593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7412-7593]:Block[7412-7593]"
    }, {
      "left" : "final String path = convertor.convert(file);",
      "right" : "final String path = convertor.convert(file);",
      "info" : "VariableDeclarationStatement[7420-7464]:VariableDeclarationStatement[7420-7464]"
    }, {
      "left" : "assert path != null;",
      "right" : "assert path != null;",
      "info" : "AssertStatement[7471-7491]:AssertStatement[7471-7491]"
    }, {
      "left" : "final String canonicalPath = toCanonicalPath(path);",
      "right" : "final String canonicalPath = toCanonicalPath(path);",
      "info" : "VariableDeclarationStatement[7498-7549]:VariableDeclarationStatement[7498-7549]"
    }, {
      "left" : "paths.put(canonicalPath, file);",
      "right" : "paths.put(canonicalPath, file);",
      "info" : "ExpressionStatement[7556-7587]:ExpressionStatement[7556-7587]"
    }, {
      "left" : "final List<Map.Entry<String, T>> ordered = new ArrayList<Map.Entry<String, T>>(paths.entrySet());",
      "right" : "final List<Map.Entry<String, T>> ordered = new ArrayList<Map.Entry<String, T>>(paths.entrySet());",
      "info" : "VariableDeclarationStatement[7598-7695]:VariableDeclarationStatement[7598-7695]"
    }, {
      "left" : "final List<T> result = new ArrayList<T>(ordered.size());",
      "right" : "final List<T> result = new ArrayList<T>(ordered.size());",
      "info" : "VariableDeclarationStatement[7700-7756]:VariableDeclarationStatement[7700-7756]"
    }, {
      "left" : "result.add(ordered.get(0).getValue());",
      "right" : "result.add(ordered.get(0).getValue());",
      "info" : "ExpressionStatement[7761-7799]:ExpressionStatement[7761-7799]"
    }, {
      "left" : "for (int i = 1; i < ordered.size(); i++)",
      "right" : "for (int i = 1; i < ordered.size(); i++)",
      "info" : "ForStatement[7804-8407]:ForStatement[7804-8407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7845-8407]:Block[7845-8407]"
    }, {
      "left" : "final Map.Entry<String, T> entry = ordered.get(i);",
      "right" : "final Map.Entry<String, T> entry = ordered.get(i);",
      "info" : "VariableDeclarationStatement[7853-7903]:VariableDeclarationStatement[7853-7903]"
    }, {
      "left" : "final String child = entry.getKey();",
      "right" : "final String child = entry.getKey();",
      "info" : "VariableDeclarationStatement[7910-7946]:VariableDeclarationStatement[7910-7946]"
    }, {
      "left" : "boolean parentNotFound = true;",
      "right" : "boolean parentNotFound = true;",
      "info" : "VariableDeclarationStatement[7953-7983]:VariableDeclarationStatement[7953-7983]"
    }, {
      "left" : "for (int j = i - 1; j >= 0; j--)",
      "right" : "for (int j = i - 1; j >= 0; j--)",
      "info" : "ForStatement[7990-8327]:ForStatement[7990-8327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8023-8327]:Block[8023-8327]"
    }, {
      "left" : "final String parent = ordered.get(j).getKey();",
      "right" : "final String parent = ordered.get(j).getKey();",
      "info" : "VariableDeclarationStatement[8061-8107]:VariableDeclarationStatement[8061-8107]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[8116-8145]:IfStatement[8116-8145]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[8136-8145]:ContinueStatement[8136-8145]"
    }, {
      "left" : "if (startsWith(child, parent) && removeProcessor.process(ordered.get(j).getValue(), entry.getValue()))",
      "right" : "if (startsWith(child, parent) && removeProcessor.process(ordered.get(j).getValue(), entry.getValue()))",
      "info" : "IfStatement[8154-8319]:IfStatement[8154-8319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8257-8319]:Block[8257-8319]"
    }, {
      "left" : "parentNotFound = false;",
      "right" : "parentNotFound = false;",
      "info" : "ExpressionStatement[8269-8292]:ExpressionStatement[8269-8292]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8303-8309]:BreakStatement[8303-8309]"
    }, {
      "left" : "if (parentNotFound)",
      "right" : "if (parentNotFound)",
      "info" : "IfStatement[8334-8401]:IfStatement[8334-8401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8354-8401]:Block[8354-8401]"
    }, {
      "left" : "result.add(entry.getValue());",
      "right" : "result.add(entry.getValue());",
      "info" : "ExpressionStatement[8364-8393]:ExpressionStatement[8364-8393]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[8412-8426]:ReturnStatement[8412-8426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8499-8547]:Block[8499-8547]"
    }, {
      "left" : "return FileUtilRt.getParentFile(file);",
      "right" : "return FileUtilRt.getParentFile(file);",
      "info" : "ReturnStatement[8505-8543]:ReturnStatement[8505-8543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8636-9155]:Block[8636-9155]"
    }, {
      "left" : "byte[] bytes;",
      "right" : "byte[] bytes;",
      "info" : "VariableDeclarationStatement[8642-8655]:VariableDeclarationStatement[8642-8655]"
    }, {
      "left" : "final InputStream stream = new FileInputStream(file);",
      "right" : "final InputStream stream = new FileInputStream(file);",
      "info" : "VariableDeclarationStatement[8660-8713]:VariableDeclarationStatement[8660-8713]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8718-9133]:TryStatement[8718-9133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8722-9091]:Block[8722-9091]"
    }, {
      "left" : "final long len = file.length();",
      "right" : "final long len = file.length();",
      "info" : "VariableDeclarationStatement[8730-8761]:VariableDeclarationStatement[8730-8761]"
    }, {
      "left" : "if (len < 0)",
      "right" : "if (len < 0)",
      "info" : "IfStatement[8768-8878]:IfStatement[8768-8878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8781-8878]:Block[8781-8878]"
    }, {
      "left" : "throw new IOException(\"File length reported negative, probably doesn't exist\");",
      "right" : "throw new IOException(\"File length reported negative, probably doesn't exist\");",
      "info" : "ThrowStatement[8791-8870]:ThrowStatement[8791-8870]"
    }, {
      "left" : "if (isTooLarge(len))",
      "right" : "if (isTooLarge(len))",
      "info" : "IfStatement[8886-9041]:IfStatement[8886-9041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8907-9041]:Block[8907-9041]"
    }, {
      "left" : "throw new FileTooBigException(\"Attempt to load '\" + file + \"' in memory buffer, file length is \" + len + \" bytes.\");",
      "right" : "throw new FileTooBigException(\"Attempt to load '\" + file + \"' in memory buffer, file length is \" + len + \" bytes.\");",
      "info" : "ThrowStatement[8917-9033]:ThrowStatement[8917-9033]"
    }, {
      "left" : "bytes = loadBytes(stream, (int)len);",
      "right" : "bytes = loadBytes(stream, (int)len);",
      "info" : "ExpressionStatement[9049-9085]:ExpressionStatement[9049-9085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9104-9133]:Block[9104-9133]"
    }, {
      "left" : "stream.close();",
      "right" : "stream.close();",
      "info" : "ExpressionStatement[9112-9127]:ExpressionStatement[9112-9127]"
    }, {
      "left" : "return bytes;",
      "right" : "return bytes;",
      "info" : "ReturnStatement[9138-9151]:ReturnStatement[9138-9151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9307-9605]:Block[9307-9605]"
    }, {
      "left" : "final byte[] bytes = BUFFER.get();",
      "right" : "final byte[] bytes = BUFFER.get();",
      "info" : "VariableDeclarationStatement[9313-9347]:VariableDeclarationStatement[9313-9347]"
    }, {
      "left" : "assert bytes.length >= length : \"Cannot process more than \" + bytes.length + \" in one call, requested:\" + length;",
      "right" : "assert bytes.length >= length : \"Cannot process more than \" + bytes.length + \" in one call, requested:\" + length;",
      "info" : "AssertStatement[9352-9465]:AssertStatement[9352-9465]"
    }, {
      "left" : "int n = stream.read(bytes, 0, length);",
      "right" : "int n = stream.read(bytes, 0, length);",
      "info" : "VariableDeclarationStatement[9471-9509]:VariableDeclarationStatement[9471-9509]"
    }, {
      "left" : "if (n <= 0)",
      "right" : "if (n <= 0)",
      "info" : "IfStatement[9514-9539]:IfStatement[9514-9539]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9526-9539]:ReturnStatement[9526-9539]"
    }, {
      "left" : "return processor.process(new ByteSequence(bytes, 0, n));",
      "right" : "return processor.process(new ByteSequence(bytes, 0, n));",
      "info" : "ReturnStatement[9545-9601]:ReturnStatement[9545-9601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9714-10061]:Block[9714-10061]"
    }, {
      "left" : "ByteArrayOutputStream buffer = new ByteArrayOutputStream();",
      "right" : "ByteArrayOutputStream buffer = new ByteArrayOutputStream();",
      "info" : "VariableDeclarationStatement[9720-9779]:VariableDeclarationStatement[9720-9779]"
    }, {
      "left" : "final byte[] bytes = BUFFER.get();",
      "right" : "final byte[] bytes = BUFFER.get();",
      "info" : "VariableDeclarationStatement[9784-9818]:VariableDeclarationStatement[9784-9818]"
    }, {
      "left" : "while (maxLength > 0)",
      "right" : "while (maxLength > 0)",
      "info" : "WhileStatement[9823-10004]:WhileStatement[9823-10004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9845-10004]:Block[9845-10004]"
    }, {
      "left" : "int n = stream.read(bytes, 0, Math.min(maxLength, bytes.length));",
      "right" : "int n = stream.read(bytes, 0, Math.min(maxLength, bytes.length));",
      "info" : "VariableDeclarationStatement[9853-9918]:VariableDeclarationStatement[9853-9918]"
    }, {
      "left" : "if (n <= 0)",
      "right" : "if (n <= 0)",
      "info" : "IfStatement[9925-9943]:IfStatement[9925-9943]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9937-9943]:BreakStatement[9937-9943]"
    }, {
      "left" : "buffer.write(bytes, 0, n);",
      "right" : "buffer.write(bytes, 0, n);",
      "info" : "ExpressionStatement[9950-9976]:ExpressionStatement[9950-9976]"
    }, {
      "left" : "maxLength -= n;",
      "right" : "maxLength -= n;",
      "info" : "ExpressionStatement[9983-9998]:ExpressionStatement[9983-9998]"
    }, {
      "left" : "buffer.close();",
      "right" : "buffer.close();",
      "info" : "ExpressionStatement[10009-10024]:ExpressionStatement[10009-10024]"
    }, {
      "left" : "return buffer.toByteArray();",
      "right" : "return buffer.toByteArray();",
      "info" : "ReturnStatement[10029-10057]:ReturnStatement[10029-10057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10162-10281]:Block[10162-10281]"
    }, {
      "left" : "return loadTextAndClose(new InputStreamReader(stream));",
      "right" : "return loadTextAndClose(new InputStreamReader(stream));",
      "info" : "ReturnStatement[10222-10277]:ReturnStatement[10222-10277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10377-10507]:Block[10377-10507]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10383-10503]:TryStatement[10383-10503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10387-10461]:Block[10387-10461]"
    }, {
      "left" : "return StringFactory.createShared(adaptiveLoadText(reader));",
      "right" : "return StringFactory.createShared(adaptiveLoadText(reader));",
      "info" : "ReturnStatement[10395-10455]:ReturnStatement[10395-10455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10474-10503]:Block[10474-10503]"
    }, {
      "left" : "reader.close();",
      "right" : "reader.close();",
      "info" : "ExpressionStatement[10482-10497]:ExpressionStatement[10482-10497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10603-11554]:Block[10603-11554]"
    }, {
      "left" : "char[] chars = new char[4096];",
      "right" : "char[] chars = new char[4096];",
      "info" : "VariableDeclarationStatement[10609-10639]:VariableDeclarationStatement[10609-10639]"
    }, {
      "left" : "List<char[]> buffers = null;",
      "right" : "List<char[]> buffers = null;",
      "info" : "VariableDeclarationStatement[10644-10672]:VariableDeclarationStatement[10644-10672]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[10677-10691]:VariableDeclarationStatement[10677-10691]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[10696-10710]:VariableDeclarationStatement[10696-10710]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[10715-11230]:WhileStatement[10715-11230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10728-11230]:Block[10728-11230]"
    }, {
      "left" : "int n = reader.read(chars, count, chars.length - count);",
      "right" : "int n = reader.read(chars, count, chars.length - count);",
      "info" : "VariableDeclarationStatement[10736-10792]:VariableDeclarationStatement[10736-10792]"
    }, {
      "left" : "if (n <= 0)",
      "right" : "if (n <= 0)",
      "info" : "IfStatement[10799-10817]:IfStatement[10799-10817]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10811-10817]:BreakStatement[10811-10817]"
    }, {
      "left" : "count += n;",
      "right" : "count += n;",
      "info" : "ExpressionStatement[10824-10835]:ExpressionStatement[10824-10835]"
    }, {
      "left" : "if (total > 1024 * 1024 * 10)",
      "right" : "if (total > 1024 * 1024 * 10)",
      "info" : "IfStatement[10842-10928]:IfStatement[10842-10928]"
    }, {
      "left" : "throw new FileTooBigException(\"File too big \" + reader);",
      "right" : "throw new FileTooBigException(\"File too big \" + reader);",
      "info" : "ThrowStatement[10872-10928]:ThrowStatement[10872-10928]"
    }, {
      "left" : "total += n;",
      "right" : "total += n;",
      "info" : "ExpressionStatement[10935-10946]:ExpressionStatement[10935-10946]"
    }, {
      "left" : "if (count == chars.length)",
      "right" : "if (count == chars.length)",
      "info" : "IfStatement[10953-11224]:IfStatement[10953-11224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10980-11224]:Block[10980-11224]"
    }, {
      "left" : "if (buffers == null)",
      "right" : "if (buffers == null)",
      "info" : "IfStatement[10990-11067]:IfStatement[10990-11067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11011-11067]:Block[11011-11067]"
    }, {
      "left" : "buffers = new ArrayList<char[]>();",
      "right" : "buffers = new ArrayList<char[]>();",
      "info" : "ExpressionStatement[11023-11057]:ExpressionStatement[11023-11057]"
    }, {
      "left" : "buffers.add(chars);",
      "right" : "buffers.add(chars);",
      "info" : "ExpressionStatement[11076-11095]:ExpressionStatement[11076-11095]"
    }, {
      "left" : "int newLength = Math.min(1024 * 1024, chars.length * 2);",
      "right" : "int newLength = Math.min(1024 * 1024, chars.length * 2);",
      "info" : "VariableDeclarationStatement[11104-11160]:VariableDeclarationStatement[11104-11160]"
    }, {
      "left" : "chars = new char[newLength];",
      "right" : "chars = new char[newLength];",
      "info" : "ExpressionStatement[11169-11197]:ExpressionStatement[11169-11197]"
    }, {
      "left" : "count = 0;",
      "right" : "count = 0;",
      "info" : "ExpressionStatement[11206-11216]:ExpressionStatement[11206-11216]"
    }, {
      "left" : "char[] result = new char[total];",
      "right" : "char[] result = new char[total];",
      "info" : "VariableDeclarationStatement[11235-11267]:VariableDeclarationStatement[11235-11267]"
    }, {
      "left" : "if (buffers != null)",
      "right" : "if (buffers != null)",
      "info" : "IfStatement[11272-11461]:IfStatement[11272-11461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11293-11461]:Block[11293-11461]"
    }, {
      "left" : "for (char[] buffer : buffers)",
      "right" : "for (char[] buffer : buffers)",
      "info" : "EnhancedForStatement[11301-11455]:EnhancedForStatement[11301-11455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11331-11455]:Block[11331-11455]"
    }, {
      "left" : "System.arraycopy(buffer, 0, result, result.length - total, buffer.length);",
      "right" : "System.arraycopy(buffer, 0, result, result.length - total, buffer.length);",
      "info" : "ExpressionStatement[11341-11415]:ExpressionStatement[11341-11415]"
    }, {
      "left" : "total -= buffer.length;",
      "right" : "total -= buffer.length;",
      "info" : "ExpressionStatement[11424-11447]:ExpressionStatement[11424-11447]"
    }, {
      "left" : "System.arraycopy(chars, 0, result, result.length - total, total);",
      "right" : "System.arraycopy(chars, 0, result, result.length - total, total);",
      "info" : "ExpressionStatement[11466-11531]:ExpressionStatement[11466-11531]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11536-11550]:ReturnStatement[11536-11550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11656-12607]:Block[11656-12607]"
    }, {
      "left" : "byte[] bytes = new byte[4096];",
      "right" : "byte[] bytes = new byte[4096];",
      "info" : "VariableDeclarationStatement[11662-11692]:VariableDeclarationStatement[11662-11692]"
    }, {
      "left" : "List<byte[]> buffers = null;",
      "right" : "List<byte[]> buffers = null;",
      "info" : "VariableDeclarationStatement[11697-11725]:VariableDeclarationStatement[11697-11725]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[11730-11744]:VariableDeclarationStatement[11730-11744]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[11749-11763]:VariableDeclarationStatement[11749-11763]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[11768-12283]:WhileStatement[11768-12283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11781-12283]:Block[11781-12283]"
    }, {
      "left" : "int n = stream.read(bytes, count, bytes.length - count);",
      "right" : "int n = stream.read(bytes, count, bytes.length - count);",
      "info" : "VariableDeclarationStatement[11789-11845]:VariableDeclarationStatement[11789-11845]"
    }, {
      "left" : "if (n <= 0)",
      "right" : "if (n <= 0)",
      "info" : "IfStatement[11852-11870]:IfStatement[11852-11870]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11864-11870]:BreakStatement[11864-11870]"
    }, {
      "left" : "count += n;",
      "right" : "count += n;",
      "info" : "ExpressionStatement[11877-11888]:ExpressionStatement[11877-11888]"
    }, {
      "left" : "if (total > 1024 * 1024 * 10)",
      "right" : "if (total > 1024 * 1024 * 10)",
      "info" : "IfStatement[11895-11981]:IfStatement[11895-11981]"
    }, {
      "left" : "throw new FileTooBigException(\"File too big \" + stream);",
      "right" : "throw new FileTooBigException(\"File too big \" + stream);",
      "info" : "ThrowStatement[11925-11981]:ThrowStatement[11925-11981]"
    }, {
      "left" : "total += n;",
      "right" : "total += n;",
      "info" : "ExpressionStatement[11988-11999]:ExpressionStatement[11988-11999]"
    }, {
      "left" : "if (count == bytes.length)",
      "right" : "if (count == bytes.length)",
      "info" : "IfStatement[12006-12277]:IfStatement[12006-12277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12033-12277]:Block[12033-12277]"
    }, {
      "left" : "if (buffers == null)",
      "right" : "if (buffers == null)",
      "info" : "IfStatement[12043-12120]:IfStatement[12043-12120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12064-12120]:Block[12064-12120]"
    }, {
      "left" : "buffers = new ArrayList<byte[]>();",
      "right" : "buffers = new ArrayList<byte[]>();",
      "info" : "ExpressionStatement[12076-12110]:ExpressionStatement[12076-12110]"
    }, {
      "left" : "buffers.add(bytes);",
      "right" : "buffers.add(bytes);",
      "info" : "ExpressionStatement[12129-12148]:ExpressionStatement[12129-12148]"
    }, {
      "left" : "int newLength = Math.min(1024 * 1024, bytes.length * 2);",
      "right" : "int newLength = Math.min(1024 * 1024, bytes.length * 2);",
      "info" : "VariableDeclarationStatement[12157-12213]:VariableDeclarationStatement[12157-12213]"
    }, {
      "left" : "bytes = new byte[newLength];",
      "right" : "bytes = new byte[newLength];",
      "info" : "ExpressionStatement[12222-12250]:ExpressionStatement[12222-12250]"
    }, {
      "left" : "count = 0;",
      "right" : "count = 0;",
      "info" : "ExpressionStatement[12259-12269]:ExpressionStatement[12259-12269]"
    }, {
      "left" : "byte[] result = new byte[total];",
      "right" : "byte[] result = new byte[total];",
      "info" : "VariableDeclarationStatement[12288-12320]:VariableDeclarationStatement[12288-12320]"
    }, {
      "left" : "if (buffers != null)",
      "right" : "if (buffers != null)",
      "info" : "IfStatement[12325-12514]:IfStatement[12325-12514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12346-12514]:Block[12346-12514]"
    }, {
      "left" : "for (byte[] buffer : buffers)",
      "right" : "for (byte[] buffer : buffers)",
      "info" : "EnhancedForStatement[12354-12508]:EnhancedForStatement[12354-12508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12384-12508]:Block[12384-12508]"
    }, {
      "left" : "System.arraycopy(buffer, 0, result, result.length - total, buffer.length);",
      "right" : "System.arraycopy(buffer, 0, result, result.length - total, buffer.length);",
      "info" : "ExpressionStatement[12394-12468]:ExpressionStatement[12394-12468]"
    }, {
      "left" : "total -= buffer.length;",
      "right" : "total -= buffer.length;",
      "info" : "ExpressionStatement[12477-12500]:ExpressionStatement[12477-12500]"
    }, {
      "left" : "System.arraycopy(bytes, 0, result, result.length - total, total);",
      "right" : "System.arraycopy(bytes, 0, result, result.length - total, total);",
      "info" : "ExpressionStatement[12519-12584]:ExpressionStatement[12519-12584]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[12589-12603]:ReturnStatement[12589-12603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12681-12739]:Block[12681-12739]"
    }, {
      "left" : "return asyncDelete(Collections.singleton(file));",
      "right" : "return asyncDelete(Collections.singleton(file));",
      "info" : "ReturnStatement[12687-12735]:ReturnStatement[12687-12735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12826-13207]:Block[12826-13207]"
    }, {
      "left" : "List<File> tempFiles = new ArrayList<File>();",
      "right" : "List<File> tempFiles = new ArrayList<File>();",
      "info" : "VariableDeclarationStatement[12832-12877]:VariableDeclarationStatement[12832-12877]"
    }, {
      "left" : "for (File file : files)",
      "right" : "for (File file : files)",
      "info" : "EnhancedForStatement[12882-13044]:EnhancedForStatement[12882-13044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12906-13044]:Block[12906-13044]"
    }, {
      "left" : "final File tempFile = renameToTempFileOrDelete(file);",
      "right" : "final File tempFile = renameToTempFileOrDelete(file);",
      "info" : "VariableDeclarationStatement[12914-12967]:VariableDeclarationStatement[12914-12967]"
    }, {
      "left" : "if (tempFile != null)",
      "right" : "if (tempFile != null)",
      "info" : "IfStatement[12974-13038]:IfStatement[12974-13038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12996-13038]:Block[12996-13038]"
    }, {
      "left" : "tempFiles.add(tempFile);",
      "right" : "tempFiles.add(tempFile);",
      "info" : "ExpressionStatement[13006-13030]:ExpressionStatement[13006-13030]"
    }, {
      "left" : "if (!tempFiles.isEmpty())",
      "right" : "if (!tempFiles.isEmpty())",
      "info" : "IfStatement[13049-13163]:IfStatement[13049-13163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13075-13163]:Block[13075-13163]"
    }, {
      "left" : "return startDeletionThread(tempFiles.toArray(new File[tempFiles.size()]));",
      "right" : "return startDeletionThread(tempFiles.toArray(new File[tempFiles.size()]));",
      "info" : "ReturnStatement[13083-13157]:ReturnStatement[13083-13157]"
    }, {
      "left" : "return new FixedFuture<Void>(null);",
      "right" : "return new FixedFuture<Void>(null);",
      "info" : "ReturnStatement[13168-13203]:ReturnStatement[13168-13203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13293-14446]:Block[13293-14446]"
    }, {
      "left" : "final RunnableFuture<Void> deleteFilesTask = new FutureTask<Void>(new Runnable() {\n      @Override\n      public void run() {\n        final Thread currentThread = Thread.currentThread();\n        final int priority = currentThread.getPriority();\n        currentThread.setPriority(Thread.MIN_PRIORITY);\n        try {\n          for (File tempFile : tempFiles) {\n            delete(tempFile);\n          }\n        }\n        finally {\n          currentThread.setPriority(priority);\n        }\n      }\n    }, null);",
      "right" : "final RunnableFuture<Void> deleteFilesTask = new FutureTask<Void>(new Runnable() {\n      @Override\n      public void run() {\n        final Thread currentThread = Thread.currentThread();\n        final int priority = currentThread.getPriority();\n        currentThread.setPriority(Thread.MIN_PRIORITY);\n        try {\n          for (File tempFile : tempFiles) {\n            delete(tempFile);\n          }\n        }\n        finally {\n          currentThread.setPriority(priority);\n        }\n      }\n    }, null);",
      "info" : "VariableDeclarationStatement[13299-13805]:VariableDeclarationStatement[13299-13805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13422-13791]:Block[13422-13791]"
    }, {
      "left" : "final Thread currentThread = Thread.currentThread();",
      "right" : "final Thread currentThread = Thread.currentThread();",
      "info" : "VariableDeclarationStatement[13432-13484]:VariableDeclarationStatement[13432-13484]"
    }, {
      "left" : "final int priority = currentThread.getPriority();",
      "right" : "final int priority = currentThread.getPriority();",
      "info" : "VariableDeclarationStatement[13493-13542]:VariableDeclarationStatement[13493-13542]"
    }, {
      "left" : "currentThread.setPriority(Thread.MIN_PRIORITY);",
      "right" : "currentThread.setPriority(Thread.MIN_PRIORITY);",
      "info" : "ExpressionStatement[13551-13598]:ExpressionStatement[13551-13598]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13607-13783]:TryStatement[13607-13783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13611-13708]:Block[13611-13708]"
    }, {
      "left" : "for (File tempFile : tempFiles)",
      "right" : "for (File tempFile : tempFiles)",
      "info" : "EnhancedForStatement[13623-13698]:EnhancedForStatement[13623-13698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13655-13698]:Block[13655-13698]"
    }, {
      "left" : "delete(tempFile);",
      "right" : "delete(tempFile);",
      "info" : "ExpressionStatement[13669-13686]:ExpressionStatement[13669-13686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13725-13783]:Block[13725-13783]"
    }, {
      "left" : "currentThread.setPriority(priority);",
      "right" : "currentThread.setPriority(priority);",
      "info" : "ExpressionStatement[13737-13773]:ExpressionStatement[13737-13773]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13811-14414]:TryStatement[13811-14414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13815-14309]:Block[13815-14309]"
    }, {
      "left" : "final Class<?> aClass = Class.forName(\"com.intellij.openapi.application.ApplicationManager\");",
      "right" : "final Class<?> aClass = Class.forName(\"com.intellij.openapi.application.ApplicationManager\");",
      "info" : "VariableDeclarationStatement[13868-13961]:VariableDeclarationStatement[13868-13961]"
    }, {
      "left" : "final Method getApplicationMethod = aClass.getMethod(\"getApplication\");",
      "right" : "final Method getApplicationMethod = aClass.getMethod(\"getApplication\");",
      "info" : "VariableDeclarationStatement[13968-14039]:VariableDeclarationStatement[13968-14039]"
    }, {
      "left" : "final Object application = getApplicationMethod.invoke(null);",
      "right" : "final Object application = getApplicationMethod.invoke(null);",
      "info" : "VariableDeclarationStatement[14046-14107]:VariableDeclarationStatement[14046-14107]"
    }, {
      "left" : "final Method executeOnPooledThreadMethod = application.getClass().getMethod(\"executeOnPooledThread\", Runnable.class);",
      "right" : "final Method executeOnPooledThreadMethod = application.getClass().getMethod(\"executeOnPooledThread\", Runnable.class);",
      "info" : "VariableDeclarationStatement[14114-14231]:VariableDeclarationStatement[14114-14231]"
    }, {
      "left" : "executeOnPooledThreadMethod.invoke(application, deleteFilesTask);",
      "right" : "executeOnPooledThreadMethod.invoke(application, deleteFilesTask);",
      "info" : "ExpressionStatement[14238-14303]:ExpressionStatement[14238-14303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14340-14414]:Block[14340-14414]"
    }, {
      "left" : "new Thread(deleteFilesTask, \"File deletion thread\").start();",
      "right" : "new Thread(deleteFilesTask, \"File deletion thread\").start();",
      "info" : "ExpressionStatement[14348-14408]:ExpressionStatement[14348-14408]"
    }, {
      "left" : "return deleteFilesTask;",
      "right" : "return deleteFilesTask;",
      "info" : "ReturnStatement[14419-14442]:ReturnStatement[14419-14442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14527-15169]:Block[14527-15169]"
    }, {
      "left" : "String tempDir = getTempDirectory();",
      "right" : "String tempDir = getTempDirectory();",
      "info" : "VariableDeclarationStatement[14533-14569]:VariableDeclarationStatement[14533-14569]"
    }, {
      "left" : "boolean isSameDrive = true;",
      "right" : "boolean isSameDrive = true;",
      "info" : "VariableDeclarationStatement[14574-14601]:VariableDeclarationStatement[14574-14601]"
    }, {
      "left" : "if (SystemInfo.isWindows)",
      "right" : "if (SystemInfo.isWindows)",
      "info" : "IfStatement[14606-14819]:IfStatement[14606-14819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14632-14819]:Block[14632-14819]"
    }, {
      "left" : "String tempDirDrive = tempDir.substring(0, 2);",
      "right" : "String tempDirDrive = tempDir.substring(0, 2);",
      "info" : "VariableDeclarationStatement[14640-14686]:VariableDeclarationStatement[14640-14686]"
    }, {
      "left" : "String fileDrive = file.getAbsolutePath().substring(0, 2);",
      "right" : "String fileDrive = file.getAbsolutePath().substring(0, 2);",
      "info" : "VariableDeclarationStatement[14693-14751]:VariableDeclarationStatement[14693-14751]"
    }, {
      "left" : "isSameDrive = tempDirDrive.equalsIgnoreCase(fileDrive);",
      "right" : "isSameDrive = tempDirDrive.equalsIgnoreCase(fileDrive);",
      "info" : "ExpressionStatement[14758-14813]:ExpressionStatement[14758-14813]"
    }, {
      "left" : "if (isSameDrive)",
      "right" : "if (isSameDrive)",
      "info" : "IfStatement[14825-15128]:IfStatement[14825-15128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14842-15128]:Block[14842-15128]"
    }, {
      "left" : "final String originalFileName = file.getName();",
      "right" : "final String originalFileName = file.getName();",
      "info" : "VariableDeclarationStatement[14943-14990]:VariableDeclarationStatement[14943-14990]"
    }, {
      "left" : "File tempFile = getTempFile(originalFileName, tempDir);",
      "right" : "File tempFile = getTempFile(originalFileName, tempDir);",
      "info" : "VariableDeclarationStatement[14997-15052]:VariableDeclarationStatement[14997-15052]"
    }, {
      "left" : "if (file.renameTo(tempFile))",
      "right" : "if (file.renameTo(tempFile))",
      "info" : "IfStatement[15059-15122]:IfStatement[15059-15122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15088-15122]:Block[15088-15122]"
    }, {
      "left" : "return tempFile;",
      "right" : "return tempFile;",
      "info" : "ReturnStatement[15098-15114]:ReturnStatement[15098-15114]"
    }, {
      "left" : "delete(file);",
      "right" : "delete(file);",
      "info" : "ExpressionStatement[15134-15147]:ExpressionStatement[15134-15147]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15153-15165]:ReturnStatement[15153-15165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15263-15555]:Block[15263-15555]"
    }, {
      "left" : "int randomSuffix = (int)(System.currentTimeMillis() % 1000);",
      "right" : "int randomSuffix = (int)(System.currentTimeMillis() % 1000);",
      "info" : "VariableDeclarationStatement[15269-15329]:VariableDeclarationStatement[15269-15329]"
    }, {
      "left" : "for (int i = randomSuffix; ; i++)",
      "right" : "for (int i = randomSuffix; ; i++)",
      "info" : "ForStatement[15334-15551]:ForStatement[15334-15551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15368-15551]:Block[15368-15551]"
    }, {
      "left" : "@NonNls String name = \"___\" + originalFileName + i + ASYNC_DELETE_EXTENSION;",
      "right" : "@NonNls String name = \"___\" + originalFileName + i + ASYNC_DELETE_EXTENSION;",
      "info" : "VariableDeclarationStatement[15376-15452]:VariableDeclarationStatement[15376-15452]"
    }, {
      "left" : "File tempFile = new File(parent, name);",
      "right" : "File tempFile = new File(parent, name);",
      "info" : "VariableDeclarationStatement[15459-15498]:VariableDeclarationStatement[15459-15498]"
    }, {
      "left" : "if (!tempFile.exists())",
      "right" : "if (!tempFile.exists())",
      "info" : "IfStatement[15505-15545]:IfStatement[15505-15545]"
    }, {
      "left" : "return tempFile;",
      "right" : "return tempFile;",
      "info" : "ReturnStatement[15529-15545]:ReturnStatement[15529-15545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15608-15731]:Block[15608-15731]"
    }, {
      "left" : "if (NIOReflect.IS_AVAILABLE)",
      "right" : "if (NIOReflect.IS_AVAILABLE)",
      "info" : "IfStatement[15614-15691]:IfStatement[15614-15691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15643-15691]:Block[15643-15691]"
    }, {
      "left" : "return deleteRecursivelyNIO(file);",
      "right" : "return deleteRecursivelyNIO(file);",
      "info" : "ReturnStatement[15651-15685]:ReturnStatement[15651-15685]"
    }, {
      "left" : "return deleteRecursively(file);",
      "right" : "return deleteRecursively(file);",
      "info" : "ReturnStatement[15696-15727]:ReturnStatement[15696-15727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15796-16184]:Block[15796-16184]"
    }, {
      "left" : "FileAttributes attributes = FileSystemUtil.getAttributes(file);",
      "right" : "FileAttributes attributes = FileSystemUtil.getAttributes(file);",
      "info" : "VariableDeclarationStatement[15802-15865]:VariableDeclarationStatement[15802-15865]"
    }, {
      "left" : "if (attributes == null)",
      "right" : "if (attributes == null)",
      "info" : "IfStatement[15870-15906]:IfStatement[15870-15906]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15894-15906]:ReturnStatement[15894-15906]"
    }, {
      "left" : "if (attributes.isDirectory() && !attributes.isSymLink())",
      "right" : "if (attributes.isDirectory() && !attributes.isSymLink())",
      "info" : "IfStatement[15912-16150]:IfStatement[15912-16150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15969-16150]:Block[15969-16150]"
    }, {
      "left" : "File[] files = file.listFiles();",
      "right" : "File[] files = file.listFiles();",
      "info" : "VariableDeclarationStatement[15977-16009]:VariableDeclarationStatement[15977-16009]"
    }, {
      "left" : "if (files != null)",
      "right" : "if (files != null)",
      "info" : "IfStatement[16016-16144]:IfStatement[16016-16144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16035-16144]:Block[16035-16144]"
    }, {
      "left" : "for (File child : files)",
      "right" : "for (File child : files)",
      "info" : "EnhancedForStatement[16045-16136]:EnhancedForStatement[16045-16136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16070-16136]:Block[16070-16136]"
    }, {
      "left" : "if (!deleteRecursively(child))",
      "right" : "if (!deleteRecursively(child))",
      "info" : "IfStatement[16082-16126]:IfStatement[16082-16126]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16113-16126]:ReturnStatement[16113-16126]"
    }, {
      "left" : "return deleteFile(file);",
      "right" : "return deleteFile(file);",
      "info" : "ReturnStatement[16156-16180]:ReturnStatement[16156-16180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16247-16298]:Block[16247-16298]"
    }, {
      "left" : "return FileUtilRt.createParentDirs(file);",
      "right" : "return FileUtilRt.createParentDirs(file);",
      "info" : "ReturnStatement[16253-16294]:ReturnStatement[16253-16294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16360-16410]:Block[16360-16410]"
    }, {
      "left" : "return FileUtilRt.createDirectory(path);",
      "right" : "return FileUtilRt.createDirectory(path);",
      "info" : "ReturnStatement[16366-16406]:ReturnStatement[16366-16406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16476-16528]:Block[16476-16528]"
    }, {
      "left" : "return FileUtilRt.createIfNotExists(file);",
      "right" : "return FileUtilRt.createIfNotExists(file);",
      "info" : "ReturnStatement[16482-16524]:ReturnStatement[16482-16524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16594-16648]:Block[16594-16648]"
    }, {
      "left" : "return FileUtilRt.ensureCanCreateFile(file);",
      "right" : "return FileUtilRt.ensureCanCreateFile(file);",
      "info" : "ReturnStatement[16600-16644]:ReturnStatement[16600-16644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16741-16787]:Block[16741-16787]"
    }, {
      "left" : "performCopy(fromFile, toFile, true);",
      "right" : "performCopy(fromFile, toFile, true);",
      "info" : "ExpressionStatement[16747-16783]:ExpressionStatement[16747-16783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16887-16934]:Block[16887-16934]"
    }, {
      "left" : "performCopy(fromFile, toFile, false);",
      "right" : "performCopy(fromFile, toFile, false);",
      "info" : "ExpressionStatement[16893-16930]:ExpressionStatement[16893-16930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17064-18102]:Block[17064-18102]"
    }, {
      "left" : "final FileOutputStream fos;",
      "right" : "final FileOutputStream fos;",
      "info" : "VariableDeclarationStatement[17070-17097]:VariableDeclarationStatement[17070-17097]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17102-17397]:TryStatement[17102-17397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17106-17151]:Block[17106-17151]"
    }, {
      "left" : "fos = openOutputStream(toFile);",
      "right" : "fos = openOutputStream(toFile);",
      "info" : "ExpressionStatement[17114-17145]:ExpressionStatement[17114-17145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17178-17397]:Block[17178-17397]"
    }, {
      "left" : "if (SystemInfo.isWindows && e.getMessage() != null && e.getMessage().contains(\"denied\") &&\n          WinUACTemporaryFix.nativeCopy(fromFile, toFile, syncTimestamp))",
      "right" : "if (SystemInfo.isWindows && e.getMessage() != null && e.getMessage().contains(\"denied\") &&\n          WinUACTemporaryFix.nativeCopy(fromFile, toFile, syncTimestamp))",
      "info" : "IfStatement[17186-17376]:IfStatement[17186-17376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17351-17376]:Block[17351-17376]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17361-17368]:ReturnStatement[17361-17368]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[17383-17391]:ThrowStatement[17383-17391]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17403-17607]:TryStatement[17403-17607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17407-17568]:Block[17407-17568]"
    }, {
      "left" : "final FileInputStream fis = new FileInputStream(fromFile);",
      "right" : "final FileInputStream fis = new FileInputStream(fromFile);",
      "info" : "VariableDeclarationStatement[17415-17473]:VariableDeclarationStatement[17415-17473]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17480-17562]:TryStatement[17480-17562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17484-17517]:Block[17484-17517]"
    }, {
      "left" : "copy(fis, fos);",
      "right" : "copy(fis, fos);",
      "info" : "ExpressionStatement[17494-17509]:ExpressionStatement[17494-17509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17532-17562]:Block[17532-17562]"
    }, {
      "left" : "fis.close();",
      "right" : "fis.close();",
      "info" : "ExpressionStatement[17542-17554]:ExpressionStatement[17542-17554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17581-17607]:Block[17581-17607]"
    }, {
      "left" : "fos.close();",
      "right" : "fos.close();",
      "info" : "ExpressionStatement[17589-17601]:ExpressionStatement[17589-17601]"
    }, {
      "left" : "if (syncTimestamp)",
      "right" : "if (syncTimestamp)",
      "info" : "IfStatement[17613-17951]:IfStatement[17613-17951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17632-17951]:Block[17632-17951]"
    }, {
      "left" : "final long timeStamp = fromFile.lastModified();",
      "right" : "final long timeStamp = fromFile.lastModified();",
      "info" : "VariableDeclarationStatement[17640-17687]:VariableDeclarationStatement[17640-17687]"
    }, {
      "left" : "if (timeStamp < 0)",
      "right" : "if (timeStamp < 0)",
      "info" : "IfStatement[17694-17945]:IfStatement[17694-17945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17713-17801]:Block[17713-17801]"
    }, {
      "left" : "LOG.warn(\"Invalid timestamp \" + timeStamp + \" of '\" + fromFile + \"'\");",
      "right" : "LOG.warn(\"Invalid timestamp \" + timeStamp + \" of '\" + fromFile + \"'\");",
      "info" : "ExpressionStatement[17723-17793]:ExpressionStatement[17723-17793]"
    }, {
      "left" : "if (!toFile.setLastModified(timeStamp))",
      "right" : "if (!toFile.setLastModified(timeStamp))",
      "info" : "IfStatement[17813-17945]:IfStatement[17813-17945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17853-17945]:Block[17853-17945]"
    }, {
      "left" : "LOG.warn(\"Unable to set timestamp \" + timeStamp + \" to '\" + toFile + \"'\");",
      "right" : "LOG.warn(\"Unable to set timestamp \" + timeStamp + \" to '\" + toFile + \"'\");",
      "info" : "ExpressionStatement[17863-17937]:ExpressionStatement[17863-17937]"
    }, {
      "left" : "if (SystemInfo.isUnix && fromFile.canExecute())",
      "right" : "if (SystemInfo.isUnix && fromFile.canExecute())",
      "info" : "IfStatement[17957-18098]:IfStatement[17957-18098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18005-18098]:Block[18005-18098]"
    }, {
      "left" : "FileSystemUtil.clonePermissionsToExecute(fromFile.getPath(), toFile.getPath());",
      "right" : "FileSystemUtil.clonePermissionsToExecute(fromFile.getPath(), toFile.getPath());",
      "info" : "ExpressionStatement[18013-18092]:ExpressionStatement[18013-18092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18200-18548]:Block[18200-18548]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18206-18544]:TryStatement[18206-18544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18210-18258]:Block[18210-18258]"
    }, {
      "left" : "return new FileOutputStream(file);",
      "right" : "return new FileOutputStream(file);",
      "info" : "ReturnStatement[18218-18252]:ReturnStatement[18218-18252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18295-18544]:Block[18295-18544]"
    }, {
      "left" : "final File parentFile = file.getParentFile();",
      "right" : "final File parentFile = file.getParentFile();",
      "info" : "VariableDeclarationStatement[18303-18348]:VariableDeclarationStatement[18303-18348]"
    }, {
      "left" : "if (parentFile == null)",
      "right" : "if (parentFile == null)",
      "info" : "IfStatement[18355-18467]:IfStatement[18355-18467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18379-18467]:Block[18379-18467]"
    }, {
      "left" : "throw new IOException(\"Parent file is null for \" + file.getPath(), e);",
      "right" : "throw new IOException(\"Parent file is null for \" + file.getPath(), e);",
      "info" : "ThrowStatement[18389-18459]:ThrowStatement[18389-18459]"
    }, {
      "left" : "createParentDirs(file);",
      "right" : "createParentDirs(file);",
      "info" : "ExpressionStatement[18474-18497]:ExpressionStatement[18474-18497]"
    }, {
      "left" : "return new FileOutputStream(file);",
      "right" : "return new FileOutputStream(file);",
      "info" : "ReturnStatement[18504-18538]:ReturnStatement[18504-18538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18665-18718]:Block[18665-18718]"
    }, {
      "left" : "FileUtilRt.copy(inputStream, outputStream);",
      "right" : "FileUtilRt.copy(inputStream, outputStream);",
      "info" : "ExpressionStatement[18671-18714]:ExpressionStatement[18671-18714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18848-19121]:Block[18848-19121]"
    }, {
      "left" : "final byte[] buffer = BUFFER.get();",
      "right" : "final byte[] buffer = BUFFER.get();",
      "info" : "VariableDeclarationStatement[18854-18889]:VariableDeclarationStatement[18854-18889]"
    }, {
      "left" : "int toRead = maxSize;",
      "right" : "int toRead = maxSize;",
      "info" : "VariableDeclarationStatement[18894-18915]:VariableDeclarationStatement[18894-18915]"
    }, {
      "left" : "while (toRead > 0)",
      "right" : "while (toRead > 0)",
      "info" : "WhileStatement[18920-19117]:WhileStatement[18920-19117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18939-19117]:Block[18939-19117]"
    }, {
      "left" : "int read = inputStream.read(buffer, 0, Math.min(buffer.length, toRead));",
      "right" : "int read = inputStream.read(buffer, 0, Math.min(buffer.length, toRead));",
      "info" : "VariableDeclarationStatement[18947-19019]:VariableDeclarationStatement[18947-19019]"
    }, {
      "left" : "if (read < 0)",
      "right" : "if (read < 0)",
      "info" : "IfStatement[19026-19046]:IfStatement[19026-19046]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19040-19046]:BreakStatement[19040-19046]"
    }, {
      "left" : "toRead -= read;",
      "right" : "toRead -= read;",
      "info" : "ExpressionStatement[19053-19068]:ExpressionStatement[19053-19068]"
    }, {
      "left" : "outputStream.write(buffer, 0, read);",
      "right" : "outputStream.write(buffer, 0, read);",
      "info" : "ExpressionStatement[19075-19111]:ExpressionStatement[19075-19111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19215-19255]:Block[19215-19255]"
    }, {
      "left" : "copyDir(fromDir, toDir, true);",
      "right" : "copyDir(fromDir, toDir, true);",
      "info" : "ExpressionStatement[19221-19251]:ExpressionStatement[19221-19251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19623-19938]:Block[19623-19938]"
    }, {
      "left" : "File[] children = ObjectUtils.notNull(fromDir.listFiles(), ArrayUtil.EMPTY_FILE_ARRAY);",
      "right" : "File[] children = ObjectUtils.notNull(fromDir.listFiles(), ArrayUtil.EMPTY_FILE_ARRAY);",
      "info" : "VariableDeclarationStatement[19629-19716]:VariableDeclarationStatement[19629-19716]"
    }, {
      "left" : "for (File child : children)",
      "right" : "for (File child : children)",
      "info" : "EnhancedForStatement[19721-19934]:EnhancedForStatement[19721-19934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19749-19934]:Block[19749-19934]"
    }, {
      "left" : "File target = new File(toDir, child.getName());",
      "right" : "File target = new File(toDir, child.getName());",
      "info" : "VariableDeclarationStatement[19757-19804]:VariableDeclarationStatement[19757-19804]"
    }, {
      "left" : "if (child.isFile())",
      "right" : "if (child.isFile())",
      "info" : "IfStatement[19811-19928]:IfStatement[19811-19928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19831-19869]:Block[19831-19869]"
    }, {
      "left" : "copy(child, target);",
      "right" : "copy(child, target);",
      "info" : "ExpressionStatement[19841-19861]:ExpressionStatement[19841-19861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19881-19928]:Block[19881-19928]"
    }, {
      "left" : "copyDir(child, target, true);",
      "right" : "copyDir(child, target, true);",
      "info" : "ExpressionStatement[19891-19920]:ExpressionStatement[19891-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20057-20271]:Block[20057-20271]"
    }, {
      "left" : "copyDir(fromDir, toDir, copySystemFiles ? null : new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        return !StringUtil.startsWithChar(file.getName(), '.');\n      }\n    });",
      "right" : "copyDir(fromDir, toDir, copySystemFiles ? null : new FileFilter() {\n      @Override\n      public boolean accept(File file) {\n        return !StringUtil.startsWithChar(file.getName(), '.');\n      }\n    });",
      "info" : "ExpressionStatement[20063-20267]:ExpressionStatement[20063-20267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20186-20259]:Block[20186-20259]"
    }, {
      "left" : "return !StringUtil.startsWithChar(file.getName(), '.');",
      "right" : "return !StringUtil.startsWithChar(file.getName(), '.');",
      "info" : "ReturnStatement[20196-20251]:ReturnStatement[20196-20251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20400-21179]:Block[20400-21179]"
    }, {
      "left" : "ensureExists(toDir);",
      "right" : "ensureExists(toDir);",
      "info" : "ExpressionStatement[20406-20426]:ExpressionStatement[20406-20426]"
    }, {
      "left" : "if (isAncestor(fromDir, toDir, true))",
      "right" : "if (isAncestor(fromDir, toDir, true))",
      "info" : "IfStatement[20431-20591]:IfStatement[20431-20591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20469-20591]:Block[20469-20591]"
    }, {
      "left" : "LOG.error(fromDir.getAbsolutePath() + \" is ancestor of \" + toDir + \". Can't copy to itself.\");",
      "right" : "LOG.error(fromDir.getAbsolutePath() + \" is ancestor of \" + toDir + \". Can't copy to itself.\");",
      "info" : "ExpressionStatement[20477-20571]:ExpressionStatement[20477-20571]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20578-20585]:ReturnStatement[20578-20585]"
    }, {
      "left" : "File[] files = fromDir.listFiles();",
      "right" : "File[] files = fromDir.listFiles();",
      "info" : "VariableDeclarationStatement[20596-20631]:VariableDeclarationStatement[20596-20631]"
    }, {
      "left" : "if (files == null)",
      "right" : "if (files == null)",
      "info" : "IfStatement[20636-20752]:IfStatement[20636-20752]"
    }, {
      "left" : "throw new IOException(CommonBundle.message(\"exception.directory.is.invalid\", fromDir.getPath()));",
      "right" : "throw new IOException(CommonBundle.message(\"exception.directory.is.invalid\", fromDir.getPath()));",
      "info" : "ThrowStatement[20655-20752]:ThrowStatement[20655-20752]"
    }, {
      "left" : "if (!fromDir.canRead())",
      "right" : "if (!fromDir.canRead())",
      "info" : "IfStatement[20757-20883]:IfStatement[20757-20883]"
    }, {
      "left" : "throw new IOException(CommonBundle.message(\"exception.directory.is.not.readable\", fromDir.getPath()));",
      "right" : "throw new IOException(CommonBundle.message(\"exception.directory.is.not.readable\", fromDir.getPath()));",
      "info" : "ThrowStatement[20781-20883]:ThrowStatement[20781-20883]"
    }, {
      "left" : "for (File file : files)",
      "right" : "for (File file : files)",
      "info" : "EnhancedForStatement[20888-21175]:EnhancedForStatement[20888-21175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20912-21175]:Block[20912-21175]"
    }, {
      "left" : "if (filter != null && !filter.accept(file))",
      "right" : "if (filter != null && !filter.accept(file))",
      "info" : "IfStatement[20920-20991]:IfStatement[20920-20991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20964-20991]:Block[20964-20991]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[20974-20983]:ContinueStatement[20974-20983]"
    }, {
      "left" : "if (file.isDirectory())",
      "right" : "if (file.isDirectory())",
      "info" : "IfStatement[20998-21169]:IfStatement[20998-21169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21022-21095]:Block[21022-21095]"
    }, {
      "left" : "copyDir(file, new File(toDir, file.getName()), filter);",
      "right" : "copyDir(file, new File(toDir, file.getName()), filter);",
      "info" : "ExpressionStatement[21032-21087]:ExpressionStatement[21032-21087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21107-21169]:Block[21107-21169]"
    }, {
      "left" : "copy(file, new File(toDir, file.getName()));",
      "right" : "copy(file, new File(toDir, file.getName()));",
      "info" : "ExpressionStatement[21117-21161]:ExpressionStatement[21117-21161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21253-21410]:Block[21253-21410]"
    }, {
      "left" : "if (!dir.exists() && !dir.mkdirs())",
      "right" : "if (!dir.exists() && !dir.mkdirs())",
      "info" : "IfStatement[21259-21406]:IfStatement[21259-21406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21295-21406]:Block[21295-21406]"
    }, {
      "left" : "throw new IOException(CommonBundle.message(\"exception.directory.can.not.create\", dir.getPath()));",
      "right" : "throw new IOException(CommonBundle.message(\"exception.directory.can.not.create\", dir.getPath()));",
      "info" : "ThrowStatement[21303-21400]:ThrowStatement[21303-21400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21490-21547]:Block[21490-21547]"
    }, {
      "left" : "return getNameWithoutExtension(file.getName());",
      "right" : "return getNameWithoutExtension(file.getName());",
      "info" : "ReturnStatement[21496-21543]:ReturnStatement[21496-21543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21629-21687]:Block[21629-21687]"
    }, {
      "left" : "return FileUtilRt.getNameWithoutExtension(name);",
      "right" : "return FileUtilRt.getNameWithoutExtension(name);",
      "info" : "ReturnStatement[21635-21683]:ReturnStatement[21635-21683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21828-21922]:Block[21828-21922]"
    }, {
      "left" : "return findSequentNonexistentFile(aParentFolder, aFilePrefix, aExtension).getName();",
      "right" : "return findSequentNonexistentFile(aParentFolder, aFilePrefix, aExtension).getName();",
      "info" : "ReturnStatement[21834-21918]:ReturnStatement[21834-21918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22056-22372]:Block[22056-22372]"
    }, {
      "left" : "int postfix = 0;",
      "right" : "int postfix = 0;",
      "info" : "VariableDeclarationStatement[22062-22078]:VariableDeclarationStatement[22062-22078]"
    }, {
      "left" : "String ext = extension.isEmpty() ? \"\" : '.' + extension;",
      "right" : "String ext = extension.isEmpty() ? \"\" : '.' + extension;",
      "info" : "VariableDeclarationStatement[22083-22139]:VariableDeclarationStatement[22083-22139]"
    }, {
      "left" : "File candidate = new File(parentFolder, filePrefix + ext);",
      "right" : "File candidate = new File(parentFolder, filePrefix + ext);",
      "info" : "VariableDeclarationStatement[22144-22202]:VariableDeclarationStatement[22144-22202]"
    }, {
      "left" : "while (candidate.exists())",
      "right" : "while (candidate.exists())",
      "info" : "WhileStatement[22207-22346]:WhileStatement[22207-22346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22234-22346]:Block[22234-22346]"
    }, {
      "left" : "postfix++;",
      "right" : "postfix++;",
      "info" : "ExpressionStatement[22242-22252]:ExpressionStatement[22242-22252]"
    }, {
      "left" : "candidate = new File(parentFolder, filePrefix + Integer.toString(postfix) + ext);",
      "right" : "candidate = new File(parentFolder, filePrefix + Integer.toString(postfix) + ext);",
      "info" : "ExpressionStatement[22259-22340]:ExpressionStatement[22259-22340]"
    }, {
      "left" : "return candidate;",
      "right" : "return candidate;",
      "info" : "ReturnStatement[22351-22368]:ReturnStatement[22351-22368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22465-22526]:Block[22465-22526]"
    }, {
      "left" : "return FileUtilRt.toSystemDependentName(aFileName);",
      "right" : "return FileUtilRt.toSystemDependentName(aFileName);",
      "info" : "ReturnStatement[22471-22522]:ReturnStatement[22471-22522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22621-22684]:Block[22621-22684]"
    }, {
      "left" : "return FileUtilRt.toSystemIndependentName(aFileName);",
      "right" : "return FileUtilRt.toSystemIndependentName(aFileName);",
      "info" : "ReturnStatement[22627-22680]:ReturnStatement[22627-22680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22764-22867]:Block[22764-22867]"
    }, {
      "left" : "return (SystemInfo.isFileSystemCaseSensitive ? name : name.toLowerCase()).replace('\\\\', '/');",
      "right" : "return (SystemInfo.isFileSystemCaseSensitive ? name : name.toLowerCase()).replace('\\\\', '/');",
      "info" : "ReturnStatement[22770-22863]:ReturnStatement[22770-22863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23308-23373]:Block[23419-23484]"
    }, {
      "left" : "return toCanonicalPath(path, File.separatorChar, true);",
      "right" : "return toCanonicalPath(path, File.separatorChar, true);",
      "info" : "ReturnStatement[23314-23369]:ReturnStatement[23425-23480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23488-23548]:Block[24325-24385]"
    }, {
      "left" : "return toCanonicalPath(path, separatorChar, true);",
      "right" : "return toCanonicalPath(path, separatorChar, true);",
      "info" : "ReturnStatement[23494-23544]:ReturnStatement[24331-24381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23643-23694]:Block[24480-24531]"
    }, {
      "left" : "return toCanonicalPath(path, '/', false);",
      "right" : "return toCanonicalPath(path, '/', false);",
      "info" : "ReturnStatement[23649-23690]:ReturnStatement[24486-24527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23838-25105]:Block[25074-27041]"
    }, {
      "left" : "if (path == null || path.isEmpty())",
      "right" : "if (path == null || path.isEmpty())",
      "info" : "IfStatement[23844-23962]:IfStatement[25080-25198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23880-23906]:Block[25116-25142]"
    }, {
      "left" : "return path;",
      "right" : "return path;",
      "info" : "ReturnStatement[23888-23900]:ReturnStatement[25124-25136]"
    }, {
      "left" : "if (\".\".equals(path))",
      "right" : "if (\".\".equals(path))",
      "info" : "IfStatement[23916-23962]:IfStatement[25152-25198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23938-23962]:Block[25174-25198]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[23946-23956]:ReturnStatement[25182-25192]"
    }, {
      "left" : "path = path.replace(separatorChar, '/');",
      "right" : "path = path.replace(separatorChar, '/');",
      "info" : "ExpressionStatement[23968-24008]:ExpressionStatement[25204-25244]"
    }, {
      "left" : "if (path.indexOf('/') == -1)",
      "right" : "if (path.indexOf('/') == -1)",
      "info" : "IfStatement[24013-24068]:IfStatement[25249-25304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24042-24068]:Block[25278-25304]"
    }, {
      "left" : "return path;",
      "right" : "return path;",
      "info" : "ReturnStatement[24050-24062]:ReturnStatement[25286-25298]"
    }, {
      "left" : "StringBuilder result = new StringBuilder(path.length());",
      "right" : "StringBuilder result = new StringBuilder(path.length());",
      "info" : "VariableDeclarationStatement[24074-24130]:VariableDeclarationStatement[25828-25884]"
    }, {
      "left" : "int start = processRoot(path, result), dots = 0;",
      "right" : "int start = processRoot(path, result), dots = 0;",
      "info" : "VariableDeclarationStatement[24135-24183]:VariableDeclarationStatement[25889-25937]"
    }, {
      "left" : "boolean separator = true;",
      "right" : "boolean separator = true;",
      "info" : "VariableDeclarationStatement[24188-24213]:VariableDeclarationStatement[25942-25967]"
    }, {
      "left" : "for (int i = start; i < path.length(); ++i)",
      "right" : "for (int i = start; i < path.length(); ++i)",
      "info" : "ForStatement[24219-24821]:ForStatement[25973-26670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24263-24821]:Block[26017-26670]"
    }, {
      "left" : "char c = path.charAt(i);",
      "right" : "char c = path.charAt(i);",
      "info" : "VariableDeclarationStatement[24271-24295]:VariableDeclarationStatement[26025-26049]"
    }, {
      "left" : "if (c == '/')",
      "right" : "if (c == '/')",
      "info" : "IfStatement[24302-24815]:IfStatement[26056-26664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24316-24451]:Block[26070-26300]"
    }, {
      "left" : "if (!separator)",
      "right" : "if (!separator)",
      "info" : "IfStatement[24326-24417]:IfStatement[26080-26266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24342-24417]:Block[26096-26266]"
    }, {
      "left" : "dots = 0;",
      "right" : "dots = 0;",
      "info" : "ExpressionStatement[24398-24407]:ExpressionStatement[26247-26256]"
    }, {
      "left" : "separator = true;",
      "right" : "separator = true;",
      "info" : "ExpressionStatement[24426-24443]:ExpressionStatement[26275-26292]"
    }, {
      "left" : "if (c == '.')",
      "right" : "if (c == '.')",
      "info" : "IfStatement[24463-24815]:IfStatement[26312-26664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24477-24633]:Block[26326-26482]"
    }, {
      "left" : "if (separator || dots > 0)",
      "right" : "if (separator || dots > 0)",
      "info" : "IfStatement[24487-24598]:IfStatement[26336-26447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24514-24543]:Block[26363-26392]"
    }, {
      "left" : "++dots;",
      "right" : "++dots;",
      "info" : "ExpressionStatement[24526-24533]:ExpressionStatement[26375-26382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24557-24598]:Block[26406-26447]"
    }, {
      "left" : "result.append('.');",
      "right" : "result.append('.');",
      "info" : "ExpressionStatement[24569-24588]:ExpressionStatement[26418-26437]"
    }, {
      "left" : "separator = false;",
      "right" : "separator = false;",
      "info" : "ExpressionStatement[24607-24625]:ExpressionStatement[26456-26474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24645-24815]:Block[26494-26664]"
    }, {
      "left" : "if (dots > 0)",
      "right" : "if (dots > 0)",
      "info" : "IfStatement[24655-24754]:IfStatement[26504-26603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24669-24754]:Block[26518-26603]"
    }, {
      "left" : "StringUtil.repeatSymbol(result, '.', dots);",
      "right" : "StringUtil.repeatSymbol(result, '.', dots);",
      "info" : "ExpressionStatement[24681-24724]:ExpressionStatement[26530-26573]"
    }, {
      "left" : "dots = 0;",
      "right" : "dots = 0;",
      "info" : "ExpressionStatement[24735-24744]:ExpressionStatement[26584-26593]"
    }, {
      "left" : "result.append(c);",
      "right" : "result.append(c);",
      "info" : "ExpressionStatement[24763-24780]:ExpressionStatement[26612-26629]"
    }, {
      "left" : "separator = false;",
      "right" : "separator = false;",
      "info" : "ExpressionStatement[24789-24807]:ExpressionStatement[26638-26656]"
    }, {
      "left" : "if (dots > 0)",
      "right" : "if (dots > 0)",
      "info" : "IfStatement[24827-24888]:IfStatement[26676-26824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24841-24888]:Block[26765-26818]"
    }, {
      "left" : "int lastChar = result.length() - 1;",
      "right" : "int lastChar = result.length() - 1;",
      "info" : "VariableDeclarationStatement[24894-24929]:VariableDeclarationStatement[26830-26865]"
    }, {
      "left" : "if (removeLastSlash && lastChar >= 0 && result.charAt(lastChar) == '/' && lastChar > start)",
      "right" : "if (removeLastSlash && lastChar >= 0 && result.charAt(lastChar) == '/' && lastChar > start)",
      "info" : "IfStatement[24934-25070]:IfStatement[26870-27006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25026-25070]:Block[26962-27006]"
    }, {
      "left" : "result.deleteCharAt(lastChar);",
      "right" : "result.deleteCharAt(lastChar);",
      "info" : "ExpressionStatement[25034-25064]:ExpressionStatement[26970-27000]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[25076-25101]:ReturnStatement[27012-27037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25175-26315]:Block[27111-28251]"
    }, {
      "left" : "if (SystemInfo.isWindows && path.length() > 1 && path.charAt(0) == '/' && path.charAt(1) == '/')",
      "right" : "if (SystemInfo.isWindows && path.length() > 1 && path.charAt(0) == '/' && path.charAt(1) == '/')",
      "info" : "IfStatement[25181-26311]:IfStatement[27117-28247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25278-26032]:Block[27214-27968]"
    }, {
      "left" : "result.append(\"//\");",
      "right" : "result.append(\"//\");",
      "info" : "ExpressionStatement[25286-25306]:ExpressionStatement[27222-27242]"
    }, {
      "left" : "int hostStart = 2;",
      "right" : "int hostStart = 2;",
      "info" : "VariableDeclarationStatement[25314-25332]:VariableDeclarationStatement[27250-27268]"
    }, {
      "left" : "while (hostStart < path.length() && path.charAt(hostStart) == '/') hostStart++;",
      "right" : "while (hostStart < path.length() && path.charAt(hostStart) == '/') hostStart++;",
      "info" : "WhileStatement[25339-25418]:WhileStatement[27275-27354]"
    }, {
      "left" : "hostStart++;",
      "right" : "hostStart++;",
      "info" : "ExpressionStatement[25406-25418]:ExpressionStatement[27342-27354]"
    }, {
      "left" : "if (hostStart == path.length())",
      "right" : "if (hostStart == path.length())",
      "info" : "IfStatement[25425-25474]:IfStatement[27361-27410]"
    }, {
      "left" : "return hostStart;",
      "right" : "return hostStart;",
      "info" : "ReturnStatement[25457-25474]:ReturnStatement[27393-27410]"
    }, {
      "left" : "int hostEnd = path.indexOf('/', hostStart);",
      "right" : "int hostEnd = path.indexOf('/', hostStart);",
      "info" : "VariableDeclarationStatement[25481-25524]:VariableDeclarationStatement[27417-27460]"
    }, {
      "left" : "if (hostEnd < 0)",
      "right" : "if (hostEnd < 0)",
      "info" : "IfStatement[25531-25572]:IfStatement[27467-27508]"
    }, {
      "left" : "hostEnd = path.length();",
      "right" : "hostEnd = path.length();",
      "info" : "ExpressionStatement[25548-25572]:ExpressionStatement[27484-27508]"
    }, {
      "left" : "result.append(path, hostStart, hostEnd);",
      "right" : "result.append(path, hostStart, hostEnd);",
      "info" : "ExpressionStatement[25579-25619]:ExpressionStatement[27515-27555]"
    }, {
      "left" : "result.append('/');",
      "right" : "result.append('/');",
      "info" : "ExpressionStatement[25626-25645]:ExpressionStatement[27562-27581]"
    }, {
      "left" : "int shareStart = hostEnd;",
      "right" : "int shareStart = hostEnd;",
      "info" : "VariableDeclarationStatement[25653-25678]:VariableDeclarationStatement[27589-27614]"
    }, {
      "left" : "while (shareStart < path.length() && path.charAt(shareStart) == '/') shareStart++;",
      "right" : "while (shareStart < path.length() && path.charAt(shareStart) == '/') shareStart++;",
      "info" : "WhileStatement[25685-25767]:WhileStatement[27621-27703]"
    }, {
      "left" : "shareStart++;",
      "right" : "shareStart++;",
      "info" : "ExpressionStatement[25754-25767]:ExpressionStatement[27690-27703]"
    }, {
      "left" : "if (shareStart == path.length())",
      "right" : "if (shareStart == path.length())",
      "info" : "IfStatement[25774-25825]:IfStatement[27710-27761]"
    }, {
      "left" : "return shareStart;",
      "right" : "return shareStart;",
      "info" : "ReturnStatement[25807-25825]:ReturnStatement[27743-27761]"
    }, {
      "left" : "int shareEnd = path.indexOf('/', shareStart);",
      "right" : "int shareEnd = path.indexOf('/', shareStart);",
      "info" : "VariableDeclarationStatement[25832-25877]:VariableDeclarationStatement[27768-27813]"
    }, {
      "left" : "if (shareEnd < 0)",
      "right" : "if (shareEnd < 0)",
      "info" : "IfStatement[25884-25927]:IfStatement[27820-27863]"
    }, {
      "left" : "shareEnd = path.length();",
      "right" : "shareEnd = path.length();",
      "info" : "ExpressionStatement[25902-25927]:ExpressionStatement[27838-27863]"
    }, {
      "left" : "result.append(path, shareStart, shareEnd);",
      "right" : "result.append(path, shareStart, shareEnd);",
      "info" : "ExpressionStatement[25934-25976]:ExpressionStatement[27870-27912]"
    }, {
      "left" : "result.append('/');",
      "right" : "result.append('/');",
      "info" : "ExpressionStatement[25983-26002]:ExpressionStatement[27919-27938]"
    }, {
      "left" : "return shareEnd;",
      "right" : "return shareEnd;",
      "info" : "ReturnStatement[26010-26026]:ReturnStatement[27946-27962]"
    }, {
      "left" : "if (path.length() > 0 && path.charAt(0) == '/')",
      "right" : "if (path.length() > 0 && path.charAt(0) == '/')",
      "info" : "IfStatement[26042-26311]:IfStatement[27978-28247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26090-26139]:Block[28026-28075]"
    }, {
      "left" : "result.append('/');",
      "right" : "result.append('/');",
      "info" : "ExpressionStatement[26098-26117]:ExpressionStatement[28034-28053]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[26124-26133]:ReturnStatement[28060-28069]"
    }, {
      "left" : "if (path.length() > 2 && path.charAt(1) == ':' && path.charAt(2) == '/')",
      "right" : "if (path.length() > 2 && path.charAt(1) == ':' && path.charAt(2) == '/')",
      "info" : "IfStatement[26149-26311]:IfStatement[28085-28247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26222-26278]:Block[28158-28214]"
    }, {
      "left" : "result.append(path, 0, 3);",
      "right" : "result.append(path, 0, 3);",
      "info" : "ExpressionStatement[26230-26256]:ExpressionStatement[28166-28192]"
    }, {
      "left" : "return 3;",
      "right" : "return 3;",
      "info" : "ReturnStatement[26263-26272]:ReturnStatement[28199-28208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26288-26311]:Block[28224-28247]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[26296-26305]:ReturnStatement[28232-28241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26394-27218]:Block[28416-29390]"
    }, {
      "left" : "if (dots == 2)",
      "right" : "if (dots == 2)",
      "info" : "IfStatement[26400-27214]:IfStatement[28422-29369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26415-27106]:Block[28437-29261]"
    }, {
      "left" : "int pos = -1;",
      "right" : "int pos = -1;",
      "info" : "VariableDeclarationStatement[26423-26436]:VariableDeclarationStatement[28445-28458]"
    }, {
      "left" : "if (!StringUtil.endsWith(result, \"/../\") && !StringUtil.equals(result, \"../\"))",
      "right" : "if (!StringUtil.endsWith(result, \"/../\") && !StringUtil.equals(result, \"../\"))",
      "info" : "IfStatement[26443-26935]:IfStatement[28465-28957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26522-26935]:Block[28544-28957]"
    }, {
      "left" : "pos = StringUtil.lastIndexOf(result, '/', start, result.length() - 1);",
      "right" : "pos = StringUtil.lastIndexOf(result, '/', start, result.length() - 1);",
      "info" : "ExpressionStatement[26532-26602]:ExpressionStatement[28554-28624]"
    }, {
      "left" : "if (pos >= 0)",
      "right" : "if (pos >= 0)",
      "info" : "IfStatement[26611-26927]:IfStatement[28633-28949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26625-26692]:Block[28647-28714]"
    }, {
      "left" : "++pos;",
      "right" : "++pos;",
      "info" : "ExpressionStatement[26637-26643]:ExpressionStatement[28659-28665]"
    }, {
      "left" : "if (start > 0)",
      "right" : "if (start > 0)",
      "info" : "IfStatement[26706-26927]:IfStatement[28728-28949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26721-26805]:Block[28743-28827]"
    }, {
      "left" : "pos = start;",
      "right" : "pos = start;",
      "info" : "ExpressionStatement[26733-26745]:ExpressionStatement[28755-28767]"
    }, {
      "left" : "if (result.length() > 0)",
      "right" : "if (result.length() > 0)",
      "info" : "IfStatement[26819-26927]:IfStatement[28841-28949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26844-26927]:Block[28866-28949]"
    }, {
      "left" : "pos = 0;",
      "right" : "pos = 0;",
      "info" : "ExpressionStatement[26856-26864]:ExpressionStatement[28878-28886]"
    }, {
      "left" : "if (pos >= 0)",
      "right" : "if (pos >= 0)",
      "info" : "IfStatement[26942-27100]:IfStatement[28964-29255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26956-27010]:Block[28978-29165]"
    }, {
      "left" : "result.delete(pos, result.length());",
      "right" : "result.delete(pos, result.length());",
      "info" : "ExpressionStatement[26966-27002]:ExpressionStatement[29121-29157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27022-27100]:Block[29177-29255]"
    }, {
      "left" : "result.append(\"../\");",
      "right" : "result.append(\"../\");",
      "info" : "ExpressionStatement[27032-27053]:ExpressionStatement[29187-29208]"
    }, {
      "left" : "if (dots != 1)",
      "right" : "if (dots != 1)",
      "info" : "IfStatement[27116-27214]:IfStatement[29271-29369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27131-27214]:Block[29286-29369]"
    }, {
      "left" : "StringUtil.repeatSymbol(result, '.', dots);",
      "right" : "StringUtil.repeatSymbol(result, '.', dots);",
      "info" : "ExpressionStatement[27139-27182]:ExpressionStatement[29294-29337]"
    }, {
      "left" : "result.append('/');",
      "right" : "result.append('/');",
      "info" : "ExpressionStatement[27189-27208]:ExpressionStatement[29344-29363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27414-28075]:Block[29586-30247]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[27420-27434]:VariableDeclarationStatement[29592-29606]"
    }, {
      "left" : "boolean separator = false;",
      "right" : "boolean separator = false;",
      "info" : "VariableDeclarationStatement[27439-27465]:VariableDeclarationStatement[29611-29637]"
    }, {
      "left" : "if (SystemInfo.isWindows)",
      "right" : "if (SystemInfo.isWindows)",
      "info" : "IfStatement[27470-27687]:IfStatement[29642-29859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27496-27687]:Block[29668-29859]"
    }, {
      "left" : "if (path.startsWith(\"//\"))",
      "right" : "if (path.startsWith(\"//\"))",
      "info" : "IfStatement[27504-27681]:IfStatement[29676-29853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27531-27585]:Block[29703-29757]"
    }, {
      "left" : "start = 2;",
      "right" : "start = 2;",
      "info" : "ExpressionStatement[27541-27551]:ExpressionStatement[29713-29723]"
    }, {
      "left" : "separator = true;",
      "right" : "separator = true;",
      "info" : "ExpressionStatement[27560-27577]:ExpressionStatement[29732-29749]"
    }, {
      "left" : "if (path.startsWith(\"\\\\\\\\\"))",
      "right" : "if (path.startsWith(\"\\\\\\\\\"))",
      "info" : "IfStatement[27597-27681]:IfStatement[29769-29853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27626-27681]:Block[29798-29853]"
    }, {
      "left" : "return normalizeTail(0, path, false);",
      "right" : "return normalizeTail(0, path, false);",
      "info" : "ReturnStatement[27636-27673]:ReturnStatement[29808-29845]"
    }, {
      "left" : "for (int i = start; i < path.length(); ++i)",
      "right" : "for (int i = start; i < path.length(); ++i)",
      "info" : "ForStatement[27693-28053]:ForStatement[29865-30225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27737-28053]:Block[29909-30225]"
    }, {
      "left" : "final char c = path.charAt(i);",
      "right" : "final char c = path.charAt(i);",
      "info" : "VariableDeclarationStatement[27745-27775]:VariableDeclarationStatement[29917-29947]"
    }, {
      "left" : "if (c == '/')",
      "right" : "if (c == '/')",
      "info" : "IfStatement[27782-28047]:IfStatement[29954-30219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27796-27913]:Block[29968-30085]"
    }, {
      "left" : "if (separator)",
      "right" : "if (separator)",
      "info" : "IfStatement[27806-27879]:IfStatement[29978-30051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27821-27879]:Block[29993-30051]"
    }, {
      "left" : "return normalizeTail(i, path, true);",
      "right" : "return normalizeTail(i, path, true);",
      "info" : "ReturnStatement[27833-27869]:ReturnStatement[30005-30041]"
    }, {
      "left" : "separator = true;",
      "right" : "separator = true;",
      "info" : "ExpressionStatement[27888-27905]:ExpressionStatement[30060-30077]"
    }, {
      "left" : "if (c == '\\\\')",
      "right" : "if (c == '\\\\')",
      "info" : "IfStatement[27925-28047]:IfStatement[30097-30219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27940-27999]:Block[30112-30171]"
    }, {
      "left" : "return normalizeTail(i, path, separator);",
      "right" : "return normalizeTail(i, path, separator);",
      "info" : "ReturnStatement[27950-27991]:ReturnStatement[30122-30163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28011-28047]:Block[30183-30219]"
    }, {
      "left" : "separator = false;",
      "right" : "separator = false;",
      "info" : "ExpressionStatement[28021-28039]:ExpressionStatement[30193-30211]"
    }, {
      "left" : "return path;",
      "right" : "return path;",
      "info" : "ReturnStatement[28059-28071]:ReturnStatement[30231-30243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28182-28804]:Block[30354-30976]"
    }, {
      "left" : "final StringBuilder result = new StringBuilder(path.length());",
      "right" : "final StringBuilder result = new StringBuilder(path.length());",
      "info" : "VariableDeclarationStatement[28188-28250]:VariableDeclarationStatement[30360-30422]"
    }, {
      "left" : "result.append(path, 0, prefixEnd);",
      "right" : "result.append(path, 0, prefixEnd);",
      "info" : "ExpressionStatement[28255-28289]:ExpressionStatement[30427-30461]"
    }, {
      "left" : "int start = prefixEnd;",
      "right" : "int start = prefixEnd;",
      "info" : "VariableDeclarationStatement[28294-28316]:VariableDeclarationStatement[30466-30488]"
    }, {
      "left" : "if (start==0 && SystemInfo.isWindows && (path.startsWith(\"//\") || path.startsWith(\"\\\\\\\\\")))",
      "right" : "if (start==0 && SystemInfo.isWindows && (path.startsWith(\"//\") || path.startsWith(\"\\\\\\\\\")))",
      "info" : "IfStatement[28321-28488]:IfStatement[30493-30660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28413-28488]:Block[30585-30660]"
    }, {
      "left" : "start = 2;",
      "right" : "start = 2;",
      "info" : "ExpressionStatement[28421-28431]:ExpressionStatement[30593-30603]"
    }, {
      "left" : "result.append(\"//\");",
      "right" : "result.append(\"//\");",
      "info" : "ExpressionStatement[28438-28458]:ExpressionStatement[30610-30630]"
    }, {
      "left" : "separator = true;",
      "right" : "separator = true;",
      "info" : "ExpressionStatement[28465-28482]:ExpressionStatement[30637-30654]"
    }, {
      "left" : "for (int i = start; i < path.length(); ++i)",
      "right" : "for (int i = start; i < path.length(); ++i)",
      "info" : "ForStatement[28494-28769]:ForStatement[30666-30941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28538-28769]:Block[30710-30941]"
    }, {
      "left" : "final char c = path.charAt(i);",
      "right" : "final char c = path.charAt(i);",
      "info" : "VariableDeclarationStatement[28546-28576]:VariableDeclarationStatement[30718-30748]"
    }, {
      "left" : "if (c == '/' || c == '\\\\')",
      "right" : "if (c == '/' || c == '\\\\')",
      "info" : "IfStatement[28583-28763]:IfStatement[30755-30935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28610-28689]:Block[30782-30861]"
    }, {
      "left" : "if (!separator)",
      "right" : "if (!separator)",
      "info" : "IfStatement[28620-28655]:IfStatement[30792-30827]"
    }, {
      "left" : "result.append('/');",
      "right" : "result.append('/');",
      "info" : "ExpressionStatement[28636-28655]:ExpressionStatement[30808-30827]"
    }, {
      "left" : "separator = true;",
      "right" : "separator = true;",
      "info" : "ExpressionStatement[28664-28681]:ExpressionStatement[30836-30853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28701-28763]:Block[30873-30935]"
    }, {
      "left" : "result.append(c);",
      "right" : "result.append(c);",
      "info" : "ExpressionStatement[28711-28728]:ExpressionStatement[30883-30900]"
    }, {
      "left" : "separator = false;",
      "right" : "separator = false;",
      "info" : "ExpressionStatement[28737-28755]:ExpressionStatement[30909-30927]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[28775-28800]:ReturnStatement[30947-30972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28875-28996]:Block[31047-31168]"
    }, {
      "left" : "urlString = urlString.replace('/', File.separatorChar);",
      "right" : "urlString = urlString.replace('/', File.separatorChar);",
      "info" : "ExpressionStatement[28881-28936]:ExpressionStatement[31053-31108]"
    }, {
      "left" : "return URLUtil.unescapePercentSequences(urlString);",
      "right" : "return URLUtil.unescapePercentSequences(urlString);",
      "info" : "ReturnStatement[28941-28992]:ReturnStatement[31113-31164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29096-29307]:Block[31268-31479]"
    }, {
      "left" : "if (fileFilter == null)",
      "right" : "if (fileFilter == null)",
      "info" : "IfStatement[29102-29138]:IfStatement[31274-31310]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29126-29138]:ReturnStatement[31298-31310]"
    }, {
      "left" : "File file = root;",
      "right" : "File file = root;",
      "info" : "VariableDeclarationStatement[29143-29160]:VariableDeclarationStatement[31315-31332]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[29165-29286]:DoStatement[31337-31458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29168-29260]:Block[31340-31432]"
    }, {
      "left" : "if (!fileFilter.accept(file))",
      "right" : "if (!fileFilter.accept(file))",
      "info" : "IfStatement[29176-29219]:IfStatement[31348-31391]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29206-29219]:ReturnStatement[31378-31391]"
    }, {
      "left" : "file = file.getParentFile();",
      "right" : "file = file.getParentFile();",
      "info" : "ExpressionStatement[29226-29254]:ExpressionStatement[31398-31426]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29291-29303]:ReturnStatement[31463-31475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29400-29527]:Block[31572-31699]"
    }, {
      "left" : "if (source.renameTo(target))",
      "right" : "if (source.renameTo(target))",
      "info" : "IfStatement[29406-29442]:IfStatement[31578-31614]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29435-29442]:ReturnStatement[31607-31614]"
    }, {
      "left" : "if (!source.exists())",
      "right" : "if (!source.exists())",
      "info" : "IfStatement[29447-29476]:IfStatement[31619-31648]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29469-29476]:ReturnStatement[31641-31648]"
    }, {
      "left" : "copy(source, target);",
      "right" : "copy(source, target);",
      "info" : "ExpressionStatement[29482-29503]:ExpressionStatement[31654-31675]"
    }, {
      "left" : "delete(source);",
      "right" : "delete(source);",
      "info" : "ExpressionStatement[29508-29523]:ExpressionStatement[31680-31695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29608-29806]:Block[31780-31978]"
    }, {
      "left" : "return pathsEqual(file1 == null ? null : file1.getPath(),\n                      file2 == null ? null : file2.getPath());",
      "right" : "return pathsEqual(file1 == null ? null : file1.getPath(),\n                      file2 == null ? null : file2.getPath());",
      "info" : "ReturnStatement[29682-29802]:ReturnStatement[31854-31974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29891-30115]:Block[32063-32287]"
    }, {
      "left" : "if (path1 == path2)",
      "right" : "if (path1 == path2)",
      "info" : "IfStatement[29897-29929]:IfStatement[32069-32101]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29917-29929]:ReturnStatement[32089-32101]"
    }, {
      "left" : "if (path1 == null || path2 == null)",
      "right" : "if (path1 == null || path2 == null)",
      "info" : "IfStatement[29934-29983]:IfStatement[32106-32155]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29970-29983]:ReturnStatement[32142-32155]"
    }, {
      "left" : "path1 = toCanonicalPath(path1);",
      "right" : "path1 = toCanonicalPath(path1);",
      "info" : "ExpressionStatement[29989-30020]:ExpressionStatement[32161-32192]"
    }, {
      "left" : "path2 = toCanonicalPath(path2);",
      "right" : "path2 = toCanonicalPath(path2);",
      "info" : "ExpressionStatement[30025-30056]:ExpressionStatement[32197-32228]"
    }, {
      "left" : "return PATH_HASHING_STRATEGY.equals(path1, path2);",
      "right" : "return PATH_HASHING_STRATEGY.equals(path1, path2);",
      "info" : "ReturnStatement[30061-30111]:ReturnStatement[32233-32283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30304-30456]:Block[32476-32628]"
    }, {
      "left" : "if (name1 == name2)",
      "right" : "if (name1 == name2)",
      "info" : "IfStatement[30310-30342]:IfStatement[32482-32514]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30330-30342]:ReturnStatement[32502-32514]"
    }, {
      "left" : "if (name1 == null || name2 == null)",
      "right" : "if (name1 == null || name2 == null)",
      "info" : "IfStatement[30347-30396]:IfStatement[32519-32568]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30383-30396]:ReturnStatement[32555-32568]"
    }, {
      "left" : "return PATH_HASHING_STRATEGY.equals(name1, name2);",
      "right" : "return PATH_HASHING_STRATEGY.equals(name1, name2);",
      "info" : "ReturnStatement[30402-30452]:ReturnStatement[32574-32624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30535-30645]:Block[32707-32817]"
    }, {
      "left" : "return comparePaths(file1 == null ? null : file1.getPath(), file2 == null ? null : file2.getPath());",
      "right" : "return comparePaths(file1 == null ? null : file1.getPath(), file2 == null ? null : file2.getPath());",
      "info" : "ReturnStatement[30541-30641]:ReturnStatement[32713-32813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30728-30951]:Block[32900-33123]"
    }, {
      "left" : "path1 = path1 == null ? null : toSystemIndependentName(path1);",
      "right" : "path1 = path1 == null ? null : toSystemIndependentName(path1);",
      "info" : "ExpressionStatement[30734-30796]:ExpressionStatement[32906-32968]"
    }, {
      "left" : "path2 = path2 == null ? null : toSystemIndependentName(path2);",
      "right" : "path2 = path2 == null ? null : toSystemIndependentName(path2);",
      "info" : "ExpressionStatement[30801-30863]:ExpressionStatement[32973-33035]"
    }, {
      "left" : "return StringUtil.compare(path1, path2, !SystemInfo.isFileSystemCaseSensitive);",
      "right" : "return StringUtil.compare(path1, path2, !SystemInfo.isFileSystemCaseSensitive);",
      "info" : "ReturnStatement[30868-30947]:ReturnStatement[33040-33119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31007-31075]:Block[33179-33247]"
    }, {
      "left" : "return pathHashCode(file == null ? null : file.getPath());",
      "right" : "return pathHashCode(file == null ? null : file.getPath());",
      "info" : "ReturnStatement[31013-31071]:ReturnStatement[33185-33243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31133-31242]:Block[33305-33414]"
    }, {
      "left" : "return StringUtil.isEmpty(path) ? 0 : PATH_HASHING_STRATEGY.computeHashCode(toCanonicalPath(path));",
      "right" : "return StringUtil.isEmpty(path) ? 0 : PATH_HASHING_STRATEGY.computeHashCode(toCanonicalPath(path));",
      "info" : "ReturnStatement[31139-31238]:ReturnStatement[33311-33410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31683-31748]:Block[33855-33920]"
    }, {
      "left" : "return FileUtilRt.getExtension(fileName).toLowerCase();",
      "right" : "return FileUtilRt.getExtension(fileName).toLowerCase();",
      "info" : "ReturnStatement[31689-31744]:ReturnStatement[33861-33916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31849-31968]:Block[34021-34140]"
    }, {
      "left" : "return SystemInfo.isWindows && StringUtil.containsChar(path, '~') ? new File(path).getCanonicalPath() : path;",
      "right" : "return SystemInfo.isWindows && StringUtil.containsChar(path, '~') ? new File(path).getCanonicalPath() : path;",
      "info" : "ReturnStatement[31855-31964]:ReturnStatement[34027-34136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32087-32148]:Block[34259-34320]"
    }, {
      "left" : "collectMatchedFiles(root, root, pattern, outFiles);",
      "right" : "collectMatchedFiles(root, root, pattern, outFiles);",
      "info" : "ExpressionStatement[32093-32144]:ExpressionStatement[34265-34316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32419-32925]:Block[34591-35097]"
    }, {
      "left" : "final File[] dirs = root.listFiles();",
      "right" : "final File[] dirs = root.listFiles();",
      "info" : "VariableDeclarationStatement[32425-32462]:VariableDeclarationStatement[34597-34634]"
    }, {
      "left" : "if (dirs == null)",
      "right" : "if (dirs == null)",
      "info" : "IfStatement[32467-32492]:IfStatement[34639-34664]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32485-32492]:ReturnStatement[34657-34664]"
    }, {
      "left" : "for (File dir : dirs)",
      "right" : "for (File dir : dirs)",
      "info" : "EnhancedForStatement[32497-32921]:EnhancedForStatement[34669-35093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32519-32921]:Block[34691-35093]"
    }, {
      "left" : "if (dir.isFile())",
      "right" : "if (dir.isFile())",
      "info" : "IfStatement[32527-32915]:IfStatement[34699-35087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32545-32830]:Block[34717-35002]"
    }, {
      "left" : "final String relativePath = getRelativePath(absoluteRoot, dir);",
      "right" : "final String relativePath = getRelativePath(absoluteRoot, dir);",
      "info" : "VariableDeclarationStatement[32555-32618]:VariableDeclarationStatement[34727-34790]"
    }, {
      "left" : "if (relativePath != null)",
      "right" : "if (relativePath != null)",
      "info" : "IfStatement[32627-32822]:IfStatement[34799-34994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32653-32822]:Block[34825-34994]"
    }, {
      "left" : "final String path = toSystemIndependentName(relativePath);",
      "right" : "final String path = toSystemIndependentName(relativePath);",
      "info" : "VariableDeclarationStatement[32665-32723]:VariableDeclarationStatement[34837-34895]"
    }, {
      "left" : "if (pattern.matcher(path).matches())",
      "right" : "if (pattern.matcher(path).matches())",
      "info" : "IfStatement[32734-32812]:IfStatement[34906-34984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32771-32812]:Block[34943-34984]"
    }, {
      "left" : "files.add(dir);",
      "right" : "files.add(dir);",
      "info" : "ExpressionStatement[32785-32800]:ExpressionStatement[34957-34972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32842-32915]:Block[35014-35087]"
    }, {
      "left" : "collectMatchedFiles(absoluteRoot, dir, pattern, files);",
      "right" : "collectMatchedFiles(absoluteRoot, dir, pattern, files);",
      "info" : "ExpressionStatement[32852-32907]:ExpressionStatement[35024-35079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33018-33072]:Block[35190-35244]"
    }, {
      "left" : "return convertAntToRegexp(antPattern, true);",
      "right" : "return convertAntToRegexp(antPattern, true);",
      "info" : "ReturnStatement[33024-33068]:ReturnStatement[35196-35240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33666-35688]:Block[35838-37860]"
    }, {
      "left" : "final StringBuilder builder = new StringBuilder();",
      "right" : "final StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[33672-33722]:VariableDeclarationStatement[35844-35894]"
    }, {
      "left" : "int asteriskCount = 0;",
      "right" : "int asteriskCount = 0;",
      "info" : "VariableDeclarationStatement[33727-33749]:VariableDeclarationStatement[35899-35921]"
    }, {
      "left" : "boolean recursive = true;",
      "right" : "boolean recursive = true;",
      "info" : "VariableDeclarationStatement[33754-33779]:VariableDeclarationStatement[35926-35951]"
    }, {
      "left" : "final int start =\n      ignoreStartingSlash && (StringUtil.startsWithChar(antPattern, '/') || StringUtil.startsWithChar(antPattern, '\\\\')) ? 1 : 0;",
      "right" : "final int start =\n      ignoreStartingSlash && (StringUtil.startsWithChar(antPattern, '/') || StringUtil.startsWithChar(antPattern, '\\\\')) ? 1 : 0;",
      "info" : "VariableDeclarationStatement[33784-33931]:VariableDeclarationStatement[35956-36103]"
    }, {
      "left" : "for (int idx = start; idx < antPattern.length(); idx++)",
      "right" : "for (int idx = start; idx < antPattern.length(); idx++)",
      "info" : "ForStatement[33936-35076]:ForStatement[36108-37248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33992-35076]:Block[36164-37248]"
    }, {
      "left" : "final char ch = antPattern.charAt(idx);",
      "right" : "final char ch = antPattern.charAt(idx);",
      "info" : "VariableDeclarationStatement[34000-34039]:VariableDeclarationStatement[36172-36211]"
    }, {
      "left" : "if (ch == '*')",
      "right" : "if (ch == '*')",
      "info" : "IfStatement[34047-34114]:IfStatement[36219-36286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34062-34114]:Block[36234-36286]"
    }, {
      "left" : "asteriskCount++;",
      "right" : "asteriskCount++;",
      "info" : "ExpressionStatement[34072-34088]:ExpressionStatement[36244-36260]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[34097-34106]:ContinueStatement[36269-36278]"
    }, {
      "left" : "final boolean foundRecursivePattern = recursive && asteriskCount == 2 && (ch == '/' || ch == '\\\\');",
      "right" : "final boolean foundRecursivePattern = recursive && asteriskCount == 2 && (ch == '/' || ch == '\\\\');",
      "info" : "VariableDeclarationStatement[34122-34221]:VariableDeclarationStatement[36294-36393]"
    }, {
      "left" : "final boolean asterisksFound = asteriskCount > 0;",
      "right" : "final boolean asterisksFound = asteriskCount > 0;",
      "info" : "VariableDeclarationStatement[34228-34277]:VariableDeclarationStatement[36400-36449]"
    }, {
      "left" : "asteriskCount = 0;",
      "right" : "asteriskCount = 0;",
      "info" : "ExpressionStatement[34285-34303]:ExpressionStatement[36457-36475]"
    }, {
      "left" : "recursive = ch == '/' || ch == '\\\\';",
      "right" : "recursive = ch == '/' || ch == '\\\\';",
      "info" : "ExpressionStatement[34310-34346]:ExpressionStatement[36482-36518]"
    }, {
      "left" : "if (foundRecursivePattern)",
      "right" : "if (foundRecursivePattern)",
      "info" : "IfStatement[34354-34448]:IfStatement[36526-36620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34381-34448]:Block[36553-36620]"
    }, {
      "left" : "builder.append(\"(?:[^/]+/)*?\");",
      "right" : "builder.append(\"(?:[^/]+/)*?\");",
      "info" : "ExpressionStatement[34391-34422]:ExpressionStatement[36563-36594]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[34431-34440]:ContinueStatement[36603-36612]"
    }, {
      "left" : "if (asterisksFound)",
      "right" : "if (asterisksFound)",
      "info" : "IfStatement[34456-34519]:IfStatement[36628-36691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34476-34519]:Block[36648-36691]"
    }, {
      "left" : "builder.append(\"[^/]*?\");",
      "right" : "builder.append(\"[^/]*?\");",
      "info" : "ExpressionStatement[34486-34511]:ExpressionStatement[36658-36683]"
    }, {
      "left" : "if (ch == '(' ||\n          ch == ')' ||\n          ch == '[' ||\n          ch == ']' ||\n          ch == '^' ||\n          ch == '$' ||\n          ch == '.' ||\n          ch == '{' ||\n          ch == '}' ||\n          ch == '+' ||\n          ch == '|')",
      "right" : "if (ch == '(' ||\n          ch == ')' ||\n          ch == '[' ||\n          ch == ']' ||\n          ch == '^' ||\n          ch == '$' ||\n          ch == '.' ||\n          ch == '{' ||\n          ch == '}' ||\n          ch == '+' ||\n          ch == '|')",
      "info" : "IfStatement[34527-34881]:IfStatement[36699-37053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34772-34881]:Block[36944-37053]"
    }, {
      "left" : "builder.append('\\\\').append(ch);",
      "right" : "builder.append('\\\\').append(ch);",
      "info" : "ExpressionStatement[34823-34855]:ExpressionStatement[36995-37027]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[34864-34873]:ContinueStatement[37036-37045]"
    }, {
      "left" : "if (ch == '?')",
      "right" : "if (ch == '?')",
      "info" : "IfStatement[34888-34965]:IfStatement[37060-37137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34903-34965]:Block[37075-37137]"
    }, {
      "left" : "builder.append(\"[^/]{1}\");",
      "right" : "builder.append(\"[^/]{1}\");",
      "info" : "ExpressionStatement[34913-34939]:ExpressionStatement[37085-37111]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[34948-34957]:ContinueStatement[37120-37129]"
    }, {
      "left" : "if (ch == '\\\\')",
      "right" : "if (ch == '\\\\')",
      "info" : "IfStatement[34972-35044]:IfStatement[37144-37216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34988-35044]:Block[37160-37216]"
    }, {
      "left" : "builder.append('/');",
      "right" : "builder.append('/');",
      "info" : "ExpressionStatement[34998-35018]:ExpressionStatement[37170-37190]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[35027-35036]:ContinueStatement[37199-37208]"
    }, {
      "left" : "builder.append(ch);",
      "right" : "builder.append(ch);",
      "info" : "ExpressionStatement[35051-35070]:ExpressionStatement[37223-37242]"
    }, {
      "left" : "final boolean isTrailingSlash = builder.length() > 0 && builder.charAt(builder.length() - 1) == '/';",
      "right" : "final boolean isTrailingSlash = builder.length() > 0 && builder.charAt(builder.length() - 1) == '/';",
      "info" : "VariableDeclarationStatement[35174-35274]:VariableDeclarationStatement[37346-37446]"
    }, {
      "left" : "if (asteriskCount == 0 && isTrailingSlash || recursive && asteriskCount == 2)",
      "right" : "if (asteriskCount == 0 && isTrailingSlash || recursive && asteriskCount == 2)",
      "info" : "IfStatement[35279-35653]:IfStatement[37451-37825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35357-35581]:Block[37529-37753]"
    }, {
      "left" : "if (isTrailingSlash)",
      "right" : "if (isTrailingSlash)",
      "info" : "IfStatement[35365-35444]:IfStatement[37537-37616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35386-35444]:Block[37558-37616]"
    }, {
      "left" : "builder.setLength(builder.length() - 1);",
      "right" : "builder.setLength(builder.length() - 1);",
      "info" : "ExpressionStatement[35396-35436]:ExpressionStatement[37568-37608]"
    }, {
      "left" : "if (builder.length() == 0)",
      "right" : "if (builder.length() == 0)",
      "info" : "IfStatement[35451-35575]:IfStatement[37623-37747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35478-35517]:Block[37650-37689]"
    }, {
      "left" : "builder.append(\".*\");",
      "right" : "builder.append(\".*\");",
      "info" : "ExpressionStatement[35488-35509]:ExpressionStatement[37660-37681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35529-35575]:Block[37701-37747]"
    }, {
      "left" : "builder.append(\"(?:$|/.+)\");",
      "right" : "builder.append(\"(?:$|/.+)\");",
      "info" : "ExpressionStatement[35539-35567]:ExpressionStatement[37711-37739]"
    }, {
      "left" : "if (asteriskCount > 0)",
      "right" : "if (asteriskCount > 0)",
      "info" : "IfStatement[35591-35653]:IfStatement[37763-37825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35614-35653]:Block[37786-37825]"
    }, {
      "left" : "builder.append(\"[^/]*?\");",
      "right" : "builder.append(\"[^/]*?\");",
      "info" : "ExpressionStatement[35622-35647]:ExpressionStatement[37794-37819]"
    }, {
      "left" : "return builder.toString();",
      "right" : "return builder.toString();",
      "info" : "ReturnStatement[35658-35684]:ReturnStatement[37830-37856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35777-36186]:Block[37949-38358]"
    }, {
      "left" : "if (!toDir.exists())",
      "right" : "if (!toDir.exists())",
      "info" : "IfStatement[35783-35835]:IfStatement[37955-38007]"
    }, {
      "left" : "return fromDir.renameTo(toDir);",
      "right" : "return fromDir.renameTo(toDir);",
      "info" : "ReturnStatement[35804-35835]:ReturnStatement[37976-38007]"
    }, {
      "left" : "File[] files = fromDir.listFiles();",
      "right" : "File[] files = fromDir.listFiles();",
      "info" : "VariableDeclarationStatement[35841-35876]:VariableDeclarationStatement[38013-38048]"
    }, {
      "left" : "if (files == null)",
      "right" : "if (files == null)",
      "info" : "IfStatement[35881-35913]:IfStatement[38053-38085]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35900-35913]:ReturnStatement[38072-38085]"
    }, {
      "left" : "boolean success = true;",
      "right" : "boolean success = true;",
      "info" : "VariableDeclarationStatement[35919-35942]:VariableDeclarationStatement[38091-38114]"
    }, {
      "left" : "for (File fromFile : files)",
      "right" : "for (File fromFile : files)",
      "info" : "EnhancedForStatement[35948-36094]:EnhancedForStatement[38120-38266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35976-36094]:Block[38148-38266]"
    }, {
      "left" : "File toFile = new File(toDir, fromFile.getName());",
      "right" : "File toFile = new File(toDir, fromFile.getName());",
      "info" : "VariableDeclarationStatement[35984-36034]:VariableDeclarationStatement[38156-38206]"
    }, {
      "left" : "success = success && fromFile.renameTo(toFile);",
      "right" : "success = success && fromFile.renameTo(toFile);",
      "info" : "ExpressionStatement[36041-36088]:ExpressionStatement[38213-38260]"
    }, {
      "left" : "fromDir.delete();",
      "right" : "fromDir.delete();",
      "info" : "ExpressionStatement[36144-36161]:ExpressionStatement[38316-38333]"
    }, {
      "left" : "return success;",
      "right" : "return success;",
      "info" : "ReturnStatement[36167-36182]:ReturnStatement[38339-38354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36444-36490]:Block[38616-38662]"
    }, {
      "left" : "return sanitizeFileName(name, true);",
      "right" : "return sanitizeFileName(name, true);",
      "info" : "ReturnStatement[36450-36486]:ReturnStatement[38622-38658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36641-36688]:Block[38813-38860]"
    }, {
      "left" : "return sanitizeFileName(name, false);",
      "right" : "return sanitizeFileName(name, false);",
      "info" : "ReturnStatement[36647-36684]:ReturnStatement[38819-38856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36780-37634]:Block[38952-39806]"
    }, {
      "left" : "StringBuilder result = null;",
      "right" : "StringBuilder result = null;",
      "info" : "VariableDeclarationStatement[36786-36814]:VariableDeclarationStatement[38958-38986]"
    }, {
      "left" : "int last = 0;",
      "right" : "int last = 0;",
      "info" : "VariableDeclarationStatement[36819-36832]:VariableDeclarationStatement[38991-39004]"
    }, {
      "left" : "int length = name.length();",
      "right" : "int length = name.length();",
      "info" : "VariableDeclarationStatement[36837-36864]:VariableDeclarationStatement[39009-39036]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[36869-37475]:ForStatement[39041-39647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36902-37475]:Block[39074-39647]"
    }, {
      "left" : "char c = name.charAt(i);",
      "right" : "char c = name.charAt(i);",
      "info" : "VariableDeclarationStatement[36910-36934]:VariableDeclarationStatement[39082-39106]"
    }, {
      "left" : "boolean appendReplacement = true;",
      "right" : "boolean appendReplacement = true;",
      "info" : "VariableDeclarationStatement[36941-36974]:VariableDeclarationStatement[39113-39146]"
    }, {
      "left" : "if (c > 0 && c < 255)",
      "right" : "if (c > 0 && c < 255)",
      "info" : "IfStatement[36981-37239]:IfStatement[39153-39411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37003-37183]:Block[39175-39355]"
    }, {
      "left" : "if (strict ? (Character.isLetterOrDigit(c) || c == '_') : (Character.isJavaIdentifierPart(c) || c == ' ' || c == '@' || c == '-'))",
      "right" : "if (strict ? (Character.isLetterOrDigit(c) || c == '_') : (Character.isJavaIdentifierPart(c) || c == ' ' || c == '@' || c == '-'))",
      "info" : "IfStatement[37013-37175]:IfStatement[39185-39347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37144-37175]:Block[39316-39347]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[37156-37165]:ContinueStatement[39328-39337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37195-37239]:Block[39367-39411]"
    }, {
      "left" : "appendReplacement = false;",
      "right" : "appendReplacement = false;",
      "info" : "ExpressionStatement[37205-37231]:ExpressionStatement[39377-39403]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[37247-37314]:IfStatement[39419-39486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37267-37314]:Block[39439-39486]"
    }, {
      "left" : "result = new StringBuilder();",
      "right" : "result = new StringBuilder();",
      "info" : "ExpressionStatement[37277-37306]:ExpressionStatement[39449-39478]"
    }, {
      "left" : "if (last < i)",
      "right" : "if (last < i)",
      "info" : "IfStatement[37321-37382]:IfStatement[39493-39554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37335-37382]:Block[39507-39554]"
    }, {
      "left" : "result.append(name, last, i);",
      "right" : "result.append(name, last, i);",
      "info" : "ExpressionStatement[37345-37374]:ExpressionStatement[39517-39546]"
    }, {
      "left" : "if (appendReplacement)",
      "right" : "if (appendReplacement)",
      "info" : "IfStatement[37389-37449]:IfStatement[39561-39621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37412-37449]:Block[39584-39621]"
    }, {
      "left" : "result.append('_');",
      "right" : "result.append('_');",
      "info" : "ExpressionStatement[37422-37441]:ExpressionStatement[39594-39613]"
    }, {
      "left" : "last = i + 1;",
      "right" : "last = i + 1;",
      "info" : "ExpressionStatement[37456-37469]:ExpressionStatement[39628-39641]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[37481-37527]:IfStatement[39653-39699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37501-37527]:Block[39673-39699]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[37509-37521]:ReturnStatement[39681-39693]"
    }, {
      "left" : "if (last < length)",
      "right" : "if (last < length)",
      "info" : "IfStatement[37533-37600]:IfStatement[39705-39772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37552-37600]:Block[39724-39772]"
    }, {
      "left" : "result.append(name, last, length);",
      "right" : "result.append(name, last, length);",
      "info" : "ExpressionStatement[37560-37594]:ExpressionStatement[39732-39766]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[37605-37630]:ReturnStatement[39777-39802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37691-37726]:Block[39863-39898]"
    }, {
      "left" : "return file.canExecute();",
      "right" : "return file.canExecute();",
      "info" : "ReturnStatement[37697-37722]:ReturnStatement[39869-39894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37814-38074]:Block[39986-40246]"
    }, {
      "left" : "final boolean writableFlag = !readOnlyFlag;",
      "right" : "final boolean writableFlag = !readOnlyFlag;",
      "info" : "VariableDeclarationStatement[37820-37863]:VariableDeclarationStatement[39992-40035]"
    }, {
      "left" : "final File file = new File(path);",
      "right" : "final File file = new File(path);",
      "info" : "VariableDeclarationStatement[37868-37901]:VariableDeclarationStatement[40040-40073]"
    }, {
      "left" : "if (!file.setWritable(writableFlag) && file.canWrite() != writableFlag)",
      "right" : "if (!file.setWritable(writableFlag) && file.canWrite() != writableFlag)",
      "info" : "IfStatement[37906-38070]:IfStatement[40078-40242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37978-38070]:Block[40150-40242]"
    }, {
      "left" : "LOG.warn(\"Can't set writable attribute of '\" + path + \"' to \" + readOnlyFlag);",
      "right" : "LOG.warn(\"Can't set writable attribute of '\" + path + \"' to \" + readOnlyFlag);",
      "info" : "ExpressionStatement[37986-38064]:ExpressionStatement[40158-40236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38171-38249]:Block[40343-40421]"
    }, {
      "left" : "writeToFile(file, text.getBytes(CharsetToolkit.UTF8_CHARSET), true);",
      "right" : "writeToFile(file, text.getBytes(CharsetToolkit.UTF8_CHARSET), true);",
      "info" : "ExpressionStatement[38177-38245]:ExpressionStatement[40349-40417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38345-38386]:Block[40517-40558]"
    }, {
      "left" : "writeToFile(file, text, false);",
      "right" : "writeToFile(file, text, false);",
      "info" : "ExpressionStatement[38351-38382]:ExpressionStatement[40523-40554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38482-38561]:Block[40654-40733]"
    }, {
      "left" : "writeToFile(file, text.getBytes(CharsetToolkit.UTF8_CHARSET), false);",
      "right" : "writeToFile(file, text.getBytes(CharsetToolkit.UTF8_CHARSET), false);",
      "info" : "ExpressionStatement[38488-38557]:ExpressionStatement[40660-40729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38675-38726]:Block[40847-40898]"
    }, {
      "left" : "writeToFile(file, text, off, len, false);",
      "right" : "writeToFile(file, text, off, len, false);",
      "info" : "ExpressionStatement[38681-38722]:ExpressionStatement[40853-40894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38838-38896]:Block[41010-41068]"
    }, {
      "left" : "writeToFile(file, text, 0, text.length, append);",
      "right" : "writeToFile(file, text, 0, text.length, append);",
      "info" : "ExpressionStatement[38844-38892]:ExpressionStatement[41016-41064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39027-39217]:Block[41199-41389]"
    }, {
      "left" : "createParentDirs(file);",
      "right" : "createParentDirs(file);",
      "info" : "ExpressionStatement[39033-39056]:ExpressionStatement[41205-41228]"
    }, {
      "left" : "OutputStream stream = new FileOutputStream(file, append);",
      "right" : "OutputStream stream = new FileOutputStream(file, append);",
      "info" : "VariableDeclarationStatement[39062-39119]:VariableDeclarationStatement[41234-41291]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[39124-39213]:TryStatement[41296-41385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39128-39171]:Block[41300-41343]"
    }, {
      "left" : "stream.write(text, off, len);",
      "right" : "stream.write(text, off, len);",
      "info" : "ExpressionStatement[39136-39165]:ExpressionStatement[41308-41337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39184-39213]:Block[41356-41385]"
    }, {
      "left" : "stream.close();",
      "right" : "stream.close();",
      "info" : "ExpressionStatement[39192-39207]:ExpressionStatement[41364-41379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39323-39387]:Block[41495-41559]"
    }, {
      "left" : "return processFilesRecursively(root, processor, null);",
      "right" : "return processFilesRecursively(root, processor, null);",
      "info" : "ReturnStatement[39329-39383]:ReturnStatement[41501-41555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39590-40062]:Block[41762-42234]"
    }, {
      "left" : "final LinkedList<File> queue = new LinkedList<File>();",
      "right" : "final LinkedList<File> queue = new LinkedList<File>();",
      "info" : "VariableDeclarationStatement[39596-39650]:VariableDeclarationStatement[41768-41822]"
    }, {
      "left" : "queue.add(root);",
      "right" : "queue.add(root);",
      "info" : "ExpressionStatement[39655-39671]:ExpressionStatement[41827-41843]"
    }, {
      "left" : "while (!queue.isEmpty())",
      "right" : "while (!queue.isEmpty())",
      "info" : "WhileStatement[39676-40041]:WhileStatement[41848-42213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39701-40041]:Block[41873-42213]"
    }, {
      "left" : "final File file = queue.removeFirst();",
      "right" : "final File file = queue.removeFirst();",
      "info" : "VariableDeclarationStatement[39709-39747]:VariableDeclarationStatement[41881-41919]"
    }, {
      "left" : "if (!processor.process(file))",
      "right" : "if (!processor.process(file))",
      "info" : "IfStatement[39754-39797]:IfStatement[41926-41969]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39784-39797]:ReturnStatement[41956-41969]"
    }, {
      "left" : "if (directoryFilter != null && (!file.isDirectory() || !directoryFilter.process(file)))",
      "right" : "if (directoryFilter != null && (!file.isDirectory() || !directoryFilter.process(file)))",
      "info" : "IfStatement[39804-39901]:IfStatement[41976-42073]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[39892-39901]:ContinueStatement[42064-42073]"
    }, {
      "left" : "final File[] children = file.listFiles();",
      "right" : "final File[] children = file.listFiles();",
      "info" : "VariableDeclarationStatement[39909-39950]:VariableDeclarationStatement[42081-42122]"
    }, {
      "left" : "if (children != null)",
      "right" : "if (children != null)",
      "info" : "IfStatement[39957-40035]:IfStatement[42129-42207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39979-40035]:Block[42151-42207]"
    }, {
      "left" : "ContainerUtil.addAll(queue, children);",
      "right" : "ContainerUtil.addAll(queue, children);",
      "info" : "ExpressionStatement[39989-40027]:ExpressionStatement[42161-42199]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40046-40058]:ReturnStatement[42218-42230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40142-40357]:Block[42314-42529]"
    }, {
      "left" : "for (String path : paths)",
      "right" : "for (String path : paths)",
      "info" : "EnhancedForStatement[40148-40335]:EnhancedForStatement[42320-42507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40174-40335]:Block[42346-42507]"
    }, {
      "left" : "if (!StringUtil.isEmptyOrSpaces(path))",
      "right" : "if (!StringUtil.isEmptyOrSpaces(path))",
      "info" : "IfStatement[40182-40329]:IfStatement[42354-42501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40221-40329]:Block[42393-42501]"
    }, {
      "left" : "File file = new File(toSystemDependentName(path));",
      "right" : "File file = new File(toSystemDependentName(path));",
      "info" : "VariableDeclarationStatement[40231-40281]:VariableDeclarationStatement[42403-42453]"
    }, {
      "left" : "if (file.exists())",
      "right" : "if (file.exists())",
      "info" : "IfStatement[40290-40321]:IfStatement[42462-42493]"
    }, {
      "left" : "return file;",
      "right" : "return file;",
      "info" : "ReturnStatement[40309-40321]:ReturnStatement[42481-42493]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40341-40353]:ReturnStatement[42513-42525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40458-40850]:Block[42630-43022]"
    }, {
      "left" : "final ArrayList<File> found = new ArrayList<File>();",
      "right" : "final ArrayList<File> found = new ArrayList<File>();",
      "info" : "VariableDeclarationStatement[40464-40516]:VariableDeclarationStatement[42636-42688]"
    }, {
      "left" : "final File[] files = dir.listFiles();",
      "right" : "final File[] files = dir.listFiles();",
      "info" : "VariableDeclarationStatement[40521-40558]:VariableDeclarationStatement[42693-42730]"
    }, {
      "left" : "if (files != null)",
      "right" : "if (files != null)",
      "info" : "IfStatement[40563-40828]:IfStatement[42735-43000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40582-40828]:Block[42754-43000]"
    }, {
      "left" : "for (File file : files)",
      "right" : "for (File file : files)",
      "info" : "EnhancedForStatement[40590-40822]:EnhancedForStatement[42762-42994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40614-40822]:Block[42786-42994]"
    }, {
      "left" : "if (file.isDirectory())",
      "right" : "if (file.isDirectory())",
      "info" : "IfStatement[40624-40814]:IfStatement[42796-42986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40648-40715]:Block[42820-42887]"
    }, {
      "left" : "found.addAll(findFilesByMask(pattern, file));",
      "right" : "found.addAll(findFilesByMask(pattern, file));",
      "info" : "ExpressionStatement[40660-40705]:ExpressionStatement[42832-42877]"
    }, {
      "left" : "if (pattern.matcher(file.getName()).matches())",
      "right" : "if (pattern.matcher(file.getName()).matches())",
      "info" : "IfStatement[40729-40814]:IfStatement[42901-42986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40776-40814]:Block[42948-42986]"
    }, {
      "left" : "found.add(file);",
      "right" : "found.add(file);",
      "info" : "ExpressionStatement[40788-40804]:ExpressionStatement[42960-42976]"
    }, {
      "left" : "return found;",
      "right" : "return found;",
      "info" : "ReturnStatement[40833-40846]:ReturnStatement[43005-43018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40957-41350]:Block[43129-43522]"
    }, {
      "left" : "final ArrayList<File> found = new ArrayList<File>();",
      "right" : "final ArrayList<File> found = new ArrayList<File>();",
      "info" : "VariableDeclarationStatement[40963-41015]:VariableDeclarationStatement[43135-43187]"
    }, {
      "left" : "final File[] files = dir.listFiles();",
      "right" : "final File[] files = dir.listFiles();",
      "info" : "VariableDeclarationStatement[41020-41057]:VariableDeclarationStatement[43192-43229]"
    }, {
      "left" : "if (files != null)",
      "right" : "if (files != null)",
      "info" : "IfStatement[41062-41328]:IfStatement[43234-43500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41081-41328]:Block[43253-43500]"
    }, {
      "left" : "for (File file : files)",
      "right" : "for (File file : files)",
      "info" : "EnhancedForStatement[41089-41322]:EnhancedForStatement[43261-43494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41113-41322]:Block[43285-43494]"
    }, {
      "left" : "if (pattern.matcher(file.getName()).matches())",
      "right" : "if (pattern.matcher(file.getName()).matches())",
      "info" : "IfStatement[41123-41208]:IfStatement[43295-43380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41170-41208]:Block[43342-43380]"
    }, {
      "left" : "found.add(file);",
      "right" : "found.add(file);",
      "info" : "ExpressionStatement[41182-41198]:ExpressionStatement[43354-43370]"
    }, {
      "left" : "if (file.isDirectory())",
      "right" : "if (file.isDirectory())",
      "info" : "IfStatement[41217-41314]:IfStatement[43389-43486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41241-41314]:Block[43413-43486]"
    }, {
      "left" : "found.addAll(findFilesOrDirsByMask(pattern, file));",
      "right" : "found.addAll(findFilesOrDirsByMask(pattern, file));",
      "info" : "ExpressionStatement[41253-41304]:ExpressionStatement[43425-43476]"
    }, {
      "left" : "return found;",
      "right" : "return found;",
      "info" : "ReturnStatement[41333-41346]:ReturnStatement[43505-43518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41908-42992]:Block[44080-45164]"
    }, {
      "left" : "if (StringUtil.isEmpty(providedPath))",
      "right" : "if (StringUtil.isEmpty(providedPath))",
      "info" : "IfStatement[41914-41976]:IfStatement[44086-44148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41952-41976]:Block[44124-44148]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[41960-41970]:ReturnStatement[44132-44142]"
    }, {
      "left" : "File providedFile = new File(providedPath);",
      "right" : "File providedFile = new File(providedPath);",
      "info" : "VariableDeclarationStatement[41982-42025]:VariableDeclarationStatement[44154-44197]"
    }, {
      "left" : "if (providedFile.exists())",
      "right" : "if (providedFile.exists())",
      "info" : "IfStatement[42030-42269]:IfStatement[44202-44441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42057-42269]:Block[44229-44441]"
    }, {
      "left" : "String name = providedFile.getName();",
      "right" : "String name = providedFile.getName();",
      "info" : "VariableDeclarationStatement[42065-42102]:VariableDeclarationStatement[44237-44274]"
    }, {
      "left" : "for (String fileName : fileNames)",
      "right" : "for (String fileName : fileNames)",
      "info" : "EnhancedForStatement[42109-42263]:EnhancedForStatement[44281-44435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42143-42263]:Block[44315-44435]"
    }, {
      "left" : "if (name.equals(fileName))",
      "right" : "if (name.equals(fileName))",
      "info" : "IfStatement[42153-42255]:IfStatement[44325-44427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42180-42255]:Block[44352-44427]"
    }, {
      "left" : "return toSystemDependentName(providedFile.getPath());",
      "right" : "return toSystemDependentName(providedFile.getPath());",
      "info" : "ReturnStatement[42192-42245]:ReturnStatement[44364-44417]"
    }, {
      "left" : "if (providedFile.isDirectory())",
      "right" : "if (providedFile.isDirectory())",
      "info" : "IfStatement[42275-42579]:IfStatement[44447-44751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42307-42579]:Block[44479-44751]"
    }, {
      "left" : "for (String fileName : fileNames)",
      "right" : "for (String fileName : fileNames)",
      "info" : "EnhancedForStatement[42346-42573]:EnhancedForStatement[44518-44745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42380-42573]:Block[44552-44745]"
    }, {
      "left" : "File file = new File(providedFile, fileName);",
      "right" : "File file = new File(providedFile, fileName);",
      "info" : "VariableDeclarationStatement[42390-42435]:VariableDeclarationStatement[44562-44607]"
    }, {
      "left" : "if (fileName.equals(file.getName()) && file.exists())",
      "right" : "if (fileName.equals(file.getName()) && file.exists())",
      "info" : "IfStatement[42444-42565]:IfStatement[44616-44737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42498-42565]:Block[44670-44737]"
    }, {
      "left" : "return toSystemDependentName(file.getPath());",
      "right" : "return toSystemDependentName(file.getPath());",
      "info" : "ReturnStatement[42510-42555]:ReturnStatement[44682-44727]"
    }, {
      "left" : "providedFile = providedFile.getParentFile();",
      "right" : "providedFile = providedFile.getParentFile();",
      "info" : "ExpressionStatement[42585-42629]:ExpressionStatement[44757-44801]"
    }, {
      "left" : "if (providedFile != null && providedFile.exists())",
      "right" : "if (providedFile != null && providedFile.exists())",
      "info" : "IfStatement[42678-42970]:IfStatement[44850-45142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42729-42970]:Block[44901-45142]"
    }, {
      "left" : "for (String fileName : fileNames)",
      "right" : "for (String fileName : fileNames)",
      "info" : "EnhancedForStatement[42737-42964]:EnhancedForStatement[44909-45136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42771-42964]:Block[44943-45136]"
    }, {
      "left" : "File file = new File(providedFile, fileName);",
      "right" : "File file = new File(providedFile, fileName);",
      "info" : "VariableDeclarationStatement[42781-42826]:VariableDeclarationStatement[44953-44998]"
    }, {
      "left" : "if (fileName.equals(file.getName()) && file.exists())",
      "right" : "if (fileName.equals(file.getName()) && file.exists())",
      "info" : "IfStatement[42835-42956]:IfStatement[45007-45128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42889-42956]:Block[45061-45128]"
    }, {
      "left" : "return toSystemDependentName(file.getPath());",
      "right" : "return toSystemDependentName(file.getPath());",
      "info" : "ReturnStatement[42901-42946]:ReturnStatement[45073-45118]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[42976-42988]:ReturnStatement[45148-45160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43070-43143]:Block[45242-45315]"
    }, {
      "left" : "return isUnixAbsolutePath(path) || isWindowsAbsolutePath(path);",
      "right" : "return isUnixAbsolutePath(path) || isWindowsAbsolutePath(path);",
      "info" : "ReturnStatement[43076-43139]:ReturnStatement[45248-45311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43210-43248]:Block[45382-45420]"
    }, {
      "left" : "return path.startsWith(\"/\");",
      "right" : "return path.startsWith(\"/\");",
      "info" : "ReturnStatement[43216-43244]:ReturnStatement[45388-45416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43324-43441]:Block[45496-45613]"
    }, {
      "left" : "return pathString.length() >= 2 && Character.isLetter(pathString.charAt(0)) && pathString.charAt(1) == ':';",
      "right" : "return pathString.length() >= 2 && Character.isLetter(pathString.charAt(0)) && pathString.charAt(1) == ':';",
      "info" : "ReturnStatement[43330-43437]:ReturnStatement[45502-45609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43563-43622]:Block[45735-45794]"
    }, {
      "left" : "return getLocationRelativeToUserHome(path, true);",
      "right" : "return getLocationRelativeToUserHome(path, true);",
      "info" : "ReturnStatement[43569-43618]:ReturnStatement[45741-45790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43766-44123]:Block[45938-46295]"
    }, {
      "left" : "if (path == null)",
      "right" : "if (path == null)",
      "info" : "IfStatement[43772-43802]:IfStatement[45944-45974]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43790-43802]:ReturnStatement[45962-45974]"
    }, {
      "left" : "if (SystemInfo.isUnix || !unixOnly)",
      "right" : "if (SystemInfo.isUnix || !unixOnly)",
      "info" : "IfStatement[43808-44101]:IfStatement[45980-46273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43844-44101]:Block[46016-46273]"
    }, {
      "left" : "File projectDir = new File(path);",
      "right" : "File projectDir = new File(path);",
      "info" : "VariableDeclarationStatement[43852-43885]:VariableDeclarationStatement[46024-46057]"
    }, {
      "left" : "File userHomeDir = new File(SystemProperties.getUserHome());",
      "right" : "File userHomeDir = new File(SystemProperties.getUserHome());",
      "info" : "VariableDeclarationStatement[43892-43952]:VariableDeclarationStatement[46064-46124]"
    }, {
      "left" : "if (isAncestor(userHomeDir, projectDir, true))",
      "right" : "if (isAncestor(userHomeDir, projectDir, true))",
      "info" : "IfStatement[43959-44095]:IfStatement[46131-46267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44006-44095]:Block[46178-46267]"
    }, {
      "left" : "return '~' + File.separator + getRelativePath(userHomeDir, projectDir);",
      "right" : "return '~' + File.separator + getRelativePath(userHomeDir, projectDir);",
      "info" : "ReturnStatement[44016-44087]:ReturnStatement[46188-46259]"
    }, {
      "left" : "return path;",
      "right" : "return path;",
      "info" : "ReturnStatement[44107-44119]:ReturnStatement[46279-46291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44196-44348]:Block[46368-46520]"
    }, {
      "left" : "if (path.startsWith(\"~/\") || path.startsWith(\"~\\\\\"))",
      "right" : "if (path.startsWith(\"~/\") || path.startsWith(\"~\\\\\"))",
      "info" : "IfStatement[44202-44327]:IfStatement[46374-46499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44255-44327]:Block[46427-46499]"
    }, {
      "left" : "path = SystemProperties.getUserHome() + path.substring(1);",
      "right" : "path = SystemProperties.getUserHome() + path.substring(1);",
      "info" : "ExpressionStatement[44263-44321]:ExpressionStatement[46435-46493]"
    }, {
      "left" : "return path;",
      "right" : "return path;",
      "info" : "ReturnStatement[44332-44344]:ReturnStatement[46504-46516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44419-44482]:Block[46591-46654]"
    }, {
      "left" : "return notNullize(files, ArrayUtil.EMPTY_FILE_ARRAY);",
      "right" : "return notNullize(files, ArrayUtil.EMPTY_FILE_ARRAY);",
      "info" : "ReturnStatement[44425-44478]:ReturnStatement[46597-46650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44583-44637]:Block[46755-46809]"
    }, {
      "left" : "return files == null ? defaultFiles : files;",
      "right" : "return files == null ? defaultFiles : files;",
      "info" : "ReturnStatement[44589-44633]:ReturnStatement[46761-46805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44724-45094]:Block[46896-47266]"
    }, {
      "left" : "if (firstCharsIfText == null)",
      "right" : "if (firstCharsIfText == null)",
      "info" : "IfStatement[44730-44787]:IfStatement[46902-46959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44760-44787]:Block[46932-46959]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44768-44781]:ReturnStatement[46940-46953]"
    }, {
      "left" : "final int lineBreak = StringUtil.indexOf(firstCharsIfText, '\\n');",
      "right" : "final int lineBreak = StringUtil.indexOf(firstCharsIfText, '\\n');",
      "info" : "VariableDeclarationStatement[44792-44857]:VariableDeclarationStatement[46964-47029]"
    }, {
      "left" : "if (lineBreak < 0)",
      "right" : "if (lineBreak < 0)",
      "info" : "IfStatement[44862-44908]:IfStatement[47034-47080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44881-44908]:Block[47053-47080]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44889-44902]:ReturnStatement[47061-47074]"
    }, {
      "left" : "String firstLine = firstCharsIfText.subSequence(0, lineBreak).toString();",
      "right" : "String firstLine = firstCharsIfText.subSequence(0, lineBreak).toString();",
      "info" : "VariableDeclarationStatement[44913-44986]:VariableDeclarationStatement[47085-47158]"
    }, {
      "left" : "if (!firstLine.startsWith(\"#!\"))",
      "right" : "if (!firstLine.startsWith(\"#!\"))",
      "info" : "IfStatement[44991-45051]:IfStatement[47163-47223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45024-45051]:Block[47196-47223]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45032-45045]:ReturnStatement[47204-47217]"
    }, {
      "left" : "return firstLine.contains(marker);",
      "right" : "return firstLine.contains(marker);",
      "info" : "ReturnStatement[45056-45090]:ReturnStatement[47228-47262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45232-45296]:Block[47404-47468]"
    }, {
      "left" : "return FileUtilRt.createTempDirectory(prefix, suffix);",
      "right" : "return FileUtilRt.createTempDirectory(prefix, suffix);",
      "info" : "ReturnStatement[45238-45292]:ReturnStatement[47410-47464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45460-45538]:Block[47632-47710]"
    }, {
      "left" : "return FileUtilRt.createTempDirectory(prefix, suffix, deleteOnExit);",
      "right" : "return FileUtilRt.createTempDirectory(prefix, suffix, deleteOnExit);",
      "info" : "ReturnStatement[45466-45534]:ReturnStatement[47638-47706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45699-45768]:Block[47871-47940]"
    }, {
      "left" : "return FileUtilRt.createTempDirectory(dir, prefix, suffix);",
      "right" : "return FileUtilRt.createTempDirectory(dir, prefix, suffix);",
      "info" : "ReturnStatement[45705-45764]:ReturnStatement[47877-47936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46070-46153]:Block[48242-48325]"
    }, {
      "left" : "return FileUtilRt.createTempDirectory(dir, prefix, suffix, deleteOnExit);",
      "right" : "return FileUtilRt.createTempDirectory(dir, prefix, suffix, deleteOnExit);",
      "info" : "ReturnStatement[46076-46149]:ReturnStatement[48248-48321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46286-46345]:Block[48458-48517]"
    }, {
      "left" : "return FileUtilRt.createTempFile(prefix, suffix);",
      "right" : "return FileUtilRt.createTempFile(prefix, suffix);",
      "info" : "ReturnStatement[46292-46341]:ReturnStatement[48464-48513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46504-46577]:Block[48676-48749]"
    }, {
      "left" : "return FileUtilRt.createTempFile(prefix, suffix, deleteOnExit);",
      "right" : "return FileUtilRt.createTempFile(prefix, suffix, deleteOnExit);",
      "info" : "ReturnStatement[46510-46573]:ReturnStatement[48682-48745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46728-46792]:Block[48900-48964]"
    }, {
      "left" : "return FileUtilRt.createTempFile(dir, prefix, suffix);",
      "right" : "return FileUtilRt.createTempFile(dir, prefix, suffix);",
      "info" : "ReturnStatement[46734-46788]:ReturnStatement[48906-48960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46963-47035]:Block[49135-49207]"
    }, {
      "left" : "return FileUtilRt.createTempFile(dir, prefix, suffix, create);",
      "right" : "return FileUtilRt.createTempFile(dir, prefix, suffix, create);",
      "info" : "ReturnStatement[46969-47031]:ReturnStatement[49141-49203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47368-47454]:Block[49540-49626]"
    }, {
      "left" : "return FileUtilRt.createTempFile(dir, prefix, suffix, create, deleteOnExit);",
      "right" : "return FileUtilRt.createTempFile(dir, prefix, suffix, create, deleteOnExit);",
      "info" : "ReturnStatement[47374-47450]:ReturnStatement[49546-49622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47509-47556]:Block[49681-49728]"
    }, {
      "left" : "return FileUtilRt.getTempDirectory();",
      "right" : "return FileUtilRt.getTempDirectory();",
      "info" : "ReturnStatement[47515-47552]:ReturnStatement[49687-49724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47642-47701]:Block[49814-49873]"
    }, {
      "left" : "FileUtilRt.resetCanonicalTempPathCache(tempPath);",
      "right" : "FileUtilRt.resetCanonicalTempPathCache(tempPath);",
      "info" : "ExpressionStatement[47648-47697]:ExpressionStatement[49820-49869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47784-47842]:Block[49956-50014]"
    }, {
      "left" : "return FileUtilRt.generateRandomTemporaryPath();",
      "right" : "return FileUtilRt.generateRandomTemporaryPath();",
      "info" : "ReturnStatement[47790-47838]:ReturnStatement[49962-50010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47953-48019]:Block[50125-50191]"
    }, {
      "left" : "FileUtilRt.setExecutableAttribute(path, executableFlag);",
      "right" : "FileUtilRt.setExecutableAttribute(path, executableFlag);",
      "info" : "ExpressionStatement[47959-48015]:ExpressionStatement[50131-50187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48113-48200]:Block[50285-50372]"
    }, {
      "left" : "if (!file.setLastModified(timeStamp))",
      "right" : "if (!file.setLastModified(timeStamp))",
      "info" : "IfStatement[48119-48196]:IfStatement[50291-50368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48157-48196]:Block[50329-50368]"
    }, {
      "left" : "LOG.warn(file.getPath());",
      "right" : "LOG.warn(file.getPath());",
      "info" : "ExpressionStatement[48165-48190]:ExpressionStatement[50337-50362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48284-48327]:Block[50456-50499]"
    }, {
      "left" : "return FileUtilRt.loadFile(file);",
      "right" : "return FileUtilRt.loadFile(file);",
      "info" : "ReturnStatement[48290-48323]:ReturnStatement[50462-50495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48442-48508]:Block[50614-50680]"
    }, {
      "left" : "return FileUtilRt.loadFile(file, convertLineSeparators);",
      "right" : "return FileUtilRt.loadFile(file, convertLineSeparators);",
      "info" : "ReturnStatement[48448-48504]:ReturnStatement[50620-50676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48627-48680]:Block[50799-50852]"
    }, {
      "left" : "return FileUtilRt.loadFile(file, encoding);",
      "right" : "return FileUtilRt.loadFile(file, encoding);",
      "info" : "ReturnStatement[48633-48676]:ReturnStatement[50805-50848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48798-48871]:Block[50970-51043]"
    }, {
      "left" : "return String.valueOf(FileUtilRt.loadFileText(file, encoding));",
      "right" : "return String.valueOf(FileUtilRt.loadFileText(file, encoding));",
      "info" : "ReturnStatement[48804-48867]:ReturnStatement[50976-51039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49021-49097]:Block[51193-51269]"
    }, {
      "left" : "return FileUtilRt.loadFile(file, encoding, convertLineSeparators);",
      "right" : "return FileUtilRt.loadFile(file, encoding, convertLineSeparators);",
      "info" : "ReturnStatement[49027-49093]:ReturnStatement[51199-51265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49185-49232]:Block[51357-51404]"
    }, {
      "left" : "return FileUtilRt.loadFileText(file);",
      "right" : "return FileUtilRt.loadFileText(file);",
      "info" : "ReturnStatement[49191-49228]:ReturnStatement[51363-51400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49355-49412]:Block[51527-51584]"
    }, {
      "left" : "return FileUtilRt.loadFileText(file, encoding);",
      "right" : "return FileUtilRt.loadFileText(file, encoding);",
      "info" : "ReturnStatement[49361-49408]:ReturnStatement[51533-51580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49512-49565]:Block[51684-51737]"
    }, {
      "left" : "return FileUtilRt.loadText(reader, length);",
      "right" : "return FileUtilRt.loadText(reader, length);",
      "info" : "ReturnStatement[49518-49561]:ReturnStatement[51690-51733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49656-49700]:Block[51828-51872]"
    }, {
      "left" : "return FileUtilRt.loadLines(file);",
      "right" : "return FileUtilRt.loadLines(file);",
      "info" : "ReturnStatement[49662-49696]:ReturnStatement[51834-51868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49826-49880]:Block[51998-52052]"
    }, {
      "left" : "return FileUtilRt.loadLines(file, encoding);",
      "right" : "return FileUtilRt.loadLines(file, encoding);",
      "info" : "ReturnStatement[49832-49876]:ReturnStatement[52004-52048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49973-50017]:Block[52145-52189]"
    }, {
      "left" : "return FileUtilRt.loadLines(path);",
      "right" : "return FileUtilRt.loadLines(path);",
      "info" : "ReturnStatement[49979-50013]:ReturnStatement[52151-52185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50145-50199]:Block[52317-52371]"
    }, {
      "left" : "return FileUtilRt.loadLines(path, encoding);",
      "right" : "return FileUtilRt.loadLines(path, encoding);",
      "info" : "ReturnStatement[50151-50195]:ReturnStatement[52323-52367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50302-50348]:Block[52474-52520]"
    }, {
      "left" : "return FileUtilRt.loadLines(reader);",
      "right" : "return FileUtilRt.loadLines(reader);",
      "info" : "ReturnStatement[50308-50344]:ReturnStatement[52480-52516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50574-50632]:Block[52746-52804]"
    }, {
      "left" : "return loadLines(new InputStreamReader(stream));",
      "right" : "return loadLines(new InputStreamReader(stream));",
      "info" : "ReturnStatement[50580-50628]:ReturnStatement[52752-52800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50836-51011]:Block[53008-53183]"
    }, {
      "left" : "BufferedReader bufferedReader = new BufferedReader(reader);",
      "right" : "BufferedReader bufferedReader = new BufferedReader(reader);",
      "info" : "VariableDeclarationStatement[50842-50901]:VariableDeclarationStatement[53014-53073]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[50906-51007]:TryStatement[53078-53179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50910-50957]:Block[53082-53129]"
    }, {
      "left" : "return loadLines(bufferedReader);",
      "right" : "return loadLines(bufferedReader);",
      "info" : "ReturnStatement[50918-50951]:ReturnStatement[53090-53123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50970-51007]:Block[53142-53179]"
    }, {
      "left" : "bufferedReader.close();",
      "right" : "bufferedReader.close();",
      "info" : "ExpressionStatement[50978-51001]:ExpressionStatement[53150-53173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51105-51151]:Block[53277-53323]"
    }, {
      "left" : "return FileUtilRt.loadBytes(stream);",
      "right" : "return FileUtilRt.loadBytes(stream);",
      "info" : "ReturnStatement[51111-51147]:ReturnStatement[53283-53319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51257-51311]:Block[53429-53483]"
    }, {
      "left" : "return FileUtilRt.loadBytes(stream, length);",
      "right" : "return FileUtilRt.loadBytes(stream, length);",
      "info" : "ReturnStatement[51263-51307]:ReturnStatement[53435-53479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51385-51726]:Block[53557-53898]"
    }, {
      "left" : "ArrayList<String> list = new ArrayList<String>();",
      "right" : "ArrayList<String> list = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[51391-51440]:VariableDeclarationStatement[53563-53612]"
    }, {
      "left" : "int index = 0;",
      "right" : "int index = 0;",
      "info" : "VariableDeclarationStatement[51445-51459]:VariableDeclarationStatement[53617-53631]"
    }, {
      "left" : "int nextSeparator;",
      "right" : "int nextSeparator;",
      "info" : "VariableDeclarationStatement[51464-51482]:VariableDeclarationStatement[53636-53654]"
    }, {
      "left" : "while ((nextSeparator = path.indexOf(File.separatorChar, index)) != -1)",
      "right" : "while ((nextSeparator = path.indexOf(File.separatorChar, index)) != -1)",
      "info" : "WhileStatement[51487-51653]:WhileStatement[53659-53825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51559-51653]:Block[53731-53825]"
    }, {
      "left" : "list.add(path.substring(index, nextSeparator));",
      "right" : "list.add(path.substring(index, nextSeparator));",
      "info" : "ExpressionStatement[51567-51614]:ExpressionStatement[53739-53786]"
    }, {
      "left" : "index = nextSeparator + 1;",
      "right" : "index = nextSeparator + 1;",
      "info" : "ExpressionStatement[51621-51647]:ExpressionStatement[53793-53819]"
    }, {
      "left" : "list.add(path.substring(index, path.length()));",
      "right" : "list.add(path.substring(index, path.length()));",
      "info" : "ExpressionStatement[51658-51705]:ExpressionStatement[53830-53877]"
    }, {
      "left" : "return list;",
      "right" : "return list;",
      "info" : "ReturnStatement[51710-51722]:ReturnStatement[53882-53894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51822-52026]:Block[53994-54198]"
    }, {
      "left" : "if (file.isDirectory())",
      "right" : "if (file.isDirectory())",
      "info" : "IfStatement[51828-51879]:IfStatement[54000-54051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51852-51879]:Block[54024-54051]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51860-51873]:ReturnStatement[54032-54045]"
    }, {
      "left" : "final String name = file.getName();",
      "right" : "final String name = file.getName();",
      "info" : "VariableDeclarationStatement[51884-51919]:VariableDeclarationStatement[54056-54091]"
    }, {
      "left" : "return StringUtil.endsWithIgnoreCase(name, \".jar\") || StringUtil.endsWithIgnoreCase(name, \".zip\");",
      "right" : "return StringUtil.endsWithIgnoreCase(name, \".jar\") || StringUtil.endsWithIgnoreCase(name, \".zip\");",
      "info" : "ReturnStatement[51924-52022]:ReturnStatement[54096-54194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52119-52402]:Block[54291-54574]"
    }, {
      "left" : "if (!processor.process(root))",
      "right" : "if (!processor.process(root))",
      "info" : "IfStatement[52125-52182]:IfStatement[54297-54354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52155-52182]:Block[54327-54354]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52163-52176]:ReturnStatement[54335-54348]"
    }, {
      "left" : "File[] children = root.listFiles();",
      "right" : "File[] children = root.listFiles();",
      "info" : "VariableDeclarationStatement[52188-52223]:VariableDeclarationStatement[54360-54395]"
    }, {
      "left" : "if (children != null)",
      "right" : "if (children != null)",
      "info" : "IfStatement[52228-52380]:IfStatement[54400-54552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52250-52380]:Block[54422-54552]"
    }, {
      "left" : "for (File child : children)",
      "right" : "for (File child : children)",
      "info" : "EnhancedForStatement[52258-52374]:EnhancedForStatement[54430-54546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52286-52374]:Block[54458-54546]"
    }, {
      "left" : "if (!visitFiles(child, processor))",
      "right" : "if (!visitFiles(child, processor))",
      "info" : "IfStatement[52296-52366]:IfStatement[54468-54538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52331-52366]:Block[54503-54538]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52343-52356]:ReturnStatement[54515-54528]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[52386-52398]:ReturnStatement[54558-54570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52608-52982]:Block[54780-55154]"
    }, {
      "left" : "final Map<String, String> map = ContainerUtil.newLinkedHashMap();",
      "right" : "final Map<String, String> map = ContainerUtil.newLinkedHashMap();",
      "info" : "VariableDeclarationStatement[52614-52679]:VariableDeclarationStatement[54786-54851]"
    }, {
      "left" : "new Properties() {\n      @Override\n      public synchronized Object put(Object key, Object value) {\n        map.put(String.valueOf(key), String.valueOf(value));\n        //noinspection UseOfPropertiesAsHashtable\n        return super.put(key, value);\n      }\n    }.load(reader);",
      "right" : "new Properties() {\n      @Override\n      public synchronized Object put(Object key, Object value) {\n        map.put(String.valueOf(key), String.valueOf(value));\n        //noinspection UseOfPropertiesAsHashtable\n        return super.put(key, value);\n      }\n    }.load(reader);",
      "info" : "ExpressionStatement[52685-52961]:ExpressionStatement[54857-55133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52783-52941]:Block[54955-55113]"
    }, {
      "left" : "map.put(String.valueOf(key), String.valueOf(value));",
      "right" : "map.put(String.valueOf(key), String.valueOf(value));",
      "info" : "ExpressionStatement[52793-52845]:ExpressionStatement[54965-55017]"
    }, {
      "left" : "return super.put(key, value);",
      "right" : "return super.put(key, value);",
      "info" : "ReturnStatement[52904-52933]:ReturnStatement[55076-55105]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[52967-52978]:ReturnStatement[55139-55150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53039-53083]:Block[55211-55255]"
    }, {
      "left" : "return isRootPath(file.getPath());",
      "right" : "return isRootPath(file.getPath());",
      "info" : "ReturnStatement[53045-53079]:ReturnStatement[55217-55251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53142-53212]:Block[55314-55384]"
    }, {
      "left" : "return path.equals(\"/\") || path.matches(\"[a-zA-Z]:[/\\\\\\\\]\");",
      "right" : "return path.equals(\"/\") || path.matches(\"[a-zA-Z]:[/\\\\\\\\]\");",
      "info" : "ReturnStatement[53148-53208]:ReturnStatement[55320-55380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53268-53499]:Block[55440-55671]"
    }, {
      "left" : "File tempFileNameForDeletion = findSequentNonexistentFile(file.getParentFile(), file.getName(), \"\");",
      "right" : "File tempFileNameForDeletion = findSequentNonexistentFile(file.getParentFile(), file.getName(), \"\");",
      "info" : "VariableDeclarationStatement[53274-53374]:VariableDeclarationStatement[55446-55546]"
    }, {
      "left" : "boolean success = file.renameTo(tempFileNameForDeletion);",
      "right" : "boolean success = file.renameTo(tempFileNameForDeletion);",
      "info" : "VariableDeclarationStatement[53379-53436]:VariableDeclarationStatement[55551-55608]"
    }, {
      "left" : "return delete(success ? tempFileNameForDeletion:file);",
      "right" : "return delete(success ? tempFileNameForDeletion:file);",
      "info" : "ReturnStatement[53441-53495]:ReturnStatement[55613-55667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53602-54007]:Block[55774-56179]"
    }, {
      "left" : "FileAttributes attributes = FileSystemUtil.getAttributes(path);",
      "right" : "FileAttributes attributes = FileSystemUtil.getAttributes(path);",
      "info" : "VariableDeclarationStatement[53608-53671]:VariableDeclarationStatement[55780-55843]"
    }, {
      "left" : "if (attributes == null)",
      "right" : "if (attributes == null)",
      "info" : "IfStatement[53676-53752]:IfStatement[55848-55924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53700-53752]:Block[55872-55924]"
    }, {
      "left" : "throw new FileNotFoundException(path);",
      "right" : "throw new FileNotFoundException(path);",
      "info" : "ThrowStatement[53708-53746]:ThrowStatement[55880-55918]"
    }, {
      "left" : "FileAttributes upper = FileSystemUtil.getAttributes(path.toUpperCase(Locale.ENGLISH));",
      "right" : "FileAttributes upper = FileSystemUtil.getAttributes(path.toUpperCase(Locale.ENGLISH));",
      "info" : "VariableDeclarationStatement[53758-53844]:VariableDeclarationStatement[55930-56016]"
    }, {
      "left" : "FileAttributes lower = FileSystemUtil.getAttributes(path.toLowerCase(Locale.ENGLISH));",
      "right" : "FileAttributes lower = FileSystemUtil.getAttributes(path.toLowerCase(Locale.ENGLISH));",
      "info" : "VariableDeclarationStatement[53849-53935]:VariableDeclarationStatement[56021-56107]"
    }, {
      "left" : "return !(attributes.equals(upper) && attributes.equals(lower));",
      "right" : "return !(attributes.equals(upper) && attributes.equals(lower));",
      "info" : "ReturnStatement[53940-54003]:ReturnStatement[56112-56175]"
    } ]
  },
  "interFileMappings" : { }
}