{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "TypeDeclaration[1928-27994]:TypeDeclaration[1928-28301]"
    }, {
      "left" : "private final String fnName;",
      "right" : "private final String fnName;",
      "info" : "FieldDeclaration[2743-2771]:FieldDeclaration[2743-2771]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2774-2814]:FieldDeclaration[2774-2814]"
    }, {
      "left" : "private final CodingConvention codingConvention;",
      "right" : "private final CodingConvention codingConvention;",
      "info" : "FieldDeclaration[2817-2865]:FieldDeclaration[2817-2865]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[2868-2910]:FieldDeclaration[2868-2910]"
    }, {
      "left" : "private final Node errorRoot;",
      "right" : "private final Node errorRoot;",
      "info" : "FieldDeclaration[2913-2942]:FieldDeclaration[2913-2942]"
    }, {
      "left" : "private final String sourceName;",
      "right" : "private final String sourceName;",
      "info" : "FieldDeclaration[2945-2977]:FieldDeclaration[2945-2977]"
    }, {
      "left" : "private final Scope scope;",
      "right" : "private final Scope scope;",
      "info" : "FieldDeclaration[2980-3006]:FieldDeclaration[2980-3006]"
    }, {
      "left" : "private FunctionContents contents = UnknownFunctionContents.get();",
      "right" : "private FunctionContents contents = UnknownFunctionContents.get();",
      "info" : "FieldDeclaration[3010-3076]:FieldDeclaration[3010-3076]"
    }, {
      "left" : "private JSType returnType = null;",
      "right" : "private JSType returnType = null;",
      "info" : "FieldDeclaration[3080-3113]:FieldDeclaration[3080-3113]"
    }, {
      "left" : "private boolean returnTypeInferred = false;",
      "right" : "private boolean returnTypeInferred = false;",
      "info" : "FieldDeclaration[3116-3159]:FieldDeclaration[3116-3159]"
    }, {
      "left" : "private List<ObjectType> implementedInterfaces = null;",
      "right" : "private List<ObjectType> implementedInterfaces = null;",
      "info" : "FieldDeclaration[3162-3216]:FieldDeclaration[3162-3216]"
    }, {
      "left" : "private List<ObjectType> extendedInterfaces = null;",
      "right" : "private List<ObjectType> extendedInterfaces = null;",
      "info" : "FieldDeclaration[3219-3270]:FieldDeclaration[3219-3270]"
    }, {
      "left" : "private ObjectType baseType = null;",
      "right" : "private ObjectType baseType = null;",
      "info" : "FieldDeclaration[3273-3308]:FieldDeclaration[3273-3308]"
    }, {
      "left" : "private ObjectType thisType = null;",
      "right" : "private ObjectType thisType = null;",
      "info" : "FieldDeclaration[3311-3346]:FieldDeclaration[3311-3346]"
    }, {
      "left" : "private boolean isConstructor = false;",
      "right" : "private boolean isConstructor = false;",
      "info" : "FieldDeclaration[3349-3387]:FieldDeclaration[3349-3387]"
    }, {
      "left" : "private boolean isInterface = false;",
      "right" : "private boolean isInterface = false;",
      "info" : "FieldDeclaration[3390-3426]:FieldDeclaration[3390-3426]"
    }, {
      "left" : "private Node parametersNode = null;",
      "right" : "private Node parametersNode = null;",
      "info" : "FieldDeclaration[3429-3464]:FieldDeclaration[3429-3464]"
    }, {
      "left" : "private String templateTypeName = null;",
      "right" : "private String templateTypeName = null;",
      "info" : "FieldDeclaration[3467-3506]:FieldDeclaration[3467-3506]"
    }, {
      "left" : "static final DiagnosticType EXTENDS_WITHOUT_TYPEDEF = DiagnosticType.warning(\n      \"JSC_EXTENDS_WITHOUT_TYPEDEF\",\n      \"@extends used without @constructor or @interface for {0}\");",
      "right" : "static final DiagnosticType EXTENDS_WITHOUT_TYPEDEF = DiagnosticType.warning(\n      \"JSC_EXTENDS_WITHOUT_TYPEDEF\",\n      \"@extends used without @constructor or @interface for {0}\");",
      "info" : "FieldDeclaration[3510-3691]:FieldDeclaration[3510-3691]"
    }, {
      "left" : "static final DiagnosticType EXTENDS_NON_OBJECT = DiagnosticType.warning(\n      \"JSC_EXTENDS_NON_OBJECT\",\n      \"{0} @extends non-object type {1}\");",
      "right" : "static final DiagnosticType EXTENDS_NON_OBJECT = DiagnosticType.warning(\n      \"JSC_EXTENDS_NON_OBJECT\",\n      \"{0} @extends non-object type {1}\");",
      "info" : "FieldDeclaration[3695-3842]:FieldDeclaration[3695-3842]"
    }, {
      "left" : "static final DiagnosticType RESOLVED_TAG_EMPTY = DiagnosticType.warning(\n      \"JSC_RESOLVED_TAG_EMPTY\",\n      \"Could not resolve type in {0} tag of {1}\");",
      "right" : "static final DiagnosticType RESOLVED_TAG_EMPTY = DiagnosticType.warning(\n      \"JSC_RESOLVED_TAG_EMPTY\",\n      \"Could not resolve type in {0} tag of {1}\");",
      "info" : "FieldDeclaration[3846-4001]:FieldDeclaration[3846-4001]"
    }, {
      "left" : "static final DiagnosticType IMPLEMENTS_WITHOUT_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR\",\n          \"@implements used without @constructor or @interface for {0}\");",
      "right" : "static final DiagnosticType IMPLEMENTS_WITHOUT_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR\",\n          \"@implements used without @constructor or @interface for {0}\");",
      "info" : "FieldDeclaration[4005-4217]:FieldDeclaration[4005-4217]"
    }, {
      "left" : "static final DiagnosticType VAR_ARGS_MUST_BE_LAST = DiagnosticType.warning(\n      \"JSC_VAR_ARGS_MUST_BE_LAST\",\n      \"variable length argument must be last\");",
      "right" : "static final DiagnosticType VAR_ARGS_MUST_BE_LAST = DiagnosticType.warning(\n      \"JSC_VAR_ARGS_MUST_BE_LAST\",\n      \"variable length argument must be last\");",
      "info" : "FieldDeclaration[4221-4379]:FieldDeclaration[4221-4379]"
    }, {
      "left" : "static final DiagnosticType OPTIONAL_ARG_AT_END = DiagnosticType.warning(\n      \"JSC_OPTIONAL_ARG_AT_END\",\n      \"optional arguments must be at the end\");",
      "right" : "static final DiagnosticType OPTIONAL_ARG_AT_END = DiagnosticType.warning(\n      \"JSC_OPTIONAL_ARG_AT_END\",\n      \"optional arguments must be at the end\");",
      "info" : "FieldDeclaration[4383-4537]:FieldDeclaration[4383-4537]"
    }, {
      "left" : "static final DiagnosticType INEXISTANT_PARAM = DiagnosticType.warning(\n      \"JSC_INEXISTANT_PARAM\",\n      \"parameter {0} does not appear in {1}''s parameter list\");",
      "right" : "static final DiagnosticType INEXISTANT_PARAM = DiagnosticType.warning(\n      \"JSC_INEXISTANT_PARAM\",\n      \"parameter {0} does not appear in {1}''s parameter list\");",
      "info" : "FieldDeclaration[4541-4706]:FieldDeclaration[4541-4706]"
    }, {
      "left" : "static final DiagnosticType TYPE_REDEFINITION = DiagnosticType.warning(\n      \"JSC_TYPE_REDEFINITION\",\n      \"attempted re-definition of type {0}\\n\"\n      + \"found   : {1}\\n\"\n      + \"expected: {2}\");",
      "right" : "static final DiagnosticType TYPE_REDEFINITION = DiagnosticType.warning(\n      \"JSC_TYPE_REDEFINITION\",\n      \"attempted re-definition of type {0}\\n\"\n      + \"found   : {1}\\n\"\n      + \"expected: {2}\");",
      "info" : "FieldDeclaration[4710-4910]:FieldDeclaration[4710-4910]"
    }, {
      "left" : "static final DiagnosticType TEMPLATE_TYPE_DUPLICATED = DiagnosticType.warning(\n      \"JSC_TEMPLATE_TYPE_DUPLICATED\",\n      \"Only one parameter type must be the template type\");",
      "right" : "static final DiagnosticType TEMPLATE_TYPE_DUPLICATED = DiagnosticType.warning(\n      \"JSC_TEMPLATE_TYPE_DUPLICATED\",\n      \"Only one parameter type must be the template type\");",
      "info" : "FieldDeclaration[4914-5090]:FieldDeclaration[4914-5090]"
    }, {
      "left" : "static final DiagnosticType TEMPLATE_TYPE_EXPECTED = DiagnosticType.warning(\n      \"JSC_TEMPLATE_TYPE_EXPECTED\",\n      \"The template type must be a parameter type\");",
      "right" : "static final DiagnosticType TEMPLATE_TYPE_EXPECTED = DiagnosticType.warning(\n      \"JSC_TEMPLATE_TYPE_EXPECTED\",\n      \"The template type must be a parameter type\");",
      "info" : "FieldDeclaration[5094-5259]:FieldDeclaration[5094-5259]"
    }, {
      "left" : "static final DiagnosticType THIS_TYPE_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_THIS_TYPE_NON_OBJECT\",\n          \"@this type of a function must be an object\\n\" +\n          \"Actual type: {0}\");",
      "right" : "static final DiagnosticType THIS_TYPE_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_THIS_TYPE_NON_OBJECT\",\n          \"@this type of a function must be an object\\n\" +\n          \"Actual type: {0}\");",
      "info" : "FieldDeclaration[5263-5471]:FieldDeclaration[5263-5471]"
    }, {
      "left" : "ExtendedTypeValidator",
      "right" : "ExtendedTypeValidator",
      "info" : "TypeDeclaration[5475-6188]:TypeDeclaration[5475-6188]"
    }, {
      "left" : "public boolean apply(JSType type)",
      "right" : "public boolean apply(JSType type)",
      "info" : "MethodDeclaration[5546-6184]:MethodDeclaration[5546-6184]"
    }, {
      "left" : "ImplementedTypeValidator",
      "right" : "ImplementedTypeValidator",
      "info" : "TypeDeclaration[6192-6897]:TypeDeclaration[6192-6897]"
    }, {
      "left" : "public boolean apply(JSType type)",
      "right" : "public boolean apply(JSType type)",
      "info" : "MethodDeclaration[6266-6893]:MethodDeclaration[6266-6893]"
    }, {
      "left" : "ThisTypeValidator",
      "right" : "ThisTypeValidator",
      "info" : "TypeDeclaration[6901-7651]:TypeDeclaration[6901-7651]"
    }, {
      "left" : "public boolean apply(JSType type)",
      "right" : "public boolean apply(JSType type)",
      "info" : "MethodDeclaration[6968-7647]:MethodDeclaration[6968-7647]"
    }, {
      "left" : "FunctionTypeBuilder(String fnName, AbstractCompiler compiler,\n      Node errorRoot, String sourceName, Scope scope)",
      "right" : "FunctionTypeBuilder(String fnName, AbstractCompiler compiler,\n      Node errorRoot, String sourceName, Scope scope)",
      "info" : "MethodDeclaration[7655-8418]:MethodDeclaration[7655-8418]"
    }, {
      "left" : "FunctionTypeBuilder setContents(@Nullable FunctionContents contents)",
      "right" : "FunctionTypeBuilder setContents(@Nullable FunctionContents contents)",
      "info" : "MethodDeclaration[8422-8632]:MethodDeclaration[8422-8632]"
    }, {
      "left" : "FunctionTypeBuilder inferFromOverriddenFunction(\n      @Nullable FunctionType oldType, @Nullable Node paramsParent)",
      "right" : "FunctionTypeBuilder inferFromOverriddenFunction(\n      @Nullable FunctionType oldType, @Nullable Node paramsParent)",
      "info" : "MethodDeclaration[8636-11134]:MethodDeclaration[8636-11239]"
    }, {
      "left" : "FunctionTypeBuilder inferReturnType(@Nullable JSDocInfo info)",
      "right" : "FunctionTypeBuilder inferReturnType(@Nullable JSDocInfo info)",
      "info" : "MethodDeclaration[11138-11630]:MethodDeclaration[11243-11735]"
    }, {
      "left" : "FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info)",
      "right" : "FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info)",
      "info" : "MethodDeclaration[11634-13503]:MethodDeclaration[11739-13608]"
    }, {
      "left" : "FunctionTypeBuilder inferThisType(JSDocInfo info, JSType type)",
      "right" : "FunctionTypeBuilder inferThisType(JSDocInfo info, JSType type)",
      "info" : "MethodDeclaration[13507-13956]:MethodDeclaration[13612-14061]"
    }, {
      "left" : "FunctionTypeBuilder inferThisType(JSDocInfo info)",
      "right" : "FunctionTypeBuilder inferThisType(JSDocInfo info)",
      "info" : "MethodDeclaration[13960-14447]:MethodDeclaration[14065-14552]"
    }, {
      "left" : "FunctionTypeBuilder inferParameterTypes(JSDocInfo info)",
      "right" : "FunctionTypeBuilder inferParameterTypes(JSDocInfo info)",
      "info" : "MethodDeclaration[14451-14784]:MethodDeclaration[14556-14889]"
    }, {
      "left" : "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,\n      @Nullable JSDocInfo info)",
      "right" : "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,\n      @Nullable JSDocInfo info)",
      "info" : "MethodDeclaration[14788-17308]:MethodDeclaration[14893-17615]"
    }, {
      "left" : "private boolean isOptionalParameter(\n      Node param, @Nullable JSDocInfo info)",
      "right" : "private boolean isOptionalParameter(\n      Node param, @Nullable JSDocInfo info)",
      "info" : "MethodDeclaration[17312-17713]:MethodDeclaration[17619-18020]"
    }, {
      "left" : "private boolean isVarArgsParameter(\n      Node param, @Nullable JSDocInfo info)",
      "right" : "private boolean isVarArgsParameter(\n      Node param, @Nullable JSDocInfo info)",
      "info" : "MethodDeclaration[17717-18164]:MethodDeclaration[18024-18471]"
    }, {
      "left" : "FunctionTypeBuilder inferTemplateTypeName(@Nullable JSDocInfo info)",
      "right" : "FunctionTypeBuilder inferTemplateTypeName(@Nullable JSDocInfo info)",
      "info" : "MethodDeclaration[18168-18459]:MethodDeclaration[18475-18766]"
    }, {
      "left" : "private boolean addParameter(FunctionParamBuilder builder,\n      JSType paramType, boolean warnedAboutArgList,\n      boolean isOptional, boolean isVarArgs)",
      "right" : "private boolean addParameter(FunctionParamBuilder builder,\n      JSType paramType, boolean warnedAboutArgList,\n      boolean isOptional, boolean isVarArgs)",
      "info" : "MethodDeclaration[18463-20049]:MethodDeclaration[18770-20356]"
    }, {
      "left" : "FunctionType buildAndRegister()",
      "right" : "FunctionType buildAndRegister()",
      "info" : "MethodDeclaration[20053-21659]:MethodDeclaration[20360-21966]"
    }, {
      "left" : "private void maybeSetBaseType(FunctionType fnType)",
      "right" : "private void maybeSetBaseType(FunctionType fnType)",
      "info" : "MethodDeclaration[21663-21822]:MethodDeclaration[21970-22129]"
    }, {
      "left" : "private FunctionType getOrCreateConstructor()",
      "right" : "private FunctionType getOrCreateConstructor()",
      "info" : "MethodDeclaration[21826-23918]:MethodDeclaration[22133-24225]"
    }, {
      "left" : "private void reportWarning(DiagnosticType warning, String ... args)",
      "right" : "private void reportWarning(DiagnosticType warning, String ... args)",
      "info" : "MethodDeclaration[23922-24068]:MethodDeclaration[24229-24375]"
    }, {
      "left" : "private void reportError(DiagnosticType error, String ... args)",
      "right" : "private void reportError(DiagnosticType error, String ... args)",
      "info" : "MethodDeclaration[24072-24212]:MethodDeclaration[24379-24519]"
    }, {
      "left" : "static boolean isFunctionTypeDeclaration(JSDocInfo info)",
      "right" : "static boolean isFunctionTypeDeclaration(JSDocInfo info)",
      "info" : "MethodDeclaration[24216-24526]:MethodDeclaration[24523-24833]"
    }, {
      "left" : "private Scope getScopeDeclaredIn()",
      "right" : "private Scope getScopeDeclaredIn()",
      "info" : "MethodDeclaration[24530-25020]:MethodDeclaration[24837-25327]"
    }, {
      "left" : "private static boolean hasMoreTagsToResolve(ObjectType objectType)",
      "right" : "private static boolean hasMoreTagsToResolve(ObjectType objectType)",
      "info" : "MethodDeclaration[25024-25985]:MethodDeclaration[25331-26292]"
    }, {
      "left" : "FunctionContents",
      "right" : "FunctionContents",
      "info" : "TypeDeclaration[25989-26488]:TypeDeclaration[26296-26795]"
    }, {
      "left" : "Node getSourceNode();",
      "right" : "Node getSourceNode();",
      "info" : "MethodDeclaration[26087-26174]:MethodDeclaration[26394-26481]"
    }, {
      "left" : "boolean mayBeFromExterns();",
      "right" : "boolean mayBeFromExterns();",
      "info" : "MethodDeclaration[26180-26261]:MethodDeclaration[26487-26568]"
    }, {
      "left" : "boolean mayHaveNonEmptyReturns();",
      "right" : "boolean mayHaveNonEmptyReturns();",
      "info" : "MethodDeclaration[26267-26372]:MethodDeclaration[26574-26679]"
    }, {
      "left" : "Iterable<String> getEscapedVarNames();",
      "right" : "Iterable<String> getEscapedVarNames();",
      "info" : "MethodDeclaration[26378-26484]:MethodDeclaration[26685-26791]"
    }, {
      "left" : "UnknownFunctionContents",
      "right" : "UnknownFunctionContents",
      "info" : "TypeDeclaration[26492-27068]:TypeDeclaration[26799-27375]"
    }, {
      "left" : "private static UnknownFunctionContents singleton =\n        new UnknownFunctionContents();",
      "right" : "private static UnknownFunctionContents singleton =\n        new UnknownFunctionContents();",
      "info" : "FieldDeclaration[26563-26652]:FieldDeclaration[26870-26959]"
    }, {
      "left" : "static FunctionContents get()",
      "right" : "static FunctionContents get()",
      "info" : "MethodDeclaration[26658-26719]:MethodDeclaration[26965-27026]"
    }, {
      "left" : "public Node getSourceNode()",
      "right" : "public Node getSourceNode()",
      "info" : "MethodDeclaration[26725-26793]:MethodDeclaration[27032-27100]"
    }, {
      "left" : "public boolean mayBeFromExterns()",
      "right" : "public boolean mayBeFromExterns()",
      "info" : "MethodDeclaration[26799-26873]:MethodDeclaration[27106-27180]"
    }, {
      "left" : "public boolean mayHaveNonEmptyReturns()",
      "right" : "public boolean mayHaveNonEmptyReturns()",
      "info" : "MethodDeclaration[26879-26959]:MethodDeclaration[27186-27266]"
    }, {
      "left" : "public Iterable<String> getEscapedVarNames()",
      "right" : "public Iterable<String> getEscapedVarNames()",
      "info" : "MethodDeclaration[26965-27064]:MethodDeclaration[27272-27371]"
    }, {
      "left" : "AstFunctionContents",
      "right" : "AstFunctionContents",
      "info" : "TypeDeclaration[27072-27992]:TypeDeclaration[27379-28299]"
    }, {
      "left" : "private final Node n;",
      "right" : "private final Node n;",
      "info" : "FieldDeclaration[27139-27160]:FieldDeclaration[27446-27467]"
    }, {
      "left" : "private boolean hasNonEmptyReturns = false;",
      "right" : "private boolean hasNonEmptyReturns = false;",
      "info" : "FieldDeclaration[27165-27208]:FieldDeclaration[27472-27515]"
    }, {
      "left" : "private Set<String> escapedVarNames;",
      "right" : "private Set<String> escapedVarNames;",
      "info" : "FieldDeclaration[27213-27249]:FieldDeclaration[27520-27556]"
    }, {
      "left" : "AstFunctionContents(Node n)",
      "right" : "AstFunctionContents(Node n)",
      "info" : "MethodDeclaration[27255-27308]:MethodDeclaration[27562-27615]"
    }, {
      "left" : "public Node getSourceNode()",
      "right" : "public Node getSourceNode()",
      "info" : "MethodDeclaration[27314-27379]:MethodDeclaration[27621-27686]"
    }, {
      "left" : "public boolean mayBeFromExterns()",
      "right" : "public boolean mayBeFromExterns()",
      "info" : "MethodDeclaration[27385-27472]:MethodDeclaration[27692-27779]"
    }, {
      "left" : "public boolean mayHaveNonEmptyReturns()",
      "right" : "public boolean mayHaveNonEmptyReturns()",
      "info" : "MethodDeclaration[27478-27572]:MethodDeclaration[27785-27879]"
    }, {
      "left" : "void recordNonEmptyReturn()",
      "right" : "void recordNonEmptyReturn()",
      "info" : "MethodDeclaration[27578-27646]:MethodDeclaration[27885-27953]"
    }, {
      "left" : "public Iterable<String> getEscapedVarNames()",
      "right" : "public Iterable<String> getEscapedVarNames()",
      "info" : "MethodDeclaration[27652-27813]:MethodDeclaration[27959-28120]"
    }, {
      "left" : "void recordEscapedVarName(String name)",
      "right" : "void recordEscapedVarName(String name)",
      "info" : "MethodDeclaration[27819-27988]:MethodDeclaration[28126-28295]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5475-5482]:Modifier[5475-5482]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5483-5488]:TYPE_DECLARATION_KIND[5483-5488]"
    }, {
      "left" : "ExtendedTypeValidator",
      "right" : "ExtendedTypeValidator",
      "info" : "SimpleName[5489-5510]:SimpleName[5489-5510]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5546-5555]:MarkerAnnotation[5546-5555]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5560-5566]:Modifier[5560-5566]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5567-5574]:PrimitiveType[5567-5574]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[5575-5580]:SimpleName[5575-5580]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[5581-5592]:SingleVariableDeclaration[5581-5592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5594-6184]:Block[5594-6184]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(type);",
      "right" : "ObjectType objectType = ObjectType.cast(type);",
      "info" : "VariableDeclarationStatement[5602-5648]:VariableDeclarationStatement[5602-5648]"
    }, {
      "left" : "if (objectType == null)",
      "right" : "if (objectType == null)",
      "info" : "IfStatement[5655-6178]:IfStatement[5655-6178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5679-5778]:Block[5679-5778]"
    }, {
      "left" : "reportWarning(EXTENDS_NON_OBJECT, fnName, type.toString());",
      "right" : "reportWarning(EXTENDS_NON_OBJECT, fnName, type.toString());",
      "info" : "ExpressionStatement[5689-5748]:ExpressionStatement[5689-5748]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5757-5770]:ReturnStatement[5757-5770]"
    }, {
      "left" : "if (objectType.isEmptyType())",
      "right" : "if (objectType.isEmptyType())",
      "info" : "IfStatement[5784-6178]:IfStatement[5784-6178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5814-5908]:Block[5814-5908]"
    }, {
      "left" : "reportWarning(RESOLVED_TAG_EMPTY, \"@extends\", fnName);",
      "right" : "reportWarning(RESOLVED_TAG_EMPTY, \"@extends\", fnName);",
      "info" : "ExpressionStatement[5824-5878]:ExpressionStatement[5824-5878]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5887-5900]:ReturnStatement[5887-5900]"
    }, {
      "left" : "if (objectType.isUnknownType())",
      "right" : "if (objectType.isUnknownType())",
      "info" : "IfStatement[5914-6178]:IfStatement[5914-6178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5946-6142]:Block[5946-6142]"
    }, {
      "left" : "if (hasMoreTagsToResolve(objectType))",
      "right" : "if (hasMoreTagsToResolve(objectType))",
      "info" : "IfStatement[5956-6134]:IfStatement[5956-6134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5994-6028]:Block[5994-6028]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6006-6018]:ReturnStatement[6006-6018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6034-6134]:Block[6034-6134]"
    }, {
      "left" : "reportWarning(RESOLVED_TAG_EMPTY, \"@extends\", fnName);",
      "right" : "reportWarning(RESOLVED_TAG_EMPTY, \"@extends\", fnName);",
      "info" : "ExpressionStatement[6046-6100]:ExpressionStatement[6046-6100]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6111-6124]:ReturnStatement[6111-6124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6148-6178]:Block[6148-6178]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6158-6170]:ReturnStatement[6158-6170]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6192-6199]:Modifier[6192-6199]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6200-6205]:TYPE_DECLARATION_KIND[6200-6205]"
    }, {
      "left" : "ImplementedTypeValidator",
      "right" : "ImplementedTypeValidator",
      "info" : "SimpleName[6206-6230]:SimpleName[6206-6230]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6266-6275]:MarkerAnnotation[6266-6275]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6280-6286]:Modifier[6280-6286]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6287-6294]:PrimitiveType[6287-6294]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[6295-6300]:SimpleName[6295-6300]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[6301-6312]:SingleVariableDeclaration[6301-6312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6314-6893]:Block[6314-6893]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(type);",
      "right" : "ObjectType objectType = ObjectType.cast(type);",
      "info" : "VariableDeclarationStatement[6322-6368]:VariableDeclarationStatement[6322-6368]"
    }, {
      "left" : "if (objectType == null)",
      "right" : "if (objectType == null)",
      "info" : "IfStatement[6375-6887]:IfStatement[6375-6887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6399-6481]:Block[6399-6481]"
    }, {
      "left" : "reportError(BAD_IMPLEMENTED_TYPE, fnName);",
      "right" : "reportError(BAD_IMPLEMENTED_TYPE, fnName);",
      "info" : "ExpressionStatement[6409-6451]:ExpressionStatement[6409-6451]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6460-6473]:ReturnStatement[6460-6473]"
    }, {
      "left" : "if (objectType.isEmptyType())",
      "right" : "if (objectType.isEmptyType())",
      "info" : "IfStatement[6487-6887]:IfStatement[6487-6887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6517-6614]:Block[6517-6614]"
    }, {
      "left" : "reportWarning(RESOLVED_TAG_EMPTY, \"@implements\", fnName);",
      "right" : "reportWarning(RESOLVED_TAG_EMPTY, \"@implements\", fnName);",
      "info" : "ExpressionStatement[6527-6584]:ExpressionStatement[6527-6584]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6593-6606]:ReturnStatement[6593-6606]"
    }, {
      "left" : "if (objectType.isUnknownType())",
      "right" : "if (objectType.isUnknownType())",
      "info" : "IfStatement[6620-6887]:IfStatement[6620-6887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6652-6851]:Block[6652-6851]"
    }, {
      "left" : "if (hasMoreTagsToResolve(objectType))",
      "right" : "if (hasMoreTagsToResolve(objectType))",
      "info" : "IfStatement[6662-6843]:IfStatement[6662-6843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6700-6734]:Block[6700-6734]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6712-6724]:ReturnStatement[6712-6724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6740-6843]:Block[6740-6843]"
    }, {
      "left" : "reportWarning(RESOLVED_TAG_EMPTY, \"@implements\", fnName);",
      "right" : "reportWarning(RESOLVED_TAG_EMPTY, \"@implements\", fnName);",
      "info" : "ExpressionStatement[6752-6809]:ExpressionStatement[6752-6809]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6820-6833]:ReturnStatement[6820-6833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6857-6887]:Block[6857-6887]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6867-6879]:ReturnStatement[6867-6879]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6901-6908]:Modifier[6901-6908]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6909-6914]:TYPE_DECLARATION_KIND[6909-6914]"
    }, {
      "left" : "ThisTypeValidator",
      "right" : "ThisTypeValidator",
      "info" : "SimpleName[6915-6932]:SimpleName[6915-6932]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6968-6977]:MarkerAnnotation[6968-6977]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6982-6988]:Modifier[6982-6988]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6989-6996]:PrimitiveType[6989-6996]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[6997-7002]:SimpleName[6997-7002]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[7003-7014]:SingleVariableDeclaration[7003-7014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7016-7647]:Block[7016-7647]"
    }, {
      "left" : "if (!type.restrictByNotNullOrUndefined().isSubtype(\n              typeRegistry.getNativeType(OBJECT_TYPE)))",
      "right" : "if (!type.restrictByNotNullOrUndefined().isSubtype(\n              typeRegistry.getNativeType(OBJECT_TYPE)))",
      "info" : "IfStatement[7421-7622]:IfStatement[7421-7622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7529-7622]:Block[7529-7622]"
    }, {
      "left" : "reportWarning(THIS_TYPE_NON_OBJECT, type.toString());",
      "right" : "reportWarning(THIS_TYPE_NON_OBJECT, type.toString());",
      "info" : "ExpressionStatement[7539-7592]:ExpressionStatement[7539-7592]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7601-7614]:ReturnStatement[7601-7614]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7629-7641]:ReturnStatement[7629-7641]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleName[7973-7992]:SimpleName[7973-7992]"
    }, {
      "left" : "String fnName",
      "right" : "String fnName",
      "info" : "SingleVariableDeclaration[7993-8006]:SingleVariableDeclaration[7993-8006]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[8008-8033]:SingleVariableDeclaration[8008-8033]"
    }, {
      "left" : "Node errorRoot",
      "right" : "Node errorRoot",
      "info" : "SingleVariableDeclaration[8041-8055]:SingleVariableDeclaration[8041-8055]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[8057-8074]:SingleVariableDeclaration[8057-8074]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[8076-8087]:SingleVariableDeclaration[8076-8087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8089-8418]:Block[8089-8418]"
    }, {
      "left" : "Preconditions.checkNotNull(errorRoot);",
      "right" : "Preconditions.checkNotNull(errorRoot);",
      "info" : "ExpressionStatement[8095-8133]:ExpressionStatement[8095-8133]"
    }, {
      "left" : "this.fnName = fnName == null ? \"\" : fnName;",
      "right" : "this.fnName = fnName == null ? \"\" : fnName;",
      "info" : "ExpressionStatement[8139-8182]:ExpressionStatement[8139-8182]"
    }, {
      "left" : "this.codingConvention = compiler.getCodingConvention();",
      "right" : "this.codingConvention = compiler.getCodingConvention();",
      "info" : "ExpressionStatement[8187-8242]:ExpressionStatement[8187-8242]"
    }, {
      "left" : "this.typeRegistry = compiler.getTypeRegistry();",
      "right" : "this.typeRegistry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[8247-8294]:ExpressionStatement[8247-8294]"
    }, {
      "left" : "this.errorRoot = errorRoot;",
      "right" : "this.errorRoot = errorRoot;",
      "info" : "ExpressionStatement[8299-8326]:ExpressionStatement[8299-8326]"
    }, {
      "left" : "this.sourceName = sourceName;",
      "right" : "this.sourceName = sourceName;",
      "info" : "ExpressionStatement[8331-8360]:ExpressionStatement[8331-8360]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[8365-8390]:ExpressionStatement[8365-8390]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[8395-8414]:ExpressionStatement[8395-8414]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[8475-8494]:SimpleType[8475-8494]"
    }, {
      "left" : "setContents",
      "right" : "setContents",
      "info" : "SimpleName[8495-8506]:SimpleName[8495-8506]"
    }, {
      "left" : "@Nullable FunctionContents contents",
      "right" : "@Nullable FunctionContents contents",
      "info" : "SingleVariableDeclaration[8507-8542]:SingleVariableDeclaration[8507-8542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8544-8632]:Block[8544-8632]"
    }, {
      "left" : "if (contents != null)",
      "right" : "if (contents != null)",
      "info" : "IfStatement[8550-8611]:IfStatement[8550-8611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8572-8611]:Block[8572-8611]"
    }, {
      "left" : "this.contents = contents;",
      "right" : "this.contents = contents;",
      "info" : "ExpressionStatement[8580-8605]:ExpressionStatement[8580-8605]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8616-8628]:ReturnStatement[8616-8628]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[9037-9056]:SimpleType[9037-9056]"
    }, {
      "left" : "inferFromOverriddenFunction",
      "right" : "inferFromOverriddenFunction",
      "info" : "SimpleName[9057-9084]:SimpleName[9057-9084]"
    }, {
      "left" : "@Nullable FunctionType oldType",
      "right" : "@Nullable FunctionType oldType",
      "info" : "SingleVariableDeclaration[9092-9122]:SingleVariableDeclaration[9092-9122]"
    }, {
      "left" : "@Nullable Node paramsParent",
      "right" : "@Nullable Node paramsParent",
      "info" : "SingleVariableDeclaration[9124-9151]:SingleVariableDeclaration[9124-9151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9153-11134]:Block[9153-11239]"
    }, {
      "left" : "if (oldType == null)",
      "right" : "if (oldType == null)",
      "info" : "IfStatement[9159-9206]:IfStatement[9159-9206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9180-9206]:Block[9180-9206]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9188-9200]:ReturnStatement[9188-9200]"
    }, {
      "left" : "returnType = oldType.getReturnType();",
      "right" : "returnType = oldType.getReturnType();",
      "info" : "ExpressionStatement[9212-9249]:ExpressionStatement[9212-9249]"
    }, {
      "left" : "returnTypeInferred = oldType.isReturnTypeInferred();",
      "right" : "returnTypeInferred = oldType.isReturnTypeInferred();",
      "info" : "ExpressionStatement[9254-9306]:ExpressionStatement[9254-9306]"
    }, {
      "left" : "if (paramsParent == null)",
      "right" : "if (paramsParent == null)",
      "info" : "IfStatement[9311-11113]:IfStatement[9311-11218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9337-9546]:Block[9337-9546]"
    }, {
      "left" : "parametersNode = oldType.getParametersNode();",
      "right" : "parametersNode = oldType.getParametersNode();",
      "info" : "ExpressionStatement[9378-9423]:ExpressionStatement[9378-9423]"
    }, {
      "left" : "if (parametersNode == null)",
      "right" : "if (parametersNode == null)",
      "info" : "IfStatement[9430-9540]:IfStatement[9430-9540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9458-9540]:Block[9458-9540]"
    }, {
      "left" : "parametersNode = new FunctionParamBuilder(typeRegistry).build();",
      "right" : "parametersNode = new FunctionParamBuilder(typeRegistry).build();",
      "info" : "ExpressionStatement[9468-9532]:ExpressionStatement[9468-9532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9552-11113]:Block[9552-11218]"
    }, {
      "left" : "FunctionParamBuilder paramBuilder =\n          new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder paramBuilder =\n          new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[9677-9762]:VariableDeclarationStatement[9677-9762]"
    }, {
      "left" : "Iterator<Node> oldParams = oldType.getParameters().iterator();",
      "right" : "Iterator<Node> oldParams = oldType.getParameters().iterator();",
      "info" : "VariableDeclarationStatement[9769-9831]:VariableDeclarationStatement[9769-9831]"
    }, {
      "left" : "boolean warnedAboutArgList = false;",
      "right" : "boolean warnedAboutArgList = false;",
      "info" : "VariableDeclarationStatement[9838-9873]:VariableDeclarationStatement[9838-9873]"
    }, {
      "left" : "boolean oldParamsListHitOptArgs = false;",
      "right" : "boolean oldParamsListHitOptArgs = false;",
      "info" : "VariableDeclarationStatement[9880-9920]:VariableDeclarationStatement[9880-9920]"
    }, {
      "left" : "for (Node currentParam = paramsParent.getFirstChild();\n           currentParam != null; currentParam = currentParam.getNext())",
      "right" : "for (Node currentParam = paramsParent.getFirstChild();\n           currentParam != null; currentParam = currentParam.getNext())",
      "info" : "ForStatement[9927-10987]:ForStatement[9927-10987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10054-10987]:Block[10054-10987]"
    }, {
      "left" : "if (oldParams.hasNext())",
      "right" : "if (oldParams.hasNext())",
      "info" : "IfStatement[10064-10979]:IfStatement[10064-10979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10089-10621]:Block[10089-10621]"
    }, {
      "left" : "Node oldParam = oldParams.next();",
      "right" : "Node oldParam = oldParams.next();",
      "info" : "VariableDeclarationStatement[10101-10134]:VariableDeclarationStatement[10101-10134]"
    }, {
      "left" : "Node newParam = paramBuilder.newParameterFromNode(oldParam);",
      "right" : "Node newParam = paramBuilder.newParameterFromNode(oldParam);",
      "info" : "VariableDeclarationStatement[10145-10205]:VariableDeclarationStatement[10145-10205]"
    }, {
      "left" : "oldParamsListHitOptArgs = oldParamsListHitOptArgs ||\n              oldParam.isVarArgs() ||\n              oldParam.isOptionalArg();",
      "right" : "oldParamsListHitOptArgs = oldParamsListHitOptArgs ||\n              oldParam.isVarArgs() ||\n              oldParam.isOptionalArg();",
      "info" : "ExpressionStatement[10217-10347]:ExpressionStatement[10217-10347]"
    }, {
      "left" : "if (currentParam.getNext() != null && newParam.isVarArgs())",
      "right" : "if (currentParam.getNext() != null && newParam.isVarArgs())",
      "info" : "IfStatement[10455-10611]:IfStatement[10455-10611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10515-10611]:Block[10515-10611]"
    }, {
      "left" : "newParam.setVarArgs(false);",
      "right" : "newParam.setVarArgs(false);",
      "info" : "ExpressionStatement[10529-10556]:ExpressionStatement[10529-10556]"
    }, {
      "left" : "newParam.setOptionalArg(true);",
      "right" : "newParam.setOptionalArg(true);",
      "info" : "ExpressionStatement[10569-10599]:ExpressionStatement[10569-10599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10627-10979]:Block[10627-10979]"
    }, {
      "left" : "warnedAboutArgList |= addParameter(\n              paramBuilder,\n              typeRegistry.getNativeType(UNKNOWN_TYPE),\n              warnedAboutArgList,\n              codingConvention.isOptionalParameter(currentParam) ||\n                  oldParamsListHitOptArgs,\n              codingConvention.isVarArgsParameter(currentParam));",
      "right" : "warnedAboutArgList |= addParameter(\n              paramBuilder,\n              typeRegistry.getNativeType(UNKNOWN_TYPE),\n              warnedAboutArgList,\n              codingConvention.isOptionalParameter(currentParam) ||\n                  oldParamsListHitOptArgs,\n              codingConvention.isVarArgsParameter(currentParam));",
      "info" : "ExpressionStatement[10639-10969]:ExpressionStatement[10639-10969]"
    }, {
      "left" : "parametersNode = paramBuilder.build();",
      "right" : "parametersNode = paramBuilder.build();",
      "info" : "ExpressionStatement[11069-11107]:ExpressionStatement[11174-11212]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[11118-11130]:ReturnStatement[11223-11235]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[11193-11212]:SimpleType[11298-11317]"
    }, {
      "left" : "inferReturnType",
      "right" : "inferReturnType",
      "info" : "SimpleName[11213-11228]:SimpleName[11318-11333]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[11229-11253]:SingleVariableDeclaration[11334-11358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11255-11630]:Block[11360-11735]"
    }, {
      "left" : "if (info != null && info.hasReturnType())",
      "right" : "if (info != null && info.hasReturnType())",
      "info" : "IfStatement[11261-11415]:IfStatement[11366-11520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11303-11415]:Block[11408-11520]"
    }, {
      "left" : "returnType = info.getReturnType().evaluate(scope, typeRegistry);",
      "right" : "returnType = info.getReturnType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[11311-11375]:ExpressionStatement[11416-11480]"
    }, {
      "left" : "returnTypeInferred = false;",
      "right" : "returnTypeInferred = false;",
      "info" : "ExpressionStatement[11382-11409]:ExpressionStatement[11487-11514]"
    }, {
      "left" : "if (templateTypeName != null &&\n        returnType != null &&\n        returnType.restrictByNotNullOrUndefined().isTemplateType())",
      "right" : "if (templateTypeName != null &&\n        returnType != null &&\n        returnType.restrictByNotNullOrUndefined().isTemplateType())",
      "info" : "IfStatement[11421-11609]:IfStatement[11526-11714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11551-11609]:Block[11656-11714]"
    }, {
      "left" : "reportError(TEMPLATE_TYPE_EXPECTED, fnName);",
      "right" : "reportError(TEMPLATE_TYPE_EXPECTED, fnName);",
      "info" : "ExpressionStatement[11559-11603]:ExpressionStatement[11664-11708]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[11614-11626]:ReturnStatement[11719-11731]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[11769-11788]:SimpleType[11874-11893]"
    }, {
      "left" : "inferInheritance",
      "right" : "inferInheritance",
      "info" : "SimpleName[11789-11805]:SimpleName[11894-11910]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[11806-11830]:SingleVariableDeclaration[11911-11935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11832-13503]:Block[11937-13608]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[11838-13481]:IfStatement[11943-13586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11856-13481]:Block[11961-13586]"
    }, {
      "left" : "isConstructor = info.isConstructor();",
      "right" : "isConstructor = info.isConstructor();",
      "info" : "ExpressionStatement[11864-11901]:ExpressionStatement[11969-12006]"
    }, {
      "left" : "isInterface = info.isInterface();",
      "right" : "isInterface = info.isInterface();",
      "info" : "ExpressionStatement[11908-11941]:ExpressionStatement[12013-12046]"
    }, {
      "left" : "if (info.hasBaseType())",
      "right" : "if (info.hasBaseType())",
      "info" : "IfStatement[11968-12387]:IfStatement[12073-12492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11992-12387]:Block[12097-12492]"
    }, {
      "left" : "if (isConstructor)",
      "right" : "if (isConstructor)",
      "info" : "IfStatement[12002-12379]:IfStatement[12107-12484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12021-12304]:Block[12126-12409]"
    }, {
      "left" : "JSType maybeBaseType =\n              info.getBaseType().evaluate(scope, typeRegistry);",
      "right" : "JSType maybeBaseType =\n              info.getBaseType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[12033-12119]:VariableDeclarationStatement[12138-12224]"
    }, {
      "left" : "if (maybeBaseType != null &&\n              maybeBaseType.setValidator(new ExtendedTypeValidator()))",
      "right" : "if (maybeBaseType != null &&\n              maybeBaseType.setValidator(new ExtendedTypeValidator()))",
      "info" : "IfStatement[12130-12294]:IfStatement[12235-12399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12230-12294]:Block[12335-12399]"
    }, {
      "left" : "baseType = (ObjectType) maybeBaseType;",
      "right" : "baseType = (ObjectType) maybeBaseType;",
      "info" : "ExpressionStatement[12244-12282]:ExpressionStatement[12349-12387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12310-12379]:Block[12415-12484]"
    }, {
      "left" : "reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);",
      "right" : "reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);",
      "info" : "ExpressionStatement[12322-12369]:ExpressionStatement[12427-12474]"
    }, {
      "left" : "if (isConstructor || isInterface)",
      "right" : "if (isConstructor || isInterface)",
      "info" : "IfStatement[12427-12990]:IfStatement[12532-13095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12461-12867]:Block[12566-12972]"
    }, {
      "left" : "implementedInterfaces = Lists.newArrayList();",
      "right" : "implementedInterfaces = Lists.newArrayList();",
      "info" : "ExpressionStatement[12471-12516]:ExpressionStatement[12576-12621]"
    }, {
      "left" : "for (JSTypeExpression t : info.getImplementedInterfaces())",
      "right" : "for (JSTypeExpression t : info.getImplementedInterfaces())",
      "info" : "EnhancedForStatement[12525-12859]:EnhancedForStatement[12630-12964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12584-12859]:Block[12689-12964]"
    }, {
      "left" : "JSType maybeInterType = t.evaluate(scope, typeRegistry);",
      "right" : "JSType maybeInterType = t.evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[12596-12652]:VariableDeclarationStatement[12701-12757]"
    }, {
      "left" : "if (maybeInterType != null &&\n              maybeInterType.setValidator(new ImplementedTypeValidator()))",
      "right" : "if (maybeInterType != null &&\n              maybeInterType.setValidator(new ImplementedTypeValidator()))",
      "info" : "IfStatement[12663-12849]:IfStatement[12768-12954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12768-12849]:Block[12873-12954]"
    }, {
      "left" : "implementedInterfaces.add((ObjectType) maybeInterType);",
      "right" : "implementedInterfaces.add((ObjectType) maybeInterType);",
      "info" : "ExpressionStatement[12782-12837]:ExpressionStatement[12887-12942]"
    }, {
      "left" : "if (info.getImplementedInterfaceCount() > 0)",
      "right" : "if (info.getImplementedInterfaceCount() > 0)",
      "info" : "IfStatement[12873-12990]:IfStatement[12978-13095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12918-12990]:Block[13023-13095]"
    }, {
      "left" : "reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);",
      "right" : "reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);",
      "info" : "ExpressionStatement[12928-12982]:ExpressionStatement[13033-13087]"
    }, {
      "left" : "if (isInterface)",
      "right" : "if (isInterface)",
      "info" : "IfStatement[13048-13475]:IfStatement[13153-13580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13065-13475]:Block[13170-13580]"
    }, {
      "left" : "extendedInterfaces = Lists.newArrayList();",
      "right" : "extendedInterfaces = Lists.newArrayList();",
      "info" : "ExpressionStatement[13075-13117]:ExpressionStatement[13180-13222]"
    }, {
      "left" : "for (JSTypeExpression t : info.getExtendedInterfaces())",
      "right" : "for (JSTypeExpression t : info.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[13126-13467]:EnhancedForStatement[13231-13572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13182-13467]:Block[13287-13572]"
    }, {
      "left" : "JSType maybeInterfaceType = t.evaluate(scope, typeRegistry);",
      "right" : "JSType maybeInterfaceType = t.evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[13194-13254]:VariableDeclarationStatement[13299-13359]"
    }, {
      "left" : "if (maybeInterfaceType != null &&\n              maybeInterfaceType.setValidator(new ExtendedTypeValidator()))",
      "right" : "if (maybeInterfaceType != null &&\n              maybeInterfaceType.setValidator(new ExtendedTypeValidator()))",
      "info" : "IfStatement[13265-13457]:IfStatement[13370-13562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13375-13457]:Block[13480-13562]"
    }, {
      "left" : "extendedInterfaces.add((ObjectType) maybeInterfaceType);",
      "right" : "extendedInterfaces.add((ObjectType) maybeInterfaceType);",
      "info" : "ExpressionStatement[13389-13445]:ExpressionStatement[13494-13550]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13487-13499]:ReturnStatement[13592-13604]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[13615-13634]:SimpleType[13720-13739]"
    }, {
      "left" : "inferThisType",
      "right" : "inferThisType",
      "info" : "SimpleName[13635-13648]:SimpleName[13740-13753]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[13649-13663]:SingleVariableDeclaration[13754-13768]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[13665-13676]:SingleVariableDeclaration[13770-13781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13678-13956]:Block[13783-14061]"
    }, {
      "left" : "inferThisType(info);",
      "right" : "inferThisType(info);",
      "info" : "ExpressionStatement[13727-13747]:ExpressionStatement[13832-13852]"
    }, {
      "left" : "if (thisType == null)",
      "right" : "if (thisType == null)",
      "info" : "IfStatement[13753-13934]:IfStatement[13858-14039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13775-13934]:Block[13880-14039]"
    }, {
      "left" : "ObjectType objType = ObjectType.cast(type);",
      "right" : "ObjectType objType = ObjectType.cast(type);",
      "info" : "VariableDeclarationStatement[13783-13826]:VariableDeclarationStatement[13888-13931]"
    }, {
      "left" : "if (objType != null && (info == null || !info.hasType()))",
      "right" : "if (objType != null && (info == null || !info.hasType()))",
      "info" : "IfStatement[13833-13928]:IfStatement[13938-14033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13891-13928]:Block[13996-14033]"
    }, {
      "left" : "thisType = objType;",
      "right" : "thisType = objType;",
      "info" : "ExpressionStatement[13901-13920]:ExpressionStatement[14006-14025]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13940-13952]:ReturnStatement[14045-14057]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[14060-14079]:SimpleType[14165-14184]"
    }, {
      "left" : "inferThisType",
      "right" : "inferThisType",
      "info" : "SimpleName[14080-14093]:SimpleName[14185-14198]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[14094-14108]:SingleVariableDeclaration[14199-14213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14110-14447]:Block[14215-14552]"
    }, {
      "left" : "ObjectType maybeThisType = null;",
      "right" : "ObjectType maybeThisType = null;",
      "info" : "VariableDeclarationStatement[14116-14148]:VariableDeclarationStatement[14221-14253]"
    }, {
      "left" : "if (info != null && info.hasThisType())",
      "right" : "if (info != null && info.hasThisType())",
      "info" : "IfStatement[14153-14300]:IfStatement[14258-14405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14193-14300]:Block[14298-14405]"
    }, {
      "left" : "maybeThisType = ObjectType.cast(\n          info.getThisType().evaluate(scope, typeRegistry));",
      "right" : "maybeThisType = ObjectType.cast(\n          info.getThisType().evaluate(scope, typeRegistry));",
      "info" : "ExpressionStatement[14201-14294]:ExpressionStatement[14306-14399]"
    }, {
      "left" : "if (maybeThisType != null)",
      "right" : "if (maybeThisType != null)",
      "info" : "IfStatement[14305-14425]:IfStatement[14410-14530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14332-14425]:Block[14437-14530]"
    }, {
      "left" : "thisType = maybeThisType;",
      "right" : "thisType = maybeThisType;",
      "info" : "ExpressionStatement[14340-14365]:ExpressionStatement[14445-14470]"
    }, {
      "left" : "thisType.setValidator(new ThisTypeValidator());",
      "right" : "thisType.setValidator(new ThisTypeValidator());",
      "info" : "ExpressionStatement[14372-14419]:ExpressionStatement[14477-14524]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14431-14443]:ReturnStatement[14536-14548]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[14519-14538]:SimpleType[14624-14643]"
    }, {
      "left" : "inferParameterTypes",
      "right" : "inferParameterTypes",
      "info" : "SimpleName[14539-14558]:SimpleName[14644-14663]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[14559-14573]:SingleVariableDeclaration[14664-14678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14575-14784]:Block[14680-14889]"
    }, {
      "left" : "Node lp = IR.paramList();",
      "right" : "Node lp = IR.paramList();",
      "info" : "VariableDeclarationStatement[14615-14640]:VariableDeclarationStatement[14720-14745]"
    }, {
      "left" : "for (String name : info.getParameterNames())",
      "right" : "for (String name : info.getParameterNames())",
      "info" : "EnhancedForStatement[14645-14737]:EnhancedForStatement[14750-14842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14690-14737]:Block[14795-14842]"
    }, {
      "left" : "lp.addChildToBack(IR.name(name));",
      "right" : "lp.addChildToBack(IR.name(name));",
      "info" : "ExpressionStatement[14698-14731]:ExpressionStatement[14803-14836]"
    }, {
      "left" : "return inferParameterTypes(lp, info);",
      "right" : "return inferParameterTypes(lp, info);",
      "info" : "ReturnStatement[14743-14780]:ReturnStatement[14848-14885]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[14886-14905]:SimpleType[14991-15010]"
    }, {
      "left" : "inferParameterTypes",
      "right" : "inferParameterTypes",
      "info" : "SimpleName[14906-14925]:SimpleName[15011-15030]"
    }, {
      "left" : "@Nullable Node argsParent",
      "right" : "@Nullable Node argsParent",
      "info" : "SingleVariableDeclaration[14926-14951]:SingleVariableDeclaration[15031-15056]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[14959-14983]:SingleVariableDeclaration[15064-15088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14985-17308]:Block[15090-17615]"
    }, {
      "left" : "if (argsParent == null)",
      "right" : "if (argsParent == null)",
      "info" : "IfStatement[14991-15134]:IfStatement[15096-15239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15015-15134]:Block[15120-15239]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[15023-15128]:IfStatement[15128-15233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15041-15071]:Block[15146-15176]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15051-15063]:ReturnStatement[15156-15168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15077-15128]:Block[15182-15233]"
    }, {
      "left" : "return inferParameterTypes(info);",
      "right" : "return inferParameterTypes(info);",
      "info" : "ReturnStatement[15087-15120]:ReturnStatement[15192-15225]"
    }, {
      "left" : "Node oldParameterType = null;",
      "right" : "Node oldParameterType = null;",
      "info" : "VariableDeclarationStatement[15157-15186]:VariableDeclarationStatement[15262-15291]"
    }, {
      "left" : "if (parametersNode != null)",
      "right" : "if (parametersNode != null)",
      "info" : "IfStatement[15191-15283]:IfStatement[15296-15388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15219-15283]:Block[15324-15388]"
    }, {
      "left" : "oldParameterType = parametersNode.getFirstChild();",
      "right" : "oldParameterType = parametersNode.getFirstChild();",
      "info" : "ExpressionStatement[15227-15277]:ExpressionStatement[15332-15382]"
    }, {
      "left" : "FunctionParamBuilder builder = new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder builder = new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[15289-15359]:VariableDeclarationStatement[15394-15464]"
    }, {
      "left" : "boolean warnedAboutArgList = false;",
      "right" : "boolean warnedAboutArgList = false;",
      "info" : "VariableDeclarationStatement[15364-15399]:VariableDeclarationStatement[15469-15504]"
    }, {
      "left" : "Set<String> allJsDocParams = (info == null) ?\n        Sets.<String>newHashSet() :\n        Sets.newHashSet(info.getParameterNames());",
      "right" : "Set<String> allJsDocParams = (info == null) ?\n        Sets.<String>newHashSet() :\n        Sets.newHashSet(info.getParameterNames());",
      "info" : "VariableDeclarationStatement[15404-15536]:VariableDeclarationStatement[15509-15641]"
    }, {
      "left" : "boolean foundTemplateType = false;",
      "right" : "boolean foundTemplateType = false;",
      "info" : "VariableDeclarationStatement[15541-15575]:VariableDeclarationStatement[15646-15680]"
    }, {
      "left" : "boolean isVarArgs = false;",
      "right" : "boolean isVarArgs = false;",
      "info" : "VariableDeclarationStatement[15580-15606]:VariableDeclarationStatement[15685-15711]"
    }, {
      "left" : "for (Node arg : argsParent.children())",
      "right" : "for (Node arg : argsParent.children())",
      "info" : "EnhancedForStatement[15611-16943]:EnhancedForStatement[15716-17048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15650-16943]:Block[15755-17048]"
    }, {
      "left" : "String argumentName = arg.getString();",
      "right" : "String argumentName = arg.getString();",
      "info" : "VariableDeclarationStatement[15658-15696]:VariableDeclarationStatement[15763-15801]"
    }, {
      "left" : "allJsDocParams.remove(argumentName);",
      "right" : "allJsDocParams.remove(argumentName);",
      "info" : "ExpressionStatement[15703-15739]:ExpressionStatement[15808-15844]"
    }, {
      "left" : "JSType parameterType = null;",
      "right" : "JSType parameterType = null;",
      "info" : "VariableDeclarationStatement[15776-15804]:VariableDeclarationStatement[15881-15909]"
    }, {
      "left" : "boolean isOptionalParam = isOptionalParameter(arg, info);",
      "right" : "boolean isOptionalParam = isOptionalParameter(arg, info);",
      "info" : "VariableDeclarationStatement[15811-15868]:VariableDeclarationStatement[15916-15973]"
    }, {
      "left" : "isVarArgs = isVarArgsParameter(arg, info);",
      "right" : "isVarArgs = isVarArgsParameter(arg, info);",
      "info" : "ExpressionStatement[15875-15917]:ExpressionStatement[15980-16022]"
    }, {
      "left" : "if (info != null && info.hasParameterType(argumentName))",
      "right" : "if (info != null && info.hasParameterType(argumentName))",
      "info" : "IfStatement[15925-16434]:IfStatement[16030-16539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15982-16094]:Block[16087-16199]"
    }, {
      "left" : "parameterType =\n            info.getParameterType(argumentName).evaluate(scope, typeRegistry);",
      "right" : "parameterType =\n            info.getParameterType(argumentName).evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[15992-16086]:ExpressionStatement[16097-16191]"
    }, {
      "left" : "if (oldParameterType != null &&\n          oldParameterType.getJSType() != null)",
      "right" : "if (oldParameterType != null &&\n          oldParameterType.getJSType() != null)",
      "info" : "IfStatement[16100-16434]:IfStatement[16205-16539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16180-16353]:Block[16285-16458]"
    }, {
      "left" : "parameterType = oldParameterType.getJSType();",
      "right" : "parameterType = oldParameterType.getJSType();",
      "info" : "ExpressionStatement[16190-16235]:ExpressionStatement[16295-16340]"
    }, {
      "left" : "isOptionalParam = oldParameterType.isOptionalArg();",
      "right" : "isOptionalParam = oldParameterType.isOptionalArg();",
      "info" : "ExpressionStatement[16244-16295]:ExpressionStatement[16349-16400]"
    }, {
      "left" : "isVarArgs = oldParameterType.isVarArgs();",
      "right" : "isVarArgs = oldParameterType.isVarArgs();",
      "info" : "ExpressionStatement[16304-16345]:ExpressionStatement[16409-16450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16359-16434]:Block[16464-16539]"
    }, {
      "left" : "parameterType = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "right" : "parameterType = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[16369-16426]:ExpressionStatement[16474-16531]"
    }, {
      "left" : "if (templateTypeName != null &&\n          parameterType.restrictByNotNullOrUndefined().isTemplateType())",
      "right" : "if (templateTypeName != null &&\n          parameterType.restrictByNotNullOrUndefined().isTemplateType())",
      "info" : "IfStatement[16442-16690]:IfStatement[16547-16795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16547-16690]:Block[16652-16795]"
    }, {
      "left" : "if (foundTemplateType)",
      "right" : "if (foundTemplateType)",
      "info" : "IfStatement[16557-16648]:IfStatement[16662-16753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16580-16648]:Block[16685-16753]"
    }, {
      "left" : "reportError(TEMPLATE_TYPE_DUPLICATED, fnName);",
      "right" : "reportError(TEMPLATE_TYPE_DUPLICATED, fnName);",
      "info" : "ExpressionStatement[16592-16638]:ExpressionStatement[16697-16743]"
    }, {
      "left" : "foundTemplateType = true;",
      "right" : "foundTemplateType = true;",
      "info" : "ExpressionStatement[16657-16682]:ExpressionStatement[16762-16787]"
    }, {
      "left" : "warnedAboutArgList |= addParameter(\n          builder, parameterType, warnedAboutArgList,\n          isOptionalParam,\n          isVarArgs);",
      "right" : "warnedAboutArgList |= addParameter(\n          builder, parameterType, warnedAboutArgList,\n          isOptionalParam,\n          isVarArgs);",
      "info" : "ExpressionStatement[16697-16835]:ExpressionStatement[16802-16940]"
    }, {
      "left" : "if (oldParameterType != null)",
      "right" : "if (oldParameterType != null)",
      "info" : "IfStatement[16843-16937]:IfStatement[16948-17042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16873-16937]:Block[16978-17042]"
    }, {
      "left" : "oldParameterType = oldParameterType.getNext();",
      "right" : "oldParameterType = oldParameterType.getNext();",
      "info" : "ExpressionStatement[16883-16929]:ExpressionStatement[16988-17034]"
    }, {
      "left" : "if (templateTypeName != null && !foundTemplateType)",
      "right" : "if (templateTypeName != null && !foundTemplateType)",
      "info" : "IfStatement[17017-17127]:IfStatement[17324-17434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17069-17127]:Block[17376-17434]"
    }, {
      "left" : "reportError(TEMPLATE_TYPE_EXPECTED, fnName);",
      "right" : "reportError(TEMPLATE_TYPE_EXPECTED, fnName);",
      "info" : "ExpressionStatement[17077-17121]:ExpressionStatement[17384-17428]"
    }, {
      "left" : "for (String inexistentName : allJsDocParams)",
      "right" : "for (String inexistentName : allJsDocParams)",
      "info" : "EnhancedForStatement[17133-17248]:EnhancedForStatement[17440-17555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17178-17248]:Block[17485-17555]"
    }, {
      "left" : "reportWarning(INEXISTANT_PARAM, inexistentName, fnName);",
      "right" : "reportWarning(INEXISTANT_PARAM, inexistentName, fnName);",
      "info" : "ExpressionStatement[17186-17242]:ExpressionStatement[17493-17549]"
    }, {
      "left" : "parametersNode = builder.build();",
      "right" : "parametersNode = builder.build();",
      "info" : "ExpressionStatement[17254-17287]:ExpressionStatement[17561-17594]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17292-17304]:ReturnStatement[17599-17611]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17383-17390]:Modifier[17690-17697]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17391-17398]:PrimitiveType[17698-17705]"
    }, {
      "left" : "isOptionalParameter",
      "right" : "isOptionalParameter",
      "info" : "SimpleName[17399-17418]:SimpleName[17706-17725]"
    }, {
      "left" : "Node param",
      "right" : "Node param",
      "info" : "SingleVariableDeclaration[17426-17436]:SingleVariableDeclaration[17733-17743]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[17438-17462]:SingleVariableDeclaration[17745-17769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17464-17713]:Block[17771-18020]"
    }, {
      "left" : "if (codingConvention.isOptionalParameter(param))",
      "right" : "if (codingConvention.isOptionalParameter(param))",
      "info" : "IfStatement[17470-17545]:IfStatement[17777-17852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17519-17545]:Block[17826-17852]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17527-17539]:ReturnStatement[17834-17846]"
    }, {
      "left" : "String paramName = param.getString();",
      "right" : "String paramName = param.getString();",
      "info" : "VariableDeclarationStatement[17551-17588]:VariableDeclarationStatement[17858-17895]"
    }, {
      "left" : "return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isOptionalArg();",
      "right" : "return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isOptionalArg();",
      "info" : "ReturnStatement[17593-17709]:ReturnStatement[17900-18016]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17840-17847]:Modifier[18147-18154]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17848-17855]:PrimitiveType[18155-18162]"
    }, {
      "left" : "isVarArgsParameter",
      "right" : "isVarArgsParameter",
      "info" : "SimpleName[17856-17874]:SimpleName[18163-18181]"
    }, {
      "left" : "Node param",
      "right" : "Node param",
      "info" : "SingleVariableDeclaration[17882-17892]:SingleVariableDeclaration[18189-18199]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[17894-17918]:SingleVariableDeclaration[18201-18225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17920-18164]:Block[18227-18471]"
    }, {
      "left" : "if (codingConvention.isVarArgsParameter(param))",
      "right" : "if (codingConvention.isVarArgsParameter(param))",
      "info" : "IfStatement[17926-18000]:IfStatement[18233-18307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17974-18000]:Block[18281-18307]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17982-17994]:ReturnStatement[18289-18301]"
    }, {
      "left" : "String paramName = param.getString();",
      "right" : "String paramName = param.getString();",
      "info" : "VariableDeclarationStatement[18006-18043]:VariableDeclarationStatement[18313-18350]"
    }, {
      "left" : "return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isVarArgs();",
      "right" : "return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isVarArgs();",
      "info" : "ReturnStatement[18048-18160]:ReturnStatement[18355-18467]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[18228-18247]:SimpleType[18535-18554]"
    }, {
      "left" : "inferTemplateTypeName",
      "right" : "inferTemplateTypeName",
      "info" : "SimpleName[18248-18269]:SimpleName[18555-18576]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[18270-18294]:SingleVariableDeclaration[18577-18601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18296-18459]:Block[18603-18766]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[18302-18438]:IfStatement[18609-18745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18320-18438]:Block[18627-18745]"
    }, {
      "left" : "templateTypeName = info.getTemplateTypeName();",
      "right" : "templateTypeName = info.getTemplateTypeName();",
      "info" : "ExpressionStatement[18328-18374]:ExpressionStatement[18635-18681]"
    }, {
      "left" : "typeRegistry.setTemplateTypeName(templateTypeName);",
      "right" : "typeRegistry.setTemplateTypeName(templateTypeName);",
      "info" : "ExpressionStatement[18381-18432]:ExpressionStatement[18688-18739]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[18443-18455]:ReturnStatement[18750-18762]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18888-18895]:Modifier[19195-19202]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18896-18903]:PrimitiveType[19203-19210]"
    }, {
      "left" : "addParameter",
      "right" : "addParameter",
      "info" : "SimpleName[18904-18916]:SimpleName[19211-19223]"
    }, {
      "left" : "FunctionParamBuilder builder",
      "right" : "FunctionParamBuilder builder",
      "info" : "SingleVariableDeclaration[18917-18945]:SingleVariableDeclaration[19224-19252]"
    }, {
      "left" : "JSType paramType",
      "right" : "JSType paramType",
      "info" : "SingleVariableDeclaration[18953-18969]:SingleVariableDeclaration[19260-19276]"
    }, {
      "left" : "boolean warnedAboutArgList",
      "right" : "boolean warnedAboutArgList",
      "info" : "SingleVariableDeclaration[18971-18997]:SingleVariableDeclaration[19278-19304]"
    }, {
      "left" : "boolean isOptional",
      "right" : "boolean isOptional",
      "info" : "SingleVariableDeclaration[19005-19023]:SingleVariableDeclaration[19312-19330]"
    }, {
      "left" : "boolean isVarArgs",
      "right" : "boolean isVarArgs",
      "info" : "SingleVariableDeclaration[19025-19042]:SingleVariableDeclaration[19332-19349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19044-20049]:Block[19351-20356]"
    }, {
      "left" : "boolean emittedWarning = false;",
      "right" : "boolean emittedWarning = false;",
      "info" : "VariableDeclarationStatement[19050-19081]:VariableDeclarationStatement[19357-19388]"
    }, {
      "left" : "if (isOptional)",
      "right" : "if (isOptional)",
      "info" : "IfStatement[19086-20018]:IfStatement[19393-20325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19102-19435]:Block[19409-19742]"
    }, {
      "left" : "if (!builder.addOptionalParams(paramType) && !warnedAboutArgList)",
      "right" : "if (!builder.addOptionalParams(paramType) && !warnedAboutArgList)",
      "info" : "IfStatement[19277-19429]:IfStatement[19584-19736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19343-19429]:Block[19650-19736]"
    }, {
      "left" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
      "right" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
      "info" : "ExpressionStatement[19353-19390]:ExpressionStatement[19660-19697]"
    }, {
      "left" : "emittedWarning = true;",
      "right" : "emittedWarning = true;",
      "info" : "ExpressionStatement[19399-19421]:ExpressionStatement[19706-19728]"
    }, {
      "left" : "if (isVarArgs)",
      "right" : "if (isVarArgs)",
      "info" : "IfStatement[19441-20018]:IfStatement[19748-20325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19456-19615]:Block[19763-19922]"
    }, {
      "left" : "if (!builder.addVarArgs(paramType) && !warnedAboutArgList)",
      "right" : "if (!builder.addVarArgs(paramType) && !warnedAboutArgList)",
      "info" : "IfStatement[19464-19609]:IfStatement[19771-19916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19523-19609]:Block[19830-19916]"
    }, {
      "left" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
      "right" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
      "info" : "ExpressionStatement[19533-19570]:ExpressionStatement[19840-19877]"
    }, {
      "left" : "emittedWarning = true;",
      "right" : "emittedWarning = true;",
      "info" : "ExpressionStatement[19579-19601]:ExpressionStatement[19886-19908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19621-20018]:Block[19928-20325]"
    }, {
      "left" : "if (!builder.addRequiredParams(paramType) && !warnedAboutArgList)",
      "right" : "if (!builder.addRequiredParams(paramType) && !warnedAboutArgList)",
      "info" : "IfStatement[19629-20012]:IfStatement[19936-20319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19695-20012]:Block[20002-20319]"
    }, {
      "left" : "if (builder.hasVarArgs())",
      "right" : "if (builder.hasVarArgs())",
      "info" : "IfStatement[19825-19973]:IfStatement[20132-20280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19851-19910]:Block[20158-20217]"
    }, {
      "left" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
      "right" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
      "info" : "ExpressionStatement[19863-19900]:ExpressionStatement[20170-20207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19916-19973]:Block[20223-20280]"
    }, {
      "left" : "reportWarning(OPTIONAL_ARG_AT_END);",
      "right" : "reportWarning(OPTIONAL_ARG_AT_END);",
      "info" : "ExpressionStatement[19928-19963]:ExpressionStatement[20235-20270]"
    }, {
      "left" : "emittedWarning = true;",
      "right" : "emittedWarning = true;",
      "info" : "ExpressionStatement[19982-20004]:ExpressionStatement[20289-20311]"
    }, {
      "left" : "return emittedWarning;",
      "right" : "return emittedWarning;",
      "info" : "ReturnStatement[20023-20045]:ReturnStatement[20330-20352]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[20125-20137]:SimpleType[20432-20444]"
    }, {
      "left" : "buildAndRegister",
      "right" : "buildAndRegister",
      "info" : "SimpleName[20138-20154]:SimpleName[20445-20461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20157-21659]:Block[20464-21966]"
    }, {
      "left" : "if (returnType == null &&\n        !contents.mayHaveNonEmptyReturns() && !contents.mayBeFromExterns())",
      "right" : "if (returnType == null &&\n        !contents.mayHaveNonEmptyReturns() && !contents.mayBeFromExterns())",
      "info" : "IfStatement[20163-20363]:IfStatement[20470-20670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20265-20363]:Block[20572-20670]"
    }, {
      "left" : "returnType = typeRegistry.getNativeType(VOID_TYPE);",
      "right" : "returnType = typeRegistry.getNativeType(VOID_TYPE);",
      "info" : "ExpressionStatement[20273-20324]:ExpressionStatement[20580-20631]"
    }, {
      "left" : "returnTypeInferred = true;",
      "right" : "returnTypeInferred = true;",
      "info" : "ExpressionStatement[20331-20357]:ExpressionStatement[20638-20664]"
    }, {
      "left" : "if (returnType == null)",
      "right" : "if (returnType == null)",
      "info" : "IfStatement[20369-20461]:IfStatement[20676-20768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20393-20461]:Block[20700-20768]"
    }, {
      "left" : "returnType = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "right" : "returnType = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[20401-20455]:ExpressionStatement[20708-20762]"
    }, {
      "left" : "if (parametersNode == null)",
      "right" : "if (parametersNode == null)",
      "info" : "IfStatement[20467-20609]:IfStatement[20774-20916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20495-20609]:Block[20802-20916]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"All Function types must have params and a return type\");",
      "right" : "throw new IllegalStateException(\n          \"All Function types must have params and a return type\");",
      "info" : "ThrowStatement[20503-20603]:ThrowStatement[20810-20910]"
    }, {
      "left" : "FunctionType fnType;",
      "right" : "FunctionType fnType;",
      "info" : "VariableDeclarationStatement[20615-20635]:VariableDeclarationStatement[20922-20942]"
    }, {
      "left" : "if (isConstructor)",
      "right" : "if (isConstructor)",
      "info" : "IfStatement[20640-21381]:IfStatement[20947-21688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20659-20707]:Block[20966-21014]"
    }, {
      "left" : "fnType = getOrCreateConstructor();",
      "right" : "fnType = getOrCreateConstructor();",
      "info" : "ExpressionStatement[20667-20701]:ExpressionStatement[20974-21008]"
    }, {
      "left" : "if (isInterface)",
      "right" : "if (isInterface)",
      "info" : "IfStatement[20713-21381]:IfStatement[21020-21688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20730-21005]:Block[21037-21312]"
    }, {
      "left" : "fnType = typeRegistry.createInterfaceType(\n          fnName, contents.getSourceNode());",
      "right" : "fnType = typeRegistry.createInterfaceType(\n          fnName, contents.getSourceNode());",
      "info" : "ExpressionStatement[20738-20825]:ExpressionStatement[21045-21132]"
    }, {
      "left" : "if (getScopeDeclaredIn().isGlobal() && !fnName.isEmpty())",
      "right" : "if (getScopeDeclaredIn().isGlobal() && !fnName.isEmpty())",
      "info" : "IfStatement[20832-20967]:IfStatement[21139-21274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20890-20967]:Block[21197-21274]"
    }, {
      "left" : "typeRegistry.declareType(fnName, fnType.getInstanceType());",
      "right" : "typeRegistry.declareType(fnName, fnType.getInstanceType());",
      "info" : "ExpressionStatement[20900-20959]:ExpressionStatement[21207-21266]"
    }, {
      "left" : "maybeSetBaseType(fnType);",
      "right" : "maybeSetBaseType(fnType);",
      "info" : "ExpressionStatement[20974-20999]:ExpressionStatement[21281-21306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21011-21381]:Block[21318-21688]"
    }, {
      "left" : "fnType = new FunctionBuilder(typeRegistry)\n          .withName(fnName)\n          .withSourceNode(contents.getSourceNode())\n          .withParamsNode(parametersNode)\n          .withReturnType(returnType, returnTypeInferred)\n          .withTypeOfThis(thisType)\n          .withTemplateName(templateTypeName)\n          .build();",
      "right" : "fnType = new FunctionBuilder(typeRegistry)\n          .withName(fnName)\n          .withSourceNode(contents.getSourceNode())\n          .withParamsNode(parametersNode)\n          .withReturnType(returnType, returnTypeInferred)\n          .withTypeOfThis(thisType)\n          .withTemplateName(templateTypeName)\n          .build();",
      "info" : "ExpressionStatement[21019-21343]:ExpressionStatement[21326-21650]"
    }, {
      "left" : "maybeSetBaseType(fnType);",
      "right" : "maybeSetBaseType(fnType);",
      "info" : "ExpressionStatement[21350-21375]:ExpressionStatement[21657-21682]"
    }, {
      "left" : "if (implementedInterfaces != null)",
      "right" : "if (implementedInterfaces != null)",
      "info" : "IfStatement[21387-21491]:IfStatement[21694-21798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21422-21491]:Block[21729-21798]"
    }, {
      "left" : "fnType.setImplementedInterfaces(implementedInterfaces);",
      "right" : "fnType.setImplementedInterfaces(implementedInterfaces);",
      "info" : "ExpressionStatement[21430-21485]:ExpressionStatement[21737-21792]"
    }, {
      "left" : "if (extendedInterfaces != null)",
      "right" : "if (extendedInterfaces != null)",
      "info" : "IfStatement[21497-21592]:IfStatement[21804-21899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21529-21592]:Block[21836-21899]"
    }, {
      "left" : "fnType.setExtendedInterfaces(extendedInterfaces);",
      "right" : "fnType.setExtendedInterfaces(extendedInterfaces);",
      "info" : "ExpressionStatement[21537-21586]:ExpressionStatement[21844-21893]"
    }, {
      "left" : "typeRegistry.clearTemplateTypeName();",
      "right" : "typeRegistry.clearTemplateTypeName();",
      "info" : "ExpressionStatement[21598-21635]:ExpressionStatement[21905-21942]"
    }, {
      "left" : "return fnType;",
      "right" : "return fnType;",
      "info" : "ReturnStatement[21641-21655]:ReturnStatement[21948-21962]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21663-21670]:Modifier[21970-21977]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21671-21675]:PrimitiveType[21978-21982]"
    }, {
      "left" : "maybeSetBaseType",
      "right" : "maybeSetBaseType",
      "info" : "SimpleName[21676-21692]:SimpleName[21983-21999]"
    }, {
      "left" : "FunctionType fnType",
      "right" : "FunctionType fnType",
      "info" : "SingleVariableDeclaration[21693-21712]:SingleVariableDeclaration[22000-22019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21714-21822]:Block[22021-22129]"
    }, {
      "left" : "if (!fnType.isInterface() && baseType != null)",
      "right" : "if (!fnType.isInterface() && baseType != null)",
      "info" : "IfStatement[21720-21818]:IfStatement[22027-22125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21767-21818]:Block[22074-22125]"
    }, {
      "left" : "fnType.setPrototypeBasedOn(baseType);",
      "right" : "fnType.setPrototypeBasedOn(baseType);",
      "info" : "ExpressionStatement[21775-21812]:ExpressionStatement[22082-22119]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22566-22573]:Modifier[22873-22880]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[22574-22586]:SimpleType[22881-22893]"
    }, {
      "left" : "getOrCreateConstructor",
      "right" : "getOrCreateConstructor",
      "info" : "SimpleName[22587-22609]:SimpleName[22894-22916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22612-23918]:Block[22919-24225]"
    }, {
      "left" : "FunctionType fnType = typeRegistry.createConstructorType(\n        fnName, contents.getSourceNode(), parametersNode, returnType);",
      "right" : "FunctionType fnType = typeRegistry.createConstructorType(\n        fnName, contents.getSourceNode(), parametersNode, returnType);",
      "info" : "VariableDeclarationStatement[22618-22746]:VariableDeclarationStatement[22925-23053]"
    }, {
      "left" : "JSType existingType = typeRegistry.getType(fnName);",
      "right" : "JSType existingType = typeRegistry.getType(fnName);",
      "info" : "VariableDeclarationStatement[22751-22802]:VariableDeclarationStatement[23058-23109]"
    }, {
      "left" : "if (existingType != null)",
      "right" : "if (existingType != null)",
      "info" : "IfStatement[22808-23727]:IfStatement[23115-24034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22834-23727]:Block[23141-24034]"
    }, {
      "left" : "boolean isInstanceObject = existingType.isInstanceType();",
      "right" : "boolean isInstanceObject = existingType.isInstanceType();",
      "info" : "VariableDeclarationStatement[22842-22899]:VariableDeclarationStatement[23149-23206]"
    }, {
      "left" : "if (isInstanceObject || fnName.equals(\"Function\"))",
      "right" : "if (isInstanceObject || fnName.equals(\"Function\"))",
      "info" : "IfStatement[22906-23721]:IfStatement[23213-24028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22957-23476]:Block[23264-23783]"
    }, {
      "left" : "FunctionType existingFn =\n            isInstanceObject ?\n            existingType.toObjectType().getConstructor() :\n            typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);",
      "right" : "FunctionType existingFn =\n            isInstanceObject ?\n            existingType.toObjectType().getConstructor() :\n            typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);",
      "info" : "VariableDeclarationStatement[22967-23154]:VariableDeclarationStatement[23274-23461]"
    }, {
      "left" : "if (existingFn.getSource() == null)",
      "right" : "if (existingFn.getSource() == null)",
      "info" : "IfStatement[23164-23269]:IfStatement[23471-23576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23200-23269]:Block[23507-23576]"
    }, {
      "left" : "existingFn.setSource(contents.getSourceNode());",
      "right" : "existingFn.setSource(contents.getSourceNode());",
      "info" : "ExpressionStatement[23212-23259]:ExpressionStatement[23519-23566]"
    }, {
      "left" : "if (!existingFn.hasEqualCallType(fnType))",
      "right" : "if (!existingFn.hasEqualCallType(fnType))",
      "info" : "IfStatement[23279-23440]:IfStatement[23586-23747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23321-23440]:Block[23628-23747]"
    }, {
      "left" : "reportWarning(TYPE_REDEFINITION, fnName,\n              fnType.toString(), existingFn.toString());",
      "right" : "reportWarning(TYPE_REDEFINITION, fnName,\n              fnType.toString(), existingFn.toString());",
      "info" : "ExpressionStatement[23333-23430]:ExpressionStatement[23640-23737]"
    }, {
      "left" : "return existingFn;",
      "right" : "return existingFn;",
      "info" : "ReturnStatement[23450-23468]:ReturnStatement[23757-23775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23482-23721]:Block[23789-24028]"
    }, {
      "left" : "maybeSetBaseType(fnType);",
      "right" : "maybeSetBaseType(fnType);",
      "info" : "ExpressionStatement[23733-23758]:ExpressionStatement[24040-24065]"
    }, {
      "left" : "if (getScopeDeclaredIn().isGlobal() && !fnName.isEmpty())",
      "right" : "if (getScopeDeclaredIn().isGlobal() && !fnName.isEmpty())",
      "info" : "IfStatement[23764-23895]:IfStatement[24071-24202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23822-23895]:Block[24129-24202]"
    }, {
      "left" : "typeRegistry.declareType(fnName, fnType.getInstanceType());",
      "right" : "typeRegistry.declareType(fnName, fnType.getInstanceType());",
      "info" : "ExpressionStatement[23830-23889]:ExpressionStatement[24137-24196]"
    }, {
      "left" : "return fnType;",
      "right" : "return fnType;",
      "info" : "ReturnStatement[23900-23914]:ReturnStatement[24207-24221]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23922-23929]:Modifier[24229-24236]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23930-23934]:PrimitiveType[24237-24241]"
    }, {
      "left" : "reportWarning",
      "right" : "reportWarning",
      "info" : "SimpleName[23935-23948]:SimpleName[24242-24255]"
    }, {
      "left" : "DiagnosticType warning",
      "right" : "DiagnosticType warning",
      "info" : "SingleVariableDeclaration[23949-23971]:SingleVariableDeclaration[24256-24278]"
    }, {
      "left" : "String ... args",
      "right" : "String ... args",
      "info" : "SingleVariableDeclaration[23973-23988]:SingleVariableDeclaration[24280-24295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23990-24068]:Block[24297-24375]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, errorRoot, warning, args));",
      "right" : "compiler.report(JSError.make(sourceName, errorRoot, warning, args));",
      "info" : "ExpressionStatement[23996-24064]:ExpressionStatement[24303-24371]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24072-24079]:Modifier[24379-24386]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24080-24084]:PrimitiveType[24387-24391]"
    }, {
      "left" : "reportError",
      "right" : "reportError",
      "info" : "SimpleName[24085-24096]:SimpleName[24392-24403]"
    }, {
      "left" : "DiagnosticType error",
      "right" : "DiagnosticType error",
      "info" : "SingleVariableDeclaration[24097-24117]:SingleVariableDeclaration[24404-24424]"
    }, {
      "left" : "String ... args",
      "right" : "String ... args",
      "info" : "SingleVariableDeclaration[24119-24134]:SingleVariableDeclaration[24426-24441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24136-24212]:Block[24443-24519]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, errorRoot, error, args));",
      "right" : "compiler.report(JSError.make(sourceName, errorRoot, error, args));",
      "info" : "ExpressionStatement[24142-24208]:ExpressionStatement[24449-24515]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24299-24305]:Modifier[24606-24612]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24306-24313]:PrimitiveType[24613-24620]"
    }, {
      "left" : "isFunctionTypeDeclaration",
      "right" : "isFunctionTypeDeclaration",
      "info" : "SimpleName[24314-24339]:SimpleName[24621-24646]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[24340-24354]:SingleVariableDeclaration[24647-24661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24356-24526]:Block[24663-24833]"
    }, {
      "left" : "return info.getParameterCount() > 0 ||\n        info.hasReturnType() ||\n        info.hasThisType() ||\n        info.isConstructor() ||\n        info.isInterface();",
      "right" : "return info.getParameterCount() > 0 ||\n        info.hasReturnType() ||\n        info.hasThisType() ||\n        info.isConstructor() ||\n        info.isInterface();",
      "info" : "ReturnStatement[24362-24522]:ReturnStatement[24669-24829]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24713-24720]:Modifier[25020-25027]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[24721-24726]:SimpleType[25028-25033]"
    }, {
      "left" : "getScopeDeclaredIn",
      "right" : "getScopeDeclaredIn",
      "info" : "SimpleName[24727-24745]:SimpleName[25034-25052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24748-25020]:Block[25055-25327]"
    }, {
      "left" : "int dotIndex = fnName.indexOf(\".\");",
      "right" : "int dotIndex = fnName.indexOf(\".\");",
      "info" : "VariableDeclarationStatement[24754-24789]:VariableDeclarationStatement[25061-25096]"
    }, {
      "left" : "if (dotIndex != -1)",
      "right" : "if (dotIndex != -1)",
      "info" : "IfStatement[24794-24998]:IfStatement[25101-25305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24814-24998]:Block[25121-25305]"
    }, {
      "left" : "String rootVarName = fnName.substring(0, dotIndex);",
      "right" : "String rootVarName = fnName.substring(0, dotIndex);",
      "info" : "VariableDeclarationStatement[24822-24873]:VariableDeclarationStatement[25129-25180]"
    }, {
      "left" : "Var rootVar = scope.getVar(rootVarName);",
      "right" : "Var rootVar = scope.getVar(rootVarName);",
      "info" : "VariableDeclarationStatement[24880-24920]:VariableDeclarationStatement[25187-25227]"
    }, {
      "left" : "if (rootVar != null)",
      "right" : "if (rootVar != null)",
      "info" : "IfStatement[24927-24992]:IfStatement[25234-25299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24948-24992]:Block[25255-25299]"
    }, {
      "left" : "return rootVar.getScope();",
      "right" : "return rootVar.getScope();",
      "info" : "ReturnStatement[24958-24984]:ReturnStatement[25265-25291]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[25003-25016]:ReturnStatement[25310-25323]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25308-25315]:Modifier[25615-25622]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25316-25322]:Modifier[25623-25629]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25323-25330]:PrimitiveType[25630-25637]"
    }, {
      "left" : "hasMoreTagsToResolve",
      "right" : "hasMoreTagsToResolve",
      "info" : "SimpleName[25331-25351]:SimpleName[25638-25658]"
    }, {
      "left" : "ObjectType objectType",
      "right" : "ObjectType objectType",
      "info" : "SingleVariableDeclaration[25352-25373]:SingleVariableDeclaration[25659-25680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25375-25985]:Block[25682-26292]"
    }, {
      "left" : "Preconditions.checkArgument(objectType.isUnknownType());",
      "right" : "Preconditions.checkArgument(objectType.isUnknownType());",
      "info" : "ExpressionStatement[25381-25437]:ExpressionStatement[25688-25744]"
    }, {
      "left" : "if (objectType.getImplicitPrototype() != null)",
      "right" : "if (objectType.getImplicitPrototype() != null)",
      "info" : "IfStatement[25442-25981]:IfStatement[25749-26288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25489-25657]:Block[25796-25964]"
    }, {
      "left" : "if (objectType.getImplicitPrototype().isResolved())",
      "right" : "if (objectType.getImplicitPrototype().isResolved())",
      "info" : "IfStatement[25532-25651]:IfStatement[25839-25958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25584-25615]:Block[25891-25922]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25594-25607]:ReturnStatement[25901-25914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25621-25651]:Block[25928-25958]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25631-25643]:ReturnStatement[25938-25950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25663-25981]:Block[25970-26288]"
    }, {
      "left" : "FunctionType ctor = objectType.getConstructor();",
      "right" : "FunctionType ctor = objectType.getConstructor();",
      "info" : "VariableDeclarationStatement[25709-25757]:VariableDeclarationStatement[26016-26064]"
    }, {
      "left" : "if (ctor != null)",
      "right" : "if (ctor != null)",
      "info" : "IfStatement[25764-25955]:IfStatement[26071-26262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25782-25955]:Block[26089-26262]"
    }, {
      "left" : "for (ObjectType interfaceType : ctor.getExtendedInterfaces())",
      "right" : "for (ObjectType interfaceType : ctor.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[25792-25947]:EnhancedForStatement[26099-26254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25854-25947]:Block[26161-26254]"
    }, {
      "left" : "if (!interfaceType.isResolved())",
      "right" : "if (!interfaceType.isResolved())",
      "info" : "IfStatement[25866-25937]:IfStatement[26173-26244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25899-25937]:Block[26206-26244]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25913-25925]:ReturnStatement[26220-26232]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25962-25975]:ReturnStatement[26269-26282]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26047-26053]:Modifier[26354-26360]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[26054-26063]:TYPE_DECLARATION_KIND[26361-26370]"
    }, {
      "left" : "FunctionContents",
      "right" : "FunctionContents",
      "info" : "SimpleName[26064-26080]:SimpleName[26371-26387]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26153-26157]:SimpleType[26460-26464]"
    }, {
      "left" : "getSourceNode",
      "right" : "getSourceNode",
      "info" : "SimpleName[26158-26171]:SimpleName[26465-26478]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26234-26241]:PrimitiveType[26541-26548]"
    }, {
      "left" : "mayBeFromExterns",
      "right" : "mayBeFromExterns",
      "info" : "SimpleName[26242-26258]:SimpleName[26549-26565]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26339-26346]:PrimitiveType[26646-26653]"
    }, {
      "left" : "mayHaveNonEmptyReturns",
      "right" : "mayHaveNonEmptyReturns",
      "info" : "SimpleName[26347-26369]:SimpleName[26654-26676]"
    }, {
      "left" : "Iterable<String>",
      "right" : "Iterable<String>",
      "info" : "ParameterizedType[26446-26462]:ParameterizedType[26753-26769]"
    }, {
      "left" : "getEscapedVarNames",
      "right" : "getEscapedVarNames",
      "info" : "SimpleName[26463-26481]:SimpleName[26770-26788]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26492-26498]:Modifier[26799-26805]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[26499-26504]:TYPE_DECLARATION_KIND[26806-26811]"
    }, {
      "left" : "UnknownFunctionContents",
      "right" : "UnknownFunctionContents",
      "info" : "SimpleName[26505-26528]:SimpleName[26812-26835]"
    }, {
      "left" : "FunctionContents",
      "right" : "FunctionContents",
      "info" : "SimpleType[26540-26556]:SimpleType[26847-26863]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26658-26664]:Modifier[26965-26971]"
    }, {
      "left" : "FunctionContents",
      "right" : "FunctionContents",
      "info" : "SimpleType[26665-26681]:SimpleType[26972-26988]"
    }, {
      "left" : "get",
      "right" : "get",
      "info" : "SimpleName[26682-26685]:SimpleName[26989-26992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26688-26719]:Block[26995-27026]"
    }, {
      "left" : "return singleton;",
      "right" : "return singleton;",
      "info" : "ReturnStatement[26696-26713]:ReturnStatement[27003-27020]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26725-26734]:MarkerAnnotation[27032-27041]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26739-26745]:Modifier[27046-27052]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26746-26750]:SimpleType[27053-27057]"
    }, {
      "left" : "getSourceNode",
      "right" : "getSourceNode",
      "info" : "SimpleName[26751-26764]:SimpleName[27058-27071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26767-26793]:Block[27074-27100]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26775-26787]:ReturnStatement[27082-27094]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26799-26808]:MarkerAnnotation[27106-27115]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26813-26819]:Modifier[27120-27126]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26820-26827]:PrimitiveType[27127-27134]"
    }, {
      "left" : "mayBeFromExterns",
      "right" : "mayBeFromExterns",
      "info" : "SimpleName[26828-26844]:SimpleName[27135-27151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26847-26873]:Block[27154-27180]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26855-26867]:ReturnStatement[27162-27174]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26879-26888]:MarkerAnnotation[27186-27195]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26893-26899]:Modifier[27200-27206]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26900-26907]:PrimitiveType[27207-27214]"
    }, {
      "left" : "mayHaveNonEmptyReturns",
      "right" : "mayHaveNonEmptyReturns",
      "info" : "SimpleName[26908-26930]:SimpleName[27215-27237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26933-26959]:Block[27240-27266]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26941-26953]:ReturnStatement[27248-27260]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26965-26974]:MarkerAnnotation[27272-27281]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26979-26985]:Modifier[27286-27292]"
    }, {
      "left" : "Iterable<String>",
      "right" : "Iterable<String>",
      "info" : "ParameterizedType[26986-27002]:ParameterizedType[27293-27309]"
    }, {
      "left" : "getEscapedVarNames",
      "right" : "getEscapedVarNames",
      "info" : "SimpleName[27003-27021]:SimpleName[27310-27328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27024-27064]:Block[27331-27371]"
    }, {
      "left" : "return ImmutableList.of();",
      "right" : "return ImmutableList.of();",
      "info" : "ReturnStatement[27032-27058]:ReturnStatement[27339-27365]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27072-27078]:Modifier[27379-27385]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[27079-27084]:TYPE_DECLARATION_KIND[27386-27391]"
    }, {
      "left" : "AstFunctionContents",
      "right" : "AstFunctionContents",
      "info" : "SimpleName[27085-27104]:SimpleName[27392-27411]"
    }, {
      "left" : "FunctionContents",
      "right" : "FunctionContents",
      "info" : "SimpleType[27116-27132]:SimpleType[27423-27439]"
    }, {
      "left" : "AstFunctionContents",
      "right" : "AstFunctionContents",
      "info" : "SimpleName[27255-27274]:SimpleName[27562-27581]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27275-27281]:SingleVariableDeclaration[27582-27588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27283-27308]:Block[27590-27615]"
    }, {
      "left" : "this.n = n;",
      "right" : "this.n = n;",
      "info" : "ExpressionStatement[27291-27302]:ExpressionStatement[27598-27609]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27314-27323]:MarkerAnnotation[27621-27630]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27328-27334]:Modifier[27635-27641]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27335-27339]:SimpleType[27642-27646]"
    }, {
      "left" : "getSourceNode",
      "right" : "getSourceNode",
      "info" : "SimpleName[27340-27353]:SimpleName[27647-27660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27356-27379]:Block[27663-27686]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27364-27373]:ReturnStatement[27671-27680]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27385-27394]:MarkerAnnotation[27692-27701]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27399-27405]:Modifier[27706-27712]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27406-27413]:PrimitiveType[27713-27720]"
    }, {
      "left" : "mayBeFromExterns",
      "right" : "mayBeFromExterns",
      "info" : "SimpleName[27414-27430]:SimpleName[27721-27737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27433-27472]:Block[27740-27779]"
    }, {
      "left" : "return n.isFromExterns();",
      "right" : "return n.isFromExterns();",
      "info" : "ReturnStatement[27441-27466]:ReturnStatement[27748-27773]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27478-27487]:MarkerAnnotation[27785-27794]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27492-27498]:Modifier[27799-27805]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27499-27506]:PrimitiveType[27806-27813]"
    }, {
      "left" : "mayHaveNonEmptyReturns",
      "right" : "mayHaveNonEmptyReturns",
      "info" : "SimpleName[27507-27529]:SimpleName[27814-27836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27532-27572]:Block[27839-27879]"
    }, {
      "left" : "return hasNonEmptyReturns;",
      "right" : "return hasNonEmptyReturns;",
      "info" : "ReturnStatement[27540-27566]:ReturnStatement[27847-27873]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27578-27582]:PrimitiveType[27885-27889]"
    }, {
      "left" : "recordNonEmptyReturn",
      "right" : "recordNonEmptyReturn",
      "info" : "SimpleName[27583-27603]:SimpleName[27890-27910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27606-27646]:Block[27913-27953]"
    }, {
      "left" : "hasNonEmptyReturns = true;",
      "right" : "hasNonEmptyReturns = true;",
      "info" : "ExpressionStatement[27614-27640]:ExpressionStatement[27921-27947]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27652-27661]:MarkerAnnotation[27959-27968]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27666-27672]:Modifier[27973-27979]"
    }, {
      "left" : "Iterable<String>",
      "right" : "Iterable<String>",
      "info" : "ParameterizedType[27673-27689]:ParameterizedType[27980-27996]"
    }, {
      "left" : "getEscapedVarNames",
      "right" : "getEscapedVarNames",
      "info" : "SimpleName[27690-27708]:SimpleName[27997-28015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27711-27813]:Block[28018-28120]"
    }, {
      "left" : "return escapedVarNames == null\n          ? ImmutableList.<String>of() : escapedVarNames;",
      "right" : "return escapedVarNames == null\n          ? ImmutableList.<String>of() : escapedVarNames;",
      "info" : "ReturnStatement[27719-27807]:ReturnStatement[28026-28114]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27819-27823]:PrimitiveType[28126-28130]"
    }, {
      "left" : "recordEscapedVarName",
      "right" : "recordEscapedVarName",
      "info" : "SimpleName[27824-27844]:SimpleName[28131-28151]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[27845-27856]:SingleVariableDeclaration[28152-28163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27858-27988]:Block[28165-28295]"
    }, {
      "left" : "if (escapedVarNames == null)",
      "right" : "if (escapedVarNames == null)",
      "info" : "IfStatement[27866-27949]:IfStatement[28173-28256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27895-27949]:Block[28202-28256]"
    }, {
      "left" : "escapedVarNames = Sets.newHashSet();",
      "right" : "escapedVarNames = Sets.newHashSet();",
      "info" : "ExpressionStatement[27905-27941]:ExpressionStatement[28212-28248]"
    }, {
      "left" : "escapedVarNames.add(name);",
      "right" : "escapedVarNames.add(name);",
      "info" : "ExpressionStatement[27956-27982]:ExpressionStatement[28263-28289]"
    } ]
  },
  "interFileMappings" : { }
}