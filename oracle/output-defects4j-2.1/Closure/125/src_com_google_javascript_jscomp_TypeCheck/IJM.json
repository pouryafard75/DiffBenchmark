{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeCheck",
      "right" : "TypeCheck",
      "info" : "TypeDeclaration[2418-74508]:TypeDeclaration[2418-74536]"
    }, {
      "left" : "static final DiagnosticType UNEXPECTED_TOKEN = DiagnosticType.error(\n      \"JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN\",\n      \"Internal Error: Don't know how to handle {0}\");",
      "right" : "static final DiagnosticType UNEXPECTED_TOKEN = DiagnosticType.error(\n      \"JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN\",\n      \"Internal Error: Don't know how to handle {0}\");",
      "info" : "FieldDeclaration[2623-2791]:FieldDeclaration[2623-2791]"
    }, {
      "left" : "protected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =\n      \"overriding prototype with non-object\";",
      "right" : "protected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =\n      \"overriding prototype with non-object\";",
      "info" : "FieldDeclaration[2826-2940]:FieldDeclaration[2826-2940]"
    }, {
      "left" : "static final DiagnosticType DETERMINISTIC_TEST =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST\",\n          \"condition always evaluates to {2}\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "right" : "static final DiagnosticType DETERMINISTIC_TEST =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST\",\n          \"condition always evaluates to {2}\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "info" : "FieldDeclaration[3074-3290]:FieldDeclaration[3074-3290]"
    }, {
      "left" : "static final DiagnosticType INEXISTENT_ENUM_ELEMENT =\n      DiagnosticType.warning(\n          \"JSC_INEXISTENT_ENUM_ELEMENT\",\n          \"element {0} does not exist on this enum\");",
      "right" : "static final DiagnosticType INEXISTENT_ENUM_ELEMENT =\n      DiagnosticType.warning(\n          \"JSC_INEXISTENT_ENUM_ELEMENT\",\n          \"element {0} does not exist on this enum\");",
      "info" : "FieldDeclaration[3294-3472]:FieldDeclaration[3294-3472]"
    }, {
      "left" : "static final DiagnosticType INEXISTENT_PROPERTY =\n      DiagnosticType.disabled(\n          \"JSC_INEXISTENT_PROPERTY\",\n          \"Property {0} never defined on {1}\");",
      "right" : "static final DiagnosticType INEXISTENT_PROPERTY =\n      DiagnosticType.disabled(\n          \"JSC_INEXISTENT_PROPERTY\",\n          \"Property {0} never defined on {1}\");",
      "info" : "FieldDeclaration[3569-3734]:FieldDeclaration[3569-3734]"
    }, {
      "left" : "static final DiagnosticType INEXISTENT_PROPERTY_WITH_SUGGESTION =\n      DiagnosticType.disabled(\n          \"JSC_INEXISTENT_PROPERTY\",\n          \"Property {0} never defined on {1}. Did you mean {2}?\");",
      "right" : "static final DiagnosticType INEXISTENT_PROPERTY_WITH_SUGGESTION =\n      DiagnosticType.disabled(\n          \"JSC_INEXISTENT_PROPERTY\",\n          \"Property {0} never defined on {1}. Did you mean {2}?\");",
      "info" : "FieldDeclaration[3738-3938]:FieldDeclaration[3738-3938]"
    }, {
      "left" : "protected static final DiagnosticType NOT_A_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_NOT_A_CONSTRUCTOR\",\n          \"cannot instantiate non-constructor\");",
      "right" : "protected static final DiagnosticType NOT_A_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_NOT_A_CONSTRUCTOR\",\n          \"cannot instantiate non-constructor\");",
      "info" : "FieldDeclaration[3942-4113]:FieldDeclaration[3942-4113]"
    }, {
      "left" : "static final DiagnosticType BIT_OPERATION =\n      DiagnosticType.warning(\n          \"JSC_BAD_TYPE_FOR_BIT_OPERATION\",\n          \"operator {0} cannot be applied to {1}\");",
      "right" : "static final DiagnosticType BIT_OPERATION =\n      DiagnosticType.warning(\n          \"JSC_BAD_TYPE_FOR_BIT_OPERATION\",\n          \"operator {0} cannot be applied to {1}\");",
      "info" : "FieldDeclaration[4117-4286]:FieldDeclaration[4117-4286]"
    }, {
      "left" : "static final DiagnosticType NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_NOT_FUNCTION_TYPE\",\n          \"{0} expressions are not callable\");",
      "right" : "static final DiagnosticType NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_NOT_FUNCTION_TYPE\",\n          \"{0} expressions are not callable\");",
      "info" : "FieldDeclaration[4290-4444]:FieldDeclaration[4290-4444]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_CONSTRUCTOR_NOT_CALLABLE\",\n          \"Constructor {0} should be called with the \\\"new\\\" keyword\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_CONSTRUCTOR_NOT_CALLABLE\",\n          \"Constructor {0} should be called with the \\\"new\\\" keyword\");",
      "info" : "FieldDeclaration[4448-4646]:FieldDeclaration[4448-4646]"
    }, {
      "left" : "static final DiagnosticType FUNCTION_MASKS_VARIABLE =\n      DiagnosticType.warning(\n          \"JSC_FUNCTION_MASKS_VARIABLE\",\n          \"function {0} masks variable (IE bug)\");",
      "right" : "static final DiagnosticType FUNCTION_MASKS_VARIABLE =\n      DiagnosticType.warning(\n          \"JSC_FUNCTION_MASKS_VARIABLE\",\n          \"function {0} masks variable (IE bug)\");",
      "info" : "FieldDeclaration[4650-4825]:FieldDeclaration[4650-4825]"
    }, {
      "left" : "static final DiagnosticType MULTIPLE_VAR_DEF = DiagnosticType.warning(\n      \"JSC_MULTIPLE_VAR_DEF\",\n      \"declaration of multiple variables with shared type information\");",
      "right" : "static final DiagnosticType MULTIPLE_VAR_DEF = DiagnosticType.warning(\n      \"JSC_MULTIPLE_VAR_DEF\",\n      \"declaration of multiple variables with shared type information\");",
      "info" : "FieldDeclaration[4829-5002]:FieldDeclaration[4829-5002]"
    }, {
      "left" : "static final DiagnosticType ENUM_DUP = DiagnosticType.error(\"JSC_ENUM_DUP\",\n      \"enum element {0} already defined\");",
      "right" : "static final DiagnosticType ENUM_DUP = DiagnosticType.error(\"JSC_ENUM_DUP\",\n      \"enum element {0} already defined\");",
      "info" : "FieldDeclaration[5006-5124]:FieldDeclaration[5006-5124]"
    }, {
      "left" : "static final DiagnosticType ENUM_NOT_CONSTANT =\n      DiagnosticType.warning(\"JSC_ENUM_NOT_CONSTANT\",\n          \"enum key {0} must be a syntactic constant\");",
      "right" : "static final DiagnosticType ENUM_NOT_CONSTANT =\n      DiagnosticType.warning(\"JSC_ENUM_NOT_CONSTANT\",\n          \"enum key {0} must be a syntactic constant\");",
      "info" : "FieldDeclaration[5128-5285]:FieldDeclaration[5128-5285]"
    }, {
      "left" : "static final DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION =\n      DiagnosticType.warning(\n          \"JSC_INVALID_INTERFACE_MEMBER_DECLARATION\",\n          \"interface members can only be empty property declarations,\"\n          + \" empty functions{0}\");",
      "right" : "static final DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION =\n      DiagnosticType.warning(\n          \"JSC_INVALID_INTERFACE_MEMBER_DECLARATION\",\n          \"interface members can only be empty property declarations,\"\n          + \" empty functions{0}\");",
      "info" : "FieldDeclaration[5289-5546]:FieldDeclaration[5289-5546]"
    }, {
      "left" : "static final DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_FUNCTION_NOT_EMPTY\",\n          \"interface member functions must have an empty body\");",
      "right" : "static final DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_FUNCTION_NOT_EMPTY\",\n          \"interface member functions must have an empty body\");",
      "info" : "FieldDeclaration[5550-5749]:FieldDeclaration[5550-5749]"
    }, {
      "left" : "static final DiagnosticType CONFLICTING_SHAPE_TYPE =\n      DiagnosticType.warning(\n          \"JSC_CONFLICTING_SHAPE_TYPE\",\n          \"{1} cannot extend this type; {0}s can only extend {0}s\");",
      "right" : "static final DiagnosticType CONFLICTING_SHAPE_TYPE =\n      DiagnosticType.warning(\n          \"JSC_CONFLICTING_SHAPE_TYPE\",\n          \"{1} cannot extend this type; {0}s can only extend {0}s\");",
      "info" : "FieldDeclaration[5753-5944]:FieldDeclaration[5753-5944]"
    }, {
      "left" : "static final DiagnosticType CONFLICTING_EXTENDED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_CONFLICTING_EXTENDED_TYPE\",\n          \"{1} cannot extend this type; {0}s can only extend {0}s\");",
      "right" : "static final DiagnosticType CONFLICTING_EXTENDED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_CONFLICTING_EXTENDED_TYPE\",\n          \"{1} cannot extend this type; {0}s can only extend {0}s\");",
      "info" : "FieldDeclaration[5948-6145]:FieldDeclaration[5948-6145]"
    }, {
      "left" : "static final DiagnosticType CONFLICTING_IMPLEMENTED_TYPE =\n    DiagnosticType.warning(\n        \"JSC_CONFLICTING_IMPLEMENTED_TYPE\",\n        \"{0} cannot implement this type; \" +\n        \"an interface can only extend, but not implement interfaces\");",
      "right" : "static final DiagnosticType CONFLICTING_IMPLEMENTED_TYPE =\n    DiagnosticType.warning(\n        \"JSC_CONFLICTING_IMPLEMENTED_TYPE\",\n        \"{0} cannot implement this type; \" +\n        \"an interface can only extend, but not implement interfaces\");",
      "info" : "FieldDeclaration[6149-6395]:FieldDeclaration[6149-6395]"
    }, {
      "left" : "static final DiagnosticType BAD_IMPLEMENTED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_NON_INTERFACE\",\n          \"can only implement interfaces\");",
      "right" : "static final DiagnosticType BAD_IMPLEMENTED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_NON_INTERFACE\",\n          \"can only implement interfaces\");",
      "info" : "FieldDeclaration[6399-6565]:FieldDeclaration[6399-6565]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_SUPERCLASS_PROPERTY\",\n          \"property {0} already defined on superclass {1}; \" +\n          \"use @override to override it\");",
      "right" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_SUPERCLASS_PROPERTY\",\n          \"property {0} already defined on superclass {1}; \" +\n          \"use @override to override it\");",
      "info" : "FieldDeclaration[6569-6805]:FieldDeclaration[6569-6805]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_INTERFACE_PROPERTY\",\n          \"property {0} already defined on interface {1}; \" +\n          \"use @override to override it\");",
      "right" : "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_INTERFACE_PROPERTY\",\n          \"property {0} already defined on interface {1}; \" +\n          \"use @override to override it\");",
      "info" : "FieldDeclaration[6809-7042]:FieldDeclaration[6809-7042]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
      "right" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
      "info" : "FieldDeclaration[7046-7368]:FieldDeclaration[7046-7368]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_OVERRIDE\",\n          \"property {0} not defined on any superclass of {1}\");",
      "right" : "static final DiagnosticType UNKNOWN_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_OVERRIDE\",\n          \"property {0} not defined on any superclass of {1}\");",
      "info" : "FieldDeclaration[7372-7546]:FieldDeclaration[7372-7546]"
    }, {
      "left" : "static final DiagnosticType INTERFACE_METHOD_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_OVERRIDE\",\n          \"property {0} is already defined by the {1} extended interface\");",
      "right" : "static final DiagnosticType INTERFACE_METHOD_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_OVERRIDE\",\n          \"property {0} is already defined by the {1} extended interface\");",
      "info" : "FieldDeclaration[7550-7754]:FieldDeclaration[7550-7754]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_EXPR_TYPE =\n      DiagnosticType.disabled(\"JSC_UNKNOWN_EXPR_TYPE\",\n          \"could not determine the type of this expression\");",
      "right" : "static final DiagnosticType UNKNOWN_EXPR_TYPE =\n      DiagnosticType.disabled(\"JSC_UNKNOWN_EXPR_TYPE\",\n          \"could not determine the type of this expression\");",
      "info" : "FieldDeclaration[7758-7922]:FieldDeclaration[7758-7922]"
    }, {
      "left" : "static final DiagnosticType UNRESOLVED_TYPE =\n      DiagnosticType.warning(\"JSC_UNRESOLVED_TYPE\",\n          \"could not resolve the name {0} to a type\");",
      "right" : "static final DiagnosticType UNRESOLVED_TYPE =\n      DiagnosticType.warning(\"JSC_UNRESOLVED_TYPE\",\n          \"could not resolve the name {0} to a type\");",
      "info" : "FieldDeclaration[7926-8078]:FieldDeclaration[7926-8078]"
    }, {
      "left" : "static final DiagnosticType WRONG_ARGUMENT_COUNT =\n      DiagnosticType.warning(\n          \"JSC_WRONG_ARGUMENT_COUNT\",\n          \"Function {0}: called with {1} argument(s). \" +\n          \"Function requires at least {2} argument(s){3}.\");",
      "right" : "static final DiagnosticType WRONG_ARGUMENT_COUNT =\n      DiagnosticType.warning(\n          \"JSC_WRONG_ARGUMENT_COUNT\",\n          \"Function {0}: called with {1} argument(s). \" +\n          \"Function requires at least {2} argument(s){3}.\");",
      "info" : "FieldDeclaration[8082-8319]:FieldDeclaration[8082-8319]"
    }, {
      "left" : "static final DiagnosticType ILLEGAL_IMPLICIT_CAST =\n      DiagnosticType.warning(\n          \"JSC_ILLEGAL_IMPLICIT_CAST\",\n          \"Illegal annotation on {0}. @implicitCast may only be used in \" +\n          \"externs.\");",
      "right" : "static final DiagnosticType ILLEGAL_IMPLICIT_CAST =\n      DiagnosticType.warning(\n          \"JSC_ILLEGAL_IMPLICIT_CAST\",\n          \"Illegal annotation on {0}. @implicitCast may only be used in \" +\n          \"externs.\");",
      "info" : "FieldDeclaration[8323-8542]:FieldDeclaration[8323-8542]"
    }, {
      "left" : "static final DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE =\n      DiagnosticType.warning(\n          \"JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE\",\n          \"Interface {0} has a property {1} with incompatible types in \" +\n          \"its super interfaces {2} and {3}\");",
      "right" : "static final DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE =\n      DiagnosticType.warning(\n          \"JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE\",\n          \"Interface {0} has a property {1} with incompatible types in \" +\n          \"its super interfaces {2} and {3}\");",
      "info" : "FieldDeclaration[8546-8816]:FieldDeclaration[8546-8816]"
    }, {
      "left" : "static final DiagnosticType EXPECTED_THIS_TYPE =\n      DiagnosticType.warning(\n          \"JSC_EXPECTED_THIS_TYPE\",\n          \"\\\"{0}\\\" must be called with a \\\"this\\\" type\");",
      "right" : "static final DiagnosticType EXPECTED_THIS_TYPE =\n      DiagnosticType.warning(\n          \"JSC_EXPECTED_THIS_TYPE\",\n          \"\\\"{0}\\\" must be called with a \\\"this\\\" type\");",
      "info" : "FieldDeclaration[8820-8992]:FieldDeclaration[8820-8992]"
    }, {
      "left" : "static final DiagnosticType IN_USED_WITH_STRUCT =\n      DiagnosticType.warning(\"JSC_IN_USED_WITH_STRUCT\",\n                             \"Cannot use the IN operator with structs\");",
      "right" : "static final DiagnosticType IN_USED_WITH_STRUCT =\n      DiagnosticType.warning(\"JSC_IN_USED_WITH_STRUCT\",\n                             \"Cannot use the IN operator with structs\");",
      "info" : "FieldDeclaration[8996-9174]:FieldDeclaration[8996-9174]"
    }, {
      "left" : "static final DiagnosticType ILLEGAL_PROPERTY_CREATION =\n      DiagnosticType.warning(\"JSC_ILLEGAL_PROPERTY_CREATION\",\n                             \"Cannot add a property to a struct instance \" +\n                             \"after it is constructed.\");",
      "right" : "static final DiagnosticType ILLEGAL_PROPERTY_CREATION =\n      DiagnosticType.warning(\"JSC_ILLEGAL_PROPERTY_CREATION\",\n                             \"Cannot add a property to a struct instance \" +\n                             \"after it is constructed.\");",
      "info" : "FieldDeclaration[9178-9430]:FieldDeclaration[9178-9430]"
    }, {
      "left" : "static final DiagnosticType ILLEGAL_OBJLIT_KEY =\n      DiagnosticType.warning(\n          \"ILLEGAL_OBJLIT_KEY\",\n          \"Illegal key, the object literal is a {0}\");",
      "right" : "static final DiagnosticType ILLEGAL_OBJLIT_KEY =\n      DiagnosticType.warning(\n          \"ILLEGAL_OBJLIT_KEY\",\n          \"Illegal key, the object literal is a {0}\");",
      "info" : "FieldDeclaration[9434-9599]:FieldDeclaration[9434-9599]"
    }, {
      "left" : "static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      DETERMINISTIC_TEST,\n      INEXISTENT_ENUM_ELEMENT,\n      INEXISTENT_PROPERTY,\n      NOT_A_CONSTRUCTOR,\n      BIT_OPERATION,\n      NOT_CALLABLE,\n      CONSTRUCTOR_NOT_CALLABLE,\n      FUNCTION_MASKS_VARIABLE,\n      MULTIPLE_VAR_DEF,\n      ENUM_DUP,\n      ENUM_NOT_CONSTANT,\n      INVALID_INTERFACE_MEMBER_DECLARATION,\n      INTERFACE_FUNCTION_NOT_EMPTY,\n      CONFLICTING_SHAPE_TYPE,\n      CONFLICTING_EXTENDED_TYPE,\n      CONFLICTING_IMPLEMENTED_TYPE,\n      BAD_IMPLEMENTED_TYPE,\n      HIDDEN_SUPERCLASS_PROPERTY,\n      HIDDEN_INTERFACE_PROPERTY,\n      HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n      UNKNOWN_OVERRIDE,\n      INTERFACE_METHOD_OVERRIDE,\n      UNRESOLVED_TYPE,\n      WRONG_ARGUMENT_COUNT,\n      ILLEGAL_IMPLICIT_CAST,\n      INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n      EXPECTED_THIS_TYPE,\n      IN_USED_WITH_STRUCT,\n      ILLEGAL_PROPERTY_CREATION,\n      ILLEGAL_OBJLIT_KEY,\n      RhinoErrorReporter.TYPE_PARSE_ERROR,\n      TypedScopeCreator.UNKNOWN_LENDS,\n      TypedScopeCreator.LENDS_ON_NON_OBJECT,\n      TypedScopeCreator.CTOR_INITIALIZER,\n      TypedScopeCreator.IFACE_INITIALIZER,\n      FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);",
      "right" : "static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      DETERMINISTIC_TEST,\n      INEXISTENT_ENUM_ELEMENT,\n      INEXISTENT_PROPERTY,\n      NOT_A_CONSTRUCTOR,\n      BIT_OPERATION,\n      NOT_CALLABLE,\n      CONSTRUCTOR_NOT_CALLABLE,\n      FUNCTION_MASKS_VARIABLE,\n      MULTIPLE_VAR_DEF,\n      ENUM_DUP,\n      ENUM_NOT_CONSTANT,\n      INVALID_INTERFACE_MEMBER_DECLARATION,\n      INTERFACE_FUNCTION_NOT_EMPTY,\n      CONFLICTING_SHAPE_TYPE,\n      CONFLICTING_EXTENDED_TYPE,\n      CONFLICTING_IMPLEMENTED_TYPE,\n      BAD_IMPLEMENTED_TYPE,\n      HIDDEN_SUPERCLASS_PROPERTY,\n      HIDDEN_INTERFACE_PROPERTY,\n      HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n      UNKNOWN_OVERRIDE,\n      INTERFACE_METHOD_OVERRIDE,\n      UNRESOLVED_TYPE,\n      WRONG_ARGUMENT_COUNT,\n      ILLEGAL_IMPLICIT_CAST,\n      INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n      EXPECTED_THIS_TYPE,\n      IN_USED_WITH_STRUCT,\n      ILLEGAL_PROPERTY_CREATION,\n      ILLEGAL_OBJLIT_KEY,\n      RhinoErrorReporter.TYPE_PARSE_ERROR,\n      TypedScopeCreator.UNKNOWN_LENDS,\n      TypedScopeCreator.LENDS_ON_NON_OBJECT,\n      TypedScopeCreator.CTOR_INITIALIZER,\n      TypedScopeCreator.IFACE_INITIALIZER,\n      FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);",
      "info" : "FieldDeclaration[9827-11042]:FieldDeclaration[9827-11042]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[11046-11086]:FieldDeclaration[11046-11086]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[11089-11127]:FieldDeclaration[11089-11127]"
    }, {
      "left" : "private final ReverseAbstractInterpreter reverseInterpreter;",
      "right" : "private final ReverseAbstractInterpreter reverseInterpreter;",
      "info" : "FieldDeclaration[11131-11191]:FieldDeclaration[11131-11191]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[11195-11237]:FieldDeclaration[11195-11237]"
    }, {
      "left" : "private Scope topScope;",
      "right" : "private Scope topScope;",
      "info" : "FieldDeclaration[11240-11263]:FieldDeclaration[11240-11263]"
    }, {
      "left" : "private MemoizedScopeCreator scopeCreator;",
      "right" : "private MemoizedScopeCreator scopeCreator;",
      "info" : "FieldDeclaration[11267-11309]:FieldDeclaration[11267-11309]"
    }, {
      "left" : "private final CheckLevel reportMissingOverride;",
      "right" : "private final CheckLevel reportMissingOverride;",
      "info" : "FieldDeclaration[11313-11360]:FieldDeclaration[11313-11360]"
    }, {
      "left" : "private final boolean reportUnknownTypes;",
      "right" : "private final boolean reportUnknownTypes;",
      "info" : "FieldDeclaration[11363-11404]:FieldDeclaration[11363-11404]"
    }, {
      "left" : "private boolean reportMissingProperties = true;",
      "right" : "private boolean reportMissingProperties = true;",
      "info" : "FieldDeclaration[11504-11551]:FieldDeclaration[11504-11551]"
    }, {
      "left" : "private InferJSDocInfo inferJSDocInfo = null;",
      "right" : "private InferJSDocInfo inferJSDocInfo = null;",
      "info" : "FieldDeclaration[11555-11600]:FieldDeclaration[11555-11600]"
    }, {
      "left" : "private int typedCount = 0;",
      "right" : "private int typedCount = 0;",
      "info" : "FieldDeclaration[11681-11708]:FieldDeclaration[11681-11708]"
    }, {
      "left" : "private int nullCount = 0;",
      "right" : "private int nullCount = 0;",
      "info" : "FieldDeclaration[11711-11737]:FieldDeclaration[11711-11737]"
    }, {
      "left" : "private int unknownCount = 0;",
      "right" : "private int unknownCount = 0;",
      "info" : "FieldDeclaration[11740-11769]:FieldDeclaration[11740-11769]"
    }, {
      "left" : "private boolean inExterns;",
      "right" : "private boolean inExterns;",
      "info" : "FieldDeclaration[11772-11798]:FieldDeclaration[11772-11798]"
    }, {
      "left" : "private int noTypeCheckSection = 0;",
      "right" : "private int noTypeCheckSection = 0;",
      "info" : "FieldDeclaration[11889-11924]:FieldDeclaration[11889-11924]"
    }, {
      "left" : "private Method editDistance;",
      "right" : "private Method editDistance;",
      "info" : "FieldDeclaration[11928-11956]:FieldDeclaration[11928-11956]"
    }, {
      "left" : "SuggestionPair",
      "right" : "SuggestionPair",
      "info" : "TypeDeclaration[11960-12204]:TypeDeclaration[11960-12204]"
    }, {
      "left" : "private final String suggestion;",
      "right" : "private final String suggestion;",
      "info" : "FieldDeclaration[12008-12040]:FieldDeclaration[12008-12040]"
    }, {
      "left" : "final int distance;",
      "right" : "final int distance;",
      "info" : "FieldDeclaration[12045-12064]:FieldDeclaration[12045-12064]"
    }, {
      "left" : "private SuggestionPair(String suggestion, int distance)",
      "right" : "private SuggestionPair(String suggestion, int distance)",
      "info" : "MethodDeclaration[12069-12200]:MethodDeclaration[12069-12200]"
    }, {
      "left" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      Scope topScope,\n      MemoizedScopeCreator scopeCreator,\n      CheckLevel reportMissingOverride)",
      "right" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      Scope topScope,\n      MemoizedScopeCreator scopeCreator,\n      CheckLevel reportMissingOverride)",
      "info" : "MethodDeclaration[12208-13269]:MethodDeclaration[12208-13269]"
    }, {
      "left" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      CheckLevel reportMissingOverride)",
      "right" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      CheckLevel reportMissingOverride)",
      "info" : "MethodDeclaration[13273-13547]:MethodDeclaration[13273-13547]"
    }, {
      "left" : "TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry)",
      "right" : "TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry)",
      "info" : "MethodDeclaration[13551-13776]:MethodDeclaration[13551-13776]"
    }, {
      "left" : "TypeCheck reportMissingProperties(boolean report)",
      "right" : "TypeCheck reportMissingProperties(boolean report)",
      "info" : "MethodDeclaration[13780-13967]:MethodDeclaration[13780-13967]"
    }, {
      "left" : "public void process(Node externsRoot, Node jsRoot)",
      "right" : "public void process(Node externsRoot, Node jsRoot)",
      "info" : "MethodDeclaration[13971-14667]:MethodDeclaration[13971-14667]"
    }, {
      "left" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
      "right" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
      "info" : "MethodDeclaration[14671-15368]:MethodDeclaration[14671-15368]"
    }, {
      "left" : "public void check(Node node, boolean externs)",
      "right" : "public void check(Node node, boolean externs)",
      "info" : "MethodDeclaration[15373-15722]:MethodDeclaration[15373-15722]"
    }, {
      "left" : "private void checkNoTypeCheckSection(Node n, boolean enterSection)",
      "right" : "private void checkNoTypeCheckSection(Node n, boolean enterSection)",
      "info" : "MethodDeclaration[15727-16264]:MethodDeclaration[15727-16264]"
    }, {
      "left" : "private void report(NodeTraversal t, Node n, DiagnosticType diagnosticType,\n      String... arguments)",
      "right" : "private void report(NodeTraversal t, Node n, DiagnosticType diagnosticType,\n      String... arguments)",
      "info" : "MethodDeclaration[16268-16463]:MethodDeclaration[16268-16463]"
    }, {
      "left" : "public boolean shouldTraverse(\n      NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(\n      NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[16467-17608]:MethodDeclaration[16467-17608]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[17612-29249]:MethodDeclaration[17612-29249]"
    }, {
      "left" : "private void checkTypeofString(NodeTraversal t, Node n, String s)",
      "right" : "private void checkTypeofString(NodeTraversal t, Node n, String s)",
      "info" : "MethodDeclaration[29253-29570]:MethodDeclaration[29253-29570]"
    }, {
      "left" : "private void doPercentTypedAccounting(NodeTraversal t, Node n)",
      "right" : "private void doPercentTypedAccounting(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[29574-30024]:MethodDeclaration[29574-30024]"
    }, {
      "left" : "private void visitAssign(NodeTraversal t, Node assign)",
      "right" : "private void visitAssign(NodeTraversal t, Node assign)",
      "info" : "MethodDeclaration[30028-34633]:MethodDeclaration[30028-34633]"
    }, {
      "left" : "private void checkPropCreation(NodeTraversal t, Node lvalue)",
      "right" : "private void checkPropCreation(NodeTraversal t, Node lvalue)",
      "info" : "MethodDeclaration[34637-36227]:MethodDeclaration[34637-36227]"
    }, {
      "left" : "private void checkPropertyInheritanceOnGetpropAssign(\n      NodeTraversal t, Node assign, Node object, String property,\n      JSDocInfo info, JSType propertyType)",
      "right" : "private void checkPropertyInheritanceOnGetpropAssign(\n      NodeTraversal t, Node assign, Node object, String property,\n      JSDocInfo info, JSType propertyType)",
      "info" : "MethodDeclaration[36231-37473]:MethodDeclaration[36231-37473]"
    }, {
      "left" : "private void visitObjLitKey(\n      NodeTraversal t, Node key, Node objlit, JSType litType)",
      "right" : "private void visitObjLitKey(\n      NodeTraversal t, Node key, Node objlit, JSType litType)",
      "info" : "MethodDeclaration[37477-40183]:MethodDeclaration[37477-40183]"
    }, {
      "left" : "private static boolean propertyIsImplicitCast(ObjectType type, String prop)",
      "right" : "private static boolean propertyIsImplicitCast(ObjectType type, String prop)",
      "info" : "MethodDeclaration[40187-40618]:MethodDeclaration[40187-40618]"
    }, {
      "left" : "private void checkDeclaredPropertyInheritance(\n      NodeTraversal t, Node n, FunctionType ctorType, String propertyName,\n      JSDocInfo info, JSType propertyType)",
      "right" : "private void checkDeclaredPropertyInheritance(\n      NodeTraversal t, Node n, FunctionType ctorType, String propertyName,\n      JSDocInfo info, JSType propertyType)",
      "info" : "MethodDeclaration[40622-46034]:MethodDeclaration[40622-46034]"
    }, {
      "left" : "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor)",
      "right" : "private static boolean hasUnknownOrEmptySupertype(FunctionType ctor)",
      "info" : "MethodDeclaration[46038-46987]:MethodDeclaration[46038-46987]"
    }, {
      "left" : "private void visitInterfaceGetprop(NodeTraversal t, Node assign, Node object,\n      String property, Node lvalue, Node rvalue)",
      "right" : "private void visitInterfaceGetprop(NodeTraversal t, Node assign, Node object,\n      String property, Node lvalue, Node rvalue)",
      "info" : "MethodDeclaration[46991-48194]:MethodDeclaration[46991-48194]"
    }, {
      "left" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
      "right" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[48198-49611]:MethodDeclaration[48198-49611]"
    }, {
      "left" : "private void visitGetProp(NodeTraversal t, Node n, Node parent)",
      "right" : "private void visitGetProp(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[49615-50632]:MethodDeclaration[49615-50632]"
    }, {
      "left" : "private void checkPropertyAccess(JSType childType, String propName,\n      NodeTraversal t, Node n)",
      "right" : "private void checkPropertyAccess(JSType childType, String propName,\n      NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[50636-52208]:MethodDeclaration[50636-52208]"
    }, {
      "left" : "private void checkPropertyAccessHelper(JSType objectType, String propName,\n      NodeTraversal t, Node n)",
      "right" : "private void checkPropertyAccessHelper(JSType objectType, String propName,\n      NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[52212-53027]:MethodDeclaration[52212-53027]"
    }, {
      "left" : "private SuggestionPair getClosestPropertySuggestion(\n      JSType objectType, String propName)",
      "right" : "private SuggestionPair getClosestPropertySuggestion(\n      JSType objectType, String propName)",
      "info" : "MethodDeclaration[53031-54700]:MethodDeclaration[53031-54700]"
    }, {
      "left" : "private boolean isPropertyTest(Node getProp)",
      "right" : "private boolean isPropertyTest(Node getProp)",
      "info" : "MethodDeclaration[54704-55722]:MethodDeclaration[54704-55722]"
    }, {
      "left" : "private void visitGetElem(NodeTraversal t, Node n)",
      "right" : "private void visitGetElem(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[55726-56137]:MethodDeclaration[55726-56137]"
    }, {
      "left" : "private void visitVar(NodeTraversal t, Node n)",
      "right" : "private void visitVar(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[56141-57423]:MethodDeclaration[56141-57423]"
    }, {
      "left" : "private void visitNew(NodeTraversal t, Node n)",
      "right" : "private void visitNew(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[57427-58020]:MethodDeclaration[57427-58048]"
    }, {
      "left" : "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType)",
      "right" : "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType)",
      "info" : "MethodDeclaration[58024-59877]:MethodDeclaration[58052-59905]"
    }, {
      "left" : "private void visitFunction(NodeTraversal t, Node n)",
      "right" : "private void visitFunction(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[59881-63312]:MethodDeclaration[59909-63340]"
    }, {
      "left" : "private void visitCall(NodeTraversal t, Node n)",
      "right" : "private void visitCall(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[63316-65658]:MethodDeclaration[63344-65686]"
    }, {
      "left" : "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType)",
      "right" : "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType)",
      "info" : "MethodDeclaration[65662-67112]:MethodDeclaration[65690-67140]"
    }, {
      "left" : "private void visitReturn(NodeTraversal t, Node n)",
      "right" : "private void visitReturn(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[67116-68238]:MethodDeclaration[67144-68266]"
    }, {
      "left" : "private void visitBinaryOperator(int op, NodeTraversal t, Node n)",
      "right" : "private void visitBinaryOperator(int op, NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[68242-70315]:MethodDeclaration[68270-70343]"
    }, {
      "left" : "private void checkEnumAlias(\n      NodeTraversal t, JSDocInfo declInfo, Node value)",
      "right" : "private void checkEnumAlias(\n      NodeTraversal t, JSDocInfo declInfo, Node value)",
      "info" : "MethodDeclaration[70320-71372]:MethodDeclaration[70348-71400]"
    }, {
      "left" : "private JSType getJSType(Node n)",
      "right" : "private JSType getJSType(Node n)",
      "info" : "MethodDeclaration[71376-71943]:MethodDeclaration[71404-71971]"
    }, {
      "left" : "private void ensureTyped(NodeTraversal t, Node n)",
      "right" : "private void ensureTyped(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[72271-72489]:MethodDeclaration[72299-72517]"
    }, {
      "left" : "private void ensureTyped(NodeTraversal t, Node n, JSTypeNative type)",
      "right" : "private void ensureTyped(NodeTraversal t, Node n, JSTypeNative type)",
      "info" : "MethodDeclaration[72493-72611]:MethodDeclaration[72521-72639]"
    }, {
      "left" : "private void ensureTyped(NodeTraversal t, Node n, JSType type)",
      "right" : "private void ensureTyped(NodeTraversal t, Node n, JSType type)",
      "info" : "MethodDeclaration[72615-74129]:MethodDeclaration[72643-74157]"
    }, {
      "left" : "double getTypedPercent()",
      "right" : "double getTypedPercent()",
      "info" : "MethodDeclaration[74133-74400]:MethodDeclaration[74161-74428]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative typeId)",
      "right" : "private JSType getNativeType(JSTypeNative typeId)",
      "info" : "MethodDeclaration[74404-74506]:MethodDeclaration[74432-74534]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12125-12200]:Block[12125-12200]"
    }, {
      "left" : "this.suggestion = suggestion;",
      "right" : "this.suggestion = suggestion;",
      "info" : "ExpressionStatement[12133-12162]:ExpressionStatement[12133-12162]"
    }, {
      "left" : "this.distance = distance;",
      "right" : "this.distance = distance;",
      "info" : "ExpressionStatement[12169-12194]:ExpressionStatement[12169-12194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12443-13269]:Block[12443-13269]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[12449-12474]:ExpressionStatement[12449-12474]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[12479-12524]:ExpressionStatement[12479-12524]"
    }, {
      "left" : "this.reverseInterpreter = reverseInterpreter;",
      "right" : "this.reverseInterpreter = reverseInterpreter;",
      "info" : "ExpressionStatement[12529-12574]:ExpressionStatement[12529-12574]"
    }, {
      "left" : "this.typeRegistry = typeRegistry;",
      "right" : "this.typeRegistry = typeRegistry;",
      "info" : "ExpressionStatement[12579-12612]:ExpressionStatement[12579-12612]"
    }, {
      "left" : "this.topScope = topScope;",
      "right" : "this.topScope = topScope;",
      "info" : "ExpressionStatement[12617-12642]:ExpressionStatement[12617-12642]"
    }, {
      "left" : "this.scopeCreator = scopeCreator;",
      "right" : "this.scopeCreator = scopeCreator;",
      "info" : "ExpressionStatement[12647-12680]:ExpressionStatement[12647-12680]"
    }, {
      "left" : "this.reportMissingOverride = reportMissingOverride;",
      "right" : "this.reportMissingOverride = reportMissingOverride;",
      "info" : "ExpressionStatement[12685-12736]:ExpressionStatement[12685-12736]"
    }, {
      "left" : "this.reportUnknownTypes = ((Compiler) compiler).getOptions().enables(\n        DiagnosticGroups.REPORT_UNKNOWN_TYPES);",
      "right" : "this.reportUnknownTypes = ((Compiler) compiler).getOptions().enables(\n        DiagnosticGroups.REPORT_UNKNOWN_TYPES);",
      "info" : "ExpressionStatement[12741-12858]:ExpressionStatement[12741-12858]"
    }, {
      "left" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
      "right" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
      "info" : "ExpressionStatement[12863-12914]:ExpressionStatement[12863-12914]"
    }, {
      "left" : "ClassLoader classLoader = TypeCheck.class.getClassLoader();",
      "right" : "ClassLoader classLoader = TypeCheck.class.getClassLoader();",
      "info" : "VariableDeclarationStatement[12920-12979]:VariableDeclarationStatement[12920-12979]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12984-13265]:TryStatement[12984-13265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12988-13204]:Block[12988-13204]"
    }, {
      "left" : "Class<?> c = classLoader.loadClass(\n          \"com.google.common.string.EditDistance\");",
      "right" : "Class<?> c = classLoader.loadClass(\n          \"com.google.common.string.EditDistance\");",
      "info" : "VariableDeclarationStatement[12996-13083]:VariableDeclarationStatement[12996-13083]"
    }, {
      "left" : "editDistance = c.getDeclaredMethod(\n          \"getEditDistance\", String.class, String.class, boolean.class);",
      "right" : "editDistance = c.getDeclaredMethod(\n          \"getEditDistance\", String.class, String.class, boolean.class);",
      "info" : "ExpressionStatement[13090-13198]:ExpressionStatement[13090-13198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13231-13265]:Block[13231-13265]"
    }, {
      "left" : "editDistance = null;",
      "right" : "editDistance = null;",
      "info" : "ExpressionStatement[13239-13259]:ExpressionStatement[13239-13259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13445-13547]:Block[13445-13547]"
    }, {
      "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride);",
      "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride);",
      "info" : "ConstructorInvocation[13451-13543]:ConstructorInvocation[13451-13543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13676-13776]:Block[13676-13776]"
    }, {
      "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING);",
      "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING);",
      "info" : "ConstructorInvocation[13682-13772]:ConstructorInvocation[13682-13772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13907-13967]:Block[13907-13967]"
    }, {
      "left" : "reportMissingProperties = report;",
      "right" : "reportMissingProperties = report;",
      "info" : "ExpressionStatement[13913-13946]:ExpressionStatement[13913-13946]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13951-13963]:ReturnStatement[13951-13963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14283-14667]:Block[14283-14667]"
    }, {
      "left" : "Preconditions.checkNotNull(scopeCreator);",
      "right" : "Preconditions.checkNotNull(scopeCreator);",
      "info" : "ExpressionStatement[14289-14330]:ExpressionStatement[14289-14330]"
    }, {
      "left" : "Preconditions.checkNotNull(topScope);",
      "right" : "Preconditions.checkNotNull(topScope);",
      "info" : "ExpressionStatement[14335-14372]:ExpressionStatement[14335-14372]"
    }, {
      "left" : "Node externsAndJs = jsRoot.getParent();",
      "right" : "Node externsAndJs = jsRoot.getParent();",
      "info" : "VariableDeclarationStatement[14378-14417]:VariableDeclarationStatement[14378-14417]"
    }, {
      "left" : "Preconditions.checkState(externsAndJs != null);",
      "right" : "Preconditions.checkState(externsAndJs != null);",
      "info" : "ExpressionStatement[14422-14469]:ExpressionStatement[14422-14469]"
    }, {
      "left" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
      "right" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
      "info" : "ExpressionStatement[14474-14567]:ExpressionStatement[14474-14567]"
    }, {
      "left" : "if (externsRoot != null)",
      "right" : "if (externsRoot != null)",
      "info" : "IfStatement[14573-14637]:IfStatement[14573-14637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14598-14637]:Block[14598-14637]"
    }, {
      "left" : "check(externsRoot, true);",
      "right" : "check(externsRoot, true);",
      "info" : "ExpressionStatement[14606-14631]:ExpressionStatement[14606-14631]"
    }, {
      "left" : "check(jsRoot, false);",
      "right" : "check(jsRoot, false);",
      "info" : "ExpressionStatement[14642-14663]:ExpressionStatement[14642-14663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14791-15368]:Block[14791-15368]"
    }, {
      "left" : "Preconditions.checkState(scopeCreator == null);",
      "right" : "Preconditions.checkState(scopeCreator == null);",
      "info" : "ExpressionStatement[14797-14844]:ExpressionStatement[14797-14844]"
    }, {
      "left" : "Preconditions.checkState(topScope == null);",
      "right" : "Preconditions.checkState(topScope == null);",
      "info" : "ExpressionStatement[14849-14892]:ExpressionStatement[14849-14892]"
    }, {
      "left" : "Preconditions.checkState(jsRoot.getParent() != null);",
      "right" : "Preconditions.checkState(jsRoot.getParent() != null);",
      "info" : "ExpressionStatement[14898-14951]:ExpressionStatement[14898-14951]"
    }, {
      "left" : "Node externsAndJsRoot = jsRoot.getParent();",
      "right" : "Node externsAndJsRoot = jsRoot.getParent();",
      "info" : "VariableDeclarationStatement[14956-14999]:VariableDeclarationStatement[14956-14999]"
    }, {
      "left" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
      "right" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
      "info" : "ExpressionStatement[15005-15078]:ExpressionStatement[15005-15078]"
    }, {
      "left" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
      "right" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
      "info" : "ExpressionStatement[15083-15143]:ExpressionStatement[15083-15143]"
    }, {
      "left" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
      "right" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
      "info" : "VariableDeclarationStatement[15149-15263]:VariableDeclarationStatement[15149-15263]"
    }, {
      "left" : "inference.process(externsRoot, jsRoot);",
      "right" : "inference.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[15269-15308]:ExpressionStatement[15269-15308]"
    }, {
      "left" : "process(externsRoot, jsRoot);",
      "right" : "process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[15313-15342]:ExpressionStatement[15313-15342]"
    }, {
      "left" : "return topScope;",
      "right" : "return topScope;",
      "info" : "ReturnStatement[15348-15364]:ReturnStatement[15348-15364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15419-15722]:Block[15419-15722]"
    }, {
      "left" : "Preconditions.checkNotNull(node);",
      "right" : "Preconditions.checkNotNull(node);",
      "info" : "ExpressionStatement[15425-15458]:ExpressionStatement[15425-15458]"
    }, {
      "left" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
      "right" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
      "info" : "VariableDeclarationStatement[15464-15530]:VariableDeclarationStatement[15464-15530]"
    }, {
      "left" : "inExterns = externs;",
      "right" : "inExterns = externs;",
      "info" : "ExpressionStatement[15535-15555]:ExpressionStatement[15535-15555]"
    }, {
      "left" : "t.traverseWithScope(node, topScope);",
      "right" : "t.traverseWithScope(node, topScope);",
      "info" : "ExpressionStatement[15560-15596]:ExpressionStatement[15560-15596]"
    }, {
      "left" : "if (externs)",
      "right" : "if (externs)",
      "info" : "IfStatement[15601-15718]:IfStatement[15601-15718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15614-15663]:Block[15614-15663]"
    }, {
      "left" : "inferJSDocInfo.process(node, null);",
      "right" : "inferJSDocInfo.process(node, null);",
      "info" : "ExpressionStatement[15622-15657]:ExpressionStatement[15622-15657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15669-15718]:Block[15669-15718]"
    }, {
      "left" : "inferJSDocInfo.process(null, node);",
      "right" : "inferJSDocInfo.process(null, node);",
      "info" : "ExpressionStatement[15677-15712]:ExpressionStatement[15677-15712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15794-16264]:Block[15794-16264]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
      "info" : "SwitchStatement[15800-16260]:SwitchStatement[15800-16260]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[15829-15847]:SwitchCase[15829-15847]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[15854-15871]:SwitchCase[15854-15871]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[15878-15893]:SwitchCase[15878-15893]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[15900-15920]:SwitchCase[15900-15920]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[15927-15945]:SwitchCase[15927-15945]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[15954-15988]:VariableDeclarationStatement[15954-15988]"
    }, {
      "left" : "if (info != null && info.isNoTypeCheck())",
      "right" : "if (info != null && info.isNoTypeCheck())",
      "info" : "IfStatement[15997-16179]:IfStatement[15997-16179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16039-16179]:Block[16039-16179]"
    }, {
      "left" : "if (enterSection)",
      "right" : "if (enterSection)",
      "info" : "IfStatement[16051-16169]:IfStatement[16051-16169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16069-16116]:Block[16069-16116]"
    }, {
      "left" : "noTypeCheckSection++;",
      "right" : "noTypeCheckSection++;",
      "info" : "ExpressionStatement[16083-16104]:ExpressionStatement[16083-16104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16122-16169]:Block[16122-16169]"
    }, {
      "left" : "noTypeCheckSection--;",
      "right" : "noTypeCheckSection--;",
      "info" : "ExpressionStatement[16136-16157]:ExpressionStatement[16136-16157]"
    }, {
      "left" : "validator.setShouldReport(noTypeCheckSection == 0);",
      "right" : "validator.setShouldReport(noTypeCheckSection == 0);",
      "info" : "ExpressionStatement[16188-16239]:ExpressionStatement[16188-16239]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16248-16254]:BreakStatement[16248-16254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16371-16463]:Block[16371-16463]"
    }, {
      "left" : "if (noTypeCheckSection == 0)",
      "right" : "if (noTypeCheckSection == 0)",
      "info" : "IfStatement[16377-16459]:IfStatement[16377-16459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16406-16459]:Block[16406-16459]"
    }, {
      "left" : "t.report(n, diagnosticType, arguments);",
      "right" : "t.report(n, diagnosticType, arguments);",
      "info" : "ExpressionStatement[16414-16453]:ExpressionStatement[16414-16453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16554-17608]:Block[16554-17608]"
    }, {
      "left" : "checkNoTypeCheckSection(n, true);",
      "right" : "checkNoTypeCheckSection(n, true);",
      "info" : "ExpressionStatement[16560-16593]:ExpressionStatement[16560-16593]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final Scope outerScope = t.getScope();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final Scope outerScope = t.getScope();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
      "info" : "SwitchStatement[16598-17587]:SwitchStatement[16598-17587]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[16627-16647]:SwitchCase[16627-16647]"
    }, {
      "left" : "final Scope outerScope = t.getScope();",
      "right" : "final Scope outerScope = t.getScope();",
      "info" : "VariableDeclarationStatement[16688-16726]:VariableDeclarationStatement[16688-16726]"
    }, {
      "left" : "final String functionPrivateName = n.getFirstChild().getString();",
      "right" : "final String functionPrivateName = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[16735-16800]:VariableDeclarationStatement[16735-16800]"
    }, {
      "left" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
      "right" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
      "info" : "IfStatement[16809-17358]:IfStatement[16809-17358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17277-17358]:Block[17277-17358]"
    }, {
      "left" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
      "right" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
      "info" : "ExpressionStatement[17289-17348]:ExpressionStatement[17289-17348]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17575-17581]:BreakStatement[17575-17581]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17592-17604]:ReturnStatement[17592-17604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18125-29249]:Block[18125-29249]"
    }, {
      "left" : "JSType childType;",
      "right" : "JSType childType;",
      "info" : "VariableDeclarationStatement[18131-18148]:VariableDeclarationStatement[18131-18148]"
    }, {
      "left" : "JSType leftType, rightType;",
      "right" : "JSType leftType, rightType;",
      "info" : "VariableDeclarationStatement[18153-18180]:VariableDeclarationStatement[18153-18180]"
    }, {
      "left" : "Node left, right;",
      "right" : "Node left, right;",
      "info" : "VariableDeclarationStatement[18185-18202]:VariableDeclarationStatement[18185-18202]"
    }, {
      "left" : "boolean typeable = true;",
      "right" : "boolean typeable = true;",
      "info" : "VariableDeclarationStatement[18273-18297]:VariableDeclarationStatement[18273-18297]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.CAST:\n        Node expr = n.getFirstChild();\n        JSType exprType = getJSType(expr);\n        JSType castType = getJSType(n);\n\n        // TODO(johnlenz): determine if we can limit object literals in some\n        // way.\n        if (!expr.isObjectLit()) {\n          validator.expectCanCast(t, n, castType, exprType);\n        }\n        ensureTyped(t, n, castType);\n\n        if (castType.isSubtype(exprType) || expr.isObjectLit()) {\n          expr.setJSType(castType);\n        }\n        break;\n\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.PARAM_LIST:\n        typeable = false;\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.STRING:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.STRING_KEY:\n        typeable = false;\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        // Object literal keys are handled with OBJECTLIT\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.isAssign() &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !parent.isExprResult();\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        checkPropCreation(t, left);\n        validator.expectNumber(t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE: {\n        left = n.getFirstChild();\n        right = n.getLastChild();\n\n        if (left.isTypeOf()) {\n          if (right.isString()) {\n            checkTypeofString(t, right, right.getString());\n          }\n        } else if (right.isTypeOf() && left.isString()) {\n          checkTypeofString(t, left, left.getString());\n        }\n\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n\n        // We do not want to warn about explicit comparisons to VOID. People\n        // often do this if they think their type annotations screwed up.\n        //\n        // We do want to warn about cases where people compare things like\n        // (Array|null) == (Function|null)\n        // because it probably means they screwed up.\n        //\n        // This heuristic here is not perfect, but should catch cases we\n        // care about without too many false negatives.\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n\n        TernaryValue result = TernaryValue.UNKNOWN;\n        if (n.getType() == Token.EQ || n.getType() == Token.NE) {\n          result = leftTypeRestricted.testForEquality(rightTypeRestricted);\n          if (n.isNE()) {\n            result = result.not();\n          }\n        } else {\n          // SHEQ or SHNE\n          if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                  rightTypeRestricted)) {\n            result = n.getType() == Token.SHEQ ?\n                TernaryValue.FALSE : TernaryValue.TRUE;\n          }\n        }\n\n        if (result != TernaryValue.UNKNOWN) {\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        rightType = getJSType(right);\n        validator.expectString(t, left, getJSType(left), \"left side of 'in'\");\n        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n        if (rightType.isStruct()) {\n          report(t, right, IN_USED_WITH_STRUCT);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n        validator.expectAnyObject(\n            t, left, getJSType(left), \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n        checkPropCreation(t, n.getFirstChild());\n        // fall through\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT_CASE:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      case Token.FOR:\n        if (NodeUtil.isForIn(n)) {\n          Node obj = n.getChildAtIndex(1);\n          if (getJSType(obj).isStruct()) {\n            report(t, obj, IN_USED_WITH_STRUCT);\n          }\n        }\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.isObjectLit())\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        if (n.isObjectLit()) {\n          JSType typ = getJSType(n);\n          for (Node key : n.children()) {\n            visitObjLitKey(t, key, n, typ);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.CAST:\n        Node expr = n.getFirstChild();\n        JSType exprType = getJSType(expr);\n        JSType castType = getJSType(n);\n\n        // TODO(johnlenz): determine if we can limit object literals in some\n        // way.\n        if (!expr.isObjectLit()) {\n          validator.expectCanCast(t, n, castType, exprType);\n        }\n        ensureTyped(t, n, castType);\n\n        if (castType.isSubtype(exprType) || expr.isObjectLit()) {\n          expr.setJSType(castType);\n        }\n        break;\n\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.PARAM_LIST:\n        typeable = false;\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.STRING:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.STRING_KEY:\n        typeable = false;\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        // Object literal keys are handled with OBJECTLIT\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.isAssign() &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !parent.isExprResult();\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        checkPropCreation(t, left);\n        validator.expectNumber(t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE: {\n        left = n.getFirstChild();\n        right = n.getLastChild();\n\n        if (left.isTypeOf()) {\n          if (right.isString()) {\n            checkTypeofString(t, right, right.getString());\n          }\n        } else if (right.isTypeOf() && left.isString()) {\n          checkTypeofString(t, left, left.getString());\n        }\n\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n\n        // We do not want to warn about explicit comparisons to VOID. People\n        // often do this if they think their type annotations screwed up.\n        //\n        // We do want to warn about cases where people compare things like\n        // (Array|null) == (Function|null)\n        // because it probably means they screwed up.\n        //\n        // This heuristic here is not perfect, but should catch cases we\n        // care about without too many false negatives.\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n\n        TernaryValue result = TernaryValue.UNKNOWN;\n        if (n.getType() == Token.EQ || n.getType() == Token.NE) {\n          result = leftTypeRestricted.testForEquality(rightTypeRestricted);\n          if (n.isNE()) {\n            result = result.not();\n          }\n        } else {\n          // SHEQ or SHNE\n          if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                  rightTypeRestricted)) {\n            result = n.getType() == Token.SHEQ ?\n                TernaryValue.FALSE : TernaryValue.TRUE;\n          }\n        }\n\n        if (result != TernaryValue.UNKNOWN) {\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        rightType = getJSType(right);\n        validator.expectString(t, left, getJSType(left), \"left side of 'in'\");\n        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n        if (rightType.isStruct()) {\n          report(t, right, IN_USED_WITH_STRUCT);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n        validator.expectAnyObject(\n            t, left, getJSType(left), \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n        checkPropCreation(t, n.getFirstChild());\n        // fall through\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT_CASE:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      case Token.FOR:\n        if (NodeUtil.isForIn(n)) {\n          Node obj = n.getChildAtIndex(1);\n          if (getJSType(obj).isStruct()) {\n            report(t, obj, IN_USED_WITH_STRUCT);\n          }\n        }\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.isObjectLit())\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        if (n.isObjectLit()) {\n          JSType typ = getJSType(n);\n          for (Node key : n.children()) {\n            visitObjLitKey(t, key, n, typ);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
      "info" : "SwitchStatement[18303-29023]:SwitchStatement[18303-29023]"
    }, {
      "left" : "case Token.CAST:",
      "right" : "case Token.CAST:",
      "info" : "SwitchCase[18332-18348]:SwitchCase[18332-18348]"
    }, {
      "left" : "Node expr = n.getFirstChild();",
      "right" : "Node expr = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[18357-18387]:VariableDeclarationStatement[18357-18387]"
    }, {
      "left" : "JSType exprType = getJSType(expr);",
      "right" : "JSType exprType = getJSType(expr);",
      "info" : "VariableDeclarationStatement[18396-18430]:VariableDeclarationStatement[18396-18430]"
    }, {
      "left" : "JSType castType = getJSType(n);",
      "right" : "JSType castType = getJSType(n);",
      "info" : "VariableDeclarationStatement[18439-18470]:VariableDeclarationStatement[18439-18470]"
    }, {
      "left" : "if (!expr.isObjectLit())",
      "right" : "if (!expr.isObjectLit())",
      "info" : "IfStatement[18573-18670]:IfStatement[18573-18670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18598-18670]:Block[18598-18670]"
    }, {
      "left" : "validator.expectCanCast(t, n, castType, exprType);",
      "right" : "validator.expectCanCast(t, n, castType, exprType);",
      "info" : "ExpressionStatement[18610-18660]:ExpressionStatement[18610-18660]"
    }, {
      "left" : "ensureTyped(t, n, castType);",
      "right" : "ensureTyped(t, n, castType);",
      "info" : "ExpressionStatement[18679-18707]:ExpressionStatement[18679-18707]"
    }, {
      "left" : "if (castType.isSubtype(exprType) || expr.isObjectLit())",
      "right" : "if (castType.isSubtype(exprType) || expr.isObjectLit())",
      "info" : "IfStatement[18717-18820]:IfStatement[18717-18820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18773-18820]:Block[18773-18820]"
    }, {
      "left" : "expr.setJSType(castType);",
      "right" : "expr.setJSType(castType);",
      "info" : "ExpressionStatement[18785-18810]:ExpressionStatement[18785-18810]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18829-18835]:BreakStatement[18829-18835]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[18843-18859]:SwitchCase[18843-18859]"
    }, {
      "left" : "typeable = visitName(t, n, parent);",
      "right" : "typeable = visitName(t, n, parent);",
      "info" : "ExpressionStatement[18868-18903]:ExpressionStatement[18868-18903]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18912-18918]:BreakStatement[18912-18918]"
    }, {
      "left" : "case Token.PARAM_LIST:",
      "right" : "case Token.PARAM_LIST:",
      "info" : "SwitchCase[18926-18948]:SwitchCase[18926-18948]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[18957-18974]:ExpressionStatement[18957-18974]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18983-18989]:BreakStatement[18983-18989]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[18997-19014]:SwitchCase[18997-19014]"
    }, {
      "left" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
      "right" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
      "info" : "ExpressionStatement[19023-19070]:ExpressionStatement[19023-19070]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19079-19085]:BreakStatement[19079-19085]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[19093-19109]:SwitchCase[19093-19109]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[19116-19133]:SwitchCase[19116-19133]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[19142-19174]:ExpressionStatement[19142-19174]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19183-19189]:BreakStatement[19183-19189]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[19197-19213]:SwitchCase[19197-19213]"
    }, {
      "left" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
      "right" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
      "info" : "ExpressionStatement[19222-19270]:ExpressionStatement[19222-19270]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19279-19285]:BreakStatement[19279-19285]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[19293-19309]:SwitchCase[19293-19309]"
    }, {
      "left" : "ensureTyped(t, n, NULL_TYPE);",
      "right" : "ensureTyped(t, n, NULL_TYPE);",
      "info" : "ExpressionStatement[19318-19347]:ExpressionStatement[19318-19347]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19356-19362]:BreakStatement[19356-19362]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[19370-19388]:SwitchCase[19370-19388]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[19397-19428]:ExpressionStatement[19397-19428]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19437-19443]:BreakStatement[19437-19443]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[19451-19469]:SwitchCase[19451-19469]"
    }, {
      "left" : "ensureTyped(t, n, STRING_TYPE);",
      "right" : "ensureTyped(t, n, STRING_TYPE);",
      "info" : "ExpressionStatement[19478-19509]:ExpressionStatement[19478-19509]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19518-19524]:BreakStatement[19518-19524]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[19532-19554]:SwitchCase[19532-19554]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[19563-19580]:ExpressionStatement[19563-19580]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19589-19595]:BreakStatement[19589-19595]"
    }, {
      "left" : "case Token.GETTER_DEF:",
      "right" : "case Token.GETTER_DEF:",
      "info" : "SwitchCase[19603-19625]:SwitchCase[19603-19625]"
    }, {
      "left" : "case Token.SETTER_DEF:",
      "right" : "case Token.SETTER_DEF:",
      "info" : "SwitchCase[19632-19654]:SwitchCase[19632-19654]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19721-19727]:BreakStatement[19721-19727]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[19735-19755]:SwitchCase[19735-19755]"
    }, {
      "left" : "ensureTyped(t, n, ARRAY_TYPE);",
      "right" : "ensureTyped(t, n, ARRAY_TYPE);",
      "info" : "ExpressionStatement[19764-19794]:ExpressionStatement[19764-19794]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19803-19809]:BreakStatement[19803-19809]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[19817-19835]:SwitchCase[19817-19835]"
    }, {
      "left" : "ensureTyped(t, n, REGEXP_TYPE);",
      "right" : "ensureTyped(t, n, REGEXP_TYPE);",
      "info" : "ExpressionStatement[19844-19875]:ExpressionStatement[19844-19875]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19884-19890]:BreakStatement[19884-19890]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[19898-19917]:SwitchCase[19898-19917]"
    }, {
      "left" : "visitGetProp(t, n, parent);",
      "right" : "visitGetProp(t, n, parent);",
      "info" : "ExpressionStatement[19926-19953]:ExpressionStatement[19926-19953]"
    }, {
      "left" : "typeable = !(parent.isAssign() &&\n                     parent.getFirstChild() == n);",
      "right" : "typeable = !(parent.isAssign() &&\n                     parent.getFirstChild() == n);",
      "info" : "ExpressionStatement[19962-20046]:ExpressionStatement[19962-20046]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20055-20061]:BreakStatement[20055-20061]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[20069-20088]:SwitchCase[20069-20088]"
    }, {
      "left" : "visitGetElem(t, n);",
      "right" : "visitGetElem(t, n);",
      "info" : "ExpressionStatement[20097-20116]:ExpressionStatement[20097-20116]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[20325-20342]:ExpressionStatement[20325-20342]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20351-20357]:BreakStatement[20351-20357]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[20365-20380]:SwitchCase[20365-20380]"
    }, {
      "left" : "visitVar(t, n);",
      "right" : "visitVar(t, n);",
      "info" : "ExpressionStatement[20389-20404]:ExpressionStatement[20389-20404]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[20413-20430]:ExpressionStatement[20413-20430]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20439-20445]:BreakStatement[20439-20445]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[20453-20468]:SwitchCase[20453-20468]"
    }, {
      "left" : "visitNew(t, n);",
      "right" : "visitNew(t, n);",
      "info" : "ExpressionStatement[20477-20492]:ExpressionStatement[20477-20492]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20501-20507]:BreakStatement[20501-20507]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[20515-20531]:SwitchCase[20515-20531]"
    }, {
      "left" : "visitCall(t, n);",
      "right" : "visitCall(t, n);",
      "info" : "ExpressionStatement[20540-20556]:ExpressionStatement[20540-20556]"
    }, {
      "left" : "typeable = !parent.isExprResult();",
      "right" : "typeable = !parent.isExprResult();",
      "info" : "ExpressionStatement[20565-20599]:ExpressionStatement[20565-20599]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20608-20614]:BreakStatement[20608-20614]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[20622-20640]:SwitchCase[20622-20640]"
    }, {
      "left" : "visitReturn(t, n);",
      "right" : "visitReturn(t, n);",
      "info" : "ExpressionStatement[20649-20667]:ExpressionStatement[20649-20667]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[20676-20693]:ExpressionStatement[20676-20693]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20702-20708]:BreakStatement[20702-20708]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[20716-20731]:SwitchCase[20716-20731]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[20738-20753]:SwitchCase[20738-20753]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[20762-20787]:ExpressionStatement[20762-20787]"
    }, {
      "left" : "checkPropCreation(t, left);",
      "right" : "checkPropCreation(t, left);",
      "info" : "ExpressionStatement[20796-20823]:ExpressionStatement[20796-20823]"
    }, {
      "left" : "validator.expectNumber(t, left, getJSType(left), \"increment/decrement\");",
      "right" : "validator.expectNumber(t, left, getJSType(left), \"increment/decrement\");",
      "info" : "ExpressionStatement[20832-20904]:ExpressionStatement[20832-20904]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[20913-20944]:ExpressionStatement[20913-20944]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20953-20959]:BreakStatement[20953-20959]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[20967-20982]:SwitchCase[20967-20982]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[20991-21023]:ExpressionStatement[20991-21023]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21032-21038]:BreakStatement[21032-21038]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[21046-21062]:SwitchCase[21046-21062]"
    }, {
      "left" : "ensureTyped(t, n, VOID_TYPE);",
      "right" : "ensureTyped(t, n, VOID_TYPE);",
      "info" : "ExpressionStatement[21071-21100]:ExpressionStatement[21071-21100]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21109-21115]:BreakStatement[21109-21115]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[21123-21141]:SwitchCase[21123-21141]"
    }, {
      "left" : "ensureTyped(t, n, STRING_TYPE);",
      "right" : "ensureTyped(t, n, STRING_TYPE);",
      "info" : "ExpressionStatement[21150-21181]:ExpressionStatement[21150-21181]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21190-21196]:BreakStatement[21190-21196]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[21204-21222]:SwitchCase[21204-21222]"
    }, {
      "left" : "childType = getJSType(n.getFirstChild());",
      "right" : "childType = getJSType(n.getFirstChild());",
      "info" : "ExpressionStatement[21231-21272]:ExpressionStatement[21231-21272]"
    }, {
      "left" : "if (!childType.matchesInt32Context())",
      "right" : "if (!childType.matchesInt32Context())",
      "info" : "IfStatement[21281-21436]:IfStatement[21281-21436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21319-21436]:Block[21319-21436]"
    }, {
      "left" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
      "right" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
      "info" : "ExpressionStatement[21331-21426]:ExpressionStatement[21331-21426]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[21445-21476]:ExpressionStatement[21445-21476]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21485-21491]:BreakStatement[21485-21491]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[21499-21514]:SwitchCase[21499-21514]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[21521-21536]:SwitchCase[21521-21536]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[21545-21570]:ExpressionStatement[21545-21570]"
    }, {
      "left" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
      "right" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
      "info" : "ExpressionStatement[21579-21645]:ExpressionStatement[21579-21645]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[21654-21685]:ExpressionStatement[21654-21685]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21694-21700]:BreakStatement[21694-21700]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[21708-21722]:SwitchCase[21708-21722]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[21729-21743]:SwitchCase[21729-21743]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[21750-21766]:SwitchCase[21750-21766]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[21773-21789]:SwitchCase[21773-21789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21790-23613]:Block[21790-23613]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[21800-21825]:ExpressionStatement[21800-21825]"
    }, {
      "left" : "right = n.getLastChild();",
      "right" : "right = n.getLastChild();",
      "info" : "ExpressionStatement[21834-21859]:ExpressionStatement[21834-21859]"
    }, {
      "left" : "if (left.isTypeOf())",
      "right" : "if (left.isTypeOf())",
      "info" : "IfStatement[21869-22121]:IfStatement[21869-22121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21890-22007]:Block[21890-22007]"
    }, {
      "left" : "if (right.isString())",
      "right" : "if (right.isString())",
      "info" : "IfStatement[21902-21997]:IfStatement[21902-21997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21924-21997]:Block[21924-21997]"
    }, {
      "left" : "checkTypeofString(t, right, right.getString());",
      "right" : "checkTypeofString(t, right, right.getString());",
      "info" : "ExpressionStatement[21938-21985]:ExpressionStatement[21938-21985]"
    }, {
      "left" : "if (right.isTypeOf() && left.isString())",
      "right" : "if (right.isTypeOf() && left.isString())",
      "info" : "IfStatement[22013-22121]:IfStatement[22013-22121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22054-22121]:Block[22054-22121]"
    }, {
      "left" : "checkTypeofString(t, left, left.getString());",
      "right" : "checkTypeofString(t, left, left.getString());",
      "info" : "ExpressionStatement[22066-22111]:ExpressionStatement[22066-22111]"
    }, {
      "left" : "leftType = getJSType(left);",
      "right" : "leftType = getJSType(left);",
      "info" : "ExpressionStatement[22131-22158]:ExpressionStatement[22131-22158]"
    }, {
      "left" : "rightType = getJSType(right);",
      "right" : "rightType = getJSType(right);",
      "info" : "ExpressionStatement[22167-22196]:ExpressionStatement[22167-22196]"
    }, {
      "left" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
      "right" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[22680-22748]:VariableDeclarationStatement[22680-22748]"
    }, {
      "left" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
      "right" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[22757-22827]:VariableDeclarationStatement[22757-22827]"
    }, {
      "left" : "TernaryValue result = TernaryValue.UNKNOWN;",
      "right" : "TernaryValue result = TernaryValue.UNKNOWN;",
      "info" : "VariableDeclarationStatement[22837-22880]:VariableDeclarationStatement[22837-22880]"
    }, {
      "left" : "if (n.getType() == Token.EQ || n.getType() == Token.NE)",
      "right" : "if (n.getType() == Token.EQ || n.getType() == Token.NE)",
      "info" : "IfStatement[22889-23372]:IfStatement[22889-23372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22945-23105]:Block[22945-23105]"
    }, {
      "left" : "result = leftTypeRestricted.testForEquality(rightTypeRestricted);",
      "right" : "result = leftTypeRestricted.testForEquality(rightTypeRestricted);",
      "info" : "ExpressionStatement[22957-23022]:ExpressionStatement[22957-23022]"
    }, {
      "left" : "if (n.isNE())",
      "right" : "if (n.isNE())",
      "info" : "IfStatement[23033-23095]:IfStatement[23033-23095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23047-23095]:Block[23047-23095]"
    }, {
      "left" : "result = result.not();",
      "right" : "result = result.not();",
      "info" : "ExpressionStatement[23061-23083]:ExpressionStatement[23061-23083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23111-23372]:Block[23111-23372]"
    }, {
      "left" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                  rightTypeRestricted))",
      "right" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                  rightTypeRestricted))",
      "info" : "IfStatement[23149-23362]:IfStatement[23149-23362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23244-23362]:Block[23244-23362]"
    }, {
      "left" : "result = n.getType() == Token.SHEQ ?\n                TernaryValue.FALSE : TernaryValue.TRUE;",
      "right" : "result = n.getType() == Token.SHEQ ?\n                TernaryValue.FALSE : TernaryValue.TRUE;",
      "info" : "ExpressionStatement[23258-23350]:ExpressionStatement[23258-23350]"
    }, {
      "left" : "if (result != TernaryValue.UNKNOWN)",
      "right" : "if (result != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[23382-23549]:IfStatement[23382-23549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23418-23549]:Block[23418-23549]"
    }, {
      "left" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
      "right" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
      "info" : "ExpressionStatement[23430-23539]:ExpressionStatement[23430-23539]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[23558-23590]:ExpressionStatement[23558-23590]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23599-23605]:BreakStatement[23599-23605]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[23621-23635]:SwitchCase[23621-23635]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[23642-23656]:SwitchCase[23642-23656]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[23663-23677]:SwitchCase[23663-23677]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[23684-23698]:SwitchCase[23684-23698]"
    }, {
      "left" : "leftType = getJSType(n.getFirstChild());",
      "right" : "leftType = getJSType(n.getFirstChild());",
      "info" : "ExpressionStatement[23707-23747]:ExpressionStatement[23707-23747]"
    }, {
      "left" : "rightType = getJSType(n.getLastChild());",
      "right" : "rightType = getJSType(n.getLastChild());",
      "info" : "ExpressionStatement[23756-23796]:ExpressionStatement[23756-23796]"
    }, {
      "left" : "if (rightType.isNumber())",
      "right" : "if (rightType.isNumber())",
      "info" : "IfStatement[23805-24878]:IfStatement[23805-24878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23831-23942]:Block[23831-23942]"
    }, {
      "left" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
      "right" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
      "info" : "ExpressionStatement[23843-23932]:ExpressionStatement[23843-23932]"
    }, {
      "left" : "if (leftType.isNumber())",
      "right" : "if (leftType.isNumber())",
      "info" : "IfStatement[23948-24878]:IfStatement[23948-24878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23973-24086]:Block[23973-24086]"
    }, {
      "left" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
      "right" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
      "info" : "ExpressionStatement[23985-24076]:ExpressionStatement[23985-24076]"
    }, {
      "left" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
      "right" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
      "info" : "IfStatement[24092-24878]:IfStatement[24092-24878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24184-24212]:Block[24184-24212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24218-24878]:Block[24218-24878]"
    }, {
      "left" : "String message = \"left side of comparison\";",
      "right" : "String message = \"left side of comparison\";",
      "info" : "VariableDeclarationStatement[24429-24472]:VariableDeclarationStatement[24429-24472]"
    }, {
      "left" : "validator.expectString(t, n, leftType, message);",
      "right" : "validator.expectString(t, n, leftType, message);",
      "info" : "ExpressionStatement[24483-24531]:ExpressionStatement[24483-24531]"
    }, {
      "left" : "validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
      "right" : "validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[24542-24645]:ExpressionStatement[24542-24645]"
    }, {
      "left" : "message = \"right side of comparison\";",
      "right" : "message = \"right side of comparison\";",
      "info" : "ExpressionStatement[24656-24693]:ExpressionStatement[24656-24693]"
    }, {
      "left" : "validator.expectString(t, n, rightType, message);",
      "right" : "validator.expectString(t, n, rightType, message);",
      "info" : "ExpressionStatement[24704-24753]:ExpressionStatement[24704-24753]"
    }, {
      "left" : "validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
      "right" : "validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[24764-24868]:ExpressionStatement[24764-24868]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[24887-24919]:ExpressionStatement[24887-24919]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24928-24934]:BreakStatement[24928-24934]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[24942-24956]:SwitchCase[24942-24956]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[24965-24990]:ExpressionStatement[24965-24990]"
    }, {
      "left" : "right = n.getLastChild();",
      "right" : "right = n.getLastChild();",
      "info" : "ExpressionStatement[24999-25024]:ExpressionStatement[24999-25024]"
    }, {
      "left" : "rightType = getJSType(right);",
      "right" : "rightType = getJSType(right);",
      "info" : "ExpressionStatement[25033-25062]:ExpressionStatement[25033-25062]"
    }, {
      "left" : "validator.expectString(t, left, getJSType(left), \"left side of 'in'\");",
      "right" : "validator.expectString(t, left, getJSType(left), \"left side of 'in'\");",
      "info" : "ExpressionStatement[25071-25141]:ExpressionStatement[25071-25141]"
    }, {
      "left" : "validator.expectObject(t, n, rightType, \"'in' requires an object\");",
      "right" : "validator.expectObject(t, n, rightType, \"'in' requires an object\");",
      "info" : "ExpressionStatement[25150-25217]:ExpressionStatement[25150-25217]"
    }, {
      "left" : "if (rightType.isStruct())",
      "right" : "if (rightType.isStruct())",
      "info" : "IfStatement[25226-25312]:IfStatement[25226-25312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25252-25312]:Block[25252-25312]"
    }, {
      "left" : "report(t, right, IN_USED_WITH_STRUCT);",
      "right" : "report(t, right, IN_USED_WITH_STRUCT);",
      "info" : "ExpressionStatement[25264-25302]:ExpressionStatement[25264-25302]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[25321-25353]:ExpressionStatement[25321-25353]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25362-25368]:BreakStatement[25362-25368]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[25376-25398]:SwitchCase[25376-25398]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[25407-25432]:ExpressionStatement[25407-25432]"
    }, {
      "left" : "right = n.getLastChild();",
      "right" : "right = n.getLastChild();",
      "info" : "ExpressionStatement[25441-25466]:ExpressionStatement[25441-25466]"
    }, {
      "left" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
      "right" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[25475-25535]:ExpressionStatement[25475-25535]"
    }, {
      "left" : "validator.expectAnyObject(\n            t, left, getJSType(left), \"deterministic instanceof yields false\");",
      "right" : "validator.expectAnyObject(\n            t, left, getJSType(left), \"deterministic instanceof yields false\");",
      "info" : "ExpressionStatement[25544-25650]:ExpressionStatement[25544-25650]"
    }, {
      "left" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
      "right" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
      "info" : "ExpressionStatement[25659-25755]:ExpressionStatement[25659-25755]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[25764-25796]:ExpressionStatement[25764-25796]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25805-25811]:BreakStatement[25805-25811]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[25819-25837]:SwitchCase[25819-25837]"
    }, {
      "left" : "visitAssign(t, n);",
      "right" : "visitAssign(t, n);",
      "info" : "ExpressionStatement[25846-25864]:ExpressionStatement[25846-25864]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[25873-25890]:ExpressionStatement[25873-25890]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25899-25905]:BreakStatement[25899-25905]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[25913-25935]:SwitchCase[25913-25935]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[25942-25964]:SwitchCase[25942-25964]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[25971-25994]:SwitchCase[25971-25994]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[26001-26023]:SwitchCase[26001-26023]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[26030-26052]:SwitchCase[26030-26052]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[26059-26083]:SwitchCase[26059-26083]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[26090-26115]:SwitchCase[26090-26115]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[26122-26147]:SwitchCase[26122-26147]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[26154-26176]:SwitchCase[26154-26176]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[26183-26205]:SwitchCase[26183-26205]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[26212-26234]:SwitchCase[26212-26234]"
    }, {
      "left" : "checkPropCreation(t, n.getFirstChild());",
      "right" : "checkPropCreation(t, n.getFirstChild());",
      "info" : "ExpressionStatement[26243-26283]:ExpressionStatement[26243-26283]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[26315-26330]:SwitchCase[26315-26330]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[26337-26352]:SwitchCase[26337-26352]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[26359-26375]:SwitchCase[26359-26375]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[26382-26397]:SwitchCase[26382-26397]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[26404-26419]:SwitchCase[26404-26419]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[26426-26443]:SwitchCase[26426-26443]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[26450-26468]:SwitchCase[26450-26468]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[26475-26493]:SwitchCase[26475-26493]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[26500-26515]:SwitchCase[26500-26515]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[26522-26537]:SwitchCase[26522-26537]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[26544-26559]:SwitchCase[26544-26559]"
    }, {
      "left" : "visitBinaryOperator(n.getType(), t, n);",
      "right" : "visitBinaryOperator(n.getType(), t, n);",
      "info" : "ExpressionStatement[26568-26607]:ExpressionStatement[26568-26607]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26616-26622]:BreakStatement[26616-26622]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[26630-26649]:SwitchCase[26630-26649]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[26658-26690]:ExpressionStatement[26658-26690]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26699-26705]:BreakStatement[26699-26705]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[26713-26729]:SwitchCase[26713-26729]"
    }, {
      "left" : "JSType switchType = getJSType(parent.getFirstChild());",
      "right" : "JSType switchType = getJSType(parent.getFirstChild());",
      "info" : "VariableDeclarationStatement[26738-26792]:VariableDeclarationStatement[26738-26792]"
    }, {
      "left" : "JSType caseType = getJSType(n.getFirstChild());",
      "right" : "JSType caseType = getJSType(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[26801-26848]:VariableDeclarationStatement[26801-26848]"
    }, {
      "left" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
      "right" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
      "info" : "ExpressionStatement[26857-26919]:ExpressionStatement[26857-26919]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[26928-26945]:ExpressionStatement[26928-26945]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26954-26960]:BreakStatement[26954-26960]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[26968-26984]:SwitchCase[26968-26984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26985-27193]:Block[26985-27193]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[26995-27026]:VariableDeclarationStatement[26995-27026]"
    }, {
      "left" : "childType = getJSType(child);",
      "right" : "childType = getJSType(child);",
      "info" : "ExpressionStatement[27035-27064]:ExpressionStatement[27035-27064]"
    }, {
      "left" : "validator.expectObject(t, child, childType, \"with requires an object\");",
      "right" : "validator.expectObject(t, child, childType, \"with requires an object\");",
      "info" : "ExpressionStatement[27073-27144]:ExpressionStatement[27073-27144]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[27153-27170]:ExpressionStatement[27153-27170]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27179-27185]:BreakStatement[27179-27185]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[27201-27221]:SwitchCase[27201-27221]"
    }, {
      "left" : "visitFunction(t, n);",
      "right" : "visitFunction(t, n);",
      "info" : "ExpressionStatement[27230-27250]:ExpressionStatement[27230-27250]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27259-27265]:BreakStatement[27259-27265]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[27329-27346]:SwitchCase[27329-27346]"
    }, {
      "left" : "case Token.LABEL_NAME:",
      "right" : "case Token.LABEL_NAME:",
      "info" : "SwitchCase[27353-27375]:SwitchCase[27353-27375]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[27382-27400]:SwitchCase[27382-27400]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[27407-27424]:SwitchCase[27407-27424]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[27431-27448]:SwitchCase[27431-27448]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[27455-27470]:SwitchCase[27455-27470]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[27477-27495]:SwitchCase[27477-27495]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[27502-27525]:SwitchCase[27502-27525]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[27532-27549]:SwitchCase[27532-27549]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[27556-27573]:SwitchCase[27556-27573]"
    }, {
      "left" : "case Token.DEFAULT_CASE:",
      "right" : "case Token.DEFAULT_CASE:",
      "info" : "SwitchCase[27580-27604]:SwitchCase[27580-27604]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[27611-27631]:SwitchCase[27611-27631]"
    }, {
      "left" : "case Token.DEBUGGER:",
      "right" : "case Token.DEBUGGER:",
      "info" : "SwitchCase[27638-27658]:SwitchCase[27638-27658]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[27665-27682]:SwitchCase[27665-27682]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[27691-27708]:ExpressionStatement[27691-27708]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27717-27723]:BreakStatement[27717-27723]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[27780-27794]:SwitchCase[27780-27794]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[27801-27815]:SwitchCase[27801-27815]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[27822-27839]:SwitchCase[27822-27839]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[27848-27865]:ExpressionStatement[27848-27865]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27874-27880]:BreakStatement[27874-27880]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[27888-27903]:SwitchCase[27888-27903]"
    }, {
      "left" : "if (NodeUtil.isForIn(n))",
      "right" : "if (NodeUtil.isForIn(n))",
      "info" : "IfStatement[27912-28095]:IfStatement[27912-28095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27937-28095]:Block[27937-28095]"
    }, {
      "left" : "Node obj = n.getChildAtIndex(1);",
      "right" : "Node obj = n.getChildAtIndex(1);",
      "info" : "VariableDeclarationStatement[27949-27981]:VariableDeclarationStatement[27949-27981]"
    }, {
      "left" : "if (getJSType(obj).isStruct())",
      "right" : "if (getJSType(obj).isStruct())",
      "info" : "IfStatement[27992-28085]:IfStatement[27992-28085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28023-28085]:Block[28023-28085]"
    }, {
      "left" : "report(t, obj, IN_USED_WITH_STRUCT);",
      "right" : "report(t, obj, IN_USED_WITH_STRUCT);",
      "info" : "ExpressionStatement[28037-28073]:ExpressionStatement[28037-28073]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[28104-28121]:ExpressionStatement[28104-28121]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28130-28136]:BreakStatement[28130-28136]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[28202-28217]:SwitchCase[28202-28217]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[28224-28240]:SwitchCase[28224-28240]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[28247-28268]:SwitchCase[28247-28268]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[28275-28289]:SwitchCase[28275-28289]"
    }, {
      "left" : "if (n.getJSType() != null)",
      "right" : "if (n.getJSType() != null)",
      "info" : "IfStatement[28298-28703]:IfStatement[28298-28703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28325-28401]:Block[28325-28401]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[28373-28391]:ExpressionStatement[28373-28391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28407-28703]:Block[28407-28703]"
    }, {
      "left" : "if ((n.isObjectLit())\n              && (parent.getJSType() instanceof EnumType))",
      "right" : "if ((n.isObjectLit())\n              && (parent.getJSType() instanceof EnumType))",
      "info" : "IfStatement[28498-28693]:IfStatement[28498-28693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28579-28643]:Block[28579-28643]"
    }, {
      "left" : "ensureTyped(t, n, parent.getJSType());",
      "right" : "ensureTyped(t, n, parent.getJSType());",
      "info" : "ExpressionStatement[28593-28631]:ExpressionStatement[28593-28631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28649-28693]:Block[28649-28693]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[28663-28681]:ExpressionStatement[28663-28681]"
    }, {
      "left" : "if (n.isObjectLit())",
      "right" : "if (n.isObjectLit())",
      "info" : "IfStatement[28712-28879]:IfStatement[28712-28879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28733-28879]:Block[28733-28879]"
    }, {
      "left" : "JSType typ = getJSType(n);",
      "right" : "JSType typ = getJSType(n);",
      "info" : "VariableDeclarationStatement[28745-28771]:VariableDeclarationStatement[28745-28771]"
    }, {
      "left" : "for (Node key : n.children())",
      "right" : "for (Node key : n.children())",
      "info" : "EnhancedForStatement[28782-28869]:EnhancedForStatement[28782-28869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28812-28869]:Block[28812-28869]"
    }, {
      "left" : "visitObjLitKey(t, key, n, typ);",
      "right" : "visitObjLitKey(t, key, n, typ);",
      "info" : "ExpressionStatement[28826-28857]:ExpressionStatement[28826-28857]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28888-28894]:BreakStatement[28888-28894]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[28902-28910]:SwitchCase[28902-28910]"
    }, {
      "left" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
      "right" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
      "info" : "ExpressionStatement[28919-28975]:ExpressionStatement[28919-28975]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[28984-29002]:ExpressionStatement[28984-29002]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29011-29017]:BreakStatement[29011-29017]"
    }, {
      "left" : "typeable = typeable && !inExterns;",
      "right" : "typeable = typeable && !inExterns;",
      "info" : "ExpressionStatement[29106-29140]:ExpressionStatement[29106-29140]"
    }, {
      "left" : "if (typeable)",
      "right" : "if (typeable)",
      "info" : "IfStatement[29146-29205]:IfStatement[29146-29205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29160-29205]:Block[29160-29205]"
    }, {
      "left" : "doPercentTypedAccounting(t, n);",
      "right" : "doPercentTypedAccounting(t, n);",
      "info" : "ExpressionStatement[29168-29199]:ExpressionStatement[29168-29199]"
    }, {
      "left" : "checkNoTypeCheckSection(n, false);",
      "right" : "checkNoTypeCheckSection(n, false);",
      "info" : "ExpressionStatement[29211-29245]:ExpressionStatement[29211-29245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29319-29570]:Block[29319-29570]"
    }, {
      "left" : "if (!(s.equals(\"number\") || s.equals(\"string\") || s.equals(\"boolean\") ||\n          s.equals(\"undefined\") || s.equals(\"function\") ||\n          s.equals(\"object\") || s.equals(\"unknown\")))",
      "right" : "if (!(s.equals(\"number\") || s.equals(\"string\") || s.equals(\"boolean\") ||\n          s.equals(\"undefined\") || s.equals(\"function\") ||\n          s.equals(\"object\") || s.equals(\"unknown\")))",
      "info" : "IfStatement[29325-29566]:IfStatement[29325-29566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29511-29566]:Block[29511-29566]"
    }, {
      "left" : "validator.expectValidTypeofName(t, n, s);",
      "right" : "validator.expectValidTypeofName(t, n, s);",
      "info" : "ExpressionStatement[29519-29560]:ExpressionStatement[29519-29560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29743-30024]:Block[29743-30024]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[29749-29777]:VariableDeclarationStatement[29749-29777]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[29782-30020]:IfStatement[29782-30020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29800-29826]:Block[29800-29826]"
    }, {
      "left" : "nullCount++;",
      "right" : "nullCount++;",
      "info" : "ExpressionStatement[29808-29820]:ExpressionStatement[29808-29820]"
    }, {
      "left" : "if (type.isUnknownType())",
      "right" : "if (type.isUnknownType())",
      "info" : "IfStatement[29832-30020]:IfStatement[29832-30020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29858-29987]:Block[29858-29987]"
    }, {
      "left" : "if (reportUnknownTypes)",
      "right" : "if (reportUnknownTypes)",
      "info" : "IfStatement[29866-29959]:IfStatement[29866-29959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29890-29959]:Block[29890-29959]"
    }, {
      "left" : "compiler.report(t.makeError(n, UNKNOWN_EXPR_TYPE));",
      "right" : "compiler.report(t.makeError(n, UNKNOWN_EXPR_TYPE));",
      "info" : "ExpressionStatement[29900-29951]:ExpressionStatement[29900-29951]"
    }, {
      "left" : "unknownCount++;",
      "right" : "unknownCount++;",
      "info" : "ExpressionStatement[29966-29981]:ExpressionStatement[29966-29981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29993-30020]:Block[29993-30020]"
    }, {
      "left" : "typedCount++;",
      "right" : "typedCount++;",
      "info" : "ExpressionStatement[30001-30014]:ExpressionStatement[30001-30014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30403-34633]:Block[30403-34633]"
    }, {
      "left" : "JSDocInfo info = assign.getJSDocInfo();",
      "right" : "JSDocInfo info = assign.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[30409-30448]:VariableDeclarationStatement[30409-30448]"
    }, {
      "left" : "Node lvalue = assign.getFirstChild();",
      "right" : "Node lvalue = assign.getFirstChild();",
      "info" : "VariableDeclarationStatement[30453-30490]:VariableDeclarationStatement[30453-30490]"
    }, {
      "left" : "Node rvalue = assign.getLastChild();",
      "right" : "Node rvalue = assign.getLastChild();",
      "info" : "VariableDeclarationStatement[30495-30531]:VariableDeclarationStatement[30495-30531]"
    }, {
      "left" : "if (lvalue.isGetProp())",
      "right" : "if (lvalue.isGetProp())",
      "info" : "IfStatement[30609-33467]:IfStatement[30609-33467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30633-33467]:Block[30633-33467]"
    }, {
      "left" : "Node object = lvalue.getFirstChild();",
      "right" : "Node object = lvalue.getFirstChild();",
      "info" : "VariableDeclarationStatement[30641-30678]:VariableDeclarationStatement[30641-30678]"
    }, {
      "left" : "JSType objectJsType = getJSType(object);",
      "right" : "JSType objectJsType = getJSType(object);",
      "info" : "VariableDeclarationStatement[30685-30725]:VariableDeclarationStatement[30685-30725]"
    }, {
      "left" : "Node property = lvalue.getLastChild();",
      "right" : "Node property = lvalue.getLastChild();",
      "info" : "VariableDeclarationStatement[30732-30770]:VariableDeclarationStatement[30732-30770]"
    }, {
      "left" : "String pname = property.getString();",
      "right" : "String pname = property.getString();",
      "info" : "VariableDeclarationStatement[30777-30813]:VariableDeclarationStatement[30777-30813]"
    }, {
      "left" : "if (object.isGetProp())",
      "right" : "if (object.isGetProp())",
      "info" : "IfStatement[30941-31223]:IfStatement[30941-31223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30965-31223]:Block[30965-31223]"
    }, {
      "left" : "JSType jsType = getJSType(object.getFirstChild());",
      "right" : "JSType jsType = getJSType(object.getFirstChild());",
      "info" : "VariableDeclarationStatement[30975-31025]:VariableDeclarationStatement[30975-31025]"
    }, {
      "left" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[31034-31215]:IfStatement[31034-31215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31129-31215]:Block[31129-31215]"
    }, {
      "left" : "visitInterfaceGetprop(t, assign, object, pname, lvalue, rvalue);",
      "right" : "visitInterfaceGetprop(t, assign, object, pname, lvalue, rvalue);",
      "info" : "ExpressionStatement[31141-31205]:ExpressionStatement[31141-31205]"
    }, {
      "left" : "checkEnumAlias(t, info, rvalue);",
      "right" : "checkEnumAlias(t, info, rvalue);",
      "info" : "ExpressionStatement[31231-31263]:ExpressionStatement[31231-31263]"
    }, {
      "left" : "checkPropCreation(t, lvalue);",
      "right" : "checkPropCreation(t, lvalue);",
      "info" : "ExpressionStatement[31270-31299]:ExpressionStatement[31270-31299]"
    }, {
      "left" : "if (pname.equals(\"prototype\"))",
      "right" : "if (pname.equals(\"prototype\"))",
      "info" : "IfStatement[31555-32364]:IfStatement[31555-32364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31586-32364]:Block[31586-32364]"
    }, {
      "left" : "if (objectJsType != null && objectJsType.isFunctionType())",
      "right" : "if (objectJsType != null && objectJsType.isFunctionType())",
      "info" : "IfStatement[31596-32356]:IfStatement[31596-32356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31655-32356]:Block[31655-32356]"
    }, {
      "left" : "FunctionType functionType = objectJsType.toMaybeFunctionType();",
      "right" : "FunctionType functionType = objectJsType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[31667-31730]:VariableDeclarationStatement[31667-31730]"
    }, {
      "left" : "if (functionType.isConstructor())",
      "right" : "if (functionType.isConstructor())",
      "info" : "IfStatement[31741-32346]:IfStatement[31741-32346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31775-32346]:Block[31775-32346]"
    }, {
      "left" : "JSType rvalueType = rvalue.getJSType();",
      "right" : "JSType rvalueType = rvalue.getJSType();",
      "info" : "VariableDeclarationStatement[31789-31828]:VariableDeclarationStatement[31789-31828]"
    }, {
      "left" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
      "right" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
      "info" : "ExpressionStatement[31841-31941]:ExpressionStatement[31841-31941]"
    }, {
      "left" : "if (functionType.makesStructs() && !rvalueType.isStruct())",
      "right" : "if (functionType.makesStructs() && !rvalueType.isStruct())",
      "info" : "IfStatement[32031-32314]:IfStatement[32031-32314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32090-32314]:Block[32090-32314]"
    }, {
      "left" : "String funName = functionType.getTypeOfThis().toString();",
      "right" : "String funName = functionType.getTypeOfThis().toString();",
      "info" : "VariableDeclarationStatement[32106-32163]:VariableDeclarationStatement[32106-32163]"
    }, {
      "left" : "compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                          \"struct\", funName));",
      "right" : "compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,\n                                          \"struct\", funName));",
      "info" : "ExpressionStatement[32178-32300]:ExpressionStatement[32178-32300]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32327-32334]:ReturnStatement[32327-32334]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
      "right" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
      "info" : "VariableDeclarationStatement[32521-32611]:VariableDeclarationStatement[32521-32611]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[32618-33196]:IfStatement[32618-33196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32636-33196]:Block[32636-33196]"
    }, {
      "left" : "if (type.hasProperty(pname) &&\n            !type.isPropertyTypeInferred(pname) &&\n            !propertyIsImplicitCast(type, pname))",
      "right" : "if (type.hasProperty(pname) &&\n            !type.isPropertyTypeInferred(pname) &&\n            !propertyIsImplicitCast(type, pname))",
      "info" : "IfStatement[32646-33188]:IfStatement[32646-33188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32778-33188]:Block[32778-33188]"
    }, {
      "left" : "JSType expectedType = type.getPropertyType(pname);",
      "right" : "JSType expectedType = type.getPropertyType(pname);",
      "info" : "VariableDeclarationStatement[32790-32840]:VariableDeclarationStatement[32790-32840]"
    }, {
      "left" : "if (!expectedType.isUnknownType())",
      "right" : "if (!expectedType.isUnknownType())",
      "info" : "IfStatement[32851-33178]:IfStatement[32851-33178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32886-33178]:Block[32886-33178]"
    }, {
      "left" : "validator.expectCanAssignToPropertyOf(\n                t, assign, getJSType(rvalue),\n                expectedType, object, pname);",
      "right" : "validator.expectCanAssignToPropertyOf(\n                t, assign, getJSType(rvalue),\n                expectedType, object, pname);",
      "info" : "ExpressionStatement[32900-33030]:ExpressionStatement[32900-33030]"
    }, {
      "left" : "checkPropertyInheritanceOnGetpropAssign(\n                t, assign, object, pname, info, expectedType);",
      "right" : "checkPropertyInheritanceOnGetpropAssign(\n                t, assign, object, pname, info, expectedType);",
      "info" : "ExpressionStatement[33043-33146]:ExpressionStatement[33043-33146]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33159-33166]:ReturnStatement[33159-33166]"
    }, {
      "left" : "checkPropertyInheritanceOnGetpropAssign(\n          t, assign, object, pname, info, getNativeType(UNKNOWN_TYPE));",
      "right" : "checkPropertyInheritanceOnGetpropAssign(\n          t, assign, object, pname, info, getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[33349-33461]:ExpressionStatement[33349-33461]"
    }, {
      "left" : "JSType leftType = getJSType(lvalue);",
      "right" : "JSType leftType = getJSType(lvalue);",
      "info" : "VariableDeclarationStatement[33716-33752]:VariableDeclarationStatement[33716-33752]"
    }, {
      "left" : "if (lvalue.isQualifiedName())",
      "right" : "if (lvalue.isQualifiedName())",
      "info" : "IfStatement[33757-34287]:IfStatement[33757-34287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33787-34287]:Block[33787-34287]"
    }, {
      "left" : "Var var = t.getScope().getVar(lvalue.getQualifiedName());",
      "right" : "Var var = t.getScope().getVar(lvalue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[33837-33894]:VariableDeclarationStatement[33837-33894]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[33901-34281]:IfStatement[33901-34281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33918-34281]:Block[33918-34281]"
    }, {
      "left" : "if (var.isTypeInferred())",
      "right" : "if (var.isTypeInferred())",
      "info" : "IfStatement[33928-33983]:IfStatement[33928-33983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33954-33983]:Block[33954-33983]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33966-33973]:ReturnStatement[33966-33973]"
    }, {
      "left" : "if (NodeUtil.getRootOfQualifiedName(lvalue).isThis() &&\n            t.getScope() != var.getScope())",
      "right" : "if (NodeUtil.getRootOfQualifiedName(lvalue).isThis() &&\n            t.getScope() != var.getScope())",
      "info" : "IfStatement[33993-34189]:IfStatement[33993-34189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34093-34189]:Block[34093-34189]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34172-34179]:ReturnStatement[34172-34179]"
    }, {
      "left" : "if (var.getType() != null)",
      "right" : "if (var.getType() != null)",
      "info" : "IfStatement[34199-34273]:IfStatement[34199-34273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34226-34273]:Block[34226-34273]"
    }, {
      "left" : "leftType = var.getType();",
      "right" : "leftType = var.getType();",
      "info" : "ExpressionStatement[34238-34263]:ExpressionStatement[34238-34263]"
    }, {
      "left" : "Node rightChild = assign.getLastChild();",
      "right" : "Node rightChild = assign.getLastChild();",
      "info" : "VariableDeclarationStatement[34355-34395]:VariableDeclarationStatement[34355-34395]"
    }, {
      "left" : "JSType rightType = getJSType(rightChild);",
      "right" : "JSType rightType = getJSType(rightChild);",
      "info" : "VariableDeclarationStatement[34400-34441]:VariableDeclarationStatement[34400-34441]"
    }, {
      "left" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
      "right" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
      "info" : "IfStatement[34446-34629]:IfStatement[34446-34629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34538-34586]:Block[34538-34586]"
    }, {
      "left" : "ensureTyped(t, assign, rightType);",
      "right" : "ensureTyped(t, assign, rightType);",
      "info" : "ExpressionStatement[34546-34580]:ExpressionStatement[34546-34580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34592-34629]:Block[34592-34629]"
    }, {
      "left" : "ensureTyped(t, assign);",
      "right" : "ensureTyped(t, assign);",
      "info" : "ExpressionStatement[34600-34623]:ExpressionStatement[34600-34623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35024-36227]:Block[35024-36227]"
    }, {
      "left" : "if (lvalue.isGetProp())",
      "right" : "if (lvalue.isGetProp())",
      "info" : "IfStatement[35030-36223]:IfStatement[35030-36223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35054-36223]:Block[35054-36223]"
    }, {
      "left" : "Node obj = lvalue.getFirstChild();",
      "right" : "Node obj = lvalue.getFirstChild();",
      "info" : "VariableDeclarationStatement[35062-35096]:VariableDeclarationStatement[35062-35096]"
    }, {
      "left" : "Node prop = lvalue.getLastChild();",
      "right" : "Node prop = lvalue.getLastChild();",
      "info" : "VariableDeclarationStatement[35103-35137]:VariableDeclarationStatement[35103-35137]"
    }, {
      "left" : "JSType objType = getJSType(obj);",
      "right" : "JSType objType = getJSType(obj);",
      "info" : "VariableDeclarationStatement[35144-35176]:VariableDeclarationStatement[35144-35176]"
    }, {
      "left" : "String pname = prop.getString();",
      "right" : "String pname = prop.getString();",
      "info" : "VariableDeclarationStatement[35183-35215]:VariableDeclarationStatement[35183-35215]"
    }, {
      "left" : "if (!objType.isStruct() || objType.hasProperty(pname))",
      "right" : "if (!objType.isStruct() || objType.hasProperty(pname))",
      "info" : "IfStatement[35223-35303]:IfStatement[35223-35303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35278-35303]:Block[35278-35303]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[35288-35295]:ReturnStatement[35288-35295]"
    }, {
      "left" : "Scope s = t.getScope();",
      "right" : "Scope s = t.getScope();",
      "info" : "VariableDeclarationStatement[35310-35333]:VariableDeclarationStatement[35310-35333]"
    }, {
      "left" : "if (obj.isThis() && getJSType(s.getRootNode()).isConstructor())",
      "right" : "if (obj.isThis() && getJSType(s.getRootNode()).isConstructor())",
      "info" : "IfStatement[35340-35429]:IfStatement[35340-35429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35404-35429]:Block[35404-35429]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[35414-35421]:ReturnStatement[35414-35421]"
    }, {
      "left" : "Node assgnExp = lvalue.getParent();",
      "right" : "Node assgnExp = lvalue.getParent();",
      "info" : "VariableDeclarationStatement[35502-35537]:VariableDeclarationStatement[35502-35537]"
    }, {
      "left" : "Node assgnStm = assgnExp.getParent();",
      "right" : "Node assgnStm = assgnExp.getParent();",
      "info" : "VariableDeclarationStatement[35544-35581]:VariableDeclarationStatement[35544-35581]"
    }, {
      "left" : "if (objType instanceof ObjectType &&\n          s.isGlobal() &&\n          NodeUtil.isPrototypePropertyDeclaration(assgnStm))",
      "right" : "if (objType instanceof ObjectType &&\n          s.isGlobal() &&\n          NodeUtil.isPrototypePropertyDeclaration(assgnStm))",
      "info" : "IfStatement[35588-36167]:IfStatement[35588-36167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35712-36167]:Block[35712-36167]"
    }, {
      "left" : "ObjectType instance =\n            objType.toObjectType().getOwnerFunction().getInstanceType();",
      "right" : "ObjectType instance =\n            objType.toObjectType().getOwnerFunction().getInstanceType();",
      "info" : "VariableDeclarationStatement[35722-35816]:VariableDeclarationStatement[35722-35816]"
    }, {
      "left" : "String file = lvalue.getSourceFileName();",
      "right" : "String file = lvalue.getSourceFileName();",
      "info" : "VariableDeclarationStatement[35825-35866]:VariableDeclarationStatement[35825-35866]"
    }, {
      "left" : "Node ctor = instance.getConstructor().getSource();",
      "right" : "Node ctor = instance.getConstructor().getSource();",
      "info" : "VariableDeclarationStatement[35875-35925]:VariableDeclarationStatement[35875-35925]"
    }, {
      "left" : "if (ctor != null && ctor.getSourceFileName().equals(file))",
      "right" : "if (ctor != null && ctor.getSourceFileName().equals(file))",
      "info" : "IfStatement[35934-36159]:IfStatement[35934-36159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35993-36159]:Block[35993-36159]"
    }, {
      "left" : "JSType rvalueType = assgnExp.getLastChild().getJSType();",
      "right" : "JSType rvalueType = assgnExp.getLastChild().getJSType();",
      "info" : "VariableDeclarationStatement[36005-36061]:VariableDeclarationStatement[36005-36061]"
    }, {
      "left" : "instance.defineInferredProperty(pname, rvalueType, lvalue);",
      "right" : "instance.defineInferredProperty(pname, rvalueType, lvalue);",
      "info" : "ExpressionStatement[36072-36131]:ExpressionStatement[36072-36131]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36142-36149]:ReturnStatement[36142-36149]"
    }, {
      "left" : "report(t, prop, ILLEGAL_PROPERTY_CREATION);",
      "right" : "report(t, prop, ILLEGAL_PROPERTY_CREATION);",
      "info" : "ExpressionStatement[36174-36217]:ExpressionStatement[36174-36217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36394-37473]:Block[36394-37473]"
    }, {
      "left" : "if (object.isGetProp())",
      "right" : "if (object.isGetProp())",
      "info" : "IfStatement[36901-37469]:IfStatement[36901-37469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36925-37469]:Block[36925-37469]"
    }, {
      "left" : "Node object2 = object.getFirstChild();",
      "right" : "Node object2 = object.getFirstChild();",
      "info" : "VariableDeclarationStatement[36933-36971]:VariableDeclarationStatement[36933-36971]"
    }, {
      "left" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
      "right" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
      "info" : "VariableDeclarationStatement[36978-37044]:VariableDeclarationStatement[36978-37044]"
    }, {
      "left" : "if (\"prototype\".equals(property2))",
      "right" : "if (\"prototype\".equals(property2))",
      "info" : "IfStatement[37052-37463]:IfStatement[37052-37463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37087-37463]:Block[37087-37463]"
    }, {
      "left" : "JSType jsType = getJSType(object2);",
      "right" : "JSType jsType = getJSType(object2);",
      "info" : "VariableDeclarationStatement[37097-37132]:VariableDeclarationStatement[37097-37132]"
    }, {
      "left" : "if (jsType.isFunctionType())",
      "right" : "if (jsType.isFunctionType())",
      "info" : "IfStatement[37141-37455]:IfStatement[37141-37455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37170-37455]:Block[37170-37455]"
    }, {
      "left" : "FunctionType functionType = jsType.toMaybeFunctionType();",
      "right" : "FunctionType functionType = jsType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[37182-37239]:VariableDeclarationStatement[37182-37239]"
    }, {
      "left" : "if (functionType.isConstructor() || functionType.isInterface())",
      "right" : "if (functionType.isConstructor() || functionType.isInterface())",
      "info" : "IfStatement[37250-37445]:IfStatement[37250-37445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37314-37445]:Block[37314-37445]"
    }, {
      "left" : "checkDeclaredPropertyInheritance(\n                t, assign, functionType, property, info, propertyType);",
      "right" : "checkDeclaredPropertyInheritance(\n                t, assign, functionType, property, info, propertyType);",
      "info" : "ExpressionStatement[37328-37433]:ExpressionStatement[37328-37433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37849-40183]:Block[37849-40183]"
    }, {
      "left" : "if (objlit.isFromExterns())",
      "right" : "if (objlit.isFromExterns())",
      "info" : "IfStatement[37986-38062]:IfStatement[37986-38062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38014-38062]:Block[38014-38062]"
    }, {
      "left" : "ensureTyped(t, key);",
      "right" : "ensureTyped(t, key);",
      "info" : "ExpressionStatement[38022-38042]:ExpressionStatement[38022-38042]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[38049-38056]:ReturnStatement[38049-38056]"
    }, {
      "left" : "if (litType.isStruct() && key.isQuotedString())",
      "right" : "if (litType.isStruct() && key.isQuotedString())",
      "info" : "IfStatement[38139-38356]:IfStatement[38139-38356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38187-38246]:Block[38187-38246]"
    }, {
      "left" : "report(t, key, ILLEGAL_OBJLIT_KEY, \"struct\");",
      "right" : "report(t, key, ILLEGAL_OBJLIT_KEY, \"struct\");",
      "info" : "ExpressionStatement[38195-38240]:ExpressionStatement[38195-38240]"
    }, {
      "left" : "if (litType.isDict() && !key.isQuotedString())",
      "right" : "if (litType.isDict() && !key.isQuotedString())",
      "info" : "IfStatement[38252-38356]:IfStatement[38252-38356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38299-38356]:Block[38299-38356]"
    }, {
      "left" : "report(t, key, ILLEGAL_OBJLIT_KEY, \"dict\");",
      "right" : "report(t, key, ILLEGAL_OBJLIT_KEY, \"dict\");",
      "info" : "ExpressionStatement[38307-38350]:ExpressionStatement[38307-38350]"
    }, {
      "left" : "Node rvalue = key.getFirstChild();",
      "right" : "Node rvalue = key.getFirstChild();",
      "info" : "VariableDeclarationStatement[38590-38624]:VariableDeclarationStatement[38590-38624]"
    }, {
      "left" : "JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(\n        key, getJSType(rvalue));",
      "right" : "JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(\n        key, getJSType(rvalue));",
      "info" : "VariableDeclarationStatement[38629-38723]:VariableDeclarationStatement[38629-38723]"
    }, {
      "left" : "if (rightType == null)",
      "right" : "if (rightType == null)",
      "info" : "IfStatement[38728-38805]:IfStatement[38728-38805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38751-38805]:Block[38751-38805]"
    }, {
      "left" : "rightType = getNativeType(UNKNOWN_TYPE);",
      "right" : "rightType = getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[38759-38799]:ExpressionStatement[38759-38799]"
    }, {
      "left" : "Node owner = objlit;",
      "right" : "Node owner = objlit;",
      "info" : "VariableDeclarationStatement[38811-38831]:VariableDeclarationStatement[38811-38831]"
    }, {
      "left" : "JSType keyType = getJSType(key);",
      "right" : "JSType keyType = getJSType(key);",
      "info" : "VariableDeclarationStatement[38891-38923]:VariableDeclarationStatement[38891-38923]"
    }, {
      "left" : "JSType allowedValueType = keyType;",
      "right" : "JSType allowedValueType = keyType;",
      "info" : "VariableDeclarationStatement[38929-38963]:VariableDeclarationStatement[38929-38963]"
    }, {
      "left" : "if (allowedValueType.isEnumElementType())",
      "right" : "if (allowedValueType.isEnumElementType())",
      "info" : "IfStatement[38968-39114]:IfStatement[38968-39114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39010-39114]:Block[39010-39114]"
    }, {
      "left" : "allowedValueType =\n          allowedValueType.toMaybeEnumElementType().getPrimitiveType();",
      "right" : "allowedValueType =\n          allowedValueType.toMaybeEnumElementType().getPrimitiveType();",
      "info" : "ExpressionStatement[39018-39108]:ExpressionStatement[39018-39108]"
    }, {
      "left" : "boolean valid = validator.expectCanAssignToPropertyOf(t, key,\n        rightType, allowedValueType,\n        owner, NodeUtil.getObjectLitKeyName(key));",
      "right" : "boolean valid = validator.expectCanAssignToPropertyOf(t, key,\n        rightType, allowedValueType,\n        owner, NodeUtil.getObjectLitKeyName(key));",
      "info" : "VariableDeclarationStatement[39120-39269]:VariableDeclarationStatement[39120-39269]"
    }, {
      "left" : "if (valid)",
      "right" : "if (valid)",
      "info" : "IfStatement[39274-39370]:IfStatement[39274-39370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39285-39330]:Block[39285-39330]"
    }, {
      "left" : "ensureTyped(t, key, rightType);",
      "right" : "ensureTyped(t, key, rightType);",
      "info" : "ExpressionStatement[39293-39324]:ExpressionStatement[39293-39324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39336-39370]:Block[39336-39370]"
    }, {
      "left" : "ensureTyped(t, key);",
      "right" : "ensureTyped(t, key);",
      "info" : "ExpressionStatement[39344-39364]:ExpressionStatement[39344-39364]"
    }, {
      "left" : "JSType objlitType = getJSType(objlit);",
      "right" : "JSType objlitType = getJSType(objlit);",
      "info" : "VariableDeclarationStatement[39656-39694]:VariableDeclarationStatement[39656-39694]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n        objlitType.restrictByNotNullOrUndefined());",
      "right" : "ObjectType type = ObjectType.cast(\n        objlitType.restrictByNotNullOrUndefined());",
      "info" : "VariableDeclarationStatement[39699-39785]:VariableDeclarationStatement[39699-39785]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[39790-40179]:IfStatement[39790-40179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39808-40179]:Block[39808-40179]"
    }, {
      "left" : "String property = NodeUtil.getObjectLitKeyName(key);",
      "right" : "String property = NodeUtil.getObjectLitKeyName(key);",
      "info" : "VariableDeclarationStatement[39816-39868]:VariableDeclarationStatement[39816-39868]"
    }, {
      "left" : "if (type.hasProperty(property) &&\n          !type.isPropertyTypeInferred(property) &&\n          !propertyIsImplicitCast(type, property))",
      "right" : "if (type.hasProperty(property) &&\n          !type.isPropertyTypeInferred(property) &&\n          !propertyIsImplicitCast(type, property))",
      "info" : "IfStatement[39875-40159]:IfStatement[39875-40159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40012-40159]:Block[40012-40159]"
    }, {
      "left" : "validator.expectCanAssignToPropertyOf(\n            t, key, keyType,\n            type.getPropertyType(property), owner, property);",
      "right" : "validator.expectCanAssignToPropertyOf(\n            t, key, keyType,\n            type.getPropertyType(property), owner, property);",
      "info" : "ExpressionStatement[40022-40151]:ExpressionStatement[40022-40151]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[40166-40173]:ReturnStatement[40166-40173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40378-40618]:Block[40378-40618]"
    }, {
      "left" : "for (; type != null; type = type.getImplicitPrototype())",
      "right" : "for (; type != null; type = type.getImplicitPrototype())",
      "info" : "ForStatement[40384-40596]:ForStatement[40384-40596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40441-40596]:Block[40441-40596]"
    }, {
      "left" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
      "right" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
      "info" : "VariableDeclarationStatement[40449-40504]:VariableDeclarationStatement[40449-40504]"
    }, {
      "left" : "if (docInfo != null && docInfo.isImplicitCast())",
      "right" : "if (docInfo != null && docInfo.isImplicitCast())",
      "info" : "IfStatement[40511-40590]:IfStatement[40511-40590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40560-40590]:Block[40560-40590]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40570-40582]:ReturnStatement[40570-40582]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40601-40614]:ReturnStatement[40601-40614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41039-46034]:Block[41039-46034]"
    }, {
      "left" : "if (hasUnknownOrEmptySupertype(ctorType))",
      "right" : "if (hasUnknownOrEmptySupertype(ctorType))",
      "info" : "IfStatement[41136-41199]:IfStatement[41136-41199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41178-41199]:Block[41178-41199]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[41186-41193]:ReturnStatement[41186-41193]"
    }, {
      "left" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
      "right" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[41205-41267]:VariableDeclarationStatement[41205-41267]"
    }, {
      "left" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getInstanceType().hasProperty(propertyName);",
      "right" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getInstanceType().hasProperty(propertyName);",
      "info" : "VariableDeclarationStatement[41272-41389]:VariableDeclarationStatement[41272-41389]"
    }, {
      "left" : "boolean superClassHasDeclaredProperty = superClass != null &&\n        superClass.getInstanceType().isPropertyTypeDeclared(propertyName);",
      "right" : "boolean superClassHasDeclaredProperty = superClass != null &&\n        superClass.getInstanceType().isPropertyTypeDeclared(propertyName);",
      "info" : "VariableDeclarationStatement[41394-41530]:VariableDeclarationStatement[41394-41530]"
    }, {
      "left" : "boolean superInterfaceHasProperty = false;",
      "right" : "boolean superInterfaceHasProperty = false;",
      "info" : "VariableDeclarationStatement[41557-41599]:VariableDeclarationStatement[41557-41599]"
    }, {
      "left" : "boolean superInterfaceHasDeclaredProperty = false;",
      "right" : "boolean superInterfaceHasDeclaredProperty = false;",
      "info" : "VariableDeclarationStatement[41604-41654]:VariableDeclarationStatement[41604-41654]"
    }, {
      "left" : "if (ctorType.isInterface())",
      "right" : "if (ctorType.isInterface())",
      "info" : "IfStatement[41659-42063]:IfStatement[41659-42063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41687-42063]:Block[41687-42063]"
    }, {
      "left" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
      "right" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[41695-42057]:EnhancedForStatement[41695-42057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41761-42057]:Block[41761-42057]"
    }, {
      "left" : "superInterfaceHasProperty =\n            superInterfaceHasProperty ||\n            interfaceType.hasProperty(propertyName);",
      "right" : "superInterfaceHasProperty =\n            superInterfaceHasProperty ||\n            interfaceType.hasProperty(propertyName);",
      "info" : "ExpressionStatement[41771-41892]:ExpressionStatement[41771-41892]"
    }, {
      "left" : "superInterfaceHasDeclaredProperty =\n            superInterfaceHasDeclaredProperty ||\n            interfaceType.isPropertyTypeDeclared(propertyName);",
      "right" : "superInterfaceHasDeclaredProperty =\n            superInterfaceHasDeclaredProperty ||\n            interfaceType.isPropertyTypeDeclared(propertyName);",
      "info" : "ExpressionStatement[41901-42049]:ExpressionStatement[41901-42049]"
    }, {
      "left" : "boolean declaredOverride = info != null && info.isOverride();",
      "right" : "boolean declaredOverride = info != null && info.isOverride();",
      "info" : "VariableDeclarationStatement[42068-42129]:VariableDeclarationStatement[42068-42129]"
    }, {
      "left" : "boolean foundInterfaceProperty = false;",
      "right" : "boolean foundInterfaceProperty = false;",
      "info" : "VariableDeclarationStatement[42135-42174]:VariableDeclarationStatement[42135-42174]"
    }, {
      "left" : "if (ctorType.isConstructor())",
      "right" : "if (ctorType.isConstructor())",
      "info" : "IfStatement[42179-43227]:IfStatement[42179-43227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42209-43227]:Block[42209-43227]"
    }, {
      "left" : "for (JSType implementedInterface :\n          ctorType.getAllImplementedInterfaces())",
      "right" : "for (JSType implementedInterface :\n          ctorType.getAllImplementedInterfaces())",
      "info" : "EnhancedForStatement[42217-43221]:EnhancedForStatement[42217-43221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42302-43221]:Block[42302-43221]"
    }, {
      "left" : "if (implementedInterface.isUnknownType() ||\n            implementedInterface.isEmptyType())",
      "right" : "if (implementedInterface.isUnknownType() ||\n            implementedInterface.isEmptyType())",
      "info" : "IfStatement[42312-42435]:IfStatement[42312-42435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42404-42435]:Block[42404-42435]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[42416-42425]:ContinueStatement[42416-42425]"
    }, {
      "left" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
      "right" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
      "info" : "VariableDeclarationStatement[42444-42538]:VariableDeclarationStatement[42444-42538]"
    }, {
      "left" : "Preconditions.checkNotNull(interfaceType);",
      "right" : "Preconditions.checkNotNull(interfaceType);",
      "info" : "ExpressionStatement[42547-42589]:ExpressionStatement[42547-42589]"
    }, {
      "left" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
      "right" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
      "info" : "VariableDeclarationStatement[42599-42697]:VariableDeclarationStatement[42599-42697]"
    }, {
      "left" : "foundInterfaceProperty = foundInterfaceProperty ||\n            interfaceHasProperty;",
      "right" : "foundInterfaceProperty = foundInterfaceProperty ||\n            interfaceHasProperty;",
      "info" : "ExpressionStatement[42706-42790]:ExpressionStatement[42706-42790]"
    }, {
      "left" : "if (reportMissingOverride.isOn()\n            && !declaredOverride\n            && interfaceHasProperty)",
      "right" : "if (reportMissingOverride.isOn()\n            && !declaredOverride\n            && interfaceHasProperty)",
      "info" : "IfStatement[42799-43213]:IfStatement[42799-43213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42902-43213]:Block[42902-43213]"
    }, {
      "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
      "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
      "info" : "ExpressionStatement[43016-43203]:ExpressionStatement[43016-43203]"
    }, {
      "left" : "if (!declaredOverride\n        && !superClassHasProperty\n        && !superInterfaceHasProperty)",
      "right" : "if (!declaredOverride\n        && !superClassHasProperty\n        && !superInterfaceHasProperty)",
      "info" : "IfStatement[43233-43409]:IfStatement[43233-43409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43328-43409]:Block[43328-43409]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43396-43403]:ReturnStatement[43396-43403]"
    }, {
      "left" : "ObjectType topInstanceType = superClassHasDeclaredProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
      "right" : "ObjectType topInstanceType = superClassHasDeclaredProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
      "info" : "VariableDeclarationStatement[43415-43539]:VariableDeclarationStatement[43415-43539]"
    }, {
      "left" : "boolean declaredLocally =\n        ctorType.isConstructor() &&\n        (ctorType.getPrototype().hasOwnProperty(propertyName) ||\n         ctorType.getInstanceType().hasOwnProperty(propertyName));",
      "right" : "boolean declaredLocally =\n        ctorType.isConstructor() &&\n        (ctorType.getPrototype().hasOwnProperty(propertyName) ||\n         ctorType.getInstanceType().hasOwnProperty(propertyName));",
      "info" : "VariableDeclarationStatement[43544-43737]:VariableDeclarationStatement[43544-43737]"
    }, {
      "left" : "if (reportMissingOverride.isOn()\n        && !declaredOverride\n        && superClassHasDeclaredProperty\n        && declaredLocally)",
      "right" : "if (reportMissingOverride.isOn()\n        && !declaredOverride\n        && superClassHasDeclaredProperty\n        && declaredLocally)",
      "info" : "IfStatement[43742-44126]:IfStatement[43742-44126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43873-44126]:Block[43873-44126]"
    }, {
      "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
      "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
      "info" : "ExpressionStatement[43975-44120]:ExpressionStatement[43975-44120]"
    }, {
      "left" : "if (superClassHasDeclaredProperty)",
      "right" : "if (superClassHasDeclaredProperty)",
      "info" : "IfStatement[44195-46030]:IfStatement[44195-46030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44230-44935]:Block[44230-44935]"
    }, {
      "left" : "JSType superClassPropType =\n          superClass.getInstanceType().getPropertyType(propertyName);",
      "right" : "JSType superClassPropType =\n          superClass.getInstanceType().getPropertyType(propertyName);",
      "info" : "VariableDeclarationStatement[44284-44381]:VariableDeclarationStatement[44284-44381]"
    }, {
      "left" : "TemplateTypeMap ctorTypeMap =\n          ctorType.getTypeOfThis().getTemplateTypeMap();",
      "right" : "TemplateTypeMap ctorTypeMap =\n          ctorType.getTypeOfThis().getTemplateTypeMap();",
      "info" : "VariableDeclarationStatement[44388-44474]:VariableDeclarationStatement[44388-44474]"
    }, {
      "left" : "if (!ctorTypeMap.isEmpty())",
      "right" : "if (!ctorTypeMap.isEmpty())",
      "info" : "IfStatement[44481-44642]:IfStatement[44481-44642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44509-44642]:Block[44509-44642]"
    }, {
      "left" : "superClassPropType = superClassPropType.visit(\n            new TemplateTypeMapReplacer(typeRegistry, ctorTypeMap));",
      "right" : "superClassPropType = superClassPropType.visit(\n            new TemplateTypeMapReplacer(typeRegistry, ctorTypeMap));",
      "info" : "ExpressionStatement[44519-44634]:ExpressionStatement[44519-44634]"
    }, {
      "left" : "if (!propertyType.isSubtype(superClassPropType))",
      "right" : "if (!propertyType.isSubtype(superClassPropType))",
      "info" : "IfStatement[44650-44929]:IfStatement[44650-44929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44699-44929]:Block[44699-44929]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
      "right" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
      "info" : "ExpressionStatement[44709-44921]:ExpressionStatement[44709-44921]"
    }, {
      "left" : "if (superInterfaceHasDeclaredProperty)",
      "right" : "if (superInterfaceHasDeclaredProperty)",
      "info" : "IfStatement[44941-46030]:IfStatement[44941-46030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44980-45720]:Block[44980-45720]"
    }, {
      "left" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
      "right" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[45034-45714]:EnhancedForStatement[45034-45714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45100-45714]:Block[45100-45714]"
    }, {
      "left" : "if (interfaceType.hasProperty(propertyName))",
      "right" : "if (interfaceType.hasProperty(propertyName))",
      "info" : "IfStatement[45110-45706]:IfStatement[45110-45706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45155-45706]:Block[45155-45706]"
    }, {
      "left" : "JSType superPropertyType =\n              interfaceType.getPropertyType(propertyName);",
      "right" : "JSType superPropertyType =\n              interfaceType.getPropertyType(propertyName);",
      "info" : "VariableDeclarationStatement[45167-45252]:VariableDeclarationStatement[45167-45252]"
    }, {
      "left" : "if (!propertyType.isSubtype(superPropertyType))",
      "right" : "if (!propertyType.isSubtype(superPropertyType))",
      "info" : "IfStatement[45263-45696]:IfStatement[45263-45696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45311-45696]:Block[45311-45696]"
    }, {
      "left" : "topInstanceType = interfaceType.getConstructor().\n                getTopMostDefiningType(propertyName);",
      "right" : "topInstanceType = interfaceType.getConstructor().\n                getTopMostDefiningType(propertyName);",
      "info" : "ExpressionStatement[45325-45428]:ExpressionStatement[45325-45428]"
    }, {
      "left" : "compiler.report(\n                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                    propertyName, topInstanceType.toString(),\n                    superPropertyType.toString(),\n                    propertyType.toString()));",
      "right" : "compiler.report(\n                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                    propertyName, topInstanceType.toString(),\n                    superPropertyType.toString(),\n                    propertyType.toString()));",
      "info" : "ExpressionStatement[45441-45684]:ExpressionStatement[45441-45684]"
    }, {
      "left" : "if (!foundInterfaceProperty\n        && !superClassHasProperty\n        && !superInterfaceHasProperty)",
      "right" : "if (!foundInterfaceProperty\n        && !superClassHasProperty\n        && !superInterfaceHasProperty)",
      "info" : "IfStatement[45726-46030]:IfStatement[45726-46030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45827-46030]:Block[45827-46030]"
    }, {
      "left" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
      "right" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
      "info" : "ExpressionStatement[45896-46024]:ExpressionStatement[45896-46024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46241-46987]:Block[46241-46987]"
    }, {
      "left" : "Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());",
      "right" : "Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());",
      "info" : "ExpressionStatement[46247-46319]:ExpressionStatement[46247-46319]"
    }, {
      "left" : "Preconditions.checkArgument(!ctor.isUnknownType());",
      "right" : "Preconditions.checkArgument(!ctor.isUnknownType());",
      "info" : "ExpressionStatement[46324-46375]:ExpressionStatement[46324-46375]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[46476-46983]:WhileStatement[46476-46983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46489-46983]:Block[46489-46983]"
    }, {
      "left" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
      "right" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[46497-46586]:VariableDeclarationStatement[46497-46586]"
    }, {
      "left" : "if (maybeSuperInstanceType == null)",
      "right" : "if (maybeSuperInstanceType == null)",
      "info" : "IfStatement[46593-46660]:IfStatement[46593-46660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46629-46660]:Block[46629-46660]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46639-46652]:ReturnStatement[46639-46652]"
    }, {
      "left" : "if (maybeSuperInstanceType.isUnknownType() ||\n          maybeSuperInstanceType.isEmptyType())",
      "right" : "if (maybeSuperInstanceType.isUnknownType() ||\n          maybeSuperInstanceType.isEmptyType())",
      "info" : "IfStatement[46667-46791]:IfStatement[46667-46791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46761-46791]:Block[46761-46791]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46771-46783]:ReturnStatement[46771-46783]"
    }, {
      "left" : "ctor = maybeSuperInstanceType.getConstructor();",
      "right" : "ctor = maybeSuperInstanceType.getConstructor();",
      "info" : "ExpressionStatement[46798-46845]:ExpressionStatement[46798-46845]"
    }, {
      "left" : "if (ctor == null)",
      "right" : "if (ctor == null)",
      "info" : "IfStatement[46852-46901]:IfStatement[46852-46901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46870-46901]:Block[46870-46901]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46880-46893]:ReturnStatement[46880-46893]"
    }, {
      "left" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
      "right" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
      "info" : "ExpressionStatement[46908-46977]:ExpressionStatement[46908-46977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47239-48194]:Block[47239-48194]"
    }, {
      "left" : "JSType rvalueType = getJSType(rvalue);",
      "right" : "JSType rvalueType = getJSType(rvalue);",
      "info" : "VariableDeclarationStatement[47246-47284]:VariableDeclarationStatement[47246-47284]"
    }, {
      "left" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
      "right" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
      "info" : "VariableDeclarationStatement[47483-47574]:VariableDeclarationStatement[47483-47574]"
    }, {
      "left" : "if (!rvalueType.isFunctionType())",
      "right" : "if (!rvalueType.isFunctionType())",
      "info" : "IfStatement[47579-47946]:IfStatement[47579-47946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47613-47946]:Block[47613-47946]"
    }, {
      "left" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
      "right" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
      "info" : "VariableDeclarationStatement[47696-47810]:VariableDeclarationStatement[47696-47810]"
    }, {
      "left" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
      "right" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
      "info" : "ExpressionStatement[47817-47940]:ExpressionStatement[47817-47940]"
    }, {
      "left" : "if (assign.getLastChild().isFunction()\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
      "right" : "if (assign.getLastChild().isFunction()\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
      "info" : "IfStatement[47952-48190]:IfStatement[47952-48190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48064-48190]:Block[48064-48190]"
    }, {
      "left" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
      "right" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
      "info" : "ExpressionStatement[48072-48184]:ExpressionStatement[48072-48184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48571-49611]:Block[48571-49611]"
    }, {
      "left" : "int parentNodeType = parent.getType();",
      "right" : "int parentNodeType = parent.getType();",
      "info" : "VariableDeclarationStatement[49029-49067]:VariableDeclarationStatement[49029-49067]"
    }, {
      "left" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.PARAM_LIST ||\n        parentNodeType == Token.VAR)",
      "right" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.PARAM_LIST ||\n        parentNodeType == Token.VAR)",
      "info" : "IfStatement[49072-49263]:IfStatement[49072-49263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49236-49263]:Block[49236-49263]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49244-49257]:ReturnStatement[49244-49257]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[49269-49297]:VariableDeclarationStatement[49269-49297]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[49302-49561]:IfStatement[49302-49561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49320-49561]:Block[49320-49561]"
    }, {
      "left" : "type = getNativeType(UNKNOWN_TYPE);",
      "right" : "type = getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[49328-49363]:ExpressionStatement[49328-49363]"
    }, {
      "left" : "Var var = t.getScope().getVar(n.getString());",
      "right" : "Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[49370-49415]:VariableDeclarationStatement[49370-49415]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[49422-49555]:IfStatement[49422-49555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49439-49555]:Block[49439-49555]"
    }, {
      "left" : "JSType varType = var.getType();",
      "right" : "JSType varType = var.getType();",
      "info" : "VariableDeclarationStatement[49449-49480]:VariableDeclarationStatement[49449-49480]"
    }, {
      "left" : "if (varType != null)",
      "right" : "if (varType != null)",
      "info" : "IfStatement[49489-49547]:IfStatement[49489-49547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49510-49547]:Block[49510-49547]"
    }, {
      "left" : "type = varType;",
      "right" : "type = varType;",
      "info" : "ExpressionStatement[49522-49537]:ExpressionStatement[49522-49537]"
    }, {
      "left" : "ensureTyped(t, n, type);",
      "right" : "ensureTyped(t, n, type);",
      "info" : "ExpressionStatement[49566-49590]:ExpressionStatement[49566-49590]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49595-49607]:ReturnStatement[49595-49607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49953-50632]:Block[49953-50632]"
    }, {
      "left" : "Node property = n.getLastChild();",
      "right" : "Node property = n.getLastChild();",
      "info" : "VariableDeclarationStatement[50165-50198]:VariableDeclarationStatement[50165-50198]"
    }, {
      "left" : "Node objNode = n.getFirstChild();",
      "right" : "Node objNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[50203-50236]:VariableDeclarationStatement[50203-50236]"
    }, {
      "left" : "JSType childType = getJSType(objNode);",
      "right" : "JSType childType = getJSType(objNode);",
      "info" : "VariableDeclarationStatement[50241-50279]:VariableDeclarationStatement[50241-50279]"
    }, {
      "left" : "if (childType.isDict())",
      "right" : "if (childType.isDict())",
      "info" : "IfStatement[50285-50605]:IfStatement[50285-50605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50309-50397]:Block[50309-50397]"
    }, {
      "left" : "report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");",
      "right" : "report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");",
      "info" : "ExpressionStatement[50317-50391]:ExpressionStatement[50317-50391]"
    }, {
      "left" : "if (validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE)))",
      "right" : "if (validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE)))",
      "info" : "IfStatement[50403-50605]:IfStatement[50403-50605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50532-50605]:Block[50532-50605]"
    }, {
      "left" : "checkPropertyAccess(childType, property.getString(), t, n);",
      "right" : "checkPropertyAccess(childType, property.getString(), t, n);",
      "info" : "ExpressionStatement[50540-50599]:ExpressionStatement[50540-50599]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[50610-50628]:ExpressionStatement[50610-50628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51057-52208]:Block[51057-52208]"
    }, {
      "left" : "JSType propType = getJSType(n);",
      "right" : "JSType propType = getJSType(n);",
      "info" : "VariableDeclarationStatement[51328-51359]:VariableDeclarationStatement[51328-51359]"
    }, {
      "left" : "if (propType.isEquivalentTo(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
      "right" : "if (propType.isEquivalentTo(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
      "info" : "IfStatement[51364-52204]:IfStatement[51364-52204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51435-52204]:Block[51435-52204]"
    }, {
      "left" : "childType = childType.autobox();",
      "right" : "childType = childType.autobox();",
      "info" : "ExpressionStatement[51443-51475]:ExpressionStatement[51443-51475]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(childType);",
      "right" : "ObjectType objectType = ObjectType.cast(childType);",
      "info" : "VariableDeclarationStatement[51482-51533]:VariableDeclarationStatement[51482-51533]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[51540-52198]:IfStatement[51540-52198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51564-52121]:Block[51564-52121]"
    }, {
      "left" : "if (!objectType.hasProperty(propName) ||\n            objectType.isEquivalentTo(\n                typeRegistry.getNativeType(UNKNOWN_TYPE)))",
      "right" : "if (!objectType.hasProperty(propName) ||\n            objectType.isEquivalentTo(\n                typeRegistry.getNativeType(UNKNOWN_TYPE)))",
      "info" : "IfStatement[51755-52112]:IfStatement[51755-52112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51894-52112]:Block[51894-52112]"
    }, {
      "left" : "if (objectType instanceof EnumType)",
      "right" : "if (objectType instanceof EnumType)",
      "info" : "IfStatement[51906-52102]:IfStatement[51906-52102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51942-52016]:Block[51942-52016]"
    }, {
      "left" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
      "right" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
      "info" : "ExpressionStatement[51956-52004]:ExpressionStatement[51956-52004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52022-52102]:Block[52022-52102]"
    }, {
      "left" : "checkPropertyAccessHelper(objectType, propName, t, n);",
      "right" : "checkPropertyAccessHelper(objectType, propName, t, n);",
      "info" : "ExpressionStatement[52036-52090]:ExpressionStatement[52036-52090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52127-52198]:Block[52127-52198]"
    }, {
      "left" : "checkPropertyAccessHelper(childType, propName, t, n);",
      "right" : "checkPropertyAccessHelper(childType, propName, t, n);",
      "info" : "ExpressionStatement[52137-52190]:ExpressionStatement[52137-52190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52318-53027]:Block[52318-53027]"
    }, {
      "left" : "if (!objectType.isEmptyType() &&\n        reportMissingProperties &&\n        (!isPropertyTest(n) || objectType.isStruct()))",
      "right" : "if (!objectType.isEmptyType() &&\n        reportMissingProperties &&\n        (!isPropertyTest(n) || objectType.isStruct()))",
      "info" : "IfStatement[52324-53023]:IfStatement[52324-53023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52447-53023]:Block[52447-53023]"
    }, {
      "left" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
      "right" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
      "info" : "IfStatement[52455-53017]:IfStatement[52455-53017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52517-53017]:Block[52517-53017]"
    }, {
      "left" : "SuggestionPair pair =\n            getClosestPropertySuggestion(objectType, propName);",
      "right" : "SuggestionPair pair =\n            getClosestPropertySuggestion(objectType, propName);",
      "info" : "VariableDeclarationStatement[52527-52612]:VariableDeclarationStatement[52527-52612]"
    }, {
      "left" : "if (pair != null && pair.distance * 4 < propName.length())",
      "right" : "if (pair != null && pair.distance * 4 < propName.length())",
      "info" : "IfStatement[52621-53009]:IfStatement[52621-53009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52680-52865]:Block[52680-52865]"
    }, {
      "left" : "report(t, n, INEXISTENT_PROPERTY_WITH_SUGGESTION, propName,\n              validator.getReadableJSTypeName(n.getFirstChild(), true),\n              pair.suggestion);",
      "right" : "report(t, n, INEXISTENT_PROPERTY_WITH_SUGGESTION, propName,\n              validator.getReadableJSTypeName(n.getFirstChild(), true),\n              pair.suggestion);",
      "info" : "ExpressionStatement[52692-52855]:ExpressionStatement[52692-52855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52871-53009]:Block[52871-53009]"
    }, {
      "left" : "report(t, n, INEXISTENT_PROPERTY, propName,\n              validator.getReadableJSTypeName(n.getFirstChild(), true));",
      "right" : "report(t, n, INEXISTENT_PROPERTY, propName,\n              validator.getReadableJSTypeName(n.getFirstChild(), true));",
      "info" : "ExpressionStatement[52883-52999]:ExpressionStatement[52883-52999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53126-54700]:Block[53126-54700]"
    }, {
      "left" : "if (editDistance == null)",
      "right" : "if (editDistance == null)",
      "info" : "IfStatement[53132-53184]:IfStatement[53132-53184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53158-53184]:Block[53158-53184]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[53166-53178]:ReturnStatement[53166-53178]"
    }, {
      "left" : "String bestSoFar = null;",
      "right" : "String bestSoFar = null;",
      "info" : "VariableDeclarationStatement[53190-53214]:VariableDeclarationStatement[53190-53214]"
    }, {
      "left" : "int shortest = Integer.MAX_VALUE;",
      "right" : "int shortest = Integer.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[53219-53252]:VariableDeclarationStatement[53219-53252]"
    }, {
      "left" : "if (objectType instanceof ObjectType)",
      "right" : "if (objectType instanceof ObjectType)",
      "info" : "IfStatement[53257-54588]:IfStatement[53257-54588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53295-53982]:Block[53295-53982]"
    }, {
      "left" : "ObjectType type = (ObjectType) objectType;",
      "right" : "ObjectType type = (ObjectType) objectType;",
      "info" : "VariableDeclarationStatement[53303-53345]:VariableDeclarationStatement[53303-53345]"
    }, {
      "left" : "for (String alt : type.getPropertyNames())",
      "right" : "for (String alt : type.getPropertyNames())",
      "info" : "EnhancedForStatement[53352-53976]:EnhancedForStatement[53352-53976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53395-53976]:Block[53395-53976]"
    }, {
      "left" : "int distance;",
      "right" : "int distance;",
      "info" : "VariableDeclarationStatement[53405-53418]:VariableDeclarationStatement[53405-53418]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[53427-53577]:TryStatement[53427-53577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53431-53522]:Block[53431-53522]"
    }, {
      "left" : "distance = (Integer) editDistance.invoke(null, propName, alt, false);",
      "right" : "distance = (Integer) editDistance.invoke(null, propName, alt, false);",
      "info" : "ExpressionStatement[53443-53512]:ExpressionStatement[53443-53512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53543-53577]:Block[53543-53577]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[53555-53567]:ReturnStatement[53555-53567]"
    }, {
      "left" : "if (distance <= shortest)",
      "right" : "if (distance <= shortest)",
      "info" : "IfStatement[53586-53968]:IfStatement[53586-53968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53612-53968]:Block[53612-53968]"
    }, {
      "left" : "if (distance == shortest)",
      "right" : "if (distance == shortest)",
      "info" : "IfStatement[53624-53900]:IfStatement[53624-53900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53650-53900]:Block[53650-53900]"
    }, {
      "left" : "if (bestSoFar != null && alt.compareToIgnoreCase(bestSoFar) > 0)",
      "right" : "if (bestSoFar != null && alt.compareToIgnoreCase(bestSoFar) > 0)",
      "info" : "IfStatement[53784-53888]:IfStatement[53784-53888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53849-53888]:Block[53849-53888]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[53865-53874]:ContinueStatement[53865-53874]"
    }, {
      "left" : "shortest = distance;",
      "right" : "shortest = distance;",
      "info" : "ExpressionStatement[53911-53931]:ExpressionStatement[53911-53931]"
    }, {
      "left" : "bestSoFar = alt;",
      "right" : "bestSoFar = alt;",
      "info" : "ExpressionStatement[53942-53958]:ExpressionStatement[53942-53958]"
    }, {
      "left" : "if (objectType.isUnionType())",
      "right" : "if (objectType.isUnionType())",
      "info" : "IfStatement[53988-54588]:IfStatement[53988-54588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54018-54588]:Block[54018-54588]"
    }, {
      "left" : "UnionType type = (UnionType) objectType;",
      "right" : "UnionType type = (UnionType) objectType;",
      "info" : "VariableDeclarationStatement[54026-54066]:VariableDeclarationStatement[54026-54066]"
    }, {
      "left" : "for (JSType alt : type.getAlternates())",
      "right" : "for (JSType alt : type.getAlternates())",
      "info" : "EnhancedForStatement[54073-54582]:EnhancedForStatement[54073-54582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54113-54582]:Block[54113-54582]"
    }, {
      "left" : "SuggestionPair pair = getClosestPropertySuggestion(alt, propName);",
      "right" : "SuggestionPair pair = getClosestPropertySuggestion(alt, propName);",
      "info" : "VariableDeclarationStatement[54123-54189]:VariableDeclarationStatement[54123-54189]"
    }, {
      "left" : "if (pair != null)",
      "right" : "if (pair != null)",
      "info" : "IfStatement[54198-54574]:IfStatement[54198-54574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54216-54574]:Block[54216-54574]"
    }, {
      "left" : "if (pair.distance <= shortest)",
      "right" : "if (pair.distance <= shortest)",
      "info" : "IfStatement[54228-54564]:IfStatement[54228-54564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54259-54564]:Block[54259-54564]"
    }, {
      "left" : "if (pair.distance  == shortest)",
      "right" : "if (pair.distance  == shortest)",
      "info" : "IfStatement[54273-54473]:IfStatement[54273-54473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54305-54473]:Block[54305-54473]"
    }, {
      "left" : "if (bestSoFar != null &&\n                  pair.suggestion.compareToIgnoreCase(bestSoFar) > 0)",
      "right" : "if (bestSoFar != null &&\n                  pair.suggestion.compareToIgnoreCase(bestSoFar) > 0)",
      "info" : "IfStatement[54321-54459]:IfStatement[54321-54459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54416-54459]:Block[54416-54459]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[54434-54443]:ContinueStatement[54434-54443]"
    }, {
      "left" : "shortest = pair.distance;",
      "right" : "shortest = pair.distance;",
      "info" : "ExpressionStatement[54486-54511]:ExpressionStatement[54486-54511]"
    }, {
      "left" : "bestSoFar = pair.suggestion;",
      "right" : "bestSoFar = pair.suggestion;",
      "info" : "ExpressionStatement[54524-54552]:ExpressionStatement[54524-54552]"
    }, {
      "left" : "if (bestSoFar != null)",
      "right" : "if (bestSoFar != null)",
      "info" : "IfStatement[54594-54678]:IfStatement[54594-54678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54617-54678]:Block[54617-54678]"
    }, {
      "left" : "return new SuggestionPair(bestSoFar, shortest);",
      "right" : "return new SuggestionPair(bestSoFar, shortest);",
      "info" : "ReturnStatement[54625-54672]:ReturnStatement[54625-54672]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54684-54696]:ReturnStatement[54684-54696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54956-55722]:Block[54956-55722]"
    }, {
      "left" : "Node parent = getProp.getParent();",
      "right" : "Node parent = getProp.getParent();",
      "info" : "VariableDeclarationStatement[54962-54996]:VariableDeclarationStatement[54962-54996]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().isOr() &&\n            parent.getParent().getFirstChild() == parent;\n\n      case Token.CAST:\n        return isPropertyTest(parent);\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().isOr() &&\n            parent.getParent().getFirstChild() == parent;\n\n      case Token.CAST:\n        return isPropertyTest(parent);\n    }",
      "info" : "SwitchStatement[55001-55700]:SwitchStatement[55001-55700]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[55035-55051]:SwitchCase[55035-55051]"
    }, {
      "left" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
      "right" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
      "info" : "ReturnStatement[55060-55178]:ReturnStatement[55060-55178]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[55186-55200]:SwitchCase[55186-55200]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[55207-55224]:SwitchCase[55207-55224]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[55231-55245]:SwitchCase[55231-55245]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[55252-55267]:SwitchCase[55252-55267]"
    }, {
      "left" : "return NodeUtil.getConditionExpression(parent) == getProp;",
      "right" : "return NodeUtil.getConditionExpression(parent) == getProp;",
      "info" : "ReturnStatement[55276-55334]:ReturnStatement[55276-55334]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[55342-55364]:SwitchCase[55342-55364]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[55371-55389]:SwitchCase[55371-55389]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[55398-55410]:ReturnStatement[55398-55410]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[55418-55433]:SwitchCase[55418-55433]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[55440-55456]:SwitchCase[55440-55456]"
    }, {
      "left" : "return parent.getFirstChild() == getProp;",
      "right" : "return parent.getFirstChild() == getProp;",
      "info" : "ReturnStatement[55465-55506]:ReturnStatement[55465-55506]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[55514-55529]:SwitchCase[55514-55529]"
    }, {
      "left" : "return parent.getParent().isOr() &&\n            parent.getParent().getFirstChild() == parent;",
      "right" : "return parent.getParent().isOr() &&\n            parent.getParent().getFirstChild() == parent;",
      "info" : "ReturnStatement[55538-55631]:ReturnStatement[55538-55631]"
    }, {
      "left" : "case Token.CAST:",
      "right" : "case Token.CAST:",
      "info" : "SwitchCase[55639-55655]:SwitchCase[55639-55655]"
    }, {
      "left" : "return isPropertyTest(parent);",
      "right" : "return isPropertyTest(parent);",
      "info" : "ReturnStatement[55664-55694]:ReturnStatement[55664-55694]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55705-55718]:ReturnStatement[55705-55718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56003-56137]:Block[56003-56137]"
    }, {
      "left" : "validator.expectIndexMatch(\n        t, n, getJSType(n.getFirstChild()), getJSType(n.getLastChild()));",
      "right" : "validator.expectIndexMatch(\n        t, n, getJSType(n.getFirstChild()), getJSType(n.getLastChild()));",
      "info" : "ExpressionStatement[56009-56110]:ExpressionStatement[56009-56110]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[56115-56133]:ExpressionStatement[56115-56133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56410-57423]:Block[56410-57423]"
    }, {
      "left" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
      "right" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
      "info" : "VariableDeclarationStatement[56578-56640]:VariableDeclarationStatement[56578-56640]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[56645-57419]:EnhancedForStatement[56645-57419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56676-57419]:Block[56676-57419]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[56684-56718]:VariableDeclarationStatement[56684-56718]"
    }, {
      "left" : "Var var = t.getScope().getVar(name.getString());",
      "right" : "Var var = t.getScope().getVar(name.getString());",
      "info" : "VariableDeclarationStatement[56795-56843]:VariableDeclarationStatement[56795-56843]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[56851-57413]:IfStatement[56851-57413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56870-57413]:Block[56870-57413]"
    }, {
      "left" : "JSType valueType = getJSType(value);",
      "right" : "JSType valueType = getJSType(value);",
      "info" : "VariableDeclarationStatement[56880-56916]:VariableDeclarationStatement[56880-56916]"
    }, {
      "left" : "JSType nameType = var.getType();",
      "right" : "JSType nameType = var.getType();",
      "info" : "VariableDeclarationStatement[56925-56957]:VariableDeclarationStatement[56925-56957]"
    }, {
      "left" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
      "right" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
      "info" : "ExpressionStatement[56966-57037]:ExpressionStatement[56966-57037]"
    }, {
      "left" : "JSDocInfo info = name.getJSDocInfo();",
      "right" : "JSDocInfo info = name.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[57047-57084]:VariableDeclarationStatement[57047-57084]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[57093-57148]:IfStatement[57093-57148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57111-57148]:Block[57111-57148]"
    }, {
      "left" : "info = varInfo;",
      "right" : "info = varInfo;",
      "info" : "ExpressionStatement[57123-57138]:ExpressionStatement[57123-57138]"
    }, {
      "left" : "checkEnumAlias(t, info, value);",
      "right" : "checkEnumAlias(t, info, value);",
      "info" : "ExpressionStatement[57158-57189]:ExpressionStatement[57158-57189]"
    }, {
      "left" : "if (var.isTypeInferred())",
      "right" : "if (var.isTypeInferred())",
      "info" : "IfStatement[57198-57405]:IfStatement[57198-57405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57224-57278]:Block[57224-57278]"
    }, {
      "left" : "ensureTyped(t, name, valueType);",
      "right" : "ensureTyped(t, name, valueType);",
      "info" : "ExpressionStatement[57236-57268]:ExpressionStatement[57236-57268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57284-57405]:Block[57284-57405]"
    }, {
      "left" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
      "right" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
      "info" : "ExpressionStatement[57296-57395]:ExpressionStatement[57296-57395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57510-58020]:Block[57510-58048]"
    }, {
      "left" : "Node constructor = n.getFirstChild();",
      "right" : "Node constructor = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[57516-57553]:VariableDeclarationStatement[57516-57553]"
    }, {
      "left" : "JSType type = getJSType(constructor).restrictByNotNullOrUndefined();",
      "right" : "JSType type = getJSType(constructor).restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[57558-57626]:VariableDeclarationStatement[57558-57626]"
    }, {
      "left" : "if (type.isConstructor() || type.isEmptyType() || type.isUnknownType())",
      "right" : "if (type.isConstructor() || type.isEmptyType() || type.isUnknownType())",
      "info" : "IfStatement[57631-58016]:IfStatement[57631-58044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57703-57939]:Block[57703-57967]"
    }, {
      "left" : "FunctionType fnType = type.toMaybeFunctionType();",
      "right" : "FunctionType fnType = type.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[57711-57760]:VariableDeclarationStatement[57711-57760]"
    }, {
      "left" : "if (fnType != null)",
      "right" : "if (fnType != null && fnType.hasInstanceType())",
      "info" : "IfStatement[57767-57933]:IfStatement[57767-57961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57787-57891]:Block[57815-57919]"
    }, {
      "left" : "visitParameterList(t, n, fnType);",
      "right" : "visitParameterList(t, n, fnType);",
      "info" : "ExpressionStatement[57797-57830]:ExpressionStatement[57825-57858]"
    }, {
      "left" : "ensureTyped(t, n, fnType.getInstanceType());",
      "right" : "ensureTyped(t, n, fnType.getInstanceType());",
      "info" : "ExpressionStatement[57839-57883]:ExpressionStatement[57867-57911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57897-57933]:Block[57925-57961]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[57907-57925]:ExpressionStatement[57935-57953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57945-58016]:Block[57973-58044]"
    }, {
      "left" : "report(t, n, NOT_A_CONSTRUCTOR);",
      "right" : "report(t, n, NOT_A_CONSTRUCTOR);",
      "info" : "ExpressionStatement[57953-57985]:ExpressionStatement[57981-58013]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[57992-58010]:ExpressionStatement[58020-58038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58768-59877]:Block[58796-59905]"
    }, {
      "left" : "ObjectType implicitProto = interfaceType.getImplicitPrototype();",
      "right" : "ObjectType implicitProto = interfaceType.getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[58774-58838]:VariableDeclarationStatement[58802-58866]"
    }, {
      "left" : "Set<String> currentPropertyNames;",
      "right" : "Set<String> currentPropertyNames;",
      "info" : "VariableDeclarationStatement[58843-58876]:VariableDeclarationStatement[58871-58904]"
    }, {
      "left" : "if (implicitProto == null)",
      "right" : "if (implicitProto == null)",
      "info" : "IfStatement[58881-59187]:IfStatement[58909-59215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58908-59108]:Block[58936-59136]"
    }, {
      "left" : "currentPropertyNames = ImmutableSet.of();",
      "right" : "currentPropertyNames = ImmutableSet.of();",
      "info" : "ExpressionStatement[59061-59102]:ExpressionStatement[59089-59130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59114-59187]:Block[59142-59215]"
    }, {
      "left" : "currentPropertyNames = implicitProto.getOwnPropertyNames();",
      "right" : "currentPropertyNames = implicitProto.getOwnPropertyNames();",
      "info" : "ExpressionStatement[59122-59181]:ExpressionStatement[59150-59209]"
    }, {
      "left" : "for (String name : currentPropertyNames)",
      "right" : "for (String name : currentPropertyNames)",
      "info" : "EnhancedForStatement[59192-59686]:EnhancedForStatement[59220-59714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59233-59686]:Block[59261-59714]"
    }, {
      "left" : "ObjectType oType = properties.get(name);",
      "right" : "ObjectType oType = properties.get(name);",
      "info" : "VariableDeclarationStatement[59241-59281]:VariableDeclarationStatement[59269-59309]"
    }, {
      "left" : "if (oType != null)",
      "right" : "if (oType != null)",
      "info" : "IfStatement[59288-59630]:IfStatement[59316-59658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59307-59630]:Block[59335-59658]"
    }, {
      "left" : "if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name)))",
      "right" : "if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name)))",
      "info" : "IfStatement[59317-59622]:IfStatement[59345-59650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59416-59622]:Block[59444-59650]"
    }, {
      "left" : "compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));",
      "right" : "compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));",
      "info" : "ExpressionStatement[59428-59612]:ExpressionStatement[59456-59640]"
    }, {
      "left" : "currentProperties.put(name, interfaceType);",
      "right" : "currentProperties.put(name, interfaceType);",
      "info" : "ExpressionStatement[59637-59680]:ExpressionStatement[59665-59708]"
    }, {
      "left" : "for (ObjectType iType : interfaceType.getCtorExtendedInterfaces())",
      "right" : "for (ObjectType iType : interfaceType.getCtorExtendedInterfaces())",
      "info" : "EnhancedForStatement[59691-59873]:EnhancedForStatement[59719-59901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59758-59873]:Block[59786-59901]"
    }, {
      "left" : "checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);",
      "right" : "checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);",
      "info" : "ExpressionStatement[59766-59867]:ExpressionStatement[59794-59895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60174-63312]:Block[60202-63340]"
    }, {
      "left" : "FunctionType functionType = JSType.toMaybeFunctionType(n.getJSType());",
      "right" : "FunctionType functionType = JSType.toMaybeFunctionType(n.getJSType());",
      "info" : "VariableDeclarationStatement[60180-60250]:VariableDeclarationStatement[60208-60278]"
    }, {
      "left" : "String functionPrivateName = n.getFirstChild().getString();",
      "right" : "String functionPrivateName = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[60255-60314]:VariableDeclarationStatement[60283-60342]"
    }, {
      "left" : "if (functionType.isConstructor())",
      "right" : "if (functionType.isConstructor())",
      "info" : "IfStatement[60319-63308]:IfStatement[60347-63336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60353-62162]:Block[60381-62190]"
    }, {
      "left" : "FunctionType baseConstructor = functionType.getSuperClassConstructor();",
      "right" : "FunctionType baseConstructor = functionType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[60361-60432]:VariableDeclarationStatement[60389-60460]"
    }, {
      "left" : "if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          baseConstructor != null &&\n          baseConstructor.isInterface())",
      "right" : "if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          baseConstructor != null &&\n          baseConstructor.isInterface())",
      "info" : "IfStatement[60439-62156]:IfStatement[60467-62184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60579-60729]:Block[60607-60757]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                        \"constructor\", functionPrivateName));",
      "right" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                        \"constructor\", functionPrivateName));",
      "info" : "ExpressionStatement[60589-60721]:ExpressionStatement[60617-60749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60735-62156]:Block[60763-62184]"
    }, {
      "left" : "if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE))",
      "right" : "if (baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE))",
      "info" : "IfStatement[60745-61299]:IfStatement[60773-61327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60805-61299]:Block[60833-61327]"
    }, {
      "left" : "ObjectType proto = functionType.getPrototype();",
      "right" : "ObjectType proto = functionType.getPrototype();",
      "info" : "VariableDeclarationStatement[60817-60864]:VariableDeclarationStatement[60845-60892]"
    }, {
      "left" : "if (functionType.makesStructs() && !proto.isStruct())",
      "right" : "if (functionType.makesStructs() && !proto.isStruct())",
      "info" : "IfStatement[60875-61289]:IfStatement[60903-61317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60929-61082]:Block[60957-61110]"
    }, {
      "left" : "compiler.report(t.makeError(n, CONFLICTING_SHAPE_TYPE,\n                                        \"struct\", functionPrivateName));",
      "right" : "compiler.report(t.makeError(n, CONFLICTING_SHAPE_TYPE,\n                                        \"struct\", functionPrivateName));",
      "info" : "ExpressionStatement[60943-61070]:ExpressionStatement[60971-61098]"
    }, {
      "left" : "if (functionType.makesDicts() && !proto.isDict())",
      "right" : "if (functionType.makesDicts() && !proto.isDict())",
      "info" : "IfStatement[61088-61289]:IfStatement[61116-61317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61138-61289]:Block[61166-61317]"
    }, {
      "left" : "compiler.report(t.makeError(n, CONFLICTING_SHAPE_TYPE,\n                                        \"dict\", functionPrivateName));",
      "right" : "compiler.report(t.makeError(n, CONFLICTING_SHAPE_TYPE,\n                                        \"dict\", functionPrivateName));",
      "info" : "ExpressionStatement[61152-61277]:ExpressionStatement[61180-61305]"
    }, {
      "left" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
      "right" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
      "info" : "EnhancedForStatement[61370-62052]:EnhancedForStatement[61398-62080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61439-62052]:Block[61467-62080]"
    }, {
      "left" : "boolean badImplementedType = false;",
      "right" : "boolean badImplementedType = false;",
      "info" : "VariableDeclarationStatement[61451-61486]:VariableDeclarationStatement[61479-61514]"
    }, {
      "left" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
      "right" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
      "info" : "VariableDeclarationStatement[61497-61558]:VariableDeclarationStatement[61525-61586]"
    }, {
      "left" : "if (baseInterfaceObj != null)",
      "right" : "if (baseInterfaceObj != null)",
      "info" : "IfStatement[61569-61925]:IfStatement[61597-61953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61599-61867]:Block[61627-61895]"
    }, {
      "left" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
      "right" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
      "info" : "VariableDeclarationStatement[61613-61697]:VariableDeclarationStatement[61641-61725]"
    }, {
      "left" : "if (interfaceConstructor != null &&\n                !interfaceConstructor.isInterface())",
      "right" : "if (interfaceConstructor != null &&\n                !interfaceConstructor.isInterface())",
      "info" : "IfStatement[61710-61855]:IfStatement[61738-61883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61799-61855]:Block[61827-61883]"
    }, {
      "left" : "badImplementedType = true;",
      "right" : "badImplementedType = true;",
      "info" : "ExpressionStatement[61815-61841]:ExpressionStatement[61843-61869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61873-61925]:Block[61901-61953]"
    }, {
      "left" : "badImplementedType = true;",
      "right" : "badImplementedType = true;",
      "info" : "ExpressionStatement[61887-61913]:ExpressionStatement[61915-61941]"
    }, {
      "left" : "if (badImplementedType)",
      "right" : "if (badImplementedType)",
      "info" : "IfStatement[61936-62042]:IfStatement[61964-62070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61960-62042]:Block[61988-62070]"
    }, {
      "left" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
      "right" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
      "info" : "ExpressionStatement[61974-62030]:ExpressionStatement[62002-62058]"
    }, {
      "left" : "validator.expectAllInterfaceProperties(t, n, functionType);",
      "right" : "validator.expectAllInterfaceProperties(t, n, functionType);",
      "info" : "ExpressionStatement[62089-62148]:ExpressionStatement[62117-62176]"
    }, {
      "left" : "if (functionType.isInterface())",
      "right" : "if (functionType.isInterface())",
      "info" : "IfStatement[62168-63308]:IfStatement[62196-63336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62200-63308]:Block[62228-63336]"
    }, {
      "left" : "for (ObjectType extInterface : functionType.getExtendedInterfaces())",
      "right" : "for (ObjectType extInterface : functionType.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[62255-62601]:EnhancedForStatement[62283-62629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62324-62601]:Block[62352-62629]"
    }, {
      "left" : "if (extInterface.getConstructor() != null\n            && !extInterface.getConstructor().isInterface())",
      "right" : "if (extInterface.getConstructor() != null\n            && !extInterface.getConstructor().isInterface())",
      "info" : "IfStatement[62334-62593]:IfStatement[62362-62621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62437-62593]:Block[62465-62621]"
    }, {
      "left" : "compiler.report(\n              t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                          \"interface\", functionPrivateName));",
      "right" : "compiler.report(\n              t.makeError(n, CONFLICTING_EXTENDED_TYPE,\n                          \"interface\", functionPrivateName));",
      "info" : "ExpressionStatement[62449-62583]:ExpressionStatement[62477-62611]"
    }, {
      "left" : "if (functionType.getExtendedInterfacesCount() > 1)",
      "right" : "if (functionType.getExtendedInterfacesCount() > 1)",
      "info" : "IfStatement[62675-63302]:IfStatement[62703-63330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62726-63302]:Block[62754-63330]"
    }, {
      "left" : "HashMap<String, ObjectType> properties\n            = new HashMap<String, ObjectType>();",
      "right" : "HashMap<String, ObjectType> properties\n            = new HashMap<String, ObjectType>();",
      "info" : "VariableDeclarationStatement[62798-62885]:VariableDeclarationStatement[62826-62913]"
    }, {
      "left" : "HashMap<String, ObjectType> currentProperties\n            = new HashMap<String, ObjectType>();",
      "right" : "HashMap<String, ObjectType> currentProperties\n            = new HashMap<String, ObjectType>();",
      "info" : "VariableDeclarationStatement[62894-62988]:VariableDeclarationStatement[62922-63016]"
    }, {
      "left" : "for (ObjectType interfaceType : functionType.getExtendedInterfaces())",
      "right" : "for (ObjectType interfaceType : functionType.getExtendedInterfaces())",
      "info" : "EnhancedForStatement[62997-63294]:EnhancedForStatement[63025-63322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63067-63294]:Block[63095-63322]"
    }, {
      "left" : "currentProperties.clear();",
      "right" : "currentProperties.clear();",
      "info" : "ExpressionStatement[63079-63105]:ExpressionStatement[63107-63133]"
    }, {
      "left" : "checkInterfaceConflictProperties(t, n, functionPrivateName,\n              properties, currentProperties, interfaceType);",
      "right" : "checkInterfaceConflictProperties(t, n, functionPrivateName,\n              properties, currentProperties, interfaceType);",
      "info" : "ExpressionStatement[63116-63236]:ExpressionStatement[63144-63264]"
    }, {
      "left" : "properties.putAll(currentProperties);",
      "right" : "properties.putAll(currentProperties);",
      "info" : "ExpressionStatement[63247-63284]:ExpressionStatement[63275-63312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63587-65658]:Block[63615-65686]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[63593-63624]:VariableDeclarationStatement[63621-63652]"
    }, {
      "left" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
      "right" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[63629-63696]:VariableDeclarationStatement[63657-63724]"
    }, {
      "left" : "if (!childType.canBeCalled())",
      "right" : "if (!childType.canBeCalled())",
      "info" : "IfStatement[63702-63834]:IfStatement[63730-63862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63732-63834]:Block[63760-63862]"
    }, {
      "left" : "report(t, n, NOT_CALLABLE, childType.toString());",
      "right" : "report(t, n, NOT_CALLABLE, childType.toString());",
      "info" : "ExpressionStatement[63740-63789]:ExpressionStatement[63768-63817]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[63796-63814]:ExpressionStatement[63824-63842]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[63821-63828]:ReturnStatement[63849-63856]"
    }, {
      "left" : "if (childType.isFunctionType())",
      "right" : "if (childType.isFunctionType())",
      "info" : "IfStatement[63965-65434]:IfStatement[63993-65462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63997-65396]:Block[64025-65424]"
    }, {
      "left" : "FunctionType functionType = childType.toMaybeFunctionType();",
      "right" : "FunctionType functionType = childType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[64005-64065]:VariableDeclarationStatement[64033-64093]"
    }, {
      "left" : "boolean isExtern = false;",
      "right" : "boolean isExtern = false;",
      "info" : "VariableDeclarationStatement[64073-64098]:VariableDeclarationStatement[64101-64126]"
    }, {
      "left" : "JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();",
      "right" : "JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[64105-64163]:VariableDeclarationStatement[64133-64191]"
    }, {
      "left" : "if (functionJSDocInfo != null  &&\n          functionJSDocInfo.getAssociatedNode() != null)",
      "right" : "if (functionJSDocInfo != null  &&\n          functionJSDocInfo.getAssociatedNode() != null)",
      "info" : "IfStatement[64170-64344]:IfStatement[64198-64372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64261-64344]:Block[64289-64372]"
    }, {
      "left" : "isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();",
      "right" : "isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();",
      "info" : "ExpressionStatement[64271-64336]:ExpressionStatement[64299-64364]"
    }, {
      "left" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern))",
      "right" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern))",
      "info" : "IfStatement[64497-64798]:IfStatement[64525-64826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64719-64798]:Block[64747-64826]"
    }, {
      "left" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
      "right" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
      "info" : "ExpressionStatement[64729-64790]:ExpressionStatement[64757-64818]"
    }, {
      "left" : "if (functionType.isOrdinaryFunction() &&\n          !functionType.getTypeOfThis().isUnknownType() &&\n          !(functionType.getTypeOfThis().toObjectType() != null &&\n          functionType.getTypeOfThis().toObjectType().isNativeObjectType()) &&\n          !(child.isGetElem() ||\n            child.isGetProp()))",
      "right" : "if (functionType.isOrdinaryFunction() &&\n          !functionType.getTypeOfThis().isUnknownType() &&\n          !(functionType.getTypeOfThis().toObjectType() != null &&\n          functionType.getTypeOfThis().toObjectType().isNativeObjectType()) &&\n          !(child.isGetElem() ||\n            child.isGetProp()))",
      "info" : "IfStatement[64901-65288]:IfStatement[64929-65316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65212-65288]:Block[65240-65316]"
    }, {
      "left" : "report(t, n, EXPECTED_THIS_TYPE, functionType.toString());",
      "right" : "report(t, n, EXPECTED_THIS_TYPE, functionType.toString());",
      "info" : "ExpressionStatement[65222-65280]:ExpressionStatement[65250-65308]"
    }, {
      "left" : "visitParameterList(t, n, functionType);",
      "right" : "visitParameterList(t, n, functionType);",
      "info" : "ExpressionStatement[65296-65335]:ExpressionStatement[65324-65363]"
    }, {
      "left" : "ensureTyped(t, n, functionType.getReturnType());",
      "right" : "ensureTyped(t, n, functionType.getReturnType());",
      "info" : "ExpressionStatement[65342-65390]:ExpressionStatement[65370-65418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65402-65434]:Block[65430-65462]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[65410-65428]:ExpressionStatement[65438-65456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65819-67112]:Block[65847-67140]"
    }, {
      "left" : "Iterator<Node> arguments = call.children().iterator();",
      "right" : "Iterator<Node> arguments = call.children().iterator();",
      "info" : "VariableDeclarationStatement[65825-65879]:VariableDeclarationStatement[65853-65907]"
    }, {
      "left" : "arguments.next();",
      "right" : "arguments.next();",
      "info" : "ExpressionStatement[65884-65901]:ExpressionStatement[65912-65929]"
    }, {
      "left" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
      "right" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
      "info" : "VariableDeclarationStatement[65933-66001]:VariableDeclarationStatement[65961-66029]"
    }, {
      "left" : "int ordinal = 0;",
      "right" : "int ordinal = 0;",
      "info" : "VariableDeclarationStatement[66006-66022]:VariableDeclarationStatement[66034-66050]"
    }, {
      "left" : "Node parameter = null;",
      "right" : "Node parameter = null;",
      "info" : "VariableDeclarationStatement[66027-66049]:VariableDeclarationStatement[66055-66077]"
    }, {
      "left" : "Node argument = null;",
      "right" : "Node argument = null;",
      "info" : "VariableDeclarationStatement[66054-66075]:VariableDeclarationStatement[66082-66103]"
    }, {
      "left" : "while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs()))",
      "right" : "while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs()))",
      "info" : "WhileStatement[66080-66609]:WhileStatement[66108-66637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66203-66609]:Block[66231-66637]"
    }, {
      "left" : "if (parameters.hasNext())",
      "right" : "if (parameters.hasNext())",
      "info" : "IfStatement[66347-66421]:IfStatement[66375-66449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66373-66421]:Block[66401-66449]"
    }, {
      "left" : "parameter = parameters.next();",
      "right" : "parameter = parameters.next();",
      "info" : "ExpressionStatement[66383-66413]:ExpressionStatement[66411-66441]"
    }, {
      "left" : "argument = arguments.next();",
      "right" : "argument = arguments.next();",
      "info" : "ExpressionStatement[66428-66456]:ExpressionStatement[66456-66484]"
    }, {
      "left" : "ordinal++;",
      "right" : "ordinal++;",
      "info" : "ExpressionStatement[66463-66473]:ExpressionStatement[66491-66501]"
    }, {
      "left" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
      "right" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
      "info" : "ExpressionStatement[66481-66603]:ExpressionStatement[66509-66631]"
    }, {
      "left" : "int numArgs = call.getChildCount() - 1;",
      "right" : "int numArgs = call.getChildCount() - 1;",
      "info" : "VariableDeclarationStatement[66615-66654]:VariableDeclarationStatement[66643-66682]"
    }, {
      "left" : "int minArgs = functionType.getMinArguments();",
      "right" : "int minArgs = functionType.getMinArguments();",
      "info" : "VariableDeclarationStatement[66659-66704]:VariableDeclarationStatement[66687-66732]"
    }, {
      "left" : "int maxArgs = functionType.getMaxArguments();",
      "right" : "int maxArgs = functionType.getMaxArguments();",
      "info" : "VariableDeclarationStatement[66709-66754]:VariableDeclarationStatement[66737-66782]"
    }, {
      "left" : "if (minArgs > numArgs || maxArgs < numArgs)",
      "right" : "if (minArgs > numArgs || maxArgs < numArgs)",
      "info" : "IfStatement[66759-67108]:IfStatement[66787-67136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66803-67108]:Block[66831-67136]"
    }, {
      "left" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
      "right" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
      "info" : "ExpressionStatement[66811-67102]:ExpressionStatement[66839-67130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67391-68238]:Block[67419-68266]"
    }, {
      "left" : "JSType jsType = getJSType(t.getEnclosingFunction());",
      "right" : "JSType jsType = getJSType(t.getEnclosingFunction());",
      "info" : "VariableDeclarationStatement[67397-67449]:VariableDeclarationStatement[67425-67477]"
    }, {
      "left" : "if (jsType.isFunctionType())",
      "right" : "if (jsType.isFunctionType())",
      "info" : "IfStatement[67455-68234]:IfStatement[67483-68262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67484-68234]:Block[67512-68262]"
    }, {
      "left" : "FunctionType functionType = jsType.toMaybeFunctionType();",
      "right" : "FunctionType functionType = jsType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[67492-67549]:VariableDeclarationStatement[67520-67577]"
    }, {
      "left" : "JSType returnType = functionType.getReturnType();",
      "right" : "JSType returnType = functionType.getReturnType();",
      "info" : "VariableDeclarationStatement[67557-67606]:VariableDeclarationStatement[67585-67634]"
    }, {
      "left" : "if (returnType == null)",
      "right" : "if (returnType == null)",
      "info" : "IfStatement[67714-67794]:IfStatement[67742-67822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67738-67794]:Block[67766-67822]"
    }, {
      "left" : "returnType = getNativeType(VOID_TYPE);",
      "right" : "returnType = getNativeType(VOID_TYPE);",
      "info" : "ExpressionStatement[67748-67786]:ExpressionStatement[67776-67814]"
    }, {
      "left" : "Node valueNode = n.getFirstChild();",
      "right" : "Node valueNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[67846-67881]:VariableDeclarationStatement[67874-67909]"
    }, {
      "left" : "JSType actualReturnType;",
      "right" : "JSType actualReturnType;",
      "info" : "VariableDeclarationStatement[67888-67912]:VariableDeclarationStatement[67916-67940]"
    }, {
      "left" : "if (valueNode == null)",
      "right" : "if (valueNode == null)",
      "info" : "IfStatement[67919-68091]:IfStatement[67947-68119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67942-68027]:Block[67970-68055]"
    }, {
      "left" : "actualReturnType = getNativeType(VOID_TYPE);",
      "right" : "actualReturnType = getNativeType(VOID_TYPE);",
      "info" : "ExpressionStatement[67952-67996]:ExpressionStatement[67980-68024]"
    }, {
      "left" : "valueNode = n;",
      "right" : "valueNode = n;",
      "info" : "ExpressionStatement[68005-68019]:ExpressionStatement[68033-68047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68033-68091]:Block[68061-68119]"
    }, {
      "left" : "actualReturnType = getJSType(valueNode);",
      "right" : "actualReturnType = getJSType(valueNode);",
      "info" : "ExpressionStatement[68043-68083]:ExpressionStatement[68071-68111]"
    }, {
      "left" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
      "right" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
      "info" : "ExpressionStatement[68118-68228]:ExpressionStatement[68146-68256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68699-70315]:Block[68727-70343]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[68705-68735]:VariableDeclarationStatement[68733-68763]"
    }, {
      "left" : "JSType leftType = getJSType(left);",
      "right" : "JSType leftType = getJSType(left);",
      "info" : "VariableDeclarationStatement[68740-68774]:VariableDeclarationStatement[68768-68802]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[68779-68809]:VariableDeclarationStatement[68807-68837]"
    }, {
      "left" : "JSType rightType = getJSType(right);",
      "right" : "JSType rightType = getJSType(right);",
      "info" : "VariableDeclarationStatement[68814-68850]:VariableDeclarationStatement[68842-68878]"
    }, {
      "left" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(op));\n    }",
      "right" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(op));\n    }",
      "info" : "SwitchStatement[68855-70288]:SwitchStatement[68883-70316]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[68875-68897]:SwitchCase[68903-68925]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[68904-68926]:SwitchCase[68932-68954]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[68933-68948]:SwitchCase[68961-68976]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[68955-68970]:SwitchCase[68983-68998]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[68977-69000]:SwitchCase[69005-69028]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[69007-69023]:SwitchCase[69035-69051]"
    }, {
      "left" : "if (!leftType.matchesInt32Context())",
      "right" : "if (!leftType.matchesInt32Context())",
      "info" : "IfStatement[69032-69193]:IfStatement[69060-69221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69069-69193]:Block[69097-69221]"
    }, {
      "left" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
      "right" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
      "info" : "ExpressionStatement[69081-69183]:ExpressionStatement[69109-69211]"
    }, {
      "left" : "if (!rightType.matchesUint32Context())",
      "right" : "if (!rightType.matchesUint32Context())",
      "info" : "IfStatement[69202-69367]:IfStatement[69230-69395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69241-69367]:Block[69269-69395]"
    }, {
      "left" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
      "right" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
      "info" : "ExpressionStatement[69253-69357]:ExpressionStatement[69281-69385]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[69376-69382]:BreakStatement[69404-69410]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[69390-69412]:SwitchCase[69418-69440]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[69419-69441]:SwitchCase[69447-69469]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[69448-69470]:SwitchCase[69476-69498]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[69477-69499]:SwitchCase[69505-69527]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[69506-69521]:SwitchCase[69534-69549]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[69528-69543]:SwitchCase[69556-69571]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[69550-69565]:SwitchCase[69578-69593]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[69572-69587]:SwitchCase[69600-69615]"
    }, {
      "left" : "validator.expectNumber(t, left, leftType, \"left operand\");",
      "right" : "validator.expectNumber(t, left, leftType, \"left operand\");",
      "info" : "ExpressionStatement[69596-69654]:ExpressionStatement[69624-69682]"
    }, {
      "left" : "validator.expectNumber(t, right, rightType, \"right operand\");",
      "right" : "validator.expectNumber(t, right, rightType, \"right operand\");",
      "info" : "ExpressionStatement[69663-69724]:ExpressionStatement[69691-69752]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[69733-69739]:BreakStatement[69761-69767]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[69747-69772]:SwitchCase[69775-69800]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[69779-69804]:SwitchCase[69807-69832]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[69811-69835]:SwitchCase[69839-69863]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[69842-69860]:SwitchCase[69870-69888]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[69867-69885]:SwitchCase[69895-69913]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[69892-69909]:SwitchCase[69920-69937]"
    }, {
      "left" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
      "right" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
      "info" : "ExpressionStatement[69918-70017]:ExpressionStatement[69946-70045]"
    }, {
      "left" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
      "right" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
      "info" : "ExpressionStatement[70026-70128]:ExpressionStatement[70054-70156]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[70137-70143]:BreakStatement[70165-70171]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[70151-70173]:SwitchCase[70179-70201]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[70180-70195]:SwitchCase[70208-70223]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[70204-70210]:BreakStatement[70232-70238]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[70218-70226]:SwitchCase[70246-70254]"
    }, {
      "left" : "report(t, n, UNEXPECTED_TOKEN, Token.name(op));",
      "right" : "report(t, n, UNEXPECTED_TOKEN, Token.name(op));",
      "info" : "ExpressionStatement[70235-70282]:ExpressionStatement[70263-70310]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[70293-70311]:ExpressionStatement[70321-70339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70843-71372]:Block[70871-71400]"
    }, {
      "left" : "if (declInfo == null || !declInfo.hasEnumParameterType())",
      "right" : "if (declInfo == null || !declInfo.hasEnumParameterType())",
      "info" : "IfStatement[70849-70928]:IfStatement[70877-70956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70907-70928]:Block[70935-70956]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[70915-70922]:ReturnStatement[70943-70950]"
    }, {
      "left" : "JSType valueType = getJSType(value);",
      "right" : "JSType valueType = getJSType(value);",
      "info" : "VariableDeclarationStatement[70934-70970]:VariableDeclarationStatement[70962-70998]"
    }, {
      "left" : "if (!valueType.isEnumType())",
      "right" : "if (!valueType.isEnumType())",
      "info" : "IfStatement[70975-71025]:IfStatement[71003-71053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71004-71025]:Block[71032-71053]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[71012-71019]:ReturnStatement[71040-71047]"
    }, {
      "left" : "EnumType valueEnumType = valueType.toMaybeEnumType();",
      "right" : "EnumType valueEnumType = valueType.toMaybeEnumType();",
      "info" : "VariableDeclarationStatement[71031-71084]:VariableDeclarationStatement[71059-71112]"
    }, {
      "left" : "JSType valueEnumPrimitiveType =\n        valueEnumType.getElementsType().getPrimitiveType();",
      "right" : "JSType valueEnumPrimitiveType =\n        valueEnumType.getElementsType().getPrimitiveType();",
      "info" : "VariableDeclarationStatement[71089-71180]:VariableDeclarationStatement[71117-71208]"
    }, {
      "left" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n        declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry),\n        \"incompatible enum element types\");",
      "right" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n        declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry),\n        \"incompatible enum element types\");",
      "info" : "ExpressionStatement[71185-71368]:ExpressionStatement[71213-71396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71515-71943]:Block[71543-71971]"
    }, {
      "left" : "JSType jsType = n.getJSType();",
      "right" : "JSType jsType = n.getJSType();",
      "info" : "VariableDeclarationStatement[71521-71551]:VariableDeclarationStatement[71549-71579]"
    }, {
      "left" : "if (jsType == null)",
      "right" : "if (jsType == null)",
      "info" : "IfStatement[71556-71939]:IfStatement[71584-71967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71576-71905]:Block[71604-71933]"
    }, {
      "left" : "return getNativeType(UNKNOWN_TYPE);",
      "right" : "return getNativeType(UNKNOWN_TYPE);",
      "info" : "ReturnStatement[71864-71899]:ReturnStatement[71892-71927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71911-71939]:Block[71939-71967]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[71919-71933]:ReturnStatement[71947-71961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72432-72489]:Block[72460-72517]"
    }, {
      "left" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
      "right" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[72438-72485]:ExpressionStatement[72466-72513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72562-72611]:Block[72590-72639]"
    }, {
      "left" : "ensureTyped(t, n, getNativeType(type));",
      "right" : "ensureTyped(t, n, getNativeType(type));",
      "info" : "ExpressionStatement[72568-72607]:ExpressionStatement[72596-72635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73490-74129]:Block[73518-74157]"
    }, {
      "left" : "Preconditions.checkState(!n.isFunction() ||\n            type.isFunctionType() ||\n            type.isUnknownType());",
      "right" : "Preconditions.checkState(!n.isFunction() ||\n            type.isFunctionType() ||\n            type.isUnknownType());",
      "info" : "ExpressionStatement[73554-73669]:ExpressionStatement[73582-73697]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[73754-73788]:VariableDeclarationStatement[73782-73816]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[73793-74060]:IfStatement[73821-74088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73811-74060]:Block[73839-74088]"
    }, {
      "left" : "if (info.isImplicitCast() && !inExterns)",
      "right" : "if (info.isImplicitCast() && !inExterns)",
      "info" : "IfStatement[73819-74054]:IfStatement[73847-74082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73860-74054]:Block[73888-74082]"
    }, {
      "left" : "String propName = n.isGetProp() ?\n            n.getLastChild().getString() : \"(missing)\";",
      "right" : "String propName = n.isGetProp() ?\n            n.getLastChild().getString() : \"(missing)\";",
      "info" : "VariableDeclarationStatement[73870-73959]:VariableDeclarationStatement[73898-73987]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
      "right" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
      "info" : "ExpressionStatement[73968-74046]:ExpressionStatement[73996-74074]"
    }, {
      "left" : "if (n.getJSType() == null)",
      "right" : "if (n.getJSType() == null)",
      "info" : "IfStatement[74066-74125]:IfStatement[74094-74153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74093-74125]:Block[74121-74153]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[74101-74119]:ExpressionStatement[74129-74147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74278-74400]:Block[74306-74428]"
    }, {
      "left" : "int total = nullCount + unknownCount + typedCount;",
      "right" : "int total = nullCount + unknownCount + typedCount;",
      "info" : "VariableDeclarationStatement[74284-74334]:VariableDeclarationStatement[74312-74362]"
    }, {
      "left" : "return (total == 0) ? 0.0 : (100.0 * typedCount) / total;",
      "right" : "return (total == 0) ? 0.0 : (100.0 * typedCount) / total;",
      "info" : "ReturnStatement[74339-74396]:ReturnStatement[74367-74424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74454-74506]:Block[74482-74534]"
    }, {
      "left" : "return typeRegistry.getNativeType(typeId);",
      "right" : "return typeRegistry.getNativeType(typeId);",
      "info" : "ReturnStatement[74460-74502]:ReturnStatement[74488-74530]"
    } ]
  },
  "interFileMappings" : { }
}