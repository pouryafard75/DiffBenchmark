{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "String sourceFile;",
      "right" : "String sourceFile;",
      "info" : "FieldDeclaration[1379-1443]:FieldDeclaration[1432-1496]"
    }, {
      "left" : "Position originalPosition;",
      "right" : "Position originalPosition;",
      "info" : "FieldDeclaration[1449-1670]:FieldDeclaration[1502-1723]"
    }, {
      "left" : "Position startPosition;",
      "right" : "Position startPosition;",
      "info" : "FieldDeclaration[1676-1837]:FieldDeclaration[1729-1890]"
    }, {
      "left" : "Position endPosition;",
      "right" : "Position endPosition;",
      "info" : "FieldDeclaration[1843-2000]:FieldDeclaration[1896-2053]"
    }, {
      "left" : "String originalName;",
      "right" : "String originalName;",
      "info" : "FieldDeclaration[2006-2147]:FieldDeclaration[2059-2200]"
    }, {
      "left" : "private List<Mapping> mappings = Lists.newArrayList();",
      "right" : "private List<Mapping> mappings = Lists.newArrayList();",
      "info" : "FieldDeclaration[2929-3067]:FieldDeclaration[3916-4054]"
    }, {
      "left" : "private Position offsetPosition = new Position(0, 0);",
      "right" : "private Position offsetPosition = new Position(0, 0);",
      "info" : "FieldDeclaration[3071-3261]:FieldDeclaration[4058-4248]"
    }, {
      "left" : "private Position prefixPosition = new Position(0, 0);",
      "right" : "private Position prefixPosition = new Position(0, 0);",
      "info" : "FieldDeclaration[3265-3485]:FieldDeclaration[4252-4472]"
    }, {
      "left" : "private static String escapeString(String value)",
      "right" : "private static String escapeString(String value)",
      "info" : "MethodDeclaration[3489-3657]:MethodDeclaration[4476-4644]"
    }, {
      "left" : "private String lastSourceFileEscaped = null;",
      "right" : "private String lastSourceFileEscaped = null;",
      "info" : "FieldDeclaration[3700-3744]:FieldDeclaration[2448-2492]"
    }, {
      "left" : "void setWrapperPrefix(String prefix)",
      "right" : "void setWrapperPrefix(String prefix)",
      "info" : "MethodDeclaration[6041-6684]:MethodDeclaration[6834-7477]"
    }, {
      "left" : "void setStartingPosition(int offsetLine, int offsetIndex)",
      "right" : "void setStartingPosition(int offsetLine, int offsetIndex)",
      "info" : "MethodDeclaration[6688-7447]:MethodDeclaration[7481-8240]"
    }, {
      "left" : "void reset()",
      "right" : "void reset()",
      "info" : "MethodDeclaration[7451-7678]:MethodDeclaration[8244-8471]"
    }, {
      "left" : "private final Appendable out;",
      "right" : "private final Appendable out;",
      "info" : "FieldDeclaration[10566-10595]:FieldDeclaration[11473-11502]"
    }, {
      "left" : "private int line;",
      "right" : "private int line;",
      "info" : "FieldDeclaration[10600-10617]:FieldDeclaration[14659-14676]"
    }, {
      "left" : "private int col;",
      "right" : "private int col;",
      "info" : "FieldDeclaration[10622-10638]:FieldDeclaration[14681-14697]"
    }, {
      "left" : "private boolean firstChar = true;",
      "right" : "private boolean firstChar = true;",
      "info" : "FieldDeclaration[10704-10737]:FieldDeclaration[11569-11602]"
    }, {
      "left" : "private final static String UNMAPPED_STRING = \"-1\";",
      "right" : "private final static String UNMAPPED_STRING = \"-1\";",
      "info" : "FieldDeclaration[10743-10794]:FieldDeclaration[11608-11659]"
    }, {
      "left" : "private final static int UNMAPPED = -1;",
      "right" : "private final static int UNMAPPED = -1;",
      "info" : "FieldDeclaration[10800-10839]:FieldDeclaration[1136-1175]"
    }, {
      "left" : "LineMapper(Appendable out)",
      "right" : "LineMapper(Appendable out)",
      "info" : "MethodDeclaration[10845-10901]:MethodDeclaration[11752-11808]"
    }, {
      "left" : "private int getAdjustedLine(Position p)",
      "right" : "private int getAdjustedLine(Position p)",
      "info" : "MethodDeclaration[13849-14035]:MethodDeclaration[16106-16292]"
    }, {
      "left" : "private int getAdjustedCol(Position p)",
      "right" : "private int getAdjustedCol(Position p)",
      "info" : "MethodDeclaration[14041-14406]:MethodDeclaration[16298-16663]"
    }, {
      "left" : "private boolean isOverlapped(Mapping m1, Mapping m2)",
      "right" : "private boolean isOverlapped(Mapping m1, Mapping m2)",
      "info" : "MethodDeclaration[14412-14867]:MethodDeclaration[16669-17124]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3541-3548]:Modifier[4528-4535]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3549-3555]:Modifier[4536-4542]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3556-3562]:SimpleType[4543-4549]"
    }, {
      "left" : "escapeString",
      "right" : "escapeString",
      "info" : "SimpleName[3563-3575]:SimpleName[4550-4562]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[3576-3588]:SingleVariableDeclaration[4563-4575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3590-3657]:Block[4577-4644]"
    }, {
      "left" : "return CodeGenerator.escapeToDoubleQuotedJsString(value);",
      "right" : "return CodeGenerator.escapeToDoubleQuotedJsString(value);",
      "info" : "ReturnStatement[3596-3653]:ReturnStatement[4583-4640]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6288-6292]:PrimitiveType[7081-7085]"
    }, {
      "left" : "setWrapperPrefix",
      "right" : "setWrapperPrefix",
      "info" : "SimpleName[6293-6309]:SimpleName[7086-7102]"
    }, {
      "left" : "String prefix",
      "right" : "String prefix",
      "info" : "SingleVariableDeclaration[6310-6323]:SingleVariableDeclaration[7103-7116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6325-6684]:Block[7118-7477]"
    }, {
      "left" : "int prefixLine = 0;",
      "right" : "int prefixLine = 0;",
      "info" : "VariableDeclarationStatement[6389-6408]:VariableDeclarationStatement[7182-7201]"
    }, {
      "left" : "int prefixIndex = 0;",
      "right" : "int prefixIndex = 0;",
      "info" : "VariableDeclarationStatement[6413-6433]:VariableDeclarationStatement[7206-7226]"
    }, {
      "left" : "for (int i = 0; i < prefix.length(); ++i)",
      "right" : "for (int i = 0; i < prefix.length(); ++i)",
      "info" : "ForStatement[6439-6619]:ForStatement[7232-7412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6481-6619]:Block[7274-7412]"
    }, {
      "left" : "if (prefix.charAt(i) == '\\n')",
      "right" : "if (prefix.charAt(i) == '\\n')",
      "info" : "IfStatement[6489-6613]:IfStatement[7282-7406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6519-6575]:Block[7312-7368]"
    }, {
      "left" : "prefixLine++;",
      "right" : "prefixLine++;",
      "info" : "ExpressionStatement[6529-6542]:ExpressionStatement[7322-7335]"
    }, {
      "left" : "prefixIndex = 0;",
      "right" : "prefixIndex = 0;",
      "info" : "ExpressionStatement[6551-6567]:ExpressionStatement[7344-7360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6581-6613]:Block[7374-7406]"
    }, {
      "left" : "prefixIndex++;",
      "right" : "prefixIndex++;",
      "info" : "ExpressionStatement[6591-6605]:ExpressionStatement[7384-7398]"
    }, {
      "left" : "prefixPosition = new Position(prefixLine, prefixIndex);",
      "right" : "prefixPosition = new Position(prefixLine, prefixIndex);",
      "info" : "ExpressionStatement[6625-6680]:ExpressionStatement[7418-7473]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7183-7187]:PrimitiveType[7976-7980]"
    }, {
      "left" : "setStartingPosition",
      "right" : "setStartingPosition",
      "info" : "SimpleName[7188-7207]:SimpleName[7981-8000]"
    }, {
      "left" : "int offsetLine",
      "right" : "int offsetLine",
      "info" : "SingleVariableDeclaration[7208-7222]:SingleVariableDeclaration[8001-8015]"
    }, {
      "left" : "int offsetIndex",
      "right" : "int offsetIndex",
      "info" : "SingleVariableDeclaration[7224-7239]:SingleVariableDeclaration[8017-8032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7241-7447]:Block[8034-8240]"
    }, {
      "left" : "offsetPosition = new Position(offsetLine, offsetIndex);",
      "right" : "offsetPosition = new Position(offsetLine, offsetIndex);",
      "info" : "ExpressionStatement[7388-7443]:ExpressionStatement[8181-8236]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7541-7545]:PrimitiveType[8334-8338]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[7546-7551]:SimpleName[8339-8344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7554-7678]:Block[8347-8471]"
    }, {
      "left" : "mappings = Lists.newArrayList();",
      "right" : "mappings = Lists.newArrayList();",
      "info" : "ExpressionStatement[7560-7592]:ExpressionStatement[8353-8385]"
    }, {
      "left" : "offsetPosition = new Position(0, 0);",
      "right" : "offsetPosition = new Position(0, 0);",
      "info" : "ExpressionStatement[7597-7633]:ExpressionStatement[8390-8426]"
    }, {
      "left" : "prefixPosition = new Position(0, 0);",
      "right" : "prefixPosition = new Position(0, 0);",
      "info" : "ExpressionStatement[7638-7674]:ExpressionStatement[8431-8467]"
    }, {
      "left" : "LineMapper",
      "right" : "LineMapper",
      "info" : "SimpleName[10845-10855]:SimpleName[11752-11762]"
    }, {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[10856-10870]:SingleVariableDeclaration[11763-11777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10872-10901]:Block[11779-11808]"
    }, {
      "left" : "this.out = out;",
      "right" : "this.out = out;",
      "info" : "ExpressionStatement[10880-10895]:ExpressionStatement[11787-11802]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13923-13930]:Modifier[16180-16187]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13931-13934]:PrimitiveType[16188-16191]"
    }, {
      "left" : "getAdjustedLine",
      "right" : "getAdjustedLine",
      "info" : "SimpleName[13935-13950]:SimpleName[16192-16207]"
    }, {
      "left" : "Position p",
      "right" : "Position p",
      "info" : "SingleVariableDeclaration[13951-13961]:SingleVariableDeclaration[16208-16218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13963-14035]:Block[16220-16292]"
    }, {
      "left" : "return p.getLineNumber() + prefixPosition.getLineNumber();",
      "right" : "return p.getLineNumber() + prefixPosition.getLineNumber();",
      "info" : "ReturnStatement[13971-14029]:ReturnStatement[16228-16286]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14117-14124]:Modifier[16374-16381]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14125-14128]:PrimitiveType[16382-16385]"
    }, {
      "left" : "getAdjustedCol",
      "right" : "getAdjustedCol",
      "info" : "SimpleName[14129-14143]:SimpleName[16386-16400]"
    }, {
      "left" : "Position p",
      "right" : "Position p",
      "info" : "SingleVariableDeclaration[14144-14154]:SingleVariableDeclaration[16401-16411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14156-14406]:Block[16413-16663]"
    }, {
      "left" : "int rawLine = p.getLineNumber();",
      "right" : "int rawLine = p.getLineNumber();",
      "info" : "VariableDeclarationStatement[14164-14196]:VariableDeclarationStatement[16421-16453]"
    }, {
      "left" : "int rawCol = p.getCharacterIndex();",
      "right" : "int rawCol = p.getCharacterIndex();",
      "info" : "VariableDeclarationStatement[14203-14238]:VariableDeclarationStatement[16460-16495]"
    }, {
      "left" : "return (rawLine != 0)\n          ? rawCol : rawCol + prefixPosition.getCharacterIndex();",
      "right" : "return (rawLine != 0)\n          ? rawCol : rawCol + prefixPosition.getCharacterIndex();",
      "info" : "ReturnStatement[14313-14400]:ReturnStatement[16570-16657]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14477-14484]:Modifier[16734-16741]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14485-14492]:PrimitiveType[16742-16749]"
    }, {
      "left" : "isOverlapped",
      "right" : "isOverlapped",
      "info" : "SimpleName[14493-14505]:SimpleName[16750-16762]"
    }, {
      "left" : "Mapping m1",
      "right" : "Mapping m1",
      "info" : "SingleVariableDeclaration[14506-14516]:SingleVariableDeclaration[16763-16773]"
    }, {
      "left" : "Mapping m2",
      "right" : "Mapping m2",
      "info" : "SingleVariableDeclaration[14518-14528]:SingleVariableDeclaration[16775-16785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14530-14867]:Block[16787-17124]"
    }, {
      "left" : "int l1 = m1.endPosition.getLineNumber();",
      "right" : "int l1 = m1.endPosition.getLineNumber();",
      "info" : "VariableDeclarationStatement[14619-14659]:VariableDeclarationStatement[16876-16916]"
    }, {
      "left" : "int l2 = m2.startPosition.getLineNumber();",
      "right" : "int l2 = m2.startPosition.getLineNumber();",
      "info" : "VariableDeclarationStatement[14666-14708]:VariableDeclarationStatement[16923-16965]"
    }, {
      "left" : "int c1 = m1.endPosition.getCharacterIndex();",
      "right" : "int c1 = m1.endPosition.getCharacterIndex();",
      "info" : "VariableDeclarationStatement[14715-14759]:VariableDeclarationStatement[16972-17016]"
    }, {
      "left" : "int c2 = m2.startPosition.getCharacterIndex();",
      "right" : "int c2 = m2.startPosition.getCharacterIndex();",
      "info" : "VariableDeclarationStatement[14766-14812]:VariableDeclarationStatement[17023-17069]"
    }, {
      "left" : "return (l1 == l2 && c1 >= c2) || l1 > l2;",
      "right" : "return (l1 == l2 && c1 >= c2) || l1 > l2;",
      "info" : "ReturnStatement[14820-14861]:ReturnStatement[17077-17118]"
    } ]
  },
  "interFileMappings" : { }
}