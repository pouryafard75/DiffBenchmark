{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "static final char replacementChar = '\\uFFFD';",
      "right" : "static final char replacementChar = '\\uFFFD';",
      "info" : "FieldDeclaration[218-263]:FieldDeclaration[218-263]"
    }, {
      "left" : "private CharacterReader reader;",
      "right" : "private CharacterReader reader;",
      "info" : "FieldDeclaration[296-327]:FieldDeclaration[296-327]"
    }, {
      "left" : "private boolean trackErrors = true;",
      "right" : "private boolean trackErrors = true;",
      "info" : "FieldDeclaration[346-381]:FieldDeclaration[346-381]"
    }, {
      "left" : "private List<ParseError> errors = new ArrayList<ParseError>();",
      "right" : "private List<ParseError> errors = new ArrayList<ParseError>();",
      "info" : "FieldDeclaration[386-448]:FieldDeclaration[386-448]"
    }, {
      "left" : "private TokeniserState state = TokeniserState.Data;",
      "right" : "private TokeniserState state = TokeniserState.Data;",
      "info" : "FieldDeclaration[487-538]:FieldDeclaration[487-538]"
    }, {
      "left" : "private Token emitPending;",
      "right" : "private Token emitPending;",
      "info" : "FieldDeclaration[573-599]:FieldDeclaration[573-599]"
    }, {
      "left" : "private boolean isEmitPending = false;",
      "right" : "private boolean isEmitPending = false;",
      "info" : "FieldDeclaration[651-689]:FieldDeclaration[651-689]"
    }, {
      "left" : "private StringBuilder charBuffer = new StringBuilder();",
      "right" : "private StringBuilder charBuffer = new StringBuilder();",
      "info" : "FieldDeclaration[694-749]:FieldDeclaration[694-749]"
    }, {
      "left" : "StringBuilder dataBuffer;",
      "right" : "StringBuilder dataBuffer;",
      "info" : "FieldDeclaration[799-824]:FieldDeclaration[799-824]"
    }, {
      "left" : "Token.Tag tagPending;",
      "right" : "Token.Tag tagPending;",
      "info" : "FieldDeclaration[868-889]:FieldDeclaration[868-889]"
    }, {
      "left" : "Token.Doctype doctypePending;",
      "right" : "Token.Doctype doctypePending;",
      "info" : "FieldDeclaration[920-949]:FieldDeclaration[920-949]"
    }, {
      "left" : "Token.Comment commentPending;",
      "right" : "Token.Comment commentPending;",
      "info" : "FieldDeclaration[977-1006]:FieldDeclaration[977-1006]"
    }, {
      "left" : "private Token.StartTag lastStartTag;",
      "right" : "private Token.StartTag lastStartTag;",
      "info" : "FieldDeclaration[1034-1070]:FieldDeclaration[1034-1070]"
    }, {
      "left" : "private boolean selfClosingFlagAcknowledged = true;",
      "right" : "private boolean selfClosingFlagAcknowledged = true;",
      "info" : "FieldDeclaration[1134-1185]:FieldDeclaration[1134-1185]"
    }, {
      "left" : "Tokeniser(CharacterReader reader)",
      "right" : "Tokeniser(CharacterReader reader)",
      "info" : "MethodDeclaration[1191-1262]:MethodDeclaration[1191-1262]"
    }, {
      "left" : "Token read()",
      "right" : "Token read()",
      "info" : "MethodDeclaration[1268-1922]:MethodDeclaration[1268-1922]"
    }, {
      "left" : "void emit(Token token)",
      "right" : "void emit(Token token)",
      "info" : "MethodDeclaration[1928-2580]:MethodDeclaration[1928-2580]"
    }, {
      "left" : "void emit(String str)",
      "right" : "void emit(String str)",
      "info" : "MethodDeclaration[2586-2819]:MethodDeclaration[2586-2819]"
    }, {
      "left" : "void emit(char c)",
      "right" : "void emit(char c)",
      "info" : "MethodDeclaration[2825-2880]:MethodDeclaration[2825-2880]"
    }, {
      "left" : "TokeniserState getState()",
      "right" : "TokeniserState getState()",
      "info" : "MethodDeclaration[2886-2941]:MethodDeclaration[2886-2941]"
    }, {
      "left" : "void transition(TokeniserState state)",
      "right" : "void transition(TokeniserState state)",
      "info" : "MethodDeclaration[2947-3020]:MethodDeclaration[2947-3020]"
    }, {
      "left" : "void advanceTransition(TokeniserState state)",
      "right" : "void advanceTransition(TokeniserState state)",
      "info" : "MethodDeclaration[3026-3132]:MethodDeclaration[3026-3132]"
    }, {
      "left" : "void acknowledgeSelfClosingFlag()",
      "right" : "void acknowledgeSelfClosingFlag()",
      "info" : "MethodDeclaration[3138-3223]:MethodDeclaration[3138-3223]"
    }, {
      "left" : "Character consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute)",
      "right" : "Character consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute)",
      "info" : "MethodDeclaration[3229-5967]:MethodDeclaration[3229-5967]"
    }, {
      "left" : "Token.Tag createTagPending(boolean start)",
      "right" : "Token.Tag createTagPending(boolean start)",
      "info" : "MethodDeclaration[5973-6121]:MethodDeclaration[5973-6121]"
    }, {
      "left" : "void emitTagPending()",
      "right" : "void emitTagPending()",
      "info" : "MethodDeclaration[6127-6216]:MethodDeclaration[6127-6216]"
    }, {
      "left" : "void createCommentPending()",
      "right" : "void createCommentPending()",
      "info" : "MethodDeclaration[6222-6303]:MethodDeclaration[6222-6303]"
    }, {
      "left" : "void emitCommentPending()",
      "right" : "void emitCommentPending()",
      "info" : "MethodDeclaration[6309-6372]:MethodDeclaration[6309-6372]"
    }, {
      "left" : "void createDoctypePending()",
      "right" : "void createDoctypePending()",
      "info" : "MethodDeclaration[6378-6459]:MethodDeclaration[6378-6459]"
    }, {
      "left" : "void emitDoctypePending()",
      "right" : "void emitDoctypePending()",
      "info" : "MethodDeclaration[6465-6528]:MethodDeclaration[6465-6528]"
    }, {
      "left" : "void createTempBuffer()",
      "right" : "void createTempBuffer()",
      "info" : "MethodDeclaration[6534-6607]:MethodDeclaration[6534-6607]"
    }, {
      "left" : "boolean isAppropriateEndTagToken()",
      "right" : "boolean isAppropriateEndTagToken()",
      "info" : "MethodDeclaration[6613-6719]:MethodDeclaration[6613-6719]"
    }, {
      "left" : "boolean isTrackErrors()",
      "right" : "boolean isTrackErrors()",
      "info" : "MethodDeclaration[6726-6785]:MethodDeclaration[6806-6865]"
    }, {
      "left" : "void setTrackErrors(boolean trackErrors)",
      "right" : "void setTrackErrors(boolean trackErrors)",
      "info" : "MethodDeclaration[6791-6879]:MethodDeclaration[6871-6959]"
    }, {
      "left" : "void error(TokeniserState state)",
      "right" : "void error(TokeniserState state)",
      "info" : "MethodDeclaration[6885-7062]:MethodDeclaration[6965-7142]"
    }, {
      "left" : "void eofError(TokeniserState state)",
      "right" : "void eofError(TokeniserState state)",
      "info" : "MethodDeclaration[7068-7239]:MethodDeclaration[7148-7319]"
    }, {
      "left" : "private void characterReferenceError()",
      "right" : "private void characterReferenceError()",
      "info" : "MethodDeclaration[7245-7401]:MethodDeclaration[7325-7481]"
    }, {
      "left" : "private void error(String errorMsg)",
      "right" : "private void error(String errorMsg)",
      "info" : "MethodDeclaration[7407-7539]:MethodDeclaration[7487-7619]"
    }, {
      "left" : "boolean currentNodeInHtmlNS()",
      "right" : "boolean currentNodeInHtmlNS()",
      "info" : "MethodDeclaration[7545-7781]:MethodDeclaration[7625-7861]"
    } ],
    "mappings" : [
 {
      "left" : "Tokeniser",
      "right" : "Tokeniser",
      "info" : "SimpleName[1191-1200]:SimpleName[1191-1200]"
    }, {
      "left" : "CharacterReader reader",
      "right" : "CharacterReader reader",
      "info" : "SingleVariableDeclaration[1201-1223]:SingleVariableDeclaration[1201-1223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1225-1262]:Block[1225-1262]"
    }, {
      "left" : "this.reader = reader;",
      "right" : "this.reader = reader;",
      "info" : "ExpressionStatement[1235-1256]:ExpressionStatement[1235-1256]"
    }, {
      "left" : "Token",
      "right" : "Token",
      "info" : "SimpleType[1268-1273]:SimpleType[1268-1273]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[1274-1278]:SimpleName[1274-1278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1281-1922]:Block[1281-1922]"
    }, {
      "left" : "if (!selfClosingFlagAcknowledged)",
      "right" : "if (!selfClosingFlagAcknowledged)",
      "info" : "IfStatement[1291-1441]:IfStatement[1291-1441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1325-1441]:Block[1325-1441]"
    }, {
      "left" : "error(\"Self closing flag not acknowledged\");",
      "right" : "error(\"Self closing flag not acknowledged\");",
      "info" : "ExpressionStatement[1339-1383]:ExpressionStatement[1339-1383]"
    }, {
      "left" : "selfClosingFlagAcknowledged = true;",
      "right" : "selfClosingFlagAcknowledged = true;",
      "info" : "ExpressionStatement[1396-1431]:ExpressionStatement[1396-1431]"
    }, {
      "left" : "while (!isEmitPending)\n            state.read(this, reader);",
      "right" : "while (!isEmitPending)\n            state.read(this, reader);",
      "info" : "WhileStatement[1451-1511]:WhileStatement[1451-1511]"
    }, {
      "left" : "state.read(this, reader);",
      "right" : "state.read(this, reader);",
      "info" : "ExpressionStatement[1486-1511]:ExpressionStatement[1486-1511]"
    }, {
      "left" : "if (charBuffer.length() > 0)",
      "right" : "if (charBuffer.length() > 0)",
      "info" : "IfStatement[1644-1916]:IfStatement[1644-1916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1673-1832]:Block[1673-1832]"
    }, {
      "left" : "String str = charBuffer.toString();",
      "right" : "String str = charBuffer.toString();",
      "info" : "VariableDeclarationStatement[1687-1722]:VariableDeclarationStatement[1687-1722]"
    }, {
      "left" : "charBuffer.delete(0, charBuffer.length());",
      "right" : "charBuffer.delete(0, charBuffer.length());",
      "info" : "ExpressionStatement[1735-1777]:ExpressionStatement[1735-1777]"
    }, {
      "left" : "return new Token.Character(str);",
      "right" : "return new Token.Character(str);",
      "info" : "ReturnStatement[1790-1822]:ReturnStatement[1790-1822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1838-1916]:Block[1838-1916]"
    }, {
      "left" : "isEmitPending = false;",
      "right" : "isEmitPending = false;",
      "info" : "ExpressionStatement[1852-1874]:ExpressionStatement[1852-1874]"
    }, {
      "left" : "return emitPending;",
      "right" : "return emitPending;",
      "info" : "ReturnStatement[1887-1906]:ReturnStatement[1887-1906]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1928-1932]:PrimitiveType[1928-1932]"
    }, {
      "left" : "emit",
      "right" : "emit",
      "info" : "SimpleName[1933-1937]:SimpleName[1933-1937]"
    }, {
      "left" : "Token token",
      "right" : "Token token",
      "info" : "SingleVariableDeclaration[1938-1949]:SingleVariableDeclaration[1938-1949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1951-2580]:Block[1951-2580]"
    }, {
      "left" : "Validate.isFalse(isEmitPending, \"There is an unread token pending!\");",
      "right" : "Validate.isFalse(isEmitPending, \"There is an unread token pending!\");",
      "info" : "ExpressionStatement[1961-2030]:ExpressionStatement[1961-2030]"
    }, {
      "left" : "emitPending = token;",
      "right" : "emitPending = token;",
      "info" : "ExpressionStatement[2040-2060]:ExpressionStatement[2040-2060]"
    }, {
      "left" : "isEmitPending = true;",
      "right" : "isEmitPending = true;",
      "info" : "ExpressionStatement[2069-2090]:ExpressionStatement[2069-2090]"
    }, {
      "left" : "if (token.type == Token.TokenType.StartTag)",
      "right" : "if (token.type == Token.TokenType.StartTag)",
      "info" : "IfStatement[2100-2574]:IfStatement[2100-2574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2144-2345]:Block[2144-2345]"
    }, {
      "left" : "Token.StartTag startTag = (Token.StartTag) token;",
      "right" : "Token.StartTag startTag = (Token.StartTag) token;",
      "info" : "VariableDeclarationStatement[2158-2207]:VariableDeclarationStatement[2158-2207]"
    }, {
      "left" : "lastStartTag = startTag;",
      "right" : "lastStartTag = startTag;",
      "info" : "ExpressionStatement[2220-2244]:ExpressionStatement[2220-2244]"
    }, {
      "left" : "if (startTag.selfClosing)",
      "right" : "if (startTag.selfClosing)",
      "info" : "IfStatement[2257-2335]:IfStatement[2257-2335]"
    }, {
      "left" : "selfClosingFlagAcknowledged = false;",
      "right" : "selfClosingFlagAcknowledged = false;",
      "info" : "ExpressionStatement[2299-2335]:ExpressionStatement[2299-2335]"
    }, {
      "left" : "if (token.type == Token.TokenType.EndTag)",
      "right" : "if (token.type == Token.TokenType.EndTag)",
      "info" : "IfStatement[2351-2574]:IfStatement[2351-2574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2393-2574]:Block[2393-2574]"
    }, {
      "left" : "Token.EndTag endTag = (Token.EndTag) token;",
      "right" : "Token.EndTag endTag = (Token.EndTag) token;",
      "info" : "VariableDeclarationStatement[2407-2450]:VariableDeclarationStatement[2407-2450]"
    }, {
      "left" : "if (endTag.attributes.size() > 0)",
      "right" : "if (endTag.attributes.size() > 0)",
      "info" : "IfStatement[2463-2564]:IfStatement[2463-2564]"
    }, {
      "left" : "error(\"Attributes incorrectly present on end tag\");",
      "right" : "error(\"Attributes incorrectly present on end tag\");",
      "info" : "ExpressionStatement[2513-2564]:ExpressionStatement[2513-2564]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2586-2590]:PrimitiveType[2586-2590]"
    }, {
      "left" : "emit",
      "right" : "emit",
      "info" : "SimpleName[2591-2595]:SimpleName[2591-2595]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[2596-2606]:SingleVariableDeclaration[2596-2606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2608-2819]:Block[2608-2819]"
    }, {
      "left" : "charBuffer.append(str);",
      "right" : "charBuffer.append(str);",
      "info" : "ExpressionStatement[2790-2813]:ExpressionStatement[2790-2813]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2825-2829]:PrimitiveType[2825-2829]"
    }, {
      "left" : "emit",
      "right" : "emit",
      "info" : "SimpleName[2830-2834]:SimpleName[2830-2834]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[2835-2841]:SingleVariableDeclaration[2835-2841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2843-2880]:Block[2843-2880]"
    }, {
      "left" : "charBuffer.append(c);",
      "right" : "charBuffer.append(c);",
      "info" : "ExpressionStatement[2853-2874]:ExpressionStatement[2853-2874]"
    }, {
      "left" : "TokeniserState",
      "right" : "TokeniserState",
      "info" : "SimpleType[2886-2900]:SimpleType[2886-2900]"
    }, {
      "left" : "getState",
      "right" : "getState",
      "info" : "SimpleName[2901-2909]:SimpleName[2901-2909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2912-2941]:Block[2912-2941]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[2922-2935]:ReturnStatement[2922-2935]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2947-2951]:PrimitiveType[2947-2951]"
    }, {
      "left" : "transition",
      "right" : "transition",
      "info" : "SimpleName[2952-2962]:SimpleName[2952-2962]"
    }, {
      "left" : "TokeniserState state",
      "right" : "TokeniserState state",
      "info" : "SingleVariableDeclaration[2963-2983]:SingleVariableDeclaration[2963-2983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2985-3020]:Block[2985-3020]"
    }, {
      "left" : "this.state = state;",
      "right" : "this.state = state;",
      "info" : "ExpressionStatement[2995-3014]:ExpressionStatement[2995-3014]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3026-3030]:PrimitiveType[3026-3030]"
    }, {
      "left" : "advanceTransition",
      "right" : "advanceTransition",
      "info" : "SimpleName[3031-3048]:SimpleName[3031-3048]"
    }, {
      "left" : "TokeniserState state",
      "right" : "TokeniserState state",
      "info" : "SingleVariableDeclaration[3049-3069]:SingleVariableDeclaration[3049-3069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3071-3132]:Block[3071-3132]"
    }, {
      "left" : "reader.advance();",
      "right" : "reader.advance();",
      "info" : "ExpressionStatement[3081-3098]:ExpressionStatement[3081-3098]"
    }, {
      "left" : "this.state = state;",
      "right" : "this.state = state;",
      "info" : "ExpressionStatement[3107-3126]:ExpressionStatement[3107-3126]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3138-3142]:PrimitiveType[3138-3142]"
    }, {
      "left" : "acknowledgeSelfClosingFlag",
      "right" : "acknowledgeSelfClosingFlag",
      "info" : "SimpleName[3143-3169]:SimpleName[3143-3169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3172-3223]:Block[3172-3223]"
    }, {
      "left" : "selfClosingFlagAcknowledged = true;",
      "right" : "selfClosingFlagAcknowledged = true;",
      "info" : "ExpressionStatement[3182-3217]:ExpressionStatement[3182-3217]"
    }, {
      "left" : "Character",
      "right" : "Character",
      "info" : "SimpleType[3229-3238]:SimpleType[3229-3238]"
    }, {
      "left" : "consumeCharacterReference",
      "right" : "consumeCharacterReference",
      "info" : "SimpleName[3239-3264]:SimpleName[3239-3264]"
    }, {
      "left" : "Character additionalAllowedCharacter",
      "right" : "Character additionalAllowedCharacter",
      "info" : "SingleVariableDeclaration[3265-3301]:SingleVariableDeclaration[3265-3301]"
    }, {
      "left" : "boolean inAttribute",
      "right" : "boolean inAttribute",
      "info" : "SingleVariableDeclaration[3303-3322]:SingleVariableDeclaration[3303-3322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3324-5967]:Block[3324-5967]"
    }, {
      "left" : "if (reader.isEmpty())",
      "right" : "if (reader.isEmpty())",
      "info" : "IfStatement[3334-3380]:IfStatement[3334-3380]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3368-3380]:ReturnStatement[3368-3380]"
    }, {
      "left" : "if (additionalAllowedCharacter != null && additionalAllowedCharacter == reader.current())",
      "right" : "if (additionalAllowedCharacter != null && additionalAllowedCharacter == reader.current())",
      "info" : "IfStatement[3389-3503]:IfStatement[3389-3503]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3491-3503]:ReturnStatement[3491-3503]"
    }, {
      "left" : "if (reader.matchesAny('\\t', '\\n', '\\f', '<', '&'))",
      "right" : "if (reader.matchesAny('\\t', '\\n', '\\f', '<', '&'))",
      "info" : "IfStatement[3512-3587]:IfStatement[3512-3587]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3575-3587]:ReturnStatement[3575-3587]"
    }, {
      "left" : "reader.mark();",
      "right" : "reader.mark();",
      "info" : "ExpressionStatement[3597-3611]:ExpressionStatement[3597-3611]"
    }, {
      "left" : "if (reader.matchConsume(\"#\"))",
      "right" : "if (reader.matchConsume(\"#\"))",
      "info" : "IfStatement[3620-5961]:IfStatement[3620-5961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3650-4753]:Block[3650-4753]"
    }, {
      "left" : "boolean isHexMode = reader.matchConsumeIgnoreCase(\"X\");",
      "right" : "boolean isHexMode = reader.matchConsumeIgnoreCase(\"X\");",
      "info" : "VariableDeclarationStatement[3676-3731]:VariableDeclarationStatement[3676-3731]"
    }, {
      "left" : "String numRef = isHexMode ? reader.consumeHexSequence() : reader.consumeDigitSequence();",
      "right" : "String numRef = isHexMode ? reader.consumeHexSequence() : reader.consumeDigitSequence();",
      "info" : "VariableDeclarationStatement[3744-3832]:VariableDeclarationStatement[3744-3832]"
    }, {
      "left" : "if (numRef.length() == 0)",
      "right" : "if (numRef.length() == 0)",
      "info" : "IfStatement[3845-4022]:IfStatement[3845-4022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3871-4022]:Block[3871-4022]"
    }, {
      "left" : "characterReferenceError();",
      "right" : "characterReferenceError();",
      "info" : "ExpressionStatement[3914-3940]:ExpressionStatement[3914-3940]"
    }, {
      "left" : "reader.rewindToMark();",
      "right" : "reader.rewindToMark();",
      "info" : "ExpressionStatement[3957-3979]:ExpressionStatement[3957-3979]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3996-4008]:ReturnStatement[3996-4008]"
    }, {
      "left" : "if (!reader.matchConsume(\";\"))",
      "right" : "if (!reader.matchConsume(\";\"))",
      "info" : "IfStatement[4035-4108]:IfStatement[4035-4108]"
    }, {
      "left" : "characterReferenceError();",
      "right" : "characterReferenceError();",
      "info" : "ExpressionStatement[4082-4108]:ExpressionStatement[4082-4108]"
    }, {
      "left" : "int charval = -1;",
      "right" : "int charval = -1;",
      "info" : "VariableDeclarationStatement[4137-4154]:VariableDeclarationStatement[4137-4154]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4167-4339]:TryStatement[4167-4339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4171-4291]:Block[4171-4291]"
    }, {
      "left" : "int base = isHexMode ? 16 : 10;",
      "right" : "int base = isHexMode ? 16 : 10;",
      "info" : "VariableDeclarationStatement[4189-4220]:VariableDeclarationStatement[4189-4220]"
    }, {
      "left" : "charval = Integer.valueOf(numRef, base);",
      "right" : "charval = Integer.valueOf(numRef, base);",
      "info" : "ExpressionStatement[4237-4277]:ExpressionStatement[4237-4277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4324-4339]:Block[4324-4339]"
    }, {
      "left" : "if (charval == -1 || (charval >= 0xD800 && charval <= 0xDFFF) || charval > 0x10FFFF)",
      "right" : "if (charval == -1 || (charval >= 0xD800 && charval <= 0xDFFF) || charval > 0x10FFFF)",
      "info" : "IfStatement[4360-4743]:IfStatement[4360-4743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4445-4543]:Block[4445-4543]"
    }, {
      "left" : "characterReferenceError();",
      "right" : "characterReferenceError();",
      "info" : "ExpressionStatement[4463-4489]:ExpressionStatement[4463-4489]"
    }, {
      "left" : "return replacementChar;",
      "right" : "return replacementChar;",
      "info" : "ReturnStatement[4506-4529]:ReturnStatement[4506-4529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4549-4743]:Block[4549-4743]"
    }, {
      "left" : "return (char) charval;",
      "right" : "return (char) charval;",
      "info" : "ReturnStatement[4707-4729]:ReturnStatement[4707-4729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4759-5961]:Block[4759-5961]"
    }, {
      "left" : "String nameRef = reader.consumeLetterSequence();",
      "right" : "String nameRef = reader.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[4904-4952]:VariableDeclarationStatement[4904-4952]"
    }, {
      "left" : "boolean looksLegit = reader.matches(';');",
      "right" : "boolean looksLegit = reader.matches(';');",
      "info" : "VariableDeclarationStatement[4965-5006]:VariableDeclarationStatement[4965-5006]"
    }, {
      "left" : "boolean found = false;",
      "right" : "boolean found = false;",
      "info" : "VariableDeclarationStatement[5019-5041]:VariableDeclarationStatement[5019-5041]"
    }, {
      "left" : "while (nameRef.length() > 0 && !found)",
      "right" : "while (nameRef.length() > 0 && !found)",
      "info" : "WhileStatement[5054-5348]:WhileStatement[5054-5348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5093-5348]:Block[5093-5348]"
    }, {
      "left" : "if (Entities.isNamedEntity(nameRef))",
      "right" : "if (Entities.isNamedEntity(nameRef))",
      "info" : "IfStatement[5111-5334]:IfStatement[5111-5334]"
    }, {
      "left" : "found = true;",
      "right" : "found = true;",
      "info" : "ExpressionStatement[5168-5181]:ExpressionStatement[5168-5181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5203-5334]:Block[5203-5334]"
    }, {
      "left" : "nameRef = nameRef.substring(0, nameRef.length()-1);",
      "right" : "nameRef = nameRef.substring(0, nameRef.length()-1);",
      "info" : "ExpressionStatement[5225-5276]:ExpressionStatement[5225-5276]"
    }, {
      "left" : "reader.unconsume();",
      "right" : "reader.unconsume();",
      "info" : "ExpressionStatement[5297-5316]:ExpressionStatement[5297-5316]"
    }, {
      "left" : "if (!found)",
      "right" : "if (!found)",
      "info" : "IfStatement[5361-5559]:IfStatement[5361-5559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5373-5559]:Block[5373-5559]"
    }, {
      "left" : "if (looksLegit)",
      "right" : "if (looksLegit)",
      "info" : "IfStatement[5391-5477]:IfStatement[5391-5477]"
    }, {
      "left" : "characterReferenceError();",
      "right" : "characterReferenceError();",
      "info" : "ExpressionStatement[5451-5477]:ExpressionStatement[5451-5477]"
    }, {
      "left" : "reader.rewindToMark();",
      "right" : "reader.rewindToMark();",
      "info" : "ExpressionStatement[5494-5516]:ExpressionStatement[5494-5516]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5533-5545]:ReturnStatement[5533-5545]"
    }, {
      "left" : "if (inAttribute && (reader.matchesLetter() || reader.matchesDigit() || reader.matches('=')))",
      "right" : "if (inAttribute && (reader.matchesLetter() || reader.matchesDigit() || reader.matches('=')))",
      "info" : "IfStatement[5572-5792]:IfStatement[5572-5792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5665-5792]:Block[5665-5792]"
    }, {
      "left" : "reader.rewindToMark();",
      "right" : "reader.rewindToMark();",
      "info" : "ExpressionStatement[5727-5749]:ExpressionStatement[5727-5749]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5766-5778]:ReturnStatement[5766-5778]"
    }, {
      "left" : "if (!reader.matchConsume(\";\"))",
      "right" : "if (!reader.matchConsume(\";\"))",
      "info" : "IfStatement[5805-5878]:IfStatement[5805-5878]"
    }, {
      "left" : "characterReferenceError();",
      "right" : "characterReferenceError();",
      "info" : "ExpressionStatement[5852-5878]:ExpressionStatement[5852-5878]"
    }, {
      "left" : "return Entities.getCharacterByName(nameRef);",
      "right" : "return Entities.getCharacterByName(nameRef);",
      "info" : "ReturnStatement[5907-5951]:ReturnStatement[5907-5951]"
    }, {
      "left" : "Token.Tag",
      "right" : "Token.Tag",
      "info" : "SimpleType[5973-5982]:SimpleType[5973-5982]"
    }, {
      "left" : "createTagPending",
      "right" : "createTagPending",
      "info" : "SimpleName[5983-5999]:SimpleName[5983-5999]"
    }, {
      "left" : "boolean start",
      "right" : "boolean start",
      "info" : "SingleVariableDeclaration[6000-6013]:SingleVariableDeclaration[6000-6013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6015-6121]:Block[6015-6121]"
    }, {
      "left" : "tagPending = start ? new Token.StartTag() : new Token.EndTag();",
      "right" : "tagPending = start ? new Token.StartTag() : new Token.EndTag();",
      "info" : "ExpressionStatement[6025-6088]:ExpressionStatement[6025-6088]"
    }, {
      "left" : "return tagPending;",
      "right" : "return tagPending;",
      "info" : "ReturnStatement[6097-6115]:ReturnStatement[6097-6115]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6127-6131]:PrimitiveType[6127-6131]"
    }, {
      "left" : "emitTagPending",
      "right" : "emitTagPending",
      "info" : "SimpleName[6132-6146]:SimpleName[6132-6146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6149-6216]:Block[6149-6216]"
    }, {
      "left" : "tagPending.finaliseTag();",
      "right" : "tagPending.finaliseTag();",
      "info" : "ExpressionStatement[6159-6184]:ExpressionStatement[6159-6184]"
    }, {
      "left" : "emit(tagPending);",
      "right" : "emit(tagPending);",
      "info" : "ExpressionStatement[6193-6210]:ExpressionStatement[6193-6210]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6222-6226]:PrimitiveType[6222-6226]"
    }, {
      "left" : "createCommentPending",
      "right" : "createCommentPending",
      "info" : "SimpleName[6227-6247]:SimpleName[6227-6247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6250-6303]:Block[6250-6303]"
    }, {
      "left" : "commentPending = new Token.Comment();",
      "right" : "commentPending = new Token.Comment();",
      "info" : "ExpressionStatement[6260-6297]:ExpressionStatement[6260-6297]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6309-6313]:PrimitiveType[6309-6313]"
    }, {
      "left" : "emitCommentPending",
      "right" : "emitCommentPending",
      "info" : "SimpleName[6314-6332]:SimpleName[6314-6332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6335-6372]:Block[6335-6372]"
    }, {
      "left" : "emit(commentPending);",
      "right" : "emit(commentPending);",
      "info" : "ExpressionStatement[6345-6366]:ExpressionStatement[6345-6366]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6378-6382]:PrimitiveType[6378-6382]"
    }, {
      "left" : "createDoctypePending",
      "right" : "createDoctypePending",
      "info" : "SimpleName[6383-6403]:SimpleName[6383-6403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6406-6459]:Block[6406-6459]"
    }, {
      "left" : "doctypePending = new Token.Doctype();",
      "right" : "doctypePending = new Token.Doctype();",
      "info" : "ExpressionStatement[6416-6453]:ExpressionStatement[6416-6453]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6465-6469]:PrimitiveType[6465-6469]"
    }, {
      "left" : "emitDoctypePending",
      "right" : "emitDoctypePending",
      "info" : "SimpleName[6470-6488]:SimpleName[6470-6488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6491-6528]:Block[6491-6528]"
    }, {
      "left" : "emit(doctypePending);",
      "right" : "emit(doctypePending);",
      "info" : "ExpressionStatement[6501-6522]:ExpressionStatement[6501-6522]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6534-6538]:PrimitiveType[6534-6538]"
    }, {
      "left" : "createTempBuffer",
      "right" : "createTempBuffer",
      "info" : "SimpleName[6539-6555]:SimpleName[6539-6555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6558-6607]:Block[6558-6607]"
    }, {
      "left" : "dataBuffer = new StringBuilder();",
      "right" : "dataBuffer = new StringBuilder();",
      "info" : "ExpressionStatement[6568-6601]:ExpressionStatement[6568-6601]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6613-6620]:PrimitiveType[6613-6620]"
    }, {
      "left" : "isAppropriateEndTagToken",
      "right" : "isAppropriateEndTagToken",
      "info" : "SimpleName[6621-6645]:SimpleName[6621-6645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6648-6719]:Block[6648-6719]"
    }, {
      "left" : "return tagPending.tagName.equals(lastStartTag.tagName);",
      "right" : "return tagPending.tagName.equals(lastStartTag.tagName);",
      "info" : "ReturnStatement[6658-6713]:ReturnStatement[6658-6713]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6726-6733]:PrimitiveType[6806-6813]"
    }, {
      "left" : "isTrackErrors",
      "right" : "isTrackErrors",
      "info" : "SimpleName[6734-6747]:SimpleName[6814-6827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6750-6785]:Block[6830-6865]"
    }, {
      "left" : "return trackErrors;",
      "right" : "return trackErrors;",
      "info" : "ReturnStatement[6760-6779]:ReturnStatement[6840-6859]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6791-6795]:PrimitiveType[6871-6875]"
    }, {
      "left" : "setTrackErrors",
      "right" : "setTrackErrors",
      "info" : "SimpleName[6796-6810]:SimpleName[6876-6890]"
    }, {
      "left" : "boolean trackErrors",
      "right" : "boolean trackErrors",
      "info" : "SingleVariableDeclaration[6811-6830]:SingleVariableDeclaration[6891-6910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6832-6879]:Block[6912-6959]"
    }, {
      "left" : "this.trackErrors = trackErrors;",
      "right" : "this.trackErrors = trackErrors;",
      "info" : "ExpressionStatement[6842-6873]:ExpressionStatement[6922-6953]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6885-6889]:PrimitiveType[6965-6969]"
    }, {
      "left" : "error",
      "right" : "error",
      "info" : "SimpleName[6890-6895]:SimpleName[6970-6975]"
    }, {
      "left" : "TokeniserState state",
      "right" : "TokeniserState state",
      "info" : "SingleVariableDeclaration[6896-6916]:SingleVariableDeclaration[6976-6996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6918-7062]:Block[6998-7142]"
    }, {
      "left" : "if (trackErrors)",
      "right" : "if (trackErrors)",
      "info" : "IfStatement[6928-7056]:IfStatement[7008-7136]"
    }, {
      "left" : "errors.add(new ParseError(\"Unexpected character in input\", reader.current(), state, reader.pos()));",
      "right" : "errors.add(new ParseError(\"Unexpected character in input\", reader.current(), state, reader.pos()));",
      "info" : "ExpressionStatement[6957-7056]:ExpressionStatement[7037-7136]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7068-7072]:PrimitiveType[7148-7152]"
    }, {
      "left" : "eofError",
      "right" : "eofError",
      "info" : "SimpleName[7073-7081]:SimpleName[7153-7161]"
    }, {
      "left" : "TokeniserState state",
      "right" : "TokeniserState state",
      "info" : "SingleVariableDeclaration[7082-7102]:SingleVariableDeclaration[7162-7182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7104-7239]:Block[7184-7319]"
    }, {
      "left" : "if (trackErrors)",
      "right" : "if (trackErrors)",
      "info" : "IfStatement[7114-7233]:IfStatement[7194-7313]"
    }, {
      "left" : "errors.add(new ParseError(\"Unexpectedly reached end of file (EOF)\", state, reader.pos()));",
      "right" : "errors.add(new ParseError(\"Unexpectedly reached end of file (EOF)\", state, reader.pos()));",
      "info" : "ExpressionStatement[7143-7233]:ExpressionStatement[7223-7313]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7245-7252]:Modifier[7325-7332]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7253-7257]:PrimitiveType[7333-7337]"
    }, {
      "left" : "characterReferenceError",
      "right" : "characterReferenceError",
      "info" : "SimpleName[7258-7281]:SimpleName[7338-7361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7284-7401]:Block[7364-7481]"
    }, {
      "left" : "if (trackErrors)",
      "right" : "if (trackErrors)",
      "info" : "IfStatement[7294-7395]:IfStatement[7374-7475]"
    }, {
      "left" : "errors.add(new ParseError(\"Invalid character reference\", reader.pos()));",
      "right" : "errors.add(new ParseError(\"Invalid character reference\", reader.pos()));",
      "info" : "ExpressionStatement[7323-7395]:ExpressionStatement[7403-7475]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7407-7414]:Modifier[7487-7494]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7415-7419]:PrimitiveType[7495-7499]"
    }, {
      "left" : "error",
      "right" : "error",
      "info" : "SimpleName[7420-7425]:SimpleName[7500-7505]"
    }, {
      "left" : "String errorMsg",
      "right" : "String errorMsg",
      "info" : "SingleVariableDeclaration[7426-7441]:SingleVariableDeclaration[7506-7521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7443-7539]:Block[7523-7619]"
    }, {
      "left" : "if (trackErrors)",
      "right" : "if (trackErrors)",
      "info" : "IfStatement[7453-7533]:IfStatement[7533-7613]"
    }, {
      "left" : "errors.add(new ParseError(errorMsg, reader.pos()));",
      "right" : "errors.add(new ParseError(errorMsg, reader.pos()));",
      "info" : "ExpressionStatement[7482-7533]:ExpressionStatement[7562-7613]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7545-7552]:PrimitiveType[7625-7632]"
    }, {
      "left" : "currentNodeInHtmlNS",
      "right" : "currentNodeInHtmlNS",
      "info" : "SimpleName[7553-7572]:SimpleName[7633-7652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7575-7781]:Block[7655-7861]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7634-7646]:ReturnStatement[7714-7726]"
    } ]
  },
  "interFileMappings" : { }
}