{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ISO8601Utils",
      "right" : "ISO8601Utils",
      "info" : "TypeDeclaration[131-14473]:TypeDeclaration[131-14577]"
    }, {
      "left" : "private static final String UTC_ID = \"UTC\";",
      "right" : "private static final String UTC_ID = \"UTC\";",
      "info" : "FieldDeclaration[743-904]:FieldDeclaration[743-904]"
    }, {
      "left" : "private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(UTC_ID);",
      "right" : "private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(UTC_ID);",
      "info" : "FieldDeclaration[909-1084]:FieldDeclaration[909-1084]"
    }, {
      "left" : "public static String format(Date date)",
      "right" : "public static String format(Date date)",
      "info" : "MethodDeclaration[1252-1565]:MethodDeclaration[1252-1565]"
    }, {
      "left" : "public static String format(Date date, boolean millis)",
      "right" : "public static String format(Date date, boolean millis)",
      "info" : "MethodDeclaration[1571-1952]:MethodDeclaration[1571-1952]"
    }, {
      "left" : "public static String format(Date date, boolean millis, TimeZone tz)",
      "right" : "public static String format(Date date, boolean millis, TimeZone tz)",
      "info" : "MethodDeclaration[1958-4083]:MethodDeclaration[1958-4083]"
    }, {
      "left" : "public static Date parse(String date, ParsePosition pos) throws ParseException",
      "right" : "public static Date parse(String date, ParsePosition pos) throws ParseException",
      "info" : "MethodDeclaration[4248-11649]:MethodDeclaration[4248-11753]"
    }, {
      "left" : "private static boolean checkOffset(String value, int offset, char expected)",
      "right" : "private static boolean checkOffset(String value, int offset, char expected)",
      "info" : "MethodDeclaration[11655-12170]:MethodDeclaration[11759-12274]"
    }, {
      "left" : "private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException",
      "right" : "private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException",
      "info" : "MethodDeclaration[12176-13576]:MethodDeclaration[12280-13680]"
    }, {
      "left" : "private static void padInt(StringBuilder buffer, int value, int length)",
      "right" : "private static void padInt(StringBuilder buffer, int value, int length)",
      "info" : "MethodDeclaration[13582-14092]:MethodDeclaration[13686-14196]"
    }, {
      "left" : "private static int indexOfNonDigit(String string, int offset)",
      "right" : "private static int indexOfNonDigit(String string, int offset)",
      "info" : "MethodDeclaration[14098-14470]:MethodDeclaration[14202-14574]"
    } ],
    "mappings" : [
 {
      "left" : "//Date parsing code from Jackson databind ISO8601Utils.java",
      "right" : "//Date parsing code from Jackson databind ISO8601Utils.java",
      "info" : "LineComment[522-581]:LineComment[522-581]"
    }, {
      "left" : "// https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java",
      "right" : "// https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java",
      "info" : "LineComment[582-710]:LineComment[582-710]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[711-717]:Modifier[711-717]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[718-723]:TYPE_DECLARATION_KIND[718-723]"
    }, {
      "left" : "ISO8601Utils",
      "right" : "ISO8601Utils",
      "info" : "SimpleName[724-736]:SimpleName[724-736]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1469-1475]:Modifier[1469-1475]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1476-1482]:Modifier[1476-1482]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[1483-1489]:SimpleType[1483-1489]"
    }, {
      "left" : "format",
      "right" : "format",
      "info" : "SimpleName[1490-1496]:SimpleName[1490-1496]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[1497-1506]:SingleVariableDeclaration[1497-1506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1508-1565]:Block[1508-1565]"
    }, {
      "left" : "return format(date, false, TIMEZONE_UTC);",
      "right" : "return format(date, false, TIMEZONE_UTC);",
      "info" : "ReturnStatement[1518-1559]:ReturnStatement[1518-1559]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1839-1845]:Modifier[1839-1845]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1846-1852]:Modifier[1846-1852]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[1853-1859]:SimpleType[1853-1859]"
    }, {
      "left" : "format",
      "right" : "format",
      "info" : "SimpleName[1860-1866]:SimpleName[1860-1866]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[1867-1876]:SingleVariableDeclaration[1867-1876]"
    }, {
      "left" : "boolean millis",
      "right" : "boolean millis",
      "info" : "SingleVariableDeclaration[1878-1892]:SingleVariableDeclaration[1878-1892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1894-1952]:Block[1894-1952]"
    }, {
      "left" : "return format(date, millis, TIMEZONE_UTC);",
      "right" : "return format(date, millis, TIMEZONE_UTC);",
      "info" : "ReturnStatement[1904-1946]:ReturnStatement[1904-1946]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2304-2310]:Modifier[2304-2310]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2311-2317]:Modifier[2311-2317]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2318-2324]:SimpleType[2318-2324]"
    }, {
      "left" : "format",
      "right" : "format",
      "info" : "SimpleName[2325-2331]:SimpleName[2325-2331]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[2332-2341]:SingleVariableDeclaration[2332-2341]"
    }, {
      "left" : "boolean millis",
      "right" : "boolean millis",
      "info" : "SingleVariableDeclaration[2343-2357]:SingleVariableDeclaration[2343-2357]"
    }, {
      "left" : "TimeZone tz",
      "right" : "TimeZone tz",
      "info" : "SingleVariableDeclaration[2359-2370]:SingleVariableDeclaration[2359-2370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2372-4083]:Block[2372-4083]"
    }, {
      "left" : "Calendar calendar = new GregorianCalendar(tz, Locale.US);",
      "right" : "Calendar calendar = new GregorianCalendar(tz, Locale.US);",
      "info" : "VariableDeclarationStatement[2382-2439]:VariableDeclarationStatement[2382-2439]"
    }, {
      "left" : "calendar.setTime(date);",
      "right" : "calendar.setTime(date);",
      "info" : "ExpressionStatement[2448-2471]:ExpressionStatement[2448-2471]"
    }, {
      "left" : "int capacity = \"yyyy-MM-ddThh:mm:ss\".length();",
      "right" : "int capacity = \"yyyy-MM-ddThh:mm:ss\".length();",
      "info" : "VariableDeclarationStatement[2565-2611]:VariableDeclarationStatement[2565-2611]"
    }, {
      "left" : "capacity += millis ? \".sss\".length() : 0;",
      "right" : "capacity += millis ? \".sss\".length() : 0;",
      "info" : "ExpressionStatement[2620-2661]:ExpressionStatement[2620-2661]"
    }, {
      "left" : "capacity += tz.getRawOffset() == 0 ? \"Z\".length() : \"+hh:mm\".length();",
      "right" : "capacity += tz.getRawOffset() == 0 ? \"Z\".length() : \"+hh:mm\".length();",
      "info" : "ExpressionStatement[2670-2740]:ExpressionStatement[2670-2740]"
    }, {
      "left" : "StringBuilder formatted = new StringBuilder(capacity);",
      "right" : "StringBuilder formatted = new StringBuilder(capacity);",
      "info" : "VariableDeclarationStatement[2749-2803]:VariableDeclarationStatement[2749-2803]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.YEAR), \"yyyy\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.YEAR), \"yyyy\".length());",
      "info" : "ExpressionStatement[2813-2877]:ExpressionStatement[2813-2877]"
    }, {
      "left" : "formatted.append('-');",
      "right" : "formatted.append('-');",
      "info" : "ExpressionStatement[2886-2908]:ExpressionStatement[2886-2908]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.MONTH) + 1, \"MM\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.MONTH) + 1, \"MM\".length());",
      "info" : "ExpressionStatement[2917-2984]:ExpressionStatement[2917-2984]"
    }, {
      "left" : "formatted.append('-');",
      "right" : "formatted.append('-');",
      "info" : "ExpressionStatement[2993-3015]:ExpressionStatement[2993-3015]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.DAY_OF_MONTH), \"dd\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.DAY_OF_MONTH), \"dd\".length());",
      "info" : "ExpressionStatement[3024-3094]:ExpressionStatement[3024-3094]"
    }, {
      "left" : "formatted.append('T');",
      "right" : "formatted.append('T');",
      "info" : "ExpressionStatement[3103-3125]:ExpressionStatement[3103-3125]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.HOUR_OF_DAY), \"hh\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.HOUR_OF_DAY), \"hh\".length());",
      "info" : "ExpressionStatement[3134-3203]:ExpressionStatement[3134-3203]"
    }, {
      "left" : "formatted.append(':');",
      "right" : "formatted.append(':');",
      "info" : "ExpressionStatement[3212-3234]:ExpressionStatement[3212-3234]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.MINUTE), \"mm\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.MINUTE), \"mm\".length());",
      "info" : "ExpressionStatement[3243-3307]:ExpressionStatement[3243-3307]"
    }, {
      "left" : "formatted.append(':');",
      "right" : "formatted.append(':');",
      "info" : "ExpressionStatement[3316-3338]:ExpressionStatement[3316-3338]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.SECOND), \"ss\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.SECOND), \"ss\".length());",
      "info" : "ExpressionStatement[3347-3411]:ExpressionStatement[3347-3411]"
    }, {
      "left" : "if (millis)",
      "right" : "if (millis)",
      "info" : "IfStatement[3420-3561]:IfStatement[3420-3561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3432-3561]:Block[3432-3561]"
    }, {
      "left" : "formatted.append('.');",
      "right" : "formatted.append('.');",
      "info" : "ExpressionStatement[3446-3468]:ExpressionStatement[3446-3468]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.MILLISECOND), \"sss\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.MILLISECOND), \"sss\".length());",
      "info" : "ExpressionStatement[3481-3551]:ExpressionStatement[3481-3551]"
    }, {
      "left" : "int offset = tz.getOffset(calendar.getTimeInMillis());",
      "right" : "int offset = tz.getOffset(calendar.getTimeInMillis());",
      "info" : "VariableDeclarationStatement[3571-3625]:VariableDeclarationStatement[3571-3625]"
    }, {
      "left" : "if (offset != 0)",
      "right" : "if (offset != 0)",
      "info" : "IfStatement[3634-4039]:IfStatement[3634-4039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3651-3987]:Block[3651-3987]"
    }, {
      "left" : "int hours = Math.abs((offset / (60 * 1000)) / 60);",
      "right" : "int hours = Math.abs((offset / (60 * 1000)) / 60);",
      "info" : "VariableDeclarationStatement[3665-3715]:VariableDeclarationStatement[3665-3715]"
    }, {
      "left" : "int minutes = Math.abs((offset / (60 * 1000)) % 60);",
      "right" : "int minutes = Math.abs((offset / (60 * 1000)) % 60);",
      "info" : "VariableDeclarationStatement[3728-3780]:VariableDeclarationStatement[3728-3780]"
    }, {
      "left" : "formatted.append(offset < 0 ? '-' : '+');",
      "right" : "formatted.append(offset < 0 ? '-' : '+');",
      "info" : "ExpressionStatement[3793-3834]:ExpressionStatement[3793-3834]"
    }, {
      "left" : "padInt(formatted, hours, \"hh\".length());",
      "right" : "padInt(formatted, hours, \"hh\".length());",
      "info" : "ExpressionStatement[3847-3887]:ExpressionStatement[3847-3887]"
    }, {
      "left" : "formatted.append(':');",
      "right" : "formatted.append(':');",
      "info" : "ExpressionStatement[3900-3922]:ExpressionStatement[3900-3922]"
    }, {
      "left" : "padInt(formatted, minutes, \"mm\".length());",
      "right" : "padInt(formatted, minutes, \"mm\".length());",
      "info" : "ExpressionStatement[3935-3977]:ExpressionStatement[3935-3977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3993-4039]:Block[3993-4039]"
    }, {
      "left" : "formatted.append('Z');",
      "right" : "formatted.append('Z');",
      "info" : "ExpressionStatement[4007-4029]:ExpressionStatement[4007-4029]"
    }, {
      "left" : "return formatted.toString();",
      "right" : "return formatted.toString();",
      "info" : "ReturnStatement[4049-4077]:ReturnStatement[4049-4077]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4686-4692]:Modifier[4686-4692]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4693-4699]:Modifier[4693-4699]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[4700-4704]:SimpleType[4700-4704]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[4705-4710]:SimpleName[4705-4710]"
    }, {
      "left" : "String date",
      "right" : "String date",
      "info" : "SingleVariableDeclaration[4711-4722]:SingleVariableDeclaration[4711-4722]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[4724-4741]:SingleVariableDeclaration[4724-4741]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[4750-4764]:SimpleType[4750-4764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4765-11649]:Block[4765-11753]"
    }, {
      "left" : "Exception fail = null;",
      "right" : "Exception fail = null;",
      "info" : "VariableDeclarationStatement[4775-4797]:VariableDeclarationStatement[4775-4797]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4806-11271]:TryStatement[4806-11375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4810-11066]:Block[4810-11170]"
    }, {
      "left" : "int offset = pos.getIndex();",
      "right" : "int offset = pos.getIndex();",
      "info" : "VariableDeclarationStatement[4824-4852]:VariableDeclarationStatement[4824-4852]"
    }, {
      "left" : "int year = parseInt(date, offset, offset += 4);",
      "right" : "int year = parseInt(date, offset, offset += 4);",
      "info" : "VariableDeclarationStatement[4894-4941]:VariableDeclarationStatement[4894-4941]"
    }, {
      "left" : "if (checkOffset(date, offset, '-'))",
      "right" : "if (checkOffset(date, offset, '-'))",
      "info" : "IfStatement[4954-5034]:IfStatement[4954-5034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4990-5034]:Block[4990-5034]"
    }, {
      "left" : "offset += 1;",
      "right" : "offset += 1;",
      "info" : "ExpressionStatement[5008-5020]:ExpressionStatement[5008-5020]"
    }, {
      "left" : "int month = parseInt(date, offset, offset += 2);",
      "right" : "int month = parseInt(date, offset, offset += 2);",
      "info" : "VariableDeclarationStatement[5077-5125]:VariableDeclarationStatement[5077-5125]"
    }, {
      "left" : "if (checkOffset(date, offset, '-'))",
      "right" : "if (checkOffset(date, offset, '-'))",
      "info" : "IfStatement[5138-5218]:IfStatement[5138-5218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5174-5218]:Block[5174-5218]"
    }, {
      "left" : "offset += 1;",
      "right" : "offset += 1;",
      "info" : "ExpressionStatement[5192-5204]:ExpressionStatement[5192-5204]"
    }, {
      "left" : "int day = parseInt(date, offset, offset += 2);",
      "right" : "int day = parseInt(date, offset, offset += 2);",
      "info" : "VariableDeclarationStatement[5259-5305]:VariableDeclarationStatement[5259-5305]"
    }, {
      "left" : "int hour = 0;",
      "right" : "int hour = 0;",
      "info" : "VariableDeclarationStatement[5352-5365]:VariableDeclarationStatement[5352-5365]"
    }, {
      "left" : "int minutes = 0;",
      "right" : "int minutes = 0;",
      "info" : "VariableDeclarationStatement[5378-5394]:VariableDeclarationStatement[5378-5394]"
    }, {
      "left" : "int seconds = 0;",
      "right" : "int seconds = 0;",
      "info" : "VariableDeclarationStatement[5407-5423]:VariableDeclarationStatement[5407-5423]"
    }, {
      "left" : "int milliseconds = 0;",
      "right" : "int milliseconds = 0;",
      "info" : "VariableDeclarationStatement[5436-5457]:VariableDeclarationStatement[5436-5457]"
    }, {
      "left" : "boolean hasT = checkOffset(date, offset, 'T');",
      "right" : "boolean hasT = checkOffset(date, offset, 'T');",
      "info" : "VariableDeclarationStatement[5629-5675]:VariableDeclarationStatement[5629-5675]"
    }, {
      "left" : "if (!hasT && (date.length() <= offset))",
      "right" : "if (!hasT && (date.length() <= offset))",
      "info" : "IfStatement[5701-5919]:IfStatement[5701-5919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5741-5919]:Block[5741-5919]"
    }, {
      "left" : "Calendar calendar = new GregorianCalendar(year, month - 1, day);",
      "right" : "Calendar calendar = new GregorianCalendar(year, month - 1, day);",
      "info" : "VariableDeclarationStatement[5759-5823]:VariableDeclarationStatement[5759-5823]"
    }, {
      "left" : "pos.setIndex(offset);",
      "right" : "pos.setIndex(offset);",
      "info" : "ExpressionStatement[5841-5862]:ExpressionStatement[5841-5862]"
    }, {
      "left" : "return calendar.getTime();",
      "right" : "return calendar.getTime();",
      "info" : "ReturnStatement[5879-5905]:ReturnStatement[5879-5905]"
    }, {
      "left" : "if (hasT)",
      "right" : "if (hasT)",
      "info" : "IfStatement[5933-7893]:IfStatement[5933-7893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5943-7893]:Block[5943-7893]"
    }, {
      "left" : "hour = parseInt(date, offset += 1, offset += 2);",
      "right" : "hour = parseInt(date, offset += 1, offset += 2);",
      "info" : "ExpressionStatement[6030-6078]:ExpressionStatement[6030-6078]"
    }, {
      "left" : "if (checkOffset(date, offset, ':'))",
      "right" : "if (checkOffset(date, offset, ':'))",
      "info" : "IfStatement[6095-6183]:IfStatement[6095-6183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6131-6183]:Block[6131-6183]"
    }, {
      "left" : "offset += 1;",
      "right" : "offset += 1;",
      "info" : "ExpressionStatement[6153-6165]:ExpressionStatement[6153-6165]"
    }, {
      "left" : "minutes = parseInt(date, offset, offset += 2);",
      "right" : "minutes = parseInt(date, offset, offset += 2);",
      "info" : "ExpressionStatement[6201-6247]:ExpressionStatement[6201-6247]"
    }, {
      "left" : "if (checkOffset(date, offset, ':'))",
      "right" : "if (checkOffset(date, offset, ':'))",
      "info" : "IfStatement[6264-6352]:IfStatement[6264-6352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6300-6352]:Block[6300-6352]"
    }, {
      "left" : "offset += 1;",
      "right" : "offset += 1;",
      "info" : "ExpressionStatement[6322-6334]:ExpressionStatement[6322-6334]"
    }, {
      "left" : "if (date.length() > offset)",
      "right" : "if (date.length() > offset)",
      "info" : "IfStatement[6428-7879]:IfStatement[6428-7879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6456-7879]:Block[6456-7879]"
    }, {
      "left" : "char c = date.charAt(offset);",
      "right" : "char c = date.charAt(offset);",
      "info" : "VariableDeclarationStatement[6478-6507]:VariableDeclarationStatement[6478-6507]"
    }, {
      "left" : "if (c != 'Z' && c != '+' && c != '-')",
      "right" : "if (c != 'Z' && c != '+' && c != '-')",
      "info" : "IfStatement[6528-7861]:IfStatement[6528-7861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6566-7861]:Block[6566-7861]"
    }, {
      "left" : "seconds = parseInt(date, offset, offset += 2);",
      "right" : "seconds = parseInt(date, offset, offset += 2);",
      "info" : "ExpressionStatement[6592-6638]:ExpressionStatement[6592-6638]"
    }, {
      "left" : "if (seconds > 59 && seconds < 63)",
      "right" : "if (seconds > 59 && seconds < 63)",
      "info" : "IfStatement[6663-6710]:IfStatement[6663-6710]"
    }, {
      "left" : "seconds = 59;",
      "right" : "seconds = 59;",
      "info" : "ExpressionStatement[6697-6710]:ExpressionStatement[6697-6710]"
    }, {
      "left" : "if (checkOffset(date, offset, '.'))",
      "right" : "if (checkOffset(date, offset, '.'))",
      "info" : "IfStatement[6838-7839]:IfStatement[6838-7839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6874-7839]:Block[6874-7839]"
    }, {
      "left" : "offset += 1;",
      "right" : "offset += 1;",
      "info" : "ExpressionStatement[6904-6916]:ExpressionStatement[6904-6916]"
    }, {
      "left" : "int endOffset = indexOfNonDigit(date, offset + 1);",
      "right" : "int endOffset = indexOfNonDigit(date, offset + 1);",
      "info" : "VariableDeclarationStatement[6945-6995]:VariableDeclarationStatement[6945-6995]"
    }, {
      "left" : "int parseEndOffset = Math.min(endOffset, offset + 3);",
      "right" : "int parseEndOffset = Math.min(endOffset, offset + 3);",
      "info" : "VariableDeclarationStatement[7053-7106]:VariableDeclarationStatement[7053-7106]"
    }, {
      "left" : "int fraction = parseInt(date, offset, parseEndOffset);",
      "right" : "int fraction = parseInt(date, offset, parseEndOffset);",
      "info" : "VariableDeclarationStatement[7159-7213]:VariableDeclarationStatement[7159-7213]"
    }, {
      "left" : "switch (parseEndOffset - offset) { // number of digits parsed\n                            case 2:\n                                milliseconds = fraction * 10;\n                                break;\n                            case 1:\n                                milliseconds = fraction * 100;\n                                break;\n                            default:\n                                milliseconds = fraction;\n                            }",
      "right" : "switch (parseEndOffset - offset) { // number of digits parsed\n                            case 2:\n                                milliseconds = fraction * 10;\n                                break;\n                            case 1:\n                                milliseconds = fraction * 100;\n                                break;\n                            default:\n                                milliseconds = fraction;\n                            }",
      "info" : "SwitchStatement[7305-7765]:SwitchStatement[7305-7765]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[7395-7402]:SwitchCase[7395-7402]"
    }, {
      "left" : "milliseconds = fraction * 10;",
      "right" : "milliseconds = fraction * 10;",
      "info" : "ExpressionStatement[7435-7464]:ExpressionStatement[7435-7464]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7497-7503]:BreakStatement[7497-7503]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[7532-7539]:SwitchCase[7532-7539]"
    }, {
      "left" : "milliseconds = fraction * 100;",
      "right" : "milliseconds = fraction * 100;",
      "info" : "ExpressionStatement[7572-7602]:ExpressionStatement[7572-7602]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7635-7641]:BreakStatement[7635-7641]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[7670-7678]:SwitchCase[7670-7678]"
    }, {
      "left" : "milliseconds = fraction;",
      "right" : "milliseconds = fraction;",
      "info" : "ExpressionStatement[7711-7735]:ExpressionStatement[7711-7735]"
    }, {
      "left" : "offset = endOffset;",
      "right" : "offset = endOffset;",
      "info" : "ExpressionStatement[7794-7813]:ExpressionStatement[7794-7813]"
    }, {
      "left" : "if (date.length() <= offset)",
      "right" : "if (date.length() <= offset)",
      "info" : "IfStatement[7939-8061]:IfStatement[7939-8061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7968-8061]:Block[7968-8061]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No time zone indicator\");",
      "right" : "throw new IllegalArgumentException(\"No time zone indicator\");",
      "info" : "ThrowStatement[7986-8047]:ThrowStatement[7986-8047]"
    }, {
      "left" : "TimeZone timezone = null;",
      "right" : "TimeZone timezone = null;",
      "info" : "VariableDeclarationStatement[8075-8100]:VariableDeclarationStatement[8075-8100]"
    }, {
      "left" : "char timezoneIndicator = date.charAt(offset);",
      "right" : "char timezoneIndicator = date.charAt(offset);",
      "info" : "VariableDeclarationStatement[8113-8158]:VariableDeclarationStatement[8113-8158]"
    }, {
      "left" : "if (timezoneIndicator == 'Z')",
      "right" : "if (timezoneIndicator == 'Z')",
      "info" : "IfStatement[8172-10360]:IfStatement[8172-10464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8202-8287]:Block[8202-8287]"
    }, {
      "left" : "timezone = TIMEZONE_UTC;",
      "right" : "timezone = TIMEZONE_UTC;",
      "info" : "ExpressionStatement[8220-8244]:ExpressionStatement[8220-8244]"
    }, {
      "left" : "offset += 1;",
      "right" : "offset += 1;",
      "info" : "ExpressionStatement[8261-8273]:ExpressionStatement[8261-8273]"
    }, {
      "left" : "if (timezoneIndicator == '+' || timezoneIndicator == '-')",
      "right" : "if (timezoneIndicator == '+' || timezoneIndicator == '-')",
      "info" : "IfStatement[8293-10360]:IfStatement[8293-10464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8351-10229]:Block[8351-10333]"
    }, {
      "left" : "String timezoneOffset = date.substring(offset);",
      "right" : "String timezoneOffset = date.substring(offset);",
      "info" : "VariableDeclarationStatement[8369-8416]:VariableDeclarationStatement[8369-8416]"
    }, {
      "left" : "offset += timezoneOffset.length();",
      "right" : "offset += timezoneOffset.length();",
      "info" : "ExpressionStatement[8561-8595]:ExpressionStatement[8665-8699]"
    }, {
      "left" : "if (\"+0000\".equals(timezoneOffset) || \"+00:00\".equals(timezoneOffset))",
      "right" : "if (\"+0000\".equals(timezoneOffset) || \"+00:00\".equals(timezoneOffset))",
      "info" : "IfStatement[8704-10215]:IfStatement[8808-10319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8775-8839]:Block[8879-8943]"
    }, {
      "left" : "timezone = TIMEZONE_UTC;",
      "right" : "timezone = TIMEZONE_UTC;",
      "info" : "ExpressionStatement[8797-8821]:ExpressionStatement[8901-8925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8845-10215]:Block[8949-10319]"
    }, {
      "left" : "String timezoneId = \"GMT\" + timezoneOffset;",
      "right" : "String timezoneId = \"GMT\" + timezoneOffset;",
      "info" : "VariableDeclarationStatement[9193-9236]:VariableDeclarationStatement[9297-9340]"
    }, {
      "left" : "timezone = TimeZone.getTimeZone(timezoneId);",
      "right" : "timezone = TimeZone.getTimeZone(timezoneId);",
      "info" : "ExpressionStatement[9324-9368]:ExpressionStatement[9428-9472]"
    }, {
      "left" : "String act = timezone.getID();",
      "right" : "String act = timezone.getID();",
      "info" : "VariableDeclarationStatement[9390-9420]:VariableDeclarationStatement[9494-9524]"
    }, {
      "left" : "if (!act.equals(timezoneId))",
      "right" : "if (!act.equals(timezoneId))",
      "info" : "IfStatement[9441-10197]:IfStatement[9545-10301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9470-10197]:Block[9574-10301]"
    }, {
      "left" : "String cleaned = act.replace(\":\", \"\");",
      "right" : "String cleaned = act.replace(\":\", \"\");",
      "info" : "VariableDeclarationStatement[9862-9900]:VariableDeclarationStatement[9966-10004]"
    }, {
      "left" : "if (!cleaned.equals(timezoneId))",
      "right" : "if (!cleaned.equals(timezoneId))",
      "info" : "IfStatement[9925-10175]:IfStatement[10029-10279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9958-10175]:Block[10062-10279]"
    }, {
      "left" : "throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \"+timezoneId+\" given, resolves to \"\n                                    +timezone.getID());",
      "right" : "throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \"+timezoneId+\" given, resolves to \"\n                                    +timezone.getID());",
      "info" : "ThrowStatement[9988-10149]:ThrowStatement[10092-10253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10235-10360]:Block[10339-10464]"
    }, {
      "left" : "throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator+\"'\");",
      "right" : "throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator+\"'\");",
      "info" : "ThrowStatement[10253-10346]:ThrowStatement[10357-10450]"
    }, {
      "left" : "Calendar calendar = new GregorianCalendar(timezone);",
      "right" : "Calendar calendar = new GregorianCalendar(timezone);",
      "info" : "VariableDeclarationStatement[10374-10426]:VariableDeclarationStatement[10478-10530]"
    }, {
      "left" : "calendar.setLenient(false);",
      "right" : "calendar.setLenient(false);",
      "info" : "ExpressionStatement[10439-10466]:ExpressionStatement[10543-10570]"
    }, {
      "left" : "calendar.set(Calendar.YEAR, year);",
      "right" : "calendar.set(Calendar.YEAR, year);",
      "info" : "ExpressionStatement[10479-10513]:ExpressionStatement[10583-10617]"
    }, {
      "left" : "calendar.set(Calendar.MONTH, month - 1);",
      "right" : "calendar.set(Calendar.MONTH, month - 1);",
      "info" : "ExpressionStatement[10526-10566]:ExpressionStatement[10630-10670]"
    }, {
      "left" : "calendar.set(Calendar.DAY_OF_MONTH, day);",
      "right" : "calendar.set(Calendar.DAY_OF_MONTH, day);",
      "info" : "ExpressionStatement[10579-10620]:ExpressionStatement[10683-10724]"
    }, {
      "left" : "calendar.set(Calendar.HOUR_OF_DAY, hour);",
      "right" : "calendar.set(Calendar.HOUR_OF_DAY, hour);",
      "info" : "ExpressionStatement[10633-10674]:ExpressionStatement[10737-10778]"
    }, {
      "left" : "calendar.set(Calendar.MINUTE, minutes);",
      "right" : "calendar.set(Calendar.MINUTE, minutes);",
      "info" : "ExpressionStatement[10687-10726]:ExpressionStatement[10791-10830]"
    }, {
      "left" : "calendar.set(Calendar.SECOND, seconds);",
      "right" : "calendar.set(Calendar.SECOND, seconds);",
      "info" : "ExpressionStatement[10739-10778]:ExpressionStatement[10843-10882]"
    }, {
      "left" : "calendar.set(Calendar.MILLISECOND, milliseconds);",
      "right" : "calendar.set(Calendar.MILLISECOND, milliseconds);",
      "info" : "ExpressionStatement[10791-10840]:ExpressionStatement[10895-10944]"
    }, {
      "left" : "pos.setIndex(offset);",
      "right" : "pos.setIndex(offset);",
      "info" : "ExpressionStatement[10854-10875]:ExpressionStatement[10958-10979]"
    }, {
      "left" : "return calendar.getTime();",
      "right" : "return calendar.getTime();",
      "info" : "ReturnStatement[10888-10914]:ReturnStatement[10992-11018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11103-11136]:Block[11207-11240]"
    }, {
      "left" : "fail = e;",
      "right" : "fail = e;",
      "info" : "ExpressionStatement[11117-11126]:ExpressionStatement[11221-11230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11169-11202]:Block[11273-11306]"
    }, {
      "left" : "fail = e;",
      "right" : "fail = e;",
      "info" : "ExpressionStatement[11183-11192]:ExpressionStatement[11287-11296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11238-11271]:Block[11342-11375]"
    }, {
      "left" : "fail = e;",
      "right" : "fail = e;",
      "info" : "ExpressionStatement[11252-11261]:ExpressionStatement[11356-11365]"
    }, {
      "left" : "String input = (date == null) ? null : ('\"' + date + \"'\");",
      "right" : "String input = (date == null) ? null : ('\"' + date + \"'\");",
      "info" : "VariableDeclarationStatement[11280-11338]:VariableDeclarationStatement[11384-11442]"
    }, {
      "left" : "String msg = fail.getMessage();",
      "right" : "String msg = fail.getMessage();",
      "info" : "VariableDeclarationStatement[11347-11378]:VariableDeclarationStatement[11451-11482]"
    }, {
      "left" : "if (msg == null || msg.isEmpty())",
      "right" : "if (msg == null || msg.isEmpty())",
      "info" : "IfStatement[11387-11485]:IfStatement[11491-11589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11421-11485]:Block[11525-11589]"
    }, {
      "left" : "msg = \"(\"+fail.getClass().getName()+\")\";",
      "right" : "msg = \"(\"+fail.getClass().getName()+\")\";",
      "info" : "ExpressionStatement[11435-11475]:ExpressionStatement[11539-11579]"
    }, {
      "left" : "ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, pos.getIndex());",
      "right" : "ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, pos.getIndex());",
      "info" : "VariableDeclarationStatement[11494-11597]:VariableDeclarationStatement[11598-11701]"
    }, {
      "left" : "ex.initCause(fail);",
      "right" : "ex.initCause(fail);",
      "info" : "ExpressionStatement[11606-11625]:ExpressionStatement[11710-11729]"
    }, {
      "left" : "throw ex;",
      "right" : "throw ex;",
      "info" : "ThrowStatement[11634-11643]:ThrowStatement[11738-11747]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12007-12014]:Modifier[12111-12118]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12015-12021]:Modifier[12119-12125]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12022-12029]:PrimitiveType[12126-12133]"
    }, {
      "left" : "checkOffset",
      "right" : "checkOffset",
      "info" : "SimpleName[12030-12041]:SimpleName[12134-12145]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[12042-12054]:SingleVariableDeclaration[12146-12158]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[12056-12066]:SingleVariableDeclaration[12160-12170]"
    }, {
      "left" : "char expected",
      "right" : "char expected",
      "info" : "SingleVariableDeclaration[12068-12081]:SingleVariableDeclaration[12172-12185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12083-12170]:Block[12187-12274]"
    }, {
      "left" : "return (offset < value.length()) && (value.charAt(offset) == expected);",
      "right" : "return (offset < value.length()) && (value.charAt(offset) == expected);",
      "info" : "ReturnStatement[12093-12164]:ReturnStatement[12197-12268]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12535-12542]:Modifier[12639-12646]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12543-12549]:Modifier[12647-12653]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12550-12553]:PrimitiveType[12654-12657]"
    }, {
      "left" : "parseInt",
      "right" : "parseInt",
      "info" : "SimpleName[12554-12562]:SimpleName[12658-12666]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[12563-12575]:SingleVariableDeclaration[12667-12679]"
    }, {
      "left" : "int beginIndex",
      "right" : "int beginIndex",
      "info" : "SingleVariableDeclaration[12577-12591]:SingleVariableDeclaration[12681-12695]"
    }, {
      "left" : "int endIndex",
      "right" : "int endIndex",
      "info" : "SingleVariableDeclaration[12593-12605]:SingleVariableDeclaration[12697-12709]"
    }, {
      "left" : "NumberFormatException",
      "right" : "NumberFormatException",
      "info" : "SimpleType[12614-12635]:SimpleType[12718-12739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12636-13576]:Block[12740-13680]"
    }, {
      "left" : "if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex)",
      "right" : "if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex)",
      "info" : "IfStatement[12646-12783]:IfStatement[12750-12887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12720-12783]:Block[12824-12887]"
    }, {
      "left" : "throw new NumberFormatException(value);",
      "right" : "throw new NumberFormatException(value);",
      "info" : "ThrowStatement[12734-12773]:ThrowStatement[12838-12877]"
    }, {
      "left" : "int i = beginIndex;",
      "right" : "int i = beginIndex;",
      "info" : "VariableDeclarationStatement[12897-12916]:VariableDeclarationStatement[13001-13020]"
    }, {
      "left" : "int result = 0;",
      "right" : "int result = 0;",
      "info" : "VariableDeclarationStatement[12925-12940]:VariableDeclarationStatement[13029-13044]"
    }, {
      "left" : "int digit;",
      "right" : "int digit;",
      "info" : "VariableDeclarationStatement[12949-12959]:VariableDeclarationStatement[13053-13063]"
    }, {
      "left" : "if (i < endIndex)",
      "right" : "if (i < endIndex)",
      "info" : "IfStatement[12968-13238]:IfStatement[13072-13342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12986-13238]:Block[13090-13342]"
    }, {
      "left" : "digit = Character.digit(value.charAt(i++), 10);",
      "right" : "digit = Character.digit(value.charAt(i++), 10);",
      "info" : "ExpressionStatement[13000-13047]:ExpressionStatement[13104-13151]"
    }, {
      "left" : "if (digit < 0)",
      "right" : "if (digit < 0)",
      "info" : "IfStatement[13060-13199]:IfStatement[13164-13303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13075-13199]:Block[13179-13303]"
    }, {
      "left" : "throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));",
      "right" : "throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));",
      "info" : "ThrowStatement[13093-13185]:ThrowStatement[13197-13289]"
    }, {
      "left" : "result = -digit;",
      "right" : "result = -digit;",
      "info" : "ExpressionStatement[13212-13228]:ExpressionStatement[13316-13332]"
    }, {
      "left" : "while (i < endIndex)",
      "right" : "while (i < endIndex)",
      "info" : "WhileStatement[13247-13546]:WhileStatement[13351-13650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13268-13546]:Block[13372-13650]"
    }, {
      "left" : "digit = Character.digit(value.charAt(i++), 10);",
      "right" : "digit = Character.digit(value.charAt(i++), 10);",
      "info" : "ExpressionStatement[13282-13329]:ExpressionStatement[13386-13433]"
    }, {
      "left" : "if (digit < 0)",
      "right" : "if (digit < 0)",
      "info" : "IfStatement[13342-13481]:IfStatement[13446-13585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13357-13481]:Block[13461-13585]"
    }, {
      "left" : "throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));",
      "right" : "throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));",
      "info" : "ThrowStatement[13375-13467]:ThrowStatement[13479-13571]"
    }, {
      "left" : "result *= 10;",
      "right" : "result *= 10;",
      "info" : "ExpressionStatement[13494-13507]:ExpressionStatement[13598-13611]"
    }, {
      "left" : "result -= digit;",
      "right" : "result -= digit;",
      "info" : "ExpressionStatement[13520-13536]:ExpressionStatement[13624-13640]"
    }, {
      "left" : "return -result;",
      "right" : "return -result;",
      "info" : "ReturnStatement[13555-13570]:ReturnStatement[13659-13674]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13824-13831]:Modifier[13928-13935]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13832-13838]:Modifier[13936-13942]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13839-13843]:PrimitiveType[13943-13947]"
    }, {
      "left" : "padInt",
      "right" : "padInt",
      "info" : "SimpleName[13844-13850]:SimpleName[13948-13954]"
    }, {
      "left" : "StringBuilder buffer",
      "right" : "StringBuilder buffer",
      "info" : "SingleVariableDeclaration[13851-13871]:SingleVariableDeclaration[13955-13975]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[13873-13882]:SingleVariableDeclaration[13977-13986]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[13884-13894]:SingleVariableDeclaration[13988-13998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13896-14092]:Block[14000-14196]"
    }, {
      "left" : "String strValue = Integer.toString(value);",
      "right" : "String strValue = Integer.toString(value);",
      "info" : "VariableDeclarationStatement[13906-13948]:VariableDeclarationStatement[14010-14052]"
    }, {
      "left" : "for (int i = length - strValue.length(); i > 0; i--)",
      "right" : "for (int i = length - strValue.length(); i > 0; i--)",
      "info" : "ForStatement[13957-14053]:ForStatement[14061-14157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14010-14053]:Block[14114-14157]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[14024-14043]:ExpressionStatement[14128-14147]"
    }, {
      "left" : "buffer.append(strValue);",
      "right" : "buffer.append(strValue);",
      "info" : "ExpressionStatement[14062-14086]:ExpressionStatement[14166-14190]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14217-14224]:Modifier[14321-14328]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14225-14231]:Modifier[14329-14335]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14232-14235]:PrimitiveType[14336-14339]"
    }, {
      "left" : "indexOfNonDigit",
      "right" : "indexOfNonDigit",
      "info" : "SimpleName[14236-14251]:SimpleName[14340-14355]"
    }, {
      "left" : "String string",
      "right" : "String string",
      "info" : "SingleVariableDeclaration[14252-14265]:SingleVariableDeclaration[14356-14369]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[14267-14277]:SingleVariableDeclaration[14371-14381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14279-14470]:Block[14383-14574]"
    }, {
      "left" : "for (int i = offset; i < string.length(); i++)",
      "right" : "for (int i = offset; i < string.length(); i++)",
      "info" : "ForStatement[14289-14432]:ForStatement[14393-14536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14336-14432]:Block[14440-14536]"
    }, {
      "left" : "char c = string.charAt(i);",
      "right" : "char c = string.charAt(i);",
      "info" : "VariableDeclarationStatement[14350-14376]:VariableDeclarationStatement[14454-14480]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[14389-14422]:IfStatement[14493-14526]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[14413-14422]:ReturnStatement[14517-14526]"
    }, {
      "left" : "return string.length();",
      "right" : "return string.length();",
      "info" : "ReturnStatement[14441-14464]:ReturnStatement[14545-14568]"
    } ]
  },
  "interFileMappings" : { }
}