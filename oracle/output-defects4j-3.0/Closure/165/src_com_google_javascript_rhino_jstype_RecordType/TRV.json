{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[2552-2600]:FieldDeclaration[2552-2600]"
    }, {
      "left" : "private final SortedMap<String, JSType> properties = Maps.newTreeMap();",
      "right" : "private final SortedMap<String, JSType> properties = Maps.newTreeMap();",
      "info" : "FieldDeclaration[2604-2675]:FieldDeclaration[2604-2675]"
    }, {
      "left" : "private boolean isFrozen = false;",
      "right" : "private boolean isFrozen = false;",
      "info" : "FieldDeclaration[2678-2711]:FieldDeclaration[2712-2745]"
    }, {
      "left" : "public ObjectType getImplicitPrototype()",
      "right" : "public ObjectType getImplicitPrototype()",
      "info" : "MethodDeclaration[4470-4595]:MethodDeclaration[4875-5000]"
    }, {
      "left" : "boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode)",
      "right" : "boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode)",
      "info" : "MethodDeclaration[4599-4918]:MethodDeclaration[5004-5323]"
    }, {
      "left" : "RecordType toMaybeRecordType()",
      "right" : "RecordType toMaybeRecordType()",
      "info" : "MethodDeclaration[7451-7516]:MethodDeclaration[7892-7957]"
    }, {
      "left" : "public boolean isSubtype(JSType that)",
      "right" : "public boolean isSubtype(JSType that)",
      "info" : "MethodDeclaration[7520-8132]:MethodDeclaration[7961-8573]"
    }, {
      "left" : "static boolean isSubtype(ObjectType typeA, RecordType typeB)",
      "right" : "static boolean isSubtype(ObjectType typeA, RecordType typeB)",
      "info" : "MethodDeclaration[8136-9689]:MethodDeclaration[8577-10130]"
    }, {
      "left" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[9693-10081]:MethodDeclaration[10134-10522]"
    } ],
    "mappings" : [
 {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4470-4479]:MarkerAnnotation[4875-4884]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4482-4488]:Modifier[4887-4893]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[4489-4499]:SimpleType[4894-4904]"
    }, {
      "left" : "getImplicitPrototype",
      "right" : "getImplicitPrototype",
      "info" : "SimpleName[4500-4520]:SimpleName[4905-4925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4523-4595]:Block[4928-5000]"
    }, {
      "left" : "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);",
      "right" : "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);",
      "info" : "ReturnStatement[4529-4591]:ReturnStatement[4934-4996]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4599-4608]:MarkerAnnotation[5004-5013]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4611-4618]:PrimitiveType[5016-5023]"
    }, {
      "left" : "defineProperty",
      "right" : "defineProperty",
      "info" : "SimpleName[4619-4633]:SimpleName[5024-5038]"
    }, {
      "left" : "String propertyName",
      "right" : "String propertyName",
      "info" : "SingleVariableDeclaration[4634-4653]:SingleVariableDeclaration[5039-5058]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[4655-4666]:SingleVariableDeclaration[5060-5071]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[4674-4690]:SingleVariableDeclaration[5079-5095]"
    }, {
      "left" : "Node propertyNode",
      "right" : "Node propertyNode",
      "info" : "SingleVariableDeclaration[4692-4709]:SingleVariableDeclaration[5097-5114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4711-4918]:Block[5116-5323]"
    }, {
      "left" : "if (isFrozen)",
      "right" : "if (isFrozen)",
      "info" : "IfStatement[4717-4758]:IfStatement[5122-5163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4731-4758]:Block[5136-5163]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4739-4752]:ReturnStatement[5144-5157]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[4764-4828]:IfStatement[5169-5233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4779-4828]:Block[5184-5233]"
    }, {
      "left" : "properties.put(propertyName, type);",
      "right" : "properties.put(propertyName, type);",
      "info" : "ExpressionStatement[4787-4822]:ExpressionStatement[5192-5227]"
    }, {
      "left" : "return super.defineProperty(propertyName, type, inferred,\n        propertyNode);",
      "right" : "return super.defineProperty(propertyName, type, inferred,\n        propertyNode);",
      "info" : "ReturnStatement[4834-4914]:ReturnStatement[5239-5319]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7451-7460]:MarkerAnnotation[7892-7901]"
    }, {
      "left" : "RecordType",
      "right" : "RecordType",
      "info" : "SimpleType[7463-7473]:SimpleType[7904-7914]"
    }, {
      "left" : "toMaybeRecordType",
      "right" : "toMaybeRecordType",
      "info" : "SimpleName[7474-7491]:SimpleName[7915-7932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7494-7516]:Block[7935-7957]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7500-7512]:ReturnStatement[7941-7953]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7520-7529]:MarkerAnnotation[7961-7970]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7532-7538]:Modifier[7973-7979]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7539-7546]:PrimitiveType[7980-7987]"
    }, {
      "left" : "isSubtype",
      "right" : "isSubtype",
      "info" : "SimpleName[7547-7556]:SimpleName[7988-7997]"
    }, {
      "left" : "JSType that",
      "right" : "JSType that",
      "info" : "SingleVariableDeclaration[7557-7568]:SingleVariableDeclaration[7998-8009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7570-8132]:Block[8011-8573]"
    }, {
      "left" : "if (JSType.isSubtypeHelper(this, that))",
      "right" : "if (JSType.isSubtypeHelper(this, that))",
      "info" : "IfStatement[7576-7642]:IfStatement[8017-8083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7616-7642]:Block[8057-8083]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7624-7636]:ReturnStatement[8065-8077]"
    }, {
      "left" : "if (registry.getNativeObjectType(\n            JSTypeNative.OBJECT_TYPE).isSubtype(that))",
      "right" : "if (registry.getNativeObjectType(\n            JSTypeNative.OBJECT_TYPE).isSubtype(that))",
      "info" : "IfStatement[7716-7831]:IfStatement[8157-8272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7805-7831]:Block[8246-8272]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7813-7825]:ReturnStatement[8254-8266]"
    }, {
      "left" : "if (!that.isRecordType())",
      "right" : "if (!that.isRecordType())",
      "info" : "IfStatement[8009-8062]:IfStatement[8450-8503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8035-8062]:Block[8476-8503]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8043-8056]:ReturnStatement[8484-8497]"
    }, {
      "left" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
      "right" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
      "info" : "ReturnStatement[8068-8128]:ReturnStatement[8509-8569]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8187-8193]:Modifier[8628-8634]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8194-8201]:PrimitiveType[8635-8642]"
    }, {
      "left" : "isSubtype",
      "right" : "isSubtype",
      "info" : "SimpleName[8202-8211]:SimpleName[8643-8652]"
    }, {
      "left" : "ObjectType typeA",
      "right" : "ObjectType typeA",
      "info" : "SingleVariableDeclaration[8212-8228]:SingleVariableDeclaration[8653-8669]"
    }, {
      "left" : "RecordType typeB",
      "right" : "RecordType typeB",
      "info" : "SingleVariableDeclaration[8230-8246]:SingleVariableDeclaration[8671-8687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8248-9689]:Block[8689-10130]"
    }, {
      "left" : "for (String property : typeB.properties.keySet())",
      "right" : "for (String property : typeB.properties.keySet())",
      "info" : "EnhancedForStatement[9115-9667]:EnhancedForStatement[9556-10108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9165-9667]:Block[9606-10108]"
    }, {
      "left" : "if (!typeA.hasProperty(property))",
      "right" : "if (!typeA.hasProperty(property))",
      "info" : "IfStatement[9173-9238]:IfStatement[9614-9679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9207-9238]:Block[9648-9679]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9217-9230]:ReturnStatement[9658-9671]"
    }, {
      "left" : "JSType propA = typeA.getPropertyType(property);",
      "right" : "JSType propA = typeA.getPropertyType(property);",
      "info" : "VariableDeclarationStatement[9246-9293]:VariableDeclarationStatement[9687-9734]"
    }, {
      "left" : "JSType propB = typeB.getPropertyType(property);",
      "right" : "JSType propB = typeB.getPropertyType(property);",
      "info" : "VariableDeclarationStatement[9300-9347]:VariableDeclarationStatement[9741-9788]"
    }, {
      "left" : "if (!propA.isUnknownType() && !propB.isUnknownType())",
      "right" : "if (!propA.isUnknownType() && !propB.isUnknownType())",
      "info" : "IfStatement[9354-9661]:IfStatement[9795-10102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9408-9661]:Block[9849-10102]"
    }, {
      "left" : "if (typeA.isPropertyTypeDeclared(property))",
      "right" : "if (typeA.isPropertyTypeDeclared(property))",
      "info" : "IfStatement[9418-9653]:IfStatement[9859-10094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9462-9557]:Block[9903-9998]"
    }, {
      "left" : "if (!propA.isEquivalentTo(propB))",
      "right" : "if (!propA.isEquivalentTo(propB))",
      "info" : "IfStatement[9474-9547]:IfStatement[9915-9988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9508-9547]:Block[9949-9988]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9522-9535]:ReturnStatement[9963-9976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9563-9653]:Block[10004-10094]"
    }, {
      "left" : "if (!propA.isSubtype(propB))",
      "right" : "if (!propA.isSubtype(propB))",
      "info" : "IfStatement[9575-9643]:IfStatement[10016-10084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9604-9643]:Block[10045-10084]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9618-9631]:ReturnStatement[10059-10072]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9673-9685]:ReturnStatement[10114-10126]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9693-9702]:MarkerAnnotation[10134-10143]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[9705-9711]:SimpleType[10146-10152]"
    }, {
      "left" : "resolveInternal",
      "right" : "resolveInternal",
      "info" : "SimpleName[9712-9727]:SimpleName[10153-10168]"
    }, {
      "left" : "ErrorReporter t",
      "right" : "ErrorReporter t",
      "info" : "SingleVariableDeclaration[9728-9743]:SingleVariableDeclaration[10169-10184]"
    }, {
      "left" : "StaticScope<JSType> scope",
      "right" : "StaticScope<JSType> scope",
      "info" : "SingleVariableDeclaration[9745-9770]:SingleVariableDeclaration[10186-10211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9772-10081]:Block[10213-10522]"
    }, {
      "left" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
      "right" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
      "info" : "EnhancedForStatement[9778-10033]:EnhancedForStatement[10219-10474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9840-10033]:Block[10281-10474]"
    }, {
      "left" : "JSType type = entry.getValue();",
      "right" : "JSType type = entry.getValue();",
      "info" : "VariableDeclarationStatement[9848-9879]:VariableDeclarationStatement[10289-10320]"
    }, {
      "left" : "JSType resolvedType = type.resolve(t, scope);",
      "right" : "JSType resolvedType = type.resolve(t, scope);",
      "info" : "VariableDeclarationStatement[9886-9931]:VariableDeclarationStatement[10327-10372]"
    }, {
      "left" : "if (type != resolvedType)",
      "right" : "if (type != resolvedType)",
      "info" : "IfStatement[9938-10027]:IfStatement[10379-10468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9964-10027]:Block[10405-10468]"
    }, {
      "left" : "properties.put(entry.getKey(), resolvedType);",
      "right" : "properties.put(entry.getKey(), resolvedType);",
      "info" : "ExpressionStatement[9974-10019]:ExpressionStatement[10415-10460]"
    }, {
      "left" : "return super.resolveInternal(t, scope);",
      "right" : "return super.resolveInternal(t, scope);",
      "info" : "ReturnStatement[10038-10077]:ReturnStatement[10479-10518]"
    } ]
  },
  "interFileMappings" : { }
}