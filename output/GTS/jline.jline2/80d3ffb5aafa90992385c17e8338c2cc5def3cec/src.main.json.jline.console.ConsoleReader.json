{
  "matchedElements" : [ {
    "left" : "class : ConsoleReader",
    "right" : "class : ConsoleReader",
    "info" : "TypeDeclaration[1586-135852]:TypeDeclaration[1586-137367]"
  }, {
    "left" : "JLINE_NOBELL",
    "right" : "JLINE_NOBELL",
    "info" : "FieldDeclaration[2177-2234]:FieldDeclaration[2177-2234]"
  }, {
    "left" : "JLINE_ESC_TIMEOUT",
    "right" : "JLINE_ESC_TIMEOUT",
    "info" : "FieldDeclaration[2240-2307]:FieldDeclaration[2240-2307]"
  }, {
    "left" : "JLINE_INPUTRC",
    "right" : "JLINE_INPUTRC",
    "info" : "FieldDeclaration[2313-2372]:FieldDeclaration[2313-2372]"
  }, {
    "left" : "INPUT_RC",
    "right" : "INPUT_RC",
    "info" : "FieldDeclaration[2378-2427]:FieldDeclaration[2378-2427]"
  }, {
    "left" : "DEFAULT_INPUT_RC",
    "right" : "DEFAULT_INPUT_RC",
    "info" : "FieldDeclaration[2433-2494]:FieldDeclaration[2433-2494]"
  }, {
    "left" : "BACKSPACE",
    "right" : "BACKSPACE",
    "info" : "FieldDeclaration[2500-2542]:FieldDeclaration[2500-2542]"
  }, {
    "left" : "RESET_LINE",
    "right" : "RESET_LINE",
    "info" : "FieldDeclaration[2548-2591]:FieldDeclaration[2548-2591]"
  }, {
    "left" : "KEYBOARD_BELL",
    "right" : "KEYBOARD_BELL",
    "info" : "FieldDeclaration[2597-2644]:FieldDeclaration[2597-2644]"
  }, {
    "left" : "NULL_MASK",
    "right" : "NULL_MASK",
    "info" : "FieldDeclaration[2650-2689]:FieldDeclaration[2650-2689]"
  }, {
    "left" : "TAB_WIDTH",
    "right" : "TAB_WIDTH",
    "info" : "FieldDeclaration[2695-2733]:FieldDeclaration[2695-2733]"
  }, {
    "left" : "resources",
    "right" : "resources",
    "info" : "FieldDeclaration[2739-2868]:FieldDeclaration[2739-2868]"
  }, {
    "left" : "terminal",
    "right" : "terminal",
    "info" : "FieldDeclaration[2874-2906]:FieldDeclaration[2874-2906]"
  }, {
    "left" : "out",
    "right" : "out",
    "info" : "FieldDeclaration[2912-2937]:FieldDeclaration[2912-2937]"
  }, {
    "left" : "buf",
    "right" : "buf",
    "info" : "FieldDeclaration[2943-2995]:FieldDeclaration[2943-2995]"
  }, {
    "left" : "prompt",
    "right" : "prompt",
    "info" : "FieldDeclaration[3001-3023]:FieldDeclaration[3001-3023]"
  }, {
    "left" : "promptLen",
    "right" : "promptLen",
    "info" : "FieldDeclaration[3028-3053]:FieldDeclaration[3028-3053]"
  }, {
    "left" : "expandEvents",
    "right" : "expandEvents",
    "info" : "FieldDeclaration[3059-3095]:FieldDeclaration[3059-3095]"
  }, {
    "left" : "bellEnabled",
    "right" : "bellEnabled",
    "info" : "FieldDeclaration[3101-3177]:FieldDeclaration[3101-3177]"
  }, {
    "left" : "handleUserInterrupt",
    "right" : "handleUserInterrupt",
    "info" : "FieldDeclaration[3183-3227]:FieldDeclaration[3183-3227]"
  }, {
    "left" : "mask",
    "right" : "mask",
    "info" : "FieldDeclaration[3233-3256]:FieldDeclaration[3233-3256]"
  }, {
    "left" : "echoCharacter",
    "right" : "echoCharacter",
    "info" : "FieldDeclaration[3262-3294]:FieldDeclaration[3262-3294]"
  }, {
    "left" : "searchTerm",
    "right" : "searchTerm",
    "info" : "FieldDeclaration[3300-3339]:FieldDeclaration[3300-3339]"
  }, {
    "left" : "previousSearchTerm",
    "right" : "previousSearchTerm",
    "info" : "FieldDeclaration[3345-3384]:FieldDeclaration[3345-3384]"
  }, {
    "left" : "searchIndex",
    "right" : "searchIndex",
    "info" : "FieldDeclaration[3390-3419]:FieldDeclaration[3390-3419]"
  }, {
    "left" : "parenBlinkTimeout",
    "right" : "parenBlinkTimeout",
    "info" : "FieldDeclaration[3425-3461]:FieldDeclaration[3425-3461]"
  }, {
    "left" : "in",
    "right" : "in",
    "info" : "FieldDeclaration[3700-3734]:FieldDeclaration[3700-3734]"
  }, {
    "left" : "escapeTimeout",
    "right" : "escapeTimeout",
    "info" : "FieldDeclaration[3739-3784]:FieldDeclaration[3739-3784]"
  }, {
    "left" : "reader",
    "right" : "reader",
    "info" : "FieldDeclaration[3789-3827]:FieldDeclaration[3789-3827]"
  }, {
    "left" : "isUnitTestInput",
    "right" : "isUnitTestInput",
    "info" : "FieldDeclaration[3956-4003]:FieldDeclaration[3956-4003]"
  }, {
    "left" : "charSearchChar",
    "right" : "charSearchChar",
    "info" : "FieldDeclaration[4009-4120]:FieldDeclaration[4009-4120]"
  }, {
    "left" : "charSearchLastInvokeChar",
    "right" : "charSearchLastInvokeChar",
    "info" : "FieldDeclaration[4162-4205]:FieldDeclaration[4162-4205]"
  }, {
    "left" : "charSearchFirstInvokeChar",
    "right" : "charSearchFirstInvokeChar",
    "info" : "FieldDeclaration[4240-4284]:FieldDeclaration[4240-4284]"
  }, {
    "left" : "yankBuffer",
    "right" : "yankBuffer",
    "info" : "FieldDeclaration[4321-4394]:FieldDeclaration[4321-4394]"
  }, {
    "left" : "killRing",
    "right" : "killRing",
    "info" : "FieldDeclaration[4400-4443]:FieldDeclaration[4400-4443]"
  }, {
    "left" : "encoding",
    "right" : "encoding",
    "info" : "FieldDeclaration[4449-4473]:FieldDeclaration[4449-4473]"
  }, {
    "left" : "recording",
    "right" : "recording",
    "info" : "FieldDeclaration[4479-4505]:FieldDeclaration[4479-4505]"
  }, {
    "left" : "macro",
    "right" : "macro",
    "info" : "FieldDeclaration[4511-4537]:FieldDeclaration[4511-4537]"
  }, {
    "left" : "appName",
    "right" : "appName",
    "info" : "FieldDeclaration[4543-4566]:FieldDeclaration[4543-4566]"
  }, {
    "left" : "inputrcUrl",
    "right" : "inputrcUrl",
    "info" : "FieldDeclaration[4572-4595]:FieldDeclaration[4572-4595]"
  }, {
    "left" : "consoleKeys",
    "right" : "consoleKeys",
    "info" : "FieldDeclaration[4601-4633]:FieldDeclaration[4601-4633]"
  }, {
    "left" : "commentBegin",
    "right" : "commentBegin",
    "info" : "FieldDeclaration[4639-4674]:FieldDeclaration[4639-4674]"
  }, {
    "left" : "skipLF",
    "right" : "skipLF",
    "info" : "FieldDeclaration[4680-4711]:FieldDeclaration[4680-4711]"
  }, {
    "left" : "copyPasteDetection",
    "right" : "copyPasteDetection",
    "info" : "FieldDeclaration[4717-5091]:FieldDeclaration[4717-5091]"
  }, {
    "left" : "state",
    "right" : "state",
    "info" : "FieldDeclaration[5161-5198]:FieldDeclaration[5161-5198]"
  }, {
    "left" : "public ConsoleReader() : ",
    "right" : "public ConsoleReader() : ",
    "info" : "MethodDeclaration[5829-5956]:MethodDeclaration[5829-5956]"
  }, {
    "left" : "public ConsoleReader(in , out ) : ",
    "right" : "public ConsoleReader(in , out ) : ",
    "info" : "MethodDeclaration[5962-6090]:MethodDeclaration[5962-6090]"
  }, {
    "left" : "public ConsoleReader(in , out , term ) : ",
    "right" : "public ConsoleReader(in , out , term ) : ",
    "info" : "MethodDeclaration[6096-6245]:MethodDeclaration[6096-6245]"
  }, {
    "left" : "public ConsoleReader(appName , in , out , term ) : ",
    "right" : "public ConsoleReader(appName , in , out , term ) : ",
    "info" : "MethodDeclaration[6251-6451]:MethodDeclaration[6251-6451]"
  }, {
    "left" : "public ConsoleReader(appName , in , out , term , encoding ) : ",
    "right" : "public ConsoleReader(appName , in , out , term , encoding ) : ",
    "info" : "MethodDeclaration[6457-7201]:MethodDeclaration[6457-7201]"
  }, {
    "left" : "private getInputRc() : ",
    "right" : "private getInputRc() : ",
    "info" : "MethodDeclaration[7207-7614]:MethodDeclaration[7207-7614]"
  }, {
    "left" : "public getKeys() : ",
    "right" : "public getKeys() : ",
    "info" : "MethodDeclaration[7620-7689]:MethodDeclaration[7620-7689]"
  }, {
    "left" : "package setInput(in ) : void",
    "right" : "package setInput(in ) : void",
    "info" : "MethodDeclaration[7695-9111]:MethodDeclaration[7695-9111]"
  }, {
    "left" : "public shutdown() : void",
    "right" : "public shutdown() : void",
    "info" : "MethodDeclaration[9117-9424]:MethodDeclaration[9117-9424]"
  }, {
    "left" : "protected finalize() : void",
    "right" : "protected finalize() : void",
    "info" : "MethodDeclaration[9430-9688]:MethodDeclaration[9430-9688]"
  }, {
    "left" : "public getInput() : ",
    "right" : "public getInput() : ",
    "info" : "MethodDeclaration[9694-9750]:MethodDeclaration[9694-9750]"
  }, {
    "left" : "public getOutput() : ",
    "right" : "public getOutput() : ",
    "info" : "MethodDeclaration[9756-9809]:MethodDeclaration[9756-9809]"
  }, {
    "left" : "public getTerminal() : ",
    "right" : "public getTerminal() : ",
    "info" : "MethodDeclaration[9815-9877]:MethodDeclaration[9815-9877]"
  }, {
    "left" : "public getCursorBuffer() : ",
    "right" : "public getCursorBuffer() : ",
    "info" : "MethodDeclaration[9883-9948]:MethodDeclaration[9883-9948]"
  }, {
    "left" : "public setExpandEvents(expand boolean) : void",
    "right" : "public setExpandEvents(expand boolean) : void",
    "info" : "MethodDeclaration[9954-10047]:MethodDeclaration[9954-10047]"
  }, {
    "left" : "public getExpandEvents() : boolean",
    "right" : "public getExpandEvents() : boolean",
    "info" : "MethodDeclaration[10053-10122]:MethodDeclaration[10053-10122]"
  }, {
    "left" : "public setCopyPasteDetection(onoff boolean) : void",
    "right" : "public setCopyPasteDetection(onoff boolean) : void",
    "info" : "MethodDeclaration[10128-10540]:MethodDeclaration[10128-10540]"
  }, {
    "left" : "public isCopyPasteDetectionEnabled() : boolean",
    "right" : "public isCopyPasteDetectionEnabled() : boolean",
    "info" : "MethodDeclaration[10546-10709]:MethodDeclaration[10546-10709]"
  }, {
    "left" : "public setBellEnabled(enabled boolean) : void",
    "right" : "public setBellEnabled(enabled boolean) : void",
    "info" : "MethodDeclaration[10715-10946]:MethodDeclaration[10715-10946]"
  }, {
    "left" : "public getBellEnabled() : boolean",
    "right" : "public getBellEnabled() : boolean",
    "info" : "MethodDeclaration[10952-11155]:MethodDeclaration[10952-11155]"
  }, {
    "left" : "public setHandleUserInterrupt(enabled boolean) : void",
    "right" : "public setHandleUserInterrupt(enabled boolean) : void",
    "info" : "MethodDeclaration[11161-11584]:MethodDeclaration[11161-11584]"
  }, {
    "left" : "public getHandleUserInterrupt() : boolean",
    "right" : "public getHandleUserInterrupt() : boolean",
    "info" : "MethodDeclaration[11590-11821]:MethodDeclaration[11590-11821]"
  }, {
    "left" : "public setCommentBegin(commentBegin ) : void",
    "right" : "public setCommentBegin(commentBegin ) : void",
    "info" : "MethodDeclaration[11827-12118]:MethodDeclaration[11827-12118]"
  }, {
    "left" : "public getCommentBegin() : ",
    "right" : "public getCommentBegin() : ",
    "info" : "MethodDeclaration[12124-12531]:MethodDeclaration[12124-12531]"
  }, {
    "left" : "public setPrompt(prompt ) : void",
    "right" : "public setPrompt(prompt ) : void",
    "info" : "MethodDeclaration[12537-12705]:MethodDeclaration[12537-12705]"
  }, {
    "left" : "public getPrompt() : ",
    "right" : "public getPrompt() : ",
    "info" : "MethodDeclaration[12711-12767]:MethodDeclaration[12711-12767]"
  }, {
    "left" : "public setEchoCharacter(c ) : void",
    "right" : "public setEchoCharacter(c ) : void",
    "info" : "MethodDeclaration[12773-13452]:MethodDeclaration[12773-13452]"
  }, {
    "left" : "public getEchoCharacter() : ",
    "right" : "public getEchoCharacter() : ",
    "info" : "MethodDeclaration[13458-13582]:MethodDeclaration[13458-13582]"
  }, {
    "left" : "protected resetLine() : boolean",
    "right" : "protected resetLine() : boolean",
    "info" : "MethodDeclaration[13588-14197]:MethodDeclaration[13588-14197]"
  }, {
    "left" : "package getCursorPosition() : int",
    "right" : "package getCursorPosition() : int",
    "info" : "MethodDeclaration[14203-14359]:MethodDeclaration[14203-14359]"
  }, {
    "left" : "private lastLine(str ) : ",
    "right" : "private lastLine(str ) : ",
    "info" : "MethodDeclaration[14365-14766]:MethodDeclaration[14365-14766]"
  }, {
    "left" : "private stripAnsi(str ) : ",
    "right" : "private stripAnsi(str ) : ",
    "info" : "MethodDeclaration[14772-15167]:MethodDeclaration[14772-15167]"
  }, {
    "left" : "public setCursorPosition(position int) : boolean",
    "right" : "public setCursorPosition(position int) : boolean",
    "info" : "MethodDeclaration[15173-15468]:MethodDeclaration[15173-15468]"
  }, {
    "left" : "private setBuffer(buffer ) : void",
    "right" : "private setBuffer(buffer ) : void",
    "info" : "MethodDeclaration[15474-16747]:MethodDeclaration[15474-16747]"
  }, {
    "left" : "private setBuffer(buffer ) : void",
    "right" : "private setBuffer(buffer ) : void",
    "info" : "MethodDeclaration[16753-16872]:MethodDeclaration[16753-16872]"
  }, {
    "left" : "private setBufferKeepPos(buffer ) : void",
    "right" : "private setBufferKeepPos(buffer ) : void",
    "info" : "MethodDeclaration[16878-17044]:MethodDeclaration[16878-17044]"
  }, {
    "left" : "private setBufferKeepPos(buffer ) : void",
    "right" : "private setBufferKeepPos(buffer ) : void",
    "info" : "MethodDeclaration[17050-17183]:MethodDeclaration[17050-17183]"
  }, {
    "left" : "public drawLine() : void",
    "right" : "public drawLine() : void",
    "info" : "MethodDeclaration[17189-17672]:MethodDeclaration[17189-17672]"
  }, {
    "left" : "public redrawLine() : void",
    "right" : "public redrawLine() : void",
    "info" : "MethodDeclaration[17678-17854]:MethodDeclaration[17678-17854]"
  }, {
    "left" : "package finishBuffer() : ",
    "right" : "package finishBuffer() : ",
    "info" : "MethodDeclaration[17860-19331]:MethodDeclaration[17860-19331]"
  }, {
    "left" : "protected expandEvents(str ) : ",
    "right" : "protected expandEvents(str ) : ",
    "info" : "MethodDeclaration[19337-27024]:MethodDeclaration[19337-27024]"
  }, {
    "left" : "public putString(str ) : void",
    "right" : "public putString(str ) : void",
    "info" : "MethodDeclaration[27030-27465]:MethodDeclaration[27030-27465]"
  }, {
    "left" : "private drawBuffer(clear int) : void",
    "right" : "private drawBuffer(clear int) : void",
    "info" : "MethodDeclaration[27471-29666]:MethodDeclaration[27471-29666]"
  }, {
    "left" : "private drawBuffer() : void",
    "right" : "private drawBuffer() : void",
    "info" : "MethodDeclaration[29672-29886]:MethodDeclaration[29672-29886]"
  }, {
    "left" : "private clearAhead(num int, delta int) : void",
    "right" : "private clearAhead(num int, delta int) : void",
    "info" : "MethodDeclaration[29892-31411]:MethodDeclaration[29892-31411]"
  }, {
    "left" : "protected back(num int) : void",
    "right" : "protected back(num int) : void",
    "info" : "MethodDeclaration[31417-32211]:MethodDeclaration[31417-32211]"
  }, {
    "left" : "public flush() : void",
    "right" : "public flush() : void",
    "info" : "MethodDeclaration[32217-32479]:MethodDeclaration[32217-32479]"
  }, {
    "left" : "private backspaceAll() : int",
    "right" : "private backspaceAll() : int",
    "info" : "MethodDeclaration[32485-32583]:MethodDeclaration[32485-32583]"
  }, {
    "left" : "private backspace(num int) : int",
    "right" : "private backspace(num int) : int",
    "info" : "MethodDeclaration[32589-34162]:MethodDeclaration[32589-34162]"
  }, {
    "left" : "public backspace() : boolean",
    "right" : "public backspace() : boolean",
    "info" : "MethodDeclaration[34168-34338]:MethodDeclaration[34168-34338]"
  }, {
    "left" : "protected moveToEnd() : boolean",
    "right" : "protected moveToEnd() : boolean",
    "info" : "MethodDeclaration[34344-34535]:MethodDeclaration[34344-34535]"
  }, {
    "left" : "private deleteCurrentCharacter() : boolean",
    "right" : "private deleteCurrentCharacter() : boolean",
    "info" : "MethodDeclaration[34541-34905]:MethodDeclaration[34541-34905]"
  }, {
    "left" : "private viDeleteChangeYankToRemap(op ) : ",
    "right" : "private viDeleteChangeYankToRemap(op ) : ",
    "info" : "MethodDeclaration[34911-36059]:MethodDeclaration[34911-36059]"
  }, {
    "left" : "private viRubout(count int) : boolean",
    "right" : "private viRubout(count int) : boolean",
    "info" : "MethodDeclaration[36065-36449]:MethodDeclaration[36065-36449]"
  }, {
    "left" : "private viDelete(count int) : boolean",
    "right" : "private viDelete(count int) : boolean",
    "info" : "MethodDeclaration[36455-36927]:MethodDeclaration[36455-36927]"
  }, {
    "left" : "private viChangeCase(count int) : boolean",
    "right" : "private viChangeCase(count int) : boolean",
    "info" : "MethodDeclaration[36933-37976]:MethodDeclaration[36933-37976]"
  }, {
    "left" : "private viChangeChar(count int, c int) : boolean",
    "right" : "private viChangeChar(count int, c int) : boolean",
    "info" : "MethodDeclaration[37982-38876]:MethodDeclaration[37982-38876]"
  }, {
    "left" : "private viPreviousWord(count int) : boolean",
    "right" : "private viPreviousWord(count int) : boolean",
    "info" : "MethodDeclaration[38882-39995]:MethodDeclaration[38882-39995]"
  }, {
    "left" : "private viDeleteTo(startPos int, endPos int, isChange boolean) : boolean",
    "right" : "private viDeleteTo(startPos int, endPos int, isChange boolean) : boolean",
    "info" : "MethodDeclaration[40001-41465]:MethodDeclaration[40001-41465]"
  }, {
    "left" : "private viYankTo(startPos int, endPos int) : boolean",
    "right" : "private viYankTo(startPos int, endPos int) : boolean",
    "info" : "MethodDeclaration[41471-42532]:MethodDeclaration[41471-42532]"
  }, {
    "left" : "private viPut(count int) : boolean",
    "right" : "private viPut(count int) : boolean",
    "info" : "MethodDeclaration[42538-43187]:MethodDeclaration[42538-43187]"
  }, {
    "left" : "private viCharSearch(count int, invokeChar int, ch int) : boolean",
    "right" : "private viCharSearch(count int, invokeChar int, ch int) : boolean",
    "info" : "MethodDeclaration[43193-46766]:MethodDeclaration[43193-46766]"
  }, {
    "left" : "private switchCase(ch char) : char",
    "right" : "private switchCase(ch char) : char",
    "info" : "MethodDeclaration[46772-46951]:MethodDeclaration[46772-46951]"
  }, {
    "left" : "private isInViMoveOperationState() : boolean",
    "right" : "private isInViMoveOperationState() : boolean",
    "info" : "MethodDeclaration[46957-47261]:MethodDeclaration[46957-47261]"
  }, {
    "left" : "private viNextWord(count int) : boolean",
    "right" : "private viNextWord(count int) : boolean",
    "info" : "MethodDeclaration[47267-48459]:MethodDeclaration[47267-48459]"
  }, {
    "left" : "private viEndWord(count int) : boolean",
    "right" : "private viEndWord(count int) : boolean",
    "info" : "MethodDeclaration[48465-49664]:MethodDeclaration[48465-49664]"
  }, {
    "left" : "private previousWord() : boolean",
    "right" : "private previousWord() : boolean",
    "info" : "MethodDeclaration[49670-49957]:MethodDeclaration[49670-49957]"
  }, {
    "left" : "private nextWord() : boolean",
    "right" : "private nextWord() : boolean",
    "info" : "MethodDeclaration[49963-50246]:MethodDeclaration[49963-50246]"
  }, {
    "left" : "private unixWordRubout(count int) : boolean",
    "right" : "private unixWordRubout(count int) : boolean",
    "info" : "MethodDeclaration[50252-51629]:MethodDeclaration[50252-51629]"
  }, {
    "left" : "private insertComment(isViMode boolean) : ",
    "right" : "private insertComment(isViMode boolean) : ",
    "info" : "MethodDeclaration[51635-51928]:MethodDeclaration[51635-51928]"
  }, {
    "left" : "private insert(count int, str ) : boolean",
    "right" : "private insert(count int, str ) : boolean",
    "info" : "MethodDeclaration[51934-52836]:MethodDeclaration[51934-52836]"
  }, {
    "left" : "private viSearch(searchChar char) : int",
    "right" : "private viSearch(searchChar char) : int",
    "info" : "MethodDeclaration[52842-58444]:MethodDeclaration[52842-58444]"
  }, {
    "left" : "public setParenBlinkTimeout(timeout int) : void",
    "right" : "public setParenBlinkTimeout(timeout int) : void",
    "info" : "MethodDeclaration[58450-58540]:MethodDeclaration[58450-58540]"
  }, {
    "left" : "private insertClose(s ) : void",
    "right" : "private insertClose(s ) : void",
    "info" : "MethodDeclaration[58546-58856]:MethodDeclaration[58546-58856]"
  }, {
    "left" : "private viMatch() : boolean",
    "right" : "private viMatch() : boolean",
    "info" : "MethodDeclaration[58862-60272]:MethodDeclaration[58862-60272]"
  }, {
    "left" : "private getBracketType(ch char) : int",
    "right" : "private getBracketType(ch char) : int",
    "info" : "MethodDeclaration[60278-60901]:MethodDeclaration[60278-60901]"
  }, {
    "left" : "private deletePreviousWord() : boolean",
    "right" : "private deletePreviousWord() : boolean",
    "info" : "MethodDeclaration[60907-61511]:MethodDeclaration[60907-61511]"
  }, {
    "left" : "private deleteNextWord() : boolean",
    "right" : "private deleteNextWord() : boolean",
    "info" : "MethodDeclaration[61517-62093]:MethodDeclaration[61517-62093]"
  }, {
    "left" : "private capitalizeWord() : boolean",
    "right" : "private capitalizeWord() : boolean",
    "info" : "MethodDeclaration[62099-62575]:MethodDeclaration[62099-62575]"
  }, {
    "left" : "private upCaseWord() : boolean",
    "right" : "private upCaseWord() : boolean",
    "info" : "MethodDeclaration[62581-62961]:MethodDeclaration[62581-62961]"
  }, {
    "left" : "private downCaseWord() : boolean",
    "right" : "private downCaseWord() : boolean",
    "info" : "MethodDeclaration[62967-63349]:MethodDeclaration[62967-63349]"
  }, {
    "left" : "private transposeChars(count int) : boolean",
    "right" : "private transposeChars(count int) : boolean",
    "info" : "MethodDeclaration[63355-64488]:MethodDeclaration[63355-64488]"
  }, {
    "left" : "public isKeyMap(name ) : boolean",
    "right" : "public isKeyMap(name ) : boolean",
    "info" : "MethodDeclaration[64494-64910]:MethodDeclaration[64494-64910]"
  }, {
    "left" : "public accept() : ",
    "right" : "public accept() : ",
    "info" : "MethodDeclaration[64917-65268]:MethodDeclaration[64917-65268]"
  }, {
    "left" : "private abort() : void",
    "right" : "private abort() : void",
    "info" : "MethodDeclaration[65274-65399]:MethodDeclaration[65274-65399]"
  }, {
    "left" : "public moveCursor(num int) : int",
    "right" : "public moveCursor(num int) : int",
    "info" : "MethodDeclaration[65405-66174]:MethodDeclaration[65405-66174]"
  }, {
    "left" : "private moveInternal(where int) : void",
    "right" : "private moveInternal(where int) : void",
    "info" : "MethodDeclaration[66180-68055]:MethodDeclaration[66180-68055]"
  }, {
    "left" : "public replace(num int, replacement ) : boolean",
    "right" : "public replace(num int, replacement ) : boolean",
    "info" : "MethodDeclaration[68098-68533]:MethodDeclaration[68098-68533]"
  }, {
    "left" : "public readCharacter() : int",
    "right" : "public readCharacter(checkForAltKeyCombo boolean) : int",
    "info" : "MethodDeclaration[68539-68971]:MethodDeclaration[68763-70308]"
  }, {
    "left" : "private clearEcho(c int) : int",
    "right" : "private clearEcho(c int) : int",
    "info" : "MethodDeclaration[68977-69387]:MethodDeclaration[70314-70724]"
  }, {
    "left" : "private countEchoCharacters(c int) : int",
    "right" : "private countEchoCharacters(c int) : int",
    "info" : "MethodDeclaration[69393-69826]:MethodDeclaration[70730-71163]"
  }, {
    "left" : "private getPrintableCharacters(ch int) : ",
    "right" : "private getPrintableCharacters(ch int) : ",
    "info" : "MethodDeclaration[69832-71088]:MethodDeclaration[71169-72425]"
  }, {
    "left" : "public readCharacter() : int",
    "right" : "public readCharacter(checkForAltKeyCombo boolean, ) : int",
    "info" : "MethodDeclaration[71094-71500]:MethodDeclaration[72561-73015]"
  }, {
    "left" : "JLINE_COMPLETION_THRESHOLD",
    "right" : "JLINE_COMPLETION_THRESHOLD",
    "info" : "FieldDeclaration[71541-71626]:FieldDeclaration[73056-73141]"
  }, {
    "left" : "public readLine() : ",
    "right" : "public readLine() : ",
    "info" : "MethodDeclaration[71667-71839]:MethodDeclaration[73182-73354]"
  }, {
    "left" : "public readLine(mask ) : ",
    "right" : "public readLine(mask ) : ",
    "info" : "MethodDeclaration[71845-72119]:MethodDeclaration[73360-73634]"
  }, {
    "left" : "public readLine(prompt ) : ",
    "right" : "public readLine(prompt ) : ",
    "info" : "MethodDeclaration[72125-72234]:MethodDeclaration[73640-73749]"
  }, {
    "left" : "public setKeyMap(name ) : boolean",
    "right" : "public setKeyMap(name ) : boolean",
    "info" : "MethodDeclaration[72240-72597]:MethodDeclaration[73755-74112]"
  }, {
    "left" : "public getKeyMap() : ",
    "right" : "public getKeyMap() : ",
    "info" : "MethodDeclaration[72603-72957]:MethodDeclaration[74118-74472]"
  }, {
    "left" : "public readLine(prompt , mask ) : ",
    "right" : "public readLine(prompt , mask ) : ",
    "info" : "MethodDeclaration[72963-112839]:MethodDeclaration[74478-114354]"
  }, {
    "left" : "private readLineSimple() : ",
    "right" : "private readLineSimple() : ",
    "info" : "MethodDeclaration[112845-113755]:MethodDeclaration[114360-115270]"
  }, {
    "left" : "completers",
    "right" : "completers",
    "info" : "FieldDeclaration[113794-113865]:FieldDeclaration[115309-115380]"
  }, {
    "left" : "completionHandler",
    "right" : "completionHandler",
    "info" : "FieldDeclaration[113871-113954]:FieldDeclaration[115386-115469]"
  }, {
    "left" : "public addCompleter(completer ) : boolean",
    "right" : "public addCompleter(completer ) : boolean",
    "info" : "MethodDeclaration[113960-114324]:MethodDeclaration[115475-115839]"
  }, {
    "left" : "public removeCompleter(completer ) : boolean",
    "right" : "public removeCompleter(completer ) : boolean",
    "info" : "MethodDeclaration[114330-114703]:MethodDeclaration[115845-116218]"
  }, {
    "left" : "public getCompleters() : ",
    "right" : "public getCompleters() : ",
    "info" : "MethodDeclaration[114709-114893]:MethodDeclaration[116224-116408]"
  }, {
    "left" : "public setCompletionHandler(handler ) : void",
    "right" : "public setCompletionHandler(handler ) : void",
    "info" : "MethodDeclaration[114899-115028]:MethodDeclaration[116414-116543]"
  }, {
    "left" : "public getCompletionHandler() : ",
    "right" : "public getCompletionHandler() : ",
    "info" : "MethodDeclaration[115034-115128]:MethodDeclaration[116549-116643]"
  }, {
    "left" : "protected complete() : boolean",
    "right" : "protected complete() : boolean",
    "info" : "MethodDeclaration[115134-115901]:MethodDeclaration[116649-117416]"
  }, {
    "left" : "protected printCompletionCandidates() : void",
    "right" : "protected printCompletionCandidates() : void",
    "info" : "MethodDeclaration[115907-116494]:MethodDeclaration[117422-118009]"
  }, {
    "left" : "autoprintThreshold",
    "right" : "autoprintThreshold",
    "info" : "FieldDeclaration[116500-116735]:FieldDeclaration[118015-118250]"
  }, {
    "left" : "public setAutoprintThreshold(threshold int) : void",
    "right" : "public setAutoprintThreshold(threshold int) : void",
    "info" : "MethodDeclaration[116765-116973]:MethodDeclaration[118280-118488]"
  }, {
    "left" : "public getAutoprintThreshold() : int",
    "right" : "public getAutoprintThreshold() : int",
    "info" : "MethodDeclaration[116979-117148]:MethodDeclaration[118494-118663]"
  }, {
    "left" : "paginationEnabled",
    "right" : "paginationEnabled",
    "info" : "FieldDeclaration[117154-117188]:FieldDeclaration[118669-118703]"
  }, {
    "left" : "public setPaginationEnabled(enabled boolean) : void",
    "right" : "public setPaginationEnabled(enabled boolean) : void",
    "info" : "MethodDeclaration[117194-117422]:MethodDeclaration[118709-118937]"
  }, {
    "left" : "public isPaginationEnabled() : boolean",
    "right" : "public isPaginationEnabled() : boolean",
    "info" : "MethodDeclaration[117428-117629]:MethodDeclaration[118943-119144]"
  }, {
    "left" : "history",
    "right" : "history",
    "info" : "FieldDeclaration[117665-117711]:FieldDeclaration[119180-119226]"
  }, {
    "left" : "public setHistory(history ) : void",
    "right" : "public setHistory(history ) : void",
    "info" : "MethodDeclaration[117717-117802]:MethodDeclaration[119232-119317]"
  }, {
    "left" : "public getHistory() : ",
    "right" : "public getHistory() : ",
    "info" : "MethodDeclaration[117808-117867]:MethodDeclaration[119323-119382]"
  }, {
    "left" : "historyEnabled",
    "right" : "historyEnabled",
    "info" : "FieldDeclaration[117873-117911]:FieldDeclaration[119388-119426]"
  }, {
    "left" : "public setHistoryEnabled(enabled boolean) : void",
    "right" : "public setHistoryEnabled(enabled boolean) : void",
    "info" : "MethodDeclaration[117917-118097]:MethodDeclaration[119432-119612]"
  }, {
    "left" : "public isHistoryEnabled() : boolean",
    "right" : "public isHistoryEnabled() : boolean",
    "info" : "MethodDeclaration[118103-118256]:MethodDeclaration[119618-119771]"
  }, {
    "left" : "private moveHistory(next boolean, count int) : boolean",
    "right" : "private moveHistory(next boolean, count int) : boolean",
    "info" : "MethodDeclaration[118262-118808]:MethodDeclaration[119777-120323]"
  }, {
    "left" : "private moveHistory(next boolean) : boolean",
    "right" : "private moveHistory(next boolean) : boolean",
    "info" : "MethodDeclaration[118814-119166]:MethodDeclaration[120329-120681]"
  }, {
    "left" : "CR",
    "right" : "CR",
    "info" : "FieldDeclaration[119203-119268]:FieldDeclaration[120718-120783]"
  }, {
    "left" : "private print(c int) : void",
    "right" : "private print(c int) : void",
    "info" : "MethodDeclaration[119274-119641]:MethodDeclaration[120789-121156]"
  }, {
    "left" : "private print() : void",
    "right" : "private print() : void",
    "info" : "MethodDeclaration[119647-120536]:MethodDeclaration[121162-122051]"
  }, {
    "left" : "private print(c char, num int) : void",
    "right" : "private print(c char, num int) : void",
    "info" : "MethodDeclaration[120542-120800]:MethodDeclaration[122057-122315]"
  }, {
    "left" : "public print(s ) : void",
    "right" : "public print(s ) : void",
    "info" : "MethodDeclaration[120806-121029]:MethodDeclaration[122321-122544]"
  }, {
    "left" : "public println(s ) : void",
    "right" : "public println(s ) : void",
    "info" : "MethodDeclaration[121035-121185]:MethodDeclaration[122550-122700]"
  }, {
    "left" : "public println() : void",
    "right" : "public println() : void",
    "info" : "MethodDeclaration[121191-121343]:MethodDeclaration[122706-122858]"
  }, {
    "left" : "public delete() : boolean",
    "right" : "public delete() : boolean",
    "info" : "MethodDeclaration[121379-121699]:MethodDeclaration[122894-123214]"
  }, {
    "left" : "public killLine() : boolean",
    "right" : "public killLine() : boolean",
    "info" : "MethodDeclaration[121705-122294]:MethodDeclaration[123220-123809]"
  }, {
    "left" : "public yank() : boolean",
    "right" : "public yank() : boolean",
    "info" : "MethodDeclaration[122300-122504]:MethodDeclaration[123815-124019]"
  }, {
    "left" : "public yankPop() : boolean",
    "right" : "public yankPop() : boolean",
    "info" : "MethodDeclaration[122510-123014]:MethodDeclaration[124025-124529]"
  }, {
    "left" : "public clearScreen() : boolean",
    "right" : "public clearScreen() : boolean",
    "info" : "MethodDeclaration[123020-123434]:MethodDeclaration[124535-124949]"
  }, {
    "left" : "public beep() : void",
    "right" : "public beep() : void",
    "info" : "MethodDeclaration[123440-123691]:MethodDeclaration[124955-125206]"
  }, {
    "left" : "public paste() : boolean",
    "right" : "public paste() : boolean",
    "info" : "MethodDeclaration[123697-126045]:MethodDeclaration[125212-127560]"
  }, {
    "left" : "public addTriggeredAction(c char, listener ) : void",
    "right" : "public addTriggeredAction(c char, listener ) : void",
    "info" : "MethodDeclaration[126051-126488]:MethodDeclaration[127566-128003]"
  }, {
    "left" : "public printColumns(items ) : void",
    "right" : "public printColumns(items ) : void",
    "info" : "MethodDeclaration[126533-128570]:MethodDeclaration[128048-130085]"
  }, {
    "left" : "maskThread",
    "right" : "maskThread",
    "info" : "FieldDeclaration[128629-128655]:FieldDeclaration[130144-130170]"
  }, {
    "left" : "private beforeReadLine(prompt , mask ) : void",
    "right" : "private beforeReadLine(prompt , mask ) : void",
    "info" : "MethodDeclaration[128661-129786]:MethodDeclaration[130176-131301]"
  }, {
    "left" : "public run() : void",
    "right" : "public run() : void",
    "info" : "MethodDeclaration[129052-129625]:MethodDeclaration[130567-131140]"
  }, {
    "left" : "private afterReadLine() : void",
    "right" : "private afterReadLine() : void",
    "info" : "MethodDeclaration[129792-129960]:MethodDeclaration[131307-131475]"
  }, {
    "left" : "public resetPromptLine(prompt , buffer , cursorDest int) : void",
    "right" : "public resetPromptLine(prompt , buffer , cursorDest int) : void",
    "info" : "MethodDeclaration[129966-131080]:MethodDeclaration[131481-132595]"
  }, {
    "left" : "public printSearchStatus(searchTerm , match ) : void",
    "right" : "public printSearchStatus(searchTerm , match ) : void",
    "info" : "MethodDeclaration[131086-131244]:MethodDeclaration[132601-132759]"
  }, {
    "left" : "public printForwardSearchStatus(searchTerm , match ) : void",
    "right" : "public printForwardSearchStatus(searchTerm , match ) : void",
    "info" : "MethodDeclaration[131250-131407]:MethodDeclaration[132765-132922]"
  }, {
    "left" : "private printSearchStatus(searchTerm , match , searchLabel ) : void",
    "right" : "private printSearchStatus(searchTerm , match , searchLabel ) : void",
    "info" : "MethodDeclaration[131413-131685]:MethodDeclaration[132928-133200]"
  }, {
    "left" : "public restoreLine(originalPrompt , cursorDest int) : void",
    "right" : "public restoreLine(originalPrompt , cursorDest int) : void",
    "info" : "MethodDeclaration[131691-131976]:MethodDeclaration[133206-133491]"
  }, {
    "left" : "public searchBackwards(searchTerm , startIndex int) : int",
    "right" : "public searchBackwards(searchTerm , startIndex int) : int",
    "info" : "MethodDeclaration[132018-132409]:MethodDeclaration[133533-133924]"
  }, {
    "left" : "public searchBackwards(searchTerm ) : int",
    "right" : "public searchBackwards(searchTerm ) : int",
    "info" : "MethodDeclaration[132415-132733]:MethodDeclaration[133930-134248]"
  }, {
    "left" : "public searchBackwards(searchTerm , startIndex int, startsWith boolean) : int",
    "right" : "public searchBackwards(searchTerm , startIndex int, startsWith boolean) : int",
    "info" : "MethodDeclaration[132740-133317]:MethodDeclaration[134255-134832]"
  }, {
    "left" : "public searchForwards(searchTerm , startIndex int) : int",
    "right" : "public searchForwards(searchTerm , startIndex int) : int",
    "info" : "MethodDeclaration[133323-133711]:MethodDeclaration[134838-135226]"
  }, {
    "left" : "public searchForwards(searchTerm ) : int",
    "right" : "public searchForwards(searchTerm ) : int",
    "info" : "MethodDeclaration[133716-134031]:MethodDeclaration[135231-135546]"
  }, {
    "left" : "public searchForwards(searchTerm , startIndex int, startsWith boolean) : int",
    "right" : "public searchForwards(searchTerm , startIndex int, startsWith boolean) : int",
    "info" : "MethodDeclaration[134037-134789]:MethodDeclaration[135552-136304]"
  }, {
    "left" : "private isDelimiter(c char) : boolean",
    "right" : "private isDelimiter(c char) : boolean",
    "info" : "MethodDeclaration[134825-135179]:MethodDeclaration[136340-136694]"
  }, {
    "left" : "private isWhitespace(c char) : boolean",
    "right" : "private isWhitespace(c char) : boolean",
    "info" : "MethodDeclaration[135185-135659]:MethodDeclaration[136700-137174]"
  }, {
    "left" : "private printAnsiSequence(sequence ) : void",
    "right" : "private printAnsiSequence(sequence ) : void",
    "info" : "MethodDeclaration[135665-135849]:MethodDeclaration[137180-137364]"
  } ],
  "mappings" : [ {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5871-5956]:Block[5871-5956]"
  }, {
    "left" : "this(null, new FileInputStream(FileDescriptor.in), System.out, null);",
    "right" : "this(null, new FileInputStream(FileDescriptor.in), System.out, null);",
    "info" : "ConstructorInvocation[5881-5950]:ConstructorInvocation[5881-5950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6048-6090]:Block[6048-6090]"
  }, {
    "left" : "this(null, in, out, null);",
    "right" : "this(null, in, out, null);",
    "info" : "ConstructorInvocation[6058-6084]:ConstructorInvocation[6058-6084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6203-6245]:Block[6203-6245]"
  }, {
    "left" : "this(null, in, out, term);",
    "right" : "this(null, in, out, term);",
    "info" : "ConstructorInvocation[6213-6239]:ConstructorInvocation[6213-6239]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6400-6451]:Block[6400-6451]"
  }, {
    "left" : "this(appName, in, out, term, null);",
    "right" : "this(appName, in, out, term, null);",
    "info" : "ConstructorInvocation[6410-6445]:ConstructorInvocation[6410-6445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6651-7201]:Block[6651-7201]"
  }, {
    "left" : "this.appName = appName != null ? appName : \"JLine\";",
    "right" : "this.appName = appName != null ? appName : \"JLine\";",
    "info" : "ExpressionStatement[6661-6712]:ExpressionStatement[6661-6712]"
  }, {
    "left" : "this.encoding = encoding != null ? encoding : Configuration.getEncoding();",
    "right" : "this.encoding = encoding != null ? encoding : Configuration.getEncoding();",
    "info" : "ExpressionStatement[6721-6795]:ExpressionStatement[6721-6795]"
  }, {
    "left" : "this.terminal = term != null ? term : TerminalFactory.get();",
    "right" : "this.terminal = term != null ? term : TerminalFactory.get();",
    "info" : "ExpressionStatement[6804-6864]:ExpressionStatement[6804-6864]"
  }, {
    "left" : "String outEncoding = terminal.getOutputEncoding() != null? terminal.getOutputEncoding() : this.encoding;",
    "right" : "String outEncoding = terminal.getOutputEncoding() != null? terminal.getOutputEncoding() : this.encoding;",
    "info" : "VariableDeclarationStatement[6873-6977]:VariableDeclarationStatement[6873-6977]"
  }, {
    "left" : "this.out = new OutputStreamWriter(terminal.wrapOutIfNeeded(out), outEncoding);",
    "right" : "this.out = new OutputStreamWriter(terminal.wrapOutIfNeeded(out), outEncoding);",
    "info" : "ExpressionStatement[6986-7064]:ExpressionStatement[6986-7064]"
  }, {
    "left" : "setInput( in );",
    "right" : "setInput( in );",
    "info" : "ExpressionStatement[7073-7088]:ExpressionStatement[7073-7088]"
  }, {
    "left" : "this.inputrcUrl = getInputRc();",
    "right" : "this.inputrcUrl = getInputRc();",
    "info" : "ExpressionStatement[7098-7129]:ExpressionStatement[7098-7129]"
  }, {
    "left" : "consoleKeys = new ConsoleKeys(this.appName, inputrcUrl);",
    "right" : "consoleKeys = new ConsoleKeys(this.appName, inputrcUrl);",
    "info" : "ExpressionStatement[7139-7195]:ExpressionStatement[7139-7195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7251-7614]:Block[7251-7614]"
  }, {
    "left" : "String path = Configuration.getString(JLINE_INPUTRC);",
    "right" : "String path = Configuration.getString(JLINE_INPUTRC);",
    "info" : "VariableDeclarationStatement[7261-7314]:VariableDeclarationStatement[7261-7314]"
  }, {
    "left" : "if (path == null)",
    "right" : "if (path == null)",
    "info" : "IfStatement[7323-7608]:IfStatement[7323-7608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7341-7553]:Block[7341-7553]"
  }, {
    "left" : "File f = new File(Configuration.getUserHome(), INPUT_RC);",
    "right" : "File f = new File(Configuration.getUserHome(), INPUT_RC);",
    "info" : "VariableDeclarationStatement[7355-7412]:VariableDeclarationStatement[7355-7412]"
  }, {
    "left" : "if (!f.exists())",
    "right" : "if (!f.exists())",
    "info" : "IfStatement[7425-7505]:IfStatement[7425-7505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7442-7505]:Block[7442-7505]"
  }, {
    "left" : "f = new File(DEFAULT_INPUT_RC);",
    "right" : "f = new File(DEFAULT_INPUT_RC);",
    "info" : "ExpressionStatement[7460-7491]:ExpressionStatement[7460-7491]"
  }, {
    "left" : "return f.toURI().toURL();",
    "right" : "return f.toURI().toURL();",
    "info" : "ReturnStatement[7518-7543]:ReturnStatement[7518-7543]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7559-7608]:Block[7559-7608]"
  }, {
    "left" : "return Urls.create(path);",
    "right" : "return Urls.create(path);",
    "info" : "ReturnStatement[7573-7598]:ReturnStatement[7573-7598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7644-7689]:Block[7644-7689]"
  }, {
    "left" : "return consoleKeys.getKeys();",
    "right" : "return consoleKeys.getKeys();",
    "info" : "ReturnStatement[7654-7683]:ReturnStatement[7654-7683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7750-9111]:Block[7750-9111]"
  }, {
    "left" : "this.escapeTimeout = Configuration.getLong(JLINE_ESC_TIMEOUT, 100);",
    "right" : "this.escapeTimeout = Configuration.getLong(JLINE_ESC_TIMEOUT, 100);",
    "info" : "ExpressionStatement[7760-7827]:ExpressionStatement[7760-7827]"
  }, {
    "left" : "this.isUnitTestInput = in instanceof ByteArrayInputStream;",
    "right" : "this.isUnitTestInput = in instanceof ByteArrayInputStream;",
    "info" : "ExpressionStatement[8496-8554]:ExpressionStatement[8496-8554]"
  }, {
    "left" : "boolean nonBlockingEnabled =\n               escapeTimeout > 0L\n            && terminal.isSupported()\n            && in != null;",
    "right" : "boolean nonBlockingEnabled =\n               escapeTimeout > 0L\n            && terminal.isSupported()\n            && in != null;",
    "info" : "VariableDeclarationStatement[8563-8690]:VariableDeclarationStatement[8563-8690]"
  }, {
    "left" : "if (this.in != null)",
    "right" : "if (this.in != null)",
    "info" : "IfStatement[8831-8895]:IfStatement[8831-8895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8852-8895]:Block[8852-8895]"
  }, {
    "left" : "this.in.shutdown();",
    "right" : "this.in.shutdown();",
    "info" : "ExpressionStatement[8866-8885]:ExpressionStatement[8866-8885]"
  }, {
    "left" : "final InputStream wrapped = terminal.wrapInIfNeeded( in );",
    "right" : "final InputStream wrapped = terminal.wrapInIfNeeded( in );",
    "info" : "VariableDeclarationStatement[8905-8963]:VariableDeclarationStatement[8905-8963]"
  }, {
    "left" : "this.in = new NonBlockingInputStream(wrapped, nonBlockingEnabled);",
    "right" : "this.in = new NonBlockingInputStream(wrapped, nonBlockingEnabled);",
    "info" : "ExpressionStatement[8973-9039]:ExpressionStatement[8973-9039]"
  }, {
    "left" : "this.reader = new InputStreamReader( this.in, encoding );",
    "right" : "this.reader = new InputStreamReader( this.in, encoding );",
    "info" : "ExpressionStatement[9048-9105]:ExpressionStatement[9048-9105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9354-9424]:Block[9354-9424]"
  }, {
    "left" : "if (in != null)",
    "right" : "if (in != null)",
    "info" : "IfStatement[9364-9418]:IfStatement[9364-9418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9380-9418]:Block[9380-9418]"
  }, {
    "left" : "in.shutdown();",
    "right" : "in.shutdown();",
    "info" : "ExpressionStatement[9394-9408]:ExpressionStatement[9394-9408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9575-9688]:Block[9575-9688]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[9585-9682]:TryStatement[9585-9682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9589-9624]:Block[9589-9624]"
  }, {
    "left" : "shutdown();",
    "right" : "shutdown();",
    "info" : "ExpressionStatement[9603-9614]:ExpressionStatement[9603-9614]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9641-9682]:Block[9641-9682]"
  }, {
    "left" : "super.finalize();",
    "right" : "super.finalize();",
    "info" : "ExpressionStatement[9655-9672]:ExpressionStatement[9655-9672]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9724-9750]:Block[9724-9750]"
  }, {
    "left" : "return in;",
    "right" : "return in;",
    "info" : "ReturnStatement[9734-9744]:ReturnStatement[9734-9744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9782-9809]:Block[9782-9809]"
  }, {
    "left" : "return out;",
    "right" : "return out;",
    "info" : "ReturnStatement[9792-9803]:ReturnStatement[9792-9803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9845-9877]:Block[9845-9877]"
  }, {
    "left" : "return terminal;",
    "right" : "return terminal;",
    "info" : "ReturnStatement[9855-9871]:ReturnStatement[9855-9871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9921-9948]:Block[9921-9948]"
  }, {
    "left" : "return buf;",
    "right" : "return buf;",
    "info" : "ReturnStatement[9931-9942]:ReturnStatement[9931-9942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10004-10047]:Block[10004-10047]"
  }, {
    "left" : "this.expandEvents = expand;",
    "right" : "this.expandEvents = expand;",
    "info" : "ExpressionStatement[10014-10041]:ExpressionStatement[10014-10041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10086-10122]:Block[10086-10122]"
  }, {
    "left" : "return expandEvents;",
    "right" : "return expandEvents;",
    "info" : "ReturnStatement[10096-10116]:ReturnStatement[10096-10116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10497-10540]:Block[10497-10540]"
  }, {
    "left" : "copyPasteDetection = onoff;",
    "right" : "copyPasteDetection = onoff;",
    "info" : "ExpressionStatement[10507-10534]:ExpressionStatement[10507-10534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10667-10709]:Block[10667-10709]"
  }, {
    "left" : "return copyPasteDetection;",
    "right" : "return copyPasteDetection;",
    "info" : "ReturnStatement[10677-10703]:ReturnStatement[10677-10703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10903-10946]:Block[10903-10946]"
  }, {
    "left" : "this.bellEnabled = enabled;",
    "right" : "this.bellEnabled = enabled;",
    "info" : "ExpressionStatement[10913-10940]:ExpressionStatement[10913-10940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11120-11155]:Block[11120-11155]"
  }, {
    "left" : "return bellEnabled;",
    "right" : "return bellEnabled;",
    "info" : "ReturnStatement[11130-11149]:ReturnStatement[11130-11149]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11533-11584]:Block[11533-11584]"
  }, {
    "left" : "this.handleUserInterrupt = enabled;",
    "right" : "this.handleUserInterrupt = enabled;",
    "info" : "ExpressionStatement[11543-11578]:ExpressionStatement[11543-11578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11778-11821]:Block[11778-11821]"
  }, {
    "left" : "return handleUserInterrupt;",
    "right" : "return handleUserInterrupt;",
    "info" : "ReturnStatement[11788-11815]:ReturnStatement[11788-11815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12069-12118]:Block[12069-12118]"
  }, {
    "left" : "this.commentBegin = commentBegin;",
    "right" : "this.commentBegin = commentBegin;",
    "info" : "ExpressionStatement[12079-12112]:ExpressionStatement[12079-12112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12299-12531]:Block[12299-12531]"
  }, {
    "left" : "String str = commentBegin;",
    "right" : "String str = commentBegin;",
    "info" : "VariableDeclarationStatement[12309-12335]:VariableDeclarationStatement[12309-12335]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[12345-12505]:IfStatement[12345-12505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12362-12505]:Block[12362-12505]"
  }, {
    "left" : "str = consoleKeys.getVariable(\"comment-begin\");",
    "right" : "str = consoleKeys.getVariable(\"comment-begin\");",
    "info" : "ExpressionStatement[12376-12423]:ExpressionStatement[12376-12423]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[12436-12495]:IfStatement[12436-12495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12453-12495]:Block[12453-12495]"
  }, {
    "left" : "str = \"#\";",
    "right" : "str = \"#\";",
    "info" : "ExpressionStatement[12471-12481]:ExpressionStatement[12471-12481]"
  }, {
    "left" : "return str;",
    "right" : "return str;",
    "info" : "ReturnStatement[12514-12525]:ReturnStatement[12514-12525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12580-12705]:Block[12580-12705]"
  }, {
    "left" : "this.prompt = prompt;",
    "right" : "this.prompt = prompt;",
    "info" : "ExpressionStatement[12590-12611]:ExpressionStatement[12590-12611]"
  }, {
    "left" : "this.promptLen = ((prompt == null) ? 0 : stripAnsi(lastLine(prompt)).length());",
    "right" : "this.promptLen = ((prompt == null) ? 0 : stripAnsi(lastLine(prompt)).length());",
    "info" : "ExpressionStatement[12620-12699]:ExpressionStatement[12620-12699]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12737-12767]:Block[12737-12767]"
  }, {
    "left" : "return prompt;",
    "right" : "return prompt;",
    "info" : "ReturnStatement[12747-12761]:ReturnStatement[12747-12761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13413-13452]:Block[13413-13452]"
  }, {
    "left" : "this.echoCharacter = c;",
    "right" : "this.echoCharacter = c;",
    "info" : "ExpressionStatement[13423-13446]:ExpressionStatement[13423-13446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13545-13582]:Block[13545-13582]"
  }, {
    "left" : "return echoCharacter;",
    "right" : "return echoCharacter;",
    "info" : "ReturnStatement[13555-13576]:ReturnStatement[13555-13576]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13760-14197]:Block[13760-14197]"
  }, {
    "left" : "if (buf.cursor == 0)",
    "right" : "if (buf.cursor == 0)",
    "info" : "IfStatement[13770-13828]:IfStatement[13770-13828]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13791-13828]:Block[13791-13828]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[13805-13818]:ReturnStatement[13805-13818]"
  }, {
    "left" : "StringBuilder killed = new StringBuilder();",
    "right" : "StringBuilder killed = new StringBuilder();",
    "info" : "VariableDeclarationStatement[13838-13881]:VariableDeclarationStatement[13838-13881]"
  }, {
    "left" : "while (buf.cursor > 0)",
    "right" : "while (buf.cursor > 0)",
    "info" : "WhileStatement[13891-14080]:WhileStatement[13891-14080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13914-14080]:Block[13914-14080]"
  }, {
    "left" : "char c = buf.current();",
    "right" : "char c = buf.current();",
    "info" : "VariableDeclarationStatement[13928-13951]:VariableDeclarationStatement[13928-13951]"
  }, {
    "left" : "if (c == 0)",
    "right" : "if (c == 0)",
    "info" : "IfStatement[13964-14014]:IfStatement[13964-14014]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13976-14014]:Block[13976-14014]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13994-14000]:BreakStatement[13994-14000]"
  }, {
    "left" : "killed.append(c);",
    "right" : "killed.append(c);",
    "info" : "ExpressionStatement[14028-14045]:ExpressionStatement[14028-14045]"
  }, {
    "left" : "backspace();",
    "right" : "backspace();",
    "info" : "ExpressionStatement[14058-14070]:ExpressionStatement[14058-14070]"
  }, {
    "left" : "String copy = killed.reverse().toString();",
    "right" : "String copy = killed.reverse().toString();",
    "info" : "VariableDeclarationStatement[14090-14132]:VariableDeclarationStatement[14090-14132]"
  }, {
    "left" : "killRing.addBackwards(copy);",
    "right" : "killRing.addBackwards(copy);",
    "info" : "ExpressionStatement[14141-14169]:ExpressionStatement[14141-14169]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[14179-14191]:ReturnStatement[14179-14191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14227-14359]:Block[14227-14359]"
  }, {
    "left" : "return promptLen + buf.cursor;",
    "right" : "return promptLen + buf.cursor;",
    "info" : "ReturnStatement[14323-14353]:ReturnStatement[14323-14353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14566-14766]:Block[14566-14766]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[14576-14603]:IfStatement[14576-14603]"
  }, {
    "left" : "return \"\";",
    "right" : "return \"\";",
    "info" : "ReturnStatement[14593-14603]:ReturnStatement[14593-14603]"
  }, {
    "left" : "int last = str.lastIndexOf(\"\\n\");",
    "right" : "int last = str.lastIndexOf(\"\\n\");",
    "info" : "VariableDeclarationStatement[14612-14645]:VariableDeclarationStatement[14612-14645]"
  }, {
    "left" : "if (last >= 0)",
    "right" : "if (last >= 0)",
    "info" : "IfStatement[14655-14739]:IfStatement[14655-14739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14670-14739]:Block[14670-14739]"
  }, {
    "left" : "return str.substring(last + 1, str.length());",
    "right" : "return str.substring(last + 1, str.length());",
    "info" : "ReturnStatement[14684-14729]:ReturnStatement[14684-14729]"
  }, {
    "left" : "return str;",
    "right" : "return str;",
    "info" : "ReturnStatement[14749-14760]:ReturnStatement[14749-14760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14809-15167]:Block[14809-15167]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[14819-14846]:IfStatement[14819-14846]"
  }, {
    "left" : "return \"\";",
    "right" : "return \"\";",
    "info" : "ReturnStatement[14836-14846]:ReturnStatement[14836-14846]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[14855-15161]:TryStatement[14855-15161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14859-15103]:Block[14859-15103]"
  }, {
    "left" : "ByteArrayOutputStream baos = new ByteArrayOutputStream();",
    "right" : "ByteArrayOutputStream baos = new ByteArrayOutputStream();",
    "info" : "VariableDeclarationStatement[14873-14930]:VariableDeclarationStatement[14873-14930]"
  }, {
    "left" : "AnsiOutputStream aos = new AnsiOutputStream(baos);",
    "right" : "AnsiOutputStream aos = new AnsiOutputStream(baos);",
    "info" : "VariableDeclarationStatement[14943-14993]:VariableDeclarationStatement[14943-14993]"
  }, {
    "left" : "aos.write(str.getBytes());",
    "right" : "aos.write(str.getBytes());",
    "info" : "ExpressionStatement[15006-15032]:ExpressionStatement[15006-15032]"
  }, {
    "left" : "aos.flush();",
    "right" : "aos.flush();",
    "info" : "ExpressionStatement[15045-15057]:ExpressionStatement[15045-15057]"
  }, {
    "left" : "return baos.toString();",
    "right" : "return baos.toString();",
    "info" : "ReturnStatement[15070-15093]:ReturnStatement[15070-15093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15126-15161]:Block[15126-15161]"
  }, {
    "left" : "return str;",
    "right" : "return str;",
    "info" : "ReturnStatement[15140-15151]:ReturnStatement[15140-15151]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15332-15468]:Block[15332-15468]"
  }, {
    "left" : "if (position == buf.cursor)",
    "right" : "if (position == buf.cursor)",
    "info" : "IfStatement[15342-15406]:IfStatement[15342-15406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15370-15406]:Block[15370-15406]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[15384-15396]:ReturnStatement[15384-15396]"
  }, {
    "left" : "return moveCursor(position - buf.cursor) != 0;",
    "right" : "return moveCursor(position - buf.cursor) != 0;",
    "info" : "ReturnStatement[15416-15462]:ReturnStatement[15416-15462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15757-16747]:Block[15757-16747]"
  }, {
    "left" : "if (buffer.equals(buf.buffer.toString()))",
    "right" : "if (buffer.equals(buf.buffer.toString()))",
    "info" : "IfStatement[15823-15896]:IfStatement[15823-15896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15865-15896]:Block[15865-15896]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[15879-15886]:ReturnStatement[15879-15886]"
  }, {
    "left" : "int sameIndex = 0;",
    "right" : "int sameIndex = 0;",
    "info" : "VariableDeclarationStatement[15982-16000]:VariableDeclarationStatement[15982-16000]"
  }, {
    "left" : "for (int i = 0, l1 = buffer.length(), l2 = buf.buffer.length(); (i < l1)\n            && (i < l2); i++)",
    "right" : "for (int i = 0, l1 = buffer.length(), l2 = buf.buffer.length(); (i < l1)\n            && (i < l2); i++)",
    "info" : "ForStatement[16010-16283]:ForStatement[16010-16283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16113-16283]:Block[16113-16283]"
  }, {
    "left" : "if (buffer.charAt(i) == buf.buffer.charAt(i))",
    "right" : "if (buffer.charAt(i) == buf.buffer.charAt(i))",
    "info" : "IfStatement[16127-16273]:IfStatement[16127-16273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16173-16217]:Block[16173-16217]"
  }, {
    "left" : "sameIndex++;",
    "right" : "sameIndex++;",
    "info" : "ExpressionStatement[16191-16203]:ExpressionStatement[16191-16203]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16235-16273]:Block[16235-16273]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16253-16259]:BreakStatement[16253-16259]"
  }, {
    "left" : "int diff = buf.cursor - sameIndex;",
    "right" : "int diff = buf.cursor - sameIndex;",
    "info" : "VariableDeclarationStatement[16293-16327]:VariableDeclarationStatement[16293-16327]"
  }, {
    "left" : "if (diff < 0)",
    "right" : "if (diff < 0)",
    "info" : "IfStatement[16336-16499]:IfStatement[16336-16499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16350-16499]:Block[16350-16499]"
  }, {
    "left" : "moveToEnd();",
    "right" : "moveToEnd();",
    "info" : "ExpressionStatement[16425-16437]:ExpressionStatement[16425-16437]"
  }, {
    "left" : "diff = buf.buffer.length() - sameIndex;",
    "right" : "diff = buf.buffer.length() - sameIndex;",
    "info" : "ExpressionStatement[16450-16489]:ExpressionStatement[16450-16489]"
  }, {
    "left" : "backspace(diff);",
    "right" : "backspace(diff);",
    "info" : "ExpressionStatement[16509-16525]:ExpressionStatement[16509-16525]"
  }, {
    "left" : "killLine();",
    "right" : "killLine();",
    "info" : "ExpressionStatement[16565-16576]:ExpressionStatement[16565-16576]"
  }, {
    "left" : "buf.buffer.setLength(sameIndex);",
    "right" : "buf.buffer.setLength(sameIndex);",
    "info" : "ExpressionStatement[16617-16649]:ExpressionStatement[16617-16649]"
  }, {
    "left" : "putString(buffer.substring(sameIndex));",
    "right" : "putString(buffer.substring(sameIndex));",
    "info" : "ExpressionStatement[16676-16715]:ExpressionStatement[16676-16715]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16822-16872]:Block[16822-16872]"
  }, {
    "left" : "setBuffer(String.valueOf(buffer));",
    "right" : "setBuffer(String.valueOf(buffer));",
    "info" : "ExpressionStatement[16832-16866]:ExpressionStatement[16832-16866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16948-17044]:Block[16948-17044]"
  }, {
    "left" : "int pos = buf.cursor;",
    "right" : "int pos = buf.cursor;",
    "info" : "VariableDeclarationStatement[16958-16979]:VariableDeclarationStatement[16958-16979]"
  }, {
    "left" : "setBuffer(buffer);",
    "right" : "setBuffer(buffer);",
    "info" : "ExpressionStatement[16988-17006]:ExpressionStatement[16988-17006]"
  }, {
    "left" : "setCursorPosition(pos);",
    "right" : "setCursorPosition(pos);",
    "info" : "ExpressionStatement[17015-17038]:ExpressionStatement[17015-17038]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17126-17183]:Block[17126-17183]"
  }, {
    "left" : "setBufferKeepPos(String.valueOf(buffer));",
    "right" : "setBufferKeepPos(String.valueOf(buffer));",
    "info" : "ExpressionStatement[17136-17177]:ExpressionStatement[17136-17177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17303-17672]:Block[17303-17672]"
  }, {
    "left" : "String prompt = getPrompt();",
    "right" : "String prompt = getPrompt();",
    "info" : "VariableDeclarationStatement[17313-17341]:VariableDeclarationStatement[17313-17341]"
  }, {
    "left" : "if (prompt != null)",
    "right" : "if (prompt != null)",
    "info" : "IfStatement[17350-17408]:IfStatement[17350-17408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17370-17408]:Block[17370-17408]"
  }, {
    "left" : "print(prompt);",
    "right" : "print(prompt);",
    "info" : "ExpressionStatement[17384-17398]:ExpressionStatement[17384-17398]"
  }, {
    "left" : "print(buf.buffer.toString());",
    "right" : "print(buf.buffer.toString());",
    "info" : "ExpressionStatement[17418-17447]:ExpressionStatement[17418-17447]"
  }, {
    "left" : "if (buf.length() != buf.cursor)",
    "right" : "if (buf.length() != buf.cursor)",
    "info" : "IfStatement[17457-17571]:IfStatement[17457-17571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17489-17571]:Block[17489-17571]"
  }, {
    "left" : "back(buf.length() - buf.cursor - 1);",
    "right" : "back(buf.length() - buf.cursor - 1);",
    "info" : "ExpressionStatement[17525-17561]:ExpressionStatement[17525-17561]"
  }, {
    "left" : "drawBuffer();",
    "right" : "drawBuffer();",
    "info" : "ExpressionStatement[17653-17666]:ExpressionStatement[17653-17666]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17781-17854]:Block[17781-17854]"
  }, {
    "left" : "print(RESET_LINE);",
    "right" : "print(RESET_LINE);",
    "info" : "ExpressionStatement[17791-17809]:ExpressionStatement[17791-17809]"
  }, {
    "left" : "drawLine();",
    "right" : "drawLine();",
    "info" : "ExpressionStatement[17837-17848]:ExpressionStatement[17837-17848]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18041-19331]:Block[18041-19331]"
  }, {
    "left" : "String str = buf.buffer.toString();",
    "right" : "String str = buf.buffer.toString();",
    "info" : "VariableDeclarationStatement[18101-18136]:VariableDeclarationStatement[18101-18136]"
  }, {
    "left" : "String historyLine = str;",
    "right" : "String historyLine = str;",
    "info" : "VariableDeclarationStatement[18145-18170]:VariableDeclarationStatement[18145-18170]"
  }, {
    "left" : "if (expandEvents)",
    "right" : "if (expandEvents)",
    "info" : "IfStatement[18180-18793]:IfStatement[18180-18793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18198-18793]:Block[18198-18793]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[18212-18783]:TryStatement[18212-18783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18216-18598]:Block[18216-18598]"
  }, {
    "left" : "str = expandEvents(str);",
    "right" : "str = expandEvents(str);",
    "info" : "ExpressionStatement[18234-18258]:ExpressionStatement[18234-18258]"
  }, {
    "left" : "historyLine = str.replace(\"!\", \"\\\\!\");",
    "right" : "historyLine = str.replace(\"!\", \"\\\\!\");",
    "info" : "ExpressionStatement[18381-18419]:ExpressionStatement[18381-18419]"
  }, {
    "left" : "historyLine = historyLine.replaceAll(\"^\\\\^\", \"\\\\\\\\^\");",
    "right" : "historyLine = historyLine.replaceAll(\"^\\\\^\", \"\\\\\\\\^\");",
    "info" : "ExpressionStatement[18530-18584]:ExpressionStatement[18530-18584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18633-18783]:Block[18633-18783]"
  }, {
    "left" : "Log.error(\"Could not expand event\", e);",
    "right" : "Log.error(\"Could not expand event\", e);",
    "info" : "ExpressionStatement[18651-18690]:ExpressionStatement[18651-18690]"
  }, {
    "left" : "beep();",
    "right" : "beep();",
    "info" : "ExpressionStatement[18707-18714]:ExpressionStatement[18707-18714]"
  }, {
    "left" : "buf.clear();",
    "right" : "buf.clear();",
    "info" : "ExpressionStatement[18731-18743]:ExpressionStatement[18731-18743]"
  }, {
    "left" : "str = \"\";",
    "right" : "str = \"\";",
    "info" : "ExpressionStatement[18760-18769]:ExpressionStatement[18760-18769]"
  }, {
    "left" : "if (str.length() > 0)",
    "right" : "if (str.length() > 0)",
    "info" : "IfStatement[19011-19216]:IfStatement[19011-19216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19033-19216]:Block[19033-19216]"
  }, {
    "left" : "if (mask == null && isHistoryEnabled())",
    "right" : "if (mask == null && isHistoryEnabled())",
    "info" : "IfStatement[19047-19206]:IfStatement[19047-19206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19087-19144]:Block[19087-19144]"
  }, {
    "left" : "history.add(historyLine);",
    "right" : "history.add(historyLine);",
    "info" : "ExpressionStatement[19105-19130]:ExpressionStatement[19105-19130]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19162-19206]:Block[19162-19206]"
  }, {
    "left" : "mask = null;",
    "right" : "mask = null;",
    "info" : "ExpressionStatement[19180-19192]:ExpressionStatement[19180-19192]"
  }, {
    "left" : "history.moveToEnd();",
    "right" : "history.moveToEnd();",
    "info" : "ExpressionStatement[19226-19246]:ExpressionStatement[19226-19246]"
  }, {
    "left" : "buf.buffer.setLength(0);",
    "right" : "buf.buffer.setLength(0);",
    "info" : "ExpressionStatement[19256-19280]:ExpressionStatement[19256-19280]"
  }, {
    "left" : "buf.cursor = 0;",
    "right" : "buf.cursor = 0;",
    "info" : "ExpressionStatement[19289-19304]:ExpressionStatement[19289-19304]"
  }, {
    "left" : "return str;",
    "right" : "return str;",
    "info" : "ReturnStatement[19314-19325]:ReturnStatement[19314-19325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19593-27024]:Block[19593-27024]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder();",
    "right" : "StringBuilder sb = new StringBuilder();",
    "info" : "VariableDeclarationStatement[19603-19642]:VariableDeclarationStatement[19603-19642]"
  }, {
    "left" : "for (int i = 0; i < str.length(); i++)",
    "right" : "for (int i = 0; i < str.length(); i++)",
    "info" : "ForStatement[19651-26839]:ForStatement[19651-26839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19690-26839]:Block[19690-26839]"
  }, {
    "left" : "char c = str.charAt(i);",
    "right" : "char c = str.charAt(i);",
    "info" : "VariableDeclarationStatement[19704-19727]:VariableDeclarationStatement[19704-19727]"
  }, {
    "left" : "switch (c) {\n                case '\\\\':\n                    // any '\\!' should be considered an expansion escape, so skip expansion and strip the escape character\n                    // a leading '\\^' should be considered an expansion escape, so skip expansion and strip the escape character\n                    // otherwise, add the escape\n                    if (i + 1 < str.length()) {\n                        char nextChar = str.charAt(i+1);\n                        if (nextChar == '!' || (nextChar == '^' && i == 0)) {\n                            c = nextChar;\n                            i++;\n                        }\n                    }\n                    sb.append(c);\n                    break;\n                case '!':\n                    if (i + 1 < str.length()) {\n                        c = str.charAt(++i);\n                        boolean neg = false;\n                        String rep = null;\n                        int i1, idx;\n                        switch (c) {\n                            case '!':\n                                if (history.size() == 0) {\n                                    throw new IllegalArgumentException(\"!!: event not found\");\n                                }\n                                rep = history.get(history.index() - 1).toString();\n                                break;\n                            case '#':\n                                sb.append(sb.toString());\n                                break;\n                            case '?':\n                                i1 = str.indexOf('?', i + 1);\n                                if (i1 < 0) {\n                                    i1 = str.length();\n                                }\n                                String sc = str.substring(i + 1, i1);\n                                i = i1;\n                                idx = searchBackwards(sc);\n                                if (idx < 0) {\n                                    throw new IllegalArgumentException(\"!?\" + sc + \": event not found\");\n                                } else {\n                                    rep = history.get(idx).toString();\n                                }\n                                break;\n                            case '$':\n                                if (history.size() == 0) {\n                                    throw new IllegalArgumentException(\"!$: event not found\");\n                                }\n                                String previous = history.get(history.index() - 1).toString().trim();\n                                int lastSpace = previous.lastIndexOf(' ');\n                                if(lastSpace != -1) {\n                                    rep = previous.substring(lastSpace+1);\n                                } else {\n                                    rep = previous;\n                                }\n                                break;\n                            case ' ':\n                            case '\\t':\n                                sb.append('!');\n                                sb.append(c);\n                                break;\n                            case '-':\n                                neg = true;\n                                i++;\n                                // fall through\n                            case '0':\n                            case '1':\n                            case '2':\n                            case '3':\n                            case '4':\n                            case '5':\n                            case '6':\n                            case '7':\n                            case '8':\n                            case '9':\n                                i1 = i;\n                                for (; i < str.length(); i++) {\n                                    c = str.charAt(i);\n                                    if (c < '0' || c > '9') {\n                                        break;\n                                    }\n                                }\n                                idx = 0;\n                                try {\n                                    idx = Integer.parseInt(str.substring(i1, i));\n                                } catch (NumberFormatException e) {\n                                    throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");\n                                }\n                                if (neg) {\n                                    if (idx > 0 && idx <= history.size()) {\n                                        rep = (history.get(history.index() - idx)).toString();\n                                    } else {\n                                        throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");\n                                    }\n                                } else {\n                                    if (idx > history.index() - history.size() && idx <= history.index()) {\n                                        rep = (history.get(idx - 1)).toString();\n                                    } else {\n                                        throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");\n                                    }\n                                }\n                                break;\n                            default:\n                                String ss = str.substring(i);\n                                i = str.length();\n                                idx = searchBackwards(ss, history.index(), true);\n                                if (idx < 0) {\n                                    throw new IllegalArgumentException(\"!\" + ss + \": event not found\");\n                                } else {\n                                    rep = history.get(idx).toString();\n                                }\n                                break;\n                        }\n                        if (rep != null) {\n                            sb.append(rep);\n                        }\n                    } else {\n                        sb.append(c);\n                    }\n                    break;\n                case '^':\n                    if (i == 0) {\n                        int i1 = str.indexOf('^', i + 1);\n                        int i2 = str.indexOf('^', i1 + 1);\n                        if (i2 < 0) {\n                            i2 = str.length();\n                        }\n                        if (i1 > 0 && i2 > 0) {\n                            String s1 = str.substring(i + 1, i1);\n                            String s2 = str.substring(i1 + 1, i2);\n                            String s = history.get(history.index() - 1).toString().replace(s1, s2);\n                            sb.append(s);\n                            i = i2 + 1;\n                            break;\n                        }\n                    }\n                    sb.append(c);\n                    break;\n                default:\n                    sb.append(c);\n                    break;\n            }",
    "right" : "switch (c) {\n                case '\\\\':\n                    // any '\\!' should be considered an expansion escape, so skip expansion and strip the escape character\n                    // a leading '\\^' should be considered an expansion escape, so skip expansion and strip the escape character\n                    // otherwise, add the escape\n                    if (i + 1 < str.length()) {\n                        char nextChar = str.charAt(i+1);\n                        if (nextChar == '!' || (nextChar == '^' && i == 0)) {\n                            c = nextChar;\n                            i++;\n                        }\n                    }\n                    sb.append(c);\n                    break;\n                case '!':\n                    if (i + 1 < str.length()) {\n                        c = str.charAt(++i);\n                        boolean neg = false;\n                        String rep = null;\n                        int i1, idx;\n                        switch (c) {\n                            case '!':\n                                if (history.size() == 0) {\n                                    throw new IllegalArgumentException(\"!!: event not found\");\n                                }\n                                rep = history.get(history.index() - 1).toString();\n                                break;\n                            case '#':\n                                sb.append(sb.toString());\n                                break;\n                            case '?':\n                                i1 = str.indexOf('?', i + 1);\n                                if (i1 < 0) {\n                                    i1 = str.length();\n                                }\n                                String sc = str.substring(i + 1, i1);\n                                i = i1;\n                                idx = searchBackwards(sc);\n                                if (idx < 0) {\n                                    throw new IllegalArgumentException(\"!?\" + sc + \": event not found\");\n                                } else {\n                                    rep = history.get(idx).toString();\n                                }\n                                break;\n                            case '$':\n                                if (history.size() == 0) {\n                                    throw new IllegalArgumentException(\"!$: event not found\");\n                                }\n                                String previous = history.get(history.index() - 1).toString().trim();\n                                int lastSpace = previous.lastIndexOf(' ');\n                                if(lastSpace != -1) {\n                                    rep = previous.substring(lastSpace+1);\n                                } else {\n                                    rep = previous;\n                                }\n                                break;\n                            case ' ':\n                            case '\\t':\n                                sb.append('!');\n                                sb.append(c);\n                                break;\n                            case '-':\n                                neg = true;\n                                i++;\n                                // fall through\n                            case '0':\n                            case '1':\n                            case '2':\n                            case '3':\n                            case '4':\n                            case '5':\n                            case '6':\n                            case '7':\n                            case '8':\n                            case '9':\n                                i1 = i;\n                                for (; i < str.length(); i++) {\n                                    c = str.charAt(i);\n                                    if (c < '0' || c > '9') {\n                                        break;\n                                    }\n                                }\n                                idx = 0;\n                                try {\n                                    idx = Integer.parseInt(str.substring(i1, i));\n                                } catch (NumberFormatException e) {\n                                    throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");\n                                }\n                                if (neg) {\n                                    if (idx > 0 && idx <= history.size()) {\n                                        rep = (history.get(history.index() - idx)).toString();\n                                    } else {\n                                        throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");\n                                    }\n                                } else {\n                                    if (idx > history.index() - history.size() && idx <= history.index()) {\n                                        rep = (history.get(idx - 1)).toString();\n                                    } else {\n                                        throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");\n                                    }\n                                }\n                                break;\n                            default:\n                                String ss = str.substring(i);\n                                i = str.length();\n                                idx = searchBackwards(ss, history.index(), true);\n                                if (idx < 0) {\n                                    throw new IllegalArgumentException(\"!\" + ss + \": event not found\");\n                                } else {\n                                    rep = history.get(idx).toString();\n                                }\n                                break;\n                        }\n                        if (rep != null) {\n                            sb.append(rep);\n                        }\n                    } else {\n                        sb.append(c);\n                    }\n                    break;\n                case '^':\n                    if (i == 0) {\n                        int i1 = str.indexOf('^', i + 1);\n                        int i2 = str.indexOf('^', i1 + 1);\n                        if (i2 < 0) {\n                            i2 = str.length();\n                        }\n                        if (i1 > 0 && i2 > 0) {\n                            String s1 = str.substring(i + 1, i1);\n                            String s2 = str.substring(i1 + 1, i2);\n                            String s = history.get(history.index() - 1).toString().replace(s1, s2);\n                            sb.append(s);\n                            i = i2 + 1;\n                            break;\n                        }\n                    }\n                    sb.append(c);\n                    break;\n                default:\n                    sb.append(c);\n                    break;\n            }",
    "info" : "SwitchStatement[19740-26829]:SwitchStatement[19740-26829]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[19769-19779]:SwitchCase[19769-19779]"
  }, {
    "left" : "if (i + 1 < str.length())",
    "right" : "if (i + 1 < str.length())",
    "info" : "IfStatement[20101-20386]:IfStatement[20101-20386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20127-20386]:Block[20127-20386]"
  }, {
    "left" : "char nextChar = str.charAt(i+1);",
    "right" : "char nextChar = str.charAt(i+1);",
    "info" : "VariableDeclarationStatement[20153-20185]:VariableDeclarationStatement[20153-20185]"
  }, {
    "left" : "if (nextChar == '!' || (nextChar == '^' && i == 0))",
    "right" : "if (nextChar == '!' || (nextChar == '^' && i == 0))",
    "info" : "IfStatement[20210-20364]:IfStatement[20210-20364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20262-20364]:Block[20262-20364]"
  }, {
    "left" : "c = nextChar;",
    "right" : "c = nextChar;",
    "info" : "ExpressionStatement[20292-20305]:ExpressionStatement[20292-20305]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[20334-20338]:ExpressionStatement[20334-20338]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[20407-20420]:ExpressionStatement[20407-20420]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20441-20447]:BreakStatement[20441-20447]"
  }, {
    "left" : "case '!':",
    "right" : "case '!':",
    "info" : "SwitchCase[20464-20473]:SwitchCase[20464-20473]"
  }, {
    "left" : "if (i + 1 < str.length())",
    "right" : "if (i + 1 < str.length())",
    "info" : "IfStatement[20494-25907]:IfStatement[20494-25907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20520-25840]:Block[20520-25840]"
  }, {
    "left" : "c = str.charAt(++i);",
    "right" : "c = str.charAt(++i);",
    "info" : "ExpressionStatement[20546-20566]:ExpressionStatement[20546-20566]"
  }, {
    "left" : "boolean neg = false;",
    "right" : "boolean neg = false;",
    "info" : "VariableDeclarationStatement[20591-20611]:VariableDeclarationStatement[20591-20611]"
  }, {
    "left" : "String rep = null;",
    "right" : "String rep = null;",
    "info" : "VariableDeclarationStatement[20636-20654]:VariableDeclarationStatement[20636-20654]"
  }, {
    "left" : "int i1, idx;",
    "right" : "int i1, idx;",
    "info" : "VariableDeclarationStatement[20679-20691]:VariableDeclarationStatement[20679-20691]"
  }, {
    "left" : "switch (c) {\n                            case '!':\n                                if (history.size() == 0) {\n                                    throw new IllegalArgumentException(\"!!: event not found\");\n                                }\n                                rep = history.get(history.index() - 1).toString();\n                                break;\n                            case '#':\n                                sb.append(sb.toString());\n                                break;\n                            case '?':\n                                i1 = str.indexOf('?', i + 1);\n                                if (i1 < 0) {\n                                    i1 = str.length();\n                                }\n                                String sc = str.substring(i + 1, i1);\n                                i = i1;\n                                idx = searchBackwards(sc);\n                                if (idx < 0) {\n                                    throw new IllegalArgumentException(\"!?\" + sc + \": event not found\");\n                                } else {\n                                    rep = history.get(idx).toString();\n                                }\n                                break;\n                            case '$':\n                                if (history.size() == 0) {\n                                    throw new IllegalArgumentException(\"!$: event not found\");\n                                }\n                                String previous = history.get(history.index() - 1).toString().trim();\n                                int lastSpace = previous.lastIndexOf(' ');\n                                if(lastSpace != -1) {\n                                    rep = previous.substring(lastSpace+1);\n                                } else {\n                                    rep = previous;\n                                }\n                                break;\n                            case ' ':\n                            case '\\t':\n                                sb.append('!');\n                                sb.append(c);\n                                break;\n                            case '-':\n                                neg = true;\n                                i++;\n                                // fall through\n                            case '0':\n                            case '1':\n                            case '2':\n                            case '3':\n                            case '4':\n                            case '5':\n                            case '6':\n                            case '7':\n                            case '8':\n                            case '9':\n                                i1 = i;\n                                for (; i < str.length(); i++) {\n                                    c = str.charAt(i);\n                                    if (c < '0' || c > '9') {\n                                        break;\n                                    }\n                                }\n                                idx = 0;\n                                try {\n                                    idx = Integer.parseInt(str.substring(i1, i));\n                                } catch (NumberFormatException e) {\n                                    throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");\n                                }\n                                if (neg) {\n                                    if (idx > 0 && idx <= history.size()) {\n                                        rep = (history.get(history.index() - idx)).toString();\n                                    } else {\n                                        throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");\n                                    }\n                                } else {\n                                    if (idx > history.index() - history.size() && idx <= history.index()) {\n                                        rep = (history.get(idx - 1)).toString();\n                                    } else {\n                                        throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");\n                                    }\n                                }\n                                break;\n                            default:\n                                String ss = str.substring(i);\n                                i = str.length();\n                                idx = searchBackwards(ss, history.index(), true);\n                                if (idx < 0) {\n                                    throw new IllegalArgumentException(\"!\" + ss + \": event not found\");\n                                } else {\n                                    rep = history.get(idx).toString();\n                                }\n                                break;\n                        }",
    "right" : "switch (c) {\n                            case '!':\n                                if (history.size() == 0) {\n                                    throw new IllegalArgumentException(\"!!: event not found\");\n                                }\n                                rep = history.get(history.index() - 1).toString();\n                                break;\n                            case '#':\n                                sb.append(sb.toString());\n                                break;\n                            case '?':\n                                i1 = str.indexOf('?', i + 1);\n                                if (i1 < 0) {\n                                    i1 = str.length();\n                                }\n                                String sc = str.substring(i + 1, i1);\n                                i = i1;\n                                idx = searchBackwards(sc);\n                                if (idx < 0) {\n                                    throw new IllegalArgumentException(\"!?\" + sc + \": event not found\");\n                                } else {\n                                    rep = history.get(idx).toString();\n                                }\n                                break;\n                            case '$':\n                                if (history.size() == 0) {\n                                    throw new IllegalArgumentException(\"!$: event not found\");\n                                }\n                                String previous = history.get(history.index() - 1).toString().trim();\n                                int lastSpace = previous.lastIndexOf(' ');\n                                if(lastSpace != -1) {\n                                    rep = previous.substring(lastSpace+1);\n                                } else {\n                                    rep = previous;\n                                }\n                                break;\n                            case ' ':\n                            case '\\t':\n                                sb.append('!');\n                                sb.append(c);\n                                break;\n                            case '-':\n                                neg = true;\n                                i++;\n                                // fall through\n                            case '0':\n                            case '1':\n                            case '2':\n                            case '3':\n                            case '4':\n                            case '5':\n                            case '6':\n                            case '7':\n                            case '8':\n                            case '9':\n                                i1 = i;\n                                for (; i < str.length(); i++) {\n                                    c = str.charAt(i);\n                                    if (c < '0' || c > '9') {\n                                        break;\n                                    }\n                                }\n                                idx = 0;\n                                try {\n                                    idx = Integer.parseInt(str.substring(i1, i));\n                                } catch (NumberFormatException e) {\n                                    throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");\n                                }\n                                if (neg) {\n                                    if (idx > 0 && idx <= history.size()) {\n                                        rep = (history.get(history.index() - idx)).toString();\n                                    } else {\n                                        throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");\n                                    }\n                                } else {\n                                    if (idx > history.index() - history.size() && idx <= history.index()) {\n                                        rep = (history.get(idx - 1)).toString();\n                                    } else {\n                                        throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");\n                                    }\n                                }\n                                break;\n                            default:\n                                String ss = str.substring(i);\n                                i = str.length();\n                                idx = searchBackwards(ss, history.index(), true);\n                                if (idx < 0) {\n                                    throw new IllegalArgumentException(\"!\" + ss + \": event not found\");\n                                } else {\n                                    rep = history.get(idx).toString();\n                                }\n                                break;\n                        }",
    "info" : "SwitchStatement[20716-25705]:SwitchStatement[20716-25705]"
  }, {
    "left" : "case '!':",
    "right" : "case '!':",
    "info" : "SwitchCase[20757-20766]:SwitchCase[20757-20766]"
  }, {
    "left" : "if (history.size() == 0)",
    "right" : "if (history.size() == 0)",
    "info" : "IfStatement[20799-20954]:IfStatement[20799-20954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20824-20954]:Block[20824-20954]"
  }, {
    "left" : "throw new IllegalArgumentException(\"!!: event not found\");",
    "right" : "throw new IllegalArgumentException(\"!!: event not found\");",
    "info" : "ThrowStatement[20862-20920]:ThrowStatement[20862-20920]"
  }, {
    "left" : "rep = history.get(history.index() - 1).toString();",
    "right" : "rep = history.get(history.index() - 1).toString();",
    "info" : "ExpressionStatement[20987-21037]:ExpressionStatement[20987-21037]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21070-21076]:BreakStatement[21070-21076]"
  }, {
    "left" : "case '#':",
    "right" : "case '#':",
    "info" : "SwitchCase[21105-21114]:SwitchCase[21105-21114]"
  }, {
    "left" : "sb.append(sb.toString());",
    "right" : "sb.append(sb.toString());",
    "info" : "ExpressionStatement[21147-21172]:ExpressionStatement[21147-21172]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21205-21211]:BreakStatement[21205-21211]"
  }, {
    "left" : "case '?':",
    "right" : "case '?':",
    "info" : "SwitchCase[21240-21249]:SwitchCase[21240-21249]"
  }, {
    "left" : "i1 = str.indexOf('?', i + 1);",
    "right" : "i1 = str.indexOf('?', i + 1);",
    "info" : "ExpressionStatement[21282-21311]:ExpressionStatement[21282-21311]"
  }, {
    "left" : "if (i1 < 0)",
    "right" : "if (i1 < 0)",
    "info" : "IfStatement[21344-21446]:IfStatement[21344-21446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21356-21446]:Block[21356-21446]"
  }, {
    "left" : "i1 = str.length();",
    "right" : "i1 = str.length();",
    "info" : "ExpressionStatement[21394-21412]:ExpressionStatement[21394-21412]"
  }, {
    "left" : "String sc = str.substring(i + 1, i1);",
    "right" : "String sc = str.substring(i + 1, i1);",
    "info" : "VariableDeclarationStatement[21479-21516]:VariableDeclarationStatement[21479-21516]"
  }, {
    "left" : "i = i1;",
    "right" : "i = i1;",
    "info" : "ExpressionStatement[21549-21556]:ExpressionStatement[21549-21556]"
  }, {
    "left" : "idx = searchBackwards(sc);",
    "right" : "idx = searchBackwards(sc);",
    "info" : "ExpressionStatement[21589-21615]:ExpressionStatement[21589-21615]"
  }, {
    "left" : "if (idx < 0)",
    "right" : "if (idx < 0)",
    "info" : "IfStatement[21648-21913]:IfStatement[21648-21913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21661-21801]:Block[21661-21801]"
  }, {
    "left" : "throw new IllegalArgumentException(\"!?\" + sc + \": event not found\");",
    "right" : "throw new IllegalArgumentException(\"!?\" + sc + \": event not found\");",
    "info" : "ThrowStatement[21699-21767]:ThrowStatement[21699-21767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21807-21913]:Block[21807-21913]"
  }, {
    "left" : "rep = history.get(idx).toString();",
    "right" : "rep = history.get(idx).toString();",
    "info" : "ExpressionStatement[21845-21879]:ExpressionStatement[21845-21879]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21946-21952]:BreakStatement[21946-21952]"
  }, {
    "left" : "case '$':",
    "right" : "case '$':",
    "info" : "SwitchCase[21981-21990]:SwitchCase[21981-21990]"
  }, {
    "left" : "if (history.size() == 0)",
    "right" : "if (history.size() == 0)",
    "info" : "IfStatement[22023-22178]:IfStatement[22023-22178]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22048-22178]:Block[22048-22178]"
  }, {
    "left" : "throw new IllegalArgumentException(\"!$: event not found\");",
    "right" : "throw new IllegalArgumentException(\"!$: event not found\");",
    "info" : "ThrowStatement[22086-22144]:ThrowStatement[22086-22144]"
  }, {
    "left" : "String previous = history.get(history.index() - 1).toString().trim();",
    "right" : "String previous = history.get(history.index() - 1).toString().trim();",
    "info" : "VariableDeclarationStatement[22211-22280]:VariableDeclarationStatement[22211-22280]"
  }, {
    "left" : "int lastSpace = previous.lastIndexOf(' ');",
    "right" : "int lastSpace = previous.lastIndexOf(' ');",
    "info" : "VariableDeclarationStatement[22313-22355]:VariableDeclarationStatement[22313-22355]"
  }, {
    "left" : "if(lastSpace != -1)",
    "right" : "if(lastSpace != -1)",
    "info" : "IfStatement[22388-22611]:IfStatement[22388-22611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22408-22518]:Block[22408-22518]"
  }, {
    "left" : "rep = previous.substring(lastSpace+1);",
    "right" : "rep = previous.substring(lastSpace+1);",
    "info" : "ExpressionStatement[22446-22484]:ExpressionStatement[22446-22484]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22524-22611]:Block[22524-22611]"
  }, {
    "left" : "rep = previous;",
    "right" : "rep = previous;",
    "info" : "ExpressionStatement[22562-22577]:ExpressionStatement[22562-22577]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22644-22650]:BreakStatement[22644-22650]"
  }, {
    "left" : "case ' ':",
    "right" : "case ' ':",
    "info" : "SwitchCase[22679-22688]:SwitchCase[22679-22688]"
  }, {
    "left" : "case '\\t':",
    "right" : "case '\\t':",
    "info" : "SwitchCase[22717-22727]:SwitchCase[22717-22727]"
  }, {
    "left" : "sb.append('!');",
    "right" : "sb.append('!');",
    "info" : "ExpressionStatement[22760-22775]:ExpressionStatement[22760-22775]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[22808-22821]:ExpressionStatement[22808-22821]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22854-22860]:BreakStatement[22854-22860]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[22889-22898]:SwitchCase[22889-22898]"
  }, {
    "left" : "neg = true;",
    "right" : "neg = true;",
    "info" : "ExpressionStatement[22931-22942]:ExpressionStatement[22931-22942]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[22975-22979]:ExpressionStatement[22975-22979]"
  }, {
    "left" : "case '0':",
    "right" : "case '0':",
    "info" : "SwitchCase[23056-23065]:SwitchCase[23056-23065]"
  }, {
    "left" : "case '1':",
    "right" : "case '1':",
    "info" : "SwitchCase[23094-23103]:SwitchCase[23094-23103]"
  }, {
    "left" : "case '2':",
    "right" : "case '2':",
    "info" : "SwitchCase[23132-23141]:SwitchCase[23132-23141]"
  }, {
    "left" : "case '3':",
    "right" : "case '3':",
    "info" : "SwitchCase[23170-23179]:SwitchCase[23170-23179]"
  }, {
    "left" : "case '4':",
    "right" : "case '4':",
    "info" : "SwitchCase[23208-23217]:SwitchCase[23208-23217]"
  }, {
    "left" : "case '5':",
    "right" : "case '5':",
    "info" : "SwitchCase[23246-23255]:SwitchCase[23246-23255]"
  }, {
    "left" : "case '6':",
    "right" : "case '6':",
    "info" : "SwitchCase[23284-23293]:SwitchCase[23284-23293]"
  }, {
    "left" : "case '7':",
    "right" : "case '7':",
    "info" : "SwitchCase[23322-23331]:SwitchCase[23322-23331]"
  }, {
    "left" : "case '8':",
    "right" : "case '8':",
    "info" : "SwitchCase[23360-23369]:SwitchCase[23360-23369]"
  }, {
    "left" : "case '9':",
    "right" : "case '9':",
    "info" : "SwitchCase[23398-23407]:SwitchCase[23398-23407]"
  }, {
    "left" : "i1 = i;",
    "right" : "i1 = i;",
    "info" : "ExpressionStatement[23440-23447]:ExpressionStatement[23440-23447]"
  }, {
    "left" : "for (; i < str.length(); i++)",
    "right" : "for (; i < str.length(); i++)",
    "info" : "ForStatement[23480-23747]:ForStatement[23480-23747]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23510-23747]:Block[23510-23747]"
  }, {
    "left" : "c = str.charAt(i);",
    "right" : "c = str.charAt(i);",
    "info" : "ExpressionStatement[23548-23566]:ExpressionStatement[23548-23566]"
  }, {
    "left" : "if (c < '0' || c > '9')",
    "right" : "if (c < '0' || c > '9')",
    "info" : "IfStatement[23603-23713]:IfStatement[23603-23713]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23627-23713]:Block[23627-23713]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23669-23675]:BreakStatement[23669-23675]"
  }, {
    "left" : "idx = 0;",
    "right" : "idx = 0;",
    "info" : "ExpressionStatement[23780-23788]:ExpressionStatement[23780-23788]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[23821-24147]:TryStatement[23821-24147]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23825-23942]:Block[23825-23942]"
  }, {
    "left" : "idx = Integer.parseInt(str.substring(i1, i));",
    "right" : "idx = Integer.parseInt(str.substring(i1, i));",
    "info" : "ExpressionStatement[23863-23908]:ExpressionStatement[23863-23908]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23975-24147]:Block[23975-24147]"
  }, {
    "left" : "throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");",
    "right" : "throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");",
    "info" : "ThrowStatement[24013-24113]:ThrowStatement[24013-24113]"
  }, {
    "left" : "if (neg)",
    "right" : "if (neg)",
    "info" : "IfStatement[24180-25073]:IfStatement[24180-25073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24189-24619]:Block[24189-24619]"
  }, {
    "left" : "if (idx > 0 && idx <= history.size())",
    "right" : "if (idx > 0 && idx <= history.size())",
    "info" : "IfStatement[24227-24585]:IfStatement[24227-24585]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24265-24399]:Block[24265-24399]"
  }, {
    "left" : "rep = (history.get(history.index() - idx)).toString();",
    "right" : "rep = (history.get(history.index() - idx)).toString();",
    "info" : "ExpressionStatement[24307-24361]:ExpressionStatement[24307-24361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24405-24585]:Block[24405-24585]"
  }, {
    "left" : "throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");",
    "right" : "throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");",
    "info" : "ThrowStatement[24447-24547]:ThrowStatement[24447-24547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24625-25073]:Block[24625-25073]"
  }, {
    "left" : "if (idx > history.index() - history.size() && idx <= history.index())",
    "right" : "if (idx > history.index() - history.size() && idx <= history.index())",
    "info" : "IfStatement[24663-25039]:IfStatement[24663-25039]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24733-24853]:Block[24733-24853]"
  }, {
    "left" : "rep = (history.get(idx - 1)).toString();",
    "right" : "rep = (history.get(idx - 1)).toString();",
    "info" : "ExpressionStatement[24775-24815]:ExpressionStatement[24775-24815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24859-25039]:Block[24859-25039]"
  }, {
    "left" : "throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");",
    "right" : "throw new IllegalArgumentException((neg ? \"!-\" : \"!\") + str.substring(i1, i) + \": event not found\");",
    "info" : "ThrowStatement[24901-25001]:ThrowStatement[24901-25001]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25106-25112]:BreakStatement[25106-25112]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[25141-25149]:SwitchCase[25141-25149]"
  }, {
    "left" : "String ss = str.substring(i);",
    "right" : "String ss = str.substring(i);",
    "info" : "VariableDeclarationStatement[25182-25211]:VariableDeclarationStatement[25182-25211]"
  }, {
    "left" : "i = str.length();",
    "right" : "i = str.length();",
    "info" : "ExpressionStatement[25244-25261]:ExpressionStatement[25244-25261]"
  }, {
    "left" : "idx = searchBackwards(ss, history.index(), true);",
    "right" : "idx = searchBackwards(ss, history.index(), true);",
    "info" : "ExpressionStatement[25294-25343]:ExpressionStatement[25294-25343]"
  }, {
    "left" : "if (idx < 0)",
    "right" : "if (idx < 0)",
    "info" : "IfStatement[25376-25640]:IfStatement[25376-25640]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25389-25528]:Block[25389-25528]"
  }, {
    "left" : "throw new IllegalArgumentException(\"!\" + ss + \": event not found\");",
    "right" : "throw new IllegalArgumentException(\"!\" + ss + \": event not found\");",
    "info" : "ThrowStatement[25427-25494]:ThrowStatement[25427-25494]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25534-25640]:Block[25534-25640]"
  }, {
    "left" : "rep = history.get(idx).toString();",
    "right" : "rep = history.get(idx).toString();",
    "info" : "ExpressionStatement[25572-25606]:ExpressionStatement[25572-25606]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25673-25679]:BreakStatement[25673-25679]"
  }, {
    "left" : "if (rep != null)",
    "right" : "if (rep != null)",
    "info" : "IfStatement[25730-25818]:IfStatement[25730-25818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25747-25818]:Block[25747-25818]"
  }, {
    "left" : "sb.append(rep);",
    "right" : "sb.append(rep);",
    "info" : "ExpressionStatement[25777-25792]:ExpressionStatement[25777-25792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25846-25907]:Block[25846-25907]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[25872-25885]:ExpressionStatement[25872-25885]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25928-25934]:BreakStatement[25928-25934]"
  }, {
    "left" : "case '^':",
    "right" : "case '^':",
    "info" : "SwitchCase[25951-25960]:SwitchCase[25951-25960]"
  }, {
    "left" : "if (i == 0)",
    "right" : "if (i == 0)",
    "info" : "IfStatement[25981-26668]:IfStatement[25981-26668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25993-26668]:Block[25993-26668]"
  }, {
    "left" : "int i1 = str.indexOf('^', i + 1);",
    "right" : "int i1 = str.indexOf('^', i + 1);",
    "info" : "VariableDeclarationStatement[26019-26052]:VariableDeclarationStatement[26019-26052]"
  }, {
    "left" : "int i2 = str.indexOf('^', i1 + 1);",
    "right" : "int i2 = str.indexOf('^', i1 + 1);",
    "info" : "VariableDeclarationStatement[26077-26111]:VariableDeclarationStatement[26077-26111]"
  }, {
    "left" : "if (i2 < 0)",
    "right" : "if (i2 < 0)",
    "info" : "IfStatement[26136-26222]:IfStatement[26136-26222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26148-26222]:Block[26148-26222]"
  }, {
    "left" : "i2 = str.length();",
    "right" : "i2 = str.length();",
    "info" : "ExpressionStatement[26178-26196]:ExpressionStatement[26178-26196]"
  }, {
    "left" : "if (i1 > 0 && i2 > 0)",
    "right" : "if (i1 > 0 && i2 > 0)",
    "info" : "IfStatement[26247-26646]:IfStatement[26247-26646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26269-26646]:Block[26269-26646]"
  }, {
    "left" : "String s1 = str.substring(i + 1, i1);",
    "right" : "String s1 = str.substring(i + 1, i1);",
    "info" : "VariableDeclarationStatement[26299-26336]:VariableDeclarationStatement[26299-26336]"
  }, {
    "left" : "String s2 = str.substring(i1 + 1, i2);",
    "right" : "String s2 = str.substring(i1 + 1, i2);",
    "info" : "VariableDeclarationStatement[26365-26403]:VariableDeclarationStatement[26365-26403]"
  }, {
    "left" : "String s = history.get(history.index() - 1).toString().replace(s1, s2);",
    "right" : "String s = history.get(history.index() - 1).toString().replace(s1, s2);",
    "info" : "VariableDeclarationStatement[26432-26503]:VariableDeclarationStatement[26432-26503]"
  }, {
    "left" : "sb.append(s);",
    "right" : "sb.append(s);",
    "info" : "ExpressionStatement[26532-26545]:ExpressionStatement[26532-26545]"
  }, {
    "left" : "i = i2 + 1;",
    "right" : "i = i2 + 1;",
    "info" : "ExpressionStatement[26574-26585]:ExpressionStatement[26574-26585]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26614-26620]:BreakStatement[26614-26620]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[26689-26702]:ExpressionStatement[26689-26702]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26723-26729]:BreakStatement[26723-26729]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[26746-26754]:SwitchCase[26746-26754]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[26775-26788]:ExpressionStatement[26775-26788]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26809-26815]:BreakStatement[26809-26815]"
  }, {
    "left" : "String result = sb.toString();",
    "right" : "String result = sb.toString();",
    "info" : "VariableDeclarationStatement[26848-26878]:VariableDeclarationStatement[26848-26878]"
  }, {
    "left" : "if (!str.equals(result))",
    "right" : "if (!str.equals(result))",
    "info" : "IfStatement[26887-26994]:IfStatement[26887-26994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26912-26994]:Block[26912-26994]"
  }, {
    "left" : "print(result);",
    "right" : "print(result);",
    "info" : "ExpressionStatement[26926-26940]:ExpressionStatement[26926-26940]"
  }, {
    "left" : "println();",
    "right" : "println();",
    "info" : "ExpressionStatement[26953-26963]:ExpressionStatement[26953-26963]"
  }, {
    "left" : "flush();",
    "right" : "flush();",
    "info" : "ExpressionStatement[26976-26984]:ExpressionStatement[26976-26984]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[27003-27017]:ReturnStatement[27003-27017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27192-27465]:Block[27192-27465]"
  }, {
    "left" : "buf.write(str);",
    "right" : "buf.write(str);",
    "info" : "ExpressionStatement[27202-27217]:ExpressionStatement[27202-27217]"
  }, {
    "left" : "if (mask == null)",
    "right" : "if (mask == null)",
    "info" : "IfStatement[27226-27437]:IfStatement[27226-27437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27244-27305]:Block[27244-27305]"
  }, {
    "left" : "print(str);",
    "right" : "print(str);",
    "info" : "ExpressionStatement[27284-27295]:ExpressionStatement[27284-27295]"
  }, {
    "left" : "if (mask == NULL_MASK)",
    "right" : "if (mask == NULL_MASK)",
    "info" : "IfStatement[27311-27437]:IfStatement[27311-27437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27334-27381]:Block[27334-27381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27387-27437]:Block[27387-27437]"
  }, {
    "left" : "print(mask, str.length());",
    "right" : "print(mask, str.length());",
    "info" : "ExpressionStatement[27401-27427]:ExpressionStatement[27401-27427]"
  }, {
    "left" : "drawBuffer();",
    "right" : "drawBuffer();",
    "info" : "ExpressionStatement[27446-27459]:ExpressionStatement[27446-27459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27759-29666]:Block[27759-29666]"
  }, {
    "left" : "if (buf.cursor == buf.length() && clear == 0)",
    "right" : "if (buf.cursor == buf.length() && clear == 0)",
    "info" : "IfStatement[27812-28905]:IfStatement[27812-28905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27858-27869]:Block[27858-27869]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27875-28905]:Block[27875-28905]"
  }, {
    "left" : "char[] chars = buf.buffer.substring(buf.cursor).toCharArray();",
    "right" : "char[] chars = buf.buffer.substring(buf.cursor).toCharArray();",
    "info" : "VariableDeclarationStatement[27889-27951]:VariableDeclarationStatement[27889-27951]"
  }, {
    "left" : "if (mask != null)",
    "right" : "if (mask != null)",
    "info" : "IfStatement[27964-28039]:IfStatement[27964-28039]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27982-28039]:Block[27982-28039]"
  }, {
    "left" : "Arrays.fill(chars, mask);",
    "right" : "Arrays.fill(chars, mask);",
    "info" : "ExpressionStatement[28000-28025]:ExpressionStatement[28000-28025]"
  }, {
    "left" : "if (terminal.hasWeirdWrap())",
    "right" : "if (terminal.hasWeirdWrap())",
    "info" : "IfStatement[28052-28635]:IfStatement[28052-28635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28081-28584]:Block[28081-28584]"
  }, {
    "left" : "int width = terminal.getWidth();",
    "right" : "int width = terminal.getWidth();",
    "info" : "VariableDeclarationStatement[28160-28192]:VariableDeclarationStatement[28160-28192]"
  }, {
    "left" : "int pos = getCursorPosition();",
    "right" : "int pos = getCursorPosition();",
    "info" : "VariableDeclarationStatement[28209-28239]:VariableDeclarationStatement[28209-28239]"
  }, {
    "left" : "for (int i = 0; i < chars.length; i++)",
    "right" : "for (int i = 0; i < chars.length; i++)",
    "info" : "ForStatement[28256-28570]:ForStatement[28256-28570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28295-28570]:Block[28295-28570]"
  }, {
    "left" : "print(chars[i]);",
    "right" : "print(chars[i]);",
    "info" : "ExpressionStatement[28317-28333]:ExpressionStatement[28317-28333]"
  }, {
    "left" : "if ((pos + i + 1) % width == 0)",
    "right" : "if ((pos + i + 1) % width == 0)",
    "info" : "IfStatement[28354-28552]:IfStatement[28354-28552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28386-28552]:Block[28386-28552]"
  }, {
    "left" : "print(32);",
    "right" : "print(32);",
    "info" : "ExpressionStatement[28412-28422]:ExpressionStatement[28412-28422]"
  }, {
    "left" : "print(13);",
    "right" : "print(13);",
    "info" : "ExpressionStatement[28499-28509]:ExpressionStatement[28499-28509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28590-28635]:Block[28590-28635]"
  }, {
    "left" : "print(chars);",
    "right" : "print(chars);",
    "info" : "ExpressionStatement[28608-28621]:ExpressionStatement[28608-28621]"
  }, {
    "left" : "clearAhead(clear, chars.length);",
    "right" : "clearAhead(clear, chars.length);",
    "info" : "ExpressionStatement[28648-28680]:ExpressionStatement[28648-28680]"
  }, {
    "left" : "if (terminal.isAnsiSupported())",
    "right" : "if (terminal.isAnsiSupported())",
    "info" : "IfStatement[28693-28895]:IfStatement[28693-28895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28725-28838]:Block[28725-28838]"
  }, {
    "left" : "if (chars.length > 0)",
    "right" : "if (chars.length > 0)",
    "info" : "IfStatement[28743-28824]:IfStatement[28743-28824]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28765-28824]:Block[28765-28824]"
  }, {
    "left" : "back(chars.length);",
    "right" : "back(chars.length);",
    "info" : "ExpressionStatement[28787-28806]:ExpressionStatement[28787-28806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28844-28895]:Block[28844-28895]"
  }, {
    "left" : "back(chars.length);",
    "right" : "back(chars.length);",
    "info" : "ExpressionStatement[28862-28881]:ExpressionStatement[28862-28881]"
  }, {
    "left" : "if (terminal.hasWeirdWrap())",
    "right" : "if (terminal.hasWeirdWrap())",
    "info" : "IfStatement[28914-29660]:IfStatement[28914-29660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28943-29660]:Block[28943-29660]"
  }, {
    "left" : "int width = terminal.getWidth();",
    "right" : "int width = terminal.getWidth();",
    "info" : "VariableDeclarationStatement[28957-28989]:VariableDeclarationStatement[28957-28989]"
  }, {
    "left" : "if (getCursorPosition() > 0 && (getCursorPosition() % width == 0)\n                    && buf.cursor == buf.length() && clear == 0)",
    "right" : "if (getCursorPosition() > 0 && (getCursorPosition() % width == 0)\n                    && buf.cursor == buf.length() && clear == 0)",
    "info" : "IfStatement[29223-29650]:IfStatement[29223-29650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29354-29650]:Block[29354-29650]"
  }, {
    "left" : "print(32);",
    "right" : "print(32);",
    "info" : "ExpressionStatement[29526-29536]:ExpressionStatement[29526-29536]"
  }, {
    "left" : "print(13);",
    "right" : "print(13);",
    "info" : "ExpressionStatement[29605-29615]:ExpressionStatement[29605-29615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29856-29886]:Block[29856-29886]"
  }, {
    "left" : "drawBuffer(0);",
    "right" : "drawBuffer(0);",
    "info" : "ExpressionStatement[29866-29880]:ExpressionStatement[29866-29880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30289-31411]:Block[30289-31411]"
  }, {
    "left" : "if (num == 0)",
    "right" : "if (num == 0)",
    "info" : "IfStatement[30299-30344]:IfStatement[30299-30344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30313-30344]:Block[30313-30344]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[30327-30334]:ReturnStatement[30327-30334]"
  }, {
    "left" : "if (terminal.isAnsiSupported())",
    "right" : "if (terminal.isAnsiSupported())",
    "info" : "IfStatement[30354-31107]:IfStatement[30354-31107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30386-31107]:Block[30386-31107]"
  }, {
    "left" : "int width = terminal.getWidth();",
    "right" : "int width = terminal.getWidth();",
    "info" : "VariableDeclarationStatement[30400-30432]:VariableDeclarationStatement[30400-30432]"
  }, {
    "left" : "int screenCursorCol = getCursorPosition() + delta;",
    "right" : "int screenCursorCol = getCursorPosition() + delta;",
    "info" : "VariableDeclarationStatement[30445-30495]:VariableDeclarationStatement[30445-30495]"
  }, {
    "left" : "printAnsiSequence(\"K\");",
    "right" : "printAnsiSequence(\"K\");",
    "info" : "ExpressionStatement[30542-30565]:ExpressionStatement[30542-30565]"
  }, {
    "left" : "int curCol = screenCursorCol % width;",
    "right" : "int curCol = screenCursorCol % width;",
    "info" : "VariableDeclarationStatement[30658-30695]:VariableDeclarationStatement[30658-30695]"
  }, {
    "left" : "int endCol = (screenCursorCol + num - 1) % width;",
    "right" : "int endCol = (screenCursorCol + num - 1) % width;",
    "info" : "VariableDeclarationStatement[30708-30757]:VariableDeclarationStatement[30708-30757]"
  }, {
    "left" : "int lines = num / width;",
    "right" : "int lines = num / width;",
    "info" : "VariableDeclarationStatement[30770-30794]:VariableDeclarationStatement[30770-30794]"
  }, {
    "left" : "if (endCol < curCol)",
    "right" : "if (endCol < curCol)",
    "info" : "IfStatement[30807-30836]:IfStatement[30807-30836]"
  }, {
    "left" : "lines++;",
    "right" : "lines++;",
    "info" : "ExpressionStatement[30828-30836]:ExpressionStatement[30828-30836]"
  }, {
    "left" : "for (int i = 0; i < lines; i++)",
    "right" : "for (int i = 0; i < lines; i++)",
    "info" : "ForStatement[30849-30977]:ForStatement[30849-30977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30881-30977]:Block[30881-30977]"
  }, {
    "left" : "printAnsiSequence(\"B\");",
    "right" : "printAnsiSequence(\"B\");",
    "info" : "ExpressionStatement[30899-30922]:ExpressionStatement[30899-30922]"
  }, {
    "left" : "printAnsiSequence(\"2K\");",
    "right" : "printAnsiSequence(\"2K\");",
    "info" : "ExpressionStatement[30939-30963]:ExpressionStatement[30939-30963]"
  }, {
    "left" : "for (int i = 0; i < lines; i++)",
    "right" : "for (int i = 0; i < lines; i++)",
    "info" : "ForStatement[30990-31077]:ForStatement[30990-31077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31022-31077]:Block[31022-31077]"
  }, {
    "left" : "printAnsiSequence(\"A\");",
    "right" : "printAnsiSequence(\"A\");",
    "info" : "ExpressionStatement[31040-31063]:ExpressionStatement[31040-31063]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[31090-31097]:ReturnStatement[31090-31097]"
  }, {
    "left" : "print(' ', num);",
    "right" : "print(' ', num);",
    "info" : "ExpressionStatement[31157-31173]:ExpressionStatement[31157-31173]"
  }, {
    "left" : "back(num);",
    "right" : "back(num);",
    "info" : "ExpressionStatement[31375-31385]:ExpressionStatement[31375-31385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31564-32211]:Block[31564-32211]"
  }, {
    "left" : "if (num == 0)",
    "right" : "if (num == 0)",
    "info" : "IfStatement[31574-31595]:IfStatement[31574-31595]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[31588-31595]:ReturnStatement[31588-31595]"
  }, {
    "left" : "if (terminal.isAnsiSupported())",
    "right" : "if (terminal.isAnsiSupported())",
    "info" : "IfStatement[31604-32155]:IfStatement[31604-32155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31636-32155]:Block[31636-32155]"
  }, {
    "left" : "int width = getTerminal().getWidth();",
    "right" : "int width = getTerminal().getWidth();",
    "info" : "VariableDeclarationStatement[31650-31687]:VariableDeclarationStatement[31650-31687]"
  }, {
    "left" : "int cursor = getCursorPosition();",
    "right" : "int cursor = getCursorPosition();",
    "info" : "VariableDeclarationStatement[31700-31733]:VariableDeclarationStatement[31700-31733]"
  }, {
    "left" : "int realCursor = cursor + num;",
    "right" : "int realCursor = cursor + num;",
    "info" : "VariableDeclarationStatement[31746-31776]:VariableDeclarationStatement[31746-31776]"
  }, {
    "left" : "int realCol  = realCursor % width;",
    "right" : "int realCol  = realCursor % width;",
    "info" : "VariableDeclarationStatement[31789-31823]:VariableDeclarationStatement[31789-31823]"
  }, {
    "left" : "int newCol = cursor % width;",
    "right" : "int newCol = cursor % width;",
    "info" : "VariableDeclarationStatement[31836-31864]:VariableDeclarationStatement[31836-31864]"
  }, {
    "left" : "int moveup = num / width;",
    "right" : "int moveup = num / width;",
    "info" : "VariableDeclarationStatement[31877-31902]:VariableDeclarationStatement[31877-31902]"
  }, {
    "left" : "int delta = realCol - newCol;",
    "right" : "int delta = realCol - newCol;",
    "info" : "VariableDeclarationStatement[31915-31944]:VariableDeclarationStatement[31915-31944]"
  }, {
    "left" : "if (delta < 0)",
    "right" : "if (delta < 0)",
    "info" : "IfStatement[31957-31981]:IfStatement[31957-31981]"
  }, {
    "left" : "moveup++;",
    "right" : "moveup++;",
    "info" : "ExpressionStatement[31972-31981]:ExpressionStatement[31972-31981]"
  }, {
    "left" : "if (moveup > 0)",
    "right" : "if (moveup > 0)",
    "info" : "IfStatement[31994-32074]:IfStatement[31994-32074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32010-32074]:Block[32010-32074]"
  }, {
    "left" : "printAnsiSequence(moveup + \"A\");",
    "right" : "printAnsiSequence(moveup + \"A\");",
    "info" : "ExpressionStatement[32028-32060]:ExpressionStatement[32028-32060]"
  }, {
    "left" : "printAnsiSequence((1 + newCol) + \"G\");",
    "right" : "printAnsiSequence((1 + newCol) + \"G\");",
    "info" : "ExpressionStatement[32087-32125]:ExpressionStatement[32087-32125]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[32138-32145]:ReturnStatement[32138-32145]"
  }, {
    "left" : "print(BACKSPACE, num);",
    "right" : "print(BACKSPACE, num);",
    "info" : "ExpressionStatement[32164-32186]:ExpressionStatement[32164-32186]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32451-32479]:Block[32451-32479]"
  }, {
    "left" : "out.flush();",
    "right" : "out.flush();",
    "info" : "ExpressionStatement[32461-32473]:ExpressionStatement[32461-32473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32531-32583]:Block[32531-32583]"
  }, {
    "left" : "return backspace(Integer.MAX_VALUE);",
    "right" : "return backspace(Integer.MAX_VALUE);",
    "info" : "ReturnStatement[32541-32577]:ReturnStatement[32541-32577]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32756-34162]:Block[32756-34162]"
  }, {
    "left" : "if (buf.cursor == 0)",
    "right" : "if (buf.cursor == 0)",
    "info" : "IfStatement[32766-32820]:IfStatement[32766-32820]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32787-32820]:Block[32787-32820]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[32801-32810]:ReturnStatement[32801-32810]"
  }, {
    "left" : "int count = 0;",
    "right" : "int count = 0;",
    "info" : "VariableDeclarationStatement[32830-32844]:VariableDeclarationStatement[32830-32844]"
  }, {
    "left" : "int termwidth = getTerminal().getWidth();",
    "right" : "int termwidth = getTerminal().getWidth();",
    "info" : "VariableDeclarationStatement[32854-32895]:VariableDeclarationStatement[32854-32895]"
  }, {
    "left" : "int lines = getCursorPosition() / termwidth;",
    "right" : "int lines = getCursorPosition() / termwidth;",
    "info" : "VariableDeclarationStatement[32904-32948]:VariableDeclarationStatement[32904-32948]"
  }, {
    "left" : "count = moveCursor(-1 * num) * -1;",
    "right" : "count = moveCursor(-1 * num) * -1;",
    "info" : "ExpressionStatement[32957-32991]:ExpressionStatement[32957-32991]"
  }, {
    "left" : "buf.buffer.delete(buf.cursor, buf.cursor + count);",
    "right" : "buf.buffer.delete(buf.cursor, buf.cursor + count);",
    "info" : "ExpressionStatement[33000-33050]:ExpressionStatement[33000-33050]"
  }, {
    "left" : "if (getCursorPosition() / termwidth != lines)",
    "right" : "if (getCursorPosition() / termwidth != lines)",
    "info" : "IfStatement[33059-34106]:IfStatement[33059-34106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33105-34106]:Block[33105-34106]"
  }, {
    "left" : "if (terminal.isAnsiSupported())",
    "right" : "if (terminal.isAnsiSupported())",
    "info" : "IfStatement[33119-34096]:IfStatement[33119-34096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33151-34096]:Block[33151-34096]"
  }, {
    "left" : "printAnsiSequence(\"K\");",
    "right" : "printAnsiSequence(\"K\");",
    "info" : "ExpressionStatement[33281-33304]:ExpressionStatement[33281-33304]"
  }, {
    "left" : "drawBuffer(count);",
    "right" : "drawBuffer(count);",
    "info" : "ExpressionStatement[34115-34133]:ExpressionStatement[34115-34133]"
  }, {
    "left" : "return count;",
    "right" : "return count;",
    "info" : "ReturnStatement[34143-34156]:ReturnStatement[34143-34156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34297-34338]:Block[34297-34338]"
  }, {
    "left" : "return backspace(1) == 1;",
    "right" : "return backspace(1) == 1;",
    "info" : "ReturnStatement[34307-34332]:ReturnStatement[34307-34332]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34393-34535]:Block[34393-34535]"
  }, {
    "left" : "if (buf.cursor == buf.length())",
    "right" : "if (buf.cursor == buf.length())",
    "info" : "IfStatement[34403-34471]:IfStatement[34403-34471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34435-34471]:Block[34435-34471]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[34449-34461]:ReturnStatement[34449-34461]"
  }, {
    "left" : "return moveCursor(buf.length() - buf.cursor) > 0;",
    "right" : "return moveCursor(buf.length() - buf.cursor) > 0;",
    "info" : "ReturnStatement[34480-34529]:ReturnStatement[34480-34529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34709-34905]:Block[34709-34905]"
  }, {
    "left" : "if (buf.length() == 0 || buf.cursor == buf.length())",
    "right" : "if (buf.length() == 0 || buf.cursor == buf.length())",
    "info" : "IfStatement[34719-34809]:IfStatement[34719-34809]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34772-34809]:Block[34772-34809]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[34786-34799]:ReturnStatement[34786-34799]"
  }, {
    "left" : "buf.buffer.deleteCharAt(buf.cursor);",
    "right" : "buf.buffer.deleteCharAt(buf.cursor);",
    "info" : "ExpressionStatement[34819-34855]:ExpressionStatement[34819-34855]"
  }, {
    "left" : "drawBuffer(1);",
    "right" : "drawBuffer(1);",
    "info" : "ExpressionStatement[34864-34878]:ExpressionStatement[34864-34878]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[34887-34899]:ReturnStatement[34887-34899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35355-36059]:Block[35355-36059]"
  }, {
    "left" : "switch (op) {\n            case VI_EOF_MAYBE:\n            case ABORT:\n            case BACKWARD_CHAR:\n            case FORWARD_CHAR:\n            case END_OF_LINE:\n            case VI_MATCH:\n            case VI_BEGNNING_OF_LINE_OR_ARG_DIGIT:\n            case VI_ARG_DIGIT:\n            case VI_PREV_WORD:\n            case VI_END_WORD:\n            case VI_CHAR_SEARCH:\n            case VI_NEXT_WORD:\n            case VI_FIRST_PRINT:\n            case VI_GOTO_MARK:\n            case VI_COLUMN:\n            case VI_DELETE_TO:\n            case VI_YANK_TO:\n            case VI_CHANGE_TO:\n                return op;\n\n            default:\n                return Operation.VI_MOVEMENT_MODE;\n        }",
    "right" : "switch (op) {\n            case VI_EOF_MAYBE:\n            case ABORT:\n            case BACKWARD_CHAR:\n            case FORWARD_CHAR:\n            case END_OF_LINE:\n            case VI_MATCH:\n            case VI_BEGNNING_OF_LINE_OR_ARG_DIGIT:\n            case VI_ARG_DIGIT:\n            case VI_PREV_WORD:\n            case VI_END_WORD:\n            case VI_CHAR_SEARCH:\n            case VI_NEXT_WORD:\n            case VI_FIRST_PRINT:\n            case VI_GOTO_MARK:\n            case VI_COLUMN:\n            case VI_DELETE_TO:\n            case VI_YANK_TO:\n            case VI_CHANGE_TO:\n                return op;\n\n            default:\n                return Operation.VI_MOVEMENT_MODE;\n        }",
    "info" : "SwitchStatement[35365-36053]:SwitchStatement[35365-36053]"
  }, {
    "left" : "case VI_EOF_MAYBE:",
    "right" : "case VI_EOF_MAYBE:",
    "info" : "SwitchCase[35391-35409]:SwitchCase[35391-35409]"
  }, {
    "left" : "case ABORT:",
    "right" : "case ABORT:",
    "info" : "SwitchCase[35422-35433]:SwitchCase[35422-35433]"
  }, {
    "left" : "case BACKWARD_CHAR:",
    "right" : "case BACKWARD_CHAR:",
    "info" : "SwitchCase[35446-35465]:SwitchCase[35446-35465]"
  }, {
    "left" : "case FORWARD_CHAR:",
    "right" : "case FORWARD_CHAR:",
    "info" : "SwitchCase[35478-35496]:SwitchCase[35478-35496]"
  }, {
    "left" : "case END_OF_LINE:",
    "right" : "case END_OF_LINE:",
    "info" : "SwitchCase[35509-35526]:SwitchCase[35509-35526]"
  }, {
    "left" : "case VI_MATCH:",
    "right" : "case VI_MATCH:",
    "info" : "SwitchCase[35539-35553]:SwitchCase[35539-35553]"
  }, {
    "left" : "case VI_BEGNNING_OF_LINE_OR_ARG_DIGIT:",
    "right" : "case VI_BEGNNING_OF_LINE_OR_ARG_DIGIT:",
    "info" : "SwitchCase[35566-35604]:SwitchCase[35566-35604]"
  }, {
    "left" : "case VI_ARG_DIGIT:",
    "right" : "case VI_ARG_DIGIT:",
    "info" : "SwitchCase[35617-35635]:SwitchCase[35617-35635]"
  }, {
    "left" : "case VI_PREV_WORD:",
    "right" : "case VI_PREV_WORD:",
    "info" : "SwitchCase[35648-35666]:SwitchCase[35648-35666]"
  }, {
    "left" : "case VI_END_WORD:",
    "right" : "case VI_END_WORD:",
    "info" : "SwitchCase[35679-35696]:SwitchCase[35679-35696]"
  }, {
    "left" : "case VI_CHAR_SEARCH:",
    "right" : "case VI_CHAR_SEARCH:",
    "info" : "SwitchCase[35709-35729]:SwitchCase[35709-35729]"
  }, {
    "left" : "case VI_NEXT_WORD:",
    "right" : "case VI_NEXT_WORD:",
    "info" : "SwitchCase[35742-35760]:SwitchCase[35742-35760]"
  }, {
    "left" : "case VI_FIRST_PRINT:",
    "right" : "case VI_FIRST_PRINT:",
    "info" : "SwitchCase[35773-35793]:SwitchCase[35773-35793]"
  }, {
    "left" : "case VI_GOTO_MARK:",
    "right" : "case VI_GOTO_MARK:",
    "info" : "SwitchCase[35806-35824]:SwitchCase[35806-35824]"
  }, {
    "left" : "case VI_COLUMN:",
    "right" : "case VI_COLUMN:",
    "info" : "SwitchCase[35837-35852]:SwitchCase[35837-35852]"
  }, {
    "left" : "case VI_DELETE_TO:",
    "right" : "case VI_DELETE_TO:",
    "info" : "SwitchCase[35865-35883]:SwitchCase[35865-35883]"
  }, {
    "left" : "case VI_YANK_TO:",
    "right" : "case VI_YANK_TO:",
    "info" : "SwitchCase[35896-35912]:SwitchCase[35896-35912]"
  }, {
    "left" : "case VI_CHANGE_TO:",
    "right" : "case VI_CHANGE_TO:",
    "info" : "SwitchCase[35925-35943]:SwitchCase[35925-35943]"
  }, {
    "left" : "return op;",
    "right" : "return op;",
    "info" : "ReturnStatement[35960-35970]:ReturnStatement[35960-35970]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[35984-35992]:SwitchCase[35984-35992]"
  }, {
    "left" : "return Operation.VI_MOVEMENT_MODE;",
    "right" : "return Operation.VI_MOVEMENT_MODE;",
    "info" : "ReturnStatement[36009-36043]:ReturnStatement[36009-36043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36308-36449]:Block[36308-36449]"
  }, {
    "left" : "boolean ok = true;",
    "right" : "boolean ok = true;",
    "info" : "VariableDeclarationStatement[36318-36336]:VariableDeclarationStatement[36318-36336]"
  }, {
    "left" : "for (int i = 0; ok && i < count; i++)",
    "right" : "for (int i = 0; ok && i < count; i++)",
    "info" : "ForStatement[36345-36424]:ForStatement[36345-36424]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36383-36424]:Block[36383-36424]"
  }, {
    "left" : "ok = backspace();",
    "right" : "ok = backspace();",
    "info" : "ExpressionStatement[36397-36414]:ExpressionStatement[36397-36414]"
  }, {
    "left" : "return ok;",
    "right" : "return ok;",
    "info" : "ReturnStatement[36433-36443]:ReturnStatement[36433-36443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36773-36927]:Block[36773-36927]"
  }, {
    "left" : "boolean ok = true;",
    "right" : "boolean ok = true;",
    "info" : "VariableDeclarationStatement[36783-36801]:VariableDeclarationStatement[36783-36801]"
  }, {
    "left" : "for (int i = 0; ok && i < count; i++)",
    "right" : "for (int i = 0; ok && i < count; i++)",
    "info" : "ForStatement[36810-36902]:ForStatement[36810-36902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36848-36902]:Block[36848-36902]"
  }, {
    "left" : "ok = deleteCurrentCharacter();",
    "right" : "ok = deleteCurrentCharacter();",
    "info" : "ExpressionStatement[36862-36892]:ExpressionStatement[36862-36892]"
  }, {
    "left" : "return ok;",
    "right" : "return ok;",
    "info" : "ReturnStatement[36911-36921]:ReturnStatement[36911-36921]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37360-37976]:Block[37360-37976]"
  }, {
    "left" : "boolean ok = true;",
    "right" : "boolean ok = true;",
    "info" : "VariableDeclarationStatement[37370-37388]:VariableDeclarationStatement[37370-37388]"
  }, {
    "left" : "for (int i = 0; ok && i < count; i++)",
    "right" : "for (int i = 0; ok && i < count; i++)",
    "info" : "ForStatement[37397-37951]:ForStatement[37397-37951]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37435-37951]:Block[37435-37951]"
  }, {
    "left" : "ok = buf.cursor < buf.buffer.length ();",
    "right" : "ok = buf.cursor < buf.buffer.length ();",
    "info" : "ExpressionStatement[37450-37489]:ExpressionStatement[37450-37489]"
  }, {
    "left" : "if (ok)",
    "right" : "if (ok)",
    "info" : "IfStatement[37502-37941]:IfStatement[37502-37941]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37510-37941]:Block[37510-37941]"
  }, {
    "left" : "char ch = buf.buffer.charAt(buf.cursor);",
    "right" : "char ch = buf.buffer.charAt(buf.cursor);",
    "info" : "VariableDeclarationStatement[37528-37568]:VariableDeclarationStatement[37528-37568]"
  }, {
    "left" : "if (Character.isUpperCase(ch))",
    "right" : "if (Character.isUpperCase(ch))",
    "info" : "IfStatement[37585-37811]:IfStatement[37585-37811]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37616-37687]:Block[37616-37687]"
  }, {
    "left" : "ch = Character.toLowerCase(ch);",
    "right" : "ch = Character.toLowerCase(ch);",
    "info" : "ExpressionStatement[37638-37669]:ExpressionStatement[37638-37669]"
  }, {
    "left" : "if (Character.isLowerCase(ch))",
    "right" : "if (Character.isLowerCase(ch))",
    "info" : "IfStatement[37709-37811]:IfStatement[37709-37811]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37740-37811]:Block[37740-37811]"
  }, {
    "left" : "ch = Character.toUpperCase(ch);",
    "right" : "ch = Character.toUpperCase(ch);",
    "info" : "ExpressionStatement[37762-37793]:ExpressionStatement[37762-37793]"
  }, {
    "left" : "buf.buffer.setCharAt(buf.cursor, ch);",
    "right" : "buf.buffer.setCharAt(buf.cursor, ch);",
    "info" : "ExpressionStatement[37828-37865]:ExpressionStatement[37828-37865]"
  }, {
    "left" : "drawBuffer(1);",
    "right" : "drawBuffer(1);",
    "info" : "ExpressionStatement[37882-37896]:ExpressionStatement[37882-37896]"
  }, {
    "left" : "moveCursor(1);",
    "right" : "moveCursor(1);",
    "info" : "ExpressionStatement[37913-37927]:ExpressionStatement[37913-37927]"
  }, {
    "left" : "return ok;",
    "right" : "return ok;",
    "info" : "ReturnStatement[37960-37970]:ReturnStatement[37960-37970]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38370-38876]:Block[38370-38876]"
  }, {
    "left" : "if (c < 0 || c == '\\033' || c == '\\003')",
    "right" : "if (c < 0 || c == '\\033' || c == '\\003')",
    "info" : "IfStatement[38419-38496]:IfStatement[38419-38496]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38460-38496]:Block[38460-38496]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[38474-38486]:ReturnStatement[38474-38486]"
  }, {
    "left" : "boolean ok = true;",
    "right" : "boolean ok = true;",
    "info" : "VariableDeclarationStatement[38506-38524]:VariableDeclarationStatement[38506-38524]"
  }, {
    "left" : "for (int i = 0; ok && i < count; i++)",
    "right" : "for (int i = 0; ok && i < count; i++)",
    "info" : "ForStatement[38533-38851]:ForStatement[38533-38851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38571-38851]:Block[38571-38851]"
  }, {
    "left" : "ok = buf.cursor < buf.buffer.length ();",
    "right" : "ok = buf.cursor < buf.buffer.length ();",
    "info" : "ExpressionStatement[38585-38624]:ExpressionStatement[38585-38624]"
  }, {
    "left" : "if (ok)",
    "right" : "if (ok)",
    "info" : "IfStatement[38637-38841]:IfStatement[38637-38841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38645-38841]:Block[38645-38841]"
  }, {
    "left" : "buf.buffer.setCharAt(buf.cursor, (char) c);",
    "right" : "buf.buffer.setCharAt(buf.cursor, (char) c);",
    "info" : "ExpressionStatement[38663-38706]:ExpressionStatement[38663-38706]"
  }, {
    "left" : "drawBuffer(1);",
    "right" : "drawBuffer(1);",
    "info" : "ExpressionStatement[38723-38737]:ExpressionStatement[38723-38737]"
  }, {
    "left" : "if (i < (count-1))",
    "right" : "if (i < (count-1))",
    "info" : "IfStatement[38754-38827]:IfStatement[38754-38827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38773-38827]:Block[38773-38827]"
  }, {
    "left" : "moveCursor(1);",
    "right" : "moveCursor(1);",
    "info" : "ExpressionStatement[38795-38809]:ExpressionStatement[38795-38809]"
  }, {
    "left" : "return ok;",
    "right" : "return ok;",
    "info" : "ReturnStatement[38860-38870]:ReturnStatement[38860-38870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39389-39995]:Block[39389-39995]"
  }, {
    "left" : "boolean ok = true;",
    "right" : "boolean ok = true;",
    "info" : "VariableDeclarationStatement[39399-39417]:VariableDeclarationStatement[39399-39417]"
  }, {
    "left" : "if (buf.cursor == 0)",
    "right" : "if (buf.cursor == 0)",
    "info" : "IfStatement[39426-39484]:IfStatement[39426-39484]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39447-39484]:Block[39447-39484]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[39461-39474]:ReturnStatement[39461-39474]"
  }, {
    "left" : "int pos = buf.cursor - 1;",
    "right" : "int pos = buf.cursor - 1;",
    "info" : "VariableDeclarationStatement[39494-39519]:VariableDeclarationStatement[39494-39519]"
  }, {
    "left" : "for (int i = 0; pos > 0 && i < count; i++)",
    "right" : "for (int i = 0; pos > 0 && i < count; i++)",
    "info" : "ForStatement[39528-39938]:ForStatement[39528-39938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39571-39938]:Block[39571-39938]"
  }, {
    "left" : "while (pos > 0 && isWhitespace(buf.buffer.charAt(pos)))",
    "right" : "while (pos > 0 && isWhitespace(buf.buffer.charAt(pos)))",
    "info" : "WhileStatement[39642-39736]:WhileStatement[39642-39736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39698-39736]:Block[39698-39736]"
  }, {
    "left" : "--pos;",
    "right" : "--pos;",
    "info" : "ExpressionStatement[39716-39722]:ExpressionStatement[39716-39722]"
  }, {
    "left" : "while (pos > 0 && !isDelimiter(buf.buffer.charAt(pos-1)))",
    "right" : "while (pos > 0 && !isDelimiter(buf.buffer.charAt(pos-1)))",
    "info" : "WhileStatement[39750-39846]:WhileStatement[39750-39846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39808-39846]:Block[39808-39846]"
  }, {
    "left" : "--pos;",
    "right" : "--pos;",
    "info" : "ExpressionStatement[39826-39832]:ExpressionStatement[39826-39832]"
  }, {
    "left" : "if (pos > 0 && i < (count-1))",
    "right" : "if (pos > 0 && i < (count-1))",
    "info" : "IfStatement[39860-39928]:IfStatement[39860-39928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39890-39928]:Block[39890-39928]"
  }, {
    "left" : "--pos;",
    "right" : "--pos;",
    "info" : "ExpressionStatement[39908-39914]:ExpressionStatement[39908-39914]"
  }, {
    "left" : "setCursorPosition(pos);",
    "right" : "setCursorPosition(pos);",
    "info" : "ExpressionStatement[39947-39970]:ExpressionStatement[39947-39970]"
  }, {
    "left" : "return ok;",
    "right" : "return ok;",
    "info" : "ReturnStatement[39979-39989]:ReturnStatement[39979-39989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40574-41465]:Block[40574-41465]"
  }, {
    "left" : "if (startPos == endPos)",
    "right" : "if (startPos == endPos)",
    "info" : "IfStatement[40584-40644]:IfStatement[40584-40644]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40608-40644]:Block[40608-40644]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[40622-40634]:ReturnStatement[40622-40634]"
  }, {
    "left" : "if (endPos < startPos)",
    "right" : "if (endPos < startPos)",
    "info" : "IfStatement[40654-40777]:IfStatement[40654-40777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40677-40777]:Block[40677-40777]"
  }, {
    "left" : "int tmp = endPos;",
    "right" : "int tmp = endPos;",
    "info" : "VariableDeclarationStatement[40691-40708]:VariableDeclarationStatement[40691-40708]"
  }, {
    "left" : "endPos = startPos;",
    "right" : "endPos = startPos;",
    "info" : "ExpressionStatement[40721-40739]:ExpressionStatement[40721-40739]"
  }, {
    "left" : "startPos = tmp;",
    "right" : "startPos = tmp;",
    "info" : "ExpressionStatement[40752-40767]:ExpressionStatement[40752-40767]"
  }, {
    "left" : "setCursorPosition(startPos);",
    "right" : "setCursorPosition(startPos);",
    "info" : "ExpressionStatement[40787-40815]:ExpressionStatement[40787-40815]"
  }, {
    "left" : "buf.cursor = startPos;",
    "right" : "buf.cursor = startPos;",
    "info" : "ExpressionStatement[40824-40846]:ExpressionStatement[40824-40846]"
  }, {
    "left" : "buf.buffer.delete(startPos, endPos);",
    "right" : "buf.buffer.delete(startPos, endPos);",
    "info" : "ExpressionStatement[40855-40891]:ExpressionStatement[40855-40891]"
  }, {
    "left" : "drawBuffer(endPos - startPos);",
    "right" : "drawBuffer(endPos - startPos);",
    "info" : "ExpressionStatement[40900-40930]:ExpressionStatement[40900-40930]"
  }, {
    "left" : "if (! isChange && startPos > 0 && startPos == buf.length())",
    "right" : "if (! isChange && startPos > 0 && startPos == buf.length())",
    "info" : "IfStatement[41339-41438]:IfStatement[41339-41438]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41399-41438]:Block[41399-41438]"
  }, {
    "left" : "moveCursor(-1);",
    "right" : "moveCursor(-1);",
    "info" : "ExpressionStatement[41413-41428]:ExpressionStatement[41413-41428]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[41447-41459]:ReturnStatement[41447-41459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41977-42532]:Block[41977-42532]"
  }, {
    "left" : "int cursorPos = startPos;",
    "right" : "int cursorPos = startPos;",
    "info" : "VariableDeclarationStatement[41987-42012]:VariableDeclarationStatement[41987-42012]"
  }, {
    "left" : "if (endPos < startPos)",
    "right" : "if (endPos < startPos)",
    "info" : "IfStatement[42022-42145]:IfStatement[42022-42145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42045-42145]:Block[42045-42145]"
  }, {
    "left" : "int tmp = endPos;",
    "right" : "int tmp = endPos;",
    "info" : "VariableDeclarationStatement[42059-42076]:VariableDeclarationStatement[42059-42076]"
  }, {
    "left" : "endPos = startPos;",
    "right" : "endPos = startPos;",
    "info" : "ExpressionStatement[42089-42107]:ExpressionStatement[42089-42107]"
  }, {
    "left" : "startPos = tmp;",
    "right" : "startPos = tmp;",
    "info" : "ExpressionStatement[42120-42135]:ExpressionStatement[42120-42135]"
  }, {
    "left" : "if (startPos == endPos)",
    "right" : "if (startPos == endPos)",
    "info" : "IfStatement[42155-42244]:IfStatement[42155-42244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42179-42244]:Block[42179-42244]"
  }, {
    "left" : "yankBuffer = \"\";",
    "right" : "yankBuffer = \"\";",
    "info" : "ExpressionStatement[42193-42209]:ExpressionStatement[42193-42209]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[42222-42234]:ReturnStatement[42222-42234]"
  }, {
    "left" : "yankBuffer = buf.buffer.substring(startPos, endPos);",
    "right" : "yankBuffer = buf.buffer.substring(startPos, endPos);",
    "info" : "ExpressionStatement[42254-42306]:ExpressionStatement[42254-42306]"
  }, {
    "left" : "setCursorPosition(cursorPos);",
    "right" : "setCursorPosition(cursorPos);",
    "info" : "ExpressionStatement[42476-42505]:ExpressionStatement[42476-42505]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[42514-42526]:ReturnStatement[42514-42526]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42886-43187]:Block[42886-43187]"
  }, {
    "left" : "if (yankBuffer.length () == 0)",
    "right" : "if (yankBuffer.length () == 0)",
    "info" : "IfStatement[42896-42963]:IfStatement[42896-42963]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42927-42963]:Block[42927-42963]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[42941-42953]:ReturnStatement[42941-42953]"
  }, {
    "left" : "if (buf.cursor < buf.buffer.length ())",
    "right" : "if (buf.cursor < buf.buffer.length ())",
    "info" : "IfStatement[42972-43049]:IfStatement[42972-43049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43011-43049]:Block[43011-43049]"
  }, {
    "left" : "moveCursor(1);",
    "right" : "moveCursor(1);",
    "info" : "ExpressionStatement[43025-43039]:ExpressionStatement[43025-43039]"
  }, {
    "left" : "for (int i = 0; i < count; i++)",
    "right" : "for (int i = 0; i < count; i++)",
    "info" : "ForStatement[43058-43136]:ForStatement[43058-43136]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43090-43136]:Block[43090-43136]"
  }, {
    "left" : "putString(yankBuffer);",
    "right" : "putString(yankBuffer);",
    "info" : "ExpressionStatement[43104-43126]:ExpressionStatement[43104-43126]"
  }, {
    "left" : "moveCursor(-1);",
    "right" : "moveCursor(-1);",
    "info" : "ExpressionStatement[43145-43160]:ExpressionStatement[43145-43160]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[43169-43181]:ReturnStatement[43169-43181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43583-46766]:Block[43583-46766]"
  }, {
    "left" : "if (ch < 0 || invokeChar < 0)",
    "right" : "if (ch < 0 || invokeChar < 0)",
    "info" : "IfStatement[43593-43660]:IfStatement[43593-43660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43623-43660]:Block[43623-43660]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[43637-43650]:ReturnStatement[43637-43650]"
  }, {
    "left" : "char    searchChar = (char)ch;",
    "right" : "char    searchChar = (char)ch;",
    "info" : "VariableDeclarationStatement[43670-43700]:VariableDeclarationStatement[43670-43700]"
  }, {
    "left" : "boolean isForward;",
    "right" : "boolean isForward;",
    "info" : "VariableDeclarationStatement[43709-43727]:VariableDeclarationStatement[43709-43727]"
  }, {
    "left" : "boolean stopBefore;",
    "right" : "boolean stopBefore;",
    "info" : "VariableDeclarationStatement[43736-43755]:VariableDeclarationStatement[43736-43755]"
  }, {
    "left" : "if (invokeChar == ';' || invokeChar == ',')",
    "right" : "if (invokeChar == ';' || invokeChar == ',')",
    "info" : "IfStatement[44239-45116]:IfStatement[44239-45116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44283-44980]:Block[44283-44980]"
  }, {
    "left" : "if (charSearchChar == 0)",
    "right" : "if (charSearchChar == 0)",
    "info" : "IfStatement[44345-44415]:IfStatement[44345-44415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44370-44415]:Block[44370-44415]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[44388-44401]:ReturnStatement[44388-44401]"
  }, {
    "left" : "if (charSearchLastInvokeChar == ';' || charSearchLastInvokeChar == ',')",
    "right" : "if (charSearchLastInvokeChar == ';' || charSearchLastInvokeChar == ',')",
    "info" : "IfStatement[44495-44928]:IfStatement[44495-44928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44567-44749]:Block[44567-44749]"
  }, {
    "left" : "if (charSearchLastInvokeChar != invokeChar)",
    "right" : "if (charSearchLastInvokeChar != invokeChar)",
    "info" : "IfStatement[44585-44735]:IfStatement[44585-44735]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44629-44735]:Block[44629-44735]"
  }, {
    "left" : "charSearchFirstInvokeChar = switchCase(charSearchFirstInvokeChar);",
    "right" : "charSearchFirstInvokeChar = switchCase(charSearchFirstInvokeChar);",
    "info" : "ExpressionStatement[44651-44717]:ExpressionStatement[44651-44717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44767-44928]:Block[44767-44928]"
  }, {
    "left" : "if (invokeChar == ',')",
    "right" : "if (invokeChar == ',')",
    "info" : "IfStatement[44785-44914]:IfStatement[44785-44914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44808-44914]:Block[44808-44914]"
  }, {
    "left" : "charSearchFirstInvokeChar = switchCase(charSearchFirstInvokeChar);",
    "right" : "charSearchFirstInvokeChar = switchCase(charSearchFirstInvokeChar);",
    "info" : "ExpressionStatement[44830-44896]:ExpressionStatement[44830-44896]"
  }, {
    "left" : "searchChar = charSearchChar;",
    "right" : "searchChar = charSearchChar;",
    "info" : "ExpressionStatement[44942-44970]:ExpressionStatement[44942-44970]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44994-45116]:Block[44994-45116]"
  }, {
    "left" : "charSearchChar            = searchChar;",
    "right" : "charSearchChar            = searchChar;",
    "info" : "ExpressionStatement[45008-45047]:ExpressionStatement[45008-45047]"
  }, {
    "left" : "charSearchFirstInvokeChar = (char) invokeChar;",
    "right" : "charSearchFirstInvokeChar = (char) invokeChar;",
    "info" : "ExpressionStatement[45060-45106]:ExpressionStatement[45060-45106]"
  }, {
    "left" : "charSearchLastInvokeChar = (char)invokeChar;",
    "right" : "charSearchLastInvokeChar = (char)invokeChar;",
    "info" : "ExpressionStatement[45126-45170]:ExpressionStatement[45126-45170]"
  }, {
    "left" : "isForward = Character.isLowerCase(charSearchFirstInvokeChar);",
    "right" : "isForward = Character.isLowerCase(charSearchFirstInvokeChar);",
    "info" : "ExpressionStatement[45180-45241]:ExpressionStatement[45180-45241]"
  }, {
    "left" : "stopBefore = (Character.toLowerCase(charSearchFirstInvokeChar) == 't');",
    "right" : "stopBefore = (Character.toLowerCase(charSearchFirstInvokeChar) == 't');",
    "info" : "ExpressionStatement[45250-45321]:ExpressionStatement[45250-45321]"
  }, {
    "left" : "boolean ok = false;",
    "right" : "boolean ok = false;",
    "info" : "VariableDeclarationStatement[45331-45350]:VariableDeclarationStatement[45331-45350]"
  }, {
    "left" : "if (isForward)",
    "right" : "if (isForward)",
    "info" : "IfStatement[45360-46740]:IfStatement[45360-46740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45375-46279]:Block[45375-46279]"
  }, {
    "left" : "while (count-- > 0)",
    "right" : "while (count-- > 0)",
    "info" : "WhileStatement[45389-45763]:WhileStatement[45389-45763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45409-45763]:Block[45409-45763]"
  }, {
    "left" : "int pos = buf.cursor + 1;",
    "right" : "int pos = buf.cursor + 1;",
    "info" : "VariableDeclarationStatement[45427-45452]:VariableDeclarationStatement[45427-45452]"
  }, {
    "left" : "while (pos < buf.buffer.length())",
    "right" : "while (pos < buf.buffer.length())",
    "info" : "WhileStatement[45469-45749]:WhileStatement[45469-45749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45503-45749]:Block[45503-45749]"
  }, {
    "left" : "if (buf.buffer.charAt(pos) == searchChar)",
    "right" : "if (buf.buffer.charAt(pos) == searchChar)",
    "info" : "IfStatement[45525-45704]:IfStatement[45525-45704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45567-45704]:Block[45567-45704]"
  }, {
    "left" : "setCursorPosition(pos);",
    "right" : "setCursorPosition(pos);",
    "info" : "ExpressionStatement[45593-45616]:ExpressionStatement[45593-45616]"
  }, {
    "left" : "ok = true;",
    "right" : "ok = true;",
    "info" : "ExpressionStatement[45641-45651]:ExpressionStatement[45641-45651]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[45676-45682]:BreakStatement[45676-45682]"
  }, {
    "left" : "++pos;",
    "right" : "++pos;",
    "info" : "ExpressionStatement[45725-45731]:ExpressionStatement[45725-45731]"
  }, {
    "left" : "if (ok)",
    "right" : "if (ok)",
    "info" : "IfStatement[45777-46269]:IfStatement[45777-46269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45785-46269]:Block[45785-46269]"
  }, {
    "left" : "if (stopBefore)",
    "right" : "if (stopBefore)",
    "info" : "IfStatement[45803-45854]:IfStatement[45803-45854]"
  }, {
    "left" : "moveCursor(-1);",
    "right" : "moveCursor(-1);",
    "info" : "ExpressionStatement[45839-45854]:ExpressionStatement[45839-45854]"
  }, {
    "left" : "if (isInViMoveOperationState())",
    "right" : "if (isInViMoveOperationState())",
    "info" : "IfStatement[46169-46255]:IfStatement[46169-46255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46201-46255]:Block[46201-46255]"
  }, {
    "left" : "moveCursor(1);",
    "right" : "moveCursor(1);",
    "info" : "ExpressionStatement[46223-46237]:ExpressionStatement[46223-46237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46293-46740]:Block[46293-46740]"
  }, {
    "left" : "while (count-- > 0)",
    "right" : "while (count-- > 0)",
    "info" : "WhileStatement[46307-46664]:WhileStatement[46307-46664]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46327-46664]:Block[46327-46664]"
  }, {
    "left" : "int pos = buf.cursor - 1;",
    "right" : "int pos = buf.cursor - 1;",
    "info" : "VariableDeclarationStatement[46345-46370]:VariableDeclarationStatement[46345-46370]"
  }, {
    "left" : "while (pos >= 0)",
    "right" : "while (pos >= 0)",
    "info" : "WhileStatement[46387-46650]:WhileStatement[46387-46650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46404-46650]:Block[46404-46650]"
  }, {
    "left" : "if (buf.buffer.charAt(pos) == searchChar)",
    "right" : "if (buf.buffer.charAt(pos) == searchChar)",
    "info" : "IfStatement[46426-46605]:IfStatement[46426-46605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46468-46605]:Block[46468-46605]"
  }, {
    "left" : "setCursorPosition(pos);",
    "right" : "setCursorPosition(pos);",
    "info" : "ExpressionStatement[46494-46517]:ExpressionStatement[46494-46517]"
  }, {
    "left" : "ok = true;",
    "right" : "ok = true;",
    "info" : "ExpressionStatement[46542-46552]:ExpressionStatement[46542-46552]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[46577-46583]:BreakStatement[46577-46583]"
  }, {
    "left" : "--pos;",
    "right" : "--pos;",
    "info" : "ExpressionStatement[46626-46632]:ExpressionStatement[46626-46632]"
  }, {
    "left" : "if (ok && stopBefore)",
    "right" : "if (ok && stopBefore)",
    "info" : "IfStatement[46678-46730]:IfStatement[46678-46730]"
  }, {
    "left" : "moveCursor(1);",
    "right" : "moveCursor(1);",
    "info" : "ExpressionStatement[46716-46730]:ExpressionStatement[46716-46730]"
  }, {
    "left" : "return ok;",
    "right" : "return ok;",
    "info" : "ReturnStatement[46750-46760]:ReturnStatement[46750-46760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46805-46951]:Block[46805-46951]"
  }, {
    "left" : "if (Character.isUpperCase(ch))",
    "right" : "if (Character.isUpperCase(ch))",
    "info" : "IfStatement[46815-46903]:IfStatement[46815-46903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46846-46903]:Block[46846-46903]"
  }, {
    "left" : "return Character.toLowerCase(ch);",
    "right" : "return Character.toLowerCase(ch);",
    "info" : "ReturnStatement[46860-46893]:ReturnStatement[46860-46893]"
  }, {
    "left" : "return Character.toUpperCase(ch);",
    "right" : "return Character.toUpperCase(ch);",
    "info" : "ReturnStatement[46912-46945]:ReturnStatement[46912-46945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47126-47261]:Block[47126-47261]"
  }, {
    "left" : "return state == State.VI_CHANGE_TO\n            || state == State.VI_DELETE_TO\n            || state == State.VI_YANK_TO;",
    "right" : "return state == State.VI_CHANGE_TO\n            || state == State.VI_DELETE_TO\n            || state == State.VI_YANK_TO;",
    "info" : "ReturnStatement[47136-47255]:ReturnStatement[47136-47255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47635-48459]:Block[47635-48459]"
  }, {
    "left" : "int pos = buf.cursor;",
    "right" : "int pos = buf.cursor;",
    "info" : "VariableDeclarationStatement[47645-47666]:VariableDeclarationStatement[47645-47666]"
  }, {
    "left" : "int end = buf.buffer.length();",
    "right" : "int end = buf.buffer.length();",
    "info" : "VariableDeclarationStatement[47675-47705]:VariableDeclarationStatement[47675-47705]"
  }, {
    "left" : "for (int i = 0; pos < end && i < count; i++)",
    "right" : "for (int i = 0; pos < end && i < count; i++)",
    "info" : "ForStatement[47715-48399]:ForStatement[47715-48399]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47760-48399]:Block[47760-48399]"
  }, {
    "left" : "while (pos < end && !isDelimiter(buf.buffer.charAt(pos)))",
    "right" : "while (pos < end && !isDelimiter(buf.buffer.charAt(pos)))",
    "info" : "WhileStatement[47813-47909]:WhileStatement[47813-47909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47871-47909]:Block[47871-47909]"
  }, {
    "left" : "++pos;",
    "right" : "++pos;",
    "info" : "ExpressionStatement[47889-47895]:ExpressionStatement[47889-47895]"
  }, {
    "left" : "if (i < (count-1) || !(state == State.VI_CHANGE_TO))",
    "right" : "if (i < (count-1) || !(state == State.VI_CHANGE_TO))",
    "info" : "IfStatement[48201-48389]:IfStatement[48201-48389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48254-48389]:Block[48254-48389]"
  }, {
    "left" : "while (pos < end && isDelimiter(buf.buffer.charAt(pos)))",
    "right" : "while (pos < end && isDelimiter(buf.buffer.charAt(pos)))",
    "info" : "WhileStatement[48272-48375]:WhileStatement[48272-48375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48329-48375]:Block[48329-48375]"
  }, {
    "left" : "++pos;",
    "right" : "++pos;",
    "info" : "ExpressionStatement[48351-48357]:ExpressionStatement[48351-48357]"
  }, {
    "left" : "setCursorPosition(pos);",
    "right" : "setCursorPosition(pos);",
    "info" : "ExpressionStatement[48409-48432]:ExpressionStatement[48409-48432]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[48441-48453]:ReturnStatement[48441-48453]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48995-49664]:Block[48995-49664]"
  }, {
    "left" : "int pos = buf.cursor;",
    "right" : "int pos = buf.cursor;",
    "info" : "VariableDeclarationStatement[49005-49026]:VariableDeclarationStatement[49005-49026]"
  }, {
    "left" : "int end = buf.buffer.length();",
    "right" : "int end = buf.buffer.length();",
    "info" : "VariableDeclarationStatement[49035-49065]:VariableDeclarationStatement[49035-49065]"
  }, {
    "left" : "for (int i = 0; pos < end && i < count; i++)",
    "right" : "for (int i = 0; pos < end && i < count; i++)",
    "info" : "ForStatement[49075-49605]:ForStatement[49075-49605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49120-49605]:Block[49120-49605]"
  }, {
    "left" : "if (pos < (end-1)\n                    && !isDelimiter(buf.buffer.charAt(pos))\n                    && isDelimiter(buf.buffer.charAt (pos+1)))",
    "right" : "if (pos < (end-1)\n                    && !isDelimiter(buf.buffer.charAt(pos))\n                    && isDelimiter(buf.buffer.charAt (pos+1)))",
    "info" : "IfStatement[49134-49313]:IfStatement[49134-49313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49275-49313]:Block[49275-49313]"
  }, {
    "left" : "++pos;",
    "right" : "++pos;",
    "info" : "ExpressionStatement[49293-49299]:ExpressionStatement[49293-49299]"
  }, {
    "left" : "while (pos < end && isDelimiter(buf.buffer.charAt(pos)))",
    "right" : "while (pos < end && isDelimiter(buf.buffer.charAt(pos)))",
    "info" : "WhileStatement[49384-49479]:WhileStatement[49384-49479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49441-49479]:Block[49441-49479]"
  }, {
    "left" : "++pos;",
    "right" : "++pos;",
    "info" : "ExpressionStatement[49459-49465]:ExpressionStatement[49459-49465]"
  }, {
    "left" : "while (pos < (end-1) && !isDelimiter(buf.buffer.charAt(pos+1)))",
    "right" : "while (pos < (end-1) && !isDelimiter(buf.buffer.charAt(pos+1)))",
    "info" : "WhileStatement[49493-49595]:WhileStatement[49493-49595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49557-49595]:Block[49557-49595]"
  }, {
    "left" : "++pos;",
    "right" : "++pos;",
    "info" : "ExpressionStatement[49575-49581]:ExpressionStatement[49575-49581]"
  }, {
    "left" : "setCursorPosition(pos);",
    "right" : "setCursorPosition(pos);",
    "info" : "ExpressionStatement[49614-49637]:ExpressionStatement[49614-49637]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[49646-49658]:ReturnStatement[49646-49658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49720-49957]:Block[49720-49957]"
  }, {
    "left" : "while (isDelimiter(buf.current()) && (moveCursor(-1) != 0))",
    "right" : "while (isDelimiter(buf.current()) && (moveCursor(-1) != 0))",
    "info" : "WhileStatement[49730-49824]:WhileStatement[49730-49824]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49790-49824]:Block[49790-49824]"
  }, {
    "left" : "while (!isDelimiter(buf.current()) && (moveCursor(-1) != 0))",
    "right" : "while (!isDelimiter(buf.current()) && (moveCursor(-1) != 0))",
    "info" : "WhileStatement[49834-49929]:WhileStatement[49834-49929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49895-49929]:Block[49895-49929]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[49939-49951]:ReturnStatement[49939-49951]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50009-50246]:Block[50009-50246]"
  }, {
    "left" : "while (isDelimiter(buf.nextChar()) && (moveCursor(1) != 0))",
    "right" : "while (isDelimiter(buf.nextChar()) && (moveCursor(1) != 0))",
    "info" : "WhileStatement[50019-50113]:WhileStatement[50019-50113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50079-50113]:Block[50079-50113]"
  }, {
    "left" : "while (!isDelimiter(buf.nextChar()) && (moveCursor(1) != 0))",
    "right" : "while (!isDelimiter(buf.nextChar()) && (moveCursor(1) != 0))",
    "info" : "WhileStatement[50123-50218]:WhileStatement[50123-50218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50184-50218]:Block[50184-50218]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[50228-50240]:ReturnStatement[50228-50240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50782-51629]:Block[50782-51629]"
  }, {
    "left" : "boolean success = true;",
    "right" : "boolean success = true;",
    "info" : "VariableDeclarationStatement[50792-50815]:VariableDeclarationStatement[50792-50815]"
  }, {
    "left" : "StringBuilder killed = new StringBuilder();",
    "right" : "StringBuilder killed = new StringBuilder();",
    "info" : "VariableDeclarationStatement[50824-50867]:VariableDeclarationStatement[50824-50867]"
  }, {
    "left" : "for (; count > 0; --count)",
    "right" : "for (; count > 0; --count)",
    "info" : "ForStatement[50877-51509]:ForStatement[50877-51509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50904-51509]:Block[50904-51509]"
  }, {
    "left" : "if (buf.cursor == 0)",
    "right" : "if (buf.cursor == 0)",
    "info" : "IfStatement[50918-51010]:IfStatement[50918-51010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50939-51010]:Block[50939-51010]"
  }, {
    "left" : "success = false;",
    "right" : "success = false;",
    "info" : "ExpressionStatement[50957-50973]:ExpressionStatement[50957-50973]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[50990-50996]:BreakStatement[50990-50996]"
  }, {
    "left" : "while (isWhitespace(buf.current()))",
    "right" : "while (isWhitespace(buf.current()))",
    "info" : "WhileStatement[51024-51254]:WhileStatement[51024-51254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51060-51254]:Block[51060-51254]"
  }, {
    "left" : "char c = buf.current();",
    "right" : "char c = buf.current();",
    "info" : "VariableDeclarationStatement[51078-51101]:VariableDeclarationStatement[51078-51101]"
  }, {
    "left" : "if (c == 0)",
    "right" : "if (c == 0)",
    "info" : "IfStatement[51118-51176]:IfStatement[51118-51176]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51130-51176]:Block[51130-51176]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[51152-51158]:BreakStatement[51152-51158]"
  }, {
    "left" : "killed.append(c);",
    "right" : "killed.append(c);",
    "info" : "ExpressionStatement[51194-51211]:ExpressionStatement[51194-51211]"
  }, {
    "left" : "backspace();",
    "right" : "backspace();",
    "info" : "ExpressionStatement[51228-51240]:ExpressionStatement[51228-51240]"
  }, {
    "left" : "while (!isWhitespace(buf.current()))",
    "right" : "while (!isWhitespace(buf.current()))",
    "info" : "WhileStatement[51268-51499]:WhileStatement[51268-51499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51305-51499]:Block[51305-51499]"
  }, {
    "left" : "char c = buf.current();",
    "right" : "char c = buf.current();",
    "info" : "VariableDeclarationStatement[51323-51346]:VariableDeclarationStatement[51323-51346]"
  }, {
    "left" : "if (c == 0)",
    "right" : "if (c == 0)",
    "info" : "IfStatement[51363-51421]:IfStatement[51363-51421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51375-51421]:Block[51375-51421]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[51397-51403]:BreakStatement[51397-51403]"
  }, {
    "left" : "killed.append(c);",
    "right" : "killed.append(c);",
    "info" : "ExpressionStatement[51439-51456]:ExpressionStatement[51439-51456]"
  }, {
    "left" : "backspace();",
    "right" : "backspace();",
    "info" : "ExpressionStatement[51473-51485]:ExpressionStatement[51473-51485]"
  }, {
    "left" : "String copy = killed.reverse().toString();",
    "right" : "String copy = killed.reverse().toString();",
    "info" : "VariableDeclarationStatement[51519-51561]:VariableDeclarationStatement[51519-51561]"
  }, {
    "left" : "killRing.addBackwards(copy);",
    "right" : "killRing.addBackwards(copy);",
    "info" : "ExpressionStatement[51570-51598]:ExpressionStatement[51570-51598]"
  }, {
    "left" : "return success;",
    "right" : "return success;",
    "info" : "ReturnStatement[51608-51623]:ReturnStatement[51608-51623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51701-51928]:Block[51701-51928]"
  }, {
    "left" : "String comment = this.getCommentBegin ();",
    "right" : "String comment = this.getCommentBegin ();",
    "info" : "VariableDeclarationStatement[51711-51752]:VariableDeclarationStatement[51711-51752]"
  }, {
    "left" : "setCursorPosition(0);",
    "right" : "setCursorPosition(0);",
    "info" : "ExpressionStatement[51761-51782]:ExpressionStatement[51761-51782]"
  }, {
    "left" : "putString(comment);",
    "right" : "putString(comment);",
    "info" : "ExpressionStatement[51791-51810]:ExpressionStatement[51791-51810]"
  }, {
    "left" : "if (isViMode)",
    "right" : "if (isViMode)",
    "info" : "IfStatement[51819-51897]:IfStatement[51819-51897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51833-51897]:Block[51833-51897]"
  }, {
    "left" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "right" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "info" : "ExpressionStatement[51847-51887]:ExpressionStatement[51847-51887]"
  }, {
    "left" : "return accept();",
    "right" : "return accept();",
    "info" : "ReturnStatement[51906-51922]:ReturnStatement[51906-51922]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52454-52836]:Block[52454-52836]"
  }, {
    "left" : "for (int i = 0; i < count; i++)",
    "right" : "for (int i = 0; i < count; i++)",
    "info" : "ForStatement[52464-52787]:ForStatement[52464-52787]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52496-52787]:Block[52496-52787]"
  }, {
    "left" : "buf.write(str);",
    "right" : "buf.write(str);",
    "info" : "ExpressionStatement[52510-52525]:ExpressionStatement[52510-52525]"
  }, {
    "left" : "if (mask == null)",
    "right" : "if (mask == null)",
    "info" : "IfStatement[52538-52777]:IfStatement[52538-52777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52556-52629]:Block[52556-52629]"
  }, {
    "left" : "print(str);",
    "right" : "print(str);",
    "info" : "ExpressionStatement[52604-52615]:ExpressionStatement[52604-52615]"
  }, {
    "left" : "if (mask == NULL_MASK)",
    "right" : "if (mask == NULL_MASK)",
    "info" : "IfStatement[52635-52777]:IfStatement[52635-52777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52658-52713]:Block[52658-52713]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52719-52777]:Block[52719-52777]"
  }, {
    "left" : "print(mask, str.length());",
    "right" : "print(mask, str.length());",
    "info" : "ExpressionStatement[52737-52763]:ExpressionStatement[52737-52763]"
  }, {
    "left" : "drawBuffer();",
    "right" : "drawBuffer();",
    "info" : "ExpressionStatement[52796-52809]:ExpressionStatement[52796-52809]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[52818-52830]:ReturnStatement[52818-52830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53021-58444]:Block[53021-58444]"
  }, {
    "left" : "boolean isForward = (searchChar == '/');",
    "right" : "boolean isForward = (searchChar == '/');",
    "info" : "VariableDeclarationStatement[53031-53071]:VariableDeclarationStatement[53031-53071]"
  }, {
    "left" : "CursorBuffer origBuffer = buf.copy();",
    "right" : "CursorBuffer origBuffer = buf.copy();",
    "info" : "VariableDeclarationStatement[53222-53259]:VariableDeclarationStatement[53222-53259]"
  }, {
    "left" : "setCursorPosition (0);",
    "right" : "setCursorPosition (0);",
    "info" : "ExpressionStatement[53323-53345]:ExpressionStatement[53323-53345]"
  }, {
    "left" : "killLine();",
    "right" : "killLine();",
    "info" : "ExpressionStatement[53354-53365]:ExpressionStatement[53354-53365]"
  }, {
    "left" : "putString(Character.toString(searchChar));",
    "right" : "putString(Character.toString(searchChar));",
    "info" : "ExpressionStatement[53450-53492]:ExpressionStatement[53450-53492]"
  }, {
    "left" : "flush();",
    "right" : "flush();",
    "info" : "ExpressionStatement[53501-53509]:ExpressionStatement[53501-53509]"
  }, {
    "left" : "boolean isAborted = false;",
    "right" : "boolean isAborted = false;",
    "info" : "VariableDeclarationStatement[53519-53545]:VariableDeclarationStatement[53519-53545]"
  }, {
    "left" : "boolean isComplete = false;",
    "right" : "boolean isComplete = false;",
    "info" : "VariableDeclarationStatement[53554-53581]:VariableDeclarationStatement[53554-53581]"
  }, {
    "left" : "int ch = -1;",
    "right" : "int ch = -1;",
    "info" : "VariableDeclarationStatement[53729-53741]:VariableDeclarationStatement[53729-53741]"
  }, {
    "left" : "while (!isAborted && !isComplete && (ch = readCharacter()) != -1)",
    "right" : "while (!isAborted && !isComplete && (ch = readCharacter()) != -1)",
    "info" : "WhileStatement[53750-54783]:WhileStatement[53750-54783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53816-54783]:Block[53816-54783]"
  }, {
    "left" : "switch (ch) {\n                case '\\033':  // ESC\n                    /*\n                     * The ESC behavior doesn't appear to be readline behavior,\n                     * but it is a little tweak of my own. I like it.\n                     */\n                    isAborted = true;\n                    break;\n                case '\\010':  // Backspace\n                case '\\177':  // Delete\n                    backspace();\n                    /*\n                     * Backspacing through the \"prompt\" aborts the search.\n                     */\n                    if (buf.cursor == 0) {\n                        isAborted = true;\n                    }\n                    break;\n                case '\\012': // NL\n                case '\\015': // CR\n                    isComplete = true;\n                    break;\n                default:\n                    putString(Character.toString((char) ch));\n            }",
    "right" : "switch (ch) {\n                case '\\033':  // ESC\n                    /*\n                     * The ESC behavior doesn't appear to be readline behavior,\n                     * but it is a little tweak of my own. I like it.\n                     */\n                    isAborted = true;\n                    break;\n                case '\\010':  // Backspace\n                case '\\177':  // Delete\n                    backspace();\n                    /*\n                     * Backspacing through the \"prompt\" aborts the search.\n                     */\n                    if (buf.cursor == 0) {\n                        isAborted = true;\n                    }\n                    break;\n                case '\\012': // NL\n                case '\\015': // CR\n                    isComplete = true;\n                    break;\n                default:\n                    putString(Character.toString((char) ch));\n            }",
    "info" : "SwitchStatement[53830-54751]:SwitchStatement[53830-54751]"
  }, {
    "left" : "case '\\033':",
    "right" : "case '\\033':",
    "info" : "SwitchCase[53860-53872]:SwitchCase[53860-53872]"
  }, {
    "left" : "isAborted = true;",
    "right" : "isAborted = true;",
    "info" : "ExpressionStatement[54098-54115]:ExpressionStatement[54098-54115]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[54136-54142]:BreakStatement[54136-54142]"
  }, {
    "left" : "case '\\010':",
    "right" : "case '\\010':",
    "info" : "SwitchCase[54159-54171]:SwitchCase[54159-54171]"
  }, {
    "left" : "case '\\177':",
    "right" : "case '\\177':",
    "info" : "SwitchCase[54202-54214]:SwitchCase[54202-54214]"
  }, {
    "left" : "backspace();",
    "right" : "backspace();",
    "info" : "ExpressionStatement[54246-54258]:ExpressionStatement[54246-54258]"
  }, {
    "left" : "if (buf.cursor == 0)",
    "right" : "if (buf.cursor == 0)",
    "info" : "IfStatement[54401-54487]:IfStatement[54401-54487]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54422-54487]:Block[54422-54487]"
  }, {
    "left" : "isAborted = true;",
    "right" : "isAborted = true;",
    "info" : "ExpressionStatement[54448-54465]:ExpressionStatement[54448-54465]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[54508-54514]:BreakStatement[54508-54514]"
  }, {
    "left" : "case '\\012':",
    "right" : "case '\\012':",
    "info" : "SwitchCase[54531-54543]:SwitchCase[54531-54543]"
  }, {
    "left" : "case '\\015':",
    "right" : "case '\\015':",
    "info" : "SwitchCase[54566-54578]:SwitchCase[54566-54578]"
  }, {
    "left" : "isComplete = true;",
    "right" : "isComplete = true;",
    "info" : "ExpressionStatement[54605-54623]:ExpressionStatement[54605-54623]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[54644-54650]:BreakStatement[54644-54650]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[54667-54675]:SwitchCase[54667-54675]"
  }, {
    "left" : "putString(Character.toString((char) ch));",
    "right" : "putString(Character.toString((char) ch));",
    "info" : "ExpressionStatement[54696-54737]:ExpressionStatement[54696-54737]"
  }, {
    "left" : "flush();",
    "right" : "flush();",
    "info" : "ExpressionStatement[54765-54773]:ExpressionStatement[54765-54773]"
  }, {
    "left" : "if (ch == -1 || isAborted)",
    "right" : "if (ch == -1 || isAborted)",
    "info" : "IfStatement[54871-55082]:IfStatement[54871-55082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54898-55082]:Block[54898-55082]"
  }, {
    "left" : "setCursorPosition(0);",
    "right" : "setCursorPosition(0);",
    "info" : "ExpressionStatement[54912-54933]:ExpressionStatement[54912-54933]"
  }, {
    "left" : "killLine();",
    "right" : "killLine();",
    "info" : "ExpressionStatement[54946-54957]:ExpressionStatement[54946-54957]"
  }, {
    "left" : "putString(origBuffer.buffer);",
    "right" : "putString(origBuffer.buffer);",
    "info" : "ExpressionStatement[54970-54999]:ExpressionStatement[54970-54999]"
  }, {
    "left" : "setCursorPosition(origBuffer.cursor);",
    "right" : "setCursorPosition(origBuffer.cursor);",
    "info" : "ExpressionStatement[55012-55049]:ExpressionStatement[55012-55049]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[55062-55072]:ReturnStatement[55062-55072]"
  }, {
    "left" : "String searchTerm = buf.buffer.substring(1);",
    "right" : "String searchTerm = buf.buffer.substring(1);",
    "info" : "VariableDeclarationStatement[55221-55265]:VariableDeclarationStatement[55221-55265]"
  }, {
    "left" : "int idx = -1;",
    "right" : "int idx = -1;",
    "info" : "VariableDeclarationStatement[55274-55287]:VariableDeclarationStatement[55274-55287]"
  }, {
    "left" : "int end   = history.index();",
    "right" : "int end   = history.index();",
    "info" : "VariableDeclarationStatement[55580-55608]:VariableDeclarationStatement[55580-55608]"
  }, {
    "left" : "int start = (end <= history.size()) ? 0 : end - history.size();",
    "right" : "int start = (end <= history.size()) ? 0 : end - history.size();",
    "info" : "VariableDeclarationStatement[55617-55680]:VariableDeclarationStatement[55617-55680]"
  }, {
    "left" : "if (isForward)",
    "right" : "if (isForward)",
    "info" : "IfStatement[55690-56156]:IfStatement[55690-56156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55705-55922]:Block[55705-55922]"
  }, {
    "left" : "for (int i = start; i < end; i++)",
    "right" : "for (int i = start; i < end; i++)",
    "info" : "ForStatement[55719-55912]:ForStatement[55719-55912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55753-55912]:Block[55753-55912]"
  }, {
    "left" : "if (history.get(i).toString().contains(searchTerm))",
    "right" : "if (history.get(i).toString().contains(searchTerm))",
    "info" : "IfStatement[55771-55898]:IfStatement[55771-55898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55823-55898]:Block[55823-55898]"
  }, {
    "left" : "idx = i;",
    "right" : "idx = i;",
    "info" : "ExpressionStatement[55845-55853]:ExpressionStatement[55845-55853]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[55874-55880]:BreakStatement[55874-55880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55936-56156]:Block[55936-56156]"
  }, {
    "left" : "for (int i = end-1; i >= start; i--)",
    "right" : "for (int i = end-1; i >= start; i--)",
    "info" : "ForStatement[55950-56146]:ForStatement[55950-56146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55987-56146]:Block[55987-56146]"
  }, {
    "left" : "if (history.get(i).toString().contains(searchTerm))",
    "right" : "if (history.get(i).toString().contains(searchTerm))",
    "info" : "IfStatement[56005-56132]:IfStatement[56005-56132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56057-56132]:Block[56057-56132]"
  }, {
    "left" : "idx = i;",
    "right" : "idx = i;",
    "info" : "ExpressionStatement[56079-56087]:ExpressionStatement[56079-56087]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[56108-56114]:BreakStatement[56108-56114]"
  }, {
    "left" : "if (idx == -1)",
    "right" : "if (idx == -1)",
    "info" : "IfStatement[56317-56500]:IfStatement[56317-56500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56332-56500]:Block[56332-56500]"
  }, {
    "left" : "setCursorPosition(0);",
    "right" : "setCursorPosition(0);",
    "info" : "ExpressionStatement[56346-56367]:ExpressionStatement[56346-56367]"
  }, {
    "left" : "killLine();",
    "right" : "killLine();",
    "info" : "ExpressionStatement[56380-56391]:ExpressionStatement[56380-56391]"
  }, {
    "left" : "putString(origBuffer.buffer);",
    "right" : "putString(origBuffer.buffer);",
    "info" : "ExpressionStatement[56404-56433]:ExpressionStatement[56404-56433]"
  }, {
    "left" : "setCursorPosition(0);",
    "right" : "setCursorPosition(0);",
    "info" : "ExpressionStatement[56446-56467]:ExpressionStatement[56446-56467]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[56480-56490]:ReturnStatement[56480-56490]"
  }, {
    "left" : "setCursorPosition(0);",
    "right" : "setCursorPosition(0);",
    "info" : "ExpressionStatement[56560-56581]:ExpressionStatement[56560-56581]"
  }, {
    "left" : "killLine();",
    "right" : "killLine();",
    "info" : "ExpressionStatement[56590-56601]:ExpressionStatement[56590-56601]"
  }, {
    "left" : "putString(history.get(idx));",
    "right" : "putString(history.get(idx));",
    "info" : "ExpressionStatement[56610-56638]:ExpressionStatement[56610-56638]"
  }, {
    "left" : "setCursorPosition(0);",
    "right" : "setCursorPosition(0);",
    "info" : "ExpressionStatement[56647-56668]:ExpressionStatement[56647-56668]"
  }, {
    "left" : "flush();",
    "right" : "flush();",
    "info" : "ExpressionStatement[56677-56685]:ExpressionStatement[56677-56685]"
  }, {
    "left" : "isComplete = false;",
    "right" : "isComplete = false;",
    "info" : "ExpressionStatement[56952-56971]:ExpressionStatement[56952-56971]"
  }, {
    "left" : "while (!isComplete && (ch = readCharacter()) != -1)",
    "right" : "while (!isComplete && (ch = readCharacter()) != -1)",
    "info" : "WhileStatement[56980-58374]:WhileStatement[56980-58374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57032-58374]:Block[57032-58374]"
  }, {
    "left" : "boolean forward = isForward;",
    "right" : "boolean forward = isForward;",
    "info" : "VariableDeclarationStatement[57046-57074]:VariableDeclarationStatement[57046-57074]"
  }, {
    "left" : "switch (ch) {\n                case 'p': case 'P':\n                    forward = !isForward;\n                    // Fallthru\n                case 'n': case 'N':\n                    boolean isMatch = false;\n                    if (forward) {\n                        for (int i = idx+1; !isMatch && i < end; i++) {\n                            if (history.get(i).toString().contains(searchTerm)) {\n                                idx = i;\n                                isMatch = true;\n                            }\n                        }\n                    }\n                    else {\n                        for (int i = idx - 1; !isMatch && i >= start; i--) {\n                            if (history.get(i).toString().contains(searchTerm)) {\n                                idx = i;\n                                isMatch = true;\n                            }\n                        }\n                    }\n                    if (isMatch) {\n                        setCursorPosition(0);\n                        killLine();\n                        putString(history.get(idx));\n                        setCursorPosition(0);\n                    }\n                    break;\n                default:\n                    isComplete = true;\n            }",
    "right" : "switch (ch) {\n                case 'p': case 'P':\n                    forward = !isForward;\n                    // Fallthru\n                case 'n': case 'N':\n                    boolean isMatch = false;\n                    if (forward) {\n                        for (int i = idx+1; !isMatch && i < end; i++) {\n                            if (history.get(i).toString().contains(searchTerm)) {\n                                idx = i;\n                                isMatch = true;\n                            }\n                        }\n                    }\n                    else {\n                        for (int i = idx - 1; !isMatch && i >= start; i--) {\n                            if (history.get(i).toString().contains(searchTerm)) {\n                                idx = i;\n                                isMatch = true;\n                            }\n                        }\n                    }\n                    if (isMatch) {\n                        setCursorPosition(0);\n                        killLine();\n                        putString(history.get(idx));\n                        setCursorPosition(0);\n                    }\n                    break;\n                default:\n                    isComplete = true;\n            }",
    "info" : "SwitchStatement[57087-58343]:SwitchStatement[57087-58343]"
  }, {
    "left" : "case 'p':",
    "right" : "case 'p':",
    "info" : "SwitchCase[57117-57126]:SwitchCase[57117-57126]"
  }, {
    "left" : "case 'P':",
    "right" : "case 'P':",
    "info" : "SwitchCase[57127-57136]:SwitchCase[57127-57136]"
  }, {
    "left" : "forward = !isForward;",
    "right" : "forward = !isForward;",
    "info" : "ExpressionStatement[57157-57178]:ExpressionStatement[57157-57178]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[57227-57236]:SwitchCase[57227-57236]"
  }, {
    "left" : "case 'N':",
    "right" : "case 'N':",
    "info" : "SwitchCase[57237-57246]:SwitchCase[57237-57246]"
  }, {
    "left" : "boolean isMatch = false;",
    "right" : "boolean isMatch = false;",
    "info" : "VariableDeclarationStatement[57267-57291]:VariableDeclarationStatement[57267-57291]"
  }, {
    "left" : "if (forward)",
    "right" : "if (forward)",
    "info" : "IfStatement[57312-58000]:IfStatement[57312-58000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57325-57647]:Block[57325-57647]"
  }, {
    "left" : "for (int i = idx+1; !isMatch && i < end; i++)",
    "right" : "for (int i = idx+1; !isMatch && i < end; i++)",
    "info" : "ForStatement[57351-57625]:ForStatement[57351-57625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57397-57625]:Block[57397-57625]"
  }, {
    "left" : "if (history.get(i).toString().contains(searchTerm))",
    "right" : "if (history.get(i).toString().contains(searchTerm))",
    "info" : "IfStatement[57427-57599]:IfStatement[57427-57599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57479-57599]:Block[57479-57599]"
  }, {
    "left" : "idx = i;",
    "right" : "idx = i;",
    "info" : "ExpressionStatement[57513-57521]:ExpressionStatement[57513-57521]"
  }, {
    "left" : "isMatch = true;",
    "right" : "isMatch = true;",
    "info" : "ExpressionStatement[57554-57569]:ExpressionStatement[57554-57569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57673-58000]:Block[57673-58000]"
  }, {
    "left" : "for (int i = idx - 1; !isMatch && i >= start; i--)",
    "right" : "for (int i = idx - 1; !isMatch && i >= start; i--)",
    "info" : "ForStatement[57699-57978]:ForStatement[57699-57978]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57750-57978]:Block[57750-57978]"
  }, {
    "left" : "if (history.get(i).toString().contains(searchTerm))",
    "right" : "if (history.get(i).toString().contains(searchTerm))",
    "info" : "IfStatement[57780-57952]:IfStatement[57780-57952]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57832-57952]:Block[57832-57952]"
  }, {
    "left" : "idx = i;",
    "right" : "idx = i;",
    "info" : "ExpressionStatement[57866-57874]:ExpressionStatement[57866-57874]"
  }, {
    "left" : "isMatch = true;",
    "right" : "isMatch = true;",
    "info" : "ExpressionStatement[57907-57922]:ExpressionStatement[57907-57922]"
  }, {
    "left" : "if (isMatch)",
    "right" : "if (isMatch)",
    "info" : "IfStatement[58021-58238]:IfStatement[58021-58238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58034-58238]:Block[58034-58238]"
  }, {
    "left" : "setCursorPosition(0);",
    "right" : "setCursorPosition(0);",
    "info" : "ExpressionStatement[58060-58081]:ExpressionStatement[58060-58081]"
  }, {
    "left" : "killLine();",
    "right" : "killLine();",
    "info" : "ExpressionStatement[58106-58117]:ExpressionStatement[58106-58117]"
  }, {
    "left" : "putString(history.get(idx));",
    "right" : "putString(history.get(idx));",
    "info" : "ExpressionStatement[58142-58170]:ExpressionStatement[58142-58170]"
  }, {
    "left" : "setCursorPosition(0);",
    "right" : "setCursorPosition(0);",
    "info" : "ExpressionStatement[58195-58216]:ExpressionStatement[58195-58216]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[58259-58265]:BreakStatement[58259-58265]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[58282-58290]:SwitchCase[58282-58290]"
  }, {
    "left" : "isComplete = true;",
    "right" : "isComplete = true;",
    "info" : "ExpressionStatement[58311-58329]:ExpressionStatement[58311-58329]"
  }, {
    "left" : "flush();",
    "right" : "flush();",
    "info" : "ExpressionStatement[58356-58364]:ExpressionStatement[58356-58364]"
  }, {
    "left" : "return ch;",
    "right" : "return ch;",
    "info" : "ReturnStatement[58428-58438]:ReturnStatement[58428-58438]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58496-58540]:Block[58496-58540]"
  }, {
    "left" : "parenBlinkTimeout = timeout;",
    "right" : "parenBlinkTimeout = timeout;",
    "info" : "ExpressionStatement[58506-58534]:ExpressionStatement[58506-58534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58600-58856]:Block[58600-58856]"
  }, {
    "left" : "putString(s);",
    "right" : "putString(s);",
    "info" : "ExpressionStatement[58611-58624]:ExpressionStatement[58611-58624]"
  }, {
    "left" : "int closePosition = buf.cursor;",
    "right" : "int closePosition = buf.cursor;",
    "info" : "VariableDeclarationStatement[58634-58665]:VariableDeclarationStatement[58634-58665]"
  }, {
    "left" : "moveCursor(-1);",
    "right" : "moveCursor(-1);",
    "info" : "ExpressionStatement[58676-58691]:ExpressionStatement[58676-58691]"
  }, {
    "left" : "viMatch();",
    "right" : "viMatch();",
    "info" : "ExpressionStatement[58701-58711]:ExpressionStatement[58701-58711]"
  }, {
    "left" : "if (in.isNonBlockingEnabled())",
    "right" : "if (in.isNonBlockingEnabled())",
    "info" : "IfStatement[58723-58806]:IfStatement[58723-58806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58754-58806]:Block[58754-58806]"
  }, {
    "left" : "in.peek(parenBlinkTimeout);",
    "right" : "in.peek(parenBlinkTimeout);",
    "info" : "ExpressionStatement[58768-58795]:ExpressionStatement[58768-58795]"
  }, {
    "left" : "setCursorPosition(closePosition);",
    "right" : "setCursorPosition(closePosition);",
    "info" : "ExpressionStatement[58817-58850]:ExpressionStatement[58817-58850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59265-60272]:Block[59265-60272]"
  }, {
    "left" : "int pos        = buf.cursor;",
    "right" : "int pos        = buf.cursor;",
    "info" : "VariableDeclarationStatement[59275-59303]:VariableDeclarationStatement[59275-59303]"
  }, {
    "left" : "if (pos == buf.length())",
    "right" : "if (pos == buf.length())",
    "info" : "IfStatement[59313-59375]:IfStatement[59313-59375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59338-59375]:Block[59338-59375]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[59352-59365]:ReturnStatement[59352-59365]"
  }, {
    "left" : "int type       = getBracketType(buf.buffer.charAt (pos));",
    "right" : "int type       = getBracketType(buf.buffer.charAt (pos));",
    "info" : "VariableDeclarationStatement[59385-59442]:VariableDeclarationStatement[59385-59442]"
  }, {
    "left" : "int move       = (type < 0) ? -1 : 1;",
    "right" : "int move       = (type < 0) ? -1 : 1;",
    "info" : "VariableDeclarationStatement[59451-59488]:VariableDeclarationStatement[59451-59488]"
  }, {
    "left" : "int count      = 1;",
    "right" : "int count      = 1;",
    "info" : "VariableDeclarationStatement[59497-59516]:VariableDeclarationStatement[59497-59516]"
  }, {
    "left" : "if (type == 0)",
    "right" : "if (type == 0)",
    "info" : "IfStatement[59526-59566]:IfStatement[59526-59566]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[59553-59566]:ReturnStatement[59553-59566]"
  }, {
    "left" : "while (count > 0)",
    "right" : "while (count > 0)",
    "info" : "WhileStatement[59576-59997]:WhileStatement[59576-59997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59594-59997]:Block[59594-59997]"
  }, {
    "left" : "pos += move;",
    "right" : "pos += move;",
    "info" : "ExpressionStatement[59608-59620]:ExpressionStatement[59608-59620]"
  }, {
    "left" : "if (pos < 0 || pos >= buf.buffer.length ())",
    "right" : "if (pos < 0 || pos >= buf.buffer.length ())",
    "info" : "IfStatement[59676-59765]:IfStatement[59676-59765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59720-59765]:Block[59720-59765]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[59738-59751]:ReturnStatement[59738-59751]"
  }, {
    "left" : "int curType = getBracketType(buf.buffer.charAt (pos));",
    "right" : "int curType = getBracketType(buf.buffer.charAt (pos));",
    "info" : "VariableDeclarationStatement[59779-59833]:VariableDeclarationStatement[59779-59833]"
  }, {
    "left" : "if (curType == type)",
    "right" : "if (curType == type)",
    "info" : "IfStatement[59846-59987]:IfStatement[59846-59987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59867-59907]:Block[59867-59907]"
  }, {
    "left" : "++count;",
    "right" : "++count;",
    "info" : "ExpressionStatement[59885-59893]:ExpressionStatement[59885-59893]"
  }, {
    "left" : "if (curType == -type)",
    "right" : "if (curType == -type)",
    "info" : "IfStatement[59925-59987]:IfStatement[59925-59987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59947-59987]:Block[59947-59987]"
  }, {
    "left" : "--count;",
    "right" : "--count;",
    "info" : "ExpressionStatement[59965-59973]:ExpressionStatement[59965-59973]"
  }, {
    "left" : "if (move > 0 && isInViMoveOperationState())",
    "right" : "if (move > 0 && isInViMoveOperationState())",
    "info" : "IfStatement[60150-60212]:IfStatement[60150-60212]"
  }, {
    "left" : "++pos;",
    "right" : "++pos;",
    "info" : "ExpressionStatement[60206-60212]:ExpressionStatement[60206-60212]"
  }, {
    "left" : "setCursorPosition(pos);",
    "right" : "setCursorPosition(pos);",
    "info" : "ExpressionStatement[60222-60245]:ExpressionStatement[60222-60245]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[60254-60266]:ReturnStatement[60254-60266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60617-60901]:Block[60617-60901]"
  }, {
    "left" : "switch (ch) {\n            case '[': return  1;\n            case ']': return -1;\n            case '{': return  2;\n            case '}': return -2;\n            case '(': return  3;\n            case ')': return -3;\n            default:\n                return 0;\n        }",
    "right" : "switch (ch) {\n            case '[': return  1;\n            case ']': return -1;\n            case '{': return  2;\n            case '}': return -2;\n            case '(': return  3;\n            case ')': return -3;\n            default:\n                return 0;\n        }",
    "info" : "SwitchStatement[60627-60895]:SwitchStatement[60627-60895]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[60653-60662]:SwitchCase[60653-60662]"
  }, {
    "left" : "return  1;",
    "right" : "return  1;",
    "info" : "ReturnStatement[60663-60673]:ReturnStatement[60663-60673]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[60686-60695]:SwitchCase[60686-60695]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[60696-60706]:ReturnStatement[60696-60706]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[60719-60728]:SwitchCase[60719-60728]"
  }, {
    "left" : "return  2;",
    "right" : "return  2;",
    "info" : "ReturnStatement[60729-60739]:ReturnStatement[60729-60739]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[60752-60761]:SwitchCase[60752-60761]"
  }, {
    "left" : "return -2;",
    "right" : "return -2;",
    "info" : "ReturnStatement[60762-60772]:ReturnStatement[60762-60772]"
  }, {
    "left" : "case '(':",
    "right" : "case '(':",
    "info" : "SwitchCase[60785-60794]:SwitchCase[60785-60794]"
  }, {
    "left" : "return  3;",
    "right" : "return  3;",
    "info" : "ReturnStatement[60795-60805]:ReturnStatement[60795-60805]"
  }, {
    "left" : "case ')':",
    "right" : "case ')':",
    "info" : "SwitchCase[60818-60827]:SwitchCase[60818-60827]"
  }, {
    "left" : "return -3;",
    "right" : "return -3;",
    "info" : "ReturnStatement[60828-60838]:ReturnStatement[60828-60838]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[60851-60859]:SwitchCase[60851-60859]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[60876-60885]:ReturnStatement[60876-60885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60963-61511]:Block[60963-61511]"
  }, {
    "left" : "StringBuilder killed = new StringBuilder();",
    "right" : "StringBuilder killed = new StringBuilder();",
    "info" : "VariableDeclarationStatement[60973-61016]:VariableDeclarationStatement[60973-61016]"
  }, {
    "left" : "char c;",
    "right" : "char c;",
    "info" : "VariableDeclarationStatement[61025-61032]:VariableDeclarationStatement[61025-61032]"
  }, {
    "left" : "while (isDelimiter((c = buf.current())))",
    "right" : "while (isDelimiter((c = buf.current())))",
    "info" : "WhileStatement[61042-61213]:WhileStatement[61042-61213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61083-61213]:Block[61083-61213]"
  }, {
    "left" : "if (c == 0)",
    "right" : "if (c == 0)",
    "info" : "IfStatement[61097-61147]:IfStatement[61097-61147]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61109-61147]:Block[61109-61147]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[61127-61133]:BreakStatement[61127-61133]"
  }, {
    "left" : "killed.append(c);",
    "right" : "killed.append(c);",
    "info" : "ExpressionStatement[61161-61178]:ExpressionStatement[61161-61178]"
  }, {
    "left" : "backspace();",
    "right" : "backspace();",
    "info" : "ExpressionStatement[61191-61203]:ExpressionStatement[61191-61203]"
  }, {
    "left" : "while (!isDelimiter((c = buf.current())))",
    "right" : "while (!isDelimiter((c = buf.current())))",
    "info" : "WhileStatement[61223-61395]:WhileStatement[61223-61395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61265-61395]:Block[61265-61395]"
  }, {
    "left" : "if (c == 0)",
    "right" : "if (c == 0)",
    "info" : "IfStatement[61279-61329]:IfStatement[61279-61329]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61291-61329]:Block[61291-61329]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[61309-61315]:BreakStatement[61309-61315]"
  }, {
    "left" : "killed.append(c);",
    "right" : "killed.append(c);",
    "info" : "ExpressionStatement[61343-61360]:ExpressionStatement[61343-61360]"
  }, {
    "left" : "backspace();",
    "right" : "backspace();",
    "info" : "ExpressionStatement[61373-61385]:ExpressionStatement[61373-61385]"
  }, {
    "left" : "String copy = killed.reverse().toString();",
    "right" : "String copy = killed.reverse().toString();",
    "info" : "VariableDeclarationStatement[61405-61447]:VariableDeclarationStatement[61405-61447]"
  }, {
    "left" : "killRing.addBackwards(copy);",
    "right" : "killRing.addBackwards(copy);",
    "info" : "ExpressionStatement[61456-61484]:ExpressionStatement[61456-61484]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[61493-61505]:ReturnStatement[61493-61505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61569-62093]:Block[61569-62093]"
  }, {
    "left" : "StringBuilder killed = new StringBuilder();",
    "right" : "StringBuilder killed = new StringBuilder();",
    "info" : "VariableDeclarationStatement[61579-61622]:VariableDeclarationStatement[61579-61622]"
  }, {
    "left" : "char c;",
    "right" : "char c;",
    "info" : "VariableDeclarationStatement[61631-61638]:VariableDeclarationStatement[61631-61638]"
  }, {
    "left" : "while (isDelimiter((c = buf.nextChar())))",
    "right" : "while (isDelimiter((c = buf.nextChar())))",
    "info" : "WhileStatement[61648-61816]:WhileStatement[61648-61816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61690-61816]:Block[61690-61816]"
  }, {
    "left" : "if (c == 0)",
    "right" : "if (c == 0)",
    "info" : "IfStatement[61704-61754]:IfStatement[61704-61754]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61716-61754]:Block[61716-61754]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[61734-61740]:BreakStatement[61734-61740]"
  }, {
    "left" : "killed.append(c);",
    "right" : "killed.append(c);",
    "info" : "ExpressionStatement[61767-61784]:ExpressionStatement[61767-61784]"
  }, {
    "left" : "delete();",
    "right" : "delete();",
    "info" : "ExpressionStatement[61797-61806]:ExpressionStatement[61797-61806]"
  }, {
    "left" : "while (!isDelimiter((c = buf.nextChar())))",
    "right" : "while (!isDelimiter((c = buf.nextChar())))",
    "info" : "WhileStatement[61826-61995]:WhileStatement[61826-61995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61869-61995]:Block[61869-61995]"
  }, {
    "left" : "if (c == 0)",
    "right" : "if (c == 0)",
    "info" : "IfStatement[61883-61933]:IfStatement[61883-61933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61895-61933]:Block[61895-61933]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[61913-61919]:BreakStatement[61913-61919]"
  }, {
    "left" : "killed.append(c);",
    "right" : "killed.append(c);",
    "info" : "ExpressionStatement[61946-61963]:ExpressionStatement[61946-61963]"
  }, {
    "left" : "delete();",
    "right" : "delete();",
    "info" : "ExpressionStatement[61976-61985]:ExpressionStatement[61976-61985]"
  }, {
    "left" : "String copy = killed.toString();",
    "right" : "String copy = killed.toString();",
    "info" : "VariableDeclarationStatement[62005-62037]:VariableDeclarationStatement[62005-62037]"
  }, {
    "left" : "killRing.add(copy);",
    "right" : "killRing.add(copy);",
    "info" : "ExpressionStatement[62046-62065]:ExpressionStatement[62046-62065]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[62075-62087]:ReturnStatement[62075-62087]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62151-62575]:Block[62151-62575]"
  }, {
    "left" : "boolean first = true;",
    "right" : "boolean first = true;",
    "info" : "VariableDeclarationStatement[62161-62182]:VariableDeclarationStatement[62161-62182]"
  }, {
    "left" : "int i = 1;",
    "right" : "int i = 1;",
    "info" : "VariableDeclarationStatement[62191-62201]:VariableDeclarationStatement[62191-62201]"
  }, {
    "left" : "char c;",
    "right" : "char c;",
    "info" : "VariableDeclarationStatement[62210-62217]:VariableDeclarationStatement[62210-62217]"
  }, {
    "left" : "while (buf.cursor + i  - 1< buf.length() && !isDelimiter((c = buf.buffer.charAt(buf.cursor + i - 1))))",
    "right" : "while (buf.cursor + i  - 1< buf.length() && !isDelimiter((c = buf.buffer.charAt(buf.cursor + i - 1))))",
    "info" : "WhileStatement[62226-62499]:WhileStatement[62226-62499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62329-62499]:Block[62329-62499]"
  }, {
    "left" : "buf.buffer.setCharAt(buf.cursor + i - 1, first ? Character.toUpperCase(c) : Character.toLowerCase(c));",
    "right" : "buf.buffer.setCharAt(buf.cursor + i - 1, first ? Character.toUpperCase(c) : Character.toLowerCase(c));",
    "info" : "ExpressionStatement[62343-62445]:ExpressionStatement[62343-62445]"
  }, {
    "left" : "first = false;",
    "right" : "first = false;",
    "info" : "ExpressionStatement[62458-62472]:ExpressionStatement[62458-62472]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[62485-62489]:ExpressionStatement[62485-62489]"
  }, {
    "left" : "drawBuffer();",
    "right" : "drawBuffer();",
    "info" : "ExpressionStatement[62508-62521]:ExpressionStatement[62508-62521]"
  }, {
    "left" : "moveCursor(i - 1);",
    "right" : "moveCursor(i - 1);",
    "info" : "ExpressionStatement[62530-62548]:ExpressionStatement[62530-62548]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[62557-62569]:ReturnStatement[62557-62569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62629-62961]:Block[62629-62961]"
  }, {
    "left" : "int i = 1;",
    "right" : "int i = 1;",
    "info" : "VariableDeclarationStatement[62639-62649]:VariableDeclarationStatement[62639-62649]"
  }, {
    "left" : "char c;",
    "right" : "char c;",
    "info" : "VariableDeclarationStatement[62658-62665]:VariableDeclarationStatement[62658-62665]"
  }, {
    "left" : "while (buf.cursor + i - 1 < buf.length() && !isDelimiter((c = buf.buffer.charAt(buf.cursor + i - 1))))",
    "right" : "while (buf.cursor + i - 1 < buf.length() && !isDelimiter((c = buf.buffer.charAt(buf.cursor + i - 1))))",
    "info" : "WhileStatement[62674-62885]:WhileStatement[62674-62885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62777-62885]:Block[62777-62885]"
  }, {
    "left" : "buf.buffer.setCharAt(buf.cursor + i - 1, Character.toUpperCase(c));",
    "right" : "buf.buffer.setCharAt(buf.cursor + i - 1, Character.toUpperCase(c));",
    "info" : "ExpressionStatement[62791-62858]:ExpressionStatement[62791-62858]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[62871-62875]:ExpressionStatement[62871-62875]"
  }, {
    "left" : "drawBuffer();",
    "right" : "drawBuffer();",
    "info" : "ExpressionStatement[62894-62907]:ExpressionStatement[62894-62907]"
  }, {
    "left" : "moveCursor(i - 1);",
    "right" : "moveCursor(i - 1);",
    "info" : "ExpressionStatement[62916-62934]:ExpressionStatement[62916-62934]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[62943-62955]:ReturnStatement[62943-62955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63017-63349]:Block[63017-63349]"
  }, {
    "left" : "int i = 1;",
    "right" : "int i = 1;",
    "info" : "VariableDeclarationStatement[63027-63037]:VariableDeclarationStatement[63027-63037]"
  }, {
    "left" : "char c;",
    "right" : "char c;",
    "info" : "VariableDeclarationStatement[63046-63053]:VariableDeclarationStatement[63046-63053]"
  }, {
    "left" : "while (buf.cursor + i - 1 < buf.length() && !isDelimiter((c = buf.buffer.charAt(buf.cursor + i - 1))))",
    "right" : "while (buf.cursor + i - 1 < buf.length() && !isDelimiter((c = buf.buffer.charAt(buf.cursor + i - 1))))",
    "info" : "WhileStatement[63062-63273]:WhileStatement[63062-63273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63165-63273]:Block[63165-63273]"
  }, {
    "left" : "buf.buffer.setCharAt(buf.cursor + i - 1, Character.toLowerCase(c));",
    "right" : "buf.buffer.setCharAt(buf.cursor + i - 1, Character.toLowerCase(c));",
    "info" : "ExpressionStatement[63179-63246]:ExpressionStatement[63179-63246]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[63259-63263]:ExpressionStatement[63259-63263]"
  }, {
    "left" : "drawBuffer();",
    "right" : "drawBuffer();",
    "info" : "ExpressionStatement[63282-63295]:ExpressionStatement[63282-63295]"
  }, {
    "left" : "moveCursor(i - 1);",
    "right" : "moveCursor(i - 1);",
    "info" : "ExpressionStatement[63304-63322]:ExpressionStatement[63304-63322]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[63331-63343]:ReturnStatement[63331-63343]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63885-64488]:Block[63885-64488]"
  }, {
    "left" : "for (; count > 0; --count)",
    "right" : "for (; count > 0; --count)",
    "info" : "ForStatement[63895-64460]:ForStatement[63895-64460]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63922-64460]:Block[63922-64460]"
  }, {
    "left" : "if (buf.cursor == 0 || buf.cursor == buf.buffer.length())",
    "right" : "if (buf.cursor == 0 || buf.cursor == buf.buffer.length())",
    "info" : "IfStatement[63936-64039]:IfStatement[63936-64039]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63994-64039]:Block[63994-64039]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[64012-64025]:ReturnStatement[64012-64025]"
  }, {
    "left" : "int first  = buf.cursor-1;",
    "right" : "int first  = buf.cursor-1;",
    "info" : "VariableDeclarationStatement[64053-64079]:VariableDeclarationStatement[64053-64079]"
  }, {
    "left" : "int second = buf.cursor;",
    "right" : "int second = buf.cursor;",
    "info" : "VariableDeclarationStatement[64092-64116]:VariableDeclarationStatement[64092-64116]"
  }, {
    "left" : "char tmp = buf.buffer.charAt (first);",
    "right" : "char tmp = buf.buffer.charAt (first);",
    "info" : "VariableDeclarationStatement[64130-64167]:VariableDeclarationStatement[64130-64167]"
  }, {
    "left" : "buf.buffer.setCharAt(first, buf.buffer.charAt(second));",
    "right" : "buf.buffer.setCharAt(first, buf.buffer.charAt(second));",
    "info" : "ExpressionStatement[64180-64235]:ExpressionStatement[64180-64235]"
  }, {
    "left" : "buf.buffer.setCharAt(second, tmp);",
    "right" : "buf.buffer.setCharAt(second, tmp);",
    "info" : "ExpressionStatement[64248-64282]:ExpressionStatement[64248-64282]"
  }, {
    "left" : "moveInternal(-1);",
    "right" : "moveInternal(-1);",
    "info" : "ExpressionStatement[64378-64395]:ExpressionStatement[64378-64395]"
  }, {
    "left" : "drawBuffer();",
    "right" : "drawBuffer();",
    "info" : "ExpressionStatement[64408-64421]:ExpressionStatement[64408-64421]"
  }, {
    "left" : "moveInternal(2);",
    "right" : "moveInternal(2);",
    "info" : "ExpressionStatement[64434-64450]:ExpressionStatement[64434-64450]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[64470-64482]:ReturnStatement[64470-64482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64531-64910]:Block[64531-64910]"
  }, {
    "left" : "KeyMap map = consoleKeys.getKeys();",
    "right" : "KeyMap map = consoleKeys.getKeys();",
    "info" : "VariableDeclarationStatement[64568-64603]:VariableDeclarationStatement[64568-64603]"
  }, {
    "left" : "KeyMap mapByName = consoleKeys.getKeyMaps().get(name);",
    "right" : "KeyMap mapByName = consoleKeys.getKeyMaps().get(name);",
    "info" : "VariableDeclarationStatement[64612-64666]:VariableDeclarationStatement[64612-64666]"
  }, {
    "left" : "if (mapByName == null)",
    "right" : "if (mapByName == null)",
    "info" : "IfStatement[64676-64724]:IfStatement[64676-64724]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[64711-64724]:ReturnStatement[64711-64724]"
  }, {
    "left" : "return map == mapByName;",
    "right" : "return map == mapByName;",
    "info" : "ReturnStatement[64880-64904]:ReturnStatement[64880-64904]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65155-65268]:Block[65155-65268]"
  }, {
    "left" : "moveToEnd();",
    "right" : "moveToEnd();",
    "info" : "ExpressionStatement[65165-65177]:ExpressionStatement[65165-65177]"
  }, {
    "left" : "println();",
    "right" : "println();",
    "info" : "ExpressionStatement[65186-65196]:ExpressionStatement[65186-65196]"
  }, {
    "left" : "flush();",
    "right" : "flush();",
    "info" : "ExpressionStatement[65223-65231]:ExpressionStatement[65223-65231]"
  }, {
    "left" : "return finishBuffer();",
    "right" : "return finishBuffer();",
    "info" : "ReturnStatement[65240-65262]:ReturnStatement[65240-65262]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65314-65399]:Block[65314-65399]"
  }, {
    "left" : "beep();",
    "right" : "beep();",
    "info" : "ExpressionStatement[65324-65331]:ExpressionStatement[65324-65331]"
  }, {
    "left" : "buf.clear();",
    "right" : "buf.clear();",
    "info" : "ExpressionStatement[65340-65352]:ExpressionStatement[65340-65352]"
  }, {
    "left" : "println();",
    "right" : "println();",
    "info" : "ExpressionStatement[65361-65371]:ExpressionStatement[65361-65371]"
  }, {
    "left" : "redrawLine();",
    "right" : "redrawLine();",
    "info" : "ExpressionStatement[65380-65393]:ExpressionStatement[65380-65393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65696-66174]:Block[65696-66174]"
  }, {
    "left" : "int where = num;",
    "right" : "int where = num;",
    "info" : "VariableDeclarationStatement[65706-65722]:VariableDeclarationStatement[65706-65722]"
  }, {
    "left" : "if ((buf.cursor == 0) && (where <= 0))",
    "right" : "if ((buf.cursor == 0) && (where <= 0))",
    "info" : "IfStatement[65732-65804]:IfStatement[65732-65804]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65771-65804]:Block[65771-65804]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[65785-65794]:ReturnStatement[65785-65794]"
  }, {
    "left" : "if ((buf.cursor == buf.buffer.length()) && (where >= 0))",
    "right" : "if ((buf.cursor == buf.buffer.length()) && (where >= 0))",
    "info" : "IfStatement[65814-65904]:IfStatement[65814-65904]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65871-65904]:Block[65871-65904]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[65885-65894]:ReturnStatement[65885-65894]"
  }, {
    "left" : "if ((buf.cursor + where) < 0)",
    "right" : "if ((buf.cursor + where) < 0)",
    "info" : "IfStatement[65914-66115]:IfStatement[65914-66115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65944-65988]:Block[65944-65988]"
  }, {
    "left" : "where = -buf.cursor;",
    "right" : "where = -buf.cursor;",
    "info" : "ExpressionStatement[65958-65978]:ExpressionStatement[65958-65978]"
  }, {
    "left" : "if ((buf.cursor + where) > buf.buffer.length())",
    "right" : "if ((buf.cursor + where) > buf.buffer.length())",
    "info" : "IfStatement[66002-66115]:IfStatement[66002-66115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66050-66115]:Block[66050-66115]"
  }, {
    "left" : "where = buf.buffer.length() - buf.cursor;",
    "right" : "where = buf.buffer.length() - buf.cursor;",
    "info" : "ExpressionStatement[66064-66105]:ExpressionStatement[66064-66105]"
  }, {
    "left" : "moveInternal(where);",
    "right" : "moveInternal(where);",
    "info" : "ExpressionStatement[66125-66145]:ExpressionStatement[66125-66145]"
  }, {
    "left" : "return where;",
    "right" : "return where;",
    "info" : "ReturnStatement[66155-66168]:ReturnStatement[66155-66168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66425-68055]:Block[66425-68055]"
  }, {
    "left" : "buf.cursor += where;",
    "right" : "buf.cursor += where;",
    "info" : "ExpressionStatement[66547-66567]:ExpressionStatement[66547-66567]"
  }, {
    "left" : "if (terminal.isAnsiSupported())",
    "right" : "if (terminal.isAnsiSupported())",
    "info" : "IfStatement[66577-67159]:IfStatement[66577-67159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66609-67159]:Block[66609-67159]"
  }, {
    "left" : "if (where < 0)",
    "right" : "if (where < 0)",
    "info" : "IfStatement[66623-67106]:IfStatement[66623-67106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66638-66692]:Block[66638-66692]"
  }, {
    "left" : "back(Math.abs(where));",
    "right" : "back(Math.abs(where));",
    "info" : "ExpressionStatement[66656-66678]:ExpressionStatement[66656-66678]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66698-67106]:Block[66698-67106]"
  }, {
    "left" : "int width = getTerminal().getWidth();",
    "right" : "int width = getTerminal().getWidth();",
    "info" : "VariableDeclarationStatement[66716-66753]:VariableDeclarationStatement[66716-66753]"
  }, {
    "left" : "int cursor = getCursorPosition();",
    "right" : "int cursor = getCursorPosition();",
    "info" : "VariableDeclarationStatement[66770-66803]:VariableDeclarationStatement[66770-66803]"
  }, {
    "left" : "int oldLine = (cursor - where) / width;",
    "right" : "int oldLine = (cursor - where) / width;",
    "info" : "VariableDeclarationStatement[66820-66859]:VariableDeclarationStatement[66820-66859]"
  }, {
    "left" : "int newLine = cursor / width;",
    "right" : "int newLine = cursor / width;",
    "info" : "VariableDeclarationStatement[66876-66905]:VariableDeclarationStatement[66876-66905]"
  }, {
    "left" : "if (newLine > oldLine)",
    "right" : "if (newLine > oldLine)",
    "info" : "IfStatement[66922-67030]:IfStatement[66922-67030]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66945-67030]:Block[66945-67030]"
  }, {
    "left" : "printAnsiSequence((newLine - oldLine) + \"B\");",
    "right" : "printAnsiSequence((newLine - oldLine) + \"B\");",
    "info" : "ExpressionStatement[66967-67012]:ExpressionStatement[66967-67012]"
  }, {
    "left" : "printAnsiSequence(1 +(cursor % width) + \"G\");",
    "right" : "printAnsiSequence(1 +(cursor % width) + \"G\");",
    "info" : "ExpressionStatement[67047-67092]:ExpressionStatement[67047-67092]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[67142-67149]:ReturnStatement[67142-67149]"
  }, {
    "left" : "char c;",
    "right" : "char c;",
    "info" : "VariableDeclarationStatement[67169-67176]:VariableDeclarationStatement[67169-67176]"
  }, {
    "left" : "if (where < 0)",
    "right" : "if (where < 0)",
    "info" : "IfStatement[67186-67895]:IfStatement[67186-67895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67201-67632]:Block[67201-67632]"
  }, {
    "left" : "int len = 0;",
    "right" : "int len = 0;",
    "info" : "VariableDeclarationStatement[67215-67227]:VariableDeclarationStatement[67215-67227]"
  }, {
    "left" : "for (int i = buf.cursor; i < buf.cursor - where; i++)",
    "right" : "for (int i = buf.cursor; i < buf.cursor - where; i++)",
    "info" : "ForStatement[67240-67485]:ForStatement[67240-67485]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67294-67485]:Block[67294-67485]"
  }, {
    "left" : "if (buf.buffer.charAt(i) == '\\t')",
    "right" : "if (buf.buffer.charAt(i) == '\\t')",
    "info" : "IfStatement[67312-67471]:IfStatement[67312-67471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67346-67403]:Block[67346-67403]"
  }, {
    "left" : "len += TAB_WIDTH;",
    "right" : "len += TAB_WIDTH;",
    "info" : "ExpressionStatement[67368-67385]:ExpressionStatement[67368-67385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67425-67471]:Block[67425-67471]"
  }, {
    "left" : "len++;",
    "right" : "len++;",
    "info" : "ExpressionStatement[67447-67453]:ExpressionStatement[67447-67453]"
  }, {
    "left" : "char chars[] = new char[len];",
    "right" : "char chars[] = new char[len];",
    "info" : "VariableDeclarationStatement[67499-67528]:VariableDeclarationStatement[67499-67528]"
  }, {
    "left" : "Arrays.fill(chars, BACKSPACE);",
    "right" : "Arrays.fill(chars, BACKSPACE);",
    "info" : "ExpressionStatement[67541-67571]:ExpressionStatement[67541-67571]"
  }, {
    "left" : "out.write(chars);",
    "right" : "out.write(chars);",
    "info" : "ExpressionStatement[67584-67601]:ExpressionStatement[67584-67601]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[67615-67622]:ReturnStatement[67615-67622]"
  }, {
    "left" : "if (buf.cursor == 0)",
    "right" : "if (buf.cursor == 0)",
    "info" : "IfStatement[67646-67895]:IfStatement[67646-67895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67667-67698]:Block[67667-67698]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[67681-67688]:ReturnStatement[67681-67688]"
  }, {
    "left" : "if (mask != null)",
    "right" : "if (mask != null)",
    "info" : "IfStatement[67712-67895]:IfStatement[67712-67895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67730-67763]:Block[67730-67763]"
  }, {
    "left" : "c = mask;",
    "right" : "c = mask;",
    "info" : "ExpressionStatement[67744-67753]:ExpressionStatement[67744-67753]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67777-67895]:Block[67777-67895]"
  }, {
    "left" : "print(buf.buffer.substring(buf.cursor - where, buf.cursor).toCharArray());",
    "right" : "print(buf.buffer.substring(buf.cursor - where, buf.cursor).toCharArray());",
    "info" : "ExpressionStatement[67791-67865]:ExpressionStatement[67791-67865]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[67878-67885]:ReturnStatement[67878-67885]"
  }, {
    "left" : "if (mask == NULL_MASK)",
    "right" : "if (mask == NULL_MASK)",
    "info" : "IfStatement[67959-68013]:IfStatement[67959-68013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67982-68013]:Block[67982-68013]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[67996-68003]:ReturnStatement[67996-68003]"
  }, {
    "left" : "print(c, Math.abs(where));",
    "right" : "print(c, Math.abs(where));",
    "info" : "ExpressionStatement[68023-68049]:ExpressionStatement[68023-68049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68168-68533]:Block[68168-68533]"
  }, {
    "left" : "buf.buffer.replace(buf.cursor - num, buf.cursor, replacement);",
    "right" : "buf.buffer.replace(buf.cursor - num, buf.cursor, replacement);",
    "info" : "ExpressionStatement[68178-68240]:ExpressionStatement[68178-68240]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[68249-68506]:TryStatement[68249-68506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68253-68405]:Block[68253-68405]"
  }, {
    "left" : "moveCursor(-num);",
    "right" : "moveCursor(-num);",
    "info" : "ExpressionStatement[68267-68284]:ExpressionStatement[68267-68284]"
  }, {
    "left" : "drawBuffer(Math.max(0, num - replacement.length()));",
    "right" : "drawBuffer(Math.max(0, num - replacement.length()));",
    "info" : "ExpressionStatement[68297-68349]:ExpressionStatement[68297-68349]"
  }, {
    "left" : "moveCursor(replacement.length());",
    "right" : "moveCursor(replacement.length());",
    "info" : "ExpressionStatement[68362-68395]:ExpressionStatement[68362-68395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68436-68506]:Block[68436-68506]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[68450-68470]:ExpressionStatement[68450-68470]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[68483-68496]:ReturnStatement[68483-68496]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[68515-68527]:ReturnStatement[68515-68527]"
  }, {
    "left" : "/**\n     * Read a character from the console.\n     *\n     * @return the character, or -1 if an EOF is received.\n     */",
    "right" : "/**\n     * Read a character from the console.\n     *\n     * @return the character, or -1 if an EOF is received.\n     */",
    "info" : "Javadoc[68539-68658]:Javadoc[68539-68658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68715-68971]:Block[69131-70308]"
  }, {
    "left" : "int c = reader.read();",
    "right" : "int c = reader.read();",
    "info" : "VariableDeclarationStatement[68725-68747]:VariableDeclarationStatement[69141-69163]"
  }, {
    "left" : "if (c >= 0)",
    "right" : "if (c >= 0)",
    "info" : "IfStatement[68756-68947]:IfStatement[69172-70284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68768-68947]:Block[69184-70284]"
  }, {
    "left" : "Log.trace(\"Keystroke: \", c);",
    "right" : "Log.trace(\"Keystroke: \", c);",
    "info" : "ExpressionStatement[68782-68810]:ExpressionStatement[69198-69226]"
  }, {
    "left" : "if (terminal.isSupported())",
    "right" : "if (terminal.isSupported())",
    "info" : "IfStatement[68864-68937]:IfStatement[69280-69353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68892-68937]:Block[69308-69353]"
  }, {
    "left" : "clearEcho(c);",
    "right" : "clearEcho(c);",
    "info" : "ExpressionStatement[68910-68923]:ExpressionStatement[69326-69339]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[68956-68965]:ReturnStatement[70293-70302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69116-69387]:Block[70453-70724]"
  }, {
    "left" : "if (!terminal.isEchoEnabled())",
    "right" : "if (!terminal.isEchoEnabled())",
    "info" : "IfStatement[69181-69245]:IfStatement[70518-70582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69212-69245]:Block[70549-70582]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[69226-69235]:ReturnStatement[70563-70572]"
  }, {
    "left" : "int num = countEchoCharacters(c);",
    "right" : "int num = countEchoCharacters(c);",
    "info" : "VariableDeclarationStatement[69283-69316]:VariableDeclarationStatement[70620-70653]"
  }, {
    "left" : "back(num);",
    "right" : "back(num);",
    "info" : "ExpressionStatement[69325-69335]:ExpressionStatement[70662-70672]"
  }, {
    "left" : "drawBuffer(num);",
    "right" : "drawBuffer(num);",
    "info" : "ExpressionStatement[69344-69360]:ExpressionStatement[70681-70697]"
  }, {
    "left" : "return num;",
    "right" : "return num;",
    "info" : "ReturnStatement[69370-69381]:ReturnStatement[70707-70718]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69438-69826]:Block[70775-71163]"
  }, {
    "left" : "if (c == 9)",
    "right" : "if (c == 9)",
    "info" : "IfStatement[69584-69768]:IfStatement[70921-71105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69596-69768]:Block[70933-71105]"
  }, {
    "left" : "int tabStop = 8;",
    "right" : "int tabStop = 8;",
    "info" : "VariableDeclarationStatement[69610-69626]:VariableDeclarationStatement[70947-70963]"
  }, {
    "left" : "int position = getCursorPosition();",
    "right" : "int position = getCursorPosition();",
    "info" : "VariableDeclarationStatement[69671-69706]:VariableDeclarationStatement[71008-71043]"
  }, {
    "left" : "return tabStop - (position % tabStop);",
    "right" : "return tabStop - (position % tabStop);",
    "info" : "ReturnStatement[69720-69758]:ReturnStatement[71057-71095]"
  }, {
    "left" : "return getPrintableCharacters(c).length();",
    "right" : "return getPrintableCharacters(c).length();",
    "info" : "ReturnStatement[69778-69820]:ReturnStatement[71115-71157]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70120-71088]:Block[71457-72425]"
  }, {
    "left" : "StringBuilder sbuff = new StringBuilder();",
    "right" : "StringBuilder sbuff = new StringBuilder();",
    "info" : "VariableDeclarationStatement[70130-70172]:VariableDeclarationStatement[71467-71509]"
  }, {
    "left" : "if (ch >= 32)",
    "right" : "if (ch >= 32)",
    "info" : "IfStatement[70182-71059]:IfStatement[71519-72396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70196-70959]:Block[71533-72296]"
  }, {
    "left" : "if (ch < 127)",
    "right" : "if (ch < 127)",
    "info" : "IfStatement[70210-70949]:IfStatement[71547-72286]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70224-70273]:Block[71561-71610]"
  }, {
    "left" : "sbuff.append(ch);",
    "right" : "sbuff.append(ch);",
    "info" : "ExpressionStatement[70242-70259]:ExpressionStatement[71579-71596]"
  }, {
    "left" : "if (ch == 127)",
    "right" : "if (ch == 127)",
    "info" : "IfStatement[70291-70949]:IfStatement[71628-72286]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70306-70391]:Block[71643-71728]"
  }, {
    "left" : "sbuff.append('^');",
    "right" : "sbuff.append('^');",
    "info" : "ExpressionStatement[70324-70342]:ExpressionStatement[71661-71679]"
  }, {
    "left" : "sbuff.append('?');",
    "right" : "sbuff.append('?');",
    "info" : "ExpressionStatement[70359-70377]:ExpressionStatement[71696-71714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70409-70949]:Block[71746-72286]"
  }, {
    "left" : "sbuff.append('M');",
    "right" : "sbuff.append('M');",
    "info" : "ExpressionStatement[70427-70445]:ExpressionStatement[71764-71782]"
  }, {
    "left" : "sbuff.append('-');",
    "right" : "sbuff.append('-');",
    "info" : "ExpressionStatement[70462-70480]:ExpressionStatement[71799-71817]"
  }, {
    "left" : "if (ch >= (128 + 32))",
    "right" : "if (ch >= (128 + 32))",
    "info" : "IfStatement[70498-70935]:IfStatement[71835-72272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70520-70797]:Block[71857-72134]"
  }, {
    "left" : "if (ch < (128 + 127))",
    "right" : "if (ch < (128 + 127))",
    "info" : "IfStatement[70542-70779]:IfStatement[71879-72116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70564-70644]:Block[71901-71981]"
  }, {
    "left" : "sbuff.append((char) (ch - 128));",
    "right" : "sbuff.append((char) (ch - 128));",
    "info" : "ExpressionStatement[70590-70622]:ExpressionStatement[71927-71959]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70670-70779]:Block[72007-72116]"
  }, {
    "left" : "sbuff.append('^');",
    "right" : "sbuff.append('^');",
    "info" : "ExpressionStatement[70696-70714]:ExpressionStatement[72033-72051]"
  }, {
    "left" : "sbuff.append('?');",
    "right" : "sbuff.append('?');",
    "info" : "ExpressionStatement[70739-70757]:ExpressionStatement[72076-72094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70819-70935]:Block[72156-72272]"
  }, {
    "left" : "sbuff.append('^');",
    "right" : "sbuff.append('^');",
    "info" : "ExpressionStatement[70841-70859]:ExpressionStatement[72178-72196]"
  }, {
    "left" : "sbuff.append((char) (ch - 128 + 64));",
    "right" : "sbuff.append((char) (ch - 128 + 64));",
    "info" : "ExpressionStatement[70880-70917]:ExpressionStatement[72217-72254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70973-71059]:Block[72310-72396]"
  }, {
    "left" : "sbuff.append('^');",
    "right" : "sbuff.append('^');",
    "info" : "ExpressionStatement[70987-71005]:ExpressionStatement[72324-72342]"
  }, {
    "left" : "sbuff.append((char) (ch + 64));",
    "right" : "sbuff.append((char) (ch + 64));",
    "info" : "ExpressionStatement[71018-71049]:ExpressionStatement[72355-72386]"
  }, {
    "left" : "return sbuff;",
    "right" : "return sbuff;",
    "info" : "ReturnStatement[71069-71082]:ReturnStatement[72406-72419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71167-71500]:Block[72663-73015]"
  }, {
    "left" : "char c;",
    "right" : "char c;",
    "info" : "VariableDeclarationStatement[71281-71288]:VariableDeclarationStatement[72777-72784]"
  }, {
    "left" : "Arrays.sort(allowed);",
    "right" : "Arrays.sort(allowed);",
    "info" : "ExpressionStatement[71298-71319]:ExpressionStatement[72794-72815]"
  }, {
    "left" : "while (Arrays.binarySearch(allowed, c = (char) readCharacter()) < 0)",
    "right" : "while (Arrays.binarySearch(allowed, c = (char) readCharacter(checkForAltKeyCombo)) < 0)",
    "info" : "WhileStatement[71372-71475]:WhileStatement[72868-72990]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71441-71475]:Block[72956-72990]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[71485-71494]:ReturnStatement[73000-73009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71792-71839]:Block[73307-73354]"
  }, {
    "left" : "return readLine((String) null);",
    "right" : "return readLine((String) null);",
    "info" : "ReturnStatement[71802-71833]:ReturnStatement[73317-73348]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72075-72119]:Block[73590-73634]"
  }, {
    "left" : "return readLine(null, mask);",
    "right" : "return readLine(null, mask);",
    "info" : "ReturnStatement[72085-72113]:ReturnStatement[73600-73628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72188-72234]:Block[73703-73749]"
  }, {
    "left" : "return readLine(prompt, null);",
    "right" : "return readLine(prompt, null);",
    "info" : "ReturnStatement[72198-72228]:ReturnStatement[73713-73743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72546-72597]:Block[74061-74112]"
  }, {
    "left" : "return consoleKeys.setKeyMap(name);",
    "right" : "return consoleKeys.setKeyMap(name);",
    "info" : "ReturnStatement[72556-72591]:ReturnStatement[74071-74106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72902-72957]:Block[74417-74472]"
  }, {
    "left" : "return consoleKeys.getKeys().getName();",
    "right" : "return consoleKeys.getKeys().getName();",
    "info" : "ReturnStatement[72912-72951]:ReturnStatement[74427-74466]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73411-112839]:Block[74926-114354]"
  }, {
    "left" : "int repeatCount = 0;",
    "right" : "int repeatCount = 0;",
    "info" : "VariableDeclarationStatement[73728-73748]:VariableDeclarationStatement[75243-75263]"
  }, {
    "left" : "this.mask = mask;",
    "right" : "this.mask = mask;",
    "info" : "ExpressionStatement[73871-73888]:ExpressionStatement[75386-75403]"
  }, {
    "left" : "if (prompt != null)",
    "right" : "if (prompt != null)",
    "info" : "IfStatement[73897-74018]:IfStatement[75412-75533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73917-73959]:Block[75432-75474]"
  }, {
    "left" : "setPrompt(prompt);",
    "right" : "setPrompt(prompt);",
    "info" : "ExpressionStatement[73931-73949]:ExpressionStatement[75446-75464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73973-74018]:Block[75488-75533]"
  }, {
    "left" : "prompt = getPrompt();",
    "right" : "prompt = getPrompt();",
    "info" : "ExpressionStatement[73987-74008]:ExpressionStatement[75502-75523]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[74028-112833]:TryStatement[75543-114348]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74032-112554]:Block[75547-114069]"
  }, {
    "left" : "if (!terminal.isSupported())",
    "right" : "if (!terminal.isSupported())",
    "info" : "IfStatement[74046-74136]:IfStatement[75561-75651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74075-74136]:Block[75590-75651]"
  }, {
    "left" : "beforeReadLine(prompt, mask);",
    "right" : "beforeReadLine(prompt, mask);",
    "info" : "ExpressionStatement[74093-74122]:ExpressionStatement[75608-75637]"
  }, {
    "left" : "if (prompt != null && prompt.length() > 0)",
    "right" : "if (prompt != null && prompt.length() > 0)",
    "info" : "IfStatement[74150-74272]:IfStatement[75665-75787]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74193-74272]:Block[75708-75787]"
  }, {
    "left" : "out.write(prompt);",
    "right" : "out.write(prompt);",
    "info" : "ExpressionStatement[74211-74229]:ExpressionStatement[75726-75744]"
  }, {
    "left" : "out.flush();",
    "right" : "out.flush();",
    "info" : "ExpressionStatement[74246-74258]:ExpressionStatement[75761-75773]"
  }, {
    "left" : "if (!terminal.isSupported())",
    "right" : "if (!terminal.isSupported())",
    "info" : "IfStatement[74361-74446]:IfStatement[75876-75961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74390-74446]:Block[75905-75961]"
  }, {
    "left" : "return readLineSimple();",
    "right" : "return readLineSimple();",
    "info" : "ReturnStatement[74408-74432]:ReturnStatement[75923-75947]"
  }, {
    "left" : "if (handleUserInterrupt && (terminal instanceof UnixTerminal))",
    "right" : "if (handleUserInterrupt && (terminal instanceof UnixTerminal))",
    "info" : "IfStatement[74460-74609]:IfStatement[75975-76124]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74523-74609]:Block[76038-76124]"
  }, {
    "left" : "((UnixTerminal) terminal).disableInterruptCharacter();",
    "right" : "((UnixTerminal) terminal).disableInterruptCharacter();",
    "info" : "ExpressionStatement[74541-74595]:ExpressionStatement[76056-76110]"
  }, {
    "left" : "String originalPrompt = this.prompt;",
    "right" : "String originalPrompt = this.prompt;",
    "info" : "VariableDeclarationStatement[74623-74659]:VariableDeclarationStatement[76138-76174]"
  }, {
    "left" : "state = State.NORMAL;",
    "right" : "state = State.NORMAL;",
    "info" : "ExpressionStatement[74673-74694]:ExpressionStatement[76188-76209]"
  }, {
    "left" : "boolean success = true;",
    "right" : "boolean success = true;",
    "info" : "VariableDeclarationStatement[74708-74731]:VariableDeclarationStatement[76223-76246]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder();",
    "right" : "StringBuilder sb = new StringBuilder();",
    "info" : "VariableDeclarationStatement[74745-74784]:VariableDeclarationStatement[76260-76299]"
  }, {
    "left" : "Stack<Character> pushBackChar = new Stack<Character>();",
    "right" : "Stack<Character> pushBackChar = new Stack<Character>();",
    "info" : "VariableDeclarationStatement[74797-74852]:VariableDeclarationStatement[76312-76367]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[74865-112544]:WhileStatement[76380-114059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74878-112544]:Block[76393-114059]"
  }, {
    "left" : "int c = pushBackChar.isEmpty() ? readCharacter() : pushBackChar.pop ();",
    "right" : "int c = pushBackChar.isEmpty() ? readCharacter() : pushBackChar.pop ();",
    "info" : "VariableDeclarationStatement[74896-74967]:VariableDeclarationStatement[76411-76482]"
  }, {
    "left" : "if (c == -1)",
    "right" : "if (c == -1)",
    "info" : "IfStatement[74984-75049]:IfStatement[76499-76564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74997-75049]:Block[76512-76564]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[75019-75031]:ReturnStatement[76534-76546]"
  }, {
    "left" : "sb.appendCodePoint(c);",
    "right" : "sb.appendCodePoint(c);",
    "info" : "ExpressionStatement[75066-75088]:ExpressionStatement[76581-76603]"
  }, {
    "left" : "if (recording)",
    "right" : "if (recording)",
    "info" : "IfStatement[75106-75201]:IfStatement[76621-76716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75121-75201]:Block[76636-76716]"
  }, {
    "left" : "macro += new String(new int[]{c}, 0, 1);",
    "right" : "macro += new String(new int[]{c}, 0, 1);",
    "info" : "ExpressionStatement[75143-75183]:ExpressionStatement[76658-76698]"
  }, {
    "left" : "Object o = getKeys().getBound( sb );",
    "right" : "Object o = getKeys().getBound( sb );",
    "info" : "VariableDeclarationStatement[75219-75255]:VariableDeclarationStatement[76734-76770]"
  }, {
    "left" : "if (!recording && !(o instanceof KeyMap))",
    "right" : "if (!recording && !(o instanceof KeyMap))",
    "info" : "IfStatement[75492-76041]:IfStatement[77007-77556]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75534-76041]:Block[77049-77556]"
  }, {
    "left" : "if (o != Operation.YANK_POP && o != Operation.YANK)",
    "right" : "if (o != Operation.YANK_POP && o != Operation.YANK)",
    "info" : "IfStatement[75556-75681]:IfStatement[77071-77196]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75608-75681]:Block[77123-77196]"
  }, {
    "left" : "killRing.resetLastYank();",
    "right" : "killRing.resetLastYank();",
    "info" : "ExpressionStatement[75634-75659]:ExpressionStatement[77149-77174]"
  }, {
    "left" : "if (o != Operation.KILL_LINE && o != Operation.KILL_WHOLE_LINE\n                        && o != Operation.BACKWARD_KILL_WORD && o != Operation.KILL_WORD\n                        && o != Operation.UNIX_LINE_DISCARD && o != Operation.UNIX_WORD_RUBOUT)",
    "right" : "if (o != Operation.KILL_LINE && o != Operation.KILL_WHOLE_LINE\n                        && o != Operation.BACKWARD_KILL_WORD && o != Operation.KILL_WORD\n                        && o != Operation.UNIX_LINE_DISCARD && o != Operation.UNIX_WORD_RUBOUT)",
    "info" : "IfStatement[75702-76023]:IfStatement[77217-77538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75950-76023]:Block[77465-77538]"
  }, {
    "left" : "killRing.resetLastKill();",
    "right" : "killRing.resetLastKill();",
    "info" : "ExpressionStatement[75976-76001]:ExpressionStatement[77491-77516]"
  }, {
    "left" : "if (o == Operation.DO_LOWERCASE_VERSION)",
    "right" : "if (o == Operation.DO_LOWERCASE_VERSION)",
    "info" : "IfStatement[76059-76288]:IfStatement[77574-77803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76100-76288]:Block[77615-77803]"
  }, {
    "left" : "sb.setLength( sb.length() - 1);",
    "right" : "sb.setLength( sb.length() - 1);",
    "info" : "ExpressionStatement[76122-76153]:ExpressionStatement[77637-77668]"
  }, {
    "left" : "sb.append( Character.toLowerCase( (char) c ));",
    "right" : "sb.append( Character.toLowerCase( (char) c ));",
    "info" : "ExpressionStatement[76174-76220]:ExpressionStatement[77689-77735]"
  }, {
    "left" : "o = getKeys().getBound( sb );",
    "right" : "o = getKeys().getBound( sb );",
    "info" : "ExpressionStatement[76241-76270]:ExpressionStatement[77756-77785]"
  }, {
    "left" : "if ( o instanceof KeyMap)",
    "right" : "if ( o instanceof KeyMap)",
    "info" : "IfStatement[76678-78820]:IfStatement[78193-80335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76705-78820]:Block[78220-80335]"
  }, {
    "left" : "if (c == 27\n                            && pushBackChar.isEmpty()\n                            && in.isNonBlockingEnabled()\n                            && in.peek(escapeTimeout) == -2)",
    "right" : "if (c == 27\n                            && pushBackChar.isEmpty()\n                            && in.isNonBlockingEnabled()\n                            && in.peek(escapeTimeout) == -2)",
    "info" : "IfStatement[77629-78802]:IfStatement[79144-80317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77813-78719]:Block[79328-80234]"
  }, {
    "left" : "Object otherKey = ((KeyMap) o).getAnotherKey();",
    "right" : "Object otherKey = ((KeyMap) o).getAnotherKey();",
    "info" : "VariableDeclarationStatement[77839-77886]:VariableDeclarationStatement[79354-79401]"
  }, {
    "left" : "if (otherKey == null)",
    "right" : "if (otherKey == null)",
    "info" : "IfStatement[77911-78490]:IfStatement[79426-80005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77933-78490]:Block[79448-80005]"
  }, {
    "left" : "otherKey = ((KeyMap) o).getBound(Character.toString((char) c));",
    "right" : "otherKey = ((KeyMap) o).getBound(Character.toString((char) c));",
    "info" : "ExpressionStatement[78401-78464]:ExpressionStatement[79916-79979]"
  }, {
    "left" : "o = otherKey;",
    "right" : "o = otherKey;",
    "info" : "ExpressionStatement[78515-78528]:ExpressionStatement[80030-80043]"
  }, {
    "left" : "if (o == null || o instanceof KeyMap)",
    "right" : "if (o == null || o instanceof KeyMap)",
    "info" : "IfStatement[78553-78656]:IfStatement[80068-80171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78591-78656]:Block[80106-80171]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[78621-78630]:ContinueStatement[80136-80145]"
  }, {
    "left" : "sb.setLength(0);",
    "right" : "sb.setLength(0);",
    "info" : "ExpressionStatement[78681-78697]:ExpressionStatement[80196-80212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78745-78802]:Block[80260-80317]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[78771-78780]:ContinueStatement[80286-80295]"
  }, {
    "left" : "while ( o == null && sb.length() > 0)",
    "right" : "while ( o == null && sb.length() > 0)",
    "info" : "WhileStatement[79719-80272]:WhileStatement[81234-81787]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79758-80272]:Block[81273-81787]"
  }, {
    "left" : "c = sb.charAt( sb.length() - 1 );",
    "right" : "c = sb.charAt( sb.length() - 1 );",
    "info" : "ExpressionStatement[79780-79813]:ExpressionStatement[81295-81328]"
  }, {
    "left" : "sb.setLength( sb.length() - 1 );",
    "right" : "sb.setLength( sb.length() - 1 );",
    "info" : "ExpressionStatement[79834-79866]:ExpressionStatement[81349-81381]"
  }, {
    "left" : "Object o2 = getKeys().getBound( sb );",
    "right" : "Object o2 = getKeys().getBound( sb );",
    "info" : "VariableDeclarationStatement[79887-79924]:VariableDeclarationStatement[81402-81439]"
  }, {
    "left" : "if ( o2 instanceof KeyMap)",
    "right" : "if ( o2 instanceof KeyMap)",
    "info" : "IfStatement[79945-80254]:IfStatement[81460-81769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79973-80254]:Block[81488-81769]"
  }, {
    "left" : "o = ((KeyMap) o2).getAnotherKey();",
    "right" : "o = ((KeyMap) o2).getAnotherKey();",
    "info" : "ExpressionStatement[79999-80033]:ExpressionStatement[81514-81548]"
  }, {
    "left" : "if ( o == null)",
    "right" : "if ( o == null)",
    "info" : "IfStatement[80058-80232]:IfStatement[81573-81747]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80075-80140]:Block[81590-81655]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[80105-80114]:ContinueStatement[81620-81629]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80146-80232]:Block[81661-81747]"
  }, {
    "left" : "pushBackChar.push( (char) c );",
    "right" : "pushBackChar.push( (char) c );",
    "info" : "ExpressionStatement[80176-80206]:ExpressionStatement[81691-81721]"
  }, {
    "left" : "if ( o == null)",
    "right" : "if ( o == null)",
    "info" : "IfStatement[80290-80356]:IfStatement[81805-81871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80307-80356]:Block[81822-81871]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[80329-80338]:ContinueStatement[81844-81853]"
  }, {
    "left" : "Log.trace(\"Binding: \", o);",
    "right" : "Log.trace(\"Binding: \", o);",
    "info" : "ExpressionStatement[80373-80399]:ExpressionStatement[81888-81914]"
  }, {
    "left" : "if (o instanceof String)",
    "right" : "if (o instanceof String)",
    "info" : "IfStatement[80451-80777]:IfStatement[81966-82292]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80476-80777]:Block[81991-82292]"
  }, {
    "left" : "String macro = (String) o;",
    "right" : "String macro = (String) o;",
    "info" : "VariableDeclarationStatement[80498-80524]:VariableDeclarationStatement[82013-82039]"
  }, {
    "left" : "for (int i = 0; i < macro.length(); i++)",
    "right" : "for (int i = 0; i < macro.length(); i++)",
    "info" : "ForStatement[80545-80690]:ForStatement[82060-82205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80586-80690]:Block[82101-82205]"
  }, {
    "left" : "pushBackChar.push(macro.charAt(macro.length() - 1 - i));",
    "right" : "pushBackChar.push(macro.charAt(macro.length() - 1 - i));",
    "info" : "ExpressionStatement[80612-80668]:ExpressionStatement[82127-82183]"
  }, {
    "left" : "sb.setLength( 0 );",
    "right" : "sb.setLength( 0 );",
    "info" : "ExpressionStatement[80711-80729]:ExpressionStatement[82226-82244]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[80750-80759]:ContinueStatement[82265-82274]"
  }, {
    "left" : "if (o instanceof ActionListener)",
    "right" : "if (o instanceof ActionListener)",
    "info" : "IfStatement[80838-81023]:IfStatement[82353-82538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80871-81023]:Block[82386-82538]"
  }, {
    "left" : "((ActionListener) o).actionPerformed(null);",
    "right" : "((ActionListener) o).actionPerformed(null);",
    "info" : "ExpressionStatement[80893-80936]:ExpressionStatement[82408-82451]"
  }, {
    "left" : "sb.setLength( 0 );",
    "right" : "sb.setLength( 0 );",
    "info" : "ExpressionStatement[80957-80975]:ExpressionStatement[82472-82490]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[80996-81005]:ContinueStatement[82511-82520]"
  }, {
    "left" : "if (state == State.SEARCH || state == State.FORWARD_SEARCH)",
    "right" : "if (state == State.SEARCH || state == State.FORWARD_SEARCH)",
    "info" : "IfStatement[81310-85549]:IfStatement[82825-87064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81370-85549]:Block[82885-87064]"
  }, {
    "left" : "int cursorDest = -1;",
    "right" : "int cursorDest = -1;",
    "info" : "VariableDeclarationStatement[81392-81412]:VariableDeclarationStatement[82907-82927]"
  }, {
    "left" : "switch ( ((Operation) o )) {\n                        case ABORT:\n                            state = State.NORMAL;\n                            buf.clear();\n                            buf.buffer.append(searchTerm);\n                            break;\n\n                        case REVERSE_SEARCH_HISTORY:\n                            state = State.SEARCH;\n                            if (searchTerm.length() == 0) {\n                                searchTerm.append(previousSearchTerm);\n                            }\n\n                            if (searchIndex > 0) {\n                                searchIndex = searchBackwards(searchTerm.toString(), searchIndex);\n                            }\n                            break;\n\n                        case FORWARD_SEARCH_HISTORY:\n                            state = State.FORWARD_SEARCH;\n                            if (searchTerm.length() == 0) {\n                                searchTerm.append(previousSearchTerm);\n                            }\n\n                            if (searchIndex > -1 && searchIndex < history.size() - 1) {\n                                searchIndex = searchForwards(searchTerm.toString(), searchIndex);\n                            }\n                            break;\n\n                        case BACKWARD_DELETE_CHAR:\n                            if (searchTerm.length() > 0) {\n                                searchTerm.deleteCharAt(searchTerm.length() - 1);\n                                if (state == State.SEARCH) {\n                                    searchIndex = searchBackwards(searchTerm.toString());\n                                } else {\n                                    searchIndex = searchForwards(searchTerm.toString());\n                                }\n                            }\n                            break;\n\n                        case SELF_INSERT:\n                            searchTerm.appendCodePoint(c);\n                            if (state == State.SEARCH) {\n                                searchIndex = searchBackwards(searchTerm.toString());\n                            } else {\n                                searchIndex = searchForwards(searchTerm.toString());\n                            }\n                            break;\n\n                        default:\n                            // Set buffer and cursor position to the found string.\n                            if (searchIndex != -1) {\n                                history.moveTo(searchIndex);\n                                // set cursor position to the found string\n                                cursorDest = history.current().toString().indexOf(searchTerm.toString());\n                            }\n                            state = State.NORMAL;\n                            break;\n                    }",
    "right" : "switch ( ((Operation) o )) {\n                        case ABORT:\n                            state = State.NORMAL;\n                            buf.clear();\n                            buf.buffer.append(searchTerm);\n                            break;\n\n                        case REVERSE_SEARCH_HISTORY:\n                            state = State.SEARCH;\n                            if (searchTerm.length() == 0) {\n                                searchTerm.append(previousSearchTerm);\n                            }\n\n                            if (searchIndex > 0) {\n                                searchIndex = searchBackwards(searchTerm.toString(), searchIndex);\n                            }\n                            break;\n\n                        case FORWARD_SEARCH_HISTORY:\n                            state = State.FORWARD_SEARCH;\n                            if (searchTerm.length() == 0) {\n                                searchTerm.append(previousSearchTerm);\n                            }\n\n                            if (searchIndex > -1 && searchIndex < history.size() - 1) {\n                                searchIndex = searchForwards(searchTerm.toString(), searchIndex);\n                            }\n                            break;\n\n                        case BACKWARD_DELETE_CHAR:\n                            if (searchTerm.length() > 0) {\n                                searchTerm.deleteCharAt(searchTerm.length() - 1);\n                                if (state == State.SEARCH) {\n                                    searchIndex = searchBackwards(searchTerm.toString());\n                                } else {\n                                    searchIndex = searchForwards(searchTerm.toString());\n                                }\n                            }\n                            break;\n\n                        case SELF_INSERT:\n                            searchTerm.appendCodePoint(c);\n                            if (state == State.SEARCH) {\n                                searchIndex = searchBackwards(searchTerm.toString());\n                            } else {\n                                searchIndex = searchForwards(searchTerm.toString());\n                            }\n                            break;\n\n                        default:\n                            // Set buffer and cursor position to the found string.\n                            if (searchIndex != -1) {\n                                history.moveTo(searchIndex);\n                                // set cursor position to the found string\n                                cursorDest = history.current().toString().indexOf(searchTerm.toString());\n                            }\n                            state = State.NORMAL;\n                            break;\n                    }",
    "info" : "SwitchStatement[81433-84242]:SwitchStatement[82948-85757]"
  }, {
    "left" : "case ABORT:",
    "right" : "case ABORT:",
    "info" : "SwitchCase[81486-81497]:SwitchCase[83001-83012]"
  }, {
    "left" : "state = State.NORMAL;",
    "right" : "state = State.NORMAL;",
    "info" : "ExpressionStatement[81526-81547]:ExpressionStatement[83041-83062]"
  }, {
    "left" : "buf.clear();",
    "right" : "buf.clear();",
    "info" : "ExpressionStatement[81576-81588]:ExpressionStatement[83091-83103]"
  }, {
    "left" : "buf.buffer.append(searchTerm);",
    "right" : "buf.buffer.append(searchTerm);",
    "info" : "ExpressionStatement[81617-81647]:ExpressionStatement[83132-83162]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[81676-81682]:BreakStatement[83191-83197]"
  }, {
    "left" : "case REVERSE_SEARCH_HISTORY:",
    "right" : "case REVERSE_SEARCH_HISTORY:",
    "info" : "SwitchCase[81708-81736]:SwitchCase[83223-83251]"
  }, {
    "left" : "state = State.SEARCH;",
    "right" : "state = State.SEARCH;",
    "info" : "ExpressionStatement[81765-81786]:ExpressionStatement[83280-83301]"
  }, {
    "left" : "if (searchTerm.length() == 0)",
    "right" : "if (searchTerm.length() == 0)",
    "info" : "IfStatement[81815-81947]:IfStatement[83330-83462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81845-81947]:Block[83360-83462]"
  }, {
    "left" : "searchTerm.append(previousSearchTerm);",
    "right" : "searchTerm.append(previousSearchTerm);",
    "info" : "ExpressionStatement[81879-81917]:ExpressionStatement[83394-83432]"
  }, {
    "left" : "if (searchIndex > 0)",
    "right" : "if (searchIndex > 0)",
    "info" : "IfStatement[81977-82128]:IfStatement[83492-83643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81998-82128]:Block[83513-83643]"
  }, {
    "left" : "searchIndex = searchBackwards(searchTerm.toString(), searchIndex);",
    "right" : "searchIndex = searchBackwards(searchTerm.toString(), searchIndex);",
    "info" : "ExpressionStatement[82032-82098]:ExpressionStatement[83547-83613]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[82157-82163]:BreakStatement[83672-83678]"
  }, {
    "left" : "case FORWARD_SEARCH_HISTORY:",
    "right" : "case FORWARD_SEARCH_HISTORY:",
    "info" : "SwitchCase[82189-82217]:SwitchCase[83704-83732]"
  }, {
    "left" : "state = State.FORWARD_SEARCH;",
    "right" : "state = State.FORWARD_SEARCH;",
    "info" : "ExpressionStatement[82246-82275]:ExpressionStatement[83761-83790]"
  }, {
    "left" : "if (searchTerm.length() == 0)",
    "right" : "if (searchTerm.length() == 0)",
    "info" : "IfStatement[82304-82436]:IfStatement[83819-83951]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82334-82436]:Block[83849-83951]"
  }, {
    "left" : "searchTerm.append(previousSearchTerm);",
    "right" : "searchTerm.append(previousSearchTerm);",
    "info" : "ExpressionStatement[82368-82406]:ExpressionStatement[83883-83921]"
  }, {
    "left" : "if (searchIndex > -1 && searchIndex < history.size() - 1)",
    "right" : "if (searchIndex > -1 && searchIndex < history.size() - 1)",
    "info" : "IfStatement[82466-82653]:IfStatement[83981-84168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82524-82653]:Block[84039-84168]"
  }, {
    "left" : "searchIndex = searchForwards(searchTerm.toString(), searchIndex);",
    "right" : "searchIndex = searchForwards(searchTerm.toString(), searchIndex);",
    "info" : "ExpressionStatement[82558-82623]:ExpressionStatement[84073-84138]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[82682-82688]:BreakStatement[84197-84203]"
  }, {
    "left" : "case BACKWARD_DELETE_CHAR:",
    "right" : "case BACKWARD_DELETE_CHAR:",
    "info" : "SwitchCase[82714-82740]:SwitchCase[84229-84255]"
  }, {
    "left" : "if (searchTerm.length() > 0)",
    "right" : "if (searchTerm.length() > 0)",
    "info" : "IfStatement[82769-83226]:IfStatement[84284-84741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82798-83226]:Block[84313-84741]"
  }, {
    "left" : "searchTerm.deleteCharAt(searchTerm.length() - 1);",
    "right" : "searchTerm.deleteCharAt(searchTerm.length() - 1);",
    "info" : "ExpressionStatement[82832-82881]:ExpressionStatement[84347-84396]"
  }, {
    "left" : "if (state == State.SEARCH)",
    "right" : "if (state == State.SEARCH)",
    "info" : "IfStatement[82914-83196]:IfStatement[84429-84711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82941-83066]:Block[84456-84581]"
  }, {
    "left" : "searchIndex = searchBackwards(searchTerm.toString());",
    "right" : "searchIndex = searchBackwards(searchTerm.toString());",
    "info" : "ExpressionStatement[82979-83032]:ExpressionStatement[84494-84547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83072-83196]:Block[84587-84711]"
  }, {
    "left" : "searchIndex = searchForwards(searchTerm.toString());",
    "right" : "searchIndex = searchForwards(searchTerm.toString());",
    "info" : "ExpressionStatement[83110-83162]:ExpressionStatement[84625-84677]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[83255-83261]:BreakStatement[84770-84776]"
  }, {
    "left" : "case SELF_INSERT:",
    "right" : "case SELF_INSERT:",
    "info" : "SwitchCase[83287-83304]:SwitchCase[84802-84819]"
  }, {
    "left" : "searchTerm.appendCodePoint(c);",
    "right" : "searchTerm.appendCodePoint(c);",
    "info" : "ExpressionStatement[83333-83363]:ExpressionStatement[84848-84878]"
  }, {
    "left" : "if (state == State.SEARCH)",
    "right" : "if (state == State.SEARCH)",
    "info" : "IfStatement[83392-83658]:IfStatement[84907-85173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83419-83536]:Block[84934-85051]"
  }, {
    "left" : "searchIndex = searchBackwards(searchTerm.toString());",
    "right" : "searchIndex = searchBackwards(searchTerm.toString());",
    "info" : "ExpressionStatement[83453-83506]:ExpressionStatement[84968-85021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83542-83658]:Block[85057-85173]"
  }, {
    "left" : "searchIndex = searchForwards(searchTerm.toString());",
    "right" : "searchIndex = searchForwards(searchTerm.toString());",
    "info" : "ExpressionStatement[83576-83628]:ExpressionStatement[85091-85143]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[83687-83693]:BreakStatement[85202-85208]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[83719-83727]:SwitchCase[85234-85242]"
  }, {
    "left" : "if (searchIndex != -1)",
    "right" : "if (searchIndex != -1)",
    "info" : "IfStatement[83839-84135]:IfStatement[85354-85650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83862-84135]:Block[85377-85650]"
  }, {
    "left" : "history.moveTo(searchIndex);",
    "right" : "history.moveTo(searchIndex);",
    "info" : "ExpressionStatement[83896-83924]:ExpressionStatement[85411-85439]"
  }, {
    "left" : "cursorDest = history.current().toString().indexOf(searchTerm.toString());",
    "right" : "cursorDest = history.current().toString().indexOf(searchTerm.toString());",
    "info" : "ExpressionStatement[84032-84105]:ExpressionStatement[85547-85620]"
  }, {
    "left" : "state = State.NORMAL;",
    "right" : "state = State.NORMAL;",
    "info" : "ExpressionStatement[84164-84185]:ExpressionStatement[85679-85700]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[84214-84220]:BreakStatement[85729-85735]"
  }, {
    "left" : "if (state == State.SEARCH || state == State.FORWARD_SEARCH)",
    "right" : "if (state == State.SEARCH || state == State.FORWARD_SEARCH)",
    "info" : "IfStatement[84342-85531]:IfStatement[85857-87046]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84402-85366]:Block[85917-86881]"
  }, {
    "left" : "if (searchTerm.length() == 0)",
    "right" : "if (searchTerm.length() == 0)",
    "info" : "IfStatement[84428-85344]:IfStatement[85943-86859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84458-84780]:Block[85973-86295]"
  }, {
    "left" : "if (state == State.SEARCH)",
    "right" : "if (state == State.SEARCH)",
    "info" : "IfStatement[84488-84708]:IfStatement[86003-86223]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84515-84605]:Block[86030-86120]"
  }, {
    "left" : "printSearchStatus(\"\", \"\");",
    "right" : "printSearchStatus(\"\", \"\");",
    "info" : "ExpressionStatement[84549-84575]:ExpressionStatement[86064-86090]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84611-84708]:Block[86126-86223]"
  }, {
    "left" : "printForwardSearchStatus(\"\", \"\");",
    "right" : "printForwardSearchStatus(\"\", \"\");",
    "info" : "ExpressionStatement[84645-84678]:ExpressionStatement[86160-86193]"
  }, {
    "left" : "searchIndex = -1;",
    "right" : "searchIndex = -1;",
    "info" : "ExpressionStatement[84737-84754]:ExpressionStatement[86252-86269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84786-85344]:Block[86301-86859]"
  }, {
    "left" : "if (searchIndex == -1)",
    "right" : "if (searchIndex == -1)",
    "info" : "IfStatement[84816-85318]:IfStatement[86331-86833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84839-84988]:Block[86354-86503]"
  }, {
    "left" : "beep();",
    "right" : "beep();",
    "info" : "ExpressionStatement[84873-84880]:ExpressionStatement[86388-86395]"
  }, {
    "left" : "printSearchStatus(searchTerm.toString(), \"\");",
    "right" : "printSearchStatus(searchTerm.toString(), \"\");",
    "info" : "ExpressionStatement[84913-84958]:ExpressionStatement[86428-86473]"
  }, {
    "left" : "if (state == State.SEARCH)",
    "right" : "if (state == State.SEARCH)",
    "info" : "IfStatement[84994-85318]:IfStatement[86509-86833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85021-85163]:Block[86536-86678]"
  }, {
    "left" : "printSearchStatus(searchTerm.toString(), history.get(searchIndex).toString());",
    "right" : "printSearchStatus(searchTerm.toString(), history.get(searchIndex).toString());",
    "info" : "ExpressionStatement[85055-85133]:ExpressionStatement[86570-86648]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85169-85318]:Block[86684-86833]"
  }, {
    "left" : "printForwardSearchStatus(searchTerm.toString(), history.get(searchIndex).toString());",
    "right" : "printForwardSearchStatus(searchTerm.toString(), history.get(searchIndex).toString());",
    "info" : "ExpressionStatement[85203-85288]:ExpressionStatement[86718-86803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85443-85531]:Block[86958-87046]"
  }, {
    "left" : "restoreLine(originalPrompt, cursorDest);",
    "right" : "restoreLine(originalPrompt, cursorDest);",
    "info" : "ExpressionStatement[85469-85509]:ExpressionStatement[86984-87024]"
  }, {
    "left" : "if (state != State.SEARCH && state != State.FORWARD_SEARCH)",
    "right" : "if (state != State.SEARCH && state != State.FORWARD_SEARCH)",
    "info" : "IfStatement[85566-112392]:IfStatement[87081-113907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85626-112392]:Block[87141-113907]"
  }, {
    "left" : "boolean isArgDigit = false;",
    "right" : "boolean isArgDigit = false;",
    "info" : "VariableDeclarationStatement[85826-85853]:VariableDeclarationStatement[87341-87368]"
  }, {
    "left" : "int count = (repeatCount == 0) ? 1 : repeatCount;",
    "right" : "int count = (repeatCount == 0) ? 1 : repeatCount;",
    "info" : "VariableDeclarationStatement[86123-86172]:VariableDeclarationStatement[87638-87687]"
  }, {
    "left" : "success = true;",
    "right" : "success = true;",
    "info" : "ExpressionStatement[86372-86387]:ExpressionStatement[87887-87902]"
  }, {
    "left" : "if (o instanceof Operation)",
    "right" : "if (o instanceof Operation)",
    "info" : "IfStatement[86409-112374]:IfStatement[87924-113889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86437-112374]:Block[87952-113889]"
  }, {
    "left" : "Operation op = (Operation)o;",
    "right" : "Operation op = (Operation)o;",
    "info" : "VariableDeclarationStatement[86463-86491]:VariableDeclarationStatement[87978-88006]"
  }, {
    "left" : "int     cursorStart = buf.cursor;",
    "right" : "int     cursorStart = buf.cursor;",
    "info" : "VariableDeclarationStatement[86793-86826]:VariableDeclarationStatement[88308-88341]"
  }, {
    "left" : "State   origState   = state;",
    "right" : "State   origState   = state;",
    "info" : "VariableDeclarationStatement[86851-86879]:VariableDeclarationStatement[88366-88394]"
  }, {
    "left" : "if (state == State.VI_CHANGE_TO\n                            || state == State.VI_YANK_TO\n                            || state == State.VI_DELETE_TO)",
    "right" : "if (state == State.VI_CHANGE_TO\n                            || state == State.VI_YANK_TO\n                            || state == State.VI_DELETE_TO)",
    "info" : "IfStatement[87120-87361]:IfStatement[88635-88876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87269-87361]:Block[88784-88876]"
  }, {
    "left" : "op = viDeleteChangeYankToRemap(op);",
    "right" : "op = viDeleteChangeYankToRemap(op);",
    "info" : "ExpressionStatement[87300-87335]:ExpressionStatement[88815-88850]"
  }, {
    "left" : "switch ( op ) {\n                            case COMPLETE: // tab\n                                // There is an annoyance with tab completion in that\n                                // sometimes the user is actually pasting input in that\n                                // has physical tabs in it.  This attempts to look at how\n                                // quickly a character follows the tab, if the character\n                                // follows *immediately*, we assume it is a tab literal.\n                                boolean isTabLiteral = false;\n                                if (copyPasteDetection\n                                    && c == 9\n                                    && (!pushBackChar.isEmpty()\n                                        || (in.isNonBlockingEnabled() && in.peek(escapeTimeout) != -2))) {\n                                    isTabLiteral = true;\n                                }\n\n                                if (! isTabLiteral) {\n                                    success = complete();\n                                }\n                                else {\n                                    putString(sb);\n                                }\n                                break;\n\n                            case POSSIBLE_COMPLETIONS:\n                                printCompletionCandidates();\n                                break;\n\n                            case BEGINNING_OF_LINE:\n                                success = setCursorPosition(0);\n                                break;\n\n                            case YANK:\n                                success = yank();\n                                break;\n\n                            case YANK_POP:\n                                success = yankPop();\n                                break;\n\n                            case KILL_LINE: // CTRL-K\n                                success = killLine();\n                                break;\n\n                            case KILL_WHOLE_LINE:\n                                success = setCursorPosition(0) && killLine();\n                                break;\n\n                            case CLEAR_SCREEN: // CTRL-L\n                                success = clearScreen();\n                                redrawLine();\n                                break;\n\n                            case OVERWRITE_MODE:\n                                buf.setOverTyping(!buf.isOverTyping());\n                                break;\n\n                            case SELF_INSERT:\n                                putString(sb);\n                                break;\n\n                            case ACCEPT_LINE:\n                                return accept();\n\n                            case ABORT:\n                                if (searchTerm == null) {\n                                    abort();\n                                }\n                                break;\n\n                            case INTERRUPT:\n                                if (handleUserInterrupt) {\n                                    println();\n                                    flush();\n                                    String partialLine = buf.buffer.toString();\n                                    buf.clear();\n                                    history.moveToEnd();\n                                    throw new UserInterruptException(partialLine);\n                                }\n                                break;\n\n                            /*\n                             * VI_MOVE_ACCEPT_LINE is the result of an ENTER\n                             * while in move mode. This is the same as a normal\n                             * ACCEPT_LINE, except that we need to enter\n                             * insert mode as well.\n                             */\n                            case VI_MOVE_ACCEPT_LINE:\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                return accept();\n\n                            case BACKWARD_WORD:\n                                success = previousWord();\n                                break;\n\n                            case FORWARD_WORD:\n                                success = nextWord();\n                                break;\n\n                            case PREVIOUS_HISTORY:\n                                success = moveHistory(false);\n                                break;\n\n                            /*\n                             * According to bash/readline move through history\n                             * in \"vi\" mode will move the cursor to the\n                             * start of the line. If there is no previous\n                             * history, then the cursor doesn't move.\n                             */\n                            case VI_PREVIOUS_HISTORY:\n                                success = moveHistory(false, count)\n                                    && setCursorPosition(0);\n                                break;\n\n                            case NEXT_HISTORY:\n                                success = moveHistory(true);\n                                break;\n\n                            /*\n                             * According to bash/readline move through history\n                             * in \"vi\" mode will move the cursor to the\n                             * start of the line. If there is no next history,\n                             * then the cursor doesn't move.\n                             */\n                            case VI_NEXT_HISTORY:\n                                success = moveHistory(true, count)\n                                    && setCursorPosition(0);\n                                break;\n\n                            case BACKWARD_DELETE_CHAR: // backspace\n                                success = backspace();\n                                break;\n\n                            case EXIT_OR_DELETE_CHAR:\n                                if (buf.buffer.length() == 0) {\n                                    return null;\n                                }\n                                success = deleteCurrentCharacter();\n                                break;\n\n                            case DELETE_CHAR: // delete\n                                success = deleteCurrentCharacter();\n                                break;\n\n                            case BACKWARD_CHAR:\n                                success = moveCursor(-(count)) != 0;\n                                break;\n\n                            case FORWARD_CHAR:\n                                success = moveCursor(count) != 0;\n                                break;\n\n                            case UNIX_LINE_DISCARD:\n                                success = resetLine();\n                                break;\n\n                            case UNIX_WORD_RUBOUT:\n                                success = unixWordRubout(count);\n                                break;\n\n                            case BACKWARD_KILL_WORD:\n                                success = deletePreviousWord();\n                                break;\n\n                            case KILL_WORD:\n                                success = deleteNextWord();\n                                break;\n\n                            case BEGINNING_OF_HISTORY:\n                                success = history.moveToFirst();\n                                if (success) {\n                                    setBuffer(history.current());\n                                }\n                                break;\n\n                            case END_OF_HISTORY:\n                                success = history.moveToLast();\n                                if (success) {\n                                    setBuffer(history.current());\n                                }\n                                break;\n\n                            case HISTORY_SEARCH_BACKWARD:\n                                searchTerm = new StringBuffer(buf.upToCursor());\n                                searchIndex = searchBackwards(searchTerm.toString(), history.index(), true);\n\n                                if (searchIndex == -1) {\n                                    beep();\n                                } else {\n                                    // Maintain cursor position while searching.\n                                    success = history.moveTo(searchIndex);\n                                    if (success) {\n                                        setBufferKeepPos(history.current());\n                                    }\n                                }\n                                break;\n\n                            case HISTORY_SEARCH_FORWARD:\n                                searchTerm = new StringBuffer(buf.upToCursor());\n                                int index = history.index() + 1;\n\n                                if (index == history.size()) {\n                                    history.moveToEnd();\n                                    setBufferKeepPos(searchTerm.toString());\n                                } else if (index < history.size()) {\n                                    searchIndex = searchForwards(searchTerm.toString(), index, true);\n                                    if (searchIndex == -1) {\n                                        beep();\n                                    } else {\n                                        // Maintain cursor position while searching.\n                                        success = history.moveTo(searchIndex);\n                                        if (success) {\n                                            setBufferKeepPos(history.current());\n                                        }\n                                    }\n                                }\n                                break;\n\n                            case REVERSE_SEARCH_HISTORY:\n                                if (searchTerm != null) {\n                                    previousSearchTerm = searchTerm.toString();\n                                }\n                                searchTerm = new StringBuffer(buf.buffer);\n                                state = State.SEARCH;\n                                if (searchTerm.length() > 0) {\n                                    searchIndex = searchBackwards(searchTerm.toString());\n                                    if (searchIndex == -1) {\n                                        beep();\n                                    }\n                                    printSearchStatus(searchTerm.toString(),\n                                            searchIndex > -1 ? history.get(searchIndex).toString() : \"\");\n                                } else {\n                                    searchIndex = -1;\n                                    printSearchStatus(\"\", \"\");\n                                }\n                                break;\n\n                            case FORWARD_SEARCH_HISTORY:\n                                if (searchTerm != null) {\n                                    previousSearchTerm = searchTerm.toString();\n                                }\n                                searchTerm = new StringBuffer(buf.buffer);\n                                state = State.FORWARD_SEARCH;\n                                if (searchTerm.length() > 0) {\n                                    searchIndex = searchForwards(searchTerm.toString());\n                                    if (searchIndex == -1) {\n                                        beep();\n                                    }\n                                    printForwardSearchStatus(searchTerm.toString(),\n                                            searchIndex > -1 ? history.get(searchIndex).toString() : \"\");\n                                } else {\n                                    searchIndex = -1;\n                                    printForwardSearchStatus(\"\", \"\");\n                                }\n                                break;\n\n                            case CAPITALIZE_WORD:\n                                success = capitalizeWord();\n                                break;\n\n                            case UPCASE_WORD:\n                                success = upCaseWord();\n                                break;\n\n                            case DOWNCASE_WORD:\n                                success = downCaseWord();\n                                break;\n\n                            case END_OF_LINE:\n                                success = moveToEnd();\n                                break;\n\n                            case TAB_INSERT:\n                                putString( \"\\t\" );\n                                break;\n\n                            case RE_READ_INIT_FILE:\n                                consoleKeys.loadKeys(appName, inputrcUrl);\n                                break;\n\n                            case START_KBD_MACRO:\n                                recording = true;\n                                break;\n\n                            case END_KBD_MACRO:\n                                recording = false;\n                                macro = macro.substring(0, macro.length() - sb.length());\n                                break;\n\n                            case CALL_LAST_KBD_MACRO:\n                                for (int i = 0; i < macro.length(); i++) {\n                                    pushBackChar.push(macro.charAt(macro.length() - 1 - i));\n                                }\n                                sb.setLength( 0 );\n                                break;\n\n                            case VI_EDITING_MODE:\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            case VI_MOVEMENT_MODE:\n                                /*\n                                 * If we are re-entering move mode from an\n                                 * aborted yank-to, delete-to, change-to then\n                                 * don't move the cursor back. The cursor is\n                                 * only move on an expclit entry to movement\n                                 * mode.\n                                 */\n                                if (state == State.NORMAL) {\n                                    moveCursor(-1);\n                                }\n                                consoleKeys.setKeyMap(KeyMap.VI_MOVE);\n                                break;\n\n                            case VI_INSERTION_MODE:\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            case VI_APPEND_MODE:\n                                moveCursor(1);\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            case VI_APPEND_EOL:\n                                success = moveToEnd();\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            /*\n                             * Handler for CTRL-D. Attempts to follow readline\n                             * behavior. If the line is empty, then it is an EOF\n                             * otherwise it is as if the user hit enter.\n                             */\n                            case VI_EOF_MAYBE:\n                                if (buf.buffer.length() == 0) {\n                                    return null;\n                                }\n                                return accept();\n\n                            case TRANSPOSE_CHARS:\n                                success = transposeChars(count);\n                                break;\n\n                            case INSERT_COMMENT:\n                                return insertComment (false);\n\n                            case INSERT_CLOSE_CURLY:\n                                insertClose(\"}\");\n                                break;\n\n                            case INSERT_CLOSE_PAREN:\n                                insertClose(\")\");\n                                break;\n\n                            case INSERT_CLOSE_SQUARE:\n                                insertClose(\"]\");\n                                break;\n\n                            case VI_INSERT_COMMENT:\n                                return insertComment (true);\n\n                            case VI_MATCH:\n                                success = viMatch ();\n                                break;\n\n                            case VI_SEARCH:\n                                int lastChar = viSearch(sb.charAt (0));\n                                if (lastChar != -1) {\n                                    pushBackChar.push((char)lastChar);\n                                }\n                                break;\n\n                            case VI_ARG_DIGIT:\n                                repeatCount = (repeatCount * 10) + sb.charAt(0) - '0';\n                                isArgDigit = true;\n                                break;\n\n                            case VI_BEGNNING_OF_LINE_OR_ARG_DIGIT:\n                                if (repeatCount > 0) {\n                                    repeatCount = (repeatCount * 10) + sb.charAt(0) - '0';\n                                    isArgDigit = true;\n                                }\n                                else {\n                                    success = setCursorPosition(0);\n                                }\n                                break;\n\n                            case VI_FIRST_PRINT:\n                                success = setCursorPosition(0) && viNextWord(1);\n                                break;\n\n                            case VI_PREV_WORD:\n                                success = viPreviousWord(count);\n                                break;\n\n                            case VI_NEXT_WORD:\n                                success = viNextWord(count);\n                                break;\n\n                            case VI_END_WORD:\n                                success = viEndWord(count);\n                                break;\n\n                            case VI_INSERT_BEG:\n                                success = setCursorPosition(0);\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            case VI_RUBOUT:\n                                success = viRubout(count);\n                                break;\n\n                            case VI_DELETE:\n                                success = viDelete(count);\n                                break;\n\n                            case VI_DELETE_TO:\n                                /*\n                                 * This is a weird special case. In vi\n                                 * \"dd\" deletes the current line. So if we\n                                 * get a delete-to, followed by a delete-to,\n                                 * we delete the line.\n                                 */\n                                if (state == State.VI_DELETE_TO) {\n                                    success = setCursorPosition(0) && killLine();\n                                    state = origState = State.NORMAL;\n                                }\n                                else {\n                                    state = State.VI_DELETE_TO;\n                                }\n                                break;\n\n                            case VI_YANK_TO:\n                                // Similar to delete-to, a \"yy\" yanks the whole line.\n                                if (state == State.VI_YANK_TO) {\n                                    yankBuffer = buf.buffer.toString();\n                                    state = origState = State.NORMAL;\n                                }\n                                else {\n                                    state = State.VI_YANK_TO;\n                                }\n                                break;\n\n                            case VI_CHANGE_TO:\n                                if (state == State.VI_CHANGE_TO) {\n                                    success = setCursorPosition(0) && killLine();\n                                    state = origState = State.NORMAL;\n                                    consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                }\n                                else {\n                                    state = State.VI_CHANGE_TO;\n                                }\n                                break;\n                            \n                            case VI_KILL_WHOLE_LINE:\n                                success = setCursorPosition(0) && killLine();\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            case VI_PUT:\n                                success = viPut(count);\n                                break;\n\n                            case VI_CHAR_SEARCH: {\n                                 // ';' and ',' don't need another character. They indicate repeat next or repeat prev.\n                                int searchChar = (c != ';' && c != ',')\n                                    ? (pushBackChar.isEmpty()\n                                        ? readCharacter()\n                                        : pushBackChar.pop ())\n                                    : 0;\n\n                                    success = viCharSearch(count, c, searchChar);\n                                }\n                                break;\n\n                            case VI_CHANGE_CASE:\n                                success = viChangeCase(count);\n                                break;\n\n                            case VI_CHANGE_CHAR:\n                                success = viChangeChar(count,\n                                    pushBackChar.isEmpty()\n                                        ? readCharacter()\n                                        : pushBackChar.pop());\n                                break;\n                            \n                            case VI_DELETE_TO_EOL:\n                                success = viDeleteTo(buf.cursor, buf.buffer.length(), false);\n                                break;\n                                \n                            case VI_CHANGE_TO_EOL:\n                                success = viDeleteTo(buf.cursor, buf.buffer.length(), true);\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            case EMACS_EDITING_MODE:\n                                consoleKeys.setKeyMap(KeyMap.EMACS);\n                                break;\n\n                            case QUIT:\n                                getCursorBuffer().clear();\n                                return accept();\n\n                            default:\n                                break;\n                        }",
    "right" : "switch ( op ) {\n                            case COMPLETE: // tab\n                                // There is an annoyance with tab completion in that\n                                // sometimes the user is actually pasting input in that\n                                // has physical tabs in it.  This attempts to look at how\n                                // quickly a character follows the tab, if the character\n                                // follows *immediately*, we assume it is a tab literal.\n                                boolean isTabLiteral = false;\n                                if (copyPasteDetection\n                                    && c == 9\n                                    && (!pushBackChar.isEmpty()\n                                        || (in.isNonBlockingEnabled() && in.peek(escapeTimeout) != -2))) {\n                                    isTabLiteral = true;\n                                }\n\n                                if (! isTabLiteral) {\n                                    success = complete();\n                                }\n                                else {\n                                    putString(sb);\n                                }\n                                break;\n\n                            case POSSIBLE_COMPLETIONS:\n                                printCompletionCandidates();\n                                break;\n\n                            case BEGINNING_OF_LINE:\n                                success = setCursorPosition(0);\n                                break;\n\n                            case YANK:\n                                success = yank();\n                                break;\n\n                            case YANK_POP:\n                                success = yankPop();\n                                break;\n\n                            case KILL_LINE: // CTRL-K\n                                success = killLine();\n                                break;\n\n                            case KILL_WHOLE_LINE:\n                                success = setCursorPosition(0) && killLine();\n                                break;\n\n                            case CLEAR_SCREEN: // CTRL-L\n                                success = clearScreen();\n                                redrawLine();\n                                break;\n\n                            case OVERWRITE_MODE:\n                                buf.setOverTyping(!buf.isOverTyping());\n                                break;\n\n                            case SELF_INSERT:\n                                putString(sb);\n                                break;\n\n                            case ACCEPT_LINE:\n                                return accept();\n\n                            case ABORT:\n                                if (searchTerm == null) {\n                                    abort();\n                                }\n                                break;\n\n                            case INTERRUPT:\n                                if (handleUserInterrupt) {\n                                    println();\n                                    flush();\n                                    String partialLine = buf.buffer.toString();\n                                    buf.clear();\n                                    history.moveToEnd();\n                                    throw new UserInterruptException(partialLine);\n                                }\n                                break;\n\n                            /*\n                             * VI_MOVE_ACCEPT_LINE is the result of an ENTER\n                             * while in move mode. This is the same as a normal\n                             * ACCEPT_LINE, except that we need to enter\n                             * insert mode as well.\n                             */\n                            case VI_MOVE_ACCEPT_LINE:\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                return accept();\n\n                            case BACKWARD_WORD:\n                                success = previousWord();\n                                break;\n\n                            case FORWARD_WORD:\n                                success = nextWord();\n                                break;\n\n                            case PREVIOUS_HISTORY:\n                                success = moveHistory(false);\n                                break;\n\n                            /*\n                             * According to bash/readline move through history\n                             * in \"vi\" mode will move the cursor to the\n                             * start of the line. If there is no previous\n                             * history, then the cursor doesn't move.\n                             */\n                            case VI_PREVIOUS_HISTORY:\n                                success = moveHistory(false, count)\n                                    && setCursorPosition(0);\n                                break;\n\n                            case NEXT_HISTORY:\n                                success = moveHistory(true);\n                                break;\n\n                            /*\n                             * According to bash/readline move through history\n                             * in \"vi\" mode will move the cursor to the\n                             * start of the line. If there is no next history,\n                             * then the cursor doesn't move.\n                             */\n                            case VI_NEXT_HISTORY:\n                                success = moveHistory(true, count)\n                                    && setCursorPosition(0);\n                                break;\n\n                            case BACKWARD_DELETE_CHAR: // backspace\n                                success = backspace();\n                                break;\n\n                            case EXIT_OR_DELETE_CHAR:\n                                if (buf.buffer.length() == 0) {\n                                    return null;\n                                }\n                                success = deleteCurrentCharacter();\n                                break;\n\n                            case DELETE_CHAR: // delete\n                                success = deleteCurrentCharacter();\n                                break;\n\n                            case BACKWARD_CHAR:\n                                success = moveCursor(-(count)) != 0;\n                                break;\n\n                            case FORWARD_CHAR:\n                                success = moveCursor(count) != 0;\n                                break;\n\n                            case UNIX_LINE_DISCARD:\n                                success = resetLine();\n                                break;\n\n                            case UNIX_WORD_RUBOUT:\n                                success = unixWordRubout(count);\n                                break;\n\n                            case BACKWARD_KILL_WORD:\n                                success = deletePreviousWord();\n                                break;\n\n                            case KILL_WORD:\n                                success = deleteNextWord();\n                                break;\n\n                            case BEGINNING_OF_HISTORY:\n                                success = history.moveToFirst();\n                                if (success) {\n                                    setBuffer(history.current());\n                                }\n                                break;\n\n                            case END_OF_HISTORY:\n                                success = history.moveToLast();\n                                if (success) {\n                                    setBuffer(history.current());\n                                }\n                                break;\n\n                            case HISTORY_SEARCH_BACKWARD:\n                                searchTerm = new StringBuffer(buf.upToCursor());\n                                searchIndex = searchBackwards(searchTerm.toString(), history.index(), true);\n\n                                if (searchIndex == -1) {\n                                    beep();\n                                } else {\n                                    // Maintain cursor position while searching.\n                                    success = history.moveTo(searchIndex);\n                                    if (success) {\n                                        setBufferKeepPos(history.current());\n                                    }\n                                }\n                                break;\n\n                            case HISTORY_SEARCH_FORWARD:\n                                searchTerm = new StringBuffer(buf.upToCursor());\n                                int index = history.index() + 1;\n\n                                if (index == history.size()) {\n                                    history.moveToEnd();\n                                    setBufferKeepPos(searchTerm.toString());\n                                } else if (index < history.size()) {\n                                    searchIndex = searchForwards(searchTerm.toString(), index, true);\n                                    if (searchIndex == -1) {\n                                        beep();\n                                    } else {\n                                        // Maintain cursor position while searching.\n                                        success = history.moveTo(searchIndex);\n                                        if (success) {\n                                            setBufferKeepPos(history.current());\n                                        }\n                                    }\n                                }\n                                break;\n\n                            case REVERSE_SEARCH_HISTORY:\n                                if (searchTerm != null) {\n                                    previousSearchTerm = searchTerm.toString();\n                                }\n                                searchTerm = new StringBuffer(buf.buffer);\n                                state = State.SEARCH;\n                                if (searchTerm.length() > 0) {\n                                    searchIndex = searchBackwards(searchTerm.toString());\n                                    if (searchIndex == -1) {\n                                        beep();\n                                    }\n                                    printSearchStatus(searchTerm.toString(),\n                                            searchIndex > -1 ? history.get(searchIndex).toString() : \"\");\n                                } else {\n                                    searchIndex = -1;\n                                    printSearchStatus(\"\", \"\");\n                                }\n                                break;\n\n                            case FORWARD_SEARCH_HISTORY:\n                                if (searchTerm != null) {\n                                    previousSearchTerm = searchTerm.toString();\n                                }\n                                searchTerm = new StringBuffer(buf.buffer);\n                                state = State.FORWARD_SEARCH;\n                                if (searchTerm.length() > 0) {\n                                    searchIndex = searchForwards(searchTerm.toString());\n                                    if (searchIndex == -1) {\n                                        beep();\n                                    }\n                                    printForwardSearchStatus(searchTerm.toString(),\n                                            searchIndex > -1 ? history.get(searchIndex).toString() : \"\");\n                                } else {\n                                    searchIndex = -1;\n                                    printForwardSearchStatus(\"\", \"\");\n                                }\n                                break;\n\n                            case CAPITALIZE_WORD:\n                                success = capitalizeWord();\n                                break;\n\n                            case UPCASE_WORD:\n                                success = upCaseWord();\n                                break;\n\n                            case DOWNCASE_WORD:\n                                success = downCaseWord();\n                                break;\n\n                            case END_OF_LINE:\n                                success = moveToEnd();\n                                break;\n\n                            case TAB_INSERT:\n                                putString( \"\\t\" );\n                                break;\n\n                            case RE_READ_INIT_FILE:\n                                consoleKeys.loadKeys(appName, inputrcUrl);\n                                break;\n\n                            case START_KBD_MACRO:\n                                recording = true;\n                                break;\n\n                            case END_KBD_MACRO:\n                                recording = false;\n                                macro = macro.substring(0, macro.length() - sb.length());\n                                break;\n\n                            case CALL_LAST_KBD_MACRO:\n                                for (int i = 0; i < macro.length(); i++) {\n                                    pushBackChar.push(macro.charAt(macro.length() - 1 - i));\n                                }\n                                sb.setLength( 0 );\n                                break;\n\n                            case VI_EDITING_MODE:\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            case VI_MOVEMENT_MODE:\n                                /*\n                                 * If we are re-entering move mode from an\n                                 * aborted yank-to, delete-to, change-to then\n                                 * don't move the cursor back. The cursor is\n                                 * only move on an expclit entry to movement\n                                 * mode.\n                                 */\n                                if (state == State.NORMAL) {\n                                    moveCursor(-1);\n                                }\n                                consoleKeys.setKeyMap(KeyMap.VI_MOVE);\n                                break;\n\n                            case VI_INSERTION_MODE:\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            case VI_APPEND_MODE:\n                                moveCursor(1);\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            case VI_APPEND_EOL:\n                                success = moveToEnd();\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            /*\n                             * Handler for CTRL-D. Attempts to follow readline\n                             * behavior. If the line is empty, then it is an EOF\n                             * otherwise it is as if the user hit enter.\n                             */\n                            case VI_EOF_MAYBE:\n                                if (buf.buffer.length() == 0) {\n                                    return null;\n                                }\n                                return accept();\n\n                            case TRANSPOSE_CHARS:\n                                success = transposeChars(count);\n                                break;\n\n                            case INSERT_COMMENT:\n                                return insertComment (false);\n\n                            case INSERT_CLOSE_CURLY:\n                                insertClose(\"}\");\n                                break;\n\n                            case INSERT_CLOSE_PAREN:\n                                insertClose(\")\");\n                                break;\n\n                            case INSERT_CLOSE_SQUARE:\n                                insertClose(\"]\");\n                                break;\n\n                            case VI_INSERT_COMMENT:\n                                return insertComment (true);\n\n                            case VI_MATCH:\n                                success = viMatch ();\n                                break;\n\n                            case VI_SEARCH:\n                                int lastChar = viSearch(sb.charAt (0));\n                                if (lastChar != -1) {\n                                    pushBackChar.push((char)lastChar);\n                                }\n                                break;\n\n                            case VI_ARG_DIGIT:\n                                repeatCount = (repeatCount * 10) + sb.charAt(0) - '0';\n                                isArgDigit = true;\n                                break;\n\n                            case VI_BEGNNING_OF_LINE_OR_ARG_DIGIT:\n                                if (repeatCount > 0) {\n                                    repeatCount = (repeatCount * 10) + sb.charAt(0) - '0';\n                                    isArgDigit = true;\n                                }\n                                else {\n                                    success = setCursorPosition(0);\n                                }\n                                break;\n\n                            case VI_FIRST_PRINT:\n                                success = setCursorPosition(0) && viNextWord(1);\n                                break;\n\n                            case VI_PREV_WORD:\n                                success = viPreviousWord(count);\n                                break;\n\n                            case VI_NEXT_WORD:\n                                success = viNextWord(count);\n                                break;\n\n                            case VI_END_WORD:\n                                success = viEndWord(count);\n                                break;\n\n                            case VI_INSERT_BEG:\n                                success = setCursorPosition(0);\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            case VI_RUBOUT:\n                                success = viRubout(count);\n                                break;\n\n                            case VI_DELETE:\n                                success = viDelete(count);\n                                break;\n\n                            case VI_DELETE_TO:\n                                /*\n                                 * This is a weird special case. In vi\n                                 * \"dd\" deletes the current line. So if we\n                                 * get a delete-to, followed by a delete-to,\n                                 * we delete the line.\n                                 */\n                                if (state == State.VI_DELETE_TO) {\n                                    success = setCursorPosition(0) && killLine();\n                                    state = origState = State.NORMAL;\n                                }\n                                else {\n                                    state = State.VI_DELETE_TO;\n                                }\n                                break;\n\n                            case VI_YANK_TO:\n                                // Similar to delete-to, a \"yy\" yanks the whole line.\n                                if (state == State.VI_YANK_TO) {\n                                    yankBuffer = buf.buffer.toString();\n                                    state = origState = State.NORMAL;\n                                }\n                                else {\n                                    state = State.VI_YANK_TO;\n                                }\n                                break;\n\n                            case VI_CHANGE_TO:\n                                if (state == State.VI_CHANGE_TO) {\n                                    success = setCursorPosition(0) && killLine();\n                                    state = origState = State.NORMAL;\n                                    consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                }\n                                else {\n                                    state = State.VI_CHANGE_TO;\n                                }\n                                break;\n                            \n                            case VI_KILL_WHOLE_LINE:\n                                success = setCursorPosition(0) && killLine();\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            case VI_PUT:\n                                success = viPut(count);\n                                break;\n\n                            case VI_CHAR_SEARCH: {\n                                 // ';' and ',' don't need another character. They indicate repeat next or repeat prev.\n                                int searchChar = (c != ';' && c != ',')\n                                    ? (pushBackChar.isEmpty()\n                                        ? readCharacter()\n                                        : pushBackChar.pop ())\n                                    : 0;\n\n                                    success = viCharSearch(count, c, searchChar);\n                                }\n                                break;\n\n                            case VI_CHANGE_CASE:\n                                success = viChangeCase(count);\n                                break;\n\n                            case VI_CHANGE_CHAR:\n                                success = viChangeChar(count,\n                                    pushBackChar.isEmpty()\n                                        ? readCharacter()\n                                        : pushBackChar.pop());\n                                break;\n                            \n                            case VI_DELETE_TO_EOL:\n                                success = viDeleteTo(buf.cursor, buf.buffer.length(), false);\n                                break;\n                                \n                            case VI_CHANGE_TO_EOL:\n                                success = viDeleteTo(buf.cursor, buf.buffer.length(), true);\n                                consoleKeys.setKeyMap(KeyMap.VI_INSERT);\n                                break;\n\n                            case EMACS_EDITING_MODE:\n                                consoleKeys.setKeyMap(KeyMap.EMACS);\n                                break;\n\n                            case QUIT:\n                                getCursorBuffer().clear();\n                                return accept();\n\n                            default:\n                                break;\n                        }",
    "info" : "SwitchStatement[87387-110495]:SwitchStatement[88902-112010]"
  }, {
    "left" : "case COMPLETE:",
    "right" : "case COMPLETE:",
    "info" : "SwitchCase[87431-87445]:SwitchCase[88946-88960]"
  }, {
    "left" : "boolean isTabLiteral = false;",
    "right" : "boolean isTabLiteral = false;",
    "info" : "VariableDeclarationStatement[87926-87955]:VariableDeclarationStatement[89441-89470]"
  }, {
    "left" : "if (copyPasteDetection\n                                    && c == 9\n                                    && (!pushBackChar.isEmpty()\n                                        || (in.isNonBlockingEnabled() && in.peek(escapeTimeout) != -2)))",
    "right" : "if (copyPasteDetection\n                                    && c == 9\n                                    && (!pushBackChar.isEmpty()\n                                        || (in.isNonBlockingEnabled() && in.peek(escapeTimeout) != -2)))",
    "info" : "IfStatement[87988-88318]:IfStatement[89503-89833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88226-88318]:Block[89741-89833]"
  }, {
    "left" : "isTabLiteral = true;",
    "right" : "isTabLiteral = true;",
    "info" : "ExpressionStatement[88264-88284]:ExpressionStatement[89779-89799]"
  }, {
    "left" : "if (! isTabLiteral)",
    "right" : "if (! isTabLiteral)",
    "info" : "IfStatement[88352-88589]:IfStatement[89867-90104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88372-88465]:Block[89887-89980]"
  }, {
    "left" : "success = complete();",
    "right" : "success = complete();",
    "info" : "ExpressionStatement[88410-88431]:ExpressionStatement[89925-89946]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88503-88589]:Block[90018-90104]"
  }, {
    "left" : "putString(sb);",
    "right" : "putString(sb);",
    "info" : "ExpressionStatement[88541-88555]:ExpressionStatement[90056-90070]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[88622-88628]:BreakStatement[90137-90143]"
  }, {
    "left" : "case POSSIBLE_COMPLETIONS:",
    "right" : "case POSSIBLE_COMPLETIONS:",
    "info" : "SwitchCase[88658-88684]:SwitchCase[90173-90199]"
  }, {
    "left" : "printCompletionCandidates();",
    "right" : "printCompletionCandidates();",
    "info" : "ExpressionStatement[88717-88745]:ExpressionStatement[90232-90260]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[88778-88784]:BreakStatement[90293-90299]"
  }, {
    "left" : "case BEGINNING_OF_LINE:",
    "right" : "case BEGINNING_OF_LINE:",
    "info" : "SwitchCase[88814-88837]:SwitchCase[90329-90352]"
  }, {
    "left" : "success = setCursorPosition(0);",
    "right" : "success = setCursorPosition(0);",
    "info" : "ExpressionStatement[88870-88901]:ExpressionStatement[90385-90416]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[88934-88940]:BreakStatement[90449-90455]"
  }, {
    "left" : "case YANK:",
    "right" : "case YANK:",
    "info" : "SwitchCase[88970-88980]:SwitchCase[90485-90495]"
  }, {
    "left" : "success = yank();",
    "right" : "success = yank();",
    "info" : "ExpressionStatement[89013-89030]:ExpressionStatement[90528-90545]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[89063-89069]:BreakStatement[90578-90584]"
  }, {
    "left" : "case YANK_POP:",
    "right" : "case YANK_POP:",
    "info" : "SwitchCase[89099-89113]:SwitchCase[90614-90628]"
  }, {
    "left" : "success = yankPop();",
    "right" : "success = yankPop();",
    "info" : "ExpressionStatement[89146-89166]:ExpressionStatement[90661-90681]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[89199-89205]:BreakStatement[90714-90720]"
  }, {
    "left" : "case KILL_LINE:",
    "right" : "case KILL_LINE:",
    "info" : "SwitchCase[89235-89250]:SwitchCase[90750-90765]"
  }, {
    "left" : "success = killLine();",
    "right" : "success = killLine();",
    "info" : "ExpressionStatement[89293-89314]:ExpressionStatement[90808-90829]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[89347-89353]:BreakStatement[90862-90868]"
  }, {
    "left" : "case KILL_WHOLE_LINE:",
    "right" : "case KILL_WHOLE_LINE:",
    "info" : "SwitchCase[89383-89404]:SwitchCase[90898-90919]"
  }, {
    "left" : "success = setCursorPosition(0) && killLine();",
    "right" : "success = setCursorPosition(0) && killLine();",
    "info" : "ExpressionStatement[89437-89482]:ExpressionStatement[90952-90997]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[89515-89521]:BreakStatement[91030-91036]"
  }, {
    "left" : "case CLEAR_SCREEN:",
    "right" : "case CLEAR_SCREEN:",
    "info" : "SwitchCase[89551-89569]:SwitchCase[91066-91084]"
  }, {
    "left" : "success = clearScreen();",
    "right" : "success = clearScreen();",
    "info" : "ExpressionStatement[89612-89636]:ExpressionStatement[91127-91151]"
  }, {
    "left" : "redrawLine();",
    "right" : "redrawLine();",
    "info" : "ExpressionStatement[89669-89682]:ExpressionStatement[91184-91197]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[89715-89721]:BreakStatement[91230-91236]"
  }, {
    "left" : "case OVERWRITE_MODE:",
    "right" : "case OVERWRITE_MODE:",
    "info" : "SwitchCase[89751-89771]:SwitchCase[91266-91286]"
  }, {
    "left" : "buf.setOverTyping(!buf.isOverTyping());",
    "right" : "buf.setOverTyping(!buf.isOverTyping());",
    "info" : "ExpressionStatement[89804-89843]:ExpressionStatement[91319-91358]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[89876-89882]:BreakStatement[91391-91397]"
  }, {
    "left" : "case SELF_INSERT:",
    "right" : "case SELF_INSERT:",
    "info" : "SwitchCase[89912-89929]:SwitchCase[91427-91444]"
  }, {
    "left" : "putString(sb);",
    "right" : "putString(sb);",
    "info" : "ExpressionStatement[89962-89976]:ExpressionStatement[91477-91491]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[90009-90015]:BreakStatement[91524-91530]"
  }, {
    "left" : "case ACCEPT_LINE:",
    "right" : "case ACCEPT_LINE:",
    "info" : "SwitchCase[90045-90062]:SwitchCase[91560-91577]"
  }, {
    "left" : "return accept();",
    "right" : "return accept();",
    "info" : "ReturnStatement[90095-90111]:ReturnStatement[91610-91626]"
  }, {
    "left" : "case ABORT:",
    "right" : "case ABORT:",
    "info" : "SwitchCase[90141-90152]:SwitchCase[91656-91667]"
  }, {
    "left" : "if (searchTerm == null)",
    "right" : "if (searchTerm == null)",
    "info" : "IfStatement[90185-90289]:IfStatement[91700-91804]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90209-90289]:Block[91724-91804]"
  }, {
    "left" : "abort();",
    "right" : "abort();",
    "info" : "ExpressionStatement[90247-90255]:ExpressionStatement[91762-91770]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[90322-90328]:BreakStatement[91837-91843]"
  }, {
    "left" : "case INTERRUPT:",
    "right" : "case INTERRUPT:",
    "info" : "SwitchCase[90358-90373]:SwitchCase[91873-91888]"
  }, {
    "left" : "if (handleUserInterrupt)",
    "right" : "if (handleUserInterrupt)",
    "info" : "IfStatement[90406-90827]:IfStatement[91921-92342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90431-90827]:Block[91946-92342]"
  }, {
    "left" : "println();",
    "right" : "println();",
    "info" : "ExpressionStatement[90469-90479]:ExpressionStatement[91984-91994]"
  }, {
    "left" : "flush();",
    "right" : "flush();",
    "info" : "ExpressionStatement[90516-90524]:ExpressionStatement[92031-92039]"
  }, {
    "left" : "String partialLine = buf.buffer.toString();",
    "right" : "String partialLine = buf.buffer.toString();",
    "info" : "VariableDeclarationStatement[90561-90604]:VariableDeclarationStatement[92076-92119]"
  }, {
    "left" : "buf.clear();",
    "right" : "buf.clear();",
    "info" : "ExpressionStatement[90641-90653]:ExpressionStatement[92156-92168]"
  }, {
    "left" : "history.moveToEnd();",
    "right" : "history.moveToEnd();",
    "info" : "ExpressionStatement[90690-90710]:ExpressionStatement[92205-92225]"
  }, {
    "left" : "throw new UserInterruptException(partialLine);",
    "right" : "throw new UserInterruptException(partialLine);",
    "info" : "ThrowStatement[90747-90793]:ThrowStatement[92262-92308]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[90860-90866]:BreakStatement[92375-92381]"
  }, {
    "left" : "case VI_MOVE_ACCEPT_LINE:",
    "right" : "case VI_MOVE_ACCEPT_LINE:",
    "info" : "SwitchCase[91241-91266]:SwitchCase[92756-92781]"
  }, {
    "left" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "right" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "info" : "ExpressionStatement[91299-91339]:ExpressionStatement[92814-92854]"
  }, {
    "left" : "return accept();",
    "right" : "return accept();",
    "info" : "ReturnStatement[91372-91388]:ReturnStatement[92887-92903]"
  }, {
    "left" : "case BACKWARD_WORD:",
    "right" : "case BACKWARD_WORD:",
    "info" : "SwitchCase[91418-91437]:SwitchCase[92933-92952]"
  }, {
    "left" : "success = previousWord();",
    "right" : "success = previousWord();",
    "info" : "ExpressionStatement[91470-91495]:ExpressionStatement[92985-93010]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[91528-91534]:BreakStatement[93043-93049]"
  }, {
    "left" : "case FORWARD_WORD:",
    "right" : "case FORWARD_WORD:",
    "info" : "SwitchCase[91564-91582]:SwitchCase[93079-93097]"
  }, {
    "left" : "success = nextWord();",
    "right" : "success = nextWord();",
    "info" : "ExpressionStatement[91615-91636]:ExpressionStatement[93130-93151]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[91669-91675]:BreakStatement[93184-93190]"
  }, {
    "left" : "case PREVIOUS_HISTORY:",
    "right" : "case PREVIOUS_HISTORY:",
    "info" : "SwitchCase[91705-91727]:SwitchCase[93220-93242]"
  }, {
    "left" : "success = moveHistory(false);",
    "right" : "success = moveHistory(false);",
    "info" : "ExpressionStatement[91760-91789]:ExpressionStatement[93275-93304]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[91822-91828]:BreakStatement[93337-93343]"
  }, {
    "left" : "case VI_PREVIOUS_HISTORY:",
    "right" : "case VI_PREVIOUS_HISTORY:",
    "info" : "SwitchCase[92216-92241]:SwitchCase[93731-93756]"
  }, {
    "left" : "success = moveHistory(false, count)\n                                    && setCursorPosition(0);",
    "right" : "success = moveHistory(false, count)\n                                    && setCursorPosition(0);",
    "info" : "ExpressionStatement[92274-92370]:ExpressionStatement[93789-93885]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[92403-92409]:BreakStatement[93918-93924]"
  }, {
    "left" : "case NEXT_HISTORY:",
    "right" : "case NEXT_HISTORY:",
    "info" : "SwitchCase[92439-92457]:SwitchCase[93954-93972]"
  }, {
    "left" : "success = moveHistory(true);",
    "right" : "success = moveHistory(true);",
    "info" : "ExpressionStatement[92490-92518]:ExpressionStatement[94005-94033]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[92551-92557]:BreakStatement[94066-94072]"
  }, {
    "left" : "case VI_NEXT_HISTORY:",
    "right" : "case VI_NEXT_HISTORY:",
    "info" : "SwitchCase[92941-92962]:SwitchCase[94456-94477]"
  }, {
    "left" : "success = moveHistory(true, count)\n                                    && setCursorPosition(0);",
    "right" : "success = moveHistory(true, count)\n                                    && setCursorPosition(0);",
    "info" : "ExpressionStatement[92995-93090]:ExpressionStatement[94510-94605]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[93123-93129]:BreakStatement[94638-94644]"
  }, {
    "left" : "case BACKWARD_DELETE_CHAR:",
    "right" : "case BACKWARD_DELETE_CHAR:",
    "info" : "SwitchCase[93159-93185]:SwitchCase[94674-94700]"
  }, {
    "left" : "success = backspace();",
    "right" : "success = backspace();",
    "info" : "ExpressionStatement[93231-93253]:ExpressionStatement[94746-94768]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[93286-93292]:BreakStatement[94801-94807]"
  }, {
    "left" : "case EXIT_OR_DELETE_CHAR:",
    "right" : "case EXIT_OR_DELETE_CHAR:",
    "info" : "SwitchCase[93322-93347]:SwitchCase[94837-94862]"
  }, {
    "left" : "if (buf.buffer.length() == 0)",
    "right" : "if (buf.buffer.length() == 0)",
    "info" : "IfStatement[93380-93494]:IfStatement[94895-95009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93410-93494]:Block[94925-95009]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[93448-93460]:ReturnStatement[94963-94975]"
  }, {
    "left" : "success = deleteCurrentCharacter();",
    "right" : "success = deleteCurrentCharacter();",
    "info" : "ExpressionStatement[93527-93562]:ExpressionStatement[95042-95077]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[93595-93601]:BreakStatement[95110-95116]"
  }, {
    "left" : "case DELETE_CHAR:",
    "right" : "case DELETE_CHAR:",
    "info" : "SwitchCase[93631-93648]:SwitchCase[95146-95163]"
  }, {
    "left" : "success = deleteCurrentCharacter();",
    "right" : "success = deleteCurrentCharacter();",
    "info" : "ExpressionStatement[93691-93726]:ExpressionStatement[95206-95241]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[93759-93765]:BreakStatement[95274-95280]"
  }, {
    "left" : "case BACKWARD_CHAR:",
    "right" : "case BACKWARD_CHAR:",
    "info" : "SwitchCase[93795-93814]:SwitchCase[95310-95329]"
  }, {
    "left" : "success = moveCursor(-(count)) != 0;",
    "right" : "success = moveCursor(-(count)) != 0;",
    "info" : "ExpressionStatement[93847-93883]:ExpressionStatement[95362-95398]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[93916-93922]:BreakStatement[95431-95437]"
  }, {
    "left" : "case FORWARD_CHAR:",
    "right" : "case FORWARD_CHAR:",
    "info" : "SwitchCase[93952-93970]:SwitchCase[95467-95485]"
  }, {
    "left" : "success = moveCursor(count) != 0;",
    "right" : "success = moveCursor(count) != 0;",
    "info" : "ExpressionStatement[94003-94036]:ExpressionStatement[95518-95551]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[94069-94075]:BreakStatement[95584-95590]"
  }, {
    "left" : "case UNIX_LINE_DISCARD:",
    "right" : "case UNIX_LINE_DISCARD:",
    "info" : "SwitchCase[94105-94128]:SwitchCase[95620-95643]"
  }, {
    "left" : "success = resetLine();",
    "right" : "success = resetLine();",
    "info" : "ExpressionStatement[94161-94183]:ExpressionStatement[95676-95698]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[94216-94222]:BreakStatement[95731-95737]"
  }, {
    "left" : "case UNIX_WORD_RUBOUT:",
    "right" : "case UNIX_WORD_RUBOUT:",
    "info" : "SwitchCase[94252-94274]:SwitchCase[95767-95789]"
  }, {
    "left" : "success = unixWordRubout(count);",
    "right" : "success = unixWordRubout(count);",
    "info" : "ExpressionStatement[94307-94339]:ExpressionStatement[95822-95854]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[94372-94378]:BreakStatement[95887-95893]"
  }, {
    "left" : "case BACKWARD_KILL_WORD:",
    "right" : "case BACKWARD_KILL_WORD:",
    "info" : "SwitchCase[94408-94432]:SwitchCase[95923-95947]"
  }, {
    "left" : "success = deletePreviousWord();",
    "right" : "success = deletePreviousWord();",
    "info" : "ExpressionStatement[94465-94496]:ExpressionStatement[95980-96011]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[94529-94535]:BreakStatement[96044-96050]"
  }, {
    "left" : "case KILL_WORD:",
    "right" : "case KILL_WORD:",
    "info" : "SwitchCase[94565-94580]:SwitchCase[96080-96095]"
  }, {
    "left" : "success = deleteNextWord();",
    "right" : "success = deleteNextWord();",
    "info" : "ExpressionStatement[94613-94640]:ExpressionStatement[96128-96155]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[94673-94679]:BreakStatement[96188-96194]"
  }, {
    "left" : "case BEGINNING_OF_HISTORY:",
    "right" : "case BEGINNING_OF_HISTORY:",
    "info" : "SwitchCase[94709-94735]:SwitchCase[96224-96250]"
  }, {
    "left" : "success = history.moveToFirst();",
    "right" : "success = history.moveToFirst();",
    "info" : "ExpressionStatement[94768-94800]:ExpressionStatement[96283-96315]"
  }, {
    "left" : "if (success)",
    "right" : "if (success)",
    "info" : "IfStatement[94833-94947]:IfStatement[96348-96462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[94846-94947]:Block[96361-96462]"
  }, {
    "left" : "setBuffer(history.current());",
    "right" : "setBuffer(history.current());",
    "info" : "ExpressionStatement[94884-94913]:ExpressionStatement[96399-96428]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[94980-94986]:BreakStatement[96495-96501]"
  }, {
    "left" : "case END_OF_HISTORY:",
    "right" : "case END_OF_HISTORY:",
    "info" : "SwitchCase[95016-95036]:SwitchCase[96531-96551]"
  }, {
    "left" : "success = history.moveToLast();",
    "right" : "success = history.moveToLast();",
    "info" : "ExpressionStatement[95069-95100]:ExpressionStatement[96584-96615]"
  }, {
    "left" : "if (success)",
    "right" : "if (success)",
    "info" : "IfStatement[95133-95247]:IfStatement[96648-96762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95146-95247]:Block[96661-96762]"
  }, {
    "left" : "setBuffer(history.current());",
    "right" : "setBuffer(history.current());",
    "info" : "ExpressionStatement[95184-95213]:ExpressionStatement[96699-96728]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[95280-95286]:BreakStatement[96795-96801]"
  }, {
    "left" : "case HISTORY_SEARCH_BACKWARD:",
    "right" : "case HISTORY_SEARCH_BACKWARD:",
    "info" : "SwitchCase[95316-95345]:SwitchCase[96831-96860]"
  }, {
    "left" : "searchTerm = new StringBuffer(buf.upToCursor());",
    "right" : "searchTerm = new StringBuffer(buf.upToCursor());",
    "info" : "ExpressionStatement[95378-95426]:ExpressionStatement[96893-96941]"
  }, {
    "left" : "searchIndex = searchBackwards(searchTerm.toString(), history.index(), true);",
    "right" : "searchIndex = searchBackwards(searchTerm.toString(), history.index(), true);",
    "info" : "ExpressionStatement[95459-95535]:ExpressionStatement[96974-97050]"
  }, {
    "left" : "if (searchIndex == -1)",
    "right" : "if (searchIndex == -1)",
    "info" : "IfStatement[95569-96034]:IfStatement[97084-97549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95592-95671]:Block[97107-97186]"
  }, {
    "left" : "beep();",
    "right" : "beep();",
    "info" : "ExpressionStatement[95630-95637]:ExpressionStatement[97145-97152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95677-96034]:Block[97192-97549]"
  }, {
    "left" : "success = history.moveTo(searchIndex);",
    "right" : "success = history.moveTo(searchIndex);",
    "info" : "ExpressionStatement[95796-95834]:ExpressionStatement[97311-97349]"
  }, {
    "left" : "if (success)",
    "right" : "if (success)",
    "info" : "IfStatement[95871-96000]:IfStatement[97386-97515]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[95884-96000]:Block[97399-97515]"
  }, {
    "left" : "setBufferKeepPos(history.current());",
    "right" : "setBufferKeepPos(history.current());",
    "info" : "ExpressionStatement[95926-95962]:ExpressionStatement[97441-97477]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[96067-96073]:BreakStatement[97582-97588]"
  }, {
    "left" : "case HISTORY_SEARCH_FORWARD:",
    "right" : "case HISTORY_SEARCH_FORWARD:",
    "info" : "SwitchCase[96103-96131]:SwitchCase[97618-97646]"
  }, {
    "left" : "searchTerm = new StringBuffer(buf.upToCursor());",
    "right" : "searchTerm = new StringBuffer(buf.upToCursor());",
    "info" : "ExpressionStatement[96164-96212]:ExpressionStatement[97679-97727]"
  }, {
    "left" : "int index = history.index() + 1;",
    "right" : "int index = history.index() + 1;",
    "info" : "VariableDeclarationStatement[96245-96277]:VariableDeclarationStatement[97760-97792]"
  }, {
    "left" : "if (index == history.size())",
    "right" : "if (index == history.size())",
    "info" : "IfStatement[96311-97214]:IfStatement[97826-98729]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96340-96509]:Block[97855-98024]"
  }, {
    "left" : "history.moveToEnd();",
    "right" : "history.moveToEnd();",
    "info" : "ExpressionStatement[96378-96398]:ExpressionStatement[97893-97913]"
  }, {
    "left" : "setBufferKeepPos(searchTerm.toString());",
    "right" : "setBufferKeepPos(searchTerm.toString());",
    "info" : "ExpressionStatement[96435-96475]:ExpressionStatement[97950-97990]"
  }, {
    "left" : "if (index < history.size())",
    "right" : "if (index < history.size())",
    "info" : "IfStatement[96515-97214]:IfStatement[98030-98729]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96543-97214]:Block[98058-98729]"
  }, {
    "left" : "searchIndex = searchForwards(searchTerm.toString(), index, true);",
    "right" : "searchIndex = searchForwards(searchTerm.toString(), index, true);",
    "info" : "ExpressionStatement[96581-96646]:ExpressionStatement[98096-98161]"
  }, {
    "left" : "if (searchIndex == -1)",
    "right" : "if (searchIndex == -1)",
    "info" : "IfStatement[96683-97180]:IfStatement[98198-98695]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96706-96793]:Block[98221-98308]"
  }, {
    "left" : "beep();",
    "right" : "beep();",
    "info" : "ExpressionStatement[96748-96755]:ExpressionStatement[98263-98270]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[96799-97180]:Block[98314-98695]"
  }, {
    "left" : "success = history.moveTo(searchIndex);",
    "right" : "success = history.moveTo(searchIndex);",
    "info" : "ExpressionStatement[96926-96964]:ExpressionStatement[98441-98479]"
  }, {
    "left" : "if (success)",
    "right" : "if (success)",
    "info" : "IfStatement[97005-97142]:IfStatement[98520-98657]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97018-97142]:Block[98533-98657]"
  }, {
    "left" : "setBufferKeepPos(history.current());",
    "right" : "setBufferKeepPos(history.current());",
    "info" : "ExpressionStatement[97064-97100]:ExpressionStatement[98579-98615]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[97247-97253]:BreakStatement[98762-98768]"
  }, {
    "left" : "case REVERSE_SEARCH_HISTORY:",
    "right" : "case REVERSE_SEARCH_HISTORY:",
    "info" : "SwitchCase[97283-97311]:SwitchCase[98798-98826]"
  }, {
    "left" : "if (searchTerm != null)",
    "right" : "if (searchTerm != null)",
    "info" : "IfStatement[97344-97483]:IfStatement[98859-98998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97368-97483]:Block[98883-98998]"
  }, {
    "left" : "previousSearchTerm = searchTerm.toString();",
    "right" : "previousSearchTerm = searchTerm.toString();",
    "info" : "ExpressionStatement[97406-97449]:ExpressionStatement[98921-98964]"
  }, {
    "left" : "searchTerm = new StringBuffer(buf.buffer);",
    "right" : "searchTerm = new StringBuffer(buf.buffer);",
    "info" : "ExpressionStatement[97516-97558]:ExpressionStatement[99031-99073]"
  }, {
    "left" : "state = State.SEARCH;",
    "right" : "state = State.SEARCH;",
    "info" : "ExpressionStatement[97591-97612]:ExpressionStatement[99106-99127]"
  }, {
    "left" : "if (searchTerm.length() > 0)",
    "right" : "if (searchTerm.length() > 0)",
    "info" : "IfStatement[97645-98287]:IfStatement[99160-99802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97674-98129]:Block[99189-99644]"
  }, {
    "left" : "searchIndex = searchBackwards(searchTerm.toString());",
    "right" : "searchIndex = searchBackwards(searchTerm.toString());",
    "info" : "ExpressionStatement[97712-97765]:ExpressionStatement[99227-99280]"
  }, {
    "left" : "if (searchIndex == -1)",
    "right" : "if (searchIndex == -1)",
    "info" : "IfStatement[97802-97912]:IfStatement[99317-99427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97825-97912]:Block[99340-99427]"
  }, {
    "left" : "beep();",
    "right" : "beep();",
    "info" : "ExpressionStatement[97867-97874]:ExpressionStatement[99382-99389]"
  }, {
    "left" : "printSearchStatus(searchTerm.toString(),\n                                            searchIndex > -1 ? history.get(searchIndex).toString() : \"\");",
    "right" : "printSearchStatus(searchTerm.toString(),\n                                            searchIndex > -1 ? history.get(searchIndex).toString() : \"\");",
    "info" : "ExpressionStatement[97949-98095]:ExpressionStatement[99464-99610]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98135-98287]:Block[99650-99802]"
  }, {
    "left" : "searchIndex = -1;",
    "right" : "searchIndex = -1;",
    "info" : "ExpressionStatement[98173-98190]:ExpressionStatement[99688-99705]"
  }, {
    "left" : "printSearchStatus(\"\", \"\");",
    "right" : "printSearchStatus(\"\", \"\");",
    "info" : "ExpressionStatement[98227-98253]:ExpressionStatement[99742-99768]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[98320-98326]:BreakStatement[99835-99841]"
  }, {
    "left" : "case FORWARD_SEARCH_HISTORY:",
    "right" : "case FORWARD_SEARCH_HISTORY:",
    "info" : "SwitchCase[98356-98384]:SwitchCase[99871-99899]"
  }, {
    "left" : "if (searchTerm != null)",
    "right" : "if (searchTerm != null)",
    "info" : "IfStatement[98417-98556]:IfStatement[99932-100071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98441-98556]:Block[99956-100071]"
  }, {
    "left" : "previousSearchTerm = searchTerm.toString();",
    "right" : "previousSearchTerm = searchTerm.toString();",
    "info" : "ExpressionStatement[98479-98522]:ExpressionStatement[99994-100037]"
  }, {
    "left" : "searchTerm = new StringBuffer(buf.buffer);",
    "right" : "searchTerm = new StringBuffer(buf.buffer);",
    "info" : "ExpressionStatement[98589-98631]:ExpressionStatement[100104-100146]"
  }, {
    "left" : "state = State.FORWARD_SEARCH;",
    "right" : "state = State.FORWARD_SEARCH;",
    "info" : "ExpressionStatement[98664-98693]:ExpressionStatement[100179-100208]"
  }, {
    "left" : "if (searchTerm.length() > 0)",
    "right" : "if (searchTerm.length() > 0)",
    "info" : "IfStatement[98726-99381]:IfStatement[100241-100896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98755-99216]:Block[100270-100731]"
  }, {
    "left" : "searchIndex = searchForwards(searchTerm.toString());",
    "right" : "searchIndex = searchForwards(searchTerm.toString());",
    "info" : "ExpressionStatement[98793-98845]:ExpressionStatement[100308-100360]"
  }, {
    "left" : "if (searchIndex == -1)",
    "right" : "if (searchIndex == -1)",
    "info" : "IfStatement[98882-98992]:IfStatement[100397-100507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98905-98992]:Block[100420-100507]"
  }, {
    "left" : "beep();",
    "right" : "beep();",
    "info" : "ExpressionStatement[98947-98954]:ExpressionStatement[100462-100469]"
  }, {
    "left" : "printForwardSearchStatus(searchTerm.toString(),\n                                            searchIndex > -1 ? history.get(searchIndex).toString() : \"\");",
    "right" : "printForwardSearchStatus(searchTerm.toString(),\n                                            searchIndex > -1 ? history.get(searchIndex).toString() : \"\");",
    "info" : "ExpressionStatement[99029-99182]:ExpressionStatement[100544-100697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99222-99381]:Block[100737-100896]"
  }, {
    "left" : "searchIndex = -1;",
    "right" : "searchIndex = -1;",
    "info" : "ExpressionStatement[99260-99277]:ExpressionStatement[100775-100792]"
  }, {
    "left" : "printForwardSearchStatus(\"\", \"\");",
    "right" : "printForwardSearchStatus(\"\", \"\");",
    "info" : "ExpressionStatement[99314-99347]:ExpressionStatement[100829-100862]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[99414-99420]:BreakStatement[100929-100935]"
  }, {
    "left" : "case CAPITALIZE_WORD:",
    "right" : "case CAPITALIZE_WORD:",
    "info" : "SwitchCase[99450-99471]:SwitchCase[100965-100986]"
  }, {
    "left" : "success = capitalizeWord();",
    "right" : "success = capitalizeWord();",
    "info" : "ExpressionStatement[99504-99531]:ExpressionStatement[101019-101046]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[99564-99570]:BreakStatement[101079-101085]"
  }, {
    "left" : "case UPCASE_WORD:",
    "right" : "case UPCASE_WORD:",
    "info" : "SwitchCase[99600-99617]:SwitchCase[101115-101132]"
  }, {
    "left" : "success = upCaseWord();",
    "right" : "success = upCaseWord();",
    "info" : "ExpressionStatement[99650-99673]:ExpressionStatement[101165-101188]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[99706-99712]:BreakStatement[101221-101227]"
  }, {
    "left" : "case DOWNCASE_WORD:",
    "right" : "case DOWNCASE_WORD:",
    "info" : "SwitchCase[99742-99761]:SwitchCase[101257-101276]"
  }, {
    "left" : "success = downCaseWord();",
    "right" : "success = downCaseWord();",
    "info" : "ExpressionStatement[99794-99819]:ExpressionStatement[101309-101334]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[99852-99858]:BreakStatement[101367-101373]"
  }, {
    "left" : "case END_OF_LINE:",
    "right" : "case END_OF_LINE:",
    "info" : "SwitchCase[99888-99905]:SwitchCase[101403-101420]"
  }, {
    "left" : "success = moveToEnd();",
    "right" : "success = moveToEnd();",
    "info" : "ExpressionStatement[99938-99960]:ExpressionStatement[101453-101475]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[99993-99999]:BreakStatement[101508-101514]"
  }, {
    "left" : "case TAB_INSERT:",
    "right" : "case TAB_INSERT:",
    "info" : "SwitchCase[100029-100045]:SwitchCase[101544-101560]"
  }, {
    "left" : "putString( \"\\t\" );",
    "right" : "putString( \"\\t\" );",
    "info" : "ExpressionStatement[100078-100096]:ExpressionStatement[101593-101611]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[100129-100135]:BreakStatement[101644-101650]"
  }, {
    "left" : "case RE_READ_INIT_FILE:",
    "right" : "case RE_READ_INIT_FILE:",
    "info" : "SwitchCase[100165-100188]:SwitchCase[101680-101703]"
  }, {
    "left" : "consoleKeys.loadKeys(appName, inputrcUrl);",
    "right" : "consoleKeys.loadKeys(appName, inputrcUrl);",
    "info" : "ExpressionStatement[100221-100263]:ExpressionStatement[101736-101778]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[100296-100302]:BreakStatement[101811-101817]"
  }, {
    "left" : "case START_KBD_MACRO:",
    "right" : "case START_KBD_MACRO:",
    "info" : "SwitchCase[100332-100353]:SwitchCase[101847-101868]"
  }, {
    "left" : "recording = true;",
    "right" : "recording = true;",
    "info" : "ExpressionStatement[100386-100403]:ExpressionStatement[101901-101918]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[100436-100442]:BreakStatement[101951-101957]"
  }, {
    "left" : "case END_KBD_MACRO:",
    "right" : "case END_KBD_MACRO:",
    "info" : "SwitchCase[100472-100491]:SwitchCase[101987-102006]"
  }, {
    "left" : "recording = false;",
    "right" : "recording = false;",
    "info" : "ExpressionStatement[100524-100542]:ExpressionStatement[102039-102057]"
  }, {
    "left" : "macro = macro.substring(0, macro.length() - sb.length());",
    "right" : "macro = macro.substring(0, macro.length() - sb.length());",
    "info" : "ExpressionStatement[100575-100632]:ExpressionStatement[102090-102147]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[100665-100671]:BreakStatement[102180-102186]"
  }, {
    "left" : "case CALL_LAST_KBD_MACRO:",
    "right" : "case CALL_LAST_KBD_MACRO:",
    "info" : "SwitchCase[100701-100726]:SwitchCase[102216-102241]"
  }, {
    "left" : "for (int i = 0; i < macro.length(); i++)",
    "right" : "for (int i = 0; i < macro.length(); i++)",
    "info" : "ForStatement[100759-100928]:ForStatement[102274-102443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100800-100928]:Block[102315-102443]"
  }, {
    "left" : "pushBackChar.push(macro.charAt(macro.length() - 1 - i));",
    "right" : "pushBackChar.push(macro.charAt(macro.length() - 1 - i));",
    "info" : "ExpressionStatement[100838-100894]:ExpressionStatement[102353-102409]"
  }, {
    "left" : "sb.setLength( 0 );",
    "right" : "sb.setLength( 0 );",
    "info" : "ExpressionStatement[100961-100979]:ExpressionStatement[102476-102494]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[101012-101018]:BreakStatement[102527-102533]"
  }, {
    "left" : "case VI_EDITING_MODE:",
    "right" : "case VI_EDITING_MODE:",
    "info" : "SwitchCase[101048-101069]:SwitchCase[102563-102584]"
  }, {
    "left" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "right" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "info" : "ExpressionStatement[101102-101142]:ExpressionStatement[102617-102657]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[101175-101181]:BreakStatement[102690-102696]"
  }, {
    "left" : "case VI_MOVEMENT_MODE:",
    "right" : "case VI_MOVEMENT_MODE:",
    "info" : "SwitchCase[101211-101233]:SwitchCase[102726-102748]"
  }, {
    "left" : "if (state == State.NORMAL)",
    "right" : "if (state == State.NORMAL)",
    "info" : "IfStatement[101685-101799]:IfStatement[103200-103314]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101712-101799]:Block[103227-103314]"
  }, {
    "left" : "moveCursor(-1);",
    "right" : "moveCursor(-1);",
    "info" : "ExpressionStatement[101750-101765]:ExpressionStatement[103265-103280]"
  }, {
    "left" : "consoleKeys.setKeyMap(KeyMap.VI_MOVE);",
    "right" : "consoleKeys.setKeyMap(KeyMap.VI_MOVE);",
    "info" : "ExpressionStatement[101832-101870]:ExpressionStatement[103347-103385]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[101903-101909]:BreakStatement[103418-103424]"
  }, {
    "left" : "case VI_INSERTION_MODE:",
    "right" : "case VI_INSERTION_MODE:",
    "info" : "SwitchCase[101939-101962]:SwitchCase[103454-103477]"
  }, {
    "left" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "right" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "info" : "ExpressionStatement[101995-102035]:ExpressionStatement[103510-103550]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[102068-102074]:BreakStatement[103583-103589]"
  }, {
    "left" : "case VI_APPEND_MODE:",
    "right" : "case VI_APPEND_MODE:",
    "info" : "SwitchCase[102104-102124]:SwitchCase[103619-103639]"
  }, {
    "left" : "moveCursor(1);",
    "right" : "moveCursor(1);",
    "info" : "ExpressionStatement[102157-102171]:ExpressionStatement[103672-103686]"
  }, {
    "left" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "right" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "info" : "ExpressionStatement[102204-102244]:ExpressionStatement[103719-103759]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[102277-102283]:BreakStatement[103792-103798]"
  }, {
    "left" : "case VI_APPEND_EOL:",
    "right" : "case VI_APPEND_EOL:",
    "info" : "SwitchCase[102313-102332]:SwitchCase[103828-103847]"
  }, {
    "left" : "success = moveToEnd();",
    "right" : "success = moveToEnd();",
    "info" : "ExpressionStatement[102365-102387]:ExpressionStatement[103880-103902]"
  }, {
    "left" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "right" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "info" : "ExpressionStatement[102420-102460]:ExpressionStatement[103935-103975]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[102493-102499]:BreakStatement[104008-104014]"
  }, {
    "left" : "case VI_EOF_MAYBE:",
    "right" : "case VI_EOF_MAYBE:",
    "info" : "SwitchCase[102825-102843]:SwitchCase[104340-104358]"
  }, {
    "left" : "if (buf.buffer.length() == 0)",
    "right" : "if (buf.buffer.length() == 0)",
    "info" : "IfStatement[102876-102990]:IfStatement[104391-104505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102906-102990]:Block[104421-104505]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[102944-102956]:ReturnStatement[104459-104471]"
  }, {
    "left" : "return accept();",
    "right" : "return accept();",
    "info" : "ReturnStatement[103023-103039]:ReturnStatement[104538-104554]"
  }, {
    "left" : "case TRANSPOSE_CHARS:",
    "right" : "case TRANSPOSE_CHARS:",
    "info" : "SwitchCase[103069-103090]:SwitchCase[104584-104605]"
  }, {
    "left" : "success = transposeChars(count);",
    "right" : "success = transposeChars(count);",
    "info" : "ExpressionStatement[103123-103155]:ExpressionStatement[104638-104670]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[103188-103194]:BreakStatement[104703-104709]"
  }, {
    "left" : "case INSERT_COMMENT:",
    "right" : "case INSERT_COMMENT:",
    "info" : "SwitchCase[103224-103244]:SwitchCase[104739-104759]"
  }, {
    "left" : "return insertComment (false);",
    "right" : "return insertComment (false);",
    "info" : "ReturnStatement[103277-103306]:ReturnStatement[104792-104821]"
  }, {
    "left" : "case INSERT_CLOSE_CURLY:",
    "right" : "case INSERT_CLOSE_CURLY:",
    "info" : "SwitchCase[103336-103360]:SwitchCase[104851-104875]"
  }, {
    "left" : "insertClose(\"}\");",
    "right" : "insertClose(\"}\");",
    "info" : "ExpressionStatement[103393-103410]:ExpressionStatement[104908-104925]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[103443-103449]:BreakStatement[104958-104964]"
  }, {
    "left" : "case INSERT_CLOSE_PAREN:",
    "right" : "case INSERT_CLOSE_PAREN:",
    "info" : "SwitchCase[103479-103503]:SwitchCase[104994-105018]"
  }, {
    "left" : "insertClose(\")\");",
    "right" : "insertClose(\")\");",
    "info" : "ExpressionStatement[103536-103553]:ExpressionStatement[105051-105068]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[103586-103592]:BreakStatement[105101-105107]"
  }, {
    "left" : "case INSERT_CLOSE_SQUARE:",
    "right" : "case INSERT_CLOSE_SQUARE:",
    "info" : "SwitchCase[103622-103647]:SwitchCase[105137-105162]"
  }, {
    "left" : "insertClose(\"]\");",
    "right" : "insertClose(\"]\");",
    "info" : "ExpressionStatement[103680-103697]:ExpressionStatement[105195-105212]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[103730-103736]:BreakStatement[105245-105251]"
  }, {
    "left" : "case VI_INSERT_COMMENT:",
    "right" : "case VI_INSERT_COMMENT:",
    "info" : "SwitchCase[103766-103789]:SwitchCase[105281-105304]"
  }, {
    "left" : "return insertComment (true);",
    "right" : "return insertComment (true);",
    "info" : "ReturnStatement[103822-103850]:ReturnStatement[105337-105365]"
  }, {
    "left" : "case VI_MATCH:",
    "right" : "case VI_MATCH:",
    "info" : "SwitchCase[103880-103894]:SwitchCase[105395-105409]"
  }, {
    "left" : "success = viMatch ();",
    "right" : "success = viMatch ();",
    "info" : "ExpressionStatement[103927-103948]:ExpressionStatement[105442-105463]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[103981-103987]:BreakStatement[105496-105502]"
  }, {
    "left" : "case VI_SEARCH:",
    "right" : "case VI_SEARCH:",
    "info" : "SwitchCase[104017-104032]:SwitchCase[105532-105547]"
  }, {
    "left" : "int lastChar = viSearch(sb.charAt (0));",
    "right" : "int lastChar = viSearch(sb.charAt (0));",
    "info" : "VariableDeclarationStatement[104065-104104]:VariableDeclarationStatement[105580-105619]"
  }, {
    "left" : "if (lastChar != -1)",
    "right" : "if (lastChar != -1)",
    "info" : "IfStatement[104137-104263]:IfStatement[105652-105778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104157-104263]:Block[105672-105778]"
  }, {
    "left" : "pushBackChar.push((char)lastChar);",
    "right" : "pushBackChar.push((char)lastChar);",
    "info" : "ExpressionStatement[104195-104229]:ExpressionStatement[105710-105744]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[104296-104302]:BreakStatement[105811-105817]"
  }, {
    "left" : "case VI_ARG_DIGIT:",
    "right" : "case VI_ARG_DIGIT:",
    "info" : "SwitchCase[104332-104350]:SwitchCase[105847-105865]"
  }, {
    "left" : "repeatCount = (repeatCount * 10) + sb.charAt(0) - '0';",
    "right" : "repeatCount = (repeatCount * 10) + sb.charAt(0) - '0';",
    "info" : "ExpressionStatement[104383-104437]:ExpressionStatement[105898-105952]"
  }, {
    "left" : "isArgDigit = true;",
    "right" : "isArgDigit = true;",
    "info" : "ExpressionStatement[104470-104488]:ExpressionStatement[105985-106003]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[104521-104527]:BreakStatement[106036-106042]"
  }, {
    "left" : "case VI_BEGNNING_OF_LINE_OR_ARG_DIGIT:",
    "right" : "case VI_BEGNNING_OF_LINE_OR_ARG_DIGIT:",
    "info" : "SwitchCase[104557-104595]:SwitchCase[106072-106110]"
  }, {
    "left" : "if (repeatCount > 0)",
    "right" : "if (repeatCount > 0)",
    "info" : "IfStatement[104628-104971]:IfStatement[106143-106486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104649-104830]:Block[106164-106345]"
  }, {
    "left" : "repeatCount = (repeatCount * 10) + sb.charAt(0) - '0';",
    "right" : "repeatCount = (repeatCount * 10) + sb.charAt(0) - '0';",
    "info" : "ExpressionStatement[104687-104741]:ExpressionStatement[106202-106256]"
  }, {
    "left" : "isArgDigit = true;",
    "right" : "isArgDigit = true;",
    "info" : "ExpressionStatement[104778-104796]:ExpressionStatement[106293-106311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104868-104971]:Block[106383-106486]"
  }, {
    "left" : "success = setCursorPosition(0);",
    "right" : "success = setCursorPosition(0);",
    "info" : "ExpressionStatement[104906-104937]:ExpressionStatement[106421-106452]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[105004-105010]:BreakStatement[106519-106525]"
  }, {
    "left" : "case VI_FIRST_PRINT:",
    "right" : "case VI_FIRST_PRINT:",
    "info" : "SwitchCase[105040-105060]:SwitchCase[106555-106575]"
  }, {
    "left" : "success = setCursorPosition(0) && viNextWord(1);",
    "right" : "success = setCursorPosition(0) && viNextWord(1);",
    "info" : "ExpressionStatement[105093-105141]:ExpressionStatement[106608-106656]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[105174-105180]:BreakStatement[106689-106695]"
  }, {
    "left" : "case VI_PREV_WORD:",
    "right" : "case VI_PREV_WORD:",
    "info" : "SwitchCase[105210-105228]:SwitchCase[106725-106743]"
  }, {
    "left" : "success = viPreviousWord(count);",
    "right" : "success = viPreviousWord(count);",
    "info" : "ExpressionStatement[105261-105293]:ExpressionStatement[106776-106808]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[105326-105332]:BreakStatement[106841-106847]"
  }, {
    "left" : "case VI_NEXT_WORD:",
    "right" : "case VI_NEXT_WORD:",
    "info" : "SwitchCase[105362-105380]:SwitchCase[106877-106895]"
  }, {
    "left" : "success = viNextWord(count);",
    "right" : "success = viNextWord(count);",
    "info" : "ExpressionStatement[105413-105441]:ExpressionStatement[106928-106956]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[105474-105480]:BreakStatement[106989-106995]"
  }, {
    "left" : "case VI_END_WORD:",
    "right" : "case VI_END_WORD:",
    "info" : "SwitchCase[105510-105527]:SwitchCase[107025-107042]"
  }, {
    "left" : "success = viEndWord(count);",
    "right" : "success = viEndWord(count);",
    "info" : "ExpressionStatement[105560-105587]:ExpressionStatement[107075-107102]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[105620-105626]:BreakStatement[107135-107141]"
  }, {
    "left" : "case VI_INSERT_BEG:",
    "right" : "case VI_INSERT_BEG:",
    "info" : "SwitchCase[105656-105675]:SwitchCase[107171-107190]"
  }, {
    "left" : "success = setCursorPosition(0);",
    "right" : "success = setCursorPosition(0);",
    "info" : "ExpressionStatement[105708-105739]:ExpressionStatement[107223-107254]"
  }, {
    "left" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "right" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "info" : "ExpressionStatement[105772-105812]:ExpressionStatement[107287-107327]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[105845-105851]:BreakStatement[107360-107366]"
  }, {
    "left" : "case VI_RUBOUT:",
    "right" : "case VI_RUBOUT:",
    "info" : "SwitchCase[105881-105896]:SwitchCase[107396-107411]"
  }, {
    "left" : "success = viRubout(count);",
    "right" : "success = viRubout(count);",
    "info" : "ExpressionStatement[105929-105955]:ExpressionStatement[107444-107470]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[105988-105994]:BreakStatement[107503-107509]"
  }, {
    "left" : "case VI_DELETE:",
    "right" : "case VI_DELETE:",
    "info" : "SwitchCase[106024-106039]:SwitchCase[107539-107554]"
  }, {
    "left" : "success = viDelete(count);",
    "right" : "success = viDelete(count);",
    "info" : "ExpressionStatement[106072-106098]:ExpressionStatement[107587-107613]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[106131-106137]:BreakStatement[107646-107652]"
  }, {
    "left" : "case VI_DELETE_TO:",
    "right" : "case VI_DELETE_TO:",
    "info" : "SwitchCase[106167-106185]:SwitchCase[107682-107700]"
  }, {
    "left" : "if (state == State.VI_DELETE_TO)",
    "right" : "if (state == State.VI_DELETE_TO)",
    "info" : "IfStatement[106567-106924]:IfStatement[108082-108439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106600-106787]:Block[108115-108302]"
  }, {
    "left" : "success = setCursorPosition(0) && killLine();",
    "right" : "success = setCursorPosition(0) && killLine();",
    "info" : "ExpressionStatement[106638-106683]:ExpressionStatement[108153-108198]"
  }, {
    "left" : "state = origState = State.NORMAL;",
    "right" : "state = origState = State.NORMAL;",
    "info" : "ExpressionStatement[106720-106753]:ExpressionStatement[108235-108268]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106825-106924]:Block[108340-108439]"
  }, {
    "left" : "state = State.VI_DELETE_TO;",
    "right" : "state = State.VI_DELETE_TO;",
    "info" : "ExpressionStatement[106863-106890]:ExpressionStatement[108378-108405]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[106957-106963]:BreakStatement[108472-108478]"
  }, {
    "left" : "case VI_YANK_TO:",
    "right" : "case VI_YANK_TO:",
    "info" : "SwitchCase[106993-107009]:SwitchCase[108508-108524]"
  }, {
    "left" : "if (state == State.VI_YANK_TO)",
    "right" : "if (state == State.VI_YANK_TO)",
    "info" : "IfStatement[107128-107471]:IfStatement[108643-108986]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[107159-107336]:Block[108674-108851]"
  }, {
    "left" : "yankBuffer = buf.buffer.toString();",
    "right" : "yankBuffer = buf.buffer.toString();",
    "info" : "ExpressionStatement[107197-107232]:ExpressionStatement[108712-108747]"
  }, {
    "left" : "state = origState = State.NORMAL;",
    "right" : "state = origState = State.NORMAL;",
    "info" : "ExpressionStatement[107269-107302]:ExpressionStatement[108784-108817]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[107374-107471]:Block[108889-108986]"
  }, {
    "left" : "state = State.VI_YANK_TO;",
    "right" : "state = State.VI_YANK_TO;",
    "info" : "ExpressionStatement[107412-107437]:ExpressionStatement[108927-108952]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[107504-107510]:BreakStatement[109019-109025]"
  }, {
    "left" : "case VI_CHANGE_TO:",
    "right" : "case VI_CHANGE_TO:",
    "info" : "SwitchCase[107540-107558]:SwitchCase[109055-109073]"
  }, {
    "left" : "if (state == State.VI_CHANGE_TO)",
    "right" : "if (state == State.VI_CHANGE_TO)",
    "info" : "IfStatement[107591-108025]:IfStatement[109106-109540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[107624-107888]:Block[109139-109403]"
  }, {
    "left" : "success = setCursorPosition(0) && killLine();",
    "right" : "success = setCursorPosition(0) && killLine();",
    "info" : "ExpressionStatement[107662-107707]:ExpressionStatement[109177-109222]"
  }, {
    "left" : "state = origState = State.NORMAL;",
    "right" : "state = origState = State.NORMAL;",
    "info" : "ExpressionStatement[107744-107777]:ExpressionStatement[109259-109292]"
  }, {
    "left" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "right" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "info" : "ExpressionStatement[107814-107854]:ExpressionStatement[109329-109369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[107926-108025]:Block[109441-109540]"
  }, {
    "left" : "state = State.VI_CHANGE_TO;",
    "right" : "state = State.VI_CHANGE_TO;",
    "info" : "ExpressionStatement[107964-107991]:ExpressionStatement[109479-109506]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[108058-108064]:BreakStatement[109573-109579]"
  }, {
    "left" : "case VI_KILL_WHOLE_LINE:",
    "right" : "case VI_KILL_WHOLE_LINE:",
    "info" : "SwitchCase[108122-108146]:SwitchCase[109637-109661]"
  }, {
    "left" : "success = setCursorPosition(0) && killLine();",
    "right" : "success = setCursorPosition(0) && killLine();",
    "info" : "ExpressionStatement[108179-108224]:ExpressionStatement[109694-109739]"
  }, {
    "left" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "right" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "info" : "ExpressionStatement[108257-108297]:ExpressionStatement[109772-109812]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[108330-108336]:BreakStatement[109845-109851]"
  }, {
    "left" : "case VI_PUT:",
    "right" : "case VI_PUT:",
    "info" : "SwitchCase[108366-108378]:SwitchCase[109881-109893]"
  }, {
    "left" : "success = viPut(count);",
    "right" : "success = viPut(count);",
    "info" : "ExpressionStatement[108411-108434]:ExpressionStatement[109926-109949]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[108467-108473]:BreakStatement[109982-109988]"
  }, {
    "left" : "case VI_CHAR_SEARCH:",
    "right" : "case VI_CHAR_SEARCH:",
    "info" : "SwitchCase[108503-108523]:SwitchCase[110018-110038]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108524-109058]:Block[110039-110573]"
  }, {
    "left" : "int searchChar = (c != ';' && c != ',')\n                                    ? (pushBackChar.isEmpty()\n                                        ? readCharacter()\n                                        : pushBackChar.pop ())\n                                    : 0;",
    "right" : "int searchChar = (c != ';' && c != ',')\n                                    ? (pushBackChar.isEmpty()\n                                        ? readCharacter()\n                                        : pushBackChar.pop ())\n                                    : 0;",
    "info" : "VariableDeclarationStatement[108678-108941]:VariableDeclarationStatement[110193-110456]"
  }, {
    "left" : "success = viCharSearch(count, c, searchChar);",
    "right" : "success = viCharSearch(count, c, searchChar);",
    "info" : "ExpressionStatement[108979-109024]:ExpressionStatement[110494-110539]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[109091-109097]:BreakStatement[110606-110612]"
  }, {
    "left" : "case VI_CHANGE_CASE:",
    "right" : "case VI_CHANGE_CASE:",
    "info" : "SwitchCase[109127-109147]:SwitchCase[110642-110662]"
  }, {
    "left" : "success = viChangeCase(count);",
    "right" : "success = viChangeCase(count);",
    "info" : "ExpressionStatement[109180-109210]:ExpressionStatement[110695-110725]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[109243-109249]:BreakStatement[110758-110764]"
  }, {
    "left" : "case VI_CHANGE_CHAR:",
    "right" : "case VI_CHANGE_CHAR:",
    "info" : "SwitchCase[109279-109299]:SwitchCase[110794-110814]"
  }, {
    "left" : "success = viChangeChar(count,\n                                    pushBackChar.isEmpty()\n                                        ? readCharacter()\n                                        : pushBackChar.pop());",
    "right" : "success = viChangeChar(count,\n                                    pushBackChar.isEmpty()\n                                        ? readCharacter()\n                                        : pushBackChar.pop());",
    "info" : "ExpressionStatement[109332-109541]:ExpressionStatement[110847-111056]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[109574-109580]:BreakStatement[111089-111095]"
  }, {
    "left" : "case VI_DELETE_TO_EOL:",
    "right" : "case VI_DELETE_TO_EOL:",
    "info" : "SwitchCase[109638-109660]:SwitchCase[111153-111175]"
  }, {
    "left" : "success = viDeleteTo(buf.cursor, buf.buffer.length(), false);",
    "right" : "success = viDeleteTo(buf.cursor, buf.buffer.length(), false);",
    "info" : "ExpressionStatement[109693-109754]:ExpressionStatement[111208-111269]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[109787-109793]:BreakStatement[111302-111308]"
  }, {
    "left" : "case VI_CHANGE_TO_EOL:",
    "right" : "case VI_CHANGE_TO_EOL:",
    "info" : "SwitchCase[109855-109877]:SwitchCase[111370-111392]"
  }, {
    "left" : "success = viDeleteTo(buf.cursor, buf.buffer.length(), true);",
    "right" : "success = viDeleteTo(buf.cursor, buf.buffer.length(), true);",
    "info" : "ExpressionStatement[109910-109970]:ExpressionStatement[111425-111485]"
  }, {
    "left" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "right" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "info" : "ExpressionStatement[110003-110043]:ExpressionStatement[111518-111558]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[110076-110082]:BreakStatement[111591-111597]"
  }, {
    "left" : "case EMACS_EDITING_MODE:",
    "right" : "case EMACS_EDITING_MODE:",
    "info" : "SwitchCase[110112-110136]:SwitchCase[111627-111651]"
  }, {
    "left" : "consoleKeys.setKeyMap(KeyMap.EMACS);",
    "right" : "consoleKeys.setKeyMap(KeyMap.EMACS);",
    "info" : "ExpressionStatement[110169-110205]:ExpressionStatement[111684-111720]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[110238-110244]:BreakStatement[111753-111759]"
  }, {
    "left" : "case QUIT:",
    "right" : "case QUIT:",
    "info" : "SwitchCase[110274-110284]:SwitchCase[111789-111799]"
  }, {
    "left" : "getCursorBuffer().clear();",
    "right" : "getCursorBuffer().clear();",
    "info" : "ExpressionStatement[110317-110343]:ExpressionStatement[111832-111858]"
  }, {
    "left" : "return accept();",
    "right" : "return accept();",
    "info" : "ReturnStatement[110376-110392]:ReturnStatement[111891-111907]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[110422-110430]:SwitchCase[111937-111945]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[110463-110469]:BreakStatement[111978-111984]"
  }, {
    "left" : "if (origState != State.NORMAL)",
    "right" : "if (origState != State.NORMAL)",
    "info" : "IfStatement[110721-111449]:IfStatement[112236-112964]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[110752-111449]:Block[112267-112964]"
  }, {
    "left" : "if (origState == State.VI_DELETE_TO)",
    "right" : "if (origState == State.VI_DELETE_TO)",
    "info" : "IfStatement[110782-111373]:IfStatement[112297-112888]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[110819-110936]:Block[112334-112451]"
  }, {
    "left" : "success = viDeleteTo(cursorStart, buf.cursor, false);",
    "right" : "success = viDeleteTo(cursorStart, buf.cursor, false);",
    "info" : "ExpressionStatement[110853-110906]:ExpressionStatement[112368-112421]"
  }, {
    "left" : "if (origState == State.VI_CHANGE_TO)",
    "right" : "if (origState == State.VI_CHANGE_TO)",
    "info" : "IfStatement[110970-111373]:IfStatement[112485-112888]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[111007-111196]:Block[112522-112711]"
  }, {
    "left" : "success = viDeleteTo(cursorStart, buf.cursor, true);",
    "right" : "success = viDeleteTo(cursorStart, buf.cursor, true);",
    "info" : "ExpressionStatement[111041-111093]:ExpressionStatement[112556-112608]"
  }, {
    "left" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "right" : "consoleKeys.setKeyMap(KeyMap.VI_INSERT);",
    "info" : "ExpressionStatement[111126-111166]:ExpressionStatement[112641-112681]"
  }, {
    "left" : "if (origState == State.VI_YANK_TO)",
    "right" : "if (origState == State.VI_YANK_TO)",
    "info" : "IfStatement[111230-111373]:IfStatement[112745-112888]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[111265-111373]:Block[112780-112888]"
  }, {
    "left" : "success = viYankTo(cursorStart, buf.cursor);",
    "right" : "success = viYankTo(cursorStart, buf.cursor);",
    "info" : "ExpressionStatement[111299-111343]:ExpressionStatement[112814-112858]"
  }, {
    "left" : "state = State.NORMAL;",
    "right" : "state = State.NORMAL;",
    "info" : "ExpressionStatement[111402-111423]:ExpressionStatement[112917-112938]"
  }, {
    "left" : "if (state == State.NORMAL && !isArgDigit)",
    "right" : "if (state == State.NORMAL && !isArgDigit)",
    "info" : "IfStatement[111759-112093]:IfStatement[113274-113608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[111801-112093]:Block[113316-113608]"
  }, {
    "left" : "repeatCount = 0;",
    "right" : "repeatCount = 0;",
    "info" : "ExpressionStatement[112051-112067]:ExpressionStatement[113566-113582]"
  }, {
    "left" : "if (state != State.SEARCH && state != State.FORWARD_SEARCH)",
    "right" : "if (state != State.SEARCH && state != State.FORWARD_SEARCH)",
    "info" : "IfStatement[112119-112352]:IfStatement[113634-113867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112179-112352]:Block[113694-113867]"
  }, {
    "left" : "previousSearchTerm = \"\";",
    "right" : "previousSearchTerm = \"\";",
    "info" : "ExpressionStatement[112209-112233]:ExpressionStatement[113724-113748]"
  }, {
    "left" : "searchTerm = null;",
    "right" : "searchTerm = null;",
    "info" : "ExpressionStatement[112262-112280]:ExpressionStatement[113777-113795]"
  }, {
    "left" : "searchIndex = -1;",
    "right" : "searchIndex = -1;",
    "info" : "ExpressionStatement[112309-112326]:ExpressionStatement[113824-113841]"
  }, {
    "left" : "if (!success)",
    "right" : "if (!success)",
    "info" : "IfStatement[112409-112470]:IfStatement[113924-113985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112423-112470]:Block[113938-113985]"
  }, {
    "left" : "beep();",
    "right" : "beep();",
    "info" : "ExpressionStatement[112445-112452]:ExpressionStatement[113960-113967]"
  }, {
    "left" : "sb.setLength( 0 );",
    "right" : "sb.setLength( 0 );",
    "info" : "ExpressionStatement[112487-112505]:ExpressionStatement[114002-114020]"
  }, {
    "left" : "flush();",
    "right" : "flush();",
    "info" : "ExpressionStatement[112522-112530]:ExpressionStatement[114037-114045]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112571-112833]:Block[114086-114348]"
  }, {
    "left" : "if (!terminal.isSupported())",
    "right" : "if (!terminal.isSupported())",
    "info" : "IfStatement[112585-112662]:IfStatement[114100-114177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112614-112662]:Block[114129-114177]"
  }, {
    "left" : "afterReadLine();",
    "right" : "afterReadLine();",
    "info" : "ExpressionStatement[112632-112648]:ExpressionStatement[114147-114163]"
  }, {
    "left" : "if (handleUserInterrupt && (terminal instanceof UnixTerminal))",
    "right" : "if (handleUserInterrupt && (terminal instanceof UnixTerminal))",
    "info" : "IfStatement[112675-112823]:IfStatement[114190-114338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112738-112823]:Block[114253-114338]"
  }, {
    "left" : "((UnixTerminal) terminal).enableInterruptCharacter();",
    "right" : "((UnixTerminal) terminal).enableInterruptCharacter();",
    "info" : "ExpressionStatement[112756-112809]:ExpressionStatement[114271-114324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112958-113755]:Block[114473-115270]"
  }, {
    "left" : "StringBuilder buff = new StringBuilder();",
    "right" : "StringBuilder buff = new StringBuilder();",
    "info" : "VariableDeclarationStatement[112968-113009]:VariableDeclarationStatement[114483-114524]"
  }, {
    "left" : "if (skipLF)",
    "right" : "if (skipLF)",
    "info" : "IfStatement[113019-113325]:IfStatement[114534-114840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113031-113325]:Block[114546-114840]"
  }, {
    "left" : "skipLF = false;",
    "right" : "skipLF = false;",
    "info" : "ExpressionStatement[113045-113060]:ExpressionStatement[114560-114575]"
  }, {
    "left" : "int i = readCharacter();",
    "right" : "int i = readCharacter();",
    "info" : "VariableDeclarationStatement[113074-113098]:VariableDeclarationStatement[114589-114613]"
  }, {
    "left" : "if (i == -1 || i == '\\r')",
    "right" : "if (i == -1 || i == '\\r')",
    "info" : "IfStatement[113112-113315]:IfStatement[114627-114830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113138-113193]:Block[114653-114708]"
  }, {
    "left" : "return buff.toString();",
    "right" : "return buff.toString();",
    "info" : "ReturnStatement[113156-113179]:ReturnStatement[114671-114694]"
  }, {
    "left" : "if (i == '\\n')",
    "right" : "if (i == '\\n')",
    "info" : "IfStatement[113199-113315]:IfStatement[114714-114830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113214-113255]:Block[114729-114770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113261-113315]:Block[114776-114830]"
  }, {
    "left" : "buff.append((char) i);",
    "right" : "buff.append((char) i);",
    "info" : "ExpressionStatement[113279-113301]:ExpressionStatement[114794-114816]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[113335-113749]:WhileStatement[114850-115264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113348-113749]:Block[114863-115264]"
  }, {
    "left" : "int i = readCharacter();",
    "right" : "int i = readCharacter();",
    "info" : "VariableDeclarationStatement[113362-113386]:VariableDeclarationStatement[114877-114901]"
  }, {
    "left" : "if (i == -1 && buff.length() == 0)",
    "right" : "if (i == -1 && buff.length() == 0)",
    "info" : "IfStatement[113400-113477]:IfStatement[114915-114992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113435-113477]:Block[114950-114992]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[113451-113463]:ReturnStatement[114966-114978]"
  }, {
    "left" : "if (i == -1 || i == '\\n')",
    "right" : "if (i == -1 || i == '\\n')",
    "info" : "IfStatement[113491-113739]:IfStatement[115006-115254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113517-113572]:Block[115032-115087]"
  }, {
    "left" : "return buff.toString();",
    "right" : "return buff.toString();",
    "info" : "ReturnStatement[113535-113558]:ReturnStatement[115050-115073]"
  }, {
    "left" : "if (i == '\\r')",
    "right" : "if (i == '\\r')",
    "info" : "IfStatement[113578-113739]:IfStatement[115093-115254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113593-113679]:Block[115108-115194]"
  }, {
    "left" : "skipLF = true;",
    "right" : "skipLF = true;",
    "info" : "ExpressionStatement[113611-113625]:ExpressionStatement[115126-115140]"
  }, {
    "left" : "return buff.toString();",
    "right" : "return buff.toString();",
    "info" : "ReturnStatement[113642-113665]:ReturnStatement[115157-115180]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113685-113739]:Block[115200-115254]"
  }, {
    "left" : "buff.append((char) i);",
    "right" : "buff.append((char) i);",
    "info" : "ExpressionStatement[113703-113725]:ExpressionStatement[115218-115240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114275-114324]:Block[115790-115839]"
  }, {
    "left" : "return completers.add(completer);",
    "right" : "return completers.add(completer);",
    "info" : "ReturnStatement[114285-114318]:ReturnStatement[115800-115833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114651-114703]:Block[116166-116218]"
  }, {
    "left" : "return completers.remove(completer);",
    "right" : "return completers.remove(completer);",
    "info" : "ReturnStatement[114661-114697]:ReturnStatement[116176-116212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114829-114893]:Block[116344-116408]"
  }, {
    "left" : "return Collections.unmodifiableList(completers);",
    "right" : "return Collections.unmodifiableList(completers);",
    "info" : "ReturnStatement[114839-114887]:ReturnStatement[116354-116402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114965-115028]:Block[116480-116543]"
  }, {
    "left" : "this.completionHandler = checkNotNull(handler);",
    "right" : "this.completionHandler = checkNotNull(handler);",
    "info" : "ExpressionStatement[114975-115022]:ExpressionStatement[116490-116537]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115082-115128]:Block[116597-116643]"
  }, {
    "left" : "return this.completionHandler;",
    "right" : "return this.completionHandler;",
    "info" : "ReturnStatement[115092-115122]:ReturnStatement[116607-116637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115320-115901]:Block[116835-117416]"
  }, {
    "left" : "if (completers.size() == 0)",
    "right" : "if (completers.size() == 0)",
    "info" : "IfStatement[115374-115439]:IfStatement[116889-116954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115402-115439]:Block[116917-116954]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[115416-115429]:ReturnStatement[116931-116944]"
  }, {
    "left" : "List<CharSequence> candidates = new LinkedList<CharSequence>();",
    "right" : "List<CharSequence> candidates = new LinkedList<CharSequence>();",
    "info" : "VariableDeclarationStatement[115449-115512]:VariableDeclarationStatement[116964-117027]"
  }, {
    "left" : "String bufstr = buf.buffer.toString();",
    "right" : "String bufstr = buf.buffer.toString();",
    "info" : "VariableDeclarationStatement[115521-115559]:VariableDeclarationStatement[117036-117074]"
  }, {
    "left" : "int cursor = buf.cursor;",
    "right" : "int cursor = buf.cursor;",
    "info" : "VariableDeclarationStatement[115568-115592]:VariableDeclarationStatement[117083-117107]"
  }, {
    "left" : "int position = -1;",
    "right" : "int position = -1;",
    "info" : "VariableDeclarationStatement[115602-115620]:VariableDeclarationStatement[117117-117135]"
  }, {
    "left" : "for (Completer comp : completers)",
    "right" : "for (Completer comp : completers)",
    "info" : "EnhancedForStatement[115630-115792]:EnhancedForStatement[117145-117307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115664-115792]:Block[117179-117307]"
  }, {
    "left" : "if ((position = comp.complete(bufstr, cursor, candidates)) != -1)",
    "right" : "if ((position = comp.complete(bufstr, cursor, candidates)) != -1)",
    "info" : "IfStatement[115678-115782]:IfStatement[117193-117297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115744-115782]:Block[117259-117297]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[115762-115768]:BreakStatement[117277-117283]"
  }, {
    "left" : "return candidates.size() != 0 && getCompletionHandler().complete(this, candidates, position);",
    "right" : "return candidates.size() != 0 && getCompletionHandler().complete(this, candidates, position);",
    "info" : "ReturnStatement[115802-115895]:ReturnStatement[117317-117410]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115969-116494]:Block[117484-118009]"
  }, {
    "left" : "if (completers.size() == 0)",
    "right" : "if (completers.size() == 0)",
    "info" : "IfStatement[116023-116082]:IfStatement[117538-117597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116051-116082]:Block[117566-117597]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[116065-116072]:ReturnStatement[117580-117587]"
  }, {
    "left" : "List<CharSequence> candidates = new LinkedList<CharSequence>();",
    "right" : "List<CharSequence> candidates = new LinkedList<CharSequence>();",
    "info" : "VariableDeclarationStatement[116092-116155]:VariableDeclarationStatement[117607-117670]"
  }, {
    "left" : "String bufstr = buf.buffer.toString();",
    "right" : "String bufstr = buf.buffer.toString();",
    "info" : "VariableDeclarationStatement[116164-116202]:VariableDeclarationStatement[117679-117717]"
  }, {
    "left" : "int cursor = buf.cursor;",
    "right" : "int cursor = buf.cursor;",
    "info" : "VariableDeclarationStatement[116211-116235]:VariableDeclarationStatement[117726-117750]"
  }, {
    "left" : "for (Completer comp : completers)",
    "right" : "for (Completer comp : completers)",
    "info" : "EnhancedForStatement[116245-116394]:EnhancedForStatement[117760-117909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116279-116394]:Block[117794-117909]"
  }, {
    "left" : "if (comp.complete(bufstr, cursor, candidates) != -1)",
    "right" : "if (comp.complete(bufstr, cursor, candidates) != -1)",
    "info" : "IfStatement[116293-116384]:IfStatement[117808-117899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116346-116384]:Block[117861-117899]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[116364-116370]:BreakStatement[117879-117885]"
  }, {
    "left" : "CandidateListCompletionHandler.printCandidates(this, candidates);",
    "right" : "CandidateListCompletionHandler.printCandidates(this, candidates);",
    "info" : "ExpressionStatement[116403-116468]:ExpressionStatement[117918-117983]"
  }, {
    "left" : "drawLine();",
    "right" : "drawLine();",
    "info" : "ExpressionStatement[116477-116488]:ExpressionStatement[117992-118003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116921-116973]:Block[118436-118488]"
  }, {
    "left" : "this.autoprintThreshold = threshold;",
    "right" : "this.autoprintThreshold = threshold;",
    "info" : "ExpressionStatement[116931-116967]:ExpressionStatement[118446-118482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[117106-117148]:Block[118621-118663]"
  }, {
    "left" : "return autoprintThreshold;",
    "right" : "return autoprintThreshold;",
    "info" : "ReturnStatement[117116-117142]:ReturnStatement[118631-118657]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[117373-117422]:Block[118888-118937]"
  }, {
    "left" : "this.paginationEnabled = enabled;",
    "right" : "this.paginationEnabled = enabled;",
    "info" : "ExpressionStatement[117383-117416]:ExpressionStatement[118898-118931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[117588-117629]:Block[119103-119144]"
  }, {
    "left" : "return paginationEnabled;",
    "right" : "return paginationEnabled;",
    "info" : "ReturnStatement[117598-117623]:ReturnStatement[119113-119138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[117763-117802]:Block[119278-119317]"
  }, {
    "left" : "this.history = history;",
    "right" : "this.history = history;",
    "info" : "ExpressionStatement[117773-117796]:ExpressionStatement[119288-119311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[117836-117867]:Block[119351-119382]"
  }, {
    "left" : "return history;",
    "right" : "return history;",
    "info" : "ReturnStatement[117846-117861]:ReturnStatement[119361-119376]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[118051-118097]:Block[119566-119612]"
  }, {
    "left" : "this.historyEnabled = enabled;",
    "right" : "this.historyEnabled = enabled;",
    "info" : "ExpressionStatement[118061-118091]:ExpressionStatement[119576-119606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[118218-118256]:Block[119733-119771]"
  }, {
    "left" : "return historyEnabled;",
    "right" : "return historyEnabled;",
    "info" : "ReturnStatement[118228-118250]:ReturnStatement[119743-119765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[118651-118808]:Block[120166-120323]"
  }, {
    "left" : "boolean ok = true;",
    "right" : "boolean ok = true;",
    "info" : "VariableDeclarationStatement[118661-118679]:VariableDeclarationStatement[120176-120194]"
  }, {
    "left" : "for (int i = 0; i < count && (ok = moveHistory(next)); i++)",
    "right" : "for (int i = 0; i < count && (ok = moveHistory(next)); i++)",
    "info" : "ForStatement[118688-118783]:ForStatement[120203-120298]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[118748-118783]:Block[120263-120298]"
  }, {
    "left" : "return ok;",
    "right" : "return ok;",
    "info" : "ReturnStatement[118792-118802]:ReturnStatement[120307-120317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[118938-119166]:Block[120453-120681]"
  }, {
    "left" : "if (next && !history.next())",
    "right" : "if (next && !history.next())",
    "info" : "IfStatement[118948-119099]:IfStatement[120463-120614]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[118977-119014]:Block[120492-120529]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[118991-119004]:ReturnStatement[120506-120519]"
  }, {
    "left" : "if (!next && !history.previous())",
    "right" : "if (!next && !history.previous())",
    "info" : "IfStatement[119028-119099]:IfStatement[120543-120614]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119062-119099]:Block[120577-120614]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[119076-119089]:ReturnStatement[120591-120604]"
  }, {
    "left" : "setBuffer(history.current());",
    "right" : "setBuffer(history.current());",
    "info" : "ExpressionStatement[119109-119138]:ExpressionStatement[120624-120653]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[119148-119160]:ReturnStatement[120663-120675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119441-119641]:Block[120956-121156]"
  }, {
    "left" : "if (c == '\\t')",
    "right" : "if (c == '\\t')",
    "info" : "IfStatement[119451-119612]:IfStatement[120966-121127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119466-119612]:Block[120981-121127]"
  }, {
    "left" : "char chars[] = new char[TAB_WIDTH];",
    "right" : "char chars[] = new char[TAB_WIDTH];",
    "info" : "VariableDeclarationStatement[119480-119515]:VariableDeclarationStatement[120995-121030]"
  }, {
    "left" : "Arrays.fill(chars, ' ');",
    "right" : "Arrays.fill(chars, ' ');",
    "info" : "ExpressionStatement[119528-119552]:ExpressionStatement[121043-121067]"
  }, {
    "left" : "out.write(chars);",
    "right" : "out.write(chars);",
    "info" : "ExpressionStatement[119565-119582]:ExpressionStatement[121080-121097]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[119595-119602]:ReturnStatement[121110-121117]"
  }, {
    "left" : "out.write(c);",
    "right" : "out.write(c);",
    "info" : "ExpressionStatement[119622-119635]:ExpressionStatement[121137-121150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119822-120536]:Block[121337-122051]"
  }, {
    "left" : "int len = 0;",
    "right" : "int len = 0;",
    "info" : "VariableDeclarationStatement[119832-119844]:VariableDeclarationStatement[121347-121359]"
  }, {
    "left" : "for (char c : buff)",
    "right" : "for (char c : buff)",
    "info" : "EnhancedForStatement[119853-120017]:EnhancedForStatement[121368-121532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119873-120017]:Block[121388-121532]"
  }, {
    "left" : "if (c == '\\t')",
    "right" : "if (c == '\\t')",
    "info" : "IfStatement[119887-120007]:IfStatement[121402-121522]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119902-119951]:Block[121417-121466]"
  }, {
    "left" : "len += TAB_WIDTH;",
    "right" : "len += TAB_WIDTH;",
    "info" : "ExpressionStatement[119920-119937]:ExpressionStatement[121435-121452]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119969-120007]:Block[121484-121522]"
  }, {
    "left" : "len++;",
    "right" : "len++;",
    "info" : "ExpressionStatement[119987-119993]:ExpressionStatement[121502-121508]"
  }, {
    "left" : "char chars[];",
    "right" : "char chars[];",
    "info" : "VariableDeclarationStatement[120027-120040]:VariableDeclarationStatement[121542-121555]"
  }, {
    "left" : "if (len == buff.length)",
    "right" : "if (len == buff.length)",
    "info" : "IfStatement[120049-120503]:IfStatement[121564-122018]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120073-120110]:Block[121588-121625]"
  }, {
    "left" : "chars = buff;",
    "right" : "chars = buff;",
    "info" : "ExpressionStatement[120087-120100]:ExpressionStatement[121602-121615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120124-120503]:Block[121639-122018]"
  }, {
    "left" : "chars = new char[len];",
    "right" : "chars = new char[len];",
    "info" : "ExpressionStatement[120138-120160]:ExpressionStatement[121653-121675]"
  }, {
    "left" : "int pos = 0;",
    "right" : "int pos = 0;",
    "info" : "VariableDeclarationStatement[120173-120185]:VariableDeclarationStatement[121688-121700]"
  }, {
    "left" : "for (char c : buff)",
    "right" : "for (char c : buff)",
    "info" : "EnhancedForStatement[120198-120493]:EnhancedForStatement[121713-122008]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120218-120493]:Block[121733-122008]"
  }, {
    "left" : "if (c == '\\t')",
    "right" : "if (c == '\\t')",
    "info" : "IfStatement[120236-120479]:IfStatement[121751-121994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120251-120375]:Block[121766-121890]"
  }, {
    "left" : "Arrays.fill(chars, pos, pos + TAB_WIDTH, ' ');",
    "right" : "Arrays.fill(chars, pos, pos + TAB_WIDTH, ' ');",
    "info" : "ExpressionStatement[120273-120319]:ExpressionStatement[121788-121834]"
  }, {
    "left" : "pos += TAB_WIDTH;",
    "right" : "pos += TAB_WIDTH;",
    "info" : "ExpressionStatement[120340-120357]:ExpressionStatement[121855-121872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120397-120479]:Block[121912-121994]"
  }, {
    "left" : "chars[pos] = c;",
    "right" : "chars[pos] = c;",
    "info" : "ExpressionStatement[120419-120434]:ExpressionStatement[121934-121949]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[120455-120461]:ExpressionStatement[121970-121976]"
  }, {
    "left" : "out.write(chars);",
    "right" : "out.write(chars);",
    "info" : "ExpressionStatement[120513-120530]:ExpressionStatement[122028-122045]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120609-120800]:Block[122124-122315]"
  }, {
    "left" : "if (num == 1)",
    "right" : "if (num == 1)",
    "info" : "IfStatement[120619-120794]:IfStatement[122134-122309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120633-120666]:Block[122148-122181]"
  }, {
    "left" : "print(c);",
    "right" : "print(c);",
    "info" : "ExpressionStatement[120647-120656]:ExpressionStatement[122162-122171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120680-120794]:Block[122195-122309]"
  }, {
    "left" : "char[] chars = new char[num];",
    "right" : "char[] chars = new char[num];",
    "info" : "VariableDeclarationStatement[120694-120723]:VariableDeclarationStatement[122209-122238]"
  }, {
    "left" : "Arrays.fill(chars, c);",
    "right" : "Arrays.fill(chars, c);",
    "info" : "ExpressionStatement[120736-120758]:ExpressionStatement[122251-122273]"
  }, {
    "left" : "print(chars);",
    "right" : "print(chars);",
    "info" : "ExpressionStatement[120771-120784]:ExpressionStatement[122286-122299]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[120965-121029]:Block[122480-122544]"
  }, {
    "left" : "print(checkNotNull(s).toString().toCharArray());",
    "right" : "print(checkNotNull(s).toString().toCharArray());",
    "info" : "ExpressionStatement[120975-121023]:ExpressionStatement[122490-122538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[121102-121185]:Block[122617-122700]"
  }, {
    "left" : "print(checkNotNull(s).toString().toCharArray());",
    "right" : "print(checkNotNull(s).toString().toCharArray());",
    "info" : "ExpressionStatement[121112-121160]:ExpressionStatement[122627-122675]"
  }, {
    "left" : "println();",
    "right" : "println();",
    "info" : "ExpressionStatement[121169-121179]:ExpressionStatement[122684-122694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[121298-121343]:Block[122813-122858]"
  }, {
    "left" : "print(CR);",
    "right" : "print(CR);",
    "info" : "ExpressionStatement[121308-121318]:ExpressionStatement[122823-122833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[121508-121699]:Block[123023-123214]"
  }, {
    "left" : "if (buf.cursor == buf.buffer.length())",
    "right" : "if (buf.cursor == buf.buffer.length())",
    "info" : "IfStatement[121518-121592]:IfStatement[123033-123107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[121557-121592]:Block[123072-123107]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[121569-121582]:ReturnStatement[123084-123097]"
  }, {
    "left" : "buf.buffer.delete(buf.cursor, buf.cursor + 1);",
    "right" : "buf.buffer.delete(buf.cursor, buf.cursor + 1);",
    "info" : "ExpressionStatement[121602-121648]:ExpressionStatement[123117-123163]"
  }, {
    "left" : "drawBuffer(1);",
    "right" : "drawBuffer(1);",
    "info" : "ExpressionStatement[121657-121671]:ExpressionStatement[123172-123186]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[121681-121693]:ReturnStatement[123196-123208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[121868-122294]:Block[123383-123809]"
  }, {
    "left" : "int cp = buf.cursor;",
    "right" : "int cp = buf.cursor;",
    "info" : "VariableDeclarationStatement[121878-121898]:VariableDeclarationStatement[123393-123413]"
  }, {
    "left" : "int len = buf.buffer.length();",
    "right" : "int len = buf.buffer.length();",
    "info" : "VariableDeclarationStatement[121907-121937]:VariableDeclarationStatement[123422-123452]"
  }, {
    "left" : "if (cp >= len)",
    "right" : "if (cp >= len)",
    "info" : "IfStatement[121947-121999]:IfStatement[123462-123514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[121962-121999]:Block[123477-123514]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[121976-121989]:ReturnStatement[123491-123504]"
  }, {
    "left" : "int num = len - cp;",
    "right" : "int num = len - cp;",
    "info" : "VariableDeclarationStatement[122009-122028]:VariableDeclarationStatement[123524-123543]"
  }, {
    "left" : "clearAhead(num, 0);",
    "right" : "clearAhead(num, 0);",
    "info" : "ExpressionStatement[122037-122056]:ExpressionStatement[123552-123571]"
  }, {
    "left" : "char[] killed = new char[num];",
    "right" : "char[] killed = new char[num];",
    "info" : "VariableDeclarationStatement[122066-122096]:VariableDeclarationStatement[123581-123611]"
  }, {
    "left" : "buf.buffer.getChars(cp, (cp + num), killed, 0);",
    "right" : "buf.buffer.getChars(cp, (cp + num), killed, 0);",
    "info" : "ExpressionStatement[122105-122152]:ExpressionStatement[123620-123667]"
  }, {
    "left" : "buf.buffer.delete(cp, (cp + num));",
    "right" : "buf.buffer.delete(cp, (cp + num));",
    "info" : "ExpressionStatement[122161-122195]:ExpressionStatement[123676-123710]"
  }, {
    "left" : "String copy = new String(killed);",
    "right" : "String copy = new String(killed);",
    "info" : "VariableDeclarationStatement[122205-122238]:VariableDeclarationStatement[123720-123753]"
  }, {
    "left" : "killRing.add(copy);",
    "right" : "killRing.add(copy);",
    "info" : "ExpressionStatement[122247-122266]:ExpressionStatement[123762-123781]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[122276-122288]:ReturnStatement[123791-123803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[122341-122504]:Block[123856-124019]"
  }, {
    "left" : "String yanked = killRing.yank();",
    "right" : "String yanked = killRing.yank();",
    "info" : "VariableDeclarationStatement[122351-122383]:VariableDeclarationStatement[123866-123898]"
  }, {
    "left" : "if (yanked == null)",
    "right" : "if (yanked == null)",
    "info" : "IfStatement[122393-122450]:IfStatement[123908-123965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[122413-122450]:Block[123928-123965]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[122427-122440]:ReturnStatement[123942-123955]"
  }, {
    "left" : "putString(yanked);",
    "right" : "putString(yanked);",
    "info" : "ExpressionStatement[122459-122477]:ExpressionStatement[123974-123992]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[122486-122498]:ReturnStatement[124001-124013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[122554-123014]:Block[124069-124529]"
  }, {
    "left" : "if (!killRing.lastYank())",
    "right" : "if (!killRing.lastYank())",
    "info" : "IfStatement[122564-122627]:IfStatement[124079-124142]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[122590-122627]:Block[124105-124142]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[122604-122617]:ReturnStatement[124119-124132]"
  }, {
    "left" : "String current = killRing.yank();",
    "right" : "String current = killRing.yank();",
    "info" : "VariableDeclarationStatement[122636-122669]:VariableDeclarationStatement[124151-124184]"
  }, {
    "left" : "if (current == null)",
    "right" : "if (current == null)",
    "info" : "IfStatement[122678-122774]:IfStatement[124193-124289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[122699-122774]:Block[124214-124289]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[122751-122764]:ReturnStatement[124266-124279]"
  }, {
    "left" : "backspace(current.length());",
    "right" : "backspace(current.length());",
    "info" : "ExpressionStatement[122783-122811]:ExpressionStatement[124298-124326]"
  }, {
    "left" : "String yanked = killRing.yankPop();",
    "right" : "String yanked = killRing.yankPop();",
    "info" : "VariableDeclarationStatement[122820-122855]:VariableDeclarationStatement[124335-124370]"
  }, {
    "left" : "if (yanked == null)",
    "right" : "if (yanked == null)",
    "info" : "IfStatement[122864-122959]:IfStatement[124379-124474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[122884-122959]:Block[124399-124474]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[122936-122949]:ReturnStatement[124451-124464]"
  }, {
    "left" : "putString(yanked);",
    "right" : "putString(yanked);",
    "info" : "ExpressionStatement[122969-122987]:ExpressionStatement[124484-124502]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[122996-123008]:ReturnStatement[124511-124523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123149-123434]:Block[124664-124949]"
  }, {
    "left" : "if (!terminal.isAnsiSupported())",
    "right" : "if (!terminal.isAnsiSupported())",
    "info" : "IfStatement[123159-123229]:IfStatement[124674-124744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123192-123229]:Block[124707-124744]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[123206-123219]:ReturnStatement[124721-124734]"
  }, {
    "left" : "printAnsiSequence(\"2J\");",
    "right" : "printAnsiSequence(\"2J\");",
    "info" : "ExpressionStatement[123289-123313]:ExpressionStatement[124804-124828]"
  }, {
    "left" : "printAnsiSequence(\"1;1H\");",
    "right" : "printAnsiSequence(\"1;1H\");",
    "info" : "ExpressionStatement[123380-123406]:ExpressionStatement[124895-124921]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[123416-123428]:ReturnStatement[124931-124943]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123533-123691]:Block[125048-125206]"
  }, {
    "left" : "if (bellEnabled)",
    "right" : "if (bellEnabled)",
    "info" : "IfStatement[123543-123685]:IfStatement[125058-125200]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123560-123685]:Block[125075-125200]"
  }, {
    "left" : "print(KEYBOARD_BELL);",
    "right" : "print(KEYBOARD_BELL);",
    "info" : "ExpressionStatement[123574-123595]:ExpressionStatement[125089-125110]"
  }, {
    "left" : "flush();",
    "right" : "flush();",
    "info" : "ExpressionStatement[123667-123675]:ExpressionStatement[125182-125190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123878-126045]:Block[125393-127560]"
  }, {
    "left" : "Clipboard clipboard;",
    "right" : "Clipboard clipboard;",
    "info" : "VariableDeclarationStatement[123888-123908]:VariableDeclarationStatement[125403-125423]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[123917-124120]:TryStatement[125432-125635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123921-124054]:Block[125436-125569]"
  }, {
    "left" : "clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();",
    "right" : "clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();",
    "info" : "ExpressionStatement[123983-124044]:ExpressionStatement[125498-125559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124083-124120]:Block[125598-125635]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[124097-124110]:ReturnStatement[125612-125625]"
  }, {
    "left" : "if (clipboard == null)",
    "right" : "if (clipboard == null)",
    "info" : "IfStatement[124130-124190]:IfStatement[125645-125705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124153-124190]:Block[125668-125705]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[124167-124180]:ReturnStatement[125682-125695]"
  }, {
    "left" : "Transferable transferable = clipboard.getContents(null);",
    "right" : "Transferable transferable = clipboard.getContents(null);",
    "info" : "VariableDeclarationStatement[124200-124256]:VariableDeclarationStatement[125715-125771]"
  }, {
    "left" : "if (transferable == null)",
    "right" : "if (transferable == null)",
    "info" : "IfStatement[124266-124329]:IfStatement[125781-125844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124292-124329]:Block[125807-125844]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[124306-124319]:ReturnStatement[125821-125834]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[124339-126039]:TryStatement[125854-127554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124343-125911]:Block[125858-127426]"
  }, {
    "left" : "@SuppressWarnings(\"deprecation\")\n            Object content = transferable.getTransferData(DataFlavor.plainTextFlavor);",
    "right" : "@SuppressWarnings(\"deprecation\")\n            Object content = transferable.getTransferData(DataFlavor.plainTextFlavor);",
    "info" : "VariableDeclarationStatement[124357-124476]:VariableDeclarationStatement[125872-125991]"
  }, {
    "left" : "if (content == null)",
    "right" : "if (content == null)",
    "info" : "IfStatement[124797-125038]:IfStatement[126312-126553]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124818-125038]:Block[126333-126553]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[124836-125024]:TryStatement[126351-126539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124840-124938]:Block[126355-126453]"
  }, {
    "left" : "content = new DataFlavor().getReaderForText(transferable);",
    "right" : "content = new DataFlavor().getReaderForText(transferable);",
    "info" : "ExpressionStatement[124862-124920]:ExpressionStatement[126377-126435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124975-125024]:Block[126490-126539]"
  }, {
    "left" : "if (content == null)",
    "right" : "if (content == null)",
    "info" : "IfStatement[125052-125118]:IfStatement[126567-126633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[125073-125118]:Block[126588-126633]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[125091-125104]:ReturnStatement[126606-126619]"
  }, {
    "left" : "String value;",
    "right" : "String value;",
    "info" : "VariableDeclarationStatement[125132-125145]:VariableDeclarationStatement[126647-126660]"
  }, {
    "left" : "if (content instanceof Reader)",
    "right" : "if (content instanceof Reader)",
    "info" : "IfStatement[125159-125767]:IfStatement[126674-127282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[125190-125690]:Block[126705-127205]"
  }, {
    "left" : "value = \"\";",
    "right" : "value = \"\";",
    "info" : "ExpressionStatement[125339-125350]:ExpressionStatement[126854-126865]"
  }, {
    "left" : "String line;",
    "right" : "String line;",
    "info" : "VariableDeclarationStatement[125367-125379]:VariableDeclarationStatement[126882-126894]"
  }, {
    "left" : "BufferedReader read = new BufferedReader((Reader) content);",
    "right" : "BufferedReader read = new BufferedReader((Reader) content);",
    "info" : "VariableDeclarationStatement[125397-125456]:VariableDeclarationStatement[126912-126971]"
  }, {
    "left" : "while ((line = read.readLine()) != null)",
    "right" : "while ((line = read.readLine()) != null)",
    "info" : "WhileStatement[125473-125676]:WhileStatement[126988-127191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[125514-125676]:Block[127029-127191]"
  }, {
    "left" : "if (value.length() > 0)",
    "right" : "if (value.length() > 0)",
    "info" : "IfStatement[125536-125622]:IfStatement[127051-127137]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[125560-125622]:Block[127075-127137]"
  }, {
    "left" : "value += \"\\n\";",
    "right" : "value += \"\\n\";",
    "info" : "ExpressionStatement[125586-125600]:ExpressionStatement[127101-127115]"
  }, {
    "left" : "value += line;",
    "right" : "value += line;",
    "info" : "ExpressionStatement[125644-125658]:ExpressionStatement[127159-127173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[125708-125767]:Block[127223-127282]"
  }, {
    "left" : "value = content.toString();",
    "right" : "value = content.toString();",
    "info" : "ExpressionStatement[125726-125753]:ExpressionStatement[127241-127268]"
  }, {
    "left" : "if (value == null)",
    "right" : "if (value == null)",
    "info" : "IfStatement[125781-125844]:IfStatement[127296-127359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[125800-125844]:Block[127315-127359]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[125818-125830]:ReturnStatement[127333-127345]"
  }, {
    "left" : "putString(value);",
    "right" : "putString(value);",
    "info" : "ExpressionStatement[125858-125875]:ExpressionStatement[127373-127390]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[125889-125901]:ReturnStatement[127404-127416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[125957-126039]:Block[127472-127554]"
  }, {
    "left" : "Log.error(\"Paste failed: \", e);",
    "right" : "Log.error(\"Paste failed: \", e);",
    "info" : "ExpressionStatement[125971-126002]:ExpressionStatement[127486-127517]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[126016-126029]:ReturnStatement[127531-127544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126426-126488]:Block[127941-128003]"
  }, {
    "left" : "getKeys().bind(Character.toString(c), listener);",
    "right" : "getKeys().bind(Character.toString(c), listener);",
    "info" : "ExpressionStatement[126434-126482]:ExpressionStatement[127949-127997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126707-128570]:Block[128222-130085]"
  }, {
    "left" : "if (items == null || items.isEmpty())",
    "right" : "if (items == null || items.isEmpty())",
    "info" : "IfStatement[126717-126786]:IfStatement[128232-128301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126755-126786]:Block[128270-128301]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[126769-126776]:ReturnStatement[128284-128291]"
  }, {
    "left" : "int width = getTerminal().getWidth();",
    "right" : "int width = getTerminal().getWidth();",
    "info" : "VariableDeclarationStatement[126796-126833]:VariableDeclarationStatement[128311-128348]"
  }, {
    "left" : "int height = getTerminal().getHeight();",
    "right" : "int height = getTerminal().getHeight();",
    "info" : "VariableDeclarationStatement[126842-126881]:VariableDeclarationStatement[128357-128396]"
  }, {
    "left" : "int maxWidth = 0;",
    "right" : "int maxWidth = 0;",
    "info" : "VariableDeclarationStatement[126891-126908]:VariableDeclarationStatement[128406-128423]"
  }, {
    "left" : "for (CharSequence item : items)",
    "right" : "for (CharSequence item : items)",
    "info" : "EnhancedForStatement[126917-127018]:EnhancedForStatement[128432-128533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126949-127018]:Block[128464-128533]"
  }, {
    "left" : "maxWidth = Math.max(maxWidth, item.length());",
    "right" : "maxWidth = Math.max(maxWidth, item.length());",
    "info" : "ExpressionStatement[126963-127008]:ExpressionStatement[128478-128523]"
  }, {
    "left" : "maxWidth = maxWidth + 3;",
    "right" : "maxWidth = maxWidth + 3;",
    "info" : "ExpressionStatement[127027-127051]:ExpressionStatement[128542-128566]"
  }, {
    "left" : "Log.debug(\"Max width: \", maxWidth);",
    "right" : "Log.debug(\"Max width: \", maxWidth);",
    "info" : "ExpressionStatement[127060-127095]:ExpressionStatement[128575-128610]"
  }, {
    "left" : "int showLines;",
    "right" : "int showLines;",
    "info" : "VariableDeclarationStatement[127105-127119]:VariableDeclarationStatement[128620-128634]"
  }, {
    "left" : "if (isPaginationEnabled())",
    "right" : "if (isPaginationEnabled())",
    "info" : "IfStatement[127128-127284]:IfStatement[128643-128799]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[127155-127216]:Block[128670-128731]"
  }, {
    "left" : "showLines = height - 1;",
    "right" : "showLines = height - 1;",
    "info" : "ExpressionStatement[127169-127192]:ExpressionStatement[128684-128707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[127230-127284]:Block[128745-128799]"
  }, {
    "left" : "showLines = Integer.MAX_VALUE;",
    "right" : "showLines = Integer.MAX_VALUE;",
    "info" : "ExpressionStatement[127244-127274]:ExpressionStatement[128759-128789]"
  }, {
    "left" : "StringBuilder buff = new StringBuilder();",
    "right" : "StringBuilder buff = new StringBuilder();",
    "info" : "VariableDeclarationStatement[127294-127335]:VariableDeclarationStatement[128809-128850]"
  }, {
    "left" : "for (CharSequence item : items)",
    "right" : "for (CharSequence item : items)",
    "info" : "EnhancedForStatement[127344-128493]:EnhancedForStatement[128859-130008]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[127376-128493]:Block[128891-130008]"
  }, {
    "left" : "if ((buff.length() + maxWidth) > width)",
    "right" : "if ((buff.length() + maxWidth) > width)",
    "info" : "IfStatement[127390-128242]:IfStatement[128905-129757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[127430-128242]:Block[128945-129757]"
  }, {
    "left" : "println(buff);",
    "right" : "println(buff);",
    "info" : "ExpressionStatement[127448-127462]:ExpressionStatement[128963-128977]"
  }, {
    "left" : "buff.setLength(0);",
    "right" : "buff.setLength(0);",
    "info" : "ExpressionStatement[127479-127497]:ExpressionStatement[128994-129012]"
  }, {
    "left" : "if (--showLines == 0)",
    "right" : "if (--showLines == 0)",
    "info" : "IfStatement[127515-128228]:IfStatement[129030-129743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[127537-128228]:Block[129052-129743]"
  }, {
    "left" : "print(resources.getString(\"DISPLAY_MORE\"));",
    "right" : "print(resources.getString(\"DISPLAY_MORE\"));",
    "info" : "ExpressionStatement[127591-127634]:ExpressionStatement[129106-129149]"
  }, {
    "left" : "flush();",
    "right" : "flush();",
    "info" : "ExpressionStatement[127655-127663]:ExpressionStatement[129170-129178]"
  }, {
    "left" : "int c = readCharacter();",
    "right" : "int c = readCharacter();",
    "info" : "VariableDeclarationStatement[127684-127708]:VariableDeclarationStatement[129199-129223]"
  }, {
    "left" : "if (c == '\\r' || c == '\\n')",
    "right" : "if (c == '\\r' || c == '\\n')",
    "info" : "IfStatement[127729-128014]:IfStatement[129244-129529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[127757-127863]:Block[129272-129378]"
  }, {
    "left" : "showLines = 1;",
    "right" : "showLines = 1;",
    "info" : "ExpressionStatement[127827-127841]:ExpressionStatement[129342-129356]"
  }, {
    "left" : "if (c != 'q')",
    "right" : "if (c != 'q')",
    "info" : "IfStatement[127889-128014]:IfStatement[129404-129529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[127903-128014]:Block[129418-129529]"
  }, {
    "left" : "showLines = height - 1;",
    "right" : "showLines = height - 1;",
    "info" : "ExpressionStatement[127969-127992]:ExpressionStatement[129484-129507]"
  }, {
    "left" : "back(resources.getString(\"DISPLAY_MORE\").length());",
    "right" : "back(resources.getString(\"DISPLAY_MORE\").length());",
    "info" : "ExpressionStatement[128036-128087]:ExpressionStatement[129551-129602]"
  }, {
    "left" : "if (c == 'q')",
    "right" : "if (c == 'q')",
    "info" : "IfStatement[128108-128210]:IfStatement[129623-129725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[128122-128210]:Block[129637-129725]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[128182-128188]:BreakStatement[129697-129703]"
  }, {
    "left" : "buff.append(item.toString());",
    "right" : "buff.append(item.toString());",
    "info" : "ExpressionStatement[128339-128368]:ExpressionStatement[129854-129883]"
  }, {
    "left" : "for (int i = 0; i < (maxWidth - item.length()); i++)",
    "right" : "for (int i = 0; i < (maxWidth - item.length()); i++)",
    "info" : "ForStatement[128381-128483]:ForStatement[129896-129998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[128434-128483]:Block[129949-129998]"
  }, {
    "left" : "buff.append(' ');",
    "right" : "buff.append(' ');",
    "info" : "ExpressionStatement[128452-128469]:ExpressionStatement[129967-129984]"
  }, {
    "left" : "if (buff.length() > 0)",
    "right" : "if (buff.length() > 0)",
    "info" : "IfStatement[128503-128564]:IfStatement[130018-130079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[128526-128564]:Block[130041-130079]"
  }, {
    "left" : "println(buff);",
    "right" : "println(buff);",
    "info" : "ExpressionStatement[128540-128554]:ExpressionStatement[130055-130069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[128732-129786]:Block[130247-131301]"
  }, {
    "left" : "if (mask != null && maskThread == null)",
    "right" : "if (mask != null && maskThread == null)",
    "info" : "IfStatement[128742-129780]:IfStatement[130257-131295]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[128782-129780]:Block[130297-131295]"
  }, {
    "left" : "final String fullPrompt = \"\\r\" + prompt\n                + \"                 \"\n                + \"                 \"\n                + \"                 \"\n                + \"\\r\" + prompt;",
    "right" : "final String fullPrompt = \"\\r\" + prompt\n                + \"                 \"\n                + \"                 \"\n                + \"                 \"\n                + \"\\r\" + prompt;",
    "info" : "VariableDeclarationStatement[128796-128982]:VariableDeclarationStatement[130311-130497]"
  }, {
    "left" : "maskThread = new Thread()\n            {\n                public void run() {\n                    while (!interrupted()) {\n                        try {\n                            Writer out = getOutput();\n                            out.write(fullPrompt);\n                            out.flush();\n                            sleep(3);\n                        }\n                        catch (IOException e) {\n                            return;\n                        }\n                        catch (InterruptedException e) {\n                            return;\n                        }\n                    }\n                }\n            };",
    "right" : "maskThread = new Thread()\n            {\n                public void run() {\n                    while (!interrupted()) {\n                        try {\n                            Writer out = getOutput();\n                            out.write(fullPrompt);\n                            out.flush();\n                            sleep(3);\n                        }\n                        catch (IOException e) {\n                            return;\n                        }\n                        catch (InterruptedException e) {\n                            return;\n                        }\n                    }\n                }\n            };",
    "info" : "ExpressionStatement[128996-129640]:ExpressionStatement[130511-131155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[129070-129625]:Block[130585-131140]"
  }, {
    "left" : "while (!interrupted())",
    "right" : "while (!interrupted())",
    "info" : "WhileStatement[129092-129607]:WhileStatement[130607-131122]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[129115-129607]:Block[130630-131122]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[129141-129585]:TryStatement[130656-131100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[129145-129356]:Block[130660-130871]"
  }, {
    "left" : "Writer out = getOutput();",
    "right" : "Writer out = getOutput();",
    "info" : "VariableDeclarationStatement[129175-129200]:VariableDeclarationStatement[130690-130715]"
  }, {
    "left" : "out.write(fullPrompt);",
    "right" : "out.write(fullPrompt);",
    "info" : "ExpressionStatement[129229-129251]:ExpressionStatement[130744-130766]"
  }, {
    "left" : "out.flush();",
    "right" : "out.flush();",
    "info" : "ExpressionStatement[129280-129292]:ExpressionStatement[130795-130807]"
  }, {
    "left" : "sleep(3);",
    "right" : "sleep(3);",
    "info" : "ExpressionStatement[129321-129330]:ExpressionStatement[130836-130845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[129403-129466]:Block[130918-130981]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[129433-129440]:ReturnStatement[130948-130955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[129522-129585]:Block[131037-131100]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[129552-129559]:ReturnStatement[131067-131074]"
  }, {
    "left" : "maskThread.setPriority(Thread.MAX_PRIORITY);",
    "right" : "maskThread.setPriority(Thread.MAX_PRIORITY);",
    "info" : "ExpressionStatement[129654-129698]:ExpressionStatement[131169-131213]"
  }, {
    "left" : "maskThread.setDaemon(true);",
    "right" : "maskThread.setDaemon(true);",
    "info" : "ExpressionStatement[129711-129738]:ExpressionStatement[131226-131253]"
  }, {
    "left" : "maskThread.start();",
    "right" : "maskThread.start();",
    "info" : "ExpressionStatement[129751-129770]:ExpressionStatement[131266-131285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[129821-129960]:Block[131336-131475]"
  }, {
    "left" : "if (maskThread != null && maskThread.isAlive())",
    "right" : "if (maskThread != null && maskThread.isAlive())",
    "info" : "IfStatement[129831-129926]:IfStatement[131346-131441]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[129879-129926]:Block[131394-131441]"
  }, {
    "left" : "maskThread.interrupt();",
    "right" : "maskThread.interrupt();",
    "info" : "ExpressionStatement[129893-129916]:ExpressionStatement[131408-131431]"
  }, {
    "left" : "maskThread = null;",
    "right" : "maskThread = null;",
    "info" : "ExpressionStatement[129936-129954]:ExpressionStatement[131451-131469]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[130456-131080]:Block[131971-132595]"
  }, {
    "left" : "moveToEnd();",
    "right" : "moveToEnd();",
    "info" : "ExpressionStatement[130504-130516]:ExpressionStatement[132019-132031]"
  }, {
    "left" : "buf.buffer.append(this.prompt);",
    "right" : "buf.buffer.append(this.prompt);",
    "info" : "ExpressionStatement[130574-130605]:ExpressionStatement[132089-132120]"
  }, {
    "left" : "int promptLength = 0;",
    "right" : "int promptLength = 0;",
    "info" : "VariableDeclarationStatement[130614-130635]:VariableDeclarationStatement[132129-132150]"
  }, {
    "left" : "if (this.prompt != null)",
    "right" : "if (this.prompt != null)",
    "info" : "IfStatement[130644-130729]:IfStatement[132159-132244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[130669-130729]:Block[132184-132244]"
  }, {
    "left" : "promptLength = this.prompt.length();",
    "right" : "promptLength = this.prompt.length();",
    "info" : "ExpressionStatement[130683-130719]:ExpressionStatement[132198-132234]"
  }, {
    "left" : "buf.cursor += promptLength;",
    "right" : "buf.cursor += promptLength;",
    "info" : "ExpressionStatement[130739-130766]:ExpressionStatement[132254-132281]"
  }, {
    "left" : "setPrompt(\"\");",
    "right" : "setPrompt(\"\");",
    "info" : "ExpressionStatement[130775-130789]:ExpressionStatement[132290-132304]"
  }, {
    "left" : "backspaceAll();",
    "right" : "backspaceAll();",
    "info" : "ExpressionStatement[130798-130813]:ExpressionStatement[132313-132328]"
  }, {
    "left" : "setPrompt(prompt);",
    "right" : "setPrompt(prompt);",
    "info" : "ExpressionStatement[130823-130841]:ExpressionStatement[132338-132356]"
  }, {
    "left" : "redrawLine();",
    "right" : "redrawLine();",
    "info" : "ExpressionStatement[130850-130863]:ExpressionStatement[132365-132378]"
  }, {
    "left" : "setBuffer(buffer);",
    "right" : "setBuffer(buffer);",
    "info" : "ExpressionStatement[130872-130890]:ExpressionStatement[132387-132405]"
  }, {
    "left" : "if (cursorDest < 0)",
    "right" : "if (cursorDest < 0)",
    "info" : "IfStatement[130968-131017]:IfStatement[132483-132532]"
  }, {
    "left" : "cursorDest = buffer.length();",
    "right" : "cursorDest = buffer.length();",
    "info" : "ExpressionStatement[130988-131017]:ExpressionStatement[132503-132532]"
  }, {
    "left" : "setCursorPosition(cursorDest);",
    "right" : "setCursorPosition(cursorDest);",
    "info" : "ExpressionStatement[131026-131056]:ExpressionStatement[132541-132571]"
  }, {
    "left" : "flush();",
    "right" : "flush();",
    "info" : "ExpressionStatement[131066-131074]:ExpressionStatement[132581-132589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[131168-131244]:Block[132683-132759]"
  }, {
    "left" : "printSearchStatus(searchTerm, match, \"(reverse-i-search)`\");",
    "right" : "printSearchStatus(searchTerm, match, \"(reverse-i-search)`\");",
    "info" : "ExpressionStatement[131178-131238]:ExpressionStatement[132693-132753]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[131339-131407]:Block[132854-132922]"
  }, {
    "left" : "printSearchStatus(searchTerm, match, \"(i-search)`\");",
    "right" : "printSearchStatus(searchTerm, match, \"(i-search)`\");",
    "info" : "ExpressionStatement[131349-131401]:ExpressionStatement[132864-132916]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[131516-131685]:Block[133031-133200]"
  }, {
    "left" : "String prompt = searchLabel + searchTerm + \"': \";",
    "right" : "String prompt = searchLabel + searchTerm + \"': \";",
    "info" : "VariableDeclarationStatement[131526-131575]:VariableDeclarationStatement[133041-133090]"
  }, {
    "left" : "int cursorDest = match.indexOf(searchTerm);",
    "right" : "int cursorDest = match.indexOf(searchTerm);",
    "info" : "VariableDeclarationStatement[131584-131627]:VariableDeclarationStatement[133099-133142]"
  }, {
    "left" : "resetPromptLine(prompt, match, cursorDest);",
    "right" : "resetPromptLine(prompt, match, cursorDest);",
    "info" : "ExpressionStatement[131636-131679]:ExpressionStatement[133151-133194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[131773-131976]:Block[133288-133491]"
  }, {
    "left" : "String prompt = lastLine(originalPrompt);",
    "right" : "String prompt = lastLine(originalPrompt);",
    "info" : "VariableDeclarationStatement[131829-131870]:VariableDeclarationStatement[133344-133385]"
  }, {
    "left" : "String buffer = buf.buffer.toString();",
    "right" : "String buffer = buf.buffer.toString();",
    "info" : "VariableDeclarationStatement[131879-131917]:VariableDeclarationStatement[133394-133432]"
  }, {
    "left" : "resetPromptLine(prompt, buffer, cursorDest);",
    "right" : "resetPromptLine(prompt, buffer, cursorDest);",
    "info" : "ExpressionStatement[131926-131970]:ExpressionStatement[133441-133485]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[132339-132409]:Block[133854-133924]"
  }, {
    "left" : "return searchBackwards(searchTerm, startIndex, false);",
    "right" : "return searchBackwards(searchTerm, startIndex, false);",
    "info" : "ReturnStatement[132349-132403]:ReturnStatement[133864-133918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[132665-132733]:Block[134180-134248]"
  }, {
    "left" : "return searchBackwards(searchTerm, history.index());",
    "right" : "return searchBackwards(searchTerm, history.index());",
    "info" : "ReturnStatement[132675-132727]:ReturnStatement[134190-134242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[132822-133317]:Block[134337-134832]"
  }, {
    "left" : "ListIterator<History.Entry> it = history.entries(startIndex);",
    "right" : "ListIterator<History.Entry> it = history.entries(startIndex);",
    "info" : "VariableDeclarationStatement[132832-132893]:VariableDeclarationStatement[134347-134408]"
  }, {
    "left" : "while (it.hasPrevious())",
    "right" : "while (it.hasPrevious())",
    "info" : "WhileStatement[132902-133292]:WhileStatement[134417-134807]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[132927-133292]:Block[134442-134807]"
  }, {
    "left" : "History.Entry e = it.previous();",
    "right" : "History.Entry e = it.previous();",
    "info" : "VariableDeclarationStatement[132941-132973]:VariableDeclarationStatement[134456-134488]"
  }, {
    "left" : "if (startsWith)",
    "right" : "if (startsWith)",
    "info" : "IfStatement[132986-133282]:IfStatement[134501-134797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[133002-133140]:Block[134517-134655]"
  }, {
    "left" : "if (e.value().toString().startsWith(searchTerm))",
    "right" : "if (e.value().toString().startsWith(searchTerm))",
    "info" : "IfStatement[133020-133126]:IfStatement[134535-134641]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[133069-133126]:Block[134584-134641]"
  }, {
    "left" : "return e.index();",
    "right" : "return e.index();",
    "info" : "ReturnStatement[133091-133108]:ReturnStatement[134606-134623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[133146-133282]:Block[134661-134797]"
  }, {
    "left" : "if (e.value().toString().contains(searchTerm))",
    "right" : "if (e.value().toString().contains(searchTerm))",
    "info" : "IfStatement[133164-133268]:IfStatement[134679-134783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[133211-133268]:Block[134726-134783]"
  }, {
    "left" : "return e.index();",
    "right" : "return e.index();",
    "info" : "ReturnStatement[133233-133250]:ReturnStatement[134748-134765]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[133301-133311]:ReturnStatement[134816-134826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[133642-133711]:Block[135157-135226]"
  }, {
    "left" : "return searchForwards(searchTerm, startIndex, false);",
    "right" : "return searchForwards(searchTerm, startIndex, false);",
    "info" : "ReturnStatement[133652-133705]:ReturnStatement[135167-135220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[133964-134031]:Block[135479-135546]"
  }, {
    "left" : "return searchForwards(searchTerm, history.index());",
    "right" : "return searchForwards(searchTerm, history.index());",
    "info" : "ReturnStatement[133974-134025]:ReturnStatement[135489-135540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[134118-134789]:Block[135633-136304]"
  }, {
    "left" : "if (startIndex >= history.size())",
    "right" : "if (startIndex >= history.size())",
    "info" : "IfStatement[134128-134218]:IfStatement[135643-135733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[134162-134218]:Block[135677-135733]"
  }, {
    "left" : "startIndex = history.size() - 1;",
    "right" : "startIndex = history.size() - 1;",
    "info" : "ExpressionStatement[134176-134208]:ExpressionStatement[135691-135723]"
  }, {
    "left" : "ListIterator<History.Entry> it = history.entries(startIndex);",
    "right" : "ListIterator<History.Entry> it = history.entries(startIndex);",
    "info" : "VariableDeclarationStatement[134228-134289]:VariableDeclarationStatement[135743-135804]"
  }, {
    "left" : "if (searchIndex != -1 && it.hasNext())",
    "right" : "if (searchIndex != -1 && it.hasNext())",
    "info" : "IfStatement[134299-134372]:IfStatement[135814-135887]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[134338-134372]:Block[135853-135887]"
  }, {
    "left" : "it.next();",
    "right" : "it.next();",
    "info" : "ExpressionStatement[134352-134362]:ExpressionStatement[135867-135877]"
  }, {
    "left" : "while (it.hasNext())",
    "right" : "while (it.hasNext())",
    "info" : "WhileStatement[134382-134764]:WhileStatement[135897-136279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[134403-134764]:Block[135918-136279]"
  }, {
    "left" : "History.Entry e = it.next();",
    "right" : "History.Entry e = it.next();",
    "info" : "VariableDeclarationStatement[134417-134445]:VariableDeclarationStatement[135932-135960]"
  }, {
    "left" : "if (startsWith)",
    "right" : "if (startsWith)",
    "info" : "IfStatement[134458-134754]:IfStatement[135973-136269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[134474-134612]:Block[135989-136127]"
  }, {
    "left" : "if (e.value().toString().startsWith(searchTerm))",
    "right" : "if (e.value().toString().startsWith(searchTerm))",
    "info" : "IfStatement[134492-134598]:IfStatement[136007-136113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[134541-134598]:Block[136056-136113]"
  }, {
    "left" : "return e.index();",
    "right" : "return e.index();",
    "info" : "ReturnStatement[134563-134580]:ReturnStatement[136078-136095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[134618-134754]:Block[136133-136269]"
  }, {
    "left" : "if (e.value().toString().contains(searchTerm))",
    "right" : "if (e.value().toString().contains(searchTerm))",
    "info" : "IfStatement[134636-134740]:IfStatement[136151-136255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[134683-134740]:Block[136198-136255]"
  }, {
    "left" : "return e.index();",
    "right" : "return e.index();",
    "info" : "ReturnStatement[134705-134722]:ReturnStatement[136220-136237]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[134773-134783]:ReturnStatement[136288-136298]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[135126-135179]:Block[136641-136694]"
  }, {
    "left" : "return !Character.isLetterOrDigit(c);",
    "right" : "return !Character.isLetterOrDigit(c);",
    "info" : "ReturnStatement[135136-135173]:ReturnStatement[136651-136688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[135609-135659]:Block[137124-137174]"
  }, {
    "left" : "return Character.isWhitespace (c);",
    "right" : "return Character.isWhitespace (c);",
    "info" : "ReturnStatement[135619-135653]:ReturnStatement[137134-137168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[135732-135849]:Block[137247-137364]"
  }, {
    "left" : "print(27);",
    "right" : "print(27);",
    "info" : "ExpressionStatement[135742-135752]:ExpressionStatement[137257-137267]"
  }, {
    "left" : "print('[');",
    "right" : "print('[');",
    "info" : "ExpressionStatement[135761-135772]:ExpressionStatement[137276-137287]"
  }, {
    "left" : "print(sequence);",
    "right" : "print(sequence);",
    "info" : "ExpressionStatement[135781-135797]:ExpressionStatement[137296-137312]"
  }, {
    "left" : "flush();",
    "right" : "flush();",
    "info" : "ExpressionStatement[135806-135814]:ExpressionStatement[137321-137329]"
  } ]
}