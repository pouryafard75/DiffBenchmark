{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final String MODULE_SLASH = \"/\";",
      "right" : "private static final String MODULE_SLASH = \"/\";",
      "info" : "FieldDeclaration[1575-1622]:FieldDeclaration[1575-1622]"
    }, {
      "left" : "public static final String DEFAULT_FILENAME_PREFIX = \".\" + MODULE_SLASH;",
      "right" : "public static final String DEFAULT_FILENAME_PREFIX = \".\" + MODULE_SLASH;",
      "info" : "FieldDeclaration[1626-1698]:FieldDeclaration[1626-1698]"
    }, {
      "left" : "private static final String MODULE_NAME_SEPARATOR = \"\\\\$\";",
      "right" : "private static final String MODULE_NAME_SEPARATOR = \"\\\\$\";",
      "info" : "FieldDeclaration[1702-1760]:FieldDeclaration[1702-1760]"
    }, {
      "left" : "private static final String MODULE_NAME_PREFIX = \"module$\";",
      "right" : "private static final String MODULE_NAME_PREFIX = \"module$\";",
      "info" : "FieldDeclaration[1763-1822]:FieldDeclaration[1763-1822]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1826-1866]:FieldDeclaration[1826-1866]"
    }, {
      "left" : "private final String filenamePrefix;",
      "right" : "private final String filenamePrefix;",
      "info" : "FieldDeclaration[1869-1905]:FieldDeclaration[1869-1905]"
    }, {
      "left" : "private final boolean reportDependencies;",
      "right" : "private final boolean reportDependencies;",
      "info" : "FieldDeclaration[1908-1949]:FieldDeclaration[1908-1949]"
    }, {
      "left" : "private JSModule module;",
      "right" : "private JSModule module;",
      "info" : "FieldDeclaration[1952-1976]:FieldDeclaration[1952-1976]"
    }, {
      "left" : "ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix)",
      "right" : "ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix)",
      "info" : "MethodDeclaration[1980-2100]:MethodDeclaration[1980-2100]"
    }, {
      "left" : "ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix,\n      boolean reportDependencies)",
      "right" : "ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix,\n      boolean reportDependencies)",
      "info" : "MethodDeclaration[2104-2418]:MethodDeclaration[2104-2418]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[2422-2575]:MethodDeclaration[2422-2575]"
    }, {
      "left" : "String guessCJSModuleName(String filename)",
      "right" : "String guessCJSModuleName(String filename)",
      "info" : "MethodDeclaration[2579-2683]:MethodDeclaration[2579-2683]"
    }, {
      "left" : "JSModule getModule()",
      "right" : "JSModule getModule()",
      "info" : "MethodDeclaration[2687-2838]:MethodDeclaration[2687-2838]"
    }, {
      "left" : "public static String toModuleName(String filename)",
      "right" : "public static String toModuleName(String filename)",
      "info" : "MethodDeclaration[2842-3372]:MethodDeclaration[2842-3372]"
    }, {
      "left" : "public static String toModuleName(String requiredFilename,\n      String currentFilename)",
      "right" : "public static String toModuleName(String requiredFilename,\n      String currentFilename)",
      "info" : "MethodDeclaration[3376-4116]:MethodDeclaration[3376-4116]"
    }, {
      "left" : "private int scriptNodeCount = 0;",
      "right" : "private int scriptNodeCount = 0;",
      "info" : "FieldDeclaration[4595-4627]:FieldDeclaration[4639-4671]"
    }, {
      "left" : "private Set<String> modulesWithExports = Sets.newHashSet();",
      "right" : "private Set<String> modulesWithExports = Sets.newHashSet();",
      "info" : "FieldDeclaration[4632-4691]:FieldDeclaration[4676-4735]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[4697-5200]:MethodDeclaration[4741-5244]"
    }, {
      "left" : "private void visitRequireCall(NodeTraversal t, Node require, Node parent)",
      "right" : "private void visitRequireCall(NodeTraversal t, Node require, Node parent)",
      "info" : "MethodDeclaration[5206-6072]:MethodDeclaration[5250-6116]"
    }, {
      "left" : "private void emitOptionalModuleExportsOverride(Node script,\n        String moduleName)",
      "right" : "private void emitOptionalModuleExportsOverride(Node script,\n        String moduleName)",
      "info" : "MethodDeclaration[7307-7959]:MethodDeclaration[7330-7982]"
    }, {
      "left" : "private void visitModuleExports(Node prop)",
      "right" : "private void visitModuleExports(Node prop)",
      "info" : "MethodDeclaration[7965-8489]:MethodDeclaration[7988-8512]"
    }, {
      "left" : "private Node getCurrentScriptNode(Node n)",
      "right" : "private Node getCurrentScriptNode(Node n)",
      "info" : "MethodDeclaration[8495-8718]:MethodDeclaration[8518-8741]"
    }, {
      "left" : "SuffixVarsCallback",
      "right" : "SuffixVarsCallback",
      "info" : "TypeDeclaration[8726-9626]:TypeDeclaration[8749-9649]"
    }, {
      "left" : "private static final String EXPORTS = \"exports\";",
      "right" : "private static final String EXPORTS = \"exports\";",
      "info" : "FieldDeclaration[8890-8938]:FieldDeclaration[8913-8961]"
    }, {
      "left" : "private final String suffix;",
      "right" : "private final String suffix;",
      "info" : "FieldDeclaration[8944-8972]:FieldDeclaration[8967-8995]"
    }, {
      "left" : "SuffixVarsCallback(String suffix)",
      "right" : "SuffixVarsCallback(String suffix)",
      "info" : "MethodDeclaration[8978-9047]:MethodDeclaration[9001-9070]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[9053-9622]:MethodDeclaration[9076-9645]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2053-2100]:Block[2053-2100]"
    }, {
      "left" : "this(compiler, filenamePrefix, true);",
      "right" : "this(compiler, filenamePrefix, true);",
      "info" : "ConstructorInvocation[2059-2096]:ConstructorInvocation[2059-2096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2211-2418]:Block[2211-2418]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2217-2242]:ExpressionStatement[2217-2242]"
    }, {
      "left" : "this.filenamePrefix = filenamePrefix.endsWith(MODULE_SLASH) ?\n        filenamePrefix : filenamePrefix + MODULE_SLASH;",
      "right" : "this.filenamePrefix = filenamePrefix.endsWith(MODULE_SLASH) ?\n        filenamePrefix : filenamePrefix + MODULE_SLASH;",
      "info" : "ExpressionStatement[2247-2364]:ExpressionStatement[2247-2364]"
    }, {
      "left" : "this.reportDependencies = reportDependencies;",
      "right" : "this.reportDependencies = reportDependencies;",
      "info" : "ExpressionStatement[2369-2414]:ExpressionStatement[2369-2414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2479-2575]:Block[2479-2575]"
    }, {
      "left" : "NodeTraversal\n        .traverse(compiler, root, new ProcessCommonJsModulesCallback());",
      "right" : "NodeTraversal\n        .traverse(compiler, root, new ProcessCommonJsModulesCallback());",
      "info" : "ExpressionStatement[2485-2571]:ExpressionStatement[2485-2571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2622-2683]:Block[2622-2683]"
    }, {
      "left" : "return toModuleName(normalizeSourceName(filename));",
      "right" : "return toModuleName(normalizeSourceName(filename));",
      "info" : "ReturnStatement[2628-2679]:ReturnStatement[2628-2679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2814-2838]:Block[2814-2838]"
    }, {
      "left" : "return module;",
      "right" : "return module;",
      "info" : "ReturnStatement[2820-2834]:ReturnStatement[2820-2834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3129-3372]:Block[3129-3372]"
    }, {
      "left" : "return MODULE_NAME_PREFIX +\n        filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\");",
      "right" : "return MODULE_NAME_PREFIX +\n        filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\");",
      "info" : "ReturnStatement[3135-3368]:ReturnStatement[3135-3368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3600-4116]:Block[3600-4116]"
    }, {
      "left" : "requiredFilename = requiredFilename.replaceAll(\"\\\\.js$\", \"\");",
      "right" : "requiredFilename = requiredFilename.replaceAll(\"\\\\.js$\", \"\");",
      "info" : "ExpressionStatement[3606-3667]:ExpressionStatement[3606-3667]"
    }, {
      "left" : "currentFilename = currentFilename.replaceAll(\"\\\\.js$\", \"\");",
      "right" : "currentFilename = currentFilename.replaceAll(\"\\\\.js$\", \"\");",
      "info" : "ExpressionStatement[3672-3731]:ExpressionStatement[3672-3731]"
    }, {
      "left" : "if (requiredFilename.startsWith(\".\" + MODULE_SLASH) ||\n        requiredFilename.startsWith(\"..\" + MODULE_SLASH))",
      "right" : "if (requiredFilename.startsWith(\".\" + MODULE_SLASH) ||\n        requiredFilename.startsWith(\"..\" + MODULE_SLASH))",
      "info" : "IfStatement[3737-4069]:IfStatement[3737-4069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3850-4069]:Block[3850-4069]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3858-4063]:TryStatement[3858-4063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3862-3985]:Block[3862-3985]"
    }, {
      "left" : "requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename))\n            .toString();",
      "right" : "requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename))\n            .toString();",
      "info" : "ExpressionStatement[3872-3977]:ExpressionStatement[3872-3977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4015-4063]:Block[4015-4063]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[4025-4055]:ThrowStatement[4025-4055]"
    }, {
      "left" : "return toModuleName(requiredFilename);",
      "right" : "return toModuleName(requiredFilename);",
      "info" : "ReturnStatement[4074-4112]:ReturnStatement[4074-4112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4767-5200]:Block[4811-5244]"
    }, {
      "left" : "if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString())",
      "right" : "if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString())",
      "info" : "IfStatement[4775-4979]:IfStatement[4819-5023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4930-4979]:Block[4974-5023]"
    }, {
      "left" : "visitRequireCall(t, n, parent);",
      "right" : "visitRequireCall(t, n, parent);",
      "info" : "ExpressionStatement[4940-4971]:ExpressionStatement[4984-5015]"
    }, {
      "left" : "if (n.isScript())",
      "right" : "if (n.isScript())",
      "info" : "IfStatement[4987-5068]:IfStatement[5031-5112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5005-5068]:Block[5049-5112]"
    }, {
      "left" : "scriptNodeCount++;",
      "right" : "scriptNodeCount++;",
      "info" : "ExpressionStatement[5015-5033]:ExpressionStatement[5059-5077]"
    }, {
      "left" : "visitScript(t, n);",
      "right" : "visitScript(t, n);",
      "info" : "ExpressionStatement[5042-5060]:ExpressionStatement[5086-5104]"
    }, {
      "left" : "if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName()))",
      "right" : "if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName()))",
      "info" : "IfStatement[5076-5194]:IfStatement[5120-5238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5154-5194]:Block[5198-5238]"
    }, {
      "left" : "visitModuleExports(n);",
      "right" : "visitModuleExports(n);",
      "info" : "ExpressionStatement[5164-5186]:ExpressionStatement[5208-5230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5435-6072]:Block[5479-6116]"
    }, {
      "left" : "String moduleName = toModuleName(require.getChildAtIndex(1).getString(),\n          normalizeSourceName(t.getSourceName()));",
      "right" : "String moduleName = toModuleName(require.getChildAtIndex(1).getString(),\n          normalizeSourceName(t.getSourceName()));",
      "info" : "VariableDeclarationStatement[5443-5566]:VariableDeclarationStatement[5487-5610]"
    }, {
      "left" : "Node moduleRef = IR.name(moduleName).srcref(require);",
      "right" : "Node moduleRef = IR.name(moduleName).srcref(require);",
      "info" : "VariableDeclarationStatement[5573-5626]:VariableDeclarationStatement[5617-5670]"
    }, {
      "left" : "parent.replaceChild(require, moduleRef);",
      "right" : "parent.replaceChild(require, moduleRef);",
      "info" : "ExpressionStatement[5633-5673]:ExpressionStatement[5677-5717]"
    }, {
      "left" : "Node script = getCurrentScriptNode(parent);",
      "right" : "Node script = getCurrentScriptNode(parent);",
      "info" : "VariableDeclarationStatement[5680-5723]:VariableDeclarationStatement[5724-5767]"
    }, {
      "left" : "if (reportDependencies)",
      "right" : "if (reportDependencies)",
      "info" : "IfStatement[5730-5808]:IfStatement[5774-5852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5754-5808]:Block[5798-5852]"
    }, {
      "left" : "t.getInput().addRequire(moduleName);",
      "right" : "t.getInput().addRequire(moduleName);",
      "info" : "ExpressionStatement[5764-5800]:ExpressionStatement[5808-5844]"
    }, {
      "left" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"require\")),\n              IR.string(moduleName))).copyInformationFromForTree(require));",
      "right" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"require\")),\n              IR.string(moduleName))).copyInformationFromForTree(require));",
      "info" : "ExpressionStatement[5849-6031]:ExpressionStatement[5893-6075]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[6038-6066]:ExpressionStatement[6082-6110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7542-7959]:Block[7565-7982]"
    }, {
      "left" : "if (!modulesWithExports.contains(moduleName))",
      "right" : "if (!modulesWithExports.contains(moduleName))",
      "info" : "IfStatement[7550-7621]:IfStatement[7573-7644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7596-7621]:Block[7619-7644]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7606-7613]:ReturnStatement[7629-7636]"
    }, {
      "left" : "Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));",
      "right" : "Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));",
      "info" : "VariableDeclarationStatement[7629-7725]:VariableDeclarationStatement[7652-7748]"
    }, {
      "left" : "script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));",
      "right" : "script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));",
      "info" : "ExpressionStatement[7732-7953]:ExpressionStatement[7755-7976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8084-8489]:Block[8107-8512]"
    }, {
      "left" : "String moduleName = guessCJSModuleName(prop.getSourceFileName());",
      "right" : "String moduleName = guessCJSModuleName(prop.getSourceFileName());",
      "info" : "VariableDeclarationStatement[8092-8157]:VariableDeclarationStatement[8115-8180]"
    }, {
      "left" : "Node module = prop.getChildAtIndex(0);",
      "right" : "Node module = prop.getChildAtIndex(0);",
      "info" : "VariableDeclarationStatement[8164-8202]:VariableDeclarationStatement[8187-8225]"
    }, {
      "left" : "module.putProp(Node.ORIGINALNAME_PROP, \"module\");",
      "right" : "module.putProp(Node.ORIGINALNAME_PROP, \"module\");",
      "info" : "ExpressionStatement[8209-8258]:ExpressionStatement[8232-8281]"
    }, {
      "left" : "module.setString(moduleName);",
      "right" : "module.setString(moduleName);",
      "info" : "ExpressionStatement[8265-8294]:ExpressionStatement[8288-8317]"
    }, {
      "left" : "Node exports = prop.getChildAtIndex(1);",
      "right" : "Node exports = prop.getChildAtIndex(1);",
      "info" : "VariableDeclarationStatement[8301-8340]:VariableDeclarationStatement[8324-8363]"
    }, {
      "left" : "exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");",
      "right" : "exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");",
      "info" : "ExpressionStatement[8347-8398]:ExpressionStatement[8370-8421]"
    }, {
      "left" : "exports.setString(\"module$exports\");",
      "right" : "exports.setString(\"module$exports\");",
      "info" : "ExpressionStatement[8405-8441]:ExpressionStatement[8428-8464]"
    }, {
      "left" : "modulesWithExports.add(moduleName);",
      "right" : "modulesWithExports.add(moduleName);",
      "info" : "ExpressionStatement[8448-8483]:ExpressionStatement[8471-8506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8597-8718]:Block[8620-8741]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[8605-8712]:WhileStatement[8628-8735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8618-8712]:Block[8641-8735]"
    }, {
      "left" : "if (n.isScript())",
      "right" : "if (n.isScript())",
      "info" : "IfStatement[8628-8677]:IfStatement[8651-8700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8646-8677]:Block[8669-8700]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8658-8667]:ReturnStatement[8681-8690]"
    }, {
      "left" : "n = n.getParent();",
      "right" : "n = n.getParent();",
      "info" : "ExpressionStatement[8686-8704]:ExpressionStatement[8709-8727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9012-9047]:Block[9035-9070]"
    }, {
      "left" : "this.suffix = suffix;",
      "right" : "this.suffix = suffix;",
      "info" : "ExpressionStatement[9020-9041]:ExpressionStatement[9043-9064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9123-9622]:Block[9146-9645]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[9131-9616]:IfStatement[9154-9639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9147-9616]:Block[9170-9639]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[9157-9185]:VariableDeclarationStatement[9180-9208]"
    }, {
      "left" : "if (suffix.equals(name))",
      "right" : "if (suffix.equals(name))",
      "info" : "IfStatement[9194-9248]:IfStatement[9217-9271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9219-9248]:Block[9242-9271]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9231-9238]:ReturnStatement[9254-9261]"
    }, {
      "left" : "if (EXPORTS.equals(name))",
      "right" : "if (EXPORTS.equals(name))",
      "info" : "IfStatement[9257-9608]:IfStatement[9280-9631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9283-9379]:Block[9306-9402]"
    }, {
      "left" : "n.setString(suffix);",
      "right" : "n.setString(suffix);",
      "info" : "ExpressionStatement[9295-9315]:ExpressionStatement[9318-9338]"
    }, {
      "left" : "n.putProp(Node.ORIGINALNAME_PROP, EXPORTS);",
      "right" : "n.putProp(Node.ORIGINALNAME_PROP, EXPORTS);",
      "info" : "ExpressionStatement[9326-9369]:ExpressionStatement[9349-9392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9385-9608]:Block[9408-9631]"
    }, {
      "left" : "Scope.Var var = t.getScope().getVar(name);",
      "right" : "Scope.Var var = t.getScope().getVar(name);",
      "info" : "VariableDeclarationStatement[9397-9439]:VariableDeclarationStatement[9420-9462]"
    }, {
      "left" : "if (var != null && var.isGlobal())",
      "right" : "if (var != null && var.isGlobal())",
      "info" : "IfStatement[9450-9598]:IfStatement[9473-9621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9485-9598]:Block[9508-9621]"
    }, {
      "left" : "n.setString(name + \"$$\" + suffix);",
      "right" : "n.setString(name + \"$$\" + suffix);",
      "info" : "ExpressionStatement[9499-9533]:ExpressionStatement[9522-9556]"
    }, {
      "left" : "n.putProp(Node.ORIGINALNAME_PROP, name);",
      "right" : "n.putProp(Node.ORIGINALNAME_PROP, name);",
      "info" : "ExpressionStatement[9546-9586]:ExpressionStatement[9569-9609]"
    } ]
  },
  "interFileMappings" : { }
}