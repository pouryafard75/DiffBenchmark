{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CSVPrinter",
      "right" : "CSVPrinter",
      "info" : "TypeDeclaration[1185-17355]:TypeDeclaration[1185-17423]"
    }, {
      "left" : "private final Appendable out;",
      "right" : "private final Appendable out;",
      "info" : "FieldDeclaration[1316-1395]:FieldDeclaration[1316-1395]"
    }, {
      "left" : "private final CSVFormat format;",
      "right" : "private final CSVFormat format;",
      "info" : "FieldDeclaration[1400-1431]:FieldDeclaration[1400-1431]"
    }, {
      "left" : "private boolean newRecord = true;",
      "right" : "private boolean newRecord = true;",
      "info" : "FieldDeclaration[1437-1517]:FieldDeclaration[1437-1517]"
    }, {
      "left" : "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException",
      "right" : "public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[1523-3062]:MethodDeclaration[1523-3062]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[3224-3373]:MethodDeclaration[3224-3373]"
    }, {
      "left" : "public void flush() throws IOException",
      "right" : "public void flush() throws IOException",
      "info" : "MethodDeclaration[3379-3658]:MethodDeclaration[3379-3658]"
    }, {
      "left" : "public Appendable getOut()",
      "right" : "public Appendable getOut()",
      "info" : "MethodDeclaration[3664-3819]:MethodDeclaration[3664-3819]"
    }, {
      "left" : "public void print(final Object value) throws IOException",
      "right" : "public void print(final Object value) throws IOException",
      "info" : "MethodDeclaration[3825-4509]:MethodDeclaration[3825-4509]"
    }, {
      "left" : "private void print(final Object object, final CharSequence value, final int offset, final int len)\n            throws IOException",
      "right" : "private void print(final Object object, final CharSequence value, final int offset, final int len)\n            throws IOException",
      "info" : "MethodDeclaration[4515-5110]:MethodDeclaration[4515-5178]"
    }, {
      "left" : "private void printAndEscape(final CharSequence value, final int offset, final int len) throws IOException",
      "right" : "private void printAndEscape(final CharSequence value, final int offset, final int len) throws IOException",
      "info" : "MethodDeclaration[5216-6283]:MethodDeclaration[5284-6351]"
    }, {
      "left" : "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len)\n            throws IOException",
      "right" : "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len)\n            throws IOException",
      "info" : "MethodDeclaration[6449-10462]:MethodDeclaration[6517-10530]"
    }, {
      "left" : "public void printComment(final String comment) throws IOException",
      "right" : "public void printComment(final String comment) throws IOException",
      "info" : "MethodDeclaration[10468-11936]:MethodDeclaration[10536-12004]"
    }, {
      "left" : "public void println() throws IOException",
      "right" : "public void println() throws IOException",
      "info" : "MethodDeclaration[11942-12303]:MethodDeclaration[12010-12371]"
    }, {
      "left" : "public void printRecord(final Iterable<?> values) throws IOException",
      "right" : "public void printRecord(final Iterable<?> values) throws IOException",
      "info" : "MethodDeclaration[12309-12999]:MethodDeclaration[12377-13067]"
    }, {
      "left" : "public void printRecord(final Object... values) throws IOException",
      "right" : "public void printRecord(final Object... values) throws IOException",
      "info" : "MethodDeclaration[13005-13693]:MethodDeclaration[13073-13761]"
    }, {
      "left" : "public void printRecords(final Iterable<?> values) throws IOException",
      "right" : "public void printRecords(final Iterable<?> values) throws IOException",
      "info" : "MethodDeclaration[13699-15199]:MethodDeclaration[13767-15267]"
    }, {
      "left" : "public void printRecords(final Object... values) throws IOException",
      "right" : "public void printRecords(final Object... values) throws IOException",
      "info" : "MethodDeclaration[15205-16692]:MethodDeclaration[15273-16760]"
    }, {
      "left" : "public void printRecords(final ResultSet resultSet) throws SQLException, IOException",
      "right" : "public void printRecords(final ResultSet resultSet) throws SQLException, IOException",
      "info" : "MethodDeclaration[16698-17353]:MethodDeclaration[16766-17421]"
    } ],
    "mappings" : [
 {
      "left" : "Flushable",
      "right" : "Flushable",
      "info" : "SimpleType[1288-1297]:SimpleType[1288-1297]"
    }, {
      "left" : "Closeable",
      "right" : "Closeable",
      "info" : "SimpleType[1299-1308]:SimpleType[1299-1308]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2250-2256]:Modifier[2250-2256]"
    }, {
      "left" : "CSVPrinter",
      "right" : "CSVPrinter",
      "info" : "SimpleName[2257-2267]:SimpleName[2257-2267]"
    }, {
      "left" : "final Appendable out",
      "right" : "final Appendable out",
      "info" : "SingleVariableDeclaration[2268-2288]:SingleVariableDeclaration[2268-2288]"
    }, {
      "left" : "final CSVFormat format",
      "right" : "final CSVFormat format",
      "info" : "SingleVariableDeclaration[2290-2312]:SingleVariableDeclaration[2290-2312]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2321-2332]:SimpleType[2321-2332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2333-3062]:Block[2333-3062]"
    }, {
      "left" : "Assertions.notNull(out, \"out\");",
      "right" : "Assertions.notNull(out, \"out\");",
      "info" : "ExpressionStatement[2343-2374]:ExpressionStatement[2343-2374]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[2383-2420]:ExpressionStatement[2383-2420]"
    }, {
      "left" : "this.out = out;",
      "right" : "this.out = out;",
      "info" : "ExpressionStatement[2430-2445]:ExpressionStatement[2430-2445]"
    }, {
      "left" : "this.format = format;",
      "right" : "this.format = format;",
      "info" : "ExpressionStatement[2454-2475]:ExpressionStatement[2454-2475]"
    }, {
      "left" : "if (format.getHeaderComments() != null)",
      "right" : "if (format.getHeaderComments() != null)",
      "info" : "IfStatement[2679-2910]:IfStatement[2679-2910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2719-2910]:Block[2719-2910]"
    }, {
      "left" : "for (final String line : format.getHeaderComments())",
      "right" : "for (final String line : format.getHeaderComments())",
      "info" : "EnhancedForStatement[2733-2900]:EnhancedForStatement[2733-2900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2786-2900]:Block[2786-2900]"
    }, {
      "left" : "if (line != null)",
      "right" : "if (line != null)",
      "info" : "IfStatement[2804-2886]:IfStatement[2804-2886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2822-2886]:Block[2822-2886]"
    }, {
      "left" : "this.printComment(line);",
      "right" : "this.printComment(line);",
      "info" : "ExpressionStatement[2844-2868]:ExpressionStatement[2844-2868]"
    }, {
      "left" : "if (format.getHeader() != null && !format.getSkipHeaderRecord())",
      "right" : "if (format.getHeader() != null && !format.getSkipHeaderRecord())",
      "info" : "IfStatement[2919-3056]:IfStatement[2919-3056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2984-3056]:Block[2984-3056]"
    }, {
      "left" : "this.printRecord((Object[]) format.getHeader());",
      "right" : "this.printRecord((Object[]) format.getHeader());",
      "info" : "ExpressionStatement[2998-3046]:ExpressionStatement[2998-3046]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3224-3233]:MarkerAnnotation[3224-3233]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3238-3244]:Modifier[3238-3244]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3245-3249]:PrimitiveType[3245-3249]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[3250-3255]:SimpleName[3250-3255]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3265-3276]:SimpleType[3265-3276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3277-3373]:Block[3277-3373]"
    }, {
      "left" : "if (out instanceof Closeable)",
      "right" : "if (out instanceof Closeable)",
      "info" : "IfStatement[3287-3367]:IfStatement[3287-3367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3317-3367]:Block[3317-3367]"
    }, {
      "left" : "((Closeable) out).close();",
      "right" : "((Closeable) out).close();",
      "info" : "ExpressionStatement[3331-3357]:ExpressionStatement[3331-3357]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3509-3518]:MarkerAnnotation[3509-3518]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3523-3529]:Modifier[3523-3529]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3530-3534]:PrimitiveType[3530-3534]"
    }, {
      "left" : "flush",
      "right" : "flush",
      "info" : "SimpleName[3535-3540]:SimpleName[3535-3540]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3550-3561]:SimpleType[3550-3561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3562-3658]:Block[3562-3658]"
    }, {
      "left" : "if (out instanceof Flushable)",
      "right" : "if (out instanceof Flushable)",
      "info" : "IfStatement[3572-3652]:IfStatement[3572-3652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3602-3652]:Block[3602-3652]"
    }, {
      "left" : "((Flushable) out).flush();",
      "right" : "((Flushable) out).flush();",
      "info" : "ExpressionStatement[3616-3642]:ExpressionStatement[3616-3642]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3760-3766]:Modifier[3760-3766]"
    }, {
      "left" : "Appendable",
      "right" : "Appendable",
      "info" : "SimpleType[3767-3777]:SimpleType[3767-3777]"
    }, {
      "left" : "getOut",
      "right" : "getOut",
      "info" : "SimpleName[3778-3784]:SimpleName[3778-3784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3787-3819]:Block[3787-3819]"
    }, {
      "left" : "return this.out;",
      "right" : "return this.out;",
      "info" : "ReturnStatement[3797-3813]:ReturnStatement[3797-3813]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4084-4090]:Modifier[4084-4090]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4091-4095]:PrimitiveType[4091-4095]"
    }, {
      "left" : "print",
      "right" : "print",
      "info" : "SimpleName[4096-4101]:SimpleName[4096-4101]"
    }, {
      "left" : "final Object value",
      "right" : "final Object value",
      "info" : "SingleVariableDeclaration[4102-4120]:SingleVariableDeclaration[4102-4120]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4129-4140]:SimpleType[4129-4140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4141-4509]:Block[4141-4509]"
    }, {
      "left" : "String strValue;",
      "right" : "String strValue;",
      "info" : "VariableDeclarationStatement[4195-4211]:VariableDeclarationStatement[4195-4211]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[4220-4444]:IfStatement[4220-4444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4239-4386]:Block[4239-4386]"
    }, {
      "left" : "final String nullString = format.getNullString();",
      "right" : "final String nullString = format.getNullString();",
      "info" : "VariableDeclarationStatement[4253-4302]:VariableDeclarationStatement[4253-4302]"
    }, {
      "left" : "strValue = nullString == null ? Constants.EMPTY : nullString;",
      "right" : "strValue = nullString == null ? Constants.EMPTY : nullString;",
      "info" : "ExpressionStatement[4315-4376]:ExpressionStatement[4315-4376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4392-4444]:Block[4392-4444]"
    }, {
      "left" : "strValue = value.toString();",
      "right" : "strValue = value.toString();",
      "info" : "ExpressionStatement[4406-4434]:ExpressionStatement[4406-4434]"
    }, {
      "left" : "this.print(value, strValue, 0, strValue.length());",
      "right" : "this.print(value, strValue, 0, strValue.length());",
      "info" : "ExpressionStatement[4453-4503]:ExpressionStatement[4453-4503]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4515-4522]:Modifier[4515-4522]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4523-4527]:PrimitiveType[4523-4527]"
    }, {
      "left" : "print",
      "right" : "print",
      "info" : "SimpleName[4528-4533]:SimpleName[4528-4533]"
    }, {
      "left" : "final Object object",
      "right" : "final Object object",
      "info" : "SingleVariableDeclaration[4534-4553]:SingleVariableDeclaration[4534-4553]"
    }, {
      "left" : "final CharSequence value",
      "right" : "final CharSequence value",
      "info" : "SingleVariableDeclaration[4555-4579]:SingleVariableDeclaration[4555-4579]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[4581-4597]:SingleVariableDeclaration[4581-4597]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[4599-4612]:SingleVariableDeclaration[4599-4612]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4633-4644]:SimpleType[4633-4644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4645-5110]:Block[4645-5178]"
    }, {
      "left" : "if (!newRecord)",
      "right" : "if (!newRecord)",
      "info" : "IfStatement[4655-4729]:IfStatement[4655-4729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4671-4729]:Block[4671-4729]"
    }, {
      "left" : "out.append(format.getDelimiter());",
      "right" : "out.append(format.getDelimiter());",
      "info" : "ExpressionStatement[4685-4719]:ExpressionStatement[4685-4719]"
    }, {
      "left" : "if (format.isQuoteCharacterSet())",
      "right" : "if (format.isQuoteCharacterSet())",
      "info" : "IfStatement[4738-5077]:IfStatement[4806-5145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4772-4907]:Block[4840-4975]"
    }, {
      "left" : "printAndQuote(object, value, offset, len);",
      "right" : "printAndQuote(object, value, offset, len);",
      "info" : "ExpressionStatement[4855-4897]:ExpressionStatement[4923-4965]"
    }, {
      "left" : "if (format.isEscapeCharacterSet())",
      "right" : "if (format.isEscapeCharacterSet())",
      "info" : "IfStatement[4913-5077]:IfStatement[4981-5145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4948-5007]:Block[5016-5075]"
    }, {
      "left" : "printAndEscape(value, offset, len);",
      "right" : "printAndEscape(value, offset, len);",
      "info" : "ExpressionStatement[4962-4997]:ExpressionStatement[5030-5065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5013-5077]:Block[5081-5145]"
    }, {
      "left" : "out.append(value, offset, offset + len);",
      "right" : "out.append(value, offset, offset + len);",
      "info" : "ExpressionStatement[5027-5067]:ExpressionStatement[5095-5135]"
    }, {
      "left" : "newRecord = false;",
      "right" : "newRecord = false;",
      "info" : "ExpressionStatement[5086-5104]:ExpressionStatement[5154-5172]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5216-5223]:Modifier[5284-5291]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5224-5228]:PrimitiveType[5292-5296]"
    }, {
      "left" : "printAndEscape",
      "right" : "printAndEscape",
      "info" : "SimpleName[5229-5243]:SimpleName[5297-5311]"
    }, {
      "left" : "final CharSequence value",
      "right" : "final CharSequence value",
      "info" : "SingleVariableDeclaration[5244-5268]:SingleVariableDeclaration[5312-5336]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[5270-5286]:SingleVariableDeclaration[5338-5354]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[5288-5301]:SingleVariableDeclaration[5356-5369]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5310-5321]:SimpleType[5378-5389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5322-6283]:Block[5390-6351]"
    }, {
      "left" : "int start = offset;",
      "right" : "int start = offset;",
      "info" : "VariableDeclarationStatement[5332-5351]:VariableDeclarationStatement[5400-5419]"
    }, {
      "left" : "int pos = offset;",
      "right" : "int pos = offset;",
      "info" : "VariableDeclarationStatement[5360-5377]:VariableDeclarationStatement[5428-5445]"
    }, {
      "left" : "final int end = offset + len;",
      "right" : "final int end = offset + len;",
      "info" : "VariableDeclarationStatement[5386-5415]:VariableDeclarationStatement[5454-5483]"
    }, {
      "left" : "final char delim = format.getDelimiter();",
      "right" : "final char delim = format.getDelimiter();",
      "info" : "VariableDeclarationStatement[5425-5466]:VariableDeclarationStatement[5493-5534]"
    }, {
      "left" : "final char escape = format.getEscapeCharacter().charValue();",
      "right" : "final char escape = format.getEscapeCharacter().charValue();",
      "info" : "VariableDeclarationStatement[5475-5535]:VariableDeclarationStatement[5543-5603]"
    }, {
      "left" : "while (pos < end)",
      "right" : "while (pos < end)",
      "info" : "WhileStatement[5545-6166]:WhileStatement[5613-6234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5563-6166]:Block[5631-6234]"
    }, {
      "left" : "char c = value.charAt(pos);",
      "right" : "char c = value.charAt(pos);",
      "info" : "VariableDeclarationStatement[5577-5604]:VariableDeclarationStatement[5645-5672]"
    }, {
      "left" : "if (c == CR || c == LF || c == delim || c == escape)",
      "right" : "if (c == CR || c == LF || c == delim || c == escape)",
      "info" : "IfStatement[5617-6136]:IfStatement[5685-6204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5670-6136]:Block[5738-6204]"
    }, {
      "left" : "if (pos > start)",
      "right" : "if (pos > start)",
      "info" : "IfStatement[5744-5831]:IfStatement[5812-5899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5761-5831]:Block[5829-5899]"
    }, {
      "left" : "out.append(value, start, pos);",
      "right" : "out.append(value, start, pos);",
      "info" : "ExpressionStatement[5783-5813]:ExpressionStatement[5851-5881]"
    }, {
      "left" : "if (c == LF)",
      "right" : "if (c == LF)",
      "info" : "IfStatement[5848-5976]:IfStatement[5916-6044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5861-5909]:Block[5929-5977]"
    }, {
      "left" : "c = 'n';",
      "right" : "c = 'n';",
      "info" : "ExpressionStatement[5883-5891]:ExpressionStatement[5951-5959]"
    }, {
      "left" : "if (c == CR)",
      "right" : "if (c == CR)",
      "info" : "IfStatement[5915-5976]:IfStatement[5983-6044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5928-5976]:Block[5996-6044]"
    }, {
      "left" : "c = 'r';",
      "right" : "c = 'r';",
      "info" : "ExpressionStatement[5950-5958]:ExpressionStatement[6018-6026]"
    }, {
      "left" : "out.append(escape);",
      "right" : "out.append(escape);",
      "info" : "ExpressionStatement[5994-6013]:ExpressionStatement[6062-6081]"
    }, {
      "left" : "out.append(c);",
      "right" : "out.append(c);",
      "info" : "ExpressionStatement[6030-6044]:ExpressionStatement[6098-6112]"
    }, {
      "left" : "start = pos + 1;",
      "right" : "start = pos + 1;",
      "info" : "ExpressionStatement[6062-6078]:ExpressionStatement[6130-6146]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[6150-6156]:ExpressionStatement[6218-6224]"
    }, {
      "left" : "if (pos > start)",
      "right" : "if (pos > start)",
      "info" : "IfStatement[6206-6277]:IfStatement[6274-6345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6223-6277]:Block[6291-6345]"
    }, {
      "left" : "out.append(value, start, pos);",
      "right" : "out.append(value, start, pos);",
      "info" : "ExpressionStatement[6237-6267]:ExpressionStatement[6305-6335]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6449-6456]:Modifier[6517-6524]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6457-6461]:PrimitiveType[6525-6529]"
    }, {
      "left" : "printAndQuote",
      "right" : "printAndQuote",
      "info" : "SimpleName[6462-6475]:SimpleName[6530-6543]"
    }, {
      "left" : "final Object object",
      "right" : "final Object object",
      "info" : "SingleVariableDeclaration[6476-6495]:SingleVariableDeclaration[6544-6563]"
    }, {
      "left" : "final CharSequence value",
      "right" : "final CharSequence value",
      "info" : "SingleVariableDeclaration[6497-6521]:SingleVariableDeclaration[6565-6589]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[6523-6539]:SingleVariableDeclaration[6591-6607]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[6541-6554]:SingleVariableDeclaration[6609-6622]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6575-6586]:SimpleType[6643-6654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6587-10462]:Block[6655-10530]"
    }, {
      "left" : "boolean quote = false;",
      "right" : "boolean quote = false;",
      "info" : "VariableDeclarationStatement[6597-6619]:VariableDeclarationStatement[6665-6687]"
    }, {
      "left" : "int start = offset;",
      "right" : "int start = offset;",
      "info" : "VariableDeclarationStatement[6628-6647]:VariableDeclarationStatement[6696-6715]"
    }, {
      "left" : "int pos = offset;",
      "right" : "int pos = offset;",
      "info" : "VariableDeclarationStatement[6656-6673]:VariableDeclarationStatement[6724-6741]"
    }, {
      "left" : "final int end = offset + len;",
      "right" : "final int end = offset + len;",
      "info" : "VariableDeclarationStatement[6682-6711]:VariableDeclarationStatement[6750-6779]"
    }, {
      "left" : "final char delimChar = format.getDelimiter();",
      "right" : "final char delimChar = format.getDelimiter();",
      "info" : "VariableDeclarationStatement[6721-6766]:VariableDeclarationStatement[6789-6834]"
    }, {
      "left" : "final char quoteChar = format.getQuoteCharacter().charValue();",
      "right" : "final char quoteChar = format.getQuoteCharacter().charValue();",
      "info" : "VariableDeclarationStatement[6775-6837]:VariableDeclarationStatement[6843-6905]"
    }, {
      "left" : "QuoteMode quoteModePolicy = format.getQuoteMode();",
      "right" : "QuoteMode quoteModePolicy = format.getQuoteMode();",
      "info" : "VariableDeclarationStatement[6847-6897]:VariableDeclarationStatement[6915-6965]"
    }, {
      "left" : "if (quoteModePolicy == null)",
      "right" : "if (quoteModePolicy == null)",
      "info" : "IfStatement[6906-6995]:IfStatement[6974-7063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6935-6995]:Block[7003-7063]"
    }, {
      "left" : "quoteModePolicy = QuoteMode.MINIMAL;",
      "right" : "quoteModePolicy = QuoteMode.MINIMAL;",
      "info" : "ExpressionStatement[6949-6985]:ExpressionStatement[7017-7053]"
    }, {
      "left" : "switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                // TODO where did this rule come from?\n                if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n                    quote = true;\n                } else if (c <= COMMENT) {\n                    // Some other chars at the start of a value caused the parser to fail, so for now\n                    // encapsulate if we start in anything less than '#'. We are being conservative\n                    // by including the default comment char too.\n                    quote = true;\n                } else {\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        pos = end - 1;\n                        c = value.charAt(pos);\n                        // Some other chars at the end caused the parser to fail, so for now\n                        // encapsulate if we end in anything less than ' '\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n        }",
      "right" : "switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                // TODO where did this rule come from?\n                if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n                    quote = true;\n                } else if (c <= COMMENT) {\n                    // Some other chars at the start of a value caused the parser to fail, so for now\n                    // encapsulate if we start in anything less than '#'. We are being conservative\n                    // by including the default comment char too.\n                    quote = true;\n                } else {\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        pos = end - 1;\n                        c = value.charAt(pos);\n                        // Some other chars at the end caused the parser to fail, so for now\n                        // encapsulate if we end in anything less than ' '\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n        }",
      "info" : "SwitchStatement[7004-9430]:SwitchStatement[7072-9498]"
    }, {
      "left" : "case ALL:",
      "right" : "case ALL:",
      "info" : "SwitchCase[7039-7048]:SwitchCase[7107-7116]"
    }, {
      "left" : "quote = true;",
      "right" : "quote = true;",
      "info" : "ExpressionStatement[7061-7074]:ExpressionStatement[7129-7142]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7087-7093]:BreakStatement[7155-7161]"
    }, {
      "left" : "case NON_NUMERIC:",
      "right" : "case NON_NUMERIC:",
      "info" : "SwitchCase[7102-7119]:SwitchCase[7170-7187]"
    }, {
      "left" : "quote = !(object instanceof Number);",
      "right" : "quote = !(object instanceof Number);",
      "info" : "ExpressionStatement[7132-7168]:ExpressionStatement[7200-7236]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7181-7187]:BreakStatement[7249-7255]"
    }, {
      "left" : "case NONE:",
      "right" : "case NONE:",
      "info" : "SwitchCase[7196-7206]:SwitchCase[7264-7274]"
    }, {
      "left" : "printAndEscape(value, offset, len);",
      "right" : "printAndEscape(value, offset, len);",
      "info" : "ExpressionStatement[7265-7300]:ExpressionStatement[7333-7368]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7313-7320]:ReturnStatement[7381-7388]"
    }, {
      "left" : "case MINIMAL:",
      "right" : "case MINIMAL:",
      "info" : "SwitchCase[7329-7342]:SwitchCase[7397-7410]"
    }, {
      "left" : "if (len <= 0)",
      "right" : "if (len <= 0)",
      "info" : "IfStatement[7355-9107]:IfStatement[7423-9175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7369-7710]:Block[7437-7778]"
    }, {
      "left" : "if (newRecord)",
      "right" : "if (newRecord)",
      "info" : "IfStatement[7628-7696]:IfStatement[7696-7764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7643-7696]:Block[7711-7764]"
    }, {
      "left" : "quote = true;",
      "right" : "quote = true;",
      "info" : "ExpressionStatement[7665-7678]:ExpressionStatement[7733-7746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7716-9107]:Block[7784-9175]"
    }, {
      "left" : "char c = value.charAt(pos);",
      "right" : "char c = value.charAt(pos);",
      "info" : "VariableDeclarationStatement[7734-7761]:VariableDeclarationStatement[7802-7829]"
    }, {
      "left" : "if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z')))",
      "right" : "if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z')))",
      "info" : "IfStatement[7834-9093]:IfStatement[7902-9161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7923-7976]:Block[7991-8044]"
    }, {
      "left" : "quote = true;",
      "right" : "quote = true;",
      "info" : "ExpressionStatement[7945-7958]:ExpressionStatement[8013-8026]"
    }, {
      "left" : "if (c <= COMMENT)",
      "right" : "if (c <= COMMENT)",
      "info" : "IfStatement[7982-9093]:IfStatement[8050-9161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8000-8321]:Block[8068-8389]"
    }, {
      "left" : "quote = true;",
      "right" : "quote = true;",
      "info" : "ExpressionStatement[8290-8303]:ExpressionStatement[8358-8371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8327-9093]:Block[8395-9161]"
    }, {
      "left" : "while (pos < end)",
      "right" : "while (pos < end)",
      "info" : "WhileStatement[8349-8657]:WhileStatement[8417-8725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8367-8657]:Block[8435-8725]"
    }, {
      "left" : "c = value.charAt(pos);",
      "right" : "c = value.charAt(pos);",
      "info" : "ExpressionStatement[8393-8415]:ExpressionStatement[8461-8483]"
    }, {
      "left" : "if (c == LF || c == CR || c == quoteChar || c == delimChar)",
      "right" : "if (c == LF || c == CR || c == quoteChar || c == delimChar)",
      "info" : "IfStatement[8440-8604]:IfStatement[8508-8672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8500-8604]:Block[8568-8672]"
    }, {
      "left" : "quote = true;",
      "right" : "quote = true;",
      "info" : "ExpressionStatement[8530-8543]:ExpressionStatement[8598-8611]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8572-8578]:BreakStatement[8640-8646]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[8629-8635]:ExpressionStatement[8697-8703]"
    }, {
      "left" : "if (!quote)",
      "right" : "if (!quote)",
      "info" : "IfStatement[8679-9075]:IfStatement[8747-9143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8691-9075]:Block[8759-9143]"
    }, {
      "left" : "pos = end - 1;",
      "right" : "pos = end - 1;",
      "info" : "ExpressionStatement[8717-8731]:ExpressionStatement[8785-8799]"
    }, {
      "left" : "c = value.charAt(pos);",
      "right" : "c = value.charAt(pos);",
      "info" : "ExpressionStatement[8756-8778]:ExpressionStatement[8824-8846]"
    }, {
      "left" : "if (c <= SP)",
      "right" : "if (c <= SP)",
      "info" : "IfStatement[8971-9053]:IfStatement[9039-9121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8984-9053]:Block[9052-9121]"
    }, {
      "left" : "quote = true;",
      "right" : "quote = true;",
      "info" : "ExpressionStatement[9014-9027]:ExpressionStatement[9082-9095]"
    }, {
      "left" : "if (!quote)",
      "right" : "if (!quote)",
      "info" : "IfStatement[9121-9293]:IfStatement[9189-9361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9133-9293]:Block[9201-9361]"
    }, {
      "left" : "out.append(value, start, end);",
      "right" : "out.append(value, start, end);",
      "info" : "ExpressionStatement[9225-9255]:ExpressionStatement[9293-9323]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9272-9279]:ReturnStatement[9340-9347]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9306-9312]:BreakStatement[9374-9380]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9321-9329]:SwitchCase[9389-9397]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);",
      "right" : "throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);",
      "info" : "ThrowStatement[9342-9420]:ThrowStatement[9410-9488]"
    }, {
      "left" : "if (!quote)",
      "right" : "if (!quote)",
      "info" : "IfStatement[9440-9596]:IfStatement[9508-9664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9452-9596]:Block[9520-9664]"
    }, {
      "left" : "out.append(value, start, end);",
      "right" : "out.append(value, start, end);",
      "info" : "ExpressionStatement[9536-9566]:ExpressionStatement[9604-9634]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9579-9586]:ReturnStatement[9647-9654]"
    }, {
      "left" : "out.append(quoteChar);",
      "right" : "out.append(quoteChar);",
      "info" : "ExpressionStatement[9660-9682]:ExpressionStatement[9728-9750]"
    }, {
      "left" : "while (pos < end)",
      "right" : "while (pos < end)",
      "info" : "WhileStatement[9829-10351]:WhileStatement[9897-10419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9847-10351]:Block[9915-10419]"
    }, {
      "left" : "final char c = value.charAt(pos);",
      "right" : "final char c = value.charAt(pos);",
      "info" : "VariableDeclarationStatement[9861-9894]:VariableDeclarationStatement[9929-9962]"
    }, {
      "left" : "if (c == quoteChar)",
      "right" : "if (c == quoteChar)",
      "info" : "IfStatement[9907-10322]:IfStatement[9975-10390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9927-10322]:Block[9995-10390]"
    }, {
      "left" : "out.append(value, start, pos + 1);",
      "right" : "out.append(value, start, pos + 1);",
      "info" : "ExpressionStatement[10079-10113]:ExpressionStatement[10147-10181]"
    }, {
      "left" : "start = pos;",
      "right" : "start = pos;",
      "info" : "ExpressionStatement[10296-10308]:ExpressionStatement[10364-10376]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[10335-10341]:ExpressionStatement[10403-10409]"
    }, {
      "left" : "out.append(value, start, pos);",
      "right" : "out.append(value, start, pos);",
      "info" : "ExpressionStatement[10395-10425]:ExpressionStatement[10463-10493]"
    }, {
      "left" : "out.append(quoteChar);",
      "right" : "out.append(quoteChar);",
      "info" : "ExpressionStatement[10434-10456]:ExpressionStatement[10502-10524]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11029-11035]:Modifier[11097-11103]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11036-11040]:PrimitiveType[11104-11108]"
    }, {
      "left" : "printComment",
      "right" : "printComment",
      "info" : "SimpleName[11041-11053]:SimpleName[11109-11121]"
    }, {
      "left" : "final String comment",
      "right" : "final String comment",
      "info" : "SingleVariableDeclaration[11054-11074]:SingleVariableDeclaration[11122-11142]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11083-11094]:SimpleType[11151-11162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11095-11936]:Block[11163-12004]"
    }, {
      "left" : "if (!format.isCommentMarkerSet())",
      "right" : "if (!format.isCommentMarkerSet())",
      "info" : "IfStatement[11105-11170]:IfStatement[11173-11238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11139-11170]:Block[11207-11238]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11153-11160]:ReturnStatement[11221-11228]"
    }, {
      "left" : "if (!newRecord)",
      "right" : "if (!newRecord)",
      "info" : "IfStatement[11179-11229]:IfStatement[11247-11297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11195-11229]:Block[11263-11297]"
    }, {
      "left" : "println();",
      "right" : "println();",
      "info" : "ExpressionStatement[11209-11219]:ExpressionStatement[11277-11287]"
    }, {
      "left" : "out.append(format.getCommentMarker().charValue());",
      "right" : "out.append(format.getCommentMarker().charValue());",
      "info" : "ExpressionStatement[11238-11288]:ExpressionStatement[11306-11356]"
    }, {
      "left" : "out.append(SP);",
      "right" : "out.append(SP);",
      "info" : "ExpressionStatement[11297-11312]:ExpressionStatement[11365-11380]"
    }, {
      "left" : "for (int i = 0; i < comment.length(); i++)",
      "right" : "for (int i = 0; i < comment.length(); i++)",
      "info" : "ForStatement[11321-11911]:ForStatement[11389-11979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11364-11911]:Block[11432-11979]"
    }, {
      "left" : "final char c = comment.charAt(i);",
      "right" : "final char c = comment.charAt(i);",
      "info" : "VariableDeclarationStatement[11378-11411]:VariableDeclarationStatement[11446-11479]"
    }, {
      "left" : "switch (c) {\n            case CR:\n                if (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {\n                    i++;\n                }\n                //$FALL-THROUGH$ break intentionally excluded.\n            case LF:\n                println();\n                out.append(format.getCommentMarker().charValue());\n                out.append(SP);\n                break;\n            default:\n                out.append(c);\n                break;\n            }",
      "right" : "switch (c) {\n            case CR:\n                if (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {\n                    i++;\n                }\n                //$FALL-THROUGH$ break intentionally excluded.\n            case LF:\n                println();\n                out.append(format.getCommentMarker().charValue());\n                out.append(SP);\n                break;\n            default:\n                out.append(c);\n                break;\n            }",
      "info" : "SwitchStatement[11424-11901]:SwitchStatement[11492-11969]"
    }, {
      "left" : "case CR:",
      "right" : "case CR:",
      "info" : "SwitchCase[11449-11457]:SwitchCase[11517-11525]"
    }, {
      "left" : "if (i + 1 < comment.length() && comment.charAt(i + 1) == LF)",
      "right" : "if (i + 1 < comment.length() && comment.charAt(i + 1) == LF)",
      "info" : "IfStatement[11474-11579]:IfStatement[11542-11647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11535-11579]:Block[11603-11647]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[11557-11561]:ExpressionStatement[11625-11629]"
    }, {
      "left" : "case LF:",
      "right" : "case LF:",
      "info" : "SwitchCase[11655-11663]:SwitchCase[11723-11731]"
    }, {
      "left" : "println();",
      "right" : "println();",
      "info" : "ExpressionStatement[11680-11690]:ExpressionStatement[11748-11758]"
    }, {
      "left" : "out.append(format.getCommentMarker().charValue());",
      "right" : "out.append(format.getCommentMarker().charValue());",
      "info" : "ExpressionStatement[11707-11757]:ExpressionStatement[11775-11825]"
    }, {
      "left" : "out.append(SP);",
      "right" : "out.append(SP);",
      "info" : "ExpressionStatement[11774-11789]:ExpressionStatement[11842-11857]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11806-11812]:BreakStatement[11874-11880]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11825-11833]:SwitchCase[11893-11901]"
    }, {
      "left" : "out.append(c);",
      "right" : "out.append(c);",
      "info" : "ExpressionStatement[11850-11864]:ExpressionStatement[11918-11932]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11881-11887]:BreakStatement[11949-11955]"
    }, {
      "left" : "println();",
      "right" : "println();",
      "info" : "ExpressionStatement[11920-11930]:ExpressionStatement[11988-11998]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12071-12077]:Modifier[12139-12145]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12078-12082]:PrimitiveType[12146-12150]"
    }, {
      "left" : "println",
      "right" : "println",
      "info" : "SimpleName[12083-12090]:SimpleName[12151-12158]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12100-12111]:SimpleType[12168-12179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12112-12303]:Block[12180-12371]"
    }, {
      "left" : "final String recordSeparator = format.getRecordSeparator();",
      "right" : "final String recordSeparator = format.getRecordSeparator();",
      "info" : "VariableDeclarationStatement[12122-12181]:VariableDeclarationStatement[12190-12249]"
    }, {
      "left" : "if (recordSeparator != null)",
      "right" : "if (recordSeparator != null)",
      "info" : "IfStatement[12190-12271]:IfStatement[12258-12339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12219-12271]:Block[12287-12339]"
    }, {
      "left" : "out.append(recordSeparator);",
      "right" : "out.append(recordSeparator);",
      "info" : "ExpressionStatement[12233-12261]:ExpressionStatement[12301-12329]"
    }, {
      "left" : "newRecord = true;",
      "right" : "newRecord = true;",
      "info" : "ExpressionStatement[12280-12297]:ExpressionStatement[12348-12365]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12824-12830]:Modifier[12892-12898]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12831-12835]:PrimitiveType[12899-12903]"
    }, {
      "left" : "printRecord",
      "right" : "printRecord",
      "info" : "SimpleName[12836-12847]:SimpleName[12904-12915]"
    }, {
      "left" : "final Iterable<?> values",
      "right" : "final Iterable<?> values",
      "info" : "SingleVariableDeclaration[12848-12872]:SingleVariableDeclaration[12916-12940]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12881-12892]:SimpleType[12949-12960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12893-12999]:Block[12961-13067]"
    }, {
      "left" : "for (final Object value : values)",
      "right" : "for (final Object value : values)",
      "info" : "EnhancedForStatement[12903-12974]:EnhancedForStatement[12971-13042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12937-12974]:Block[13005-13042]"
    }, {
      "left" : "print(value);",
      "right" : "print(value);",
      "info" : "ExpressionStatement[12951-12964]:ExpressionStatement[13019-13032]"
    }, {
      "left" : "println();",
      "right" : "println();",
      "info" : "ExpressionStatement[12983-12993]:ExpressionStatement[13051-13061]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13520-13526]:Modifier[13588-13594]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13527-13531]:PrimitiveType[13595-13599]"
    }, {
      "left" : "printRecord",
      "right" : "printRecord",
      "info" : "SimpleName[13532-13543]:SimpleName[13600-13611]"
    }, {
      "left" : "final Object... values",
      "right" : "final Object... values",
      "info" : "SingleVariableDeclaration[13544-13566]:SingleVariableDeclaration[13612-13634]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13575-13586]:SimpleType[13643-13654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13587-13693]:Block[13655-13761]"
    }, {
      "left" : "for (final Object value : values)",
      "right" : "for (final Object value : values)",
      "info" : "EnhancedForStatement[13597-13668]:EnhancedForStatement[13665-13736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13631-13668]:Block[13699-13736]"
    }, {
      "left" : "print(value);",
      "right" : "print(value);",
      "info" : "ExpressionStatement[13645-13658]:ExpressionStatement[13713-13726]"
    }, {
      "left" : "println();",
      "right" : "println();",
      "info" : "ExpressionStatement[13677-13687]:ExpressionStatement[13745-13755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14788-14794]:Modifier[14856-14862]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14795-14799]:PrimitiveType[14863-14867]"
    }, {
      "left" : "printRecords",
      "right" : "printRecords",
      "info" : "SimpleName[14800-14812]:SimpleName[14868-14880]"
    }, {
      "left" : "final Iterable<?> values",
      "right" : "final Iterable<?> values",
      "info" : "SingleVariableDeclaration[14813-14837]:SingleVariableDeclaration[14881-14905]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14846-14857]:SimpleType[14914-14925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14858-15199]:Block[14926-15267]"
    }, {
      "left" : "for (final Object value : values)",
      "right" : "for (final Object value : values)",
      "info" : "EnhancedForStatement[14868-15193]:EnhancedForStatement[14936-15261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14902-15193]:Block[14970-15261]"
    }, {
      "left" : "if (value instanceof Object[])",
      "right" : "if (value instanceof Object[])",
      "info" : "IfStatement[14916-15183]:IfStatement[14984-15251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14947-15014]:Block[15015-15082]"
    }, {
      "left" : "this.printRecord((Object[]) value);",
      "right" : "this.printRecord((Object[]) value);",
      "info" : "ExpressionStatement[14965-15000]:ExpressionStatement[15033-15068]"
    }, {
      "left" : "if (value instanceof Iterable)",
      "right" : "if (value instanceof Iterable)",
      "info" : "IfStatement[15020-15183]:IfStatement[15088-15251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15051-15121]:Block[15119-15189]"
    }, {
      "left" : "this.printRecord((Iterable<?>) value);",
      "right" : "this.printRecord((Iterable<?>) value);",
      "info" : "ExpressionStatement[15069-15107]:ExpressionStatement[15137-15175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15127-15183]:Block[15195-15251]"
    }, {
      "left" : "this.printRecord(value);",
      "right" : "this.printRecord(value);",
      "info" : "ExpressionStatement[15145-15169]:ExpressionStatement[15213-15237]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16283-16289]:Modifier[16351-16357]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16290-16294]:PrimitiveType[16358-16362]"
    }, {
      "left" : "printRecords",
      "right" : "printRecords",
      "info" : "SimpleName[16295-16307]:SimpleName[16363-16375]"
    }, {
      "left" : "final Object... values",
      "right" : "final Object... values",
      "info" : "SingleVariableDeclaration[16308-16330]:SingleVariableDeclaration[16376-16398]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16339-16350]:SimpleType[16407-16418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16351-16692]:Block[16419-16760]"
    }, {
      "left" : "for (final Object value : values)",
      "right" : "for (final Object value : values)",
      "info" : "EnhancedForStatement[16361-16686]:EnhancedForStatement[16429-16754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16395-16686]:Block[16463-16754]"
    }, {
      "left" : "if (value instanceof Object[])",
      "right" : "if (value instanceof Object[])",
      "info" : "IfStatement[16409-16676]:IfStatement[16477-16744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16440-16507]:Block[16508-16575]"
    }, {
      "left" : "this.printRecord((Object[]) value);",
      "right" : "this.printRecord((Object[]) value);",
      "info" : "ExpressionStatement[16458-16493]:ExpressionStatement[16526-16561]"
    }, {
      "left" : "if (value instanceof Iterable)",
      "right" : "if (value instanceof Iterable)",
      "info" : "IfStatement[16513-16676]:IfStatement[16581-16744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16544-16614]:Block[16612-16682]"
    }, {
      "left" : "this.printRecord((Iterable<?>) value);",
      "right" : "this.printRecord((Iterable<?>) value);",
      "info" : "ExpressionStatement[16562-16600]:ExpressionStatement[16630-16668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16620-16676]:Block[16688-16744]"
    }, {
      "left" : "this.printRecord(value);",
      "right" : "this.printRecord(value);",
      "info" : "ExpressionStatement[16638-16662]:ExpressionStatement[16706-16730]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17005-17011]:Modifier[17073-17079]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17012-17016]:PrimitiveType[17080-17084]"
    }, {
      "left" : "printRecords",
      "right" : "printRecords",
      "info" : "SimpleName[17017-17029]:SimpleName[17085-17097]"
    }, {
      "left" : "final ResultSet resultSet",
      "right" : "final ResultSet resultSet",
      "info" : "SingleVariableDeclaration[17030-17055]:SingleVariableDeclaration[17098-17123]"
    }, {
      "left" : "SQLException",
      "right" : "SQLException",
      "info" : "SimpleType[17064-17076]:SimpleType[17132-17144]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17078-17089]:SimpleType[17146-17157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17090-17353]:Block[17158-17421]"
    }, {
      "left" : "final int columnCount = resultSet.getMetaData().getColumnCount();",
      "right" : "final int columnCount = resultSet.getMetaData().getColumnCount();",
      "info" : "VariableDeclarationStatement[17100-17165]:VariableDeclarationStatement[17168-17233]"
    }, {
      "left" : "while (resultSet.next())",
      "right" : "while (resultSet.next())",
      "info" : "WhileStatement[17174-17347]:WhileStatement[17242-17415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17199-17347]:Block[17267-17415]"
    }, {
      "left" : "for (int i = 1; i <= columnCount; i++)",
      "right" : "for (int i = 1; i <= columnCount; i++)",
      "info" : "ForStatement[17213-17314]:ForStatement[17281-17382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17252-17314]:Block[17320-17382]"
    }, {
      "left" : "print(resultSet.getObject(i));",
      "right" : "print(resultSet.getObject(i));",
      "info" : "ExpressionStatement[17270-17300]:ExpressionStatement[17338-17368]"
    }, {
      "left" : "println();",
      "right" : "println();",
      "info" : "ExpressionStatement[17327-17337]:ExpressionStatement[17395-17405]"
    } ]
  },
  "interFileMappings" : { }
}