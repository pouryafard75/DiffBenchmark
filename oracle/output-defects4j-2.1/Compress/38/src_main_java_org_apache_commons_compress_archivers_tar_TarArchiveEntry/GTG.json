{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TarArchiveEntry",
      "right" : "TarArchiveEntry",
      "info" : "TypeDeclaration[1155-38569]:TypeDeclaration[1155-38611]"
    }, {
      "left" : "private static final TarArchiveEntry[] EMPTY_TAR_ARCHIVE_ENTRIES = new TarArchiveEntry[0];",
      "right" : "private static final TarArchiveEntry[] EMPTY_TAR_ARCHIVE_ENTRIES = new TarArchiveEntry[0];",
      "info" : "FieldDeclaration[6178-6268]:FieldDeclaration[6178-6268]"
    }, {
      "left" : "private String name = \"\";",
      "right" : "private String name = \"\";",
      "info" : "FieldDeclaration[6274-6328]:FieldDeclaration[6274-6328]"
    }, {
      "left" : "private boolean preserveLeadingSlashes;",
      "right" : "private boolean preserveLeadingSlashes;",
      "info" : "FieldDeclaration[6334-6431]:FieldDeclaration[6334-6431]"
    }, {
      "left" : "private int mode;",
      "right" : "private int mode;",
      "info" : "FieldDeclaration[6437-6494]:FieldDeclaration[6437-6494]"
    }, {
      "left" : "private long userId = 0;",
      "right" : "private long userId = 0;",
      "info" : "FieldDeclaration[6500-6556]:FieldDeclaration[6500-6556]"
    }, {
      "left" : "private long groupId = 0;",
      "right" : "private long groupId = 0;",
      "info" : "FieldDeclaration[6562-6620]:FieldDeclaration[6562-6620]"
    }, {
      "left" : "private long size = 0;",
      "right" : "private long size = 0;",
      "info" : "FieldDeclaration[6626-6677]:FieldDeclaration[6626-6677]"
    }, {
      "left" : "private long modTime;",
      "right" : "private long modTime;",
      "info" : "FieldDeclaration[6683-6746]:FieldDeclaration[6683-6746]"
    }, {
      "left" : "private boolean checkSumOK;",
      "right" : "private boolean checkSumOK;",
      "info" : "FieldDeclaration[6752-6836]:FieldDeclaration[6752-6836]"
    }, {
      "left" : "private byte linkFlag;",
      "right" : "private byte linkFlag;",
      "info" : "FieldDeclaration[6842-6898]:FieldDeclaration[6842-6898]"
    }, {
      "left" : "private String linkName = \"\";",
      "right" : "private String linkName = \"\";",
      "info" : "FieldDeclaration[6904-6967]:FieldDeclaration[6904-6967]"
    }, {
      "left" : "private String magic = MAGIC_POSIX;",
      "right" : "private String magic = MAGIC_POSIX;",
      "info" : "FieldDeclaration[6973-7042]:FieldDeclaration[6973-7042]"
    }, {
      "left" : "private String version = VERSION_POSIX;",
      "right" : "private String version = VERSION_POSIX;",
      "info" : "FieldDeclaration[7047-7123]:FieldDeclaration[7047-7123]"
    }, {
      "left" : "private String userName;",
      "right" : "private String userName;",
      "info" : "FieldDeclaration[7129-7187]:FieldDeclaration[7129-7187]"
    }, {
      "left" : "private String groupName = \"\";",
      "right" : "private String groupName = \"\";",
      "info" : "FieldDeclaration[7193-7258]:FieldDeclaration[7193-7258]"
    }, {
      "left" : "private int devMajor = 0;",
      "right" : "private int devMajor = 0;",
      "info" : "FieldDeclaration[7264-7333]:FieldDeclaration[7264-7333]"
    }, {
      "left" : "private int devMinor = 0;",
      "right" : "private int devMinor = 0;",
      "info" : "FieldDeclaration[7339-7408]:FieldDeclaration[7339-7408]"
    }, {
      "left" : "private boolean isExtended;",
      "right" : "private boolean isExtended;",
      "info" : "FieldDeclaration[7414-7491]:FieldDeclaration[7414-7491]"
    }, {
      "left" : "private long realSize;",
      "right" : "private long realSize;",
      "info" : "FieldDeclaration[7497-7578]:FieldDeclaration[7497-7578]"
    }, {
      "left" : "private boolean paxGNUSparse;",
      "right" : "private boolean paxGNUSparse;",
      "info" : "FieldDeclaration[7584-7687]:FieldDeclaration[7584-7687]"
    }, {
      "left" : "private boolean starSparse;",
      "right" : "private boolean starSparse;",
      "info" : "FieldDeclaration[7693-7787]:FieldDeclaration[7693-7787]"
    }, {
      "left" : "private final File file;",
      "right" : "private final File file;",
      "info" : "FieldDeclaration[7793-7855]:FieldDeclaration[7793-7855]"
    }, {
      "left" : "public static final int MAX_NAMELEN = 31;",
      "right" : "public static final int MAX_NAMELEN = 31;",
      "info" : "FieldDeclaration[7861-7961]:FieldDeclaration[7861-7961]"
    }, {
      "left" : "public static final int DEFAULT_DIR_MODE = 040755;",
      "right" : "public static final int DEFAULT_DIR_MODE = 040755;",
      "info" : "FieldDeclaration[7967-8069]:FieldDeclaration[7967-8069]"
    }, {
      "left" : "public static final int DEFAULT_FILE_MODE = 0100644;",
      "right" : "public static final int DEFAULT_FILE_MODE = 0100644;",
      "info" : "FieldDeclaration[8075-8173]:FieldDeclaration[8075-8173]"
    }, {
      "left" : "public static final int MILLIS_PER_SECOND = 1000;",
      "right" : "public static final int MILLIS_PER_SECOND = 1000;",
      "info" : "FieldDeclaration[8179-8265]:FieldDeclaration[8179-8265]"
    }, {
      "left" : "private TarArchiveEntry()",
      "right" : "private TarArchiveEntry()",
      "info" : "MethodDeclaration[8271-8605]:MethodDeclaration[8271-8605]"
    }, {
      "left" : "public TarArchiveEntry(final String name)",
      "right" : "public TarArchiveEntry(final String name)",
      "info" : "MethodDeclaration[8611-8886]:MethodDeclaration[8611-8886]"
    }, {
      "left" : "public TarArchiveEntry(String name, final boolean preserveLeadingSlashes)",
      "right" : "public TarArchiveEntry(String name, final boolean preserveLeadingSlashes)",
      "info" : "MethodDeclaration[8892-9719]:MethodDeclaration[8892-9719]"
    }, {
      "left" : "public TarArchiveEntry(final String name, final byte linkFlag)",
      "right" : "public TarArchiveEntry(final String name, final byte linkFlag)",
      "info" : "MethodDeclaration[9725-9988]:MethodDeclaration[9725-9988]"
    }, {
      "left" : "public TarArchiveEntry(final String name, final byte linkFlag, final boolean preserveLeadingSlashes)",
      "right" : "public TarArchiveEntry(final String name, final byte linkFlag, final boolean preserveLeadingSlashes)",
      "info" : "MethodDeclaration[9994-10580]:MethodDeclaration[9994-10580]"
    }, {
      "left" : "public TarArchiveEntry(final File file)",
      "right" : "public TarArchiveEntry(final File file)",
      "info" : "MethodDeclaration[10586-10929]:MethodDeclaration[10586-10929]"
    }, {
      "left" : "public TarArchiveEntry(final File file, final String fileName)",
      "right" : "public TarArchiveEntry(final File file, final String fileName)",
      "info" : "MethodDeclaration[10935-12036]:MethodDeclaration[10935-12036]"
    }, {
      "left" : "public TarArchiveEntry(final byte[] headerBuf)",
      "right" : "public TarArchiveEntry(final byte[] headerBuf)",
      "info" : "MethodDeclaration[12042-12415]:MethodDeclaration[12042-12415]"
    }, {
      "left" : "public TarArchiveEntry(final byte[] headerBuf, final ZipEncoding encoding)\n        throws IOException",
      "right" : "public TarArchiveEntry(final byte[] headerBuf, final ZipEncoding encoding)\n        throws IOException",
      "info" : "MethodDeclaration[12421-12967]:MethodDeclaration[12421-12967]"
    }, {
      "left" : "public boolean equals(final TarArchiveEntry it)",
      "right" : "public boolean equals(final TarArchiveEntry it)",
      "info" : "MethodDeclaration[12973-13305]:MethodDeclaration[12973-13305]"
    }, {
      "left" : "public boolean equals(final Object it)",
      "right" : "public boolean equals(final Object it)",
      "info" : "MethodDeclaration[13311-13739]:MethodDeclaration[13311-13739]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[13745-13925]:MethodDeclaration[13745-13925]"
    }, {
      "left" : "public boolean isDescendent(final TarArchiveEntry desc)",
      "right" : "public boolean isDescendent(final TarArchiveEntry desc)",
      "info" : "MethodDeclaration[13931-14358]:MethodDeclaration[13931-14358]"
    }, {
      "left" : "public String getName()",
      "right" : "public String getName()",
      "info" : "MethodDeclaration[14364-14517]:MethodDeclaration[14364-14517]"
    }, {
      "left" : "public void setName(final String name)",
      "right" : "public void setName(final String name)",
      "info" : "MethodDeclaration[14523-14738]:MethodDeclaration[14523-14738]"
    }, {
      "left" : "public void setMode(final int mode)",
      "right" : "public void setMode(final int mode)",
      "info" : "MethodDeclaration[14744-14914]:MethodDeclaration[14744-14914]"
    }, {
      "left" : "public String getLinkName()",
      "right" : "public String getLinkName()",
      "info" : "MethodDeclaration[14920-15077]:MethodDeclaration[14920-15077]"
    }, {
      "left" : "public void setLinkName(final String link)",
      "right" : "public void setLinkName(final String link)",
      "info" : "MethodDeclaration[15083-15287]:MethodDeclaration[15083-15287]"
    }, {
      "left" : "public int getUserId()",
      "right" : "public int getUserId()",
      "info" : "MethodDeclaration[15293-15586]:MethodDeclaration[15293-15586]"
    }, {
      "left" : "public void setUserId(final int userId)",
      "right" : "public void setUserId(final int userId)",
      "info" : "MethodDeclaration[15592-15776]:MethodDeclaration[15592-15776]"
    }, {
      "left" : "public long getLongUserId()",
      "right" : "public long getLongUserId()",
      "info" : "MethodDeclaration[15782-15952]:MethodDeclaration[15782-15952]"
    }, {
      "left" : "public void setUserId(final long userId)",
      "right" : "public void setUserId(final long userId)",
      "info" : "MethodDeclaration[15958-16158]:MethodDeclaration[15958-16158]"
    }, {
      "left" : "public int getGroupId()",
      "right" : "public int getGroupId()",
      "info" : "MethodDeclaration[16164-16463]:MethodDeclaration[16164-16463]"
    }, {
      "left" : "public void setGroupId(final int groupId)",
      "right" : "public void setGroupId(final int groupId)",
      "info" : "MethodDeclaration[16469-16660]:MethodDeclaration[16469-16660]"
    }, {
      "left" : "public long getLongGroupId()",
      "right" : "public long getLongGroupId()",
      "info" : "MethodDeclaration[16666-16840]:MethodDeclaration[16666-16840]"
    }, {
      "left" : "public void setGroupId(final long groupId)",
      "right" : "public void setGroupId(final long groupId)",
      "info" : "MethodDeclaration[16846-17053]:MethodDeclaration[16846-17053]"
    }, {
      "left" : "public String getUserName()",
      "right" : "public String getUserName()",
      "info" : "MethodDeclaration[17059-17216]:MethodDeclaration[17059-17216]"
    }, {
      "left" : "public void setUserName(final String userName)",
      "right" : "public void setUserName(final String userName)",
      "info" : "MethodDeclaration[17222-17419]:MethodDeclaration[17222-17419]"
    }, {
      "left" : "public String getGroupName()",
      "right" : "public String getGroupName()",
      "info" : "MethodDeclaration[17425-17586]:MethodDeclaration[17425-17586]"
    }, {
      "left" : "public void setGroupName(final String groupName)",
      "right" : "public void setGroupName(final String groupName)",
      "info" : "MethodDeclaration[17592-17796]:MethodDeclaration[17592-17796]"
    }, {
      "left" : "public void setIds(final int userId, final int groupId)",
      "right" : "public void setIds(final int userId, final int groupId)",
      "info" : "MethodDeclaration[17802-18106]:MethodDeclaration[17802-18106]"
    }, {
      "left" : "public void setNames(final String userName, final String groupName)",
      "right" : "public void setNames(final String userName, final String groupName)",
      "info" : "MethodDeclaration[18112-18446]:MethodDeclaration[18112-18446]"
    }, {
      "left" : "public void setModTime(final long time)",
      "right" : "public void setModTime(final long time)",
      "info" : "MethodDeclaration[18452-18726]:MethodDeclaration[18452-18726]"
    }, {
      "left" : "public void setModTime(final Date time)",
      "right" : "public void setModTime(final Date time)",
      "info" : "MethodDeclaration[18732-18954]:MethodDeclaration[18732-18954]"
    }, {
      "left" : "public Date getModTime()",
      "right" : "public Date getModTime()",
      "info" : "MethodDeclaration[18960-19168]:MethodDeclaration[18960-19168]"
    }, {
      "left" : "public Date getLastModifiedDate()",
      "right" : "public Date getLastModifiedDate()",
      "info" : "MethodDeclaration[19174-19258]:MethodDeclaration[19174-19258]"
    }, {
      "left" : "public boolean isCheckSumOK()",
      "right" : "public boolean isCheckSumOK()",
      "info" : "MethodDeclaration[19264-19514]:MethodDeclaration[19264-19514]"
    }, {
      "left" : "public File getFile()",
      "right" : "public File getFile()",
      "info" : "MethodDeclaration[19520-19657]:MethodDeclaration[19520-19657]"
    }, {
      "left" : "public int getMode()",
      "right" : "public int getMode()",
      "info" : "MethodDeclaration[19663-19799]:MethodDeclaration[19663-19799]"
    }, {
      "left" : "public long getSize()",
      "right" : "public long getSize()",
      "info" : "MethodDeclaration[19805-19966]:MethodDeclaration[19805-19966]"
    }, {
      "left" : "public void setSize(final long size)",
      "right" : "public void setSize(final long size)",
      "info" : "MethodDeclaration[19972-20322]:MethodDeclaration[19972-20322]"
    }, {
      "left" : "public int getDevMajor()",
      "right" : "public int getDevMajor()",
      "info" : "MethodDeclaration[20328-20520]:MethodDeclaration[20328-20520]"
    }, {
      "left" : "public void setDevMajor(final int devNo)",
      "right" : "public void setDevMajor(final int devNo)",
      "info" : "MethodDeclaration[20526-20992]:MethodDeclaration[20526-20992]"
    }, {
      "left" : "public int getDevMinor()",
      "right" : "public int getDevMinor()",
      "info" : "MethodDeclaration[20998-21190]:MethodDeclaration[20998-21190]"
    }, {
      "left" : "public void setDevMinor(final int devNo)",
      "right" : "public void setDevMinor(final int devNo)",
      "info" : "MethodDeclaration[21196-21662]:MethodDeclaration[21196-21662]"
    }, {
      "left" : "public boolean isExtended()",
      "right" : "public boolean isExtended()",
      "info" : "MethodDeclaration[21668-21915]:MethodDeclaration[21668-21915]"
    }, {
      "left" : "public long getRealSize()",
      "right" : "public long getRealSize()",
      "info" : "MethodDeclaration[21921-22111]:MethodDeclaration[21921-22111]"
    }, {
      "left" : "public boolean isGNUSparse()",
      "right" : "public boolean isGNUSparse()",
      "info" : "MethodDeclaration[22117-22352]:MethodDeclaration[22117-22352]"
    }, {
      "left" : "public boolean isOldGNUSparse()",
      "right" : "public boolean isOldGNUSparse()",
      "info" : "MethodDeclaration[22358-22655]:MethodDeclaration[22358-22655]"
    }, {
      "left" : "public boolean isPaxGNUSparse()",
      "right" : "public boolean isPaxGNUSparse()",
      "info" : "MethodDeclaration[22661-22930]:MethodDeclaration[22661-22930]"
    }, {
      "left" : "public boolean isStarSparse()",
      "right" : "public boolean isStarSparse()",
      "info" : "MethodDeclaration[22936-23181]:MethodDeclaration[22936-23181]"
    }, {
      "left" : "public boolean isGNULongLinkEntry()",
      "right" : "public boolean isGNULongLinkEntry()",
      "info" : "MethodDeclaration[23187-23433]:MethodDeclaration[23187-23433]"
    }, {
      "left" : "public boolean isGNULongNameEntry()",
      "right" : "public boolean isGNULongNameEntry()",
      "info" : "MethodDeclaration[23439-23681]:MethodDeclaration[23439-23681]"
    }, {
      "left" : "public boolean isPaxHeader(",
      "right" : "public boolean isPaxHeader(",
      "info" : "MethodDeclaration[23687-23975]:MethodDeclaration[23687-23975]"
    }, {
      "left" : "public boolean isGlobalPaxHeader(",
      "right" : "public boolean isGlobalPaxHeader(",
      "info" : "MethodDeclaration[23981-24219]:MethodDeclaration[23981-24219]"
    }, {
      "left" : "public boolean isDirectory()",
      "right" : "public boolean isDirectory()",
      "info" : "MethodDeclaration[24225-24657]:MethodDeclaration[24225-24699]"
    }, {
      "left" : "public boolean isFile()",
      "right" : "public boolean isFile()",
      "info" : "MethodDeclaration[24663-25033]:MethodDeclaration[24705-25075]"
    }, {
      "left" : "public boolean isSymbolicLink()",
      "right" : "public boolean isSymbolicLink()",
      "info" : "MethodDeclaration[25039-25252]:MethodDeclaration[25081-25294]"
    }, {
      "left" : "public boolean isLink()",
      "right" : "public boolean isLink()",
      "info" : "MethodDeclaration[25258-25448]:MethodDeclaration[25300-25490]"
    }, {
      "left" : "public boolean isCharacterDevice()",
      "right" : "public boolean isCharacterDevice()",
      "info" : "MethodDeclaration[25454-25672]:MethodDeclaration[25496-25714]"
    }, {
      "left" : "public boolean isBlockDevice()",
      "right" : "public boolean isBlockDevice()",
      "info" : "MethodDeclaration[25678-25884]:MethodDeclaration[25720-25926]"
    }, {
      "left" : "public boolean isFIFO()",
      "right" : "public boolean isFIFO()",
      "info" : "MethodDeclaration[25890-26087]:MethodDeclaration[25932-26129]"
    }, {
      "left" : "public boolean isSparse()",
      "right" : "public boolean isSparse()",
      "info" : "MethodDeclaration[26093-26307]:MethodDeclaration[26135-26349]"
    }, {
      "left" : "public TarArchiveEntry[] getDirectoryEntries()",
      "right" : "public TarArchiveEntry[] getDirectoryEntries()",
      "info" : "MethodDeclaration[26313-27053]:MethodDeclaration[26355-27095]"
    }, {
      "left" : "public void writeEntryHeader(final byte[] outbuf)",
      "right" : "public void writeEntryHeader(final byte[] outbuf)",
      "info" : "MethodDeclaration[27059-27717]:MethodDeclaration[27101-27759]"
    }, {
      "left" : "public void writeEntryHeader(final byte[] outbuf, final ZipEncoding encoding,\n                                 final boolean starMode) throws IOException",
      "right" : "public void writeEntryHeader(final byte[] outbuf, final ZipEncoding encoding,\n                                 final boolean starMode) throws IOException",
      "info" : "MethodDeclaration[27723-30207]:MethodDeclaration[27765-30249]"
    }, {
      "left" : "private int writeEntryHeaderField(final long value, final byte[] outbuf, final int offset,\n                                      final int length, final boolean starMode)",
      "right" : "private int writeEntryHeaderField(final long value, final byte[] outbuf, final int offset,\n                                      final int length, final boolean starMode)",
      "info" : "MethodDeclaration[30213-30870]:MethodDeclaration[30255-30912]"
    }, {
      "left" : "public void parseTarHeader(final byte[] header)",
      "right" : "public void parseTarHeader(final byte[] header)",
      "info" : "MethodDeclaration[30876-31552]:MethodDeclaration[30918-31594]"
    }, {
      "left" : "public void parseTarHeader(final byte[] header, final ZipEncoding encoding)\n        throws IOException",
      "right" : "public void parseTarHeader(final byte[] header, final ZipEncoding encoding)\n        throws IOException",
      "info" : "MethodDeclaration[31558-32086]:MethodDeclaration[31600-32128]"
    }, {
      "left" : "private void parseTarHeader(final byte[] header, final ZipEncoding encoding,\n                                final boolean oldStyle)\n        throws IOException",
      "right" : "private void parseTarHeader(final byte[] header, final ZipEncoding encoding,\n                                final boolean oldStyle)\n        throws IOException",
      "info" : "MethodDeclaration[32092-35479]:MethodDeclaration[32134-35521]"
    }, {
      "left" : "private static String normalizeFileName(String fileName,\n                                            final boolean preserveLeadingSlashes)",
      "right" : "private static String normalizeFileName(String fileName,\n                                            final boolean preserveLeadingSlashes)",
      "info" : "MethodDeclaration[35485-37062]:MethodDeclaration[35527-37104]"
    }, {
      "left" : "private int evaluateType(final byte[] header)",
      "right" : "private int evaluateType(final byte[] header)",
      "info" : "MethodDeclaration[37068-37798]:MethodDeclaration[37110-37840]"
    }, {
      "left" : "void fillGNUSparse0xData(final Map<String, String> headers)",
      "right" : "void fillGNUSparse0xData(final Map<String, String> headers)",
      "info" : "MethodDeclaration[37804-38111]:MethodDeclaration[37846-38153]"
    }, {
      "left" : "void fillGNUSparse1xData(final Map<String, String> headers)",
      "right" : "void fillGNUSparse1xData(final Map<String, String> headers)",
      "info" : "MethodDeclaration[38117-38333]:MethodDeclaration[38159-38375]"
    }, {
      "left" : "void fillStarSparseData(final Map<String, String> headers)",
      "right" : "void fillStarSparseData(final Map<String, String> headers)",
      "info" : "MethodDeclaration[38339-38567]:MethodDeclaration[38381-38609]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8377-8605]:Block[8377-8605]"
    }, {
      "left" : "String user = System.getProperty(\"user.name\", \"\");",
      "right" : "String user = System.getProperty(\"user.name\", \"\");",
      "info" : "VariableDeclarationStatement[8387-8437]:VariableDeclarationStatement[8387-8437]"
    }, {
      "left" : "if (user.length() > MAX_NAMELEN)",
      "right" : "if (user.length() > MAX_NAMELEN)",
      "info" : "IfStatement[8447-8542]:IfStatement[8447-8542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8480-8542]:Block[8480-8542]"
    }, {
      "left" : "user = user.substring(0, MAX_NAMELEN);",
      "right" : "user = user.substring(0, MAX_NAMELEN);",
      "info" : "ExpressionStatement[8494-8532]:ExpressionStatement[8494-8532]"
    }, {
      "left" : "this.userName = user;",
      "right" : "this.userName = user;",
      "info" : "ExpressionStatement[8552-8573]:ExpressionStatement[8552-8573]"
    }, {
      "left" : "this.file = null;",
      "right" : "this.file = null;",
      "info" : "ExpressionStatement[8582-8599]:ExpressionStatement[8582-8599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8852-8886]:Block[8852-8886]"
    }, {
      "left" : "this(name, false);",
      "right" : "this(name, false);",
      "info" : "ConstructorInvocation[8862-8880]:ConstructorInvocation[8862-8880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9280-9719]:Block[9280-9719]"
    }, {
      "left" : "this();",
      "right" : "this();",
      "info" : "ConstructorInvocation[9290-9297]:ConstructorInvocation[9290-9297]"
    }, {
      "left" : "this.preserveLeadingSlashes = preserveLeadingSlashes;",
      "right" : "this.preserveLeadingSlashes = preserveLeadingSlashes;",
      "info" : "ExpressionStatement[9307-9360]:ExpressionStatement[9307-9360]"
    }, {
      "left" : "name = normalizeFileName(name, preserveLeadingSlashes);",
      "right" : "name = normalizeFileName(name, preserveLeadingSlashes);",
      "info" : "ExpressionStatement[9370-9425]:ExpressionStatement[9370-9425]"
    }, {
      "left" : "final boolean isDir = name.endsWith(\"/\");",
      "right" : "final boolean isDir = name.endsWith(\"/\");",
      "info" : "VariableDeclarationStatement[9434-9475]:VariableDeclarationStatement[9434-9475]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[9485-9502]:ExpressionStatement[9485-9502]"
    }, {
      "left" : "this.mode = isDir ? DEFAULT_DIR_MODE : DEFAULT_FILE_MODE;",
      "right" : "this.mode = isDir ? DEFAULT_DIR_MODE : DEFAULT_FILE_MODE;",
      "info" : "ExpressionStatement[9511-9568]:ExpressionStatement[9511-9568]"
    }, {
      "left" : "this.linkFlag = isDir ? LF_DIR : LF_NORMAL;",
      "right" : "this.linkFlag = isDir ? LF_DIR : LF_NORMAL;",
      "info" : "ExpressionStatement[9577-9620]:ExpressionStatement[9577-9620]"
    }, {
      "left" : "this.modTime = new Date().getTime() / MILLIS_PER_SECOND;",
      "right" : "this.modTime = new Date().getTime() / MILLIS_PER_SECOND;",
      "info" : "ExpressionStatement[9629-9685]:ExpressionStatement[9629-9685]"
    }, {
      "left" : "this.userName = \"\";",
      "right" : "this.userName = \"\";",
      "info" : "ExpressionStatement[9694-9713]:ExpressionStatement[9694-9713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9944-9988]:Block[9944-9988]"
    }, {
      "left" : "this(name, linkFlag, false);",
      "right" : "this(name, linkFlag, false);",
      "info" : "ConstructorInvocation[9954-9982]:ConstructorInvocation[9954-9982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10366-10580]:Block[10366-10580]"
    }, {
      "left" : "this(name, preserveLeadingSlashes);",
      "right" : "this(name, preserveLeadingSlashes);",
      "info" : "ConstructorInvocation[10376-10411]:ConstructorInvocation[10376-10411]"
    }, {
      "left" : "this.linkFlag = linkFlag;",
      "right" : "this.linkFlag = linkFlag;",
      "info" : "ExpressionStatement[10420-10445]:ExpressionStatement[10420-10445]"
    }, {
      "left" : "if (linkFlag == LF_GNUTYPE_LONGNAME)",
      "right" : "if (linkFlag == LF_GNUTYPE_LONGNAME)",
      "info" : "IfStatement[10454-10574]:IfStatement[10454-10574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10491-10574]:Block[10491-10574]"
    }, {
      "left" : "magic = MAGIC_GNU;",
      "right" : "magic = MAGIC_GNU;",
      "info" : "ExpressionStatement[10505-10523]:ExpressionStatement[10505-10523]"
    }, {
      "left" : "version = VERSION_GNU_SPACE;",
      "right" : "version = VERSION_GNU_SPACE;",
      "info" : "ExpressionStatement[10536-10564]:ExpressionStatement[10536-10564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10886-10929]:Block[10886-10929]"
    }, {
      "left" : "this(file, file.getPath());",
      "right" : "this(file, file.getPath());",
      "info" : "ConstructorInvocation[10896-10923]:ConstructorInvocation[10896-10923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11262-12036]:Block[11262-12036]"
    }, {
      "left" : "final String normalizedName = normalizeFileName(fileName, false);",
      "right" : "final String normalizedName = normalizeFileName(fileName, false);",
      "info" : "VariableDeclarationStatement[11272-11337]:VariableDeclarationStatement[11272-11337]"
    }, {
      "left" : "this.file = file;",
      "right" : "this.file = file;",
      "info" : "ExpressionStatement[11346-11363]:ExpressionStatement[11346-11363]"
    }, {
      "left" : "if (file.isDirectory())",
      "right" : "if (file.isDirectory())",
      "info" : "IfStatement[11373-11937]:IfStatement[11373-11937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11397-11759]:Block[11397-11759]"
    }, {
      "left" : "this.mode = DEFAULT_DIR_MODE;",
      "right" : "this.mode = DEFAULT_DIR_MODE;",
      "info" : "ExpressionStatement[11411-11440]:ExpressionStatement[11411-11440]"
    }, {
      "left" : "this.linkFlag = LF_DIR;",
      "right" : "this.linkFlag = LF_DIR;",
      "info" : "ExpressionStatement[11453-11476]:ExpressionStatement[11453-11476]"
    }, {
      "left" : "final int nameLength = normalizedName.length();",
      "right" : "final int nameLength = normalizedName.length();",
      "info" : "VariableDeclarationStatement[11490-11537]:VariableDeclarationStatement[11490-11537]"
    }, {
      "left" : "if (nameLength == 0 || normalizedName.charAt(nameLength - 1) != '/')",
      "right" : "if (nameLength == 0 || normalizedName.charAt(nameLength - 1) != '/')",
      "info" : "IfStatement[11550-11749]:IfStatement[11550-11749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11619-11684]:Block[11619-11684]"
    }, {
      "left" : "this.name = normalizedName + \"/\";",
      "right" : "this.name = normalizedName + \"/\";",
      "info" : "ExpressionStatement[11637-11670]:ExpressionStatement[11637-11670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11690-11749]:Block[11690-11749]"
    }, {
      "left" : "this.name = normalizedName;",
      "right" : "this.name = normalizedName;",
      "info" : "ExpressionStatement[11708-11735]:ExpressionStatement[11708-11735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11765-11937]:Block[11765-11937]"
    }, {
      "left" : "this.mode = DEFAULT_FILE_MODE;",
      "right" : "this.mode = DEFAULT_FILE_MODE;",
      "info" : "ExpressionStatement[11779-11809]:ExpressionStatement[11779-11809]"
    }, {
      "left" : "this.linkFlag = LF_NORMAL;",
      "right" : "this.linkFlag = LF_NORMAL;",
      "info" : "ExpressionStatement[11822-11848]:ExpressionStatement[11822-11848]"
    }, {
      "left" : "this.size = file.length();",
      "right" : "this.size = file.length();",
      "info" : "ExpressionStatement[11861-11887]:ExpressionStatement[11861-11887]"
    }, {
      "left" : "this.name = normalizedName;",
      "right" : "this.name = normalizedName;",
      "info" : "ExpressionStatement[11900-11927]:ExpressionStatement[11900-11927]"
    }, {
      "left" : "this.modTime = file.lastModified() / MILLIS_PER_SECOND;",
      "right" : "this.modTime = file.lastModified() / MILLIS_PER_SECOND;",
      "info" : "ExpressionStatement[11947-12002]:ExpressionStatement[11947-12002]"
    }, {
      "left" : "this.userName = \"\";",
      "right" : "this.userName = \"\";",
      "info" : "ExpressionStatement[12011-12030]:ExpressionStatement[12011-12030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12357-12415]:Block[12357-12415]"
    }, {
      "left" : "this();",
      "right" : "this();",
      "info" : "ConstructorInvocation[12367-12374]:ConstructorInvocation[12367-12374]"
    }, {
      "left" : "parseTarHeader(headerBuf);",
      "right" : "parseTarHeader(headerBuf);",
      "info" : "ExpressionStatement[12383-12409]:ExpressionStatement[12383-12409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12899-12967]:Block[12899-12967]"
    }, {
      "left" : "this();",
      "right" : "this();",
      "info" : "ConstructorInvocation[12909-12916]:ConstructorInvocation[12909-12916]"
    }, {
      "left" : "parseTarHeader(headerBuf, encoding);",
      "right" : "parseTarHeader(headerBuf, encoding);",
      "info" : "ExpressionStatement[12925-12961]:ExpressionStatement[12925-12961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13251-13305]:Block[13251-13305]"
    }, {
      "left" : "return getName().equals(it.getName());",
      "right" : "return getName().equals(it.getName());",
      "info" : "ReturnStatement[13261-13299]:ReturnStatement[13261-13299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13594-13739]:Block[13594-13739]"
    }, {
      "left" : "if (it == null || getClass() != it.getClass())",
      "right" : "if (it == null || getClass() != it.getClass())",
      "info" : "IfStatement[13604-13688]:IfStatement[13604-13688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13651-13688]:Block[13651-13688]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13665-13678]:ReturnStatement[13665-13678]"
    }, {
      "left" : "return equals((TarArchiveEntry) it);",
      "right" : "return equals((TarArchiveEntry) it);",
      "info" : "ReturnStatement[13697-13733]:ReturnStatement[13697-13733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13881-13925]:Block[13881-13925]"
    }, {
      "left" : "return getName().hashCode();",
      "right" : "return getName().hashCode();",
      "info" : "ReturnStatement[13891-13919]:ReturnStatement[13891-13919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14298-14358]:Block[14298-14358]"
    }, {
      "left" : "return desc.getName().startsWith(getName());",
      "right" : "return desc.getName().startsWith(getName());",
      "info" : "ReturnStatement[14308-14352]:ReturnStatement[14308-14352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14489-14517]:Block[14489-14517]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[14499-14511]:ReturnStatement[14499-14511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14657-14738]:Block[14657-14738]"
    }, {
      "left" : "this.name = normalizeFileName(name, this.preserveLeadingSlashes);",
      "right" : "this.name = normalizeFileName(name, this.preserveLeadingSlashes);",
      "info" : "ExpressionStatement[14667-14732]:ExpressionStatement[14667-14732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14881-14914]:Block[14881-14914]"
    }, {
      "left" : "this.mode = mode;",
      "right" : "this.mode = mode;",
      "info" : "ExpressionStatement[14891-14908]:ExpressionStatement[14891-14908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15045-15077]:Block[15045-15077]"
    }, {
      "left" : "return linkName;",
      "right" : "return linkName;",
      "info" : "ReturnStatement[15055-15071]:ReturnStatement[15055-15071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15250-15287]:Block[15250-15287]"
    }, {
      "left" : "this.linkName = link;",
      "right" : "this.linkName = link;",
      "info" : "ExpressionStatement[15260-15281]:ExpressionStatement[15260-15281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15535-15586]:Block[15535-15586]"
    }, {
      "left" : "return (int) (userId & 0xffffffff);",
      "right" : "return (int) (userId & 0xffffffff);",
      "info" : "ReturnStatement[15545-15580]:ReturnStatement[15545-15580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15735-15776]:Block[15735-15776]"
    }, {
      "left" : "setUserId((long) userId);",
      "right" : "setUserId((long) userId);",
      "info" : "ExpressionStatement[15745-15770]:ExpressionStatement[15745-15770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15922-15952]:Block[15922-15952]"
    }, {
      "left" : "return userId;",
      "right" : "return userId;",
      "info" : "ReturnStatement[15932-15946]:ReturnStatement[15932-15946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16121-16158]:Block[16121-16158]"
    }, {
      "left" : "this.userId = userId;",
      "right" : "this.userId = userId;",
      "info" : "ExpressionStatement[16131-16152]:ExpressionStatement[16131-16152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16411-16463]:Block[16411-16463]"
    }, {
      "left" : "return (int) (groupId & 0xffffffff);",
      "right" : "return (int) (groupId & 0xffffffff);",
      "info" : "ReturnStatement[16421-16457]:ReturnStatement[16421-16457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16617-16660]:Block[16617-16660]"
    }, {
      "left" : "setGroupId((long) groupId);",
      "right" : "setGroupId((long) groupId);",
      "info" : "ExpressionStatement[16627-16654]:ExpressionStatement[16627-16654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16809-16840]:Block[16809-16840]"
    }, {
      "left" : "return groupId;",
      "right" : "return groupId;",
      "info" : "ReturnStatement[16819-16834]:ReturnStatement[16819-16834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17014-17053]:Block[17014-17053]"
    }, {
      "left" : "this.groupId = groupId;",
      "right" : "this.groupId = groupId;",
      "info" : "ExpressionStatement[17024-17047]:ExpressionStatement[17024-17047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17184-17216]:Block[17184-17216]"
    }, {
      "left" : "return userName;",
      "right" : "return userName;",
      "info" : "ReturnStatement[17194-17210]:ReturnStatement[17194-17210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17378-17419]:Block[17378-17419]"
    }, {
      "left" : "this.userName = userName;",
      "right" : "this.userName = userName;",
      "info" : "ExpressionStatement[17388-17413]:ExpressionStatement[17388-17413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17553-17586]:Block[17553-17586]"
    }, {
      "left" : "return groupName;",
      "right" : "return groupName;",
      "info" : "ReturnStatement[17563-17580]:ReturnStatement[17563-17580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17753-17796]:Block[17753-17796]"
    }, {
      "left" : "this.groupName = groupName;",
      "right" : "this.groupName = groupName;",
      "info" : "ExpressionStatement[17763-17790]:ExpressionStatement[17763-17790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18043-18106]:Block[18043-18106]"
    }, {
      "left" : "setUserId(userId);",
      "right" : "setUserId(userId);",
      "info" : "ExpressionStatement[18053-18071]:ExpressionStatement[18053-18071]"
    }, {
      "left" : "setGroupId(groupId);",
      "right" : "setGroupId(groupId);",
      "info" : "ExpressionStatement[18080-18100]:ExpressionStatement[18080-18100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18375-18446]:Block[18375-18446]"
    }, {
      "left" : "setUserName(userName);",
      "right" : "setUserName(userName);",
      "info" : "ExpressionStatement[18385-18407]:ExpressionStatement[18385-18407]"
    }, {
      "left" : "setGroupName(groupName);",
      "right" : "setGroupName(groupName);",
      "info" : "ExpressionStatement[18416-18440]:ExpressionStatement[18416-18440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18675-18726]:Block[18675-18726]"
    }, {
      "left" : "modTime = time / MILLIS_PER_SECOND;",
      "right" : "modTime = time / MILLIS_PER_SECOND;",
      "info" : "ExpressionStatement[18685-18720]:ExpressionStatement[18685-18720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18893-18954]:Block[18893-18954]"
    }, {
      "left" : "modTime = time.getTime() / MILLIS_PER_SECOND;",
      "right" : "modTime = time.getTime() / MILLIS_PER_SECOND;",
      "info" : "ExpressionStatement[18903-18948]:ExpressionStatement[18903-18948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19107-19168]:Block[19107-19168]"
    }, {
      "left" : "return new Date(modTime * MILLIS_PER_SECOND);",
      "right" : "return new Date(modTime * MILLIS_PER_SECOND);",
      "info" : "ReturnStatement[19117-19162]:ReturnStatement[19117-19162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19222-19258]:Block[19222-19258]"
    }, {
      "left" : "return getModTime();",
      "right" : "return getModTime();",
      "info" : "ReturnStatement[19232-19252]:ReturnStatement[19232-19252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19480-19514]:Block[19480-19514]"
    }, {
      "left" : "return checkSumOK;",
      "right" : "return checkSumOK;",
      "info" : "ReturnStatement[19490-19508]:ReturnStatement[19490-19508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19629-19657]:Block[19629-19657]"
    }, {
      "left" : "return file;",
      "right" : "return file;",
      "info" : "ReturnStatement[19639-19651]:ReturnStatement[19639-19651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19771-19799]:Block[19771-19799]"
    }, {
      "left" : "return mode;",
      "right" : "return mode;",
      "info" : "ReturnStatement[19781-19793]:ReturnStatement[19781-19793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19938-19966]:Block[19938-19966]"
    }, {
      "left" : "return size;",
      "right" : "return size;",
      "info" : "ReturnStatement[19948-19960]:ReturnStatement[19948-19960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20177-20322]:Block[20177-20322]"
    }, {
      "left" : "if (size < 0)",
      "right" : "if (size < 0)",
      "info" : "IfStatement[20187-20290]:IfStatement[20187-20290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20200-20290]:Block[20200-20290]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Size is out of range: \"+size);",
      "right" : "throw new IllegalArgumentException(\"Size is out of range: \"+size);",
      "info" : "ThrowStatement[20214-20280]:ThrowStatement[20214-20280]"
    }, {
      "left" : "this.size = size;",
      "right" : "this.size = size;",
      "info" : "ExpressionStatement[20299-20316]:ExpressionStatement[20299-20316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20488-20520]:Block[20488-20520]"
    }, {
      "left" : "return devMajor;",
      "right" : "return devMajor;",
      "info" : "ReturnStatement[20498-20514]:ReturnStatement[20498-20514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20771-20992]:Block[20771-20992]"
    }, {
      "left" : "if (devNo < 0)",
      "right" : "if (devNo < 0)",
      "info" : "IfStatement[20781-20955]:IfStatement[20781-20955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20795-20955]:Block[20795-20955]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Major device number is out of \"\n                                               + \"range: \" + devNo);",
      "right" : "throw new IllegalArgumentException(\"Major device number is out of \"\n                                               + \"range: \" + devNo);",
      "info" : "ThrowStatement[20809-20945]:ThrowStatement[20809-20945]"
    }, {
      "left" : "this.devMajor = devNo;",
      "right" : "this.devMajor = devNo;",
      "info" : "ExpressionStatement[20964-20986]:ExpressionStatement[20964-20986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21158-21190]:Block[21158-21190]"
    }, {
      "left" : "return devMinor;",
      "right" : "return devMinor;",
      "info" : "ReturnStatement[21168-21184]:ReturnStatement[21168-21184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21441-21662]:Block[21441-21662]"
    }, {
      "left" : "if (devNo < 0)",
      "right" : "if (devNo < 0)",
      "info" : "IfStatement[21451-21625]:IfStatement[21451-21625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21465-21625]:Block[21465-21625]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Minor device number is out of \"\n                                               + \"range: \" + devNo);",
      "right" : "throw new IllegalArgumentException(\"Minor device number is out of \"\n                                               + \"range: \" + devNo);",
      "info" : "ThrowStatement[21479-21615]:ThrowStatement[21479-21615]"
    }, {
      "left" : "this.devMinor = devNo;",
      "right" : "this.devMinor = devNo;",
      "info" : "ExpressionStatement[21634-21656]:ExpressionStatement[21634-21656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21881-21915]:Block[21881-21915]"
    }, {
      "left" : "return isExtended;",
      "right" : "return isExtended;",
      "info" : "ReturnStatement[21891-21909]:ReturnStatement[21891-21909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22079-22111]:Block[22079-22111]"
    }, {
      "left" : "return realSize;",
      "right" : "return realSize;",
      "info" : "ReturnStatement[22089-22105]:ReturnStatement[22089-22105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22292-22352]:Block[22292-22352]"
    }, {
      "left" : "return isOldGNUSparse() || isPaxGNUSparse();",
      "right" : "return isOldGNUSparse() || isPaxGNUSparse();",
      "info" : "ReturnStatement[22302-22346]:ReturnStatement[22302-22346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22602-22655]:Block[22602-22655]"
    }, {
      "left" : "return linkFlag == LF_GNUTYPE_SPARSE;",
      "right" : "return linkFlag == LF_GNUTYPE_SPARSE;",
      "info" : "ReturnStatement[22612-22649]:ReturnStatement[22612-22649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22894-22930]:Block[22894-22930]"
    }, {
      "left" : "return paxGNUSparse;",
      "right" : "return paxGNUSparse;",
      "info" : "ReturnStatement[22904-22924]:ReturnStatement[22904-22924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23147-23181]:Block[23147-23181]"
    }, {
      "left" : "return starSparse;",
      "right" : "return starSparse;",
      "info" : "ReturnStatement[23157-23175]:ReturnStatement[23157-23175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23378-23433]:Block[23378-23433]"
    }, {
      "left" : "return linkFlag == LF_GNUTYPE_LONGLINK;",
      "right" : "return linkFlag == LF_GNUTYPE_LONGLINK;",
      "info" : "ReturnStatement[23388-23427]:ReturnStatement[23388-23427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23626-23681]:Block[23626-23681]"
    }, {
      "left" : "return linkFlag == LF_GNUTYPE_LONGNAME;",
      "right" : "return linkFlag == LF_GNUTYPE_LONGNAME;",
      "info" : "ReturnStatement[23636-23675]:ReturnStatement[23636-23675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23861-23975]:Block[23861-23975]"
    }, {
      "left" : "return linkFlag == LF_PAX_EXTENDED_HEADER_LC\n            || linkFlag == LF_PAX_EXTENDED_HEADER_UC;",
      "right" : "return linkFlag == LF_PAX_EXTENDED_HEADER_LC\n            || linkFlag == LF_PAX_EXTENDED_HEADER_UC;",
      "info" : "ReturnStatement[23871-23969]:ReturnStatement[23871-23969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24154-24219]:Block[24154-24219]"
    }, {
      "left" : "return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;",
      "right" : "return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;",
      "info" : "ReturnStatement[24164-24213]:ReturnStatement[24164-24213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24405-24657]:Block[24405-24699]"
    }, {
      "left" : "if (file != null)",
      "right" : "if (file != null)",
      "info" : "IfStatement[24415-24483]:IfStatement[24415-24483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24433-24483]:Block[24433-24483]"
    }, {
      "left" : "return file.isDirectory();",
      "right" : "return file.isDirectory();",
      "info" : "ReturnStatement[24447-24473]:ReturnStatement[24447-24473]"
    }, {
      "left" : "if (linkFlag == LF_DIR)",
      "right" : "if (linkFlag == LF_DIR)",
      "info" : "IfStatement[24493-24553]:IfStatement[24493-24553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24517-24553]:Block[24517-24553]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24531-24543]:ReturnStatement[24531-24543]"
    }, {
      "left" : "if (getName().endsWith(\"/\"))",
      "right" : "if (!isPaxHeader() && !isGlobalPaxHeader() && getName().endsWith(\"/\"))",
      "info" : "IfStatement[24563-24628]:IfStatement[24563-24670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24592-24628]:Block[24634-24670]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24606-24618]:ReturnStatement[24648-24660]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24638-24651]:ReturnStatement[24680-24693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24815-25033]:Block[24857-25075]"
    }, {
      "left" : "if (file != null)",
      "right" : "if (file != null)",
      "info" : "IfStatement[24825-24888]:IfStatement[24867-24930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24843-24888]:Block[24885-24930]"
    }, {
      "left" : "return file.isFile();",
      "right" : "return file.isFile();",
      "info" : "ReturnStatement[24857-24878]:ReturnStatement[24899-24920]"
    }, {
      "left" : "if (linkFlag == LF_OLDNORM || linkFlag == LF_NORMAL)",
      "right" : "if (linkFlag == LF_OLDNORM || linkFlag == LF_NORMAL)",
      "info" : "IfStatement[24897-24986]:IfStatement[24939-25028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24950-24986]:Block[24992-25028]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24964-24976]:ReturnStatement[25006-25018]"
    }, {
      "left" : "return !getName().endsWith(\"/\");",
      "right" : "return !getName().endsWith(\"/\");",
      "info" : "ReturnStatement[24995-25027]:ReturnStatement[25037-25069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25206-25252]:Block[25248-25294]"
    }, {
      "left" : "return linkFlag == LF_SYMLINK;",
      "right" : "return linkFlag == LF_SYMLINK;",
      "info" : "ReturnStatement[25216-25246]:ReturnStatement[25258-25288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25405-25448]:Block[25447-25490]"
    }, {
      "left" : "return linkFlag == LF_LINK;",
      "right" : "return linkFlag == LF_LINK;",
      "info" : "ReturnStatement[25415-25442]:ReturnStatement[25457-25484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25630-25672]:Block[25672-25714]"
    }, {
      "left" : "return linkFlag == LF_CHR;",
      "right" : "return linkFlag == LF_CHR;",
      "info" : "ReturnStatement[25640-25666]:ReturnStatement[25682-25708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25842-25884]:Block[25884-25926]"
    }, {
      "left" : "return linkFlag == LF_BLK;",
      "right" : "return linkFlag == LF_BLK;",
      "info" : "ReturnStatement[25852-25878]:ReturnStatement[25894-25920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26044-26087]:Block[26086-26129]"
    }, {
      "left" : "return linkFlag == LF_FIFO;",
      "right" : "return linkFlag == LF_FIFO;",
      "info" : "ReturnStatement[26054-26081]:ReturnStatement[26096-26123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26252-26307]:Block[26294-26349]"
    }, {
      "left" : "return isGNUSparse() || isStarSparse();",
      "right" : "return isGNUSparse() || isStarSparse();",
      "info" : "ReturnStatement[26262-26301]:ReturnStatement[26304-26343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26581-27053]:Block[26623-27095]"
    }, {
      "left" : "if (file == null || !file.isDirectory())",
      "right" : "if (file == null || !file.isDirectory())",
      "info" : "IfStatement[26591-26689]:IfStatement[26633-26731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26632-26689]:Block[26674-26731]"
    }, {
      "left" : "return EMPTY_TAR_ARCHIVE_ENTRIES;",
      "right" : "return EMPTY_TAR_ARCHIVE_ENTRIES;",
      "info" : "ReturnStatement[26646-26679]:ReturnStatement[26688-26721]"
    }, {
      "left" : "final String[] list = file.list();",
      "right" : "final String[] list = file.list();",
      "info" : "VariableDeclarationStatement[26699-26733]:VariableDeclarationStatement[26741-26775]"
    }, {
      "left" : "if (list == null)",
      "right" : "if (list == null)",
      "info" : "IfStatement[26742-26817]:IfStatement[26784-26859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26760-26817]:Block[26802-26859]"
    }, {
      "left" : "return EMPTY_TAR_ARCHIVE_ENTRIES;",
      "right" : "return EMPTY_TAR_ARCHIVE_ENTRIES;",
      "info" : "ReturnStatement[26774-26807]:ReturnStatement[26816-26849]"
    }, {
      "left" : "final TarArchiveEntry[] result = new TarArchiveEntry[list.length];",
      "right" : "final TarArchiveEntry[] result = new TarArchiveEntry[list.length];",
      "info" : "VariableDeclarationStatement[26826-26892]:VariableDeclarationStatement[26868-26934]"
    }, {
      "left" : "for (int i = 0; i < result.length; ++i)",
      "right" : "for (int i = 0; i < result.length; ++i)",
      "info" : "ForStatement[26902-27023]:ForStatement[26944-27065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26942-27023]:Block[26984-27065]"
    }, {
      "left" : "result[i] = new TarArchiveEntry(new File(file, list[i]));",
      "right" : "result[i] = new TarArchiveEntry(new File(file, list[i]));",
      "info" : "ExpressionStatement[26956-27013]:ExpressionStatement[26998-27055]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[27033-27047]:ReturnStatement[27075-27089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27339-27717]:Block[27381-27759]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27349-27711]:TryStatement[27391-27753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27353-27436]:Block[27395-27478]"
    }, {
      "left" : "writeEntryHeader(outbuf, TarUtils.DEFAULT_ENCODING, false);",
      "right" : "writeEntryHeader(outbuf, TarUtils.DEFAULT_ENCODING, false);",
      "info" : "ExpressionStatement[27367-27426]:ExpressionStatement[27409-27468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27466-27711]:Block[27508-27753]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27480-27701]:TryStatement[27522-27743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27484-27576]:Block[27526-27618]"
    }, {
      "left" : "writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, false);",
      "right" : "writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, false);",
      "info" : "ExpressionStatement[27502-27562]:ExpressionStatement[27544-27604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27607-27701]:Block[27649-27743]"
    }, {
      "left" : "throw new RuntimeException(ex2);",
      "right" : "throw new RuntimeException(ex2);",
      "info" : "ThrowStatement[27655-27687]:ThrowStatement[27697-27729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28323-30207]:Block[28365-30249]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[28333-28348]:VariableDeclarationStatement[28375-28390]"
    }, {
      "left" : "offset = TarUtils.formatNameBytes(name, outbuf, offset, NAMELEN,\n                                          encoding);",
      "right" : "offset = TarUtils.formatNameBytes(name, outbuf, offset, NAMELEN,\n                                          encoding);",
      "info" : "ExpressionStatement[28358-28475]:ExpressionStatement[28400-28517]"
    }, {
      "left" : "offset = writeEntryHeaderField(mode, outbuf, offset, MODELEN, starMode);",
      "right" : "offset = writeEntryHeaderField(mode, outbuf, offset, MODELEN, starMode);",
      "info" : "ExpressionStatement[28484-28556]:ExpressionStatement[28526-28598]"
    }, {
      "left" : "offset = writeEntryHeaderField(userId, outbuf, offset, UIDLEN,\n                                       starMode);",
      "right" : "offset = writeEntryHeaderField(userId, outbuf, offset, UIDLEN,\n                                       starMode);",
      "info" : "ExpressionStatement[28565-28677]:ExpressionStatement[28607-28719]"
    }, {
      "left" : "offset = writeEntryHeaderField(groupId, outbuf, offset, GIDLEN,\n                                       starMode);",
      "right" : "offset = writeEntryHeaderField(groupId, outbuf, offset, GIDLEN,\n                                       starMode);",
      "info" : "ExpressionStatement[28686-28799]:ExpressionStatement[28728-28841]"
    }, {
      "left" : "offset = writeEntryHeaderField(size, outbuf, offset, SIZELEN, starMode);",
      "right" : "offset = writeEntryHeaderField(size, outbuf, offset, SIZELEN, starMode);",
      "info" : "ExpressionStatement[28808-28880]:ExpressionStatement[28850-28922]"
    }, {
      "left" : "offset = writeEntryHeaderField(modTime, outbuf, offset, MODTIMELEN,\n                                       starMode);",
      "right" : "offset = writeEntryHeaderField(modTime, outbuf, offset, MODTIMELEN,\n                                       starMode);",
      "info" : "ExpressionStatement[28889-29006]:ExpressionStatement[28931-29048]"
    }, {
      "left" : "final int csOffset = offset;",
      "right" : "final int csOffset = offset;",
      "info" : "VariableDeclarationStatement[29016-29044]:VariableDeclarationStatement[29058-29086]"
    }, {
      "left" : "for (int c = 0; c < CHKSUMLEN; ++c)",
      "right" : "for (int c = 0; c < CHKSUMLEN; ++c)",
      "info" : "ForStatement[29054-29144]:ForStatement[29096-29186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29090-29144]:Block[29132-29186]"
    }, {
      "left" : "outbuf[offset++] = (byte) ' ';",
      "right" : "outbuf[offset++] = (byte) ' ';",
      "info" : "ExpressionStatement[29104-29134]:ExpressionStatement[29146-29176]"
    }, {
      "left" : "outbuf[offset++] = linkFlag;",
      "right" : "outbuf[offset++] = linkFlag;",
      "info" : "ExpressionStatement[29154-29182]:ExpressionStatement[29196-29224]"
    }, {
      "left" : "offset = TarUtils.formatNameBytes(linkName, outbuf, offset, NAMELEN,\n                                          encoding);",
      "right" : "offset = TarUtils.formatNameBytes(linkName, outbuf, offset, NAMELEN,\n                                          encoding);",
      "info" : "ExpressionStatement[29191-29312]:ExpressionStatement[29233-29354]"
    }, {
      "left" : "offset = TarUtils.formatNameBytes(magic, outbuf, offset, MAGICLEN);",
      "right" : "offset = TarUtils.formatNameBytes(magic, outbuf, offset, MAGICLEN);",
      "info" : "ExpressionStatement[29321-29388]:ExpressionStatement[29363-29430]"
    }, {
      "left" : "offset = TarUtils.formatNameBytes(version, outbuf, offset, VERSIONLEN);",
      "right" : "offset = TarUtils.formatNameBytes(version, outbuf, offset, VERSIONLEN);",
      "info" : "ExpressionStatement[29397-29468]:ExpressionStatement[29439-29510]"
    }, {
      "left" : "offset = TarUtils.formatNameBytes(userName, outbuf, offset, UNAMELEN,\n                                          encoding);",
      "right" : "offset = TarUtils.formatNameBytes(userName, outbuf, offset, UNAMELEN,\n                                          encoding);",
      "info" : "ExpressionStatement[29477-29599]:ExpressionStatement[29519-29641]"
    }, {
      "left" : "offset = TarUtils.formatNameBytes(groupName, outbuf, offset, GNAMELEN,\n                                          encoding);",
      "right" : "offset = TarUtils.formatNameBytes(groupName, outbuf, offset, GNAMELEN,\n                                          encoding);",
      "info" : "ExpressionStatement[29608-29731]:ExpressionStatement[29650-29773]"
    }, {
      "left" : "offset = writeEntryHeaderField(devMajor, outbuf, offset, DEVLEN,\n                                       starMode);",
      "right" : "offset = writeEntryHeaderField(devMajor, outbuf, offset, DEVLEN,\n                                       starMode);",
      "info" : "ExpressionStatement[29740-29854]:ExpressionStatement[29782-29896]"
    }, {
      "left" : "offset = writeEntryHeaderField(devMinor, outbuf, offset, DEVLEN,\n                                       starMode);",
      "right" : "offset = writeEntryHeaderField(devMinor, outbuf, offset, DEVLEN,\n                                       starMode);",
      "info" : "ExpressionStatement[29863-29977]:ExpressionStatement[29905-30019]"
    }, {
      "left" : "while (offset < outbuf.length)",
      "right" : "while (offset < outbuf.length)",
      "info" : "WhileStatement[29987-30063]:WhileStatement[30029-30105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30018-30063]:Block[30060-30105]"
    }, {
      "left" : "outbuf[offset++] = 0;",
      "right" : "outbuf[offset++] = 0;",
      "info" : "ExpressionStatement[30032-30053]:ExpressionStatement[30074-30095]"
    }, {
      "left" : "final long chk = TarUtils.computeCheckSum(outbuf);",
      "right" : "final long chk = TarUtils.computeCheckSum(outbuf);",
      "info" : "VariableDeclarationStatement[30073-30123]:VariableDeclarationStatement[30115-30165]"
    }, {
      "left" : "TarUtils.formatCheckSumOctalBytes(chk, outbuf, csOffset, CHKSUMLEN);",
      "right" : "TarUtils.formatCheckSumOctalBytes(chk, outbuf, csOffset, CHKSUMLEN);",
      "info" : "ExpressionStatement[30133-30201]:ExpressionStatement[30175-30243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30384-30870]:Block[30426-30912]"
    }, {
      "left" : "if (!starMode && (value < 0\n                          || value >= 1l << 3 * (length - 1)))",
      "right" : "if (!starMode && (value < 0\n                          || value >= 1l << 3 * (length - 1)))",
      "info" : "IfStatement[30394-30726]:IfStatement[30436-30768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30485-30726]:Block[30527-30768]"
    }, {
      "left" : "return TarUtils.formatLongOctalBytes(0, outbuf, offset, length);",
      "right" : "return TarUtils.formatLongOctalBytes(0, outbuf, offset, length);",
      "info" : "ReturnStatement[30652-30716]:ReturnStatement[30694-30758]"
    }, {
      "left" : "return TarUtils.formatLongOctalOrBinaryBytes(value, outbuf, offset,\n                                                     length);",
      "right" : "return TarUtils.formatLongOctalOrBinaryBytes(value, outbuf, offset,\n                                                     length);",
      "info" : "ReturnStatement[30735-30864]:ReturnStatement[30777-30906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31178-31552]:Block[31220-31594]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31188-31546]:TryStatement[31230-31588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31192-31266]:Block[31234-31308]"
    }, {
      "left" : "parseTarHeader(header, TarUtils.DEFAULT_ENCODING);",
      "right" : "parseTarHeader(header, TarUtils.DEFAULT_ENCODING);",
      "info" : "ExpressionStatement[31206-31256]:ExpressionStatement[31248-31298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31296-31546]:Block[31338-31588]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31310-31536]:TryStatement[31352-31578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31314-31402]:Block[31356-31444]"
    }, {
      "left" : "parseTarHeader(header, TarUtils.DEFAULT_ENCODING, true);",
      "right" : "parseTarHeader(header, TarUtils.DEFAULT_ENCODING, true);",
      "info" : "ExpressionStatement[31332-31388]:ExpressionStatement[31374-31430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31433-31536]:Block[31475-31578]"
    }, {
      "left" : "throw new RuntimeException(ex2);",
      "right" : "throw new RuntimeException(ex2);",
      "info" : "ThrowStatement[31490-31522]:ThrowStatement[31532-31564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32030-32086]:Block[32072-32128]"
    }, {
      "left" : "parseTarHeader(header, encoding, false);",
      "right" : "parseTarHeader(header, encoding, false);",
      "info" : "ExpressionStatement[32040-32080]:ExpressionStatement[32082-32122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32252-35479]:Block[32294-35521]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[32262-32277]:VariableDeclarationStatement[32304-32319]"
    }, {
      "left" : "name = oldStyle ? TarUtils.parseName(header, offset, NAMELEN)\n            : TarUtils.parseName(header, offset, NAMELEN, encoding);",
      "right" : "name = oldStyle ? TarUtils.parseName(header, offset, NAMELEN)\n            : TarUtils.parseName(header, offset, NAMELEN, encoding);",
      "info" : "ExpressionStatement[32287-32417]:ExpressionStatement[32329-32459]"
    }, {
      "left" : "offset += NAMELEN;",
      "right" : "offset += NAMELEN;",
      "info" : "ExpressionStatement[32426-32444]:ExpressionStatement[32468-32486]"
    }, {
      "left" : "mode = (int) TarUtils.parseOctalOrBinary(header, offset, MODELEN);",
      "right" : "mode = (int) TarUtils.parseOctalOrBinary(header, offset, MODELEN);",
      "info" : "ExpressionStatement[32453-32519]:ExpressionStatement[32495-32561]"
    }, {
      "left" : "offset += MODELEN;",
      "right" : "offset += MODELEN;",
      "info" : "ExpressionStatement[32528-32546]:ExpressionStatement[32570-32588]"
    }, {
      "left" : "userId = (int) TarUtils.parseOctalOrBinary(header, offset, UIDLEN);",
      "right" : "userId = (int) TarUtils.parseOctalOrBinary(header, offset, UIDLEN);",
      "info" : "ExpressionStatement[32555-32622]:ExpressionStatement[32597-32664]"
    }, {
      "left" : "offset += UIDLEN;",
      "right" : "offset += UIDLEN;",
      "info" : "ExpressionStatement[32631-32648]:ExpressionStatement[32673-32690]"
    }, {
      "left" : "groupId = (int) TarUtils.parseOctalOrBinary(header, offset, GIDLEN);",
      "right" : "groupId = (int) TarUtils.parseOctalOrBinary(header, offset, GIDLEN);",
      "info" : "ExpressionStatement[32657-32725]:ExpressionStatement[32699-32767]"
    }, {
      "left" : "offset += GIDLEN;",
      "right" : "offset += GIDLEN;",
      "info" : "ExpressionStatement[32734-32751]:ExpressionStatement[32776-32793]"
    }, {
      "left" : "size = TarUtils.parseOctalOrBinary(header, offset, SIZELEN);",
      "right" : "size = TarUtils.parseOctalOrBinary(header, offset, SIZELEN);",
      "info" : "ExpressionStatement[32760-32820]:ExpressionStatement[32802-32862]"
    }, {
      "left" : "offset += SIZELEN;",
      "right" : "offset += SIZELEN;",
      "info" : "ExpressionStatement[32829-32847]:ExpressionStatement[32871-32889]"
    }, {
      "left" : "modTime = TarUtils.parseOctalOrBinary(header, offset, MODTIMELEN);",
      "right" : "modTime = TarUtils.parseOctalOrBinary(header, offset, MODTIMELEN);",
      "info" : "ExpressionStatement[32856-32922]:ExpressionStatement[32898-32964]"
    }, {
      "left" : "offset += MODTIMELEN;",
      "right" : "offset += MODTIMELEN;",
      "info" : "ExpressionStatement[32931-32952]:ExpressionStatement[32973-32994]"
    }, {
      "left" : "checkSumOK = TarUtils.verifyCheckSum(header);",
      "right" : "checkSumOK = TarUtils.verifyCheckSum(header);",
      "info" : "ExpressionStatement[32961-33006]:ExpressionStatement[33003-33048]"
    }, {
      "left" : "offset += CHKSUMLEN;",
      "right" : "offset += CHKSUMLEN;",
      "info" : "ExpressionStatement[33015-33035]:ExpressionStatement[33057-33077]"
    }, {
      "left" : "linkFlag = header[offset++];",
      "right" : "linkFlag = header[offset++];",
      "info" : "ExpressionStatement[33044-33072]:ExpressionStatement[33086-33114]"
    }, {
      "left" : "linkName = oldStyle ? TarUtils.parseName(header, offset, NAMELEN)\n            : TarUtils.parseName(header, offset, NAMELEN, encoding);",
      "right" : "linkName = oldStyle ? TarUtils.parseName(header, offset, NAMELEN)\n            : TarUtils.parseName(header, offset, NAMELEN, encoding);",
      "info" : "ExpressionStatement[33081-33215]:ExpressionStatement[33123-33257]"
    }, {
      "left" : "offset += NAMELEN;",
      "right" : "offset += NAMELEN;",
      "info" : "ExpressionStatement[33224-33242]:ExpressionStatement[33266-33284]"
    }, {
      "left" : "magic = TarUtils.parseName(header, offset, MAGICLEN);",
      "right" : "magic = TarUtils.parseName(header, offset, MAGICLEN);",
      "info" : "ExpressionStatement[33251-33304]:ExpressionStatement[33293-33346]"
    }, {
      "left" : "offset += MAGICLEN;",
      "right" : "offset += MAGICLEN;",
      "info" : "ExpressionStatement[33313-33332]:ExpressionStatement[33355-33374]"
    }, {
      "left" : "version = TarUtils.parseName(header, offset, VERSIONLEN);",
      "right" : "version = TarUtils.parseName(header, offset, VERSIONLEN);",
      "info" : "ExpressionStatement[33341-33398]:ExpressionStatement[33383-33440]"
    }, {
      "left" : "offset += VERSIONLEN;",
      "right" : "offset += VERSIONLEN;",
      "info" : "ExpressionStatement[33407-33428]:ExpressionStatement[33449-33470]"
    }, {
      "left" : "userName = oldStyle ? TarUtils.parseName(header, offset, UNAMELEN)\n            : TarUtils.parseName(header, offset, UNAMELEN, encoding);",
      "right" : "userName = oldStyle ? TarUtils.parseName(header, offset, UNAMELEN)\n            : TarUtils.parseName(header, offset, UNAMELEN, encoding);",
      "info" : "ExpressionStatement[33437-33573]:ExpressionStatement[33479-33615]"
    }, {
      "left" : "offset += UNAMELEN;",
      "right" : "offset += UNAMELEN;",
      "info" : "ExpressionStatement[33582-33601]:ExpressionStatement[33624-33643]"
    }, {
      "left" : "groupName = oldStyle ? TarUtils.parseName(header, offset, GNAMELEN)\n            : TarUtils.parseName(header, offset, GNAMELEN, encoding);",
      "right" : "groupName = oldStyle ? TarUtils.parseName(header, offset, GNAMELEN)\n            : TarUtils.parseName(header, offset, GNAMELEN, encoding);",
      "info" : "ExpressionStatement[33610-33747]:ExpressionStatement[33652-33789]"
    }, {
      "left" : "offset += GNAMELEN;",
      "right" : "offset += GNAMELEN;",
      "info" : "ExpressionStatement[33756-33775]:ExpressionStatement[33798-33817]"
    }, {
      "left" : "devMajor = (int) TarUtils.parseOctalOrBinary(header, offset, DEVLEN);",
      "right" : "devMajor = (int) TarUtils.parseOctalOrBinary(header, offset, DEVLEN);",
      "info" : "ExpressionStatement[33784-33853]:ExpressionStatement[33826-33895]"
    }, {
      "left" : "offset += DEVLEN;",
      "right" : "offset += DEVLEN;",
      "info" : "ExpressionStatement[33862-33879]:ExpressionStatement[33904-33921]"
    }, {
      "left" : "devMinor = (int) TarUtils.parseOctalOrBinary(header, offset, DEVLEN);",
      "right" : "devMinor = (int) TarUtils.parseOctalOrBinary(header, offset, DEVLEN);",
      "info" : "ExpressionStatement[33888-33957]:ExpressionStatement[33930-33999]"
    }, {
      "left" : "offset += DEVLEN;",
      "right" : "offset += DEVLEN;",
      "info" : "ExpressionStatement[33966-33983]:ExpressionStatement[34008-34025]"
    }, {
      "left" : "final int type = evaluateType(header);",
      "right" : "final int type = evaluateType(header);",
      "info" : "VariableDeclarationStatement[33993-34031]:VariableDeclarationStatement[34035-34073]"
    }, {
      "left" : "switch (type) {\n        case FORMAT_OLDGNU: {\n            offset += ATIMELEN_GNU;\n            offset += CTIMELEN_GNU;\n            offset += OFFSETLEN_GNU;\n            offset += LONGNAMESLEN_GNU;\n            offset += PAD2LEN_GNU;\n            offset += SPARSELEN_GNU;\n            isExtended = TarUtils.parseBoolean(header, offset);\n            offset += ISEXTENDEDLEN_GNU;\n            realSize = TarUtils.parseOctal(header, offset, REALSIZELEN_GNU);\n            offset += REALSIZELEN_GNU;\n            break;\n        }\n        case FORMAT_XSTAR: {\n            final String xstarPrefix = oldStyle\n                ? TarUtils.parseName(header, offset, PREFIXLEN_XSTAR)\n                : TarUtils.parseName(header, offset, PREFIXLEN_XSTAR, encoding);\n            if (xstarPrefix.length() > 0) {\n                name = xstarPrefix + \"/\" + name;\n            }\n            break;\n        }\n        case FORMAT_POSIX:\n        default: {\n            final String prefix = oldStyle\n                ? TarUtils.parseName(header, offset, PREFIXLEN)\n                : TarUtils.parseName(header, offset, PREFIXLEN, encoding);\n            // SunOS tar -E does not add / to directory names, so fix\n            // up to be consistent\n            if (isDirectory() && !name.endsWith(\"/\")){\n                name = name + \"/\";\n            }\n            if (prefix.length() > 0){\n                name = prefix + \"/\" + name;\n            }\n        }\n        }",
      "right" : "switch (type) {\n        case FORMAT_OLDGNU: {\n            offset += ATIMELEN_GNU;\n            offset += CTIMELEN_GNU;\n            offset += OFFSETLEN_GNU;\n            offset += LONGNAMESLEN_GNU;\n            offset += PAD2LEN_GNU;\n            offset += SPARSELEN_GNU;\n            isExtended = TarUtils.parseBoolean(header, offset);\n            offset += ISEXTENDEDLEN_GNU;\n            realSize = TarUtils.parseOctal(header, offset, REALSIZELEN_GNU);\n            offset += REALSIZELEN_GNU;\n            break;\n        }\n        case FORMAT_XSTAR: {\n            final String xstarPrefix = oldStyle\n                ? TarUtils.parseName(header, offset, PREFIXLEN_XSTAR)\n                : TarUtils.parseName(header, offset, PREFIXLEN_XSTAR, encoding);\n            if (xstarPrefix.length() > 0) {\n                name = xstarPrefix + \"/\" + name;\n            }\n            break;\n        }\n        case FORMAT_POSIX:\n        default: {\n            final String prefix = oldStyle\n                ? TarUtils.parseName(header, offset, PREFIXLEN)\n                : TarUtils.parseName(header, offset, PREFIXLEN, encoding);\n            // SunOS tar -E does not add / to directory names, so fix\n            // up to be consistent\n            if (isDirectory() && !name.endsWith(\"/\")){\n                name = name + \"/\";\n            }\n            if (prefix.length() > 0){\n                name = prefix + \"/\" + name;\n            }\n        }\n        }",
      "info" : "SwitchStatement[34040-35473]:SwitchStatement[34082-35515]"
    }, {
      "left" : "case FORMAT_OLDGNU:",
      "right" : "case FORMAT_OLDGNU:",
      "info" : "SwitchCase[34064-34083]:SwitchCase[34106-34125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34084-34556]:Block[34126-34598]"
    }, {
      "left" : "offset += ATIMELEN_GNU;",
      "right" : "offset += ATIMELEN_GNU;",
      "info" : "ExpressionStatement[34098-34121]:ExpressionStatement[34140-34163]"
    }, {
      "left" : "offset += CTIMELEN_GNU;",
      "right" : "offset += CTIMELEN_GNU;",
      "info" : "ExpressionStatement[34134-34157]:ExpressionStatement[34176-34199]"
    }, {
      "left" : "offset += OFFSETLEN_GNU;",
      "right" : "offset += OFFSETLEN_GNU;",
      "info" : "ExpressionStatement[34170-34194]:ExpressionStatement[34212-34236]"
    }, {
      "left" : "offset += LONGNAMESLEN_GNU;",
      "right" : "offset += LONGNAMESLEN_GNU;",
      "info" : "ExpressionStatement[34207-34234]:ExpressionStatement[34249-34276]"
    }, {
      "left" : "offset += PAD2LEN_GNU;",
      "right" : "offset += PAD2LEN_GNU;",
      "info" : "ExpressionStatement[34247-34269]:ExpressionStatement[34289-34311]"
    }, {
      "left" : "offset += SPARSELEN_GNU;",
      "right" : "offset += SPARSELEN_GNU;",
      "info" : "ExpressionStatement[34282-34306]:ExpressionStatement[34324-34348]"
    }, {
      "left" : "isExtended = TarUtils.parseBoolean(header, offset);",
      "right" : "isExtended = TarUtils.parseBoolean(header, offset);",
      "info" : "ExpressionStatement[34319-34370]:ExpressionStatement[34361-34412]"
    }, {
      "left" : "offset += ISEXTENDEDLEN_GNU;",
      "right" : "offset += ISEXTENDEDLEN_GNU;",
      "info" : "ExpressionStatement[34383-34411]:ExpressionStatement[34425-34453]"
    }, {
      "left" : "realSize = TarUtils.parseOctal(header, offset, REALSIZELEN_GNU);",
      "right" : "realSize = TarUtils.parseOctal(header, offset, REALSIZELEN_GNU);",
      "info" : "ExpressionStatement[34424-34488]:ExpressionStatement[34466-34530]"
    }, {
      "left" : "offset += REALSIZELEN_GNU;",
      "right" : "offset += REALSIZELEN_GNU;",
      "info" : "ExpressionStatement[34501-34527]:ExpressionStatement[34543-34569]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34540-34546]:BreakStatement[34582-34588]"
    }, {
      "left" : "case FORMAT_XSTAR:",
      "right" : "case FORMAT_XSTAR:",
      "info" : "SwitchCase[34565-34583]:SwitchCase[34607-34625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34584-34920]:Block[34626-34962]"
    }, {
      "left" : "final String xstarPrefix = oldStyle\n                ? TarUtils.parseName(header, offset, PREFIXLEN_XSTAR)\n                : TarUtils.parseName(header, offset, PREFIXLEN_XSTAR, encoding);",
      "right" : "final String xstarPrefix = oldStyle\n                ? TarUtils.parseName(header, offset, PREFIXLEN_XSTAR)\n                : TarUtils.parseName(header, offset, PREFIXLEN_XSTAR, encoding);",
      "info" : "VariableDeclarationStatement[34598-34784]:VariableDeclarationStatement[34640-34826]"
    }, {
      "left" : "if (xstarPrefix.length() > 0)",
      "right" : "if (xstarPrefix.length() > 0)",
      "info" : "IfStatement[34797-34891]:IfStatement[34839-34933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34827-34891]:Block[34869-34933]"
    }, {
      "left" : "name = xstarPrefix + \"/\" + name;",
      "right" : "name = xstarPrefix + \"/\" + name;",
      "info" : "ExpressionStatement[34845-34877]:ExpressionStatement[34887-34919]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34904-34910]:BreakStatement[34946-34952]"
    }, {
      "left" : "case FORMAT_POSIX:",
      "right" : "case FORMAT_POSIX:",
      "info" : "SwitchCase[34929-34947]:SwitchCase[34971-34989]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34956-34964]:SwitchCase[34998-35006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34965-35463]:Block[35007-35505]"
    }, {
      "left" : "final String prefix = oldStyle\n                ? TarUtils.parseName(header, offset, PREFIXLEN)\n                : TarUtils.parseName(header, offset, PREFIXLEN, encoding);",
      "right" : "final String prefix = oldStyle\n                ? TarUtils.parseName(header, offset, PREFIXLEN)\n                : TarUtils.parseName(header, offset, PREFIXLEN, encoding);",
      "info" : "VariableDeclarationStatement[34979-35148]:VariableDeclarationStatement[35021-35190]"
    }, {
      "left" : "if (isDirectory() && !name.endsWith(\"/\"))",
      "right" : "if (isDirectory() && !name.endsWith(\"/\"))",
      "info" : "IfStatement[35266-35357]:IfStatement[35308-35399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35307-35357]:Block[35349-35399]"
    }, {
      "left" : "name = name + \"/\";",
      "right" : "name = name + \"/\";",
      "info" : "ExpressionStatement[35325-35343]:ExpressionStatement[35367-35385]"
    }, {
      "left" : "if (prefix.length() > 0)",
      "right" : "if (prefix.length() > 0)",
      "info" : "IfStatement[35370-35453]:IfStatement[35412-35495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35394-35453]:Block[35436-35495]"
    }, {
      "left" : "name = prefix + \"/\" + name;",
      "right" : "name = prefix + \"/\" + name;",
      "info" : "ExpressionStatement[35412-35439]:ExpressionStatement[35454-35481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35758-37062]:Block[35800-37104]"
    }, {
      "left" : "final String osname = System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH);",
      "right" : "final String osname = System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH);",
      "info" : "VariableDeclarationStatement[35768-35848]:VariableDeclarationStatement[35810-35890]"
    }, {
      "left" : "if (osname != null)",
      "right" : "if (osname != null)",
      "info" : "IfStatement[35858-36697]:IfStatement[35900-36739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35878-36697]:Block[35920-36739]"
    }, {
      "left" : "if (osname.startsWith(\"windows\"))",
      "right" : "if (osname.startsWith(\"windows\"))",
      "info" : "IfStatement[36007-36687]:IfStatement[36049-36729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36041-36462]:Block[36083-36504]"
    }, {
      "left" : "if (fileName.length() > 2)",
      "right" : "if (fileName.length() > 2)",
      "info" : "IfStatement[36059-36448]:IfStatement[36101-36490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36086-36448]:Block[36128-36490]"
    }, {
      "left" : "final char ch1 = fileName.charAt(0);",
      "right" : "final char ch1 = fileName.charAt(0);",
      "info" : "VariableDeclarationStatement[36108-36144]:VariableDeclarationStatement[36150-36186]"
    }, {
      "left" : "final char ch2 = fileName.charAt(1);",
      "right" : "final char ch2 = fileName.charAt(1);",
      "info" : "VariableDeclarationStatement[36165-36201]:VariableDeclarationStatement[36207-36243]"
    }, {
      "left" : "if (ch2 == ':'\n                        && (ch1 >= 'a' && ch1 <= 'z'\n                            || ch1 >= 'A' && ch1 <= 'Z'))",
      "right" : "if (ch2 == ':'\n                        && (ch1 >= 'a' && ch1 <= 'z'\n                            || ch1 >= 'A' && ch1 <= 'Z'))",
      "info" : "IfStatement[36223-36430]:IfStatement[36265-36472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36349-36430]:Block[36391-36472]"
    }, {
      "left" : "fileName = fileName.substring(2);",
      "right" : "fileName = fileName.substring(2);",
      "info" : "ExpressionStatement[36375-36408]:ExpressionStatement[36417-36450]"
    }, {
      "left" : "if (osname.contains(\"netware\"))",
      "right" : "if (osname.contains(\"netware\"))",
      "info" : "IfStatement[36468-36687]:IfStatement[36510-36729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36500-36687]:Block[36542-36729]"
    }, {
      "left" : "final int colon = fileName.indexOf(':');",
      "right" : "final int colon = fileName.indexOf(':');",
      "info" : "VariableDeclarationStatement[36518-36558]:VariableDeclarationStatement[36560-36600]"
    }, {
      "left" : "if (colon != -1)",
      "right" : "if (colon != -1)",
      "info" : "IfStatement[36575-36673]:IfStatement[36617-36715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36592-36673]:Block[36634-36715]"
    }, {
      "left" : "fileName = fileName.substring(colon + 1);",
      "right" : "fileName = fileName.substring(colon + 1);",
      "info" : "ExpressionStatement[36614-36655]:ExpressionStatement[36656-36697]"
    }, {
      "left" : "fileName = fileName.replace(File.separatorChar, '/');",
      "right" : "fileName = fileName.replace(File.separatorChar, '/');",
      "info" : "ExpressionStatement[36707-36760]:ExpressionStatement[36749-36802]"
    }, {
      "left" : "while (!preserveLeadingSlashes && fileName.startsWith(\"/\"))",
      "right" : "while (!preserveLeadingSlashes && fileName.startsWith(\"/\"))",
      "info" : "WhileStatement[36914-37031]:WhileStatement[36956-37073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36974-37031]:Block[37016-37073]"
    }, {
      "left" : "fileName = fileName.substring(1);",
      "right" : "fileName = fileName.substring(1);",
      "info" : "ExpressionStatement[36988-37021]:ExpressionStatement[37030-37063]"
    }, {
      "left" : "return fileName;",
      "right" : "return fileName;",
      "info" : "ReturnStatement[37040-37056]:ReturnStatement[37082-37098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37304-37798]:Block[37346-37840]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(MAGIC_GNU, header, MAGIC_OFFSET, MAGICLEN))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(MAGIC_GNU, header, MAGIC_OFFSET, MAGICLEN))",
      "info" : "IfStatement[37314-37437]:IfStatement[37356-37479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37392-37437]:Block[37434-37479]"
    }, {
      "left" : "return FORMAT_OLDGNU;",
      "right" : "return FORMAT_OLDGNU;",
      "info" : "ReturnStatement[37406-37427]:ReturnStatement[37448-37469]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(MAGIC_POSIX, header, MAGIC_OFFSET, MAGICLEN))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(MAGIC_POSIX, header, MAGIC_OFFSET, MAGICLEN))",
      "info" : "IfStatement[37446-37774]:IfStatement[37488-37816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37526-37774]:Block[37568-37816]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(MAGIC_XSTAR, header, XSTAR_MAGIC_OFFSET,\n                                              XSTAR_MAGIC_LEN))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(MAGIC_XSTAR, header, XSTAR_MAGIC_OFFSET,\n                                              XSTAR_MAGIC_LEN))",
      "info" : "IfStatement[37540-37731]:IfStatement[37582-37773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37679-37731]:Block[37721-37773]"
    }, {
      "left" : "return FORMAT_XSTAR;",
      "right" : "return FORMAT_XSTAR;",
      "info" : "ReturnStatement[37697-37717]:ReturnStatement[37739-37759]"
    }, {
      "left" : "return FORMAT_POSIX;",
      "right" : "return FORMAT_POSIX;",
      "info" : "ReturnStatement[37744-37764]:ReturnStatement[37786-37806]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[37783-37792]:ReturnStatement[37825-37834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37864-38111]:Block[37906-38153]"
    }, {
      "left" : "paxGNUSparse = true;",
      "right" : "paxGNUSparse = true;",
      "info" : "ExpressionStatement[37874-37894]:ExpressionStatement[37916-37936]"
    }, {
      "left" : "realSize = Integer.parseInt(headers.get(\"GNU.sparse.size\"));",
      "right" : "realSize = Integer.parseInt(headers.get(\"GNU.sparse.size\"));",
      "info" : "ExpressionStatement[37903-37963]:ExpressionStatement[37945-38005]"
    }, {
      "left" : "if (headers.containsKey(\"GNU.sparse.name\"))",
      "right" : "if (headers.containsKey(\"GNU.sparse.name\"))",
      "info" : "IfStatement[37972-38105]:IfStatement[38014-38147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38016-38105]:Block[38058-38147]"
    }, {
      "left" : "name = headers.get(\"GNU.sparse.name\");",
      "right" : "name = headers.get(\"GNU.sparse.name\");",
      "info" : "ExpressionStatement[38057-38095]:ExpressionStatement[38099-38137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38177-38333]:Block[38219-38375]"
    }, {
      "left" : "paxGNUSparse = true;",
      "right" : "paxGNUSparse = true;",
      "info" : "ExpressionStatement[38187-38207]:ExpressionStatement[38229-38249]"
    }, {
      "left" : "realSize = Integer.parseInt(headers.get(\"GNU.sparse.realsize\"));",
      "right" : "realSize = Integer.parseInt(headers.get(\"GNU.sparse.realsize\"));",
      "info" : "ExpressionStatement[38216-38280]:ExpressionStatement[38258-38322]"
    }, {
      "left" : "name = headers.get(\"GNU.sparse.name\");",
      "right" : "name = headers.get(\"GNU.sparse.name\");",
      "info" : "ExpressionStatement[38289-38327]:ExpressionStatement[38331-38369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38398-38567]:Block[38440-38609]"
    }, {
      "left" : "starSparse = true;",
      "right" : "starSparse = true;",
      "info" : "ExpressionStatement[38408-38426]:ExpressionStatement[38450-38468]"
    }, {
      "left" : "if (headers.containsKey(\"SCHILY.realsize\"))",
      "right" : "if (headers.containsKey(\"SCHILY.realsize\"))",
      "info" : "IfStatement[38435-38561]:IfStatement[38477-38603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38479-38561]:Block[38521-38603]"
    }, {
      "left" : "realSize = Long.parseLong(headers.get(\"SCHILY.realsize\"));",
      "right" : "realSize = Long.parseLong(headers.get(\"SCHILY.realsize\"));",
      "info" : "ExpressionStatement[38493-38551]:ExpressionStatement[38535-38593]"
    } ]
  },
  "interFileMappings" : { }
}