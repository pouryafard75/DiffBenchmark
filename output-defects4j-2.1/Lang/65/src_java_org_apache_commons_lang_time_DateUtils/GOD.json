{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DateUtils",
      "right" : "DateUtils",
      "info" : "TypeDeclaration[909-38293]:TypeDeclaration[909-39247]"
    }, {
      "left" : "public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");",
      "right" : "public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"GMT\");",
      "info" : "FieldDeclaration[1323-1466]:FieldDeclaration[1323-1466]"
    }, {
      "left" : "public static final long MILLIS_PER_SECOND = 1000;",
      "right" : "public static final long MILLIS_PER_SECOND = 1000;",
      "info" : "FieldDeclaration[1471-1607]:FieldDeclaration[1471-1607]"
    }, {
      "left" : "public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;",
      "right" : "public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;",
      "info" : "FieldDeclaration[1612-1766]:FieldDeclaration[1612-1766]"
    }, {
      "left" : "public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;",
      "right" : "public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;",
      "info" : "FieldDeclaration[1771-1921]:FieldDeclaration[1771-1921]"
    }, {
      "left" : "public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;",
      "right" : "public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;",
      "info" : "FieldDeclaration[1926-2072]:FieldDeclaration[1926-2072]"
    }, {
      "left" : "public final static int SEMI_MONTH = 1001;",
      "right" : "public final static int SEMI_MONTH = 1001;",
      "info" : "FieldDeclaration[2078-2249]:FieldDeclaration[2078-2249]"
    }, {
      "left" : "private static final int[][] fields = {\n            {Calendar.MILLISECOND},\n            {Calendar.SECOND},\n            {Calendar.MINUTE},\n            {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n            {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM \n                \n            },\n            {Calendar.MONTH, DateUtils.SEMI_MONTH},\n            {Calendar.YEAR},\n            {Calendar.ERA}};",
      "right" : "private static final int[][] fields = {\n            {Calendar.MILLISECOND},\n            {Calendar.SECOND},\n            {Calendar.MINUTE},\n            {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n            {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM \n                \n            },\n            {Calendar.MONTH, DateUtils.SEMI_MONTH},\n            {Calendar.YEAR},\n            {Calendar.ERA}};",
      "info" : "FieldDeclaration[2255-2731]:FieldDeclaration[2255-2731]"
    }, {
      "left" : "public final static int RANGE_WEEK_SUNDAY = 1;",
      "right" : "public final static int RANGE_WEEK_SUNDAY = 1;",
      "info" : "FieldDeclaration[2737-2840]:FieldDeclaration[2737-2840]"
    }, {
      "left" : "public final static int RANGE_WEEK_MONDAY = 2;",
      "right" : "public final static int RANGE_WEEK_MONDAY = 2;",
      "info" : "FieldDeclaration[2846-2949]:FieldDeclaration[2846-2949]"
    }, {
      "left" : "public final static int RANGE_WEEK_RELATIVE = 3;",
      "right" : "public final static int RANGE_WEEK_RELATIVE = 3;",
      "info" : "FieldDeclaration[2955-3069]:FieldDeclaration[2955-3069]"
    }, {
      "left" : "public final static int RANGE_WEEK_CENTER = 4;",
      "right" : "public final static int RANGE_WEEK_CENTER = 4;",
      "info" : "FieldDeclaration[3075-3191]:FieldDeclaration[3075-3191]"
    }, {
      "left" : "public final static int RANGE_MONTH_SUNDAY = 5;",
      "right" : "public final static int RANGE_MONTH_SUNDAY = 5;",
      "info" : "FieldDeclaration[3197-3311]:FieldDeclaration[3197-3311]"
    }, {
      "left" : "public final static int RANGE_MONTH_MONDAY = 6;",
      "right" : "public final static int RANGE_MONTH_MONDAY = 6;",
      "info" : "FieldDeclaration[3317-3431]:FieldDeclaration[3317-3431]"
    }, {
      "left" : "public DateUtils()",
      "right" : "public DateUtils()",
      "info" : "MethodDeclaration[3437-3797]:MethodDeclaration[3437-3797]"
    }, {
      "left" : "public static boolean isSameDay(Date date1, Date date2)",
      "right" : "public static boolean isSameDay(Date date1, Date date2)",
      "info" : "MethodDeclaration[3881-4788]:MethodDeclaration[3881-4788]"
    }, {
      "left" : "public static boolean isSameDay(Calendar cal1, Calendar cal2)",
      "right" : "public static boolean isSameDay(Calendar cal1, Calendar cal2)",
      "info" : "MethodDeclaration[4794-5748]:MethodDeclaration[4794-5748]"
    }, {
      "left" : "public static boolean isSameInstant(Date date1, Date date2)",
      "right" : "public static boolean isSameInstant(Date date1, Date date2)",
      "info" : "MethodDeclaration[5832-6552]:MethodDeclaration[5832-6552]"
    }, {
      "left" : "public static boolean isSameInstant(Calendar cal1, Calendar cal2)",
      "right" : "public static boolean isSameInstant(Calendar cal1, Calendar cal2)",
      "info" : "MethodDeclaration[6558-7310]:MethodDeclaration[6558-7310]"
    }, {
      "left" : "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2)",
      "right" : "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2)",
      "info" : "MethodDeclaration[7394-8720]:MethodDeclaration[7394-8720]"
    }, {
      "left" : "public static Date parseDate(String str, String[] parsePatterns) throws ParseException",
      "right" : "public static Date parseDate(String str, String[] parsePatterns) throws ParseException",
      "info" : "MethodDeclaration[8804-10313]:MethodDeclaration[8804-10313]"
    }, {
      "left" : "public static Date addYears(Date date, int amount)",
      "right" : "public static Date addYears(Date date, int amount)",
      "info" : "MethodDeclaration[10397-10850]:MethodDeclaration[10397-10850]"
    }, {
      "left" : "public static Date addMonths(Date date, int amount)",
      "right" : "public static Date addMonths(Date date, int amount)",
      "info" : "MethodDeclaration[10934-11390]:MethodDeclaration[10934-11390]"
    }, {
      "left" : "public static Date addWeeks(Date date, int amount)",
      "right" : "public static Date addWeeks(Date date, int amount)",
      "info" : "MethodDeclaration[11474-11935]:MethodDeclaration[11474-11935]"
    }, {
      "left" : "public static Date addDays(Date date, int amount)",
      "right" : "public static Date addDays(Date date, int amount)",
      "info" : "MethodDeclaration[12019-12478]:MethodDeclaration[12019-12478]"
    }, {
      "left" : "public static Date addHours(Date date, int amount)",
      "right" : "public static Date addHours(Date date, int amount)",
      "info" : "MethodDeclaration[12562-13022]:MethodDeclaration[12562-13022]"
    }, {
      "left" : "public static Date addMinutes(Date date, int amount)",
      "right" : "public static Date addMinutes(Date date, int amount)",
      "info" : "MethodDeclaration[13106-13565]:MethodDeclaration[13106-13565]"
    }, {
      "left" : "public static Date addSeconds(Date date, int amount)",
      "right" : "public static Date addSeconds(Date date, int amount)",
      "info" : "MethodDeclaration[13649-14108]:MethodDeclaration[13649-14108]"
    }, {
      "left" : "public static Date addMilliseconds(Date date, int amount)",
      "right" : "public static Date addMilliseconds(Date date, int amount)",
      "info" : "MethodDeclaration[14192-14666]:MethodDeclaration[14192-14666]"
    }, {
      "left" : "public static Date add(Date date, int calendarField, int amount)",
      "right" : "public static Date add(Date date, int calendarField, int amount)",
      "info" : "MethodDeclaration[14750-15459]:MethodDeclaration[14750-15459]"
    }, {
      "left" : "public static Date round(Date date, int field)",
      "right" : "public static Date round(Date date, int field)",
      "info" : "MethodDeclaration[15543-17148]:MethodDeclaration[15543-17148]"
    }, {
      "left" : "public static Calendar round(Calendar date, int field)",
      "right" : "public static Calendar round(Calendar date, int field)",
      "info" : "MethodDeclaration[17154-18760]:MethodDeclaration[17154-18760]"
    }, {
      "left" : "public static Date round(Object date, int field)",
      "right" : "public static Date round(Object date, int field)",
      "info" : "MethodDeclaration[18766-20654]:MethodDeclaration[18766-20654]"
    }, {
      "left" : "public static Date truncate(Date date, int field)",
      "right" : "public static Date truncate(Date date, int field)",
      "info" : "MethodDeclaration[20738-21731]:MethodDeclaration[20738-21731]"
    }, {
      "left" : "public static Calendar truncate(Calendar date, int field)",
      "right" : "public static Calendar truncate(Calendar date, int field)",
      "info" : "MethodDeclaration[21737-22737]:MethodDeclaration[21737-22737]"
    }, {
      "left" : "public static Date truncate(Object date, int field)",
      "right" : "public static Date truncate(Object date, int field)",
      "info" : "MethodDeclaration[22743-24069]:MethodDeclaration[22743-24069]"
    }, {
      "left" : "private static void modify(Calendar val, int field, boolean round)",
      "right" : "private static void modify(Calendar val, int field, boolean round)",
      "info" : "MethodDeclaration[24153-28689]:MethodDeclaration[24153-29643]"
    }, {
      "left" : "public static Iterator iterator(Date focus, int rangeStyle)",
      "right" : "public static Iterator iterator(Date focus, int rangeStyle)",
      "info" : "MethodDeclaration[28773-30289]:MethodDeclaration[29727-31243]"
    }, {
      "left" : "public static Iterator iterator(Calendar focus, int rangeStyle)",
      "right" : "public static Iterator iterator(Calendar focus, int rangeStyle)",
      "info" : "MethodDeclaration[30295-34321]:MethodDeclaration[31249-35275]"
    }, {
      "left" : "public static Iterator iterator(Object focus, int rangeStyle)",
      "right" : "public static Iterator iterator(Object focus, int rangeStyle)",
      "info" : "MethodDeclaration[34327-35750]:MethodDeclaration[35281-36704]"
    }, {
      "left" : "DateIterator",
      "right" : "DateIterator",
      "info" : "TypeDeclaration[35756-37269]:TypeDeclaration[36710-38223]"
    }, {
      "left" : "private final Calendar endFinal;",
      "right" : "private final Calendar endFinal;",
      "info" : "FieldDeclaration[35857-35889]:FieldDeclaration[36811-36843]"
    }, {
      "left" : "private final Calendar spot;",
      "right" : "private final Calendar spot;",
      "info" : "FieldDeclaration[35898-35926]:FieldDeclaration[36852-36880]"
    }, {
      "left" : "DateIterator(Calendar startFinal, Calendar endFinal)",
      "right" : "DateIterator(Calendar startFinal, Calendar endFinal)",
      "info" : "MethodDeclaration[35944-36354]:MethodDeclaration[36898-37308]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[36364-36618]:MethodDeclaration[37318-37572]"
    }, {
      "left" : "public Object next()",
      "right" : "public Object next()",
      "info" : "MethodDeclaration[36628-36981]:MethodDeclaration[37582-37935]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[36991-37263]:MethodDeclaration[37945-38217]"
    }, {
      "left" : "public static final int MILLIS_IN_SECOND = 1000;",
      "right" : "public static final int MILLIS_IN_SECOND = 1000;",
      "info" : "FieldDeclaration[37424-37632]:FieldDeclaration[38378-38586]"
    }, {
      "left" : "public static final int MILLIS_IN_MINUTE = 60 * 1000;",
      "right" : "public static final int MILLIS_IN_MINUTE = 60 * 1000;",
      "info" : "FieldDeclaration[37637-37850]:FieldDeclaration[38591-38804]"
    }, {
      "left" : "public static final int MILLIS_IN_HOUR = 60 * 60 * 1000;",
      "right" : "public static final int MILLIS_IN_HOUR = 60 * 60 * 1000;",
      "info" : "FieldDeclaration[37855-38067]:FieldDeclaration[38809-39021]"
    }, {
      "left" : "public static final int MILLIS_IN_DAY = 24 * 60 * 60 * 1000;",
      "right" : "public static final int MILLIS_IN_DAY = 24 * 60 * 60 * 1000;",
      "info" : "FieldDeclaration[38072-38286]:FieldDeclaration[39026-39240]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3773-3797]:Block[3773-3797]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[3783-3791]:SuperConstructorInvocation[3783-3791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4456-4788]:Block[4456-4788]"
    }, {
      "left" : "if (date1 == null || date2 == null)",
      "right" : "if (date1 == null || date2 == null)",
      "info" : "IfStatement[4466-4590]:IfStatement[4466-4590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4502-4590]:Block[4502-4590]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[4516-4580]:ThrowStatement[4516-4580]"
    }, {
      "left" : "Calendar cal1 = Calendar.getInstance();",
      "right" : "Calendar cal1 = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[4599-4638]:VariableDeclarationStatement[4599-4638]"
    }, {
      "left" : "cal1.setTime(date1);",
      "right" : "cal1.setTime(date1);",
      "info" : "ExpressionStatement[4647-4667]:ExpressionStatement[4647-4667]"
    }, {
      "left" : "Calendar cal2 = Calendar.getInstance();",
      "right" : "Calendar cal2 = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[4676-4715]:VariableDeclarationStatement[4676-4715]"
    }, {
      "left" : "cal2.setTime(date2);",
      "right" : "cal2.setTime(date2);",
      "info" : "ExpressionStatement[4724-4744]:ExpressionStatement[4724-4744]"
    }, {
      "left" : "return isSameDay(cal1, cal2);",
      "right" : "return isSameDay(cal1, cal2);",
      "info" : "ReturnStatement[4753-4782]:ReturnStatement[4753-4782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5389-5748]:Block[5389-5748]"
    }, {
      "left" : "if (cal1 == null || cal2 == null)",
      "right" : "if (cal1 == null || cal2 == null)",
      "info" : "IfStatement[5399-5521]:IfStatement[5399-5521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5433-5521]:Block[5433-5521]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[5447-5511]:ThrowStatement[5447-5511]"
    }, {
      "left" : "return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));",
      "right" : "return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));",
      "info" : "ReturnStatement[5530-5742]:ReturnStatement[5530-5742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6361-6552]:Block[6361-6552]"
    }, {
      "left" : "if (date1 == null || date2 == null)",
      "right" : "if (date1 == null || date2 == null)",
      "info" : "IfStatement[6371-6495]:IfStatement[6371-6495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6407-6495]:Block[6407-6495]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[6421-6485]:ThrowStatement[6421-6485]"
    }, {
      "left" : "return date1.getTime() == date2.getTime();",
      "right" : "return date1.getTime() == date2.getTime();",
      "info" : "ReturnStatement[6504-6546]:ReturnStatement[6504-6546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7103-7310]:Block[7103-7310]"
    }, {
      "left" : "if (cal1 == null || cal2 == null)",
      "right" : "if (cal1 == null || cal2 == null)",
      "info" : "IfStatement[7113-7235]:IfStatement[7113-7235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7147-7235]:Block[7147-7235]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[7161-7225]:ThrowStatement[7161-7225]"
    }, {
      "left" : "return cal1.getTime().getTime() == cal2.getTime().getTime();",
      "right" : "return cal1.getTime().getTime() == cal2.getTime().getTime();",
      "info" : "ReturnStatement[7244-7304]:ReturnStatement[7244-7304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8005-8720]:Block[8005-8720]"
    }, {
      "left" : "if (cal1 == null || cal2 == null)",
      "right" : "if (cal1 == null || cal2 == null)",
      "info" : "IfStatement[8015-8137]:IfStatement[8015-8137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8049-8137]:Block[8049-8137]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[8063-8127]:ThrowStatement[8063-8127]"
    }, {
      "left" : "return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.getClass() == cal2.getClass());",
      "right" : "return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.getClass() == cal2.getClass());",
      "info" : "ReturnStatement[8146-8714]:ReturnStatement[8146-8714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9551-10313]:Block[9551-10313]"
    }, {
      "left" : "if (str == null || parsePatterns == null)",
      "right" : "if (str == null || parsePatterns == null)",
      "info" : "IfStatement[9561-9700]:IfStatement[9561-9700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9603-9700]:Block[9603-9700]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Date and Patterns must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Date and Patterns must not be null\");",
      "info" : "ThrowStatement[9617-9690]:ThrowStatement[9617-9690]"
    }, {
      "left" : "SimpleDateFormat parser = null;",
      "right" : "SimpleDateFormat parser = null;",
      "info" : "VariableDeclarationStatement[9718-9749]:VariableDeclarationStatement[9718-9749]"
    }, {
      "left" : "ParsePosition pos = new ParsePosition(0);",
      "right" : "ParsePosition pos = new ParsePosition(0);",
      "info" : "VariableDeclarationStatement[9758-9799]:VariableDeclarationStatement[9758-9799]"
    }, {
      "left" : "for (int i = 0; i < parsePatterns.length; i++)",
      "right" : "for (int i = 0; i < parsePatterns.length; i++)",
      "info" : "ForStatement[9808-10233]:ForStatement[9808-10233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9855-10233]:Block[9855-10233]"
    }, {
      "left" : "if (i == 0)",
      "right" : "if (i == 0)",
      "info" : "IfStatement[9869-10037]:IfStatement[9869-10037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9881-9961]:Block[9881-9961]"
    }, {
      "left" : "parser = new SimpleDateFormat(parsePatterns[0]);",
      "right" : "parser = new SimpleDateFormat(parsePatterns[0]);",
      "info" : "ExpressionStatement[9899-9947]:ExpressionStatement[9899-9947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9967-10037]:Block[9967-10037]"
    }, {
      "left" : "parser.applyPattern(parsePatterns[i]);",
      "right" : "parser.applyPattern(parsePatterns[i]);",
      "info" : "ExpressionStatement[9985-10023]:ExpressionStatement[9985-10023]"
    }, {
      "left" : "pos.setIndex(0);",
      "right" : "pos.setIndex(0);",
      "info" : "ExpressionStatement[10050-10066]:ExpressionStatement[10050-10066]"
    }, {
      "left" : "Date date = parser.parse(str, pos);",
      "right" : "Date date = parser.parse(str, pos);",
      "info" : "VariableDeclarationStatement[10079-10114]:VariableDeclarationStatement[10079-10114]"
    }, {
      "left" : "if (date != null && pos.getIndex() == str.length())",
      "right" : "if (date != null && pos.getIndex() == str.length())",
      "info" : "IfStatement[10127-10223]:IfStatement[10127-10223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10179-10223]:Block[10179-10223]"
    }, {
      "left" : "return date;",
      "right" : "return date;",
      "info" : "ReturnStatement[10197-10209]:ReturnStatement[10197-10209]"
    }, {
      "left" : "throw new ParseException(\"Unable to parse the date: \" + str, -1);",
      "right" : "throw new ParseException(\"Unable to parse the date: \" + str, -1);",
      "info" : "ThrowStatement[10242-10307]:ThrowStatement[10242-10307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10794-10850]:Block[10794-10850]"
    }, {
      "left" : "return add(date, Calendar.YEAR, amount);",
      "right" : "return add(date, Calendar.YEAR, amount);",
      "info" : "ReturnStatement[10804-10844]:ReturnStatement[10804-10844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11333-11390]:Block[11333-11390]"
    }, {
      "left" : "return add(date, Calendar.MONTH, amount);",
      "right" : "return add(date, Calendar.MONTH, amount);",
      "info" : "ReturnStatement[11343-11384]:ReturnStatement[11343-11384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11871-11935]:Block[11871-11935]"
    }, {
      "left" : "return add(date, Calendar.WEEK_OF_YEAR, amount);",
      "right" : "return add(date, Calendar.WEEK_OF_YEAR, amount);",
      "info" : "ReturnStatement[11881-11929]:ReturnStatement[11881-11929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12414-12478]:Block[12414-12478]"
    }, {
      "left" : "return add(date, Calendar.DAY_OF_MONTH, amount);",
      "right" : "return add(date, Calendar.DAY_OF_MONTH, amount);",
      "info" : "ReturnStatement[12424-12472]:ReturnStatement[12424-12472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12959-13022]:Block[12959-13022]"
    }, {
      "left" : "return add(date, Calendar.HOUR_OF_DAY, amount);",
      "right" : "return add(date, Calendar.HOUR_OF_DAY, amount);",
      "info" : "ReturnStatement[12969-13016]:ReturnStatement[12969-13016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13507-13565]:Block[13507-13565]"
    }, {
      "left" : "return add(date, Calendar.MINUTE, amount);",
      "right" : "return add(date, Calendar.MINUTE, amount);",
      "info" : "ReturnStatement[13517-13559]:ReturnStatement[13517-13559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14050-14108]:Block[14050-14108]"
    }, {
      "left" : "return add(date, Calendar.SECOND, amount);",
      "right" : "return add(date, Calendar.SECOND, amount);",
      "info" : "ReturnStatement[14060-14102]:ReturnStatement[14060-14102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14603-14666]:Block[14603-14666]"
    }, {
      "left" : "return add(date, Calendar.MILLISECOND, amount);",
      "right" : "return add(date, Calendar.MILLISECOND, amount);",
      "info" : "ReturnStatement[14613-14660]:ReturnStatement[14613-14660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15201-15459]:Block[15201-15459]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[15211-15317]:IfStatement[15211-15317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15229-15317]:Block[15229-15317]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[15243-15307]:ThrowStatement[15243-15307]"
    }, {
      "left" : "Calendar c = Calendar.getInstance();",
      "right" : "Calendar c = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[15326-15362]:VariableDeclarationStatement[15326-15362]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[15371-15387]:ExpressionStatement[15371-15387]"
    }, {
      "left" : "c.add(calendarField, amount);",
      "right" : "c.add(calendarField, amount);",
      "info" : "ExpressionStatement[15396-15425]:ExpressionStatement[15396-15425]"
    }, {
      "left" : "return c.getTime();",
      "right" : "return c.getTime();",
      "info" : "ReturnStatement[15434-15453]:ReturnStatement[15434-15453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16884-17148]:Block[16884-17148]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[16894-17000]:IfStatement[16894-17000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16912-17000]:Block[16912-17000]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[16926-16990]:ThrowStatement[16926-16990]"
    }, {
      "left" : "Calendar gval = Calendar.getInstance();",
      "right" : "Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[17009-17048]:VariableDeclarationStatement[17009-17048]"
    }, {
      "left" : "gval.setTime(date);",
      "right" : "gval.setTime(date);",
      "info" : "ExpressionStatement[17057-17076]:ExpressionStatement[17057-17076]"
    }, {
      "left" : "modify(gval, field, true);",
      "right" : "modify(gval, field, true);",
      "info" : "ExpressionStatement[17085-17111]:ExpressionStatement[17085-17111]"
    }, {
      "left" : "return gval.getTime();",
      "right" : "return gval.getTime();",
      "info" : "ReturnStatement[17120-17142]:ReturnStatement[17120-17142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18524-18760]:Block[18524-18760]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[18534-18640]:IfStatement[18534-18640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18552-18640]:Block[18552-18640]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[18566-18630]:ThrowStatement[18566-18630]"
    }, {
      "left" : "Calendar rounded = (Calendar) date.clone();",
      "right" : "Calendar rounded = (Calendar) date.clone();",
      "info" : "VariableDeclarationStatement[18649-18692]:VariableDeclarationStatement[18649-18692]"
    }, {
      "left" : "modify(rounded, field, true);",
      "right" : "modify(rounded, field, true);",
      "info" : "ExpressionStatement[18701-18730]:ExpressionStatement[18701-18730]"
    }, {
      "left" : "return rounded;",
      "right" : "return rounded;",
      "info" : "ReturnStatement[18739-18754]:ReturnStatement[18739-18754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20247-20654]:Block[20247-20654]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[20257-20363]:IfStatement[20257-20363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20275-20363]:Block[20275-20363]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[20289-20353]:ThrowStatement[20289-20353]"
    }, {
      "left" : "if (date instanceof Date)",
      "right" : "if (date instanceof Date)",
      "info" : "IfStatement[20372-20648]:IfStatement[20372-20648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20398-20455]:Block[20398-20455]"
    }, {
      "left" : "return round((Date) date, field);",
      "right" : "return round((Date) date, field);",
      "info" : "ReturnStatement[20412-20445]:ReturnStatement[20412-20445]"
    }, {
      "left" : "if (date instanceof Calendar)",
      "right" : "if (date instanceof Calendar)",
      "info" : "IfStatement[20461-20648]:IfStatement[20461-20648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20491-20562]:Block[20491-20562]"
    }, {
      "left" : "return round((Calendar) date, field).getTime();",
      "right" : "return round((Calendar) date, field).getTime();",
      "info" : "ReturnStatement[20505-20552]:ReturnStatement[20505-20552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20568-20648]:Block[20568-20648]"
    }, {
      "left" : "throw new ClassCastException(\"Could not round \" + date);",
      "right" : "throw new ClassCastException(\"Could not round \" + date);",
      "info" : "ThrowStatement[20582-20638]:ThrowStatement[20582-20638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21466-21731]:Block[21466-21731]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[21476-21582]:IfStatement[21476-21582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21494-21582]:Block[21494-21582]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[21508-21572]:ThrowStatement[21508-21572]"
    }, {
      "left" : "Calendar gval = Calendar.getInstance();",
      "right" : "Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[21591-21630]:VariableDeclarationStatement[21591-21630]"
    }, {
      "left" : "gval.setTime(date);",
      "right" : "gval.setTime(date);",
      "info" : "ExpressionStatement[21639-21658]:ExpressionStatement[21639-21658]"
    }, {
      "left" : "modify(gval, field, false);",
      "right" : "modify(gval, field, false);",
      "info" : "ExpressionStatement[21667-21694]:ExpressionStatement[21667-21694]"
    }, {
      "left" : "return gval.getTime();",
      "right" : "return gval.getTime();",
      "info" : "ReturnStatement[21703-21725]:ReturnStatement[21703-21725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22494-22737]:Block[22494-22737]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[22504-22610]:IfStatement[22504-22610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22522-22610]:Block[22522-22610]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[22536-22600]:ThrowStatement[22536-22600]"
    }, {
      "left" : "Calendar truncated = (Calendar) date.clone();",
      "right" : "Calendar truncated = (Calendar) date.clone();",
      "info" : "VariableDeclarationStatement[22619-22664]:VariableDeclarationStatement[22619-22664]"
    }, {
      "left" : "modify(truncated, field, false);",
      "right" : "modify(truncated, field, false);",
      "info" : "ExpressionStatement[22673-22705]:ExpressionStatement[22673-22705]"
    }, {
      "left" : "return truncated;",
      "right" : "return truncated;",
      "info" : "ReturnStatement[22714-22731]:ReturnStatement[22714-22731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23653-24069]:Block[23653-24069]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[23663-23769]:IfStatement[23663-23769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23681-23769]:Block[23681-23769]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[23695-23759]:ThrowStatement[23695-23759]"
    }, {
      "left" : "if (date instanceof Date)",
      "right" : "if (date instanceof Date)",
      "info" : "IfStatement[23778-24063]:IfStatement[23778-24063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23804-23864]:Block[23804-23864]"
    }, {
      "left" : "return truncate((Date) date, field);",
      "right" : "return truncate((Date) date, field);",
      "info" : "ReturnStatement[23818-23854]:ReturnStatement[23818-23854]"
    }, {
      "left" : "if (date instanceof Calendar)",
      "right" : "if (date instanceof Calendar)",
      "info" : "IfStatement[23870-24063]:IfStatement[23870-24063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23900-23974]:Block[23900-23974]"
    }, {
      "left" : "return truncate((Calendar) date, field).getTime();",
      "right" : "return truncate((Calendar) date, field).getTime();",
      "info" : "ReturnStatement[23914-23964]:ReturnStatement[23914-23964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23980-24063]:Block[23980-24063]"
    }, {
      "left" : "throw new ClassCastException(\"Could not truncate \" + date);",
      "right" : "throw new ClassCastException(\"Could not truncate \" + date);",
      "info" : "ThrowStatement[23994-24053]:ThrowStatement[23994-24053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24480-28689]:Block[24480-29643]"
    }, {
      "left" : "if (val.get(Calendar.YEAR) > 280000000)",
      "right" : "if (val.get(Calendar.YEAR) > 280000000)",
      "info" : "IfStatement[24490-24638]:IfStatement[24490-24638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24530-24638]:Block[24530-24638]"
    }, {
      "left" : "throw new ArithmeticException(\"Calendar value too large for accurate calculations\");",
      "right" : "throw new ArithmeticException(\"Calendar value too large for accurate calculations\");",
      "info" : "ThrowStatement[24544-24628]:ThrowStatement[24544-24628]"
    }, {
      "left" : "boolean roundUp = false;",
      "right" : "boolean roundUp = false;",
      "info" : "VariableDeclarationStatement[25136-25160]:VariableDeclarationStatement[26045-26069]"
    }, {
      "left" : "for (int i = 0; i < fields.length; i++)",
      "right" : "for (int i = 0; i < fields.length; i++)",
      "info" : "ForStatement[25169-28594]:ForStatement[26078-29548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25209-28594]:Block[26118-29548]"
    }, {
      "left" : "for (int j = 0; j < fields[i].length; j++)",
      "right" : "for (int j = 0; j < fields[i].length; j++)",
      "info" : "ForStatement[25223-26345]:ForStatement[26132-27254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25266-26345]:Block[26175-27254]"
    }, {
      "left" : "if (fields[i][j] == field)",
      "right" : "if (fields[i][j] == field)",
      "info" : "IfStatement[25284-26331]:IfStatement[26193-27240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25311-26331]:Block[26220-27240]"
    }, {
      "left" : "if (round && roundUp)",
      "right" : "if (round && roundUp)",
      "info" : "IfStatement[25392-26285]:IfStatement[26301-27194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25414-26285]:Block[26323-27194]"
    }, {
      "left" : "if (field == DateUtils.SEMI_MONTH)",
      "right" : "if (field == DateUtils.SEMI_MONTH)",
      "info" : "IfStatement[25440-26263]:IfStatement[26349-27172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25475-26037]:Block[26384-26946]"
    }, {
      "left" : "if (val.get(Calendar.DATE) == 1)",
      "right" : "if (val.get(Calendar.DATE) == 1)",
      "info" : "IfStatement[25729-26011]:IfStatement[26638-26920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25762-25853]:Block[26671-26762]"
    }, {
      "left" : "val.add(Calendar.DATE, 15);",
      "right" : "val.add(Calendar.DATE, 15);",
      "info" : "ExpressionStatement[25796-25823]:ExpressionStatement[26705-26732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25859-26011]:Block[26768-26920]"
    }, {
      "left" : "val.add(Calendar.DATE, -15);",
      "right" : "val.add(Calendar.DATE, -15);",
      "info" : "ExpressionStatement[25893-25921]:ExpressionStatement[26802-26830]"
    }, {
      "left" : "val.add(Calendar.MONTH, 1);",
      "right" : "val.add(Calendar.MONTH, 1);",
      "info" : "ExpressionStatement[25954-25981]:ExpressionStatement[26863-26890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26043-26263]:Block[26952-27172]"
    }, {
      "left" : "val.add(fields[i][0], 1);",
      "right" : "val.add(fields[i][0], 1);",
      "info" : "ExpressionStatement[26212-26237]:ExpressionStatement[27121-27146]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[26306-26313]:ReturnStatement[27215-27222]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[26423-26438]:VariableDeclarationStatement[27332-27347]"
    }, {
      "left" : "boolean offsetSet = false;",
      "right" : "boolean offsetSet = false;",
      "info" : "VariableDeclarationStatement[26451-26477]:VariableDeclarationStatement[27360-27386]"
    }, {
      "left" : "switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }",
      "right" : "switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }",
      "info" : "SwitchStatement[26576-28032]:SwitchStatement[27485-28941]"
    }, {
      "left" : "case DateUtils.SEMI_MONTH:",
      "right" : "case DateUtils.SEMI_MONTH:",
      "info" : "SwitchCase[26609-26635]:SwitchCase[27518-27544]"
    }, {
      "left" : "if (fields[i][0] == Calendar.DATE)",
      "right" : "if (fields[i][0] == Calendar.DATE)",
      "info" : "IfStatement[26656-27444]:IfStatement[27565-28353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26691-27444]:Block[27600-28353]"
    }, {
      "left" : "offset = val.get(Calendar.DATE) - 1;",
      "right" : "offset = val.get(Calendar.DATE) - 1;",
      "info" : "ExpressionStatement[26932-26968]:ExpressionStatement[27841-27877]"
    }, {
      "left" : "if (offset >= 15)",
      "right" : "if (offset >= 15)",
      "info" : "IfStatement[27160-27247]:IfStatement[28069-28156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27178-27247]:Block[28087-28156]"
    }, {
      "left" : "offset -= 15;",
      "right" : "offset -= 15;",
      "info" : "ExpressionStatement[27208-27221]:ExpressionStatement[28117-28130]"
    }, {
      "left" : "roundUp = offset > 7;",
      "right" : "roundUp = offset > 7;",
      "info" : "ExpressionStatement[27359-27380]:ExpressionStatement[28268-28289]"
    }, {
      "left" : "offsetSet = true;",
      "right" : "offsetSet = true;",
      "info" : "ExpressionStatement[27405-27422]:ExpressionStatement[28314-28331]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27465-27471]:BreakStatement[28374-28380]"
    }, {
      "left" : "case Calendar.AM_PM:",
      "right" : "case Calendar.AM_PM:",
      "info" : "SwitchCase[27488-27508]:SwitchCase[28397-28417]"
    }, {
      "left" : "if (fields[i][0] == Calendar.HOUR_OF_DAY)",
      "right" : "if (fields[i][0] == Calendar.HOUR_OF_DAY)",
      "info" : "IfStatement[27529-27991]:IfStatement[28438-28900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27571-27991]:Block[28480-28900]"
    }, {
      "left" : "offset = val.get(Calendar.HOUR_OF_DAY);",
      "right" : "offset = val.get(Calendar.HOUR_OF_DAY);",
      "info" : "ExpressionStatement[27730-27769]:ExpressionStatement[28639-28678]"
    }, {
      "left" : "if (offset >= 12)",
      "right" : "if (offset >= 12)",
      "info" : "IfStatement[27794-27881]:IfStatement[28703-28790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27812-27881]:Block[28721-28790]"
    }, {
      "left" : "offset -= 12;",
      "right" : "offset -= 12;",
      "info" : "ExpressionStatement[27842-27855]:ExpressionStatement[28751-28764]"
    }, {
      "left" : "roundUp = offset > 6;",
      "right" : "roundUp = offset > 6;",
      "info" : "ExpressionStatement[27906-27927]:ExpressionStatement[28815-28836]"
    }, {
      "left" : "offsetSet = true;",
      "right" : "offsetSet = true;",
      "info" : "ExpressionStatement[27952-27969]:ExpressionStatement[28861-28878]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28012-28018]:BreakStatement[28921-28927]"
    }, {
      "left" : "if (!offsetSet)",
      "right" : "if (!offsetSet)",
      "info" : "IfStatement[28045-28470]:IfStatement[28954-29379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28061-28470]:Block[28970-29379]"
    }, {
      "left" : "int min = val.getActualMinimum(fields[i][0]);",
      "right" : "int min = val.getActualMinimum(fields[i][0]);",
      "info" : "VariableDeclarationStatement[28079-28124]:VariableDeclarationStatement[28988-29033]"
    }, {
      "left" : "int max = val.getActualMaximum(fields[i][0]);",
      "right" : "int max = val.getActualMaximum(fields[i][0]);",
      "info" : "VariableDeclarationStatement[28141-28186]:VariableDeclarationStatement[29050-29095]"
    }, {
      "left" : "offset = val.get(fields[i][0]) - min;",
      "right" : "offset = val.get(fields[i][0]) - min;",
      "info" : "ExpressionStatement[28273-28310]:ExpressionStatement[29182-29219]"
    }, {
      "left" : "roundUp = offset > ((max - min) / 2);",
      "right" : "roundUp = offset > ((max - min) / 2);",
      "info" : "ExpressionStatement[28419-28456]:ExpressionStatement[29328-29365]"
    }, {
      "left" : "val.set(fields[i][0], val.get(fields[i][0]) - offset);",
      "right" : "val.set(fields[i][0], val.get(fields[i][0]) - offset);",
      "info" : "ExpressionStatement[28530-28584]:ExpressionStatement[29470-29524]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");",
      "right" : "throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");",
      "info" : "ThrowStatement[28603-28682]:ThrowStatement[29557-29636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30046-30289]:Block[31000-31243]"
    }, {
      "left" : "if (focus == null)",
      "right" : "if (focus == null)",
      "info" : "IfStatement[30056-30163]:IfStatement[31010-31117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30075-30163]:Block[31029-31117]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[30089-30153]:ThrowStatement[31043-31107]"
    }, {
      "left" : "Calendar gval = Calendar.getInstance();",
      "right" : "Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[30172-30211]:VariableDeclarationStatement[31126-31165]"
    }, {
      "left" : "gval.setTime(focus);",
      "right" : "gval.setTime(focus);",
      "info" : "ExpressionStatement[30220-30240]:ExpressionStatement[31174-31194]"
    }, {
      "left" : "return iterator(gval, rangeStyle);",
      "right" : "return iterator(gval, rangeStyle);",
      "info" : "ReturnStatement[30249-30283]:ReturnStatement[31203-31237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31521-34321]:Block[32475-35275]"
    }, {
      "left" : "if (focus == null)",
      "right" : "if (focus == null)",
      "info" : "IfStatement[31531-31638]:IfStatement[32485-32592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31550-31638]:Block[32504-32592]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[31564-31628]:ThrowStatement[32518-32582]"
    }, {
      "left" : "Calendar start = null;",
      "right" : "Calendar start = null;",
      "info" : "VariableDeclarationStatement[31647-31669]:VariableDeclarationStatement[32601-32623]"
    }, {
      "left" : "Calendar end = null;",
      "right" : "Calendar end = null;",
      "info" : "VariableDeclarationStatement[31678-31698]:VariableDeclarationStatement[32632-32652]"
    }, {
      "left" : "int startCutoff = Calendar.SUNDAY;",
      "right" : "int startCutoff = Calendar.SUNDAY;",
      "info" : "VariableDeclarationStatement[31707-31741]:VariableDeclarationStatement[32661-32695]"
    }, {
      "left" : "int endCutoff = Calendar.SATURDAY;",
      "right" : "int endCutoff = Calendar.SATURDAY;",
      "info" : "VariableDeclarationStatement[31750-31784]:VariableDeclarationStatement[32704-32738]"
    }, {
      "left" : "switch (rangeStyle) {\n            case RANGE_MONTH_SUNDAY:\n            case RANGE_MONTH_MONDAY:\n                //Set start to the first of the month\n                start = truncate(focus, Calendar.MONTH);\n                //Set end to the last of the month\n                end = (Calendar) start.clone();\n                end.add(Calendar.MONTH, 1);\n                end.add(Calendar.DATE, -1);\n                //Loop start back to the previous sunday or monday\n                if (rangeStyle == RANGE_MONTH_MONDAY) {\n                    startCutoff = Calendar.MONDAY;\n                    endCutoff = Calendar.SUNDAY;\n                }\n                break;\n            case RANGE_WEEK_SUNDAY:\n            case RANGE_WEEK_MONDAY:\n            case RANGE_WEEK_RELATIVE:\n            case RANGE_WEEK_CENTER:\n                //Set start and end to the current date\n                start = truncate(focus, Calendar.DATE);\n                end = truncate(focus, Calendar.DATE);\n                switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");\n        }",
      "right" : "switch (rangeStyle) {\n            case RANGE_MONTH_SUNDAY:\n            case RANGE_MONTH_MONDAY:\n                //Set start to the first of the month\n                start = truncate(focus, Calendar.MONTH);\n                //Set end to the last of the month\n                end = (Calendar) start.clone();\n                end.add(Calendar.MONTH, 1);\n                end.add(Calendar.DATE, -1);\n                //Loop start back to the previous sunday or monday\n                if (rangeStyle == RANGE_MONTH_MONDAY) {\n                    startCutoff = Calendar.MONDAY;\n                    endCutoff = Calendar.SUNDAY;\n                }\n                break;\n            case RANGE_WEEK_SUNDAY:\n            case RANGE_WEEK_MONDAY:\n            case RANGE_WEEK_RELATIVE:\n            case RANGE_WEEK_CENTER:\n                //Set start and end to the current date\n                start = truncate(focus, Calendar.DATE);\n                end = truncate(focus, Calendar.DATE);\n                switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");\n        }",
      "info" : "SwitchStatement[31793-33707]:SwitchStatement[32747-34661]"
    }, {
      "left" : "case RANGE_MONTH_SUNDAY:",
      "right" : "case RANGE_MONTH_SUNDAY:",
      "info" : "SwitchCase[31827-31851]:SwitchCase[32781-32805]"
    }, {
      "left" : "case RANGE_MONTH_MONDAY:",
      "right" : "case RANGE_MONTH_MONDAY:",
      "info" : "SwitchCase[31864-31888]:SwitchCase[32818-32842]"
    }, {
      "left" : "start = truncate(focus, Calendar.MONTH);",
      "right" : "start = truncate(focus, Calendar.MONTH);",
      "info" : "ExpressionStatement[31959-31999]:ExpressionStatement[32913-32953]"
    }, {
      "left" : "end = (Calendar) start.clone();",
      "right" : "end = (Calendar) start.clone();",
      "info" : "ExpressionStatement[32067-32098]:ExpressionStatement[33021-33052]"
    }, {
      "left" : "end.add(Calendar.MONTH, 1);",
      "right" : "end.add(Calendar.MONTH, 1);",
      "info" : "ExpressionStatement[32115-32142]:ExpressionStatement[33069-33096]"
    }, {
      "left" : "end.add(Calendar.DATE, -1);",
      "right" : "end.add(Calendar.DATE, -1);",
      "info" : "ExpressionStatement[32159-32186]:ExpressionStatement[33113-33140]"
    }, {
      "left" : "if (rangeStyle == RANGE_MONTH_MONDAY)",
      "right" : "if (rangeStyle == RANGE_MONTH_MONDAY)",
      "info" : "IfStatement[32270-32427]:IfStatement[33224-33381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32308-32427]:Block[33262-33381]"
    }, {
      "left" : "startCutoff = Calendar.MONDAY;",
      "right" : "startCutoff = Calendar.MONDAY;",
      "info" : "ExpressionStatement[32330-32360]:ExpressionStatement[33284-33314]"
    }, {
      "left" : "endCutoff = Calendar.SUNDAY;",
      "right" : "endCutoff = Calendar.SUNDAY;",
      "info" : "ExpressionStatement[32381-32409]:ExpressionStatement[33335-33363]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32444-32450]:BreakStatement[33398-33404]"
    }, {
      "left" : "case RANGE_WEEK_SUNDAY:",
      "right" : "case RANGE_WEEK_SUNDAY:",
      "info" : "SwitchCase[32463-32486]:SwitchCase[33417-33440]"
    }, {
      "left" : "case RANGE_WEEK_MONDAY:",
      "right" : "case RANGE_WEEK_MONDAY:",
      "info" : "SwitchCase[32499-32522]:SwitchCase[33453-33476]"
    }, {
      "left" : "case RANGE_WEEK_RELATIVE:",
      "right" : "case RANGE_WEEK_RELATIVE:",
      "info" : "SwitchCase[32535-32560]:SwitchCase[33489-33514]"
    }, {
      "left" : "case RANGE_WEEK_CENTER:",
      "right" : "case RANGE_WEEK_CENTER:",
      "info" : "SwitchCase[32573-32596]:SwitchCase[33527-33550]"
    }, {
      "left" : "start = truncate(focus, Calendar.DATE);",
      "right" : "start = truncate(focus, Calendar.DATE);",
      "info" : "ExpressionStatement[32669-32708]:ExpressionStatement[33623-33662]"
    }, {
      "left" : "end = truncate(focus, Calendar.DATE);",
      "right" : "end = truncate(focus, Calendar.DATE);",
      "info" : "ExpressionStatement[32725-32762]:ExpressionStatement[33679-33716]"
    }, {
      "left" : "switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                }",
      "right" : "switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                }",
      "info" : "SwitchStatement[32779-33549]:SwitchStatement[33733-34503]"
    }, {
      "left" : "case RANGE_WEEK_SUNDAY:",
      "right" : "case RANGE_WEEK_SUNDAY:",
      "info" : "SwitchCase[32821-32844]:SwitchCase[33775-33798]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32918-32924]:BreakStatement[33872-33878]"
    }, {
      "left" : "case RANGE_WEEK_MONDAY:",
      "right" : "case RANGE_WEEK_MONDAY:",
      "info" : "SwitchCase[32945-32968]:SwitchCase[33899-33922]"
    }, {
      "left" : "startCutoff = Calendar.MONDAY;",
      "right" : "startCutoff = Calendar.MONDAY;",
      "info" : "ExpressionStatement[32993-33023]:ExpressionStatement[33947-33977]"
    }, {
      "left" : "endCutoff = Calendar.SUNDAY;",
      "right" : "endCutoff = Calendar.SUNDAY;",
      "info" : "ExpressionStatement[33048-33076]:ExpressionStatement[34002-34030]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33101-33107]:BreakStatement[34055-34061]"
    }, {
      "left" : "case RANGE_WEEK_RELATIVE:",
      "right" : "case RANGE_WEEK_RELATIVE:",
      "info" : "SwitchCase[33128-33153]:SwitchCase[34082-34107]"
    }, {
      "left" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK);",
      "right" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK);",
      "info" : "ExpressionStatement[33178-33224]:ExpressionStatement[34132-34178]"
    }, {
      "left" : "endCutoff = startCutoff - 1;",
      "right" : "endCutoff = startCutoff - 1;",
      "info" : "ExpressionStatement[33249-33277]:ExpressionStatement[34203-34231]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33302-33308]:BreakStatement[34256-34262]"
    }, {
      "left" : "case RANGE_WEEK_CENTER:",
      "right" : "case RANGE_WEEK_CENTER:",
      "info" : "SwitchCase[33329-33352]:SwitchCase[34283-34306]"
    }, {
      "left" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;",
      "right" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;",
      "info" : "ExpressionStatement[33377-33427]:ExpressionStatement[34331-34381]"
    }, {
      "left" : "endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;",
      "right" : "endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;",
      "info" : "ExpressionStatement[33452-33500]:ExpressionStatement[34406-34454]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33525-33531]:BreakStatement[34479-34485]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33566-33572]:BreakStatement[34520-34526]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[33585-33593]:SwitchCase[34539-34547]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");",
      "right" : "throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");",
      "info" : "ThrowStatement[33610-33697]:ThrowStatement[34564-34651]"
    }, {
      "left" : "if (startCutoff < Calendar.SUNDAY)",
      "right" : "if (startCutoff < Calendar.SUNDAY)",
      "info" : "IfStatement[33716-33792]:IfStatement[34670-34746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33751-33792]:Block[34705-34746]"
    }, {
      "left" : "startCutoff += 7;",
      "right" : "startCutoff += 7;",
      "info" : "ExpressionStatement[33765-33782]:ExpressionStatement[34719-34736]"
    }, {
      "left" : "if (startCutoff > Calendar.SATURDAY)",
      "right" : "if (startCutoff > Calendar.SATURDAY)",
      "info" : "IfStatement[33801-33879]:IfStatement[34755-34833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33838-33879]:Block[34792-34833]"
    }, {
      "left" : "startCutoff -= 7;",
      "right" : "startCutoff -= 7;",
      "info" : "ExpressionStatement[33852-33869]:ExpressionStatement[34806-34823]"
    }, {
      "left" : "if (endCutoff < Calendar.SUNDAY)",
      "right" : "if (endCutoff < Calendar.SUNDAY)",
      "info" : "IfStatement[33888-33960]:IfStatement[34842-34914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33921-33960]:Block[34875-34914]"
    }, {
      "left" : "endCutoff += 7;",
      "right" : "endCutoff += 7;",
      "info" : "ExpressionStatement[33935-33950]:ExpressionStatement[34889-34904]"
    }, {
      "left" : "if (endCutoff > Calendar.SATURDAY)",
      "right" : "if (endCutoff > Calendar.SATURDAY)",
      "info" : "IfStatement[33969-34043]:IfStatement[34923-34997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34004-34043]:Block[34958-34997]"
    }, {
      "left" : "endCutoff -= 7;",
      "right" : "endCutoff -= 7;",
      "info" : "ExpressionStatement[34018-34033]:ExpressionStatement[34972-34987]"
    }, {
      "left" : "while (start.get(Calendar.DAY_OF_WEEK) != startCutoff)",
      "right" : "while (start.get(Calendar.DAY_OF_WEEK) != startCutoff)",
      "info" : "WhileStatement[34052-34160]:WhileStatement[35006-35114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34107-34160]:Block[35061-35114]"
    }, {
      "left" : "start.add(Calendar.DATE, -1);",
      "right" : "start.add(Calendar.DATE, -1);",
      "info" : "ExpressionStatement[34121-34150]:ExpressionStatement[35075-35104]"
    }, {
      "left" : "while (end.get(Calendar.DAY_OF_WEEK) != endCutoff)",
      "right" : "while (end.get(Calendar.DAY_OF_WEEK) != endCutoff)",
      "info" : "WhileStatement[34169-34270]:WhileStatement[35123-35224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34220-34270]:Block[35174-35224]"
    }, {
      "left" : "end.add(Calendar.DATE, 1);",
      "right" : "end.add(Calendar.DATE, 1);",
      "info" : "ExpressionStatement[34234-34260]:ExpressionStatement[35188-35214]"
    }, {
      "left" : "return new DateIterator(start, end);",
      "right" : "return new DateIterator(start, end);",
      "info" : "ReturnStatement[34279-34315]:ReturnStatement[35233-35269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35320-35750]:Block[36274-36704]"
    }, {
      "left" : "if (focus == null)",
      "right" : "if (focus == null)",
      "info" : "IfStatement[35330-35437]:IfStatement[36284-36391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35349-35437]:Block[36303-36391]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[35363-35427]:ThrowStatement[36317-36381]"
    }, {
      "left" : "if (focus instanceof Date)",
      "right" : "if (focus instanceof Date)",
      "info" : "IfStatement[35446-35744]:IfStatement[36400-36698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35473-35539]:Block[36427-36493]"
    }, {
      "left" : "return iterator((Date) focus, rangeStyle);",
      "right" : "return iterator((Date) focus, rangeStyle);",
      "info" : "ReturnStatement[35487-35529]:ReturnStatement[36441-36483]"
    }, {
      "left" : "if (focus instanceof Calendar)",
      "right" : "if (focus instanceof Calendar)",
      "info" : "IfStatement[35545-35744]:IfStatement[36499-36698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35576-35646]:Block[36530-36600]"
    }, {
      "left" : "return iterator((Calendar) focus, rangeStyle);",
      "right" : "return iterator((Calendar) focus, rangeStyle);",
      "info" : "ReturnStatement[35590-35636]:ReturnStatement[36544-36590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35652-35744]:Block[36606-36698]"
    }, {
      "left" : "throw new ClassCastException(\"Could not iterate based on \" + focus);",
      "right" : "throw new ClassCastException(\"Could not iterate based on \" + focus);",
      "info" : "ThrowStatement[35666-35734]:ThrowStatement[36620-36688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36212-36354]:Block[37166-37308]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[36226-36234]:SuperConstructorInvocation[37180-37188]"
    }, {
      "left" : "this.endFinal = endFinal;",
      "right" : "this.endFinal = endFinal;",
      "info" : "ExpressionStatement[36247-36272]:ExpressionStatement[37201-37226]"
    }, {
      "left" : "spot = startFinal;",
      "right" : "spot = startFinal;",
      "info" : "ExpressionStatement[36285-36303]:ExpressionStatement[37239-37257]"
    }, {
      "left" : "spot.add(Calendar.DATE, -1);",
      "right" : "spot.add(Calendar.DATE, -1);",
      "info" : "ExpressionStatement[36316-36344]:ExpressionStatement[37270-37298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36565-36618]:Block[37519-37572]"
    }, {
      "left" : "return spot.before(endFinal);",
      "right" : "return spot.before(endFinal);",
      "info" : "ReturnStatement[36579-36608]:ReturnStatement[37533-37562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36790-36981]:Block[37744-37935]"
    }, {
      "left" : "if (spot.equals(endFinal))",
      "right" : "if (spot.equals(endFinal))",
      "info" : "IfStatement[36804-36898]:IfStatement[37758-37852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36831-36898]:Block[37785-37852]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[36849-36884]:ThrowStatement[37803-37838]"
    }, {
      "left" : "spot.add(Calendar.DATE, 1);",
      "right" : "spot.add(Calendar.DATE, 1);",
      "info" : "ExpressionStatement[36911-36938]:ExpressionStatement[37865-37892]"
    }, {
      "left" : "return spot.clone();",
      "right" : "return spot.clone();",
      "info" : "ReturnStatement[36951-36971]:ReturnStatement[37905-37925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37197-37263]:Block[38151-38217]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[37211-37253]:ThrowStatement[38165-38207]"
    } ]
  },
  "interFileMappings" : { }
}