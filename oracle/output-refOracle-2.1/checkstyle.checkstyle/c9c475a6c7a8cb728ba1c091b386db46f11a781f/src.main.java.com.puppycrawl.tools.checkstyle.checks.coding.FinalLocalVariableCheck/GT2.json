{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FinalLocalVariableCheck",
      "right" : "FinalLocalVariableCheck",
      "info" : "TypeDeclaration[1429-12322]:TypeDeclaration[1429-12521]"
    }, {
      "left" : "public static final String MSG_KEY = \"final.variable\";",
      "right" : "public static final String MSG_KEY = \"final.variable\";",
      "info" : "FieldDeclaration[2642-2803]:FieldDeclaration[2642-2803]"
    }, {
      "left" : "private final Deque<Map<String, DetailAST>> scopeStack = new ArrayDeque<>();",
      "right" : "private final Deque<Map<String, DetailAST>> scopeStack = new ArrayDeque<>();",
      "info" : "FieldDeclaration[2809-2908]:FieldDeclaration[2809-2908]"
    }, {
      "left" : "private boolean validateEnhancedForLoopVariable;",
      "right" : "private boolean validateEnhancedForLoopVariable;",
      "info" : "FieldDeclaration[2914-3027]:FieldDeclaration[2914-3027]"
    }, {
      "left" : "public final void setValidateEnhancedForLoopVariable(boolean validateEnhancedForLoopVariable)",
      "right" : "public final void setValidateEnhancedForLoopVariable(boolean validateEnhancedForLoopVariable)",
      "info" : "MethodDeclaration[3033-3370]:MethodDeclaration[3033-3370]"
    }, {
      "left" : "public int[] getDefaultTokens()",
      "right" : "public int[] getDefaultTokens()",
      "info" : "MethodDeclaration[3376-3775]:MethodDeclaration[3376-3775]"
    }, {
      "left" : "public int[] getAcceptableTokens()",
      "right" : "public int[] getAcceptableTokens()",
      "info" : "MethodDeclaration[3781-4221]:MethodDeclaration[3781-4221]"
    }, {
      "left" : "public int[] getRequiredTokens()",
      "right" : "public int[] getRequiredTokens()",
      "info" : "MethodDeclaration[4227-4590]:MethodDeclaration[4227-4590]"
    }, {
      "left" : "public void visitToken(DetailAST ast)",
      "right" : "public void visitToken(DetailAST ast)",
      "info" : "MethodDeclaration[4596-6003]:MethodDeclaration[4596-6116]"
    }, {
      "left" : "private static boolean isAssignOperator(int parentType)",
      "right" : "private static boolean isAssignOperator(int parentType)",
      "info" : "MethodDeclaration[6009-7072]:MethodDeclaration[6122-7185]"
    }, {
      "left" : "private boolean shouldCheckEnhancedForLoopVariable(DetailAST ast)",
      "right" : "private boolean shouldCheckEnhancedForLoopVariable(DetailAST ast)",
      "info" : "MethodDeclaration[7078-7476]:MethodDeclaration[7191-7589]"
    }, {
      "left" : "private static boolean isVariableInForInit(DetailAST variableDef)",
      "right" : "private static boolean isVariableInForInit(DetailAST variableDef)",
      "info" : "MethodDeclaration[7482-8075]:MethodDeclaration[7595-8188]"
    }, {
      "left" : "private static boolean inAbstractOrNativeMethod(DetailAST ast)",
      "right" : "private static boolean inAbstractOrNativeMethod(DetailAST ast)",
      "info" : "MethodDeclaration[8081-8844]:MethodDeclaration[8194-9043]"
    }, {
      "left" : "private static boolean inLambda(DetailAST paramDef)",
      "right" : "private static boolean inLambda(DetailAST paramDef)",
      "info" : "MethodDeclaration[8850-9179]:MethodDeclaration[9049-9378]"
    }, {
      "left" : "private static DetailAST findClassOrConstructorOrMethodInWhichItIsDefined(DetailAST ast)",
      "right" : "private static DetailAST findClassOrConstructorOrMethodInWhichItIsDefined(DetailAST ast)",
      "info" : "MethodDeclaration[9185-9855]:MethodDeclaration[9384-10054]"
    }, {
      "left" : "private static boolean isSameVariables(DetailAST ast1, DetailAST ast2)",
      "right" : "private static boolean isSameVariables(DetailAST ast1, DetailAST ast2)",
      "info" : "MethodDeclaration[9861-10664]:MethodDeclaration[10060-10863]"
    }, {
      "left" : "private void insertVariable(DetailAST ast)",
      "right" : "private void insertVariable(DetailAST ast)",
      "info" : "MethodDeclaration[10670-11013]:MethodDeclaration[10869-11212]"
    }, {
      "left" : "private void removeVariable(DetailAST ast)",
      "right" : "private void removeVariable(DetailAST ast)",
      "info" : "MethodDeclaration[11019-11605]:MethodDeclaration[11218-11804]"
    }, {
      "left" : "public void leaveToken(DetailAST ast)",
      "right" : "public void leaveToken(DetailAST ast)",
      "info" : "MethodDeclaration[11611-12320]:MethodDeclaration[11810-12519]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3283-3370]:Block[3283-3370]"
    }, {
      "left" : "this.validateEnhancedForLoopVariable = validateEnhancedForLoopVariable;",
      "right" : "this.validateEnhancedForLoopVariable = validateEnhancedForLoopVariable;",
      "info" : "ExpressionStatement[3293-3364]:ExpressionStatement[3293-3364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3422-3775]:Block[3422-3775]"
    }, {
      "left" : "return new int[] {\n            TokenTypes.IDENT,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.VARIABLE_DEF,\n            TokenTypes.INSTANCE_INIT,\n            TokenTypes.STATIC_INIT,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.SLIST,\n            TokenTypes.OBJBLOCK,\n        };",
      "right" : "return new int[] {\n            TokenTypes.IDENT,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.VARIABLE_DEF,\n            TokenTypes.INSTANCE_INIT,\n            TokenTypes.STATIC_INIT,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.SLIST,\n            TokenTypes.OBJBLOCK,\n        };",
      "info" : "ReturnStatement[3432-3769]:ReturnStatement[3432-3769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3830-4221]:Block[3830-4221]"
    }, {
      "left" : "return new int[] {\n            TokenTypes.IDENT,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.VARIABLE_DEF,\n            TokenTypes.INSTANCE_INIT,\n            TokenTypes.STATIC_INIT,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.SLIST,\n            TokenTypes.OBJBLOCK,\n            TokenTypes.PARAMETER_DEF,\n        };",
      "right" : "return new int[] {\n            TokenTypes.IDENT,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.VARIABLE_DEF,\n            TokenTypes.INSTANCE_INIT,\n            TokenTypes.STATIC_INIT,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.SLIST,\n            TokenTypes.OBJBLOCK,\n            TokenTypes.PARAMETER_DEF,\n        };",
      "info" : "ReturnStatement[3840-4215]:ReturnStatement[3840-4215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4274-4590]:Block[4274-4590]"
    }, {
      "left" : "return new int[] {\n            TokenTypes.IDENT,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.INSTANCE_INIT,\n            TokenTypes.STATIC_INIT,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.SLIST,\n            TokenTypes.OBJBLOCK,\n        };",
      "right" : "return new int[] {\n            TokenTypes.IDENT,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.INSTANCE_INIT,\n            TokenTypes.STATIC_INIT,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.SLIST,\n            TokenTypes.OBJBLOCK,\n        };",
      "info" : "ReturnStatement[4284-4584]:ReturnStatement[4284-4584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4648-6003]:Block[4648-6116]"
    }, {
      "left" : "switch (ast.getType()) {\n            case TokenTypes.OBJBLOCK:\n            case TokenTypes.SLIST:\n            case TokenTypes.LITERAL_FOR:\n            case TokenTypes.METHOD_DEF:\n            case TokenTypes.CTOR_DEF:\n            case TokenTypes.STATIC_INIT:\n            case TokenTypes.INSTANCE_INIT:\n                scopeStack.push(new HashMap<String, DetailAST>());\n                break;\n\n            case TokenTypes.PARAMETER_DEF:\n                if (ScopeUtils.inInterfaceBlock(ast)\n                    || inAbstractOrNativeMethod(ast)\n                    || inLambda(ast)) {\n                    break;\n                }\n            case TokenTypes.VARIABLE_DEF:\n                if (ast.getParent().getType() != TokenTypes.OBJBLOCK\n                        && shouldCheckEnhancedForLoopVariable(ast)\n                        && isVariableInForInit(ast)\n                        && !ast.branchContains(TokenTypes.FINAL)) {\n                    insertVariable(ast);\n                }\n                break;\n\n            case TokenTypes.IDENT:\n                final int parentType = ast.getParent().getType();\n                if (isAssignOperator(parentType)\n                        && ast.getParent().getFirstChild() == ast) {\n                    removeVariable(ast);\n                }\n                break;\n\n            default:\n        }",
      "right" : "switch (ast.getType()) {\n            case TokenTypes.OBJBLOCK:\n            case TokenTypes.SLIST:\n            case TokenTypes.LITERAL_FOR:\n            case TokenTypes.METHOD_DEF:\n            case TokenTypes.CTOR_DEF:\n            case TokenTypes.STATIC_INIT:\n            case TokenTypes.INSTANCE_INIT:\n                scopeStack.push(new HashMap<String, DetailAST>());\n                break;\n\n            case TokenTypes.PARAMETER_DEF:\n                if (!inLambda(ast)\n                        && !ast.branchContains(TokenTypes.FINAL)\n                        && !inAbstractOrNativeMethod(ast)\n                        && !ScopeUtils.inInterfaceBlock(ast)) {\n                    insertVariable(ast);\n                }\n                break;\n            case TokenTypes.VARIABLE_DEF:\n                if (ast.getParent().getType() != TokenTypes.OBJBLOCK\n                        && isVariableInForInit(ast)\n                        && shouldCheckEnhancedForLoopVariable(ast)\n                        && !ast.branchContains(TokenTypes.FINAL)) {\n                    insertVariable(ast);\n                }\n                break;\n\n            case TokenTypes.IDENT:\n                final int parentType = ast.getParent().getType();\n                if (isAssignOperator(parentType)\n                        && ast.getParent().getFirstChild() == ast) {\n                    removeVariable(ast);\n                }\n                break;\n\n            default:\n        }",
      "info" : "SwitchStatement[4658-5997]:SwitchStatement[4658-6110]"
    }, {
      "left" : "case TokenTypes.OBJBLOCK:",
      "right" : "case TokenTypes.OBJBLOCK:",
      "info" : "SwitchCase[4695-4720]:SwitchCase[4695-4720]"
    }, {
      "left" : "case TokenTypes.SLIST:",
      "right" : "case TokenTypes.SLIST:",
      "info" : "SwitchCase[4733-4755]:SwitchCase[4733-4755]"
    }, {
      "left" : "case TokenTypes.LITERAL_FOR:",
      "right" : "case TokenTypes.LITERAL_FOR:",
      "info" : "SwitchCase[4768-4796]:SwitchCase[4768-4796]"
    }, {
      "left" : "case TokenTypes.METHOD_DEF:",
      "right" : "case TokenTypes.METHOD_DEF:",
      "info" : "SwitchCase[4809-4836]:SwitchCase[4809-4836]"
    }, {
      "left" : "case TokenTypes.CTOR_DEF:",
      "right" : "case TokenTypes.CTOR_DEF:",
      "info" : "SwitchCase[4849-4874]:SwitchCase[4849-4874]"
    }, {
      "left" : "case TokenTypes.STATIC_INIT:",
      "right" : "case TokenTypes.STATIC_INIT:",
      "info" : "SwitchCase[4887-4915]:SwitchCase[4887-4915]"
    }, {
      "left" : "case TokenTypes.INSTANCE_INIT:",
      "right" : "case TokenTypes.INSTANCE_INIT:",
      "info" : "SwitchCase[4928-4958]:SwitchCase[4928-4958]"
    }, {
      "left" : "scopeStack.push(new HashMap<String, DetailAST>());",
      "right" : "scopeStack.push(new HashMap<String, DetailAST>());",
      "info" : "ExpressionStatement[4975-5025]:ExpressionStatement[4975-5025]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5042-5048]:BreakStatement[5042-5048]"
    }, {
      "left" : "case TokenTypes.PARAMETER_DEF:",
      "right" : "case TokenTypes.PARAMETER_DEF:",
      "info" : "SwitchCase[5062-5092]:SwitchCase[5062-5092]"
    }, {
      "left" : "if (ScopeUtils.inInterfaceBlock(ast)\n                    || inAbstractOrNativeMethod(ast)\n                    || inLambda(ast))",
      "right" : "if (!inLambda(ast)\n                        && !ast.branchContains(TokenTypes.FINAL)\n                        && !inAbstractOrNativeMethod(ast)\n                        && !ScopeUtils.inInterfaceBlock(ast))",
      "info" : "IfStatement[5109-5283]:IfStatement[5109-5373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5237-5283]:Block[5313-5373]"
    }, {
      "left" : "case TokenTypes.VARIABLE_DEF:",
      "right" : "case TokenTypes.VARIABLE_DEF:",
      "info" : "SwitchCase[5296-5325]:SwitchCase[5409-5438]"
    }, {
      "left" : "if (ast.getParent().getType() != TokenTypes.OBJBLOCK\n                        && shouldCheckEnhancedForLoopVariable(ast)\n                        && isVariableInForInit(ast)\n                        && !ast.branchContains(TokenTypes.FINAL))",
      "right" : "if (ast.getParent().getType() != TokenTypes.OBJBLOCK\n                        && isVariableInForInit(ast)\n                        && shouldCheckEnhancedForLoopVariable(ast)\n                        && !ast.branchContains(TokenTypes.FINAL))",
      "info" : "IfStatement[5342-5640]:IfStatement[5455-5753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5580-5640]:Block[5693-5753]"
    }, {
      "left" : "insertVariable(ast);",
      "right" : "insertVariable(ast);",
      "info" : "ExpressionStatement[5602-5622]:ExpressionStatement[5715-5735]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5657-5663]:BreakStatement[5770-5776]"
    }, {
      "left" : "case TokenTypes.IDENT:",
      "right" : "case TokenTypes.IDENT:",
      "info" : "SwitchCase[5677-5699]:SwitchCase[5790-5812]"
    }, {
      "left" : "final int parentType = ast.getParent().getType();",
      "right" : "final int parentType = ast.getParent().getType();",
      "info" : "VariableDeclarationStatement[5716-5765]:VariableDeclarationStatement[5829-5878]"
    }, {
      "left" : "if (isAssignOperator(parentType)\n                        && ast.getParent().getFirstChild() == ast)",
      "right" : "if (isAssignOperator(parentType)\n                        && ast.getParent().getFirstChild() == ast)",
      "info" : "IfStatement[5782-5942]:IfStatement[5895-6055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5882-5942]:Block[5995-6055]"
    }, {
      "left" : "removeVariable(ast);",
      "right" : "removeVariable(ast);",
      "info" : "ExpressionStatement[5904-5924]:ExpressionStatement[6017-6037]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5959-5965]:BreakStatement[6072-6078]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[5979-5987]:SwitchCase[6092-6100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6206-7072]:Block[6319-7185]"
    }, {
      "left" : "return TokenTypes.POST_DEC == parentType\n                || TokenTypes.DEC == parentType\n                || TokenTypes.POST_INC == parentType\n                || TokenTypes.INC == parentType\n                || TokenTypes.ASSIGN == parentType\n                || TokenTypes.PLUS_ASSIGN == parentType\n                || TokenTypes.MINUS_ASSIGN == parentType\n                || TokenTypes.DIV_ASSIGN == parentType\n                || TokenTypes.STAR_ASSIGN == parentType\n                || TokenTypes.MOD_ASSIGN == parentType\n                || TokenTypes.SR_ASSIGN == parentType\n                || TokenTypes.BSR_ASSIGN == parentType\n                || TokenTypes.SL_ASSIGN == parentType\n                || TokenTypes.BXOR_ASSIGN == parentType\n                || TokenTypes.BOR_ASSIGN == parentType\n                || TokenTypes.BAND_ASSIGN == parentType;",
      "right" : "return TokenTypes.POST_DEC == parentType\n                || TokenTypes.DEC == parentType\n                || TokenTypes.POST_INC == parentType\n                || TokenTypes.INC == parentType\n                || TokenTypes.ASSIGN == parentType\n                || TokenTypes.PLUS_ASSIGN == parentType\n                || TokenTypes.MINUS_ASSIGN == parentType\n                || TokenTypes.DIV_ASSIGN == parentType\n                || TokenTypes.STAR_ASSIGN == parentType\n                || TokenTypes.MOD_ASSIGN == parentType\n                || TokenTypes.SR_ASSIGN == parentType\n                || TokenTypes.BSR_ASSIGN == parentType\n                || TokenTypes.SL_ASSIGN == parentType\n                || TokenTypes.BXOR_ASSIGN == parentType\n                || TokenTypes.BOR_ASSIGN == parentType\n                || TokenTypes.BAND_ASSIGN == parentType;",
      "info" : "ReturnStatement[6216-7066]:ReturnStatement[6329-7179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7346-7476]:Block[7459-7589]"
    }, {
      "left" : "return validateEnhancedForLoopVariable\n                || ast.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE;",
      "right" : "return validateEnhancedForLoopVariable\n                || ast.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE;",
      "info" : "ReturnStatement[7356-7470]:ReturnStatement[7469-7583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7995-8075]:Block[8108-8188]"
    }, {
      "left" : "return variableDef.getParent().getType() != TokenTypes.FOR_INIT;",
      "right" : "return variableDef.getParent().getType() != TokenTypes.FOR_INIT;",
      "info" : "ReturnStatement[8005-8069]:ReturnStatement[8118-8182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8354-8844]:Block[8467-9043]"
    }, {
      "left" : "DetailAST parent = ast.getParent();",
      "right" : "DetailAST parent = ast.getParent();",
      "info" : "VariableDeclarationStatement[8364-8399]:VariableDeclarationStatement[8519-8554]"
    }, {
      "left" : "while (parent != null)",
      "right" : "while (parent != null && !abstractOrNative)",
      "info" : "WhileStatement[8408-8816]:WhileStatement[8563-9004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8431-8816]:Block[8607-9004]"
    }, {
      "left" : "if (parent.getType() == TokenTypes.METHOD_DEF)",
      "right" : "if (parent.getType() == TokenTypes.METHOD_DEF)",
      "info" : "IfStatement[8445-8765]:IfStatement[8621-8953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8492-8765]:Block[8668-8953]"
    }, {
      "left" : "final DetailAST modifiers =\n                    parent.findFirstToken(TokenTypes.MODIFIERS);",
      "right" : "final DetailAST modifiers =\n                    parent.findFirstToken(TokenTypes.MODIFIERS);",
      "info" : "VariableDeclarationStatement[8510-8602]:VariableDeclarationStatement[8686-8778]"
    }, {
      "left" : "parent = parent.getParent();",
      "right" : "parent = parent.getParent();",
      "info" : "ExpressionStatement[8778-8806]:ExpressionStatement[8966-8994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9092-9179]:Block[9291-9378]"
    }, {
      "left" : "return paramDef.getParent().getParent().getType() == TokenTypes.LAMBDA;",
      "right" : "return paramDef.getParent().getParent().getType() == TokenTypes.LAMBDA;",
      "info" : "ReturnStatement[9102-9173]:ReturnStatement[9301-9372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9525-9855]:Block[9724-10054]"
    }, {
      "left" : "DetailAST astTraverse = ast;",
      "right" : "DetailAST astTraverse = ast;",
      "info" : "VariableDeclarationStatement[9535-9563]:VariableDeclarationStatement[9734-9762]"
    }, {
      "left" : "while (!(astTraverse.getType() == TokenTypes.METHOD_DEF\n                || astTraverse.getType() == TokenTypes.CLASS_DEF\n                || astTraverse.getType() == TokenTypes.CTOR_DEF))",
      "right" : "while (!(astTraverse.getType() == TokenTypes.METHOD_DEF\n                || astTraverse.getType() == TokenTypes.CLASS_DEF\n                || astTraverse.getType() == TokenTypes.CTOR_DEF))",
      "info" : "WhileStatement[9572-9821]:WhileStatement[9771-10020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9759-9821]:Block[9958-10020]"
    }, {
      "left" : "astTraverse = astTraverse.getParent();",
      "right" : "astTraverse = astTraverse.getParent();",
      "info" : "ExpressionStatement[9773-9811]:ExpressionStatement[9972-10010]"
    }, {
      "left" : "return astTraverse;",
      "right" : "return astTraverse;",
      "info" : "ReturnStatement[9830-9849]:ReturnStatement[10029-10048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10137-10664]:Block[10336-10863]"
    }, {
      "left" : "final DetailAST classOrMethodOfAst1 =\n            findClassOrConstructorOrMethodInWhichItIsDefined(ast1);",
      "right" : "final DetailAST classOrMethodOfAst1 =\n            findClassOrConstructorOrMethodInWhichItIsDefined(ast1);",
      "info" : "VariableDeclarationStatement[10147-10252]:VariableDeclarationStatement[10346-10451]"
    }, {
      "left" : "final DetailAST classOrMethodOfAst2 =\n            findClassOrConstructorOrMethodInWhichItIsDefined(ast2);",
      "right" : "final DetailAST classOrMethodOfAst2 =\n            findClassOrConstructorOrMethodInWhichItIsDefined(ast2);",
      "info" : "VariableDeclarationStatement[10261-10366]:VariableDeclarationStatement[10460-10565]"
    }, {
      "left" : "final String identifierOfAst1 =\n            classOrMethodOfAst1.findFirstToken(TokenTypes.IDENT).getText();",
      "right" : "final String identifierOfAst1 =\n            classOrMethodOfAst1.findFirstToken(TokenTypes.IDENT).getText();",
      "info" : "VariableDeclarationStatement[10376-10483]:VariableDeclarationStatement[10575-10682]"
    }, {
      "left" : "final String identifierOfAst2 =\n            classOrMethodOfAst2.findFirstToken(TokenTypes.IDENT).getText();",
      "right" : "final String identifierOfAst2 =\n            classOrMethodOfAst2.findFirstToken(TokenTypes.IDENT).getText();",
      "info" : "VariableDeclarationStatement[10492-10599]:VariableDeclarationStatement[10691-10798]"
    }, {
      "left" : "return identifierOfAst1.equals(identifierOfAst2);",
      "right" : "return identifierOfAst1.equals(identifierOfAst2);",
      "info" : "ReturnStatement[10609-10658]:ReturnStatement[10808-10857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10823-11013]:Block[11022-11212]"
    }, {
      "left" : "final Map<String, DetailAST> state = scopeStack.peek();",
      "right" : "final Map<String, DetailAST> state = scopeStack.peek();",
      "info" : "VariableDeclarationStatement[10833-10888]:VariableDeclarationStatement[11032-11087]"
    }, {
      "left" : "final DetailAST astNode = ast.findFirstToken(TokenTypes.IDENT);",
      "right" : "final DetailAST astNode = ast.findFirstToken(TokenTypes.IDENT);",
      "info" : "VariableDeclarationStatement[10897-10960]:VariableDeclarationStatement[11096-11159]"
    }, {
      "left" : "state.put(astNode.getText(), astNode);",
      "right" : "state.put(astNode.getText(), astNode);",
      "info" : "ExpressionStatement[10969-11007]:ExpressionStatement[11168-11206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11159-11605]:Block[11358-11804]"
    }, {
      "left" : "final Iterator<Map<String, DetailAST>> iterator = scopeStack.descendingIterator();",
      "right" : "final Iterator<Map<String, DetailAST>> iterator = scopeStack.descendingIterator();",
      "info" : "VariableDeclarationStatement[11169-11251]:VariableDeclarationStatement[11368-11450]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[11260-11599]:WhileStatement[11459-11798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11287-11599]:Block[11486-11798]"
    }, {
      "left" : "final Map<String, DetailAST> state = iterator.next();",
      "right" : "final Map<String, DetailAST> state = iterator.next();",
      "info" : "VariableDeclarationStatement[11301-11354]:VariableDeclarationStatement[11500-11553]"
    }, {
      "left" : "final DetailAST storedVariable = state.get(ast.getText());",
      "right" : "final DetailAST storedVariable = state.get(ast.getText());",
      "info" : "VariableDeclarationStatement[11367-11425]:VariableDeclarationStatement[11566-11624]"
    }, {
      "left" : "if (storedVariable != null && isSameVariables(storedVariable, ast))",
      "right" : "if (storedVariable != null && isSameVariables(storedVariable, ast))",
      "info" : "IfStatement[11438-11589]:IfStatement[11637-11788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11506-11589]:Block[11705-11788]"
    }, {
      "left" : "state.remove(ast.getText());",
      "right" : "state.remove(ast.getText());",
      "info" : "ExpressionStatement[11524-11552]:ExpressionStatement[11723-11751]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11569-11575]:BreakStatement[11768-11774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11663-12320]:Block[11862-12519]"
    }, {
      "left" : "super.leaveToken(ast);",
      "right" : "super.leaveToken(ast);",
      "info" : "ExpressionStatement[11673-11695]:ExpressionStatement[11872-11894]"
    }, {
      "left" : "switch (ast.getType()) {\n            case TokenTypes.OBJBLOCK:\n            case TokenTypes.SLIST:\n            case TokenTypes.LITERAL_FOR:\n            case TokenTypes.CTOR_DEF:\n            case TokenTypes.STATIC_INIT:\n            case TokenTypes.INSTANCE_INIT:\n            case TokenTypes.METHOD_DEF:\n                final Map<String, DetailAST> state = scopeStack.pop();\n                for (DetailAST var : state.values()) {\n                    log(var.getLineNo(), var.getColumnNo(), MSG_KEY, var\n                        .getText());\n                }\n                break;\n\n            default:\n        }",
      "right" : "switch (ast.getType()) {\n            case TokenTypes.OBJBLOCK:\n            case TokenTypes.SLIST:\n            case TokenTypes.LITERAL_FOR:\n            case TokenTypes.CTOR_DEF:\n            case TokenTypes.STATIC_INIT:\n            case TokenTypes.INSTANCE_INIT:\n            case TokenTypes.METHOD_DEF:\n                final Map<String, DetailAST> state = scopeStack.pop();\n                for (DetailAST var : state.values()) {\n                    log(var.getLineNo(), var.getColumnNo(), MSG_KEY, var\n                        .getText());\n                }\n                break;\n\n            default:\n        }",
      "info" : "SwitchStatement[11705-12314]:SwitchStatement[11904-12513]"
    }, {
      "left" : "case TokenTypes.OBJBLOCK:",
      "right" : "case TokenTypes.OBJBLOCK:",
      "info" : "SwitchCase[11742-11767]:SwitchCase[11941-11966]"
    }, {
      "left" : "case TokenTypes.SLIST:",
      "right" : "case TokenTypes.SLIST:",
      "info" : "SwitchCase[11780-11802]:SwitchCase[11979-12001]"
    }, {
      "left" : "case TokenTypes.LITERAL_FOR:",
      "right" : "case TokenTypes.LITERAL_FOR:",
      "info" : "SwitchCase[11815-11843]:SwitchCase[12014-12042]"
    }, {
      "left" : "case TokenTypes.CTOR_DEF:",
      "right" : "case TokenTypes.CTOR_DEF:",
      "info" : "SwitchCase[11856-11881]:SwitchCase[12055-12080]"
    }, {
      "left" : "case TokenTypes.STATIC_INIT:",
      "right" : "case TokenTypes.STATIC_INIT:",
      "info" : "SwitchCase[11894-11922]:SwitchCase[12093-12121]"
    }, {
      "left" : "case TokenTypes.INSTANCE_INIT:",
      "right" : "case TokenTypes.INSTANCE_INIT:",
      "info" : "SwitchCase[11935-11965]:SwitchCase[12134-12164]"
    }, {
      "left" : "case TokenTypes.METHOD_DEF:",
      "right" : "case TokenTypes.METHOD_DEF:",
      "info" : "SwitchCase[11978-12005]:SwitchCase[12177-12204]"
    }, {
      "left" : "final Map<String, DetailAST> state = scopeStack.pop();",
      "right" : "final Map<String, DetailAST> state = scopeStack.pop();",
      "info" : "VariableDeclarationStatement[12022-12076]:VariableDeclarationStatement[12221-12275]"
    }, {
      "left" : "for (DetailAST var : state.values())",
      "right" : "for (DetailAST var : state.values())",
      "info" : "EnhancedForStatement[12093-12259]:EnhancedForStatement[12292-12458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12130-12259]:Block[12329-12458]"
    }, {
      "left" : "log(var.getLineNo(), var.getColumnNo(), MSG_KEY, var\n                        .getText());",
      "right" : "log(var.getLineNo(), var.getColumnNo(), MSG_KEY, var\n                        .getText());",
      "info" : "ExpressionStatement[12152-12241]:ExpressionStatement[12351-12440]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12276-12282]:BreakStatement[12475-12481]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12296-12304]:SwitchCase[12495-12503]"
    } ]
  },
  "interFileMappings" : { }
}