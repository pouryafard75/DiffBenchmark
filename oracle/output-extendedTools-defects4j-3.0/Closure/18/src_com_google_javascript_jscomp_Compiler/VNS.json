{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "TypeDeclaration[2609-75212]:TypeDeclaration[2609-75189]"
    }, {
      "left" : "static final String SINGLETON_MODULE_NAME = \"[singleton]\";",
      "right" : "static final String SINGLETON_MODULE_NAME = \"[singleton]\";",
      "info" : "FieldDeclaration[3154-3212]:FieldDeclaration[3154-3212]"
    }, {
      "left" : "static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
      "right" : "static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
      "info" : "FieldDeclaration[3216-3432]:FieldDeclaration[3216-3432]"
    }, {
      "left" : "static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"required entry point \\\"{0}\\\" never provided\");",
      "right" : "static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"required entry point \\\"{0}\\\" never provided\");",
      "info" : "FieldDeclaration[3436-3594]:FieldDeclaration[3436-3594]"
    }, {
      "left" : "private static final String CONFIG_RESOURCE =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
      "right" : "private static final String CONFIG_RESOURCE =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
      "info" : "FieldDeclaration[3598-3702]:FieldDeclaration[3598-3702]"
    }, {
      "left" : "CompilerOptions options = null;",
      "right" : "CompilerOptions options = null;",
      "info" : "FieldDeclaration[3706-3737]:FieldDeclaration[3706-3737]"
    }, {
      "left" : "private PassConfig passes = null;",
      "right" : "private PassConfig passes = null;",
      "info" : "FieldDeclaration[3741-3774]:FieldDeclaration[3741-3774]"
    }, {
      "left" : "private List<CompilerInput> externs;",
      "right" : "private List<CompilerInput> externs;",
      "info" : "FieldDeclaration[3802-3838]:FieldDeclaration[3802-3838]"
    }, {
      "left" : "private List<JSModule> modules;",
      "right" : "private List<JSModule> modules;",
      "info" : "FieldDeclaration[3869-3900]:FieldDeclaration[3869-3900]"
    }, {
      "left" : "private JSModuleGraph moduleGraph;",
      "right" : "private JSModuleGraph moduleGraph;",
      "info" : "FieldDeclaration[4054-4088]:FieldDeclaration[4054-4088]"
    }, {
      "left" : "private List<CompilerInput> inputs;",
      "right" : "private List<CompilerInput> inputs;",
      "info" : "FieldDeclaration[4118-4153]:FieldDeclaration[4118-4153]"
    }, {
      "left" : "private ErrorManager errorManager;",
      "right" : "private ErrorManager errorManager;",
      "info" : "FieldDeclaration[4215-4249]:FieldDeclaration[4215-4249]"
    }, {
      "left" : "private WarningsGuard warningsGuard;",
      "right" : "private WarningsGuard warningsGuard;",
      "info" : "FieldDeclaration[4297-4333]:FieldDeclaration[4297-4333]"
    }, {
      "left" : "private final Map<String, Node> injectedLibraries = Maps.newLinkedHashMap();",
      "right" : "private final Map<String, Node> injectedLibraries = Maps.newLinkedHashMap();",
      "info" : "FieldDeclaration[4460-4536]:FieldDeclaration[4460-4536]"
    }, {
      "left" : "Node externsRoot;",
      "right" : "Node externsRoot;",
      "info" : "FieldDeclaration[4567-4584]:FieldDeclaration[4567-4584]"
    }, {
      "left" : "Node jsRoot;",
      "right" : "Node jsRoot;",
      "info" : "FieldDeclaration[4587-4599]:FieldDeclaration[4587-4599]"
    }, {
      "left" : "Node externAndJsRoot;",
      "right" : "Node externAndJsRoot;",
      "info" : "FieldDeclaration[4602-4623]:FieldDeclaration[4602-4623]"
    }, {
      "left" : "private Map<InputId, CompilerInput> inputsById;",
      "right" : "private Map<InputId, CompilerInput> inputsById;",
      "info" : "FieldDeclaration[4627-4674]:FieldDeclaration[4627-4674]"
    }, {
      "left" : "private SourceMap sourceMap;",
      "right" : "private SourceMap sourceMap;",
      "info" : "FieldDeclaration[4678-4735]:FieldDeclaration[4678-4735]"
    }, {
      "left" : "private String externExports = null;",
      "right" : "private String externExports = null;",
      "info" : "FieldDeclaration[4739-4823]:FieldDeclaration[4739-4823]"
    }, {
      "left" : "private int uniqueNameId = 0;",
      "right" : "private int uniqueNameId = 0;",
      "info" : "FieldDeclaration[4827-4947]:FieldDeclaration[4827-4947]"
    }, {
      "left" : "private boolean useThreads = true;",
      "right" : "private boolean useThreads = true;",
      "info" : "FieldDeclaration[4951-5018]:FieldDeclaration[4951-5018]"
    }, {
      "left" : "private boolean hasRegExpGlobalReferences = true;",
      "right" : "private boolean hasRegExpGlobalReferences = true;",
      "info" : "FieldDeclaration[5022-5172]:FieldDeclaration[5022-5172]"
    }, {
      "left" : "private FunctionInformationMap functionInformationMap;",
      "right" : "private FunctionInformationMap functionInformationMap;",
      "info" : "FieldDeclaration[5176-5268]:FieldDeclaration[5176-5268]"
    }, {
      "left" : "private final StringBuilder debugLog = new StringBuilder();",
      "right" : "private final StringBuilder debugLog = new StringBuilder();",
      "info" : "FieldDeclaration[5272-5362]:FieldDeclaration[5272-5362]"
    }, {
      "left" : "CodingConvention defaultCodingConvention = new ClosureCodingConvention();",
      "right" : "CodingConvention defaultCodingConvention = new ClosureCodingConvention();",
      "info" : "FieldDeclaration[5366-5492]:FieldDeclaration[5366-5492]"
    }, {
      "left" : "private JSTypeRegistry typeRegistry;",
      "right" : "private JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[5496-5532]:FieldDeclaration[5496-5532]"
    }, {
      "left" : "private Config parserConfig = null;",
      "right" : "private Config parserConfig = null;",
      "info" : "FieldDeclaration[5535-5570]:FieldDeclaration[5535-5570]"
    }, {
      "left" : "private ReverseAbstractInterpreter abstractInterpreter;",
      "right" : "private ReverseAbstractInterpreter abstractInterpreter;",
      "info" : "FieldDeclaration[5574-5629]:FieldDeclaration[5574-5629]"
    }, {
      "left" : "private TypeValidator typeValidator;",
      "right" : "private TypeValidator typeValidator;",
      "info" : "FieldDeclaration[5632-5668]:FieldDeclaration[5632-5668]"
    }, {
      "left" : "public PerformanceTracker tracker;",
      "right" : "public PerformanceTracker tracker;",
      "info" : "FieldDeclaration[5672-5706]:FieldDeclaration[5672-5706]"
    }, {
      "left" : "private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
      "right" : "private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
      "info" : "FieldDeclaration[5789-5907]:FieldDeclaration[5789-5907]"
    }, {
      "left" : "private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
      "right" : "private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
      "info" : "FieldDeclaration[5985-6079]:FieldDeclaration[5985-6079]"
    }, {
      "left" : "public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
      "right" : "public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
      "info" : "FieldDeclaration[6083-6307]:FieldDeclaration[6083-6307]"
    }, {
      "left" : "public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
      "right" : "public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
      "info" : "FieldDeclaration[6310-6489]:FieldDeclaration[6310-6489]"
    }, {
      "left" : "private static final long COMPILER_STACK_SIZE = 1048576L;",
      "right" : "private static final long COMPILER_STACK_SIZE = 1048576L;",
      "info" : "FieldDeclaration[6493-6550]:FieldDeclaration[6493-6550]"
    }, {
      "left" : "private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
      "right" : "private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
      "info" : "FieldDeclaration[6555-6830]:FieldDeclaration[6555-6830]"
    }, {
      "left" : "private final PrintStream outStream;",
      "right" : "private final PrintStream outStream;",
      "info" : "FieldDeclaration[6834-6870]:FieldDeclaration[6834-6870]"
    }, {
      "left" : "private GlobalVarReferenceMap globalRefMap = null;",
      "right" : "private GlobalVarReferenceMap globalRefMap = null;",
      "info" : "FieldDeclaration[6874-6924]:FieldDeclaration[6874-6924]"
    }, {
      "left" : "private volatile double progress = 0.0;",
      "right" : "private volatile double progress = 0.0;",
      "info" : "FieldDeclaration[6928-6967]:FieldDeclaration[6928-6967]"
    }, {
      "left" : "public Compiler()",
      "right" : "public Compiler()",
      "info" : "MethodDeclaration[6971-7108]:MethodDeclaration[6971-7108]"
    }, {
      "left" : "public Compiler(PrintStream stream)",
      "right" : "public Compiler(PrintStream stream)",
      "info" : "MethodDeclaration[7112-7308]:MethodDeclaration[7112-7308]"
    }, {
      "left" : "public Compiler(ErrorManager errorManager)",
      "right" : "public Compiler(ErrorManager errorManager)",
      "info" : "MethodDeclaration[7312-7477]:MethodDeclaration[7312-7477]"
    }, {
      "left" : "public void setErrorManager(ErrorManager errorManager)",
      "right" : "public void setErrorManager(ErrorManager errorManager)",
      "info" : "MethodDeclaration[7481-7786]:MethodDeclaration[7481-7786]"
    }, {
      "left" : "private MessageFormatter createMessageFormatter()",
      "right" : "private MessageFormatter createMessageFormatter()",
      "info" : "MethodDeclaration[7790-8079]:MethodDeclaration[7790-8079]"
    }, {
      "left" : "public void initOptions(CompilerOptions options)",
      "right" : "public void initOptions(CompilerOptions options)",
      "info" : "MethodDeclaration[8083-10581]:MethodDeclaration[8083-10581]"
    }, {
      "left" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options)",
      "right" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[10585-10871]:MethodDeclaration[10585-10871]"
    }, {
      "left" : "public <T1 extends SourceFile, T2 extends SourceFile> void init(\n      List<T1> externs,\n      List<T2> inputs,\n      CompilerOptions options)",
      "right" : "public <T1 extends SourceFile, T2 extends SourceFile> void init(\n      List<T1> externs,\n      List<T2> inputs,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[10875-11289]:MethodDeclaration[10875-11289]"
    }, {
      "left" : "public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options)",
      "right" : "public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[11293-11614]:MethodDeclaration[11293-11614]"
    }, {
      "left" : "public <T extends SourceFile> void initModules(\n      List<T> externs, List<JSModule> modules, CompilerOptions options)",
      "right" : "public <T extends SourceFile> void initModules(\n      List<T> externs, List<JSModule> modules, CompilerOptions options)",
      "info" : "MethodDeclaration[11618-12700]:MethodDeclaration[11618-12700]"
    }, {
      "left" : "private void initBasedOnOptions()",
      "right" : "private void initBasedOnOptions()",
      "info" : "MethodDeclaration[12704-13048]:MethodDeclaration[12704-13048]"
    }, {
      "left" : "private <T extends SourceFile> List<CompilerInput> makeCompilerInput(\n      List<T> files, boolean isExtern)",
      "right" : "private <T extends SourceFile> List<CompilerInput> makeCompilerInput(\n      List<T> files, boolean isExtern)",
      "info" : "MethodDeclaration[13052-13326]:MethodDeclaration[13052-13326]"
    }, {
      "left" : "private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
      "right" : "private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
      "info" : "FieldDeclaration[13330-13500]:FieldDeclaration[13330-13500]"
    }, {
      "left" : "private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
      "right" : "private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
      "info" : "FieldDeclaration[13504-13699]:FieldDeclaration[13504-13699]"
    }, {
      "left" : "private void checkFirstModule(List<JSModule> modules)",
      "right" : "private void checkFirstModule(List<JSModule> modules)",
      "info" : "MethodDeclaration[13703-14222]:MethodDeclaration[13703-14222]"
    }, {
      "left" : "static String createFillFileName(String moduleName)",
      "right" : "static String createFillFileName(String moduleName)",
      "info" : "MethodDeclaration[14226-14427]:MethodDeclaration[14226-14427]"
    }, {
      "left" : "private static void fillEmptyModules(List<JSModule> modules)",
      "right" : "private static void fillEmptyModules(List<JSModule> modules)",
      "info" : "MethodDeclaration[14431-14799]:MethodDeclaration[14431-14799]"
    }, {
      "left" : "public void rebuildInputsFromModules()",
      "right" : "public void rebuildInputsFromModules()",
      "info" : "MethodDeclaration[14803-15161]:MethodDeclaration[14803-15161]"
    }, {
      "left" : "private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules)",
      "right" : "private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules)",
      "info" : "MethodDeclaration[15165-15894]:MethodDeclaration[15165-15894]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
      "right" : "static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
      "info" : "FieldDeclaration[15898-16018]:FieldDeclaration[15898-16018]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
      "right" : "static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
      "info" : "FieldDeclaration[16021-16172]:FieldDeclaration[16021-16172]"
    }, {
      "left" : "void initInputsByIdMap()",
      "right" : "void initInputsByIdMap()",
      "info" : "MethodDeclaration[16176-16878]:MethodDeclaration[16176-16878]"
    }, {
      "left" : "public Result compile(\n      SourceFile extern, SourceFile input, CompilerOptions options)",
      "right" : "public Result compile(\n      SourceFile extern, SourceFile input, CompilerOptions options)",
      "info" : "MethodDeclaration[16882-17063]:MethodDeclaration[16882-17063]"
    }, {
      "left" : "public Result compile(\n      SourceFile extern, JSSourceFile[] input, CompilerOptions options)",
      "right" : "public Result compile(\n      SourceFile extern, JSSourceFile[] input, CompilerOptions options)",
      "info" : "MethodDeclaration[17067-17252]:MethodDeclaration[17067-17252]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
      "info" : "MethodDeclaration[17256-17460]:MethodDeclaration[17256-17460]"
    }, {
      "left" : "public Result compile(JSSourceFile[] externs,\n                        JSSourceFile[] inputs,\n                        CompilerOptions options)",
      "right" : "public Result compile(JSSourceFile[] externs,\n                        JSSourceFile[] inputs,\n                        CompilerOptions options)",
      "info" : "MethodDeclaration[17464-17781]:MethodDeclaration[17464-17781]"
    }, {
      "left" : "public <T1 extends SourceFile, T2 extends SourceFile> Result compile(\n      List<T1> externs, List<T2> inputs, CompilerOptions options)",
      "right" : "public <T1 extends SourceFile, T2 extends SourceFile> Result compile(\n      List<T1> externs, List<T2> inputs, CompilerOptions options)",
      "info" : "MethodDeclaration[17785-18348]:MethodDeclaration[17785-18348]"
    }, {
      "left" : "public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options)",
      "right" : "public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options)",
      "info" : "MethodDeclaration[18352-18673]:MethodDeclaration[18352-18673]"
    }, {
      "left" : "public <T extends SourceFile> Result compileModules(List<T> externs,\n      List<JSModule> modules, CompilerOptions options)",
      "right" : "public <T extends SourceFile> Result compileModules(List<T> externs,\n      List<JSModule> modules, CompilerOptions options)",
      "info" : "MethodDeclaration[18677-19237]:MethodDeclaration[18677-19237]"
    }, {
      "left" : "private Result compile()",
      "right" : "private Result compile()",
      "info" : "MethodDeclaration[19241-19460]:MethodDeclaration[19241-19460]"
    }, {
      "left" : "public Result call() throws Exception",
      "right" : "public Result call() throws Exception",
      "info" : "MethodDeclaration[19330-19448]:MethodDeclaration[19330-19448]"
    }, {
      "left" : "public void disableThreads()",
      "right" : "public void disableThreads()",
      "info" : "MethodDeclaration[19464-19627]:MethodDeclaration[19464-19627]"
    }, {
      "left" : "private <T> T runInCompilerThread(final Callable<T> callable)",
      "right" : "private <T> T runInCompilerThread(final Callable<T> callable)",
      "info" : "MethodDeclaration[19631-19767]:MethodDeclaration[19631-19767]"
    }, {
      "left" : "static <T> T runCallableWithLargeStack(final Callable<T> callable)",
      "right" : "static <T> T runCallableWithLargeStack(final Callable<T> callable)",
      "info" : "MethodDeclaration[19771-19890]:MethodDeclaration[19771-19890]"
    }, {
      "left" : "static <T> T runCallable(\n      final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
      "right" : "static <T> T runCallable(\n      final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
      "info" : "MethodDeclaration[19894-21490]:MethodDeclaration[19894-21490]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[20601-20974]:MethodDeclaration[20601-20974]"
    }, {
      "left" : "private void compileInternal()",
      "right" : "private void compileInternal()",
      "info" : "MethodDeclaration[21494-22542]:MethodDeclaration[21494-22542]"
    }, {
      "left" : "public void parse()",
      "right" : "public void parse()",
      "info" : "MethodDeclaration[22546-22590]:MethodDeclaration[22546-22590]"
    }, {
      "left" : "PassConfig getPassConfig()",
      "right" : "PassConfig getPassConfig()",
      "info" : "MethodDeclaration[22594-22720]:MethodDeclaration[22594-22720]"
    }, {
      "left" : "PassConfig createPassConfigInternal()",
      "right" : "PassConfig createPassConfigInternal()",
      "info" : "MethodDeclaration[22724-22919]:MethodDeclaration[22724-22919]"
    }, {
      "left" : "public void setPassConfig(PassConfig passes)",
      "right" : "public void setPassConfig(PassConfig passes)",
      "info" : "MethodDeclaration[22923-23667]:MethodDeclaration[22923-23667]"
    }, {
      "left" : "boolean precheck()",
      "right" : "boolean precheck()",
      "info" : "MethodDeclaration[23671-23907]:MethodDeclaration[23671-23907]"
    }, {
      "left" : "public void check()",
      "right" : "public void check()",
      "info" : "MethodDeclaration[23911-25206]:MethodDeclaration[23911-25206]"
    }, {
      "left" : "private void externExports()",
      "right" : "private void externExports()",
      "info" : "MethodDeclaration[25210-25472]:MethodDeclaration[25210-25472]"
    }, {
      "left" : "void process(CompilerPass p)",
      "right" : "void process(CompilerPass p)",
      "info" : "MethodDeclaration[25476-25558]:MethodDeclaration[25476-25558]"
    }, {
      "left" : "private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
      "right" : "private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
      "info" : "FieldDeclaration[25562-25783]:FieldDeclaration[25562-25783]"
    }, {
      "left" : "protected CompilerPass createInternal(AbstractCompiler compiler)",
      "right" : "protected CompilerPass createInternal(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[25652-25778]:MethodDeclaration[25652-25778]"
    }, {
      "left" : "private void maybeSanityCheck()",
      "right" : "private void maybeSanityCheck()",
      "info" : "MethodDeclaration[25787-25903]:MethodDeclaration[25787-25903]"
    }, {
      "left" : "private void runSanityCheck()",
      "right" : "private void runSanityCheck()",
      "info" : "MethodDeclaration[25907-26001]:MethodDeclaration[25907-26001]"
    }, {
      "left" : "void removeTryCatchFinally()",
      "right" : "void removeTryCatchFinally()",
      "info" : "MethodDeclaration[26005-26280]:MethodDeclaration[26005-26280]"
    }, {
      "left" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n      Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
      "right" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n      Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
      "info" : "MethodDeclaration[26284-26865]:MethodDeclaration[26284-26865]"
    }, {
      "left" : "private void runCustomPasses(CustomPassExecutionTime executionTime)",
      "right" : "private void runCustomPasses(CustomPassExecutionTime executionTime)",
      "info" : "MethodDeclaration[26869-27305]:MethodDeclaration[26869-27305]"
    }, {
      "left" : "private Tracer currentTracer = null;",
      "right" : "private Tracer currentTracer = null;",
      "info" : "FieldDeclaration[27309-27345]:FieldDeclaration[27309-27345]"
    }, {
      "left" : "private String currentPassName = null;",
      "right" : "private String currentPassName = null;",
      "info" : "FieldDeclaration[27348-27386]:FieldDeclaration[27348-27386]"
    }, {
      "left" : "void startPass(String passName)",
      "right" : "void startPass(String passName)",
      "info" : "MethodDeclaration[27390-27601]:MethodDeclaration[27390-27601]"
    }, {
      "left" : "void endPass()",
      "right" : "void endPass()",
      "info" : "MethodDeclaration[27605-27948]:MethodDeclaration[27605-27948]"
    }, {
      "left" : "Tracer newTracer(String passName)",
      "right" : "Tracer newTracer(String passName)",
      "info" : "MethodDeclaration[27952-28285]:MethodDeclaration[27952-28285]"
    }, {
      "left" : "void stopTracer(Tracer t, String passName)",
      "right" : "void stopTracer(Tracer t, String passName)",
      "info" : "MethodDeclaration[28289-28452]:MethodDeclaration[28289-28452]"
    }, {
      "left" : "public Result getResult()",
      "right" : "public Result getResult()",
      "info" : "MethodDeclaration[28456-28883]:MethodDeclaration[28456-28883]"
    }, {
      "left" : "public JSError[] getMessages()",
      "right" : "public JSError[] getMessages()",
      "info" : "MethodDeclaration[28887-29027]:MethodDeclaration[28887-29027]"
    }, {
      "left" : "public JSError[] getErrors()",
      "right" : "public JSError[] getErrors()",
      "info" : "MethodDeclaration[29031-29161]:MethodDeclaration[29031-29161]"
    }, {
      "left" : "public JSError[] getWarnings()",
      "right" : "public JSError[] getWarnings()",
      "info" : "MethodDeclaration[29165-29301]:MethodDeclaration[29165-29301]"
    }, {
      "left" : "public Node getRoot()",
      "right" : "public Node getRoot()",
      "info" : "MethodDeclaration[29305-29372]:MethodDeclaration[29305-29372]"
    }, {
      "left" : "private int nextUniqueNameId()",
      "right" : "private int nextUniqueNameId()",
      "info" : "MethodDeclaration[29376-29498]:MethodDeclaration[29376-29498]"
    }, {
      "left" : "void resetUniqueNameId()",
      "right" : "void resetUniqueNameId()",
      "info" : "MethodDeclaration[29502-29626]:MethodDeclaration[29502-29626]"
    }, {
      "left" : "Supplier<String> getUniqueNameIdSupplier()",
      "right" : "Supplier<String> getUniqueNameIdSupplier()",
      "info" : "MethodDeclaration[29630-29873]:MethodDeclaration[29630-29873]"
    }, {
      "left" : "public String get()",
      "right" : "public String get()",
      "info" : "MethodDeclaration[29761-29862]:MethodDeclaration[29761-29862]"
    }, {
      "left" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
      "right" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
      "info" : "MethodDeclaration[29877-30240]:MethodDeclaration[29877-30240]"
    }, {
      "left" : "public CompilerInput getInput(InputId id)",
      "right" : "public CompilerInput getInput(InputId id)",
      "info" : "MethodDeclaration[30551-30641]:MethodDeclaration[30551-30641]"
    }, {
      "left" : "protected void removeExternInput(InputId id)",
      "right" : "protected void removeExternInput(InputId id)",
      "info" : "MethodDeclaration[30645-31126]:MethodDeclaration[30645-31126]"
    }, {
      "left" : "public CompilerInput newExternInput(String name)",
      "right" : "public CompilerInput newExternInput(String name)",
      "info" : "MethodDeclaration[31130-31582]:MethodDeclaration[31130-31582]"
    }, {
      "left" : "private CompilerInput putCompilerInput(InputId id, CompilerInput input)",
      "right" : "private CompilerInput putCompilerInput(InputId id, CompilerInput input)",
      "info" : "MethodDeclaration[31586-31730]:MethodDeclaration[31586-31730]"
    }, {
      "left" : "void addIncrementalSourceAst(JsAst ast)",
      "right" : "void addIncrementalSourceAst(JsAst ast)",
      "info" : "MethodDeclaration[31734-32033]:MethodDeclaration[31734-32033]"
    }, {
      "left" : "boolean replaceIncrementalSourceAst(JsAst ast)",
      "right" : "boolean replaceIncrementalSourceAst(JsAst ast)",
      "info" : "MethodDeclaration[32037-33397]:MethodDeclaration[32037-33397]"
    }, {
      "left" : "boolean addNewSourceAst(JsAst ast)",
      "right" : "boolean addNewSourceAst(JsAst ast)",
      "info" : "MethodDeclaration[33401-34495]:MethodDeclaration[33401-34495]"
    }, {
      "left" : "JSModuleGraph getModuleGraph()",
      "right" : "JSModuleGraph getModuleGraph()",
      "info" : "MethodDeclaration[34499-34571]:MethodDeclaration[34499-34571]"
    }, {
      "left" : "JSModuleGraph getDegenerateModuleGraph()",
      "right" : "JSModuleGraph getDegenerateModuleGraph()",
      "info" : "MethodDeclaration[34575-34837]:MethodDeclaration[34575-34837]"
    }, {
      "left" : "public JSTypeRegistry getTypeRegistry()",
      "right" : "public JSTypeRegistry getTypeRegistry()",
      "info" : "MethodDeclaration[34841-35040]:MethodDeclaration[34841-35040]"
    }, {
      "left" : "public MemoizedScopeCreator getTypedScopeCreator()",
      "right" : "public MemoizedScopeCreator getTypedScopeCreator()",
      "info" : "MethodDeclaration[35044-35163]:MethodDeclaration[35044-35163]"
    }, {
      "left" : "DefaultPassConfig ensureDefaultPassConfig()",
      "right" : "DefaultPassConfig ensureDefaultPassConfig()",
      "info" : "MethodDeclaration[35167-35489]:MethodDeclaration[35167-35489]"
    }, {
      "left" : "public SymbolTable buildKnownSymbolTable()",
      "right" : "public SymbolTable buildKnownSymbolTable()",
      "info" : "MethodDeclaration[35493-36882]:MethodDeclaration[35493-36882]"
    }, {
      "left" : "public Scope getTopScope()",
      "right" : "public Scope getTopScope()",
      "info" : "MethodDeclaration[36886-36972]:MethodDeclaration[36886-36972]"
    }, {
      "left" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
      "right" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
      "info" : "MethodDeclaration[36976-37541]:MethodDeclaration[36976-37541]"
    }, {
      "left" : "TypeValidator getTypeValidator()",
      "right" : "TypeValidator getTypeValidator()",
      "info" : "MethodDeclaration[37545-37707]:MethodDeclaration[37545-37707]"
    }, {
      "left" : "Node parseInputs()",
      "right" : "Node parseInputs()",
      "info" : "MethodDeclaration[37879-41601]:MethodDeclaration[37879-41578]"
    }, {
      "left" : "private void hoistExterns(Node externsRoot)",
      "right" : "private void hoistExterns(Node externsRoot)",
      "info" : "MethodDeclaration[41605-42809]:MethodDeclaration[41582-42786]"
    }, {
      "left" : "private void hoistNoCompileFiles()",
      "right" : "private void hoistNoCompileFiles()",
      "info" : "MethodDeclaration[42813-43382]:MethodDeclaration[42790-43359]"
    }, {
      "left" : "private void repartitionInputs()",
      "right" : "private void repartitionInputs()",
      "info" : "MethodDeclaration[43386-43487]:MethodDeclaration[43363-43464]"
    }, {
      "left" : "void processAMDAndCommonJSModules()",
      "right" : "void processAMDAndCommonJSModules()",
      "info" : "MethodDeclaration[43491-45833]:MethodDeclaration[43468-45810]"
    }, {
      "left" : "public Node parse(SourceFile file)",
      "right" : "public Node parse(SourceFile file)",
      "info" : "MethodDeclaration[45837-46007]:MethodDeclaration[45814-45984]"
    }, {
      "left" : "private int syntheticCodeId = 0;",
      "right" : "private int syntheticCodeId = 0;",
      "info" : "FieldDeclaration[46011-46043]:FieldDeclaration[45988-46020]"
    }, {
      "left" : "Node parseSyntheticCode(String js)",
      "right" : "Node parseSyntheticCode(String js)",
      "info" : "MethodDeclaration[46047-46307]:MethodDeclaration[46024-46284]"
    }, {
      "left" : "protected CompilerOptions newCompilerOptions()",
      "right" : "protected CompilerOptions newCompilerOptions()",
      "info" : "MethodDeclaration[46311-46478]:MethodDeclaration[46288-46455]"
    }, {
      "left" : "void initCompilerOptionsIfTesting()",
      "right" : "void initCompilerOptionsIfTesting()",
      "info" : "MethodDeclaration[46482-46701]:MethodDeclaration[46459-46678]"
    }, {
      "left" : "Node parseSyntheticCode(String fileName, String js)",
      "right" : "Node parseSyntheticCode(String fileName, String js)",
      "info" : "MethodDeclaration[46705-46863]:MethodDeclaration[46682-46840]"
    }, {
      "left" : "Node parseTestCode(String js)",
      "right" : "Node parseTestCode(String js)",
      "info" : "MethodDeclaration[46867-47201]:MethodDeclaration[46844-47178]"
    }, {
      "left" : "ErrorReporter getDefaultErrorReporter()",
      "right" : "ErrorReporter getDefaultErrorReporter()",
      "info" : "MethodDeclaration[47205-47295]:MethodDeclaration[47182-47272]"
    }, {
      "left" : "public String toSource()",
      "right" : "public String toSource()",
      "info" : "MethodDeclaration[47487-48201]:MethodDeclaration[47464-48178]"
    }, {
      "left" : "public String call() throws Exception",
      "right" : "public String call() throws Exception",
      "info" : "MethodDeclaration[47639-48189]:MethodDeclaration[47616-48166]"
    }, {
      "left" : "public String[] toSourceArray()",
      "right" : "public String[] toSourceArray()",
      "info" : "MethodDeclaration[48205-48997]:MethodDeclaration[48182-48974]"
    }, {
      "left" : "public String[] call() throws Exception",
      "right" : "public String[] call() throws Exception",
      "info" : "MethodDeclaration[48376-48985]:MethodDeclaration[48353-48962]"
    }, {
      "left" : "public String toSource(final JSModule module)",
      "right" : "public String toSource(final JSModule module)",
      "info" : "MethodDeclaration[49001-49800]:MethodDeclaration[48978-49777]"
    }, {
      "left" : "public String call() throws Exception",
      "right" : "public String call() throws Exception",
      "info" : "MethodDeclaration[49182-49788]:MethodDeclaration[49159-49765]"
    }, {
      "left" : "public String[] toSourceArray(final JSModule module)",
      "right" : "public String[] toSourceArray(final JSModule module)",
      "info" : "MethodDeclaration[49805-50759]:MethodDeclaration[49782-50736]"
    }, {
      "left" : "public String[] call() throws Exception",
      "right" : "public String[] call() throws Exception",
      "info" : "MethodDeclaration[50009-50747]:MethodDeclaration[49986-50724]"
    }, {
      "left" : "public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root)",
      "right" : "public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root)",
      "info" : "MethodDeclaration[50763-53538]:MethodDeclaration[50740-53515]"
    }, {
      "left" : "public Void call() throws Exception",
      "right" : "public Void call() throws Exception",
      "info" : "MethodDeclaration[51300-53526]:MethodDeclaration[51277-53503]"
    }, {
      "left" : "String toSource(Node n)",
      "right" : "String toSource(Node n)",
      "info" : "MethodDeclaration[53542-53756]:MethodDeclaration[53519-53733]"
    }, {
      "left" : "private String toSource(Node n, SourceMap sourceMap, boolean firstOutput)",
      "right" : "private String toSource(Node n, SourceMap sourceMap, boolean firstOutput)",
      "info" : "MethodDeclaration[53760-54595]:MethodDeclaration[53737-54572]"
    }, {
      "left" : "CodeBuilder",
      "right" : "CodeBuilder",
      "info" : "TypeDeclaration[54599-56344]:TypeDeclaration[54576-56321]"
    }, {
      "left" : "private final StringBuilder sb = new StringBuilder();",
      "right" : "private final StringBuilder sb = new StringBuilder();",
      "info" : "FieldDeclaration[54796-54849]:FieldDeclaration[54773-54826]"
    }, {
      "left" : "private int lineCount = 0;",
      "right" : "private int lineCount = 0;",
      "info" : "FieldDeclaration[54854-54880]:FieldDeclaration[54831-54857]"
    }, {
      "left" : "private int colCount = 0;",
      "right" : "private int colCount = 0;",
      "info" : "FieldDeclaration[54885-54910]:FieldDeclaration[54862-54887]"
    }, {
      "left" : "void reset()",
      "right" : "void reset()",
      "info" : "MethodDeclaration[54916-55025]:MethodDeclaration[54893-55002]"
    }, {
      "left" : "CodeBuilder append(String str)",
      "right" : "CodeBuilder append(String str)",
      "info" : "MethodDeclaration[55031-55597]:MethodDeclaration[55008-55574]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[55603-55725]:MethodDeclaration[55580-55702]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[55731-55837]:MethodDeclaration[55708-55814]"
    }, {
      "left" : "int getLineIndex()",
      "right" : "int getLineIndex()",
      "info" : "MethodDeclaration[55843-55972]:MethodDeclaration[55820-55949]"
    }, {
      "left" : "int getColumnIndex()",
      "right" : "int getColumnIndex()",
      "info" : "MethodDeclaration[55978-56110]:MethodDeclaration[55955-56087]"
    }, {
      "left" : "boolean endsWith(String suffix)",
      "right" : "boolean endsWith(String suffix)",
      "info" : "MethodDeclaration[56116-56340]:MethodDeclaration[56093-56317]"
    }, {
      "left" : "public void optimize()",
      "right" : "public void optimize()",
      "info" : "MethodDeclaration[56522-57174]:MethodDeclaration[56499-57151]"
    }, {
      "left" : "void setCssRenamingMap(CssRenamingMap map)",
      "right" : "void setCssRenamingMap(CssRenamingMap map)",
      "info" : "MethodDeclaration[57178-57272]:MethodDeclaration[57155-57249]"
    }, {
      "left" : "CssRenamingMap getCssRenamingMap()",
      "right" : "CssRenamingMap getCssRenamingMap()",
      "info" : "MethodDeclaration[57276-57363]:MethodDeclaration[57253-57340]"
    }, {
      "left" : "public void processDefines()",
      "right" : "public void processDefines()",
      "info" : "MethodDeclaration[57367-57854]:MethodDeclaration[57344-57831]"
    }, {
      "left" : "boolean isInliningForbidden()",
      "right" : "boolean isInliningForbidden()",
      "info" : "MethodDeclaration[57858-58061]:MethodDeclaration[57835-58038]"
    }, {
      "left" : "ControlFlowGraph<Node> computeCFG()",
      "right" : "ControlFlowGraph<Node> computeCFG()",
      "info" : "MethodDeclaration[58065-58387]:MethodDeclaration[58042-58364]"
    }, {
      "left" : "public void normalize()",
      "right" : "public void normalize()",
      "info" : "MethodDeclaration[58391-58536]:MethodDeclaration[58368-58513]"
    }, {
      "left" : "void prepareAst(Node root)",
      "right" : "void prepareAst(Node root)",
      "info" : "MethodDeclaration[58540-58660]:MethodDeclaration[58517-58637]"
    }, {
      "left" : "void recordFunctionInformation()",
      "right" : "void recordFunctionInformation()",
      "info" : "MethodDeclaration[58664-59078]:MethodDeclaration[58641-59055]"
    }, {
      "left" : "protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
      "right" : "protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
      "info" : "FieldDeclaration[59082-59187]:FieldDeclaration[59059-59164]"
    }, {
      "left" : "private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
      "right" : "private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
      "info" : "FieldDeclaration[59190-59295]:FieldDeclaration[59167-59272]"
    }, {
      "left" : "static final String SYNTHETIC_EXTERNS = \"{SyntheticVarsDeclar}\";",
      "right" : "static final String SYNTHETIC_EXTERNS = \"{SyntheticVarsDeclar}\";",
      "info" : "FieldDeclaration[59299-59432]:FieldDeclaration[59276-59409]"
    }, {
      "left" : "private CompilerInput synthesizedExternsInput = null;",
      "right" : "private CompilerInput synthesizedExternsInput = null;",
      "info" : "FieldDeclaration[59436-59489]:FieldDeclaration[59413-59466]"
    }, {
      "left" : "void addChangeHandler(CodeChangeHandler handler)",
      "right" : "void addChangeHandler(CodeChangeHandler handler)",
      "info" : "MethodDeclaration[59493-59596]:MethodDeclaration[59470-59573]"
    }, {
      "left" : "void removeChangeHandler(CodeChangeHandler handler)",
      "right" : "void removeChangeHandler(CodeChangeHandler handler)",
      "info" : "MethodDeclaration[59600-59709]:MethodDeclaration[59577-59686]"
    }, {
      "left" : "public void reportCodeChange()",
      "right" : "public void reportCodeChange()",
      "info" : "MethodDeclaration[59713-60047]:MethodDeclaration[59690-60024]"
    }, {
      "left" : "public CodingConvention getCodingConvention()",
      "right" : "public CodingConvention getCodingConvention()",
      "info" : "MethodDeclaration[60051-60278]:MethodDeclaration[60028-60255]"
    }, {
      "left" : "public boolean isIdeMode()",
      "right" : "public boolean isIdeMode()",
      "info" : "MethodDeclaration[60282-60354]:MethodDeclaration[60259-60331]"
    }, {
      "left" : "public boolean acceptEcmaScript5()",
      "right" : "public boolean acceptEcmaScript5()",
      "info" : "MethodDeclaration[60358-60549]:MethodDeclaration[60335-60526]"
    }, {
      "left" : "public LanguageMode languageMode()",
      "right" : "public LanguageMode languageMode()",
      "info" : "MethodDeclaration[60553-60629]:MethodDeclaration[60530-60606]"
    }, {
      "left" : "public boolean acceptConstKeyword()",
      "right" : "public boolean acceptConstKeyword()",
      "info" : "MethodDeclaration[60633-60725]:MethodDeclaration[60610-60702]"
    }, {
      "left" : "Config getParserConfig()",
      "right" : "Config getParserConfig()",
      "info" : "MethodDeclaration[60729-61449]:MethodDeclaration[60706-61426]"
    }, {
      "left" : "public boolean isTypeCheckingEnabled()",
      "right" : "public boolean isTypeCheckingEnabled()",
      "info" : "MethodDeclaration[61453-61540]:MethodDeclaration[61430-61517]"
    }, {
      "left" : "protected DiagnosticGroups getDiagnosticGroups()",
      "right" : "protected DiagnosticGroups getDiagnosticGroups()",
      "info" : "MethodDeclaration[61721-61952]:MethodDeclaration[61698-61929]"
    }, {
      "left" : "public void report(JSError error)",
      "right" : "public void report(JSError error)",
      "info" : "MethodDeclaration[61956-62397]:MethodDeclaration[61933-62374]"
    }, {
      "left" : "public CheckLevel getErrorLevel(JSError error)",
      "right" : "public CheckLevel getErrorLevel(JSError error)",
      "info" : "MethodDeclaration[62401-62545]:MethodDeclaration[62378-62522]"
    }, {
      "left" : "void throwInternalError(String message, Exception cause)",
      "right" : "void throwInternalError(String message, Exception cause)",
      "info" : "MethodDeclaration[62549-62937]:MethodDeclaration[62526-62914]"
    }, {
      "left" : "public int getErrorCount()",
      "right" : "public int getErrorCount()",
      "info" : "MethodDeclaration[62942-63059]:MethodDeclaration[62919-63036]"
    }, {
      "left" : "public int getWarningCount()",
      "right" : "public int getWarningCount()",
      "info" : "MethodDeclaration[63063-63186]:MethodDeclaration[63040-63163]"
    }, {
      "left" : "boolean hasHaltingErrors()",
      "right" : "boolean hasHaltingErrors()",
      "info" : "MethodDeclaration[63190-63282]:MethodDeclaration[63167-63259]"
    }, {
      "left" : "public boolean hasErrors()",
      "right" : "public boolean hasErrors()",
      "info" : "MethodDeclaration[63286-63767]:MethodDeclaration[63263-63744]"
    }, {
      "left" : "void addToDebugLog(String str)",
      "right" : "void addToDebugLog(String str)",
      "info" : "MethodDeclaration[63771-63952]:MethodDeclaration[63748-63929]"
    }, {
      "left" : "SourceFile getSourceFileByName(String sourceName)",
      "right" : "SourceFile getSourceFileByName(String sourceName)",
      "info" : "MethodDeclaration[63956-64333]:MethodDeclaration[63933-64310]"
    }, {
      "left" : "public String getSourceLine(String sourceName, int lineNumber)",
      "right" : "public String getSourceLine(String sourceName, int lineNumber)",
      "info" : "MethodDeclaration[64337-64612]:MethodDeclaration[64314-64589]"
    }, {
      "left" : "public Region getSourceRegion(String sourceName, int lineNumber)",
      "right" : "public Region getSourceRegion(String sourceName, int lineNumber)",
      "info" : "MethodDeclaration[64616-64895]:MethodDeclaration[64593-64872]"
    }, {
      "left" : "Node getNodeForCodeInsertion(JSModule module)",
      "right" : "Node getNodeForCodeInsertion(JSModule module)",
      "info" : "MethodDeclaration[65083-65534]:MethodDeclaration[65060-65511]"
    }, {
      "left" : "public SourceMap getSourceMap()",
      "right" : "public SourceMap getSourceMap()",
      "info" : "MethodDeclaration[65538-65597]:MethodDeclaration[65515-65574]"
    }, {
      "left" : "VariableMap getVariableMap()",
      "right" : "VariableMap getVariableMap()",
      "info" : "MethodDeclaration[65601-65698]:MethodDeclaration[65578-65675]"
    }, {
      "left" : "VariableMap getPropertyMap()",
      "right" : "VariableMap getPropertyMap()",
      "info" : "MethodDeclaration[65702-65799]:MethodDeclaration[65679-65776]"
    }, {
      "left" : "CompilerOptions getOptions()",
      "right" : "CompilerOptions getOptions()",
      "info" : "MethodDeclaration[65803-65857]:MethodDeclaration[65780-65834]"
    }, {
      "left" : "FunctionInformationMap getFunctionalInformationMap()",
      "right" : "FunctionInformationMap getFunctionalInformationMap()",
      "info" : "MethodDeclaration[65861-65954]:MethodDeclaration[65838-65931]"
    }, {
      "left" : "public static void setLoggingLevel(Level level)",
      "right" : "public static void setLoggingLevel(Level level)",
      "info" : "MethodDeclaration[65958-66125]:MethodDeclaration[65935-66102]"
    }, {
      "left" : "public String getAstDotGraph() throws IOException",
      "right" : "public String getAstDotGraph() throws IOException",
      "info" : "MethodDeclaration[66129-66486]:MethodDeclaration[66106-66463]"
    }, {
      "left" : "public ErrorManager getErrorManager()",
      "right" : "public ErrorManager getErrorManager()",
      "info" : "MethodDeclaration[66490-66644]:MethodDeclaration[66467-66621]"
    }, {
      "left" : "List<CompilerInput> getInputsInOrder()",
      "right" : "List<CompilerInput> getInputsInOrder()",
      "info" : "MethodDeclaration[66648-66768]:MethodDeclaration[66625-66745]"
    }, {
      "left" : "public Map<InputId, CompilerInput> getInputsById()",
      "right" : "public Map<InputId, CompilerInput> getInputsById()",
      "info" : "MethodDeclaration[66772-66964]:MethodDeclaration[66749-66941]"
    }, {
      "left" : "List<CompilerInput> getExternsInOrder()",
      "right" : "List<CompilerInput> getExternsInOrder()",
      "info" : "MethodDeclaration[66968-67160]:MethodDeclaration[66945-67137]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "TypeDeclaration[67164-68277]:TypeDeclaration[67141-68254]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[67828-67876]:FieldDeclaration[67805-67853]"
    }, {
      "left" : "Node externsRoot;",
      "right" : "Node externsRoot;",
      "info" : "FieldDeclaration[67882-67899]:FieldDeclaration[67859-67876]"
    }, {
      "left" : "private Node jsRoot;",
      "right" : "private Node jsRoot;",
      "info" : "FieldDeclaration[67904-67924]:FieldDeclaration[67881-67901]"
    }, {
      "left" : "private List<CompilerInput> externs;",
      "right" : "private List<CompilerInput> externs;",
      "info" : "FieldDeclaration[67929-67965]:FieldDeclaration[67906-67942]"
    }, {
      "left" : "private List<CompilerInput> inputs;",
      "right" : "private List<CompilerInput> inputs;",
      "info" : "FieldDeclaration[67970-68005]:FieldDeclaration[67947-67982]"
    }, {
      "left" : "private List<JSModule> modules;",
      "right" : "private List<JSModule> modules;",
      "info" : "FieldDeclaration[68010-68041]:FieldDeclaration[67987-68018]"
    }, {
      "left" : "private PassConfig.State passConfigState;",
      "right" : "private PassConfig.State passConfigState;",
      "info" : "FieldDeclaration[68046-68087]:FieldDeclaration[68023-68064]"
    }, {
      "left" : "private JSTypeRegistry typeRegistry;",
      "right" : "private JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[68092-68128]:FieldDeclaration[68069-68105]"
    }, {
      "left" : "private AbstractCompiler.LifeCycleStage lifeCycleStage;",
      "right" : "private AbstractCompiler.LifeCycleStage lifeCycleStage;",
      "info" : "FieldDeclaration[68133-68188]:FieldDeclaration[68110-68165]"
    }, {
      "left" : "private Map<String, Node> injectedLibraries;",
      "right" : "private Map<String, Node> injectedLibraries;",
      "info" : "FieldDeclaration[68193-68237]:FieldDeclaration[68170-68214]"
    }, {
      "left" : "private IntermediateState()",
      "right" : "private IntermediateState()",
      "info" : "MethodDeclaration[68243-68273]:MethodDeclaration[68220-68250]"
    }, {
      "left" : "public IntermediateState getState()",
      "right" : "public IntermediateState getState()",
      "info" : "MethodDeclaration[68281-68864]:MethodDeclaration[68258-68841]"
    }, {
      "left" : "public void setState(IntermediateState state)",
      "right" : "public void setState(IntermediateState state)",
      "info" : "MethodDeclaration[68868-69478]:MethodDeclaration[68845-69455]"
    }, {
      "left" : "List<CompilerInput> getInputsForTesting()",
      "right" : "List<CompilerInput> getInputsForTesting()",
      "info" : "MethodDeclaration[69482-69569]:MethodDeclaration[69459-69546]"
    }, {
      "left" : "List<CompilerInput> getExternsForTesting()",
      "right" : "List<CompilerInput> getExternsForTesting()",
      "info" : "MethodDeclaration[69573-69662]:MethodDeclaration[69550-69639]"
    }, {
      "left" : "boolean hasRegExpGlobalReferences()",
      "right" : "boolean hasRegExpGlobalReferences()",
      "info" : "MethodDeclaration[69666-69757]:MethodDeclaration[69643-69734]"
    }, {
      "left" : "void setHasRegExpGlobalReferences(boolean references)",
      "right" : "void setHasRegExpGlobalReferences(boolean references)",
      "info" : "MethodDeclaration[69761-69876]:MethodDeclaration[69738-69853]"
    }, {
      "left" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch,\n      Node collectionRoot)",
      "right" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch,\n      Node collectionRoot)",
      "info" : "MethodDeclaration[69880-70301]:MethodDeclaration[69857-70278]"
    }, {
      "left" : "GlobalVarReferenceMap getGlobalVarReferences()",
      "right" : "GlobalVarReferenceMap getGlobalVarReferences()",
      "info" : "MethodDeclaration[70305-70394]:MethodDeclaration[70282-70371]"
    }, {
      "left" : "CompilerInput getSynthesizedExternsInput()",
      "right" : "CompilerInput getSynthesizedExternsInput()",
      "info" : "MethodDeclaration[70398-70610]:MethodDeclaration[70375-70587]"
    }, {
      "left" : "public double getProgress()",
      "right" : "public double getProgress()",
      "info" : "MethodDeclaration[70614-70680]:MethodDeclaration[70591-70657]"
    }, {
      "left" : "void setProgress(double newProgress)",
      "right" : "void setProgress(double newProgress)",
      "info" : "MethodDeclaration[70684-70896]:MethodDeclaration[70661-70873]"
    }, {
      "left" : "public void replaceScript(JsAst ast)",
      "right" : "public void replaceScript(JsAst ast)",
      "info" : "MethodDeclaration[70900-71444]:MethodDeclaration[70877-71421]"
    }, {
      "left" : "public void addNewScript(JsAst ast)",
      "right" : "public void addNewScript(JsAst ast)",
      "info" : "MethodDeclaration[71448-72039]:MethodDeclaration[71425-72016]"
    }, {
      "left" : "private void processNewScript(JsAst ast, Node originalRoot)",
      "right" : "private void processNewScript(JsAst ast, Node originalRoot)",
      "info" : "MethodDeclaration[72043-72617]:MethodDeclaration[72020-72594]"
    }, {
      "left" : "private void runHotSwap(\n      Node originalRoot, Node js, PassConfig passConfig)",
      "right" : "private void runHotSwap(\n      Node originalRoot, Node js, PassConfig passConfig)",
      "info" : "MethodDeclaration[72621-72920]:MethodDeclaration[72598-72897]"
    }, {
      "left" : "private void runHotSwapPass(\n      Node originalRoot, Node js, PassFactory passFactory)",
      "right" : "private void runHotSwapPass(\n      Node originalRoot, Node js, PassFactory passFactory)",
      "info" : "MethodDeclaration[72924-73231]:MethodDeclaration[72901-73208]"
    }, {
      "left" : "private PassConfig getCleanupPassConfig()",
      "right" : "private PassConfig getCleanupPassConfig()",
      "info" : "MethodDeclaration[73235-73326]:MethodDeclaration[73212-73303]"
    }, {
      "left" : "private void removeSyntheticVarsInput()",
      "right" : "private void removeSyntheticVarsInput()",
      "info" : "MethodDeclaration[73330-73475]:MethodDeclaration[73307-73452]"
    }, {
      "left" : "Node ensureLibraryInjected(String resourceName)",
      "right" : "Node ensureLibraryInjected(String resourceName)",
      "info" : "MethodDeclaration[73479-74216]:MethodDeclaration[73456-74193]"
    }, {
      "left" : "Node loadLibraryCode(String resourceName)",
      "right" : "Node loadLibraryCode(String resourceName)",
      "info" : "MethodDeclaration[74220-74763]:MethodDeclaration[74197-74740]"
    }, {
      "left" : "public static String getReleaseVersion()",
      "right" : "public static String getReleaseVersion()",
      "info" : "MethodDeclaration[74767-74991]:MethodDeclaration[74744-74968]"
    }, {
      "left" : "public static String getReleaseDate()",
      "right" : "public static String getReleaseDate()",
      "info" : "MethodDeclaration[74995-75210]:MethodDeclaration[74972-75187]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3103-3109]:Modifier[3103-3109]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3110-3115]:TYPE_DECLARATION_KIND[3110-3115]"
    }, {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "SimpleName[3116-3124]:SimpleName[3116-3124]"
    }, {
      "left" : "AbstractCompiler",
      "right" : "AbstractCompiler",
      "info" : "SimpleType[3133-3149]:SimpleType[3133-3149]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7055-7061]:Modifier[7055-7061]"
    }, {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "SimpleName[7062-7070]:SimpleName[7062-7070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7073-7108]:Block[7073-7108]"
    }, {
      "left" : "this((PrintStream) null);",
      "right" : "this((PrintStream) null);",
      "info" : "ConstructorInvocation[7079-7104]:ConstructorInvocation[7079-7104]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7207-7213]:Modifier[7207-7213]"
    }, {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "SimpleName[7214-7222]:SimpleName[7214-7222]"
    }, {
      "left" : "PrintStream stream",
      "right" : "PrintStream stream",
      "info" : "SingleVariableDeclaration[7223-7241]:SingleVariableDeclaration[7223-7241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7243-7308]:Block[7243-7308]"
    }, {
      "left" : "addChangeHandler(recentChange);",
      "right" : "addChangeHandler(recentChange);",
      "info" : "ExpressionStatement[7249-7280]:ExpressionStatement[7249-7280]"
    }, {
      "left" : "outStream = stream;",
      "right" : "outStream = stream;",
      "info" : "ExpressionStatement[7285-7304]:ExpressionStatement[7285-7304]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7382-7388]:Modifier[7382-7388]"
    }, {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "SimpleName[7389-7397]:SimpleName[7389-7397]"
    }, {
      "left" : "ErrorManager errorManager",
      "right" : "ErrorManager errorManager",
      "info" : "SingleVariableDeclaration[7398-7423]:SingleVariableDeclaration[7398-7423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7425-7477]:Block[7425-7477]"
    }, {
      "left" : "this();",
      "right" : "this();",
      "info" : "ConstructorInvocation[7431-7438]:ConstructorInvocation[7431-7438]"
    }, {
      "left" : "setErrorManager(errorManager);",
      "right" : "setErrorManager(errorManager);",
      "info" : "ExpressionStatement[7443-7473]:ExpressionStatement[7443-7473]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7597-7603]:Modifier[7597-7603]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7604-7608]:PrimitiveType[7604-7608]"
    }, {
      "left" : "setErrorManager",
      "right" : "setErrorManager",
      "info" : "SimpleName[7609-7624]:SimpleName[7609-7624]"
    }, {
      "left" : "ErrorManager errorManager",
      "right" : "ErrorManager errorManager",
      "info" : "SingleVariableDeclaration[7625-7650]:SingleVariableDeclaration[7625-7650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7652-7786]:Block[7652-7786]"
    }, {
      "left" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
      "right" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
      "info" : "ExpressionStatement[7658-7744]:ExpressionStatement[7658-7744]"
    }, {
      "left" : "this.errorManager = errorManager;",
      "right" : "this.errorManager = errorManager;",
      "info" : "ExpressionStatement[7749-7782]:ExpressionStatement[7749-7782]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7904-7911]:Modifier[7904-7911]"
    }, {
      "left" : "MessageFormatter",
      "right" : "MessageFormatter",
      "info" : "SimpleType[7912-7928]:SimpleType[7912-7928]"
    }, {
      "left" : "createMessageFormatter",
      "right" : "createMessageFormatter",
      "info" : "SimpleName[7929-7951]:SimpleName[7929-7951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7954-8079]:Block[7954-8079]"
    }, {
      "left" : "boolean colorize = options.shouldColorizeErrorOutput();",
      "right" : "boolean colorize = options.shouldColorizeErrorOutput();",
      "info" : "VariableDeclarationStatement[7960-8015]:VariableDeclarationStatement[7960-8015]"
    }, {
      "left" : "return options.errorFormat.toFormatter(this, colorize);",
      "right" : "return options.errorFormat.toFormatter(this, colorize);",
      "info" : "ReturnStatement[8020-8075]:ReturnStatement[8020-8075]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8197-8203]:Modifier[8197-8203]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8204-8208]:PrimitiveType[8204-8208]"
    }, {
      "left" : "initOptions",
      "right" : "initOptions",
      "info" : "SimpleName[8209-8220]:SimpleName[8209-8220]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[8221-8244]:SingleVariableDeclaration[8221-8244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8246-10581]:Block[8246-10581]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[8252-8275]:ExpressionStatement[8252-8275]"
    }, {
      "left" : "if (errorManager == null)",
      "right" : "if (errorManager == null)",
      "info" : "IfStatement[8280-8684]:IfStatement[8280-8684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8306-8684]:Block[8306-8684]"
    }, {
      "left" : "if (outStream == null)",
      "right" : "if (outStream == null)",
      "info" : "IfStatement[8314-8678]:IfStatement[8314-8678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8337-8442]:Block[8337-8442]"
    }, {
      "left" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
      "right" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
      "info" : "ExpressionStatement[8347-8434]:ExpressionStatement[8347-8434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8448-8678]:Block[8448-8678]"
    }, {
      "left" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
      "right" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
      "info" : "VariableDeclarationStatement[8458-8569]:VariableDeclarationStatement[8458-8569]"
    }, {
      "left" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
      "right" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
      "info" : "ExpressionStatement[8578-8636]:ExpressionStatement[8578-8636]"
    }, {
      "left" : "setErrorManager(printer);",
      "right" : "setErrorManager(printer);",
      "info" : "ExpressionStatement[8645-8670]:ExpressionStatement[8645-8670]"
    }, {
      "left" : "if (options.enables(DiagnosticGroups.CHECK_TYPES))",
      "right" : "if (options.enables(DiagnosticGroups.CHECK_TYPES))",
      "info" : "IfStatement[8752-9285]:IfStatement[8752-9285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8803-8843]:Block[8803-8843]"
    }, {
      "left" : "options.checkTypes = true;",
      "right" : "options.checkTypes = true;",
      "info" : "ExpressionStatement[8811-8837]:ExpressionStatement[8811-8837]"
    }, {
      "left" : "if (options.disables(DiagnosticGroups.CHECK_TYPES))",
      "right" : "if (options.disables(DiagnosticGroups.CHECK_TYPES))",
      "info" : "IfStatement[8849-9285]:IfStatement[8849-9285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8901-8942]:Block[8901-8942]"
    }, {
      "left" : "options.checkTypes = false;",
      "right" : "options.checkTypes = false;",
      "info" : "ExpressionStatement[8909-8936]:ExpressionStatement[8909-8936]"
    }, {
      "left" : "if (!options.checkTypes)",
      "right" : "if (!options.checkTypes)",
      "info" : "IfStatement[8948-9285]:IfStatement[8948-9285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8973-9285]:Block[8973-9285]"
    }, {
      "left" : "options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);",
      "right" : "options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);",
      "info" : "ExpressionStatement[9141-9279]:ExpressionStatement[9141-9279]"
    }, {
      "left" : "if (options.checkGlobalThisLevel.isOn() &&\n        !options.disables(DiagnosticGroups.GLOBAL_THIS))",
      "right" : "if (options.checkGlobalThisLevel.isOn() &&\n        !options.disables(DiagnosticGroups.GLOBAL_THIS))",
      "info" : "IfStatement[9291-9510]:IfStatement[9291-9510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9391-9510]:Block[9391-9510]"
    }, {
      "left" : "options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);",
      "right" : "options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);",
      "info" : "ExpressionStatement[9399-9504]:ExpressionStatement[9399-9504]"
    }, {
      "left" : "if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT)",
      "right" : "if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT)",
      "info" : "IfStatement[9516-9686]:IfStatement[9516-9686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9580-9686]:Block[9580-9686]"
    }, {
      "left" : "options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);",
      "right" : "options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);",
      "info" : "ExpressionStatement[9588-9680]:ExpressionStatement[9588-9680]"
    }, {
      "left" : "List<WarningsGuard> guards = Lists.newArrayList();",
      "right" : "List<WarningsGuard> guards = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[9730-9780]:VariableDeclarationStatement[9730-9780]"
    }, {
      "left" : "guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));",
      "right" : "guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));",
      "info" : "ExpressionStatement[9785-9893]:ExpressionStatement[9785-9893]"
    }, {
      "left" : "guards.add(options.getWarningsGuard());",
      "right" : "guards.add(options.getWarningsGuard());",
      "info" : "ExpressionStatement[9898-9937]:ExpressionStatement[9898-9937]"
    }, {
      "left" : "ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);",
      "right" : "ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);",
      "info" : "VariableDeclarationStatement[9943-10014]:VariableDeclarationStatement[9943-10014]"
    }, {
      "left" : "if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES))",
      "right" : "if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES))",
      "info" : "IfStatement[10306-10535]:IfStatement[10306-10535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10402-10535]:Block[10402-10535]"
    }, {
      "left" : "composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));",
      "right" : "composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));",
      "info" : "ExpressionStatement[10410-10529]:ExpressionStatement[10410-10529]"
    }, {
      "left" : "this.warningsGuard = composedGuards;",
      "right" : "this.warningsGuard = composedGuards;",
      "info" : "ExpressionStatement[10541-10577]:ExpressionStatement[10541-10577]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10659-10665]:Modifier[10659-10665]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10666-10670]:PrimitiveType[10666-10670]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[10671-10675]:SimpleName[10671-10675]"
    }, {
      "left" : "JSSourceFile[] externs",
      "right" : "JSSourceFile[] externs",
      "info" : "SingleVariableDeclaration[10676-10698]:SingleVariableDeclaration[10676-10698]"
    }, {
      "left" : "JSSourceFile[] inputs",
      "right" : "JSSourceFile[] inputs",
      "info" : "SingleVariableDeclaration[10700-10721]:SingleVariableDeclaration[10700-10721]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[10729-10752]:SingleVariableDeclaration[10729-10752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10754-10871]:Block[10754-10871]"
    }, {
      "left" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
      "right" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
      "info" : "ExpressionStatement[10760-10867]:ExpressionStatement[10760-10867]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10949-10955]:Modifier[10949-10955]"
    }, {
      "left" : "T1 extends SourceFile",
      "right" : "T1 extends SourceFile",
      "info" : "TypeParameter[10957-10978]:TypeParameter[10957-10978]"
    }, {
      "left" : "T2 extends SourceFile",
      "right" : "T2 extends SourceFile",
      "info" : "TypeParameter[10980-11001]:TypeParameter[10980-11001]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11003-11007]:PrimitiveType[11003-11007]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[11008-11012]:SimpleName[11008-11012]"
    }, {
      "left" : "List<T1> externs",
      "right" : "List<T1> externs",
      "info" : "SingleVariableDeclaration[11020-11036]:SingleVariableDeclaration[11020-11036]"
    }, {
      "left" : "List<T2> inputs",
      "right" : "List<T2> inputs",
      "info" : "SingleVariableDeclaration[11044-11059]:SingleVariableDeclaration[11044-11059]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[11067-11090]:SingleVariableDeclaration[11067-11090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11092-11289]:Block[11092-11289]"
    }, {
      "left" : "JSModule module = new JSModule(SINGLETON_MODULE_NAME);",
      "right" : "JSModule module = new JSModule(SINGLETON_MODULE_NAME);",
      "info" : "VariableDeclarationStatement[11098-11152]:VariableDeclarationStatement[11098-11152]"
    }, {
      "left" : "for (SourceFile input : inputs)",
      "right" : "for (SourceFile input : inputs)",
      "info" : "EnhancedForStatement[11157-11221]:EnhancedForStatement[11157-11221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11189-11221]:Block[11189-11221]"
    }, {
      "left" : "module.add(input);",
      "right" : "module.add(input);",
      "info" : "ExpressionStatement[11197-11215]:ExpressionStatement[11197-11215]"
    }, {
      "left" : "initModules(externs, Lists.newArrayList(module), options);",
      "right" : "initModules(externs, Lists.newArrayList(module), options);",
      "info" : "ExpressionStatement[11227-11285]:ExpressionStatement[11227-11285]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11402-11408]:Modifier[11402-11408]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11409-11413]:PrimitiveType[11409-11413]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[11414-11418]:SimpleName[11414-11418]"
    }, {
      "left" : "JSSourceFile[] externs",
      "right" : "JSSourceFile[] externs",
      "info" : "SingleVariableDeclaration[11419-11441]:SingleVariableDeclaration[11419-11441]"
    }, {
      "left" : "JSModule[] modules",
      "right" : "JSModule[] modules",
      "info" : "SingleVariableDeclaration[11443-11461]:SingleVariableDeclaration[11443-11461]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[11469-11492]:SingleVariableDeclaration[11469-11492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11494-11614]:Block[11494-11614]"
    }, {
      "left" : "initModules(Lists.<SourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
      "right" : "initModules(Lists.<SourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
      "info" : "ExpressionStatement[11500-11610]:ExpressionStatement[11500-11610]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11727-11733]:Modifier[11727-11733]"
    }, {
      "left" : "T extends SourceFile",
      "right" : "T extends SourceFile",
      "info" : "TypeParameter[11735-11755]:TypeParameter[11735-11755]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11757-11761]:PrimitiveType[11757-11761]"
    }, {
      "left" : "initModules",
      "right" : "initModules",
      "info" : "SimpleName[11762-11773]:SimpleName[11762-11773]"
    }, {
      "left" : "List<T> externs",
      "right" : "List<T> externs",
      "info" : "SingleVariableDeclaration[11781-11796]:SingleVariableDeclaration[11781-11796]"
    }, {
      "left" : "List<JSModule> modules",
      "right" : "List<JSModule> modules",
      "info" : "SingleVariableDeclaration[11798-11820]:SingleVariableDeclaration[11798-11820]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[11822-11845]:SingleVariableDeclaration[11822-11845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11847-12700]:Block[11847-12700]"
    }, {
      "left" : "initOptions(options);",
      "right" : "initOptions(options);",
      "info" : "ExpressionStatement[11853-11874]:ExpressionStatement[11853-11874]"
    }, {
      "left" : "checkFirstModule(modules);",
      "right" : "checkFirstModule(modules);",
      "info" : "ExpressionStatement[11880-11906]:ExpressionStatement[11880-11906]"
    }, {
      "left" : "fillEmptyModules(modules);",
      "right" : "fillEmptyModules(modules);",
      "info" : "ExpressionStatement[11911-11937]:ExpressionStatement[11911-11937]"
    }, {
      "left" : "this.externs = makeCompilerInput(externs, true);",
      "right" : "this.externs = makeCompilerInput(externs, true);",
      "info" : "ExpressionStatement[11943-11991]:ExpressionStatement[11943-11991]"
    }, {
      "left" : "this.modules = modules;",
      "right" : "this.modules = modules;",
      "info" : "ExpressionStatement[12099-12122]:ExpressionStatement[12099-12122]"
    }, {
      "left" : "if (modules.size() > 1)",
      "right" : "if (modules.size() > 1)",
      "info" : "IfStatement[12127-12591]:IfStatement[12127-12591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12151-12547]:Block[12151-12547]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12159-12541]:TryStatement[12159-12541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12163-12227]:Block[12163-12227]"
    }, {
      "left" : "this.moduleGraph = new JSModuleGraph(modules);",
      "right" : "this.moduleGraph = new JSModuleGraph(modules);",
      "info" : "ExpressionStatement[12173-12219]:ExpressionStatement[12173-12219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12278-12541]:Block[12278-12541]"
    }, {
      "left" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
      "right" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
      "info" : "ExpressionStatement[12396-12517]:ExpressionStatement[12396-12517]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12526-12533]:ReturnStatement[12526-12533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12553-12591]:Block[12553-12591]"
    }, {
      "left" : "this.moduleGraph = null;",
      "right" : "this.moduleGraph = null;",
      "info" : "ExpressionStatement[12561-12585]:ExpressionStatement[12561-12585]"
    }, {
      "left" : "this.inputs = getAllInputsFromModules(modules);",
      "right" : "this.inputs = getAllInputsFromModules(modules);",
      "info" : "ExpressionStatement[12597-12644]:ExpressionStatement[12597-12644]"
    }, {
      "left" : "initBasedOnOptions();",
      "right" : "initBasedOnOptions();",
      "info" : "ExpressionStatement[12649-12670]:ExpressionStatement[12649-12670]"
    }, {
      "left" : "initInputsByIdMap();",
      "right" : "initInputsByIdMap();",
      "info" : "ExpressionStatement[12676-12696]:ExpressionStatement[12676-12696]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12786-12793]:Modifier[12786-12793]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12794-12798]:PrimitiveType[12794-12798]"
    }, {
      "left" : "initBasedOnOptions",
      "right" : "initBasedOnOptions",
      "info" : "SimpleName[12799-12817]:SimpleName[12799-12817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12820-13048]:Block[12820-13048]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[12869-13044]:IfStatement[12869-13044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12910-13044]:Block[12910-13044]"
    }, {
      "left" : "sourceMap = options.sourceMapFormat.getInstance();",
      "right" : "sourceMap = options.sourceMapFormat.getInstance();",
      "info" : "ExpressionStatement[12918-12968]:ExpressionStatement[12918-12968]"
    }, {
      "left" : "sourceMap.setPrefixMappings(options.sourceMapLocationMappings);",
      "right" : "sourceMap.setPrefixMappings(options.sourceMapLocationMappings);",
      "info" : "ExpressionStatement[12975-13038]:ExpressionStatement[12975-13038]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13052-13059]:Modifier[13052-13059]"
    }, {
      "left" : "T extends SourceFile",
      "right" : "T extends SourceFile",
      "info" : "TypeParameter[13061-13081]:TypeParameter[13061-13081]"
    }, {
      "left" : "List<CompilerInput>",
      "right" : "List<CompilerInput>",
      "info" : "ParameterizedType[13083-13102]:ParameterizedType[13083-13102]"
    }, {
      "left" : "makeCompilerInput",
      "right" : "makeCompilerInput",
      "info" : "SimpleName[13103-13120]:SimpleName[13103-13120]"
    }, {
      "left" : "List<T> files",
      "right" : "List<T> files",
      "info" : "SingleVariableDeclaration[13128-13141]:SingleVariableDeclaration[13128-13141]"
    }, {
      "left" : "boolean isExtern",
      "right" : "boolean isExtern",
      "info" : "SingleVariableDeclaration[13143-13159]:SingleVariableDeclaration[13143-13159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13161-13326]:Block[13161-13326]"
    }, {
      "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[13167-13217]:VariableDeclarationStatement[13167-13217]"
    }, {
      "left" : "for (T file : files)",
      "right" : "for (T file : files)",
      "info" : "EnhancedForStatement[13222-13303]:EnhancedForStatement[13222-13303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13243-13303]:Block[13243-13303]"
    }, {
      "left" : "inputs.add(new CompilerInput(file, isExtern));",
      "right" : "inputs.add(new CompilerInput(file, isExtern));",
      "info" : "ExpressionStatement[13251-13297]:ExpressionStatement[13251-13297]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[13308-13322]:ReturnStatement[13308-13322]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13836-13843]:Modifier[13836-13843]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13844-13848]:PrimitiveType[13844-13848]"
    }, {
      "left" : "checkFirstModule",
      "right" : "checkFirstModule",
      "info" : "SimpleName[13849-13865]:SimpleName[13849-13865]"
    }, {
      "left" : "List<JSModule> modules",
      "right" : "List<JSModule> modules",
      "info" : "SingleVariableDeclaration[13866-13888]:SingleVariableDeclaration[13866-13888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13890-14222]:Block[13890-14222]"
    }, {
      "left" : "if (modules.isEmpty())",
      "right" : "if (modules.isEmpty())",
      "info" : "IfStatement[13896-14218]:IfStatement[13896-14218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13919-13979]:Block[13919-13979]"
    }, {
      "left" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
      "right" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
      "info" : "ExpressionStatement[13927-13973]:ExpressionStatement[13927-13973]"
    }, {
      "left" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
      "right" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
      "info" : "IfStatement[13985-14218]:IfStatement[13985-14218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14049-14218]:Block[14049-14218]"
    }, {
      "left" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
      "right" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
      "info" : "ExpressionStatement[14130-14212]:ExpressionStatement[14130-14212]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14335-14341]:Modifier[14335-14341]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[14342-14348]:SimpleType[14342-14348]"
    }, {
      "left" : "createFillFileName",
      "right" : "createFillFileName",
      "info" : "SimpleName[14349-14367]:SimpleName[14349-14367]"
    }, {
      "left" : "String moduleName",
      "right" : "String moduleName",
      "info" : "SingleVariableDeclaration[14368-14385]:SingleVariableDeclaration[14368-14385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14387-14427]:Block[14387-14427]"
    }, {
      "left" : "return \"[\" + moduleName + \"]\";",
      "right" : "return \"[\" + moduleName + \"]\";",
      "info" : "ReturnStatement[14393-14423]:ReturnStatement[14393-14423]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14543-14550]:Modifier[14543-14550]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14551-14557]:Modifier[14551-14557]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14558-14562]:PrimitiveType[14558-14562]"
    }, {
      "left" : "fillEmptyModules",
      "right" : "fillEmptyModules",
      "info" : "SimpleName[14563-14579]:SimpleName[14563-14579]"
    }, {
      "left" : "List<JSModule> modules",
      "right" : "List<JSModule> modules",
      "info" : "SingleVariableDeclaration[14580-14602]:SingleVariableDeclaration[14580-14602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14604-14799]:Block[14604-14799]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[14610-14795]:EnhancedForStatement[14610-14795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14642-14795]:Block[14642-14795]"
    }, {
      "left" : "if (module.getInputs().isEmpty())",
      "right" : "if (module.getInputs().isEmpty())",
      "info" : "IfStatement[14650-14789]:IfStatement[14650-14789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14684-14789]:Block[14684-14789]"
    }, {
      "left" : "module.add(SourceFile.fromCode(\n            createFillFileName(module.getName()), \"\"));",
      "right" : "module.add(SourceFile.fromCode(\n            createFillFileName(module.getName()), \"\"));",
      "info" : "ExpressionStatement[14694-14781]:ExpressionStatement[14694-14781]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15045-15051]:Modifier[15045-15051]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15052-15056]:PrimitiveType[15052-15056]"
    }, {
      "left" : "rebuildInputsFromModules",
      "right" : "rebuildInputsFromModules",
      "info" : "SimpleName[15057-15081]:SimpleName[15057-15081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15084-15161]:Block[15084-15161]"
    }, {
      "left" : "inputs = getAllInputsFromModules(modules);",
      "right" : "inputs = getAllInputsFromModules(modules);",
      "info" : "ExpressionStatement[15090-15132]:ExpressionStatement[15090-15132]"
    }, {
      "left" : "initInputsByIdMap();",
      "right" : "initInputsByIdMap();",
      "info" : "ExpressionStatement[15137-15157]:ExpressionStatement[15137-15157]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15271-15278]:Modifier[15271-15278]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15279-15285]:Modifier[15279-15285]"
    }, {
      "left" : "List<CompilerInput>",
      "right" : "List<CompilerInput>",
      "info" : "ParameterizedType[15286-15305]:ParameterizedType[15286-15305]"
    }, {
      "left" : "getAllInputsFromModules",
      "right" : "getAllInputsFromModules",
      "info" : "SimpleName[15306-15329]:SimpleName[15306-15329]"
    }, {
      "left" : "List<JSModule> modules",
      "right" : "List<JSModule> modules",
      "info" : "SingleVariableDeclaration[15337-15359]:SingleVariableDeclaration[15337-15359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15361-15894]:Block[15361-15894]"
    }, {
      "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[15367-15417]:VariableDeclarationStatement[15367-15417]"
    }, {
      "left" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
      "right" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
      "info" : "VariableDeclarationStatement[15422-15473]:VariableDeclarationStatement[15422-15473]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[15478-15871]:EnhancedForStatement[15478-15871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15510-15871]:Block[15510-15871]"
    }, {
      "left" : "for (CompilerInput input : module.getInputs())",
      "right" : "for (CompilerInput input : module.getInputs())",
      "info" : "EnhancedForStatement[15518-15865]:EnhancedForStatement[15518-15865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15565-15865]:Block[15565-15865]"
    }, {
      "left" : "String inputName = input.getName();",
      "right" : "String inputName = input.getName();",
      "info" : "VariableDeclarationStatement[15575-15610]:VariableDeclarationStatement[15575-15610]"
    }, {
      "left" : "inputs.add(input);",
      "right" : "inputs.add(input);",
      "info" : "ExpressionStatement[15798-15816]:ExpressionStatement[15798-15816]"
    }, {
      "left" : "inputMap.put(inputName, module);",
      "right" : "inputMap.put(inputName, module);",
      "info" : "ExpressionStatement[15825-15857]:ExpressionStatement[15825-15857]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[15876-15890]:ReturnStatement[15876-15890]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16288-16292]:PrimitiveType[16288-16292]"
    }, {
      "left" : "initInputsByIdMap",
      "right" : "initInputsByIdMap",
      "info" : "SimpleName[16293-16310]:SimpleName[16293-16310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16313-16878]:Block[16313-16878]"
    }, {
      "left" : "inputsById = new HashMap<InputId, CompilerInput>();",
      "right" : "inputsById = new HashMap<InputId, CompilerInput>();",
      "info" : "ExpressionStatement[16319-16370]:ExpressionStatement[16319-16370]"
    }, {
      "left" : "for (CompilerInput input : externs)",
      "right" : "for (CompilerInput input : externs)",
      "info" : "EnhancedForStatement[16375-16626]:EnhancedForStatement[16375-16626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16411-16626]:Block[16411-16626]"
    }, {
      "left" : "InputId id = input.getInputId();",
      "right" : "InputId id = input.getInputId();",
      "info" : "VariableDeclarationStatement[16419-16451]:VariableDeclarationStatement[16419-16451]"
    }, {
      "left" : "CompilerInput previous = putCompilerInput(id, input);",
      "right" : "CompilerInput previous = putCompilerInput(id, input);",
      "info" : "VariableDeclarationStatement[16458-16511]:VariableDeclarationStatement[16458-16511]"
    }, {
      "left" : "if (previous != null)",
      "right" : "if (previous != null)",
      "info" : "IfStatement[16518-16620]:IfStatement[16518-16620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16540-16620]:Block[16540-16620]"
    }, {
      "left" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));",
      "right" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));",
      "info" : "ExpressionStatement[16550-16612]:ExpressionStatement[16550-16612]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[16631-16874]:EnhancedForStatement[16631-16874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16666-16874]:Block[16666-16874]"
    }, {
      "left" : "InputId id = input.getInputId();",
      "right" : "InputId id = input.getInputId();",
      "info" : "VariableDeclarationStatement[16674-16706]:VariableDeclarationStatement[16674-16706]"
    }, {
      "left" : "CompilerInput previous = putCompilerInput(id, input);",
      "right" : "CompilerInput previous = putCompilerInput(id, input);",
      "info" : "VariableDeclarationStatement[16713-16766]:VariableDeclarationStatement[16713-16766]"
    }, {
      "left" : "if (previous != null)",
      "right" : "if (previous != null)",
      "info" : "IfStatement[16773-16868]:IfStatement[16773-16868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16795-16868]:Block[16795-16868]"
    }, {
      "left" : "report(JSError.make(DUPLICATE_INPUT, input.getName()));",
      "right" : "report(JSError.make(DUPLICATE_INPUT, input.getName()));",
      "info" : "ExpressionStatement[16805-16860]:ExpressionStatement[16805-16860]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16882-16888]:Modifier[16882-16888]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[16889-16895]:SimpleType[16889-16895]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[16896-16903]:SimpleName[16896-16903]"
    }, {
      "left" : "SourceFile extern",
      "right" : "SourceFile extern",
      "info" : "SingleVariableDeclaration[16911-16928]:SingleVariableDeclaration[16911-16928]"
    }, {
      "left" : "SourceFile input",
      "right" : "SourceFile input",
      "info" : "SingleVariableDeclaration[16930-16946]:SingleVariableDeclaration[16930-16946]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[16948-16971]:SingleVariableDeclaration[16948-16971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16973-17063]:Block[16973-17063]"
    }, {
      "left" : "return compile(Lists.newArrayList(extern), Lists.newArrayList(input), options);",
      "right" : "return compile(Lists.newArrayList(extern), Lists.newArrayList(input), options);",
      "info" : "ReturnStatement[16980-17059]:ReturnStatement[16980-17059]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17067-17073]:Modifier[17067-17073]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[17074-17080]:SimpleType[17074-17080]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[17081-17088]:SimpleName[17081-17088]"
    }, {
      "left" : "SourceFile extern",
      "right" : "SourceFile extern",
      "info" : "SingleVariableDeclaration[17096-17113]:SingleVariableDeclaration[17096-17113]"
    }, {
      "left" : "JSSourceFile[] input",
      "right" : "JSSourceFile[] input",
      "info" : "SingleVariableDeclaration[17115-17135]:SingleVariableDeclaration[17115-17135]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[17137-17160]:SingleVariableDeclaration[17137-17160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17162-17252]:Block[17162-17252]"
    }, {
      "left" : "return compile(Lists.newArrayList(extern), Lists.newArrayList(input), options);",
      "right" : "return compile(Lists.newArrayList(extern), Lists.newArrayList(input), options);",
      "info" : "ReturnStatement[17169-17248]:ReturnStatement[17169-17248]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17256-17262]:Modifier[17256-17262]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[17263-17269]:SimpleType[17263-17269]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[17270-17277]:SimpleName[17270-17277]"
    }, {
      "left" : "JSSourceFile extern",
      "right" : "JSSourceFile extern",
      "info" : "SingleVariableDeclaration[17285-17304]:SingleVariableDeclaration[17285-17304]"
    }, {
      "left" : "JSModule[] modules",
      "right" : "JSModule[] modules",
      "info" : "SingleVariableDeclaration[17306-17324]:SingleVariableDeclaration[17306-17324]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[17326-17349]:SingleVariableDeclaration[17326-17349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17351-17460]:Block[17351-17460]"
    }, {
      "left" : "return compileModules(\n         Lists.newArrayList(extern), Lists.newArrayList(modules), options);",
      "right" : "return compileModules(\n         Lists.newArrayList(extern), Lists.newArrayList(modules), options);",
      "info" : "ReturnStatement[17358-17456]:ReturnStatement[17358-17456]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17508-17514]:Modifier[17508-17514]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[17515-17521]:SimpleType[17515-17521]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[17522-17529]:SimpleName[17522-17529]"
    }, {
      "left" : "JSSourceFile[] externs",
      "right" : "JSSourceFile[] externs",
      "info" : "SingleVariableDeclaration[17530-17552]:SingleVariableDeclaration[17530-17552]"
    }, {
      "left" : "JSSourceFile[] inputs",
      "right" : "JSSourceFile[] inputs",
      "info" : "SingleVariableDeclaration[17578-17599]:SingleVariableDeclaration[17578-17599]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[17625-17648]:SingleVariableDeclaration[17625-17648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17650-17781]:Block[17650-17781]"
    }, {
      "left" : "return compile(Lists.<SourceFile>newArrayList(externs),\n        Lists.<SourceFile>newArrayList(inputs),\n        options);",
      "right" : "return compile(Lists.<SourceFile>newArrayList(externs),\n        Lists.<SourceFile>newArrayList(inputs),\n        options);",
      "info" : "ReturnStatement[17656-17777]:ReturnStatement[17656-17777]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17829-17835]:Modifier[17829-17835]"
    }, {
      "left" : "T1 extends SourceFile",
      "right" : "T1 extends SourceFile",
      "info" : "TypeParameter[17837-17858]:TypeParameter[17837-17858]"
    }, {
      "left" : "T2 extends SourceFile",
      "right" : "T2 extends SourceFile",
      "info" : "TypeParameter[17860-17881]:TypeParameter[17860-17881]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[17883-17889]:SimpleType[17883-17889]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[17890-17897]:SimpleName[17890-17897]"
    }, {
      "left" : "List<T1> externs",
      "right" : "List<T1> externs",
      "info" : "SingleVariableDeclaration[17905-17921]:SingleVariableDeclaration[17905-17921]"
    }, {
      "left" : "List<T2> inputs",
      "right" : "List<T2> inputs",
      "info" : "SingleVariableDeclaration[17923-17938]:SingleVariableDeclaration[17923-17938]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[17940-17963]:SingleVariableDeclaration[17940-17963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17965-18348]:Block[17965-18348]"
    }, {
      "left" : "Preconditions.checkState(jsRoot == null);",
      "right" : "Preconditions.checkState(jsRoot == null);",
      "info" : "ExpressionStatement[18025-18066]:ExpressionStatement[18025-18066]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18072-18344]:TryStatement[18072-18344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18076-18206]:Block[18076-18206]"
    }, {
      "left" : "init(externs, inputs, options);",
      "right" : "init(externs, inputs, options);",
      "info" : "ExpressionStatement[18084-18115]:ExpressionStatement[18084-18115]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[18122-18176]:IfStatement[18122-18176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18139-18176]:Block[18139-18176]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[18149-18168]:ReturnStatement[18149-18168]"
    }, {
      "left" : "return compile();",
      "right" : "return compile();",
      "info" : "ReturnStatement[18183-18200]:ReturnStatement[18183-18200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18215-18344]:Block[18215-18344]"
    }, {
      "left" : "Tracer t = newTracer(\"generateReport\");",
      "right" : "Tracer t = newTracer(\"generateReport\");",
      "info" : "VariableDeclarationStatement[18223-18262]:VariableDeclarationStatement[18223-18262]"
    }, {
      "left" : "errorManager.generateReport();",
      "right" : "errorManager.generateReport();",
      "info" : "ExpressionStatement[18269-18299]:ExpressionStatement[18269-18299]"
    }, {
      "left" : "stopTracer(t, \"generateReport\");",
      "right" : "stopTracer(t, \"generateReport\");",
      "info" : "ExpressionStatement[18306-18338]:ExpressionStatement[18306-18338]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18397-18403]:Modifier[18397-18403]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[18404-18410]:SimpleType[18404-18410]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[18411-18418]:SimpleName[18411-18418]"
    }, {
      "left" : "JSSourceFile[] externs",
      "right" : "JSSourceFile[] externs",
      "info" : "SingleVariableDeclaration[18419-18441]:SingleVariableDeclaration[18419-18441]"
    }, {
      "left" : "JSModule[] modules",
      "right" : "JSModule[] modules",
      "info" : "SingleVariableDeclaration[18467-18485]:SingleVariableDeclaration[18467-18485]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[18511-18534]:SingleVariableDeclaration[18511-18534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18536-18673]:Block[18536-18673]"
    }, {
      "left" : "return compileModules(Lists.<SourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
      "right" : "return compileModules(Lists.<SourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
      "info" : "ReturnStatement[18542-18669]:ReturnStatement[18542-18669]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18722-18728]:Modifier[18722-18728]"
    }, {
      "left" : "T extends SourceFile",
      "right" : "T extends SourceFile",
      "info" : "TypeParameter[18730-18750]:TypeParameter[18730-18750]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[18752-18758]:SimpleType[18752-18758]"
    }, {
      "left" : "compileModules",
      "right" : "compileModules",
      "info" : "SimpleName[18759-18773]:SimpleName[18759-18773]"
    }, {
      "left" : "List<T> externs",
      "right" : "List<T> externs",
      "info" : "SingleVariableDeclaration[18774-18789]:SingleVariableDeclaration[18774-18789]"
    }, {
      "left" : "List<JSModule> modules",
      "right" : "List<JSModule> modules",
      "info" : "SingleVariableDeclaration[18797-18819]:SingleVariableDeclaration[18797-18819]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[18821-18844]:SingleVariableDeclaration[18821-18844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18846-19237]:Block[18846-19237]"
    }, {
      "left" : "Preconditions.checkState(jsRoot == null);",
      "right" : "Preconditions.checkState(jsRoot == null);",
      "info" : "ExpressionStatement[18906-18947]:ExpressionStatement[18906-18947]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18953-19233]:TryStatement[18953-19233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18957-19095]:Block[18957-19095]"
    }, {
      "left" : "initModules(externs, modules, options);",
      "right" : "initModules(externs, modules, options);",
      "info" : "ExpressionStatement[18965-19004]:ExpressionStatement[18965-19004]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[19011-19065]:IfStatement[19011-19065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19028-19065]:Block[19028-19065]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[19038-19057]:ReturnStatement[19038-19057]"
    }, {
      "left" : "return compile();",
      "right" : "return compile();",
      "info" : "ReturnStatement[19072-19089]:ReturnStatement[19072-19089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19104-19233]:Block[19104-19233]"
    }, {
      "left" : "Tracer t = newTracer(\"generateReport\");",
      "right" : "Tracer t = newTracer(\"generateReport\");",
      "info" : "VariableDeclarationStatement[19112-19151]:VariableDeclarationStatement[19112-19151]"
    }, {
      "left" : "errorManager.generateReport();",
      "right" : "errorManager.generateReport();",
      "info" : "ExpressionStatement[19158-19188]:ExpressionStatement[19158-19188]"
    }, {
      "left" : "stopTracer(t, \"generateReport\");",
      "right" : "stopTracer(t, \"generateReport\");",
      "info" : "ExpressionStatement[19195-19227]:ExpressionStatement[19195-19227]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19241-19248]:Modifier[19241-19248]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[19249-19255]:SimpleType[19249-19255]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[19256-19263]:SimpleName[19256-19263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19266-19460]:Block[19266-19460]"
    }, {
      "left" : "return runInCompilerThread(new Callable<Result>() {\n      @Override\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<Result>() {\n      @Override\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
      "info" : "ReturnStatement[19272-19456]:ReturnStatement[19272-19456]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19330-19339]:MarkerAnnotation[19330-19339]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19346-19352]:Modifier[19346-19352]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[19353-19359]:SimpleType[19353-19359]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[19360-19364]:SimpleName[19360-19364]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[19374-19383]:SimpleType[19374-19383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19384-19448]:Block[19384-19448]"
    }, {
      "left" : "compileInternal();",
      "right" : "compileInternal();",
      "info" : "ExpressionStatement[19394-19412]:ExpressionStatement[19394-19412]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[19421-19440]:ReturnStatement[19421-19440]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19569-19575]:Modifier[19569-19575]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19576-19580]:PrimitiveType[19576-19580]"
    }, {
      "left" : "disableThreads",
      "right" : "disableThreads",
      "info" : "SimpleName[19581-19595]:SimpleName[19581-19595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19598-19627]:Block[19598-19627]"
    }, {
      "left" : "useThreads = false;",
      "right" : "useThreads = false;",
      "info" : "ExpressionStatement[19604-19623]:ExpressionStatement[19604-19623]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19631-19638]:Modifier[19631-19638]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[19640-19641]:TypeParameter[19640-19641]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[19643-19644]:SimpleType[19643-19644]"
    }, {
      "left" : "runInCompilerThread",
      "right" : "runInCompilerThread",
      "info" : "SimpleName[19645-19664]:SimpleName[19645-19664]"
    }, {
      "left" : "final Callable<T> callable",
      "right" : "final Callable<T> callable",
      "info" : "SingleVariableDeclaration[19665-19691]:SingleVariableDeclaration[19665-19691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19693-19767]:Block[19693-19767]"
    }, {
      "left" : "return runCallable(callable, useThreads, options.tracer.isOn());",
      "right" : "return runCallable(callable, useThreads, options.tracer.isOn());",
      "info" : "ReturnStatement[19699-19763]:ReturnStatement[19699-19763]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19771-19777]:Modifier[19771-19777]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[19779-19780]:TypeParameter[19779-19780]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[19782-19783]:SimpleType[19782-19783]"
    }, {
      "left" : "runCallableWithLargeStack",
      "right" : "runCallableWithLargeStack",
      "info" : "SimpleName[19784-19809]:SimpleName[19784-19809]"
    }, {
      "left" : "final Callable<T> callable",
      "right" : "final Callable<T> callable",
      "info" : "SingleVariableDeclaration[19810-19836]:SingleVariableDeclaration[19810-19836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19838-19890]:Block[19838-19890]"
    }, {
      "left" : "return runCallable(callable, true, false);",
      "right" : "return runCallable(callable, true, false);",
      "info" : "ReturnStatement[19844-19886]:ReturnStatement[19844-19886]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[19894-19924]:SingleMemberAnnotation[19894-19924]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19927-19933]:Modifier[19927-19933]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[19935-19936]:TypeParameter[19935-19936]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[19938-19939]:SimpleType[19938-19939]"
    }, {
      "left" : "runCallable",
      "right" : "runCallable",
      "info" : "SimpleName[19940-19951]:SimpleName[19940-19951]"
    }, {
      "left" : "final Callable<T> callable",
      "right" : "final Callable<T> callable",
      "info" : "SingleVariableDeclaration[19959-19985]:SingleVariableDeclaration[19959-19985]"
    }, {
      "left" : "boolean useLargeStackThread",
      "right" : "boolean useLargeStackThread",
      "info" : "SingleVariableDeclaration[19987-20014]:SingleVariableDeclaration[19987-20014]"
    }, {
      "left" : "boolean trace",
      "right" : "boolean trace",
      "info" : "SingleVariableDeclaration[20016-20029]:SingleVariableDeclaration[20016-20029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20031-21490]:Block[20031-21490]"
    }, {
      "left" : "final boolean dumpTraceReport = trace;",
      "right" : "final boolean dumpTraceReport = trace;",
      "info" : "VariableDeclarationStatement[20420-20458]:VariableDeclarationStatement[20420-20458]"
    }, {
      "left" : "final Object[] result = new Object[1];",
      "right" : "final Object[] result = new Object[1];",
      "info" : "VariableDeclarationStatement[20463-20501]:VariableDeclarationStatement[20463-20501]"
    }, {
      "left" : "final Throwable[] exception = new Throwable[1];",
      "right" : "final Throwable[] exception = new Throwable[1];",
      "info" : "VariableDeclarationStatement[20506-20553]:VariableDeclarationStatement[20506-20553]"
    }, {
      "left" : "Runnable runnable = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
      "right" : "Runnable runnable = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
      "info" : "VariableDeclarationStatement[20558-20981]:VariableDeclarationStatement[20558-20981]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20601-20610]:MarkerAnnotation[20601-20610]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20617-20623]:Modifier[20617-20623]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20624-20628]:PrimitiveType[20624-20628]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[20629-20632]:SimpleName[20629-20632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20635-20974]:Block[20635-20974]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20645-20966]:TryStatement[20645-20966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20649-20789]:Block[20649-20789]"
    }, {
      "left" : "if (dumpTraceReport)",
      "right" : "if (dumpTraceReport)",
      "info" : "IfStatement[20661-20740]:IfStatement[20661-20740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20682-20740]:Block[20682-20740]"
    }, {
      "left" : "Tracer.initCurrentThreadTrace();",
      "right" : "Tracer.initCurrentThreadTrace();",
      "info" : "ExpressionStatement[20696-20728]:ExpressionStatement[20696-20728]"
    }, {
      "left" : "result[0] = callable.call();",
      "right" : "result[0] = callable.call();",
      "info" : "ExpressionStatement[20751-20779]:ExpressionStatement[20751-20779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20810-20849]:Block[20810-20849]"
    }, {
      "left" : "exception[0] = e;",
      "right" : "exception[0] = e;",
      "info" : "ExpressionStatement[20822-20839]:ExpressionStatement[20822-20839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20858-20966]:Block[20858-20966]"
    }, {
      "left" : "if (dumpTraceReport)",
      "right" : "if (dumpTraceReport)",
      "info" : "IfStatement[20870-20956]:IfStatement[20870-20956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20891-20956]:Block[20891-20956]"
    }, {
      "left" : "Tracer.logAndClearCurrentThreadTrace();",
      "right" : "Tracer.logAndClearCurrentThreadTrace();",
      "info" : "ExpressionStatement[20905-20944]:ExpressionStatement[20905-20944]"
    }, {
      "left" : "if (useLargeStackThread)",
      "right" : "if (useLargeStackThread)",
      "info" : "IfStatement[20987-21312]:IfStatement[20987-21312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21012-21277]:Block[21012-21277]"
    }, {
      "left" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
      "right" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
      "info" : "VariableDeclarationStatement[21020-21094]:VariableDeclarationStatement[21020-21094]"
    }, {
      "left" : "th.start();",
      "right" : "th.start();",
      "info" : "ExpressionStatement[21101-21112]:ExpressionStatement[21101-21112]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[21119-21271]:WhileStatement[21119-21271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21132-21271]:Block[21132-21271]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21142-21263]:TryStatement[21142-21263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21146-21195]:Block[21146-21195]"
    }, {
      "left" : "th.join();",
      "right" : "th.join();",
      "info" : "ExpressionStatement[21158-21168]:ExpressionStatement[21158-21168]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21179-21185]:BreakStatement[21179-21185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21232-21263]:Block[21232-21263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21283-21312]:Block[21283-21312]"
    }, {
      "left" : "runnable.run();",
      "right" : "runnable.run();",
      "info" : "ExpressionStatement[21291-21306]:ExpressionStatement[21291-21306]"
    }, {
      "left" : "if (exception[0] != null)",
      "right" : "if (exception[0] != null)",
      "info" : "IfStatement[21378-21459]:IfStatement[21378-21459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21404-21459]:Block[21404-21459]"
    }, {
      "left" : "throw new RuntimeException(exception[0]);",
      "right" : "throw new RuntimeException(exception[0]);",
      "info" : "ThrowStatement[21412-21453]:ThrowStatement[21412-21453]"
    }, {
      "left" : "return (T) result[0];",
      "right" : "return (T) result[0];",
      "info" : "ReturnStatement[21465-21486]:ReturnStatement[21465-21486]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21494-21501]:Modifier[21494-21501]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21502-21506]:PrimitiveType[21502-21506]"
    }, {
      "left" : "compileInternal",
      "right" : "compileInternal",
      "info" : "SimpleName[21507-21522]:SimpleName[21507-21522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21525-22542]:Block[21525-22542]"
    }, {
      "left" : "setProgress(0.0);",
      "right" : "setProgress(0.0);",
      "info" : "ExpressionStatement[21531-21548]:ExpressionStatement[21531-21548]"
    }, {
      "left" : "parse();",
      "right" : "parse();",
      "info" : "ExpressionStatement[21553-21561]:ExpressionStatement[21553-21561]"
    }, {
      "left" : "setProgress(0.15);",
      "right" : "setProgress(0.15);",
      "info" : "ExpressionStatement[21719-21737]:ExpressionStatement[21719-21737]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[21742-21780]:IfStatement[21742-21780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21759-21780]:Block[21759-21780]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21767-21774]:ReturnStatement[21767-21774]"
    }, {
      "left" : "if (!precheck())",
      "right" : "if (!precheck())",
      "info" : "IfStatement[21786-21824]:IfStatement[21786-21824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21803-21824]:Block[21803-21824]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21811-21818]:ReturnStatement[21811-21818]"
    }, {
      "left" : "if (options.nameAnonymousFunctionsOnly)",
      "right" : "if (options.nameAnonymousFunctionsOnly)",
      "info" : "IfStatement[21830-21977]:IfStatement[21830-21977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21870-21977]:Block[21870-21977]"
    }, {
      "left" : "check();",
      "right" : "check();",
      "info" : "ExpressionStatement[21949-21957]:ExpressionStatement[21949-21957]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21964-21971]:ReturnStatement[21964-21971]"
    }, {
      "left" : "if (!options.skipAllPasses)",
      "right" : "if (!options.skipAllPasses)",
      "info" : "IfStatement[21983-22346]:IfStatement[21983-22346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22011-22346]:Block[22011-22346]"
    }, {
      "left" : "check();",
      "right" : "check();",
      "info" : "ExpressionStatement[22019-22027]:ExpressionStatement[22019-22027]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[22034-22076]:IfStatement[22034-22076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22051-22076]:Block[22051-22076]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22061-22068]:ReturnStatement[22061-22068]"
    }, {
      "left" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
      "right" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
      "info" : "IfStatement[22084-22203]:IfStatement[22084-22203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22169-22203]:Block[22169-22203]"
    }, {
      "left" : "externExports();",
      "right" : "externExports();",
      "info" : "ExpressionStatement[22179-22195]:ExpressionStatement[22179-22195]"
    }, {
      "left" : "if (!options.ideMode)",
      "right" : "if (!options.ideMode)",
      "info" : "IfStatement[22289-22340]:IfStatement[22289-22340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22311-22340]:Block[22311-22340]"
    }, {
      "left" : "optimize();",
      "right" : "optimize();",
      "info" : "ExpressionStatement[22321-22332]:ExpressionStatement[22321-22332]"
    }, {
      "left" : "if (options.recordFunctionInformation)",
      "right" : "if (options.recordFunctionInformation)",
      "info" : "IfStatement[22352-22433]:IfStatement[22352-22433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22391-22433]:Block[22391-22433]"
    }, {
      "left" : "recordFunctionInformation();",
      "right" : "recordFunctionInformation();",
      "info" : "ExpressionStatement[22399-22427]:ExpressionStatement[22399-22427]"
    }, {
      "left" : "if (options.devMode == DevMode.START_AND_END)",
      "right" : "if (options.devMode == DevMode.START_AND_END)",
      "info" : "IfStatement[22439-22516]:IfStatement[22439-22516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22485-22516]:Block[22485-22516]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[22493-22510]:ExpressionStatement[22493-22510]"
    }, {
      "left" : "setProgress(1.0);",
      "right" : "setProgress(1.0);",
      "info" : "ExpressionStatement[22521-22538]:ExpressionStatement[22521-22538]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22546-22552]:Modifier[22546-22552]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22553-22557]:PrimitiveType[22553-22557]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[22558-22563]:SimpleName[22558-22563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22566-22590]:Block[22566-22590]"
    }, {
      "left" : "parseInputs();",
      "right" : "parseInputs();",
      "info" : "ExpressionStatement[22572-22586]:ExpressionStatement[22572-22586]"
    }, {
      "left" : "PassConfig",
      "right" : "PassConfig",
      "info" : "SimpleType[22594-22604]:SimpleType[22594-22604]"
    }, {
      "left" : "getPassConfig",
      "right" : "getPassConfig",
      "info" : "SimpleName[22605-22618]:SimpleName[22605-22618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22621-22720]:Block[22621-22720]"
    }, {
      "left" : "if (passes == null)",
      "right" : "if (passes == null)",
      "info" : "IfStatement[22627-22697]:IfStatement[22627-22697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22647-22697]:Block[22647-22697]"
    }, {
      "left" : "passes = createPassConfigInternal();",
      "right" : "passes = createPassConfigInternal();",
      "info" : "ExpressionStatement[22655-22691]:ExpressionStatement[22655-22691]"
    }, {
      "left" : "return passes;",
      "right" : "return passes;",
      "info" : "ReturnStatement[22702-22716]:ReturnStatement[22702-22716]"
    }, {
      "left" : "PassConfig",
      "right" : "PassConfig",
      "info" : "SimpleType[22833-22843]:SimpleType[22833-22843]"
    }, {
      "left" : "createPassConfigInternal",
      "right" : "createPassConfigInternal",
      "info" : "SimpleName[22844-22868]:SimpleName[22844-22868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22871-22919]:Block[22871-22919]"
    }, {
      "left" : "return new DefaultPassConfig(options);",
      "right" : "return new DefaultPassConfig(options);",
      "info" : "ReturnStatement[22877-22915]:ReturnStatement[22877-22915]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23124-23130]:Modifier[23124-23130]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23131-23135]:PrimitiveType[23131-23135]"
    }, {
      "left" : "setPassConfig",
      "right" : "setPassConfig",
      "info" : "SimpleName[23136-23149]:SimpleName[23136-23149]"
    }, {
      "left" : "PassConfig passes",
      "right" : "PassConfig passes",
      "info" : "SingleVariableDeclaration[23150-23167]:SingleVariableDeclaration[23150-23167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23169-23667]:Block[23169-23667]"
    }, {
      "left" : "Preconditions.checkNotNull(passes);",
      "right" : "Preconditions.checkNotNull(passes);",
      "info" : "ExpressionStatement[23484-23519]:ExpressionStatement[23484-23519]"
    }, {
      "left" : "if (this.passes != null)",
      "right" : "if (this.passes != null)",
      "info" : "IfStatement[23525-23637]:IfStatement[23525-23637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23550-23637]:Block[23550-23637]"
    }, {
      "left" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
      "right" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
      "info" : "ThrowStatement[23558-23631]:ThrowStatement[23558-23631]"
    }, {
      "left" : "this.passes = passes;",
      "right" : "this.passes = passes;",
      "info" : "ExpressionStatement[23642-23663]:ExpressionStatement[23642-23663]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23866-23873]:PrimitiveType[23866-23873]"
    }, {
      "left" : "precheck",
      "right" : "precheck",
      "info" : "SimpleName[23874-23882]:SimpleName[23874-23882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23885-23907]:Block[23885-23907]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23891-23903]:ReturnStatement[23891-23903]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23911-23917]:Modifier[23911-23917]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23918-23922]:PrimitiveType[23918-23922]"
    }, {
      "left" : "check",
      "right" : "check",
      "info" : "SimpleName[23923-23928]:SimpleName[23923-23928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23931-25206]:Block[23931-25206]"
    }, {
      "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
      "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
      "info" : "ExpressionStatement[23937-23992]:ExpressionStatement[23937-23992]"
    }, {
      "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker,\n        new PhaseOptimizer.ProgressRange(getProgress(), 1.0));",
      "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker,\n        new PhaseOptimizer.ProgressRange(getProgress(), 1.0));",
      "info" : "VariableDeclarationStatement[24155-24283]:VariableDeclarationStatement[24155-24283]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[24288-24388]:IfStatement[24288-24388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24331-24388]:Block[24331-24388]"
    }, {
      "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "info" : "ExpressionStatement[24339-24382]:ExpressionStatement[24339-24382]"
    }, {
      "left" : "phaseOptimizer.consume(getPassConfig().getChecks());",
      "right" : "phaseOptimizer.consume(getPassConfig().getChecks());",
      "info" : "ExpressionStatement[24393-24445]:ExpressionStatement[24393-24445]"
    }, {
      "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[24450-24494]:ExpressionStatement[24450-24494]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[24499-24537]:IfStatement[24499-24537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24516-24537]:Block[24516-24537]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24524-24531]:ReturnStatement[24524-24531]"
    }, {
      "left" : "if (options.nameAnonymousFunctionsOnly)",
      "right" : "if (options.nameAnonymousFunctionsOnly)",
      "info" : "IfStatement[24620-24681]:IfStatement[24620-24681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24660-24681]:Block[24660-24681]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24668-24675]:ReturnStatement[24668-24675]"
    }, {
      "left" : "if (options.removeTryCatchFinally)",
      "right" : "if (options.removeTryCatchFinally)",
      "info" : "IfStatement[24687-24760]:IfStatement[24687-24760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24722-24760]:Block[24722-24760]"
    }, {
      "left" : "removeTryCatchFinally();",
      "right" : "removeTryCatchFinally();",
      "info" : "ExpressionStatement[24730-24754]:ExpressionStatement[24730-24754]"
    }, {
      "left" : "if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
      "right" : "if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
      "info" : "IfStatement[24766-25134]:IfStatement[24766-25134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24999-25134]:Block[24999-25134]"
    }, {
      "left" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
      "right" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
      "info" : "ExpressionStatement[25007-25128]:ExpressionStatement[25007-25128]"
    }, {
      "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
      "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
      "info" : "ExpressionStatement[25140-25202]:ExpressionStatement[25140-25202]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25210-25217]:Modifier[25210-25217]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25218-25222]:PrimitiveType[25218-25222]"
    }, {
      "left" : "externExports",
      "right" : "externExports",
      "info" : "SimpleName[25223-25236]:SimpleName[25223-25236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25239-25472]:Block[25239-25472]"
    }, {
      "left" : "logger.fine(\"Creating extern file for exports\");",
      "right" : "logger.fine(\"Creating extern file for exports\");",
      "info" : "ExpressionStatement[25245-25293]:ExpressionStatement[25245-25293]"
    }, {
      "left" : "startPass(\"externExports\");",
      "right" : "startPass(\"externExports\");",
      "info" : "ExpressionStatement[25298-25325]:ExpressionStatement[25298-25325]"
    }, {
      "left" : "ExternExportsPass pass = new ExternExportsPass(this);",
      "right" : "ExternExportsPass pass = new ExternExportsPass(this);",
      "info" : "VariableDeclarationStatement[25331-25384]:VariableDeclarationStatement[25331-25384]"
    }, {
      "left" : "process(pass);",
      "right" : "process(pass);",
      "info" : "ExpressionStatement[25389-25403]:ExpressionStatement[25389-25403]"
    }, {
      "left" : "externExports = pass.getGeneratedExterns();",
      "right" : "externExports = pass.getGeneratedExterns();",
      "info" : "ExpressionStatement[25409-25452]:ExpressionStatement[25409-25452]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[25458-25468]:ExpressionStatement[25458-25468]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25476-25485]:MarkerAnnotation[25476-25485]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25488-25492]:PrimitiveType[25488-25492]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[25493-25500]:SimpleName[25493-25500]"
    }, {
      "left" : "CompilerPass p",
      "right" : "CompilerPass p",
      "info" : "SingleVariableDeclaration[25501-25515]:SingleVariableDeclaration[25501-25515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25517-25558]:Block[25517-25558]"
    }, {
      "left" : "p.process(externsRoot, jsRoot);",
      "right" : "p.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[25523-25554]:ExpressionStatement[25523-25554]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25652-25661]:MarkerAnnotation[25652-25661]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[25666-25675]:Modifier[25666-25675]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[25676-25688]:SimpleType[25676-25688]"
    }, {
      "left" : "createInternal",
      "right" : "createInternal",
      "info" : "SimpleName[25689-25703]:SimpleName[25689-25703]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[25704-25729]:SingleVariableDeclaration[25704-25729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25731-25778]:Block[25731-25778]"
    }, {
      "left" : "return new SanityCheck(compiler);",
      "right" : "return new SanityCheck(compiler);",
      "info" : "ReturnStatement[25739-25772]:ReturnStatement[25739-25772]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25787-25794]:Modifier[25787-25794]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25795-25799]:PrimitiveType[25795-25799]"
    }, {
      "left" : "maybeSanityCheck",
      "right" : "maybeSanityCheck",
      "info" : "SimpleName[25800-25816]:SimpleName[25800-25816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25819-25903]:Block[25819-25903]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[25825-25899]:IfStatement[25825-25899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25868-25899]:Block[25868-25899]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[25876-25893]:ExpressionStatement[25876-25893]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25907-25914]:Modifier[25907-25914]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25915-25919]:PrimitiveType[25915-25919]"
    }, {
      "left" : "runSanityCheck",
      "right" : "runSanityCheck",
      "info" : "SimpleName[25920-25934]:SimpleName[25920-25934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25937-26001]:Block[25937-26001]"
    }, {
      "left" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
      "right" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[25943-25997]:ExpressionStatement[25943-25997]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26081-26085]:PrimitiveType[26081-26085]"
    }, {
      "left" : "removeTryCatchFinally",
      "right" : "removeTryCatchFinally",
      "info" : "SimpleName[26086-26107]:SimpleName[26086-26107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26110-26280]:Block[26110-26280]"
    }, {
      "left" : "logger.fine(\"Remove try/catch/finally\");",
      "right" : "logger.fine(\"Remove try/catch/finally\");",
      "info" : "ExpressionStatement[26116-26156]:ExpressionStatement[26116-26156]"
    }, {
      "left" : "startPass(\"removeTryCatchFinally\");",
      "right" : "startPass(\"removeTryCatchFinally\");",
      "info" : "ExpressionStatement[26161-26196]:ExpressionStatement[26161-26196]"
    }, {
      "left" : "RemoveTryCatch r = new RemoveTryCatch(this);",
      "right" : "RemoveTryCatch r = new RemoveTryCatch(this);",
      "info" : "VariableDeclarationStatement[26201-26245]:VariableDeclarationStatement[26201-26245]"
    }, {
      "left" : "process(r);",
      "right" : "process(r);",
      "info" : "ExpressionStatement[26250-26261]:ExpressionStatement[26250-26261]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[26266-26276]:ExpressionStatement[26266-26276]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26424-26428]:PrimitiveType[26424-26428]"
    }, {
      "left" : "stripCode",
      "right" : "stripCode",
      "info" : "SimpleName[26429-26438]:SimpleName[26429-26438]"
    }, {
      "left" : "Set<String> stripTypes",
      "right" : "Set<String> stripTypes",
      "info" : "SingleVariableDeclaration[26439-26461]:SingleVariableDeclaration[26439-26461]"
    }, {
      "left" : "Set<String> stripNameSuffixes",
      "right" : "Set<String> stripNameSuffixes",
      "info" : "SingleVariableDeclaration[26463-26492]:SingleVariableDeclaration[26463-26492]"
    }, {
      "left" : "Set<String> stripTypePrefixes",
      "right" : "Set<String> stripTypePrefixes",
      "info" : "SingleVariableDeclaration[26500-26529]:SingleVariableDeclaration[26500-26529]"
    }, {
      "left" : "Set<String> stripNamePrefixes",
      "right" : "Set<String> stripNamePrefixes",
      "info" : "SingleVariableDeclaration[26531-26560]:SingleVariableDeclaration[26531-26560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26562-26865]:Block[26562-26865]"
    }, {
      "left" : "logger.fine(\"Strip code\");",
      "right" : "logger.fine(\"Strip code\");",
      "info" : "ExpressionStatement[26568-26594]:ExpressionStatement[26568-26594]"
    }, {
      "left" : "startPass(\"stripCode\");",
      "right" : "startPass(\"stripCode\");",
      "info" : "ExpressionStatement[26599-26622]:ExpressionStatement[26599-26622]"
    }, {
      "left" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
      "right" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
      "info" : "VariableDeclarationStatement[26627-26738]:VariableDeclarationStatement[26627-26738]"
    }, {
      "left" : "if (options.getTweakProcessing().shouldStrip())",
      "right" : "if (options.getTweakProcessing().shouldStrip())",
      "info" : "IfStatement[26743-26830]:IfStatement[26743-26830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26791-26830]:Block[26791-26830]"
    }, {
      "left" : "r.enableTweakStripping();",
      "right" : "r.enableTweakStripping();",
      "info" : "ExpressionStatement[26799-26824]:ExpressionStatement[26799-26824]"
    }, {
      "left" : "process(r);",
      "right" : "process(r);",
      "info" : "ExpressionStatement[26835-26846]:ExpressionStatement[26835-26846]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[26851-26861]:ExpressionStatement[26851-26861]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26954-26961]:Modifier[26954-26961]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26962-26966]:PrimitiveType[26962-26966]"
    }, {
      "left" : "runCustomPasses",
      "right" : "runCustomPasses",
      "info" : "SimpleName[26967-26982]:SimpleName[26967-26982]"
    }, {
      "left" : "CustomPassExecutionTime executionTime",
      "right" : "CustomPassExecutionTime executionTime",
      "info" : "SingleVariableDeclaration[26983-27020]:SingleVariableDeclaration[26983-27020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27022-27305]:Block[27022-27305]"
    }, {
      "left" : "if (options.customPasses != null)",
      "right" : "if (options.customPasses != null)",
      "info" : "IfStatement[27028-27301]:IfStatement[27028-27301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27062-27301]:Block[27062-27301]"
    }, {
      "left" : "Tracer t = newTracer(\"runCustomPasses\");",
      "right" : "Tracer t = newTracer(\"runCustomPasses\");",
      "info" : "VariableDeclarationStatement[27070-27110]:VariableDeclarationStatement[27070-27110]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27117-27295]:TryStatement[27117-27295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27121-27235]:Block[27121-27235]"
    }, {
      "left" : "for (CompilerPass p : options.customPasses.get(executionTime))",
      "right" : "for (CompilerPass p : options.customPasses.get(executionTime))",
      "info" : "EnhancedForStatement[27131-27227]:EnhancedForStatement[27131-27227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27194-27227]:Block[27194-27227]"
    }, {
      "left" : "process(p);",
      "right" : "process(p);",
      "info" : "ExpressionStatement[27206-27217]:ExpressionStatement[27206-27217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27244-27295]:Block[27244-27295]"
    }, {
      "left" : "stopTracer(t, \"runCustomPasses\");",
      "right" : "stopTracer(t, \"runCustomPasses\");",
      "info" : "ExpressionStatement[27254-27287]:ExpressionStatement[27254-27287]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27438-27442]:PrimitiveType[27438-27442]"
    }, {
      "left" : "startPass",
      "right" : "startPass",
      "info" : "SimpleName[27443-27452]:SimpleName[27443-27452]"
    }, {
      "left" : "String passName",
      "right" : "String passName",
      "info" : "SingleVariableDeclaration[27453-27468]:SingleVariableDeclaration[27453-27468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27470-27601]:Block[27470-27601]"
    }, {
      "left" : "Preconditions.checkState(currentTracer == null);",
      "right" : "Preconditions.checkState(currentTracer == null);",
      "info" : "ExpressionStatement[27476-27524]:ExpressionStatement[27476-27524]"
    }, {
      "left" : "currentPassName = passName;",
      "right" : "currentPassName = passName;",
      "info" : "ExpressionStatement[27529-27556]:ExpressionStatement[27529-27556]"
    }, {
      "left" : "currentTracer = newTracer(passName);",
      "right" : "currentTracer = newTracer(passName);",
      "info" : "ExpressionStatement[27561-27597]:ExpressionStatement[27561-27597]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27647-27651]:PrimitiveType[27647-27651]"
    }, {
      "left" : "endPass",
      "right" : "endPass",
      "info" : "SimpleName[27652-27659]:SimpleName[27652-27659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27662-27948]:Block[27662-27948]"
    }, {
      "left" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
      "right" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
      "info" : "ExpressionStatement[27668-27775]:ExpressionStatement[27668-27775]"
    }, {
      "left" : "stopTracer(currentTracer, currentPassName);",
      "right" : "stopTracer(currentTracer, currentPassName);",
      "info" : "ExpressionStatement[27780-27823]:ExpressionStatement[27780-27823]"
    }, {
      "left" : "String passToCheck = currentPassName;",
      "right" : "String passToCheck = currentPassName;",
      "info" : "VariableDeclarationStatement[27828-27865]:VariableDeclarationStatement[27828-27865]"
    }, {
      "left" : "currentPassName = null;",
      "right" : "currentPassName = null;",
      "info" : "ExpressionStatement[27870-27893]:ExpressionStatement[27870-27893]"
    }, {
      "left" : "currentTracer = null;",
      "right" : "currentTracer = null;",
      "info" : "ExpressionStatement[27898-27919]:ExpressionStatement[27898-27919]"
    }, {
      "left" : "maybeSanityCheck();",
      "right" : "maybeSanityCheck();",
      "info" : "ExpressionStatement[27925-27944]:ExpressionStatement[27925-27944]"
    }, {
      "left" : "Tracer",
      "right" : "Tracer",
      "info" : "SimpleType[28015-28021]:SimpleType[28015-28021]"
    }, {
      "left" : "newTracer",
      "right" : "newTracer",
      "info" : "SimpleName[28022-28031]:SimpleName[28022-28031]"
    }, {
      "left" : "String passName",
      "right" : "String passName",
      "info" : "SingleVariableDeclaration[28032-28047]:SingleVariableDeclaration[28032-28047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28049-28285]:Block[28049-28285]"
    }, {
      "left" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
      "right" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
      "info" : "VariableDeclarationStatement[28055-28157]:VariableDeclarationStatement[28055-28157]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[28162-28237]:IfStatement[28162-28237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28189-28237]:Block[28189-28237]"
    }, {
      "left" : "tracker.recordPassStart(passName);",
      "right" : "tracker.recordPassStart(passName);",
      "info" : "ExpressionStatement[28197-28231]:ExpressionStatement[28197-28231]"
    }, {
      "left" : "return new Tracer(\"Compiler\", comment);",
      "right" : "return new Tracer(\"Compiler\", comment);",
      "info" : "ReturnStatement[28242-28281]:ReturnStatement[28242-28281]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28289-28293]:PrimitiveType[28289-28293]"
    }, {
      "left" : "stopTracer",
      "right" : "stopTracer",
      "info" : "SimpleName[28294-28304]:SimpleName[28294-28304]"
    }, {
      "left" : "Tracer t",
      "right" : "Tracer t",
      "info" : "SingleVariableDeclaration[28305-28313]:SingleVariableDeclaration[28305-28313]"
    }, {
      "left" : "String passName",
      "right" : "String passName",
      "info" : "SingleVariableDeclaration[28315-28330]:SingleVariableDeclaration[28315-28330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28332-28452]:Block[28332-28452]"
    }, {
      "left" : "long result = t.stop();",
      "right" : "long result = t.stop();",
      "info" : "VariableDeclarationStatement[28338-28361]:VariableDeclarationStatement[28338-28361]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[28366-28448]:IfStatement[28366-28448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28393-28448]:Block[28393-28448]"
    }, {
      "left" : "tracker.recordPassStop(passName, result);",
      "right" : "tracker.recordPassStop(passName, result);",
      "info" : "ExpressionStatement[28401-28442]:ExpressionStatement[28401-28442]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28512-28518]:Modifier[28512-28518]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[28519-28525]:SimpleType[28519-28525]"
    }, {
      "left" : "getResult",
      "right" : "getResult",
      "info" : "SimpleName[28526-28535]:SimpleName[28526-28535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28538-28883]:Block[28538-28883]"
    }, {
      "left" : "PassConfig.State state = getPassConfig().getIntermediateState();",
      "right" : "PassConfig.State state = getPassConfig().getIntermediateState();",
      "info" : "VariableDeclarationStatement[28544-28608]:VariableDeclarationStatement[28544-28608]"
    }, {
      "left" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames, state.idGeneratorMap);",
      "right" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames, state.idGeneratorMap);",
      "info" : "ReturnStatement[28613-28879]:ReturnStatement[28613-28879]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28967-28973]:Modifier[28967-28973]"
    }, {
      "left" : "JSError[]",
      "right" : "JSError[]",
      "info" : "ArrayType[28974-28983]:ArrayType[28974-28983]"
    }, {
      "left" : "getMessages",
      "right" : "getMessages",
      "info" : "SimpleName[28984-28995]:SimpleName[28984-28995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28998-29027]:Block[28998-29027]"
    }, {
      "left" : "return getErrors();",
      "right" : "return getErrors();",
      "info" : "ReturnStatement[29004-29023]:ReturnStatement[29004-29023]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29090-29096]:Modifier[29090-29096]"
    }, {
      "left" : "JSError[]",
      "right" : "JSError[]",
      "info" : "ArrayType[29097-29106]:ArrayType[29097-29106]"
    }, {
      "left" : "getErrors",
      "right" : "getErrors",
      "info" : "SimpleName[29107-29116]:SimpleName[29107-29116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29119-29161]:Block[29119-29161]"
    }, {
      "left" : "return errorManager.getErrors();",
      "right" : "return errorManager.getErrors();",
      "info" : "ReturnStatement[29125-29157]:ReturnStatement[29125-29157]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29226-29232]:Modifier[29226-29232]"
    }, {
      "left" : "JSError[]",
      "right" : "JSError[]",
      "info" : "ArrayType[29233-29242]:ArrayType[29233-29242]"
    }, {
      "left" : "getWarnings",
      "right" : "getWarnings",
      "info" : "SimpleName[29243-29254]:SimpleName[29243-29254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29257-29301]:Block[29257-29301]"
    }, {
      "left" : "return errorManager.getWarnings();",
      "right" : "return errorManager.getWarnings();",
      "info" : "ReturnStatement[29263-29297]:ReturnStatement[29263-29297]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29305-29314]:MarkerAnnotation[29305-29314]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29317-29323]:Modifier[29317-29323]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[29324-29328]:SimpleType[29324-29328]"
    }, {
      "left" : "getRoot",
      "right" : "getRoot",
      "info" : "SimpleName[29329-29336]:SimpleName[29329-29336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29339-29372]:Block[29339-29372]"
    }, {
      "left" : "return externAndJsRoot;",
      "right" : "return externAndJsRoot;",
      "info" : "ReturnStatement[29345-29368]:ReturnStatement[29345-29368]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29435-29442]:Modifier[29435-29442]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29443-29446]:PrimitiveType[29443-29446]"
    }, {
      "left" : "nextUniqueNameId",
      "right" : "nextUniqueNameId",
      "info" : "SimpleName[29447-29463]:SimpleName[29447-29463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29466-29498]:Block[29466-29498]"
    }, {
      "left" : "return uniqueNameId++;",
      "right" : "return uniqueNameId++;",
      "info" : "ReturnStatement[29472-29494]:ReturnStatement[29472-29494]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[29553-29571]:MarkerAnnotation[29553-29571]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29574-29578]:PrimitiveType[29574-29578]"
    }, {
      "left" : "resetUniqueNameId",
      "right" : "resetUniqueNameId",
      "info" : "SimpleName[29579-29596]:SimpleName[29579-29596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29599-29626]:Block[29599-29626]"
    }, {
      "left" : "uniqueNameId = 0;",
      "right" : "uniqueNameId = 0;",
      "info" : "ExpressionStatement[29605-29622]:ExpressionStatement[29605-29622]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29630-29639]:MarkerAnnotation[29630-29639]"
    }, {
      "left" : "Supplier<String>",
      "right" : "Supplier<String>",
      "info" : "ParameterizedType[29642-29658]:ParameterizedType[29642-29658]"
    }, {
      "left" : "getUniqueNameIdSupplier",
      "right" : "getUniqueNameIdSupplier",
      "info" : "SimpleName[29659-29682]:SimpleName[29659-29682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29685-29873]:Block[29685-29873]"
    }, {
      "left" : "final Compiler self = this;",
      "right" : "final Compiler self = this;",
      "info" : "VariableDeclarationStatement[29691-29718]:VariableDeclarationStatement[29691-29718]"
    }, {
      "left" : "return new Supplier<String>() {\n      @Override\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
      "right" : "return new Supplier<String>() {\n      @Override\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
      "info" : "ReturnStatement[29723-29869]:ReturnStatement[29723-29869]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29761-29770]:MarkerAnnotation[29761-29770]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29777-29783]:Modifier[29777-29783]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29784-29790]:SimpleType[29784-29790]"
    }, {
      "left" : "get",
      "right" : "get",
      "info" : "SimpleName[29791-29794]:SimpleName[29791-29794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29797-29862]:Block[29797-29862]"
    }, {
      "left" : "return String.valueOf(self.nextUniqueNameId());",
      "right" : "return String.valueOf(self.nextUniqueNameId());",
      "info" : "ReturnStatement[29807-29854]:ReturnStatement[29807-29854]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29877-29886]:MarkerAnnotation[29877-29886]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29889-29896]:PrimitiveType[29889-29896]"
    }, {
      "left" : "areNodesEqualForInlining",
      "right" : "areNodesEqualForInlining",
      "info" : "SimpleName[29897-29921]:SimpleName[29897-29921]"
    }, {
      "left" : "Node n1",
      "right" : "Node n1",
      "info" : "SingleVariableDeclaration[29922-29929]:SingleVariableDeclaration[29922-29929]"
    }, {
      "left" : "Node n2",
      "right" : "Node n2",
      "info" : "SingleVariableDeclaration[29931-29938]:SingleVariableDeclaration[29931-29938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29940-30240]:Block[29940-30240]"
    }, {
      "left" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
      "right" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
      "info" : "IfStatement[29946-30236]:IfStatement[29946-30236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30021-30187]:Block[30021-30187]"
    }, {
      "left" : "return n1.isEquivalentToTyped(n2);",
      "right" : "return n1.isEquivalentToTyped(n2);",
      "info" : "ReturnStatement[30147-30181]:ReturnStatement[30147-30181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30193-30236]:Block[30193-30236]"
    }, {
      "left" : "return n1.isEquivalentTo(n2);",
      "right" : "return n1.isEquivalentTo(n2);",
      "info" : "ReturnStatement[30201-30230]:ReturnStatement[30201-30230]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30551-30560]:MarkerAnnotation[30551-30560]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30563-30569]:Modifier[30563-30569]"
    }, {
      "left" : "CompilerInput",
      "right" : "CompilerInput",
      "info" : "SimpleType[30570-30583]:SimpleType[30570-30583]"
    }, {
      "left" : "getInput",
      "right" : "getInput",
      "info" : "SimpleName[30584-30592]:SimpleName[30584-30592]"
    }, {
      "left" : "InputId id",
      "right" : "InputId id",
      "info" : "SingleVariableDeclaration[30593-30603]:SingleVariableDeclaration[30593-30603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30605-30641]:Block[30605-30641]"
    }, {
      "left" : "return inputsById.get(id);",
      "right" : "return inputsById.get(id);",
      "info" : "ReturnStatement[30611-30637]:ReturnStatement[30611-30637]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[30744-30753]:Modifier[30744-30753]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30754-30758]:PrimitiveType[30754-30758]"
    }, {
      "left" : "removeExternInput",
      "right" : "removeExternInput",
      "info" : "SimpleName[30759-30776]:SimpleName[30759-30776]"
    }, {
      "left" : "InputId id",
      "right" : "InputId id",
      "info" : "SingleVariableDeclaration[30777-30787]:SingleVariableDeclaration[30777-30787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30789-31126]:Block[30789-31126]"
    }, {
      "left" : "CompilerInput input = getInput(id);",
      "right" : "CompilerInput input = getInput(id);",
      "info" : "VariableDeclarationStatement[30795-30830]:VariableDeclarationStatement[30795-30830]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[30835-30875]:IfStatement[30835-30875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30854-30875]:Block[30854-30875]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30862-30869]:ReturnStatement[30862-30869]"
    }, {
      "left" : "Preconditions.checkState(input.isExtern(), \"Not an extern input: %s\", input.getName());",
      "right" : "Preconditions.checkState(input.isExtern(), \"Not an extern input: %s\", input.getName());",
      "info" : "ExpressionStatement[30880-30967]:ExpressionStatement[30880-30967]"
    }, {
      "left" : "inputsById.remove(id);",
      "right" : "inputsById.remove(id);",
      "info" : "ExpressionStatement[30972-30994]:ExpressionStatement[30972-30994]"
    }, {
      "left" : "externs.remove(input);",
      "right" : "externs.remove(input);",
      "info" : "ExpressionStatement[30999-31021]:ExpressionStatement[30999-31021]"
    }, {
      "left" : "Node root = input.getAstRoot(this);",
      "right" : "Node root = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[31026-31061]:VariableDeclarationStatement[31026-31061]"
    }, {
      "left" : "if (root != null)",
      "right" : "if (root != null)",
      "info" : "IfStatement[31066-31122]:IfStatement[31066-31122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31084-31122]:Block[31084-31122]"
    }, {
      "left" : "root.detachFromParent();",
      "right" : "root.detachFromParent();",
      "info" : "ExpressionStatement[31092-31116]:ExpressionStatement[31092-31116]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31130-31139]:MarkerAnnotation[31130-31139]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31142-31148]:Modifier[31142-31148]"
    }, {
      "left" : "CompilerInput",
      "right" : "CompilerInput",
      "info" : "SimpleType[31149-31162]:SimpleType[31149-31162]"
    }, {
      "left" : "newExternInput",
      "right" : "newExternInput",
      "info" : "SimpleName[31163-31177]:SimpleName[31163-31177]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[31178-31189]:SingleVariableDeclaration[31178-31189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31191-31582]:Block[31191-31582]"
    }, {
      "left" : "SourceAst ast = new SyntheticAst(name);",
      "right" : "SourceAst ast = new SyntheticAst(name);",
      "info" : "VariableDeclarationStatement[31197-31236]:VariableDeclarationStatement[31197-31236]"
    }, {
      "left" : "if (inputsById.containsKey(ast.getInputId()))",
      "right" : "if (inputsById.containsKey(ast.getInputId()))",
      "info" : "IfStatement[31241-31373]:IfStatement[31241-31373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31287-31373]:Block[31287-31373]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
      "right" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
      "info" : "ThrowStatement[31295-31367]:ThrowStatement[31295-31367]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(ast, true);",
      "right" : "CompilerInput input = new CompilerInput(ast, true);",
      "info" : "VariableDeclarationStatement[31378-31429]:VariableDeclarationStatement[31378-31429]"
    }, {
      "left" : "putCompilerInput(input.getInputId(), input);",
      "right" : "putCompilerInput(input.getInputId(), input);",
      "info" : "ExpressionStatement[31434-31478]:ExpressionStatement[31434-31478]"
    }, {
      "left" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
      "right" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
      "info" : "ExpressionStatement[31483-31533]:ExpressionStatement[31483-31533]"
    }, {
      "left" : "externs.add(0, input);",
      "right" : "externs.add(0, input);",
      "info" : "ExpressionStatement[31538-31560]:ExpressionStatement[31538-31560]"
    }, {
      "left" : "return input;",
      "right" : "return input;",
      "info" : "ReturnStatement[31565-31578]:ReturnStatement[31565-31578]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31586-31593]:Modifier[31586-31593]"
    }, {
      "left" : "CompilerInput",
      "right" : "CompilerInput",
      "info" : "SimpleType[31594-31607]:SimpleType[31594-31607]"
    }, {
      "left" : "putCompilerInput",
      "right" : "putCompilerInput",
      "info" : "SimpleName[31608-31624]:SimpleName[31608-31624]"
    }, {
      "left" : "InputId id",
      "right" : "InputId id",
      "info" : "SingleVariableDeclaration[31625-31635]:SingleVariableDeclaration[31625-31635]"
    }, {
      "left" : "CompilerInput input",
      "right" : "CompilerInput input",
      "info" : "SingleVariableDeclaration[31637-31656]:SingleVariableDeclaration[31637-31656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31658-31730]:Block[31658-31730]"
    }, {
      "left" : "input.setCompiler(this);",
      "right" : "input.setCompiler(this);",
      "info" : "ExpressionStatement[31664-31688]:ExpressionStatement[31664-31688]"
    }, {
      "left" : "return inputsById.put(id, input);",
      "right" : "return inputsById.put(id, input);",
      "info" : "ReturnStatement[31693-31726]:ReturnStatement[31693-31726]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31813-31817]:PrimitiveType[31813-31817]"
    }, {
      "left" : "addIncrementalSourceAst",
      "right" : "addIncrementalSourceAst",
      "info" : "SimpleName[31818-31841]:SimpleName[31818-31841]"
    }, {
      "left" : "JsAst ast",
      "right" : "JsAst ast",
      "info" : "SingleVariableDeclaration[31842-31851]:SingleVariableDeclaration[31842-31851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31853-32033]:Block[31853-32033]"
    }, {
      "left" : "InputId id = ast.getInputId();",
      "right" : "InputId id = ast.getInputId();",
      "info" : "VariableDeclarationStatement[31859-31889]:VariableDeclarationStatement[31859-31889]"
    }, {
      "left" : "Preconditions.checkState(getInput(id) == null, \"Duplicate input %s\", id.getIdName());",
      "right" : "Preconditions.checkState(getInput(id) == null, \"Duplicate input %s\", id.getIdName());",
      "info" : "ExpressionStatement[31894-31979]:ExpressionStatement[31894-31979]"
    }, {
      "left" : "putCompilerInput(id, new CompilerInput(ast));",
      "right" : "putCompilerInput(id, new CompilerInput(ast));",
      "info" : "ExpressionStatement[31984-32029]:ExpressionStatement[31984-32029]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32308-32315]:PrimitiveType[32308-32315]"
    }, {
      "left" : "replaceIncrementalSourceAst",
      "right" : "replaceIncrementalSourceAst",
      "info" : "SimpleName[32316-32343]:SimpleName[32316-32343]"
    }, {
      "left" : "JsAst ast",
      "right" : "JsAst ast",
      "info" : "SingleVariableDeclaration[32344-32353]:SingleVariableDeclaration[32344-32353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32355-33397]:Block[32355-33397]"
    }, {
      "left" : "CompilerInput oldInput = getInput(ast.getInputId());",
      "right" : "CompilerInput oldInput = getInput(ast.getInputId());",
      "info" : "VariableDeclarationStatement[32361-32413]:VariableDeclarationStatement[32361-32413]"
    }, {
      "left" : "Preconditions.checkNotNull(oldInput, \"No input to replace: %s\", ast.getInputId().getIdName());",
      "right" : "Preconditions.checkNotNull(oldInput, \"No input to replace: %s\", ast.getInputId().getIdName());",
      "info" : "ExpressionStatement[32418-32512]:ExpressionStatement[32418-32512]"
    }, {
      "left" : "Node newRoot = ast.getAstRoot(this);",
      "right" : "Node newRoot = ast.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[32517-32553]:VariableDeclarationStatement[32517-32553]"
    }, {
      "left" : "if (newRoot == null)",
      "right" : "if (newRoot == null)",
      "info" : "IfStatement[32558-32606]:IfStatement[32558-32606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32579-32606]:Block[32579-32606]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32587-32600]:ReturnStatement[32587-32600]"
    }, {
      "left" : "Node oldRoot = oldInput.getAstRoot(this);",
      "right" : "Node oldRoot = oldInput.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[32612-32653]:VariableDeclarationStatement[32612-32653]"
    }, {
      "left" : "if (oldRoot != null)",
      "right" : "if (oldRoot != null)",
      "info" : "IfStatement[32658-32813]:IfStatement[32658-32813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32679-32744]:Block[32679-32744]"
    }, {
      "left" : "oldRoot.getParent().replaceChild(oldRoot, newRoot);",
      "right" : "oldRoot.getParent().replaceChild(oldRoot, newRoot);",
      "info" : "ExpressionStatement[32687-32738]:ExpressionStatement[32687-32738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32750-32813]:Block[32750-32813]"
    }, {
      "left" : "getRoot().getLastChild().addChildToBack(newRoot);",
      "right" : "getRoot().getLastChild().addChildToBack(newRoot);",
      "info" : "ExpressionStatement[32758-32807]:ExpressionStatement[32758-32807]"
    }, {
      "left" : "CompilerInput newInput = new CompilerInput(ast);",
      "right" : "CompilerInput newInput = new CompilerInput(ast);",
      "info" : "VariableDeclarationStatement[32819-32867]:VariableDeclarationStatement[32819-32867]"
    }, {
      "left" : "putCompilerInput(ast.getInputId(), newInput);",
      "right" : "putCompilerInput(ast.getInputId(), newInput);",
      "info" : "ExpressionStatement[32872-32917]:ExpressionStatement[32872-32917]"
    }, {
      "left" : "JSModule module = oldInput.getModule();",
      "right" : "JSModule module = oldInput.getModule();",
      "info" : "VariableDeclarationStatement[32923-32962]:VariableDeclarationStatement[32923-32962]"
    }, {
      "left" : "if (module != null)",
      "right" : "if (module != null)",
      "info" : "IfStatement[32967-33068]:IfStatement[32967-33068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32987-33068]:Block[32987-33068]"
    }, {
      "left" : "module.addAfter(newInput, oldInput);",
      "right" : "module.addAfter(newInput, oldInput);",
      "info" : "ExpressionStatement[32995-33031]:ExpressionStatement[32995-33031]"
    }, {
      "left" : "module.remove(oldInput);",
      "right" : "module.remove(oldInput);",
      "info" : "ExpressionStatement[33038-33062]:ExpressionStatement[33038-33062]"
    }, {
      "left" : "Preconditions.checkState(\n        newInput.getInputId().equals(oldInput.getInputId()));",
      "right" : "Preconditions.checkState(\n        newInput.getInputId().equals(oldInput.getInputId()));",
      "info" : "ExpressionStatement[33118-33205]:ExpressionStatement[33118-33205]"
    }, {
      "left" : "InputId inputIdOnAst = newInput.getAstRoot(this).getInputId();",
      "right" : "InputId inputIdOnAst = newInput.getAstRoot(this).getInputId();",
      "info" : "VariableDeclarationStatement[33210-33272]:VariableDeclarationStatement[33210-33272]"
    }, {
      "left" : "Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));",
      "right" : "Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));",
      "info" : "ExpressionStatement[33277-33346]:ExpressionStatement[33277-33346]"
    }, {
      "left" : "inputs.remove(oldInput);",
      "right" : "inputs.remove(oldInput);",
      "info" : "ExpressionStatement[33352-33376]:ExpressionStatement[33352-33376]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33381-33393]:ReturnStatement[33381-33393]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33794-33801]:PrimitiveType[33794-33801]"
    }, {
      "left" : "addNewSourceAst",
      "right" : "addNewSourceAst",
      "info" : "SimpleName[33802-33817]:SimpleName[33802-33817]"
    }, {
      "left" : "JsAst ast",
      "right" : "JsAst ast",
      "info" : "SingleVariableDeclaration[33818-33827]:SingleVariableDeclaration[33818-33827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33829-34495]:Block[33829-34495]"
    }, {
      "left" : "CompilerInput oldInput = getInput(ast.getInputId());",
      "right" : "CompilerInput oldInput = getInput(ast.getInputId());",
      "info" : "VariableDeclarationStatement[33835-33887]:VariableDeclarationStatement[33835-33887]"
    }, {
      "left" : "if (oldInput != null)",
      "right" : "if (oldInput != null)",
      "info" : "IfStatement[33892-34028]:IfStatement[33892-34028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33914-34028]:Block[33914-34028]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"Input already exists: \" + ast.getInputId().getIdName());",
      "right" : "throw new IllegalStateException(\n          \"Input already exists: \" + ast.getInputId().getIdName());",
      "info" : "ThrowStatement[33922-34022]:ThrowStatement[33922-34022]"
    }, {
      "left" : "Node newRoot = ast.getAstRoot(this);",
      "right" : "Node newRoot = ast.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[34033-34069]:VariableDeclarationStatement[34033-34069]"
    }, {
      "left" : "if (newRoot == null)",
      "right" : "if (newRoot == null)",
      "info" : "IfStatement[34074-34122]:IfStatement[34074-34122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34095-34122]:Block[34095-34122]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34103-34116]:ReturnStatement[34103-34116]"
    }, {
      "left" : "getRoot().getLastChild().addChildToBack(newRoot);",
      "right" : "getRoot().getLastChild().addChildToBack(newRoot);",
      "info" : "ExpressionStatement[34128-34177]:ExpressionStatement[34128-34177]"
    }, {
      "left" : "CompilerInput newInput = new CompilerInput(ast);",
      "right" : "CompilerInput newInput = new CompilerInput(ast);",
      "info" : "VariableDeclarationStatement[34183-34231]:VariableDeclarationStatement[34183-34231]"
    }, {
      "left" : "if (moduleGraph == null && !modules.isEmpty())",
      "right" : "if (moduleGraph == null && !modules.isEmpty())",
      "info" : "IfStatement[34306-34422]:IfStatement[34306-34422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34353-34422]:Block[34353-34422]"
    }, {
      "left" : "modules.get(0).add(newInput);",
      "right" : "modules.get(0).add(newInput);",
      "info" : "ExpressionStatement[34387-34416]:ExpressionStatement[34387-34416]"
    }, {
      "left" : "putCompilerInput(ast.getInputId(), newInput);",
      "right" : "putCompilerInput(ast.getInputId(), newInput);",
      "info" : "ExpressionStatement[34428-34473]:ExpressionStatement[34428-34473]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[34479-34491]:ReturnStatement[34479-34491]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34499-34508]:MarkerAnnotation[34499-34508]"
    }, {
      "left" : "JSModuleGraph",
      "right" : "JSModuleGraph",
      "info" : "SimpleType[34511-34524]:SimpleType[34511-34524]"
    }, {
      "left" : "getModuleGraph",
      "right" : "getModuleGraph",
      "info" : "SimpleName[34525-34539]:SimpleName[34525-34539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34542-34571]:Block[34542-34571]"
    }, {
      "left" : "return moduleGraph;",
      "right" : "return moduleGraph;",
      "info" : "ReturnStatement[34548-34567]:ReturnStatement[34548-34567]"
    }, {
      "left" : "JSModuleGraph",
      "right" : "JSModuleGraph",
      "info" : "SimpleType[34716-34729]:SimpleType[34716-34729]"
    }, {
      "left" : "getDegenerateModuleGraph",
      "right" : "getDegenerateModuleGraph",
      "info" : "SimpleName[34730-34754]:SimpleName[34730-34754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34757-34837]:Block[34757-34837]"
    }, {
      "left" : "return moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph;",
      "right" : "return moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph;",
      "info" : "ReturnStatement[34763-34833]:ReturnStatement[34763-34833]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34841-34850]:MarkerAnnotation[34841-34850]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34853-34859]:Modifier[34853-34859]"
    }, {
      "left" : "JSTypeRegistry",
      "right" : "JSTypeRegistry",
      "info" : "SimpleType[34860-34874]:SimpleType[34860-34874]"
    }, {
      "left" : "getTypeRegistry",
      "right" : "getTypeRegistry",
      "info" : "SimpleName[34875-34890]:SimpleName[34875-34890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34893-35040]:Block[34893-35040]"
    }, {
      "left" : "if (typeRegistry == null)",
      "right" : "if (typeRegistry == null)",
      "info" : "IfStatement[34899-35011]:IfStatement[34899-35011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34925-35011]:Block[34925-35011]"
    }, {
      "left" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
      "right" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
      "info" : "ExpressionStatement[34933-35005]:ExpressionStatement[34933-35005]"
    }, {
      "left" : "return typeRegistry;",
      "right" : "return typeRegistry;",
      "info" : "ReturnStatement[35016-35036]:ReturnStatement[35016-35036]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35044-35053]:MarkerAnnotation[35044-35053]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35056-35062]:Modifier[35056-35062]"
    }, {
      "left" : "MemoizedScopeCreator",
      "right" : "MemoizedScopeCreator",
      "info" : "SimpleType[35063-35083]:SimpleType[35063-35083]"
    }, {
      "left" : "getTypedScopeCreator",
      "right" : "getTypedScopeCreator",
      "info" : "SimpleName[35084-35104]:SimpleName[35084-35104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35107-35163]:Block[35107-35163]"
    }, {
      "left" : "return getPassConfig().getTypedScopeCreator();",
      "right" : "return getPassConfig().getTypedScopeCreator();",
      "info" : "ReturnStatement[35113-35159]:ReturnStatement[35113-35159]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[35167-35197]:SingleMemberAnnotation[35167-35197]"
    }, {
      "left" : "DefaultPassConfig",
      "right" : "DefaultPassConfig",
      "info" : "SimpleType[35200-35217]:SimpleType[35200-35217]"
    }, {
      "left" : "ensureDefaultPassConfig",
      "right" : "ensureDefaultPassConfig",
      "info" : "SimpleName[35218-35241]:SimpleName[35218-35241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35244-35489]:Block[35244-35489]"
    }, {
      "left" : "PassConfig passes = getPassConfig().getBasePassConfig();",
      "right" : "PassConfig passes = getPassConfig().getBasePassConfig();",
      "info" : "VariableDeclarationStatement[35250-35306]:VariableDeclarationStatement[35250-35306]"
    }, {
      "left" : "Preconditions.checkState(passes instanceof DefaultPassConfig,\n        \"PassConfigs must eventually delegate to the DefaultPassConfig\");",
      "right" : "Preconditions.checkState(passes instanceof DefaultPassConfig,\n        \"PassConfigs must eventually delegate to the DefaultPassConfig\");",
      "info" : "ExpressionStatement[35311-35446]:ExpressionStatement[35311-35446]"
    }, {
      "left" : "return (DefaultPassConfig) passes;",
      "right" : "return (DefaultPassConfig) passes;",
      "info" : "ReturnStatement[35451-35485]:ReturnStatement[35451-35485]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35493-35499]:Modifier[35493-35499]"
    }, {
      "left" : "SymbolTable",
      "right" : "SymbolTable",
      "info" : "SimpleType[35500-35511]:SimpleType[35500-35511]"
    }, {
      "left" : "buildKnownSymbolTable",
      "right" : "buildKnownSymbolTable",
      "info" : "SimpleName[35512-35533]:SimpleName[35512-35533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35536-36882]:Block[35536-36882]"
    }, {
      "left" : "SymbolTable symbolTable = new SymbolTable(getTypeRegistry());",
      "right" : "SymbolTable symbolTable = new SymbolTable(getTypeRegistry());",
      "info" : "VariableDeclarationStatement[35542-35603]:VariableDeclarationStatement[35542-35603]"
    }, {
      "left" : "MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();",
      "right" : "MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();",
      "info" : "VariableDeclarationStatement[35609-35673]:VariableDeclarationStatement[35609-35673]"
    }, {
      "left" : "if (typedScopeCreator != null)",
      "right" : "if (typedScopeCreator != null)",
      "info" : "IfStatement[35678-35910]:IfStatement[35678-35910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35709-35840]:Block[35709-35840]"
    }, {
      "left" : "symbolTable.addScopes(typedScopeCreator.getAllMemoizedScopes());",
      "right" : "symbolTable.addScopes(typedScopeCreator.getAllMemoizedScopes());",
      "info" : "ExpressionStatement[35717-35781]:ExpressionStatement[35717-35781]"
    }, {
      "left" : "symbolTable.addSymbolsFrom(typedScopeCreator);",
      "right" : "symbolTable.addSymbolsFrom(typedScopeCreator);",
      "info" : "ExpressionStatement[35788-35834]:ExpressionStatement[35788-35834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35846-35910]:Block[35846-35910]"
    }, {
      "left" : "symbolTable.findScopes(this, externsRoot, jsRoot);",
      "right" : "symbolTable.findScopes(this, externsRoot, jsRoot);",
      "info" : "ExpressionStatement[35854-35904]:ExpressionStatement[35854-35904]"
    }, {
      "left" : "GlobalNamespace globalNamespace =\n        ensureDefaultPassConfig().getGlobalNamespace();",
      "right" : "GlobalNamespace globalNamespace =\n        ensureDefaultPassConfig().getGlobalNamespace();",
      "info" : "VariableDeclarationStatement[35916-36005]:VariableDeclarationStatement[35916-36005]"
    }, {
      "left" : "if (globalNamespace != null)",
      "right" : "if (globalNamespace != null)",
      "info" : "IfStatement[36010-36097]:IfStatement[36010-36097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36039-36097]:Block[36039-36097]"
    }, {
      "left" : "symbolTable.addSymbolsFrom(globalNamespace);",
      "right" : "symbolTable.addSymbolsFrom(globalNamespace);",
      "info" : "ExpressionStatement[36047-36091]:ExpressionStatement[36047-36091]"
    }, {
      "left" : "ReferenceCollectingCallback refCollector =\n        new ReferenceCollectingCallback(\n            this, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);",
      "right" : "ReferenceCollectingCallback refCollector =\n        new ReferenceCollectingCallback(\n            this, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);",
      "info" : "VariableDeclarationStatement[36103-36254]:VariableDeclarationStatement[36103-36254]"
    }, {
      "left" : "NodeTraversal.traverse(this, getRoot(), refCollector);",
      "right" : "NodeTraversal.traverse(this, getRoot(), refCollector);",
      "info" : "ExpressionStatement[36259-36313]:ExpressionStatement[36259-36313]"
    }, {
      "left" : "symbolTable.addSymbolsFrom(refCollector);",
      "right" : "symbolTable.addSymbolsFrom(refCollector);",
      "info" : "ExpressionStatement[36318-36359]:ExpressionStatement[36318-36359]"
    }, {
      "left" : "PreprocessorSymbolTable preprocessorSymbolTable =\n        ensureDefaultPassConfig().getPreprocessorSymbolTable();",
      "right" : "PreprocessorSymbolTable preprocessorSymbolTable =\n        ensureDefaultPassConfig().getPreprocessorSymbolTable();",
      "info" : "VariableDeclarationStatement[36365-36478]:VariableDeclarationStatement[36365-36478]"
    }, {
      "left" : "if (preprocessorSymbolTable != null)",
      "right" : "if (preprocessorSymbolTable != null)",
      "info" : "IfStatement[36483-36586]:IfStatement[36483-36586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36520-36586]:Block[36520-36586]"
    }, {
      "left" : "symbolTable.addSymbolsFrom(preprocessorSymbolTable);",
      "right" : "symbolTable.addSymbolsFrom(preprocessorSymbolTable);",
      "info" : "ExpressionStatement[36528-36580]:ExpressionStatement[36528-36580]"
    }, {
      "left" : "symbolTable.fillNamespaceReferences();",
      "right" : "symbolTable.fillNamespaceReferences();",
      "info" : "ExpressionStatement[36592-36630]:ExpressionStatement[36592-36630]"
    }, {
      "left" : "symbolTable.fillPropertyScopes();",
      "right" : "symbolTable.fillPropertyScopes();",
      "info" : "ExpressionStatement[36635-36668]:ExpressionStatement[36635-36668]"
    }, {
      "left" : "symbolTable.fillThisReferences(this, externsRoot, jsRoot);",
      "right" : "symbolTable.fillThisReferences(this, externsRoot, jsRoot);",
      "info" : "ExpressionStatement[36673-36731]:ExpressionStatement[36673-36731]"
    }, {
      "left" : "symbolTable.fillPropertySymbols(this, externsRoot, jsRoot);",
      "right" : "symbolTable.fillPropertySymbols(this, externsRoot, jsRoot);",
      "info" : "ExpressionStatement[36736-36795]:ExpressionStatement[36736-36795]"
    }, {
      "left" : "symbolTable.fillJSDocInfo(this, externsRoot, jsRoot);",
      "right" : "symbolTable.fillJSDocInfo(this, externsRoot, jsRoot);",
      "info" : "ExpressionStatement[36800-36853]:ExpressionStatement[36800-36853]"
    }, {
      "left" : "return symbolTable;",
      "right" : "return symbolTable;",
      "info" : "ReturnStatement[36859-36878]:ReturnStatement[36859-36878]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36886-36895]:MarkerAnnotation[36886-36895]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36898-36904]:Modifier[36898-36904]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[36905-36910]:SimpleType[36905-36910]"
    }, {
      "left" : "getTopScope",
      "right" : "getTopScope",
      "info" : "SimpleName[36911-36922]:SimpleName[36911-36922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36925-36972]:Block[36925-36972]"
    }, {
      "left" : "return getPassConfig().getTopScope();",
      "right" : "return getPassConfig().getTopScope();",
      "info" : "ReturnStatement[36931-36968]:ReturnStatement[36931-36968]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36976-36985]:MarkerAnnotation[36976-36985]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36988-36994]:Modifier[36988-36994]"
    }, {
      "left" : "ReverseAbstractInterpreter",
      "right" : "ReverseAbstractInterpreter",
      "info" : "SimpleType[36995-37021]:SimpleType[36995-37021]"
    }, {
      "left" : "getReverseAbstractInterpreter",
      "right" : "getReverseAbstractInterpreter",
      "info" : "SimpleName[37022-37051]:SimpleName[37022-37051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37054-37541]:Block[37054-37541]"
    }, {
      "left" : "if (abstractInterpreter == null)",
      "right" : "if (abstractInterpreter == null)",
      "info" : "IfStatement[37060-37505]:IfStatement[37060-37505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37093-37505]:Block[37093-37505]"
    }, {
      "left" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
      "right" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
      "info" : "VariableDeclarationStatement[37101-37257]:VariableDeclarationStatement[37101-37257]"
    }, {
      "left" : "if (options.closurePass)",
      "right" : "if (options.closurePass)",
      "info" : "IfStatement[37264-37458]:IfStatement[37264-37458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37289-37458]:Block[37289-37458]"
    }, {
      "left" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
      "right" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
      "info" : "ExpressionStatement[37299-37450]:ExpressionStatement[37299-37450]"
    }, {
      "left" : "abstractInterpreter = interpreter;",
      "right" : "abstractInterpreter = interpreter;",
      "info" : "ExpressionStatement[37465-37499]:ExpressionStatement[37465-37499]"
    }, {
      "left" : "return abstractInterpreter;",
      "right" : "return abstractInterpreter;",
      "info" : "ReturnStatement[37510-37537]:ReturnStatement[37510-37537]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37545-37554]:MarkerAnnotation[37545-37554]"
    }, {
      "left" : "TypeValidator",
      "right" : "TypeValidator",
      "info" : "SimpleType[37557-37570]:SimpleType[37557-37570]"
    }, {
      "left" : "getTypeValidator",
      "right" : "getTypeValidator",
      "info" : "SimpleName[37571-37587]:SimpleName[37571-37587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37590-37707]:Block[37590-37707]"
    }, {
      "left" : "if (typeValidator == null)",
      "right" : "if (typeValidator == null)",
      "info" : "IfStatement[37596-37677]:IfStatement[37596-37677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37623-37677]:Block[37623-37677]"
    }, {
      "left" : "typeValidator = new TypeValidator(this);",
      "right" : "typeValidator = new TypeValidator(this);",
      "info" : "ExpressionStatement[37631-37671]:ExpressionStatement[37631-37671]"
    }, {
      "left" : "return typeValidator;",
      "right" : "return typeValidator;",
      "info" : "ReturnStatement[37682-37703]:ReturnStatement[37682-37703]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[38039-38043]:SimpleType[38039-38043]"
    }, {
      "left" : "parseInputs",
      "right" : "parseInputs",
      "info" : "SimpleName[38044-38055]:SimpleName[38044-38055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38058-41601]:Block[38058-41578]"
    }, {
      "left" : "boolean devMode = options.devMode != DevMode.OFF;",
      "right" : "boolean devMode = options.devMode != DevMode.OFF;",
      "info" : "VariableDeclarationStatement[38064-38113]:VariableDeclarationStatement[38064-38113]"
    }, {
      "left" : "if (externsRoot != null)",
      "right" : "if (externsRoot != null)",
      "info" : "IfStatement[38232-38300]:IfStatement[38232-38300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38257-38300]:Block[38257-38300]"
    }, {
      "left" : "externsRoot.detachChildren();",
      "right" : "externsRoot.detachChildren();",
      "info" : "ExpressionStatement[38265-38294]:ExpressionStatement[38265-38294]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[38305-38363]:IfStatement[38305-38363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38325-38363]:Block[38325-38363]"
    }, {
      "left" : "jsRoot.detachChildren();",
      "right" : "jsRoot.detachChildren();",
      "info" : "ExpressionStatement[38333-38357]:ExpressionStatement[38333-38357]"
    }, {
      "left" : "jsRoot = IR.block();",
      "right" : "jsRoot = IR.block();",
      "info" : "ExpressionStatement[38399-38419]:ExpressionStatement[38399-38419]"
    }, {
      "left" : "jsRoot.setIsSyntheticBlock(true);",
      "right" : "jsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[38424-38457]:ExpressionStatement[38424-38457]"
    }, {
      "left" : "externsRoot = IR.block();",
      "right" : "externsRoot = IR.block();",
      "info" : "ExpressionStatement[38463-38488]:ExpressionStatement[38463-38488]"
    }, {
      "left" : "externsRoot.setIsSyntheticBlock(true);",
      "right" : "externsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[38493-38531]:ExpressionStatement[38493-38531]"
    }, {
      "left" : "externAndJsRoot = IR.block(externsRoot, jsRoot);",
      "right" : "externAndJsRoot = IR.block(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[38537-38585]:ExpressionStatement[38537-38585]"
    }, {
      "left" : "externAndJsRoot.setIsSyntheticBlock(true);",
      "right" : "externAndJsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[38590-38632]:ExpressionStatement[38590-38632]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[38638-38792]:IfStatement[38638-38792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38665-38792]:Block[38665-38792]"
    }, {
      "left" : "tracker = new PerformanceTracker(jsRoot, options.tracer);",
      "right" : "tracker = new PerformanceTracker(jsRoot, options.tracer);",
      "info" : "ExpressionStatement[38673-38730]:ExpressionStatement[38673-38730]"
    }, {
      "left" : "addChangeHandler(tracker.getCodeChangeHandler());",
      "right" : "addChangeHandler(tracker.getCodeChangeHandler());",
      "info" : "ExpressionStatement[38737-38786]:ExpressionStatement[38737-38786]"
    }, {
      "left" : "Tracer tracer = newTracer(\"parseInputs\");",
      "right" : "Tracer tracer = newTracer(\"parseInputs\");",
      "info" : "VariableDeclarationStatement[38798-38839]:VariableDeclarationStatement[38798-38839]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38845-41597]:TryStatement[38845-41574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38849-41540]:Block[38849-41517]"
    }, {
      "left" : "for (CompilerInput input : externs)",
      "right" : "for (CompilerInput input : externs)",
      "info" : "EnhancedForStatement[38889-39074]:EnhancedForStatement[38889-39074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38925-39074]:Block[38925-39074]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[38935-38967]:VariableDeclarationStatement[38935-38967]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[38976-39027]:IfStatement[38976-39027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38993-39027]:Block[38993-39027]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39005-39017]:ReturnStatement[39005-39017]"
    }, {
      "left" : "externsRoot.addChildToBack(n);",
      "right" : "externsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[39036-39066]:ExpressionStatement[39036-39066]"
    }, {
      "left" : "if (options.transformAMDToCJSModules || options.processCommonJSModules)",
      "right" : "if (options.transformAMDToCJSModules || options.processCommonJSModules)",
      "info" : "IfStatement[39133-39254]:IfStatement[39133-39254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39205-39254]:Block[39205-39254]"
    }, {
      "left" : "processAMDAndCommonJSModules();",
      "right" : "processAMDAndCommonJSModules();",
      "info" : "ExpressionStatement[39215-39246]:ExpressionStatement[39215-39246]"
    }, {
      "left" : "hoistExterns(externsRoot);",
      "right" : "hoistExterns(externsRoot);",
      "info" : "ExpressionStatement[39262-39288]:ExpressionStatement[39262-39288]"
    }, {
      "left" : "boolean staleInputs = false;",
      "right" : "boolean staleInputs = false;",
      "info" : "VariableDeclarationStatement[39349-39377]:VariableDeclarationStatement[39349-39377]"
    }, {
      "left" : "if (options.dependencyOptions.needsManagement() && options.closurePass)",
      "right" : "if (options.dependencyOptions.needsManagement())",
      "info" : "IfStatement[39384-40550]:IfStatement[39384-40527]"
    }, {
      "left" : "options.dependencyOptions.needsManagement()",
      "right" : "options.dependencyOptions.needsManagement()",
      "info" : "MethodInvocation[39388-39431]:MethodInvocation[39388-39431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39456-40550]:Block[39433-40527]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[39466-39776]:EnhancedForStatement[39443-39753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39501-39776]:Block[39478-39753]"
    }, {
      "left" : "for (String provide : input.getProvides())",
      "right" : "for (String provide : input.getProvides())",
      "info" : "EnhancedForStatement[39651-39766]:EnhancedForStatement[39628-39743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39694-39766]:Block[39671-39743]"
    }, {
      "left" : "getTypeRegistry().forwardDeclareType(provide);",
      "right" : "getTypeRegistry().forwardDeclareType(provide);",
      "info" : "ExpressionStatement[39708-39754]:ExpressionStatement[39685-39731]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[39786-40542]:TryStatement[39763-40519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39790-39999]:Block[39767-39976]"
    }, {
      "left" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(options.dependencyOptions, inputs);",
      "right" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(options.dependencyOptions, inputs);",
      "info" : "ExpressionStatement[39802-39959]:ExpressionStatement[39779-39936]"
    }, {
      "left" : "staleInputs = true;",
      "right" : "staleInputs = true;",
      "info" : "ExpressionStatement[39970-39989]:ExpressionStatement[39947-39966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40038-40280]:Block[40015-40257]"
    }, {
      "left" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
      "right" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
      "info" : "ExpressionStatement[40050-40138]:ExpressionStatement[40027-40115]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[40215-40270]:IfStatement[40192-40247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40232-40270]:Block[40209-40247]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40246-40258]:ReturnStatement[40223-40235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40315-40542]:Block[40292-40519]"
    }, {
      "left" : "report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));",
      "right" : "report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));",
      "info" : "ExpressionStatement[40327-40400]:ExpressionStatement[40304-40377]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[40477-40532]:IfStatement[40454-40509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40494-40532]:Block[40471-40509]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40508-40520]:ReturnStatement[40485-40497]"
    }, {
      "left" : "hoistNoCompileFiles();",
      "right" : "hoistNoCompileFiles();",
      "info" : "ExpressionStatement[40558-40580]:ExpressionStatement[40535-40557]"
    }, {
      "left" : "if (staleInputs)",
      "right" : "if (staleInputs)",
      "info" : "IfStatement[40588-40643]:IfStatement[40565-40620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40605-40643]:Block[40582-40620]"
    }, {
      "left" : "repartitionInputs();",
      "right" : "repartitionInputs();",
      "info" : "ExpressionStatement[40615-40635]:ExpressionStatement[40592-40612]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[40675-41449]:EnhancedForStatement[40652-41426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40710-41449]:Block[40687-41426]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[40720-40752]:VariableDeclarationStatement[40697-40729]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[40761-40807]:IfStatement[40738-40784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40776-40807]:Block[40753-40784]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[40788-40797]:ContinueStatement[40765-40774]"
    }, {
      "left" : "if (devMode)",
      "right" : "if (devMode)",
      "info" : "IfStatement[40817-40935]:IfStatement[40794-40912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40830-40935]:Block[40807-40912]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[40842-40859]:ExpressionStatement[40819-40836]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[40870-40925]:IfStatement[40847-40902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40887-40925]:Block[40864-40902]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40901-40913]:ReturnStatement[40878-40890]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
      "right" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
      "info" : "IfStatement[40945-41406]:IfStatement[40922-41383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41041-41406]:Block[41018-41383]"
    }, {
      "left" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
      "right" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
      "info" : "VariableDeclarationStatement[41202-41348]:VariableDeclarationStatement[41179-41325]"
    }, {
      "left" : "NodeTraversal.traverse(this, n, sia);",
      "right" : "NodeTraversal.traverse(this, n, sia);",
      "info" : "ExpressionStatement[41359-41396]:ExpressionStatement[41336-41373]"
    }, {
      "left" : "jsRoot.addChildToBack(n);",
      "right" : "jsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[41416-41441]:ExpressionStatement[41393-41418]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[41457-41504]:IfStatement[41434-41481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41474-41504]:Block[41451-41481]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[41484-41496]:ReturnStatement[41461-41473]"
    }, {
      "left" : "return externAndJsRoot;",
      "right" : "return externAndJsRoot;",
      "info" : "ReturnStatement[41511-41534]:ReturnStatement[41488-41511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41549-41597]:Block[41526-41574]"
    }, {
      "left" : "stopTracer(tracer, \"parseInputs\");",
      "right" : "stopTracer(tracer, \"parseInputs\");",
      "info" : "ExpressionStatement[41557-41591]:ExpressionStatement[41534-41568]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41688-41695]:Modifier[41665-41672]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41696-41700]:PrimitiveType[41673-41677]"
    }, {
      "left" : "hoistExterns",
      "right" : "hoistExterns",
      "info" : "SimpleName[41701-41713]:SimpleName[41678-41690]"
    }, {
      "left" : "Node externsRoot",
      "right" : "Node externsRoot",
      "info" : "SingleVariableDeclaration[41714-41730]:SingleVariableDeclaration[41691-41707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41732-42809]:Block[41709-42786]"
    }, {
      "left" : "boolean staleInputs = false;",
      "right" : "boolean staleInputs = false;",
      "info" : "VariableDeclarationStatement[41738-41766]:VariableDeclarationStatement[41715-41743]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[41771-42748]:EnhancedForStatement[41748-42725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41806-42748]:Block[41783-42725]"
    }, {
      "left" : "if (options.dependencyOptions.needsManagement() &&\n          options.closurePass)",
      "right" : "if (options.dependencyOptions.needsManagement() &&\n          options.closurePass)",
      "info" : "IfStatement[41814-42153]:IfStatement[41791-42130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41896-42153]:Block[41873-42130]"
    }, {
      "left" : "if (!input.getProvides().isEmpty() || !input.getRequires().isEmpty())",
      "right" : "if (!input.getProvides().isEmpty() || !input.getRequires().isEmpty())",
      "info" : "IfStatement[42044-42145]:IfStatement[42021-42122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42114-42145]:Block[42091-42122]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[42126-42135]:ContinueStatement[42103-42112]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[42161-42193]:VariableDeclarationStatement[42138-42170]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[42255-42297]:IfStatement[42232-42274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42270-42297]:Block[42247-42274]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[42280-42289]:ContinueStatement[42257-42266]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[42305-42339]:VariableDeclarationStatement[42282-42316]"
    }, {
      "left" : "if (info != null && info.isExterns())",
      "right" : "if (info != null && info.isExterns())",
      "info" : "IfStatement[42346-42742]:IfStatement[42323-42719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42384-42742]:Block[42361-42719]"
    }, {
      "left" : "externsRoot.addChildToBack(n);",
      "right" : "externsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[42572-42602]:ExpressionStatement[42549-42579]"
    }, {
      "left" : "input.setIsExtern(true);",
      "right" : "input.setIsExtern(true);",
      "info" : "ExpressionStatement[42611-42635]:ExpressionStatement[42588-42612]"
    }, {
      "left" : "input.getModule().remove(input);",
      "right" : "input.getModule().remove(input);",
      "info" : "ExpressionStatement[42645-42677]:ExpressionStatement[42622-42654]"
    }, {
      "left" : "externs.add(input);",
      "right" : "externs.add(input);",
      "info" : "ExpressionStatement[42687-42706]:ExpressionStatement[42664-42683]"
    }, {
      "left" : "staleInputs = true;",
      "right" : "staleInputs = true;",
      "info" : "ExpressionStatement[42715-42734]:ExpressionStatement[42692-42711]"
    }, {
      "left" : "if (staleInputs)",
      "right" : "if (staleInputs)",
      "info" : "IfStatement[42754-42805]:IfStatement[42731-42782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42771-42805]:Block[42748-42782]"
    }, {
      "left" : "repartitionInputs();",
      "right" : "repartitionInputs();",
      "info" : "ExpressionStatement[42779-42799]:ExpressionStatement[42756-42776]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42895-42902]:Modifier[42872-42879]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42903-42907]:PrimitiveType[42880-42884]"
    }, {
      "left" : "hoistNoCompileFiles",
      "right" : "hoistNoCompileFiles",
      "info" : "SimpleName[42908-42927]:SimpleName[42885-42904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42930-43382]:Block[42907-43359]"
    }, {
      "left" : "boolean staleInputs = false;",
      "right" : "boolean staleInputs = false;",
      "info" : "VariableDeclarationStatement[42936-42964]:VariableDeclarationStatement[42913-42941]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[42969-43321]:EnhancedForStatement[42946-43298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43004-43321]:Block[42981-43298]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[43012-43044]:VariableDeclarationStatement[42989-43021]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[43106-43148]:IfStatement[43083-43125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43121-43148]:Block[43098-43125]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[43131-43140]:ContinueStatement[43108-43117]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[43156-43190]:VariableDeclarationStatement[43133-43167]"
    }, {
      "left" : "if (info != null && info.isNoCompile())",
      "right" : "if (info != null && info.isNoCompile())",
      "info" : "IfStatement[43197-43315]:IfStatement[43174-43292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43237-43315]:Block[43214-43292]"
    }, {
      "left" : "input.getModule().remove(input);",
      "right" : "input.getModule().remove(input);",
      "info" : "ExpressionStatement[43247-43279]:ExpressionStatement[43224-43256]"
    }, {
      "left" : "staleInputs = true;",
      "right" : "staleInputs = true;",
      "info" : "ExpressionStatement[43288-43307]:ExpressionStatement[43265-43284]"
    }, {
      "left" : "if (staleInputs)",
      "right" : "if (staleInputs)",
      "info" : "IfStatement[43327-43378]:IfStatement[43304-43355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43344-43378]:Block[43321-43355]"
    }, {
      "left" : "repartitionInputs();",
      "right" : "repartitionInputs();",
      "info" : "ExpressionStatement[43352-43372]:ExpressionStatement[43329-43349]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43386-43393]:Modifier[43363-43370]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43394-43398]:PrimitiveType[43371-43375]"
    }, {
      "left" : "repartitionInputs",
      "right" : "repartitionInputs",
      "info" : "SimpleName[43399-43416]:SimpleName[43376-43393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43419-43487]:Block[43396-43464]"
    }, {
      "left" : "fillEmptyModules(modules);",
      "right" : "fillEmptyModules(modules);",
      "info" : "ExpressionStatement[43425-43451]:ExpressionStatement[43402-43428]"
    }, {
      "left" : "rebuildInputsFromModules();",
      "right" : "rebuildInputsFromModules();",
      "info" : "ExpressionStatement[43456-43483]:ExpressionStatement[43433-43460]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43663-43667]:PrimitiveType[43640-43644]"
    }, {
      "left" : "processAMDAndCommonJSModules",
      "right" : "processAMDAndCommonJSModules",
      "info" : "SimpleName[43668-43696]:SimpleName[43645-43673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43699-45833]:Block[43676-45810]"
    }, {
      "left" : "Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();",
      "right" : "Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();",
      "info" : "VariableDeclarationStatement[43705-43767]:VariableDeclarationStatement[43682-43744]"
    }, {
      "left" : "Map<CompilerInput, JSModule> modulesByInput = Maps.newLinkedHashMap();",
      "right" : "Map<CompilerInput, JSModule> modulesByInput = Maps.newLinkedHashMap();",
      "info" : "VariableDeclarationStatement[43772-43842]:VariableDeclarationStatement[43749-43819]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[44107-44751]:EnhancedForStatement[44084-44728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44142-44751]:Block[44119-44728]"
    }, {
      "left" : "input.setCompiler(this);",
      "right" : "input.setCompiler(this);",
      "info" : "ExpressionStatement[44150-44174]:ExpressionStatement[44127-44151]"
    }, {
      "left" : "Node root = input.getAstRoot(this);",
      "right" : "Node root = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[44181-44216]:VariableDeclarationStatement[44158-44193]"
    }, {
      "left" : "if (root == null)",
      "right" : "if (root == null)",
      "info" : "IfStatement[44223-44268]:IfStatement[44200-44245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44241-44268]:Block[44218-44245]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[44251-44260]:ContinueStatement[44228-44237]"
    }, {
      "left" : "if (options.transformAMDToCJSModules)",
      "right" : "if (options.transformAMDToCJSModules)",
      "info" : "IfStatement[44275-44385]:IfStatement[44252-44362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44313-44385]:Block[44290-44362]"
    }, {
      "left" : "new TransformAMDToCJSModule(this).process(null, root);",
      "right" : "new TransformAMDToCJSModule(this).process(null, root);",
      "info" : "ExpressionStatement[44323-44377]:ExpressionStatement[44300-44354]"
    }, {
      "left" : "if (options.processCommonJSModules)",
      "right" : "if (options.processCommonJSModules)",
      "info" : "IfStatement[44392-44745]:IfStatement[44369-44722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44428-44745]:Block[44405-44722]"
    }, {
      "left" : "ProcessCommonJSModules cjs = new ProcessCommonJSModules(this,\n            options.commonJSModulePathPrefix);",
      "right" : "ProcessCommonJSModules cjs = new ProcessCommonJSModules(this,\n            options.commonJSModulePathPrefix);",
      "info" : "VariableDeclarationStatement[44438-44546]:VariableDeclarationStatement[44415-44523]"
    }, {
      "left" : "cjs.process(null, root);",
      "right" : "cjs.process(null, root);",
      "info" : "ExpressionStatement[44555-44579]:ExpressionStatement[44532-44556]"
    }, {
      "left" : "JSModule m = cjs.getModule();",
      "right" : "JSModule m = cjs.getModule();",
      "info" : "VariableDeclarationStatement[44588-44617]:VariableDeclarationStatement[44565-44594]"
    }, {
      "left" : "if (m != null)",
      "right" : "if (m != null)",
      "info" : "IfStatement[44626-44737]:IfStatement[44603-44714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44641-44737]:Block[44618-44714]"
    }, {
      "left" : "modulesByName.put(m.getName(), m);",
      "right" : "modulesByName.put(m.getName(), m);",
      "info" : "ExpressionStatement[44653-44687]:ExpressionStatement[44630-44664]"
    }, {
      "left" : "modulesByInput.put(input, m);",
      "right" : "modulesByInput.put(input, m);",
      "info" : "ExpressionStatement[44698-44727]:ExpressionStatement[44675-44704]"
    }, {
      "left" : "if (options.processCommonJSModules)",
      "right" : "if (options.processCommonJSModules)",
      "info" : "IfStatement[44756-45829]:IfStatement[44733-45806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44792-45829]:Block[44769-45806]"
    }, {
      "left" : "List<JSModule> modules = Lists.newArrayList(modulesByName.values());",
      "right" : "List<JSModule> modules = Lists.newArrayList(modulesByName.values());",
      "info" : "VariableDeclarationStatement[44800-44868]:VariableDeclarationStatement[44777-44845]"
    }, {
      "left" : "if (!modules.isEmpty())",
      "right" : "if (!modules.isEmpty())",
      "info" : "IfStatement[44875-45000]:IfStatement[44852-44977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44899-45000]:Block[44876-44977]"
    }, {
      "left" : "this.modules = modules;",
      "right" : "this.modules = modules;",
      "info" : "ExpressionStatement[44909-44932]:ExpressionStatement[44886-44909]"
    }, {
      "left" : "this.moduleGraph = new JSModuleGraph(this.modules);",
      "right" : "this.moduleGraph = new JSModuleGraph(this.modules);",
      "info" : "ExpressionStatement[44941-44992]:ExpressionStatement[44918-44969]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[45007-45431]:EnhancedForStatement[44984-45408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45039-45431]:Block[45016-45408]"
    }, {
      "left" : "for (CompilerInput input : module.getInputs())",
      "right" : "for (CompilerInput input : module.getInputs())",
      "info" : "EnhancedForStatement[45049-45423]:EnhancedForStatement[45026-45400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45096-45423]:Block[45073-45400]"
    }, {
      "left" : "for (String require : input.getRequires())",
      "right" : "for (String require : input.getRequires())",
      "info" : "EnhancedForStatement[45108-45413]:EnhancedForStatement[45085-45390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45151-45413]:Block[45128-45390]"
    }, {
      "left" : "JSModule dependency = modulesByName.get(require);",
      "right" : "JSModule dependency = modulesByName.get(require);",
      "info" : "VariableDeclarationStatement[45165-45214]:VariableDeclarationStatement[45142-45191]"
    }, {
      "left" : "if (dependency == null)",
      "right" : "if (dependency == null)",
      "info" : "IfStatement[45227-45401]:IfStatement[45204-45378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45251-45332]:Block[45228-45309]"
    }, {
      "left" : "report(JSError.make(MISSING_ENTRY_ERROR, require));",
      "right" : "report(JSError.make(MISSING_ENTRY_ERROR, require));",
      "info" : "ExpressionStatement[45267-45318]:ExpressionStatement[45244-45295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45338-45401]:Block[45315-45378]"
    }, {
      "left" : "module.addDependency(dependency);",
      "right" : "module.addDependency(dependency);",
      "info" : "ExpressionStatement[45354-45387]:ExpressionStatement[45331-45364]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[45438-45823]:TryStatement[45415-45800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45442-45760]:Block[45419-45737]"
    }, {
      "left" : "modules = Lists.newArrayList();",
      "right" : "modules = Lists.newArrayList();",
      "info" : "ExpressionStatement[45452-45483]:ExpressionStatement[45429-45460]"
    }, {
      "left" : "for (CompilerInput input : this.moduleGraph.manageDependencies(\n            options.dependencyOptions, inputs))",
      "right" : "for (CompilerInput input : this.moduleGraph.manageDependencies(\n            options.dependencyOptions, inputs))",
      "info" : "EnhancedForStatement[45492-45665]:EnhancedForStatement[45469-45642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45604-45665]:Block[45581-45642]"
    }, {
      "left" : "modules.add(modulesByInput.get(input));",
      "right" : "modules.add(modulesByInput.get(input));",
      "info" : "ExpressionStatement[45616-45655]:ExpressionStatement[45593-45632]"
    }, {
      "left" : "this.modules = modules;",
      "right" : "this.modules = modules;",
      "info" : "ExpressionStatement[45674-45697]:ExpressionStatement[45651-45674]"
    }, {
      "left" : "this.moduleGraph = new JSModuleGraph(modules);",
      "right" : "this.moduleGraph = new JSModuleGraph(modules);",
      "info" : "ExpressionStatement[45706-45752]:ExpressionStatement[45683-45729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45781-45823]:Block[45758-45800]"
    }, {
      "left" : "Throwables.propagate(e);",
      "right" : "Throwables.propagate(e);",
      "info" : "ExpressionStatement[45791-45815]:ExpressionStatement[45768-45792]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45837-45843]:Modifier[45814-45820]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[45844-45848]:SimpleType[45821-45825]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[45849-45854]:SimpleName[45826-45831]"
    }, {
      "left" : "SourceFile file",
      "right" : "SourceFile file",
      "info" : "SingleVariableDeclaration[45855-45870]:SingleVariableDeclaration[45832-45847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45872-46007]:Block[45849-45984]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[45878-45909]:ExpressionStatement[45855-45886]"
    }, {
      "left" : "addToDebugLog(\"Parsing: \" + file.getName());",
      "right" : "addToDebugLog(\"Parsing: \" + file.getName());",
      "info" : "ExpressionStatement[45914-45958]:ExpressionStatement[45891-45935]"
    }, {
      "left" : "return new JsAst(file).getAstRoot(this);",
      "right" : "return new JsAst(file).getAstRoot(this);",
      "info" : "ReturnStatement[45963-46003]:ReturnStatement[45940-45980]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46047-46056]:MarkerAnnotation[46024-46033]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[46059-46063]:SimpleType[46036-46040]"
    }, {
      "left" : "parseSyntheticCode",
      "right" : "parseSyntheticCode",
      "info" : "SimpleName[46064-46082]:SimpleName[46041-46059]"
    }, {
      "left" : "String js",
      "right" : "String js",
      "info" : "SingleVariableDeclaration[46083-46092]:SingleVariableDeclaration[46060-46069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46094-46307]:Block[46071-46284]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(\n        SourceFile.fromCode(\" [synthetic:\" + (++syntheticCodeId) + \"] \", js));",
      "right" : "CompilerInput input = new CompilerInput(\n        SourceFile.fromCode(\" [synthetic:\" + (++syntheticCodeId) + \"] \", js));",
      "info" : "VariableDeclarationStatement[46100-46219]:VariableDeclarationStatement[46077-46196]"
    }, {
      "left" : "putCompilerInput(input.getInputId(), input);",
      "right" : "putCompilerInput(input.getInputId(), input);",
      "info" : "ExpressionStatement[46224-46268]:ExpressionStatement[46201-46245]"
    }, {
      "left" : "return input.getAstRoot(this);",
      "right" : "return input.getAstRoot(this);",
      "info" : "ReturnStatement[46273-46303]:ReturnStatement[46250-46280]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[46392-46401]:Modifier[46369-46378]"
    }, {
      "left" : "CompilerOptions",
      "right" : "CompilerOptions",
      "info" : "SimpleType[46402-46417]:SimpleType[46379-46394]"
    }, {
      "left" : "newCompilerOptions",
      "right" : "newCompilerOptions",
      "info" : "SimpleName[46418-46436]:SimpleName[46395-46413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46439-46478]:Block[46416-46455]"
    }, {
      "left" : "return new CompilerOptions();",
      "right" : "return new CompilerOptions();",
      "info" : "ReturnStatement[46445-46474]:ReturnStatement[46422-46451]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46482-46486]:PrimitiveType[46459-46463]"
    }, {
      "left" : "initCompilerOptionsIfTesting",
      "right" : "initCompilerOptionsIfTesting",
      "info" : "SimpleName[46487-46515]:SimpleName[46464-46492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46518-46701]:Block[46495-46678]"
    }, {
      "left" : "if (options == null)",
      "right" : "if (options == null)",
      "info" : "IfStatement[46524-46697]:IfStatement[46501-46674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46545-46697]:Block[46522-46674]"
    }, {
      "left" : "initOptions(newCompilerOptions());",
      "right" : "initOptions(newCompilerOptions());",
      "info" : "ExpressionStatement[46657-46691]:ExpressionStatement[46634-46668]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46705-46714]:MarkerAnnotation[46682-46691]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[46717-46721]:SimpleType[46694-46698]"
    }, {
      "left" : "parseSyntheticCode",
      "right" : "parseSyntheticCode",
      "info" : "SimpleName[46722-46740]:SimpleName[46699-46717]"
    }, {
      "left" : "String fileName",
      "right" : "String fileName",
      "info" : "SingleVariableDeclaration[46741-46756]:SingleVariableDeclaration[46718-46733]"
    }, {
      "left" : "String js",
      "right" : "String js",
      "info" : "SingleVariableDeclaration[46758-46767]:SingleVariableDeclaration[46735-46744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46769-46863]:Block[46746-46840]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[46775-46806]:ExpressionStatement[46752-46783]"
    }, {
      "left" : "return parse(SourceFile.fromCode(fileName, js));",
      "right" : "return parse(SourceFile.fromCode(fileName, js));",
      "info" : "ReturnStatement[46811-46859]:ReturnStatement[46788-46836]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46867-46876]:MarkerAnnotation[46844-46853]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[46879-46883]:SimpleType[46856-46860]"
    }, {
      "left" : "parseTestCode",
      "right" : "parseTestCode",
      "info" : "SimpleName[46884-46897]:SimpleName[46861-46874]"
    }, {
      "left" : "String js",
      "right" : "String js",
      "info" : "SingleVariableDeclaration[46898-46907]:SingleVariableDeclaration[46875-46884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46909-47201]:Block[46886-47178]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[46915-46946]:ExpressionStatement[46892-46923]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(\n        SourceFile.fromCode(\"[testcode]\", js));",
      "right" : "CompilerInput input = new CompilerInput(\n        SourceFile.fromCode(\"[testcode]\", js));",
      "info" : "VariableDeclarationStatement[46951-47039]:VariableDeclarationStatement[46928-47016]"
    }, {
      "left" : "if (inputsById == null)",
      "right" : "if (inputsById == null)",
      "info" : "IfStatement[47044-47113]:IfStatement[47021-47090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47068-47113]:Block[47045-47090]"
    }, {
      "left" : "inputsById = Maps.newHashMap();",
      "right" : "inputsById = Maps.newHashMap();",
      "info" : "ExpressionStatement[47076-47107]:ExpressionStatement[47053-47084]"
    }, {
      "left" : "putCompilerInput(input.getInputId(), input);",
      "right" : "putCompilerInput(input.getInputId(), input);",
      "info" : "ExpressionStatement[47118-47162]:ExpressionStatement[47095-47139]"
    }, {
      "left" : "return input.getAstRoot(this);",
      "right" : "return input.getAstRoot(this);",
      "info" : "ReturnStatement[47167-47197]:ReturnStatement[47144-47174]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47205-47214]:MarkerAnnotation[47182-47191]"
    }, {
      "left" : "ErrorReporter",
      "right" : "ErrorReporter",
      "info" : "SimpleType[47217-47230]:SimpleType[47194-47207]"
    }, {
      "left" : "getDefaultErrorReporter",
      "right" : "getDefaultErrorReporter",
      "info" : "SimpleName[47231-47254]:SimpleName[47208-47231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47257-47295]:Block[47234-47272]"
    }, {
      "left" : "return defaultErrorReporter;",
      "right" : "return defaultErrorReporter;",
      "info" : "ReturnStatement[47263-47291]:ReturnStatement[47240-47268]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47550-47556]:Modifier[47527-47533]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[47557-47563]:SimpleType[47534-47540]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[47564-47572]:SimpleName[47541-47549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47575-48201]:Block[47552-48178]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String>() {\n      @Override\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String>() {\n      @Override\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
      "info" : "ReturnStatement[47581-48197]:ReturnStatement[47558-48174]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47639-47648]:MarkerAnnotation[47616-47625]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47655-47661]:Modifier[47632-47638]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[47662-47668]:SimpleType[47639-47645]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[47669-47673]:SimpleName[47646-47650]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[47683-47692]:SimpleType[47660-47669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47693-48189]:Block[47670-48166]"
    }, {
      "left" : "Tracer tracer = newTracer(\"toSource\");",
      "right" : "Tracer tracer = newTracer(\"toSource\");",
      "info" : "VariableDeclarationStatement[47703-47741]:VariableDeclarationStatement[47680-47718]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[47750-48181]:TryStatement[47727-48158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47754-48119]:Block[47731-48096]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[47766-47801]:VariableDeclarationStatement[47743-47778]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[47812-48077]:IfStatement[47789-48054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47832-48077]:Block[47809-48054]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[47846-47856]:VariableDeclarationStatement[47823-47833]"
    }, {
      "left" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
      "right" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
      "info" : "ForStatement[47869-48065]:ForStatement[47846-48042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48005-48065]:Block[47982-48042]"
    }, {
      "left" : "toSource(cb, i++, scriptNode);",
      "right" : "toSource(cb, i++, scriptNode);",
      "info" : "ExpressionStatement[48021-48051]:ExpressionStatement[47998-48028]"
    }, {
      "left" : "return cb.toString();",
      "right" : "return cb.toString();",
      "info" : "ReturnStatement[48088-48109]:ReturnStatement[48065-48086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48128-48181]:Block[48105-48158]"
    }, {
      "left" : "stopTracer(tracer, \"toSource\");",
      "right" : "stopTracer(tracer, \"toSource\");",
      "info" : "ExpressionStatement[48140-48171]:ExpressionStatement[48117-48148]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48278-48284]:Modifier[48255-48261]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[48285-48293]:ArrayType[48262-48270]"
    }, {
      "left" : "toSourceArray",
      "right" : "toSourceArray",
      "info" : "SimpleName[48294-48307]:SimpleName[48271-48284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48310-48997]:Block[48287-48974]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String[]>() {\n      @Override\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String[]>() {\n      @Override\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
      "info" : "ReturnStatement[48316-48993]:ReturnStatement[48293-48970]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48376-48385]:MarkerAnnotation[48353-48362]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48392-48398]:Modifier[48369-48375]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[48399-48407]:ArrayType[48376-48384]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[48408-48412]:SimpleName[48385-48389]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[48422-48431]:SimpleType[48399-48408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48432-48985]:Block[48409-48962]"
    }, {
      "left" : "Tracer tracer = newTracer(\"toSourceArray\");",
      "right" : "Tracer tracer = newTracer(\"toSourceArray\");",
      "info" : "VariableDeclarationStatement[48442-48485]:VariableDeclarationStatement[48419-48462]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[48494-48977]:TryStatement[48471-48954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48498-48910]:Block[48475-48887]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[48510-48540]:VariableDeclarationStatement[48487-48517]"
    }, {
      "left" : "String[] sources = new String[numInputs];",
      "right" : "String[] sources = new String[numInputs];",
      "info" : "VariableDeclarationStatement[48551-48592]:VariableDeclarationStatement[48528-48569]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[48603-48638]:VariableDeclarationStatement[48580-48615]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[48649-48874]:ForStatement[48626-48851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48685-48874]:Block[48662-48851]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[48699-48757]:VariableDeclarationStatement[48676-48734]"
    }, {
      "left" : "cb.reset();",
      "right" : "cb.reset();",
      "info" : "ExpressionStatement[48770-48781]:ExpressionStatement[48747-48758]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[48794-48822]:ExpressionStatement[48771-48799]"
    }, {
      "left" : "sources[i] = cb.toString();",
      "right" : "sources[i] = cb.toString();",
      "info" : "ExpressionStatement[48835-48862]:ExpressionStatement[48812-48839]"
    }, {
      "left" : "return sources;",
      "right" : "return sources;",
      "info" : "ReturnStatement[48885-48900]:ReturnStatement[48862-48877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48919-48977]:Block[48896-48954]"
    }, {
      "left" : "stopTracer(tracer, \"toSourceArray\");",
      "right" : "stopTracer(tracer, \"toSourceArray\");",
      "info" : "ExpressionStatement[48931-48967]:ExpressionStatement[48908-48944]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49072-49078]:Modifier[49049-49055]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[49079-49085]:SimpleType[49056-49062]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[49086-49094]:SimpleName[49063-49071]"
    }, {
      "left" : "final JSModule module",
      "right" : "final JSModule module",
      "info" : "SingleVariableDeclaration[49095-49116]:SingleVariableDeclaration[49072-49093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49118-49800]:Block[49095-49777]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String>() {\n      @Override\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String>() {\n      @Override\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
      "info" : "ReturnStatement[49124-49796]:ReturnStatement[49101-49773]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49182-49191]:MarkerAnnotation[49159-49168]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49198-49204]:Modifier[49175-49181]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[49205-49211]:SimpleType[49182-49188]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[49212-49216]:SimpleName[49189-49193]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[49226-49235]:SimpleType[49203-49212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49236-49788]:Block[49213-49765]"
    }, {
      "left" : "List<CompilerInput> inputs = module.getInputs();",
      "right" : "List<CompilerInput> inputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[49246-49294]:VariableDeclarationStatement[49223-49271]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[49303-49333]:VariableDeclarationStatement[49280-49310]"
    }, {
      "left" : "if (numInputs == 0)",
      "right" : "if (numInputs == 0)",
      "info" : "IfStatement[49342-49394]:IfStatement[49319-49371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49362-49394]:Block[49339-49371]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[49374-49384]:ReturnStatement[49351-49361]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[49403-49438]:VariableDeclarationStatement[49380-49415]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[49447-49750]:ForStatement[49424-49727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49483-49750]:Block[49460-49727]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[49495-49553]:VariableDeclarationStatement[49472-49530]"
    }, {
      "left" : "if (scriptNode == null)",
      "right" : "if (scriptNode == null)",
      "info" : "IfStatement[49564-49701]:IfStatement[49541-49678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49588-49701]:Block[49565-49678]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
      "right" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
      "info" : "ThrowStatement[49602-49689]:ThrowStatement[49579-49666]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[49712-49740]:ExpressionStatement[49689-49717]"
    }, {
      "left" : "return cb.toString();",
      "right" : "return cb.toString();",
      "info" : "ReturnStatement[49759-49780]:ReturnStatement[49736-49757]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49890-49896]:Modifier[49867-49873]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[49897-49905]:ArrayType[49874-49882]"
    }, {
      "left" : "toSourceArray",
      "right" : "toSourceArray",
      "info" : "SimpleName[49906-49919]:SimpleName[49883-49896]"
    }, {
      "left" : "final JSModule module",
      "right" : "final JSModule module",
      "info" : "SingleVariableDeclaration[49920-49941]:SingleVariableDeclaration[49897-49918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49943-50759]:Block[49920-50736]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String[]>() {\n      @Override\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String[]>() {\n      @Override\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
      "info" : "ReturnStatement[49949-50755]:ReturnStatement[49926-50732]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[50009-50018]:MarkerAnnotation[49986-49995]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50025-50031]:Modifier[50002-50008]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[50032-50040]:ArrayType[50009-50017]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[50041-50045]:SimpleName[50018-50022]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[50055-50064]:SimpleType[50032-50041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50065-50747]:Block[50042-50724]"
    }, {
      "left" : "List<CompilerInput> inputs = module.getInputs();",
      "right" : "List<CompilerInput> inputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[50075-50123]:VariableDeclarationStatement[50052-50100]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[50132-50162]:VariableDeclarationStatement[50109-50139]"
    }, {
      "left" : "if (numInputs == 0)",
      "right" : "if (numInputs == 0)",
      "info" : "IfStatement[50171-50234]:IfStatement[50148-50211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50191-50234]:Block[50168-50211]"
    }, {
      "left" : "return new String[0];",
      "right" : "return new String[0];",
      "info" : "ReturnStatement[50203-50224]:ReturnStatement[50180-50201]"
    }, {
      "left" : "String[] sources = new String[numInputs];",
      "right" : "String[] sources = new String[numInputs];",
      "info" : "VariableDeclarationStatement[50244-50285]:VariableDeclarationStatement[50221-50262]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[50294-50329]:VariableDeclarationStatement[50271-50306]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[50338-50715]:ForStatement[50315-50692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50374-50715]:Block[50351-50692]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[50386-50444]:VariableDeclarationStatement[50363-50421]"
    }, {
      "left" : "if (scriptNode == null)",
      "right" : "if (scriptNode == null)",
      "info" : "IfStatement[50455-50605]:IfStatement[50432-50582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50479-50605]:Block[50456-50582]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
      "right" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
      "info" : "ThrowStatement[50493-50593]:ThrowStatement[50470-50570]"
    }, {
      "left" : "cb.reset();",
      "right" : "cb.reset();",
      "info" : "ExpressionStatement[50617-50628]:ExpressionStatement[50594-50605]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[50639-50667]:ExpressionStatement[50616-50644]"
    }, {
      "left" : "sources[i] = cb.toString();",
      "right" : "sources[i] = cb.toString();",
      "info" : "ExpressionStatement[50678-50705]:ExpressionStatement[50655-50682]"
    }, {
      "left" : "return sources;",
      "right" : "return sources;",
      "info" : "ReturnStatement[50724-50739]:ReturnStatement[50701-50716]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51116-51122]:Modifier[51093-51099]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51123-51127]:PrimitiveType[51100-51104]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[51128-51136]:SimpleName[51105-51113]"
    }, {
      "left" : "final CodeBuilder cb",
      "right" : "final CodeBuilder cb",
      "info" : "SingleVariableDeclaration[51137-51157]:SingleVariableDeclaration[51114-51134]"
    }, {
      "left" : "final int inputSeqNum",
      "right" : "final int inputSeqNum",
      "info" : "SingleVariableDeclaration[51182-51203]:SingleVariableDeclaration[51159-51180]"
    }, {
      "left" : "final Node root",
      "right" : "final Node root",
      "info" : "SingleVariableDeclaration[51228-51243]:SingleVariableDeclaration[51205-51220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51245-53538]:Block[51222-53515]"
    }, {
      "left" : "runInCompilerThread(new Callable<Void>() {\n      @Override\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.isScript());\n\n          String delimiter = options.inputDelimiter;\n\n          String inputName = root.getInputId().getIdName();\n          String sourceName = root.getSourceFileName();\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter\n              .replaceAll(\"%name%\", Matcher.quoteReplacement(inputName))\n              .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'\n        // for the first input file\n        String code = toSource(root, sourceMap, inputSeqNum == 0);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there's an obvious semi-colon already there.\n          int length = code.length();\n          char lastChar = code.charAt(length - 1);\n          char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';\n          boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
      "right" : "runInCompilerThread(new Callable<Void>() {\n      @Override\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.isScript());\n\n          String delimiter = options.inputDelimiter;\n\n          String inputName = root.getInputId().getIdName();\n          String sourceName = root.getSourceFileName();\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter\n              .replaceAll(\"%name%\", Matcher.quoteReplacement(inputName))\n              .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'\n        // for the first input file\n        String code = toSource(root, sourceMap, inputSeqNum == 0);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there's an obvious semi-colon already there.\n          int length = code.length();\n          char lastChar = code.charAt(length - 1);\n          char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';\n          boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
      "info" : "ExpressionStatement[51251-53534]:ExpressionStatement[51228-53511]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[51300-51309]:MarkerAnnotation[51277-51286]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51316-51322]:Modifier[51293-51299]"
    }, {
      "left" : "Void",
      "right" : "Void",
      "info" : "SimpleType[51323-51327]:SimpleType[51300-51304]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[51328-51332]:SimpleName[51305-51309]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[51342-51351]:SimpleType[51319-51328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51352-53526]:Block[51329-53503]"
    }, {
      "left" : "if (options.printInputDelimiter)",
      "right" : "if (options.printInputDelimiter)",
      "info" : "IfStatement[51362-52126]:IfStatement[51339-52103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51395-52126]:Block[51372-52103]"
    }, {
      "left" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
      "right" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
      "info" : "IfStatement[51407-51547]:IfStatement[51384-51524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51455-51547]:Block[51432-51524]"
    }, {
      "left" : "cb.append(\"\\n\");",
      "right" : "cb.append(\"\\n\");",
      "info" : "ExpressionStatement[51469-51485]:ExpressionStatement[51446-51462]"
    }, {
      "left" : "Preconditions.checkState(root.isScript());",
      "right" : "Preconditions.checkState(root.isScript());",
      "info" : "ExpressionStatement[51558-51600]:ExpressionStatement[51535-51577]"
    }, {
      "left" : "String delimiter = options.inputDelimiter;",
      "right" : "String delimiter = options.inputDelimiter;",
      "info" : "VariableDeclarationStatement[51612-51654]:VariableDeclarationStatement[51589-51631]"
    }, {
      "left" : "String inputName = root.getInputId().getIdName();",
      "right" : "String inputName = root.getInputId().getIdName();",
      "info" : "VariableDeclarationStatement[51666-51715]:VariableDeclarationStatement[51643-51692]"
    }, {
      "left" : "String sourceName = root.getSourceFileName();",
      "right" : "String sourceName = root.getSourceFileName();",
      "info" : "VariableDeclarationStatement[51726-51771]:VariableDeclarationStatement[51703-51748]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[51782-51827]:ExpressionStatement[51759-51804]"
    }, {
      "left" : "Preconditions.checkState(!sourceName.isEmpty());",
      "right" : "Preconditions.checkState(!sourceName.isEmpty());",
      "info" : "ExpressionStatement[51838-51886]:ExpressionStatement[51815-51863]"
    }, {
      "left" : "delimiter = delimiter\n              .replaceAll(\"%name%\", Matcher.quoteReplacement(inputName))\n              .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
      "right" : "delimiter = delimiter\n              .replaceAll(\"%name%\", Matcher.quoteReplacement(inputName))\n              .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
      "info" : "ExpressionStatement[51898-52057]:ExpressionStatement[51875-52034]"
    }, {
      "left" : "cb.append(delimiter)\n            .append(\"\\n\");",
      "right" : "cb.append(delimiter)\n            .append(\"\\n\");",
      "info" : "ExpressionStatement[52069-52116]:ExpressionStatement[52046-52093]"
    }, {
      "left" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
      "right" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
      "info" : "IfStatement[52135-52346]:IfStatement[52112-52323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52224-52346]:Block[52201-52323]"
    }, {
      "left" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
      "right" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
      "info" : "ExpressionStatement[52236-52336]:ExpressionStatement[52213-52313]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[52515-52663]:IfStatement[52492-52640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52556-52663]:Block[52533-52640]"
    }, {
      "left" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
      "right" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
      "info" : "ExpressionStatement[52568-52653]:ExpressionStatement[52545-52630]"
    }, {
      "left" : "String code = toSource(root, sourceMap, inputSeqNum == 0);",
      "right" : "String code = toSource(root, sourceMap, inputSeqNum == 0);",
      "info" : "VariableDeclarationStatement[52783-52841]:VariableDeclarationStatement[52760-52818]"
    }, {
      "left" : "if (!code.isEmpty())",
      "right" : "if (!code.isEmpty())",
      "info" : "IfStatement[52850-53497]:IfStatement[52827-53474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52871-53497]:Block[52848-53474]"
    }, {
      "left" : "cb.append(code);",
      "right" : "cb.append(code);",
      "info" : "ExpressionStatement[52883-52899]:ExpressionStatement[52860-52876]"
    }, {
      "left" : "int length = code.length();",
      "right" : "int length = code.length();",
      "info" : "VariableDeclarationStatement[53135-53162]:VariableDeclarationStatement[53112-53139]"
    }, {
      "left" : "char lastChar = code.charAt(length - 1);",
      "right" : "char lastChar = code.charAt(length - 1);",
      "info" : "VariableDeclarationStatement[53173-53213]:VariableDeclarationStatement[53150-53190]"
    }, {
      "left" : "char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';",
      "right" : "char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';",
      "info" : "VariableDeclarationStatement[53224-53305]:VariableDeclarationStatement[53201-53282]"
    }, {
      "left" : "boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');",
      "right" : "boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');",
      "info" : "VariableDeclarationStatement[53316-53416]:VariableDeclarationStatement[53293-53393]"
    }, {
      "left" : "if (!hasSemiColon)",
      "right" : "if (!hasSemiColon)",
      "info" : "IfStatement[53427-53487]:IfStatement[53404-53464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53446-53487]:Block[53423-53464]"
    }, {
      "left" : "cb.append(\";\");",
      "right" : "cb.append(\";\");",
      "info" : "ExpressionStatement[53460-53475]:ExpressionStatement[53437-53452]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[53506-53518]:ReturnStatement[53483-53495]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[53643-53652]:MarkerAnnotation[53620-53629]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[53655-53661]:SimpleType[53632-53638]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[53662-53670]:SimpleName[53639-53647]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[53671-53677]:SingleVariableDeclaration[53648-53654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53679-53756]:Block[53656-53733]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[53685-53716]:ExpressionStatement[53662-53693]"
    }, {
      "left" : "return toSource(n, null, true);",
      "right" : "return toSource(n, null, true);",
      "info" : "ReturnStatement[53721-53752]:ReturnStatement[53698-53729]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53822-53829]:Modifier[53799-53806]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[53830-53836]:SimpleType[53807-53813]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[53837-53845]:SimpleName[53814-53822]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[53846-53852]:SingleVariableDeclaration[53823-53829]"
    }, {
      "left" : "SourceMap sourceMap",
      "right" : "SourceMap sourceMap",
      "info" : "SingleVariableDeclaration[53854-53873]:SingleVariableDeclaration[53831-53850]"
    }, {
      "left" : "boolean firstOutput",
      "right" : "boolean firstOutput",
      "info" : "SingleVariableDeclaration[53875-53894]:SingleVariableDeclaration[53852-53871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53896-54595]:Block[53873-54572]"
    }, {
      "left" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
      "right" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
      "info" : "VariableDeclarationStatement[53902-53959]:VariableDeclarationStatement[53879-53936]"
    }, {
      "left" : "builder.setPrettyPrint(options.prettyPrint);",
      "right" : "builder.setPrettyPrint(options.prettyPrint);",
      "info" : "ExpressionStatement[53964-54008]:ExpressionStatement[53941-53985]"
    }, {
      "left" : "builder.setLineBreak(options.lineBreak);",
      "right" : "builder.setLineBreak(options.lineBreak);",
      "info" : "ExpressionStatement[54013-54053]:ExpressionStatement[53990-54030]"
    }, {
      "left" : "builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);",
      "right" : "builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);",
      "info" : "ExpressionStatement[54058-54132]:ExpressionStatement[54035-54109]"
    }, {
      "left" : "builder.setSourceMap(sourceMap);",
      "right" : "builder.setSourceMap(sourceMap);",
      "info" : "ExpressionStatement[54137-54169]:ExpressionStatement[54114-54146]"
    }, {
      "left" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
      "right" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
      "info" : "ExpressionStatement[54174-54236]:ExpressionStatement[54151-54213]"
    }, {
      "left" : "builder.setTagAsStrict(firstOutput &&\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);",
      "right" : "builder.setTagAsStrict(firstOutput &&\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);",
      "info" : "ExpressionStatement[54241-54348]:ExpressionStatement[54218-54325]"
    }, {
      "left" : "builder.setLineLengthThreshold(options.lineLengthThreshold);",
      "right" : "builder.setLineLengthThreshold(options.lineLengthThreshold);",
      "info" : "ExpressionStatement[54353-54413]:ExpressionStatement[54330-54390]"
    }, {
      "left" : "Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;",
      "right" : "Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;",
      "info" : "VariableDeclarationStatement[54419-54523]:VariableDeclarationStatement[54396-54500]"
    }, {
      "left" : "builder.setOutputCharset(charset);",
      "right" : "builder.setOutputCharset(charset);",
      "info" : "ExpressionStatement[54528-54562]:ExpressionStatement[54505-54539]"
    }, {
      "left" : "return builder.build();",
      "right" : "return builder.build();",
      "info" : "ReturnStatement[54568-54591]:ReturnStatement[54545-54568]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54758-54764]:Modifier[54735-54741]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54765-54771]:Modifier[54742-54748]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[54772-54777]:TYPE_DECLARATION_KIND[54749-54754]"
    }, {
      "left" : "CodeBuilder",
      "right" : "CodeBuilder",
      "info" : "SimpleName[54778-54789]:SimpleName[54755-54766]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54982-54986]:PrimitiveType[54959-54963]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[54987-54992]:SimpleName[54964-54969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54995-55025]:Block[54972-55002]"
    }, {
      "left" : "sb.setLength(0);",
      "right" : "sb.setLength(0);",
      "info" : "ExpressionStatement[55003-55019]:ExpressionStatement[54980-54996]"
    }, {
      "left" : "CodeBuilder",
      "right" : "CodeBuilder",
      "info" : "SimpleType[55087-55098]:SimpleType[55064-55075]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[55099-55105]:SimpleName[55076-55082]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[55106-55116]:SingleVariableDeclaration[55083-55093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55118-55597]:Block[55095-55574]"
    }, {
      "left" : "sb.append(str);",
      "right" : "sb.append(str);",
      "info" : "ExpressionStatement[55126-55141]:ExpressionStatement[55103-55118]"
    }, {
      "left" : "int index = -1;",
      "right" : "int index = -1;",
      "info" : "VariableDeclarationStatement[55215-55230]:VariableDeclarationStatement[55192-55207]"
    }, {
      "left" : "int lastIndex = index;",
      "right" : "int lastIndex = index;",
      "info" : "VariableDeclarationStatement[55237-55259]:VariableDeclarationStatement[55214-55236]"
    }, {
      "left" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
      "right" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
      "info" : "WhileStatement[55266-55375]:WhileStatement[55243-55352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55318-55375]:Block[55295-55352]"
    }, {
      "left" : "++lineCount;",
      "right" : "++lineCount;",
      "info" : "ExpressionStatement[55328-55340]:ExpressionStatement[55305-55317]"
    }, {
      "left" : "lastIndex = index;",
      "right" : "lastIndex = index;",
      "info" : "ExpressionStatement[55349-55367]:ExpressionStatement[55326-55344]"
    }, {
      "left" : "if (lastIndex == -1)",
      "right" : "if (lastIndex == -1)",
      "info" : "IfStatement[55383-55571]:IfStatement[55360-55548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55404-55505]:Block[55381-55482]"
    }, {
      "left" : "colCount += str.length();",
      "right" : "colCount += str.length();",
      "info" : "ExpressionStatement[55472-55497]:ExpressionStatement[55449-55474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55511-55571]:Block[55488-55548]"
    }, {
      "left" : "colCount = str.length() - (lastIndex + 1);",
      "right" : "colCount = str.length() - (lastIndex + 1);",
      "info" : "ExpressionStatement[55521-55563]:ExpressionStatement[55498-55540]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[55579-55591]:ReturnStatement[55556-55568]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[55651-55660]:MarkerAnnotation[55628-55637]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55665-55671]:Modifier[55642-55648]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[55672-55678]:SimpleType[55649-55655]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[55679-55687]:SimpleName[55656-55664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55690-55725]:Block[55667-55702]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[55698-55719]:ReturnStatement[55675-55696]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55781-55787]:Modifier[55758-55764]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[55788-55791]:PrimitiveType[55765-55768]"
    }, {
      "left" : "getLength",
      "right" : "getLength",
      "info" : "SimpleName[55792-55801]:SimpleName[55769-55778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55804-55837]:Block[55781-55814]"
    }, {
      "left" : "return sb.length();",
      "right" : "return sb.length();",
      "info" : "ReturnStatement[55812-55831]:ReturnStatement[55789-55808]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[55922-55925]:PrimitiveType[55899-55902]"
    }, {
      "left" : "getLineIndex",
      "right" : "getLineIndex",
      "info" : "SimpleName[55926-55938]:SimpleName[55903-55915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55941-55972]:Block[55918-55949]"
    }, {
      "left" : "return lineCount;",
      "right" : "return lineCount;",
      "info" : "ReturnStatement[55949-55966]:ReturnStatement[55926-55943]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[56059-56062]:PrimitiveType[56036-56039]"
    }, {
      "left" : "getColumnIndex",
      "right" : "getColumnIndex",
      "info" : "SimpleName[56063-56077]:SimpleName[56040-56054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56080-56110]:Block[56057-56087]"
    }, {
      "left" : "return colCount;",
      "right" : "return colCount;",
      "info" : "ReturnStatement[56088-56104]:ReturnStatement[56065-56081]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56183-56190]:PrimitiveType[56160-56167]"
    }, {
      "left" : "endsWith",
      "right" : "endsWith",
      "info" : "SimpleName[56191-56199]:SimpleName[56168-56176]"
    }, {
      "left" : "String suffix",
      "right" : "String suffix",
      "info" : "SingleVariableDeclaration[56200-56213]:SingleVariableDeclaration[56177-56190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56215-56340]:Block[56192-56317]"
    }, {
      "left" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
      "right" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
      "info" : "ReturnStatement[56223-56334]:ReturnStatement[56200-56311]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56522-56528]:Modifier[56499-56505]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56529-56533]:PrimitiveType[56506-56510]"
    }, {
      "left" : "optimize",
      "right" : "optimize",
      "info" : "SimpleName[56534-56542]:SimpleName[56511-56519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56545-57174]:Block[56522-57151]"
    }, {
      "left" : "normalize();",
      "right" : "normalize();",
      "info" : "ExpressionStatement[56819-56831]:ExpressionStatement[56796-56808]"
    }, {
      "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker, null);",
      "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker, null);",
      "info" : "VariableDeclarationStatement[56837-56909]:VariableDeclarationStatement[56814-56886]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[56914-57014]:IfStatement[56891-56991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56957-57014]:Block[56934-56991]"
    }, {
      "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "info" : "ExpressionStatement[56965-57008]:ExpressionStatement[56942-56985]"
    }, {
      "left" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
      "right" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
      "info" : "ExpressionStatement[57019-57078]:ExpressionStatement[56996-57055]"
    }, {
      "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[57083-57127]:ExpressionStatement[57060-57104]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[57132-57170]:IfStatement[57109-57147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57149-57170]:Block[57126-57147]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[57157-57164]:ReturnStatement[57134-57141]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[57178-57187]:MarkerAnnotation[57155-57164]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57190-57194]:PrimitiveType[57167-57171]"
    }, {
      "left" : "setCssRenamingMap",
      "right" : "setCssRenamingMap",
      "info" : "SimpleName[57195-57212]:SimpleName[57172-57189]"
    }, {
      "left" : "CssRenamingMap map",
      "right" : "CssRenamingMap map",
      "info" : "SingleVariableDeclaration[57213-57231]:SingleVariableDeclaration[57190-57208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57233-57272]:Block[57210-57249]"
    }, {
      "left" : "options.cssRenamingMap = map;",
      "right" : "options.cssRenamingMap = map;",
      "info" : "ExpressionStatement[57239-57268]:ExpressionStatement[57216-57245]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[57276-57285]:MarkerAnnotation[57253-57262]"
    }, {
      "left" : "CssRenamingMap",
      "right" : "CssRenamingMap",
      "info" : "SimpleType[57288-57302]:SimpleType[57265-57279]"
    }, {
      "left" : "getCssRenamingMap",
      "right" : "getCssRenamingMap",
      "info" : "SimpleName[57303-57320]:SimpleName[57280-57297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57323-57363]:Block[57300-57340]"
    }, {
      "left" : "return options.cssRenamingMap;",
      "right" : "return options.cssRenamingMap;",
      "info" : "ReturnStatement[57329-57359]:ReturnStatement[57306-57336]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57716-57722]:Modifier[57693-57699]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57723-57727]:PrimitiveType[57700-57704]"
    }, {
      "left" : "processDefines",
      "right" : "processDefines",
      "info" : "SimpleName[57728-57742]:SimpleName[57705-57719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57745-57854]:Block[57722-57831]"
    }, {
      "left" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
      "right" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[57751-57850]:ExpressionStatement[57728-57827]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57858-57865]:PrimitiveType[57835-57842]"
    }, {
      "left" : "isInliningForbidden",
      "right" : "isInliningForbidden",
      "info" : "SimpleName[57866-57885]:SimpleName[57843-57862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57888-58061]:Block[57865-58038]"
    }, {
      "left" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
      "right" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
      "info" : "ReturnStatement[57894-58057]:ReturnStatement[57871-58034]"
    }, {
      "left" : "ControlFlowGraph<Node>",
      "right" : "ControlFlowGraph<Node>",
      "info" : "ParameterizedType[58097-58119]:ParameterizedType[58074-58096]"
    }, {
      "left" : "computeCFG",
      "right" : "computeCFG",
      "info" : "SimpleName[58120-58130]:SimpleName[58097-58107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58133-58387]:Block[58110-58364]"
    }, {
      "left" : "logger.fine(\"Computing Control Flow Graph\");",
      "right" : "logger.fine(\"Computing Control Flow Graph\");",
      "info" : "ExpressionStatement[58139-58183]:ExpressionStatement[58116-58160]"
    }, {
      "left" : "Tracer tracer = newTracer(\"computeCFG\");",
      "right" : "Tracer tracer = newTracer(\"computeCFG\");",
      "info" : "VariableDeclarationStatement[58188-58228]:VariableDeclarationStatement[58165-58205]"
    }, {
      "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "info" : "VariableDeclarationStatement[58233-58302]:VariableDeclarationStatement[58210-58279]"
    }, {
      "left" : "process(cfa);",
      "right" : "process(cfa);",
      "info" : "ExpressionStatement[58307-58320]:ExpressionStatement[58284-58297]"
    }, {
      "left" : "stopTracer(tracer, \"computeCFG\");",
      "right" : "stopTracer(tracer, \"computeCFG\");",
      "info" : "ExpressionStatement[58325-58358]:ExpressionStatement[58302-58335]"
    }, {
      "left" : "return cfa.getCfg();",
      "right" : "return cfa.getCfg();",
      "info" : "ReturnStatement[58363-58383]:ReturnStatement[58340-58360]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58391-58397]:Modifier[58368-58374]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[58398-58402]:PrimitiveType[58375-58379]"
    }, {
      "left" : "normalize",
      "right" : "normalize",
      "info" : "SimpleName[58403-58412]:SimpleName[58380-58389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58415-58536]:Block[58392-58513]"
    }, {
      "left" : "logger.fine(\"Normalizing\");",
      "right" : "logger.fine(\"Normalizing\");",
      "info" : "ExpressionStatement[58421-58448]:ExpressionStatement[58398-58425]"
    }, {
      "left" : "startPass(\"normalize\");",
      "right" : "startPass(\"normalize\");",
      "info" : "ExpressionStatement[58453-58476]:ExpressionStatement[58430-58453]"
    }, {
      "left" : "process(new Normalize(this, false));",
      "right" : "process(new Normalize(this, false));",
      "info" : "ExpressionStatement[58481-58517]:ExpressionStatement[58458-58494]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[58522-58532]:ExpressionStatement[58499-58509]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[58540-58549]:MarkerAnnotation[58517-58526]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[58552-58556]:PrimitiveType[58529-58533]"
    }, {
      "left" : "prepareAst",
      "right" : "prepareAst",
      "info" : "SimpleName[58557-58567]:SimpleName[58534-58544]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[58568-58577]:SingleVariableDeclaration[58545-58554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58579-58660]:Block[58556-58637]"
    }, {
      "left" : "CompilerPass pass = new PrepareAst(this);",
      "right" : "CompilerPass pass = new PrepareAst(this);",
      "info" : "VariableDeclarationStatement[58585-58626]:VariableDeclarationStatement[58562-58603]"
    }, {
      "left" : "pass.process(null, root);",
      "right" : "pass.process(null, root);",
      "info" : "ExpressionStatement[58631-58656]:ExpressionStatement[58608-58633]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[58664-58668]:PrimitiveType[58641-58645]"
    }, {
      "left" : "recordFunctionInformation",
      "right" : "recordFunctionInformation",
      "info" : "SimpleName[58669-58694]:SimpleName[58646-58671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58697-59078]:Block[58674-59055]"
    }, {
      "left" : "logger.fine(\"Recording function information\");",
      "right" : "logger.fine(\"Recording function information\");",
      "info" : "ExpressionStatement[58703-58749]:ExpressionStatement[58680-58726]"
    }, {
      "left" : "startPass(\"recordFunctionInformation\");",
      "right" : "startPass(\"recordFunctionInformation\");",
      "info" : "ExpressionStatement[58754-58793]:ExpressionStatement[58731-58770]"
    }, {
      "left" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
      "right" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
      "info" : "VariableDeclarationStatement[58798-58960]:VariableDeclarationStatement[58775-58937]"
    }, {
      "left" : "process(recordFunctionInfoPass);",
      "right" : "process(recordFunctionInfoPass);",
      "info" : "ExpressionStatement[58965-58997]:ExpressionStatement[58942-58974]"
    }, {
      "left" : "functionInformationMap = recordFunctionInfoPass.getMap();",
      "right" : "functionInformationMap = recordFunctionInfoPass.getMap();",
      "info" : "ExpressionStatement[59002-59059]:ExpressionStatement[58979-59036]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[59064-59074]:ExpressionStatement[59041-59051]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[59493-59502]:MarkerAnnotation[59470-59479]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59505-59509]:PrimitiveType[59482-59486]"
    }, {
      "left" : "addChangeHandler",
      "right" : "addChangeHandler",
      "info" : "SimpleName[59510-59526]:SimpleName[59487-59503]"
    }, {
      "left" : "CodeChangeHandler handler",
      "right" : "CodeChangeHandler handler",
      "info" : "SingleVariableDeclaration[59527-59552]:SingleVariableDeclaration[59504-59529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59554-59596]:Block[59531-59573]"
    }, {
      "left" : "codeChangeHandlers.add(handler);",
      "right" : "codeChangeHandlers.add(handler);",
      "info" : "ExpressionStatement[59560-59592]:ExpressionStatement[59537-59569]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[59600-59609]:MarkerAnnotation[59577-59586]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59612-59616]:PrimitiveType[59589-59593]"
    }, {
      "left" : "removeChangeHandler",
      "right" : "removeChangeHandler",
      "info" : "SimpleName[59617-59636]:SimpleName[59594-59613]"
    }, {
      "left" : "CodeChangeHandler handler",
      "right" : "CodeChangeHandler handler",
      "info" : "SingleVariableDeclaration[59637-59662]:SingleVariableDeclaration[59614-59639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59664-59709]:Block[59641-59686]"
    }, {
      "left" : "codeChangeHandlers.remove(handler);",
      "right" : "codeChangeHandlers.remove(handler);",
      "info" : "ExpressionStatement[59670-59705]:ExpressionStatement[59647-59682]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[59904-59913]:MarkerAnnotation[59881-59890]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[59916-59922]:Modifier[59893-59899]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59923-59927]:PrimitiveType[59900-59904]"
    }, {
      "left" : "reportCodeChange",
      "right" : "reportCodeChange",
      "info" : "SimpleName[59928-59944]:SimpleName[59905-59921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59947-60047]:Block[59924-60024]"
    }, {
      "left" : "for (CodeChangeHandler handler : codeChangeHandlers)",
      "right" : "for (CodeChangeHandler handler : codeChangeHandlers)",
      "info" : "EnhancedForStatement[59953-60043]:EnhancedForStatement[59930-60020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60006-60043]:Block[59983-60020]"
    }, {
      "left" : "handler.reportChange();",
      "right" : "handler.reportChange();",
      "info" : "ExpressionStatement[60014-60037]:ExpressionStatement[59991-60014]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[60051-60060]:MarkerAnnotation[60028-60037]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[60063-60069]:Modifier[60040-60046]"
    }, {
      "left" : "CodingConvention",
      "right" : "CodingConvention",
      "info" : "SimpleType[60070-60086]:SimpleType[60047-60063]"
    }, {
      "left" : "getCodingConvention",
      "right" : "getCodingConvention",
      "info" : "SimpleName[60087-60106]:SimpleName[60064-60083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60109-60278]:Block[60086-60255]"
    }, {
      "left" : "CodingConvention convention = options.getCodingConvention();",
      "right" : "CodingConvention convention = options.getCodingConvention();",
      "info" : "VariableDeclarationStatement[60115-60175]:VariableDeclarationStatement[60092-60152]"
    }, {
      "left" : "convention = convention != null ? convention : defaultCodingConvention;",
      "right" : "convention = convention != null ? convention : defaultCodingConvention;",
      "info" : "ExpressionStatement[60180-60251]:ExpressionStatement[60157-60228]"
    }, {
      "left" : "return convention;",
      "right" : "return convention;",
      "info" : "ReturnStatement[60256-60274]:ReturnStatement[60233-60251]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[60282-60291]:MarkerAnnotation[60259-60268]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[60294-60300]:Modifier[60271-60277]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[60301-60308]:PrimitiveType[60278-60285]"
    }, {
      "left" : "isIdeMode",
      "right" : "isIdeMode",
      "info" : "SimpleName[60309-60318]:SimpleName[60286-60295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60321-60354]:Block[60298-60331]"
    }, {
      "left" : "return options.ideMode;",
      "right" : "return options.ideMode;",
      "info" : "ReturnStatement[60327-60350]:ReturnStatement[60304-60327]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[60358-60367]:MarkerAnnotation[60335-60344]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[60370-60376]:Modifier[60347-60353]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[60377-60384]:PrimitiveType[60354-60361]"
    }, {
      "left" : "acceptEcmaScript5",
      "right" : "acceptEcmaScript5",
      "info" : "SimpleName[60385-60402]:SimpleName[60362-60379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60405-60549]:Block[60382-60526]"
    }, {
      "left" : "switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }",
      "right" : "switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }",
      "info" : "SwitchStatement[60411-60527]:SwitchStatement[60388-60504]"
    }, {
      "left" : "case ECMASCRIPT5:",
      "right" : "case ECMASCRIPT5:",
      "info" : "SwitchCase[60452-60469]:SwitchCase[60429-60446]"
    }, {
      "left" : "case ECMASCRIPT5_STRICT:",
      "right" : "case ECMASCRIPT5_STRICT:",
      "info" : "SwitchCase[60476-60500]:SwitchCase[60453-60477]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[60509-60521]:ReturnStatement[60486-60498]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60532-60545]:ReturnStatement[60509-60522]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[60553-60559]:Modifier[60530-60536]"
    }, {
      "left" : "LanguageMode",
      "right" : "LanguageMode",
      "info" : "SimpleType[60560-60572]:SimpleType[60537-60549]"
    }, {
      "left" : "languageMode",
      "right" : "languageMode",
      "info" : "SimpleName[60573-60585]:SimpleName[60550-60562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60588-60629]:Block[60565-60606]"
    }, {
      "left" : "return options.getLanguageIn();",
      "right" : "return options.getLanguageIn();",
      "info" : "ReturnStatement[60594-60625]:ReturnStatement[60571-60602]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[60633-60642]:MarkerAnnotation[60610-60619]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[60645-60651]:Modifier[60622-60628]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[60652-60659]:PrimitiveType[60629-60636]"
    }, {
      "left" : "acceptConstKeyword",
      "right" : "acceptConstKeyword",
      "info" : "SimpleName[60660-60678]:SimpleName[60637-60655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60681-60725]:Block[60658-60702]"
    }, {
      "left" : "return options.acceptConstKeyword;",
      "right" : "return options.acceptConstKeyword;",
      "info" : "ReturnStatement[60687-60721]:ReturnStatement[60664-60698]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[60729-60738]:MarkerAnnotation[60706-60715]"
    }, {
      "left" : "Config",
      "right" : "Config",
      "info" : "SimpleType[60741-60747]:SimpleType[60718-60724]"
    }, {
      "left" : "getParserConfig",
      "right" : "getParserConfig",
      "info" : "SimpleName[60748-60763]:SimpleName[60725-60740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60766-61449]:Block[60743-61426]"
    }, {
      "left" : "if (parserConfig == null)",
      "right" : "if (parserConfig == null)",
      "info" : "IfStatement[60772-61420]:IfStatement[60749-61397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60798-61420]:Block[60775-61397]"
    }, {
      "left" : "Config.LanguageMode mode;",
      "right" : "Config.LanguageMode mode;",
      "info" : "VariableDeclarationStatement[60806-60831]:VariableDeclarationStatement[60783-60808]"
    }, {
      "left" : "switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }",
      "right" : "switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }",
      "info" : "SwitchStatement[60838-61261]:SwitchStatement[60815-61238]"
    }, {
      "left" : "case ECMASCRIPT3:",
      "right" : "case ECMASCRIPT3:",
      "info" : "SwitchCase[60881-60898]:SwitchCase[60858-60875]"
    }, {
      "left" : "mode = Config.LanguageMode.ECMASCRIPT3;",
      "right" : "mode = Config.LanguageMode.ECMASCRIPT3;",
      "info" : "ExpressionStatement[60909-60948]:ExpressionStatement[60886-60925]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60959-60965]:BreakStatement[60936-60942]"
    }, {
      "left" : "case ECMASCRIPT5:",
      "right" : "case ECMASCRIPT5:",
      "info" : "SwitchCase[60974-60991]:SwitchCase[60951-60968]"
    }, {
      "left" : "mode = Config.LanguageMode.ECMASCRIPT5;",
      "right" : "mode = Config.LanguageMode.ECMASCRIPT5;",
      "info" : "ExpressionStatement[61002-61041]:ExpressionStatement[60979-61018]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61052-61058]:BreakStatement[61029-61035]"
    }, {
      "left" : "case ECMASCRIPT5_STRICT:",
      "right" : "case ECMASCRIPT5_STRICT:",
      "info" : "SwitchCase[61067-61091]:SwitchCase[61044-61068]"
    }, {
      "left" : "mode = Config.LanguageMode.ECMASCRIPT5_STRICT;",
      "right" : "mode = Config.LanguageMode.ECMASCRIPT5_STRICT;",
      "info" : "ExpressionStatement[61102-61148]:ExpressionStatement[61079-61125]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61159-61165]:BreakStatement[61136-61142]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[61174-61182]:SwitchCase[61151-61159]"
    }, {
      "left" : "throw new IllegalStateException(\"unexpected language mode\");",
      "right" : "throw new IllegalStateException(\"unexpected language mode\");",
      "info" : "ThrowStatement[61193-61253]:ThrowStatement[61170-61230]"
    }, {
      "left" : "parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword(),\n        options.extraAnnotationNames);",
      "right" : "parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword(),\n        options.extraAnnotationNames);",
      "info" : "ExpressionStatement[61269-61414]:ExpressionStatement[61246-61391]"
    }, {
      "left" : "return parserConfig;",
      "right" : "return parserConfig;",
      "info" : "ReturnStatement[61425-61445]:ReturnStatement[61402-61422]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[61453-61462]:MarkerAnnotation[61430-61439]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61465-61471]:Modifier[61442-61448]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61472-61479]:PrimitiveType[61449-61456]"
    }, {
      "left" : "isTypeCheckingEnabled",
      "right" : "isTypeCheckingEnabled",
      "info" : "SimpleName[61480-61501]:SimpleName[61457-61478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61504-61540]:Block[61481-61517]"
    }, {
      "left" : "return options.checkTypes;",
      "right" : "return options.checkTypes;",
      "info" : "ReturnStatement[61510-61536]:ReturnStatement[61487-61513]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[61863-61872]:Modifier[61840-61849]"
    }, {
      "left" : "DiagnosticGroups",
      "right" : "DiagnosticGroups",
      "info" : "SimpleType[61873-61889]:SimpleType[61850-61866]"
    }, {
      "left" : "getDiagnosticGroups",
      "right" : "getDiagnosticGroups",
      "info" : "SimpleName[61890-61909]:SimpleName[61867-61886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61912-61952]:Block[61889-61929]"
    }, {
      "left" : "return new DiagnosticGroups();",
      "right" : "return new DiagnosticGroups();",
      "info" : "ReturnStatement[61918-61948]:ReturnStatement[61895-61925]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[61956-61965]:MarkerAnnotation[61933-61942]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61968-61974]:Modifier[61945-61951]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61975-61979]:PrimitiveType[61952-61956]"
    }, {
      "left" : "report",
      "right" : "report",
      "info" : "SimpleName[61980-61986]:SimpleName[61957-61963]"
    }, {
      "left" : "JSError error",
      "right" : "JSError error",
      "info" : "SingleVariableDeclaration[61987-62000]:SingleVariableDeclaration[61964-61977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62002-62397]:Block[61979-62374]"
    }, {
      "left" : "CheckLevel level = error.getDefaultLevel();",
      "right" : "CheckLevel level = error.getDefaultLevel();",
      "info" : "VariableDeclarationStatement[62008-62051]:VariableDeclarationStatement[61985-62028]"
    }, {
      "left" : "if (warningsGuard != null)",
      "right" : "if (warningsGuard != null)",
      "info" : "IfStatement[62056-62210]:IfStatement[62033-62187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62083-62210]:Block[62060-62187]"
    }, {
      "left" : "CheckLevel newLevel = warningsGuard.level(error);",
      "right" : "CheckLevel newLevel = warningsGuard.level(error);",
      "info" : "VariableDeclarationStatement[62091-62140]:VariableDeclarationStatement[62068-62117]"
    }, {
      "left" : "if (newLevel != null)",
      "right" : "if (newLevel != null)",
      "info" : "IfStatement[62147-62204]:IfStatement[62124-62181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62169-62204]:Block[62146-62181]"
    }, {
      "left" : "level = newLevel;",
      "right" : "level = newLevel;",
      "info" : "ExpressionStatement[62179-62196]:ExpressionStatement[62156-62173]"
    }, {
      "left" : "if (level.isOn())",
      "right" : "if (level.isOn())",
      "info" : "IfStatement[62216-62393]:IfStatement[62193-62370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62234-62393]:Block[62211-62370]"
    }, {
      "left" : "if (getOptions().errorHandler != null)",
      "right" : "if (getOptions().errorHandler != null)",
      "info" : "IfStatement[62242-62346]:IfStatement[62219-62323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62281-62346]:Block[62258-62323]"
    }, {
      "left" : "getOptions().errorHandler.report(level, error);",
      "right" : "getOptions().errorHandler.report(level, error);",
      "info" : "ExpressionStatement[62291-62338]:ExpressionStatement[62268-62315]"
    }, {
      "left" : "errorManager.report(level, error);",
      "right" : "errorManager.report(level, error);",
      "info" : "ExpressionStatement[62353-62387]:ExpressionStatement[62330-62364]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[62401-62410]:MarkerAnnotation[62378-62387]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[62413-62419]:Modifier[62390-62396]"
    }, {
      "left" : "CheckLevel",
      "right" : "CheckLevel",
      "info" : "SimpleType[62420-62430]:SimpleType[62397-62407]"
    }, {
      "left" : "getErrorLevel",
      "right" : "getErrorLevel",
      "info" : "SimpleName[62431-62444]:SimpleName[62408-62421]"
    }, {
      "left" : "JSError error",
      "right" : "JSError error",
      "info" : "SingleVariableDeclaration[62445-62458]:SingleVariableDeclaration[62422-62435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62460-62545]:Block[62437-62522]"
    }, {
      "left" : "Preconditions.checkNotNull(options);",
      "right" : "Preconditions.checkNotNull(options);",
      "info" : "ExpressionStatement[62466-62502]:ExpressionStatement[62443-62479]"
    }, {
      "left" : "return warningsGuard.level(error);",
      "right" : "return warningsGuard.level(error);",
      "info" : "ReturnStatement[62507-62541]:ReturnStatement[62484-62518]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[62592-62601]:MarkerAnnotation[62569-62578]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[62604-62608]:PrimitiveType[62581-62585]"
    }, {
      "left" : "throwInternalError",
      "right" : "throwInternalError",
      "info" : "SimpleName[62609-62627]:SimpleName[62586-62604]"
    }, {
      "left" : "String message",
      "right" : "String message",
      "info" : "SingleVariableDeclaration[62628-62642]:SingleVariableDeclaration[62605-62619]"
    }, {
      "left" : "Exception cause",
      "right" : "Exception cause",
      "info" : "SingleVariableDeclaration[62644-62659]:SingleVariableDeclaration[62621-62636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62661-62937]:Block[62638-62914]"
    }, {
      "left" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
      "right" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
      "info" : "VariableDeclarationStatement[62667-62774]:VariableDeclarationStatement[62644-62751]"
    }, {
      "left" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
      "right" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
      "info" : "VariableDeclarationStatement[62780-62843]:VariableDeclarationStatement[62757-62820]"
    }, {
      "left" : "if (cause != null)",
      "right" : "if (cause != null)",
      "info" : "IfStatement[62848-62920]:IfStatement[62825-62897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62867-62920]:Block[62844-62897]"
    }, {
      "left" : "e.setStackTrace(cause.getStackTrace());",
      "right" : "e.setStackTrace(cause.getStackTrace());",
      "info" : "ExpressionStatement[62875-62914]:ExpressionStatement[62852-62891]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[62925-62933]:ThrowStatement[62902-62910]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[62986-62992]:Modifier[62963-62969]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[62993-62996]:PrimitiveType[62970-62973]"
    }, {
      "left" : "getErrorCount",
      "right" : "getErrorCount",
      "info" : "SimpleName[62997-63010]:SimpleName[62974-62987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63013-63059]:Block[62990-63036]"
    }, {
      "left" : "return errorManager.getErrorCount();",
      "right" : "return errorManager.getErrorCount();",
      "info" : "ReturnStatement[63019-63055]:ReturnStatement[62996-63032]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63109-63115]:Modifier[63086-63092]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[63116-63119]:PrimitiveType[63093-63096]"
    }, {
      "left" : "getWarningCount",
      "right" : "getWarningCount",
      "info" : "SimpleName[63120-63135]:SimpleName[63097-63112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63138-63186]:Block[63115-63163]"
    }, {
      "left" : "return errorManager.getWarningCount();",
      "right" : "return errorManager.getWarningCount();",
      "info" : "ReturnStatement[63144-63182]:ReturnStatement[63121-63159]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[63190-63199]:MarkerAnnotation[63167-63176]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[63202-63209]:PrimitiveType[63179-63186]"
    }, {
      "left" : "hasHaltingErrors",
      "right" : "hasHaltingErrors",
      "info" : "SimpleName[63210-63226]:SimpleName[63187-63203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63229-63282]:Block[63206-63259]"
    }, {
      "left" : "return !isIdeMode() && getErrorCount() > 0;",
      "right" : "return !isIdeMode() && getErrorCount() > 0;",
      "info" : "ReturnStatement[63235-63278]:ReturnStatement[63212-63255]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63704-63710]:Modifier[63681-63687]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[63711-63718]:PrimitiveType[63688-63695]"
    }, {
      "left" : "hasErrors",
      "right" : "hasErrors",
      "info" : "SimpleName[63719-63728]:SimpleName[63696-63705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63731-63767]:Block[63708-63744]"
    }, {
      "left" : "return hasHaltingErrors();",
      "right" : "return hasHaltingErrors();",
      "info" : "ReturnStatement[63737-63763]:ReturnStatement[63714-63740]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[63829-63838]:MarkerAnnotation[63806-63815]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63841-63845]:PrimitiveType[63818-63822]"
    }, {
      "left" : "addToDebugLog",
      "right" : "addToDebugLog",
      "info" : "SimpleName[63846-63859]:SimpleName[63823-63836]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[63860-63870]:SingleVariableDeclaration[63837-63847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63872-63952]:Block[63849-63929]"
    }, {
      "left" : "debugLog.append(str);",
      "right" : "debugLog.append(str);",
      "info" : "ExpressionStatement[63878-63899]:ExpressionStatement[63855-63876]"
    }, {
      "left" : "debugLog.append('\\n');",
      "right" : "debugLog.append('\\n');",
      "info" : "ExpressionStatement[63904-63926]:ExpressionStatement[63881-63903]"
    }, {
      "left" : "logger.fine(str);",
      "right" : "logger.fine(str);",
      "info" : "ExpressionStatement[63931-63948]:ExpressionStatement[63908-63925]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[63956-63965]:MarkerAnnotation[63933-63942]"
    }, {
      "left" : "SourceFile",
      "right" : "SourceFile",
      "info" : "SimpleType[63968-63978]:SimpleType[63945-63955]"
    }, {
      "left" : "getSourceFileByName",
      "right" : "getSourceFileByName",
      "info" : "SimpleName[63979-63998]:SimpleName[63956-63975]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[63999-64016]:SingleVariableDeclaration[63976-63993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64018-64333]:Block[63995-64310]"
    }, {
      "left" : "if (sourceName != null)",
      "right" : "if (sourceName != null)",
      "info" : "IfStatement[64139-64312]:IfStatement[64116-64289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64163-64312]:Block[64140-64289]"
    }, {
      "left" : "CompilerInput input = inputsById.get(new InputId(sourceName));",
      "right" : "CompilerInput input = inputsById.get(new InputId(sourceName));",
      "info" : "VariableDeclarationStatement[64171-64233]:VariableDeclarationStatement[64148-64210]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[64240-64306]:IfStatement[64217-64283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64259-64306]:Block[64236-64283]"
    }, {
      "left" : "return input.getSourceFile();",
      "right" : "return input.getSourceFile();",
      "info" : "ReturnStatement[64269-64298]:ReturnStatement[64246-64275]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[64317-64329]:ReturnStatement[64294-64306]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[64337-64346]:MarkerAnnotation[64314-64323]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[64349-64355]:Modifier[64326-64332]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[64356-64362]:SimpleType[64333-64339]"
    }, {
      "left" : "getSourceLine",
      "right" : "getSourceLine",
      "info" : "SimpleName[64363-64376]:SimpleName[64340-64353]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[64377-64394]:SingleVariableDeclaration[64354-64371]"
    }, {
      "left" : "int lineNumber",
      "right" : "int lineNumber",
      "info" : "SingleVariableDeclaration[64396-64410]:SingleVariableDeclaration[64373-64387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64412-64612]:Block[64389-64589]"
    }, {
      "left" : "if (lineNumber < 1)",
      "right" : "if (lineNumber < 1)",
      "info" : "IfStatement[64418-64464]:IfStatement[64395-64441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64438-64464]:Block[64415-64441]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[64446-64458]:ReturnStatement[64423-64435]"
    }, {
      "left" : "SourceFile input = getSourceFileByName(sourceName);",
      "right" : "SourceFile input = getSourceFileByName(sourceName);",
      "info" : "VariableDeclarationStatement[64469-64520]:VariableDeclarationStatement[64446-64497]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[64525-64591]:IfStatement[64502-64568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64544-64591]:Block[64521-64568]"
    }, {
      "left" : "return input.getLine(lineNumber);",
      "right" : "return input.getLine(lineNumber);",
      "info" : "ReturnStatement[64552-64585]:ReturnStatement[64529-64562]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[64596-64608]:ReturnStatement[64573-64585]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[64616-64625]:MarkerAnnotation[64593-64602]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[64628-64634]:Modifier[64605-64611]"
    }, {
      "left" : "Region",
      "right" : "Region",
      "info" : "SimpleType[64635-64641]:SimpleType[64612-64618]"
    }, {
      "left" : "getSourceRegion",
      "right" : "getSourceRegion",
      "info" : "SimpleName[64642-64657]:SimpleName[64619-64634]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[64658-64675]:SingleVariableDeclaration[64635-64652]"
    }, {
      "left" : "int lineNumber",
      "right" : "int lineNumber",
      "info" : "SingleVariableDeclaration[64677-64691]:SingleVariableDeclaration[64654-64668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64693-64895]:Block[64670-64872]"
    }, {
      "left" : "if (lineNumber < 1)",
      "right" : "if (lineNumber < 1)",
      "info" : "IfStatement[64699-64745]:IfStatement[64676-64722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64719-64745]:Block[64696-64722]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[64727-64739]:ReturnStatement[64704-64716]"
    }, {
      "left" : "SourceFile input = getSourceFileByName(sourceName);",
      "right" : "SourceFile input = getSourceFileByName(sourceName);",
      "info" : "VariableDeclarationStatement[64750-64801]:VariableDeclarationStatement[64727-64778]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[64806-64874]:IfStatement[64783-64851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64825-64874]:Block[64802-64851]"
    }, {
      "left" : "return input.getRegion(lineNumber);",
      "right" : "return input.getRegion(lineNumber);",
      "info" : "ReturnStatement[64833-64868]:ReturnStatement[64810-64845]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[64879-64891]:ReturnStatement[64856-64868]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[65083-65092]:MarkerAnnotation[65060-65069]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[65095-65099]:SimpleType[65072-65076]"
    }, {
      "left" : "getNodeForCodeInsertion",
      "right" : "getNodeForCodeInsertion",
      "info" : "SimpleName[65100-65123]:SimpleName[65077-65100]"
    }, {
      "left" : "JSModule module",
      "right" : "JSModule module",
      "info" : "SingleVariableDeclaration[65124-65139]:SingleVariableDeclaration[65101-65116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65141-65534]:Block[65118-65511]"
    }, {
      "left" : "if (module == null)",
      "right" : "if (module == null)",
      "info" : "IfStatement[65147-65312]:IfStatement[65124-65289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65167-65312]:Block[65144-65289]"
    }, {
      "left" : "if (inputs.isEmpty())",
      "right" : "if (inputs.isEmpty())",
      "info" : "IfStatement[65175-65260]:IfStatement[65152-65237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65197-65260]:Block[65174-65237]"
    }, {
      "left" : "throw new IllegalStateException(\"No inputs\");",
      "right" : "throw new IllegalStateException(\"No inputs\");",
      "info" : "ThrowStatement[65207-65252]:ThrowStatement[65184-65229]"
    }, {
      "left" : "return inputs.get(0).getAstRoot(this);",
      "right" : "return inputs.get(0).getAstRoot(this);",
      "info" : "ReturnStatement[65268-65306]:ReturnStatement[65245-65283]"
    }, {
      "left" : "List<CompilerInput> moduleInputs = module.getInputs();",
      "right" : "List<CompilerInput> moduleInputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[65318-65372]:VariableDeclarationStatement[65295-65349]"
    }, {
      "left" : "if (moduleInputs.size() > 0)",
      "right" : "if (moduleInputs.size() > 0)",
      "info" : "IfStatement[65377-65464]:IfStatement[65354-65441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65406-65464]:Block[65383-65441]"
    }, {
      "left" : "return moduleInputs.get(0).getAstRoot(this);",
      "right" : "return moduleInputs.get(0).getAstRoot(this);",
      "info" : "ReturnStatement[65414-65458]:ReturnStatement[65391-65435]"
    }, {
      "left" : "throw new IllegalStateException(\"Root module has no inputs\");",
      "right" : "throw new IllegalStateException(\"Root module has no inputs\");",
      "info" : "ThrowStatement[65469-65530]:ThrowStatement[65446-65507]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65538-65544]:Modifier[65515-65521]"
    }, {
      "left" : "SourceMap",
      "right" : "SourceMap",
      "info" : "SimpleType[65545-65554]:SimpleType[65522-65531]"
    }, {
      "left" : "getSourceMap",
      "right" : "getSourceMap",
      "info" : "SimpleName[65555-65567]:SimpleName[65532-65544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65570-65597]:Block[65547-65574]"
    }, {
      "left" : "return sourceMap;",
      "right" : "return sourceMap;",
      "info" : "ReturnStatement[65576-65593]:ReturnStatement[65553-65570]"
    }, {
      "left" : "VariableMap",
      "right" : "VariableMap",
      "info" : "SimpleType[65601-65612]:SimpleType[65578-65589]"
    }, {
      "left" : "getVariableMap",
      "right" : "getVariableMap",
      "info" : "SimpleName[65613-65627]:SimpleName[65590-65604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65630-65698]:Block[65607-65675]"
    }, {
      "left" : "return getPassConfig().getIntermediateState().variableMap;",
      "right" : "return getPassConfig().getIntermediateState().variableMap;",
      "info" : "ReturnStatement[65636-65694]:ReturnStatement[65613-65671]"
    }, {
      "left" : "VariableMap",
      "right" : "VariableMap",
      "info" : "SimpleType[65702-65713]:SimpleType[65679-65690]"
    }, {
      "left" : "getPropertyMap",
      "right" : "getPropertyMap",
      "info" : "SimpleName[65714-65728]:SimpleName[65691-65705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65731-65799]:Block[65708-65776]"
    }, {
      "left" : "return getPassConfig().getIntermediateState().propertyMap;",
      "right" : "return getPassConfig().getIntermediateState().propertyMap;",
      "info" : "ReturnStatement[65737-65795]:ReturnStatement[65714-65772]"
    }, {
      "left" : "CompilerOptions",
      "right" : "CompilerOptions",
      "info" : "SimpleType[65803-65818]:SimpleType[65780-65795]"
    }, {
      "left" : "getOptions",
      "right" : "getOptions",
      "info" : "SimpleName[65819-65829]:SimpleName[65796-65806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65832-65857]:Block[65809-65834]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[65838-65853]:ReturnStatement[65815-65830]"
    }, {
      "left" : "FunctionInformationMap",
      "right" : "FunctionInformationMap",
      "info" : "SimpleType[65861-65883]:SimpleType[65838-65860]"
    }, {
      "left" : "getFunctionalInformationMap",
      "right" : "getFunctionalInformationMap",
      "info" : "SimpleName[65884-65911]:SimpleName[65861-65888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65914-65954]:Block[65891-65931]"
    }, {
      "left" : "return functionInformationMap;",
      "right" : "return functionInformationMap;",
      "info" : "ReturnStatement[65920-65950]:ReturnStatement[65897-65927]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[66044-66050]:Modifier[66021-66027]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[66051-66057]:Modifier[66028-66034]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[66058-66062]:PrimitiveType[66035-66039]"
    }, {
      "left" : "setLoggingLevel",
      "right" : "setLoggingLevel",
      "info" : "SimpleName[66063-66078]:SimpleName[66040-66055]"
    }, {
      "left" : "Level level",
      "right" : "Level level",
      "info" : "SingleVariableDeclaration[66079-66090]:SingleVariableDeclaration[66056-66067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66092-66125]:Block[66069-66102]"
    }, {
      "left" : "logger.setLevel(level);",
      "right" : "logger.setLevel(level);",
      "info" : "ExpressionStatement[66098-66121]:ExpressionStatement[66075-66098]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[66205-66211]:Modifier[66182-66188]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[66212-66218]:SimpleType[66189-66195]"
    }, {
      "left" : "getAstDotGraph",
      "right" : "getAstDotGraph",
      "info" : "SimpleName[66219-66233]:SimpleName[66196-66210]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[66243-66254]:SimpleType[66220-66231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66255-66486]:Block[66232-66463]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[66261-66482]:IfStatement[66238-66459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66281-66452]:Block[66258-66429]"
    }, {
      "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "info" : "VariableDeclarationStatement[66289-66358]:VariableDeclarationStatement[66266-66335]"
    }, {
      "left" : "cfa.process(null, jsRoot);",
      "right" : "cfa.process(null, jsRoot);",
      "info" : "ExpressionStatement[66365-66391]:ExpressionStatement[66342-66368]"
    }, {
      "left" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
      "right" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
      "info" : "ReturnStatement[66398-66446]:ReturnStatement[66375-66423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66458-66482]:Block[66435-66459]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[66466-66476]:ReturnStatement[66443-66453]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[66490-66499]:MarkerAnnotation[66467-66476]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[66502-66508]:Modifier[66479-66485]"
    }, {
      "left" : "ErrorManager",
      "right" : "ErrorManager",
      "info" : "SimpleType[66509-66521]:SimpleType[66486-66498]"
    }, {
      "left" : "getErrorManager",
      "right" : "getErrorManager",
      "info" : "SimpleName[66522-66537]:SimpleName[66499-66514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66540-66644]:Block[66517-66621]"
    }, {
      "left" : "if (options == null)",
      "right" : "if (options == null)",
      "info" : "IfStatement[66546-66615]:IfStatement[66523-66592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66567-66615]:Block[66544-66592]"
    }, {
      "left" : "initOptions(newCompilerOptions());",
      "right" : "initOptions(newCompilerOptions());",
      "info" : "ExpressionStatement[66575-66609]:ExpressionStatement[66552-66586]"
    }, {
      "left" : "return errorManager;",
      "right" : "return errorManager;",
      "info" : "ReturnStatement[66620-66640]:ReturnStatement[66597-66617]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[66648-66657]:MarkerAnnotation[66625-66634]"
    }, {
      "left" : "List<CompilerInput>",
      "right" : "List<CompilerInput>",
      "info" : "ParameterizedType[66660-66679]:ParameterizedType[66637-66656]"
    }, {
      "left" : "getInputsInOrder",
      "right" : "getInputsInOrder",
      "info" : "SimpleName[66680-66696]:SimpleName[66657-66673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66699-66768]:Block[66676-66745]"
    }, {
      "left" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
      "right" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
      "info" : "ReturnStatement[66705-66764]:ReturnStatement[66682-66741]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[66856-66862]:Modifier[66833-66839]"
    }, {
      "left" : "Map<InputId, CompilerInput>",
      "right" : "Map<InputId, CompilerInput>",
      "info" : "ParameterizedType[66863-66890]:ParameterizedType[66840-66867]"
    }, {
      "left" : "getInputsById",
      "right" : "getInputsById",
      "info" : "SimpleName[66891-66904]:SimpleName[66868-66881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66907-66964]:Block[66884-66941]"
    }, {
      "left" : "return Collections.unmodifiableMap(inputsById);",
      "right" : "return Collections.unmodifiableMap(inputsById);",
      "info" : "ReturnStatement[66913-66960]:ReturnStatement[66890-66937]"
    }, {
      "left" : "List<CompilerInput>",
      "right" : "List<CompilerInput>",
      "info" : "ParameterizedType[67050-67069]:ParameterizedType[67027-67046]"
    }, {
      "left" : "getExternsInOrder",
      "right" : "getExternsInOrder",
      "info" : "SimpleName[67070-67087]:SimpleName[67047-67064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67090-67160]:Block[67067-67137]"
    }, {
      "left" : "return Collections.<CompilerInput>unmodifiableList(externs);",
      "right" : "return Collections.<CompilerInput>unmodifiableList(externs);",
      "info" : "ReturnStatement[67096-67156]:ReturnStatement[67073-67133]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[67760-67766]:Modifier[67737-67743]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67767-67773]:Modifier[67744-67750]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[67774-67779]:TYPE_DECLARATION_KIND[67751-67756]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "SimpleName[67780-67797]:SimpleName[67757-67774]"
    }, {
      "left" : "Serializable",
      "right" : "Serializable",
      "info" : "SimpleType[67809-67821]:SimpleType[67786-67798]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68243-68250]:Modifier[68220-68227]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "SimpleName[68251-68268]:SimpleName[68228-68245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68271-68273]:Block[68248-68250]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[68373-68379]:Modifier[68350-68356]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "SimpleType[68380-68397]:SimpleType[68357-68374]"
    }, {
      "left" : "getState",
      "right" : "getState",
      "info" : "SimpleName[68398-68406]:SimpleName[68375-68383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68409-68864]:Block[68386-68841]"
    }, {
      "left" : "IntermediateState state = new IntermediateState();",
      "right" : "IntermediateState state = new IntermediateState();",
      "info" : "VariableDeclarationStatement[68415-68465]:VariableDeclarationStatement[68392-68442]"
    }, {
      "left" : "state.externsRoot = externsRoot;",
      "right" : "state.externsRoot = externsRoot;",
      "info" : "ExpressionStatement[68470-68502]:ExpressionStatement[68447-68479]"
    }, {
      "left" : "state.jsRoot = jsRoot;",
      "right" : "state.jsRoot = jsRoot;",
      "info" : "ExpressionStatement[68507-68529]:ExpressionStatement[68484-68506]"
    }, {
      "left" : "state.externs = externs;",
      "right" : "state.externs = externs;",
      "info" : "ExpressionStatement[68534-68558]:ExpressionStatement[68511-68535]"
    }, {
      "left" : "state.inputs = inputs;",
      "right" : "state.inputs = inputs;",
      "info" : "ExpressionStatement[68563-68585]:ExpressionStatement[68540-68562]"
    }, {
      "left" : "state.modules = modules;",
      "right" : "state.modules = modules;",
      "info" : "ExpressionStatement[68590-68614]:ExpressionStatement[68567-68591]"
    }, {
      "left" : "state.passConfigState = getPassConfig().getIntermediateState();",
      "right" : "state.passConfigState = getPassConfig().getIntermediateState();",
      "info" : "ExpressionStatement[68619-68682]:ExpressionStatement[68596-68659]"
    }, {
      "left" : "state.typeRegistry = typeRegistry;",
      "right" : "state.typeRegistry = typeRegistry;",
      "info" : "ExpressionStatement[68687-68721]:ExpressionStatement[68664-68698]"
    }, {
      "left" : "state.lifeCycleStage = getLifeCycleStage();",
      "right" : "state.lifeCycleStage = getLifeCycleStage();",
      "info" : "ExpressionStatement[68726-68769]:ExpressionStatement[68703-68746]"
    }, {
      "left" : "state.injectedLibraries = Maps.newLinkedHashMap(injectedLibraries);",
      "right" : "state.injectedLibraries = Maps.newLinkedHashMap(injectedLibraries);",
      "info" : "ExpressionStatement[68774-68841]:ExpressionStatement[68751-68818]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[68847-68860]:ReturnStatement[68824-68837]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[69001-69007]:Modifier[68978-68984]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[69008-69012]:PrimitiveType[68985-68989]"
    }, {
      "left" : "setState",
      "right" : "setState",
      "info" : "SimpleName[69013-69021]:SimpleName[68990-68998]"
    }, {
      "left" : "IntermediateState state",
      "right" : "IntermediateState state",
      "info" : "SingleVariableDeclaration[69022-69045]:SingleVariableDeclaration[68999-69022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69047-69478]:Block[69024-69455]"
    }, {
      "left" : "externsRoot = state.externsRoot;",
      "right" : "externsRoot = state.externsRoot;",
      "info" : "ExpressionStatement[69053-69085]:ExpressionStatement[69030-69062]"
    }, {
      "left" : "jsRoot = state.jsRoot;",
      "right" : "jsRoot = state.jsRoot;",
      "info" : "ExpressionStatement[69090-69112]:ExpressionStatement[69067-69089]"
    }, {
      "left" : "externs = state.externs;",
      "right" : "externs = state.externs;",
      "info" : "ExpressionStatement[69117-69141]:ExpressionStatement[69094-69118]"
    }, {
      "left" : "inputs = state.inputs;",
      "right" : "inputs = state.inputs;",
      "info" : "ExpressionStatement[69146-69168]:ExpressionStatement[69123-69145]"
    }, {
      "left" : "modules = state.modules;",
      "right" : "modules = state.modules;",
      "info" : "ExpressionStatement[69173-69197]:ExpressionStatement[69150-69174]"
    }, {
      "left" : "passes = createPassConfigInternal();",
      "right" : "passes = createPassConfigInternal();",
      "info" : "ExpressionStatement[69202-69238]:ExpressionStatement[69179-69215]"
    }, {
      "left" : "getPassConfig().setIntermediateState(state.passConfigState);",
      "right" : "getPassConfig().setIntermediateState(state.passConfigState);",
      "info" : "ExpressionStatement[69243-69303]:ExpressionStatement[69220-69280]"
    }, {
      "left" : "typeRegistry = state.typeRegistry;",
      "right" : "typeRegistry = state.typeRegistry;",
      "info" : "ExpressionStatement[69308-69342]:ExpressionStatement[69285-69319]"
    }, {
      "left" : "setLifeCycleStage(state.lifeCycleStage);",
      "right" : "setLifeCycleStage(state.lifeCycleStage);",
      "info" : "ExpressionStatement[69347-69387]:ExpressionStatement[69324-69364]"
    }, {
      "left" : "injectedLibraries.clear();",
      "right" : "injectedLibraries.clear();",
      "info" : "ExpressionStatement[69393-69419]:ExpressionStatement[69370-69396]"
    }, {
      "left" : "injectedLibraries.putAll(state.injectedLibraries);",
      "right" : "injectedLibraries.putAll(state.injectedLibraries);",
      "info" : "ExpressionStatement[69424-69474]:ExpressionStatement[69401-69451]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[69482-69500]:MarkerAnnotation[69459-69477]"
    }, {
      "left" : "List<CompilerInput>",
      "right" : "List<CompilerInput>",
      "info" : "ParameterizedType[69503-69522]:ParameterizedType[69480-69499]"
    }, {
      "left" : "getInputsForTesting",
      "right" : "getInputsForTesting",
      "info" : "SimpleName[69523-69542]:SimpleName[69500-69519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69545-69569]:Block[69522-69546]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[69551-69565]:ReturnStatement[69528-69542]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[69573-69591]:MarkerAnnotation[69550-69568]"
    }, {
      "left" : "List<CompilerInput>",
      "right" : "List<CompilerInput>",
      "info" : "ParameterizedType[69594-69613]:ParameterizedType[69571-69590]"
    }, {
      "left" : "getExternsForTesting",
      "right" : "getExternsForTesting",
      "info" : "SimpleName[69614-69634]:SimpleName[69591-69611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69637-69662]:Block[69614-69639]"
    }, {
      "left" : "return externs;",
      "right" : "return externs;",
      "info" : "ReturnStatement[69643-69658]:ReturnStatement[69620-69635]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[69666-69675]:MarkerAnnotation[69643-69652]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[69678-69685]:PrimitiveType[69655-69662]"
    }, {
      "left" : "hasRegExpGlobalReferences",
      "right" : "hasRegExpGlobalReferences",
      "info" : "SimpleName[69686-69711]:SimpleName[69663-69688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69714-69757]:Block[69691-69734]"
    }, {
      "left" : "return hasRegExpGlobalReferences;",
      "right" : "return hasRegExpGlobalReferences;",
      "info" : "ReturnStatement[69720-69753]:ReturnStatement[69697-69730]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[69761-69770]:MarkerAnnotation[69738-69747]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[69773-69777]:PrimitiveType[69750-69754]"
    }, {
      "left" : "setHasRegExpGlobalReferences",
      "right" : "setHasRegExpGlobalReferences",
      "info" : "SimpleName[69778-69806]:SimpleName[69755-69783]"
    }, {
      "left" : "boolean references",
      "right" : "boolean references",
      "info" : "SingleVariableDeclaration[69807-69825]:SingleVariableDeclaration[69784-69802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69827-69876]:Block[69804-69853]"
    }, {
      "left" : "hasRegExpGlobalReferences = references;",
      "right" : "hasRegExpGlobalReferences = references;",
      "info" : "ExpressionStatement[69833-69872]:ExpressionStatement[69810-69849]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[69880-69889]:MarkerAnnotation[69857-69866]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[69892-69896]:PrimitiveType[69869-69873]"
    }, {
      "left" : "updateGlobalVarReferences",
      "right" : "updateGlobalVarReferences",
      "info" : "SimpleName[69897-69922]:SimpleName[69874-69899]"
    }, {
      "left" : "Map<Var, ReferenceCollection> refMapPatch",
      "right" : "Map<Var, ReferenceCollection> refMapPatch",
      "info" : "SingleVariableDeclaration[69923-69964]:SingleVariableDeclaration[69900-69941]"
    }, {
      "left" : "Node collectionRoot",
      "right" : "Node collectionRoot",
      "info" : "SingleVariableDeclaration[69972-69991]:SingleVariableDeclaration[69949-69968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69993-70301]:Block[69970-70278]"
    }, {
      "left" : "Preconditions.checkState(collectionRoot.isScript()\n        || collectionRoot.isBlock());",
      "right" : "Preconditions.checkState(collectionRoot.isScript()\n        || collectionRoot.isBlock());",
      "info" : "ExpressionStatement[69999-70087]:ExpressionStatement[69976-70064]"
    }, {
      "left" : "if (globalRefMap == null)",
      "right" : "if (globalRefMap == null)",
      "info" : "IfStatement[70092-70224]:IfStatement[70069-70201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70118-70224]:Block[70095-70201]"
    }, {
      "left" : "globalRefMap = new GlobalVarReferenceMap(getInputsInOrder(),\n          getExternsInOrder());",
      "right" : "globalRefMap = new GlobalVarReferenceMap(getInputsInOrder(),\n          getExternsInOrder());",
      "info" : "ExpressionStatement[70126-70218]:ExpressionStatement[70103-70195]"
    }, {
      "left" : "globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);",
      "right" : "globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);",
      "info" : "ExpressionStatement[70229-70297]:ExpressionStatement[70206-70274]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70305-70314]:MarkerAnnotation[70282-70291]"
    }, {
      "left" : "GlobalVarReferenceMap",
      "right" : "GlobalVarReferenceMap",
      "info" : "SimpleType[70317-70338]:SimpleType[70294-70315]"
    }, {
      "left" : "getGlobalVarReferences",
      "right" : "getGlobalVarReferences",
      "info" : "SimpleName[70339-70361]:SimpleName[70316-70338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70364-70394]:Block[70341-70371]"
    }, {
      "left" : "return globalRefMap;",
      "right" : "return globalRefMap;",
      "info" : "ReturnStatement[70370-70390]:ReturnStatement[70347-70367]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70398-70407]:MarkerAnnotation[70375-70384]"
    }, {
      "left" : "CompilerInput",
      "right" : "CompilerInput",
      "info" : "SimpleType[70410-70423]:SimpleType[70387-70400]"
    }, {
      "left" : "getSynthesizedExternsInput",
      "right" : "getSynthesizedExternsInput",
      "info" : "SimpleName[70424-70450]:SimpleName[70401-70427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70453-70610]:Block[70430-70587]"
    }, {
      "left" : "if (synthesizedExternsInput == null)",
      "right" : "if (synthesizedExternsInput == null)",
      "info" : "IfStatement[70459-70570]:IfStatement[70436-70547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70496-70570]:Block[70473-70547]"
    }, {
      "left" : "synthesizedExternsInput = newExternInput(SYNTHETIC_EXTERNS);",
      "right" : "synthesizedExternsInput = newExternInput(SYNTHETIC_EXTERNS);",
      "info" : "ExpressionStatement[70504-70564]:ExpressionStatement[70481-70541]"
    }, {
      "left" : "return synthesizedExternsInput;",
      "right" : "return synthesizedExternsInput;",
      "info" : "ReturnStatement[70575-70606]:ReturnStatement[70552-70583]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70614-70623]:MarkerAnnotation[70591-70600]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[70626-70632]:Modifier[70603-70609]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[70633-70639]:PrimitiveType[70610-70616]"
    }, {
      "left" : "getProgress",
      "right" : "getProgress",
      "info" : "SimpleName[70640-70651]:SimpleName[70617-70628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70654-70680]:Block[70631-70657]"
    }, {
      "left" : "return progress;",
      "right" : "return progress;",
      "info" : "ReturnStatement[70660-70676]:ReturnStatement[70637-70653]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70684-70693]:MarkerAnnotation[70661-70670]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[70696-70700]:PrimitiveType[70673-70677]"
    }, {
      "left" : "setProgress",
      "right" : "setProgress",
      "info" : "SimpleName[70701-70712]:SimpleName[70678-70689]"
    }, {
      "left" : "double newProgress",
      "right" : "double newProgress",
      "info" : "SingleVariableDeclaration[70713-70731]:SingleVariableDeclaration[70690-70708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70733-70896]:Block[70710-70873]"
    }, {
      "left" : "if (newProgress > 1.0)",
      "right" : "if (newProgress > 1.0)",
      "info" : "IfStatement[70739-70892]:IfStatement[70716-70869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70762-70791]:Block[70739-70768]"
    }, {
      "left" : "progress = 1.0;",
      "right" : "progress = 1.0;",
      "info" : "ExpressionStatement[70770-70785]:ExpressionStatement[70747-70762]"
    }, {
      "left" : "if (newProgress < 0.0)",
      "right" : "if (newProgress < 0.0)",
      "info" : "IfStatement[70797-70892]:IfStatement[70774-70869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70820-70849]:Block[70797-70826]"
    }, {
      "left" : "progress = 0.0;",
      "right" : "progress = 0.0;",
      "info" : "ExpressionStatement[70828-70843]:ExpressionStatement[70805-70820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70855-70892]:Block[70832-70869]"
    }, {
      "left" : "progress = newProgress;",
      "right" : "progress = newProgress;",
      "info" : "ExpressionStatement[70863-70886]:ExpressionStatement[70840-70863]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71188-71194]:Modifier[71165-71171]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[71195-71199]:PrimitiveType[71172-71176]"
    }, {
      "left" : "replaceScript",
      "right" : "replaceScript",
      "info" : "SimpleName[71200-71213]:SimpleName[71177-71190]"
    }, {
      "left" : "JsAst ast",
      "right" : "JsAst ast",
      "info" : "SingleVariableDeclaration[71214-71223]:SingleVariableDeclaration[71191-71200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71225-71444]:Block[71202-71421]"
    }, {
      "left" : "CompilerInput input = this.getInput(ast.getInputId());",
      "right" : "CompilerInput input = this.getInput(ast.getInputId());",
      "info" : "VariableDeclarationStatement[71231-71285]:VariableDeclarationStatement[71208-71262]"
    }, {
      "left" : "if (!replaceIncrementalSourceAst(ast))",
      "right" : "if (!replaceIncrementalSourceAst(ast))",
      "info" : "IfStatement[71290-71350]:IfStatement[71267-71327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71329-71350]:Block[71306-71327]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[71337-71344]:ReturnStatement[71314-71321]"
    }, {
      "left" : "Node originalRoot = input.getAstRoot(this);",
      "right" : "Node originalRoot = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[71355-71398]:VariableDeclarationStatement[71332-71375]"
    }, {
      "left" : "processNewScript(ast, originalRoot);",
      "right" : "processNewScript(ast, originalRoot);",
      "info" : "ExpressionStatement[71404-71440]:ExpressionStatement[71381-71417]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71688-71694]:Modifier[71665-71671]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[71695-71699]:PrimitiveType[71672-71676]"
    }, {
      "left" : "addNewScript",
      "right" : "addNewScript",
      "info" : "SimpleName[71700-71712]:SimpleName[71677-71689]"
    }, {
      "left" : "JsAst ast",
      "right" : "JsAst ast",
      "info" : "SingleVariableDeclaration[71713-71722]:SingleVariableDeclaration[71690-71699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71724-72039]:Block[71701-72016]"
    }, {
      "left" : "if (!addNewSourceAst(ast))",
      "right" : "if (!addNewSourceAst(ast))",
      "info" : "IfStatement[71730-71778]:IfStatement[71707-71755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71757-71778]:Block[71734-71755]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[71765-71772]:ReturnStatement[71742-71749]"
    }, {
      "left" : "Node emptyScript = new Node(Token.SCRIPT);",
      "right" : "Node emptyScript = new Node(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[71783-71825]:VariableDeclarationStatement[71760-71802]"
    }, {
      "left" : "InputId inputId = ast.getInputId();",
      "right" : "InputId inputId = ast.getInputId();",
      "info" : "VariableDeclarationStatement[71830-71865]:VariableDeclarationStatement[71807-71842]"
    }, {
      "left" : "emptyScript.setInputId(inputId);",
      "right" : "emptyScript.setInputId(inputId);",
      "info" : "ExpressionStatement[71870-71902]:ExpressionStatement[71847-71879]"
    }, {
      "left" : "emptyScript.setStaticSourceFile(\n        SourceFile.fromCode(inputId.getIdName(), \"\"));",
      "right" : "emptyScript.setStaticSourceFile(\n        SourceFile.fromCode(inputId.getIdName(), \"\"));",
      "info" : "ExpressionStatement[71907-71994]:ExpressionStatement[71884-71971]"
    }, {
      "left" : "processNewScript(ast, emptyScript);",
      "right" : "processNewScript(ast, emptyScript);",
      "info" : "ExpressionStatement[72000-72035]:ExpressionStatement[71977-72012]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[72043-72050]:Modifier[72020-72027]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[72051-72055]:PrimitiveType[72028-72032]"
    }, {
      "left" : "processNewScript",
      "right" : "processNewScript",
      "info" : "SimpleName[72056-72072]:SimpleName[72033-72049]"
    }, {
      "left" : "JsAst ast",
      "right" : "JsAst ast",
      "info" : "SingleVariableDeclaration[72073-72082]:SingleVariableDeclaration[72050-72059]"
    }, {
      "left" : "Node originalRoot",
      "right" : "Node originalRoot",
      "info" : "SingleVariableDeclaration[72084-72101]:SingleVariableDeclaration[72061-72078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72103-72617]:Block[72080-72594]"
    }, {
      "left" : "Node js = ast.getAstRoot(this);",
      "right" : "Node js = ast.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[72109-72140]:VariableDeclarationStatement[72086-72117]"
    }, {
      "left" : "Preconditions.checkNotNull(js);",
      "right" : "Preconditions.checkNotNull(js);",
      "info" : "ExpressionStatement[72145-72176]:ExpressionStatement[72122-72153]"
    }, {
      "left" : "runHotSwap(originalRoot, js, this.getCleanupPassConfig());",
      "right" : "runHotSwap(originalRoot, js, this.getCleanupPassConfig());",
      "info" : "ExpressionStatement[72182-72240]:ExpressionStatement[72159-72217]"
    }, {
      "left" : "runHotSwapPass(null, null, ensureDefaultPassConfig().garbageCollectChecks);",
      "right" : "runHotSwapPass(null, null, ensureDefaultPassConfig().garbageCollectChecks);",
      "info" : "ExpressionStatement[72387-72462]:ExpressionStatement[72364-72439]"
    }, {
      "left" : "this.getTypeRegistry().clearNamedTypes();",
      "right" : "this.getTypeRegistry().clearNamedTypes();",
      "info" : "ExpressionStatement[72468-72509]:ExpressionStatement[72445-72486]"
    }, {
      "left" : "this.removeSyntheticVarsInput();",
      "right" : "this.removeSyntheticVarsInput();",
      "info" : "ExpressionStatement[72514-72546]:ExpressionStatement[72491-72523]"
    }, {
      "left" : "runHotSwap(originalRoot, js, this.ensureDefaultPassConfig());",
      "right" : "runHotSwap(originalRoot, js, this.ensureDefaultPassConfig());",
      "info" : "ExpressionStatement[72552-72613]:ExpressionStatement[72529-72590]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[72713-72720]:Modifier[72690-72697]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[72721-72725]:PrimitiveType[72698-72702]"
    }, {
      "left" : "runHotSwap",
      "right" : "runHotSwap",
      "info" : "SimpleName[72726-72736]:SimpleName[72703-72713]"
    }, {
      "left" : "Node originalRoot",
      "right" : "Node originalRoot",
      "info" : "SingleVariableDeclaration[72744-72761]:SingleVariableDeclaration[72721-72738]"
    }, {
      "left" : "Node js",
      "right" : "Node js",
      "info" : "SingleVariableDeclaration[72763-72770]:SingleVariableDeclaration[72740-72747]"
    }, {
      "left" : "PassConfig passConfig",
      "right" : "PassConfig passConfig",
      "info" : "SingleVariableDeclaration[72772-72793]:SingleVariableDeclaration[72749-72770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72795-72920]:Block[72772-72897]"
    }, {
      "left" : "for (PassFactory passFactory : passConfig.getChecks())",
      "right" : "for (PassFactory passFactory : passConfig.getChecks())",
      "info" : "EnhancedForStatement[72801-72916]:EnhancedForStatement[72778-72893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72856-72916]:Block[72833-72893]"
    }, {
      "left" : "runHotSwapPass(originalRoot, js, passFactory);",
      "right" : "runHotSwapPass(originalRoot, js, passFactory);",
      "info" : "ExpressionStatement[72864-72910]:ExpressionStatement[72841-72887]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[72924-72931]:Modifier[72901-72908]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[72932-72936]:PrimitiveType[72909-72913]"
    }, {
      "left" : "runHotSwapPass",
      "right" : "runHotSwapPass",
      "info" : "SimpleName[72937-72951]:SimpleName[72914-72928]"
    }, {
      "left" : "Node originalRoot",
      "right" : "Node originalRoot",
      "info" : "SingleVariableDeclaration[72959-72976]:SingleVariableDeclaration[72936-72953]"
    }, {
      "left" : "Node js",
      "right" : "Node js",
      "info" : "SingleVariableDeclaration[72978-72985]:SingleVariableDeclaration[72955-72962]"
    }, {
      "left" : "PassFactory passFactory",
      "right" : "PassFactory passFactory",
      "info" : "SingleVariableDeclaration[72987-73010]:SingleVariableDeclaration[72964-72987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73012-73231]:Block[72989-73208]"
    }, {
      "left" : "HotSwapCompilerPass pass = passFactory.getHotSwapPass(this);",
      "right" : "HotSwapCompilerPass pass = passFactory.getHotSwapPass(this);",
      "info" : "VariableDeclarationStatement[73018-73078]:VariableDeclarationStatement[72995-73055]"
    }, {
      "left" : "if (pass != null)",
      "right" : "if (pass != null)",
      "info" : "IfStatement[73083-73227]:IfStatement[73060-73204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73101-73227]:Block[73078-73204]"
    }, {
      "left" : "logger.info(\"Performing HotSwap for pass \" + passFactory.getName());",
      "right" : "logger.info(\"Performing HotSwap for pass \" + passFactory.getName());",
      "info" : "ExpressionStatement[73109-73177]:ExpressionStatement[73086-73154]"
    }, {
      "left" : "pass.hotSwapScript(js, originalRoot);",
      "right" : "pass.hotSwapScript(js, originalRoot);",
      "info" : "ExpressionStatement[73184-73221]:ExpressionStatement[73161-73198]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[73235-73242]:Modifier[73212-73219]"
    }, {
      "left" : "PassConfig",
      "right" : "PassConfig",
      "info" : "SimpleType[73243-73253]:SimpleType[73220-73230]"
    }, {
      "left" : "getCleanupPassConfig",
      "right" : "getCleanupPassConfig",
      "info" : "SimpleName[73254-73274]:SimpleName[73231-73251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73277-73326]:Block[73254-73303]"
    }, {
      "left" : "return new CleanupPasses(getOptions());",
      "right" : "return new CleanupPasses(getOptions());",
      "info" : "ReturnStatement[73283-73322]:ReturnStatement[73260-73299]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[73330-73337]:Modifier[73307-73314]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[73338-73342]:PrimitiveType[73315-73319]"
    }, {
      "left" : "removeSyntheticVarsInput",
      "right" : "removeSyntheticVarsInput",
      "info" : "SimpleName[73343-73367]:SimpleName[73320-73344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73370-73475]:Block[73347-73452]"
    }, {
      "left" : "String sourceName = Compiler.SYNTHETIC_EXTERNS;",
      "right" : "String sourceName = Compiler.SYNTHETIC_EXTERNS;",
      "info" : "VariableDeclarationStatement[73376-73423]:VariableDeclarationStatement[73353-73400]"
    }, {
      "left" : "removeExternInput(new InputId(sourceName));",
      "right" : "removeExternInput(new InputId(sourceName));",
      "info" : "ExpressionStatement[73428-73471]:ExpressionStatement[73405-73448]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[73479-73488]:MarkerAnnotation[73456-73465]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[73491-73495]:SimpleType[73468-73472]"
    }, {
      "left" : "ensureLibraryInjected",
      "right" : "ensureLibraryInjected",
      "info" : "SimpleName[73496-73517]:SimpleName[73473-73494]"
    }, {
      "left" : "String resourceName",
      "right" : "String resourceName",
      "info" : "SingleVariableDeclaration[73518-73537]:SingleVariableDeclaration[73495-73514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73539-74216]:Block[73516-74193]"
    }, {
      "left" : "if (injectedLibraries.containsKey(resourceName))",
      "right" : "if (injectedLibraries.containsKey(resourceName))",
      "info" : "IfStatement[73545-73620]:IfStatement[73522-73597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73594-73620]:Block[73571-73597]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[73602-73614]:ReturnStatement[73579-73591]"
    }, {
      "left" : "boolean isBase = \"base\".equals(resourceName);",
      "right" : "boolean isBase = \"base\".equals(resourceName);",
      "info" : "VariableDeclarationStatement[73668-73713]:VariableDeclarationStatement[73645-73690]"
    }, {
      "left" : "if (!isBase)",
      "right" : "if (!isBase)",
      "info" : "IfStatement[73718-73775]:IfStatement[73695-73752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73731-73775]:Block[73708-73752]"
    }, {
      "left" : "ensureLibraryInjected(\"base\");",
      "right" : "ensureLibraryInjected(\"base\");",
      "info" : "ExpressionStatement[73739-73769]:ExpressionStatement[73716-73746]"
    }, {
      "left" : "Node firstChild = loadLibraryCode(resourceName).removeChildren();",
      "right" : "Node firstChild = loadLibraryCode(resourceName).removeChildren();",
      "info" : "VariableDeclarationStatement[73781-73846]:VariableDeclarationStatement[73758-73823]"
    }, {
      "left" : "Node lastChild = firstChild.getLastSibling();",
      "right" : "Node lastChild = firstChild.getLastSibling();",
      "info" : "VariableDeclarationStatement[73851-73896]:VariableDeclarationStatement[73828-73873]"
    }, {
      "left" : "Node parent = getNodeForCodeInsertion(null);",
      "right" : "Node parent = getNodeForCodeInsertion(null);",
      "info" : "VariableDeclarationStatement[73902-73946]:VariableDeclarationStatement[73879-73923]"
    }, {
      "left" : "if (isBase)",
      "right" : "if (isBase)",
      "info" : "IfStatement[73951-74113]:IfStatement[73928-74090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73963-74015]:Block[73940-73992]"
    }, {
      "left" : "parent.addChildrenToFront(firstChild);",
      "right" : "parent.addChildrenToFront(firstChild);",
      "info" : "ExpressionStatement[73971-74009]:ExpressionStatement[73948-73986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74021-74113]:Block[73998-74090]"
    }, {
      "left" : "parent.addChildrenAfter(\n          firstChild, injectedLibraries.get(\"base\"));",
      "right" : "parent.addChildrenAfter(\n          firstChild, injectedLibraries.get(\"base\"));",
      "info" : "ExpressionStatement[74029-74107]:ExpressionStatement[74006-74084]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[74118-74137]:ExpressionStatement[74095-74114]"
    }, {
      "left" : "injectedLibraries.put(resourceName, lastChild);",
      "right" : "injectedLibraries.put(resourceName, lastChild);",
      "info" : "ExpressionStatement[74143-74190]:ExpressionStatement[74120-74167]"
    }, {
      "left" : "return lastChild;",
      "right" : "return lastChild;",
      "info" : "ReturnStatement[74195-74212]:ReturnStatement[74172-74189]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[74258-74276]:MarkerAnnotation[74235-74253]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[74279-74283]:SimpleType[74256-74260]"
    }, {
      "left" : "loadLibraryCode",
      "right" : "loadLibraryCode",
      "info" : "SimpleName[74284-74299]:SimpleName[74261-74276]"
    }, {
      "left" : "String resourceName",
      "right" : "String resourceName",
      "info" : "SingleVariableDeclaration[74300-74319]:SingleVariableDeclaration[74277-74296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74321-74763]:Block[74298-74740]"
    }, {
      "left" : "String originalCode;",
      "right" : "String originalCode;",
      "info" : "VariableDeclarationStatement[74327-74347]:VariableDeclarationStatement[74304-74324]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[74352-74625]:TryStatement[74329-74602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74356-74558]:Block[74333-74535]"
    }, {
      "left" : "originalCode = CharStreams.toString(new InputStreamReader(\n          Compiler.class.getResourceAsStream(\n              String.format(\"js/%s.js\", resourceName)),\n          Charsets.UTF_8));",
      "right" : "originalCode = CharStreams.toString(new InputStreamReader(\n          Compiler.class.getResourceAsStream(\n              String.format(\"js/%s.js\", resourceName)),\n          Charsets.UTF_8));",
      "info" : "ExpressionStatement[74364-74552]:ExpressionStatement[74341-74529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74581-74625]:Block[74558-74602]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[74589-74619]:ThrowStatement[74566-74596]"
    }, {
      "left" : "return Normalize.parseAndNormalizeSyntheticCode(\n        this, originalCode,\n        String.format(\"jscomp_%s_\", resourceName));",
      "right" : "return Normalize.parseAndNormalizeSyntheticCode(\n        this, originalCode,\n        String.format(\"jscomp_%s_\", resourceName));",
      "info" : "ReturnStatement[74631-74759]:ReturnStatement[74608-74736]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[74825-74831]:Modifier[74802-74808]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[74832-74838]:Modifier[74809-74815]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[74839-74845]:SimpleType[74816-74822]"
    }, {
      "left" : "getReleaseVersion",
      "right" : "getReleaseVersion",
      "info" : "SimpleName[74846-74863]:SimpleName[74823-74840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74866-74991]:Block[74843-74968]"
    }, {
      "left" : "ResourceBundle config = ResourceBundle.getBundle(CONFIG_RESOURCE);",
      "right" : "ResourceBundle config = ResourceBundle.getBundle(CONFIG_RESOURCE);",
      "info" : "VariableDeclarationStatement[74872-74938]:VariableDeclarationStatement[74849-74915]"
    }, {
      "left" : "return config.getString(\"compiler.version\");",
      "right" : "return config.getString(\"compiler.version\");",
      "info" : "ReturnStatement[74943-74987]:ReturnStatement[74920-74964]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[75050-75056]:Modifier[75027-75033]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[75057-75063]:Modifier[75034-75040]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[75064-75070]:SimpleType[75041-75047]"
    }, {
      "left" : "getReleaseDate",
      "right" : "getReleaseDate",
      "info" : "SimpleName[75071-75085]:SimpleName[75048-75062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75088-75210]:Block[75065-75187]"
    }, {
      "left" : "ResourceBundle config = ResourceBundle.getBundle(CONFIG_RESOURCE);",
      "right" : "ResourceBundle config = ResourceBundle.getBundle(CONFIG_RESOURCE);",
      "info" : "VariableDeclarationStatement[75094-75160]:VariableDeclarationStatement[75071-75137]"
    }, {
      "left" : "return config.getString(\"compiler.date\");",
      "right" : "return config.getString(\"compiler.date\");",
      "info" : "ReturnStatement[75165-75206]:ReturnStatement[75142-75183]"
    } ]
  },
  "interFileMappings" : { }
}