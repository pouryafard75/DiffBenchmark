{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SortsTiming",
      "right" : "SortsTiming",
      "info" : "TypeDeclaration[572-31386]:TypeDeclaration[572-31976]"
    }, {
      "left" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"#.###\");",
      "right" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"#.###\");",
      "info" : "FieldDeclaration[604-675]:FieldDeclaration[604-675]"
    }, {
      "left" : "private static final int SIZE = 100000;",
      "right" : "private static final int SIZE = 100000;",
      "info" : "FieldDeclaration[680-719]:FieldDeclaration[680-719]"
    }, {
      "left" : "private static final boolean showResult = false;",
      "right" : "private static final boolean showResult = false;",
      "info" : "FieldDeclaration[725-773]:FieldDeclaration[725-773]"
    }, {
      "left" : "private static final boolean showComparison = true;",
      "right" : "private static final boolean showComparison = true;",
      "info" : "FieldDeclaration[778-829]:FieldDeclaration[778-829]"
    }, {
      "left" : "private static final boolean checkResults = true;",
      "right" : "private static final boolean checkResults = true;",
      "info" : "FieldDeclaration[834-883]:FieldDeclaration[834-883]"
    }, {
      "left" : "private static int insertionCount = 0;",
      "right" : "private static int insertionCount = 0;",
      "info" : "FieldDeclaration[889-927]:FieldDeclaration[889-927]"
    }, {
      "left" : "private static final double[] insertionResults = new double[1 * 3];",
      "right" : "private static final double[] insertionResults = new double[1 * 3];",
      "info" : "FieldDeclaration[932-999]:FieldDeclaration[932-999]"
    }, {
      "left" : "private static int bubbleCount = 0;",
      "right" : "private static int bubbleCount = 0;",
      "info" : "FieldDeclaration[1004-1039]:FieldDeclaration[1004-1039]"
    }, {
      "left" : "private static final double[] bubbleResults = new double[1 * 3];",
      "right" : "private static final double[] bubbleResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1044-1108]:FieldDeclaration[1044-1108]"
    }, {
      "left" : "private static int shellCount = 0;",
      "right" : "private static int shellCount = 0;",
      "info" : "FieldDeclaration[1113-1147]:FieldDeclaration[1113-1147]"
    }, {
      "left" : "private static final double[] shellResults = new double[1 * 3];",
      "right" : "private static final double[] shellResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1152-1215]:FieldDeclaration[1152-1215]"
    }, {
      "left" : "private static int mergeInPlaceCount = 0;",
      "right" : "private static int mergeInPlaceCount = 0;",
      "info" : "FieldDeclaration[1220-1261]:FieldDeclaration[1220-1261]"
    }, {
      "left" : "private static final double[] mergeInPlaceResults = new double[1 * 3];",
      "right" : "private static final double[] mergeInPlaceResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1266-1336]:FieldDeclaration[1266-1336]"
    }, {
      "left" : "private static int mergeNotInPlaceCount = 0;",
      "right" : "private static int mergeNotInPlaceCount = 0;",
      "info" : "FieldDeclaration[1341-1385]:FieldDeclaration[1341-1385]"
    }, {
      "left" : "private static final double[] mergeNotInPlaceResults = new double[1 * 3];",
      "right" : "private static final double[] mergeNotInPlaceResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1390-1463]:FieldDeclaration[1390-1463]"
    }, {
      "left" : "private static int quickCount = 0;",
      "right" : "private static int quickCount = 0;",
      "info" : "FieldDeclaration[1468-1502]:FieldDeclaration[1468-1502]"
    }, {
      "left" : "private static final double[] quickResults = new double[3 * 3];",
      "right" : "private static final double[] quickResults = new double[3 * 3];",
      "info" : "FieldDeclaration[1507-1570]:FieldDeclaration[1507-1570]"
    }, {
      "left" : "private static int heapCount = 0;",
      "right" : "private static int heapCount = 0;",
      "info" : "FieldDeclaration[1575-1608]:FieldDeclaration[1575-1608]"
    }, {
      "left" : "private static final double[] heapResults = new double[1 * 3];",
      "right" : "private static final double[] heapResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1613-1675]:FieldDeclaration[1613-1675]"
    }, {
      "left" : "private static int countingCount = 0;",
      "right" : "private static int countingCount = 0;",
      "info" : "FieldDeclaration[1680-1717]:FieldDeclaration[1680-1717]"
    }, {
      "left" : "private static final double[] countingResults = new double[1 * 3];",
      "right" : "private static final double[] countingResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1722-1788]:FieldDeclaration[1722-1788]"
    }, {
      "left" : "private static int radixCount = 0;",
      "right" : "private static int radixCount = 0;",
      "info" : "FieldDeclaration[1793-1827]:FieldDeclaration[1793-1827]"
    }, {
      "left" : "private static final double[] radixResults = new double[1 * 3];",
      "right" : "private static final double[] radixResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1832-1895]:FieldDeclaration[1832-1895]"
    }, {
      "left" : "private static int americanFlagCount = 0;",
      "right" : "private static int americanFlagCount = 0;",
      "info" : "FieldDeclaration[1900-1941]:FieldDeclaration[1900-1941]"
    }, {
      "left" : "private static final double[] americanFlagResults = new double[1 * 3];",
      "right" : "private static final double[] americanFlagResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1946-2016]:FieldDeclaration[1946-2016]"
    }, {
      "left" : "private static final boolean showInsertion = true;",
      "right" : "private static final boolean showInsertion = true;",
      "info" : "FieldDeclaration[2022-2072]:FieldDeclaration[2022-2072]"
    }, {
      "left" : "private static final boolean showBubble = true;",
      "right" : "private static final boolean showBubble = true;",
      "info" : "FieldDeclaration[2077-2124]:FieldDeclaration[2077-2124]"
    }, {
      "left" : "private static final boolean showShell = true;",
      "right" : "private static final boolean showShell = true;",
      "info" : "FieldDeclaration[2129-2175]:FieldDeclaration[2129-2175]"
    }, {
      "left" : "private static final boolean showMergeInPlace = true;",
      "right" : "private static final boolean showMergeInPlace = true;",
      "info" : "FieldDeclaration[2180-2233]:FieldDeclaration[2180-2233]"
    }, {
      "left" : "private static final boolean showMergeNotInPlace = true;",
      "right" : "private static final boolean showMergeNotInPlace = true;",
      "info" : "FieldDeclaration[2238-2294]:FieldDeclaration[2238-2294]"
    }, {
      "left" : "private static final boolean showQuick = true;",
      "right" : "private static final boolean showQuick = true;",
      "info" : "FieldDeclaration[2299-2345]:FieldDeclaration[2299-2345]"
    }, {
      "left" : "private static final boolean showHeap = true;",
      "right" : "private static final boolean showHeap = true;",
      "info" : "FieldDeclaration[2350-2395]:FieldDeclaration[2350-2395]"
    }, {
      "left" : "private static final boolean showCounting = true;",
      "right" : "private static final boolean showCounting = true;",
      "info" : "FieldDeclaration[2400-2449]:FieldDeclaration[2400-2449]"
    }, {
      "left" : "private static final boolean showRadix = true;",
      "right" : "private static final boolean showRadix = true;",
      "info" : "FieldDeclaration[2454-2500]:FieldDeclaration[2454-2500]"
    }, {
      "left" : "private static final boolean showAmericanFlag = true;",
      "right" : "private static final boolean showAmericanFlag = true;",
      "info" : "FieldDeclaration[2505-2558]:FieldDeclaration[2505-2558]"
    }, {
      "left" : "private static Integer[] unsorted = null;",
      "right" : "private static Integer[] unsorted = null;",
      "info" : "FieldDeclaration[2564-2605]:FieldDeclaration[2564-2605]"
    }, {
      "left" : "private static Integer[] sorted = null;",
      "right" : "private static Integer[] sorted = null;",
      "info" : "FieldDeclaration[2610-2649]:FieldDeclaration[2610-2649]"
    }, {
      "left" : "private static Integer[] reverse = null;",
      "right" : "private static Integer[] reverse = null;",
      "info" : "FieldDeclaration[2654-2694]:FieldDeclaration[2654-2694]"
    }, {
      "left" : "public static void main(String[] args)",
      "right" : "public static void main(String[] args)",
      "info" : "MethodDeclaration[2700-27057]:MethodDeclaration[2700-27237]"
    }, {
      "left" : "private static final void showComparison()",
      "right" : "private static final void showComparison()",
      "info" : "MethodDeclaration[27063-30026]:MethodDeclaration[27243-30206]"
    }, {
      "left" : "private static final void showResult(Integer[] u, Integer[] r)",
      "right" : "private static final void showResult(Integer[] u, Integer[] r)",
      "info" : "MethodDeclaration[30032-30234]:MethodDeclaration[30212-30414]"
    }, {
      "left" : "private static final boolean check(Integer[] array)",
      "right" : "private static final boolean check(Integer[] array)",
      "info" : "MethodDeclaration[30240-30450]:MethodDeclaration[30420-30630]"
    }, {
      "left" : "public static final String print(Integer[] array)",
      "right" : "public static final String print(Integer[] array)",
      "info" : "MethodDeclaration[30456-30559]:MethodDeclaration[30636-30739]"
    }, {
      "left" : "public static final String print(Integer[] array, int start, int length)",
      "right" : "public static final String print(Integer[] array, int start, int length)",
      "info" : "MethodDeclaration[30565-30908]:MethodDeclaration[30745-31088]"
    }, {
      "left" : "public static final String printWithPivot(Integer[] array, int pivotIndex, int start, int length)",
      "right" : "public static final String printWithPivot(Integer[] array, int pivotIndex, int start, int length)",
      "info" : "MethodDeclaration[30914-31384]:MethodDeclaration[31094-31564]"
    } ],
    "mappings" : [
 {
      "left" : "String[] args",
      "right" : "String[] args",
      "info" : "SingleVariableDeclaration[2724-2737]:SingleVariableDeclaration[2724-2737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2739-27057]:Block[2739-27237]"
    }, {
      "left" : "System.out.println(\"Generating random array.\");",
      "right" : "System.out.println(\"Generating random array.\");",
      "info" : "ExpressionStatement[2749-2796]:ExpressionStatement[2749-2796]"
    }, {
      "left" : "Random random = new Random();",
      "right" : "Random random = new Random();",
      "info" : "VariableDeclarationStatement[2805-2834]:VariableDeclarationStatement[2805-2834]"
    }, {
      "left" : "unsorted = new Integer[SIZE];",
      "right" : "unsorted = new Integer[SIZE];",
      "info" : "ExpressionStatement[2843-2872]:ExpressionStatement[2843-2872]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[2881-2891]:VariableDeclarationStatement[2881-2891]"
    }, {
      "left" : "while (i < unsorted.length)",
      "right" : "while (i < unsorted.length)",
      "info" : "WhileStatement[2900-3028]:WhileStatement[2900-3028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2928-3028]:Block[2928-3028]"
    }, {
      "left" : "int j = random.nextInt(unsorted.length * 10);",
      "right" : "int j = random.nextInt(unsorted.length * 10);",
      "info" : "VariableDeclarationStatement[2942-2987]:VariableDeclarationStatement[2942-2987]"
    }, {
      "left" : "unsorted[i++] = j;",
      "right" : "unsorted[i++] = j;",
      "info" : "ExpressionStatement[3000-3018]:ExpressionStatement[3000-3018]"
    }, {
      "left" : "System.out.println(\"Generated random array.\");",
      "right" : "System.out.println(\"Generated random array.\");",
      "info" : "ExpressionStatement[3037-3083]:ExpressionStatement[3037-3083]"
    }, {
      "left" : "System.out.println(\"Generating sorted array.\");",
      "right" : "System.out.println(\"Generating sorted array.\");",
      "info" : "ExpressionStatement[3093-3140]:ExpressionStatement[3093-3140]"
    }, {
      "left" : "sorted = new Integer[SIZE];",
      "right" : "sorted = new Integer[SIZE];",
      "info" : "ExpressionStatement[3149-3176]:ExpressionStatement[3149-3176]"
    }, {
      "left" : "for (i = 0; i < sorted.length; i++)",
      "right" : "for (i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[3185-3259]:ForStatement[3185-3259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3221-3259]:Block[3221-3259]"
    }, {
      "left" : "sorted[i] = i;",
      "right" : "sorted[i] = i;",
      "info" : "ExpressionStatement[3235-3249]:ExpressionStatement[3235-3249]"
    }, {
      "left" : "System.out.println(\"Generated sorted array.\");",
      "right" : "System.out.println(\"Generated sorted array.\");",
      "info" : "ExpressionStatement[3268-3314]:ExpressionStatement[3268-3314]"
    }, {
      "left" : "System.out.println(\"Generating reverse sorted array.\");",
      "right" : "System.out.println(\"Generating reverse sorted array.\");",
      "info" : "ExpressionStatement[3324-3379]:ExpressionStatement[3324-3379]"
    }, {
      "left" : "reverse = new Integer[SIZE];",
      "right" : "reverse = new Integer[SIZE];",
      "info" : "ExpressionStatement[3388-3416]:ExpressionStatement[3388-3416]"
    }, {
      "left" : "for (i = (reverse.length - 1); i >= 0; i--)",
      "right" : "for (i = (reverse.length - 1); i >= 0; i--)",
      "info" : "ForStatement[3425-3521]:ForStatement[3425-3521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3469-3521]:Block[3469-3521]"
    }, {
      "left" : "reverse[i] = (SIZE - 1) - i;",
      "right" : "reverse[i] = (SIZE - 1) - i;",
      "info" : "ExpressionStatement[3483-3511]:ExpressionStatement[3483-3511]"
    }, {
      "left" : "System.out.println(\"Generated reverse sorted array.\");",
      "right" : "System.out.println(\"Generated reverse sorted array.\");",
      "info" : "ExpressionStatement[3530-3584]:ExpressionStatement[3530-3584]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[3593-3614]:ExpressionStatement[3593-3614]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[3623-3642]:ExpressionStatement[3623-3642]"
    }, {
      "left" : "System.out.println(\"Starting sorts...\");",
      "right" : "System.out.println(\"Starting sorts...\");",
      "info" : "ExpressionStatement[3652-3692]:ExpressionStatement[3652-3692]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[3701-3722]:ExpressionStatement[3701-3722]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[3731-3750]:ExpressionStatement[3731-3750]"
    }, {
      "left" : "if (showInsertion)",
      "right" : "if (showInsertion)",
      "info" : "IfStatement[3759-5720]:IfStatement[3759-5735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3778-5720]:Block[3778-5735]"
    }, {
      "left" : "long bInsertion = System.nanoTime();",
      "right" : "long bInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[3822-3858]:VariableDeclarationStatement[3822-3858]"
    }, {
      "left" : "Integer[] result = InsertionSort.sort(unsorted.clone());",
      "right" : "Integer[] result = InsertionSort.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[3871-3927]:VariableDeclarationStatement[3871-3927]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[3940-4036]:IfStatement[3940-4036]"
    }, {
      "left" : "System.err.println(\"InsertionSort failed.\");",
      "right" : "System.err.println(\"InsertionSort failed.\");",
      "info" : "ExpressionStatement[3992-4036]:ExpressionStatement[3992-4036]"
    }, {
      "left" : "long aInsertion = System.nanoTime();",
      "right" : "long aInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[4049-4085]:VariableDeclarationStatement[4049-4085]"
    }, {
      "left" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "right" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[4098-4157]:VariableDeclarationStatement[4098-4157]"
    }, {
      "left" : "System.out.println(\"Random: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[4170-4247]:ExpressionStatement[4170-4247]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[4260-4321]:IfStatement[4260-4321]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[4292-4321]:ExpressionStatement[4292-4321]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[4334-4412]:IfStatement[4334-4412]"
    }, {
      "left" : "insertionResults[insertionCount++] = diff;",
      "right" : "insertionResults[insertionCount++] = diff;",
      "info" : "ExpressionStatement[4370-4412]:ExpressionStatement[4370-4412]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[4425-4437]:ExpressionStatement[31744-31756]"
    }, {
      "left" : "bInsertion = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[4451-4482]:ExpressionStatement[4456-4487]"
    }, {
      "left" : "result = InsertionSort.sort(sorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[4495-4539]:ExpressionStatement[4500-4544]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[4552-4648]:IfStatement[4557-4653]"
    }, {
      "left" : "System.err.println(\"InsertionSort failed.\");",
      "right" : "System.err.println(\"InsertionSort failed.\");",
      "info" : "ExpressionStatement[4604-4648]:ExpressionStatement[4609-4653]"
    }, {
      "left" : "aInsertion = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[4661-4692]:ExpressionStatement[4666-4697]"
    }, {
      "left" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[4705-4757]:ExpressionStatement[4710-4762]"
    }, {
      "left" : "System.out.println(\"Sorted: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[4770-4847]:ExpressionStatement[4775-4852]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[4860-4919]:IfStatement[4865-4924]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[4892-4919]:ExpressionStatement[4897-4924]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[4932-5010]:IfStatement[4937-5015]"
    }, {
      "left" : "insertionResults[insertionCount++] = diff;",
      "right" : "insertionResults[insertionCount++] = diff;",
      "info" : "ExpressionStatement[4968-5010]:ExpressionStatement[4973-5015]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[5023-5035]:ExpressionStatement[31694-31706]"
    }, {
      "left" : "bInsertion = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[5049-5080]:ExpressionStatement[5059-5090]"
    }, {
      "left" : "result = InsertionSort.sort(reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[5093-5138]:ExpressionStatement[5103-5148]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[5151-5247]:IfStatement[5161-5257]"
    }, {
      "left" : "System.err.println(\"InsertionSort failed.\");",
      "right" : "System.err.println(\"InsertionSort failed.\");",
      "info" : "ExpressionStatement[5203-5247]:ExpressionStatement[5213-5257]"
    }, {
      "left" : "aInsertion = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[5260-5291]:ExpressionStatement[5270-5301]"
    }, {
      "left" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[5304-5356]:ExpressionStatement[5314-5366]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[5369-5454]:ExpressionStatement[5379-5464]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[5467-5527]:IfStatement[5477-5537]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[5499-5527]:ExpressionStatement[5509-5537]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[5540-5618]:IfStatement[5550-5628]"
    }, {
      "left" : "insertionResults[insertionCount++] = diff;",
      "right" : "insertionResults[insertionCount++] = diff;",
      "info" : "ExpressionStatement[5576-5618]:ExpressionStatement[5586-5628]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[5631-5643]:ExpressionStatement[5641-5658]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[5638-5640]:MethodInvocation[5641-5657]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[5657-5678]:ExpressionStatement[5672-5693]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[5691-5710]:ExpressionStatement[5706-5725]"
    }, {
      "left" : "if (showBubble)",
      "right" : "if (showBubble)",
      "info" : "IfStatement[5730-7604]:IfStatement[5745-7634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5746-7604]:Block[5761-7634]"
    }, {
      "left" : "long bBubble = System.nanoTime();",
      "right" : "long bBubble = System.nanoTime();",
      "info" : "VariableDeclarationStatement[5787-5820]:VariableDeclarationStatement[5802-5835]"
    }, {
      "left" : "Integer[] result = BubbleSort.sort(unsorted.clone());",
      "right" : "Integer[] result = BubbleSort.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[5833-5886]:VariableDeclarationStatement[5848-5901]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[5899-5992]:IfStatement[5914-6007]"
    }, {
      "left" : "System.err.println(\"BubbleSort failed.\");",
      "right" : "System.err.println(\"BubbleSort failed.\");",
      "info" : "ExpressionStatement[5951-5992]:ExpressionStatement[5966-6007]"
    }, {
      "left" : "long aBubble = System.nanoTime();",
      "right" : "long aBubble = System.nanoTime();",
      "info" : "VariableDeclarationStatement[6005-6038]:VariableDeclarationStatement[6020-6053]"
    }, {
      "left" : "double diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "right" : "double diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[6051-6104]:VariableDeclarationStatement[6066-6119]"
    }, {
      "left" : "System.out.println(\"Random: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[6117-6191]:ExpressionStatement[6132-6206]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[6204-6265]:IfStatement[6219-6280]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[6236-6265]:ExpressionStatement[6251-6280]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[6278-6350]:IfStatement[6293-6365]"
    }, {
      "left" : "bubbleResults[bubbleCount++] = diff;",
      "right" : "bubbleResults[bubbleCount++] = diff;",
      "info" : "ExpressionStatement[6314-6350]:ExpressionStatement[6329-6365]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[6363-6375]:ExpressionStatement[31719-31731]"
    }, {
      "left" : "bBubble = System.nanoTime();",
      "right" : "bBubble = System.nanoTime();",
      "info" : "ExpressionStatement[6389-6417]:ExpressionStatement[6409-6437]"
    }, {
      "left" : "result = BubbleSort.sort(sorted.clone());",
      "right" : "result = BubbleSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[6430-6471]:ExpressionStatement[6450-6491]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[6484-6577]:IfStatement[6504-6597]"
    }, {
      "left" : "System.err.println(\"BubbleSort failed.\");",
      "right" : "System.err.println(\"BubbleSort failed.\");",
      "info" : "ExpressionStatement[6536-6577]:ExpressionStatement[6556-6597]"
    }, {
      "left" : "aBubble = System.nanoTime();",
      "right" : "aBubble = System.nanoTime();",
      "info" : "ExpressionStatement[6590-6618]:ExpressionStatement[6610-6638]"
    }, {
      "left" : "diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "right" : "diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[6631-6677]:ExpressionStatement[6651-6697]"
    }, {
      "left" : "System.out.println(\"Sorted: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[6690-6764]:ExpressionStatement[6710-6784]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[6777-6836]:IfStatement[6797-6856]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[6809-6836]:ExpressionStatement[6829-6856]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[6849-6921]:IfStatement[6869-6941]"
    }, {
      "left" : "bubbleResults[bubbleCount++] = diff;",
      "right" : "bubbleResults[bubbleCount++] = diff;",
      "info" : "ExpressionStatement[6885-6921]:ExpressionStatement[6905-6941]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[6934-6946]:ExpressionStatement[6954-6971]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[6941-6943]:MethodInvocation[6954-6970]"
    }, {
      "left" : "bBubble = System.nanoTime();",
      "right" : "bBubble = System.nanoTime();",
      "info" : "ExpressionStatement[6960-6988]:ExpressionStatement[6985-7013]"
    }, {
      "left" : "result = BubbleSort.sort(reverse.clone());",
      "right" : "result = BubbleSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[7001-7043]:ExpressionStatement[7026-7068]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[7056-7149]:IfStatement[7081-7174]"
    }, {
      "left" : "System.err.println(\"BubbleSort failed.\");",
      "right" : "System.err.println(\"BubbleSort failed.\");",
      "info" : "ExpressionStatement[7108-7149]:ExpressionStatement[7133-7174]"
    }, {
      "left" : "aBubble = System.nanoTime();",
      "right" : "aBubble = System.nanoTime();",
      "info" : "ExpressionStatement[7162-7190]:ExpressionStatement[7187-7215]"
    }, {
      "left" : "diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "right" : "diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[7203-7249]:ExpressionStatement[7228-7274]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[7262-7344]:ExpressionStatement[7287-7369]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[7357-7417]:IfStatement[7382-7442]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[7389-7417]:ExpressionStatement[7414-7442]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[7430-7502]:IfStatement[7455-7527]"
    }, {
      "left" : "bubbleResults[bubbleCount++] = diff;",
      "right" : "bubbleResults[bubbleCount++] = diff;",
      "info" : "ExpressionStatement[7466-7502]:ExpressionStatement[7491-7527]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[7515-7527]:ExpressionStatement[7540-7557]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[7522-7524]:MethodInvocation[7540-7556]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[7541-7562]:ExpressionStatement[7571-7592]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[7575-7594]:ExpressionStatement[7605-7624]"
    }, {
      "left" : "if (showShell)",
      "right" : "if (showShell)",
      "info" : "IfStatement[7614-9539]:IfStatement[7644-9584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7629-9539]:Block[7659-9584]"
    }, {
      "left" : "int[] shells = new int[] { 10, 5, 3, 1 };",
      "right" : "int[] shells = new int[] { 10, 5, 3, 1 };",
      "info" : "VariableDeclarationStatement[7643-7684]:VariableDeclarationStatement[7673-7714]"
    }, {
      "left" : "long bShell = System.nanoTime();",
      "right" : "long bShell = System.nanoTime();",
      "info" : "VariableDeclarationStatement[7725-7757]:VariableDeclarationStatement[7755-7787]"
    }, {
      "left" : "Integer[] result = ShellSort.sort(shells, unsorted.clone());",
      "right" : "Integer[] result = ShellSort.sort(shells, unsorted.clone());",
      "info" : "VariableDeclarationStatement[7770-7830]:VariableDeclarationStatement[7800-7860]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[7843-7935]:IfStatement[7873-7965]"
    }, {
      "left" : "System.err.println(\"ShellSort failed.\");",
      "right" : "System.err.println(\"ShellSort failed.\");",
      "info" : "ExpressionStatement[7895-7935]:ExpressionStatement[7925-7965]"
    }, {
      "left" : "long aShell = System.nanoTime();",
      "right" : "long aShell = System.nanoTime();",
      "info" : "VariableDeclarationStatement[7948-7980]:VariableDeclarationStatement[7978-8010]"
    }, {
      "left" : "double diff = (aShell - bShell) / 1000000d / 1000d;",
      "right" : "double diff = (aShell - bShell) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[7993-8044]:VariableDeclarationStatement[8023-8074]"
    }, {
      "left" : "System.out.println(\"Random: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[8057-8130]:ExpressionStatement[8087-8160]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[8143-8204]:IfStatement[8173-8234]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[8175-8204]:ExpressionStatement[8205-8234]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[8217-8287]:IfStatement[8247-8317]"
    }, {
      "left" : "shellResults[shellCount++] = diff;",
      "right" : "shellResults[shellCount++] = diff;",
      "info" : "ExpressionStatement[8253-8287]:ExpressionStatement[8283-8317]"
    }, {
      "left" : "bShell = System.nanoTime();",
      "right" : "bShell = System.nanoTime();",
      "info" : "ExpressionStatement[8326-8353]:ExpressionStatement[8361-8388]"
    }, {
      "left" : "result = ShellSort.sort(shells, sorted.clone());",
      "right" : "result = ShellSort.sort(shells, sorted.clone());",
      "info" : "ExpressionStatement[8366-8414]:ExpressionStatement[8401-8449]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[8427-8519]:IfStatement[8462-8554]"
    }, {
      "left" : "System.err.println(\"ShellSort failed.\");",
      "right" : "System.err.println(\"ShellSort failed.\");",
      "info" : "ExpressionStatement[8479-8519]:ExpressionStatement[8514-8554]"
    }, {
      "left" : "aShell = System.nanoTime();",
      "right" : "aShell = System.nanoTime();",
      "info" : "ExpressionStatement[8532-8559]:ExpressionStatement[8567-8594]"
    }, {
      "left" : "diff = (aShell - bShell) / 1000000d / 1000d;",
      "right" : "diff = (aShell - bShell) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[8572-8616]:ExpressionStatement[8607-8651]"
    }, {
      "left" : "System.out.println(\"Sorted: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[8629-8702]:ExpressionStatement[8664-8737]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[8715-8774]:IfStatement[8750-8809]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[8747-8774]:ExpressionStatement[8782-8809]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[8787-8857]:IfStatement[8822-8892]"
    }, {
      "left" : "shellResults[shellCount++] = diff;",
      "right" : "shellResults[shellCount++] = diff;",
      "info" : "ExpressionStatement[8823-8857]:ExpressionStatement[8858-8892]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[8870-8882]:ExpressionStatement[8905-8922]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[8877-8879]:MethodInvocation[8905-8921]"
    }, {
      "left" : "bShell = System.nanoTime();",
      "right" : "bShell = System.nanoTime();",
      "info" : "ExpressionStatement[8896-8923]:ExpressionStatement[8936-8963]"
    }, {
      "left" : "result = ShellSort.sort(shells, reverse.clone());",
      "right" : "result = ShellSort.sort(shells, reverse.clone());",
      "info" : "ExpressionStatement[8936-8985]:ExpressionStatement[8976-9025]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[8998-9090]:IfStatement[9038-9130]"
    }, {
      "left" : "System.err.println(\"ShellSort failed.\");",
      "right" : "System.err.println(\"ShellSort failed.\");",
      "info" : "ExpressionStatement[9050-9090]:ExpressionStatement[9090-9130]"
    }, {
      "left" : "aShell = System.nanoTime();",
      "right" : "aShell = System.nanoTime();",
      "info" : "ExpressionStatement[9103-9130]:ExpressionStatement[9143-9170]"
    }, {
      "left" : "diff = (aShell - bShell) / 1000000d / 1000d;",
      "right" : "diff = (aShell - bShell) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[9143-9187]:ExpressionStatement[9183-9227]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[9200-9281]:ExpressionStatement[9240-9321]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[9294-9354]:IfStatement[9334-9394]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[9326-9354]:ExpressionStatement[9366-9394]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[9367-9437]:IfStatement[9407-9477]"
    }, {
      "left" : "shellResults[shellCount++] = diff;",
      "right" : "shellResults[shellCount++] = diff;",
      "info" : "ExpressionStatement[9403-9437]:ExpressionStatement[9443-9477]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[9450-9462]:ExpressionStatement[9490-9507]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[9457-9459]:MethodInvocation[9490-9506]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[9476-9497]:ExpressionStatement[9521-9542]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[9510-9529]:ExpressionStatement[9555-9574]"
    }, {
      "left" : "if (showMergeNotInPlace)",
      "right" : "if (showMergeNotInPlace)",
      "info" : "IfStatement[9549-11569]:IfStatement[9594-11629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9574-11569]:Block[9619-11629]"
    }, {
      "left" : "long bMerge = System.nanoTime();",
      "right" : "long bMerge = System.nanoTime();",
      "info" : "VariableDeclarationStatement[9614-9646]:VariableDeclarationStatement[9659-9691]"
    }, {
      "left" : "Integer[] result = MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE, unsorted.clone());",
      "right" : "Integer[] result = MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE, unsorted.clone());",
      "info" : "VariableDeclarationStatement[9659-9746]:VariableDeclarationStatement[9704-9791]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[9759-9851]:IfStatement[9804-9896]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(\"MergeSort failed.\");",
      "info" : "ExpressionStatement[9811-9851]:ExpressionStatement[9856-9896]"
    }, {
      "left" : "long aMerge = System.nanoTime();",
      "right" : "long aMerge = System.nanoTime();",
      "info" : "VariableDeclarationStatement[9864-9896]:VariableDeclarationStatement[9909-9941]"
    }, {
      "left" : "double diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "double diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[9909-9960]:VariableDeclarationStatement[9954-10005]"
    }, {
      "left" : "System.out.println(\"Random: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[9973-10046]:ExpressionStatement[10018-10091]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[10059-10120]:IfStatement[10104-10165]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[10091-10120]:ExpressionStatement[10136-10165]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[10133-10223]:IfStatement[10178-10268]"
    }, {
      "left" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "right" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "info" : "ExpressionStatement[10169-10223]:ExpressionStatement[10214-10268]"
    }, {
      "left" : "bMerge = System.nanoTime();",
      "right" : "bMerge = System.nanoTime();",
      "info" : "ExpressionStatement[10262-10289]:ExpressionStatement[10312-10339]"
    }, {
      "left" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE, sorted.clone());",
      "right" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE, sorted.clone());",
      "info" : "ExpressionStatement[10302-10377]:ExpressionStatement[10352-10427]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[10390-10482]:IfStatement[10440-10532]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(\"MergeSort failed.\");",
      "info" : "ExpressionStatement[10442-10482]:ExpressionStatement[10492-10532]"
    }, {
      "left" : "aMerge = System.nanoTime();",
      "right" : "aMerge = System.nanoTime();",
      "info" : "ExpressionStatement[10495-10522]:ExpressionStatement[10545-10572]"
    }, {
      "left" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[10535-10579]:ExpressionStatement[10585-10629]"
    }, {
      "left" : "System.out.println(\"Sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[10592-10665]:ExpressionStatement[10642-10715]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[10678-10737]:IfStatement[10728-10787]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[10710-10737]:ExpressionStatement[10760-10787]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[10750-10840]:IfStatement[10800-10890]"
    }, {
      "left" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "right" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "info" : "ExpressionStatement[10786-10840]:ExpressionStatement[10836-10890]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[10853-10865]:ExpressionStatement[10903-10920]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[10860-10862]:MethodInvocation[10903-10919]"
    }, {
      "left" : "bMerge = System.nanoTime();",
      "right" : "bMerge = System.nanoTime();",
      "info" : "ExpressionStatement[10879-10906]:ExpressionStatement[10934-10961]"
    }, {
      "left" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE, reverse.clone());",
      "right" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE, reverse.clone());",
      "info" : "ExpressionStatement[10919-10995]:ExpressionStatement[10974-11050]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[11008-11100]:IfStatement[11063-11155]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(\"MergeSort failed.\");",
      "info" : "ExpressionStatement[11060-11100]:ExpressionStatement[11115-11155]"
    }, {
      "left" : "aMerge = System.nanoTime();",
      "right" : "aMerge = System.nanoTime();",
      "info" : "ExpressionStatement[11113-11140]:ExpressionStatement[11168-11195]"
    }, {
      "left" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[11153-11197]:ExpressionStatement[11208-11252]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[11210-11291]:ExpressionStatement[11265-11346]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[11304-11364]:IfStatement[11359-11419]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[11336-11364]:ExpressionStatement[11391-11419]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[11377-11467]:IfStatement[11432-11522]"
    }, {
      "left" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "right" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "info" : "ExpressionStatement[11413-11467]:ExpressionStatement[11468-11522]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[11480-11492]:ExpressionStatement[11535-11552]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[11487-11489]:MethodInvocation[11535-11551]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[11506-11527]:ExpressionStatement[11566-11587]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[11540-11559]:ExpressionStatement[11600-11619]"
    }, {
      "left" : "if (showMergeInPlace)",
      "right" : "if (showMergeInPlace)",
      "info" : "IfStatement[11579-13566]:IfStatement[11639-13641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11601-13566]:Block[11661-13641]"
    }, {
      "left" : "long bMerge = System.nanoTime();",
      "right" : "long bMerge = System.nanoTime();",
      "info" : "VariableDeclarationStatement[11641-11673]:VariableDeclarationStatement[11701-11733]"
    }, {
      "left" : "Integer[] result = MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE, unsorted.clone());",
      "right" : "Integer[] result = MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE, unsorted.clone());",
      "info" : "VariableDeclarationStatement[11686-11769]:VariableDeclarationStatement[11746-11829]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[11782-11874]:IfStatement[11842-11934]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(\"MergeSort failed.\");",
      "info" : "ExpressionStatement[11834-11874]:ExpressionStatement[11894-11934]"
    }, {
      "left" : "long aMerge = System.nanoTime();",
      "right" : "long aMerge = System.nanoTime();",
      "info" : "VariableDeclarationStatement[11887-11919]:VariableDeclarationStatement[11947-11979]"
    }, {
      "left" : "double diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "double diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[11932-11983]:VariableDeclarationStatement[11992-12043]"
    }, {
      "left" : "System.out.println(\"Random: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[11996-12069]:ExpressionStatement[12056-12129]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[12082-12143]:IfStatement[12142-12203]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[12114-12143]:ExpressionStatement[12174-12203]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[12156-12240]:IfStatement[12216-12300]"
    }, {
      "left" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "right" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "info" : "ExpressionStatement[12192-12240]:ExpressionStatement[12252-12300]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[12253-12265]:ExpressionStatement[12313-12330]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[12260-12262]:MethodInvocation[12313-12329]"
    }, {
      "left" : "bMerge = System.nanoTime();",
      "right" : "bMerge = System.nanoTime();",
      "info" : "ExpressionStatement[12279-12306]:ExpressionStatement[12344-12371]"
    }, {
      "left" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE, sorted.clone());",
      "right" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE, sorted.clone());",
      "info" : "ExpressionStatement[12319-12390]:ExpressionStatement[12384-12455]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[12403-12495]:IfStatement[12468-12560]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(\"MergeSort failed.\");",
      "info" : "ExpressionStatement[12455-12495]:ExpressionStatement[12520-12560]"
    }, {
      "left" : "aMerge = System.nanoTime();",
      "right" : "aMerge = System.nanoTime();",
      "info" : "ExpressionStatement[12508-12535]:ExpressionStatement[12573-12600]"
    }, {
      "left" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[12548-12592]:ExpressionStatement[12613-12657]"
    }, {
      "left" : "System.out.println(\"Sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[12605-12678]:ExpressionStatement[12670-12743]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[12691-12750]:IfStatement[12756-12815]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[12723-12750]:ExpressionStatement[12788-12815]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[12763-12847]:IfStatement[12828-12912]"
    }, {
      "left" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "right" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "info" : "ExpressionStatement[12799-12847]:ExpressionStatement[12864-12912]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[12860-12872]:ExpressionStatement[12925-12942]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[12867-12869]:MethodInvocation[12925-12941]"
    }, {
      "left" : "bMerge = System.nanoTime();",
      "right" : "bMerge = System.nanoTime();",
      "info" : "ExpressionStatement[12886-12913]:ExpressionStatement[12956-12983]"
    }, {
      "left" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE, reverse.clone());",
      "right" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE, reverse.clone());",
      "info" : "ExpressionStatement[12926-12998]:ExpressionStatement[12996-13068]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[13011-13103]:IfStatement[13081-13173]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(\"MergeSort failed.\");",
      "info" : "ExpressionStatement[13063-13103]:ExpressionStatement[13133-13173]"
    }, {
      "left" : "aMerge = System.nanoTime();",
      "right" : "aMerge = System.nanoTime();",
      "info" : "ExpressionStatement[13116-13143]:ExpressionStatement[13186-13213]"
    }, {
      "left" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[13156-13200]:ExpressionStatement[13226-13270]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[13213-13294]:ExpressionStatement[13283-13364]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[13307-13367]:IfStatement[13377-13437]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[13339-13367]:ExpressionStatement[13409-13437]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[13380-13464]:IfStatement[13450-13534]"
    }, {
      "left" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "right" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "info" : "ExpressionStatement[13416-13464]:ExpressionStatement[13486-13534]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[13477-13489]:ExpressionStatement[13547-13564]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[13484-13486]:MethodInvocation[13547-13563]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[13503-13524]:ExpressionStatement[13578-13599]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[13537-13556]:ExpressionStatement[13612-13631]"
    }, {
      "left" : "if (showQuick)",
      "right" : "if (showQuick)",
      "info" : "IfStatement[13576-19389]:IfStatement[13651-19509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13591-19389]:Block[13666-19509]"
    }, {
      "left" : "long bQuick = System.nanoTime();",
      "right" : "long bQuick = System.nanoTime();",
      "info" : "VariableDeclarationStatement[13630-13662]:VariableDeclarationStatement[13705-13737]"
    }, {
      "left" : "Integer[] result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, unsorted.clone());",
      "right" : "Integer[] result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, unsorted.clone());",
      "info" : "VariableDeclarationStatement[13675-13755]:VariableDeclarationStatement[13750-13830]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[13768-13860]:IfStatement[13843-13935]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(\"QuickSort failed.\");",
      "info" : "ExpressionStatement[13820-13860]:ExpressionStatement[13895-13935]"
    }, {
      "left" : "long aQuick = System.nanoTime();",
      "right" : "long aQuick = System.nanoTime();",
      "info" : "VariableDeclarationStatement[13873-13905]:VariableDeclarationStatement[13948-13980]"
    }, {
      "left" : "double diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "double diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[13918-13969]:VariableDeclarationStatement[13993-14044]"
    }, {
      "left" : "System.out.println(\"Random: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[13982-14075]:ExpressionStatement[14057-14150]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[14088-14149]:IfStatement[14163-14224]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[14120-14149]:ExpressionStatement[14195-14224]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[14162-14232]:IfStatement[14237-14307]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[14198-14232]:ExpressionStatement[14273-14307]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[14245-14257]:ExpressionStatement[14320-14337]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[14252-14254]:MethodInvocation[14320-14336]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[14271-14298]:ExpressionStatement[14351-14378]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, sorted.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, sorted.clone());",
      "info" : "ExpressionStatement[14311-14379]:ExpressionStatement[14391-14459]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[14392-14484]:IfStatement[14472-14564]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(\"QuickSort failed.\");",
      "info" : "ExpressionStatement[14444-14484]:ExpressionStatement[14524-14564]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[14497-14524]:ExpressionStatement[14577-14604]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[14537-14581]:ExpressionStatement[14617-14661]"
    }, {
      "left" : "System.out.println(\"Sorted: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[14594-14687]:ExpressionStatement[14674-14767]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[14700-14759]:IfStatement[14780-14839]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[14732-14759]:ExpressionStatement[14812-14839]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[14772-14842]:IfStatement[14852-14922]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[14808-14842]:ExpressionStatement[14888-14922]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[14855-14867]:ExpressionStatement[14935-14952]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[14862-14864]:MethodInvocation[14935-14951]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[14881-14908]:ExpressionStatement[14966-14993]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, reverse.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, reverse.clone());",
      "info" : "ExpressionStatement[14921-14990]:ExpressionStatement[15006-15075]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[15003-15095]:IfStatement[15088-15180]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(\"QuickSort failed.\");",
      "info" : "ExpressionStatement[15055-15095]:ExpressionStatement[15140-15180]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[15108-15135]:ExpressionStatement[15193-15220]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[15148-15192]:ExpressionStatement[15233-15277]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[15205-15306]:ExpressionStatement[15290-15391]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[15319-15379]:IfStatement[15404-15464]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[15351-15379]:ExpressionStatement[15436-15464]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[15392-15462]:IfStatement[15477-15547]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[15428-15462]:ExpressionStatement[15513-15547]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[15475-15487]:ExpressionStatement[15560-15577]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[15482-15484]:MethodInvocation[15560-15576]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[15501-15522]:ExpressionStatement[15591-15612]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[15535-15554]:ExpressionStatement[15625-15644]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[15568-15595]:ExpressionStatement[15658-15685]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, unsorted.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, unsorted.clone());",
      "info" : "ExpressionStatement[15608-15679]:ExpressionStatement[15698-15769]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[15692-15784]:IfStatement[15782-15874]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(\"QuickSort failed.\");",
      "info" : "ExpressionStatement[15744-15784]:ExpressionStatement[15834-15874]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[15797-15824]:ExpressionStatement[15887-15914]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[15837-15881]:ExpressionStatement[15927-15971]"
    }, {
      "left" : "System.out.println(\"Random: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[15894-15988]:ExpressionStatement[15984-16078]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[16001-16062]:IfStatement[16091-16152]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[16033-16062]:ExpressionStatement[16123-16152]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[16075-16145]:IfStatement[16165-16235]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[16111-16145]:ExpressionStatement[16201-16235]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[16158-16170]:ExpressionStatement[16248-16265]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[16165-16167]:MethodInvocation[16248-16264]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[16184-16211]:ExpressionStatement[16279-16306]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, sorted.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, sorted.clone());",
      "info" : "ExpressionStatement[16224-16293]:ExpressionStatement[16319-16388]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[16306-16398]:IfStatement[16401-16493]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(\"QuickSort failed.\");",
      "info" : "ExpressionStatement[16358-16398]:ExpressionStatement[16453-16493]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[16411-16438]:ExpressionStatement[16506-16533]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[16451-16495]:ExpressionStatement[16546-16590]"
    }, {
      "left" : "System.out.println(\"Sorted: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[16508-16602]:ExpressionStatement[16603-16697]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[16615-16674]:IfStatement[16710-16769]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[16647-16674]:ExpressionStatement[16742-16769]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[16687-16757]:IfStatement[16782-16852]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[16723-16757]:ExpressionStatement[16818-16852]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[16770-16782]:ExpressionStatement[16865-16882]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[16777-16779]:MethodInvocation[16865-16881]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[16796-16823]:ExpressionStatement[16896-16923]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, reverse.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, reverse.clone());",
      "info" : "ExpressionStatement[16836-16906]:ExpressionStatement[16936-17006]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[16919-17011]:IfStatement[17019-17111]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(\"QuickSort failed.\");",
      "info" : "ExpressionStatement[16971-17011]:ExpressionStatement[17071-17111]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[17024-17051]:ExpressionStatement[17124-17151]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[17064-17108]:ExpressionStatement[17164-17208]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[17121-17223]:ExpressionStatement[17221-17323]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[17236-17296]:IfStatement[17336-17396]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[17268-17296]:ExpressionStatement[17368-17396]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[17309-17379]:IfStatement[17409-17479]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[17345-17379]:ExpressionStatement[17445-17479]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[17392-17404]:ExpressionStatement[17492-17509]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[17399-17401]:MethodInvocation[17492-17508]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[17418-17439]:ExpressionStatement[17523-17544]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[17452-17471]:ExpressionStatement[17557-17576]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[17485-17512]:ExpressionStatement[17590-17617]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, unsorted.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, unsorted.clone());",
      "info" : "ExpressionStatement[17525-17596]:ExpressionStatement[17630-17701]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[17609-17708]:IfStatement[17714-17813]"
    }, {
      "left" : "System.err.println(\"Random QuickSort failed.\");",
      "right" : "System.err.println(\"Random QuickSort failed.\");",
      "info" : "ExpressionStatement[17661-17708]:ExpressionStatement[17766-17813]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[17721-17748]:ExpressionStatement[17826-17853]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[17761-17805]:ExpressionStatement[17866-17910]"
    }, {
      "left" : "System.out.println(\"Random: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[17818-17902]:ExpressionStatement[17923-18007]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[17915-17976]:IfStatement[18020-18081]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[17947-17976]:ExpressionStatement[18052-18081]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[17989-18059]:IfStatement[18094-18164]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[18025-18059]:ExpressionStatement[18130-18164]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[18072-18084]:ExpressionStatement[18177-18194]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[18079-18081]:MethodInvocation[18177-18193]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[18098-18125]:ExpressionStatement[18208-18235]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, sorted.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, sorted.clone());",
      "info" : "ExpressionStatement[18138-18207]:ExpressionStatement[18248-18317]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[18220-18319]:IfStatement[18330-18429]"
    }, {
      "left" : "System.err.println(\"Random QuickSort failed.\");",
      "right" : "System.err.println(\"Random QuickSort failed.\");",
      "info" : "ExpressionStatement[18272-18319]:ExpressionStatement[18382-18429]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[18332-18359]:ExpressionStatement[18442-18469]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[18372-18416]:ExpressionStatement[18482-18526]"
    }, {
      "left" : "System.out.println(\"Sorted: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[18429-18513]:ExpressionStatement[18539-18623]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[18526-18585]:IfStatement[18636-18695]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[18558-18585]:ExpressionStatement[18668-18695]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[18598-18668]:IfStatement[18708-18778]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[18634-18668]:ExpressionStatement[18744-18778]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[18681-18693]:ExpressionStatement[18791-18808]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[18688-18690]:MethodInvocation[18791-18807]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[18707-18734]:ExpressionStatement[18822-18849]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, reverse.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, reverse.clone());",
      "info" : "ExpressionStatement[18747-18817]:ExpressionStatement[18862-18932]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[18830-18929]:IfStatement[18945-19044]"
    }, {
      "left" : "System.err.println(\"Random QuickSort failed.\");",
      "right" : "System.err.println(\"Random QuickSort failed.\");",
      "info" : "ExpressionStatement[18882-18929]:ExpressionStatement[18997-19044]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[18942-18969]:ExpressionStatement[19057-19084]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[18982-19026]:ExpressionStatement[19097-19141]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[19039-19131]:ExpressionStatement[19154-19246]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[19144-19204]:IfStatement[19259-19319]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[19176-19204]:ExpressionStatement[19291-19319]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[19217-19287]:IfStatement[19332-19402]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[19253-19287]:ExpressionStatement[19368-19402]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[19300-19312]:ExpressionStatement[19415-19432]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[19307-19309]:MethodInvocation[19415-19431]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[19326-19347]:ExpressionStatement[19446-19467]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[19360-19379]:ExpressionStatement[19480-19499]"
    }, {
      "left" : "if (showHeap)",
      "right" : "if (showHeap)",
      "info" : "IfStatement[19399-21214]:IfStatement[19519-21349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19413-21214]:Block[19533-21349]"
    }, {
      "left" : "long bHeap = System.nanoTime();",
      "right" : "long bHeap = System.nanoTime();",
      "info" : "VariableDeclarationStatement[19451-19482]:VariableDeclarationStatement[19571-19602]"
    }, {
      "left" : "Integer[] result = HeapSort.sort(unsorted.clone());",
      "right" : "Integer[] result = HeapSort.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[19495-19546]:VariableDeclarationStatement[19615-19666]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[19559-19650]:IfStatement[19679-19770]"
    }, {
      "left" : "System.err.println(\"HeapSort failed.\");",
      "right" : "System.err.println(\"HeapSort failed.\");",
      "info" : "ExpressionStatement[19611-19650]:ExpressionStatement[19731-19770]"
    }, {
      "left" : "long aHeap = System.nanoTime();",
      "right" : "long aHeap = System.nanoTime();",
      "info" : "VariableDeclarationStatement[19663-19694]:VariableDeclarationStatement[19783-19814]"
    }, {
      "left" : "double diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "right" : "double diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[19707-19756]:VariableDeclarationStatement[19827-19876]"
    }, {
      "left" : "System.out.println(\"Random: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[19769-19841]:ExpressionStatement[19889-19961]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[19854-19915]:IfStatement[19974-20035]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[19886-19915]:ExpressionStatement[20006-20035]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[19928-19996]:IfStatement[20048-20116]"
    }, {
      "left" : "heapResults[heapCount++] = diff;",
      "right" : "heapResults[heapCount++] = diff;",
      "info" : "ExpressionStatement[19964-19996]:ExpressionStatement[20084-20116]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[20009-20021]:ExpressionStatement[20129-20146]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[20016-20018]:MethodInvocation[20129-20145]"
    }, {
      "left" : "bHeap = System.nanoTime();",
      "right" : "bHeap = System.nanoTime();",
      "info" : "ExpressionStatement[20035-20061]:ExpressionStatement[20160-20186]"
    }, {
      "left" : "result = HeapSort.sort(sorted.clone());",
      "right" : "result = HeapSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[20074-20113]:ExpressionStatement[20199-20238]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[20126-20217]:IfStatement[20251-20342]"
    }, {
      "left" : "System.err.println(\"HeapSort failed.\");",
      "right" : "System.err.println(\"HeapSort failed.\");",
      "info" : "ExpressionStatement[20178-20217]:ExpressionStatement[20303-20342]"
    }, {
      "left" : "aHeap = System.nanoTime();",
      "right" : "aHeap = System.nanoTime();",
      "info" : "ExpressionStatement[20230-20256]:ExpressionStatement[20355-20381]"
    }, {
      "left" : "diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "right" : "diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[20269-20311]:ExpressionStatement[20394-20436]"
    }, {
      "left" : "System.out.println(\"Sorted: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[20324-20396]:ExpressionStatement[20449-20521]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[20409-20468]:IfStatement[20534-20593]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[20441-20468]:ExpressionStatement[20566-20593]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[20481-20549]:IfStatement[20606-20674]"
    }, {
      "left" : "heapResults[heapCount++] = diff;",
      "right" : "heapResults[heapCount++] = diff;",
      "info" : "ExpressionStatement[20517-20549]:ExpressionStatement[20642-20674]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[20562-20574]:ExpressionStatement[20687-20704]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[20569-20571]:MethodInvocation[20687-20703]"
    }, {
      "left" : "bHeap = System.nanoTime();",
      "right" : "bHeap = System.nanoTime();",
      "info" : "ExpressionStatement[20588-20614]:ExpressionStatement[20718-20744]"
    }, {
      "left" : "result = HeapSort.sort(reverse.clone());",
      "right" : "result = HeapSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[20627-20667]:ExpressionStatement[20757-20797]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[20680-20771]:IfStatement[20810-20901]"
    }, {
      "left" : "System.err.println(\"HeapSort failed.\");",
      "right" : "System.err.println(\"HeapSort failed.\");",
      "info" : "ExpressionStatement[20732-20771]:ExpressionStatement[20862-20901]"
    }, {
      "left" : "aHeap = System.nanoTime();",
      "right" : "aHeap = System.nanoTime();",
      "info" : "ExpressionStatement[20784-20810]:ExpressionStatement[20914-20940]"
    }, {
      "left" : "diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "right" : "diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[20823-20865]:ExpressionStatement[20953-20995]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[20878-20958]:ExpressionStatement[21008-21088]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[20971-21031]:IfStatement[21101-21161]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[21003-21031]:ExpressionStatement[21133-21161]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[21044-21112]:IfStatement[21174-21242]"
    }, {
      "left" : "heapResults[heapCount++] = diff;",
      "right" : "heapResults[heapCount++] = diff;",
      "info" : "ExpressionStatement[21080-21112]:ExpressionStatement[21210-21242]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[21125-21137]:ExpressionStatement[21255-21272]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[21132-21134]:MethodInvocation[21255-21271]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[21151-21172]:ExpressionStatement[21286-21307]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[21185-21204]:ExpressionStatement[21320-21339]"
    }, {
      "left" : "if (showCounting)",
      "right" : "if (showCounting)",
      "info" : "IfStatement[21224-23156]:IfStatement[21359-23306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21242-23156]:Block[21377-23306]"
    }, {
      "left" : "long bCounting = System.nanoTime();",
      "right" : "long bCounting = System.nanoTime();",
      "info" : "VariableDeclarationStatement[21285-21320]:VariableDeclarationStatement[21420-21455]"
    }, {
      "left" : "Integer[] result = CountingSort.sort(unsorted.clone());",
      "right" : "Integer[] result = CountingSort.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[21333-21388]:VariableDeclarationStatement[21468-21523]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[21401-21496]:IfStatement[21536-21631]"
    }, {
      "left" : "System.err.println(\"CountingSort failed.\");",
      "right" : "System.err.println(\"CountingSort failed.\");",
      "info" : "ExpressionStatement[21453-21496]:ExpressionStatement[21588-21631]"
    }, {
      "left" : "long aCounting = System.nanoTime();",
      "right" : "long aCounting = System.nanoTime();",
      "info" : "VariableDeclarationStatement[21509-21544]:VariableDeclarationStatement[21644-21679]"
    }, {
      "left" : "double diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "right" : "double diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[21557-21614]:VariableDeclarationStatement[21692-21749]"
    }, {
      "left" : "System.out.println(\"Random: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[21627-21703]:ExpressionStatement[21762-21838]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[21716-21777]:IfStatement[21851-21912]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[21748-21777]:ExpressionStatement[21883-21912]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[21790-21866]:IfStatement[21925-22001]"
    }, {
      "left" : "countingResults[countingCount++] = diff;",
      "right" : "countingResults[countingCount++] = diff;",
      "info" : "ExpressionStatement[21826-21866]:ExpressionStatement[21961-22001]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[21879-21891]:ExpressionStatement[22014-22031]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[21886-21888]:MethodInvocation[22014-22030]"
    }, {
      "left" : "bCounting = System.nanoTime();",
      "right" : "bCounting = System.nanoTime();",
      "info" : "ExpressionStatement[21905-21935]:ExpressionStatement[22045-22075]"
    }, {
      "left" : "result = CountingSort.sort(sorted.clone());",
      "right" : "result = CountingSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[21948-21991]:ExpressionStatement[22088-22131]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[22004-22099]:IfStatement[22144-22239]"
    }, {
      "left" : "System.err.println(\"CountingSort failed.\");",
      "right" : "System.err.println(\"CountingSort failed.\");",
      "info" : "ExpressionStatement[22056-22099]:ExpressionStatement[22196-22239]"
    }, {
      "left" : "aCounting = System.nanoTime();",
      "right" : "aCounting = System.nanoTime();",
      "info" : "ExpressionStatement[22112-22142]:ExpressionStatement[22252-22282]"
    }, {
      "left" : "diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "right" : "diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[22155-22205]:ExpressionStatement[22295-22345]"
    }, {
      "left" : "System.out.println(\"Sorted: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[22218-22294]:ExpressionStatement[22358-22434]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[22307-22366]:IfStatement[22447-22506]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[22339-22366]:ExpressionStatement[22479-22506]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[22379-22455]:IfStatement[22519-22595]"
    }, {
      "left" : "countingResults[countingCount++] = diff;",
      "right" : "countingResults[countingCount++] = diff;",
      "info" : "ExpressionStatement[22415-22455]:ExpressionStatement[22555-22595]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[22468-22480]:ExpressionStatement[22608-22625]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[22475-22477]:MethodInvocation[22608-22624]"
    }, {
      "left" : "bCounting = System.nanoTime();",
      "right" : "bCounting = System.nanoTime();",
      "info" : "ExpressionStatement[22494-22524]:ExpressionStatement[22639-22669]"
    }, {
      "left" : "result = CountingSort.sort(reverse.clone());",
      "right" : "result = CountingSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[22537-22581]:ExpressionStatement[22682-22726]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[22594-22689]:IfStatement[22739-22834]"
    }, {
      "left" : "System.err.println(\"CountingSort failed.\");",
      "right" : "System.err.println(\"CountingSort failed.\");",
      "info" : "ExpressionStatement[22646-22689]:ExpressionStatement[22791-22834]"
    }, {
      "left" : "aCounting = System.nanoTime();",
      "right" : "aCounting = System.nanoTime();",
      "info" : "ExpressionStatement[22702-22732]:ExpressionStatement[22847-22877]"
    }, {
      "left" : "diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "right" : "diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[22745-22795]:ExpressionStatement[22890-22940]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[22808-22892]:ExpressionStatement[22953-23037]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[22905-22965]:IfStatement[23050-23110]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[22937-22965]:ExpressionStatement[23082-23110]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[22978-23054]:IfStatement[23123-23199]"
    }, {
      "left" : "countingResults[countingCount++] = diff;",
      "right" : "countingResults[countingCount++] = diff;",
      "info" : "ExpressionStatement[23014-23054]:ExpressionStatement[23159-23199]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[23067-23079]:ExpressionStatement[23212-23229]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[23074-23076]:MethodInvocation[23212-23228]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[23093-23114]:ExpressionStatement[23243-23264]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[23127-23146]:ExpressionStatement[23277-23296]"
    }, {
      "left" : "if (showRadix)",
      "right" : "if (showRadix)",
      "info" : "IfStatement[23166-25011]:IfStatement[23316-25176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23181-25011]:Block[23331-25176]"
    }, {
      "left" : "long bRadix = System.nanoTime();",
      "right" : "long bRadix = System.nanoTime();",
      "info" : "VariableDeclarationStatement[23221-23253]:VariableDeclarationStatement[23371-23403]"
    }, {
      "left" : "Integer[] result = RadixSort.sort(unsorted.clone());",
      "right" : "Integer[] result = RadixSort.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[23266-23318]:VariableDeclarationStatement[23416-23468]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[23331-23423]:IfStatement[23481-23573]"
    }, {
      "left" : "System.err.println(\"RadixSort failed.\");",
      "right" : "System.err.println(\"RadixSort failed.\");",
      "info" : "ExpressionStatement[23383-23423]:ExpressionStatement[23533-23573]"
    }, {
      "left" : "long aRadix = System.nanoTime();",
      "right" : "long aRadix = System.nanoTime();",
      "info" : "VariableDeclarationStatement[23436-23468]:VariableDeclarationStatement[23586-23618]"
    }, {
      "left" : "double diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "double diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[23481-23532]:VariableDeclarationStatement[23631-23682]"
    }, {
      "left" : "System.out.println(\"Random: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[23545-23618]:ExpressionStatement[23695-23768]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[23631-23692]:IfStatement[23781-23842]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[23663-23692]:ExpressionStatement[23813-23842]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[23705-23775]:IfStatement[23855-23925]"
    }, {
      "left" : "radixResults[radixCount++] = diff;",
      "right" : "radixResults[radixCount++] = diff;",
      "info" : "ExpressionStatement[23741-23775]:ExpressionStatement[23891-23925]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[23788-23800]:ExpressionStatement[23938-23955]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[23795-23797]:MethodInvocation[23938-23954]"
    }, {
      "left" : "bRadix = System.nanoTime();",
      "right" : "bRadix = System.nanoTime();",
      "info" : "ExpressionStatement[23814-23841]:ExpressionStatement[23969-23996]"
    }, {
      "left" : "result = RadixSort.sort(sorted.clone());",
      "right" : "result = RadixSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[23854-23894]:ExpressionStatement[24009-24049]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[23907-23999]:IfStatement[24062-24154]"
    }, {
      "left" : "System.err.println(\"RadixSort failed.\");",
      "right" : "System.err.println(\"RadixSort failed.\");",
      "info" : "ExpressionStatement[23959-23999]:ExpressionStatement[24114-24154]"
    }, {
      "left" : "aRadix = System.nanoTime();",
      "right" : "aRadix = System.nanoTime();",
      "info" : "ExpressionStatement[24012-24039]:ExpressionStatement[24167-24194]"
    }, {
      "left" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[24052-24096]:ExpressionStatement[24207-24251]"
    }, {
      "left" : "System.out.println(\"Sorted: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[24109-24182]:ExpressionStatement[24264-24337]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[24195-24254]:IfStatement[24350-24409]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[24227-24254]:ExpressionStatement[24382-24409]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[24267-24337]:IfStatement[24422-24492]"
    }, {
      "left" : "radixResults[radixCount++] = diff;",
      "right" : "radixResults[radixCount++] = diff;",
      "info" : "ExpressionStatement[24303-24337]:ExpressionStatement[24458-24492]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[24350-24362]:ExpressionStatement[24505-24522]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[24357-24359]:MethodInvocation[24505-24521]"
    }, {
      "left" : "bRadix = System.nanoTime();",
      "right" : "bRadix = System.nanoTime();",
      "info" : "ExpressionStatement[24376-24403]:ExpressionStatement[24536-24563]"
    }, {
      "left" : "result = RadixSort.sort(reverse.clone());",
      "right" : "result = RadixSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[24416-24457]:ExpressionStatement[24576-24617]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[24470-24562]:IfStatement[24630-24722]"
    }, {
      "left" : "System.err.println(\"RadixSort failed.\");",
      "right" : "System.err.println(\"RadixSort failed.\");",
      "info" : "ExpressionStatement[24522-24562]:ExpressionStatement[24682-24722]"
    }, {
      "left" : "aRadix = System.nanoTime();",
      "right" : "aRadix = System.nanoTime();",
      "info" : "ExpressionStatement[24575-24602]:ExpressionStatement[24735-24762]"
    }, {
      "left" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[24615-24659]:ExpressionStatement[24775-24819]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[24672-24753]:ExpressionStatement[24832-24913]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[24766-24826]:IfStatement[24926-24986]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[24798-24826]:ExpressionStatement[24958-24986]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[24839-24909]:IfStatement[24999-25069]"
    }, {
      "left" : "radixResults[radixCount++] = diff;",
      "right" : "radixResults[radixCount++] = diff;",
      "info" : "ExpressionStatement[24875-24909]:ExpressionStatement[25035-25069]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[24922-24934]:ExpressionStatement[25082-25099]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[24929-24931]:MethodInvocation[25082-25098]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[24948-24969]:ExpressionStatement[25113-25134]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[24982-25001]:ExpressionStatement[25147-25166]"
    }, {
      "left" : "if (showAmericanFlag)",
      "right" : "if (showAmericanFlag)",
      "info" : "IfStatement[25021-26992]:IfStatement[25186-27172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25043-26992]:Block[25208-27172]"
    }, {
      "left" : "long bRadix = System.nanoTime();",
      "right" : "long bRadix = System.nanoTime();",
      "info" : "VariableDeclarationStatement[25091-25123]:VariableDeclarationStatement[25256-25288]"
    }, {
      "left" : "Integer[] result = AmericanFlagSort.sort(unsorted.clone());",
      "right" : "Integer[] result = AmericanFlagSort.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[25136-25195]:VariableDeclarationStatement[25301-25360]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[25208-25308]:IfStatement[25373-25473]"
    }, {
      "left" : "System.err.println(\"AmericanFlag sort failed.\");",
      "right" : "System.err.println(\"AmericanFlag sort failed.\");",
      "info" : "ExpressionStatement[25260-25308]:ExpressionStatement[25425-25473]"
    }, {
      "left" : "long aRadix = System.nanoTime();",
      "right" : "long aRadix = System.nanoTime();",
      "info" : "VariableDeclarationStatement[25321-25353]:VariableDeclarationStatement[25486-25518]"
    }, {
      "left" : "double diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "double diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[25366-25417]:VariableDeclarationStatement[25531-25582]"
    }, {
      "left" : "System.out.println(\"Random: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[25430-25511]:ExpressionStatement[25595-25676]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[25524-25585]:IfStatement[25689-25750]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[25556-25585]:ExpressionStatement[25721-25750]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[25598-25682]:IfStatement[25763-25847]"
    }, {
      "left" : "americanFlagResults[americanFlagCount++] = diff;",
      "right" : "americanFlagResults[americanFlagCount++] = diff;",
      "info" : "ExpressionStatement[25634-25682]:ExpressionStatement[25799-25847]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[25695-25707]:ExpressionStatement[25860-25877]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[25702-25704]:MethodInvocation[25860-25876]"
    }, {
      "left" : "bRadix = System.nanoTime();",
      "right" : "bRadix = System.nanoTime();",
      "info" : "ExpressionStatement[25721-25748]:ExpressionStatement[25891-25918]"
    }, {
      "left" : "result = AmericanFlagSort.sort(sorted.clone());",
      "right" : "result = AmericanFlagSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[25761-25808]:ExpressionStatement[25931-25978]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[25821-25921]:IfStatement[25991-26091]"
    }, {
      "left" : "System.err.println(\"AmericanFlag sort failed.\");",
      "right" : "System.err.println(\"AmericanFlag sort failed.\");",
      "info" : "ExpressionStatement[25873-25921]:ExpressionStatement[26043-26091]"
    }, {
      "left" : "aRadix = System.nanoTime();",
      "right" : "aRadix = System.nanoTime();",
      "info" : "ExpressionStatement[25934-25961]:ExpressionStatement[26104-26131]"
    }, {
      "left" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[25974-26018]:ExpressionStatement[26144-26188]"
    }, {
      "left" : "System.out.println(\"Sorted: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[26031-26112]:ExpressionStatement[26201-26282]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[26125-26184]:IfStatement[26295-26354]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[26157-26184]:ExpressionStatement[26327-26354]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[26197-26281]:IfStatement[26367-26451]"
    }, {
      "left" : "americanFlagResults[americanFlagCount++] = diff;",
      "right" : "americanFlagResults[americanFlagCount++] = diff;",
      "info" : "ExpressionStatement[26233-26281]:ExpressionStatement[26403-26451]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[26294-26306]:ExpressionStatement[26464-26481]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[26301-26303]:MethodInvocation[26464-26480]"
    }, {
      "left" : "bRadix = System.nanoTime();",
      "right" : "bRadix = System.nanoTime();",
      "info" : "ExpressionStatement[26320-26347]:ExpressionStatement[26495-26522]"
    }, {
      "left" : "result = AmericanFlagSort.sort(reverse.clone());",
      "right" : "result = AmericanFlagSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[26360-26408]:ExpressionStatement[26535-26583]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[26421-26521]:IfStatement[26596-26696]"
    }, {
      "left" : "System.err.println(\"AmericanFlag sort failed.\");",
      "right" : "System.err.println(\"AmericanFlag sort failed.\");",
      "info" : "ExpressionStatement[26473-26521]:ExpressionStatement[26648-26696]"
    }, {
      "left" : "aRadix = System.nanoTime();",
      "right" : "aRadix = System.nanoTime();",
      "info" : "ExpressionStatement[26534-26561]:ExpressionStatement[26709-26736]"
    }, {
      "left" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[26574-26618]:ExpressionStatement[26749-26793]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[26631-26720]:ExpressionStatement[26806-26895]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[26733-26793]:IfStatement[26908-26968]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[26765-26793]:ExpressionStatement[26940-26968]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[26806-26890]:IfStatement[26981-27065]"
    }, {
      "left" : "americanFlagResults[americanFlagCount++] = diff;",
      "right" : "americanFlagResults[americanFlagCount++] = diff;",
      "info" : "ExpressionStatement[26842-26890]:ExpressionStatement[27017-27065]"
    }, {
      "left" : "System.gc();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[26903-26915]:ExpressionStatement[27078-27095]"
    }, {
      "left" : "gc",
      "right" : "collectGarbage()",
      "info" : "SimpleName[26910-26912]:MethodInvocation[27078-27094]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[26929-26950]:ExpressionStatement[27109-27130]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[26963-26982]:ExpressionStatement[27143-27162]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[27002-27051]:IfStatement[27182-27231]"
    }, {
      "left" : "showComparison();",
      "right" : "showComparison();",
      "info" : "ExpressionStatement[27034-27051]:ExpressionStatement[27214-27231]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27063-27070]:Modifier[27243-27250]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27071-27077]:Modifier[27251-27257]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[27078-27083]:Modifier[27258-27263]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27084-27088]:PrimitiveType[27264-27268]"
    }, {
      "left" : "showComparison",
      "right" : "showComparison",
      "info" : "SimpleName[27089-27103]:SimpleName[27269-27283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27106-30026]:Block[27286-30206]"
    }, {
      "left" : "System.out.println(\"Algorithm\\t\\t\\tRandom\\tSorted\\tReverse Sorted\");",
      "right" : "System.out.println(\"Algorithm\\t\\t\\tRandom\\tSorted\\tReverse Sorted\");",
      "info" : "ExpressionStatement[27116-27184]:ExpressionStatement[27296-27364]"
    }, {
      "left" : "if (showInsertion)",
      "right" : "if (showInsertion)",
      "info" : "IfStatement[27193-27433]:IfStatement[27373-27613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27212-27433]:Block[27392-27613]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[27226-27236]:VariableDeclarationStatement[27406-27416]"
    }, {
      "left" : "System.out.println(\"Insertion sort\\t\\t\\t\" + FORMAT.format(insertionResults[i++]) + \"\\t\" + FORMAT.format(insertionResults[i++]) + \"\\t\" + FORMAT.format(insertionResults[i++]));",
      "right" : "System.out.println(\"Insertion sort\\t\\t\\t\" + FORMAT.format(insertionResults[i++]) + \"\\t\" + FORMAT.format(insertionResults[i++]) + \"\\t\" + FORMAT.format(insertionResults[i++]));",
      "info" : "ExpressionStatement[27249-27423]:ExpressionStatement[27429-27603]"
    }, {
      "left" : "if (showBubble)",
      "right" : "if (showBubble)",
      "info" : "IfStatement[27442-27667]:IfStatement[27622-27847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27458-27667]:Block[27638-27847]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[27472-27482]:VariableDeclarationStatement[27652-27662]"
    }, {
      "left" : "System.out.println(\"Bubble sort\\t\\t\\t\" + FORMAT.format(bubbleResults[i++]) + \"\\t\" + FORMAT.format(bubbleResults[i++]) + \"\\t\" + FORMAT.format(bubbleResults[i++]));",
      "right" : "System.out.println(\"Bubble sort\\t\\t\\t\" + FORMAT.format(bubbleResults[i++]) + \"\\t\" + FORMAT.format(bubbleResults[i++]) + \"\\t\" + FORMAT.format(bubbleResults[i++]));",
      "info" : "ExpressionStatement[27495-27657]:ExpressionStatement[27675-27837]"
    }, {
      "left" : "if (showShell)",
      "right" : "if (showShell)",
      "info" : "IfStatement[27676-27896]:IfStatement[27856-28076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27691-27896]:Block[27871-28076]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[27705-27715]:VariableDeclarationStatement[27885-27895]"
    }, {
      "left" : "System.out.println(\"Shell sort\\t\\t\\t\" + FORMAT.format(shellResults[i++]) + \"\\t\" + FORMAT.format(shellResults[i++]) + \"\\t\" + FORMAT.format(shellResults[i++]));",
      "right" : "System.out.println(\"Shell sort\\t\\t\\t\" + FORMAT.format(shellResults[i++]) + \"\\t\" + FORMAT.format(shellResults[i++]) + \"\\t\" + FORMAT.format(shellResults[i++]));",
      "info" : "ExpressionStatement[27728-27886]:ExpressionStatement[27908-28066]"
    }, {
      "left" : "if (showMergeInPlace)",
      "right" : "if (showMergeInPlace)",
      "info" : "IfStatement[27905-28162]:IfStatement[28085-28342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27927-28162]:Block[28107-28342]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[27941-27951]:VariableDeclarationStatement[28121-28131]"
    }, {
      "left" : "System.out.println(\"Merge (in-place) sort\\t\\t\" + FORMAT.format(mergeInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeInPlaceResults[i++]));",
      "right" : "System.out.println(\"Merge (in-place) sort\\t\\t\" + FORMAT.format(mergeInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeInPlaceResults[i++]));",
      "info" : "ExpressionStatement[27964-28152]:ExpressionStatement[28144-28332]"
    }, {
      "left" : "if (showMergeNotInPlace)",
      "right" : "if (showMergeNotInPlace)",
      "info" : "IfStatement[28171-28442]:IfStatement[28351-28622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28196-28442]:Block[28376-28622]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[28210-28220]:VariableDeclarationStatement[28390-28400]"
    }, {
      "left" : "System.out.println(\"Merge (not-in-place) sort\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]));",
      "right" : "System.out.println(\"Merge (not-in-place) sort\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]));",
      "info" : "ExpressionStatement[28233-28432]:ExpressionStatement[28413-28612]"
    }, {
      "left" : "if (showQuick)",
      "right" : "if (showQuick)",
      "info" : "IfStatement[28451-29060]:IfStatement[28631-29240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28466-29060]:Block[28646-29240]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[28480-28490]:VariableDeclarationStatement[28660-28670]"
    }, {
      "left" : "System.out.println(\"Quicksort with first as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "right" : "System.out.println(\"Quicksort with first as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "info" : "ExpressionStatement[28503-28676]:ExpressionStatement[28683-28856]"
    }, {
      "left" : "System.out.println(\"Quicksort with middle as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "right" : "System.out.println(\"Quicksort with middle as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "info" : "ExpressionStatement[28689-28863]:ExpressionStatement[28869-29043]"
    }, {
      "left" : "System.out.println(\"Quicksort with random as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "right" : "System.out.println(\"Quicksort with random as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "info" : "ExpressionStatement[28876-29050]:ExpressionStatement[29056-29230]"
    }, {
      "left" : "if (showHeap)",
      "right" : "if (showHeap)",
      "info" : "IfStatement[29069-29284]:IfStatement[29249-29464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29083-29284]:Block[29263-29464]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29097-29107]:VariableDeclarationStatement[29277-29287]"
    }, {
      "left" : "System.out.println(\"Heap sort\\t\\t\\t\" + FORMAT.format(heapResults[i++]) + \"\\t\" + FORMAT.format(heapResults[i++]) + \"\\t\" + FORMAT.format(heapResults[i++]));",
      "right" : "System.out.println(\"Heap sort\\t\\t\\t\" + FORMAT.format(heapResults[i++]) + \"\\t\" + FORMAT.format(heapResults[i++]) + \"\\t\" + FORMAT.format(heapResults[i++]));",
      "info" : "ExpressionStatement[29120-29274]:ExpressionStatement[29300-29454]"
    }, {
      "left" : "if (showCounting)",
      "right" : "if (showCounting)",
      "info" : "IfStatement[29293-29528]:IfStatement[29473-29708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29311-29528]:Block[29491-29708]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29325-29335]:VariableDeclarationStatement[29505-29515]"
    }, {
      "left" : "System.out.println(\"Counting sort\\t\\t\\t\" + FORMAT.format(countingResults[i++]) + \"\\t\" + FORMAT.format(countingResults[i++]) + \"\\t\" + FORMAT.format(countingResults[i++]));",
      "right" : "System.out.println(\"Counting sort\\t\\t\\t\" + FORMAT.format(countingResults[i++]) + \"\\t\" + FORMAT.format(countingResults[i++]) + \"\\t\" + FORMAT.format(countingResults[i++]));",
      "info" : "ExpressionStatement[29348-29518]:ExpressionStatement[29528-29698]"
    }, {
      "left" : "if (showRadix)",
      "right" : "if (showRadix)",
      "info" : "IfStatement[29537-29757]:IfStatement[29717-29937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29552-29757]:Block[29732-29937]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29566-29576]:VariableDeclarationStatement[29746-29756]"
    }, {
      "left" : "System.out.println(\"Radix sort\\t\\t\\t\" + FORMAT.format(radixResults[i++]) + \"\\t\" + FORMAT.format(radixResults[i++]) + \"\\t\" + FORMAT.format(radixResults[i++]));",
      "right" : "System.out.println(\"Radix sort\\t\\t\\t\" + FORMAT.format(radixResults[i++]) + \"\\t\" + FORMAT.format(radixResults[i++]) + \"\\t\" + FORMAT.format(radixResults[i++]));",
      "info" : "ExpressionStatement[29589-29747]:ExpressionStatement[29769-29927]"
    }, {
      "left" : "if (showAmericanFlag)",
      "right" : "if (showAmericanFlag)",
      "info" : "IfStatement[29766-30020]:IfStatement[29946-30200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29788-30020]:Block[29968-30200]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29802-29812]:VariableDeclarationStatement[29982-29992]"
    }, {
      "left" : "System.out.println(\"American Flag sort\\t\\t\" + FORMAT.format(americanFlagResults[i++]) + \"\\t\" + FORMAT.format(americanFlagResults[i++]) + \"\\t\" + FORMAT.format(americanFlagResults[i++]));",
      "right" : "System.out.println(\"American Flag sort\\t\\t\" + FORMAT.format(americanFlagResults[i++]) + \"\\t\" + FORMAT.format(americanFlagResults[i++]) + \"\\t\" + FORMAT.format(americanFlagResults[i++]));",
      "info" : "ExpressionStatement[29825-30010]:ExpressionStatement[30005-30190]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30032-30039]:Modifier[30212-30219]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30040-30046]:Modifier[30220-30226]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[30047-30052]:Modifier[30227-30232]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30053-30057]:PrimitiveType[30233-30237]"
    }, {
      "left" : "showResult",
      "right" : "showResult",
      "info" : "SimpleName[30058-30068]:SimpleName[30238-30248]"
    }, {
      "left" : "Integer[] u",
      "right" : "Integer[] u",
      "info" : "SingleVariableDeclaration[30069-30080]:SingleVariableDeclaration[30249-30260]"
    }, {
      "left" : "Integer[] r",
      "right" : "Integer[] r",
      "info" : "SingleVariableDeclaration[30082-30093]:SingleVariableDeclaration[30262-30273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30095-30234]:Block[30275-30414]"
    }, {
      "left" : "System.out.println(\"Unsorted: \" + print(u));",
      "right" : "System.out.println(\"Unsorted: \" + print(u));",
      "info" : "ExpressionStatement[30105-30149]:ExpressionStatement[30285-30329]"
    }, {
      "left" : "System.out.println(\"Sorted: \" + print(r));",
      "right" : "System.out.println(\"Sorted: \" + print(r));",
      "info" : "ExpressionStatement[30158-30200]:ExpressionStatement[30338-30380]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[30209-30228]:ExpressionStatement[30389-30408]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30240-30247]:Modifier[30420-30427]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30248-30254]:Modifier[30428-30434]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[30255-30260]:Modifier[30435-30440]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30261-30268]:PrimitiveType[30441-30448]"
    }, {
      "left" : "check",
      "right" : "check",
      "info" : "SimpleName[30269-30274]:SimpleName[30449-30454]"
    }, {
      "left" : "Integer[] array",
      "right" : "Integer[] array",
      "info" : "SingleVariableDeclaration[30275-30290]:SingleVariableDeclaration[30455-30470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30292-30450]:Block[30472-30630]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[30302-30423]:ForStatement[30482-30603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30341-30423]:Block[30521-30603]"
    }, {
      "left" : "if (array[i - 1] > array[i])",
      "right" : "if (array[i - 1] > array[i])",
      "info" : "IfStatement[30355-30413]:IfStatement[30535-30593]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30400-30413]:ReturnStatement[30580-30593]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30432-30444]:ReturnStatement[30612-30624]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30456-30462]:Modifier[30636-30642]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30463-30469]:Modifier[30643-30649]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[30470-30475]:Modifier[30650-30655]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30476-30482]:SimpleType[30656-30662]"
    }, {
      "left" : "print",
      "right" : "print",
      "info" : "SimpleName[30483-30488]:SimpleName[30663-30668]"
    }, {
      "left" : "Integer[] array",
      "right" : "Integer[] array",
      "info" : "SingleVariableDeclaration[30489-30504]:SingleVariableDeclaration[30669-30684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30506-30559]:Block[30686-30739]"
    }, {
      "left" : "return print(array, 0, array.length);",
      "right" : "return print(array, 0, array.length);",
      "info" : "ReturnStatement[30516-30553]:ReturnStatement[30696-30733]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30565-30571]:Modifier[30745-30751]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30572-30578]:Modifier[30752-30758]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[30579-30584]:Modifier[30759-30764]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30585-30591]:SimpleType[30765-30771]"
    }, {
      "left" : "print",
      "right" : "print",
      "info" : "SimpleName[30592-30597]:SimpleName[30772-30777]"
    }, {
      "left" : "Integer[] array",
      "right" : "Integer[] array",
      "info" : "SingleVariableDeclaration[30598-30613]:SingleVariableDeclaration[30778-30793]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[30615-30624]:SingleVariableDeclaration[30795-30804]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[30626-30636]:SingleVariableDeclaration[30806-30816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30638-30908]:Block[30818-31088]"
    }, {
      "left" : "final Integer[] clone = array.clone();",
      "right" : "final Integer[] clone = array.clone();",
      "info" : "VariableDeclarationStatement[30648-30686]:VariableDeclarationStatement[30828-30866]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[30695-30739]:VariableDeclarationStatement[30875-30919]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[30748-30867]:ForStatement[30928-31047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30781-30867]:Block[30961-31047]"
    }, {
      "left" : "int e = clone[start + i];",
      "right" : "int e = clone[start + i];",
      "info" : "VariableDeclarationStatement[30795-30820]:VariableDeclarationStatement[30975-31000]"
    }, {
      "left" : "builder.append(e + \" \");",
      "right" : "builder.append(e + \" \");",
      "info" : "ExpressionStatement[30833-30857]:ExpressionStatement[31013-31037]"
    }, {
      "left" : "return builder.toString();",
      "right" : "return builder.toString();",
      "info" : "ReturnStatement[30876-30902]:ReturnStatement[31056-31082]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30914-30920]:Modifier[31094-31100]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30921-30927]:Modifier[31101-31107]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[30928-30933]:Modifier[31108-31113]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30934-30940]:SimpleType[31114-31120]"
    }, {
      "left" : "printWithPivot",
      "right" : "printWithPivot",
      "info" : "SimpleName[30941-30955]:SimpleName[31121-31135]"
    }, {
      "left" : "Integer[] array",
      "right" : "Integer[] array",
      "info" : "SingleVariableDeclaration[30956-30971]:SingleVariableDeclaration[31136-31151]"
    }, {
      "left" : "int pivotIndex",
      "right" : "int pivotIndex",
      "info" : "SingleVariableDeclaration[30973-30987]:SingleVariableDeclaration[31153-31167]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[30989-30998]:SingleVariableDeclaration[31169-31178]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[31000-31010]:SingleVariableDeclaration[31180-31190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31012-31384]:Block[31192-31564]"
    }, {
      "left" : "final Integer[] clone = array.clone();",
      "right" : "final Integer[] clone = array.clone();",
      "info" : "VariableDeclarationStatement[31022-31060]:VariableDeclarationStatement[31202-31240]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[31069-31113]:VariableDeclarationStatement[31249-31293]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[31122-31343]:ForStatement[31302-31523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31155-31343]:Block[31335-31523]"
    }, {
      "left" : "int e = clone[start + i];",
      "right" : "int e = clone[start + i];",
      "info" : "VariableDeclarationStatement[31169-31194]:VariableDeclarationStatement[31349-31374]"
    }, {
      "left" : "if (i == pivotIndex)",
      "right" : "if (i == pivotIndex)",
      "info" : "IfStatement[31207-31333]:IfStatement[31387-31513]"
    }, {
      "left" : "builder.append(\"`\" + e + \"` \");",
      "right" : "builder.append(\"`\" + e + \"` \");",
      "info" : "ExpressionStatement[31244-31275]:ExpressionStatement[31424-31455]"
    }, {
      "left" : "builder.append(e + \" \");",
      "right" : "builder.append(e + \" \");",
      "info" : "ExpressionStatement[31309-31333]:ExpressionStatement[31489-31513]"
    }, {
      "left" : "return builder.toString();",
      "right" : "return builder.toString();",
      "info" : "ReturnStatement[31352-31378]:ReturnStatement[31532-31558]"
    } ]
  },
  "interFileMappings" : {
    "Moved to File: src/com/jwetherell/algorithms/data_structures/timing/DataStructuresTiming.java" : {
      "matchedElements" : [
 ],
      "mappings" : [
 {
        "left" : "System.gc();",
        "right" : "System.gc();",
        "info" : "ExpressionStatement[8300-8312]:ExpressionStatement[61578-61590]"
      }, {
        "left" : "System.gc();",
        "right" : "System.gc();",
        "info" : "ExpressionStatement[10236-10248]:ExpressionStatement[61553-61565]"
      } ]
    }
  }
}