{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MultiLayerNetwork",
      "right" : "MultiLayerNetwork",
      "info" : "TypeDeclaration[2185-57269]:TypeDeclaration[2185-57275]"
    }, {
      "left" : "private static final Logger log = LoggerFactory.getLogger(MultiLayerNetwork.class);",
      "right" : "private static final Logger log = LoggerFactory.getLogger(MultiLayerNetwork.class);",
      "info" : "FieldDeclaration[2410-2493]:FieldDeclaration[2410-2493]"
    }, {
      "left" : "private static final long serialVersionUID = -5029161847383716484L;",
      "right" : "private static final long serialVersionUID = -5029161847383716484L;",
      "info" : "FieldDeclaration[2498-2565]:FieldDeclaration[2498-2565]"
    }, {
      "left" : "protected Layer[] layers;",
      "right" : "protected Layer[] layers;",
      "info" : "FieldDeclaration[2598-2623]:FieldDeclaration[2598-2623]"
    }, {
      "left" : "protected INDArray input, labels;",
      "right" : "protected INDArray input, labels;",
      "info" : "FieldDeclaration[2688-2721]:FieldDeclaration[2688-2721]"
    }, {
      "left" : "protected boolean initCalled = false;",
      "right" : "protected boolean initCalled = false;",
      "info" : "FieldDeclaration[2790-2827]:FieldDeclaration[2790-2827]"
    }, {
      "left" : "private List<IterationListener> listeners = new ArrayList<>();",
      "right" : "private List<IterationListener> listeners = new ArrayList<>();",
      "info" : "FieldDeclaration[2832-2894]:FieldDeclaration[2832-2894]"
    }, {
      "left" : "protected NeuralNetConfiguration defaultConfiguration;",
      "right" : "protected NeuralNetConfiguration defaultConfiguration;",
      "info" : "FieldDeclaration[2900-2954]:FieldDeclaration[2900-2954]"
    }, {
      "left" : "protected MultiLayerConfiguration layerWiseConfigurations;",
      "right" : "protected MultiLayerConfiguration layerWiseConfigurations;",
      "info" : "FieldDeclaration[2959-3017]:FieldDeclaration[2959-3017]"
    }, {
      "left" : "protected INDArray mask;",
      "right" : "protected INDArray mask;",
      "info" : "FieldDeclaration[3070-3094]:FieldDeclaration[3070-3094]"
    }, {
      "left" : "public MultiLayerNetwork(MultiLayerConfiguration conf)",
      "right" : "public MultiLayerNetwork(MultiLayerConfiguration conf)",
      "info" : "MethodDeclaration[3101-3261]:MethodDeclaration[3101-3261]"
    }, {
      "left" : "public MultiLayerNetwork(String conf, INDArray params)",
      "right" : "public MultiLayerNetwork(String conf, INDArray params)",
      "info" : "MethodDeclaration[3267-3590]:MethodDeclaration[3267-3590]"
    }, {
      "left" : "public MultiLayerNetwork(MultiLayerConfiguration conf, INDArray params)",
      "right" : "public MultiLayerNetwork(MultiLayerConfiguration conf, INDArray params)",
      "info" : "MethodDeclaration[3597-3898]:MethodDeclaration[3597-3898]"
    }, {
      "left" : "protected void intializeConfigurations()",
      "right" : "protected void intializeConfigurations()",
      "info" : "MethodDeclaration[3905-4672]:MethodDeclaration[3905-4672]"
    }, {
      "left" : "public void pretrain(DataSetIterator iter)",
      "right" : "public void pretrain(DataSetIterator iter)",
      "info" : "MethodDeclaration[4679-6611]:MethodDeclaration[4679-6611]"
    }, {
      "left" : "public void pretrain(INDArray input)",
      "right" : "public void pretrain(INDArray input)",
      "info" : "MethodDeclaration[6618-7688]:MethodDeclaration[6618-7688]"
    }, {
      "left" : "public int batchSize()",
      "right" : "public int batchSize()",
      "info" : "MethodDeclaration[7695-7770]:MethodDeclaration[7695-7770]"
    }, {
      "left" : "public NeuralNetConfiguration conf()",
      "right" : "public NeuralNetConfiguration conf()",
      "info" : "MethodDeclaration[7776-7885]:MethodDeclaration[7776-7885]"
    }, {
      "left" : "public void setConf(NeuralNetConfiguration conf)",
      "right" : "public void setConf(NeuralNetConfiguration conf)",
      "info" : "MethodDeclaration[7891-8012]:MethodDeclaration[7891-8012]"
    }, {
      "left" : "public INDArray input()",
      "right" : "public INDArray input()",
      "info" : "MethodDeclaration[8018-8085]:MethodDeclaration[8018-8085]"
    }, {
      "left" : "public void validateInput()",
      "right" : "public void validateInput()",
      "info" : "MethodDeclaration[8091-8141]:MethodDeclaration[8091-8141]"
    }, {
      "left" : "public ConvexOptimizer getOptimizer()",
      "right" : "public ConvexOptimizer getOptimizer()",
      "info" : "MethodDeclaration[8147-8257]:MethodDeclaration[8147-8257]"
    }, {
      "left" : "public INDArray getParam(String param)",
      "right" : "public INDArray getParam(String param)",
      "info" : "MethodDeclaration[8263-8375]:MethodDeclaration[8263-8375]"
    }, {
      "left" : "public void initParams()",
      "right" : "public void initParams()",
      "info" : "MethodDeclaration[8381-8478]:MethodDeclaration[8381-8478]"
    }, {
      "left" : "public Map<String, INDArray> paramTable()",
      "right" : "public Map<String, INDArray> paramTable()",
      "info" : "MethodDeclaration[8484-8598]:MethodDeclaration[8484-8598]"
    }, {
      "left" : "public void setParamTable(Map<String, INDArray> paramTable)",
      "right" : "public void setParamTable(Map<String, INDArray> paramTable)",
      "info" : "MethodDeclaration[8604-8737]:MethodDeclaration[8604-8737]"
    }, {
      "left" : "public void setParam(String key, INDArray val)",
      "right" : "public void setParam(String key, INDArray val)",
      "info" : "MethodDeclaration[8743-8863]:MethodDeclaration[8743-8863]"
    }, {
      "left" : "public INDArray transform(INDArray data)",
      "right" : "public INDArray transform(INDArray data)",
      "info" : "MethodDeclaration[8869-9177]:MethodDeclaration[8869-9177]"
    }, {
      "left" : "public MultiLayerConfiguration getLayerWiseConfigurations()",
      "right" : "public MultiLayerConfiguration getLayerWiseConfigurations()",
      "info" : "MethodDeclaration[9184-9291]:MethodDeclaration[9184-9291]"
    }, {
      "left" : "public void setLayerWiseConfigurations(MultiLayerConfiguration layerWiseConfigurations)",
      "right" : "public void setLayerWiseConfigurations(MultiLayerConfiguration layerWiseConfigurations)",
      "info" : "MethodDeclaration[9297-9456]:MethodDeclaration[9297-9456]"
    }, {
      "left" : "public void initializeLayers(INDArray input)",
      "right" : "public void initializeLayers(INDArray input)",
      "info" : "MethodDeclaration[9462-10270]:MethodDeclaration[9462-10270]"
    }, {
      "left" : "public void init()",
      "right" : "public void init()",
      "info" : "MethodDeclaration[10276-13412]:MethodDeclaration[10276-13412]"
    }, {
      "left" : "public INDArray activate()",
      "right" : "public INDArray activate()",
      "info" : "MethodDeclaration[13419-13714]:MethodDeclaration[13419-13714]"
    }, {
      "left" : "public INDArray activate(int layer)",
      "right" : "public INDArray activate(int layer)",
      "info" : "MethodDeclaration[13720-13974]:MethodDeclaration[13720-13974]"
    }, {
      "left" : "public INDArray activate(int layer, INDArray input)",
      "right" : "public INDArray activate(int layer, INDArray input)",
      "info" : "MethodDeclaration[13980-14319]:MethodDeclaration[13980-14319]"
    }, {
      "left" : "public void initialize(DataSet data)",
      "right" : "public void initialize(DataSet data)",
      "info" : "MethodDeclaration[14326-14769]:MethodDeclaration[14326-14769]"
    }, {
      "left" : "public INDArray zFromPrevLayer(int curr, INDArray input)",
      "right" : "public INDArray zFromPrevLayer(int curr, INDArray input)",
      "info" : "MethodDeclaration[14776-15602]:MethodDeclaration[14776-15602]"
    }, {
      "left" : "public INDArray activationFromPrevLayer(int curr, INDArray input)",
      "right" : "public INDArray activationFromPrevLayer(int curr, INDArray input)",
      "info" : "MethodDeclaration[15608-16405]:MethodDeclaration[15608-16405]"
    }, {
      "left" : "public List<INDArray> computeZ()",
      "right" : "public List<INDArray> computeZ()",
      "info" : "MethodDeclaration[16412-17022]:MethodDeclaration[16412-17022]"
    }, {
      "left" : "public List<INDArray> computeZ(INDArray input)",
      "right" : "public List<INDArray> computeZ(INDArray input)",
      "info" : "MethodDeclaration[17028-17597]:MethodDeclaration[17028-17597]"
    }, {
      "left" : "public List<INDArray> feedForward(INDArray input,boolean test)",
      "right" : "public List<INDArray> feedForward(INDArray input,boolean test)",
      "info" : "MethodDeclaration[17603-17880]:MethodDeclaration[17603-17880]"
    }, {
      "left" : "public List<INDArray> feedForward(boolean test)",
      "right" : "public List<INDArray> feedForward(boolean test)",
      "info" : "MethodDeclaration[17886-18545]:MethodDeclaration[17886-18545]"
    }, {
      "left" : "public List<INDArray> feedForward()",
      "right" : "public List<INDArray> feedForward()",
      "info" : "MethodDeclaration[18551-18774]:MethodDeclaration[18551-18774]"
    }, {
      "left" : "public Pair<List<INDArray>,List<INDArray>> feedForwardActivationsAndDerivatives()",
      "right" : "public Pair<List<INDArray>,List<INDArray>> feedForwardActivationsAndDerivatives()",
      "info" : "MethodDeclaration[18781-20374]:MethodDeclaration[18781-20374]"
    }, {
      "left" : "public List<INDArray> feedForward(INDArray input)",
      "right" : "public List<INDArray> feedForward(INDArray input)",
      "info" : "MethodDeclaration[20381-20956]:MethodDeclaration[20381-20956]"
    }, {
      "left" : "public Gradient gradient()",
      "right" : "public Gradient gradient()",
      "info" : "MethodDeclaration[20962-21233]:MethodDeclaration[20962-21233]"
    }, {
      "left" : "public Pair<Gradient, Double> gradientAndScore()",
      "right" : "public Pair<Gradient, Double> gradientAndScore()",
      "info" : "MethodDeclaration[21239-21374]:MethodDeclaration[21239-21374]"
    }, {
      "left" : "protected void applyDropConnectIfNecessary(INDArray input)",
      "right" : "protected void applyDropConnectIfNecessary(INDArray input)",
      "info" : "MethodDeclaration[21380-22087]:MethodDeclaration[21380-22087]"
    }, {
      "left" : "protected List<INDArray> computeDeltasR(INDArray v)",
      "right" : "protected List<INDArray> computeDeltasR(INDArray v)",
      "info" : "MethodDeclaration[22156-24193]:MethodDeclaration[22156-24193]"
    }, {
      "left" : "public void dampingUpdate(double rho, double boost, double decrease)",
      "right" : "public void dampingUpdate(double rho, double boost, double decrease)",
      "info" : "MethodDeclaration[24239-24616]:MethodDeclaration[24239-24616]"
    }, {
      "left" : "public double reductionRatio(INDArray p, double currScore, double score, INDArray gradient)",
      "right" : "public double reductionRatio(INDArray p, double currScore, double score, INDArray gradient)",
      "info" : "MethodDeclaration[24663-25277]:MethodDeclaration[24663-25277]"
    }, {
      "left" : "protected List<Pair<INDArray, INDArray>> computeDeltas2()",
      "right" : "protected List<Pair<INDArray, INDArray>> computeDeltas2()",
      "info" : "MethodDeclaration[25346-27313]:MethodDeclaration[25346-27313]"
    }, {
      "left" : "public INDArray getBackPropRGradient(INDArray v)",
      "right" : "public INDArray getBackPropRGradient(INDArray v)",
      "info" : "MethodDeclaration[27321-27649]:MethodDeclaration[27321-27649]"
    }, {
      "left" : "public Pair<INDArray, INDArray> getBackPropGradient2()",
      "right" : "public Pair<INDArray, INDArray> getBackPropGradient2()",
      "info" : "MethodDeclaration[27656-28419]:MethodDeclaration[27656-28419]"
    }, {
      "left" : "public MultiLayerNetwork clone()",
      "right" : "public MultiLayerNetwork clone()",
      "info" : "MethodDeclaration[28426-28918]:MethodDeclaration[28426-28918]"
    }, {
      "left" : "public INDArray params()",
      "right" : "public INDArray params()",
      "info" : "MethodDeclaration[28925-29404]:MethodDeclaration[28925-29404]"
    }, {
      "left" : "public void setParams(INDArray params)",
      "right" : "public void setParams(INDArray params)",
      "info" : "MethodDeclaration[29410-29742]:MethodDeclaration[29410-29742]"
    }, {
      "left" : "public int numParams()",
      "right" : "public int numParams()",
      "info" : "MethodDeclaration[29749-30165]:MethodDeclaration[29749-30165]"
    }, {
      "left" : "public INDArray pack()",
      "right" : "public INDArray pack()",
      "info" : "MethodDeclaration[30171-30486]:MethodDeclaration[30171-30486]"
    }, {
      "left" : "public INDArray pack(List<Pair<INDArray, INDArray>> layers)",
      "right" : "public INDArray pack(List<Pair<INDArray, INDArray>> layers)",
      "info" : "MethodDeclaration[30492-30992]:MethodDeclaration[30492-30992]"
    }, {
      "left" : "public double score(org.nd4j.linalg.dataset.api.DataSet data)",
      "right" : "public double score(org.nd4j.linalg.dataset.api.DataSet data)",
      "info" : "MethodDeclaration[30999-31359]:MethodDeclaration[30999-31359]"
    }, {
      "left" : "public List<Pair<INDArray, INDArray>> unPack(INDArray param)",
      "right" : "public List<Pair<INDArray, INDArray>> unPack(INDArray param)",
      "info" : "MethodDeclaration[31367-33500]:MethodDeclaration[31367-33500]"
    }, {
      "left" : "protected List<Pair<Pair<INDArray, INDArray>, Pair<INDArray, INDArray>>> backPropGradient2()",
      "right" : "protected List<Pair<Pair<INDArray, INDArray>, Pair<INDArray, INDArray>>> backPropGradient2()",
      "info" : "MethodDeclaration[33506-36238]:MethodDeclaration[33506-36238]"
    }, {
      "left" : "public void fit(DataSetIterator iter)",
      "right" : "public void fit(DataSetIterator iter)",
      "info" : "MethodDeclaration[36245-36700]:MethodDeclaration[36245-36700]"
    }, {
      "left" : "protected void doBackWard(INDArray input,INDArray labels)",
      "right" : "protected void doBackWard(INDArray input,INDArray labels)",
      "info" : "MethodDeclaration[36749-41368]:MethodDeclaration[36749-41368]"
    }, {
      "left" : "public List<IterationListener> getListeners()",
      "right" : "public List<IterationListener> getListeners()",
      "info" : "MethodDeclaration[41375-41454]:MethodDeclaration[41375-41454]"
    }, {
      "left" : "public void setListeners(List<IterationListener> listeners)",
      "right" : "public void setListeners(List<IterationListener> listeners)",
      "info" : "MethodDeclaration[41460-41721]:MethodDeclaration[41460-41721]"
    }, {
      "left" : "public void finetune(DataSetIterator iter)",
      "right" : "public void finetune(DataSetIterator iter)",
      "info" : "MethodDeclaration[41727-42714]:MethodDeclaration[41727-42714]"
    }, {
      "left" : "public void finetune(INDArray labels)",
      "right" : "public void finetune(INDArray labels)",
      "info" : "MethodDeclaration[42721-43557]:MethodDeclaration[42721-43557]"
    }, {
      "left" : "public int[] predict(INDArray d)",
      "right" : "public int[] predict(INDArray d)",
      "info" : "MethodDeclaration[43564-44107]:MethodDeclaration[43564-44107]"
    }, {
      "left" : "public INDArray labelProbabilities(INDArray examples)",
      "right" : "public INDArray labelProbabilities(INDArray examples)",
      "info" : "MethodDeclaration[44113-44601]:MethodDeclaration[44113-44601]"
    }, {
      "left" : "public void fit(INDArray examples, INDArray labels)",
      "right" : "public void fit(INDArray examples, INDArray labels)",
      "info" : "MethodDeclaration[44607-45116]:MethodDeclaration[44607-45122]"
    }, {
      "left" : "public void fit(INDArray data)",
      "right" : "public void fit(INDArray data)",
      "info" : "MethodDeclaration[45123-45199]:MethodDeclaration[45129-45205]"
    }, {
      "left" : "public void iterate(INDArray input)",
      "right" : "public void iterate(INDArray input)",
      "info" : "MethodDeclaration[45205-45287]:MethodDeclaration[45211-45293]"
    }, {
      "left" : "public void fit(org.nd4j.linalg.dataset.api.DataSet data)",
      "right" : "public void fit(org.nd4j.linalg.dataset.api.DataSet data)",
      "info" : "MethodDeclaration[45294-45513]:MethodDeclaration[45300-45519]"
    }, {
      "left" : "public void fit(INDArray examples, int[] labels)",
      "right" : "public void fit(INDArray examples, int[] labels)",
      "info" : "MethodDeclaration[45519-45886]:MethodDeclaration[45525-45892]"
    }, {
      "left" : "public INDArray output(INDArray x,boolean test)",
      "right" : "public INDArray output(INDArray x,boolean test)",
      "info" : "MethodDeclaration[45893-46628]:MethodDeclaration[45899-46634]"
    }, {
      "left" : "public INDArray output(INDArray x)",
      "right" : "public INDArray output(INDArray x)",
      "info" : "MethodDeclaration[46634-46998]:MethodDeclaration[46640-47004]"
    }, {
      "left" : "public INDArray reconstruct(INDArray x, int layerNum)",
      "right" : "public INDArray reconstruct(INDArray x, int layerNum)",
      "info" : "MethodDeclaration[47005-47726]:MethodDeclaration[47011-47732]"
    }, {
      "left" : "public void printConfiguration()",
      "right" : "public void printConfiguration()",
      "info" : "MethodDeclaration[47733-48084]:MethodDeclaration[47739-48090]"
    }, {
      "left" : "public void update(MultiLayerNetwork network)",
      "right" : "public void update(MultiLayerNetwork network)",
      "info" : "MethodDeclaration[48091-48576]:MethodDeclaration[48097-48582]"
    }, {
      "left" : "public double score(INDArray input, INDArray labels)",
      "right" : "public double score(INDArray input, INDArray labels)",
      "info" : "MethodDeclaration[48583-49088]:MethodDeclaration[48589-49094]"
    }, {
      "left" : "public int numLabels()",
      "right" : "public int numLabels()",
      "info" : "MethodDeclaration[49094-49304]:MethodDeclaration[49100-49310]"
    }, {
      "left" : "public double score(DataSet data)",
      "right" : "public double score(DataSet data)",
      "info" : "MethodDeclaration[49311-49671]:MethodDeclaration[49317-49677]"
    }, {
      "left" : "public void fit()",
      "right" : "public void fit()",
      "info" : "MethodDeclaration[49678-49745]:MethodDeclaration[49684-49751]"
    }, {
      "left" : "public void update(INDArray gradient, String paramType)",
      "right" : "public void update(INDArray gradient, String paramType)",
      "info" : "MethodDeclaration[49751-49829]:MethodDeclaration[49757-49835]"
    }, {
      "left" : "public double score()",
      "right" : "public double score()",
      "info" : "MethodDeclaration[49836-50154]:MethodDeclaration[49842-50160]"
    }, {
      "left" : "public void setScore()",
      "right" : "public void setScore()",
      "info" : "MethodDeclaration[50160-50205]:MethodDeclaration[50166-50211]"
    }, {
      "left" : "public void accumulateScore(double accum)",
      "right" : "public void accumulateScore(double accum)",
      "info" : "MethodDeclaration[50211-50275]:MethodDeclaration[50217-50281]"
    }, {
      "left" : "public void clear()",
      "right" : "public void clear()",
      "info" : "MethodDeclaration[50282-50434]:MethodDeclaration[50288-50440]"
    }, {
      "left" : "public double score(INDArray param)",
      "right" : "public double score(INDArray param)",
      "info" : "MethodDeclaration[50440-50986]:MethodDeclaration[50446-50992]"
    }, {
      "left" : "public void merge(MultiLayerNetwork network, int batchSize)",
      "right" : "public void merge(MultiLayerNetwork network, int batchSize)",
      "info" : "MethodDeclaration[50993-52009]:MethodDeclaration[50999-52015]"
    }, {
      "left" : "public void setInput(INDArray input)",
      "right" : "public void setInput(INDArray input)",
      "info" : "MethodDeclaration[52016-52594]:MethodDeclaration[52022-52600]"
    }, {
      "left" : "private void initMask()",
      "right" : "private void initMask()",
      "info" : "MethodDeclaration[52600-52679]:MethodDeclaration[52606-52685]"
    }, {
      "left" : "public Layer getOutputLayer()",
      "right" : "public Layer getOutputLayer()",
      "info" : "MethodDeclaration[52687-52842]:MethodDeclaration[52693-52848]"
    }, {
      "left" : "public void setParameters(INDArray params)",
      "right" : "public void setParameters(INDArray params)",
      "info" : "MethodDeclaration[52849-53595]:MethodDeclaration[52855-53601]"
    }, {
      "left" : "public List<INDArray> feedForwardR(List<INDArray> acts, INDArray v)",
      "right" : "public List<INDArray> feedForwardR(List<INDArray> acts, INDArray v)",
      "info" : "MethodDeclaration[53602-54591]:MethodDeclaration[53608-54597]"
    }, {
      "left" : "public List<INDArray> feedForwardR(INDArray v)",
      "right" : "public List<INDArray> feedForwardR(INDArray v)",
      "info" : "MethodDeclaration[54598-54858]:MethodDeclaration[54604-54864]"
    }, {
      "left" : "protected List<Pair<INDArray, INDArray>> backPropGradientR(INDArray v)",
      "right" : "protected List<Pair<INDArray, INDArray>> backPropGradientR(INDArray v)",
      "info" : "MethodDeclaration[54864-56564]:MethodDeclaration[54870-56570]"
    }, {
      "left" : "public INDArray getLabels()",
      "right" : "public INDArray getLabels()",
      "info" : "MethodDeclaration[56571-56629]:MethodDeclaration[56577-56635]"
    }, {
      "left" : "public INDArray getInput()",
      "right" : "public INDArray getInput()",
      "info" : "MethodDeclaration[56635-56691]:MethodDeclaration[56641-56697]"
    }, {
      "left" : "public void setLabels(INDArray labels)",
      "right" : "public void setLabels(INDArray labels)",
      "info" : "MethodDeclaration[56700-56776]:MethodDeclaration[56706-56782]"
    }, {
      "left" : "public int getnLayers()",
      "right" : "public int getnLayers()",
      "info" : "MethodDeclaration[56782-56985]:MethodDeclaration[56788-56991]"
    }, {
      "left" : "public Layer[] getLayers()",
      "right" : "public Layer[] getLayers()",
      "info" : "MethodDeclaration[56991-57048]:MethodDeclaration[56997-57054]"
    }, {
      "left" : "public void setLayers(Layer[] layers)",
      "right" : "public void setLayers(Layer[] layers)",
      "info" : "MethodDeclaration[57054-57129]:MethodDeclaration[57060-57135]"
    }, {
      "left" : "public INDArray getMask()",
      "right" : "public INDArray getMask()",
      "info" : "MethodDeclaration[57135-57189]:MethodDeclaration[57141-57195]"
    }, {
      "left" : "public void setMask(INDArray mask)",
      "right" : "public void setMask(INDArray mask)",
      "info" : "MethodDeclaration[57195-57263]:MethodDeclaration[57201-57269]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2335-2341]:Modifier[2335-2341]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2342-2347]:TYPE_DECLARATION_KIND[2342-2347]"
    }, {
      "left" : "MultiLayerNetwork",
      "right" : "MultiLayerNetwork",
      "info" : "SimpleName[2348-2365]:SimpleName[2348-2365]"
    }, {
      "left" : "Serializable",
      "right" : "Serializable",
      "info" : "SimpleType[2377-2389]:SimpleType[2377-2389]"
    }, {
      "left" : "Classifier",
      "right" : "Classifier",
      "info" : "SimpleType[2391-2401]:SimpleType[2391-2401]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3101-3107]:Modifier[3101-3107]"
    }, {
      "left" : "MultiLayerNetwork",
      "right" : "MultiLayerNetwork",
      "info" : "SimpleName[3108-3125]:SimpleName[3108-3125]"
    }, {
      "left" : "MultiLayerConfiguration conf",
      "right" : "MultiLayerConfiguration conf",
      "info" : "SingleVariableDeclaration[3126-3154]:SingleVariableDeclaration[3126-3154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3156-3261]:Block[3156-3261]"
    }, {
      "left" : "this.layerWiseConfigurations = conf;",
      "right" : "this.layerWiseConfigurations = conf;",
      "info" : "ExpressionStatement[3166-3202]:ExpressionStatement[3166-3202]"
    }, {
      "left" : "this.defaultConfiguration = conf.getConf(0);",
      "right" : "this.defaultConfiguration = conf.getConf(0);",
      "info" : "ExpressionStatement[3211-3255]:ExpressionStatement[3211-3255]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3427-3433]:Modifier[3427-3433]"
    }, {
      "left" : "MultiLayerNetwork",
      "right" : "MultiLayerNetwork",
      "info" : "SimpleName[3434-3451]:SimpleName[3434-3451]"
    }, {
      "left" : "String conf",
      "right" : "String conf",
      "info" : "SingleVariableDeclaration[3452-3463]:SingleVariableDeclaration[3452-3463]"
    }, {
      "left" : "INDArray params",
      "right" : "INDArray params",
      "info" : "SingleVariableDeclaration[3465-3480]:SingleVariableDeclaration[3465-3480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3482-3590]:Block[3482-3590]"
    }, {
      "left" : "this(MultiLayerConfiguration.fromJson(conf));",
      "right" : "this(MultiLayerConfiguration.fromJson(conf));",
      "info" : "ConstructorInvocation[3492-3537]:ConstructorInvocation[3492-3537]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[3546-3553]:ExpressionStatement[3546-3553]"
    }, {
      "left" : "setParameters(params);",
      "right" : "setParameters(params);",
      "info" : "ExpressionStatement[3562-3584]:ExpressionStatement[3562-3584]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3752-3758]:Modifier[3752-3758]"
    }, {
      "left" : "MultiLayerNetwork",
      "right" : "MultiLayerNetwork",
      "info" : "SimpleName[3759-3776]:SimpleName[3759-3776]"
    }, {
      "left" : "MultiLayerConfiguration conf",
      "right" : "MultiLayerConfiguration conf",
      "info" : "SingleVariableDeclaration[3777-3805]:SingleVariableDeclaration[3777-3805]"
    }, {
      "left" : "INDArray params",
      "right" : "INDArray params",
      "info" : "SingleVariableDeclaration[3807-3822]:SingleVariableDeclaration[3807-3822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3824-3898]:Block[3824-3898]"
    }, {
      "left" : "this(conf);",
      "right" : "this(conf);",
      "info" : "ConstructorInvocation[3834-3845]:ConstructorInvocation[3834-3845]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[3854-3861]:ExpressionStatement[3854-3861]"
    }, {
      "left" : "setParameters(params);",
      "right" : "setParameters(params);",
      "info" : "ExpressionStatement[3870-3892]:ExpressionStatement[3870-3892]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3905-3914]:Modifier[3905-3914]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3915-3919]:PrimitiveType[3915-3919]"
    }, {
      "left" : "intializeConfigurations",
      "right" : "intializeConfigurations",
      "info" : "SimpleName[3920-3943]:SimpleName[3920-3943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3946-4672]:Block[3946-4672]"
    }, {
      "left" : "if (layerWiseConfigurations == null)",
      "right" : "if (layerWiseConfigurations == null)",
      "info" : "IfStatement[3957-4078]:IfStatement[3957-4078]"
    }, {
      "left" : "layerWiseConfigurations = new MultiLayerConfiguration.Builder().build();",
      "right" : "layerWiseConfigurations = new MultiLayerConfiguration.Builder().build();",
      "info" : "ExpressionStatement[4006-4078]:ExpressionStatement[4006-4078]"
    }, {
      "left" : "if (layers == null)",
      "right" : "if (layers == null)",
      "info" : "IfStatement[4088-4153]:IfStatement[4088-4153]"
    }, {
      "left" : "layers = new Layer[getnLayers()];",
      "right" : "layers = new Layer[getnLayers()];",
      "info" : "ExpressionStatement[4120-4153]:ExpressionStatement[4120-4153]"
    }, {
      "left" : "if (defaultConfiguration == null)",
      "right" : "if (defaultConfiguration == null)",
      "info" : "IfStatement[4163-4298]:IfStatement[4163-4298]"
    }, {
      "left" : "defaultConfiguration = new NeuralNetConfiguration.Builder()\n                    .build();",
      "right" : "defaultConfiguration = new NeuralNetConfiguration.Builder()\n                    .build();",
      "info" : "ExpressionStatement[4209-4298]:ExpressionStatement[4209-4298]"
    }, {
      "left" : "if (layerWiseConfigurations == null || layerWiseConfigurations.getConfs().isEmpty())",
      "right" : "if (layerWiseConfigurations == null || layerWiseConfigurations.getConfs().isEmpty())",
      "info" : "IfStatement[4383-4664]:IfStatement[4383-4664]"
    }, {
      "left" : "for (int i = 0; i < layerWiseConfigurations.getHiddenLayerSizes().length + 1; i++)",
      "right" : "for (int i = 0; i < layerWiseConfigurations.getHiddenLayerSizes().length + 1; i++)",
      "info" : "ForStatement[4480-4664]:ForStatement[4480-4664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4563-4664]:Block[4563-4664]"
    }, {
      "left" : "layerWiseConfigurations.getConfs().add(defaultConfiguration.clone());",
      "right" : "layerWiseConfigurations.getConfs().add(defaultConfiguration.clone());",
      "info" : "ExpressionStatement[4581-4650]:ExpressionStatement[4581-4650]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5108-5114]:Modifier[5108-5114]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5115-5119]:PrimitiveType[5115-5119]"
    }, {
      "left" : "pretrain",
      "right" : "pretrain",
      "info" : "SimpleName[5120-5128]:SimpleName[5120-5128]"
    }, {
      "left" : "DataSetIterator iter",
      "right" : "DataSetIterator iter",
      "info" : "SingleVariableDeclaration[5129-5149]:SingleVariableDeclaration[5129-5149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5151-6611]:Block[5151-6611]"
    }, {
      "left" : "if (!layerWiseConfigurations.isPretrain())",
      "right" : "if (!layerWiseConfigurations.isPretrain())",
      "info" : "IfStatement[5161-5223]:IfStatement[5161-5223]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5216-5223]:ReturnStatement[5216-5223]"
    }, {
      "left" : "INDArray layerInput;",
      "right" : "INDArray layerInput;",
      "info" : "VariableDeclarationStatement[5233-5253]:VariableDeclarationStatement[5233-5253]"
    }, {
      "left" : "for (int i = 0; i < getnLayers(); i++)",
      "right" : "for (int i = 0; i < getnLayers(); i++)",
      "info" : "ForStatement[5263-6605]:ForStatement[5263-6605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5302-6605]:Block[5302-6605]"
    }, {
      "left" : "if (i == 0)",
      "right" : "if (i == 0)",
      "info" : "IfStatement[5316-6595]:IfStatement[5316-6595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5328-6083]:Block[5328-6083]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[5346-6038]:WhileStatement[5346-6038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5369-6038]:Block[5369-6038]"
    }, {
      "left" : "DataSet next = iter.next();",
      "right" : "DataSet next = iter.next();",
      "info" : "VariableDeclarationStatement[5391-5418]:VariableDeclarationStatement[5391-5418]"
    }, {
      "left" : "this.input = next.getFeatureMatrix();",
      "right" : "this.input = next.getFeatureMatrix();",
      "info" : "ExpressionStatement[5439-5476]:ExpressionStatement[5439-5476]"
    }, {
      "left" : "if (this.getInput() == null || this.getLayers() == null)",
      "right" : "if (this.getInput() == null || this.getLayers() == null)",
      "info" : "IfStatement[5633-5849]:IfStatement[5633-5849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5690-5803]:Block[5690-5803]"
    }, {
      "left" : "setInput(input);",
      "right" : "setInput(input);",
      "info" : "ExpressionStatement[5716-5732]:ExpressionStatement[5716-5732]"
    }, {
      "left" : "initializeLayers(input);",
      "right" : "initializeLayers(input);",
      "info" : "ExpressionStatement[5757-5781]:ExpressionStatement[5757-5781]"
    }, {
      "left" : "setInput(input);",
      "right" : "setInput(input);",
      "info" : "ExpressionStatement[5833-5849]:ExpressionStatement[5833-5849]"
    }, {
      "left" : "getLayers()[i].fit(next.getFeatureMatrix());",
      "right" : "getLayers()[i].fit(next.getFeatureMatrix());",
      "info" : "ExpressionStatement[5870-5914]:ExpressionStatement[5870-5914]"
    }, {
      "left" : "log.info(\"Training on layer \" + (i + 1) + \" with \" + input.slices() + \" examples\");",
      "right" : "log.info(\"Training on layer \" + (i + 1) + \" with \" + input.slices() + \" examples\");",
      "info" : "ExpressionStatement[5935-6018]:ExpressionStatement[5935-6018]"
    }, {
      "left" : "iter.reset();",
      "right" : "iter.reset();",
      "info" : "ExpressionStatement[6056-6069]:ExpressionStatement[6056-6069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6089-6595]:Block[6089-6595]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[6107-6548]:WhileStatement[6107-6548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6130-6548]:Block[6130-6548]"
    }, {
      "left" : "DataSet next = iter.next();",
      "right" : "DataSet next = iter.next();",
      "info" : "VariableDeclarationStatement[6152-6179]:VariableDeclarationStatement[6152-6179]"
    }, {
      "left" : "layerInput = next.getFeatureMatrix();",
      "right" : "layerInput = next.getFeatureMatrix();",
      "info" : "ExpressionStatement[6200-6237]:ExpressionStatement[6200-6237]"
    }, {
      "left" : "for (int j = 1; j <= i; j++)\n                        layerInput = activationFromPrevLayer(j - 1, layerInput);",
      "right" : "for (int j = 1; j <= i; j++)\n                        layerInput = activationFromPrevLayer(j - 1, layerInput);",
      "info" : "ForStatement[6258-6367]:ForStatement[6258-6367]"
    }, {
      "left" : "layerInput = activationFromPrevLayer(j - 1, layerInput);",
      "right" : "layerInput = activationFromPrevLayer(j - 1, layerInput);",
      "info" : "ExpressionStatement[6311-6367]:ExpressionStatement[6311-6367]"
    }, {
      "left" : "log.info(\"Training on layer \" + (i + 1) + \" with \" + layerInput.slices() + \" examples\");",
      "right" : "log.info(\"Training on layer \" + (i + 1) + \" with \" + layerInput.slices() + \" examples\");",
      "info" : "ExpressionStatement[6389-6477]:ExpressionStatement[6389-6477]"
    }, {
      "left" : "getLayers()[i].fit(layerInput);",
      "right" : "getLayers()[i].fit(layerInput);",
      "info" : "ExpressionStatement[6498-6529]:ExpressionStatement[6498-6529]"
    }, {
      "left" : "iter.reset();",
      "right" : "iter.reset();",
      "info" : "ExpressionStatement[6566-6579]:ExpressionStatement[6566-6579]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7051-7057]:Modifier[7051-7057]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7058-7062]:PrimitiveType[7058-7062]"
    }, {
      "left" : "pretrain",
      "right" : "pretrain",
      "info" : "SimpleName[7063-7071]:SimpleName[7063-7071]"
    }, {
      "left" : "INDArray input",
      "right" : "INDArray input",
      "info" : "SingleVariableDeclaration[7072-7086]:SingleVariableDeclaration[7072-7086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7088-7688]:Block[7088-7688]"
    }, {
      "left" : "if (!layerWiseConfigurations.isPretrain())",
      "right" : "if (!layerWiseConfigurations.isPretrain())",
      "info" : "IfStatement[7099-7161]:IfStatement[7099-7161]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7154-7161]:ReturnStatement[7154-7161]"
    }, {
      "left" : "INDArray layerInput = null;",
      "right" : "INDArray layerInput = null;",
      "info" : "VariableDeclarationStatement[7295-7322]:VariableDeclarationStatement[7295-7322]"
    }, {
      "left" : "for (int i = 0; i < getnLayers() - 1; i++)",
      "right" : "for (int i = 0; i < getnLayers() - 1; i++)",
      "info" : "ForStatement[7332-7682]:ForStatement[7332-7682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7375-7682]:Block[7375-7682]"
    }, {
      "left" : "if (i == 0)",
      "right" : "if (i == 0)",
      "info" : "IfStatement[7389-7526]:IfStatement[7389-7526]"
    }, {
      "left" : "layerInput = input;",
      "right" : "layerInput = input;",
      "info" : "ExpressionStatement[7417-7436]:ExpressionStatement[7417-7436]"
    }, {
      "left" : "layerInput = activationFromPrevLayer(i - 1, layerInput);",
      "right" : "layerInput = activationFromPrevLayer(i - 1, layerInput);",
      "info" : "ExpressionStatement[7470-7526]:ExpressionStatement[7470-7526]"
    }, {
      "left" : "log.info(\"Training on layer \" + (i + 1) + \" with \" + layerInput.slices() + \" examples\");",
      "right" : "log.info(\"Training on layer \" + (i + 1) + \" with \" + layerInput.slices() + \" examples\");",
      "info" : "ExpressionStatement[7539-7627]:ExpressionStatement[7539-7627]"
    }, {
      "left" : "getLayers()[i].fit(layerInput);",
      "right" : "getLayers()[i].fit(layerInput);",
      "info" : "ExpressionStatement[7640-7671]:ExpressionStatement[7640-7671]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7695-7704]:MarkerAnnotation[7695-7704]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7709-7715]:Modifier[7709-7715]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[7716-7719]:PrimitiveType[7716-7719]"
    }, {
      "left" : "batchSize",
      "right" : "batchSize",
      "info" : "SimpleName[7720-7729]:SimpleName[7720-7729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7732-7770]:Block[7732-7770]"
    }, {
      "left" : "return input.slices();",
      "right" : "return input.slices();",
      "info" : "ReturnStatement[7742-7764]:ReturnStatement[7742-7764]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7776-7785]:MarkerAnnotation[7776-7785]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7790-7796]:Modifier[7790-7796]"
    }, {
      "left" : "NeuralNetConfiguration",
      "right" : "NeuralNetConfiguration",
      "info" : "SimpleType[7797-7819]:SimpleType[7797-7819]"
    }, {
      "left" : "conf",
      "right" : "conf",
      "info" : "SimpleName[7820-7824]:SimpleName[7820-7824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7827-7885]:Block[7827-7885]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[7837-7879]:ThrowStatement[7837-7879]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7891-7900]:MarkerAnnotation[7891-7900]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7905-7911]:Modifier[7905-7911]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7912-7916]:PrimitiveType[7912-7916]"
    }, {
      "left" : "setConf",
      "right" : "setConf",
      "info" : "SimpleName[7917-7924]:SimpleName[7917-7924]"
    }, {
      "left" : "NeuralNetConfiguration conf",
      "right" : "NeuralNetConfiguration conf",
      "info" : "SingleVariableDeclaration[7925-7952]:SingleVariableDeclaration[7925-7952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7954-8012]:Block[7954-8012]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[7964-8006]:ThrowStatement[7964-8006]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8018-8027]:MarkerAnnotation[8018-8027]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8032-8038]:Modifier[8032-8038]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[8039-8047]:SimpleType[8039-8047]"
    }, {
      "left" : "input",
      "right" : "input",
      "info" : "SimpleName[8048-8053]:SimpleName[8048-8053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8056-8085]:Block[8056-8085]"
    }, {
      "left" : "return input;",
      "right" : "return input;",
      "info" : "ReturnStatement[8066-8079]:ReturnStatement[8066-8079]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8091-8100]:MarkerAnnotation[8091-8100]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8105-8111]:Modifier[8105-8111]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8112-8116]:PrimitiveType[8112-8116]"
    }, {
      "left" : "validateInput",
      "right" : "validateInput",
      "info" : "SimpleName[8117-8130]:SimpleName[8117-8130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8133-8141]:Block[8133-8141]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8147-8156]:MarkerAnnotation[8147-8156]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8161-8167]:Modifier[8161-8167]"
    }, {
      "left" : "ConvexOptimizer",
      "right" : "ConvexOptimizer",
      "info" : "SimpleType[8168-8183]:SimpleType[8168-8183]"
    }, {
      "left" : "getOptimizer",
      "right" : "getOptimizer",
      "info" : "SimpleName[8184-8196]:SimpleName[8184-8196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8199-8257]:Block[8199-8257]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[8209-8251]:ThrowStatement[8209-8251]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8263-8272]:MarkerAnnotation[8263-8272]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8277-8283]:Modifier[8277-8283]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[8284-8292]:SimpleType[8284-8292]"
    }, {
      "left" : "getParam",
      "right" : "getParam",
      "info" : "SimpleName[8293-8301]:SimpleName[8293-8301]"
    }, {
      "left" : "String param",
      "right" : "String param",
      "info" : "SingleVariableDeclaration[8302-8314]:SingleVariableDeclaration[8302-8314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8316-8375]:Block[8316-8375]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[8326-8368]:ThrowStatement[8326-8368]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8381-8390]:MarkerAnnotation[8381-8390]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8395-8401]:Modifier[8395-8401]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8402-8406]:PrimitiveType[8402-8406]"
    }, {
      "left" : "initParams",
      "right" : "initParams",
      "info" : "SimpleName[8407-8417]:SimpleName[8407-8417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8420-8478]:Block[8420-8478]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[8430-8472]:ThrowStatement[8430-8472]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8484-8493]:MarkerAnnotation[8484-8493]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8498-8504]:Modifier[8498-8504]"
    }, {
      "left" : "Map<String, INDArray>",
      "right" : "Map<String, INDArray>",
      "info" : "ParameterizedType[8505-8526]:ParameterizedType[8505-8526]"
    }, {
      "left" : "paramTable",
      "right" : "paramTable",
      "info" : "SimpleName[8527-8537]:SimpleName[8527-8537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8540-8598]:Block[8540-8598]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[8550-8592]:ThrowStatement[8550-8592]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8604-8613]:MarkerAnnotation[8604-8613]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8618-8624]:Modifier[8618-8624]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8625-8629]:PrimitiveType[8625-8629]"
    }, {
      "left" : "setParamTable",
      "right" : "setParamTable",
      "info" : "SimpleName[8630-8643]:SimpleName[8630-8643]"
    }, {
      "left" : "Map<String, INDArray> paramTable",
      "right" : "Map<String, INDArray> paramTable",
      "info" : "SingleVariableDeclaration[8644-8676]:SingleVariableDeclaration[8644-8676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8678-8737]:Block[8678-8737]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[8688-8730]:ThrowStatement[8688-8730]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8743-8752]:MarkerAnnotation[8743-8752]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8757-8763]:Modifier[8757-8763]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8764-8768]:PrimitiveType[8764-8768]"
    }, {
      "left" : "setParam",
      "right" : "setParam",
      "info" : "SimpleName[8769-8777]:SimpleName[8769-8777]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[8778-8788]:SingleVariableDeclaration[8778-8788]"
    }, {
      "left" : "INDArray val",
      "right" : "INDArray val",
      "info" : "SingleVariableDeclaration[8790-8802]:SingleVariableDeclaration[8790-8802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8804-8863]:Block[8804-8863]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[8814-8856]:ThrowStatement[8814-8856]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9086-9095]:MarkerAnnotation[9086-9095]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9100-9106]:Modifier[9100-9106]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[9107-9115]:SimpleType[9107-9115]"
    }, {
      "left" : "transform",
      "right" : "transform",
      "info" : "SimpleName[9116-9125]:SimpleName[9116-9125]"
    }, {
      "left" : "INDArray data",
      "right" : "INDArray data",
      "info" : "SingleVariableDeclaration[9126-9139]:SingleVariableDeclaration[9126-9139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9141-9177]:Block[9141-9177]"
    }, {
      "left" : "return output(data);",
      "right" : "return output(data);",
      "info" : "ReturnStatement[9151-9171]:ReturnStatement[9151-9171]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9184-9190]:Modifier[9184-9190]"
    }, {
      "left" : "MultiLayerConfiguration",
      "right" : "MultiLayerConfiguration",
      "info" : "SimpleType[9191-9214]:SimpleType[9191-9214]"
    }, {
      "left" : "getLayerWiseConfigurations",
      "right" : "getLayerWiseConfigurations",
      "info" : "SimpleName[9215-9241]:SimpleName[9215-9241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9244-9291]:Block[9244-9291]"
    }, {
      "left" : "return layerWiseConfigurations;",
      "right" : "return layerWiseConfigurations;",
      "info" : "ReturnStatement[9254-9285]:ReturnStatement[9254-9285]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9297-9303]:Modifier[9297-9303]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9304-9308]:PrimitiveType[9304-9308]"
    }, {
      "left" : "setLayerWiseConfigurations",
      "right" : "setLayerWiseConfigurations",
      "info" : "SimpleName[9309-9335]:SimpleName[9309-9335]"
    }, {
      "left" : "MultiLayerConfiguration layerWiseConfigurations",
      "right" : "MultiLayerConfiguration layerWiseConfigurations",
      "info" : "SingleVariableDeclaration[9336-9383]:SingleVariableDeclaration[9336-9383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9385-9456]:Block[9385-9456]"
    }, {
      "left" : "this.layerWiseConfigurations = layerWiseConfigurations;",
      "right" : "this.layerWiseConfigurations = layerWiseConfigurations;",
      "info" : "ExpressionStatement[9395-9450]:ExpressionStatement[9395-9450]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9687-9693]:Modifier[9687-9693]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9694-9698]:PrimitiveType[9694-9698]"
    }, {
      "left" : "initializeLayers",
      "right" : "initializeLayers",
      "info" : "SimpleName[9699-9715]:SimpleName[9699-9715]"
    }, {
      "left" : "INDArray input",
      "right" : "INDArray input",
      "info" : "SingleVariableDeclaration[9716-9730]:SingleVariableDeclaration[9716-9730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9732-10270]:Block[9732-10270]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[9744-9862]:IfStatement[9744-9862]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unable to initialize neuralNets with empty input\");",
      "right" : "throw new IllegalArgumentException(\"Unable to initialize neuralNets with empty input\");",
      "info" : "ThrowStatement[9775-9862]:ThrowStatement[9775-9862]"
    }, {
      "left" : "int[] hiddenLayerSizes = getLayerWiseConfigurations().getHiddenLayerSizes();",
      "right" : "int[] hiddenLayerSizes = getLayerWiseConfigurations().getHiddenLayerSizes();",
      "info" : "VariableDeclarationStatement[9871-9947]:VariableDeclarationStatement[9871-9947]"
    }, {
      "left" : "if (input.shape().length == 2)",
      "right" : "if (input.shape().length == 2)",
      "info" : "IfStatement[9956-10188]:IfStatement[9956-10188]"
    }, {
      "left" : "for (int i = 0; i < hiddenLayerSizes.length; i++)\n                if (hiddenLayerSizes[i] < 1)\n                    throw new IllegalArgumentException(\"All hidden layer sizes must be >= 1\");",
      "right" : "for (int i = 0; i < hiddenLayerSizes.length; i++)\n                if (hiddenLayerSizes[i] < 1)\n                    throw new IllegalArgumentException(\"All hidden layer sizes must be >= 1\");",
      "info" : "ForStatement[9999-10188]:ForStatement[9999-10188]"
    }, {
      "left" : "if (hiddenLayerSizes[i] < 1)",
      "right" : "if (hiddenLayerSizes[i] < 1)",
      "info" : "IfStatement[10065-10188]:IfStatement[10065-10188]"
    }, {
      "left" : "throw new IllegalArgumentException(\"All hidden layer sizes must be >= 1\");",
      "right" : "throw new IllegalArgumentException(\"All hidden layer sizes must be >= 1\");",
      "info" : "ThrowStatement[10114-10188]:ThrowStatement[10114-10188]"
    }, {
      "left" : "this.input = input;",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[10199-10218]:ExpressionStatement[10199-10218]"
    }, {
      "left" : "if (!initCalled)",
      "right" : "if (!initCalled)",
      "info" : "IfStatement[10228-10264]:IfStatement[10228-10264]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[10257-10264]:ExpressionStatement[10257-10264]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10310-10316]:Modifier[10310-10316]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10317-10321]:PrimitiveType[10317-10321]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[10322-10326]:SimpleName[10322-10326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10329-13412]:Block[10329-13412]"
    }, {
      "left" : "if (layerWiseConfigurations == null || layers == null)",
      "right" : "if (layerWiseConfigurations == null || layers == null)",
      "info" : "IfStatement[10339-10432]:IfStatement[10339-10432]"
    }, {
      "left" : "intializeConfigurations();",
      "right" : "intializeConfigurations();",
      "info" : "ExpressionStatement[10406-10432]:ExpressionStatement[10406-10432]"
    }, {
      "left" : "if(initCalled)",
      "right" : "if(initCalled)",
      "info" : "IfStatement[10441-10475]:IfStatement[10441-10475]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10468-10475]:ReturnStatement[10468-10475]"
    }, {
      "left" : "INDArray layerInput = input();",
      "right" : "INDArray layerInput = input();",
      "info" : "VariableDeclarationStatement[10485-10515]:VariableDeclarationStatement[10485-10515]"
    }, {
      "left" : "int inputSize;",
      "right" : "int inputSize;",
      "info" : "VariableDeclarationStatement[10524-10538]:VariableDeclarationStatement[10524-10538]"
    }, {
      "left" : "if (getnLayers() < 1)",
      "right" : "if (getnLayers() < 1)",
      "info" : "IfStatement[10547-10692]:IfStatement[10547-10692]"
    }, {
      "left" : "throw new IllegalStateException(\"Unable to createComplex network neuralNets; number specified is less than 1\");",
      "right" : "throw new IllegalStateException(\"Unable to createComplex network neuralNets; number specified is less than 1\");",
      "info" : "ThrowStatement[10581-10692]:ThrowStatement[10581-10692]"
    }, {
      "left" : "int[] hiddenLayerSizes = layerWiseConfigurations.getHiddenLayerSizes();",
      "right" : "int[] hiddenLayerSizes = layerWiseConfigurations.getHiddenLayerSizes();",
      "info" : "VariableDeclarationStatement[10702-10773]:VariableDeclarationStatement[10702-10773]"
    }, {
      "left" : "int numHiddenLayersSizesUsed = 0;",
      "right" : "int numHiddenLayersSizesUsed = 0;",
      "info" : "VariableDeclarationStatement[10782-10815]:VariableDeclarationStatement[10782-10815]"
    }, {
      "left" : "if (this.layers == null || this.layers[0] == null)",
      "right" : "if (this.layers == null || this.layers[0] == null)",
      "info" : "IfStatement[10825-13406]:IfStatement[10825-13406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10876-13406]:Block[10876-13406]"
    }, {
      "left" : "if(this.layers == null)",
      "right" : "if(this.layers == null)",
      "info" : "IfStatement[10890-10968]:IfStatement[10890-10968]"
    }, {
      "left" : "this.layers = new Layer[getnLayers()];",
      "right" : "this.layers = new Layer[getnLayers()];",
      "info" : "ExpressionStatement[10930-10968]:ExpressionStatement[10930-10968]"
    }, {
      "left" : "for (int i = 0; i < getnLayers(); i++)",
      "right" : "for (int i = 0; i < getnLayers(); i++)",
      "info" : "ForStatement[11019-13341]:ForStatement[11019-13341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11058-13341]:Block[11058-13341]"
    }, {
      "left" : "NeuralNetConfiguration conf = layerWiseConfigurations.getConf(i);",
      "right" : "NeuralNetConfiguration conf = layerWiseConfigurations.getConf(i);",
      "info" : "VariableDeclarationStatement[11076-11141]:VariableDeclarationStatement[11076-11141]"
    }, {
      "left" : "Layer.Type type = LayerFactories.typeForFactory(conf);",
      "right" : "Layer.Type type = LayerFactories.typeForFactory(conf);",
      "info" : "VariableDeclarationStatement[11158-11212]:VariableDeclarationStatement[11158-11212]"
    }, {
      "left" : "if (i == 0)",
      "right" : "if (i == 0)",
      "info" : "IfStatement[11230-13242]:IfStatement[11230-13242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11242-11677]:Block[11242-11677]"
    }, {
      "left" : "inputSize = conf.getNIn();",
      "right" : "inputSize = conf.getNIn();",
      "info" : "ExpressionStatement[11264-11290]:ExpressionStatement[11264-11290]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[11311-11451]:IfStatement[11311-11451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11330-11451]:Block[11330-11451]"
    }, {
      "left" : "input = Nd4j.ones(inputSize);",
      "right" : "input = Nd4j.ones(inputSize);",
      "info" : "ExpressionStatement[11356-11385]:ExpressionStatement[11356-11385]"
    }, {
      "left" : "layerInput = input;",
      "right" : "layerInput = input;",
      "info" : "ExpressionStatement[11410-11429]:ExpressionStatement[11410-11429]"
    }, {
      "left" : "conf.setNIn(inputSize);",
      "right" : "conf.setNIn(inputSize);",
      "info" : "ExpressionStatement[11472-11495]:ExpressionStatement[11472-11495]"
    }, {
      "left" : "if (type == Layer.Type.FEED_FORWARD)",
      "right" : "if (type == Layer.Type.FEED_FORWARD)",
      "info" : "IfStatement[11517-11659]:IfStatement[11517-11659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11554-11659]:Block[11554-11659]"
    }, {
      "left" : "conf.setNOut(hiddenLayerSizes[numHiddenLayersSizesUsed]);",
      "right" : "conf.setNOut(hiddenLayerSizes[numHiddenLayersSizesUsed]);",
      "info" : "ExpressionStatement[11580-11637]:ExpressionStatement[11580-11637]"
    }, {
      "left" : "if (i < getLayers().length)",
      "right" : "if (i < getLayers().length)",
      "info" : "IfStatement[11699-13242]:IfStatement[11699-13242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11727-13242]:Block[11727-13242]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[11749-11848]:IfStatement[11749-11848]"
    }, {
      "left" : "layerInput = activationFromPrevLayer(i - 1, layerInput);",
      "right" : "layerInput = activationFromPrevLayer(i - 1, layerInput);",
      "info" : "ExpressionStatement[11792-11848]:ExpressionStatement[11792-11848]"
    }, {
      "left" : "if(type == Layer.Type.FEED_FORWARD)",
      "right" : "if(type == Layer.Type.FEED_FORWARD)",
      "info" : "IfStatement[12765-13224]:IfStatement[12765-13224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12801-13224]:Block[12801-13224]"
    }, {
      "left" : "if(i!=(layers.length-1))",
      "right" : "if(i!=(layers.length-1))",
      "info" : "IfStatement[12827-13202]:IfStatement[12827-13202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12852-13084]:Block[12852-13084]"
    }, {
      "left" : "numHiddenLayersSizesUsed++;",
      "right" : "numHiddenLayersSizesUsed++;",
      "info" : "ExpressionStatement[12882-12909]:ExpressionStatement[12882-12909]"
    }, {
      "left" : "conf.setNIn(layerInput.columns());",
      "right" : "conf.setNIn(layerInput.columns());",
      "info" : "ExpressionStatement[12938-12972]:ExpressionStatement[12938-12972]"
    }, {
      "left" : "conf.setNOut(hiddenLayerSizes[numHiddenLayersSizesUsed]);",
      "right" : "conf.setNOut(hiddenLayerSizes[numHiddenLayersSizesUsed]);",
      "info" : "ExpressionStatement[13001-13058]:ExpressionStatement[13001-13058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13090-13202]:Block[13090-13202]"
    }, {
      "left" : "conf.setNIn(hiddenLayerSizes[numHiddenLayersSizesUsed]);",
      "right" : "conf.setNIn(hiddenLayerSizes[numHiddenLayersSizesUsed]);",
      "info" : "ExpressionStatement[13120-13176]:ExpressionStatement[13120-13176]"
    }, {
      "left" : "layers[i] = LayerFactories.getFactory(conf).create(conf, listeners);",
      "right" : "layers[i] = LayerFactories.getFactory(conf).create(conf, listeners);",
      "info" : "ExpressionStatement[13259-13327]:ExpressionStatement[13259-13327]"
    }, {
      "left" : "initCalled = true;",
      "right" : "initCalled = true;",
      "info" : "ExpressionStatement[13354-13372]:ExpressionStatement[13354-13372]"
    }, {
      "left" : "initMask();",
      "right" : "initMask();",
      "info" : "ExpressionStatement[13385-13396]:ExpressionStatement[13385-13396]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13617-13623]:Modifier[13617-13623]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[13624-13632]:SimpleType[13624-13632]"
    }, {
      "left" : "activate",
      "right" : "activate",
      "info" : "SimpleName[13633-13641]:SimpleName[13633-13641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13644-13714]:Block[13644-13714]"
    }, {
      "left" : "return getLayers()[getLayers().length - 1].activate();",
      "right" : "return getLayers()[getLayers().length - 1].activate();",
      "info" : "ReturnStatement[13654-13708]:ReturnStatement[13654-13708]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13885-13891]:Modifier[13885-13891]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[13892-13900]:SimpleType[13892-13900]"
    }, {
      "left" : "activate",
      "right" : "activate",
      "info" : "SimpleName[13901-13909]:SimpleName[13901-13909]"
    }, {
      "left" : "int layer",
      "right" : "int layer",
      "info" : "SingleVariableDeclaration[13910-13919]:SingleVariableDeclaration[13910-13919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13921-13974]:Block[13921-13974]"
    }, {
      "left" : "return getLayers()[layer].activate();",
      "right" : "return getLayers()[layer].activate();",
      "info" : "ReturnStatement[13931-13968]:ReturnStatement[13931-13968]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14209-14215]:Modifier[14209-14215]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[14216-14224]:SimpleType[14216-14224]"
    }, {
      "left" : "activate",
      "right" : "activate",
      "info" : "SimpleName[14225-14233]:SimpleName[14225-14233]"
    }, {
      "left" : "int layer",
      "right" : "int layer",
      "info" : "SingleVariableDeclaration[14234-14243]:SingleVariableDeclaration[14234-14243]"
    }, {
      "left" : "INDArray input",
      "right" : "INDArray input",
      "info" : "SingleVariableDeclaration[14245-14259]:SingleVariableDeclaration[14245-14259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14261-14319]:Block[14261-14319]"
    }, {
      "left" : "return getLayers()[layer].activate(input);",
      "right" : "return getLayers()[layer].activate(input);",
      "info" : "ReturnStatement[14271-14313]:ReturnStatement[14271-14313]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14450-14456]:Modifier[14450-14456]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14457-14461]:PrimitiveType[14457-14461]"
    }, {
      "left" : "initialize",
      "right" : "initialize",
      "info" : "SimpleName[14462-14472]:SimpleName[14462-14472]"
    }, {
      "left" : "DataSet data",
      "right" : "DataSet data",
      "info" : "SingleVariableDeclaration[14473-14485]:SingleVariableDeclaration[14473-14485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14487-14769]:Block[14487-14769]"
    }, {
      "left" : "setInput(data.getFeatureMatrix());",
      "right" : "setInput(data.getFeatureMatrix());",
      "info" : "ExpressionStatement[14497-14531]:ExpressionStatement[14497-14531]"
    }, {
      "left" : "feedForward(getInput());",
      "right" : "feedForward(getInput());",
      "info" : "ExpressionStatement[14540-14564]:ExpressionStatement[14540-14564]"
    }, {
      "left" : "this.labels = data.getLabels();",
      "right" : "this.labels = data.getLabels();",
      "info" : "ExpressionStatement[14573-14604]:ExpressionStatement[14573-14604]"
    }, {
      "left" : "if (getOutputLayer() instanceof OutputLayer)",
      "right" : "if (getOutputLayer() instanceof OutputLayer)",
      "info" : "IfStatement[14613-14763]:IfStatement[14613-14763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14658-14763]:Block[14658-14763]"
    }, {
      "left" : "OutputLayer o = (OutputLayer) getOutputLayer();",
      "right" : "OutputLayer o = (OutputLayer) getOutputLayer();",
      "info" : "VariableDeclarationStatement[14672-14719]:VariableDeclarationStatement[14672-14719]"
    }, {
      "left" : "o.setLabels(labels);",
      "right" : "o.setLabels(labels);",
      "info" : "ExpressionStatement[14732-14752]:ExpressionStatement[14732-14752]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15047-15053]:Modifier[15047-15053]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[15054-15062]:SimpleType[15054-15062]"
    }, {
      "left" : "zFromPrevLayer",
      "right" : "zFromPrevLayer",
      "info" : "SimpleName[15063-15077]:SimpleName[15063-15077]"
    }, {
      "left" : "int curr",
      "right" : "int curr",
      "info" : "SingleVariableDeclaration[15078-15086]:SingleVariableDeclaration[15078-15086]"
    }, {
      "left" : "INDArray input",
      "right" : "INDArray input",
      "info" : "SingleVariableDeclaration[15088-15102]:SingleVariableDeclaration[15088-15102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15104-15602]:Block[15104-15602]"
    }, {
      "left" : "if(getLayerWiseConfigurations().getInputPreProcess(curr) != null)",
      "right" : "if(getLayerWiseConfigurations().getInputPreProcess(curr) != null)",
      "info" : "IfStatement[15114-15272]:IfStatement[15114-15272]"
    }, {
      "left" : "input = getLayerWiseConfigurations().getInputPreProcess(curr).preProcess(input);",
      "right" : "input = getLayerWiseConfigurations().getInputPreProcess(curr).preProcess(input);",
      "info" : "ExpressionStatement[15192-15272]:ExpressionStatement[15192-15272]"
    }, {
      "left" : "INDArray ret = layers[curr].preOutput(input);",
      "right" : "INDArray ret = layers[curr].preOutput(input);",
      "info" : "VariableDeclarationStatement[15281-15326]:VariableDeclarationStatement[15281-15326]"
    }, {
      "left" : "if (getLayerWiseConfigurations().getProcessors() != null && getLayerWiseConfigurations().getPreProcessor(curr) != null)",
      "right" : "if (getLayerWiseConfigurations().getProcessors() != null && getLayerWiseConfigurations().getPreProcessor(curr) != null)",
      "info" : "IfStatement[15335-15576]:IfStatement[15335-15576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15455-15576]:Block[15455-15576]"
    }, {
      "left" : "ret = getLayerWiseConfigurations().getPreProcessor(curr).preProcess(ret);",
      "right" : "ret = getLayerWiseConfigurations().getPreProcessor(curr).preProcess(ret);",
      "info" : "ExpressionStatement[15469-15542]:ExpressionStatement[15469-15542]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[15555-15566]:ReturnStatement[15555-15566]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[15585-15596]:ReturnStatement[15585-15596]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15842-15848]:Modifier[15842-15848]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[15849-15857]:SimpleType[15849-15857]"
    }, {
      "left" : "activationFromPrevLayer",
      "right" : "activationFromPrevLayer",
      "info" : "SimpleName[15858-15881]:SimpleName[15858-15881]"
    }, {
      "left" : "int curr",
      "right" : "int curr",
      "info" : "SingleVariableDeclaration[15882-15890]:SingleVariableDeclaration[15882-15890]"
    }, {
      "left" : "INDArray input",
      "right" : "INDArray input",
      "info" : "SingleVariableDeclaration[15892-15906]:SingleVariableDeclaration[15892-15906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15908-16405]:Block[15908-16405]"
    }, {
      "left" : "if(getLayerWiseConfigurations().getInputPreProcess(curr) != null)",
      "right" : "if(getLayerWiseConfigurations().getInputPreProcess(curr) != null)",
      "info" : "IfStatement[15918-16076]:IfStatement[15918-16076]"
    }, {
      "left" : "input = getLayerWiseConfigurations().getInputPreProcess(curr).preProcess(input);",
      "right" : "input = getLayerWiseConfigurations().getInputPreProcess(curr).preProcess(input);",
      "info" : "ExpressionStatement[15996-16076]:ExpressionStatement[15996-16076]"
    }, {
      "left" : "INDArray ret = layers[curr].activate(input);",
      "right" : "INDArray ret = layers[curr].activate(input);",
      "info" : "VariableDeclarationStatement[16085-16129]:VariableDeclarationStatement[16085-16129]"
    }, {
      "left" : "if (getLayerWiseConfigurations().getProcessors() != null && getLayerWiseConfigurations().getPreProcessor(curr) != null)",
      "right" : "if (getLayerWiseConfigurations().getProcessors() != null && getLayerWiseConfigurations().getPreProcessor(curr) != null)",
      "info" : "IfStatement[16138-16379]:IfStatement[16138-16379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16258-16379]:Block[16258-16379]"
    }, {
      "left" : "ret = getLayerWiseConfigurations().getPreProcessor(curr).preProcess(ret);",
      "right" : "ret = getLayerWiseConfigurations().getPreProcessor(curr).preProcess(ret);",
      "info" : "ExpressionStatement[16272-16345]:ExpressionStatement[16272-16345]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[16358-16369]:ReturnStatement[16358-16369]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[16388-16399]:ReturnStatement[16388-16399]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16558-16564]:Modifier[16558-16564]"
    }, {
      "left" : "List<INDArray>",
      "right" : "List<INDArray>",
      "info" : "ParameterizedType[16565-16579]:ParameterizedType[16565-16579]"
    }, {
      "left" : "computeZ",
      "right" : "computeZ",
      "info" : "SimpleName[16580-16588]:SimpleName[16580-16588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16591-17022]:Block[16591-17022]"
    }, {
      "left" : "INDArray currInput = this.input;",
      "right" : "INDArray currInput = this.input;",
      "info" : "VariableDeclarationStatement[16601-16633]:VariableDeclarationStatement[16601-16633]"
    }, {
      "left" : "List<INDArray> activations = new ArrayList<>();",
      "right" : "List<INDArray> activations = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[16643-16690]:VariableDeclarationStatement[16643-16690]"
    }, {
      "left" : "activations.add(currInput);",
      "right" : "activations.add(currInput);",
      "info" : "ExpressionStatement[16699-16726]:ExpressionStatement[16699-16726]"
    }, {
      "left" : "for (int i = 0; i < layers.length; i++)",
      "right" : "for (int i = 0; i < layers.length; i++)",
      "info" : "ForStatement[16736-16986]:ForStatement[16736-16986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16776-16986]:Block[16776-16986]"
    }, {
      "left" : "currInput = zFromPrevLayer(i, currInput);",
      "right" : "currInput = zFromPrevLayer(i, currInput);",
      "info" : "ExpressionStatement[16790-16831]:ExpressionStatement[16790-16831]"
    }, {
      "left" : "applyDropConnectIfNecessary(currInput);",
      "right" : "applyDropConnectIfNecessary(currInput);",
      "info" : "ExpressionStatement[16897-16936]:ExpressionStatement[16897-16936]"
    }, {
      "left" : "activations.add(currInput);",
      "right" : "activations.add(currInput);",
      "info" : "ExpressionStatement[16949-16976]:ExpressionStatement[16949-16976]"
    }, {
      "left" : "return activations;",
      "right" : "return activations;",
      "info" : "ReturnStatement[16997-17016]:ReturnStatement[16997-17016]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17173-17179]:Modifier[17173-17179]"
    }, {
      "left" : "List<INDArray>",
      "right" : "List<INDArray>",
      "info" : "ParameterizedType[17180-17194]:ParameterizedType[17180-17194]"
    }, {
      "left" : "computeZ",
      "right" : "computeZ",
      "info" : "SimpleName[17195-17203]:SimpleName[17195-17203]"
    }, {
      "left" : "INDArray input",
      "right" : "INDArray input",
      "info" : "SingleVariableDeclaration[17204-17218]:SingleVariableDeclaration[17204-17218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17220-17597]:Block[17220-17597]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[17230-17564]:IfStatement[17230-17564]"
    }, {
      "left" : "throw new IllegalStateException(\"Unable to perform feed forward; no input found\");",
      "right" : "throw new IllegalStateException(\"Unable to perform feed forward; no input found\");",
      "info" : "ThrowStatement[17261-17343]:ThrowStatement[17261-17343]"
    }, {
      "left" : "if(this.getLayerWiseConfigurations().getInputPreProcess(0) != null)",
      "right" : "if(this.getLayerWiseConfigurations().getInputPreProcess(0) != null)",
      "info" : "IfStatement[17357-17564]:IfStatement[17357-17564]"
    }, {
      "left" : "this.input = getLayerWiseConfigurations().getInputPreProcess(0).preProcess(input);",
      "right" : "this.input = getLayerWiseConfigurations().getInputPreProcess(0).preProcess(input);",
      "info" : "ExpressionStatement[17437-17519]:ExpressionStatement[17437-17519]"
    }, {
      "left" : "this.input = input;",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[17545-17564]:ExpressionStatement[17545-17564]"
    }, {
      "left" : "return computeZ();",
      "right" : "return computeZ();",
      "info" : "ReturnStatement[17573-17591]:ReturnStatement[17573-17591]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17748-17754]:Modifier[17748-17754]"
    }, {
      "left" : "List<INDArray>",
      "right" : "List<INDArray>",
      "info" : "ParameterizedType[17755-17769]:ParameterizedType[17755-17769]"
    }, {
      "left" : "feedForward",
      "right" : "feedForward",
      "info" : "SimpleName[17770-17781]:SimpleName[17770-17781]"
    }, {
      "left" : "INDArray input",
      "right" : "INDArray input",
      "info" : "SingleVariableDeclaration[17782-17796]:SingleVariableDeclaration[17782-17796]"
    }, {
      "left" : "boolean test",
      "right" : "boolean test",
      "info" : "SingleVariableDeclaration[17797-17809]:SingleVariableDeclaration[17797-17809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17811-17880]:Block[17811-17880]"
    }, {
      "left" : "this.input = input;",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[17821-17840]:ExpressionStatement[17821-17840]"
    }, {
      "left" : "return feedForward(test);",
      "right" : "return feedForward(test);",
      "info" : "ReturnStatement[17849-17874]:ReturnStatement[17849-17874]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18031-18037]:Modifier[18031-18037]"
    }, {
      "left" : "List<INDArray>",
      "right" : "List<INDArray>",
      "info" : "ParameterizedType[18038-18052]:ParameterizedType[18038-18052]"
    }, {
      "left" : "feedForward",
      "right" : "feedForward",
      "info" : "SimpleName[18053-18064]:SimpleName[18053-18064]"
    }, {
      "left" : "boolean test",
      "right" : "boolean test",
      "info" : "SingleVariableDeclaration[18065-18077]:SingleVariableDeclaration[18065-18077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18079-18545]:Block[18079-18545]"
    }, {
      "left" : "INDArray currInput = this.input;",
      "right" : "INDArray currInput = this.input;",
      "info" : "VariableDeclarationStatement[18089-18121]:VariableDeclarationStatement[18089-18121]"
    }, {
      "left" : "List<INDArray> activations = new ArrayList<>();",
      "right" : "List<INDArray> activations = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[18131-18178]:VariableDeclarationStatement[18131-18178]"
    }, {
      "left" : "activations.add(currInput);",
      "right" : "activations.add(currInput);",
      "info" : "ExpressionStatement[18187-18214]:ExpressionStatement[18187-18214]"
    }, {
      "left" : "for (int i = 0; i < layers.length; i++)",
      "right" : "for (int i = 0; i < layers.length; i++)",
      "info" : "ForStatement[18224-18509]:ForStatement[18224-18509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18264-18509]:Block[18264-18509]"
    }, {
      "left" : "currInput = activationFromPrevLayer(i, currInput);",
      "right" : "currInput = activationFromPrevLayer(i, currInput);",
      "info" : "ExpressionStatement[18278-18328]:ExpressionStatement[18278-18328]"
    }, {
      "left" : "if(!test)",
      "right" : "if(!test)",
      "info" : "IfStatement[18394-18459]:IfStatement[18394-18459]"
    }, {
      "left" : "applyDropConnectIfNecessary(currInput);",
      "right" : "applyDropConnectIfNecessary(currInput);",
      "info" : "ExpressionStatement[18420-18459]:ExpressionStatement[18420-18459]"
    }, {
      "left" : "activations.add(currInput);",
      "right" : "activations.add(currInput);",
      "info" : "ExpressionStatement[18472-18499]:ExpressionStatement[18472-18499]"
    }, {
      "left" : "return activations;",
      "right" : "return activations;",
      "info" : "ReturnStatement[18520-18539]:ReturnStatement[18520-18539]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18696-18702]:Modifier[18696-18702]"
    }, {
      "left" : "List<INDArray>",
      "right" : "List<INDArray>",
      "info" : "ParameterizedType[18703-18717]:ParameterizedType[18703-18717]"
    }, {
      "left" : "feedForward",
      "right" : "feedForward",
      "info" : "SimpleName[18718-18729]:SimpleName[18718-18729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18732-18774]:Block[18732-18774]"
    }, {
      "left" : "return feedForward(false);",
      "right" : "return feedForward(false);",
      "info" : "ReturnStatement[18742-18768]:ReturnStatement[18742-18768]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18979-18985]:Modifier[18979-18985]"
    }, {
      "left" : "Pair<List<INDArray>,List<INDArray>>",
      "right" : "Pair<List<INDArray>,List<INDArray>>",
      "info" : "ParameterizedType[18986-19021]:ParameterizedType[18986-19021]"
    }, {
      "left" : "feedForwardActivationsAndDerivatives",
      "right" : "feedForwardActivationsAndDerivatives",
      "info" : "SimpleName[19022-19058]:SimpleName[19022-19058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19061-20374]:Block[19061-20374]"
    }, {
      "left" : "INDArray currInput = this.input;",
      "right" : "INDArray currInput = this.input;",
      "info" : "VariableDeclarationStatement[19071-19103]:VariableDeclarationStatement[19071-19103]"
    }, {
      "left" : "List<INDArray> activations = new ArrayList<>();",
      "right" : "List<INDArray> activations = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[19113-19160]:VariableDeclarationStatement[19113-19160]"
    }, {
      "left" : "List<INDArray> derivatives = new ArrayList<>();",
      "right" : "List<INDArray> derivatives = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[19169-19216]:VariableDeclarationStatement[19169-19216]"
    }, {
      "left" : "activations.add(currInput);",
      "right" : "activations.add(currInput);",
      "info" : "ExpressionStatement[19225-19252]:ExpressionStatement[19225-19252]"
    }, {
      "left" : "for (int i = 0; i < layers.length; i++)",
      "right" : "for (int i = 0; i < layers.length; i++)",
      "info" : "ForStatement[19262-19617]:ForStatement[19262-19617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19302-19617]:Block[19302-19617]"
    }, {
      "left" : "currInput = zFromPrevLayer(i, currInput);",
      "right" : "currInput = zFromPrevLayer(i, currInput);",
      "info" : "ExpressionStatement[19316-19357]:ExpressionStatement[19316-19357]"
    }, {
      "left" : "applyDropConnectIfNecessary(currInput);",
      "right" : "applyDropConnectIfNecessary(currInput);",
      "info" : "ExpressionStatement[19394-19433]:ExpressionStatement[19394-19433]"
    }, {
      "left" : "activations.add(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(layerWiseConfigurations.getConf(i).getActivationFunction(), currInput)));",
      "right" : "activations.add(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(layerWiseConfigurations.getConf(i).getActivationFunction(), currInput)));",
      "info" : "ExpressionStatement[19446-19607]:ExpressionStatement[19446-19607]"
    }, {
      "left" : "currInput = this.input;",
      "right" : "currInput = this.input;",
      "info" : "ExpressionStatement[19627-19650]:ExpressionStatement[19627-19650]"
    }, {
      "left" : "for (int i = 0; i < layers.length; i++)",
      "right" : "for (int i = 0; i < layers.length; i++)",
      "info" : "ForStatement[19659-20185]:ForStatement[19659-20185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19699-20185]:Block[19699-20185]"
    }, {
      "left" : "currInput = zFromPrevLayer(i, currInput);",
      "right" : "currInput = zFromPrevLayer(i, currInput);",
      "info" : "ExpressionStatement[19713-19754]:ExpressionStatement[19713-19754]"
    }, {
      "left" : "applyDropConnectIfNecessary(currInput);",
      "right" : "applyDropConnectIfNecessary(currInput);",
      "info" : "ExpressionStatement[19791-19830]:ExpressionStatement[19791-19830]"
    }, {
      "left" : "INDArray dup = currInput.dup();",
      "right" : "INDArray dup = currInput.dup();",
      "info" : "VariableDeclarationStatement[19843-19874]:VariableDeclarationStatement[19843-19874]"
    }, {
      "left" : "derivatives.add(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(layerWiseConfigurations.getConf(i).getActivationFunction(), dup).derivative()));",
      "right" : "derivatives.add(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(layerWiseConfigurations.getConf(i).getActivationFunction(), dup).derivative()));",
      "info" : "ExpressionStatement[19887-20055]:ExpressionStatement[19887-20055]"
    }, {
      "left" : "Nd4j.getOpFactory().createTransform(layerWiseConfigurations.getConf(i).getActivationFunction(), currInput);",
      "right" : "Nd4j.getOpFactory().createTransform(layerWiseConfigurations.getConf(i).getActivationFunction(), currInput);",
      "info" : "ExpressionStatement[20068-20175]:ExpressionStatement[20068-20175]"
    }, {
      "left" : "derivatives.add(derivatives.get(layers.length - 1));",
      "right" : "derivatives.add(derivatives.get(layers.length - 1));",
      "info" : "ExpressionStatement[20263-20315]:ExpressionStatement[20263-20315]"
    }, {
      "left" : "return new Pair<>(activations, derivatives);",
      "right" : "return new Pair<>(activations, derivatives);",
      "info" : "ReturnStatement[20324-20368]:ReturnStatement[20324-20368]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20526-20532]:Modifier[20526-20532]"
    }, {
      "left" : "List<INDArray>",
      "right" : "List<INDArray>",
      "info" : "ParameterizedType[20533-20547]:ParameterizedType[20533-20547]"
    }, {
      "left" : "feedForward",
      "right" : "feedForward",
      "info" : "SimpleName[20548-20559]:SimpleName[20548-20559]"
    }, {
      "left" : "INDArray input",
      "right" : "INDArray input",
      "info" : "SingleVariableDeclaration[20560-20574]:SingleVariableDeclaration[20560-20574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20576-20956]:Block[20576-20956]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[20586-20920]:IfStatement[20586-20920]"
    }, {
      "left" : "throw new IllegalStateException(\"Unable to perform feed forward; no input found\");",
      "right" : "throw new IllegalStateException(\"Unable to perform feed forward; no input found\");",
      "info" : "ThrowStatement[20617-20699]:ThrowStatement[20617-20699]"
    }, {
      "left" : "if(this.getLayerWiseConfigurations().getInputPreProcess(0) != null)",
      "right" : "if(this.getLayerWiseConfigurations().getInputPreProcess(0) != null)",
      "info" : "IfStatement[20713-20920]:IfStatement[20713-20920]"
    }, {
      "left" : "this.input = getLayerWiseConfigurations().getInputPreProcess(0).preProcess(input);",
      "right" : "this.input = getLayerWiseConfigurations().getInputPreProcess(0).preProcess(input);",
      "info" : "ExpressionStatement[20793-20875]:ExpressionStatement[20793-20875]"
    }, {
      "left" : "this.input = input;",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[20901-20920]:ExpressionStatement[20901-20920]"
    }, {
      "left" : "return feedForward();",
      "right" : "return feedForward();",
      "info" : "ReturnStatement[20929-20950]:ReturnStatement[20929-20950]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20962-20971]:MarkerAnnotation[20962-20971]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20976-20982]:Modifier[20976-20982]"
    }, {
      "left" : "Gradient",
      "right" : "Gradient",
      "info" : "SimpleType[20983-20991]:SimpleType[20983-20991]"
    }, {
      "left" : "gradient",
      "right" : "gradient",
      "info" : "SimpleName[20992-21000]:SimpleName[20992-21000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21003-21233]:Block[21003-21233]"
    }, {
      "left" : "Gradient ret = new DefaultGradient();",
      "right" : "Gradient ret = new DefaultGradient();",
      "info" : "VariableDeclarationStatement[21013-21050]:VariableDeclarationStatement[21013-21050]"
    }, {
      "left" : "for (int i = 0; i < layers.length; i ++)",
      "right" : "for (int i = 0; i < layers.length; i ++)",
      "info" : "ForStatement[21059-21206]:ForStatement[21059-21206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21100-21206]:Block[21100-21206]"
    }, {
      "left" : "ret.gradientForVariable().put(String.valueOf(i), layers[i].gradient().gradient());",
      "right" : "ret.gradientForVariable().put(String.valueOf(i), layers[i].gradient().gradient());",
      "info" : "ExpressionStatement[21114-21196]:ExpressionStatement[21114-21196]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[21216-21227]:ReturnStatement[21216-21227]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21239-21248]:MarkerAnnotation[21239-21248]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21253-21259]:Modifier[21253-21259]"
    }, {
      "left" : "Pair<Gradient, Double>",
      "right" : "Pair<Gradient, Double>",
      "info" : "ParameterizedType[21260-21282]:ParameterizedType[21260-21282]"
    }, {
      "left" : "gradientAndScore",
      "right" : "gradientAndScore",
      "info" : "SimpleName[21283-21299]:SimpleName[21283-21299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21302-21374]:Block[21302-21374]"
    }, {
      "left" : "return new Pair<>(gradient(), getOutputLayer().score());",
      "right" : "return new Pair<>(gradient(), getOutputLayer().score());",
      "info" : "ReturnStatement[21312-21368]:ReturnStatement[21312-21368]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[21594-21603]:Modifier[21594-21603]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21604-21608]:PrimitiveType[21604-21608]"
    }, {
      "left" : "applyDropConnectIfNecessary",
      "right" : "applyDropConnectIfNecessary",
      "info" : "SimpleName[21609-21636]:SimpleName[21609-21636]"
    }, {
      "left" : "INDArray input",
      "right" : "INDArray input",
      "info" : "SingleVariableDeclaration[21637-21651]:SingleVariableDeclaration[21637-21651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21653-22087]:Block[21653-22087]"
    }, {
      "left" : "if (layerWiseConfigurations.isUseDropConnect())",
      "right" : "if (layerWiseConfigurations.isUseDropConnect())",
      "info" : "IfStatement[21663-22081]:IfStatement[21663-22081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21711-22081]:Block[21711-22081]"
    }, {
      "left" : "INDArray mean = Nd4j.valueArrayOf(input.slices(), input.columns(), 0.5);",
      "right" : "INDArray mean = Nd4j.valueArrayOf(input.slices(), input.columns(), 0.5);",
      "info" : "VariableDeclarationStatement[21725-21797]:VariableDeclarationStatement[21725-21797]"
    }, {
      "left" : "INDArray mask =Nd4j.getDistributions().createBinomial(1,mean).sample(mean.shape());",
      "right" : "INDArray mask =Nd4j.getDistributions().createBinomial(1,mean).sample(mean.shape());",
      "info" : "VariableDeclarationStatement[21810-21893]:VariableDeclarationStatement[21810-21893]"
    }, {
      "left" : "input.muli(mask);",
      "right" : "input.muli(mask);",
      "info" : "ExpressionStatement[21906-21923]:ExpressionStatement[21906-21923]"
    }, {
      "left" : "if (defaultConfiguration.getL2() > 0)",
      "right" : "if (defaultConfiguration.getL2() > 0)",
      "info" : "IfStatement[21976-22071]:IfStatement[21976-22071]"
    }, {
      "left" : "input.muli(defaultConfiguration.getL2());",
      "right" : "input.muli(defaultConfiguration.getL2());",
      "info" : "ExpressionStatement[22030-22071]:ExpressionStatement[22030-22071]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[22156-22165]:Modifier[22156-22165]"
    }, {
      "left" : "List<INDArray>",
      "right" : "List<INDArray>",
      "info" : "ParameterizedType[22166-22180]:ParameterizedType[22166-22180]"
    }, {
      "left" : "computeDeltasR",
      "right" : "computeDeltasR",
      "info" : "SimpleName[22181-22195]:SimpleName[22181-22195]"
    }, {
      "left" : "INDArray v",
      "right" : "INDArray v",
      "info" : "SingleVariableDeclaration[22196-22206]:SingleVariableDeclaration[22196-22206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22208-24193]:Block[22208-24193]"
    }, {
      "left" : "List<INDArray> deltaRet = new ArrayList<>();",
      "right" : "List<INDArray> deltaRet = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[22218-22262]:VariableDeclarationStatement[22218-22262]"
    }, {
      "left" : "INDArray[] deltas = new INDArray[getnLayers() + 1];",
      "right" : "INDArray[] deltas = new INDArray[getnLayers() + 1];",
      "info" : "VariableDeclarationStatement[22272-22323]:VariableDeclarationStatement[22272-22323]"
    }, {
      "left" : "List<INDArray> activations = feedForward();",
      "right" : "List<INDArray> activations = feedForward();",
      "info" : "VariableDeclarationStatement[22332-22375]:VariableDeclarationStatement[22332-22375]"
    }, {
      "left" : "List<INDArray> rActivations = feedForwardR(activations, v);",
      "right" : "List<INDArray> rActivations = feedForwardR(activations, v);",
      "info" : "VariableDeclarationStatement[22384-22443]:VariableDeclarationStatement[22384-22443]"
    }, {
      "left" : "List<INDArray> weights = new ArrayList<>();",
      "right" : "List<INDArray> weights = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[22538-22581]:VariableDeclarationStatement[22538-22581]"
    }, {
      "left" : "List<INDArray> biases = new ArrayList<>();",
      "right" : "List<INDArray> biases = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[22590-22632]:VariableDeclarationStatement[22590-22632]"
    }, {
      "left" : "List<String> activationFunctions = new ArrayList<>();",
      "right" : "List<String> activationFunctions = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[22641-22694]:VariableDeclarationStatement[22641-22694]"
    }, {
      "left" : "for (int j = 0; j < getLayers().length; j++)",
      "right" : "for (int j = 0; j < getLayers().length; j++)",
      "info" : "ForStatement[22705-23014]:ForStatement[22705-23014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22750-23014]:Block[22750-23014]"
    }, {
      "left" : "weights.add(getLayers()[j].getParam(DefaultParamInitializer.WEIGHT_KEY));",
      "right" : "weights.add(getLayers()[j].getParam(DefaultParamInitializer.WEIGHT_KEY));",
      "info" : "ExpressionStatement[22764-22837]:ExpressionStatement[22764-22837]"
    }, {
      "left" : "biases.add(getLayers()[j].getParam(DefaultParamInitializer.BIAS_KEY));",
      "right" : "biases.add(getLayers()[j].getParam(DefaultParamInitializer.BIAS_KEY));",
      "info" : "ExpressionStatement[22850-22920]:ExpressionStatement[22850-22920]"
    }, {
      "left" : "activationFunctions.add(getLayers()[j].conf().getActivationFunction());",
      "right" : "activationFunctions.add(getLayers()[j].conf().getActivationFunction());",
      "info" : "ExpressionStatement[22933-23004]:ExpressionStatement[22933-23004]"
    }, {
      "left" : "INDArray rix = rActivations.get(rActivations.size() - 1).divi((double) input.slices());",
      "right" : "INDArray rix = rActivations.get(rActivations.size() - 1).divi((double) input.slices());",
      "info" : "VariableDeclarationStatement[23025-23112]:VariableDeclarationStatement[23025-23112]"
    }, {
      "left" : "LinAlgExceptions.assertValidNum(rix);",
      "right" : "LinAlgExceptions.assertValidNum(rix);",
      "info" : "ExpressionStatement[23121-23158]:ExpressionStatement[23121-23158]"
    }, {
      "left" : "for (int i = getnLayers() - 1; i >= 0; i--)",
      "right" : "for (int i = getnLayers() - 1; i >= 0; i--)",
      "info" : "ForStatement[23185-23646]:ForStatement[23185-23646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23229-23646]:Block[23229-23646]"
    }, {
      "left" : "deltas[i] = activations.get(i).transpose().mmul(rix);",
      "right" : "deltas[i] = activations.get(i).transpose().mmul(rix);",
      "info" : "ExpressionStatement[23275-23328]:ExpressionStatement[23275-23328]"
    }, {
      "left" : "applyDropConnectIfNecessary(deltas[i]);",
      "right" : "applyDropConnectIfNecessary(deltas[i]);",
      "info" : "ExpressionStatement[23341-23380]:ExpressionStatement[23341-23380]"
    }, {
      "left" : "if (i > 0)",
      "right" : "if (i > 0)",
      "info" : "IfStatement[23394-23635]:IfStatement[23394-23635]"
    }, {
      "left" : "rix = rix.mmul(weights.get(i).addRowVector(biases.get(i)).transpose()).muli(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(activationFunctions.get(i - 1),activations.get(i)).derivative()));",
      "right" : "rix = rix.mmul(weights.get(i).addRowVector(biases.get(i)).transpose()).muli(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(activationFunctions.get(i - 1),activations.get(i)).derivative()));",
      "info" : "ExpressionStatement[23421-23635]:ExpressionStatement[23421-23635]"
    }, {
      "left" : "for (int i = 0; i < deltas.length - 1; i++)",
      "right" : "for (int i = 0; i < deltas.length - 1; i++)",
      "info" : "ForStatement[23656-24161]:ForStatement[23656-24161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23700-24161]:Block[23700-24161]"
    }, {
      "left" : "if (defaultConfiguration.isConstrainGradientToUnitNorm())",
      "right" : "if (defaultConfiguration.isConstrainGradientToUnitNorm())",
      "info" : "IfStatement[23714-24089]:IfStatement[23714-24089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23772-24043]:Block[23772-24043]"
    }, {
      "left" : "double sum = deltas[i].sum(Integer.MAX_VALUE).getDouble(0);",
      "right" : "double sum = deltas[i].sum(Integer.MAX_VALUE).getDouble(0);",
      "info" : "VariableDeclarationStatement[23790-23849]:VariableDeclarationStatement[23790-23849]"
    }, {
      "left" : "if (sum > 0)",
      "right" : "if (sum > 0)",
      "info" : "IfStatement[23866-24029]:IfStatement[23866-24029]"
    }, {
      "left" : "deltaRet.add(deltas[i].div(deltas[i].norm2(Integer.MAX_VALUE)));",
      "right" : "deltaRet.add(deltas[i].div(deltas[i].norm2(Integer.MAX_VALUE)));",
      "info" : "ExpressionStatement[23899-23963]:ExpressionStatement[23899-23963]"
    }, {
      "left" : "deltaRet.add(deltas[i]);",
      "right" : "deltaRet.add(deltas[i]);",
      "info" : "ExpressionStatement[24005-24029]:ExpressionStatement[24005-24029]"
    }, {
      "left" : "deltaRet.add(deltas[i]);",
      "right" : "deltaRet.add(deltas[i]);",
      "info" : "ExpressionStatement[24065-24089]:ExpressionStatement[24065-24089]"
    }, {
      "left" : "LinAlgExceptions.assertValidNum(deltaRet.get(i));",
      "right" : "LinAlgExceptions.assertValidNum(deltaRet.get(i));",
      "info" : "ExpressionStatement[24102-24151]:ExpressionStatement[24102-24151]"
    }, {
      "left" : "return deltaRet;",
      "right" : "return deltaRet;",
      "info" : "ReturnStatement[24171-24187]:ReturnStatement[24171-24187]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24239-24245]:Modifier[24239-24245]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24246-24250]:PrimitiveType[24246-24250]"
    }, {
      "left" : "dampingUpdate",
      "right" : "dampingUpdate",
      "info" : "SimpleName[24251-24264]:SimpleName[24251-24264]"
    }, {
      "left" : "double rho",
      "right" : "double rho",
      "info" : "SingleVariableDeclaration[24265-24275]:SingleVariableDeclaration[24265-24275]"
    }, {
      "left" : "double boost",
      "right" : "double boost",
      "info" : "SingleVariableDeclaration[24277-24289]:SingleVariableDeclaration[24277-24289]"
    }, {
      "left" : "double decrease",
      "right" : "double decrease",
      "info" : "SingleVariableDeclaration[24291-24306]:SingleVariableDeclaration[24291-24306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24308-24616]:Block[24308-24616]"
    }, {
      "left" : "if (rho < 0.25 || Double.isNaN(rho))",
      "right" : "if (rho < 0.25 || Double.isNaN(rho))",
      "info" : "IfStatement[24318-24610]:IfStatement[24318-24610]"
    }, {
      "left" : "layerWiseConfigurations.setDampingFactor(getLayerWiseConfigurations().getDampingFactor() * boost);",
      "right" : "layerWiseConfigurations.setDampingFactor(getLayerWiseConfigurations().getDampingFactor() * boost);",
      "info" : "ExpressionStatement[24367-24465]:ExpressionStatement[24367-24465]"
    }, {
      "left" : "if (rho > 0.75)",
      "right" : "if (rho > 0.75)",
      "info" : "IfStatement[24481-24610]:IfStatement[24481-24610]"
    }, {
      "left" : "layerWiseConfigurations.setDampingFactor(getLayerWiseConfigurations().getDampingFactor() * decrease);",
      "right" : "layerWiseConfigurations.setDampingFactor(getLayerWiseConfigurations().getDampingFactor() * decrease);",
      "info" : "ExpressionStatement[24509-24610]:ExpressionStatement[24509-24610]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24663-24669]:Modifier[24663-24669]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[24670-24676]:PrimitiveType[24670-24676]"
    }, {
      "left" : "reductionRatio",
      "right" : "reductionRatio",
      "info" : "SimpleName[24677-24691]:SimpleName[24677-24691]"
    }, {
      "left" : "INDArray p",
      "right" : "INDArray p",
      "info" : "SingleVariableDeclaration[24692-24702]:SingleVariableDeclaration[24692-24702]"
    }, {
      "left" : "double currScore",
      "right" : "double currScore",
      "info" : "SingleVariableDeclaration[24704-24720]:SingleVariableDeclaration[24704-24720]"
    }, {
      "left" : "double score",
      "right" : "double score",
      "info" : "SingleVariableDeclaration[24722-24734]:SingleVariableDeclaration[24722-24734]"
    }, {
      "left" : "INDArray gradient",
      "right" : "INDArray gradient",
      "info" : "SingleVariableDeclaration[24736-24753]:SingleVariableDeclaration[24736-24753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24755-25277]:Block[24755-25277]"
    }, {
      "left" : "double currentDamp = layerWiseConfigurations.getDampingFactor();",
      "right" : "double currentDamp = layerWiseConfigurations.getDampingFactor();",
      "info" : "VariableDeclarationStatement[24765-24829]:VariableDeclarationStatement[24765-24829]"
    }, {
      "left" : "layerWiseConfigurations.setDampingFactor(0);",
      "right" : "layerWiseConfigurations.setDampingFactor(0);",
      "info" : "ExpressionStatement[24838-24882]:ExpressionStatement[24838-24882]"
    }, {
      "left" : "INDArray denom = getBackPropRGradient(p);",
      "right" : "INDArray denom = getBackPropRGradient(p);",
      "info" : "VariableDeclarationStatement[24891-24932]:VariableDeclarationStatement[24891-24932]"
    }, {
      "left" : "denom.muli(0.5).muli(p.mul(denom)).sum(0);",
      "right" : "denom.muli(0.5).muli(p.mul(denom)).sum(0);",
      "info" : "ExpressionStatement[24941-24983]:ExpressionStatement[24941-24983]"
    }, {
      "left" : "denom.subi(gradient.mul(p).sum(0));",
      "right" : "denom.subi(gradient.mul(p).sum(0));",
      "info" : "ExpressionStatement[24992-25027]:ExpressionStatement[24992-25027]"
    }, {
      "left" : "double rho = (currScore - score) / (double) denom.getScalar(0).element();",
      "right" : "double rho = (currScore - score) / (double) denom.getScalar(0).element();",
      "info" : "VariableDeclarationStatement[25036-25109]:VariableDeclarationStatement[25036-25109]"
    }, {
      "left" : "layerWiseConfigurations.setDampingFactor(currentDamp);",
      "right" : "layerWiseConfigurations.setDampingFactor(currentDamp);",
      "info" : "ExpressionStatement[25118-25172]:ExpressionStatement[25118-25172]"
    }, {
      "left" : "if (score - currScore > 0)",
      "right" : "if (score - currScore > 0)",
      "info" : "IfStatement[25181-25251]:IfStatement[25181-25251]"
    }, {
      "left" : "return Float.NEGATIVE_INFINITY;",
      "right" : "return Float.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[25220-25251]:ReturnStatement[25220-25251]"
    }, {
      "left" : "return rho;",
      "right" : "return rho;",
      "info" : "ReturnStatement[25260-25271]:ReturnStatement[25260-25271]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[25346-25355]:Modifier[25346-25355]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>>",
      "right" : "List<Pair<INDArray, INDArray>>",
      "info" : "ParameterizedType[25356-25386]:ParameterizedType[25356-25386]"
    }, {
      "left" : "computeDeltas2",
      "right" : "computeDeltas2",
      "info" : "SimpleName[25387-25401]:SimpleName[25387-25401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25404-27313]:Block[25404-27313]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>> deltaRet = new ArrayList<>();",
      "right" : "List<Pair<INDArray, INDArray>> deltaRet = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[25414-25474]:VariableDeclarationStatement[25414-25474]"
    }, {
      "left" : "List<INDArray> activations = feedForward();",
      "right" : "List<INDArray> activations = feedForward();",
      "info" : "VariableDeclarationStatement[25483-25526]:VariableDeclarationStatement[25483-25526]"
    }, {
      "left" : "INDArray[] deltas = new INDArray[activations.size() - 1];",
      "right" : "INDArray[] deltas = new INDArray[activations.size() - 1];",
      "info" : "VariableDeclarationStatement[25535-25592]:VariableDeclarationStatement[25535-25592]"
    }, {
      "left" : "INDArray[] preCons = new INDArray[activations.size() - 1];",
      "right" : "INDArray[] preCons = new INDArray[activations.size() - 1];",
      "info" : "VariableDeclarationStatement[25601-25659]:VariableDeclarationStatement[25601-25659]"
    }, {
      "left" : "INDArray ix = activations.get(activations.size() - 1).sub(labels).div(labels.slices());",
      "right" : "INDArray ix = activations.get(activations.size() - 1).sub(labels).div(labels.slices());",
      "info" : "VariableDeclarationStatement[25688-25775]:VariableDeclarationStatement[25688-25775]"
    }, {
      "left" : "List<INDArray> weights = new ArrayList<>();",
      "right" : "List<INDArray> weights = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[25871-25914]:VariableDeclarationStatement[25871-25914]"
    }, {
      "left" : "List<INDArray> biases = new ArrayList<>();",
      "right" : "List<INDArray> biases = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[25923-25965]:VariableDeclarationStatement[25923-25965]"
    }, {
      "left" : "List<String> activationFunctions = new ArrayList<>();",
      "right" : "List<String> activationFunctions = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[25975-26028]:VariableDeclarationStatement[25975-26028]"
    }, {
      "left" : "for (int j = 0; j < getLayers().length; j++)",
      "right" : "for (int j = 0; j < getLayers().length; j++)",
      "info" : "ForStatement[26037-26346]:ForStatement[26037-26346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26082-26346]:Block[26082-26346]"
    }, {
      "left" : "weights.add(getLayers()[j].getParam(DefaultParamInitializer.WEIGHT_KEY));",
      "right" : "weights.add(getLayers()[j].getParam(DefaultParamInitializer.WEIGHT_KEY));",
      "info" : "ExpressionStatement[26096-26169]:ExpressionStatement[26096-26169]"
    }, {
      "left" : "biases.add(getLayers()[j].getParam(DefaultParamInitializer.BIAS_KEY));",
      "right" : "biases.add(getLayers()[j].getParam(DefaultParamInitializer.BIAS_KEY));",
      "info" : "ExpressionStatement[26182-26252]:ExpressionStatement[26182-26252]"
    }, {
      "left" : "activationFunctions.add(getLayers()[j].conf().getActivationFunction());",
      "right" : "activationFunctions.add(getLayers()[j].conf().getActivationFunction());",
      "info" : "ExpressionStatement[26265-26336]:ExpressionStatement[26265-26336]"
    }, {
      "left" : "for (int i = weights.size() - 1; i >= 0; i--)",
      "right" : "for (int i = weights.size() - 1; i >= 0; i--)",
      "info" : "ForStatement[26374-26960]:ForStatement[26374-26960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26420-26960]:Block[26420-26960]"
    }, {
      "left" : "deltas[i] = activations.get(i).transpose().mmul(ix);",
      "right" : "deltas[i] = activations.get(i).transpose().mmul(ix);",
      "info" : "ExpressionStatement[26434-26486]:ExpressionStatement[26434-26486]"
    }, {
      "left" : "preCons[i] = Transforms.pow(activations.get(i).transpose(), 2).mmul(Transforms.pow(ix, 2)).muli(labels.slices());",
      "right" : "preCons[i] = Transforms.pow(activations.get(i).transpose(), 2).mmul(Transforms.pow(ix, 2)).muli(labels.slices());",
      "info" : "ExpressionStatement[26499-26612]:ExpressionStatement[26499-26612]"
    }, {
      "left" : "applyDropConnectIfNecessary(deltas[i]);",
      "right" : "applyDropConnectIfNecessary(deltas[i]);",
      "info" : "ExpressionStatement[26625-26664]:ExpressionStatement[26625-26664]"
    }, {
      "left" : "if (i > 0)",
      "right" : "if (i > 0)",
      "info" : "IfStatement[26678-26950]:IfStatement[26678-26950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26689-26950]:Block[26689-26950]"
    }, {
      "left" : "ix = ix.mmul(weights.get(i).transpose()).muli(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(activationFunctions.get(i - 1),activations.get(i)).derivative()));",
      "right" : "ix = ix.mmul(weights.get(i).transpose()).muli(Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(activationFunctions.get(i - 1),activations.get(i)).derivative()));",
      "info" : "ExpressionStatement[26752-26936]:ExpressionStatement[26752-26936]"
    }, {
      "left" : "for (int i = 0; i < deltas.length; i++)",
      "right" : "for (int i = 0; i < deltas.length; i++)",
      "info" : "ForStatement[26970-27281]:ForStatement[26970-27281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27010-27281]:Block[27010-27281]"
    }, {
      "left" : "if (defaultConfiguration.isConstrainGradientToUnitNorm())",
      "right" : "if (defaultConfiguration.isConstrainGradientToUnitNorm())",
      "info" : "IfStatement[27024-27270]:IfStatement[27024-27270]"
    }, {
      "left" : "deltaRet.add(new Pair<>(deltas[i].divi(deltas[i].norm2(Integer.MAX_VALUE)), preCons[i]));",
      "right" : "deltaRet.add(new Pair<>(deltas[i].divi(deltas[i].norm2(Integer.MAX_VALUE)), preCons[i]));",
      "info" : "ExpressionStatement[27098-27187]:ExpressionStatement[27098-27187]"
    }, {
      "left" : "deltaRet.add(new Pair<>(deltas[i], preCons[i]));",
      "right" : "deltaRet.add(new Pair<>(deltas[i], preCons[i]));",
      "info" : "ExpressionStatement[27222-27270]:ExpressionStatement[27222-27270]"
    }, {
      "left" : "return deltaRet;",
      "right" : "return deltaRet;",
      "info" : "ReturnStatement[27291-27307]:ReturnStatement[27291-27307]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27550-27556]:Modifier[27550-27556]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[27557-27565]:SimpleType[27557-27565]"
    }, {
      "left" : "getBackPropRGradient",
      "right" : "getBackPropRGradient",
      "info" : "SimpleName[27566-27586]:SimpleName[27566-27586]"
    }, {
      "left" : "INDArray v",
      "right" : "INDArray v",
      "info" : "SingleVariableDeclaration[27587-27597]:SingleVariableDeclaration[27587-27597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27599-27649]:Block[27599-27649]"
    }, {
      "left" : "return pack(backPropGradientR(v));",
      "right" : "return pack(backPropGradientR(v));",
      "info" : "ReturnStatement[27609-27643]:ReturnStatement[27609-27643]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27871-27877]:Modifier[27871-27877]"
    }, {
      "left" : "Pair<INDArray, INDArray>",
      "right" : "Pair<INDArray, INDArray>",
      "info" : "ParameterizedType[27878-27902]:ParameterizedType[27878-27902]"
    }, {
      "left" : "getBackPropGradient2",
      "right" : "getBackPropGradient2",
      "info" : "SimpleName[27903-27923]:SimpleName[27903-27923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27926-28419]:Block[27926-28419]"
    }, {
      "left" : "List<Pair<Pair<INDArray, INDArray>, Pair<INDArray, INDArray>>> deltas = backPropGradient2();",
      "right" : "List<Pair<Pair<INDArray, INDArray>, Pair<INDArray, INDArray>>> deltas = backPropGradient2();",
      "info" : "VariableDeclarationStatement[27936-28028]:VariableDeclarationStatement[27936-28028]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>> deltaNormal = new ArrayList<>();",
      "right" : "List<Pair<INDArray, INDArray>> deltaNormal = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[28037-28100]:VariableDeclarationStatement[28037-28100]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>> deltasPreCon = new ArrayList<>();",
      "right" : "List<Pair<INDArray, INDArray>> deltasPreCon = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[28109-28173]:VariableDeclarationStatement[28109-28173]"
    }, {
      "left" : "for (int i = 0; i < deltas.size(); i++)",
      "right" : "for (int i = 0; i < deltas.size(); i++)",
      "info" : "ForStatement[28182-28345]:ForStatement[28182-28345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28222-28345]:Block[28222-28345]"
    }, {
      "left" : "deltaNormal.add(deltas.get(i).getFirst());",
      "right" : "deltaNormal.add(deltas.get(i).getFirst());",
      "info" : "ExpressionStatement[28236-28278]:ExpressionStatement[28236-28278]"
    }, {
      "left" : "deltasPreCon.add(deltas.get(i).getSecond());",
      "right" : "deltasPreCon.add(deltas.get(i).getSecond());",
      "info" : "ExpressionStatement[28291-28335]:ExpressionStatement[28291-28335]"
    }, {
      "left" : "return new Pair<>(pack(deltaNormal), pack(deltasPreCon));",
      "right" : "return new Pair<>(pack(deltaNormal), pack(deltasPreCon));",
      "info" : "ReturnStatement[28356-28413]:ReturnStatement[28356-28413]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28426-28435]:MarkerAnnotation[28426-28435]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28440-28446]:Modifier[28440-28446]"
    }, {
      "left" : "MultiLayerNetwork",
      "right" : "MultiLayerNetwork",
      "info" : "SimpleType[28447-28464]:SimpleType[28447-28464]"
    }, {
      "left" : "clone",
      "right" : "clone",
      "info" : "SimpleName[28465-28470]:SimpleName[28465-28470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28473-28918]:Block[28473-28918]"
    }, {
      "left" : "MultiLayerNetwork ret;",
      "right" : "MultiLayerNetwork ret;",
      "info" : "VariableDeclarationStatement[28483-28505]:VariableDeclarationStatement[28483-28505]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28514-28892]:TryStatement[28514-28892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28518-28789]:Block[28518-28789]"
    }, {
      "left" : "Constructor<MultiLayerNetwork> constructor = (Constructor<MultiLayerNetwork>) getClass().getDeclaredConstructor(MultiLayerConfiguration.class);",
      "right" : "Constructor<MultiLayerNetwork> constructor = (Constructor<MultiLayerNetwork>) getClass().getDeclaredConstructor(MultiLayerConfiguration.class);",
      "info" : "VariableDeclarationStatement[28532-28675]:VariableDeclarationStatement[28532-28675]"
    }, {
      "left" : "ret = constructor.newInstance(getLayerWiseConfigurations());",
      "right" : "ret = constructor.newInstance(getLayerWiseConfigurations());",
      "info" : "ExpressionStatement[28688-28748]:ExpressionStatement[28688-28748]"
    }, {
      "left" : "ret.update(this);",
      "right" : "ret.update(this);",
      "info" : "ExpressionStatement[28761-28778]:ExpressionStatement[28761-28778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28810-28892]:Block[28810-28892]"
    }, {
      "left" : "throw new IllegalStateException(\"Unable to cloe network\");",
      "right" : "throw new IllegalStateException(\"Unable to cloe network\");",
      "info" : "ThrowStatement[28824-28882]:ThrowStatement[28824-28882]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[28901-28912]:ReturnStatement[28901-28912]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29174-29183]:MarkerAnnotation[29174-29183]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29188-29194]:Modifier[29188-29194]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[29195-29203]:SimpleType[29195-29203]"
    }, {
      "left" : "params",
      "right" : "params",
      "info" : "SimpleName[29204-29210]:SimpleName[29204-29210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29213-29404]:Block[29213-29404]"
    }, {
      "left" : "List<INDArray> params = new ArrayList<>();",
      "right" : "List<INDArray> params = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[29223-29265]:VariableDeclarationStatement[29223-29265]"
    }, {
      "left" : "for (int i = 0; i < getnLayers(); i++)\n            params.add(layers[i].params());",
      "right" : "for (int i = 0; i < getnLayers(); i++)\n            params.add(layers[i].params());",
      "info" : "ForStatement[29274-29356]:ForStatement[29274-29356]"
    }, {
      "left" : "params.add(layers[i].params());",
      "right" : "params.add(layers[i].params());",
      "info" : "ExpressionStatement[29325-29356]:ExpressionStatement[29325-29356]"
    }, {
      "left" : "return Nd4j.toFlattened(params);",
      "right" : "return Nd4j.toFlattened(params);",
      "info" : "ReturnStatement[29366-29398]:ReturnStatement[29366-29398]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29650-29659]:MarkerAnnotation[29650-29659]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29664-29670]:Modifier[29664-29670]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29671-29675]:PrimitiveType[29671-29675]"
    }, {
      "left" : "setParams",
      "right" : "setParams",
      "info" : "SimpleName[29676-29685]:SimpleName[29676-29685]"
    }, {
      "left" : "INDArray params",
      "right" : "INDArray params",
      "info" : "SingleVariableDeclaration[29686-29701]:SingleVariableDeclaration[29686-29701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29703-29742]:Block[29703-29742]"
    }, {
      "left" : "setParameters(params);",
      "right" : "setParameters(params);",
      "info" : "ExpressionStatement[29713-29735]:ExpressionStatement[29713-29735]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29979-29988]:MarkerAnnotation[29979-29988]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29993-29999]:Modifier[29993-29999]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[30000-30003]:PrimitiveType[30000-30003]"
    }, {
      "left" : "numParams",
      "right" : "numParams",
      "info" : "SimpleName[30004-30013]:SimpleName[30004-30013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30016-30165]:Block[30016-30165]"
    }, {
      "left" : "int length = 0;",
      "right" : "int length = 0;",
      "info" : "VariableDeclarationStatement[30026-30041]:VariableDeclarationStatement[30026-30041]"
    }, {
      "left" : "for (int i = 0; i < layers.length; i++)\n            length += layers[i].numParams();",
      "right" : "for (int i = 0; i < layers.length; i++)\n            length += layers[i].numParams();",
      "info" : "ForStatement[30050-30134]:ForStatement[30050-30134]"
    }, {
      "left" : "length += layers[i].numParams();",
      "right" : "length += layers[i].numParams();",
      "info" : "ExpressionStatement[30102-30134]:ExpressionStatement[30102-30134]"
    }, {
      "left" : "return length;",
      "right" : "return length;",
      "info" : "ReturnStatement[30144-30158]:ReturnStatement[30144-30158]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30430-30436]:Modifier[30430-30436]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[30437-30445]:SimpleType[30437-30445]"
    }, {
      "left" : "pack",
      "right" : "pack",
      "info" : "SimpleName[30446-30450]:SimpleName[30446-30450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30453-30486]:Block[30453-30486]"
    }, {
      "left" : "return params();",
      "right" : "return params();",
      "info" : "ReturnStatement[30463-30479]:ReturnStatement[30463-30479]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30689-30695]:Modifier[30689-30695]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[30696-30704]:SimpleType[30696-30704]"
    }, {
      "left" : "pack",
      "right" : "pack",
      "info" : "SimpleName[30705-30709]:SimpleName[30705-30709]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>> layers",
      "right" : "List<Pair<INDArray, INDArray>> layers",
      "info" : "SingleVariableDeclaration[30710-30747]:SingleVariableDeclaration[30710-30747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30749-30992]:Block[30749-30992]"
    }, {
      "left" : "List<INDArray> list = new ArrayList<>();",
      "right" : "List<INDArray> list = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[30759-30799]:VariableDeclarationStatement[30759-30799]"
    }, {
      "left" : "for (Pair<INDArray, INDArray> layer : layers)",
      "right" : "for (Pair<INDArray, INDArray> layer : layers)",
      "info" : "EnhancedForStatement[30809-30947]:EnhancedForStatement[30809-30947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30855-30947]:Block[30855-30947]"
    }, {
      "left" : "list.add(layer.getFirst());",
      "right" : "list.add(layer.getFirst());",
      "info" : "ExpressionStatement[30869-30896]:ExpressionStatement[30869-30896]"
    }, {
      "left" : "list.add(layer.getSecond());",
      "right" : "list.add(layer.getSecond());",
      "info" : "ExpressionStatement[30909-30937]:ExpressionStatement[30909-30937]"
    }, {
      "left" : "return Nd4j.toFlattened(list);",
      "right" : "return Nd4j.toFlattened(list);",
      "info" : "ReturnStatement[30956-30986]:ReturnStatement[30956-30986]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31211-31220]:MarkerAnnotation[31211-31220]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31225-31231]:Modifier[31225-31231]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[31232-31238]:PrimitiveType[31232-31238]"
    }, {
      "left" : "score",
      "right" : "score",
      "info" : "SimpleName[31239-31244]:SimpleName[31239-31244]"
    }, {
      "left" : "org.nd4j.linalg.dataset.api.DataSet data",
      "right" : "org.nd4j.linalg.dataset.api.DataSet data",
      "info" : "SingleVariableDeclaration[31245-31285]:SingleVariableDeclaration[31245-31285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31287-31359]:Block[31287-31359]"
    }, {
      "left" : "return score(data.getFeatureMatrix(), data.getLabels());",
      "right" : "return score(data.getFeatureMatrix(), data.getLabels());",
      "info" : "ReturnStatement[31297-31353]:ReturnStatement[31297-31353]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31587-31593]:Modifier[31587-31593]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>>",
      "right" : "List<Pair<INDArray, INDArray>>",
      "info" : "ParameterizedType[31594-31624]:ParameterizedType[31594-31624]"
    }, {
      "left" : "unPack",
      "right" : "unPack",
      "info" : "SimpleName[31625-31631]:SimpleName[31625-31631]"
    }, {
      "left" : "INDArray param",
      "right" : "INDArray param",
      "info" : "SingleVariableDeclaration[31632-31646]:SingleVariableDeclaration[31632-31646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31648-33500]:Block[31648-33500]"
    }, {
      "left" : "if (param.slices() != 1)",
      "right" : "if (param.slices() != 1)",
      "info" : "IfStatement[31688-31766]:IfStatement[31688-31766]"
    }, {
      "left" : "param = param.reshape(1, param.length());",
      "right" : "param = param.reshape(1, param.length());",
      "info" : "ExpressionStatement[31725-31766]:ExpressionStatement[31725-31766]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>> ret = new ArrayList<>();",
      "right" : "List<Pair<INDArray, INDArray>> ret = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[31775-31830]:VariableDeclarationStatement[31775-31830]"
    }, {
      "left" : "int curr = 0;",
      "right" : "int curr = 0;",
      "info" : "VariableDeclarationStatement[31839-31852]:VariableDeclarationStatement[31839-31852]"
    }, {
      "left" : "for (int i = 0; i < layers.length; i++)",
      "right" : "for (int i = 0; i < layers.length; i++)",
      "info" : "ForStatement[31861-33472]:ForStatement[31861-33472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31901-33472]:Block[31901-33472]"
    }, {
      "left" : "int layerLength = layers[i].getParam(DefaultParamInitializer.WEIGHT_KEY).length() + layers[i].getParam(DefaultParamInitializer.BIAS_KEY).length();",
      "right" : "int layerLength = layers[i].getParam(DefaultParamInitializer.WEIGHT_KEY).length() + layers[i].getParam(DefaultParamInitializer.BIAS_KEY).length();",
      "info" : "VariableDeclarationStatement[31915-32061]:VariableDeclarationStatement[31915-32061]"
    }, {
      "left" : "INDArray subMatrix = param.get(NDArrayIndex.interval(curr, curr + layerLength));",
      "right" : "INDArray subMatrix = param.get(NDArrayIndex.interval(curr, curr + layerLength));",
      "info" : "VariableDeclarationStatement[32074-32154]:VariableDeclarationStatement[32074-32154]"
    }, {
      "left" : "INDArray weightPortion = subMatrix.get(NDArrayIndex.interval(0, layers[i].getParam(DefaultParamInitializer.WEIGHT_KEY).length()));",
      "right" : "INDArray weightPortion = subMatrix.get(NDArrayIndex.interval(0, layers[i].getParam(DefaultParamInitializer.WEIGHT_KEY).length()));",
      "info" : "VariableDeclarationStatement[32167-32297]:VariableDeclarationStatement[32167-32297]"
    }, {
      "left" : "int beginHBias = layers[i].getParam(DefaultParamInitializer.WEIGHT_KEY).length();",
      "right" : "int beginHBias = layers[i].getParam(DefaultParamInitializer.WEIGHT_KEY).length();",
      "info" : "VariableDeclarationStatement[32311-32392]:VariableDeclarationStatement[32311-32392]"
    }, {
      "left" : "int endHbias = subMatrix.length();",
      "right" : "int endHbias = subMatrix.length();",
      "info" : "VariableDeclarationStatement[32405-32439]:VariableDeclarationStatement[32405-32439]"
    }, {
      "left" : "INDArray hBiasPortion = subMatrix.get(NDArrayIndex.interval(beginHBias, endHbias));",
      "right" : "INDArray hBiasPortion = subMatrix.get(NDArrayIndex.interval(beginHBias, endHbias));",
      "info" : "VariableDeclarationStatement[32452-32535]:VariableDeclarationStatement[32452-32535]"
    }, {
      "left" : "int layerLengthSum = weightPortion.length() + hBiasPortion.length();",
      "right" : "int layerLengthSum = weightPortion.length() + hBiasPortion.length();",
      "info" : "VariableDeclarationStatement[32548-32616]:VariableDeclarationStatement[32548-32616]"
    }, {
      "left" : "if (layerLengthSum != layerLength)",
      "right" : "if (layerLengthSum != layerLength)",
      "info" : "IfStatement[32629-33092]:IfStatement[32629-33092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32664-33092]:Block[32664-33092]"
    }, {
      "left" : "if (hBiasPortion.length() != layers[i].getParam(DefaultParamInitializer.BIAS_KEY).length())",
      "right" : "if (hBiasPortion.length() != layers[i].getParam(DefaultParamInitializer.BIAS_KEY).length())",
      "info" : "IfStatement[32682-32868]:IfStatement[32682-32868]"
    }, {
      "left" : "throw new IllegalStateException(\"Hidden bias on layer \" + i + \" was off\");",
      "right" : "throw new IllegalStateException(\"Hidden bias on layer \" + i + \" was off\");",
      "info" : "ThrowStatement[32794-32868]:ThrowStatement[32794-32868]"
    }, {
      "left" : "if (weightPortion.length() != layers[i].getParam(DefaultParamInitializer.WEIGHT_KEY).length())",
      "right" : "if (weightPortion.length() != layers[i].getParam(DefaultParamInitializer.WEIGHT_KEY).length())",
      "info" : "IfStatement[32885-33077]:IfStatement[32885-33077]"
    }, {
      "left" : "throw new IllegalStateException(\"Weight portion on layer \" + i + \" was off\");",
      "right" : "throw new IllegalStateException(\"Weight portion on layer \" + i + \" was off\");",
      "info" : "ThrowStatement[33000-33077]:ThrowStatement[33000-33077]"
    }, {
      "left" : "ret.add(new Pair<>(weightPortion.reshape(layers[i].getParam(DefaultParamInitializer.WEIGHT_KEY).slices(), layers[i].getParam(DefaultParamInitializer.WEIGHT_KEY).columns()), hBiasPortion.reshape(layers[i].getParam(DefaultParamInitializer.BIAS_KEY).slices(), layers[i].getParam(DefaultParamInitializer.BIAS_KEY).columns())));",
      "right" : "ret.add(new Pair<>(weightPortion.reshape(layers[i].getParam(DefaultParamInitializer.WEIGHT_KEY).slices(), layers[i].getParam(DefaultParamInitializer.WEIGHT_KEY).columns()), hBiasPortion.reshape(layers[i].getParam(DefaultParamInitializer.BIAS_KEY).slices(), layers[i].getParam(DefaultParamInitializer.BIAS_KEY).columns())));",
      "info" : "ExpressionStatement[33106-33429]:ExpressionStatement[33106-33429]"
    }, {
      "left" : "curr += layerLength;",
      "right" : "curr += layerLength;",
      "info" : "ExpressionStatement[33442-33462]:ExpressionStatement[33442-33462]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[33483-33494]:ReturnStatement[33483-33494]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[33819-33828]:Modifier[33819-33828]"
    }, {
      "left" : "List<Pair<Pair<INDArray, INDArray>, Pair<INDArray, INDArray>>>",
      "right" : "List<Pair<Pair<INDArray, INDArray>, Pair<INDArray, INDArray>>>",
      "info" : "ParameterizedType[33829-33891]:ParameterizedType[33829-33891]"
    }, {
      "left" : "backPropGradient2",
      "right" : "backPropGradient2",
      "info" : "SimpleName[33892-33909]:SimpleName[33892-33909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33912-36238]:Block[33912-36238]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>> deltas = computeDeltas2();",
      "right" : "List<Pair<INDArray, INDArray>> deltas = computeDeltas2();",
      "info" : "VariableDeclarationStatement[34020-34077]:VariableDeclarationStatement[34020-34077]"
    }, {
      "left" : "List<Pair<Pair<INDArray, INDArray>, Pair<INDArray, INDArray>>> list = new ArrayList<>();",
      "right" : "List<Pair<Pair<INDArray, INDArray>, Pair<INDArray, INDArray>>> list = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[34088-34176]:VariableDeclarationStatement[34088-34176]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>> grad = new ArrayList<>();",
      "right" : "List<Pair<INDArray, INDArray>> grad = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[34185-34241]:VariableDeclarationStatement[34185-34241]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>> preCon = new ArrayList<>();",
      "right" : "List<Pair<INDArray, INDArray>> preCon = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[34250-34308]:VariableDeclarationStatement[34250-34308]"
    }, {
      "left" : "for (int l = 0; l < deltas.size(); l++)",
      "right" : "for (int l = 0; l < deltas.size(); l++)",
      "info" : "ForStatement[34318-35514]:ForStatement[34318-35514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34358-35514]:Block[34358-35514]"
    }, {
      "left" : "INDArray gradientChange = deltas.get(l).getFirst();",
      "right" : "INDArray gradientChange = deltas.get(l).getFirst();",
      "info" : "VariableDeclarationStatement[34372-34423]:VariableDeclarationStatement[34372-34423]"
    }, {
      "left" : "INDArray preConGradientChange = deltas.get(l).getSecond();",
      "right" : "INDArray preConGradientChange = deltas.get(l).getSecond();",
      "info" : "VariableDeclarationStatement[34436-34494]:VariableDeclarationStatement[34436-34494]"
    }, {
      "left" : "if (l < layers.length && gradientChange.length() != layers[l].getParam(DefaultParamInitializer.WEIGHT_KEY).length())",
      "right" : "if (l < layers.length && gradientChange.length() != layers[l].getParam(DefaultParamInitializer.WEIGHT_KEY).length())",
      "info" : "IfStatement[34509-34720]:IfStatement[34509-34720]"
    }, {
      "left" : "throw new IllegalStateException(\"Gradient change not equal to weight change\");",
      "right" : "throw new IllegalStateException(\"Gradient change not equal to weight change\");",
      "info" : "ThrowStatement[34642-34720]:ThrowStatement[34642-34720]"
    }, {
      "left" : "INDArray deltaColumnSums = deltas.get(l).getFirst().mean(0);",
      "right" : "INDArray deltaColumnSums = deltas.get(l).getFirst().mean(0);",
      "info" : "VariableDeclarationStatement[34767-34827]:VariableDeclarationStatement[34767-34827]"
    }, {
      "left" : "INDArray preConColumnSums = deltas.get(l).getSecond().mean(0);",
      "right" : "INDArray preConColumnSums = deltas.get(l).getSecond().mean(0);",
      "info" : "VariableDeclarationStatement[34840-34902]:VariableDeclarationStatement[34840-34902]"
    }, {
      "left" : "grad.add(new Pair<>(gradientChange, deltaColumnSums));",
      "right" : "grad.add(new Pair<>(gradientChange, deltaColumnSums));",
      "info" : "ExpressionStatement[34916-34970]:ExpressionStatement[34916-34970]"
    }, {
      "left" : "preCon.add(new Pair<>(preConGradientChange, preConColumnSums));",
      "right" : "preCon.add(new Pair<>(preConGradientChange, preConColumnSums));",
      "info" : "ExpressionStatement[34983-35046]:ExpressionStatement[34983-35046]"
    }, {
      "left" : "if (l < layers.length && deltaColumnSums.length() != layers[l].getParam(DefaultParamInitializer.BIAS_KEY).length())",
      "right" : "if (l < layers.length && deltaColumnSums.length() != layers[l].getParam(DefaultParamInitializer.BIAS_KEY).length())",
      "info" : "IfStatement[35059-35502]:IfStatement[35059-35502]"
    }, {
      "left" : "throw new IllegalStateException(\"Bias change not equal to weight change\");",
      "right" : "throw new IllegalStateException(\"Bias change not equal to weight change\");",
      "info" : "ThrowStatement[35191-35265]:ThrowStatement[35191-35265]"
    }, {
      "left" : "if (l == getLayers().length && deltaColumnSums.length() != getOutputLayer().getParam(DefaultParamInitializer.BIAS_KEY).length())",
      "right" : "if (l == getLayers().length && deltaColumnSums.length() != getOutputLayer().getParam(DefaultParamInitializer.BIAS_KEY).length())",
      "info" : "IfStatement[35283-35502]:IfStatement[35283-35502]"
    }, {
      "left" : "throw new IllegalStateException(\"Bias change not equal to weight change\");",
      "right" : "throw new IllegalStateException(\"Bias change not equal to weight change\");",
      "info" : "ThrowStatement[35428-35502]:ThrowStatement[35428-35502]"
    }, {
      "left" : "INDArray g = pack(grad);",
      "right" : "INDArray g = pack(grad);",
      "info" : "VariableDeclarationStatement[35524-35548]:VariableDeclarationStatement[35524-35548]"
    }, {
      "left" : "INDArray con = pack(preCon);",
      "right" : "INDArray con = pack(preCon);",
      "info" : "VariableDeclarationStatement[35557-35585]:VariableDeclarationStatement[35557-35585]"
    }, {
      "left" : "INDArray theta = params();",
      "right" : "INDArray theta = params();",
      "info" : "VariableDeclarationStatement[35594-35620]:VariableDeclarationStatement[35594-35620]"
    }, {
      "left" : "if (mask == null)",
      "right" : "if (mask == null)",
      "info" : "IfStatement[35631-35672]:IfStatement[35631-35672]"
    }, {
      "left" : "initMask();",
      "right" : "initMask();",
      "info" : "ExpressionStatement[35661-35672]:ExpressionStatement[35661-35672]"
    }, {
      "left" : "g.addi(theta.mul(defaultConfiguration.getL2()).muli(mask));",
      "right" : "g.addi(theta.mul(defaultConfiguration.getL2()).muli(mask));",
      "info" : "ExpressionStatement[35682-35741]:ExpressionStatement[35682-35741]"
    }, {
      "left" : "INDArray conAdd = Transforms.pow(mask.mul(defaultConfiguration.getL2()).add(Nd4j.valueArrayOf(g.slices(), g.columns(), layerWiseConfigurations.getDampingFactor())), 3.0 / 4.0);",
      "right" : "INDArray conAdd = Transforms.pow(mask.mul(defaultConfiguration.getL2()).add(Nd4j.valueArrayOf(g.slices(), g.columns(), layerWiseConfigurations.getDampingFactor())), 3.0 / 4.0);",
      "info" : "VariableDeclarationStatement[35751-35927]:VariableDeclarationStatement[35751-35927]"
    }, {
      "left" : "con.addi(conAdd);",
      "right" : "con.addi(conAdd);",
      "info" : "ExpressionStatement[35937-35954]:ExpressionStatement[35937-35954]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>> gUnpacked = unPack(g);",
      "right" : "List<Pair<INDArray, INDArray>> gUnpacked = unPack(g);",
      "info" : "VariableDeclarationStatement[35964-36017]:VariableDeclarationStatement[35964-36017]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>> conUnpacked = unPack(con);",
      "right" : "List<Pair<INDArray, INDArray>> conUnpacked = unPack(con);",
      "info" : "VariableDeclarationStatement[36027-36084]:VariableDeclarationStatement[36027-36084]"
    }, {
      "left" : "for (int i = 0; i < gUnpacked.size(); i++)\n            list.add(new Pair<>(gUnpacked.get(i), conUnpacked.get(i)));",
      "right" : "for (int i = 0; i < gUnpacked.size(); i++)\n            list.add(new Pair<>(gUnpacked.get(i), conUnpacked.get(i)));",
      "info" : "ForStatement[36094-36208]:ForStatement[36094-36208]"
    }, {
      "left" : "list.add(new Pair<>(gUnpacked.get(i), conUnpacked.get(i)));",
      "right" : "list.add(new Pair<>(gUnpacked.get(i), conUnpacked.get(i)));",
      "info" : "ExpressionStatement[36149-36208]:ExpressionStatement[36149-36208]"
    }, {
      "left" : "return list;",
      "right" : "return list;",
      "info" : "ReturnStatement[36219-36231]:ReturnStatement[36219-36231]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36245-36254]:MarkerAnnotation[36245-36254]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36259-36265]:Modifier[36259-36265]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36266-36270]:PrimitiveType[36266-36270]"
    }, {
      "left" : "fit",
      "right" : "fit",
      "info" : "SimpleName[36271-36274]:SimpleName[36271-36274]"
    }, {
      "left" : "DataSetIterator iter",
      "right" : "DataSetIterator iter",
      "info" : "SingleVariableDeclaration[36275-36295]:SingleVariableDeclaration[36275-36295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36297-36700]:Block[36297-36700]"
    }, {
      "left" : "if (layerWiseConfigurations.isPretrain())",
      "right" : "if (layerWiseConfigurations.isPretrain())",
      "info" : "IfStatement[36307-36442]:IfStatement[36307-36442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36349-36442]:Block[36349-36442]"
    }, {
      "left" : "pretrain(iter);",
      "right" : "pretrain(iter);",
      "info" : "ExpressionStatement[36363-36378]:ExpressionStatement[36363-36378]"
    }, {
      "left" : "iter.reset();",
      "right" : "iter.reset();",
      "info" : "ExpressionStatement[36391-36404]:ExpressionStatement[36391-36404]"
    }, {
      "left" : "finetune(iter);",
      "right" : "finetune(iter);",
      "info" : "ExpressionStatement[36417-36432]:ExpressionStatement[36417-36432]"
    }, {
      "left" : "if(layerWiseConfigurations.isBackward())",
      "right" : "if(layerWiseConfigurations.isBackward())",
      "info" : "IfStatement[36451-36694]:IfStatement[36451-36694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36492-36694]:Block[36492-36694]"
    }, {
      "left" : "iter.reset();",
      "right" : "iter.reset();",
      "info" : "ExpressionStatement[36506-36519]:ExpressionStatement[36506-36519]"
    }, {
      "left" : "while(iter.hasNext())",
      "right" : "while(iter.hasNext())",
      "info" : "WhileStatement[36532-36684]:WhileStatement[36532-36684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36554-36684]:Block[36554-36684]"
    }, {
      "left" : "DataSet next = iter.next();",
      "right" : "DataSet next = iter.next();",
      "info" : "VariableDeclarationStatement[36572-36599]:VariableDeclarationStatement[36572-36599]"
    }, {
      "left" : "doBackWard(next.getFeatureMatrix(),next.getLabels());",
      "right" : "doBackWard(next.getFeatureMatrix(),next.getLabels());",
      "info" : "ExpressionStatement[36616-36669]:ExpressionStatement[36616-36669]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[36749-36758]:Modifier[36749-36758]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36759-36763]:PrimitiveType[36759-36763]"
    }, {
      "left" : "doBackWard",
      "right" : "doBackWard",
      "info" : "SimpleName[36764-36774]:SimpleName[36764-36774]"
    }, {
      "left" : "INDArray input",
      "right" : "INDArray input",
      "info" : "SingleVariableDeclaration[36775-36789]:SingleVariableDeclaration[36775-36789]"
    }, {
      "left" : "INDArray labels",
      "right" : "INDArray labels",
      "info" : "SingleVariableDeclaration[36790-36805]:SingleVariableDeclaration[36790-36805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36807-41368]:Block[36807-41368]"
    }, {
      "left" : "setInput(input);",
      "right" : "setInput(input);",
      "info" : "ExpressionStatement[36817-36833]:ExpressionStatement[36817-36833]"
    }, {
      "left" : "this.labels = labels;",
      "right" : "this.labels = labels;",
      "info" : "ExpressionStatement[36842-36863]:ExpressionStatement[36842-36863]"
    }, {
      "left" : "Gradient nextGradients = new DefaultGradient();",
      "right" : "Gradient nextGradients = new DefaultGradient();",
      "info" : "VariableDeclarationStatement[36872-36919]:VariableDeclarationStatement[36872-36919]"
    }, {
      "left" : "if(!(getOutputLayer() instanceof  OutputLayer))",
      "right" : "if(!(getOutputLayer() instanceof  OutputLayer))",
      "info" : "IfStatement[36929-37176]:IfStatement[36929-37176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36977-37176]:Block[36977-37176]"
    }, {
      "left" : "log.warn(\"Warning: final layer isn't output layer. You can ignore this message if you just intend on using a a deep neural network with no output layer.\");",
      "right" : "log.warn(\"Warning: final layer isn't output layer. You can ignore this message if you just intend on using a a deep neural network with no output layer.\");",
      "info" : "ExpressionStatement[36991-37146]:ExpressionStatement[36991-37146]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37159-37166]:ReturnStatement[37159-37166]"
    }, {
      "left" : "OutputLayer output = (OutputLayer) getOutputLayer();",
      "right" : "OutputLayer output = (OutputLayer) getOutputLayer();",
      "info" : "VariableDeclarationStatement[37186-37238]:VariableDeclarationStatement[37186-37238]"
    }, {
      "left" : "if(labels == null)",
      "right" : "if(labels == null)",
      "info" : "IfStatement[37247-37329]:IfStatement[37247-37329]"
    }, {
      "left" : "throw new IllegalStateException(\"No labels found\");",
      "right" : "throw new IllegalStateException(\"No labels found\");",
      "info" : "ThrowStatement[37278-37329]:ThrowStatement[37278-37329]"
    }, {
      "left" : "if(output.conf().getWeightInit() == WeightInit.ZERO)",
      "right" : "if(output.conf().getWeightInit() == WeightInit.ZERO)",
      "info" : "IfStatement[37338-37520]:IfStatement[37338-37520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37390-37520]:Block[37390-37520]"
    }, {
      "left" : "throw new IllegalStateException(\"Output layer weights cannot be intialized to zero when using backprop.\");",
      "right" : "throw new IllegalStateException(\"Output layer weights cannot be intialized to zero when using backprop.\");",
      "info" : "ThrowStatement[37404-37510]:ThrowStatement[37404-37510]"
    }, {
      "left" : ";",
      "right" : ";",
      "info" : "EmptyStatement[37520-37521]:EmptyStatement[37520-37521]"
    }, {
      "left" : "output.setLabels(labels);",
      "right" : "output.setLabels(labels);",
      "info" : "ExpressionStatement[37530-37555]:ExpressionStatement[37530-37555]"
    }, {
      "left" : "for(int i = 0; i < getLayerWiseConfigurations().getConf(0).getNumIterations(); i++)",
      "right" : "for(int i = 0; i < getLayerWiseConfigurations().getConf(0).getNumIterations(); i++)",
      "info" : "ForStatement[37633-41361]:ForStatement[37633-41361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37717-41361]:Block[37717-41361]"
    }, {
      "left" : "int numLayers = getnLayers();",
      "right" : "int numLayers = getnLayers();",
      "info" : "VariableDeclarationStatement[38428-38457]:VariableDeclarationStatement[38428-38457]"
    }, {
      "left" : "List<Gradient> gradientUpdates = new ArrayList<>();",
      "right" : "List<Gradient> gradientUpdates = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[38470-38521]:VariableDeclarationStatement[38470-38521]"
    }, {
      "left" : "Pair<List<INDArray>,List<INDArray>> activationsAndDeriv = feedForwardActivationsAndDerivatives();",
      "right" : "Pair<List<INDArray>,List<INDArray>> activationsAndDeriv = feedForwardActivationsAndDerivatives();",
      "info" : "VariableDeclarationStatement[38534-38631]:VariableDeclarationStatement[38534-38631]"
    }, {
      "left" : "List<INDArray> activations = activationsAndDeriv.getFirst();",
      "right" : "List<INDArray> activations = activationsAndDeriv.getFirst();",
      "info" : "VariableDeclarationStatement[38644-38704]:VariableDeclarationStatement[38644-38704]"
    }, {
      "left" : "INDArray outputActivation = activations.get(activations.size() - 1);",
      "right" : "INDArray outputActivation = activations.get(activations.size() - 1);",
      "info" : "VariableDeclarationStatement[38717-38785]:VariableDeclarationStatement[38717-38785]"
    }, {
      "left" : "List<INDArray> derivatives = activationsAndDeriv.getSecond();",
      "right" : "List<INDArray> derivatives = activationsAndDeriv.getSecond();",
      "info" : "VariableDeclarationStatement[38799-38860]:VariableDeclarationStatement[38799-38860]"
    }, {
      "left" : "INDArray activationDeriv = derivatives.get(derivatives.size() - 1);",
      "right" : "INDArray activationDeriv = derivatives.get(derivatives.size() - 1);",
      "info" : "VariableDeclarationStatement[38873-38940]:VariableDeclarationStatement[38873-38940]"
    }, {
      "left" : "INDArray layerInput = activations.get(activations.size() - 2);",
      "right" : "INDArray layerInput = activations.get(activations.size() - 2);",
      "info" : "VariableDeclarationStatement[38953-39015]:VariableDeclarationStatement[38953-39015]"
    }, {
      "left" : "INDArray delta = outputActivation.sub(labels).transpose();",
      "right" : "INDArray delta = outputActivation.sub(labels).transpose();",
      "info" : "VariableDeclarationStatement[39029-39087]:VariableDeclarationStatement[39029-39087]"
    }, {
      "left" : "if(output.conf().getLossFunction() != LossFunctions.LossFunction.XENT)",
      "right" : "if(output.conf().getLossFunction() != LossFunctions.LossFunction.XENT)",
      "info" : "IfStatement[39142-39273]:IfStatement[39142-39273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39213-39273]:Block[39213-39273]"
    }, {
      "left" : "delta.muli(activationDeriv);",
      "right" : "delta.muli(activationDeriv);",
      "info" : "ExpressionStatement[39231-39259]:ExpressionStatement[39231-39259]"
    }, {
      "left" : "nextGradients.gradientForVariable().put(DefaultParamInitializer.WEIGHT_KEY, delta.mmul(layerInput).transpose());",
      "right" : "nextGradients.gradientForVariable().put(DefaultParamInitializer.WEIGHT_KEY, delta.mmul(layerInput).transpose());",
      "info" : "ExpressionStatement[39287-39399]:ExpressionStatement[39287-39399]"
    }, {
      "left" : "nextGradients.gradientForVariable().put(DefaultParamInitializer.BIAS_KEY, delta.transpose());",
      "right" : "nextGradients.gradientForVariable().put(DefaultParamInitializer.BIAS_KEY, delta.transpose());",
      "info" : "ExpressionStatement[39412-39505]:ExpressionStatement[39412-39505]"
    }, {
      "left" : "gradientUpdates.add(nextGradients);",
      "right" : "gradientUpdates.add(nextGradients);",
      "info" : "ExpressionStatement[39519-39554]:ExpressionStatement[39519-39554]"
    }, {
      "left" : "for(int j = numLayers - 2; j >= 0; j--)",
      "right" : "for(int j = numLayers - 2; j >= 0; j--)",
      "info" : "ForStatement[39653-40138]:ForStatement[39653-40138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39693-40138]:Block[39693-40138]"
    }, {
      "left" : "INDArray currActivation = activations.get(j);",
      "right" : "INDArray currActivation = activations.get(j);",
      "info" : "VariableDeclarationStatement[39788-39833]:VariableDeclarationStatement[39788-39833]"
    }, {
      "left" : "INDArray currDerivative = derivatives.get(j);",
      "right" : "INDArray currDerivative = derivatives.get(j);",
      "info" : "VariableDeclarationStatement[39850-39895]:VariableDeclarationStatement[39850-39895]"
    }, {
      "left" : "Layer nextLayer = getLayers()[j + 1];",
      "right" : "Layer nextLayer = getLayers()[j + 1];",
      "info" : "VariableDeclarationStatement[39912-39949]:VariableDeclarationStatement[39912-39949]"
    }, {
      "left" : "nextGradients = getLayers()[j].backwardGradient(currDerivative, nextLayer, nextGradients, currActivation);",
      "right" : "nextGradients = getLayers()[j].backwardGradient(currDerivative, nextLayer, nextGradients, currActivation);",
      "info" : "ExpressionStatement[39966-40072]:ExpressionStatement[39966-40072]"
    }, {
      "left" : "gradientUpdates.add(nextGradients);",
      "right" : "gradientUpdates.add(nextGradients);",
      "info" : "ExpressionStatement[40089-40124]:ExpressionStatement[40089-40124]"
    }, {
      "left" : "Collections.reverse(gradientUpdates);",
      "right" : "Collections.reverse(gradientUpdates);",
      "info" : "ExpressionStatement[40152-40189]:ExpressionStatement[40152-40189]"
    }, {
      "left" : "for(int k = 0; k < numLayers; k++)",
      "right" : "for(int k = 0; k < numLayers; k++)",
      "info" : "ForStatement[40264-41234]:ForStatement[40264-41234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40299-41234]:Block[40299-41234]"
    }, {
      "left" : "Layer currLayer = getLayers()[k];",
      "right" : "Layer currLayer = getLayers()[k];",
      "info" : "VariableDeclarationStatement[40317-40350]:VariableDeclarationStatement[40317-40350]"
    }, {
      "left" : "for(String paramType : gradientUpdates.get(k).gradientForVariable().keySet())",
      "right" : "for(String paramType : gradientUpdates.get(k).gradientForVariable().keySet())",
      "info" : "EnhancedForStatement[40367-41220]:EnhancedForStatement[40367-41220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40445-41220]:Block[40445-41220]"
    }, {
      "left" : "INDArray gradient = gradientUpdates.get(k).getGradientFor(paramType);",
      "right" : "INDArray gradient = gradientUpdates.get(k).getGradientFor(paramType);",
      "info" : "VariableDeclarationStatement[40467-40536]:VariableDeclarationStatement[40467-40536]"
    }, {
      "left" : "GradientAdjustment.updateGradientAccordingToParams(\n                            i\n                            ,input.slices()\n                            ,currLayer.conf()\n                            ,currLayer.getParam(paramType)\n                            ,gradient\n                            ,currLayer.getOptimizer().adaGradForVariables().get(paramType)\n                            ,currLayer.getOptimizer().getLastStep().get(paramType)\n                            ,paramType\n                    );",
      "right" : "GradientAdjustment.updateGradientAccordingToParams(\n                            i\n                            ,input.slices()\n                            ,currLayer.conf()\n                            ,currLayer.getParam(paramType)\n                            ,gradient\n                            ,currLayer.getOptimizer().adaGradForVariables().get(paramType)\n                            ,currLayer.getOptimizer().getLastStep().get(paramType)\n                            ,paramType\n                    );",
      "info" : "ExpressionStatement[40639-41143]:ExpressionStatement[40639-41143]"
    }, {
      "left" : "currLayer.update(gradient, paramType);",
      "right" : "currLayer.update(gradient, paramType);",
      "info" : "ExpressionStatement[41164-41202]:ExpressionStatement[41164-41202]"
    }, {
      "left" : "for(IterationListener listener :  listeners)\n                listener.iterationDone(getOutputLayer(),i);",
      "right" : "for(IterationListener listener :  listeners)\n                listener.iterationDone(getOutputLayer(),i);",
      "info" : "EnhancedForStatement[41247-41351]:EnhancedForStatement[41247-41351]"
    }, {
      "left" : "listener.iterationDone(getOutputLayer(),i);",
      "right" : "listener.iterationDone(getOutputLayer(),i);",
      "info" : "ExpressionStatement[41308-41351]:ExpressionStatement[41308-41351]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41375-41381]:Modifier[41375-41381]"
    }, {
      "left" : "List<IterationListener>",
      "right" : "List<IterationListener>",
      "info" : "ParameterizedType[41382-41405]:ParameterizedType[41382-41405]"
    }, {
      "left" : "getListeners",
      "right" : "getListeners",
      "info" : "SimpleName[41406-41418]:SimpleName[41406-41418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41421-41454]:Block[41421-41454]"
    }, {
      "left" : "return listeners;",
      "right" : "return listeners;",
      "info" : "ReturnStatement[41431-41448]:ReturnStatement[41431-41448]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41460-41466]:Modifier[41460-41466]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41467-41471]:PrimitiveType[41467-41471]"
    }, {
      "left" : "setListeners",
      "right" : "setListeners",
      "info" : "SimpleName[41472-41484]:SimpleName[41472-41484]"
    }, {
      "left" : "List<IterationListener> listeners",
      "right" : "List<IterationListener> listeners",
      "info" : "SingleVariableDeclaration[41485-41518]:SingleVariableDeclaration[41485-41518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41520-41721]:Block[41520-41721]"
    }, {
      "left" : "this.listeners = listeners;",
      "right" : "this.listeners = listeners;",
      "info" : "ExpressionStatement[41530-41557]:ExpressionStatement[41530-41557]"
    }, {
      "left" : "if(layers == null)",
      "right" : "if(layers == null)",
      "info" : "IfStatement[41567-41617]:IfStatement[41567-41617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41586-41617]:Block[41586-41617]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[41600-41607]:ExpressionStatement[41600-41607]"
    }, {
      "left" : "for(Layer layer : layers)",
      "right" : "for(Layer layer : layers)",
      "info" : "EnhancedForStatement[41626-41715]:EnhancedForStatement[41626-41715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41652-41715]:Block[41652-41715]"
    }, {
      "left" : "layer.setIterationListeners(listeners);",
      "right" : "layer.setIterationListeners(listeners);",
      "info" : "ExpressionStatement[41666-41705]:ExpressionStatement[41666-41705]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41840-41846]:Modifier[41840-41846]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41847-41851]:PrimitiveType[41847-41851]"
    }, {
      "left" : "finetune",
      "right" : "finetune",
      "info" : "SimpleName[41852-41860]:SimpleName[41852-41860]"
    }, {
      "left" : "DataSetIterator iter",
      "right" : "DataSetIterator iter",
      "info" : "SingleVariableDeclaration[41861-41881]:SingleVariableDeclaration[41861-41881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41883-42714]:Block[41883-42714]"
    }, {
      "left" : "log.info(\"Finetune phase \");",
      "right" : "log.info(\"Finetune phase \");",
      "info" : "ExpressionStatement[41893-41921]:ExpressionStatement[41893-41921]"
    }, {
      "left" : "iter.reset();",
      "right" : "iter.reset();",
      "info" : "ExpressionStatement[41930-41943]:ExpressionStatement[41930-41943]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[41953-42706]:WhileStatement[41953-42706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41976-42706]:Block[41976-42706]"
    }, {
      "left" : "DataSet data = iter.next();",
      "right" : "DataSet data = iter.next();",
      "info" : "VariableDeclarationStatement[41990-42017]:VariableDeclarationStatement[41990-42017]"
    }, {
      "left" : "if (data.getFeatureMatrix() == null || data.getLabels() == null)",
      "right" : "if (data.getFeatureMatrix() == null || data.getLabels() == null)",
      "info" : "IfStatement[42030-42117]:IfStatement[42030-42117]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42111-42117]:BreakStatement[42111-42117]"
    }, {
      "left" : "setInput(data.getFeatureMatrix());",
      "right" : "setInput(data.getFeatureMatrix());",
      "info" : "ExpressionStatement[42131-42165]:ExpressionStatement[42131-42165]"
    }, {
      "left" : "setLabels(data.getLabels());",
      "right" : "setLabels(data.getLabels());",
      "info" : "ExpressionStatement[42178-42206]:ExpressionStatement[42178-42206]"
    }, {
      "left" : "if (getOutputLayer().conf().getOptimizationAlgo() != OptimizationAlgorithm.HESSIAN_FREE)",
      "right" : "if (getOutputLayer().conf().getOptimizationAlgo() != OptimizationAlgorithm.HESSIAN_FREE)",
      "info" : "IfStatement[42219-42695]:IfStatement[42219-42695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42308-42615]:Block[42308-42615]"
    }, {
      "left" : "feedForward();",
      "right" : "feedForward();",
      "info" : "ExpressionStatement[42326-42340]:ExpressionStatement[42326-42340]"
    }, {
      "left" : "if (getOutputLayer() instanceof OutputLayer)",
      "right" : "if (getOutputLayer() instanceof OutputLayer)",
      "info" : "IfStatement[42357-42601]:IfStatement[42357-42601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42402-42601]:Block[42402-42601]"
    }, {
      "left" : "OutputLayer o = (OutputLayer) getOutputLayer();",
      "right" : "OutputLayer o = (OutputLayer) getOutputLayer();",
      "info" : "VariableDeclarationStatement[42424-42471]:VariableDeclarationStatement[42424-42471]"
    }, {
      "left" : "o.setIterationListeners(getListeners());",
      "right" : "o.setIterationListeners(getListeners());",
      "info" : "ExpressionStatement[42492-42532]:ExpressionStatement[42492-42532]"
    }, {
      "left" : "o.fit(o.input(),getLabels());",
      "right" : "o.fit(o.input(),getLabels());",
      "info" : "ExpressionStatement[42553-42582]:ExpressionStatement[42553-42582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42621-42695]:Block[42621-42695]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[42639-42681]:ThrowStatement[42639-42681]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42824-42830]:Modifier[42824-42830]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42831-42835]:PrimitiveType[42831-42835]"
    }, {
      "left" : "finetune",
      "right" : "finetune",
      "info" : "SimpleName[42836-42844]:SimpleName[42836-42844]"
    }, {
      "left" : "INDArray labels",
      "right" : "INDArray labels",
      "info" : "SingleVariableDeclaration[42845-42860]:SingleVariableDeclaration[42845-42860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42862-43557]:Block[42862-43557]"
    }, {
      "left" : "if (labels != null)",
      "right" : "if (labels != null)",
      "info" : "IfStatement[42872-42925]:IfStatement[42872-42925]"
    }, {
      "left" : "this.labels = labels;",
      "right" : "this.labels = labels;",
      "info" : "ExpressionStatement[42904-42925]:ExpressionStatement[42904-42925]"
    }, {
      "left" : "if (!(getOutputLayer() instanceof OutputLayer))",
      "right" : "if (!(getOutputLayer() instanceof OutputLayer))",
      "info" : "IfStatement[42934-43091]:IfStatement[42934-43091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42982-43091]:Block[42982-43091]"
    }, {
      "left" : "log.warn(\"Output layer not instance of output layer returning.\");",
      "right" : "log.warn(\"Output layer not instance of output layer returning.\");",
      "info" : "ExpressionStatement[42996-43061]:ExpressionStatement[42996-43061]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43074-43081]:ReturnStatement[43074-43081]"
    }, {
      "left" : "log.info(\"Finetune phase\");",
      "right" : "log.info(\"Finetune phase\");",
      "info" : "ExpressionStatement[43101-43128]:ExpressionStatement[43101-43128]"
    }, {
      "left" : "OutputLayer o = (OutputLayer) getOutputLayer();",
      "right" : "OutputLayer o = (OutputLayer) getOutputLayer();",
      "info" : "VariableDeclarationStatement[43137-43184]:VariableDeclarationStatement[43137-43184]"
    }, {
      "left" : "if (getOutputLayer().conf().getOptimizationAlgo() != OptimizationAlgorithm.HESSIAN_FREE)",
      "right" : "if (getOutputLayer().conf().getOptimizationAlgo() != OptimizationAlgorithm.HESSIAN_FREE)",
      "info" : "IfStatement[43193-43551]:IfStatement[43193-43551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43282-43470]:Block[43282-43470]"
    }, {
      "left" : "List<INDArray> activations = feedForward();",
      "right" : "List<INDArray> activations = feedForward();",
      "info" : "VariableDeclarationStatement[43296-43339]:VariableDeclarationStatement[43296-43339]"
    }, {
      "left" : "o.setIterationListeners(getListeners());",
      "right" : "o.setIterationListeners(getListeners());",
      "info" : "ExpressionStatement[43352-43392]:ExpressionStatement[43352-43392]"
    }, {
      "left" : "o.fit(activations.get(activations.size() - 2), labels);",
      "right" : "o.fit(activations.get(activations.size() - 2), labels);",
      "info" : "ExpressionStatement[43405-43460]:ExpressionStatement[43405-43460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43485-43551]:Block[43485-43551]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[43499-43541]:ThrowStatement[43499-43541]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43734-43743]:MarkerAnnotation[43734-43743]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43748-43754]:Modifier[43748-43754]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[43755-43760]:ArrayType[43755-43760]"
    }, {
      "left" : "predict",
      "right" : "predict",
      "info" : "SimpleName[43761-43768]:SimpleName[43761-43768]"
    }, {
      "left" : "INDArray d",
      "right" : "INDArray d",
      "info" : "SingleVariableDeclaration[43769-43779]:SingleVariableDeclaration[43769-43779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43781-44107]:Block[43781-44107]"
    }, {
      "left" : "INDArray output = output(d);",
      "right" : "INDArray output = output(d);",
      "info" : "VariableDeclarationStatement[43791-43819]:VariableDeclarationStatement[43791-43819]"
    }, {
      "left" : "int[] ret = new int[d.slices()];",
      "right" : "int[] ret = new int[d.slices()];",
      "info" : "VariableDeclarationStatement[43828-43860]:VariableDeclarationStatement[43828-43860]"
    }, {
      "left" : "if (d.isRowVector())",
      "right" : "if (d.isRowVector())",
      "info" : "IfStatement[43869-44081]:IfStatement[43869-44081]"
    }, {
      "left" : "ret[0] = Nd4j.getBlasWrapper().iamax(output);",
      "right" : "ret[0] = Nd4j.getBlasWrapper().iamax(output);",
      "info" : "ExpressionStatement[43890-43935]:ExpressionStatement[43890-43935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43949-44081]:Block[43949-44081]"
    }, {
      "left" : "for (int i = 0; i < ret.length; i++)\n                ret[i] = Nd4j.getBlasWrapper().iamax(output.getRow(i));",
      "right" : "for (int i = 0; i < ret.length; i++)\n                ret[i] = Nd4j.getBlasWrapper().iamax(output.getRow(i));",
      "info" : "ForStatement[43963-44071]:ForStatement[43963-44071]"
    }, {
      "left" : "ret[i] = Nd4j.getBlasWrapper().iamax(output.getRow(i));",
      "right" : "ret[i] = Nd4j.getBlasWrapper().iamax(output.getRow(i));",
      "info" : "ExpressionStatement[44016-44071]:ExpressionStatement[44016-44071]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[44090-44101]:ReturnStatement[44090-44101]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[44353-44362]:MarkerAnnotation[44353-44362]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44367-44373]:Modifier[44367-44373]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[44374-44382]:SimpleType[44374-44382]"
    }, {
      "left" : "labelProbabilities",
      "right" : "labelProbabilities",
      "info" : "SimpleName[44383-44401]:SimpleName[44383-44401]"
    }, {
      "left" : "INDArray examples",
      "right" : "INDArray examples",
      "info" : "SingleVariableDeclaration[44402-44419]:SingleVariableDeclaration[44402-44419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44421-44601]:Block[44421-44601]"
    }, {
      "left" : "List<INDArray> feed = feedForward(examples);",
      "right" : "List<INDArray> feed = feedForward(examples);",
      "info" : "VariableDeclarationStatement[44431-44475]:VariableDeclarationStatement[44431-44475]"
    }, {
      "left" : "OutputLayer o = (OutputLayer) getOutputLayer();",
      "right" : "OutputLayer o = (OutputLayer) getOutputLayer();",
      "info" : "VariableDeclarationStatement[44484-44531]:VariableDeclarationStatement[44484-44531]"
    }, {
      "left" : "return o.labelProbabilities(feed.get(feed.size() - 1));",
      "right" : "return o.labelProbabilities(feed.get(feed.size() - 1));",
      "info" : "ReturnStatement[44540-44595]:ReturnStatement[44540-44595]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[44792-44801]:MarkerAnnotation[44792-44801]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44806-44812]:Modifier[44806-44812]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44813-44817]:PrimitiveType[44813-44817]"
    }, {
      "left" : "fit",
      "right" : "fit",
      "info" : "SimpleName[44818-44821]:SimpleName[44818-44821]"
    }, {
      "left" : "INDArray examples",
      "right" : "INDArray examples",
      "info" : "SingleVariableDeclaration[44822-44839]:SingleVariableDeclaration[44822-44839]"
    }, {
      "left" : "INDArray labels",
      "right" : "INDArray labels",
      "info" : "SingleVariableDeclaration[44841-44856]:SingleVariableDeclaration[44841-44856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44858-45116]:Block[44858-45122]"
    }, {
      "left" : "setInput(examples);",
      "right" : "setInput(examples.dup());",
      "info" : "ExpressionStatement[44868-44887]:ExpressionStatement[44868-44893]"
    }, {
      "left" : "if (layerWiseConfigurations.isPretrain())",
      "right" : "if (layerWiseConfigurations.isPretrain())",
      "info" : "IfStatement[44899-45016]:IfStatement[44905-45022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44941-45016]:Block[44947-45022]"
    }, {
      "left" : "pretrain(getInput());",
      "right" : "pretrain(getInput());",
      "info" : "ExpressionStatement[44955-44976]:ExpressionStatement[44961-44982]"
    }, {
      "left" : "finetune(labels);",
      "right" : "finetune(labels);",
      "info" : "ExpressionStatement[44989-45006]:ExpressionStatement[44995-45012]"
    }, {
      "left" : "if(layerWiseConfigurations.isBackward())",
      "right" : "if(layerWiseConfigurations.isBackward())",
      "info" : "IfStatement[45026-45109]:IfStatement[45032-45115]"
    }, {
      "left" : "doBackWard(getInput(),labels);",
      "right" : "doBackWard(getInput(),labels);",
      "info" : "ExpressionStatement[45079-45109]:ExpressionStatement[45085-45115]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45123-45132]:MarkerAnnotation[45129-45138]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45137-45143]:Modifier[45143-45149]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45144-45148]:PrimitiveType[45150-45154]"
    }, {
      "left" : "fit",
      "right" : "fit",
      "info" : "SimpleName[45149-45152]:SimpleName[45155-45158]"
    }, {
      "left" : "INDArray data",
      "right" : "INDArray data",
      "info" : "SingleVariableDeclaration[45153-45166]:SingleVariableDeclaration[45159-45172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45168-45199]:Block[45174-45205]"
    }, {
      "left" : "pretrain(data);",
      "right" : "pretrain(data);",
      "info" : "ExpressionStatement[45178-45193]:ExpressionStatement[45184-45199]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45205-45214]:MarkerAnnotation[45211-45220]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45219-45225]:Modifier[45225-45231]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45226-45230]:PrimitiveType[45232-45236]"
    }, {
      "left" : "iterate",
      "right" : "iterate",
      "info" : "SimpleName[45231-45238]:SimpleName[45237-45244]"
    }, {
      "left" : "INDArray input",
      "right" : "INDArray input",
      "info" : "SingleVariableDeclaration[45239-45253]:SingleVariableDeclaration[45245-45259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45255-45287]:Block[45261-45293]"
    }, {
      "left" : "pretrain(input);",
      "right" : "pretrain(input);",
      "info" : "ExpressionStatement[45265-45281]:ExpressionStatement[45271-45287]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45378-45387]:MarkerAnnotation[45384-45393]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45392-45398]:Modifier[45398-45404]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45399-45403]:PrimitiveType[45405-45409]"
    }, {
      "left" : "fit",
      "right" : "fit",
      "info" : "SimpleName[45404-45407]:SimpleName[45410-45413]"
    }, {
      "left" : "org.nd4j.linalg.dataset.api.DataSet data",
      "right" : "org.nd4j.linalg.dataset.api.DataSet data",
      "info" : "SingleVariableDeclaration[45408-45448]:SingleVariableDeclaration[45414-45454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45450-45513]:Block[45456-45519]"
    }, {
      "left" : "fit(data.getFeatureMatrix(), data.getLabels());",
      "right" : "fit(data.getFeatureMatrix(), data.getLabels());",
      "info" : "ExpressionStatement[45460-45507]:ExpressionStatement[45466-45513]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45721-45730]:MarkerAnnotation[45727-45736]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45735-45741]:Modifier[45741-45747]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45742-45746]:PrimitiveType[45748-45752]"
    }, {
      "left" : "fit",
      "right" : "fit",
      "info" : "SimpleName[45747-45750]:SimpleName[45753-45756]"
    }, {
      "left" : "INDArray examples",
      "right" : "INDArray examples",
      "info" : "SingleVariableDeclaration[45751-45768]:SingleVariableDeclaration[45757-45774]"
    }, {
      "left" : "int[] labels",
      "right" : "int[] labels",
      "info" : "SingleVariableDeclaration[45770-45782]:SingleVariableDeclaration[45776-45788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45784-45886]:Block[45790-45892]"
    }, {
      "left" : "fit(examples, FeatureUtil.toOutcomeMatrix(labels, getOutputLayer().conf().getNOut()));",
      "right" : "fit(examples, FeatureUtil.toOutcomeMatrix(labels, getOutputLayer().conf().getNOut()));",
      "info" : "ExpressionStatement[45794-45880]:ExpressionStatement[45800-45886]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46424-46430]:Modifier[46430-46436]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[46431-46439]:SimpleType[46437-46445]"
    }, {
      "left" : "output",
      "right" : "output",
      "info" : "SimpleName[46440-46446]:SimpleName[46446-46452]"
    }, {
      "left" : "INDArray x",
      "right" : "INDArray x",
      "info" : "SingleVariableDeclaration[46447-46457]:SingleVariableDeclaration[46453-46463]"
    }, {
      "left" : "boolean test",
      "right" : "boolean test",
      "info" : "SingleVariableDeclaration[46458-46470]:SingleVariableDeclaration[46464-46476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46472-46628]:Block[46478-46634]"
    }, {
      "left" : "List<INDArray> activations = feedForward(x,test);",
      "right" : "List<INDArray> activations = feedForward(x,test);",
      "info" : "VariableDeclarationStatement[46482-46531]:VariableDeclarationStatement[46488-46537]"
    }, {
      "left" : "return activations.get(activations.size() - 1);",
      "right" : "return activations.get(activations.size() - 1);",
      "info" : "ReturnStatement[46575-46622]:ReturnStatement[46581-46628]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46924-46930]:Modifier[46930-46936]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[46931-46939]:SimpleType[46937-46945]"
    }, {
      "left" : "output",
      "right" : "output",
      "info" : "SimpleName[46940-46946]:SimpleName[46946-46952]"
    }, {
      "left" : "INDArray x",
      "right" : "INDArray x",
      "info" : "SingleVariableDeclaration[46947-46957]:SingleVariableDeclaration[46953-46963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46959-46998]:Block[46965-47004]"
    }, {
      "left" : "return output(x,false);",
      "right" : "return output(x,false);",
      "info" : "ReturnStatement[46969-46992]:ReturnStatement[46975-46998]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47574-47580]:Modifier[47580-47586]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[47581-47589]:SimpleType[47587-47595]"
    }, {
      "left" : "reconstruct",
      "right" : "reconstruct",
      "info" : "SimpleName[47590-47601]:SimpleName[47596-47607]"
    }, {
      "left" : "INDArray x",
      "right" : "INDArray x",
      "info" : "SingleVariableDeclaration[47602-47612]:SingleVariableDeclaration[47608-47618]"
    }, {
      "left" : "int layerNum",
      "right" : "int layerNum",
      "info" : "SingleVariableDeclaration[47614-47626]:SingleVariableDeclaration[47620-47632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47628-47726]:Block[47634-47732]"
    }, {
      "left" : "List<INDArray> forward = feedForward(x);",
      "right" : "List<INDArray> forward = feedForward(x);",
      "info" : "VariableDeclarationStatement[47638-47678]:VariableDeclarationStatement[47644-47684]"
    }, {
      "left" : "return forward.get(layerNum - 1);",
      "right" : "return forward.get(layerNum - 1);",
      "info" : "ReturnStatement[47687-47720]:ReturnStatement[47693-47726]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47781-47787]:Modifier[47787-47793]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47788-47792]:PrimitiveType[47794-47798]"
    }, {
      "left" : "printConfiguration",
      "right" : "printConfiguration",
      "info" : "SimpleName[47793-47811]:SimpleName[47799-47817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47814-48084]:Block[47820-48090]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[47824-47863]:VariableDeclarationStatement[47830-47869]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[47872-47886]:VariableDeclarationStatement[47878-47892]"
    }, {
      "left" : "for (NeuralNetConfiguration conf : getLayerWiseConfigurations().getConfs())",
      "right" : "for (NeuralNetConfiguration conf : getLayerWiseConfigurations().getConfs())",
      "info" : "EnhancedForStatement[47895-48044]:EnhancedForStatement[47901-48050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47971-48044]:Block[47977-48050]"
    }, {
      "left" : "sb.append(\" Layer \" + count++ + \" conf \" + conf);",
      "right" : "sb.append(\" Layer \" + count++ + \" conf \" + conf);",
      "info" : "ExpressionStatement[47985-48034]:ExpressionStatement[47991-48040]"
    }, {
      "left" : "log.info(sb.toString());",
      "right" : "log.info(sb.toString());",
      "info" : "ExpressionStatement[48054-48078]:ExpressionStatement[48060-48084]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48336-48342]:Modifier[48342-48348]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48343-48347]:PrimitiveType[48349-48353]"
    }, {
      "left" : "update",
      "right" : "update",
      "info" : "SimpleName[48348-48354]:SimpleName[48354-48360]"
    }, {
      "left" : "MultiLayerNetwork network",
      "right" : "MultiLayerNetwork network",
      "info" : "SingleVariableDeclaration[48355-48380]:SingleVariableDeclaration[48361-48386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48382-48576]:Block[48388-48582]"
    }, {
      "left" : "this.defaultConfiguration = network.defaultConfiguration;",
      "right" : "this.defaultConfiguration = network.defaultConfiguration;",
      "info" : "ExpressionStatement[48392-48449]:ExpressionStatement[48398-48455]"
    }, {
      "left" : "this.input = network.input;",
      "right" : "this.input = network.input;",
      "info" : "ExpressionStatement[48458-48485]:ExpressionStatement[48464-48491]"
    }, {
      "left" : "this.labels = network.labels;",
      "right" : "this.labels = network.labels;",
      "info" : "ExpressionStatement[48494-48523]:ExpressionStatement[48500-48529]"
    }, {
      "left" : "this.layers = ArrayUtils.clone(network.layers);",
      "right" : "this.layers = ArrayUtils.clone(network.layers);",
      "info" : "ExpressionStatement[48523-48570]:ExpressionStatement[48529-48576]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48835-48844]:MarkerAnnotation[48841-48850]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48849-48855]:Modifier[48855-48861]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[48856-48862]:PrimitiveType[48862-48868]"
    }, {
      "left" : "score",
      "right" : "score",
      "info" : "SimpleName[48863-48868]:SimpleName[48869-48874]"
    }, {
      "left" : "INDArray input",
      "right" : "INDArray input",
      "info" : "SingleVariableDeclaration[48869-48883]:SingleVariableDeclaration[48875-48889]"
    }, {
      "left" : "INDArray labels",
      "right" : "INDArray labels",
      "info" : "SingleVariableDeclaration[48885-48900]:SingleVariableDeclaration[48891-48906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48902-49088]:Block[48908-49094]"
    }, {
      "left" : "feedForward(input);",
      "right" : "feedForward(input);",
      "info" : "ExpressionStatement[48912-48931]:ExpressionStatement[48918-48937]"
    }, {
      "left" : "setLabels(labels);",
      "right" : "setLabels(labels);",
      "info" : "ExpressionStatement[48940-48958]:ExpressionStatement[48946-48964]"
    }, {
      "left" : "Evaluation eval = new Evaluation();",
      "right" : "Evaluation eval = new Evaluation();",
      "info" : "VariableDeclarationStatement[48967-49002]:VariableDeclarationStatement[48973-49008]"
    }, {
      "left" : "eval.eval(labels, labelProbabilities(input));",
      "right" : "eval.eval(labels, labelProbabilities(input));",
      "info" : "ExpressionStatement[49011-49056]:ExpressionStatement[49017-49062]"
    }, {
      "left" : "return eval.f1();",
      "right" : "return eval.f1();",
      "info" : "ReturnStatement[49065-49082]:ReturnStatement[49071-49088]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49227-49236]:MarkerAnnotation[49233-49242]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49241-49247]:Modifier[49247-49253]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[49248-49251]:PrimitiveType[49254-49257]"
    }, {
      "left" : "numLabels",
      "right" : "numLabels",
      "info" : "SimpleName[49252-49261]:SimpleName[49258-49267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49264-49304]:Block[49270-49310]"
    }, {
      "left" : "return labels.columns();",
      "right" : "return labels.columns();",
      "info" : "ReturnStatement[49274-49298]:ReturnStatement[49280-49304]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49523-49529]:Modifier[49529-49535]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[49530-49536]:PrimitiveType[49536-49542]"
    }, {
      "left" : "score",
      "right" : "score",
      "info" : "SimpleName[49537-49542]:SimpleName[49543-49548]"
    }, {
      "left" : "DataSet data",
      "right" : "DataSet data",
      "info" : "SingleVariableDeclaration[49543-49555]:SingleVariableDeclaration[49549-49561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49557-49671]:Block[49563-49677]"
    }, {
      "left" : "feedForward(data.getFeatureMatrix());",
      "right" : "feedForward(data.getFeatureMatrix());",
      "info" : "ExpressionStatement[49567-49604]:ExpressionStatement[49573-49610]"
    }, {
      "left" : "setLabels(data.getLabels());",
      "right" : "setLabels(data.getLabels());",
      "info" : "ExpressionStatement[49613-49641]:ExpressionStatement[49619-49647]"
    }, {
      "left" : "return score();",
      "right" : "return score();",
      "info" : "ReturnStatement[49650-49665]:ReturnStatement[49656-49671]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49678-49687]:MarkerAnnotation[49684-49693]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49692-49698]:Modifier[49698-49704]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49699-49703]:PrimitiveType[49705-49709]"
    }, {
      "left" : "fit",
      "right" : "fit",
      "info" : "SimpleName[49704-49707]:SimpleName[49710-49713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49710-49745]:Block[49716-49751]"
    }, {
      "left" : "fit(input, labels);",
      "right" : "fit(input, labels);",
      "info" : "ExpressionStatement[49720-49739]:ExpressionStatement[49726-49745]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49751-49760]:MarkerAnnotation[49757-49766]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49765-49771]:Modifier[49771-49777]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49772-49776]:PrimitiveType[49778-49782]"
    }, {
      "left" : "update",
      "right" : "update",
      "info" : "SimpleName[49777-49783]:SimpleName[49783-49789]"
    }, {
      "left" : "INDArray gradient",
      "right" : "INDArray gradient",
      "info" : "SingleVariableDeclaration[49784-49801]:SingleVariableDeclaration[49790-49807]"
    }, {
      "left" : "String paramType",
      "right" : "String paramType",
      "info" : "SingleVariableDeclaration[49803-49819]:SingleVariableDeclaration[49809-49825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49821-49829]:Block[49827-49835]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49997-50006]:MarkerAnnotation[50003-50012]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50011-50017]:Modifier[50017-50023]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[50018-50024]:PrimitiveType[50024-50030]"
    }, {
      "left" : "score",
      "right" : "score",
      "info" : "SimpleName[50025-50030]:SimpleName[50031-50036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50033-50154]:Block[50039-50160]"
    }, {
      "left" : "if (getOutputLayer().input() == null)",
      "right" : "if (getOutputLayer().input() == null)",
      "info" : "IfStatement[50043-50107]:IfStatement[50049-50113]"
    }, {
      "left" : "feedForward();",
      "right" : "feedForward();",
      "info" : "ExpressionStatement[50093-50107]:ExpressionStatement[50099-50113]"
    }, {
      "left" : "return getOutputLayer().score();",
      "right" : "return getOutputLayer().score();",
      "info" : "ReturnStatement[50116-50148]:ReturnStatement[50122-50154]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[50160-50169]:MarkerAnnotation[50166-50175]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50174-50180]:Modifier[50180-50186]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50181-50185]:PrimitiveType[50187-50191]"
    }, {
      "left" : "setScore",
      "right" : "setScore",
      "info" : "SimpleName[50186-50194]:SimpleName[50192-50200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50197-50205]:Block[50203-50211]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[50211-50220]:MarkerAnnotation[50217-50226]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50225-50231]:Modifier[50231-50237]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50232-50236]:PrimitiveType[50238-50242]"
    }, {
      "left" : "accumulateScore",
      "right" : "accumulateScore",
      "info" : "SimpleName[50237-50252]:SimpleName[50243-50258]"
    }, {
      "left" : "double accum",
      "right" : "double accum",
      "info" : "SingleVariableDeclaration[50253-50265]:SingleVariableDeclaration[50259-50271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50267-50275]:Block[50273-50281]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50322-50328]:Modifier[50328-50334]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50329-50333]:PrimitiveType[50335-50339]"
    }, {
      "left" : "clear",
      "right" : "clear",
      "info" : "SimpleName[50334-50339]:SimpleName[50340-50345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50342-50434]:Block[50348-50440]"
    }, {
      "left" : "for(Layer layer : layers)\n            layer.clear();",
      "right" : "for(Layer layer : layers)\n            layer.clear();",
      "info" : "EnhancedForStatement[50352-50404]:EnhancedForStatement[50358-50410]"
    }, {
      "left" : "layer.clear();",
      "right" : "layer.clear();",
      "info" : "ExpressionStatement[50390-50404]:ExpressionStatement[50396-50410]"
    }, {
      "left" : "input = null;",
      "right" : "input = null;",
      "info" : "ExpressionStatement[50415-50428]:ExpressionStatement[50421-50434]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50645-50651]:Modifier[50651-50657]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[50652-50658]:PrimitiveType[50658-50664]"
    }, {
      "left" : "score",
      "right" : "score",
      "info" : "SimpleName[50659-50664]:SimpleName[50665-50670]"
    }, {
      "left" : "INDArray param",
      "right" : "INDArray param",
      "info" : "SingleVariableDeclaration[50665-50679]:SingleVariableDeclaration[50671-50685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50681-50986]:Block[50687-50992]"
    }, {
      "left" : "INDArray params = params();",
      "right" : "INDArray params = params();",
      "info" : "VariableDeclarationStatement[50691-50718]:VariableDeclarationStatement[50697-50724]"
    }, {
      "left" : "setParameters(param);",
      "right" : "setParameters(param);",
      "info" : "ExpressionStatement[50727-50748]:ExpressionStatement[50733-50754]"
    }, {
      "left" : "double ret = score();",
      "right" : "double ret = score();",
      "info" : "VariableDeclarationStatement[50757-50778]:VariableDeclarationStatement[50763-50784]"
    }, {
      "left" : "double regCost = 0.5f * defaultConfiguration.getL2() * (double) Transforms.pow(mask.mul(param), 2).sum(Integer.MAX_VALUE).element();",
      "right" : "double regCost = 0.5f * defaultConfiguration.getL2() * (double) Transforms.pow(mask.mul(param), 2).sum(Integer.MAX_VALUE).element();",
      "info" : "VariableDeclarationStatement[50787-50919]:VariableDeclarationStatement[50793-50925]"
    }, {
      "left" : "setParameters(params);",
      "right" : "setParameters(params);",
      "info" : "ExpressionStatement[50928-50950]:ExpressionStatement[50934-50956]"
    }, {
      "left" : "return ret + regCost;",
      "right" : "return ret + regCost;",
      "info" : "ReturnStatement[50959-50980]:ReturnStatement[50965-50986]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51524-51530]:Modifier[51530-51536]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51531-51535]:PrimitiveType[51537-51541]"
    }, {
      "left" : "merge",
      "right" : "merge",
      "info" : "SimpleName[51536-51541]:SimpleName[51542-51547]"
    }, {
      "left" : "MultiLayerNetwork network",
      "right" : "MultiLayerNetwork network",
      "info" : "SingleVariableDeclaration[51542-51567]:SingleVariableDeclaration[51548-51573]"
    }, {
      "left" : "int batchSize",
      "right" : "int batchSize",
      "info" : "SingleVariableDeclaration[51569-51582]:SingleVariableDeclaration[51575-51588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51584-52009]:Block[51590-52015]"
    }, {
      "left" : "if (network.layers.length != layers.length)",
      "right" : "if (network.layers.length != layers.length)",
      "info" : "IfStatement[51594-51742]:IfStatement[51600-51748]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unable to merge networks that are not of equal length\");",
      "right" : "throw new IllegalArgumentException(\"Unable to merge networks that are not of equal length\");",
      "info" : "ThrowStatement[51650-51742]:ThrowStatement[51656-51748]"
    }, {
      "left" : "for (int i = 0; i < getnLayers(); i++)",
      "right" : "for (int i = 0; i < getnLayers(); i++)",
      "info" : "ForStatement[51751-51933]:ForStatement[51757-51939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51790-51933]:Block[51796-51939]"
    }, {
      "left" : "Layer n = layers[i];",
      "right" : "Layer n = layers[i];",
      "info" : "VariableDeclarationStatement[51804-51824]:VariableDeclarationStatement[51810-51830]"
    }, {
      "left" : "Layer otherNetwork = network.layers[i];",
      "right" : "Layer otherNetwork = network.layers[i];",
      "info" : "VariableDeclarationStatement[51837-51876]:VariableDeclarationStatement[51843-51882]"
    }, {
      "left" : "n.merge(otherNetwork, batchSize);",
      "right" : "n.merge(otherNetwork, batchSize);",
      "info" : "ExpressionStatement[51889-51922]:ExpressionStatement[51895-51928]"
    }, {
      "left" : "getOutputLayer().merge(network.getOutputLayer(), batchSize);",
      "right" : "getOutputLayer().merge(network.getOutputLayer(), batchSize);",
      "info" : "ExpressionStatement[51943-52003]:ExpressionStatement[51949-52009]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52188-52194]:Modifier[52194-52200]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52195-52199]:PrimitiveType[52201-52205]"
    }, {
      "left" : "setInput",
      "right" : "setInput",
      "info" : "SimpleName[52200-52208]:SimpleName[52206-52214]"
    }, {
      "left" : "INDArray input",
      "right" : "INDArray input",
      "info" : "SingleVariableDeclaration[52209-52223]:SingleVariableDeclaration[52215-52229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52225-52594]:Block[52231-52600]"
    }, {
      "left" : "if(getLayerWiseConfigurations().getInputPreProcess(0) != null)",
      "right" : "if(getLayerWiseConfigurations().getInputPreProcess(0) != null)",
      "info" : "IfStatement[52235-52438]:IfStatement[52241-52444]"
    }, {
      "left" : "this.input = this.layerWiseConfigurations.getInputPreProcess(0).preProcess(input);",
      "right" : "this.input = this.layerWiseConfigurations.getInputPreProcess(0).preProcess(input);",
      "info" : "ExpressionStatement[52310-52392]:ExpressionStatement[52316-52398]"
    }, {
      "left" : "this.input =  input;",
      "right" : "this.input =  input;",
      "info" : "ExpressionStatement[52418-52438]:ExpressionStatement[52424-52444]"
    }, {
      "left" : "if ( this.layers == null)",
      "right" : "if ( this.layers == null)",
      "info" : "IfStatement[52447-52587]:IfStatement[52453-52593]"
    }, {
      "left" : "this.initializeLayers(getInput());",
      "right" : "this.initializeLayers(getInput());",
      "info" : "ExpressionStatement[52485-52519]:ExpressionStatement[52491-52525]"
    }, {
      "left" : "if(this.input == null)",
      "right" : "if(this.input == null)",
      "info" : "IfStatement[52533-52587]:IfStatement[52539-52593]"
    }, {
      "left" : "this.input = input;",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[52568-52587]:ExpressionStatement[52574-52593]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52600-52607]:Modifier[52606-52613]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52608-52612]:PrimitiveType[52614-52618]"
    }, {
      "left" : "initMask",
      "right" : "initMask",
      "info" : "SimpleName[52613-52621]:SimpleName[52619-52627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52624-52679]:Block[52630-52685]"
    }, {
      "left" : "setMask(Nd4j.ones(1, pack().length()));",
      "right" : "setMask(Nd4j.ones(1, pack().length()));",
      "info" : "ExpressionStatement[52634-52673]:ExpressionStatement[52640-52679]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52753-52759]:Modifier[52759-52765]"
    }, {
      "left" : "Layer",
      "right" : "Layer",
      "info" : "SimpleType[52760-52765]:SimpleType[52766-52771]"
    }, {
      "left" : "getOutputLayer",
      "right" : "getOutputLayer",
      "info" : "SimpleName[52766-52780]:SimpleName[52772-52786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52783-52842]:Block[52789-52848]"
    }, {
      "left" : "return getLayers()[getLayers().length - 1];",
      "right" : "return getLayers()[getLayers().length - 1];",
      "info" : "ReturnStatement[52793-52836]:ReturnStatement[52799-52842]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53087-53093]:Modifier[53093-53099]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53094-53098]:PrimitiveType[53100-53104]"
    }, {
      "left" : "setParameters",
      "right" : "setParameters",
      "info" : "SimpleName[53099-53112]:SimpleName[53105-53118]"
    }, {
      "left" : "INDArray params",
      "right" : "INDArray params",
      "info" : "SingleVariableDeclaration[53113-53128]:SingleVariableDeclaration[53119-53134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53130-53595]:Block[53136-53601]"
    }, {
      "left" : "int idx = 0;",
      "right" : "int idx = 0;",
      "info" : "VariableDeclarationStatement[53140-53152]:VariableDeclarationStatement[53146-53158]"
    }, {
      "left" : "for (int i = 0; i < getLayers().length; i++)",
      "right" : "for (int i = 0; i < getLayers().length; i++)",
      "info" : "ForStatement[53161-53588]:ForStatement[53167-53594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53206-53588]:Block[53212-53594]"
    }, {
      "left" : "Layer layer = getLayers()[i];",
      "right" : "Layer layer = getLayers()[i];",
      "info" : "VariableDeclarationStatement[53220-53249]:VariableDeclarationStatement[53226-53255]"
    }, {
      "left" : "int range = layer.numParams();",
      "right" : "int range = layer.numParams();",
      "info" : "VariableDeclarationStatement[53263-53293]:VariableDeclarationStatement[53269-53299]"
    }, {
      "left" : "INDArray get = params.get(NDArrayIndex.interval(idx, range + idx));",
      "right" : "INDArray get = params.get(NDArrayIndex.interval(idx, range + idx));",
      "info" : "VariableDeclarationStatement[53306-53373]:VariableDeclarationStatement[53312-53379]"
    }, {
      "left" : "if(get.length() < 1)",
      "right" : "if(get.length() < 1)",
      "info" : "IfStatement[53386-53514]:IfStatement[53392-53520]"
    }, {
      "left" : "throw new IllegalStateException(\"Unable to retrieve layer. No params found (length was 0\");",
      "right" : "throw new IllegalStateException(\"Unable to retrieve layer. No params found (length was 0\");",
      "info" : "ThrowStatement[53423-53514]:ThrowStatement[53429-53520]"
    }, {
      "left" : "layer.setParams(get);",
      "right" : "layer.setParams(get);",
      "info" : "ExpressionStatement[53527-53548]:ExpressionStatement[53533-53554]"
    }, {
      "left" : "idx += range - 1;",
      "right" : "idx += range - 1;",
      "info" : "ExpressionStatement[53561-53578]:ExpressionStatement[53567-53584]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53761-53767]:Modifier[53767-53773]"
    }, {
      "left" : "List<INDArray>",
      "right" : "List<INDArray>",
      "info" : "ParameterizedType[53768-53782]:ParameterizedType[53774-53788]"
    }, {
      "left" : "feedForwardR",
      "right" : "feedForwardR",
      "info" : "SimpleName[53783-53795]:SimpleName[53789-53801]"
    }, {
      "left" : "List<INDArray> acts",
      "right" : "List<INDArray> acts",
      "info" : "SingleVariableDeclaration[53796-53815]:SingleVariableDeclaration[53802-53821]"
    }, {
      "left" : "INDArray v",
      "right" : "INDArray v",
      "info" : "SingleVariableDeclaration[53817-53827]:SingleVariableDeclaration[53823-53833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53829-54591]:Block[53835-54597]"
    }, {
      "left" : "List<INDArray> R = new ArrayList<>();",
      "right" : "List<INDArray> R = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[53839-53876]:VariableDeclarationStatement[53845-53882]"
    }, {
      "left" : "R.add(Nd4j.zeros(input.slices(), input.columns()));",
      "right" : "R.add(Nd4j.zeros(input.slices(), input.columns()));",
      "info" : "ExpressionStatement[53885-53936]:ExpressionStatement[53891-53942]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>> vWvB = unPack(v);",
      "right" : "List<Pair<INDArray, INDArray>> vWvB = unPack(v);",
      "info" : "VariableDeclarationStatement[53945-53993]:VariableDeclarationStatement[53951-53999]"
    }, {
      "left" : "List<INDArray> W = MultiLayerUtil.weightMatrices(this);",
      "right" : "List<INDArray> W = MultiLayerUtil.weightMatrices(this);",
      "info" : "VariableDeclarationStatement[54002-54057]:VariableDeclarationStatement[54008-54063]"
    }, {
      "left" : "for (int i = 0; i < layers.length; i++)",
      "right" : "for (int i = 0; i < layers.length; i++)",
      "info" : "ForStatement[54067-54566]:ForStatement[54073-54572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54107-54566]:Block[54113-54572]"
    }, {
      "left" : "String derivative = getLayers()[i].conf().getActivationFunction();",
      "right" : "String derivative = getLayers()[i].conf().getActivationFunction();",
      "info" : "VariableDeclarationStatement[54121-54187]:VariableDeclarationStatement[54127-54193]"
    }, {
      "left" : "R.add(R.get(i).mmul(W.get(i)).addi(acts.get(i)\n                    .mmul(vWvB.get(i).getFirst().addiRowVector(vWvB.get(i).getSecond())))\n                    .muli((Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(derivative, acts.get(i + 1)).derivative()))));",
      "right" : "R.add(R.get(i).mmul(W.get(i)).addi(acts.get(i)\n                    .mmul(vWvB.get(i).getFirst().addiRowVector(vWvB.get(i).getSecond())))\n                    .muli((Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(derivative, acts.get(i + 1)).derivative()))));",
      "info" : "ExpressionStatement[54274-54556]:ExpressionStatement[54280-54562]"
    }, {
      "left" : "return R;",
      "right" : "return R;",
      "info" : "ReturnStatement[54576-54585]:ReturnStatement[54582-54591]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54757-54763]:Modifier[54763-54769]"
    }, {
      "left" : "List<INDArray>",
      "right" : "List<INDArray>",
      "info" : "ParameterizedType[54764-54778]:ParameterizedType[54770-54784]"
    }, {
      "left" : "feedForwardR",
      "right" : "feedForwardR",
      "info" : "SimpleName[54779-54791]:SimpleName[54785-54797]"
    }, {
      "left" : "INDArray v",
      "right" : "INDArray v",
      "info" : "SingleVariableDeclaration[54792-54802]:SingleVariableDeclaration[54798-54808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54804-54858]:Block[54810-54864]"
    }, {
      "left" : "return feedForwardR(feedForward(), v);",
      "right" : "return feedForwardR(feedForward(), v);",
      "info" : "ReturnStatement[54814-54852]:ReturnStatement[54820-54858]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[55231-55240]:Modifier[55237-55246]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>>",
      "right" : "List<Pair<INDArray, INDArray>>",
      "info" : "ParameterizedType[55241-55271]:ParameterizedType[55247-55277]"
    }, {
      "left" : "backPropGradientR",
      "right" : "backPropGradientR",
      "info" : "SimpleName[55272-55289]:SimpleName[55278-55295]"
    }, {
      "left" : "INDArray v",
      "right" : "INDArray v",
      "info" : "SingleVariableDeclaration[55290-55300]:SingleVariableDeclaration[55296-55306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55302-56564]:Block[55308-56570]"
    }, {
      "left" : "if (mask == null)",
      "right" : "if (mask == null)",
      "info" : "IfStatement[55428-55469]:IfStatement[55434-55475]"
    }, {
      "left" : "initMask();",
      "right" : "initMask();",
      "info" : "ExpressionStatement[55458-55469]:ExpressionStatement[55464-55475]"
    }, {
      "left" : "List<INDArray> deltas = computeDeltasR(v);",
      "right" : "List<INDArray> deltas = computeDeltasR(v);",
      "info" : "VariableDeclarationStatement[55506-55548]:VariableDeclarationStatement[55512-55554]"
    }, {
      "left" : "List<Pair<INDArray, INDArray>> list = new ArrayList<>();",
      "right" : "List<Pair<INDArray, INDArray>> list = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[55621-55677]:VariableDeclarationStatement[55627-55683]"
    }, {
      "left" : "for (int l = 0; l < getnLayers(); l++)",
      "right" : "for (int l = 0; l < getnLayers(); l++)",
      "info" : "ForStatement[55687-56365]:ForStatement[55693-56371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55726-56365]:Block[55732-56371]"
    }, {
      "left" : "INDArray gradientChange = deltas.get(l);",
      "right" : "INDArray gradientChange = deltas.get(l);",
      "info" : "VariableDeclarationStatement[55740-55780]:VariableDeclarationStatement[55746-55786]"
    }, {
      "left" : "if (gradientChange.length() != getLayers()[l].getParam(DefaultParamInitializer.WEIGHT_KEY).length())",
      "right" : "if (gradientChange.length() != getLayers()[l].getParam(DefaultParamInitializer.WEIGHT_KEY).length())",
      "info" : "IfStatement[55794-55989]:IfStatement[55800-55995]"
    }, {
      "left" : "throw new IllegalStateException(\"Gradient change not equal to weight change\");",
      "right" : "throw new IllegalStateException(\"Gradient change not equal to weight change\");",
      "info" : "ThrowStatement[55911-55989]:ThrowStatement[55917-55995]"
    }, {
      "left" : "INDArray deltaColumnSums = deltas.get(l).mean(0);",
      "right" : "INDArray deltaColumnSums = deltas.get(l).mean(0);",
      "info" : "VariableDeclarationStatement[56037-56086]:VariableDeclarationStatement[56043-56092]"
    }, {
      "left" : "if (deltaColumnSums.length() != layers[l].getParam(DefaultParamInitializer.BIAS_KEY).length())",
      "right" : "if (deltaColumnSums.length() != layers[l].getParam(DefaultParamInitializer.BIAS_KEY).length())",
      "info" : "IfStatement[56099-56284]:IfStatement[56105-56290]"
    }, {
      "left" : "throw new IllegalStateException(\"Bias change not equal to weight change\");",
      "right" : "throw new IllegalStateException(\"Bias change not equal to weight change\");",
      "info" : "ThrowStatement[56210-56284]:ThrowStatement[56216-56290]"
    }, {
      "left" : "list.add(new Pair<>(gradientChange, deltaColumnSums));",
      "right" : "list.add(new Pair<>(gradientChange, deltaColumnSums));",
      "info" : "ExpressionStatement[56299-56353]:ExpressionStatement[56305-56359]"
    }, {
      "left" : "INDArray pack = pack(list).addi(mask.mul(defaultConfiguration.getL2())\n                .muli(v)).addi(v.mul(layerWiseConfigurations.getDampingFactor()));",
      "right" : "INDArray pack = pack(list).addi(mask.mul(defaultConfiguration.getL2())\n                .muli(v)).addi(v.mul(layerWiseConfigurations.getDampingFactor()));",
      "info" : "VariableDeclarationStatement[56375-56528]:VariableDeclarationStatement[56381-56534]"
    }, {
      "left" : "return unPack(pack);",
      "right" : "return unPack(pack);",
      "info" : "ReturnStatement[56537-56557]:ReturnStatement[56543-56563]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56571-56577]:Modifier[56577-56583]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[56578-56586]:SimpleType[56584-56592]"
    }, {
      "left" : "getLabels",
      "right" : "getLabels",
      "info" : "SimpleName[56587-56596]:SimpleName[56593-56602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56599-56629]:Block[56605-56635]"
    }, {
      "left" : "return labels;",
      "right" : "return labels;",
      "info" : "ReturnStatement[56609-56623]:ReturnStatement[56615-56629]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56635-56641]:Modifier[56641-56647]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[56642-56650]:SimpleType[56648-56656]"
    }, {
      "left" : "getInput",
      "right" : "getInput",
      "info" : "SimpleName[56651-56659]:SimpleName[56657-56665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56662-56691]:Block[56668-56697]"
    }, {
      "left" : "return input;",
      "right" : "return input;",
      "info" : "ReturnStatement[56672-56685]:ReturnStatement[56678-56691]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56700-56706]:Modifier[56706-56712]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56707-56711]:PrimitiveType[56713-56717]"
    }, {
      "left" : "setLabels",
      "right" : "setLabels",
      "info" : "SimpleName[56712-56721]:SimpleName[56718-56727]"
    }, {
      "left" : "INDArray labels",
      "right" : "INDArray labels",
      "info" : "SingleVariableDeclaration[56722-56737]:SingleVariableDeclaration[56728-56743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56739-56776]:Block[56745-56782]"
    }, {
      "left" : "this.labels = labels;",
      "right" : "this.labels = labels;",
      "info" : "ExpressionStatement[56749-56770]:ExpressionStatement[56755-56776]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56896-56902]:Modifier[56902-56908]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[56903-56906]:PrimitiveType[56909-56912]"
    }, {
      "left" : "getnLayers",
      "right" : "getnLayers",
      "info" : "SimpleName[56907-56917]:SimpleName[56913-56923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56920-56985]:Block[56926-56991]"
    }, {
      "left" : "return layerWiseConfigurations.getConfs().size();",
      "right" : "return layerWiseConfigurations.getConfs().size();",
      "info" : "ReturnStatement[56930-56979]:ReturnStatement[56936-56985]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56991-56997]:Modifier[56997-57003]"
    }, {
      "left" : "Layer[]",
      "right" : "Layer[]",
      "info" : "ArrayType[56998-57005]:ArrayType[57004-57011]"
    }, {
      "left" : "getLayers",
      "right" : "getLayers",
      "info" : "SimpleName[57006-57015]:SimpleName[57012-57021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57018-57048]:Block[57024-57054]"
    }, {
      "left" : "return layers;",
      "right" : "return layers;",
      "info" : "ReturnStatement[57028-57042]:ReturnStatement[57034-57048]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57054-57060]:Modifier[57060-57066]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57061-57065]:PrimitiveType[57067-57071]"
    }, {
      "left" : "setLayers",
      "right" : "setLayers",
      "info" : "SimpleName[57066-57075]:SimpleName[57072-57081]"
    }, {
      "left" : "Layer[] layers",
      "right" : "Layer[] layers",
      "info" : "SingleVariableDeclaration[57076-57090]:SingleVariableDeclaration[57082-57096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57092-57129]:Block[57098-57135]"
    }, {
      "left" : "this.layers = layers;",
      "right" : "this.layers = layers;",
      "info" : "ExpressionStatement[57102-57123]:ExpressionStatement[57108-57129]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57135-57141]:Modifier[57141-57147]"
    }, {
      "left" : "INDArray",
      "right" : "INDArray",
      "info" : "SimpleType[57142-57150]:SimpleType[57148-57156]"
    }, {
      "left" : "getMask",
      "right" : "getMask",
      "info" : "SimpleName[57151-57158]:SimpleName[57157-57164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57161-57189]:Block[57167-57195]"
    }, {
      "left" : "return mask;",
      "right" : "return mask;",
      "info" : "ReturnStatement[57171-57183]:ReturnStatement[57177-57189]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57195-57201]:Modifier[57201-57207]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57202-57206]:PrimitiveType[57208-57212]"
    }, {
      "left" : "setMask",
      "right" : "setMask",
      "info" : "SimpleName[57207-57214]:SimpleName[57213-57220]"
    }, {
      "left" : "INDArray mask",
      "right" : "INDArray mask",
      "info" : "SingleVariableDeclaration[57215-57228]:SingleVariableDeclaration[57221-57234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57230-57263]:Block[57236-57269]"
    }, {
      "left" : "this.mask = mask;",
      "right" : "this.mask = mask;",
      "info" : "ExpressionStatement[57240-57257]:ExpressionStatement[57246-57263]"
    } ]
  },
  "interFileMappings" : { }
}