{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ReportGenerator",
      "right" : "ReportGenerator",
      "info" : "TypeDeclaration[1392-7680]:TypeDeclaration[1401-7689]"
    }, {
      "left" : "private static final int TAB_WIDTH = 4;",
      "right" : "private static final int TAB_WIDTH = 4;",
      "info" : "FieldDeclaration[1736-1775]:FieldDeclaration[1745-1784]"
    }, {
      "left" : "private final String title;",
      "right" : "private final String title;",
      "info" : "FieldDeclaration[1785-1812]:FieldDeclaration[1794-1821]"
    }, {
      "left" : "private final File executionDataFile;",
      "right" : "private final File executionDataFile;",
      "info" : "FieldDeclaration[1822-1859]:FieldDeclaration[1831-1868]"
    }, {
      "left" : "private final ExecFileLoader execFileLoader;",
      "right" : "private final ExecFileLoader execFileLoader;",
      "info" : "FieldDeclaration[1868-1912]:FieldDeclaration[1877-1921]"
    }, {
      "left" : "private final String classesPath;",
      "right" : "private final String classesPath;",
      "info" : "FieldDeclaration[1921-1954]:FieldDeclaration[1930-1963]"
    }, {
      "left" : "private final String sourcesPath;",
      "right" : "private final String sourcesPath;",
      "info" : "FieldDeclaration[1963-1996]:FieldDeclaration[1972-2005]"
    }, {
      "left" : "private final File reportDirectory;",
      "right" : "private final File reportDirectory;",
      "info" : "FieldDeclaration[2005-2040]:FieldDeclaration[2014-2049]"
    }, {
      "left" : "private final String reportFormat;",
      "right" : "private final String reportFormat;",
      "info" : "FieldDeclaration[2049-2083]:FieldDeclaration[2058-2092]"
    }, {
      "left" : "public ReportGenerator()",
      "right" : "public ReportGenerator()",
      "info" : "MethodDeclaration[2093-2847]:MethodDeclaration[2102-2856]"
    }, {
      "left" : "public void create() throws IOException",
      "right" : "public void create() throws IOException",
      "info" : "MethodDeclaration[2857-3725]:MethodDeclaration[2866-3734]"
    }, {
      "left" : "private void createReport(final IBundleCoverage bundleCoverage)\n                        throws IOException",
      "right" : "private void createReport(final IBundleCoverage bundleCoverage)\n                        throws IOException",
      "info" : "MethodDeclaration[3735-5960]:MethodDeclaration[3744-5969]"
    }, {
      "left" : "private void loadExecutionData() throws IOException",
      "right" : "private void loadExecutionData() throws IOException",
      "info" : "MethodDeclaration[5970-6140]:MethodDeclaration[5979-6149]"
    }, {
      "left" : "private IBundleCoverage analyzeStructure() throws IOException",
      "right" : "private IBundleCoverage analyzeStructure() throws IOException",
      "info" : "MethodDeclaration[6150-6687]:MethodDeclaration[6159-6696]"
    }, {
      "left" : "private ISourceFileLocator createSourceFileLocator()",
      "right" : "private ISourceFileLocator createSourceFileLocator()",
      "info" : "MethodDeclaration[6697-7180]:MethodDeclaration[6706-7189]"
    }, {
      "left" : "public static void main(final String[] args) throws IOException",
      "right" : "public static void main(final String[] args) throws IOException",
      "info" : "MethodDeclaration[7190-7677]:MethodDeclaration[7199-7686]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2205-2847]:Block[2214-2856]"
    }, {
      "left" : "String jacocoOutputDir = System.getProperty(\"jacoco.output.dir\");",
      "right" : "String jacocoOutputDir = System.getProperty(\"jacoco.output.dir\");",
      "info" : "VariableDeclarationStatement[2223-2288]:VariableDeclarationStatement[2232-2297]"
    }, {
      "left" : "this.title = \"Code-Coverage Analysis\";",
      "right" : "this.title = \"Code-Coverage Analysis\";",
      "info" : "ExpressionStatement[2305-2343]:ExpressionStatement[2314-2352]"
    }, {
      "left" : "this.executionDataFile = new File(\n                    jacocoOutputDir, System.getProperty(\"jacoco.exec.data.file\"));",
      "right" : "this.executionDataFile = new File(\n                    jacocoOutputDir, System.getProperty(\"jacoco.exec.data.file\"));",
      "info" : "ExpressionStatement[2360-2477]:ExpressionStatement[2369-2486]"
    }, {
      "left" : "this.execFileLoader = new ExecFileLoader();",
      "right" : "this.execFileLoader = new ExecFileLoader();",
      "info" : "ExpressionStatement[2494-2537]:ExpressionStatement[2503-2546]"
    }, {
      "left" : "this.classesPath = System.getProperty(\"classes.dir\");",
      "right" : "this.classesPath = System.getProperty(\"classes.dir\");",
      "info" : "ExpressionStatement[2554-2607]:ExpressionStatement[2563-2616]"
    }, {
      "left" : "this.sourcesPath = System.getProperty(\"src.dir\");",
      "right" : "this.sourcesPath = System.getProperty(\"src.dir\");",
      "info" : "ExpressionStatement[2624-2673]:ExpressionStatement[2633-2682]"
    }, {
      "left" : "this.reportDirectory = new File(jacocoOutputDir, \"code-coverage\");",
      "right" : "this.reportDirectory = new File(jacocoOutputDir, \"code-coverage\");",
      "info" : "ExpressionStatement[2690-2756]:ExpressionStatement[2699-2765]"
    }, {
      "left" : "this.reportFormat = System.getProperty(\"jacoco.format\", \"html\");",
      "right" : "this.reportFormat = System.getProperty(\"jacoco.format\", \"html\");",
      "info" : "ExpressionStatement[2773-2837]:ExpressionStatement[2782-2846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2993-3725]:Block[3002-3734]"
    }, {
      "left" : "loadExecutionData();",
      "right" : "loadExecutionData();",
      "info" : "ExpressionStatement[3127-3147]:ExpressionStatement[3136-3156]"
    }, {
      "left" : "final IBundleCoverage bundleCoverage = analyzeStructure();",
      "right" : "final IBundleCoverage bundleCoverage = analyzeStructure();",
      "info" : "VariableDeclarationStatement[3609-3667]:VariableDeclarationStatement[3618-3676]"
    }, {
      "left" : "createReport(bundleCoverage);",
      "right" : "createReport(bundleCoverage);",
      "info" : "ExpressionStatement[3685-3714]:ExpressionStatement[3694-3723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3842-5960]:Block[3851-5969]"
    }, {
      "left" : "IReportVisitor visitor;",
      "right" : "IReportVisitor visitor;",
      "info" : "VariableDeclarationStatement[4003-4026]:VariableDeclarationStatement[4012-4035]"
    }, {
      "left" : "switch (reportFormat) {\n                    case \"csv\":\n                        reportDirectory.mkdirs();\n                        CSVFormatter csvFormatter = new CSVFormatter();\n                        visitor = csvFormatter.createVisitor(\n                            new FileOutputStream(new File(reportDirectory, \"coverage.csv\")));\n                        break;\n\n                    case \"html\":\n                        HTMLFormatter htmlFormatter = new HTMLFormatter();\n                        visitor = htmlFormatter.createVisitor(\n                            new FileMultiReportOutput(reportDirectory));\n                        break;\n\n                    case \"xml\":\n                        reportDirectory.mkdirs();\n                        XMLFormatter xmlFormatter = new XMLFormatter();\n                        visitor = xmlFormatter.createVisitor(\n                            new FileOutputStream(new File(reportDirectory, \"coverage.xml\")));\n                        break;\n\n                    default:\n                        throw new RuntimeException(\"Unable to parse format: \" + reportFormat);\n                }",
      "right" : "switch (reportFormat) {\n                    case \"csv\":\n                        reportDirectory.mkdirs();\n                        CSVFormatter csvFormatter = new CSVFormatter();\n                        visitor = csvFormatter.createVisitor(\n                            new FileOutputStream(new File(reportDirectory, \"coverage.csv\")));\n                        break;\n\n                    case \"html\":\n                        HTMLFormatter htmlFormatter = new HTMLFormatter();\n                        visitor = htmlFormatter.createVisitor(\n                            new FileMultiReportOutput(reportDirectory));\n                        break;\n\n                    case \"xml\":\n                        reportDirectory.mkdirs();\n                        XMLFormatter xmlFormatter = new XMLFormatter();\n                        visitor = xmlFormatter.createVisitor(\n                            new FileOutputStream(new File(reportDirectory, \"coverage.xml\")));\n                        break;\n\n                    default:\n                        throw new RuntimeException(\"Unable to parse format: \" + reportFormat);\n                }",
      "info" : "SwitchStatement[4043-5168]:SwitchStatement[4052-5177]"
    }, {
      "left" : "case \"csv\":",
      "right" : "case \"csv\":",
      "info" : "SwitchCase[4087-4098]:SwitchCase[4096-4107]"
    }, {
      "left" : "reportDirectory.mkdirs();",
      "right" : "reportDirectory.mkdirs();",
      "info" : "ExpressionStatement[4123-4148]:ExpressionStatement[4132-4157]"
    }, {
      "left" : "CSVFormatter csvFormatter = new CSVFormatter();",
      "right" : "CSVFormatter csvFormatter = new CSVFormatter();",
      "info" : "VariableDeclarationStatement[4173-4220]:VariableDeclarationStatement[4182-4229]"
    }, {
      "left" : "visitor = csvFormatter.createVisitor(\n                            new FileOutputStream(new File(reportDirectory, \"coverage.csv\")));",
      "right" : "visitor = csvFormatter.createVisitor(\n                            new FileOutputStream(new File(reportDirectory, \"coverage.csv\")));",
      "info" : "ExpressionStatement[4245-4376]:ExpressionStatement[4254-4385]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4401-4407]:BreakStatement[4410-4416]"
    }, {
      "left" : "case \"html\":",
      "right" : "case \"html\":",
      "info" : "SwitchCase[4429-4441]:SwitchCase[4438-4450]"
    }, {
      "left" : "HTMLFormatter htmlFormatter = new HTMLFormatter();",
      "right" : "HTMLFormatter htmlFormatter = new HTMLFormatter();",
      "info" : "VariableDeclarationStatement[4466-4516]:VariableDeclarationStatement[4475-4525]"
    }, {
      "left" : "visitor = htmlFormatter.createVisitor(\n                            new FileMultiReportOutput(reportDirectory));",
      "right" : "visitor = htmlFormatter.createVisitor(\n                            new FileMultiReportOutput(reportDirectory));",
      "info" : "ExpressionStatement[4541-4652]:ExpressionStatement[4550-4661]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4677-4683]:BreakStatement[4686-4692]"
    }, {
      "left" : "case \"xml\":",
      "right" : "case \"xml\":",
      "info" : "SwitchCase[4705-4716]:SwitchCase[4714-4725]"
    }, {
      "left" : "reportDirectory.mkdirs();",
      "right" : "reportDirectory.mkdirs();",
      "info" : "ExpressionStatement[4741-4766]:ExpressionStatement[4750-4775]"
    }, {
      "left" : "XMLFormatter xmlFormatter = new XMLFormatter();",
      "right" : "XMLFormatter xmlFormatter = new XMLFormatter();",
      "info" : "VariableDeclarationStatement[4791-4838]:VariableDeclarationStatement[4800-4847]"
    }, {
      "left" : "visitor = xmlFormatter.createVisitor(\n                            new FileOutputStream(new File(reportDirectory, \"coverage.xml\")));",
      "right" : "visitor = xmlFormatter.createVisitor(\n                            new FileOutputStream(new File(reportDirectory, \"coverage.xml\")));",
      "info" : "ExpressionStatement[4863-4994]:ExpressionStatement[4872-5003]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5019-5025]:BreakStatement[5028-5034]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[5047-5055]:SwitchCase[5056-5064]"
    }, {
      "left" : "throw new RuntimeException(\"Unable to parse format: \" + reportFormat);",
      "right" : "throw new RuntimeException(\"Unable to parse format: \" + reportFormat);",
      "info" : "ThrowStatement[5080-5150]:ThrowStatement[5089-5159]"
    }, {
      "left" : "visitor.visitInfo(execFileLoader.getSessionInfoStore().getInfos(),\n                                execFileLoader.getExecutionDataStore().getContents());",
      "right" : "visitor.visitInfo(execFileLoader.getSessionInfoStore().getInfos(),\n                                execFileLoader.getExecutionDataStore().getContents());",
      "info" : "ExpressionStatement[5402-5555]:ExpressionStatement[5411-5564]"
    }, {
      "left" : "visitor.visitBundle(bundleCoverage, createSourceFileLocator());",
      "right" : "visitor.visitBundle(bundleCoverage, createSourceFileLocator());",
      "info" : "ExpressionStatement[5730-5793]:ExpressionStatement[5739-5802]"
    }, {
      "left" : "visitor.visitEnd();",
      "right" : "visitor.visitEnd();",
      "info" : "ExpressionStatement[5930-5949]:ExpressionStatement[5939-5958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6022-6140]:Block[6031-6149]"
    }, {
      "left" : "executionDataFile.createNewFile();",
      "right" : "executionDataFile.createNewFile();",
      "info" : "ExpressionStatement[6040-6074]:ExpressionStatement[6049-6083]"
    }, {
      "left" : "execFileLoader.load(executionDataFile);",
      "right" : "execFileLoader.load(executionDataFile);",
      "info" : "ExpressionStatement[6091-6130]:ExpressionStatement[6100-6139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6212-6687]:Block[6221-6696]"
    }, {
      "left" : "final CoverageBuilder coverageBuilder = new CoverageBuilder();",
      "right" : "final CoverageBuilder coverageBuilder = new CoverageBuilder();",
      "info" : "VariableDeclarationStatement[6230-6292]:VariableDeclarationStatement[6239-6301]"
    }, {
      "left" : "final Analyzer analyzer = new Analyzer(\n                    execFileLoader.getExecutionDataStore(), coverageBuilder);",
      "right" : "final Analyzer analyzer = new Analyzer(\n                    execFileLoader.getExecutionDataStore(), coverageBuilder);",
      "info" : "VariableDeclarationStatement[6309-6426]:VariableDeclarationStatement[6318-6435]"
    }, {
      "left" : "String[] jarsPath = classesPath.split(\":\");",
      "right" : "String[] jarsPath = classesPath.split(\":\");",
      "info" : "VariableDeclarationStatement[6444-6487]:VariableDeclarationStatement[6453-6496]"
    }, {
      "left" : "for (String jarPath : jarsPath)",
      "right" : "for (String jarPath : jarsPath)",
      "info" : "EnhancedForStatement[6504-6619]:EnhancedForStatement[6513-6628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6536-6619]:Block[6545-6628]"
    }, {
      "left" : "analyzer.analyzeAll(new File(jarPath));",
      "right" : "analyzer.analyzeAll(new File(jarPath));",
      "info" : "ExpressionStatement[6562-6601]:ExpressionStatement[6571-6610]"
    }, {
      "left" : "return coverageBuilder.getBundle(title);",
      "right" : "return coverageBuilder.getBundle(title);",
      "info" : "ReturnStatement[6637-6677]:ReturnStatement[6646-6686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6750-7180]:Block[6759-7189]"
    }, {
      "left" : "final MultiSourceFileLocator result = new MultiSourceFileLocator(TAB_WIDTH);",
      "right" : "final MultiSourceFileLocator result = new MultiSourceFileLocator(TAB_WIDTH);",
      "info" : "VariableDeclarationStatement[6762-6838]:VariableDeclarationStatement[6771-6847]"
    }, {
      "left" : "String[] sourceDirectoryPaths = sourcesPath.split(\":\");",
      "right" : "String[] sourceDirectoryPaths = sourcesPath.split(\":\");",
      "info" : "VariableDeclarationStatement[6850-6905]:VariableDeclarationStatement[6859-6914]"
    }, {
      "left" : "for (String sourceDirectoryPath : sourceDirectoryPaths)",
      "right" : "for (String sourceDirectoryPath : sourceDirectoryPaths)",
      "info" : "EnhancedForStatement[6916-7144]:EnhancedForStatement[6925-7153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6972-7144]:Block[6981-7153]"
    }, {
      "left" : "File sourceDirectory = new File(sourceDirectoryPath);",
      "right" : "File sourceDirectory = new File(sourceDirectoryPath);",
      "info" : "VariableDeclarationStatement[6986-7039]:VariableDeclarationStatement[6995-7048]"
    }, {
      "left" : "result.add(new DirectorySourceFileLocator(sourceDirectory, \"utf-8\", TAB_WIDTH));",
      "right" : "result.add(new DirectorySourceFileLocator(sourceDirectory, \"utf-8\", TAB_WIDTH));",
      "info" : "ExpressionStatement[7052-7132]:ExpressionStatement[7061-7141]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[7156-7170]:ReturnStatement[7165-7179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7557-7677]:Block[7566-7686]"
    }, {
      "left" : "final ReportGenerator generator = new ReportGenerator();",
      "right" : "final ReportGenerator generator = new ReportGenerator();",
      "info" : "VariableDeclarationStatement[7575-7631]:VariableDeclarationStatement[7584-7640]"
    }, {
      "left" : "generator.create();",
      "right" : "generator.create();",
      "info" : "ExpressionStatement[7648-7667]:ExpressionStatement[7657-7676]"
    } ]
  },
  "interFileMappings" : { }
}