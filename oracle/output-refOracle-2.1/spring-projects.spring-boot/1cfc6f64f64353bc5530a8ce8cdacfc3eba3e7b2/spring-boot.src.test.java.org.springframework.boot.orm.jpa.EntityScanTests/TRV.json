{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();",
      "right" : "@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();",
      "info" : "FieldDeclaration[1528-1594]:FieldDeclaration[1528-1594]"
    }, {
      "left" : "private AnnotationConfigApplicationContext context;",
      "right" : "private AnnotationConfigApplicationContext context;",
      "info" : "FieldDeclaration[1597-1648]:FieldDeclaration[1597-1648]"
    }, {
      "left" : "public void testValue() throws Exception",
      "right" : "public void testValue() throws Exception",
      "info" : "MethodDeclaration[1651-1827]:MethodDeclaration[1651-1827]"
    }, {
      "left" : "public void basePackages() throws Exception",
      "right" : "public void basePackages() throws Exception",
      "info" : "MethodDeclaration[1830-2017]:MethodDeclaration[1830-2017]"
    }, {
      "left" : "public void basePackageClasses() throws Exception",
      "right" : "public void basePackageClasses() throws Exception",
      "info" : "MethodDeclaration[2020-2237]:MethodDeclaration[2020-2237]"
    }, {
      "left" : "public void fromConfigurationClass() throws Exception",
      "right" : "public void fromConfigurationClass() throws Exception",
      "info" : "MethodDeclaration[2240-2448]:MethodDeclaration[2240-2448]"
    }, {
      "left" : "public void valueAndBasePackagesThrows() throws Exception",
      "right" : "public void valueAndBasePackagesThrows() throws Exception",
      "info" : "MethodDeclaration[2451-2766]:MethodDeclaration[2451-2766]"
    }, {
      "left" : "public void valueAndBasePackageClassesMerges() throws Exception",
      "right" : "public void valueAndBasePackageClassesMerges() throws Exception",
      "info" : "MethodDeclaration[2769-3023]:MethodDeclaration[2769-3023]"
    }, {
      "left" : "public void basePackageAndBasePackageClassesMerges() throws Exception",
      "right" : "public void basePackageAndBasePackageClassesMerges() throws Exception",
      "info" : "MethodDeclaration[3026-3294]:MethodDeclaration[3026-3294]"
    }, {
      "left" : "public void needsEntityManageFactory() throws Exception",
      "right" : "public void needsEntityManageFactory() throws Exception",
      "info" : "MethodDeclaration[3297-3669]:MethodDeclaration[3297-3669]"
    }, {
      "left" : "public void userDeclaredBeanPostProcessorWithEntityManagerDependencyDoesNotPreventConfigurationOfPackagesToScan()",
      "right" : "public void userDeclaredBeanPostProcessorWithEntityManagerDependencyDoesNotPreventConfigurationOfPackagesToScan()",
      "info" : "MethodDeclaration[3672-3963]:MethodDeclaration[3672-3963]"
    }, {
      "left" : "private void assertSetPackagesToScan(String... expected)",
      "right" : "private void assertSetPackagesToScan(String... expected)",
      "info" : "MethodDeclaration[3966-4185]:MethodDeclaration[4180-4399]"
    }, {
      "left" : "BaseConfig",
      "right" : "BaseConfig",
      "info" : "TypeDeclaration[4188-4387]:TypeDeclaration[4402-4601]"
    }, {
      "left" : "public TestLocalContainerEntityManagerFactoryBean entityManagerFactoryBean()",
      "right" : "public TestLocalContainerEntityManagerFactoryBean entityManagerFactoryBean()",
      "info" : "MethodDeclaration[4233-4383]:MethodDeclaration[4447-4597]"
    }, {
      "left" : "ValueConfig",
      "right" : "ValueConfig",
      "info" : "TypeDeclaration[4390-4472]:TypeDeclaration[4604-4686]"
    }, {
      "left" : "BasePackagesConfig",
      "right" : "BasePackagesConfig",
      "info" : "TypeDeclaration[4475-4580]:TypeDeclaration[4689-4794]"
    }, {
      "left" : "BasePackageClassesConfig",
      "right" : "BasePackageClassesConfig",
      "info" : "TypeDeclaration[4583-4701]:TypeDeclaration[4797-4915]"
    }, {
      "left" : "FromConfigConfig",
      "right" : "FromConfigConfig",
      "info" : "TypeDeclaration[4704-4770]:TypeDeclaration[4918-4984]"
    }, {
      "left" : "ValueAndBasePackages",
      "right" : "ValueAndBasePackages",
      "info" : "TypeDeclaration[4773-4901]:TypeDeclaration[4987-5115]"
    }, {
      "left" : "ValueAndBasePackageClasses",
      "right" : "ValueAndBasePackageClasses",
      "info" : "TypeDeclaration[4904-5053]:TypeDeclaration[5118-5267]"
    }, {
      "left" : "BasePackagesAndBasePackageClasses",
      "right" : "BasePackagesAndBasePackageClasses",
      "info" : "TypeDeclaration[5056-5220]:TypeDeclaration[5270-5434]"
    }, {
      "left" : "MissingEntityManager",
      "right" : "MissingEntityManager",
      "info" : "TypeDeclaration[5223-5311]:TypeDeclaration[5437-5525]"
    }, {
      "left" : "BeanPostProcessorConfiguration",
      "right" : "BeanPostProcessorConfiguration",
      "info" : "TypeDeclaration[5314-5881]:TypeDeclaration[5528-6095]"
    }, {
      "left" : "@Autowired\n\t\tprivate EntityManagerFactory entityManagerFactory;",
      "right" : "@Autowired\n\t\tprivate EntityManagerFactory entityManagerFactory;",
      "info" : "FieldDeclaration[5413-5476]:FieldDeclaration[5627-5690]"
    }, {
      "left" : "public BeanPostProcessor beanPostProcessor()",
      "right" : "public BeanPostProcessor beanPostProcessor()",
      "info" : "MethodDeclaration[5480-5878]:MethodDeclaration[5694-6092]"
    }, {
      "left" : "public Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\t\t\t\tthrows BeansException",
      "right" : "public Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\t\t\t\tthrows BeansException",
      "info" : "MethodDeclaration[5576-5719]:MethodDeclaration[5790-5933]"
    }, {
      "left" : "public Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\t\t\t\tthrows BeansException",
      "right" : "public Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\t\t\t\tthrows BeansException",
      "info" : "MethodDeclaration[5725-5867]:MethodDeclaration[5939-6081]"
    }, {
      "left" : "TestLocalContainerEntityManagerFactoryBean",
      "right" : "TestLocalContainerEntityManagerFactoryBean",
      "info" : "TypeDeclaration[5884-6396]:TypeDeclaration[6279-6791]"
    }, {
      "left" : "private String[] packagesToScan;",
      "right" : "private String[] packagesToScan;",
      "info" : "FieldDeclaration[6003-6035]:FieldDeclaration[6398-6430]"
    }, {
      "left" : "protected EntityManagerFactory createNativeEntityManagerFactory()\n\t\t\t\tthrows PersistenceException",
      "right" : "protected EntityManagerFactory createNativeEntityManagerFactory()\n\t\t\t\tthrows PersistenceException",
      "info" : "MethodDeclaration[6039-6198]:MethodDeclaration[6434-6593]"
    }, {
      "left" : "public void setPackagesToScan(String... packagesToScan)",
      "right" : "public void setPackagesToScan(String... packagesToScan)",
      "info" : "MethodDeclaration[6202-6316]:MethodDeclaration[6597-6711]"
    }, {
      "left" : "public String[] getPackagesToScan()",
      "right" : "public String[] getPackagesToScan()",
      "info" : "MethodDeclaration[6320-6392]:MethodDeclaration[6715-6787]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1699-1827]:Block[1699-1827]"
    }, {
      "left" : "this.context = new AnnotationConfigApplicationContext(ValueConfig.class);",
      "right" : "this.context = new AnnotationConfigApplicationContext(ValueConfig.class);",
      "info" : "ExpressionStatement[1703-1776]:ExpressionStatement[1703-1776]"
    }, {
      "left" : "assertSetPackagesToScan(\"com.mycorp.entity\");",
      "right" : "assertSetPackagesToScan(\"com.mycorp.entity\");",
      "info" : "ExpressionStatement[1779-1824]:ExpressionStatement[1779-1824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1881-2017]:Block[1881-2017]"
    }, {
      "left" : "this.context = new AnnotationConfigApplicationContext(BasePackagesConfig.class);",
      "right" : "this.context = new AnnotationConfigApplicationContext(BasePackagesConfig.class);",
      "info" : "ExpressionStatement[1885-1965]:ExpressionStatement[1885-1965]"
    }, {
      "left" : "assertSetPackagesToScan(\"com.mycorp.entity2\");",
      "right" : "assertSetPackagesToScan(\"com.mycorp.entity2\");",
      "info" : "ExpressionStatement[1968-2014]:ExpressionStatement[1968-2014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2077-2237]:Block[2077-2237]"
    }, {
      "left" : "this.context = new AnnotationConfigApplicationContext(\n\t\t\t\tBasePackageClassesConfig.class);",
      "right" : "this.context = new AnnotationConfigApplicationContext(\n\t\t\t\tBasePackageClassesConfig.class);",
      "info" : "ExpressionStatement[2081-2172]:ExpressionStatement[2081-2172]"
    }, {
      "left" : "assertSetPackagesToScan(getClass().getPackage().getName());",
      "right" : "assertSetPackagesToScan(getClass().getPackage().getName());",
      "info" : "ExpressionStatement[2175-2234]:ExpressionStatement[2175-2234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2301-2448]:Block[2301-2448]"
    }, {
      "left" : "this.context = new AnnotationConfigApplicationContext(FromConfigConfig.class);",
      "right" : "this.context = new AnnotationConfigApplicationContext(FromConfigConfig.class);",
      "info" : "ExpressionStatement[2305-2383]:ExpressionStatement[2305-2383]"
    }, {
      "left" : "assertSetPackagesToScan(getClass().getPackage().getName());",
      "right" : "assertSetPackagesToScan(getClass().getPackage().getName());",
      "info" : "ExpressionStatement[2386-2445]:ExpressionStatement[2386-2445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2516-2766]:Block[2516-2766]"
    }, {
      "left" : "this.thrown.expect(IllegalStateException.class);",
      "right" : "this.thrown.expect(IllegalStateException.class);",
      "info" : "ExpressionStatement[2520-2568]:ExpressionStatement[2520-2568]"
    }, {
      "left" : "this.thrown.expectMessage(\"@EntityScan basePackages and value \"\n\t\t\t\t+ \"attributes are mutually exclusive\");",
      "right" : "this.thrown.expectMessage(\"@EntityScan basePackages and value \"\n\t\t\t\t+ \"attributes are mutually exclusive\");",
      "info" : "ExpressionStatement[2571-2678]:ExpressionStatement[2571-2678]"
    }, {
      "left" : "this.context = new AnnotationConfigApplicationContext(ValueAndBasePackages.class);",
      "right" : "this.context = new AnnotationConfigApplicationContext(ValueAndBasePackages.class);",
      "info" : "ExpressionStatement[2681-2763]:ExpressionStatement[2681-2763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2840-3023]:Block[2840-3023]"
    }, {
      "left" : "this.context = new AnnotationConfigApplicationContext(\n\t\t\t\tValueAndBasePackageClasses.class);",
      "right" : "this.context = new AnnotationConfigApplicationContext(\n\t\t\t\tValueAndBasePackageClasses.class);",
      "info" : "ExpressionStatement[2844-2937]:ExpressionStatement[2844-2937]"
    }, {
      "left" : "assertSetPackagesToScan(\"com.mycorp.entity\", getClass().getPackage().getName());",
      "right" : "assertSetPackagesToScan(\"com.mycorp.entity\", getClass().getPackage().getName());",
      "info" : "ExpressionStatement[2940-3020]:ExpressionStatement[2940-3020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3103-3294]:Block[3103-3294]"
    }, {
      "left" : "this.context = new AnnotationConfigApplicationContext(\n\t\t\t\tBasePackagesAndBasePackageClasses.class);",
      "right" : "this.context = new AnnotationConfigApplicationContext(\n\t\t\t\tBasePackagesAndBasePackageClasses.class);",
      "info" : "ExpressionStatement[3107-3207]:ExpressionStatement[3107-3207]"
    }, {
      "left" : "assertSetPackagesToScan(\"com.mycorp.entity2\", getClass().getPackage().getName());",
      "right" : "assertSetPackagesToScan(\"com.mycorp.entity2\", getClass().getPackage().getName());",
      "info" : "ExpressionStatement[3210-3291]:ExpressionStatement[3210-3291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3360-3669]:Block[3360-3669]"
    }, {
      "left" : "this.thrown.expect(IllegalStateException.class);",
      "right" : "this.thrown.expect(IllegalStateException.class);",
      "info" : "ExpressionStatement[3364-3412]:ExpressionStatement[3364-3412]"
    }, {
      "left" : "this.thrown.expectMessage(\"Unable to configure \"\n\t\t\t\t+ \"LocalContainerEntityManagerFactoryBean from @EntityScan, \"\n\t\t\t\t+ \"ensure an appropriate bean is registered.\");",
      "right" : "this.thrown.expectMessage(\"Unable to configure \"\n\t\t\t\t+ \"LocalContainerEntityManagerFactoryBean from @EntityScan, \"\n\t\t\t\t+ \"ensure an appropriate bean is registered.\");",
      "info" : "ExpressionStatement[3415-3581]:ExpressionStatement[3415-3581]"
    }, {
      "left" : "this.context = new AnnotationConfigApplicationContext(MissingEntityManager.class);",
      "right" : "this.context = new AnnotationConfigApplicationContext(MissingEntityManager.class);",
      "info" : "ExpressionStatement[3584-3666]:ExpressionStatement[3584-3666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3793-3963]:Block[3793-3963]"
    }, {
      "left" : "this.context = new AnnotationConfigApplicationContext(\n\t\t\t\tBeanPostProcessorConfiguration.class, BaseConfig.class);",
      "right" : "this.context = new AnnotationConfigApplicationContext(\n\t\t\t\tBeanPostProcessorConfiguration.class, BaseConfig.class);",
      "info" : "ExpressionStatement[3797-3912]:ExpressionStatement[3797-3912]"
    }, {
      "left" : "assertSetPackagesToScan(\"com.mycorp.entity\");",
      "right" : "assertSetPackagesToScan(\"com.mycorp.entity\");",
      "info" : "ExpressionStatement[3915-3960]:ExpressionStatement[3915-3960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4023-4185]:Block[4237-4399]"
    }, {
      "left" : "String[] actual = this.context.getBean(\n\t\t\t\tTestLocalContainerEntityManagerFactoryBean.class).getPackagesToScan();",
      "right" : "String[] actual = this.context.getBean(\n\t\t\t\tTestLocalContainerEntityManagerFactoryBean.class).getPackagesToScan();",
      "info" : "VariableDeclarationStatement[4027-4141]:VariableDeclarationStatement[4241-4355]"
    }, {
      "left" : "assertThat(actual, equalTo(expected));",
      "right" : "assertThat(actual, equalTo(expected));",
      "info" : "ExpressionStatement[4144-4182]:ExpressionStatement[4358-4396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4318-4383]:Block[4532-4597]"
    }, {
      "left" : "return new TestLocalContainerEntityManagerFactoryBean();",
      "right" : "return new TestLocalContainerEntityManagerFactoryBean();",
      "info" : "ReturnStatement[4323-4379]:ReturnStatement[4537-4593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5533-5878]:Block[5747-6092]"
    }, {
      "left" : "return new BeanPostProcessor() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\t\t\t\tthrows BeansException {\n\t\t\t\t\treturn bean;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\t\t\t\tthrows BeansException {\n\t\t\t\t\treturn bean;\n\t\t\t\t}\n\t\t\t};",
      "right" : "return new BeanPostProcessor() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic Object postProcessBeforeInitialization(Object bean, String beanName)\n\t\t\t\t\t\tthrows BeansException {\n\t\t\t\t\treturn bean;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic Object postProcessAfterInitialization(Object bean, String beanName)\n\t\t\t\t\t\tthrows BeansException {\n\t\t\t\t\treturn bean;\n\t\t\t\t}\n\t\t\t};",
      "info" : "ReturnStatement[5538-5873]:ReturnStatement[5752-6087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5694-5719]:Block[5908-5933]"
    }, {
      "left" : "return bean;",
      "right" : "return bean;",
      "info" : "ReturnStatement[5701-5713]:ReturnStatement[5915-5927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5842-5867]:Block[6056-6081]"
    }, {
      "left" : "return bean;",
      "right" : "return bean;",
      "info" : "ReturnStatement[5849-5861]:ReturnStatement[6063-6075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6149-6198]:Block[6544-6593]"
    }, {
      "left" : "return mock(EntityManagerFactory.class);",
      "right" : "return mock(EntityManagerFactory.class);",
      "info" : "ReturnStatement[6154-6194]:ReturnStatement[6549-6589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6270-6316]:Block[6665-6711]"
    }, {
      "left" : "this.packagesToScan = packagesToScan;",
      "right" : "this.packagesToScan = packagesToScan;",
      "info" : "ExpressionStatement[6275-6312]:ExpressionStatement[6670-6707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6356-6392]:Block[6751-6787]"
    }, {
      "left" : "return this.packagesToScan;",
      "right" : "return this.packagesToScan;",
      "info" : "ReturnStatement[6361-6388]:ReturnStatement[6756-6783]"
    } ]
  },
  "interFileMappings" : { }
}