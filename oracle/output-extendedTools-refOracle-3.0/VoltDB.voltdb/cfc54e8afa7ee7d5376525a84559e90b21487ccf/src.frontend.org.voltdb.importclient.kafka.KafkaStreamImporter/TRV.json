{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private Properties m_properties;",
      "right" : "private Properties m_properties;",
      "info" : "FieldDeclaration[2913-2945]:FieldDeclaration[3482-3514]"
    }, {
      "left" : "private String m_groupId;",
      "right" : "private String m_groupId;",
      "info" : "FieldDeclaration[2965-2990]:FieldDeclaration[3534-3559]"
    }, {
      "left" : "private String m_procedure;",
      "right" : "private String m_procedure;",
      "info" : "FieldDeclaration[3038-3065]:FieldDeclaration[3607-3634]"
    }, {
      "left" : "private int m_backpressureSleepMs = 200;",
      "right" : "private int m_backpressureSleepMs = 200;",
      "info" : "FieldDeclaration[3127-3167]:FieldDeclaration[3696-3736]"
    }, {
      "left" : "private List<String> m_topicList;",
      "right" : "private List<String> m_topicList;",
      "info" : "FieldDeclaration[3221-3254]:FieldDeclaration[3790-3823]"
    }, {
      "left" : "private final List<HostAndPort> m_brokerList = new ArrayList<HostAndPort>();",
      "right" : "private final List<HostAndPort> m_brokerList = new ArrayList<HostAndPort>();",
      "info" : "FieldDeclaration[3282-3358]:FieldDeclaration[3851-3927]"
    }, {
      "left" : "private int m_fetchSize = (2*1024*1024);",
      "right" : "private int m_fetchSize = (2*1024*1024);",
      "info" : "FieldDeclaration[3423-3463]:FieldDeclaration[3992-4032]"
    }, {
      "left" : "private int m_consumerSocketTimeout = 30000;",
      "right" : "private int m_consumerSocketTimeout = 30000;",
      "info" : "FieldDeclaration[3468-3512]:FieldDeclaration[4037-4081]"
    }, {
      "left" : "private static final String GROUP_ID = \"voltdb\";",
      "right" : "private static final String GROUP_ID = \"voltdb\";",
      "info" : "FieldDeclaration[3536-3584]:FieldDeclaration[4105-4153]"
    }, {
      "left" : "private static final String CLIENT_ID = \"voltdb-importer\";",
      "right" : "private static final String CLIENT_ID = \"voltdb-importer\";",
      "info" : "FieldDeclaration[3589-3647]:FieldDeclaration[4158-4216]"
    }, {
      "left" : "private static final int KAFKA_DEFAULT_BROKER_PORT = 9092;",
      "right" : "private static final int KAFKA_DEFAULT_BROKER_PORT = 9092;",
      "info" : "FieldDeclaration[3652-3710]:FieldDeclaration[4221-4279]"
    }, {
      "left" : "private final Semaphore m_done = new Semaphore(0);",
      "right" : "private final Semaphore m_done = new Semaphore(0);",
      "info" : "FieldDeclaration[3775-3825]:FieldDeclaration[4344-4394]"
    }, {
      "left" : "private boolean m_stopping = false;",
      "right" : "private boolean m_stopping = false;",
      "info" : "FieldDeclaration[3830-3865]:FieldDeclaration[4399-4434]"
    }, {
      "left" : "private final Map<String, List<TopicMetadata>> m_topicPartitionMetaData = new HashMap<String, List<TopicMetadata>>();",
      "right" : "private final Map<String, List<TopicMetadata>> m_topicPartitionMetaData = new HashMap<String, List<TopicMetadata>>();",
      "info" : "FieldDeclaration[3902-4019]:FieldDeclaration[4471-4588]"
    }, {
      "left" : "private final Map<String, List<Integer>> m_topicPartitions = new HashMap<String, List<Integer>>();",
      "right" : "private final Map<String, List<Integer>> m_topicPartitions = new HashMap<String, List<Integer>>();",
      "info" : "FieldDeclaration[4047-4145]:FieldDeclaration[4616-4714]"
    }, {
      "left" : "private final Map<String, HostAndPort> m_topicPartitionLeader = new HashMap<String, HostAndPort>();",
      "right" : "private final Map<String, HostAndPort> m_topicPartitionLeader = new HashMap<String, HostAndPort>();",
      "info" : "FieldDeclaration[4179-4278]:FieldDeclaration[4748-4847]"
    }, {
      "left" : "private final Map<String, TopicPartitionFetcher> m_fetchers = new HashMap<String, TopicPartitionFetcher>();",
      "right" : "private final Map<String, TopicPartitionFetcher> m_fetchers = new HashMap<String, TopicPartitionFetcher>();",
      "info" : "FieldDeclaration[4283-4390]:FieldDeclaration[4852-4959]"
    }, {
      "left" : "private ExecutorService m_es = null;",
      "right" : "private ExecutorService m_es = null;",
      "info" : "FieldDeclaration[4396-4432]:FieldDeclaration[4965-5001]"
    }, {
      "left" : "private static final Pattern legalTopicNamesPattern = Pattern.compile(\"[a-zA-Z0-9\\\\._\\\\-]+\");",
      "right" : "private static final Pattern legalTopicNamesPattern = Pattern.compile(\"[a-zA-Z0-9\\\\._\\\\-]+\");",
      "info" : "FieldDeclaration[4438-4531]:FieldDeclaration[5007-5100]"
    }, {
      "left" : "private static final int topicMaxNameLength = 255;",
      "right" : "private static final int topicMaxNameLength = 255;",
      "info" : "FieldDeclaration[4536-4586]:FieldDeclaration[5105-5155]"
    }, {
      "left" : "HostAndPort",
      "right" : "HostAndPort",
      "info" : "TypeDeclaration[4700-6185]:TypeDeclaration[5269-6754]"
    }, {
      "left" : "private final String m_host;",
      "right" : "private final String m_host;",
      "info" : "FieldDeclaration[4743-4771]:FieldDeclaration[5312-5340]"
    }, {
      "left" : "private final int m_port;",
      "right" : "private final int m_port;",
      "info" : "FieldDeclaration[4780-4805]:FieldDeclaration[5349-5374]"
    }, {
      "left" : "private final String m_connectionString;",
      "right" : "private final String m_connectionString;",
      "info" : "FieldDeclaration[4814-4854]:FieldDeclaration[5383-5423]"
    }, {
      "left" : "public HostAndPort(String h, int p)",
      "right" : "public HostAndPort(String h, int p)",
      "info" : "MethodDeclaration[4864-5015]:MethodDeclaration[5433-5584]"
    }, {
      "left" : "public static HostAndPort fromString(String hap)",
      "right" : "public static HostAndPort fromString(String hap)",
      "info" : "MethodDeclaration[5025-5359]:MethodDeclaration[5594-5928]"
    }, {
      "left" : "public String getHost()",
      "right" : "public String getHost()",
      "info" : "MethodDeclaration[5369-5431]:MethodDeclaration[5938-6000]"
    }, {
      "left" : "public int getPort()",
      "right" : "public int getPort()",
      "info" : "MethodDeclaration[5441-5500]:MethodDeclaration[6010-6069]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[5510-5606]:MethodDeclaration[6079-6175]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[5616-5717]:MethodDeclaration[6185-6286]"
    }, {
      "left" : "public boolean equals(Object o)",
      "right" : "public boolean equals(Object o)",
      "info" : "MethodDeclaration[5727-6179]:MethodDeclaration[6296-6748]"
    }, {
      "left" : "public void start(BundleContext context) throws Exception",
      "right" : "public void start(BundleContext context) throws Exception",
      "info" : "MethodDeclaration[6235-6386]:MethodDeclaration[6804-6955]"
    }, {
      "left" : "public void stop(BundleContext context) throws Exception",
      "right" : "public void stop(BundleContext context) throws Exception",
      "info" : "MethodDeclaration[6392-6511]:MethodDeclaration[6961-7080]"
    }, {
      "left" : "public boolean isRunEveryWhere()",
      "right" : "public boolean isRunEveryWhere()",
      "info" : "MethodDeclaration[6517-6691]:MethodDeclaration[7086-7260]"
    }, {
      "left" : "public Set<URI> getAllResponsibleResources()",
      "right" : "public Set<URI> getAllResponsibleResources()",
      "info" : "MethodDeclaration[8999-9707]:MethodDeclaration[9492-10200]"
    }, {
      "left" : "public void stop()",
      "right" : "public void stop()",
      "info" : "MethodDeclaration[9713-10313]:MethodDeclaration[10206-10806]"
    }, {
      "left" : "public String getName()",
      "right" : "public String getName()",
      "info" : "MethodDeclaration[10319-10517]:MethodDeclaration[10812-11010]"
    }, {
      "left" : "public void configure(Properties p)",
      "right" : "public void configure(Properties p)",
      "info" : "MethodDeclaration[10523-13220]:MethodDeclaration[11016-13713]"
    }, {
      "left" : "private final URI m_url;",
      "right" : "private final URI m_url;",
      "info" : "FieldDeclaration[13384-13408]:FieldDeclaration[13877-13901]"
    }, {
      "left" : "private HostAndPort m_coordinator;",
      "right" : "private HostAndPort m_coordinator;",
      "info" : "FieldDeclaration[13541-13575]:FieldDeclaration[14028-14062]"
    }, {
      "left" : "private boolean m_shutdown = false;",
      "right" : "private boolean m_shutdown = false;",
      "info" : "FieldDeclaration[13584-13619]:FieldDeclaration[14071-14106]"
    }, {
      "left" : "private volatile boolean m_hasBackPressure = false;",
      "right" : "private volatile boolean m_hasBackPressure = false;",
      "info" : "FieldDeclaration[13628-13679]:FieldDeclaration[14115-14166]"
    }, {
      "left" : "private final int m_fetchSize;",
      "right" : "private final int m_fetchSize;",
      "info" : "FieldDeclaration[13688-13718]:FieldDeclaration[14175-14205]"
    }, {
      "left" : "private final List<HostAndPort> m_brokers;",
      "right" : "private final List<HostAndPort> m_brokers;",
      "info" : "FieldDeclaration[13756-13798]:FieldDeclaration[14243-14285]"
    }, {
      "left" : "private final int m_consumerSocketTimeout;",
      "right" : "private final int m_consumerSocketTimeout;",
      "info" : "FieldDeclaration[13807-13849]:FieldDeclaration[14294-14336]"
    }, {
      "left" : "private final AtomicLong m_currentOffset = new AtomicLong(-1);",
      "right" : "private final AtomicLong m_currentOffset = new AtomicLong(-1);",
      "info" : "FieldDeclaration[13914-13976]:FieldDeclaration[14401-14463]"
    }, {
      "left" : "private final SortedSet<Long> m_pendingOffsets = Collections.synchronizedSortedSet(new TreeSet<Long>());",
      "right" : "private final SortedSet<Long> m_pendingOffsets = Collections.synchronizedSortedSet(new TreeSet<Long>());",
      "info" : "FieldDeclaration[13985-14089]:FieldDeclaration[14472-14576]"
    }, {
      "left" : "private final SortedSet<Long> m_seenOffset = Collections.synchronizedSortedSet(new TreeSet<Long>());",
      "right" : "private final SortedSet<Long> m_seenOffset = Collections.synchronizedSortedSet(new TreeSet<Long>());",
      "info" : "FieldDeclaration[14098-14198]:FieldDeclaration[14585-14685]"
    }, {
      "left" : "private final AtomicReference<SimpleConsumer> m_offsetManager = new AtomicReference<SimpleConsumer>();",
      "right" : "private final AtomicReference<SimpleConsumer> m_offsetManager = new AtomicReference<SimpleConsumer>();",
      "info" : "FieldDeclaration[14207-14309]:FieldDeclaration[14694-14796]"
    }, {
      "left" : "private final TopicAndPartition m_topicAndPartition;",
      "right" : "private final TopicAndPartition m_topicAndPartition;",
      "info" : "FieldDeclaration[14318-14370]:FieldDeclaration[14855-14907]"
    }, {
      "left" : "public TopicPartitionFetcher(List<HostAndPort> brokers, URI uri, String topic, int partition, HostAndPort leader, int fetchSize, int consumerSocketTimeout)",
      "right" : "public TopicPartitionFetcher(List<HostAndPort> brokers, URI uri, String topic, int partition, HostAndPort leader, int fetchSize, int consumerSocketTimeout)",
      "info" : "MethodDeclaration[14380-14845]:MethodDeclaration[14917-15382]"
    }, {
      "left" : "public final URI getUrl()",
      "right" : "public final URI getUrl()",
      "info" : "MethodDeclaration[14855-14918]:MethodDeclaration[15392-15455]"
    }, {
      "left" : "public void hasBackPressure(boolean flag)",
      "right" : "public void hasBackPressure(boolean flag)",
      "info" : "MethodDeclaration[14928-15019]:MethodDeclaration[15465-15556]"
    }, {
      "left" : "private HostAndPort findNewLeader()",
      "right" : "private HostAndPort findNewLeader()",
      "info" : "MethodDeclaration[16663-17798]:MethodDeclaration[17188-18323]"
    }, {
      "left" : "public void shutdown()",
      "right" : "public void shutdown()",
      "info" : "MethodDeclaration[17884-17949]:MethodDeclaration[18409-18474]"
    }, {
      "left" : "TopicPartitionInvocationCallback",
      "right" : "TopicPartitionInvocationCallback",
      "info" : "TypeDeclaration[22411-23281]:TypeDeclaration[25161-26031]"
    }, {
      "left" : "private final long m_offset;",
      "right" : "private final long m_offset;",
      "info" : "FieldDeclaration[22502-22530]:FieldDeclaration[25252-25280]"
    }, {
      "left" : "private final long m_nextOffset;",
      "right" : "private final long m_nextOffset;",
      "info" : "FieldDeclaration[22543-22575]:FieldDeclaration[25293-25325]"
    }, {
      "left" : "private final AtomicLong m_cbcnt;",
      "right" : "private final AtomicLong m_cbcnt;",
      "info" : "FieldDeclaration[22588-22621]:FieldDeclaration[25338-25371]"
    }, {
      "left" : "public TopicPartitionInvocationCallback(long offset, long noffset, AtomicLong cbcnt)",
      "right" : "public TopicPartitionInvocationCallback(long offset, long noffset, AtomicLong cbcnt)",
      "info" : "MethodDeclaration[22635-22843]:MethodDeclaration[25385-25593]"
    }, {
      "left" : "public void clientCallback(ClientResponse response) throws Exception",
      "right" : "public void clientCallback(ClientResponse response) throws Exception",
      "info" : "MethodDeclaration[22857-23270]:MethodDeclaration[25607-26020]"
    }, {
      "left" : "private int backoffSleep(int fetchFailedCount)",
      "right" : "private int backoffSleep(int fetchFailedCount)",
      "info" : "MethodDeclaration[23321-23618]:MethodDeclaration[26071-26368]"
    }, {
      "left" : "public void closeConsumer(SimpleConsumer consumer)",
      "right" : "public void closeConsumer(SimpleConsumer consumer)",
      "info" : "MethodDeclaration[34778-35038]:MethodDeclaration[36829-37089]"
    }, {
      "left" : "public void hasBackPressure(boolean flag)",
      "right" : "public void hasBackPressure(boolean flag)",
      "info" : "MethodDeclaration[35044-35260]:MethodDeclaration[37095-37311]"
    }, {
      "left" : "public void onClusterStateChange(VersionedOperationMode mode)",
      "right" : "public void onClusterStateChange(VersionedOperationMode mode)",
      "info" : "MethodDeclaration[37950-38093]:MethodDeclaration[39989-40132]"
    }, {
      "left" : "public void readyForData()",
      "right" : "public void readyForData()",
      "info" : "MethodDeclaration[38099-38515]:MethodDeclaration[40138-40554]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4700-4706]:Modifier[5269-5275]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4707-4713]:Modifier[5276-5282]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4714-4719]:TYPE_DECLARATION_KIND[5283-5288]"
    }, {
      "left" : "HostAndPort",
      "right" : "HostAndPort",
      "info" : "SimpleName[4720-4731]:SimpleName[5289-5300]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4864-4870]:Modifier[5433-5439]"
    }, {
      "left" : "HostAndPort",
      "right" : "HostAndPort",
      "info" : "SimpleName[4871-4882]:SimpleName[5440-5451]"
    }, {
      "left" : "String h",
      "right" : "String h",
      "info" : "SingleVariableDeclaration[4883-4891]:SingleVariableDeclaration[5452-5460]"
    }, {
      "left" : "int p",
      "right" : "int p",
      "info" : "SingleVariableDeclaration[4893-4898]:SingleVariableDeclaration[5462-5467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4900-5015]:Block[5469-5584]"
    }, {
      "left" : "m_host = h;",
      "right" : "m_host = h;",
      "info" : "ExpressionStatement[4914-4925]:ExpressionStatement[5483-5494]"
    }, {
      "left" : "m_port = p;",
      "right" : "m_port = p;",
      "info" : "ExpressionStatement[4938-4949]:ExpressionStatement[5507-5518]"
    }, {
      "left" : "m_connectionString = m_host + \":\" + m_port;",
      "right" : "m_connectionString = m_host + \":\" + m_port;",
      "info" : "ExpressionStatement[4962-5005]:ExpressionStatement[5531-5574]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5025-5031]:Modifier[5594-5600]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5032-5038]:Modifier[5601-5607]"
    }, {
      "left" : "HostAndPort",
      "right" : "HostAndPort",
      "info" : "SimpleType[5039-5050]:SimpleType[5608-5619]"
    }, {
      "left" : "fromString",
      "right" : "fromString",
      "info" : "SimpleName[5051-5061]:SimpleName[5620-5630]"
    }, {
      "left" : "String hap",
      "right" : "String hap",
      "info" : "SingleVariableDeclaration[5062-5072]:SingleVariableDeclaration[5631-5641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5074-5359]:Block[5643-5928]"
    }, {
      "left" : "String s[] = hap.split(\":\");",
      "right" : "String s[] = hap.split(\":\");",
      "info" : "VariableDeclarationStatement[5088-5116]:VariableDeclarationStatement[5657-5685]"
    }, {
      "left" : "int p = KAFKA_DEFAULT_BROKER_PORT;",
      "right" : "int p = KAFKA_DEFAULT_BROKER_PORT;",
      "info" : "VariableDeclarationStatement[5129-5163]:VariableDeclarationStatement[5698-5732]"
    }, {
      "left" : "if (s.length > 1 && s[1] != null && s[1].length() > 0)",
      "right" : "if (s.length > 1 && s[1] != null && s[1].length() > 0)",
      "info" : "IfStatement[5176-5297]:IfStatement[5745-5866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5231-5297]:Block[5800-5866]"
    }, {
      "left" : "p = Integer.parseInt(s[1].trim());",
      "right" : "p = Integer.parseInt(s[1].trim());",
      "info" : "ExpressionStatement[5249-5283]:ExpressionStatement[5818-5852]"
    }, {
      "left" : "return new HostAndPort(s[0].trim(), p);",
      "right" : "return new HostAndPort(s[0].trim(), p);",
      "info" : "ReturnStatement[5310-5349]:ReturnStatement[5879-5918]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5369-5375]:Modifier[5938-5944]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5376-5382]:SimpleType[5945-5951]"
    }, {
      "left" : "getHost",
      "right" : "getHost",
      "info" : "SimpleName[5383-5390]:SimpleName[5952-5959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5393-5431]:Block[5962-6000]"
    }, {
      "left" : "return m_host;",
      "right" : "return m_host;",
      "info" : "ReturnStatement[5407-5421]:ReturnStatement[5976-5990]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5441-5447]:Modifier[6010-6016]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5448-5451]:PrimitiveType[6017-6020]"
    }, {
      "left" : "getPort",
      "right" : "getPort",
      "info" : "SimpleName[5452-5459]:SimpleName[6021-6028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5462-5500]:Block[6031-6069]"
    }, {
      "left" : "return m_port;",
      "right" : "return m_port;",
      "info" : "ReturnStatement[5476-5490]:ReturnStatement[6045-6059]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5510-5519]:MarkerAnnotation[6079-6088]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5528-5534]:Modifier[6097-6103]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5535-5541]:SimpleType[6104-6110]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[5542-5550]:SimpleName[6111-6119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5553-5606]:Block[6122-6175]"
    }, {
      "left" : "return m_host + \":\" + m_port;",
      "right" : "return m_host + \":\" + m_port;",
      "info" : "ReturnStatement[5567-5596]:ReturnStatement[6136-6165]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5616-5625]:MarkerAnnotation[6185-6194]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5634-5640]:Modifier[6203-6209]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5641-5644]:PrimitiveType[6210-6213]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[5645-5653]:SimpleName[6214-6222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5656-5717]:Block[6225-6286]"
    }, {
      "left" : "return m_connectionString.hashCode();",
      "right" : "return m_connectionString.hashCode();",
      "info" : "ReturnStatement[5670-5707]:ReturnStatement[6239-6276]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5727-5736]:MarkerAnnotation[6296-6305]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5745-5751]:Modifier[6314-6320]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5752-5759]:PrimitiveType[6321-6328]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[5760-5766]:SimpleName[6329-6335]"
    }, {
      "left" : "Object o",
      "right" : "Object o",
      "info" : "SingleVariableDeclaration[5767-5775]:SingleVariableDeclaration[6336-6344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5777-6179]:Block[6346-6748]"
    }, {
      "left" : "if (!(o instanceof HostAndPort))",
      "right" : "if (!(o instanceof HostAndPort))",
      "info" : "IfStatement[5791-5869]:IfStatement[6360-6438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5824-5869]:Block[6393-6438]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5842-5855]:ReturnStatement[6411-6424]"
    }, {
      "left" : "if (this.getClass() != o.getClass())",
      "right" : "if (this.getClass() != o.getClass())",
      "info" : "IfStatement[5882-5964]:IfStatement[6451-6533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5919-5964]:Block[6488-6533]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5937-5950]:ReturnStatement[6506-6519]"
    }, {
      "left" : "HostAndPort hap = (HostAndPort )o;",
      "right" : "HostAndPort hap = (HostAndPort )o;",
      "info" : "VariableDeclarationStatement[5977-6011]:VariableDeclarationStatement[6546-6580]"
    }, {
      "left" : "if (hap == this)",
      "right" : "if (hap == this)",
      "info" : "IfStatement[6024-6085]:IfStatement[6593-6654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6041-6085]:Block[6610-6654]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6059-6071]:ReturnStatement[6628-6640]"
    }, {
      "left" : "return (hap.getHost().equals(getHost()) && hap.getPort() == getPort());",
      "right" : "return (hap.getHost().equals(getHost()) && hap.getPort() == getPort());",
      "info" : "ReturnStatement[6098-6169]:ReturnStatement[6667-6738]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6235-6244]:MarkerAnnotation[6804-6813]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6249-6255]:Modifier[6818-6824]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6256-6260]:PrimitiveType[6825-6829]"
    }, {
      "left" : "start",
      "right" : "start",
      "info" : "SimpleName[6261-6266]:SimpleName[6830-6835]"
    }, {
      "left" : "BundleContext context",
      "right" : "BundleContext context",
      "info" : "SingleVariableDeclaration[6267-6288]:SingleVariableDeclaration[6836-6857]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[6297-6306]:SimpleType[6866-6875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6307-6386]:Block[6876-6955]"
    }, {
      "left" : "context.registerService(this.getClass().getName(), this, null);",
      "right" : "context.registerService(this.getClass().getName(), this, null);",
      "info" : "ExpressionStatement[6317-6380]:ExpressionStatement[6886-6949]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6392-6401]:MarkerAnnotation[6961-6970]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6406-6412]:Modifier[6975-6981]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6413-6417]:PrimitiveType[6982-6986]"
    }, {
      "left" : "stop",
      "right" : "stop",
      "info" : "SimpleName[6418-6422]:SimpleName[6987-6991]"
    }, {
      "left" : "BundleContext context",
      "right" : "BundleContext context",
      "info" : "SingleVariableDeclaration[6423-6444]:SingleVariableDeclaration[6992-7013]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[6453-6462]:SimpleType[7022-7031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6463-6511]:Block[7032-7080]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6517-6526]:MarkerAnnotation[7086-7095]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6531-6537]:Modifier[7100-7106]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6538-6545]:PrimitiveType[7107-7114]"
    }, {
      "left" : "isRunEveryWhere",
      "right" : "isRunEveryWhere",
      "info" : "SimpleName[6546-6561]:SimpleName[7115-7130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6564-6691]:Block[7133-7260]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6672-6685]:ReturnStatement[7241-7254]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8999-9008]:MarkerAnnotation[9492-9501]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9013-9019]:Modifier[9506-9512]"
    }, {
      "left" : "Set<URI>",
      "right" : "Set<URI>",
      "info" : "ParameterizedType[9020-9028]:ParameterizedType[9513-9521]"
    }, {
      "left" : "getAllResponsibleResources",
      "right" : "getAllResponsibleResources",
      "info" : "SimpleName[9029-9055]:SimpleName[9522-9548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9058-9707]:Block[9551-10200]"
    }, {
      "left" : "SimpleConsumer simpleConsumer = null;",
      "right" : "SimpleConsumer simpleConsumer = null;",
      "info" : "VariableDeclarationStatement[9068-9105]:VariableDeclarationStatement[9561-9598]"
    }, {
      "left" : "Set<URI> availableResources = new TreeSet<URI>();",
      "right" : "Set<URI> availableResources = new TreeSet<URI>();",
      "info" : "VariableDeclarationStatement[9114-9163]:VariableDeclarationStatement[9607-9656]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9172-9666]:TryStatement[9665-10159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9176-9467]:Block[9669-9960]"
    }, {
      "left" : "simpleConsumer = new SimpleConsumer(m_brokerList.get(0).getHost(), m_brokerList.get(0).getPort(), m_consumerSocketTimeout, m_fetchSize, CLIENT_ID);",
      "right" : "simpleConsumer = new SimpleConsumer(m_brokerList.get(0).getHost(), m_brokerList.get(0).getPort(), m_consumerSocketTimeout, m_fetchSize, CLIENT_ID);",
      "info" : "ExpressionStatement[9190-9337]:ExpressionStatement[9683-9830]"
    }, {
      "left" : "availableResources = buildTopicLeaderMetadata(simpleConsumer);",
      "right" : "availableResources = buildTopicLeaderMetadata(simpleConsumer);",
      "info" : "ExpressionStatement[9395-9457]:ExpressionStatement[9888-9950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9489-9603]:Block[9982-10096]"
    }, {
      "left" : "VoltDB.crashLocalVoltDB(\"Failed to get available resources for kafka importer\", true, ex);",
      "right" : "VoltDB.crashLocalVoltDB(\"Failed to get available resources for kafka importer\", true, ex);",
      "info" : "ExpressionStatement[9503-9593]:ExpressionStatement[9996-10086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9612-9666]:Block[10105-10159]"
    }, {
      "left" : "closeConsumer(simpleConsumer);",
      "right" : "closeConsumer(simpleConsumer);",
      "info" : "ExpressionStatement[9626-9656]:ExpressionStatement[10119-10149]"
    }, {
      "left" : "return availableResources;",
      "right" : "return availableResources;",
      "info" : "ReturnStatement[9675-9701]:ReturnStatement[10168-10194]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9713-9722]:MarkerAnnotation[10206-10215]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9727-9733]:Modifier[10220-10226]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9734-9738]:PrimitiveType[10227-10231]"
    }, {
      "left" : "stop",
      "right" : "stop",
      "info" : "SimpleName[9739-9743]:SimpleName[10232-10236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9746-10313]:Block[10239-10806]"
    }, {
      "left" : "m_stopping = true;",
      "right" : "m_stopping = true;",
      "info" : "ExpressionStatement[9756-9774]:ExpressionStatement[10249-10267]"
    }, {
      "left" : "for (TopicPartitionFetcher fetcher : m_fetchers.values())",
      "right" : "for (TopicPartitionFetcher fetcher : m_fetchers.values())",
      "info" : "EnhancedForStatement[9816-9917]:EnhancedForStatement[10309-10410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9874-9917]:Block[10367-10410]"
    }, {
      "left" : "fetcher.shutdown();",
      "right" : "fetcher.shutdown();",
      "info" : "ExpressionStatement[9888-9907]:ExpressionStatement[10381-10400]"
    }, {
      "left" : "if (m_es != null)",
      "right" : "if (m_es != null)",
      "info" : "IfStatement[9926-10253]:IfStatement[10419-10746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9944-10253]:Block[10437-10746]"
    }, {
      "left" : "m_es.shutdown();",
      "right" : "m_es.shutdown();",
      "info" : "ExpressionStatement[10008-10024]:ExpressionStatement[10501-10517]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10037-10243]:TryStatement[10530-10736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10041-10115]:Block[10534-10608]"
    }, {
      "left" : "m_es.awaitTermination(365, TimeUnit.DAYS);",
      "right" : "m_es.awaitTermination(365, TimeUnit.DAYS);",
      "info" : "ExpressionStatement[10059-10101]:ExpressionStatement[10552-10594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10148-10243]:Block[10641-10736]"
    }, {
      "left" : "ex.printStackTrace();",
      "right" : "ex.printStackTrace();",
      "info" : "ExpressionStatement[10208-10229]:ExpressionStatement[10701-10722]"
    }, {
      "left" : "m_fetchers.clear();",
      "right" : "m_fetchers.clear();",
      "info" : "ExpressionStatement[10262-10281]:ExpressionStatement[10755-10774]"
    }, {
      "left" : "m_done.release();",
      "right" : "m_done.release();",
      "info" : "ExpressionStatement[10290-10307]:ExpressionStatement[10783-10800]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10438-10447]:MarkerAnnotation[10931-10940]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10452-10458]:Modifier[10945-10951]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10459-10465]:SimpleType[10952-10958]"
    }, {
      "left" : "getName",
      "right" : "getName",
      "info" : "SimpleName[10466-10473]:SimpleName[10959-10966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10476-10517]:Block[10969-11010]"
    }, {
      "left" : "return \"KafkaImporter82\";",
      "right" : "return \"KafkaImporter82\";",
      "info" : "ReturnStatement[10486-10511]:ReturnStatement[10979-11004]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10672-10681]:MarkerAnnotation[11165-11174]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10686-10692]:Modifier[11179-11185]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10693-10697]:PrimitiveType[11186-11190]"
    }, {
      "left" : "configure",
      "right" : "configure",
      "info" : "SimpleName[10698-10707]:SimpleName[11191-11200]"
    }, {
      "left" : "Properties p",
      "right" : "Properties p",
      "info" : "SingleVariableDeclaration[10708-10720]:SingleVariableDeclaration[11201-11213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10722-13220]:Block[11215-13713]"
    }, {
      "left" : "m_properties = (Properties) p.clone();",
      "right" : "m_properties = (Properties) p.clone();",
      "info" : "ExpressionStatement[10732-10770]:ExpressionStatement[11225-11263]"
    }, {
      "left" : "m_procedure = m_properties.getProperty(\"procedure\", \"\").trim();",
      "right" : "m_procedure = m_properties.getProperty(\"procedure\", \"\").trim();",
      "info" : "ExpressionStatement[10779-10842]:ExpressionStatement[11272-11335]"
    }, {
      "left" : "if (m_procedure.isEmpty())",
      "right" : "if (m_procedure.isEmpty())",
      "info" : "IfStatement[10851-10951]:IfStatement[11344-11444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10878-10951]:Block[11371-11444]"
    }, {
      "left" : "throw new RuntimeException(\"Missing procedure.\");",
      "right" : "throw new RuntimeException(\"Missing procedure.\");",
      "info" : "ThrowStatement[10892-10941]:ThrowStatement[11385-11434]"
    }, {
      "left" : "String topics = m_properties.getProperty(\"topics\", \"\").trim();",
      "right" : "String topics = m_properties.getProperty(\"topics\", \"\").trim();",
      "info" : "VariableDeclarationStatement[11001-11063]:VariableDeclarationStatement[11494-11556]"
    }, {
      "left" : "if (topics.isEmpty())",
      "right" : "if (topics.isEmpty())",
      "info" : "IfStatement[11072-11166]:IfStatement[11565-11659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11094-11166]:Block[11587-11659]"
    }, {
      "left" : "throw new RuntimeException(\"Missing topic(s).\");",
      "right" : "throw new RuntimeException(\"Missing topic(s).\");",
      "info" : "ThrowStatement[11108-11156]:ThrowStatement[11601-11649]"
    }, {
      "left" : "m_topicList = Arrays.asList(topics.split(\"\\\\s*,\\\\s*\"));",
      "right" : "m_topicList = Arrays.asList(topics.split(\"\\\\s*,\\\\s*\"));",
      "info" : "ExpressionStatement[11175-11230]:ExpressionStatement[11668-11723]"
    }, {
      "left" : "if (m_topicList == null || m_topicList.isEmpty())",
      "right" : "if (m_topicList == null || m_topicList.isEmpty())",
      "info" : "IfStatement[11239-11361]:IfStatement[11732-11854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11289-11361]:Block[11782-11854]"
    }, {
      "left" : "throw new RuntimeException(\"Missing topic(s).\");",
      "right" : "throw new RuntimeException(\"Missing topic(s).\");",
      "info" : "ThrowStatement[11303-11351]:ThrowStatement[11796-11844]"
    }, {
      "left" : "for (String topic : m_topicList)",
      "right" : "for (String topic : m_topicList)",
      "info" : "EnhancedForStatement[11370-12033]:EnhancedForStatement[11863-12526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11403-12033]:Block[11896-12526]"
    }, {
      "left" : "if (topic.contains(\"..\") || topic.contains(\".\"))",
      "right" : "if (topic.contains(\"..\") || topic.contains(\".\"))",
      "info" : "IfStatement[11417-11565]:IfStatement[11910-12058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11466-11565]:Block[11959-12058]"
    }, {
      "left" : "throw new RuntimeException(\"topic name cannot be \\\".\\\" or \\\"..\\\"\");",
      "right" : "throw new RuntimeException(\"topic name cannot be \\\".\\\" or \\\"..\\\"\");",
      "info" : "ThrowStatement[11484-11551]:ThrowStatement[11977-12044]"
    }, {
      "left" : "if (topic.length() > topicMaxNameLength)",
      "right" : "if (topic.length() > topicMaxNameLength)",
      "info" : "IfStatement[11578-11787]:IfStatement[12071-12280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11619-11787]:Block[12112-12280]"
    }, {
      "left" : "throw new RuntimeException(\"topic name is illegal, can't be longer than \"\n                        + topicMaxNameLength + \" characters\");",
      "right" : "throw new RuntimeException(\"topic name is illegal, can't be longer than \"\n                        + topicMaxNameLength + \" characters\");",
      "info" : "ThrowStatement[11637-11773]:ThrowStatement[12130-12266]"
    }, {
      "left" : "if (!legalTopicNamesPattern.matcher(topic).matches())",
      "right" : "if (!legalTopicNamesPattern.matcher(topic).matches())",
      "info" : "IfStatement[11800-12023]:IfStatement[12293-12516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11854-12023]:Block[12347-12516]"
    }, {
      "left" : "throw new RuntimeException(\"topic name \" + topic + \" is illegal, contains a character other than ASCII alphanumerics, '.', '_' and '-'\");",
      "right" : "throw new RuntimeException(\"topic name \" + topic + \" is illegal, contains a character other than ASCII alphanumerics, '.', '_' and '-'\");",
      "info" : "ThrowStatement[11872-12009]:ThrowStatement[12365-12502]"
    }, {
      "left" : "String brokers = m_properties.getProperty(\"brokers\", \"\").trim();",
      "right" : "String brokers = m_properties.getProperty(\"brokers\", \"\").trim();",
      "info" : "VariableDeclarationStatement[12042-12106]:VariableDeclarationStatement[12535-12599]"
    }, {
      "left" : "if (brokers.isEmpty())",
      "right" : "if (brokers.isEmpty())",
      "info" : "IfStatement[12115-12213]:IfStatement[12608-12706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12138-12213]:Block[12631-12706]"
    }, {
      "left" : "throw new RuntimeException(\"Missing kafka broker\");",
      "right" : "throw new RuntimeException(\"Missing kafka broker\");",
      "info" : "ThrowStatement[12152-12203]:ThrowStatement[12645-12696]"
    }, {
      "left" : "List<String> brokerList = Arrays.asList(brokers.split(\"\\\\s*,\\\\s*\"));",
      "right" : "List<String> brokerList = Arrays.asList(brokers.split(\"\\\\s*,\\\\s*\"));",
      "info" : "VariableDeclarationStatement[12222-12290]:VariableDeclarationStatement[12715-12783]"
    }, {
      "left" : "if (brokerList == null || brokerList.isEmpty())",
      "right" : "if (brokerList == null || brokerList.isEmpty())",
      "info" : "IfStatement[12299-12422]:IfStatement[12792-12915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12347-12422]:Block[12840-12915]"
    }, {
      "left" : "throw new RuntimeException(\"Missing kafka broker\");",
      "right" : "throw new RuntimeException(\"Missing kafka broker\");",
      "info" : "ThrowStatement[12361-12412]:ThrowStatement[12854-12905]"
    }, {
      "left" : "for (String broker : brokerList)",
      "right" : "for (String broker : brokerList)",
      "info" : "EnhancedForStatement[12431-12572]:EnhancedForStatement[12924-13065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12464-12572]:Block[12957-13065]"
    }, {
      "left" : "HostAndPort hap = HostAndPort.fromString(broker);",
      "right" : "HostAndPort hap = HostAndPort.fromString(broker);",
      "info" : "VariableDeclarationStatement[12478-12527]:VariableDeclarationStatement[12971-13020]"
    }, {
      "left" : "m_brokerList.add(hap);",
      "right" : "m_brokerList.add(hap);",
      "info" : "ExpressionStatement[12540-12562]:ExpressionStatement[13033-13055]"
    }, {
      "left" : "if (m_brokerList.isEmpty())",
      "right" : "if (m_brokerList.isEmpty())",
      "info" : "IfStatement[12581-12728]:IfStatement[13074-13221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12609-12728]:Block[13102-13221]"
    }, {
      "left" : "throw new RuntimeException(\"Missing or misconfigured kafka broker list. See brokers property\");",
      "right" : "throw new RuntimeException(\"Missing or misconfigured kafka broker list. See brokers property\");",
      "info" : "ThrowStatement[12623-12718]:ThrowStatement[13116-13211]"
    }, {
      "left" : "m_groupId = m_properties.getProperty(\"groupid\", GROUP_ID).trim();",
      "right" : "m_groupId = m_properties.getProperty(\"groupid\", GROUP_ID).trim();",
      "info" : "ExpressionStatement[12737-12802]:ExpressionStatement[13230-13295]"
    }, {
      "left" : "m_fetchSize = Integer.parseInt(m_properties.getProperty(\"fetch.message.max.bytes\", \"65536\"));",
      "right" : "m_fetchSize = Integer.parseInt(m_properties.getProperty(\"fetch.message.max.bytes\", \"65536\"));",
      "info" : "ExpressionStatement[12906-12999]:ExpressionStatement[13399-13492]"
    }, {
      "left" : "m_consumerSocketTimeout = Integer.parseInt(m_properties.getProperty(\"socket.timeout.ms\", \"30000\"));",
      "right" : "m_consumerSocketTimeout = Integer.parseInt(m_properties.getProperty(\"socket.timeout.ms\", \"30000\"));",
      "info" : "ExpressionStatement[13008-13107]:ExpressionStatement[13501-13600]"
    }, {
      "left" : "m_backpressureSleepMs = Integer.parseInt(m_properties.getProperty(\"backpressure.sleep.ms\", \"50\"));",
      "right" : "m_backpressureSleepMs = Integer.parseInt(m_properties.getProperty(\"backpressure.sleep.ms\", \"50\"));",
      "info" : "ExpressionStatement[13116-13214]:ExpressionStatement[13609-13707]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14380-14386]:Modifier[14917-14923]"
    }, {
      "left" : "TopicPartitionFetcher",
      "right" : "TopicPartitionFetcher",
      "info" : "SimpleName[14387-14408]:SimpleName[14924-14945]"
    }, {
      "left" : "List<HostAndPort> brokers",
      "right" : "List<HostAndPort> brokers",
      "info" : "SingleVariableDeclaration[14409-14434]:SingleVariableDeclaration[14946-14971]"
    }, {
      "left" : "URI uri",
      "right" : "URI uri",
      "info" : "SingleVariableDeclaration[14436-14443]:SingleVariableDeclaration[14973-14980]"
    }, {
      "left" : "String topic",
      "right" : "String topic",
      "info" : "SingleVariableDeclaration[14445-14457]:SingleVariableDeclaration[14982-14994]"
    }, {
      "left" : "int partition",
      "right" : "int partition",
      "info" : "SingleVariableDeclaration[14459-14472]:SingleVariableDeclaration[14996-15009]"
    }, {
      "left" : "HostAndPort leader",
      "right" : "HostAndPort leader",
      "info" : "SingleVariableDeclaration[14474-14492]:SingleVariableDeclaration[15011-15029]"
    }, {
      "left" : "int fetchSize",
      "right" : "int fetchSize",
      "info" : "SingleVariableDeclaration[14494-14507]:SingleVariableDeclaration[15031-15044]"
    }, {
      "left" : "int consumerSocketTimeout",
      "right" : "int consumerSocketTimeout",
      "info" : "SingleVariableDeclaration[14509-14534]:SingleVariableDeclaration[15046-15071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14536-14845]:Block[15073-15382]"
    }, {
      "left" : "m_url = uri;",
      "right" : "m_url = uri;",
      "info" : "ExpressionStatement[14550-14562]:ExpressionStatement[15087-15099]"
    }, {
      "left" : "m_brokers = brokers;",
      "right" : "m_brokers = brokers;",
      "info" : "ExpressionStatement[14575-14595]:ExpressionStatement[15112-15132]"
    }, {
      "left" : "m_leader = leader;",
      "right" : "m_leader = leader;",
      "info" : "ExpressionStatement[14608-14626]:ExpressionStatement[15145-15163]"
    }, {
      "left" : "m_coordinator = leader;",
      "right" : "m_coordinator = leader;",
      "info" : "ExpressionStatement[14639-14662]:ExpressionStatement[15176-15199]"
    }, {
      "left" : "m_fetchSize = fetchSize;",
      "right" : "m_fetchSize = fetchSize;",
      "info" : "ExpressionStatement[14675-14699]:ExpressionStatement[15212-15236]"
    }, {
      "left" : "m_consumerSocketTimeout = consumerSocketTimeout;",
      "right" : "m_consumerSocketTimeout = consumerSocketTimeout;",
      "info" : "ExpressionStatement[14712-14760]:ExpressionStatement[15249-15297]"
    }, {
      "left" : "m_topicAndPartition = new TopicAndPartition(topic, partition);",
      "right" : "m_topicAndPartition = new TopicAndPartition(topic, partition);",
      "info" : "ExpressionStatement[14773-14835]:ExpressionStatement[15310-15372]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14855-14861]:Modifier[15392-15398]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[14862-14867]:Modifier[15399-15404]"
    }, {
      "left" : "URI",
      "right" : "URI",
      "info" : "SimpleType[14868-14871]:SimpleType[15405-15408]"
    }, {
      "left" : "getUrl",
      "right" : "getUrl",
      "info" : "SimpleName[14872-14878]:SimpleName[15409-15415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14881-14918]:Block[15418-15455]"
    }, {
      "left" : "return m_url;",
      "right" : "return m_url;",
      "info" : "ReturnStatement[14895-14908]:ReturnStatement[15432-15445]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14928-14934]:Modifier[15465-15471]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14935-14939]:PrimitiveType[15472-15476]"
    }, {
      "left" : "hasBackPressure",
      "right" : "hasBackPressure",
      "info" : "SimpleName[14940-14955]:SimpleName[15477-15492]"
    }, {
      "left" : "boolean flag",
      "right" : "boolean flag",
      "info" : "SingleVariableDeclaration[14956-14968]:SingleVariableDeclaration[15493-15505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14970-15019]:Block[15507-15556]"
    }, {
      "left" : "m_hasBackPressure = flag;",
      "right" : "m_hasBackPressure = flag;",
      "info" : "ExpressionStatement[14984-15009]:ExpressionStatement[15521-15546]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16663-16670]:Modifier[17188-17195]"
    }, {
      "left" : "HostAndPort",
      "right" : "HostAndPort",
      "info" : "SimpleType[16671-16682]:SimpleType[17196-17207]"
    }, {
      "left" : "findNewLeader",
      "right" : "findNewLeader",
      "info" : "SimpleName[16683-16696]:SimpleName[17208-17221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16699-17798]:Block[17224-18323]"
    }, {
      "left" : "for (int i = 0; i < 3; i++)",
      "right" : "for (int i = 0; i < 3; i++)",
      "info" : "ForStatement[16713-17627]:ForStatement[17238-18152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16741-17627]:Block[17266-18152]"
    }, {
      "left" : "boolean shouldSleep = false;",
      "right" : "boolean shouldSleep = false;",
      "info" : "VariableDeclarationStatement[16759-16787]:VariableDeclarationStatement[17284-17312]"
    }, {
      "left" : "PartitionMetadata metadata = findLeader();",
      "right" : "PartitionMetadata metadata = findLeader();",
      "info" : "VariableDeclarationStatement[16804-16846]:VariableDeclarationStatement[17329-17371]"
    }, {
      "left" : "if (metadata == null)",
      "right" : "if (metadata == null)",
      "info" : "IfStatement[16863-17521]:IfStatement[17388-18046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16885-16944]:Block[17410-17469]"
    }, {
      "left" : "shouldSleep = true;",
      "right" : "shouldSleep = true;",
      "info" : "ExpressionStatement[16907-16926]:ExpressionStatement[17432-17451]"
    }, {
      "left" : "if (metadata.leader() == null)",
      "right" : "if (metadata.leader() == null)",
      "info" : "IfStatement[16950-17521]:IfStatement[17475-18046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16981-17040]:Block[17506-17565]"
    }, {
      "left" : "shouldSleep = true;",
      "right" : "shouldSleep = true;",
      "info" : "ExpressionStatement[17003-17022]:ExpressionStatement[17528-17547]"
    }, {
      "left" : "if (m_leader.getHost().equalsIgnoreCase(metadata.leader().host()) && i == 0)",
      "right" : "if (m_leader.getHost().equalsIgnoreCase(metadata.leader().host()) && i == 0)",
      "info" : "IfStatement[17046-17521]:IfStatement[17571-18046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17123-17400]:Block[17648-17925]"
    }, {
      "left" : "shouldSleep = true;",
      "right" : "shouldSleep = true;",
      "info" : "ExpressionStatement[17363-17382]:ExpressionStatement[17888-17907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17406-17521]:Block[17931-18046]"
    }, {
      "left" : "return new HostAndPort(metadata.leader().host(), metadata.leader().port());",
      "right" : "return new HostAndPort(metadata.leader().host(), metadata.leader().port());",
      "info" : "ReturnStatement[17428-17503]:ReturnStatement[17953-18028]"
    }, {
      "left" : "if (shouldSleep)",
      "right" : "if (shouldSleep)",
      "info" : "IfStatement[17538-17613]:IfStatement[18063-18138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17555-17613]:Block[18080-18138]"
    }, {
      "left" : "backoffSleep(i+1);",
      "right" : "backoffSleep(i+1);",
      "info" : "ExpressionStatement[17577-17595]:ExpressionStatement[18102-18120]"
    }, {
      "left" : "error(null, \"Failed to find new leader for %s\", m_topicAndPartition);",
      "right" : "error(null, \"Failed to find new leader for %s\", m_topicAndPartition);",
      "info" : "ExpressionStatement[17694-17763]:ExpressionStatement[18219-18288]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17776-17788]:ReturnStatement[18301-18313]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17884-17890]:Modifier[18409-18415]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17891-17895]:PrimitiveType[18416-18420]"
    }, {
      "left" : "shutdown",
      "right" : "shutdown",
      "info" : "SimpleName[17896-17904]:SimpleName[18421-18429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17907-17949]:Block[18432-18474]"
    }, {
      "left" : "m_shutdown = true;",
      "right" : "m_shutdown = true;",
      "info" : "ExpressionStatement[17921-17939]:ExpressionStatement[18446-18464]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22411-22418]:Modifier[25161-25168]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[22419-22424]:TYPE_DECLARATION_KIND[25169-25174]"
    }, {
      "left" : "TopicPartitionInvocationCallback",
      "right" : "TopicPartitionInvocationCallback",
      "info" : "SimpleName[22425-22457]:SimpleName[25175-25207]"
    }, {
      "left" : "ProcedureCallback",
      "right" : "ProcedureCallback",
      "info" : "SimpleType[22469-22486]:SimpleType[25219-25236]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22635-22641]:Modifier[25385-25391]"
    }, {
      "left" : "TopicPartitionInvocationCallback",
      "right" : "TopicPartitionInvocationCallback",
      "info" : "SimpleName[22642-22674]:SimpleName[25392-25424]"
    }, {
      "left" : "long offset",
      "right" : "long offset",
      "info" : "SingleVariableDeclaration[22675-22686]:SingleVariableDeclaration[25425-25436]"
    }, {
      "left" : "long noffset",
      "right" : "long noffset",
      "info" : "SingleVariableDeclaration[22688-22700]:SingleVariableDeclaration[25438-25450]"
    }, {
      "left" : "AtomicLong cbcnt",
      "right" : "AtomicLong cbcnt",
      "info" : "SingleVariableDeclaration[22702-22718]:SingleVariableDeclaration[25452-25468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22720-22843]:Block[25470-25593]"
    }, {
      "left" : "m_offset = offset;",
      "right" : "m_offset = offset;",
      "info" : "ExpressionStatement[22738-22756]:ExpressionStatement[25488-25506]"
    }, {
      "left" : "m_nextOffset = noffset;",
      "right" : "m_nextOffset = noffset;",
      "info" : "ExpressionStatement[22773-22796]:ExpressionStatement[25523-25546]"
    }, {
      "left" : "m_cbcnt = cbcnt;",
      "right" : "m_cbcnt = cbcnt;",
      "info" : "ExpressionStatement[22813-22829]:ExpressionStatement[25563-25579]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22857-22866]:MarkerAnnotation[25607-25616]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22879-22885]:Modifier[25629-25635]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22886-22890]:PrimitiveType[25636-25640]"
    }, {
      "left" : "clientCallback",
      "right" : "clientCallback",
      "info" : "SimpleName[22891-22905]:SimpleName[25641-25655]"
    }, {
      "left" : "ClientResponse response",
      "right" : "ClientResponse response",
      "info" : "SingleVariableDeclaration[22906-22929]:SingleVariableDeclaration[25656-25679]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[22938-22947]:SimpleType[25688-25697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22948-23270]:Block[25698-26020]"
    }, {
      "left" : "assert(!m_pendingOffsets.isEmpty());",
      "right" : "assert(!m_pendingOffsets.isEmpty());",
      "info" : "AssertStatement[23034-23070]:AssertStatement[25784-25820]"
    }, {
      "left" : "m_cbcnt.incrementAndGet();",
      "right" : "m_cbcnt.incrementAndGet();",
      "info" : "ExpressionStatement[23087-23113]:ExpressionStatement[25837-25863]"
    }, {
      "left" : "m_pendingOffsets.remove(m_offset);",
      "right" : "m_pendingOffsets.remove(m_offset);",
      "info" : "ExpressionStatement[23130-23164]:ExpressionStatement[25880-25914]"
    }, {
      "left" : "m_seenOffset.add(m_nextOffset);",
      "right" : "m_seenOffset.add(m_nextOffset);",
      "info" : "ExpressionStatement[23225-23256]:ExpressionStatement[25975-26006]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23321-23328]:Modifier[26071-26078]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[23329-23332]:PrimitiveType[26079-26082]"
    }, {
      "left" : "backoffSleep",
      "right" : "backoffSleep",
      "info" : "SimpleName[23333-23345]:SimpleName[26083-26095]"
    }, {
      "left" : "int fetchFailedCount",
      "right" : "int fetchFailedCount",
      "info" : "SingleVariableDeclaration[23346-23366]:SingleVariableDeclaration[26096-26116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23368-23618]:Block[26118-26368]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23382-23571]:TryStatement[26132-26321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23386-23523]:Block[26136-26273]"
    }, {
      "left" : "Thread.sleep(1000 * fetchFailedCount++);",
      "right" : "Thread.sleep(1000 * fetchFailedCount++);",
      "info" : "ExpressionStatement[23404-23444]:ExpressionStatement[26154-26194]"
    }, {
      "left" : "if (fetchFailedCount > 10)",
      "right" : "if (fetchFailedCount > 10)",
      "info" : "IfStatement[23461-23509]:IfStatement[26211-26259]"
    }, {
      "left" : "fetchFailedCount = 1;",
      "right" : "fetchFailedCount = 1;",
      "info" : "ExpressionStatement[23488-23509]:ExpressionStatement[26238-26259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23556-23571]:Block[26306-26321]"
    }, {
      "left" : "return fetchFailedCount;",
      "right" : "return fetchFailedCount;",
      "info" : "ReturnStatement[23584-23608]:ReturnStatement[26334-26358]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34778-34784]:Modifier[36829-36835]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34785-34789]:PrimitiveType[36836-36840]"
    }, {
      "left" : "closeConsumer",
      "right" : "closeConsumer",
      "info" : "SimpleName[34790-34803]:SimpleName[36841-36854]"
    }, {
      "left" : "SimpleConsumer consumer",
      "right" : "SimpleConsumer consumer",
      "info" : "SingleVariableDeclaration[34804-34827]:SingleVariableDeclaration[36855-36878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34829-35038]:Block[36880-37089]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[34839-35032]:TryStatement[36890-37083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34843-34938]:Block[36894-36989]"
    }, {
      "left" : "if (consumer != null)",
      "right" : "if (consumer != null)",
      "info" : "IfStatement[34857-34928]:IfStatement[36908-36979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34879-34928]:Block[36930-36979]"
    }, {
      "left" : "consumer.close();",
      "right" : "consumer.close();",
      "info" : "ExpressionStatement[34897-34914]:ExpressionStatement[36948-36965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34959-35032]:Block[37010-37083]"
    }, {
      "left" : "error(\"Failed to close consumer connection.\", e);",
      "right" : "error(\"Failed to close consumer connection.\", e);",
      "info" : "ExpressionStatement[34973-35022]:ExpressionStatement[37024-37073]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35044-35053]:MarkerAnnotation[37095-37104]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35058-35064]:Modifier[37109-37115]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35065-35069]:PrimitiveType[37116-37120]"
    }, {
      "left" : "hasBackPressure",
      "right" : "hasBackPressure",
      "info" : "SimpleName[35070-35085]:SimpleName[37121-37136]"
    }, {
      "left" : "boolean flag",
      "right" : "boolean flag",
      "info" : "SingleVariableDeclaration[35086-35098]:SingleVariableDeclaration[37137-37149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35100-35260]:Block[37151-37311]"
    }, {
      "left" : "if (m_stopping)",
      "right" : "if (m_stopping)",
      "info" : "IfStatement[35110-35133]:IfStatement[37161-37184]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[35126-35133]:ReturnStatement[37177-37184]"
    }, {
      "left" : "for (TopicPartitionFetcher fetcher : m_fetchers.values())",
      "right" : "for (TopicPartitionFetcher fetcher : m_fetchers.values())",
      "info" : "EnhancedForStatement[35142-35254]:EnhancedForStatement[37193-37305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35200-35254]:Block[37251-37305]"
    }, {
      "left" : "fetcher.hasBackPressure(flag);",
      "right" : "fetcher.hasBackPressure(flag);",
      "info" : "ExpressionStatement[35214-35244]:ExpressionStatement[37265-37295]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37950-37959]:MarkerAnnotation[39989-39998]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37964-37970]:Modifier[40003-40009]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37971-37975]:PrimitiveType[40010-40014]"
    }, {
      "left" : "onClusterStateChange",
      "right" : "onClusterStateChange",
      "info" : "SimpleName[37976-37996]:SimpleName[40015-40035]"
    }, {
      "left" : "VersionedOperationMode mode",
      "right" : "VersionedOperationMode mode",
      "info" : "SingleVariableDeclaration[37997-38024]:SingleVariableDeclaration[40036-40063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38026-38093]:Block[40065-40132]"
    }, {
      "left" : "info(\"cluster state change notification: \" + mode);",
      "right" : "info(\"cluster state change notification: \" + mode);",
      "info" : "ExpressionStatement[38036-38087]:ExpressionStatement[40075-40126]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38186-38195]:MarkerAnnotation[40225-40234]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38200-38206]:Modifier[40239-40245]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38207-38211]:PrimitiveType[40246-40250]"
    }, {
      "left" : "readyForData",
      "right" : "readyForData",
      "info" : "SimpleName[38212-38224]:SimpleName[40251-40263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38227-38515]:Block[40266-40554]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38237-38509]:TryStatement[40276-40548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38241-38409]:Block[40280-40448]"
    }, {
      "left" : "info(\"Configured and ready with properties: \" + m_properties);",
      "right" : "info(\"Configured and ready with properties: \" + m_properties);",
      "info" : "ExpressionStatement[38255-38317]:ExpressionStatement[40294-40356]"
    }, {
      "left" : "m_done.acquire();",
      "right" : "m_done.acquire();",
      "info" : "ExpressionStatement[38382-38399]:ExpressionStatement[40421-40438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38431-38509]:Block[40470-40548]"
    }, {
      "left" : "error(\"Kafka Importer finished with exeception \", ex);",
      "right" : "error(\"Kafka Importer finished with exeception \", ex);",
      "info" : "ExpressionStatement[38445-38499]:ExpressionStatement[40484-40538]"
    } ]
  },
  "interFileMappings" : { }
}