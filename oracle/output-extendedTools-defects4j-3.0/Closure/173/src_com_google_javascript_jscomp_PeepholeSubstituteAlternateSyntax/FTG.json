{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PeepholeSubstituteAlternateSyntax",
      "right" : "PeepholeSubstituteAlternateSyntax",
      "info" : "TypeDeclaration[998-20732]:TypeDeclaration[998-21668]"
    }, {
      "left" : "private static final CodeGenerator REGEXP_ESCAPER =\n      CodeGenerator.forCostEstimation(\n          null );",
      "right" : "private static final CodeGenerator REGEXP_ESCAPER =\n      CodeGenerator.forCostEstimation(\n          null );",
      "info" : "FieldDeclaration[1282-1429]:FieldDeclaration[1282-1429]"
    }, {
      "left" : "private final boolean late;",
      "right" : "private final boolean late;",
      "info" : "FieldDeclaration[1433-1460]:FieldDeclaration[1433-1460]"
    }, {
      "left" : "private static final int STRING_SPLIT_OVERHEAD = \".split('.')\".length();",
      "right" : "private static final int STRING_SPLIT_OVERHEAD = \".split('.')\".length();",
      "info" : "FieldDeclaration[1464-1536]:FieldDeclaration[1464-1536]"
    }, {
      "left" : "static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =\n    DiagnosticType.warning(\n        \"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\",\n        \"Invalid flags to RegExp constructor: {0}\");",
      "right" : "static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =\n    DiagnosticType.warning(\n        \"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\",\n        \"Invalid flags to RegExp constructor: {0}\");",
      "info" : "FieldDeclaration[1540-1731]:FieldDeclaration[1540-1731]"
    }, {
      "left" : "PeepholeSubstituteAlternateSyntax(boolean late)",
      "right" : "PeepholeSubstituteAlternateSyntax(boolean late)",
      "info" : "MethodDeclaration[1735-2172]:MethodDeclaration[1735-2172]"
    }, {
      "left" : "public Node optimizeSubtree(Node node)",
      "right" : "public Node optimizeSubtree(Node node)",
      "info" : "MethodDeclaration[2176-3357]:MethodDeclaration[2176-3547]"
    }, {
      "left" : "private Node tryFoldSimpleFunctionCall(Node n)",
      "right" : "private Node tryFoldSimpleFunctionCall(Node n)",
      "info" : "MethodDeclaration[3362-4301]:MethodDeclaration[4298-5237]"
    }, {
      "left" : "private Node tryFoldImmediateCallToBoundFunction(Node n)",
      "right" : "private Node tryFoldImmediateCallToBoundFunction(Node n)",
      "info" : "MethodDeclaration[4305-5479]:MethodDeclaration[5241-6415]"
    }, {
      "left" : "private void addParameterAfter(Node parameterList, Node after)",
      "right" : "private void addParameterAfter(Node parameterList, Node after)",
      "info" : "MethodDeclaration[5483-5784]:MethodDeclaration[6419-6720]"
    }, {
      "left" : "private Node trySplitComma(Node n)",
      "right" : "private Node trySplitComma(Node n)",
      "info" : "MethodDeclaration[5788-6572]:MethodDeclaration[6724-7508]"
    }, {
      "left" : "private Node tryReplaceUndefined(Node n)",
      "right" : "private Node tryReplaceUndefined(Node n)",
      "info" : "MethodDeclaration[6576-7013]:MethodDeclaration[7512-7949]"
    }, {
      "left" : "private Node tryReduceReturn(Node n)",
      "right" : "private Node tryReduceReturn(Node n)",
      "info" : "MethodDeclaration[7017-7744]:MethodDeclaration[7953-8680]"
    }, {
      "left" : "private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =\n    // String, Number, and Boolean functions return non-object types, whereas\n    // new String, new Number, and new Boolean return object types, so don't\n    // include them here.\n    ImmutableSet.of(\n      \"Object\",\n      \"Array\",\n      \"RegExp\",\n      \"Error\"\n      );",
      "right" : "private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =\n    // String, Number, and Boolean functions return non-object types, whereas\n    // new String, new Number, and new Boolean return object types, so don't\n    // include them here.\n    ImmutableSet.of(\n      \"Object\",\n      \"Array\",\n      \"RegExp\",\n      \"Error\"\n      );",
      "info" : "FieldDeclaration[7748-8092]:FieldDeclaration[8684-9028]"
    }, {
      "left" : "private Node tryFoldStandardConstructors(Node n)",
      "right" : "private Node tryFoldStandardConstructors(Node n)",
      "info" : "MethodDeclaration[8096-8754]:MethodDeclaration[9032-9690]"
    }, {
      "left" : "private Node tryFoldLiteralConstructor(Node n)",
      "right" : "private Node tryFoldLiteralConstructor(Node n)",
      "info" : "MethodDeclaration[8758-10622]:MethodDeclaration[9694-11558]"
    }, {
      "left" : "enum : FoldArrayAction",
      "right" : "enum : FoldArrayAction",
      "info" : "EnumDeclaration[10626-10736]:EnumDeclaration[11562-11672]"
    }, {
      "left" : "private static FoldArrayAction isSafeToFoldArrayConstructor(Node arg)",
      "right" : "private static FoldArrayAction isSafeToFoldArrayConstructor(Node arg)",
      "info" : "MethodDeclaration[10740-11943]:MethodDeclaration[11676-12879]"
    }, {
      "left" : "private Node tryFoldRegularExpressionConstructor(Node n)",
      "right" : "private Node tryFoldRegularExpressionConstructor(Node n)",
      "info" : "MethodDeclaration[11947-13948]:MethodDeclaration[12883-14884]"
    }, {
      "left" : "private Node reduceTrueFalse(Node n)",
      "right" : "private Node reduceTrueFalse(Node n)",
      "info" : "MethodDeclaration[13952-14213]:MethodDeclaration[14888-15149]"
    }, {
      "left" : "private Node tryMinimizeArrayLiteral(Node n)",
      "right" : "private Node tryMinimizeArrayLiteral(Node n)",
      "info" : "MethodDeclaration[14217-14549]:MethodDeclaration[15153-15485]"
    }, {
      "left" : "private Node tryMinimizeStringArrayLiteral(Node n)",
      "right" : "private Node tryMinimizeStringArrayLiteral(Node n)",
      "info" : "MethodDeclaration[14553-15593]:MethodDeclaration[15489-16529]"
    }, {
      "left" : "private static String pickDelimiter(String[] strings)",
      "right" : "private static String pickDelimiter(String[] strings)",
      "info" : "MethodDeclaration[15597-16341]:MethodDeclaration[16533-17277]"
    }, {
      "left" : "private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");",
      "right" : "private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");",
      "info" : "FieldDeclaration[16345-16420]:FieldDeclaration[17281-17356]"
    }, {
      "left" : "private static boolean areValidRegexpFlags(String flags)",
      "right" : "private static boolean areValidRegexpFlags(String flags)",
      "info" : "MethodDeclaration[16424-16909]:MethodDeclaration[17360-17845]"
    }, {
      "left" : "private boolean areSafeFlagsToFold(String flags)",
      "right" : "private boolean areSafeFlagsToFold(String flags)",
      "info" : "MethodDeclaration[16913-17836]:MethodDeclaration[17849-18772]"
    }, {
      "left" : "private static Node makeForwardSlashBracketSafe(Node n)",
      "right" : "private static Node makeForwardSlashBracketSafe(Node n)",
      "info" : "MethodDeclaration[17840-20119]:MethodDeclaration[18776-21055]"
    }, {
      "left" : "static boolean containsUnicodeEscape(String s)",
      "right" : "static boolean containsUnicodeEscape(String s)",
      "info" : "MethodDeclaration[20123-20730]:MethodDeclaration[21059-21666]"
    } ],
    "mappings" : [
 {
      "left" : "AbstractPeepholeOptimization",
      "right" : "AbstractPeepholeOptimization",
      "info" : "SimpleType[1248-1276]:SimpleType[1248-1276]"
    }, {
      "left" : "PeepholeSubstituteAlternateSyntax",
      "right" : "PeepholeSubstituteAlternateSyntax",
      "info" : "SimpleName[2097-2130]:SimpleName[2097-2130]"
    }, {
      "left" : "boolean late",
      "right" : "boolean late",
      "info" : "SingleVariableDeclaration[2131-2143]:SingleVariableDeclaration[2131-2143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2145-2172]:Block[2145-2172]"
    }, {
      "left" : "this.late = late;",
      "right" : "this.late = late;",
      "info" : "ExpressionStatement[2151-2168]:ExpressionStatement[2151-2168]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2263-2272]:MarkerAnnotation[2263-2272]"
    }, {
      "left" : "@SuppressWarnings(\"fallthrough\")",
      "right" : "@SuppressWarnings(\"fallthrough\")",
      "info" : "SingleMemberAnnotation[2275-2307]:SingleMemberAnnotation[2275-2307]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2310-2316]:Modifier[2310-2316]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[2317-2321]:SimpleType[2317-2321]"
    }, {
      "left" : "optimizeSubtree",
      "right" : "optimizeSubtree",
      "info" : "SimpleName[2322-2337]:SimpleName[2322-2337]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[2338-2347]:SingleVariableDeclaration[2338-2347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2349-3357]:Block[2349-3547]"
    }, {
      "left" : "switch(node.getType()) {\n      case Token.TRUE:\n      case Token.FALSE:\n        return reduceTrueFalse(node);\n\n      case Token.NEW:\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n          return node;\n        }\n        // Fall through on purpose because tryFoldStandardConstructors() may\n        // convert a NEW node into a CALL node\n      case Token.CALL:\n        Node result =  tryFoldLiteralConstructor(node);\n        if (result == node) {\n          result = tryFoldSimpleFunctionCall(node);\n          if (result == node) {\n            result = tryFoldImmediateCallToBoundFunction(node);\n          }\n        }\n        return result;\n\n      case Token.RETURN:\n        return tryReduceReturn(node);\n\n      case Token.COMMA:\n        return trySplitComma(node);\n\n      case Token.NAME:\n        return tryReplaceUndefined(node);\n\n      case Token.ARRAYLIT:\n        return tryMinimizeArrayLiteral(node);\n\n\n      default:\n        return node; //Nothing changed\n    }",
      "right" : "switch(node.getType()) {\n      case Token.TRUE:\n      case Token.FALSE:\n        return reduceTrueFalse(node);\n\n      case Token.NEW:\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n          return node;\n        }\n        // Fall through on purpose because tryFoldStandardConstructors() may\n        // convert a NEW node into a CALL node\n      case Token.CALL:\n        Node result =  tryFoldLiteralConstructor(node);\n        if (result == node) {\n          result = tryFoldSimpleFunctionCall(node);\n          if (result == node) {\n            result = tryFoldImmediateCallToBoundFunction(node);\n          }\n        }\n        return result;\n\n      case Token.RETURN:\n        return tryReduceReturn(node);\n\n      case Token.COMMA:\n        return trySplitComma(node);\n\n      case Token.NAME:\n        return tryReplaceUndefined(node);\n\n      case Token.ARRAYLIT:\n        return tryMinimizeArrayLiteral(node);\n\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return tryRotateAssociativeOperator(node);\n\n      default:\n        return node; //Nothing changed\n    }",
      "info" : "SwitchStatement[2355-3353]:SwitchStatement[2355-3543]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[2386-2402]:SwitchCase[2386-2402]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[2409-2426]:SwitchCase[2409-2426]"
    }, {
      "left" : "return reduceTrueFalse(node);",
      "right" : "return reduceTrueFalse(node);",
      "info" : "ReturnStatement[2435-2464]:ReturnStatement[2435-2464]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[2472-2487]:SwitchCase[2472-2487]"
    }, {
      "left" : "node = tryFoldStandardConstructors(node);",
      "right" : "node = tryFoldStandardConstructors(node);",
      "info" : "ExpressionStatement[2496-2537]:ExpressionStatement[2496-2537]"
    }, {
      "left" : "if (!node.isCall())",
      "right" : "if (!node.isCall())",
      "info" : "IfStatement[2546-2600]:IfStatement[2546-2600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2566-2600]:Block[2566-2600]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[2578-2590]:ReturnStatement[2578-2590]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[2731-2747]:SwitchCase[2731-2747]"
    }, {
      "left" : "Node result =  tryFoldLiteralConstructor(node);",
      "right" : "Node result =  tryFoldLiteralConstructor(node);",
      "info" : "VariableDeclarationStatement[2756-2803]:VariableDeclarationStatement[2756-2803]"
    }, {
      "left" : "if (result == node)",
      "right" : "if (result == node)",
      "info" : "IfStatement[2812-3003]:IfStatement[2812-3003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2832-3003]:Block[2832-3003]"
    }, {
      "left" : "result = tryFoldSimpleFunctionCall(node);",
      "right" : "result = tryFoldSimpleFunctionCall(node);",
      "info" : "ExpressionStatement[2844-2885]:ExpressionStatement[2844-2885]"
    }, {
      "left" : "if (result == node)",
      "right" : "if (result == node)",
      "info" : "IfStatement[2896-2993]:IfStatement[2896-2993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2916-2993]:Block[2916-2993]"
    }, {
      "left" : "result = tryFoldImmediateCallToBoundFunction(node);",
      "right" : "result = tryFoldImmediateCallToBoundFunction(node);",
      "info" : "ExpressionStatement[2930-2981]:ExpressionStatement[2930-2981]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[3012-3026]:ReturnStatement[3012-3026]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[3034-3052]:SwitchCase[3034-3052]"
    }, {
      "left" : "return tryReduceReturn(node);",
      "right" : "return tryReduceReturn(node);",
      "info" : "ReturnStatement[3061-3090]:ReturnStatement[3061-3090]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[3098-3115]:SwitchCase[3098-3115]"
    }, {
      "left" : "return trySplitComma(node);",
      "right" : "return trySplitComma(node);",
      "info" : "ReturnStatement[3124-3151]:ReturnStatement[3124-3151]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[3159-3175]:SwitchCase[3159-3175]"
    }, {
      "left" : "return tryReplaceUndefined(node);",
      "right" : "return tryReplaceUndefined(node);",
      "info" : "ReturnStatement[3184-3217]:ReturnStatement[3184-3217]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[3225-3245]:SwitchCase[3225-3245]"
    }, {
      "left" : "return tryMinimizeArrayLiteral(node);",
      "right" : "return tryMinimizeArrayLiteral(node);",
      "info" : "ReturnStatement[3254-3291]:ReturnStatement[3254-3291]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3300-3308]:SwitchCase[3490-3498]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[3317-3329]:ReturnStatement[3507-3519]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3362-3369]:Modifier[4298-4305]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[3370-3374]:SimpleType[4306-4310]"
    }, {
      "left" : "tryFoldSimpleFunctionCall",
      "right" : "tryFoldSimpleFunctionCall",
      "info" : "SimpleName[3375-3400]:SimpleName[4311-4336]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3401-3407]:SingleVariableDeclaration[4337-4343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3409-4301]:Block[4345-5237]"
    }, {
      "left" : "Preconditions.checkState(n.isCall());",
      "right" : "Preconditions.checkState(n.isCall());",
      "info" : "ExpressionStatement[3415-3452]:ExpressionStatement[4351-4388]"
    }, {
      "left" : "Node callTarget = n.getFirstChild();",
      "right" : "Node callTarget = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[3457-3493]:VariableDeclarationStatement[4393-4429]"
    }, {
      "left" : "if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\"))",
      "right" : "if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\"))",
      "info" : "IfStatement[3498-4283]:IfStatement[4434-5219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3598-4283]:Block[4534-5219]"
    }, {
      "left" : "Node value = callTarget.getNext();",
      "right" : "Node value = callTarget.getNext();",
      "info" : "VariableDeclarationStatement[3916-3950]:VariableDeclarationStatement[4852-4886]"
    }, {
      "left" : "if (value != null && value.getNext() == null &&\n          NodeUtil.isImmutableValue(value))",
      "right" : "if (value != null && value.getNext() == null &&\n          NodeUtil.isImmutableValue(value))",
      "info" : "IfStatement[3957-4277]:IfStatement[4893-5213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4049-4277]:Block[4985-5213]"
    }, {
      "left" : "Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            value.detachFromParent());",
      "right" : "Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            value.detachFromParent());",
      "info" : "VariableDeclarationStatement[4059-4167]:VariableDeclarationStatement[4995-5103]"
    }, {
      "left" : "n.getParent().replaceChild(n, addition);",
      "right" : "n.getParent().replaceChild(n, addition);",
      "info" : "ExpressionStatement[4176-4216]:ExpressionStatement[5112-5152]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[4225-4244]:ExpressionStatement[5161-5180]"
    }, {
      "left" : "return addition;",
      "right" : "return addition;",
      "info" : "ReturnStatement[4253-4269]:ReturnStatement[5189-5205]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[4288-4297]:ReturnStatement[5224-5233]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4305-4312]:Modifier[5241-5248]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[4313-4317]:SimpleType[5249-5253]"
    }, {
      "left" : "tryFoldImmediateCallToBoundFunction",
      "right" : "tryFoldImmediateCallToBoundFunction",
      "info" : "SimpleName[4318-4353]:SimpleName[5254-5289]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4354-4360]:SingleVariableDeclaration[5290-5296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4362-5479]:Block[5298-6415]"
    }, {
      "left" : "Preconditions.checkState(n.isCall());",
      "right" : "Preconditions.checkState(n.isCall());",
      "info" : "ExpressionStatement[4441-4478]:ExpressionStatement[5377-5414]"
    }, {
      "left" : "Node callTarget = n.getFirstChild();",
      "right" : "Node callTarget = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[4483-4519]:VariableDeclarationStatement[5419-5455]"
    }, {
      "left" : "Bind bind = getCodingConvention().describeFunctionBind(callTarget, false);",
      "right" : "Bind bind = getCodingConvention().describeFunctionBind(callTarget, false);",
      "info" : "VariableDeclarationStatement[4524-4598]:VariableDeclarationStatement[5460-5534]"
    }, {
      "left" : "if (bind != null)",
      "right" : "if (bind != null)",
      "info" : "IfStatement[4603-5461]:IfStatement[5539-6397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4621-5461]:Block[5557-6397]"
    }, {
      "left" : "bind.target.detachFromParent();",
      "right" : "bind.target.detachFromParent();",
      "info" : "ExpressionStatement[4662-4693]:ExpressionStatement[5598-5629]"
    }, {
      "left" : "n.replaceChild(callTarget, bind.target);",
      "right" : "n.replaceChild(callTarget, bind.target);",
      "info" : "ExpressionStatement[4700-4740]:ExpressionStatement[5636-5676]"
    }, {
      "left" : "callTarget = bind.target;",
      "right" : "callTarget = bind.target;",
      "info" : "ExpressionStatement[4747-4772]:ExpressionStatement[5683-5708]"
    }, {
      "left" : "addParameterAfter(bind.parameters, callTarget);",
      "right" : "addParameterAfter(bind.parameters, callTarget);",
      "info" : "ExpressionStatement[4809-4856]:ExpressionStatement[5745-5792]"
    }, {
      "left" : "if (bind.thisValue != null && !NodeUtil.isUndefined(bind.thisValue))",
      "right" : "if (bind.thisValue != null && !NodeUtil.isUndefined(bind.thisValue))",
      "info" : "IfStatement[4927-5429]:IfStatement[5863-6365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4996-5366]:Block[5932-6302]"
    }, {
      "left" : "Node newCallTarget = IR.getprop(\n            callTarget.cloneTree(),\n            IR.string(\"call\").srcref(callTarget));",
      "right" : "Node newCallTarget = IR.getprop(\n            callTarget.cloneTree(),\n            IR.string(\"call\").srcref(callTarget));",
      "info" : "VariableDeclarationStatement[5071-5190]:VariableDeclarationStatement[6007-6126]"
    }, {
      "left" : "n.replaceChild(callTarget, newCallTarget);",
      "right" : "n.replaceChild(callTarget, newCallTarget);",
      "info" : "ExpressionStatement[5199-5241]:ExpressionStatement[6135-6177]"
    }, {
      "left" : "n.addChildAfter(bind.thisValue.cloneTree(), newCallTarget);",
      "right" : "n.addChildAfter(bind.thisValue.cloneTree(), newCallTarget);",
      "info" : "ExpressionStatement[5250-5309]:ExpressionStatement[6186-6245]"
    }, {
      "left" : "n.putBooleanProp(Node.FREE_CALL, false);",
      "right" : "n.putBooleanProp(Node.FREE_CALL, false);",
      "info" : "ExpressionStatement[5318-5358]:ExpressionStatement[6254-6294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5372-5429]:Block[6308-6365]"
    }, {
      "left" : "n.putBooleanProp(Node.FREE_CALL, true);",
      "right" : "n.putBooleanProp(Node.FREE_CALL, true);",
      "info" : "ExpressionStatement[5382-5421]:ExpressionStatement[6318-6357]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[5436-5455]:ExpressionStatement[6372-6391]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[5466-5475]:ReturnStatement[6402-6411]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5483-5490]:Modifier[6419-6426]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5491-5495]:PrimitiveType[6427-6431]"
    }, {
      "left" : "addParameterAfter",
      "right" : "addParameterAfter",
      "info" : "SimpleName[5496-5513]:SimpleName[6432-6449]"
    }, {
      "left" : "Node parameterList",
      "right" : "Node parameterList",
      "info" : "SingleVariableDeclaration[5514-5532]:SingleVariableDeclaration[6450-6468]"
    }, {
      "left" : "Node after",
      "right" : "Node after",
      "info" : "SingleVariableDeclaration[5534-5544]:SingleVariableDeclaration[6470-6480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5546-5784]:Block[6482-6720]"
    }, {
      "left" : "if (parameterList != null)",
      "right" : "if (parameterList != null)",
      "info" : "IfStatement[5552-5780]:IfStatement[6488-6716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5579-5780]:Block[6515-6716]"
    }, {
      "left" : "addParameterAfter(parameterList.getNext(), after);",
      "right" : "addParameterAfter(parameterList.getNext(), after);",
      "info" : "ExpressionStatement[5651-5701]:ExpressionStatement[6587-6637]"
    }, {
      "left" : "after.getParent().addChildAfter(parameterList.cloneTree(), after);",
      "right" : "after.getParent().addChildAfter(parameterList.cloneTree(), after);",
      "info" : "ExpressionStatement[5708-5774]:ExpressionStatement[6644-6710]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5788-5795]:Modifier[6724-6731]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[5796-5800]:SimpleType[6732-6736]"
    }, {
      "left" : "trySplitComma",
      "right" : "trySplitComma",
      "info" : "SimpleName[5801-5814]:SimpleName[6737-6750]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5815-5821]:SingleVariableDeclaration[6751-6757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5823-6572]:Block[6759-7508]"
    }, {
      "left" : "if (late)",
      "right" : "if (late)",
      "info" : "IfStatement[5829-5862]:IfStatement[6765-6798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5839-5862]:Block[6775-6798]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[5847-5856]:ReturnStatement[6783-6792]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[5867-5895]:VariableDeclarationStatement[6803-6831]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[5900-5930]:VariableDeclarationStatement[6836-6866]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[5935-5965]:VariableDeclarationStatement[6871-6901]"
    }, {
      "left" : "if (parent.isExprResult()\n        && !parent.getParent().isLabel())",
      "right" : "if (parent.isExprResult()\n        && !parent.getParent().isLabel())",
      "info" : "IfStatement[5971-6568]:IfStatement[6907-7504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6039-6539]:Block[6975-7475]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[6068-6087]:ExpressionStatement[7004-7023]"
    }, {
      "left" : "parent.replaceChild(n, left);",
      "right" : "parent.replaceChild(n, left);",
      "info" : "ExpressionStatement[6158-6187]:ExpressionStatement[7094-7123]"
    }, {
      "left" : "Node newStatement = IR.exprResult(right);",
      "right" : "Node newStatement = IR.exprResult(right);",
      "info" : "VariableDeclarationStatement[6239-6280]:VariableDeclarationStatement[7175-7216]"
    }, {
      "left" : "newStatement.copyInformationFrom(n);",
      "right" : "newStatement.copyInformationFrom(n);",
      "info" : "ExpressionStatement[6287-6323]:ExpressionStatement[7223-7259]"
    }, {
      "left" : "parent.getParent().addChildAfter(newStatement, parent);",
      "right" : "parent.getParent().addChildAfter(newStatement, parent);",
      "info" : "ExpressionStatement[6433-6488]:ExpressionStatement[7369-7424]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[6495-6514]:ExpressionStatement[7431-7450]"
    }, {
      "left" : "return left;",
      "right" : "return left;",
      "info" : "ReturnStatement[6521-6533]:ReturnStatement[7457-7469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6545-6568]:Block[7481-7504]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[6553-6562]:ReturnStatement[7489-7498]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6630-6637]:Modifier[7566-7573]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[6638-6642]:SimpleType[7574-7578]"
    }, {
      "left" : "tryReplaceUndefined",
      "right" : "tryReplaceUndefined",
      "info" : "SimpleName[6643-6662]:SimpleName[7579-7598]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6663-6669]:SingleVariableDeclaration[7599-7605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6671-7013]:Block[7607-7949]"
    }, {
      "left" : "if (isASTNormalized()\n        && NodeUtil.isUndefined(n)\n        && !NodeUtil.isLValue(n))",
      "right" : "if (isASTNormalized()\n        && NodeUtil.isUndefined(n)\n        && !NodeUtil.isLValue(n))",
      "info" : "IfStatement[6740-6995]:IfStatement[7676-7931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6831-6995]:Block[7767-7931]"
    }, {
      "left" : "Node replacement = NodeUtil.newUndefinedNode(n);",
      "right" : "Node replacement = NodeUtil.newUndefinedNode(n);",
      "info" : "VariableDeclarationStatement[6839-6887]:VariableDeclarationStatement[7775-7823]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacement);",
      "right" : "n.getParent().replaceChild(n, replacement);",
      "info" : "ExpressionStatement[6894-6937]:ExpressionStatement[7830-7873]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[6944-6963]:ExpressionStatement[7880-7899]"
    }, {
      "left" : "return replacement;",
      "right" : "return replacement;",
      "info" : "ReturnStatement[6970-6989]:ReturnStatement[7906-7925]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[7000-7009]:ReturnStatement[7936-7945]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7154-7161]:Modifier[8090-8097]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[7162-7166]:SimpleType[8098-8102]"
    }, {
      "left" : "tryReduceReturn",
      "right" : "tryReduceReturn",
      "info" : "SimpleName[7167-7182]:SimpleName[8103-8118]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7183-7189]:SingleVariableDeclaration[8119-8125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7191-7744]:Block[8127-8680]"
    }, {
      "left" : "Node result = n.getFirstChild();",
      "right" : "Node result = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[7197-7229]:VariableDeclarationStatement[8133-8165]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[7235-7725]:IfStatement[8171-8661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7255-7725]:Block[8191-8661]"
    }, {
      "left" : "switch (result.getType()) {\n        case Token.VOID:\n          Node operand = result.getFirstChild();\n          if (!mayHaveSideEffects(operand)) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n        case Token.NAME:\n          String name = result.getString();\n          if (name.equals(\"undefined\")) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n      }",
      "right" : "switch (result.getType()) {\n        case Token.VOID:\n          Node operand = result.getFirstChild();\n          if (!mayHaveSideEffects(operand)) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n        case Token.NAME:\n          String name = result.getString();\n          if (name.equals(\"undefined\")) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n      }",
      "info" : "SwitchStatement[7263-7719]:SwitchStatement[8199-8655]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[7299-7315]:SwitchCase[8235-8251]"
    }, {
      "left" : "Node operand = result.getFirstChild();",
      "right" : "Node operand = result.getFirstChild();",
      "info" : "VariableDeclarationStatement[7326-7364]:VariableDeclarationStatement[8262-8300]"
    }, {
      "left" : "if (!mayHaveSideEffects(operand))",
      "right" : "if (!mayHaveSideEffects(operand))",
      "info" : "IfStatement[7375-7488]:IfStatement[8311-8424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7409-7488]:Block[8345-8424]"
    }, {
      "left" : "n.removeFirstChild();",
      "right" : "n.removeFirstChild();",
      "info" : "ExpressionStatement[7423-7444]:ExpressionStatement[8359-8380]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[7457-7476]:ExpressionStatement[8393-8412]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7499-7505]:BreakStatement[8435-8441]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[7514-7530]:SwitchCase[8450-8466]"
    }, {
      "left" : "String name = result.getString();",
      "right" : "String name = result.getString();",
      "info" : "VariableDeclarationStatement[7541-7574]:VariableDeclarationStatement[8477-8510]"
    }, {
      "left" : "if (name.equals(\"undefined\"))",
      "right" : "if (name.equals(\"undefined\"))",
      "info" : "IfStatement[7585-7694]:IfStatement[8521-8630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7615-7694]:Block[8551-8630]"
    }, {
      "left" : "n.removeFirstChild();",
      "right" : "n.removeFirstChild();",
      "info" : "ExpressionStatement[7629-7650]:ExpressionStatement[8565-8586]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[7663-7682]:ExpressionStatement[8599-8618]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7705-7711]:BreakStatement[8641-8647]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[7731-7740]:ReturnStatement[8667-8676]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8148-8155]:Modifier[9084-9091]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8156-8160]:SimpleType[9092-9096]"
    }, {
      "left" : "tryFoldStandardConstructors",
      "right" : "tryFoldStandardConstructors",
      "info" : "SimpleName[8161-8188]:SimpleName[9097-9124]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8189-8195]:SingleVariableDeclaration[9125-9131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8197-8754]:Block[9133-9690]"
    }, {
      "left" : "Preconditions.checkState(n.isNew());",
      "right" : "Preconditions.checkState(n.isNew());",
      "info" : "ExpressionStatement[8203-8239]:ExpressionStatement[9139-9175]"
    }, {
      "left" : "if (isASTNormalized())",
      "right" : "if (isASTNormalized())",
      "info" : "IfStatement[8412-8735]:IfStatement[9348-9671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8435-8735]:Block[9371-9671]"
    }, {
      "left" : "if (n.getFirstChild().isName())",
      "right" : "if (n.getFirstChild().isName())",
      "info" : "IfStatement[8443-8729]:IfStatement[9379-9665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8475-8729]:Block[9411-9665]"
    }, {
      "left" : "String className = n.getFirstChild().getString();",
      "right" : "String className = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[8485-8534]:VariableDeclarationStatement[9421-9470]"
    }, {
      "left" : "if (STANDARD_OBJECT_CONSTRUCTORS.contains(className))",
      "right" : "if (STANDARD_OBJECT_CONSTRUCTORS.contains(className))",
      "info" : "IfStatement[8543-8721]:IfStatement[9479-9657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8597-8721]:Block[9533-9657]"
    }, {
      "left" : "n.setType(Token.CALL);",
      "right" : "n.setType(Token.CALL);",
      "info" : "ExpressionStatement[8609-8631]:ExpressionStatement[9545-9567]"
    }, {
      "left" : "n.putBooleanProp(Node.FREE_CALL, true);",
      "right" : "n.putBooleanProp(Node.FREE_CALL, true);",
      "info" : "ExpressionStatement[8642-8681]:ExpressionStatement[9578-9617]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[8692-8711]:ExpressionStatement[9628-9647]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8741-8750]:ReturnStatement[9677-9686]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8918-8925]:Modifier[9854-9861]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8926-8930]:SimpleType[9862-9866]"
    }, {
      "left" : "tryFoldLiteralConstructor",
      "right" : "tryFoldLiteralConstructor",
      "info" : "SimpleName[8931-8956]:SimpleName[9867-9892]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8957-8963]:SingleVariableDeclaration[9893-9899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8965-10622]:Block[9901-11558]"
    }, {
      "left" : "Preconditions.checkArgument(n.isCall()\n        || n.isNew());",
      "right" : "Preconditions.checkArgument(n.isCall()\n        || n.isNew());",
      "info" : "ExpressionStatement[8971-9032]:ExpressionStatement[9907-9968]"
    }, {
      "left" : "Node constructorNameNode = n.getFirstChild();",
      "right" : "Node constructorNameNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[9038-9083]:VariableDeclarationStatement[9974-10019]"
    }, {
      "left" : "Node newLiteralNode = null;",
      "right" : "Node newLiteralNode = null;",
      "info" : "VariableDeclarationStatement[9089-9116]:VariableDeclarationStatement[10025-10052]"
    }, {
      "left" : "if (isASTNormalized() && Token.NAME == constructorNameNode.getType())",
      "right" : "if (isASTNormalized() && Token.NAME == constructorNameNode.getType())",
      "info" : "IfStatement[9314-10604]:IfStatement[10250-11540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9384-10604]:Block[10320-11540]"
    }, {
      "left" : "String className = constructorNameNode.getString();",
      "right" : "String className = constructorNameNode.getString();",
      "info" : "VariableDeclarationStatement[9393-9444]:VariableDeclarationStatement[10329-10380]"
    }, {
      "left" : "if (\"RegExp\".equals(className))",
      "right" : "if (\"RegExp\".equals(className))",
      "info" : "IfStatement[9452-10598]:IfStatement[10388-11534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9484-9591]:Block[10420-10527]"
    }, {
      "left" : "return tryFoldRegularExpressionConstructor(n);",
      "right" : "return tryFoldRegularExpressionConstructor(n);",
      "info" : "ReturnStatement[9537-9583]:ReturnStatement[10473-10519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9597-10598]:Block[10533-11534]"
    }, {
      "left" : "boolean constructorHasArgs = constructorNameNode.getNext() != null;",
      "right" : "boolean constructorHasArgs = constructorNameNode.getNext() != null;",
      "info" : "VariableDeclarationStatement[9607-9674]:VariableDeclarationStatement[10543-10610]"
    }, {
      "left" : "if (\"Object\".equals(className) && !constructorHasArgs)",
      "right" : "if (\"Object\".equals(className) && !constructorHasArgs)",
      "info" : "IfStatement[9684-10421]:IfStatement[10620-11357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9739-9826]:Block[10675-10762]"
    }, {
      "left" : "newLiteralNode = IR.objectlit();",
      "right" : "newLiteralNode = IR.objectlit();",
      "info" : "ExpressionStatement[9784-9816]:ExpressionStatement[10720-10752]"
    }, {
      "left" : "if (\"Array\".equals(className))",
      "right" : "if (\"Array\".equals(className))",
      "info" : "IfStatement[9832-10421]:IfStatement[10768-11357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9863-10421]:Block[10799-11357]"
    }, {
      "left" : "Node arg0 = constructorNameNode.getNext();",
      "right" : "Node arg0 = constructorNameNode.getNext();",
      "info" : "VariableDeclarationStatement[9937-9979]:VariableDeclarationStatement[10873-10915]"
    }, {
      "left" : "FoldArrayAction action = isSafeToFoldArrayConstructor(arg0);",
      "right" : "FoldArrayAction action = isSafeToFoldArrayConstructor(arg0);",
      "info" : "VariableDeclarationStatement[9990-10050]:VariableDeclarationStatement[10926-10986]"
    }, {
      "left" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS ||\n              action == FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS)",
      "right" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS ||\n              action == FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS)",
      "info" : "IfStatement[10062-10411]:IfStatement[10998-11347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10185-10411]:Block[11121-11347]"
    }, {
      "left" : "newLiteralNode = IR.arraylit();",
      "right" : "newLiteralNode = IR.arraylit();",
      "info" : "ExpressionStatement[10199-10230]:ExpressionStatement[11135-11166]"
    }, {
      "left" : "n.removeChildren();",
      "right" : "n.removeChildren();",
      "info" : "ExpressionStatement[10243-10262]:ExpressionStatement[11179-11198]"
    }, {
      "left" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS)",
      "right" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS)",
      "info" : "IfStatement[10275-10399]:IfStatement[11211-11335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10329-10399]:Block[11265-11335]"
    }, {
      "left" : "newLiteralNode.addChildrenToFront(arg0);",
      "right" : "newLiteralNode.addChildrenToFront(arg0);",
      "info" : "ExpressionStatement[10345-10385]:ExpressionStatement[11281-11321]"
    }, {
      "left" : "if (newLiteralNode != null)",
      "right" : "if (newLiteralNode != null)",
      "info" : "IfStatement[10431-10590]:IfStatement[11367-11526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10459-10590]:Block[11395-11526]"
    }, {
      "left" : "n.getParent().replaceChild(n, newLiteralNode);",
      "right" : "n.getParent().replaceChild(n, newLiteralNode);",
      "info" : "ExpressionStatement[10471-10517]:ExpressionStatement[11407-11453]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[10528-10547]:ExpressionStatement[11464-11483]"
    }, {
      "left" : "return newLiteralNode;",
      "right" : "return newLiteralNode;",
      "info" : "ReturnStatement[10558-10580]:ReturnStatement[11494-11516]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[10609-10618]:ReturnStatement[11545-11554]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11053-11060]:Modifier[11989-11996]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11061-11067]:Modifier[11997-12003]"
    }, {
      "left" : "FoldArrayAction",
      "right" : "FoldArrayAction",
      "info" : "SimpleType[11068-11083]:SimpleType[12004-12019]"
    }, {
      "left" : "isSafeToFoldArrayConstructor",
      "right" : "isSafeToFoldArrayConstructor",
      "info" : "SimpleName[11084-11112]:SimpleName[12020-12048]"
    }, {
      "left" : "Node arg",
      "right" : "Node arg",
      "info" : "SingleVariableDeclaration[11113-11121]:SingleVariableDeclaration[12049-12057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11123-11943]:Block[12059-12879]"
    }, {
      "left" : "FoldArrayAction action = FoldArrayAction.NOT_SAFE_TO_FOLD;",
      "right" : "FoldArrayAction action = FoldArrayAction.NOT_SAFE_TO_FOLD;",
      "info" : "VariableDeclarationStatement[11129-11187]:VariableDeclarationStatement[12065-12123]"
    }, {
      "left" : "if (arg == null)",
      "right" : "if (arg == null)",
      "info" : "IfStatement[11193-11920]:IfStatement[12129-12856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11210-11275]:Block[12146-12211]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "info" : "ExpressionStatement[11218-11269]:ExpressionStatement[12154-12205]"
    }, {
      "left" : "if (arg.getNext() != null)",
      "right" : "if (arg.getNext() != null)",
      "info" : "IfStatement[11281-11920]:IfStatement[12217-12856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11308-11370]:Block[12244-12306]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "info" : "ExpressionStatement[11316-11364]:ExpressionStatement[12252-12300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11376-11920]:Block[12312-12856]"
    }, {
      "left" : "switch (arg.getType()) {\n        case Token.STRING:\n          // \"Array('a')\" --> \"['a']\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        case Token.NUMBER:\n          // \"Array(0)\" --> \"[]\"\n          if (arg.getDouble() == 0) {\n            action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;\n          }\n          break;\n        case Token.ARRAYLIT:\n          // \"Array([args])\" --> \"[[args]]\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        default:\n      }",
      "right" : "switch (arg.getType()) {\n        case Token.STRING:\n          // \"Array('a')\" --> \"['a']\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        case Token.NUMBER:\n          // \"Array(0)\" --> \"[]\"\n          if (arg.getDouble() == 0) {\n            action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;\n          }\n          break;\n        case Token.ARRAYLIT:\n          // \"Array([args])\" --> \"[[args]]\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        default:\n      }",
      "info" : "SwitchStatement[11384-11914]:SwitchStatement[12320-12850]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[11417-11435]:SwitchCase[12353-12371]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "info" : "ExpressionStatement[11484-11532]:ExpressionStatement[12420-12468]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11543-11549]:BreakStatement[12479-12485]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[11558-11576]:SwitchCase[12494-12512]"
    }, {
      "left" : "if (arg.getDouble() == 0)",
      "right" : "if (arg.getDouble() == 0)",
      "info" : "IfStatement[11620-11723]:IfStatement[12556-12659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11646-11723]:Block[12582-12659]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "info" : "ExpressionStatement[11660-11711]:ExpressionStatement[12596-12647]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11734-11740]:BreakStatement[12670-12676]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[11749-11769]:SwitchCase[12685-12705]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "info" : "ExpressionStatement[11824-11872]:ExpressionStatement[12760-12808]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11883-11889]:BreakStatement[12819-12825]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11898-11906]:SwitchCase[12834-12842]"
    }, {
      "left" : "return action;",
      "right" : "return action;",
      "info" : "ReturnStatement[11925-11939]:ReturnStatement[12861-12875]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11947-11954]:Modifier[12883-12890]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[11955-11959]:SimpleType[12891-12895]"
    }, {
      "left" : "tryFoldRegularExpressionConstructor",
      "right" : "tryFoldRegularExpressionConstructor",
      "info" : "SimpleName[11960-11995]:SimpleName[12896-12931]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11996-12002]:SingleVariableDeclaration[12932-12938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12004-13948]:Block[12940-14884]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[12010-12038]:VariableDeclarationStatement[12946-12974]"
    }, {
      "left" : "Node constructor = n.getFirstChild();",
      "right" : "Node constructor = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[12043-12080]:VariableDeclarationStatement[12979-13016]"
    }, {
      "left" : "Node pattern = constructor.getNext();",
      "right" : "Node pattern = constructor.getNext();",
      "info" : "VariableDeclarationStatement[12085-12122]:VariableDeclarationStatement[13021-13058]"
    }, {
      "left" : "Node flags = null != pattern ? pattern.getNext() : null;",
      "right" : "Node flags = null != pattern ? pattern.getNext() : null;",
      "info" : "VariableDeclarationStatement[12146-12202]:VariableDeclarationStatement[13082-13138]"
    }, {
      "left" : "if (null == pattern || (null != flags && null != flags.getNext()))",
      "right" : "if (null == pattern || (null != flags && null != flags.getNext()))",
      "info" : "IfStatement[12220-12349]:IfStatement[13156-13285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12287-12349]:Block[13223-13285]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[12334-12343]:ReturnStatement[13270-13279]"
    }, {
      "left" : "if (// is pattern folded\n        pattern.isString()\n        // make sure empty pattern doesn't fold to //\n        && !\"\".equals(pattern.getString())\n\n        // NOTE(nicksantos): Make sure that the regexp isn't longer than\n        // 100 chars, or it blows up the regexp parser in Opera 9.2.\n        && pattern.getString().length() < 100\n\n        && (null == flags || flags.isString())\n        // don't escape patterns with Unicode escapes since Safari behaves badly\n        // (read can't parse or crashes) on regex literals with Unicode escapes\n        && (isEcmaScript5OrGreater()\n            || !containsUnicodeEscape(pattern.getString())))",
      "right" : "if (// is pattern folded\n        pattern.isString()\n        // make sure empty pattern doesn't fold to //\n        && !\"\".equals(pattern.getString())\n\n        // NOTE(nicksantos): Make sure that the regexp isn't longer than\n        // 100 chars, or it blows up the regexp parser in Opera 9.2.\n        && pattern.getString().length() < 100\n\n        && (null == flags || flags.isString())\n        // don't escape patterns with Unicode escapes since Safari behaves badly\n        // (read can't parse or crashes) on regex literals with Unicode escapes\n        && (isEcmaScript5OrGreater()\n            || !containsUnicodeEscape(pattern.getString())))",
      "info" : "IfStatement[12355-13929]:IfStatement[13291-14865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13000-13929]:Block[13936-14865]"
    }, {
      "left" : "pattern = makeForwardSlashBracketSafe(pattern);",
      "right" : "pattern = makeForwardSlashBracketSafe(pattern);",
      "info" : "ExpressionStatement[13261-13308]:ExpressionStatement[14197-14244]"
    }, {
      "left" : "Node regexLiteral;",
      "right" : "Node regexLiteral;",
      "info" : "VariableDeclarationStatement[13316-13334]:VariableDeclarationStatement[14252-14270]"
    }, {
      "left" : "if (null == flags || \"\".equals(flags.getString()))",
      "right" : "if (null == flags || \"\".equals(flags.getString()))",
      "info" : "IfStatement[13341-13825]:IfStatement[14277-14761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13392-13472]:Block[14328-14408]"
    }, {
      "left" : "regexLiteral = IR.regexp(pattern);",
      "right" : "regexLiteral = IR.regexp(pattern);",
      "info" : "ExpressionStatement[13430-13464]:ExpressionStatement[14366-14400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13478-13825]:Block[14414-14761]"
    }, {
      "left" : "if (!areValidRegexpFlags(flags.getString()))",
      "right" : "if (!areValidRegexpFlags(flags.getString()))",
      "info" : "IfStatement[13518-13653]:IfStatement[14454-14589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13563-13653]:Block[14499-14589]"
    }, {
      "left" : "report(INVALID_REGULAR_EXPRESSION_FLAGS, flags);",
      "right" : "report(INVALID_REGULAR_EXPRESSION_FLAGS, flags);",
      "info" : "ExpressionStatement[13575-13623]:ExpressionStatement[14511-14559]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13634-13643]:ReturnStatement[14570-14579]"
    }, {
      "left" : "if (!areSafeFlagsToFold(flags.getString()))",
      "right" : "if (!areSafeFlagsToFold(flags.getString()))",
      "info" : "IfStatement[13662-13737]:IfStatement[14598-14673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13706-13737]:Block[14642-14673]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13718-13727]:ReturnStatement[14654-14663]"
    }, {
      "left" : "n.removeChild(flags);",
      "right" : "n.removeChild(flags);",
      "info" : "ExpressionStatement[13746-13767]:ExpressionStatement[14682-14703]"
    }, {
      "left" : "regexLiteral = IR.regexp(pattern, flags);",
      "right" : "regexLiteral = IR.regexp(pattern, flags);",
      "info" : "ExpressionStatement[13776-13817]:ExpressionStatement[14712-14753]"
    }, {
      "left" : "parent.replaceChild(n, regexLiteral);",
      "right" : "parent.replaceChild(n, regexLiteral);",
      "info" : "ExpressionStatement[13833-13870]:ExpressionStatement[14769-14806]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[13877-13896]:ExpressionStatement[14813-14832]"
    }, {
      "left" : "return regexLiteral;",
      "right" : "return regexLiteral;",
      "info" : "ReturnStatement[13903-13923]:ReturnStatement[14839-14859]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13935-13944]:ReturnStatement[14871-14880]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13952-13959]:Modifier[14888-14895]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[13960-13964]:SimpleType[14896-14900]"
    }, {
      "left" : "reduceTrueFalse",
      "right" : "reduceTrueFalse",
      "info" : "SimpleName[13965-13980]:SimpleName[14901-14916]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13981-13987]:SingleVariableDeclaration[14917-14923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13989-14213]:Block[14925-15149]"
    }, {
      "left" : "if (late)",
      "right" : "if (late)",
      "info" : "IfStatement[13995-14195]:IfStatement[14931-15131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14005-14195]:Block[14941-15131]"
    }, {
      "left" : "Node not = IR.not(IR.number(n.isTrue() ? 0 : 1));",
      "right" : "Node not = IR.not(IR.number(n.isTrue() ? 0 : 1));",
      "info" : "VariableDeclarationStatement[14013-14062]:VariableDeclarationStatement[14949-14998]"
    }, {
      "left" : "not.copyInformationFromForTree(n);",
      "right" : "not.copyInformationFromForTree(n);",
      "info" : "ExpressionStatement[14069-14103]:ExpressionStatement[15005-15039]"
    }, {
      "left" : "n.getParent().replaceChild(n, not);",
      "right" : "n.getParent().replaceChild(n, not);",
      "info" : "ExpressionStatement[14110-14145]:ExpressionStatement[15046-15081]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[14152-14171]:ExpressionStatement[15088-15107]"
    }, {
      "left" : "return not;",
      "right" : "return not;",
      "info" : "ReturnStatement[14178-14189]:ReturnStatement[15114-15125]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[14200-14209]:ReturnStatement[15136-15145]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14217-14224]:Modifier[15153-15160]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14225-14229]:SimpleType[15161-15165]"
    }, {
      "left" : "tryMinimizeArrayLiteral",
      "right" : "tryMinimizeArrayLiteral",
      "info" : "SimpleName[14230-14253]:SimpleName[15166-15189]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14254-14260]:SingleVariableDeclaration[15190-15196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14262-14549]:Block[15198-15485]"
    }, {
      "left" : "boolean allStrings = true;",
      "right" : "boolean allStrings = true;",
      "info" : "VariableDeclarationStatement[14268-14294]:VariableDeclarationStatement[15204-15230]"
    }, {
      "left" : "for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext())",
      "right" : "for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext())",
      "info" : "ForStatement[14299-14440]:ForStatement[15235-15376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14368-14440]:Block[15304-15376]"
    }, {
      "left" : "if (!cur.isString())",
      "right" : "if (!cur.isString())",
      "info" : "IfStatement[14376-14434]:IfStatement[15312-15370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14397-14434]:Block[15333-15370]"
    }, {
      "left" : "allStrings = false;",
      "right" : "allStrings = false;",
      "info" : "ExpressionStatement[14407-14426]:ExpressionStatement[15343-15362]"
    }, {
      "left" : "if (allStrings)",
      "right" : "if (allStrings)",
      "info" : "IfStatement[14446-14545]:IfStatement[15382-15481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14462-14516]:Block[15398-15452]"
    }, {
      "left" : "return tryMinimizeStringArrayLiteral(n);",
      "right" : "return tryMinimizeStringArrayLiteral(n);",
      "info" : "ReturnStatement[14470-14510]:ReturnStatement[15406-15446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14522-14545]:Block[15458-15481]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[14530-14539]:ReturnStatement[15466-15475]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14553-14560]:Modifier[15489-15496]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14561-14565]:SimpleType[15497-15501]"
    }, {
      "left" : "tryMinimizeStringArrayLiteral",
      "right" : "tryMinimizeStringArrayLiteral",
      "info" : "SimpleName[14566-14595]:SimpleName[15502-15531]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14596-14602]:SingleVariableDeclaration[15532-15538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14604-15593]:Block[15540-16529]"
    }, {
      "left" : "if (!late)",
      "right" : "if (!late)",
      "info" : "IfStatement[14610-14644]:IfStatement[15546-15580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14621-14644]:Block[15557-15580]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[14629-14638]:ReturnStatement[15565-15574]"
    }, {
      "left" : "int numElements = n.getChildCount();",
      "right" : "int numElements = n.getChildCount();",
      "info" : "VariableDeclarationStatement[14650-14686]:VariableDeclarationStatement[15586-15622]"
    }, {
      "left" : "int saving = numElements * 2 - STRING_SPLIT_OVERHEAD;",
      "right" : "int saving = numElements * 2 - STRING_SPLIT_OVERHEAD;",
      "info" : "VariableDeclarationStatement[14729-14782]:VariableDeclarationStatement[15665-15718]"
    }, {
      "left" : "if (saving <= 0)",
      "right" : "if (saving <= 0)",
      "info" : "IfStatement[14787-14827]:IfStatement[15723-15763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14804-14827]:Block[15740-15763]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[14812-14821]:ReturnStatement[15748-15757]"
    }, {
      "left" : "String[] strings = new String[n.getChildCount()];",
      "right" : "String[] strings = new String[n.getChildCount()];",
      "info" : "VariableDeclarationStatement[14833-14882]:VariableDeclarationStatement[15769-15818]"
    }, {
      "left" : "int idx = 0;",
      "right" : "int idx = 0;",
      "info" : "VariableDeclarationStatement[14887-14899]:VariableDeclarationStatement[15823-15835]"
    }, {
      "left" : "for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext())",
      "right" : "for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext())",
      "info" : "ForStatement[14904-15020]:ForStatement[15840-15956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14973-15020]:Block[15909-15956]"
    }, {
      "left" : "strings[idx++] = cur.getString();",
      "right" : "strings[idx++] = cur.getString();",
      "info" : "ExpressionStatement[14981-15014]:ExpressionStatement[15917-15950]"
    }, {
      "left" : "String delimiter = pickDelimiter(strings);",
      "right" : "String delimiter = pickDelimiter(strings);",
      "info" : "VariableDeclarationStatement[15151-15193]:VariableDeclarationStatement[16087-16129]"
    }, {
      "left" : "if (delimiter != null)",
      "right" : "if (delimiter != null)",
      "info" : "IfStatement[15198-15575]:IfStatement[16134-16511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15221-15575]:Block[16157-16511]"
    }, {
      "left" : "String template = Joiner.on(delimiter).join(strings);",
      "right" : "String template = Joiner.on(delimiter).join(strings);",
      "info" : "VariableDeclarationStatement[15229-15282]:VariableDeclarationStatement[16165-16218]"
    }, {
      "left" : "Node call = IR.call(\n          IR.getprop(\n              IR.string(template),\n              IR.string(\"split\")),\n          IR.string(\"\" + delimiter));",
      "right" : "Node call = IR.call(\n          IR.getprop(\n              IR.string(template),\n              IR.string(\"split\")),\n          IR.string(\"\" + delimiter));",
      "info" : "VariableDeclarationStatement[15289-15439]:VariableDeclarationStatement[16225-16375]"
    }, {
      "left" : "call.copyInformationFromForTree(n);",
      "right" : "call.copyInformationFromForTree(n);",
      "info" : "ExpressionStatement[15446-15481]:ExpressionStatement[16382-16417]"
    }, {
      "left" : "n.getParent().replaceChild(n, call);",
      "right" : "n.getParent().replaceChild(n, call);",
      "info" : "ExpressionStatement[15488-15524]:ExpressionStatement[16424-16460]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[15531-15550]:ExpressionStatement[16467-16486]"
    }, {
      "left" : "return call;",
      "right" : "return call;",
      "info" : "ReturnStatement[15557-15569]:ReturnStatement[16493-16505]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15580-15589]:ReturnStatement[16516-16525]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15768-15775]:Modifier[16704-16711]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15776-15782]:Modifier[16712-16718]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[15783-15789]:SimpleType[16719-16725]"
    }, {
      "left" : "pickDelimiter",
      "right" : "pickDelimiter",
      "info" : "SimpleName[15790-15803]:SimpleName[16726-16739]"
    }, {
      "left" : "String[] strings",
      "right" : "String[] strings",
      "info" : "SingleVariableDeclaration[15804-15820]:SingleVariableDeclaration[16740-16756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15822-16341]:Block[16758-17277]"
    }, {
      "left" : "boolean allLength1 = true;",
      "right" : "boolean allLength1 = true;",
      "info" : "VariableDeclarationStatement[15828-15854]:VariableDeclarationStatement[16764-16790]"
    }, {
      "left" : "for (String s : strings)",
      "right" : "for (String s : strings)",
      "info" : "EnhancedForStatement[15859-15971]:EnhancedForStatement[16795-16907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15884-15971]:Block[16820-16907]"
    }, {
      "left" : "if (s.length() != 1)",
      "right" : "if (s.length() != 1)",
      "info" : "IfStatement[15892-15965]:IfStatement[16828-16901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15913-15965]:Block[16849-16901]"
    }, {
      "left" : "allLength1 = false;",
      "right" : "allLength1 = false;",
      "info" : "ExpressionStatement[15923-15942]:ExpressionStatement[16859-16878]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15951-15957]:BreakStatement[16887-16893]"
    }, {
      "left" : "if (allLength1)",
      "right" : "if (allLength1)",
      "info" : "IfStatement[15977-16017]:IfStatement[16913-16953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15993-16017]:Block[16929-16953]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[16001-16011]:ReturnStatement[16937-16947]"
    }, {
      "left" : "String[] delimiters = new String[]{\" \", \";\", \",\", \"{\", \"}\", null};",
      "right" : "String[] delimiters = new String[]{\" \", \";\", \",\", \"{\", \"}\", null};",
      "info" : "VariableDeclarationStatement[16023-16089]:VariableDeclarationStatement[16959-17025]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[16094-16104]:VariableDeclarationStatement[17030-17040]"
    }, {
      "left" : "NEXT_DELIMITER: for (; delimiters[i] != null; i++) {\n      for (String cur : strings) {\n        if (cur.contains(delimiters[i])) {\n          continue NEXT_DELIMITER;\n        }\n      }\n      break;\n    }",
      "right" : "NEXT_DELIMITER: for (; delimiters[i] != null; i++) {\n      for (String cur : strings) {\n        if (cur.contains(delimiters[i])) {\n          continue NEXT_DELIMITER;\n        }\n      }\n      break;\n    }",
      "info" : "LabeledStatement[16109-16311]:LabeledStatement[17045-17247]"
    }, {
      "left" : "for (; delimiters[i] != null; i++)",
      "right" : "for (; delimiters[i] != null; i++)",
      "info" : "ForStatement[16125-16311]:ForStatement[17061-17247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16160-16311]:Block[17096-17247]"
    }, {
      "left" : "for (String cur : strings)",
      "right" : "for (String cur : strings)",
      "info" : "EnhancedForStatement[16168-16292]:EnhancedForStatement[17104-17228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16195-16292]:Block[17131-17228]"
    }, {
      "left" : "if (cur.contains(delimiters[i]))",
      "right" : "if (cur.contains(delimiters[i]))",
      "info" : "IfStatement[16205-16284]:IfStatement[17141-17220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16238-16284]:Block[17174-17220]"
    }, {
      "left" : "continue NEXT_DELIMITER;",
      "right" : "continue NEXT_DELIMITER;",
      "info" : "ContinueStatement[16250-16274]:ContinueStatement[17186-17210]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16299-16305]:BreakStatement[17235-17241]"
    }, {
      "left" : "return delimiters[i];",
      "right" : "return delimiters[i];",
      "info" : "ReturnStatement[16316-16337]:ReturnStatement[17252-17273]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16794-16801]:Modifier[17730-17737]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16802-16808]:Modifier[17738-17744]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16809-16816]:PrimitiveType[17745-17752]"
    }, {
      "left" : "areValidRegexpFlags",
      "right" : "areValidRegexpFlags",
      "info" : "SimpleName[16817-16836]:SimpleName[17753-17772]"
    }, {
      "left" : "String flags",
      "right" : "String flags",
      "info" : "SingleVariableDeclaration[16837-16849]:SingleVariableDeclaration[17773-17785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16851-16909]:Block[17787-17845]"
    }, {
      "left" : "return REGEXP_FLAGS_RE.matcher(flags).matches();",
      "right" : "return REGEXP_FLAGS_RE.matcher(flags).matches();",
      "info" : "ReturnStatement[16857-16905]:ReturnStatement[17793-17841]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17719-17726]:Modifier[18655-18662]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17727-17734]:PrimitiveType[18663-18670]"
    }, {
      "left" : "areSafeFlagsToFold",
      "right" : "areSafeFlagsToFold",
      "info" : "SimpleName[17735-17753]:SimpleName[18671-18689]"
    }, {
      "left" : "String flags",
      "right" : "String flags",
      "info" : "SingleVariableDeclaration[17754-17766]:SingleVariableDeclaration[18690-18702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17768-17836]:Block[18704-18772]"
    }, {
      "left" : "return isEcmaScript5OrGreater() || flags.indexOf('g') < 0;",
      "right" : "return isEcmaScript5OrGreater() || flags.indexOf('g') < 0;",
      "info" : "ReturnStatement[17774-17832]:ReturnStatement[18710-18768]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17926-17933]:Modifier[18862-18869]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17934-17940]:Modifier[18870-18876]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17941-17945]:SimpleType[18877-18881]"
    }, {
      "left" : "makeForwardSlashBracketSafe",
      "right" : "makeForwardSlashBracketSafe",
      "info" : "SimpleName[17946-17973]:SimpleName[18882-18909]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17974-17980]:SingleVariableDeclaration[18910-18916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17982-20119]:Block[18918-21055]"
    }, {
      "left" : "String s = n.getString();",
      "right" : "String s = n.getString();",
      "info" : "VariableDeclarationStatement[17988-18013]:VariableDeclarationStatement[18924-18949]"
    }, {
      "left" : "StringBuilder sb = null;",
      "right" : "StringBuilder sb = null;",
      "info" : "VariableDeclarationStatement[18060-18084]:VariableDeclarationStatement[18996-19020]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[18089-18101]:VariableDeclarationStatement[19025-19037]"
    }, {
      "left" : "boolean isEscaped = false, inCharset = false;",
      "right" : "boolean isEscaped = false, inCharset = false;",
      "info" : "VariableDeclarationStatement[18106-18151]:VariableDeclarationStatement[19042-19087]"
    }, {
      "left" : "for (int i = 0; i < s.length(); ++i)",
      "right" : "for (int i = 0; i < s.length(); ++i)",
      "info" : "ForStatement[18156-19985]:ForStatement[19092-20921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18193-19985]:Block[19129-20921]"
    }, {
      "left" : "char ch = s.charAt(i);",
      "right" : "char ch = s.charAt(i);",
      "info" : "VariableDeclarationStatement[18201-18223]:VariableDeclarationStatement[19137-19159]"
    }, {
      "left" : "switch (ch) {\n        case '\\\\':\n          isEscaped = !isEscaped;\n          continue;\n        case '/':\n          // Escape a literal forward slash if it is not already escaped and is\n          // not inside a character set.\n          //     new RegExp('/') -> /\\//\n          // but the following do not need extra escaping\n          //     new RegExp('\\\\/') -> /\\//\n          //     new RegExp('[/]') -> /[/]/\n          if (!isEscaped && !inCharset) {\n            if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n            sb.append(s, pos, i).append('\\\\');\n            pos = i;\n          }\n          break;\n        case '[':\n          if (!isEscaped) {\n            inCharset = true;\n          }\n          break;\n        case ']':\n          if (!isEscaped) {\n            inCharset = false;\n          }\n          break;\n        case '\\r': case '\\n': case '\\u2028': case '\\u2029':\n          // LineTerminators cannot appear raw inside a regular\n          // expression literal.\n          // They can't appear legally in a quoted string, but when\n          // the quoted string from\n          //     new RegExp('\\n')\n          // reaches here, the quoting has been removed.\n          // Requote just these code-points.\n          if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n          if (isEscaped) {\n            sb.append(s, pos, i - 1);\n          } else {\n            sb.append(s, pos, i);\n          }\n          switch (ch) {\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\u2028': sb.append(\"\\\\u2028\"); break;\n            case '\\u2029': sb.append(\"\\\\u2029\"); break;\n          }\n          pos = i + 1;\n          break;\n      }",
      "right" : "switch (ch) {\n        case '\\\\':\n          isEscaped = !isEscaped;\n          continue;\n        case '/':\n          // Escape a literal forward slash if it is not already escaped and is\n          // not inside a character set.\n          //     new RegExp('/') -> /\\//\n          // but the following do not need extra escaping\n          //     new RegExp('\\\\/') -> /\\//\n          //     new RegExp('[/]') -> /[/]/\n          if (!isEscaped && !inCharset) {\n            if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n            sb.append(s, pos, i).append('\\\\');\n            pos = i;\n          }\n          break;\n        case '[':\n          if (!isEscaped) {\n            inCharset = true;\n          }\n          break;\n        case ']':\n          if (!isEscaped) {\n            inCharset = false;\n          }\n          break;\n        case '\\r': case '\\n': case '\\u2028': case '\\u2029':\n          // LineTerminators cannot appear raw inside a regular\n          // expression literal.\n          // They can't appear legally in a quoted string, but when\n          // the quoted string from\n          //     new RegExp('\\n')\n          // reaches here, the quoting has been removed.\n          // Requote just these code-points.\n          if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n          if (isEscaped) {\n            sb.append(s, pos, i - 1);\n          } else {\n            sb.append(s, pos, i);\n          }\n          switch (ch) {\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\u2028': sb.append(\"\\\\u2028\"); break;\n            case '\\u2029': sb.append(\"\\\\u2029\"); break;\n          }\n          pos = i + 1;\n          break;\n      }",
      "info" : "SwitchStatement[18230-19954]:SwitchStatement[19166-20890]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[18252-18262]:SwitchCase[19188-19198]"
    }, {
      "left" : "isEscaped = !isEscaped;",
      "right" : "isEscaped = !isEscaped;",
      "info" : "ExpressionStatement[18273-18296]:ExpressionStatement[19209-19232]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[18307-18316]:ContinueStatement[19243-19252]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[18325-18334]:SwitchCase[19261-19270]"
    }, {
      "left" : "if (!isEscaped && !inCharset)",
      "right" : "if (!isEscaped && !inCharset)",
      "info" : "IfStatement[18652-18836]:IfStatement[19588-19772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18682-18836]:Block[19618-19772]"
    }, {
      "left" : "if (null == sb)",
      "right" : "if (null == sb)",
      "info" : "IfStatement[18696-18756]:IfStatement[19632-19692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18712-18756]:Block[19648-19692]"
    }, {
      "left" : "sb = new StringBuilder(s.length() + 16);",
      "right" : "sb = new StringBuilder(s.length() + 16);",
      "info" : "ExpressionStatement[18714-18754]:ExpressionStatement[19650-19690]"
    }, {
      "left" : "sb.append(s, pos, i).append('\\\\');",
      "right" : "sb.append(s, pos, i).append('\\\\');",
      "info" : "ExpressionStatement[18769-18803]:ExpressionStatement[19705-19739]"
    }, {
      "left" : "pos = i;",
      "right" : "pos = i;",
      "info" : "ExpressionStatement[18816-18824]:ExpressionStatement[19752-19760]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18847-18853]:BreakStatement[19783-19789]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[18862-18871]:SwitchCase[19798-19807]"
    }, {
      "left" : "if (!isEscaped)",
      "right" : "if (!isEscaped)",
      "info" : "IfStatement[18882-18941]:IfStatement[19818-19877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18898-18941]:Block[19834-19877]"
    }, {
      "left" : "inCharset = true;",
      "right" : "inCharset = true;",
      "info" : "ExpressionStatement[18912-18929]:ExpressionStatement[19848-19865]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18952-18958]:BreakStatement[19888-19894]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[18967-18976]:SwitchCase[19903-19912]"
    }, {
      "left" : "if (!isEscaped)",
      "right" : "if (!isEscaped)",
      "info" : "IfStatement[18987-19047]:IfStatement[19923-19983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19003-19047]:Block[19939-19983]"
    }, {
      "left" : "inCharset = false;",
      "right" : "inCharset = false;",
      "info" : "ExpressionStatement[19017-19035]:ExpressionStatement[19953-19971]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19058-19064]:BreakStatement[19994-20000]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[19073-19083]:SwitchCase[20009-20019]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[19084-19094]:SwitchCase[20020-20030]"
    }, {
      "left" : "case '\\u2028':",
      "right" : "case '\\u2028':",
      "info" : "SwitchCase[19095-19109]:SwitchCase[20031-20045]"
    }, {
      "left" : "case '\\u2029':",
      "right" : "case '\\u2029':",
      "info" : "SwitchCase[19110-19124]:SwitchCase[20046-20060]"
    }, {
      "left" : "if (null == sb)",
      "right" : "if (null == sb)",
      "info" : "IfStatement[19472-19532]:IfStatement[20408-20468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19488-19532]:Block[20424-20468]"
    }, {
      "left" : "sb = new StringBuilder(s.length() + 16);",
      "right" : "sb = new StringBuilder(s.length() + 16);",
      "info" : "ExpressionStatement[19490-19530]:ExpressionStatement[20426-20466]"
    }, {
      "left" : "if (isEscaped)",
      "right" : "if (isEscaped)",
      "info" : "IfStatement[19543-19662]:IfStatement[20479-20598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19558-19609]:Block[20494-20545]"
    }, {
      "left" : "sb.append(s, pos, i - 1);",
      "right" : "sb.append(s, pos, i - 1);",
      "info" : "ExpressionStatement[19572-19597]:ExpressionStatement[20508-20533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19615-19662]:Block[20551-20598]"
    }, {
      "left" : "sb.append(s, pos, i);",
      "right" : "sb.append(s, pos, i);",
      "info" : "ExpressionStatement[19629-19650]:ExpressionStatement[20565-20586]"
    }, {
      "left" : "switch (ch) {\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\u2028': sb.append(\"\\\\u2028\"); break;\n            case '\\u2029': sb.append(\"\\\\u2029\"); break;\n          }",
      "right" : "switch (ch) {\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\u2028': sb.append(\"\\\\u2028\"); break;\n            case '\\u2029': sb.append(\"\\\\u2029\"); break;\n          }",
      "info" : "SwitchStatement[19673-19906]:SwitchStatement[20609-20842]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[19699-19709]:SwitchCase[20635-20645]"
    }, {
      "left" : "sb.append(\"\\\\r\");",
      "right" : "sb.append(\"\\\\r\");",
      "info" : "ExpressionStatement[19710-19727]:ExpressionStatement[20646-20663]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19728-19734]:BreakStatement[20664-20670]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[19747-19757]:SwitchCase[20683-20693]"
    }, {
      "left" : "sb.append(\"\\\\n\");",
      "right" : "sb.append(\"\\\\n\");",
      "info" : "ExpressionStatement[19758-19775]:ExpressionStatement[20694-20711]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19776-19782]:BreakStatement[20712-20718]"
    }, {
      "left" : "case '\\u2028':",
      "right" : "case '\\u2028':",
      "info" : "SwitchCase[19795-19809]:SwitchCase[20731-20745]"
    }, {
      "left" : "sb.append(\"\\\\u2028\");",
      "right" : "sb.append(\"\\\\u2028\");",
      "info" : "ExpressionStatement[19810-19831]:ExpressionStatement[20746-20767]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19832-19838]:BreakStatement[20768-20774]"
    }, {
      "left" : "case '\\u2029':",
      "right" : "case '\\u2029':",
      "info" : "SwitchCase[19851-19865]:SwitchCase[20787-20801]"
    }, {
      "left" : "sb.append(\"\\\\u2029\");",
      "right" : "sb.append(\"\\\\u2029\");",
      "info" : "ExpressionStatement[19866-19887]:ExpressionStatement[20802-20823]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19888-19894]:BreakStatement[20824-20830]"
    }, {
      "left" : "pos = i + 1;",
      "right" : "pos = i + 1;",
      "info" : "ExpressionStatement[19917-19929]:ExpressionStatement[20853-20865]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19940-19946]:BreakStatement[20876-20882]"
    }, {
      "left" : "isEscaped = false;",
      "right" : "isEscaped = false;",
      "info" : "ExpressionStatement[19961-19979]:ExpressionStatement[20897-20915]"
    }, {
      "left" : "if (null == sb)",
      "right" : "if (null == sb)",
      "info" : "IfStatement[19991-20032]:IfStatement[20927-20968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20007-20032]:Block[20943-20968]"
    }, {
      "left" : "return n.cloneTree();",
      "right" : "return n.cloneTree();",
      "info" : "ReturnStatement[20009-20030]:ReturnStatement[20945-20966]"
    }, {
      "left" : "sb.append(s, pos, s.length());",
      "right" : "sb.append(s, pos, s.length());",
      "info" : "ExpressionStatement[20038-20068]:ExpressionStatement[20974-21004]"
    }, {
      "left" : "return IR.string(sb.toString()).srcref(n);",
      "right" : "return IR.string(sb.toString()).srcref(n);",
      "info" : "ReturnStatement[20073-20115]:ReturnStatement[21009-21051]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20268-20274]:Modifier[21204-21210]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20275-20282]:PrimitiveType[21211-21218]"
    }, {
      "left" : "containsUnicodeEscape",
      "right" : "containsUnicodeEscape",
      "info" : "SimpleName[20283-20304]:SimpleName[21219-21240]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[20305-20313]:SingleVariableDeclaration[21241-21249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20315-20730]:Block[21251-21666]"
    }, {
      "left" : "String esc = REGEXP_ESCAPER.regexpEscape(s);",
      "right" : "String esc = REGEXP_ESCAPER.regexpEscape(s);",
      "info" : "VariableDeclarationStatement[20321-20365]:VariableDeclarationStatement[21257-21301]"
    }, {
      "left" : "for (int i = -1; (i = esc.indexOf(\"\\\\u\", i + 1)) >= 0)",
      "right" : "for (int i = -1; (i = esc.indexOf(\"\\\\u\", i + 1)) >= 0)",
      "info" : "ForStatement[20370-20708]:ForStatement[21306-21644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20426-20708]:Block[21362-21644]"
    }, {
      "left" : "int nSlashes = 0;",
      "right" : "int nSlashes = 0;",
      "info" : "VariableDeclarationStatement[20434-20451]:VariableDeclarationStatement[21370-21387]"
    }, {
      "left" : "while (i - nSlashes > 0 && '\\\\' == esc.charAt(i - nSlashes - 1))",
      "right" : "while (i - nSlashes > 0 && '\\\\' == esc.charAt(i - nSlashes - 1))",
      "info" : "WhileStatement[20458-20552]:WhileStatement[21394-21488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20523-20552]:Block[21459-21488]"
    }, {
      "left" : "++nSlashes;",
      "right" : "++nSlashes;",
      "info" : "ExpressionStatement[20533-20544]:ExpressionStatement[21469-21480]"
    }, {
      "left" : "if (0 == (nSlashes & 1))",
      "right" : "if (0 == (nSlashes & 1))",
      "info" : "IfStatement[20661-20702]:IfStatement[21597-21638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20686-20702]:Block[21622-21638]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20688-20700]:ReturnStatement[21624-21636]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20713-20726]:ReturnStatement[21649-21662]"
    } ]
  },
  "interFileMappings" : { }
}