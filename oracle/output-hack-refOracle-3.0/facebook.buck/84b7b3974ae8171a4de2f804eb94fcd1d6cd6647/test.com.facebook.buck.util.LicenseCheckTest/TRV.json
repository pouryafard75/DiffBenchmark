{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public void ensureAllSrcFilesHaveTheApacheLicense() throws IOException",
      "right" : "public void ensureAllSrcFilesHaveTheApacheLicense() throws IOException",
      "info" : "MethodDeclaration[1570-1788]:MethodDeclaration[1579-1797]"
    }, {
      "left" : "JavaCopyrightTraversal",
      "right" : "JavaCopyrightTraversal",
      "info" : "TypeDeclaration[1792-3421]:TypeDeclaration[1801-3430]"
    }, {
      "left" : "private static final Pattern LICENSE_FRAGMENT = Pattern.compile(\n        // TODO(simons): This is very lame.\n        // The newline character doesn't match \"\\w\", \"\\\\n\" so do a non-greedy match until the next\n        // part of the copyright.\n        \"^/\\\\\\\\*.*?\" +\n        \"\\\\\\\\* Copyright 20\\\\d\\\\d-present Facebook, Inc\\\\..*?\" +\n        \"\\\\\\\\* Licensed under the Apache License, Version 2.0 \\\\(the \\\"License\\\"\\\\); you may.*\",\n        Pattern.MULTILINE | Pattern.DOTALL);",
      "right" : "private static final Pattern LICENSE_FRAGMENT = Pattern.compile(\n        // TODO(simons): This is very lame.\n        // The newline character doesn't match \"\\w\", \"\\\\n\" so do a non-greedy match until the next\n        // part of the copyright.\n        \"^/\\\\\\\\*.*?\" +\n        \"\\\\\\\\* Copyright 20\\\\d\\\\d-present Facebook, Inc\\\\..*?\" +\n        \"\\\\\\\\* Licensed under the Apache License, Version 2.0 \\\\(the \\\"License\\\"\\\\); you may.*\",\n        Pattern.MULTILINE | Pattern.DOTALL);",
      "info" : "FieldDeclaration[1869-2340]:FieldDeclaration[1878-2349]"
    }, {
      "left" : "private static final Path TEST_DATA = Paths.get(\"testdata\");",
      "right" : "private static final Path TEST_DATA = Paths.get(\"testdata\");",
      "info" : "FieldDeclaration[2346-2406]:FieldDeclaration[2355-2415]"
    }, {
      "left" : "private final boolean ignoreTestData;",
      "right" : "private final boolean ignoreTestData;",
      "info" : "FieldDeclaration[2412-2449]:FieldDeclaration[2421-2458]"
    }, {
      "left" : "public JavaCopyrightTraversal(File root, boolean ignoreTestData)",
      "right" : "public JavaCopyrightTraversal(File root, boolean ignoreTestData)",
      "info" : "MethodDeclaration[2455-2590]:MethodDeclaration[2464-2599]"
    }, {
      "left" : "public void visit(File file, String relativePath)",
      "right" : "public void visit(File file, String relativePath)",
      "info" : "MethodDeclaration[2596-3417]:MethodDeclaration[2605-3426]"
    } ],
    "mappings" : [
 {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[1570-1575]:MarkerAnnotation[1579-1584]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1578-1584]:Modifier[1587-1593]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1585-1589]:PrimitiveType[1594-1598]"
    }, {
      "left" : "ensureAllSrcFilesHaveTheApacheLicense",
      "right" : "ensureAllSrcFilesHaveTheApacheLicense",
      "info" : "SimpleName[1590-1627]:SimpleName[1599-1636]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[1637-1648]:SimpleType[1646-1657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1649-1788]:Block[1658-1797]"
    }, {
      "left" : "new JavaCopyrightTraversal(new File(\"src\"), false).traverse();",
      "right" : "new JavaCopyrightTraversal(new File(\"src\"), false).traverse();",
      "info" : "ExpressionStatement[1655-1717]:ExpressionStatement[1664-1726]"
    }, {
      "left" : "new JavaCopyrightTraversal(new File(\"test\"), true).traverse();",
      "right" : "new JavaCopyrightTraversal(new File(\"test\"), true).traverse();",
      "info" : "ExpressionStatement[1722-1784]:ExpressionStatement[1731-1793]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1792-1799]:Modifier[1801-1808]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1800-1806]:Modifier[1809-1815]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1807-1812]:TYPE_DECLARATION_KIND[1816-1821]"
    }, {
      "left" : "JavaCopyrightTraversal",
      "right" : "JavaCopyrightTraversal",
      "info" : "SimpleName[1813-1835]:SimpleName[1822-1844]"
    }, {
      "left" : "DirectoryTraversal",
      "right" : "DirectoryTraversal",
      "info" : "SimpleType[1844-1862]:SimpleType[1853-1871]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2455-2461]:Modifier[2464-2470]"
    }, {
      "left" : "JavaCopyrightTraversal",
      "right" : "JavaCopyrightTraversal",
      "info" : "SimpleName[2462-2484]:SimpleName[2471-2493]"
    }, {
      "left" : "File root",
      "right" : "File root",
      "info" : "SingleVariableDeclaration[2485-2494]:SingleVariableDeclaration[2494-2503]"
    }, {
      "left" : "boolean ignoreTestData",
      "right" : "boolean ignoreTestData",
      "info" : "SingleVariableDeclaration[2496-2518]:SingleVariableDeclaration[2505-2527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2520-2590]:Block[2529-2599]"
    }, {
      "left" : "super(root);",
      "right" : "super(root);",
      "info" : "SuperConstructorInvocation[2528-2540]:SuperConstructorInvocation[2537-2549]"
    }, {
      "left" : "this.ignoreTestData = ignoreTestData;",
      "right" : "this.ignoreTestData = ignoreTestData;",
      "info" : "ExpressionStatement[2547-2584]:ExpressionStatement[2556-2593]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2596-2605]:MarkerAnnotation[2605-2614]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2610-2616]:Modifier[2619-2625]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2617-2621]:PrimitiveType[2626-2630]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[2622-2627]:SimpleName[2631-2636]"
    }, {
      "left" : "File file",
      "right" : "File file",
      "info" : "SingleVariableDeclaration[2628-2637]:SingleVariableDeclaration[2637-2646]"
    }, {
      "left" : "String relativePath",
      "right" : "String relativePath",
      "info" : "SingleVariableDeclaration[2639-2658]:SingleVariableDeclaration[2648-2667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2660-3417]:Block[2669-3426]"
    }, {
      "left" : "if (!\"java\".equals(Files.getFileExtension(relativePath)) ||\n          // Ignore dangling symlinks.\n          !file.exists() ||\n          NON_APACHE_LICENSE_WHITELIST.contains(relativePath) ||\n          relativePath.startsWith(\"com/facebook/buck/cli/quickstart/android/\"))",
      "right" : "if (!\"java\".equals(Files.getFileExtension(relativePath)) ||\n          // Ignore dangling symlinks.\n          !file.exists() ||\n          NON_APACHE_LICENSE_WHITELIST.contains(relativePath) ||\n          relativePath.startsWith(\"com/facebook/buck/cli/quickstart/android/\"))",
      "info" : "IfStatement[2668-2965]:IfStatement[2677-2974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2940-2965]:Block[2949-2974]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[2950-2957]:ReturnStatement[2959-2966]"
    }, {
      "left" : "if (ignoreTestData)",
      "right" : "if (ignoreTestData)",
      "info" : "IfStatement[2973-3129]:IfStatement[2982-3138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2993-3129]:Block[3002-3138]"
    }, {
      "left" : "for (Path path : file.toPath())",
      "right" : "for (Path path : file.toPath())",
      "info" : "EnhancedForStatement[3003-3121]:EnhancedForStatement[3012-3130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3035-3121]:Block[3044-3130]"
    }, {
      "left" : "if (TEST_DATA.equals(path))",
      "right" : "if (TEST_DATA.equals(path))",
      "info" : "IfStatement[3048-3111]:IfStatement[3057-3120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3076-3111]:Block[3085-3120]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3091-3098]:ReturnStatement[3100-3107]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3137-3411]:TryStatement[3146-3420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3141-3330]:Block[3150-3339]"
    }, {
      "left" : "String asString = Files.toString(file, Charsets.UTF_8);",
      "right" : "String asString = Files.toString(file, Charsets.UTF_8);",
      "info" : "VariableDeclarationStatement[3151-3206]:VariableDeclarationStatement[3160-3215]"
    }, {
      "left" : "assertTrue(\"Check license of: \" + relativePath,\n            LICENSE_FRAGMENT.matcher(asString).matches());",
      "right" : "assertTrue(\"Check license of: \" + relativePath,\n            LICENSE_FRAGMENT.matcher(asString).matches());",
      "info" : "ExpressionStatement[3216-3322]:ExpressionStatement[3225-3331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3353-3411]:Block[3362-3420]"
    }, {
      "left" : "fail(\"Unable to read: \" + relativePath);",
      "right" : "fail(\"Unable to read: \" + relativePath);",
      "info" : "ExpressionStatement[3363-3403]:ExpressionStatement[3372-3412]"
    } ]
  },
  "interFileMappings" : { }
}