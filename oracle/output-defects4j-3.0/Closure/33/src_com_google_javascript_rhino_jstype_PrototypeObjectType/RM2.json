{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PrototypeObjectType",
      "right" : "PrototypeObjectType",
      "info" : "TypeDeclaration[2045-17678]:TypeDeclaration[2045-17728]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[2800-2848]:FieldDeclaration[2800-2848]"
    }, {
      "left" : "private final String className;",
      "right" : "private final String className;",
      "info" : "FieldDeclaration[2852-2883]:FieldDeclaration[2852-2883]"
    }, {
      "left" : "private final Map<String, Property> properties;",
      "right" : "private final Map<String, Property> properties;",
      "info" : "FieldDeclaration[2886-2933]:FieldDeclaration[2886-2933]"
    }, {
      "left" : "private final boolean nativeType;",
      "right" : "private final boolean nativeType;",
      "info" : "FieldDeclaration[2936-2969]:FieldDeclaration[2936-2969]"
    }, {
      "left" : "private ObjectType implicitPrototypeFallback;",
      "right" : "private ObjectType implicitPrototypeFallback;",
      "info" : "FieldDeclaration[3186-3231]:FieldDeclaration[3186-3231]"
    }, {
      "left" : "private FunctionType ownerFunction = null;",
      "right" : "private FunctionType ownerFunction = null;",
      "info" : "FieldDeclaration[3454-3496]:FieldDeclaration[3454-3496]"
    }, {
      "left" : "private boolean prettyPrint = false;",
      "right" : "private boolean prettyPrint = false;",
      "info" : "FieldDeclaration[3608-3644]:FieldDeclaration[3608-3644]"
    }, {
      "left" : "private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;",
      "right" : "private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;",
      "info" : "FieldDeclaration[3648-3707]:FieldDeclaration[3648-3707]"
    }, {
      "left" : "PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype)",
      "right" : "PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype)",
      "info" : "MethodDeclaration[3711-4293]:MethodDeclaration[3711-4293]"
    }, {
      "left" : "PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType)",
      "right" : "PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType)",
      "info" : "MethodDeclaration[4297-4886]:MethodDeclaration[4297-4886]"
    }, {
      "left" : "public Property getSlot(String name)",
      "right" : "public Property getSlot(String name)",
      "info" : "MethodDeclaration[4890-5433]:MethodDeclaration[4890-5433]"
    }, {
      "left" : "public int getPropertiesCount()",
      "right" : "public int getPropertiesCount()",
      "info" : "MethodDeclaration[5437-5916]:MethodDeclaration[5437-5916]"
    }, {
      "left" : "public boolean hasProperty(String propertyName)",
      "right" : "public boolean hasProperty(String propertyName)",
      "info" : "MethodDeclaration[5920-6088]:MethodDeclaration[5920-6088]"
    }, {
      "left" : "public boolean hasOwnProperty(String propertyName)",
      "right" : "public boolean hasOwnProperty(String propertyName)",
      "info" : "MethodDeclaration[6092-6209]:MethodDeclaration[6092-6209]"
    }, {
      "left" : "public Set<String> getOwnPropertyNames()",
      "right" : "public Set<String> getOwnPropertyNames()",
      "info" : "MethodDeclaration[6213-6303]:MethodDeclaration[6213-6303]"
    }, {
      "left" : "public boolean isPropertyTypeDeclared(String property)",
      "right" : "public boolean isPropertyTypeDeclared(String property)",
      "info" : "MethodDeclaration[6307-6513]:MethodDeclaration[6307-6513]"
    }, {
      "left" : "void collectPropertyNames(Set<String> props)",
      "right" : "void collectPropertyNames(Set<String> props)",
      "info" : "MethodDeclaration[6517-6809]:MethodDeclaration[6517-6809]"
    }, {
      "left" : "public boolean isPropertyTypeInferred(String property)",
      "right" : "public boolean isPropertyTypeInferred(String property)",
      "info" : "MethodDeclaration[6813-7018]:MethodDeclaration[6813-7018]"
    }, {
      "left" : "public JSType getPropertyType(String property)",
      "right" : "public JSType getPropertyType(String property)",
      "info" : "MethodDeclaration[7022-7247]:MethodDeclaration[7022-7247]"
    }, {
      "left" : "public boolean isPropertyInExterns(String propertyName)",
      "right" : "public boolean isPropertyInExterns(String propertyName)",
      "info" : "MethodDeclaration[7251-7616]:MethodDeclaration[7251-7616]"
    }, {
      "left" : "boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode)",
      "right" : "boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode)",
      "info" : "MethodDeclaration[7620-8160]:MethodDeclaration[7620-8160]"
    }, {
      "left" : "public boolean removeProperty(String name)",
      "right" : "public boolean removeProperty(String name)",
      "info" : "MethodDeclaration[8164-8268]:MethodDeclaration[8164-8268]"
    }, {
      "left" : "public Node getPropertyNode(String propertyName)",
      "right" : "public Node getPropertyNode(String propertyName)",
      "info" : "MethodDeclaration[8272-8619]:MethodDeclaration[8272-8619]"
    }, {
      "left" : "public JSDocInfo getOwnPropertyJSDocInfo(String propertyName)",
      "right" : "public JSDocInfo getOwnPropertyJSDocInfo(String propertyName)",
      "info" : "MethodDeclaration[8623-8824]:MethodDeclaration[8623-8824]"
    }, {
      "left" : "public void setPropertyJSDocInfo(String propertyName, JSDocInfo info)",
      "right" : "public void setPropertyJSDocInfo(String propertyName, JSDocInfo info)",
      "info" : "MethodDeclaration[8828-9546]:MethodDeclaration[8828-9546]"
    }, {
      "left" : "public boolean matchesNumberContext()",
      "right" : "public boolean matchesNumberContext()",
      "info" : "MethodDeclaration[9550-9752]:MethodDeclaration[9550-9752]"
    }, {
      "left" : "public boolean matchesStringContext()",
      "right" : "public boolean matchesStringContext()",
      "info" : "MethodDeclaration[9756-10023]:MethodDeclaration[9756-10023]"
    }, {
      "left" : "private boolean hasOverridenNativeProperty(String propertyName)",
      "right" : "private boolean hasOverridenNativeProperty(String propertyName)",
      "info" : "MethodDeclaration[10027-10688]:MethodDeclaration[10027-10688]"
    }, {
      "left" : "public JSType unboxesTo()",
      "right" : "public JSType unboxesTo()",
      "info" : "MethodDeclaration[10692-11060]:MethodDeclaration[10692-11060]"
    }, {
      "left" : "public boolean matchesObjectContext()",
      "right" : "public boolean matchesObjectContext()",
      "info" : "MethodDeclaration[11064-11136]:MethodDeclaration[11064-11136]"
    }, {
      "left" : "public boolean canBeCalled()",
      "right" : "public boolean canBeCalled()",
      "info" : "MethodDeclaration[11140-11213]:MethodDeclaration[11140-11213]"
    }, {
      "left" : "String toStringHelper(boolean forAnnotations)",
      "right" : "String toStringHelper(boolean forAnnotations)",
      "info" : "MethodDeclaration[11217-12462]:MethodDeclaration[11217-12462]"
    }, {
      "left" : "void setPrettyPrint(boolean prettyPrint)",
      "right" : "void setPrettyPrint(boolean prettyPrint)",
      "info" : "MethodDeclaration[12466-12548]:MethodDeclaration[12466-12548]"
    }, {
      "left" : "boolean isPrettyPrint()",
      "right" : "boolean isPrettyPrint()",
      "info" : "MethodDeclaration[12552-12605]:MethodDeclaration[12552-12605]"
    }, {
      "left" : "public FunctionType getConstructor()",
      "right" : "public FunctionType getConstructor()",
      "info" : "MethodDeclaration[12609-12680]:MethodDeclaration[12609-12680]"
    }, {
      "left" : "public ObjectType getImplicitPrototype()",
      "right" : "public ObjectType getImplicitPrototype()",
      "info" : "MethodDeclaration[12684-12780]:MethodDeclaration[12684-12780]"
    }, {
      "left" : "final void setImplicitPrototype(ObjectType implicitPrototype)",
      "right" : "final void setImplicitPrototype(ObjectType implicitPrototype)",
      "info" : "MethodDeclaration[12784-13203]:MethodDeclaration[12784-13203]"
    }, {
      "left" : "public String getReferenceName()",
      "right" : "public String getReferenceName()",
      "info" : "MethodDeclaration[13207-13450]:MethodDeclaration[13207-13450]"
    }, {
      "left" : "public boolean hasReferenceName()",
      "right" : "public boolean hasReferenceName()",
      "info" : "MethodDeclaration[13454-13560]:MethodDeclaration[13454-13560]"
    }, {
      "left" : "public boolean isSubtype(JSType that)",
      "right" : "public boolean isSubtype(JSType that)",
      "info" : "MethodDeclaration[13564-15120]:MethodDeclaration[13564-15120]"
    }, {
      "left" : "private boolean implicitPrototypeChainIsUnknown()",
      "right" : "private boolean implicitPrototypeChainIsUnknown()",
      "info" : "MethodDeclaration[15124-15366]:MethodDeclaration[15124-15366]"
    }, {
      "left" : "public boolean hasCachedValues()",
      "right" : "public boolean hasCachedValues()",
      "info" : "MethodDeclaration[15370-15456]:MethodDeclaration[15370-15456]"
    }, {
      "left" : "public boolean isNativeObjectType()",
      "right" : "public boolean isNativeObjectType()",
      "info" : "MethodDeclaration[15460-15580]:MethodDeclaration[15460-15580]"
    }, {
      "left" : "void setOwnerFunction(FunctionType type)",
      "right" : "void setOwnerFunction(FunctionType type)",
      "info" : "MethodDeclaration[15584-15725]:MethodDeclaration[15584-15725]"
    }, {
      "left" : "public FunctionType getOwnerFunction()",
      "right" : "public FunctionType getOwnerFunction()",
      "info" : "MethodDeclaration[15729-15811]:MethodDeclaration[15729-15811]"
    }, {
      "left" : "public Iterable<ObjectType> getCtorImplementedInterfaces()",
      "right" : "public Iterable<ObjectType> getCtorImplementedInterfaces()",
      "info" : "MethodDeclaration[15815-16026]:MethodDeclaration[15815-16026]"
    }, {
      "left" : "public Iterable<ObjectType> getCtorExtendedInterfaces()",
      "right" : "public Iterable<ObjectType> getCtorExtendedInterfaces()",
      "info" : "MethodDeclaration[16030-16235]:MethodDeclaration[16030-16235]"
    }, {
      "left" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[16239-16685]:MethodDeclaration[16239-16685]"
    }, {
      "left" : "public void matchConstraint(ObjectType constraintObj)",
      "right" : "public void matchConstraint(ObjectType constraintObj)",
      "info" : "MethodDeclaration[16689-17676]:MethodDeclaration[16689-17726]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2751-2756]:TYPE_DECLARATION_KIND[2751-2756]"
    }, {
      "left" : "PrototypeObjectType",
      "right" : "PrototypeObjectType",
      "info" : "SimpleName[2757-2776]:SimpleName[2757-2776]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[2785-2795]:SimpleType[2785-2795]"
    }, {
      "left" : "PrototypeObjectType",
      "right" : "PrototypeObjectType",
      "info" : "SimpleName[4132-4151]:SimpleName[4132-4151]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[4152-4175]:SingleVariableDeclaration[4152-4175]"
    }, {
      "left" : "String className",
      "right" : "String className",
      "info" : "SingleVariableDeclaration[4177-4193]:SingleVariableDeclaration[4177-4193]"
    }, {
      "left" : "ObjectType implicitPrototype",
      "right" : "ObjectType implicitPrototype",
      "info" : "SingleVariableDeclaration[4201-4229]:SingleVariableDeclaration[4201-4229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4231-4293]:Block[4231-4293]"
    }, {
      "left" : "this(registry, className, implicitPrototype, false);",
      "right" : "this(registry, className, implicitPrototype, false);",
      "info" : "ConstructorInvocation[4237-4289]:ConstructorInvocation[4237-4289]"
    }, {
      "left" : "PrototypeObjectType",
      "right" : "PrototypeObjectType",
      "info" : "SimpleName[4422-4441]:SimpleName[4422-4441]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[4442-4465]:SingleVariableDeclaration[4442-4465]"
    }, {
      "left" : "String className",
      "right" : "String className",
      "info" : "SingleVariableDeclaration[4467-4483]:SingleVariableDeclaration[4467-4483]"
    }, {
      "left" : "ObjectType implicitPrototype",
      "right" : "ObjectType implicitPrototype",
      "info" : "SingleVariableDeclaration[4491-4519]:SingleVariableDeclaration[4491-4519]"
    }, {
      "left" : "boolean nativeType",
      "right" : "boolean nativeType",
      "info" : "SingleVariableDeclaration[4521-4539]:SingleVariableDeclaration[4521-4539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4541-4886]:Block[4541-4886]"
    }, {
      "left" : "super(registry);",
      "right" : "super(registry);",
      "info" : "SuperConstructorInvocation[4547-4563]:SuperConstructorInvocation[4547-4563]"
    }, {
      "left" : "this.properties = Maps.newTreeMap();",
      "right" : "this.properties = Maps.newTreeMap();",
      "info" : "ExpressionStatement[4568-4604]:ExpressionStatement[4568-4604]"
    }, {
      "left" : "this.className = className;",
      "right" : "this.className = className;",
      "info" : "ExpressionStatement[4609-4636]:ExpressionStatement[4609-4636]"
    }, {
      "left" : "this.nativeType = nativeType;",
      "right" : "this.nativeType = nativeType;",
      "info" : "ExpressionStatement[4641-4670]:ExpressionStatement[4641-4670]"
    }, {
      "left" : "if (nativeType || implicitPrototype != null)",
      "right" : "if (nativeType || implicitPrototype != null)",
      "info" : "IfStatement[4675-4882]:IfStatement[4675-4882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4720-4774]:Block[4720-4774]"
    }, {
      "left" : "setImplicitPrototype(implicitPrototype);",
      "right" : "setImplicitPrototype(implicitPrototype);",
      "info" : "ExpressionStatement[4728-4768]:ExpressionStatement[4728-4768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4780-4882]:Block[4780-4882]"
    }, {
      "left" : "setImplicitPrototype(\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));",
      "right" : "setImplicitPrototype(\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));",
      "info" : "ExpressionStatement[4788-4876]:ExpressionStatement[4788-4876]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4890-4899]:MarkerAnnotation[4890-4899]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4902-4908]:Modifier[4902-4908]"
    }, {
      "left" : "Property",
      "right" : "Property",
      "info" : "SimpleType[4909-4917]:SimpleType[4909-4917]"
    }, {
      "left" : "getSlot",
      "right" : "getSlot",
      "info" : "SimpleName[4918-4925]:SimpleName[4918-4925]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[4926-4937]:SingleVariableDeclaration[4926-4937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4939-5433]:Block[4939-5433]"
    }, {
      "left" : "if (properties.containsKey(name))",
      "right" : "if (properties.containsKey(name))",
      "info" : "IfStatement[4945-5021]:IfStatement[4945-5021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4979-5021]:Block[4979-5021]"
    }, {
      "left" : "return properties.get(name);",
      "right" : "return properties.get(name);",
      "info" : "ReturnStatement[4987-5015]:ReturnStatement[4987-5015]"
    }, {
      "left" : "ObjectType implicitPrototype = getImplicitPrototype();",
      "right" : "ObjectType implicitPrototype = getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[5026-5080]:VariableDeclarationStatement[5026-5080]"
    }, {
      "left" : "if (implicitPrototype != null)",
      "right" : "if (implicitPrototype != null)",
      "info" : "IfStatement[5085-5233]:IfStatement[5085-5233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5116-5233]:Block[5116-5233]"
    }, {
      "left" : "Property prop = implicitPrototype.getSlot(name);",
      "right" : "Property prop = implicitPrototype.getSlot(name);",
      "info" : "VariableDeclarationStatement[5124-5172]:VariableDeclarationStatement[5124-5172]"
    }, {
      "left" : "if (prop != null)",
      "right" : "if (prop != null)",
      "info" : "IfStatement[5179-5227]:IfStatement[5179-5227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5197-5227]:Block[5197-5227]"
    }, {
      "left" : "return prop;",
      "right" : "return prop;",
      "info" : "ReturnStatement[5207-5219]:ReturnStatement[5207-5219]"
    }, {
      "left" : "for (ObjectType interfaceType : getCtorExtendedInterfaces())",
      "right" : "for (ObjectType interfaceType : getCtorExtendedInterfaces())",
      "info" : "EnhancedForStatement[5238-5412]:EnhancedForStatement[5238-5412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5299-5412]:Block[5299-5412]"
    }, {
      "left" : "Property prop = interfaceType.getSlot(name);",
      "right" : "Property prop = interfaceType.getSlot(name);",
      "info" : "VariableDeclarationStatement[5307-5351]:VariableDeclarationStatement[5307-5351]"
    }, {
      "left" : "if (prop != null)",
      "right" : "if (prop != null)",
      "info" : "IfStatement[5358-5406]:IfStatement[5358-5406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5376-5406]:Block[5376-5406]"
    }, {
      "left" : "return prop;",
      "right" : "return prop;",
      "info" : "ReturnStatement[5386-5398]:ReturnStatement[5386-5398]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5417-5429]:ReturnStatement[5417-5429]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5500-5509]:MarkerAnnotation[5500-5509]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5512-5518]:Modifier[5512-5518]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5519-5522]:PrimitiveType[5519-5522]"
    }, {
      "left" : "getPropertiesCount",
      "right" : "getPropertiesCount",
      "info" : "SimpleName[5523-5541]:SimpleName[5523-5541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5544-5916]:Block[5544-5916]"
    }, {
      "left" : "ObjectType implicitPrototype = getImplicitPrototype();",
      "right" : "ObjectType implicitPrototype = getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[5550-5604]:VariableDeclarationStatement[5550-5604]"
    }, {
      "left" : "if (implicitPrototype == null)",
      "right" : "if (implicitPrototype == null)",
      "info" : "IfStatement[5609-5684]:IfStatement[5609-5684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5640-5684]:Block[5640-5684]"
    }, {
      "left" : "return this.properties.size();",
      "right" : "return this.properties.size();",
      "info" : "ReturnStatement[5648-5678]:ReturnStatement[5648-5678]"
    }, {
      "left" : "int localCount = 0;",
      "right" : "int localCount = 0;",
      "info" : "VariableDeclarationStatement[5689-5708]:VariableDeclarationStatement[5689-5708]"
    }, {
      "left" : "for (String property : properties.keySet())",
      "right" : "for (String property : properties.keySet())",
      "info" : "EnhancedForStatement[5713-5848]:EnhancedForStatement[5713-5848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5757-5848]:Block[5757-5848]"
    }, {
      "left" : "if (!implicitPrototype.hasProperty(property))",
      "right" : "if (!implicitPrototype.hasProperty(property))",
      "info" : "IfStatement[5765-5842]:IfStatement[5765-5842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5811-5842]:Block[5811-5842]"
    }, {
      "left" : "localCount++;",
      "right" : "localCount++;",
      "info" : "ExpressionStatement[5821-5834]:ExpressionStatement[5821-5834]"
    }, {
      "left" : "return implicitPrototype.getPropertiesCount() + localCount;",
      "right" : "return implicitPrototype.getPropertiesCount() + localCount;",
      "info" : "ReturnStatement[5853-5912]:ReturnStatement[5853-5912]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5920-5929]:MarkerAnnotation[5920-5929]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5932-5938]:Modifier[5932-5938]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5939-5946]:PrimitiveType[5939-5946]"
    }, {
      "left" : "hasProperty",
      "right" : "hasProperty",
      "info" : "SimpleName[5947-5958]:SimpleName[5947-5958]"
    }, {
      "left" : "String propertyName",
      "right" : "String propertyName",
      "info" : "SingleVariableDeclaration[5959-5978]:SingleVariableDeclaration[5959-5978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5980-6088]:Block[5980-6088]"
    }, {
      "left" : "return isUnknownType() || getSlot(propertyName) != null;",
      "right" : "return isUnknownType() || getSlot(propertyName) != null;",
      "info" : "ReturnStatement[6028-6084]:ReturnStatement[6028-6084]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6092-6101]:MarkerAnnotation[6092-6101]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6104-6110]:Modifier[6104-6110]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6111-6118]:PrimitiveType[6111-6118]"
    }, {
      "left" : "hasOwnProperty",
      "right" : "hasOwnProperty",
      "info" : "SimpleName[6119-6133]:SimpleName[6119-6133]"
    }, {
      "left" : "String propertyName",
      "right" : "String propertyName",
      "info" : "SingleVariableDeclaration[6134-6153]:SingleVariableDeclaration[6134-6153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6155-6209]:Block[6155-6209]"
    }, {
      "left" : "return properties.get(propertyName) != null;",
      "right" : "return properties.get(propertyName) != null;",
      "info" : "ReturnStatement[6161-6205]:ReturnStatement[6161-6205]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6213-6222]:MarkerAnnotation[6213-6222]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6225-6231]:Modifier[6225-6231]"
    }, {
      "left" : "Set<String>",
      "right" : "Set<String>",
      "info" : "ParameterizedType[6232-6243]:ParameterizedType[6232-6243]"
    }, {
      "left" : "getOwnPropertyNames",
      "right" : "getOwnPropertyNames",
      "info" : "SimpleName[6244-6263]:SimpleName[6244-6263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6266-6303]:Block[6266-6303]"
    }, {
      "left" : "return properties.keySet();",
      "right" : "return properties.keySet();",
      "info" : "ReturnStatement[6272-6299]:ReturnStatement[6272-6299]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6307-6316]:MarkerAnnotation[6307-6316]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6319-6325]:Modifier[6319-6325]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6326-6333]:PrimitiveType[6326-6333]"
    }, {
      "left" : "isPropertyTypeDeclared",
      "right" : "isPropertyTypeDeclared",
      "info" : "SimpleName[6334-6356]:SimpleName[6334-6356]"
    }, {
      "left" : "String property",
      "right" : "String property",
      "info" : "SingleVariableDeclaration[6357-6372]:SingleVariableDeclaration[6357-6372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6374-6513]:Block[6374-6513]"
    }, {
      "left" : "StaticSlot<JSType> slot = getSlot(property);",
      "right" : "StaticSlot<JSType> slot = getSlot(property);",
      "info" : "VariableDeclarationStatement[6380-6424]:VariableDeclarationStatement[6380-6424]"
    }, {
      "left" : "if (slot == null)",
      "right" : "if (slot == null)",
      "info" : "IfStatement[6429-6474]:IfStatement[6429-6474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6447-6474]:Block[6447-6474]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6455-6468]:ReturnStatement[6455-6468]"
    }, {
      "left" : "return !slot.isTypeInferred();",
      "right" : "return !slot.isTypeInferred();",
      "info" : "ReturnStatement[6479-6509]:ReturnStatement[6479-6509]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6517-6526]:MarkerAnnotation[6517-6526]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6529-6533]:PrimitiveType[6529-6533]"
    }, {
      "left" : "collectPropertyNames",
      "right" : "collectPropertyNames",
      "info" : "SimpleName[6534-6554]:SimpleName[6534-6554]"
    }, {
      "left" : "Set<String> props",
      "right" : "Set<String> props",
      "info" : "SingleVariableDeclaration[6555-6572]:SingleVariableDeclaration[6555-6572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6574-6809]:Block[6574-6809]"
    }, {
      "left" : "for (String prop : properties.keySet())",
      "right" : "for (String prop : properties.keySet())",
      "info" : "EnhancedForStatement[6580-6650]:EnhancedForStatement[6580-6650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6620-6650]:Block[6620-6650]"
    }, {
      "left" : "props.add(prop);",
      "right" : "props.add(prop);",
      "info" : "ExpressionStatement[6628-6644]:ExpressionStatement[6628-6644]"
    }, {
      "left" : "ObjectType implicitPrototype = getImplicitPrototype();",
      "right" : "ObjectType implicitPrototype = getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[6655-6709]:VariableDeclarationStatement[6655-6709]"
    }, {
      "left" : "if (implicitPrototype != null)",
      "right" : "if (implicitPrototype != null)",
      "info" : "IfStatement[6714-6805]:IfStatement[6714-6805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6745-6805]:Block[6745-6805]"
    }, {
      "left" : "implicitPrototype.collectPropertyNames(props);",
      "right" : "implicitPrototype.collectPropertyNames(props);",
      "info" : "ExpressionStatement[6753-6799]:ExpressionStatement[6753-6799]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6813-6822]:MarkerAnnotation[6813-6822]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6825-6831]:Modifier[6825-6831]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6832-6839]:PrimitiveType[6832-6839]"
    }, {
      "left" : "isPropertyTypeInferred",
      "right" : "isPropertyTypeInferred",
      "info" : "SimpleName[6840-6862]:SimpleName[6840-6862]"
    }, {
      "left" : "String property",
      "right" : "String property",
      "info" : "SingleVariableDeclaration[6863-6878]:SingleVariableDeclaration[6863-6878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6880-7018]:Block[6880-7018]"
    }, {
      "left" : "StaticSlot<JSType> slot = getSlot(property);",
      "right" : "StaticSlot<JSType> slot = getSlot(property);",
      "info" : "VariableDeclarationStatement[6886-6930]:VariableDeclarationStatement[6886-6930]"
    }, {
      "left" : "if (slot == null)",
      "right" : "if (slot == null)",
      "info" : "IfStatement[6935-6980]:IfStatement[6935-6980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6953-6980]:Block[6953-6980]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6961-6974]:ReturnStatement[6961-6974]"
    }, {
      "left" : "return slot.isTypeInferred();",
      "right" : "return slot.isTypeInferred();",
      "info" : "ReturnStatement[6985-7014]:ReturnStatement[6985-7014]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7022-7031]:MarkerAnnotation[7022-7031]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7034-7040]:Modifier[7034-7040]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[7041-7047]:SimpleType[7041-7047]"
    }, {
      "left" : "getPropertyType",
      "right" : "getPropertyType",
      "info" : "SimpleName[7048-7063]:SimpleName[7048-7063]"
    }, {
      "left" : "String property",
      "right" : "String property",
      "info" : "SingleVariableDeclaration[7064-7079]:SingleVariableDeclaration[7064-7079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7081-7247]:Block[7081-7247]"
    }, {
      "left" : "StaticSlot<JSType> slot = getSlot(property);",
      "right" : "StaticSlot<JSType> slot = getSlot(property);",
      "info" : "VariableDeclarationStatement[7087-7131]:VariableDeclarationStatement[7087-7131]"
    }, {
      "left" : "if (slot == null)",
      "right" : "if (slot == null)",
      "info" : "IfStatement[7136-7216]:IfStatement[7136-7216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7154-7216]:Block[7154-7216]"
    }, {
      "left" : "return getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "return getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "ReturnStatement[7162-7210]:ReturnStatement[7162-7210]"
    }, {
      "left" : "return slot.getType();",
      "right" : "return slot.getType();",
      "info" : "ReturnStatement[7221-7243]:ReturnStatement[7221-7243]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7251-7260]:MarkerAnnotation[7251-7260]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7263-7269]:Modifier[7263-7269]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7270-7277]:PrimitiveType[7270-7277]"
    }, {
      "left" : "isPropertyInExterns",
      "right" : "isPropertyInExterns",
      "info" : "SimpleName[7278-7297]:SimpleName[7278-7297]"
    }, {
      "left" : "String propertyName",
      "right" : "String propertyName",
      "info" : "SingleVariableDeclaration[7298-7317]:SingleVariableDeclaration[7298-7317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7319-7616]:Block[7319-7616]"
    }, {
      "left" : "Property p = properties.get(propertyName);",
      "right" : "Property p = properties.get(propertyName);",
      "info" : "VariableDeclarationStatement[7325-7367]:VariableDeclarationStatement[7325-7367]"
    }, {
      "left" : "if (p != null)",
      "right" : "if (p != null)",
      "info" : "IfStatement[7372-7426]:IfStatement[7372-7426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7387-7426]:Block[7387-7426]"
    }, {
      "left" : "return p.isFromExterns();",
      "right" : "return p.isFromExterns();",
      "info" : "ReturnStatement[7395-7420]:ReturnStatement[7395-7420]"
    }, {
      "left" : "ObjectType implicitPrototype = getImplicitPrototype();",
      "right" : "ObjectType implicitPrototype = getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[7431-7485]:VariableDeclarationStatement[7431-7485]"
    }, {
      "left" : "if (implicitPrototype != null)",
      "right" : "if (implicitPrototype != null)",
      "info" : "IfStatement[7490-7594]:IfStatement[7490-7594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7521-7594]:Block[7521-7594]"
    }, {
      "left" : "return implicitPrototype.isPropertyInExterns(propertyName);",
      "right" : "return implicitPrototype.isPropertyInExterns(propertyName);",
      "info" : "ReturnStatement[7529-7588]:ReturnStatement[7529-7588]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7599-7612]:ReturnStatement[7599-7612]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7620-7629]:MarkerAnnotation[7620-7629]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7632-7639]:PrimitiveType[7632-7639]"
    }, {
      "left" : "defineProperty",
      "right" : "defineProperty",
      "info" : "SimpleName[7640-7654]:SimpleName[7640-7654]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[7655-7666]:SingleVariableDeclaration[7655-7666]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[7668-7679]:SingleVariableDeclaration[7668-7679]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[7681-7697]:SingleVariableDeclaration[7681-7697]"
    }, {
      "left" : "Node propertyNode",
      "right" : "Node propertyNode",
      "info" : "SingleVariableDeclaration[7705-7722]:SingleVariableDeclaration[7705-7722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7724-8160]:Block[7724-8160]"
    }, {
      "left" : "if (hasOwnDeclaredProperty(name))",
      "right" : "if (hasOwnDeclaredProperty(name))",
      "info" : "IfStatement[7730-7791]:IfStatement[7730-7791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7764-7791]:Block[7764-7791]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7772-7785]:ReturnStatement[7772-7785]"
    }, {
      "left" : "Property newProp = new Property(\n        name, type, inferred, propertyNode);",
      "right" : "Property newProp = new Property(\n        name, type, inferred, propertyNode);",
      "info" : "VariableDeclarationStatement[7796-7873]:VariableDeclarationStatement[7796-7873]"
    }, {
      "left" : "Property oldProp = properties.get(name);",
      "right" : "Property oldProp = properties.get(name);",
      "info" : "VariableDeclarationStatement[7878-7918]:VariableDeclarationStatement[7878-7918]"
    }, {
      "left" : "if (oldProp != null)",
      "right" : "if (oldProp != null)",
      "info" : "IfStatement[7923-8104]:IfStatement[7923-8104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7944-8104]:Block[7944-8104]"
    }, {
      "left" : "newProp.setJSDocInfo(oldProp.getJSDocInfo());",
      "right" : "newProp.setJSDocInfo(oldProp.getJSDocInfo());",
      "info" : "ExpressionStatement[8053-8098]:ExpressionStatement[8053-8098]"
    }, {
      "left" : "properties.put(name, newProp);",
      "right" : "properties.put(name, newProp);",
      "info" : "ExpressionStatement[8109-8139]:ExpressionStatement[8109-8139]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8144-8156]:ReturnStatement[8144-8156]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8164-8173]:MarkerAnnotation[8164-8173]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8176-8182]:Modifier[8176-8182]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8183-8190]:PrimitiveType[8183-8190]"
    }, {
      "left" : "removeProperty",
      "right" : "removeProperty",
      "info" : "SimpleName[8191-8205]:SimpleName[8191-8205]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[8206-8217]:SingleVariableDeclaration[8206-8217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8219-8268]:Block[8219-8268]"
    }, {
      "left" : "return properties.remove(name) != null;",
      "right" : "return properties.remove(name) != null;",
      "info" : "ReturnStatement[8225-8264]:ReturnStatement[8225-8264]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8272-8281]:MarkerAnnotation[8272-8281]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8284-8290]:Modifier[8284-8290]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8291-8295]:SimpleType[8291-8295]"
    }, {
      "left" : "getPropertyNode",
      "right" : "getPropertyNode",
      "info" : "SimpleName[8296-8311]:SimpleName[8296-8311]"
    }, {
      "left" : "String propertyName",
      "right" : "String propertyName",
      "info" : "SingleVariableDeclaration[8312-8331]:SingleVariableDeclaration[8312-8331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8333-8619]:Block[8333-8619]"
    }, {
      "left" : "Property p = properties.get(propertyName);",
      "right" : "Property p = properties.get(propertyName);",
      "info" : "VariableDeclarationStatement[8339-8381]:VariableDeclarationStatement[8339-8381]"
    }, {
      "left" : "if (p != null)",
      "right" : "if (p != null)",
      "info" : "IfStatement[8386-8434]:IfStatement[8386-8434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8401-8434]:Block[8401-8434]"
    }, {
      "left" : "return p.getNode();",
      "right" : "return p.getNode();",
      "info" : "ReturnStatement[8409-8428]:ReturnStatement[8409-8428]"
    }, {
      "left" : "ObjectType implicitPrototype = getImplicitPrototype();",
      "right" : "ObjectType implicitPrototype = getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[8439-8493]:VariableDeclarationStatement[8439-8493]"
    }, {
      "left" : "if (implicitPrototype != null)",
      "right" : "if (implicitPrototype != null)",
      "info" : "IfStatement[8498-8598]:IfStatement[8498-8598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8529-8598]:Block[8529-8598]"
    }, {
      "left" : "return implicitPrototype.getPropertyNode(propertyName);",
      "right" : "return implicitPrototype.getPropertyNode(propertyName);",
      "info" : "ReturnStatement[8537-8592]:ReturnStatement[8537-8592]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8603-8615]:ReturnStatement[8603-8615]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8623-8632]:MarkerAnnotation[8623-8632]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8635-8641]:Modifier[8635-8641]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[8642-8651]:SimpleType[8642-8651]"
    }, {
      "left" : "getOwnPropertyJSDocInfo",
      "right" : "getOwnPropertyJSDocInfo",
      "info" : "SimpleName[8652-8675]:SimpleName[8652-8675]"
    }, {
      "left" : "String propertyName",
      "right" : "String propertyName",
      "info" : "SingleVariableDeclaration[8676-8695]:SingleVariableDeclaration[8676-8695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8697-8824]:Block[8697-8824]"
    }, {
      "left" : "Property p = properties.get(propertyName);",
      "right" : "Property p = properties.get(propertyName);",
      "info" : "VariableDeclarationStatement[8703-8745]:VariableDeclarationStatement[8703-8745]"
    }, {
      "left" : "if (p != null)",
      "right" : "if (p != null)",
      "info" : "IfStatement[8750-8803]:IfStatement[8750-8803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8765-8803]:Block[8765-8803]"
    }, {
      "left" : "return p.getJSDocInfo();",
      "right" : "return p.getJSDocInfo();",
      "info" : "ReturnStatement[8773-8797]:ReturnStatement[8773-8797]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8808-8820]:ReturnStatement[8808-8820]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8828-8837]:MarkerAnnotation[8828-8837]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8840-8846]:Modifier[8840-8846]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8847-8851]:PrimitiveType[8847-8851]"
    }, {
      "left" : "setPropertyJSDocInfo",
      "right" : "setPropertyJSDocInfo",
      "info" : "SimpleName[8852-8872]:SimpleName[8852-8872]"
    }, {
      "left" : "String propertyName",
      "right" : "String propertyName",
      "info" : "SingleVariableDeclaration[8873-8892]:SingleVariableDeclaration[8873-8892]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[8894-8908]:SingleVariableDeclaration[8894-8908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8910-9546]:Block[8910-9546]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[8916-9542]:IfStatement[8916-9542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8934-9542]:Block[8934-9542]"
    }, {
      "left" : "if (!properties.containsKey(propertyName))",
      "right" : "if (!properties.containsKey(propertyName))",
      "info" : "IfStatement[8942-9265]:IfStatement[8942-9265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8985-9265]:Block[8985-9265]"
    }, {
      "left" : "defineInferredProperty(propertyName, getPropertyType(propertyName),\n            null);",
      "right" : "defineInferredProperty(propertyName, getPropertyType(propertyName),\n            null);",
      "info" : "ExpressionStatement[9171-9257]:ExpressionStatement[9171-9257]"
    }, {
      "left" : "Property property = properties.get(propertyName);",
      "right" : "Property property = properties.get(propertyName);",
      "info" : "VariableDeclarationStatement[9412-9461]:VariableDeclarationStatement[9412-9461]"
    }, {
      "left" : "if (property != null)",
      "right" : "if (property != null)",
      "info" : "IfStatement[9468-9536]:IfStatement[9468-9536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9490-9536]:Block[9490-9536]"
    }, {
      "left" : "property.setJSDocInfo(info);",
      "right" : "property.setJSDocInfo(info);",
      "info" : "ExpressionStatement[9500-9528]:ExpressionStatement[9500-9528]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9550-9559]:MarkerAnnotation[9550-9559]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9562-9568]:Modifier[9562-9568]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9569-9576]:PrimitiveType[9569-9576]"
    }, {
      "left" : "matchesNumberContext",
      "right" : "matchesNumberContext",
      "info" : "SimpleName[9577-9597]:SimpleName[9577-9597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9600-9752]:Block[9600-9752]"
    }, {
      "left" : "return isNumberObjectType() || isDateType() || isBooleanObjectType() ||\n        isStringObjectType() || hasOverridenNativeProperty(\"valueOf\");",
      "right" : "return isNumberObjectType() || isDateType() || isBooleanObjectType() ||\n        isStringObjectType() || hasOverridenNativeProperty(\"valueOf\");",
      "info" : "ReturnStatement[9606-9748]:ReturnStatement[9606-9748]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9756-9765]:MarkerAnnotation[9756-9765]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9768-9774]:Modifier[9768-9774]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9775-9782]:PrimitiveType[9775-9782]"
    }, {
      "left" : "matchesStringContext",
      "right" : "matchesStringContext",
      "info" : "SimpleName[9783-9803]:SimpleName[9783-9803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9806-10023]:Block[9806-10023]"
    }, {
      "left" : "return isTheObjectType() || isStringObjectType() || isDateType() ||\n        isRegexpType() || isArrayType() || isNumberObjectType() ||\n        isBooleanObjectType() || hasOverridenNativeProperty(\"toString\");",
      "right" : "return isTheObjectType() || isStringObjectType() || isDateType() ||\n        isRegexpType() || isArrayType() || isNumberObjectType() ||\n        isBooleanObjectType() || hasOverridenNativeProperty(\"toString\");",
      "info" : "ReturnStatement[9812-10019]:ReturnStatement[9812-10019]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10181-10188]:Modifier[10181-10188]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10189-10196]:PrimitiveType[10189-10196]"
    }, {
      "left" : "hasOverridenNativeProperty",
      "right" : "hasOverridenNativeProperty",
      "info" : "SimpleName[10197-10223]:SimpleName[10197-10223]"
    }, {
      "left" : "String propertyName",
      "right" : "String propertyName",
      "info" : "SingleVariableDeclaration[10224-10243]:SingleVariableDeclaration[10224-10243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10245-10688]:Block[10245-10688]"
    }, {
      "left" : "if (isNativeObjectType())",
      "right" : "if (isNativeObjectType())",
      "info" : "IfStatement[10251-10304]:IfStatement[10251-10304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10277-10304]:Block[10277-10304]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10285-10298]:ReturnStatement[10285-10298]"
    }, {
      "left" : "JSType propertyType = getPropertyType(propertyName);",
      "right" : "JSType propertyType = getPropertyType(propertyName);",
      "info" : "VariableDeclarationStatement[10310-10362]:VariableDeclarationStatement[10310-10362]"
    }, {
      "left" : "ObjectType nativeType =\n        this.isFunctionType() ?\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE) :\n        registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);",
      "right" : "ObjectType nativeType =\n        this.isFunctionType() ?\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE) :\n        registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);",
      "info" : "VariableDeclarationStatement[10367-10563]:VariableDeclarationStatement[10367-10563]"
    }, {
      "left" : "JSType nativePropertyType = nativeType.getPropertyType(propertyName);",
      "right" : "JSType nativePropertyType = nativeType.getPropertyType(propertyName);",
      "info" : "VariableDeclarationStatement[10568-10637]:VariableDeclarationStatement[10568-10637]"
    }, {
      "left" : "return propertyType != nativePropertyType;",
      "right" : "return propertyType != nativePropertyType;",
      "info" : "ReturnStatement[10642-10684]:ReturnStatement[10642-10684]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10692-10701]:MarkerAnnotation[10692-10701]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10704-10710]:Modifier[10704-10710]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[10711-10717]:SimpleType[10711-10717]"
    }, {
      "left" : "unboxesTo",
      "right" : "unboxesTo",
      "info" : "SimpleName[10718-10727]:SimpleName[10718-10727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10730-11060]:Block[10730-11060]"
    }, {
      "left" : "if (isStringObjectType())",
      "right" : "if (isStringObjectType())",
      "info" : "IfStatement[10736-11056]:IfStatement[10736-11056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10762-10823]:Block[10762-10823]"
    }, {
      "left" : "return getNativeType(JSTypeNative.STRING_TYPE);",
      "right" : "return getNativeType(JSTypeNative.STRING_TYPE);",
      "info" : "ReturnStatement[10770-10817]:ReturnStatement[10770-10817]"
    }, {
      "left" : "if (isBooleanObjectType())",
      "right" : "if (isBooleanObjectType())",
      "info" : "IfStatement[10829-11056]:IfStatement[10829-11056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10856-10918]:Block[10856-10918]"
    }, {
      "left" : "return getNativeType(JSTypeNative.BOOLEAN_TYPE);",
      "right" : "return getNativeType(JSTypeNative.BOOLEAN_TYPE);",
      "info" : "ReturnStatement[10864-10912]:ReturnStatement[10864-10912]"
    }, {
      "left" : "if (isNumberObjectType())",
      "right" : "if (isNumberObjectType())",
      "info" : "IfStatement[10924-11056]:IfStatement[10924-11056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10950-11011]:Block[10950-11011]"
    }, {
      "left" : "return getNativeType(JSTypeNative.NUMBER_TYPE);",
      "right" : "return getNativeType(JSTypeNative.NUMBER_TYPE);",
      "info" : "ReturnStatement[10958-11005]:ReturnStatement[10958-11005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11017-11056]:Block[11017-11056]"
    }, {
      "left" : "return super.unboxesTo();",
      "right" : "return super.unboxesTo();",
      "info" : "ReturnStatement[11025-11050]:ReturnStatement[11025-11050]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11064-11073]:MarkerAnnotation[11064-11073]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11076-11082]:Modifier[11076-11082]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11083-11090]:PrimitiveType[11083-11090]"
    }, {
      "left" : "matchesObjectContext",
      "right" : "matchesObjectContext",
      "info" : "SimpleName[11091-11111]:SimpleName[11091-11111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11114-11136]:Block[11114-11136]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11120-11132]:ReturnStatement[11120-11132]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11140-11149]:MarkerAnnotation[11140-11149]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11152-11158]:Modifier[11152-11158]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11159-11166]:PrimitiveType[11159-11166]"
    }, {
      "left" : "canBeCalled",
      "right" : "canBeCalled",
      "info" : "SimpleName[11167-11178]:SimpleName[11167-11178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11181-11213]:Block[11181-11213]"
    }, {
      "left" : "return isRegexpType();",
      "right" : "return isRegexpType();",
      "info" : "ReturnStatement[11187-11209]:ReturnStatement[11187-11209]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11217-11226]:MarkerAnnotation[11217-11226]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[11229-11235]:SimpleType[11229-11235]"
    }, {
      "left" : "toStringHelper",
      "right" : "toStringHelper",
      "info" : "SimpleName[11236-11250]:SimpleName[11236-11250]"
    }, {
      "left" : "boolean forAnnotations",
      "right" : "boolean forAnnotations",
      "info" : "SingleVariableDeclaration[11251-11273]:SingleVariableDeclaration[11251-11273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11275-12462]:Block[11275-12462]"
    }, {
      "left" : "if (hasReferenceName())",
      "right" : "if (hasReferenceName())",
      "info" : "IfStatement[11281-12458]:IfStatement[11281-12458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11305-11345]:Block[11305-11345]"
    }, {
      "left" : "return getReferenceName();",
      "right" : "return getReferenceName();",
      "info" : "ReturnStatement[11313-11339]:ReturnStatement[11313-11339]"
    }, {
      "left" : "if (prettyPrint)",
      "right" : "if (prettyPrint)",
      "info" : "IfStatement[11351-12458]:IfStatement[11351-12458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11368-12400]:Block[11368-12400]"
    }, {
      "left" : "prettyPrint = false;",
      "right" : "prettyPrint = false;",
      "info" : "ExpressionStatement[11417-11437]:ExpressionStatement[11417-11437]"
    }, {
      "left" : "Set<String> propertyNames = Sets.newTreeSet();",
      "right" : "Set<String> propertyNames = Sets.newTreeSet();",
      "info" : "VariableDeclarationStatement[11504-11550]:VariableDeclarationStatement[11504-11550]"
    }, {
      "left" : "for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype())",
      "right" : "for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype())",
      "info" : "ForStatement[11557-11845]:ForStatement[11557-11845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11775-11845]:Block[11775-11845]"
    }, {
      "left" : "propertyNames.addAll(current.getOwnPropertyNames());",
      "right" : "propertyNames.addAll(current.getOwnPropertyNames());",
      "info" : "ExpressionStatement[11785-11837]:ExpressionStatement[11785-11837]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[11853-11892]:VariableDeclarationStatement[11853-11892]"
    }, {
      "left" : "sb.append(\"{\");",
      "right" : "sb.append(\"{\");",
      "info" : "ExpressionStatement[11899-11914]:ExpressionStatement[11899-11914]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[11922-11932]:VariableDeclarationStatement[11922-11932]"
    }, {
      "left" : "for (String property : propertyNames)",
      "right" : "for (String property : propertyNames)",
      "info" : "EnhancedForStatement[11939-12316]:EnhancedForStatement[11939-12316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11977-12316]:Block[11977-12316]"
    }, {
      "left" : "if (i > 0)",
      "right" : "if (i > 0)",
      "info" : "IfStatement[11987-12036]:IfStatement[11987-12036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11998-12036]:Block[11998-12036]"
    }, {
      "left" : "sb.append(\", \");",
      "right" : "sb.append(\", \");",
      "info" : "ExpressionStatement[12010-12026]:ExpressionStatement[12010-12026]"
    }, {
      "left" : "sb.append(property);",
      "right" : "sb.append(property);",
      "info" : "ExpressionStatement[12046-12066]:ExpressionStatement[12046-12066]"
    }, {
      "left" : "sb.append(\": \");",
      "right" : "sb.append(\": \");",
      "info" : "ExpressionStatement[12075-12091]:ExpressionStatement[12075-12091]"
    }, {
      "left" : "sb.append(getPropertyType(property).toStringHelper(forAnnotations));",
      "right" : "sb.append(getPropertyType(property).toStringHelper(forAnnotations));",
      "info" : "ExpressionStatement[12100-12168]:ExpressionStatement[12100-12168]"
    }, {
      "left" : "++i;",
      "right" : "++i;",
      "info" : "ExpressionStatement[12178-12182]:ExpressionStatement[12178-12182]"
    }, {
      "left" : "if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES)",
      "right" : "if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES)",
      "info" : "IfStatement[12191-12308]:IfStatement[12191-12308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12250-12308]:Block[12250-12308]"
    }, {
      "left" : "sb.append(\", ...\");",
      "right" : "sb.append(\", ...\");",
      "info" : "ExpressionStatement[12262-12281]:ExpressionStatement[12262-12281]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12292-12298]:BreakStatement[12292-12298]"
    }, {
      "left" : "sb.append(\"}\");",
      "right" : "sb.append(\"}\");",
      "info" : "ExpressionStatement[12324-12339]:ExpressionStatement[12324-12339]"
    }, {
      "left" : "prettyPrint = true;",
      "right" : "prettyPrint = true;",
      "info" : "ExpressionStatement[12347-12366]:ExpressionStatement[12347-12366]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[12373-12394]:ReturnStatement[12373-12394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12406-12458]:Block[12406-12458]"
    }, {
      "left" : "return forAnnotations ? \"?\" : \"{...}\";",
      "right" : "return forAnnotations ? \"?\" : \"{...}\";",
      "info" : "ReturnStatement[12414-12452]:ReturnStatement[12414-12452]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12466-12470]:PrimitiveType[12466-12470]"
    }, {
      "left" : "setPrettyPrint",
      "right" : "setPrettyPrint",
      "info" : "SimpleName[12471-12485]:SimpleName[12471-12485]"
    }, {
      "left" : "boolean prettyPrint",
      "right" : "boolean prettyPrint",
      "info" : "SingleVariableDeclaration[12486-12505]:SingleVariableDeclaration[12486-12505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12507-12548]:Block[12507-12548]"
    }, {
      "left" : "this.prettyPrint = prettyPrint;",
      "right" : "this.prettyPrint = prettyPrint;",
      "info" : "ExpressionStatement[12513-12544]:ExpressionStatement[12513-12544]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12552-12559]:PrimitiveType[12552-12559]"
    }, {
      "left" : "isPrettyPrint",
      "right" : "isPrettyPrint",
      "info" : "SimpleName[12560-12573]:SimpleName[12560-12573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12576-12605]:Block[12576-12605]"
    }, {
      "left" : "return prettyPrint;",
      "right" : "return prettyPrint;",
      "info" : "ReturnStatement[12582-12601]:ReturnStatement[12582-12601]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12609-12618]:MarkerAnnotation[12609-12618]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12621-12627]:Modifier[12621-12627]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[12628-12640]:SimpleType[12628-12640]"
    }, {
      "left" : "getConstructor",
      "right" : "getConstructor",
      "info" : "SimpleName[12641-12655]:SimpleName[12641-12655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12658-12680]:Block[12658-12680]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12664-12676]:ReturnStatement[12664-12676]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12684-12693]:MarkerAnnotation[12684-12693]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12696-12702]:Modifier[12696-12702]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[12703-12713]:SimpleType[12703-12713]"
    }, {
      "left" : "getImplicitPrototype",
      "right" : "getImplicitPrototype",
      "info" : "SimpleName[12714-12734]:SimpleName[12714-12734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12737-12780]:Block[12737-12780]"
    }, {
      "left" : "return implicitPrototypeFallback;",
      "right" : "return implicitPrototypeFallback;",
      "info" : "ReturnStatement[12743-12776]:ReturnStatement[12743-12776]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[13044-13049]:Modifier[13044-13049]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13050-13054]:PrimitiveType[13050-13054]"
    }, {
      "left" : "setImplicitPrototype",
      "right" : "setImplicitPrototype",
      "info" : "SimpleName[13055-13075]:SimpleName[13055-13075]"
    }, {
      "left" : "ObjectType implicitPrototype",
      "right" : "ObjectType implicitPrototype",
      "info" : "SingleVariableDeclaration[13076-13104]:SingleVariableDeclaration[13076-13104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13106-13203]:Block[13106-13203]"
    }, {
      "left" : "checkState(!hasCachedValues());",
      "right" : "checkState(!hasCachedValues());",
      "info" : "ExpressionStatement[13112-13143]:ExpressionStatement[13112-13143]"
    }, {
      "left" : "this.implicitPrototypeFallback = implicitPrototype;",
      "right" : "this.implicitPrototypeFallback = implicitPrototype;",
      "info" : "ExpressionStatement[13148-13199]:ExpressionStatement[13148-13199]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13207-13216]:MarkerAnnotation[13207-13216]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13219-13225]:Modifier[13219-13225]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[13226-13232]:SimpleType[13226-13232]"
    }, {
      "left" : "getReferenceName",
      "right" : "getReferenceName",
      "info" : "SimpleName[13233-13249]:SimpleName[13233-13249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13252-13450]:Block[13252-13450]"
    }, {
      "left" : "if (className != null)",
      "right" : "if (className != null)",
      "info" : "IfStatement[13258-13446]:IfStatement[13258-13446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13281-13312]:Block[13281-13312]"
    }, {
      "left" : "return className;",
      "right" : "return className;",
      "info" : "ReturnStatement[13289-13306]:ReturnStatement[13289-13306]"
    }, {
      "left" : "if (ownerFunction != null)",
      "right" : "if (ownerFunction != null)",
      "info" : "IfStatement[13318-13446]:IfStatement[13318-13446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13345-13414]:Block[13345-13414]"
    }, {
      "left" : "return ownerFunction.getReferenceName() + \".prototype\";",
      "right" : "return ownerFunction.getReferenceName() + \".prototype\";",
      "info" : "ReturnStatement[13353-13408]:ReturnStatement[13353-13408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13420-13446]:Block[13420-13446]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13428-13440]:ReturnStatement[13428-13440]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13454-13463]:MarkerAnnotation[13454-13463]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13466-13472]:Modifier[13466-13472]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13473-13480]:PrimitiveType[13473-13480]"
    }, {
      "left" : "hasReferenceName",
      "right" : "hasReferenceName",
      "info" : "SimpleName[13481-13497]:SimpleName[13481-13497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13500-13560]:Block[13500-13560]"
    }, {
      "left" : "return className != null || ownerFunction != null;",
      "right" : "return className != null || ownerFunction != null;",
      "info" : "ReturnStatement[13506-13556]:ReturnStatement[13506-13556]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13564-13573]:MarkerAnnotation[13564-13573]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13576-13582]:Modifier[13576-13582]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13583-13590]:PrimitiveType[13583-13590]"
    }, {
      "left" : "isSubtype",
      "right" : "isSubtype",
      "info" : "SimpleName[13591-13600]:SimpleName[13591-13600]"
    }, {
      "left" : "JSType that",
      "right" : "JSType that",
      "info" : "SingleVariableDeclaration[13601-13612]:SingleVariableDeclaration[13601-13612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13614-15120]:Block[13614-15120]"
    }, {
      "left" : "if (JSType.isSubtypeHelper(this, that))",
      "right" : "if (JSType.isSubtypeHelper(this, that))",
      "info" : "IfStatement[13620-13686]:IfStatement[13620-13686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13660-13686]:Block[13660-13686]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13668-13680]:ReturnStatement[13668-13680]"
    }, {
      "left" : "if (that.isUnionType())",
      "right" : "if (that.isUnionType())",
      "info" : "IfStatement[13711-13893]:IfStatement[13711-13893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13735-13893]:Block[13735-13893]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13874-13887]:ReturnStatement[13874-13887]"
    }, {
      "left" : "if (that.isRecordType())",
      "right" : "if (that.isRecordType())",
      "info" : "IfStatement[13919-14018]:IfStatement[13919-14018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13944-14018]:Block[13944-14018]"
    }, {
      "left" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
      "right" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
      "info" : "ReturnStatement[13952-14012]:ReturnStatement[13952-14012]"
    }, {
      "left" : "ObjectType thatObj = that.toObjectType();",
      "right" : "ObjectType thatObj = that.toObjectType();",
      "info" : "VariableDeclarationStatement[14154-14195]:VariableDeclarationStatement[14154-14195]"
    }, {
      "left" : "ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor();",
      "right" : "ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor();",
      "info" : "VariableDeclarationStatement[14200-14272]:VariableDeclarationStatement[14200-14272]"
    }, {
      "left" : "if (thatCtor != null && thatCtor.isInterface())",
      "right" : "if (thatCtor != null && thatCtor.isInterface())",
      "info" : "IfStatement[14277-14550]:IfStatement[14277-14550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14325-14550]:Block[14325-14550]"
    }, {
      "left" : "Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces();",
      "right" : "Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces();",
      "info" : "VariableDeclarationStatement[14333-14402]:VariableDeclarationStatement[14333-14402]"
    }, {
      "left" : "for (ObjectType thisInterface : thisInterfaces)",
      "right" : "for (ObjectType thisInterface : thisInterfaces)",
      "info" : "EnhancedForStatement[14409-14544]:EnhancedForStatement[14409-14544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14457-14544]:Block[14457-14544]"
    }, {
      "left" : "if (thisInterface.isSubtype(that))",
      "right" : "if (thisInterface.isSubtype(that))",
      "info" : "IfStatement[14467-14536]:IfStatement[14467-14536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14502-14536]:Block[14502-14536]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14514-14526]:ReturnStatement[14514-14526]"
    }, {
      "left" : "if (getConstructor() != null && getConstructor().isInterface())",
      "right" : "if (getConstructor() != null && getConstructor().isInterface())",
      "info" : "IfStatement[14556-14782]:IfStatement[14556-14782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14620-14782]:Block[14620-14782]"
    }, {
      "left" : "for (ObjectType thisInterface : getCtorExtendedInterfaces())",
      "right" : "for (ObjectType thisInterface : getCtorExtendedInterfaces())",
      "info" : "EnhancedForStatement[14628-14776]:EnhancedForStatement[14628-14776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14689-14776]:Block[14689-14776]"
    }, {
      "left" : "if (thisInterface.isSubtype(that))",
      "right" : "if (thisInterface.isSubtype(that))",
      "info" : "IfStatement[14699-14768]:IfStatement[14699-14768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14734-14768]:Block[14734-14768]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14746-14758]:ReturnStatement[14746-14758]"
    }, {
      "left" : "if (isUnknownType() || implicitPrototypeChainIsUnknown())",
      "right" : "if (isUnknownType() || implicitPrototypeChainIsUnknown())",
      "info" : "IfStatement[14825-15070]:IfStatement[14825-15070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14883-15070]:Block[14883-15070]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15052-15064]:ReturnStatement[15052-15064]"
    }, {
      "left" : "return this.isImplicitPrototype(thatObj);",
      "right" : "return this.isImplicitPrototype(thatObj);",
      "info" : "ReturnStatement[15075-15116]:ReturnStatement[15075-15116]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15124-15131]:Modifier[15124-15131]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15132-15139]:PrimitiveType[15132-15139]"
    }, {
      "left" : "implicitPrototypeChainIsUnknown",
      "right" : "implicitPrototypeChainIsUnknown",
      "info" : "SimpleName[15140-15171]:SimpleName[15140-15171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15174-15366]:Block[15174-15366]"
    }, {
      "left" : "ObjectType p = getImplicitPrototype();",
      "right" : "ObjectType p = getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[15180-15218]:VariableDeclarationStatement[15180-15218]"
    }, {
      "left" : "while (p != null)",
      "right" : "while (p != null)",
      "info" : "WhileStatement[15223-15344]:WhileStatement[15223-15344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15241-15344]:Block[15241-15344]"
    }, {
      "left" : "if (p.isUnknownType())",
      "right" : "if (p.isUnknownType())",
      "info" : "IfStatement[15249-15302]:IfStatement[15249-15302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15272-15302]:Block[15272-15302]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15282-15294]:ReturnStatement[15282-15294]"
    }, {
      "left" : "p = p.getImplicitPrototype();",
      "right" : "p = p.getImplicitPrototype();",
      "info" : "ExpressionStatement[15309-15338]:ExpressionStatement[15309-15338]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15349-15362]:ReturnStatement[15349-15362]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15370-15379]:MarkerAnnotation[15370-15379]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15382-15388]:Modifier[15382-15388]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15389-15396]:PrimitiveType[15389-15396]"
    }, {
      "left" : "hasCachedValues",
      "right" : "hasCachedValues",
      "info" : "SimpleName[15397-15412]:SimpleName[15397-15412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15415-15456]:Block[15415-15456]"
    }, {
      "left" : "return super.hasCachedValues();",
      "right" : "return super.hasCachedValues();",
      "info" : "ReturnStatement[15421-15452]:ReturnStatement[15421-15452]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15504-15513]:MarkerAnnotation[15504-15513]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15516-15522]:Modifier[15516-15522]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15523-15530]:PrimitiveType[15523-15530]"
    }, {
      "left" : "isNativeObjectType",
      "right" : "isNativeObjectType",
      "info" : "SimpleName[15531-15549]:SimpleName[15531-15549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15552-15580]:Block[15552-15580]"
    }, {
      "left" : "return nativeType;",
      "right" : "return nativeType;",
      "info" : "ReturnStatement[15558-15576]:ReturnStatement[15558-15576]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15584-15588]:PrimitiveType[15584-15588]"
    }, {
      "left" : "setOwnerFunction",
      "right" : "setOwnerFunction",
      "info" : "SimpleName[15589-15605]:SimpleName[15589-15605]"
    }, {
      "left" : "FunctionType type",
      "right" : "FunctionType type",
      "info" : "SingleVariableDeclaration[15606-15623]:SingleVariableDeclaration[15606-15623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15625-15725]:Block[15625-15725]"
    }, {
      "left" : "Preconditions.checkState(ownerFunction == null || type == null);",
      "right" : "Preconditions.checkState(ownerFunction == null || type == null);",
      "info" : "ExpressionStatement[15631-15695]:ExpressionStatement[15631-15695]"
    }, {
      "left" : "ownerFunction = type;",
      "right" : "ownerFunction = type;",
      "info" : "ExpressionStatement[15700-15721]:ExpressionStatement[15700-15721]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15729-15738]:MarkerAnnotation[15729-15738]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15741-15747]:Modifier[15741-15747]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[15748-15760]:SimpleType[15748-15760]"
    }, {
      "left" : "getOwnerFunction",
      "right" : "getOwnerFunction",
      "info" : "SimpleName[15761-15777]:SimpleName[15761-15777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15780-15811]:Block[15780-15811]"
    }, {
      "left" : "return ownerFunction;",
      "right" : "return ownerFunction;",
      "info" : "ReturnStatement[15786-15807]:ReturnStatement[15786-15807]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15815-15824]:MarkerAnnotation[15815-15824]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15827-15833]:Modifier[15827-15833]"
    }, {
      "left" : "Iterable<ObjectType>",
      "right" : "Iterable<ObjectType>",
      "info" : "ParameterizedType[15834-15854]:ParameterizedType[15834-15854]"
    }, {
      "left" : "getCtorImplementedInterfaces",
      "right" : "getCtorImplementedInterfaces",
      "info" : "SimpleName[15855-15883]:SimpleName[15855-15883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15886-16026]:Block[15886-16026]"
    }, {
      "left" : "return isFunctionPrototypeType()\n        ? getOwnerFunction().getImplementedInterfaces()\n        : ImmutableList.<ObjectType>of();",
      "right" : "return isFunctionPrototypeType()\n        ? getOwnerFunction().getImplementedInterfaces()\n        : ImmutableList.<ObjectType>of();",
      "info" : "ReturnStatement[15892-16022]:ReturnStatement[15892-16022]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16030-16039]:MarkerAnnotation[16030-16039]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16042-16048]:Modifier[16042-16048]"
    }, {
      "left" : "Iterable<ObjectType>",
      "right" : "Iterable<ObjectType>",
      "info" : "ParameterizedType[16049-16069]:ParameterizedType[16049-16069]"
    }, {
      "left" : "getCtorExtendedInterfaces",
      "right" : "getCtorExtendedInterfaces",
      "info" : "SimpleName[16070-16095]:SimpleName[16070-16095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16098-16235]:Block[16098-16235]"
    }, {
      "left" : "return isFunctionPrototypeType()\n        ? getOwnerFunction().getExtendedInterfaces()\n        : ImmutableList.<ObjectType>of();",
      "right" : "return isFunctionPrototypeType()\n        ? getOwnerFunction().getExtendedInterfaces()\n        : ImmutableList.<ObjectType>of();",
      "info" : "ReturnStatement[16104-16231]:ReturnStatement[16104-16231]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16239-16248]:MarkerAnnotation[16239-16248]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[16251-16257]:SimpleType[16251-16257]"
    }, {
      "left" : "resolveInternal",
      "right" : "resolveInternal",
      "info" : "SimpleName[16258-16273]:SimpleName[16258-16273]"
    }, {
      "left" : "ErrorReporter t",
      "right" : "ErrorReporter t",
      "info" : "SingleVariableDeclaration[16274-16289]:SingleVariableDeclaration[16274-16289]"
    }, {
      "left" : "StaticScope<JSType> scope",
      "right" : "StaticScope<JSType> scope",
      "info" : "SingleVariableDeclaration[16291-16316]:SingleVariableDeclaration[16291-16316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16318-16685]:Block[16318-16685]"
    }, {
      "left" : "setResolvedTypeInternal(this);",
      "right" : "setResolvedTypeInternal(this);",
      "info" : "ExpressionStatement[16324-16354]:ExpressionStatement[16324-16354]"
    }, {
      "left" : "ObjectType implicitPrototype = getImplicitPrototype();",
      "right" : "ObjectType implicitPrototype = getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[16360-16414]:VariableDeclarationStatement[16360-16414]"
    }, {
      "left" : "if (implicitPrototype != null)",
      "right" : "if (implicitPrototype != null)",
      "info" : "IfStatement[16419-16551]:IfStatement[16419-16551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16450-16551]:Block[16450-16551]"
    }, {
      "left" : "implicitPrototypeFallback =\n          (ObjectType) implicitPrototype.resolve(t, scope);",
      "right" : "implicitPrototypeFallback =\n          (ObjectType) implicitPrototype.resolve(t, scope);",
      "info" : "ExpressionStatement[16458-16545]:ExpressionStatement[16458-16545]"
    }, {
      "left" : "for (Property prop : properties.values())",
      "right" : "for (Property prop : properties.values())",
      "info" : "EnhancedForStatement[16556-16664]:EnhancedForStatement[16556-16664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16598-16664]:Block[16598-16664]"
    }, {
      "left" : "prop.setType(safeResolve(prop.getType(), t, scope));",
      "right" : "prop.setType(safeResolve(prop.getType(), t, scope));",
      "info" : "ExpressionStatement[16606-16658]:ExpressionStatement[16606-16658]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16669-16681]:ReturnStatement[16669-16681]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16701-16707]:Modifier[16701-16707]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16708-16712]:PrimitiveType[16708-16712]"
    }, {
      "left" : "matchConstraint",
      "right" : "matchConstraint",
      "info" : "SimpleName[16713-16728]:SimpleName[16713-16728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16755-17676]:Block[16755-17726]"
    }, {
      "left" : "if (constraintObj.isRecordType())",
      "right" : "if (constraintObj.isRecordType())",
      "info" : "IfStatement[17183-17672]:IfStatement[17233-17722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17217-17672]:Block[17267-17722]"
    }, {
      "left" : "for (String prop : constraintObj.getOwnPropertyNames())",
      "right" : "for (String prop : constraintObj.getOwnPropertyNames())",
      "info" : "EnhancedForStatement[17225-17666]:EnhancedForStatement[17275-17716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17281-17666]:Block[17331-17716]"
    }, {
      "left" : "JSType propType = constraintObj.getPropertyType(prop);",
      "right" : "JSType propType = constraintObj.getPropertyType(prop);",
      "info" : "VariableDeclarationStatement[17291-17345]:VariableDeclarationStatement[17341-17395]"
    }, {
      "left" : "if (!isPropertyTypeDeclared(prop))",
      "right" : "if (!isPropertyTypeDeclared(prop))",
      "info" : "IfStatement[17354-17658]:IfStatement[17404-17708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17389-17658]:Block[17439-17708]"
    }, {
      "left" : "JSType typeToInfer = propType;",
      "right" : "JSType typeToInfer = propType;",
      "info" : "VariableDeclarationStatement[17401-17431]:VariableDeclarationStatement[17451-17481]"
    }, {
      "left" : "if (!hasProperty(prop))",
      "right" : "if (!hasProperty(prop))",
      "info" : "IfStatement[17442-17589]:IfStatement[17492-17639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17466-17589]:Block[17516-17639]"
    }, {
      "left" : "typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);",
      "right" : "typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);",
      "info" : "ExpressionStatement[17480-17577]:ExpressionStatement[17530-17627]"
    }, {
      "left" : "defineInferredProperty(prop, typeToInfer, null);",
      "right" : "defineInferredProperty(prop, typeToInfer, null);",
      "info" : "ExpressionStatement[17600-17648]:ExpressionStatement[17650-17698]"
    } ]
  },
  "interFileMappings" : { }
}