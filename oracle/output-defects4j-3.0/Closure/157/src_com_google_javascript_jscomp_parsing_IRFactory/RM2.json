{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "IRFactory",
      "right" : "IRFactory",
      "info" : "TypeDeclaration[4091-50382]:TypeDeclaration[4091-50985]"
    }, {
      "left" : "private final String sourceString;",
      "right" : "private final String sourceString;",
      "info" : "FieldDeclaration[4182-4216]:FieldDeclaration[4182-4216]"
    }, {
      "left" : "private final String sourceName;",
      "right" : "private final String sourceName;",
      "info" : "FieldDeclaration[4219-4251]:FieldDeclaration[4219-4251]"
    }, {
      "left" : "private final Config config;",
      "right" : "private final Config config;",
      "info" : "FieldDeclaration[4254-4282]:FieldDeclaration[4254-4282]"
    }, {
      "left" : "private final ErrorReporter errorReporter;",
      "right" : "private final ErrorReporter errorReporter;",
      "info" : "FieldDeclaration[4285-4327]:FieldDeclaration[4285-4327]"
    }, {
      "left" : "private final TransformDispatcher transformDispatcher;",
      "right" : "private final TransformDispatcher transformDispatcher;",
      "info" : "FieldDeclaration[4330-4384]:FieldDeclaration[4330-4384]"
    }, {
      "left" : "private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
      "right" : "private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
      "info" : "FieldDeclaration[4422-4499]:FieldDeclaration[4422-4499]"
    }, {
      "left" : "private static final Set<String> ES5_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");",
      "right" : "private static final Set<String> ES5_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");",
      "info" : "FieldDeclaration[4503-4693]:FieldDeclaration[4503-4693]"
    }, {
      "left" : "private static final Set<String> ES5_STRICT_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n          \"public\", \"static\", \"yield\");",
      "right" : "private static final Set<String> ES5_STRICT_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n          \"public\", \"static\", \"yield\");",
      "info" : "FieldDeclaration[4696-5011]:FieldDeclaration[4696-5011]"
    }, {
      "left" : "private final Set<String> reservedKeywords;",
      "right" : "private final Set<String> reservedKeywords;",
      "info" : "FieldDeclaration[5015-5058]:FieldDeclaration[5015-5058]"
    }, {
      "left" : "Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
      "right" : "Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
      "info" : "FieldDeclaration[5187-5237]:FieldDeclaration[5187-5237]"
    }, {
      "left" : "Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
      "right" : "Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
      "info" : "FieldDeclaration[5240-5342]:FieldDeclaration[5240-5342]"
    }, {
      "left" : "JSDocInfo fileOverviewInfo = null;",
      "right" : "JSDocInfo fileOverviewInfo = null;",
      "info" : "FieldDeclaration[5345-5379]:FieldDeclaration[5345-5379]"
    }, {
      "left" : "private Node templateNode;",
      "right" : "private Node templateNode;",
      "info" : "FieldDeclaration[5501-5527]:FieldDeclaration[5501-5527]"
    }, {
      "left" : "private IRFactory(String sourceString,\n                    String sourceName,\n                    Config config,\n                    ErrorReporter errorReporter)",
      "right" : "private IRFactory(String sourceString,\n                    String sourceName,\n                    Config config,\n                    ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[5610-6545]:MethodDeclaration[5610-6545]"
    }, {
      "left" : "private Node createTemplateNode()",
      "right" : "private Node createTemplateNode()",
      "info" : "MethodDeclaration[6781-6995]:MethodDeclaration[6781-6995]"
    }, {
      "left" : "public static Node transformTree(AstRoot node,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter)",
      "right" : "public static Node transformTree(AstRoot node,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[6999-7687]:MethodDeclaration[6999-7687]"
    }, {
      "left" : "private void setFileOverviewJsDoc(Node irNode)",
      "right" : "private void setFileOverviewJsDoc(Node irNode)",
      "info" : "MethodDeclaration[7691-8232]:MethodDeclaration[7691-8232]"
    }, {
      "left" : "private Node transformBlock(AstNode node)",
      "right" : "private Node transformBlock(AstNode node)",
      "info" : "MethodDeclaration[8236-8706]:MethodDeclaration[8236-8706]"
    }, {
      "left" : "private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser)",
      "right" : "private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser)",
      "info" : "MethodDeclaration[8710-9053]:MethodDeclaration[8710-9053]"
    }, {
      "left" : "private void handlePossibleFileOverviewJsDoc(Comment comment)",
      "right" : "private void handlePossibleFileOverviewJsDoc(Comment comment)",
      "info" : "MethodDeclaration[9057-9269]:MethodDeclaration[9057-9269]"
    }, {
      "left" : "private JSDocInfo handleJsDoc(AstNode node)",
      "right" : "private JSDocInfo handleJsDoc(AstNode node)",
      "info" : "MethodDeclaration[9273-9643]:MethodDeclaration[9273-9643]"
    }, {
      "left" : "private Node transform(AstNode node)",
      "right" : "private Node transform(AstNode node)",
      "info" : "MethodDeclaration[9647-9898]:MethodDeclaration[9647-9898]"
    }, {
      "left" : "private Node transformNameAsString(Name node)",
      "right" : "private Node transformNameAsString(Name node)",
      "info" : "MethodDeclaration[9902-10186]:MethodDeclaration[9902-10186]"
    }, {
      "left" : "private void setSourceInfo(Node irNode, AstNode node)",
      "right" : "private void setSourceInfo(Node irNode, AstNode node)",
      "info" : "MethodDeclaration[10228-11049]:MethodDeclaration[10777-11598]"
    }, {
      "left" : "private JsDocInfoParser createJsDocInfoParser(Comment node)",
      "right" : "private JsDocInfoParser createJsDocInfoParser(Comment node)",
      "info" : "MethodDeclaration[11053-12259]:MethodDeclaration[11602-12808]"
    }, {
      "left" : "private int position2charno(int position)",
      "right" : "private int position2charno(int position)",
      "info" : "MethodDeclaration[12263-12532]:MethodDeclaration[12812-13081]"
    }, {
      "left" : "private Node justTransform(AstNode node)",
      "right" : "private Node justTransform(AstNode node)",
      "info" : "MethodDeclaration[12536-12628]:MethodDeclaration[13085-13177]"
    }, {
      "left" : "TransformDispatcher",
      "right" : "TransformDispatcher",
      "info" : "TypeDeclaration[12632-34396]:TypeDeclaration[13181-34999]"
    }, {
      "left" : "private Node processGeneric(\n        com.google.javascript.jscomp.mozilla.rhino.Node n)",
      "right" : "private Node processGeneric(\n        com.google.javascript.jscomp.mozilla.rhino.Node n)",
      "info" : "MethodDeclaration[12705-13015]:MethodDeclaration[13254-13564]"
    }, {
      "left" : "private Node transformAsString(AstNode n)",
      "right" : "private Node transformAsString(AstNode n)",
      "info" : "MethodDeclaration[13021-13891]:MethodDeclaration[13570-14494]"
    }, {
      "left" : "Node processArrayLiteral(ArrayLiteral literalNode)",
      "right" : "Node processArrayLiteral(ArrayLiteral literalNode)",
      "info" : "MethodDeclaration[13897-14262]:MethodDeclaration[14500-14865]"
    }, {
      "left" : "Node processAssignment(Assignment assignmentNode)",
      "right" : "Node processAssignment(Assignment assignmentNode)",
      "info" : "MethodDeclaration[14268-14644]:MethodDeclaration[14871-15247]"
    }, {
      "left" : "Node processAstRoot(AstRoot rootNode)",
      "right" : "Node processAstRoot(AstRoot rootNode)",
      "info" : "MethodDeclaration[14650-14941]:MethodDeclaration[15253-15544]"
    }, {
      "left" : "private void parseDirectives(Node node)",
      "right" : "private void parseDirectives(Node node)",
      "info" : "MethodDeclaration[14947-15798]:MethodDeclaration[15550-16401]"
    }, {
      "left" : "private boolean isDirective(Node n)",
      "right" : "private boolean isDirective(Node n)",
      "info" : "MethodDeclaration[15804-16114]:MethodDeclaration[16407-16717]"
    }, {
      "left" : "Node processBlock(Block blockNode)",
      "right" : "Node processBlock(Block blockNode)",
      "info" : "MethodDeclaration[16120-16216]:MethodDeclaration[16723-16819]"
    }, {
      "left" : "Node processBreakStatement(BreakStatement statementNode)",
      "right" : "Node processBreakStatement(BreakStatement statementNode)",
      "info" : "MethodDeclaration[16222-16611]:MethodDeclaration[16825-17214]"
    }, {
      "left" : "Node processCatchClause(CatchClause clauseNode)",
      "right" : "Node processCatchClause(CatchClause clauseNode)",
      "info" : "MethodDeclaration[16617-17105]:MethodDeclaration[17220-17708]"
    }, {
      "left" : "Node processConditionalExpression(ConditionalExpression exprNode)",
      "right" : "Node processConditionalExpression(ConditionalExpression exprNode)",
      "info" : "MethodDeclaration[17111-17397]:MethodDeclaration[17714-18000]"
    }, {
      "left" : "Node processContinueStatement(ContinueStatement statementNode)",
      "right" : "Node processContinueStatement(ContinueStatement statementNode)",
      "info" : "MethodDeclaration[17403-17791]:MethodDeclaration[18006-18394]"
    }, {
      "left" : "Node processDoLoop(DoLoop loopNode)",
      "right" : "Node processDoLoop(DoLoop loopNode)",
      "info" : "MethodDeclaration[17797-17989]:MethodDeclaration[18400-18592]"
    }, {
      "left" : "Node processElementGet(ElementGet getNode)",
      "right" : "Node processElementGet(ElementGet getNode)",
      "info" : "MethodDeclaration[17995-18192]:MethodDeclaration[18598-18795]"
    }, {
      "left" : "Node processEmptyExpression(EmptyExpression exprNode)",
      "right" : "Node processEmptyExpression(EmptyExpression exprNode)",
      "info" : "MethodDeclaration[18198-18332]:MethodDeclaration[18801-18935]"
    }, {
      "left" : "Node processExpressionStatement(ExpressionStatement statementNode)",
      "right" : "Node processExpressionStatement(ExpressionStatement statementNode)",
      "info" : "MethodDeclaration[18338-18586]:MethodDeclaration[18941-19189]"
    }, {
      "left" : "Node processForInLoop(ForInLoop loopNode)",
      "right" : "Node processForInLoop(ForInLoop loopNode)",
      "info" : "MethodDeclaration[18592-18841]:MethodDeclaration[19195-19444]"
    }, {
      "left" : "Node processForLoop(ForLoop loopNode)",
      "right" : "Node processForLoop(ForLoop loopNode)",
      "info" : "MethodDeclaration[18847-19177]:MethodDeclaration[19450-19780]"
    }, {
      "left" : "Node processFunctionCall(FunctionCall callNode)",
      "right" : "Node processFunctionCall(FunctionCall callNode)",
      "info" : "MethodDeclaration[19183-19681]:MethodDeclaration[19786-20284]"
    }, {
      "left" : "Node processFunctionNode(FunctionNode functionNode)",
      "right" : "Node processFunctionNode(FunctionNode functionNode)",
      "info" : "MethodDeclaration[19687-21998]:MethodDeclaration[20290-22601]"
    }, {
      "left" : "Node processIfStatement(IfStatement statementNode)",
      "right" : "Node processIfStatement(IfStatement statementNode)",
      "info" : "MethodDeclaration[22004-22403]:MethodDeclaration[22607-23006]"
    }, {
      "left" : "Node processInfixExpression(InfixExpression exprNode)",
      "right" : "Node processInfixExpression(InfixExpression exprNode)",
      "info" : "MethodDeclaration[22409-23125]:MethodDeclaration[23012-23728]"
    }, {
      "left" : "Node processKeywordLiteral(KeywordLiteral literalNode)",
      "right" : "Node processKeywordLiteral(KeywordLiteral literalNode)",
      "info" : "MethodDeclaration[23131-23272]:MethodDeclaration[23734-23875]"
    }, {
      "left" : "Node processLabel(Label labelNode)",
      "right" : "Node processLabel(Label labelNode)",
      "info" : "MethodDeclaration[23278-23401]:MethodDeclaration[23881-24004]"
    }, {
      "left" : "Node processLabeledStatement(LabeledStatement statementNode)",
      "right" : "Node processLabeledStatement(LabeledStatement statementNode)",
      "info" : "MethodDeclaration[23407-24087]:MethodDeclaration[24010-24690]"
    }, {
      "left" : "Node processName(Name nameNode)",
      "right" : "Node processName(Name nameNode)",
      "info" : "MethodDeclaration[24093-24189]:MethodDeclaration[24696-24792]"
    }, {
      "left" : "Node processName(Name nameNode, boolean asString)",
      "right" : "Node processName(Name nameNode, boolean asString)",
      "info" : "MethodDeclaration[24195-24646]:MethodDeclaration[24798-25249]"
    }, {
      "left" : "private boolean isReservedKeyword(String identifier)",
      "right" : "private boolean isReservedKeyword(String identifier)",
      "info" : "MethodDeclaration[24652-24835]:MethodDeclaration[25255-25438]"
    }, {
      "left" : "Node processNewExpression(NewExpression exprNode)",
      "right" : "Node processNewExpression(NewExpression exprNode)",
      "info" : "MethodDeclaration[24841-24956]:MethodDeclaration[25444-25559]"
    }, {
      "left" : "Node processNumberLiteral(NumberLiteral literalNode)",
      "right" : "Node processNumberLiteral(NumberLiteral literalNode)",
      "info" : "MethodDeclaration[24962-25089]:MethodDeclaration[25565-25692]"
    }, {
      "left" : "Node processObjectLiteral(ObjectLiteral literalNode)",
      "right" : "Node processObjectLiteral(ObjectLiteral literalNode)",
      "info" : "MethodDeclaration[25095-26334]:MethodDeclaration[25698-26937]"
    }, {
      "left" : "Node getFnParamNode(Node fnNode)",
      "right" : "Node getFnParamNode(Node fnNode)",
      "info" : "MethodDeclaration[26340-26672]:MethodDeclaration[26943-27275]"
    }, {
      "left" : "Node processObjectProperty(ObjectProperty propertyNode)",
      "right" : "Node processObjectProperty(ObjectProperty propertyNode)",
      "info" : "MethodDeclaration[26678-26806]:MethodDeclaration[27281-27409]"
    }, {
      "left" : "Node processParenthesizedExpression(ParenthesizedExpression exprNode)",
      "right" : "Node processParenthesizedExpression(ParenthesizedExpression exprNode)",
      "info" : "MethodDeclaration[26812-27036]:MethodDeclaration[27415-27639]"
    }, {
      "left" : "Node processPropertyGet(PropertyGet getNode)",
      "right" : "Node processPropertyGet(PropertyGet getNode)",
      "info" : "MethodDeclaration[27042-27250]:MethodDeclaration[27645-27853]"
    }, {
      "left" : "Node processRegExpLiteral(RegExpLiteral literalNode)",
      "right" : "Node processRegExpLiteral(RegExpLiteral literalNode)",
      "info" : "MethodDeclaration[27256-27889]:MethodDeclaration[27859-28492]"
    }, {
      "left" : "Node processReturnStatement(ReturnStatement statementNode)",
      "right" : "Node processReturnStatement(ReturnStatement statementNode)",
      "info" : "MethodDeclaration[27895-28167]:MethodDeclaration[28498-28770]"
    }, {
      "left" : "Node processScope(Scope scopeNode)",
      "right" : "Node processScope(Scope scopeNode)",
      "info" : "MethodDeclaration[28173-28269]:MethodDeclaration[28776-28872]"
    }, {
      "left" : "Node processStringLiteral(StringLiteral literalNode)",
      "right" : "Node processStringLiteral(StringLiteral literalNode)",
      "info" : "MethodDeclaration[28275-28419]:MethodDeclaration[28878-29022]"
    }, {
      "left" : "Node processSwitchCase(SwitchCase caseNode)",
      "right" : "Node processSwitchCase(SwitchCase caseNode)",
      "info" : "MethodDeclaration[28425-29148]:MethodDeclaration[29028-29751]"
    }, {
      "left" : "Node processSwitchStatement(SwitchStatement statementNode)",
      "right" : "Node processSwitchStatement(SwitchStatement statementNode)",
      "info" : "MethodDeclaration[29154-29456]:MethodDeclaration[29757-30059]"
    }, {
      "left" : "Node processThrowStatement(ThrowStatement statementNode)",
      "right" : "Node processThrowStatement(ThrowStatement statementNode)",
      "info" : "MethodDeclaration[29462-29627]:MethodDeclaration[30065-30230]"
    }, {
      "left" : "Node processTryStatement(TryStatement statementNode)",
      "right" : "Node processTryStatement(TryStatement statementNode)",
      "info" : "MethodDeclaration[29633-30726]:MethodDeclaration[30236-31329]"
    }, {
      "left" : "Node processUnaryExpression(UnaryExpression exprNode)",
      "right" : "Node processUnaryExpression(UnaryExpression exprNode)",
      "info" : "MethodDeclaration[30732-31634]:MethodDeclaration[31335-32237]"
    }, {
      "left" : "private boolean validAssignmentTarget(Node target)",
      "right" : "private boolean validAssignmentTarget(Node target)",
      "info" : "MethodDeclaration[31640-31864]:MethodDeclaration[32243-32467]"
    }, {
      "left" : "Node processVariableDeclaration(VariableDeclaration declarationNode)",
      "right" : "Node processVariableDeclaration(VariableDeclaration declarationNode)",
      "info" : "MethodDeclaration[31870-32337]:MethodDeclaration[32473-32940]"
    }, {
      "left" : "Node processVariableInitializer(VariableInitializer initializerNode)",
      "right" : "Node processVariableInitializer(VariableInitializer initializerNode)",
      "info" : "MethodDeclaration[32343-32688]:MethodDeclaration[32946-33291]"
    }, {
      "left" : "Node processWhileLoop(WhileLoop loopNode)",
      "right" : "Node processWhileLoop(WhileLoop loopNode)",
      "info" : "MethodDeclaration[32694-32895]:MethodDeclaration[33297-33498]"
    }, {
      "left" : "Node processWithStatement(WithStatement statementNode)",
      "right" : "Node processWithStatement(WithStatement statementNode)",
      "info" : "MethodDeclaration[32901-33130]:MethodDeclaration[33504-33733]"
    }, {
      "left" : "Node processIllegalToken(AstNode node)",
      "right" : "Node processIllegalToken(AstNode node)",
      "info" : "MethodDeclaration[33136-33453]:MethodDeclaration[33739-34056]"
    }, {
      "left" : "void reportDestructuringAssign(AstNode node)",
      "right" : "void reportDestructuringAssign(AstNode node)",
      "info" : "MethodDeclaration[33459-33644]:MethodDeclaration[34062-34247]"
    }, {
      "left" : "void reportGetter(AstNode node)",
      "right" : "void reportGetter(AstNode node)",
      "info" : "MethodDeclaration[33650-33834]:MethodDeclaration[34253-34437]"
    }, {
      "left" : "void reportSetter(AstNode node)",
      "right" : "void reportSetter(AstNode node)",
      "info" : "MethodDeclaration[33840-34024]:MethodDeclaration[34443-34627]"
    }, {
      "left" : "void reportGetterParam(AstNode node)",
      "right" : "void reportGetterParam(AstNode node)",
      "info" : "MethodDeclaration[34030-34204]:MethodDeclaration[34633-34807]"
    }, {
      "left" : "void reportSetterParam(AstNode node)",
      "right" : "void reportSetterParam(AstNode node)",
      "info" : "MethodDeclaration[34210-34392]:MethodDeclaration[34813-34995]"
    }, {
      "left" : "private static int transformTokenType(int token)",
      "right" : "private static int transformTokenType(int token)",
      "info" : "MethodDeclaration[34400-49443]:MethodDeclaration[35003-50046]"
    }, {
      "left" : "private Node newNode(int type)",
      "right" : "private Node newNode(int type)",
      "info" : "MethodDeclaration[49519-49611]:MethodDeclaration[50122-50214]"
    }, {
      "left" : "private Node newNode(int type, Node child1)",
      "right" : "private Node newNode(int type, Node child1)",
      "info" : "MethodDeclaration[49615-49728]:MethodDeclaration[50218-50331]"
    }, {
      "left" : "private Node newNode(int type, Node child1, Node child2)",
      "right" : "private Node newNode(int type, Node child1, Node child2)",
      "info" : "MethodDeclaration[49732-49866]:MethodDeclaration[50335-50469]"
    }, {
      "left" : "private Node newNode(int type, Node child1, Node child2, Node child3)",
      "right" : "private Node newNode(int type, Node child1, Node child2, Node child3)",
      "info" : "MethodDeclaration[49870-50025]:MethodDeclaration[50473-50628]"
    }, {
      "left" : "private Node newStringNode(String value)",
      "right" : "private Node newStringNode(String value)",
      "info" : "MethodDeclaration[50029-50138]:MethodDeclaration[50632-50741]"
    }, {
      "left" : "private Node newStringNode(int type, String value)",
      "right" : "private Node newStringNode(int type, String value)",
      "info" : "MethodDeclaration[50142-50267]:MethodDeclaration[50745-50870]"
    }, {
      "left" : "private Node newNumberNode(Double value)",
      "right" : "private Node newNumberNode(Double value)",
      "info" : "MethodDeclaration[50271-50380]:MethodDeclaration[50874-50983]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4154-4160]:Modifier[4154-4160]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4161-4166]:TYPE_DECLARATION_KIND[4161-4166]"
    }, {
      "left" : "IRFactory",
      "right" : "IRFactory",
      "info" : "SimpleName[4167-4176]:SimpleName[4167-4176]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5610-5617]:Modifier[5610-5617]"
    }, {
      "left" : "IRFactory",
      "right" : "IRFactory",
      "info" : "SimpleName[5618-5627]:SimpleName[5618-5627]"
    }, {
      "left" : "String sourceString",
      "right" : "String sourceString",
      "info" : "SingleVariableDeclaration[5628-5647]:SingleVariableDeclaration[5628-5647]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[5669-5686]:SingleVariableDeclaration[5669-5686]"
    }, {
      "left" : "Config config",
      "right" : "Config config",
      "info" : "SingleVariableDeclaration[5708-5721]:SingleVariableDeclaration[5708-5721]"
    }, {
      "left" : "ErrorReporter errorReporter",
      "right" : "ErrorReporter errorReporter",
      "info" : "SingleVariableDeclaration[5743-5770]:SingleVariableDeclaration[5743-5770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5772-6545]:Block[5772-6545]"
    }, {
      "left" : "this.sourceString = sourceString;",
      "right" : "this.sourceString = sourceString;",
      "info" : "ExpressionStatement[5778-5811]:ExpressionStatement[5778-5811]"
    }, {
      "left" : "this.sourceName = sourceName;",
      "right" : "this.sourceName = sourceName;",
      "info" : "ExpressionStatement[5816-5845]:ExpressionStatement[5816-5845]"
    }, {
      "left" : "this.config = config;",
      "right" : "this.config = config;",
      "info" : "ExpressionStatement[5850-5871]:ExpressionStatement[5850-5871]"
    }, {
      "left" : "this.errorReporter = errorReporter;",
      "right" : "this.errorReporter = errorReporter;",
      "info" : "ExpressionStatement[5876-5911]:ExpressionStatement[5876-5911]"
    }, {
      "left" : "this.transformDispatcher = new TransformDispatcher();",
      "right" : "this.transformDispatcher = new TransformDispatcher();",
      "info" : "ExpressionStatement[5916-5969]:ExpressionStatement[5916-5969]"
    }, {
      "left" : "this.templateNode = createTemplateNode();",
      "right" : "this.templateNode = createTemplateNode();",
      "info" : "ExpressionStatement[6054-6095]:ExpressionStatement[6054-6095]"
    }, {
      "left" : "switch (config.languageMode) {\n      case ECMASCRIPT3:\n        // Reserved words are handled by the Rhino parser.\n        reservedKeywords = null;\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }",
      "right" : "switch (config.languageMode) {\n      case ECMASCRIPT3:\n        // Reserved words are handled by the Rhino parser.\n        reservedKeywords = null;\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }",
      "info" : "SwitchStatement[6101-6541]:SwitchStatement[6101-6541]"
    }, {
      "left" : "case ECMASCRIPT3:",
      "right" : "case ECMASCRIPT3:",
      "info" : "SwitchCase[6138-6155]:SwitchCase[6138-6155]"
    }, {
      "left" : "reservedKeywords = null;",
      "right" : "reservedKeywords = null;",
      "info" : "ExpressionStatement[6223-6247]:ExpressionStatement[6223-6247]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6256-6262]:BreakStatement[6256-6262]"
    }, {
      "left" : "case ECMASCRIPT5:",
      "right" : "case ECMASCRIPT5:",
      "info" : "SwitchCase[6269-6286]:SwitchCase[6269-6286]"
    }, {
      "left" : "reservedKeywords = ES5_RESERVED_KEYWORDS;",
      "right" : "reservedKeywords = ES5_RESERVED_KEYWORDS;",
      "info" : "ExpressionStatement[6295-6336]:ExpressionStatement[6295-6336]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6345-6351]:BreakStatement[6345-6351]"
    }, {
      "left" : "case ECMASCRIPT5_STRICT:",
      "right" : "case ECMASCRIPT5_STRICT:",
      "info" : "SwitchCase[6358-6382]:SwitchCase[6358-6382]"
    }, {
      "left" : "reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;",
      "right" : "reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;",
      "info" : "ExpressionStatement[6391-6439]:ExpressionStatement[6391-6439]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6448-6454]:BreakStatement[6448-6454]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6461-6469]:SwitchCase[6461-6469]"
    }, {
      "left" : "throw new IllegalStateException(\"unknown language mode\");",
      "right" : "throw new IllegalStateException(\"unknown language mode\");",
      "info" : "ThrowStatement[6478-6535]:ThrowStatement[6478-6535]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6781-6788]:Modifier[6781-6788]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[6789-6793]:SimpleType[6789-6793]"
    }, {
      "left" : "createTemplateNode",
      "right" : "createTemplateNode",
      "info" : "SimpleName[6794-6812]:SimpleName[6794-6812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6815-6995]:Block[6815-6995]"
    }, {
      "left" : "Node templateNode = new Node(Token.SCRIPT);",
      "right" : "Node templateNode = new Node(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[6863-6906]:VariableDeclarationStatement[6863-6906]"
    }, {
      "left" : "templateNode.putProp(Node.SOURCENAME_PROP, sourceName);",
      "right" : "templateNode.putProp(Node.SOURCENAME_PROP, sourceName);",
      "info" : "ExpressionStatement[6911-6966]:ExpressionStatement[6911-6966]"
    }, {
      "left" : "return templateNode;",
      "right" : "return templateNode;",
      "info" : "ReturnStatement[6971-6991]:ReturnStatement[6971-6991]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6999-7005]:Modifier[6999-7005]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7006-7012]:Modifier[7006-7012]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[7013-7017]:SimpleType[7013-7017]"
    }, {
      "left" : "transformTree",
      "right" : "transformTree",
      "info" : "SimpleName[7018-7031]:SimpleName[7018-7031]"
    }, {
      "left" : "AstRoot node",
      "right" : "AstRoot node",
      "info" : "SingleVariableDeclaration[7032-7044]:SingleVariableDeclaration[7032-7044]"
    }, {
      "left" : "String sourceString",
      "right" : "String sourceString",
      "info" : "SingleVariableDeclaration[7081-7100]:SingleVariableDeclaration[7081-7100]"
    }, {
      "left" : "Config config",
      "right" : "Config config",
      "info" : "SingleVariableDeclaration[7137-7150]:SingleVariableDeclaration[7137-7150]"
    }, {
      "left" : "ErrorReporter errorReporter",
      "right" : "ErrorReporter errorReporter",
      "info" : "SingleVariableDeclaration[7187-7214]:SingleVariableDeclaration[7187-7214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7216-7687]:Block[7216-7687]"
    }, {
      "left" : "IRFactory irFactory = new IRFactory(sourceString, node.getSourceName(),\n        config, errorReporter);",
      "right" : "IRFactory irFactory = new IRFactory(sourceString, node.getSourceName(),\n        config, errorReporter);",
      "info" : "VariableDeclarationStatement[7222-7325]:VariableDeclarationStatement[7222-7325]"
    }, {
      "left" : "Node irNode = irFactory.transform(node);",
      "right" : "Node irNode = irFactory.transform(node);",
      "info" : "VariableDeclarationStatement[7330-7370]:VariableDeclarationStatement[7330-7370]"
    }, {
      "left" : "if (node.getComments() != null)",
      "right" : "if (node.getComments() != null)",
      "info" : "IfStatement[7376-7618]:IfStatement[7376-7618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7408-7618]:Block[7408-7618]"
    }, {
      "left" : "for (Comment comment : node.getComments())",
      "right" : "for (Comment comment : node.getComments())",
      "info" : "EnhancedForStatement[7416-7612]:EnhancedForStatement[7416-7612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7459-7612]:Block[7459-7612]"
    }, {
      "left" : "if (comment.getCommentType() == JSDOC && !comment.isParsed())",
      "right" : "if (comment.getCommentType() == JSDOC && !comment.isParsed())",
      "info" : "IfStatement[7469-7604]:IfStatement[7469-7604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7531-7604]:Block[7531-7604]"
    }, {
      "left" : "irFactory.handlePossibleFileOverviewJsDoc(comment);",
      "right" : "irFactory.handlePossibleFileOverviewJsDoc(comment);",
      "info" : "ExpressionStatement[7543-7594]:ExpressionStatement[7543-7594]"
    }, {
      "left" : "irFactory.setFileOverviewJsDoc(irNode);",
      "right" : "irFactory.setFileOverviewJsDoc(irNode);",
      "info" : "ExpressionStatement[7624-7663]:ExpressionStatement[7624-7663]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[7669-7683]:ReturnStatement[7669-7683]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7691-7698]:Modifier[7691-7698]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7699-7703]:PrimitiveType[7699-7703]"
    }, {
      "left" : "setFileOverviewJsDoc",
      "right" : "setFileOverviewJsDoc",
      "info" : "SimpleName[7704-7724]:SimpleName[7704-7724]"
    }, {
      "left" : "Node irNode",
      "right" : "Node irNode",
      "info" : "SingleVariableDeclaration[7725-7736]:SingleVariableDeclaration[7725-7736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7738-8232]:Block[7738-8232]"
    }, {
      "left" : "irNode.setJSDocInfo(rootNodeJsDocHolder.getJSDocInfo());",
      "right" : "irNode.setJSDocInfo(rootNodeJsDocHolder.getJSDocInfo());",
      "info" : "ExpressionStatement[7901-7957]:ExpressionStatement[7901-7957]"
    }, {
      "left" : "if (fileOverviewInfo != null)",
      "right" : "if (fileOverviewInfo != null)",
      "info" : "IfStatement[7962-8228]:IfStatement[7962-8228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7992-8228]:Block[7992-8228]"
    }, {
      "left" : "if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null))",
      "right" : "if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null))",
      "info" : "IfStatement[8000-8177]:IfStatement[8000-8177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8095-8177]:Block[8095-8177]"
    }, {
      "left" : "fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());",
      "right" : "fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());",
      "info" : "ExpressionStatement[8105-8169]:ExpressionStatement[8105-8169]"
    }, {
      "left" : "irNode.setJSDocInfo(fileOverviewInfo);",
      "right" : "irNode.setJSDocInfo(fileOverviewInfo);",
      "info" : "ExpressionStatement[8184-8222]:ExpressionStatement[8184-8222]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8236-8243]:Modifier[8236-8243]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8244-8248]:SimpleType[8244-8248]"
    }, {
      "left" : "transformBlock",
      "right" : "transformBlock",
      "info" : "SimpleName[8249-8263]:SimpleName[8249-8263]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[8264-8276]:SingleVariableDeclaration[8264-8276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8278-8706]:Block[8278-8706]"
    }, {
      "left" : "Node irNode = transform(node);",
      "right" : "Node irNode = transform(node);",
      "info" : "VariableDeclarationStatement[8284-8314]:VariableDeclarationStatement[8284-8314]"
    }, {
      "left" : "if (irNode.getType() != Token.BLOCK)",
      "right" : "if (irNode.getType() != Token.BLOCK)",
      "info" : "IfStatement[8319-8683]:IfStatement[8319-8683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8356-8683]:Block[8356-8683]"
    }, {
      "left" : "if (irNode.getType() == Token.EMPTY)",
      "right" : "if (irNode.getType() == Token.EMPTY)",
      "info" : "IfStatement[8364-8677]:IfStatement[8364-8677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8401-8485]:Block[8401-8485]"
    }, {
      "left" : "irNode.setType(Token.BLOCK);",
      "right" : "irNode.setType(Token.BLOCK);",
      "info" : "ExpressionStatement[8411-8439]:ExpressionStatement[8411-8439]"
    }, {
      "left" : "irNode.setWasEmptyNode(true);",
      "right" : "irNode.setWasEmptyNode(true);",
      "info" : "ExpressionStatement[8448-8477]:ExpressionStatement[8448-8477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8491-8677]:Block[8491-8677]"
    }, {
      "left" : "Node newBlock = newNode(Token.BLOCK, irNode);",
      "right" : "Node newBlock = newNode(Token.BLOCK, irNode);",
      "info" : "VariableDeclarationStatement[8501-8546]:VariableDeclarationStatement[8501-8546]"
    }, {
      "left" : "newBlock.setLineno(irNode.getLineno());",
      "right" : "newBlock.setLineno(irNode.getLineno());",
      "info" : "ExpressionStatement[8555-8594]:ExpressionStatement[8555-8594]"
    }, {
      "left" : "newBlock.setCharno(irNode.getCharno());",
      "right" : "newBlock.setCharno(irNode.getCharno());",
      "info" : "ExpressionStatement[8603-8642]:ExpressionStatement[8603-8642]"
    }, {
      "left" : "irNode = newBlock;",
      "right" : "irNode = newBlock;",
      "info" : "ExpressionStatement[8651-8669]:ExpressionStatement[8651-8669]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[8688-8702]:ReturnStatement[8688-8702]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8786-8793]:Modifier[8786-8793]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8794-8801]:PrimitiveType[8794-8801]"
    }, {
      "left" : "handlePossibleFileOverviewJsDoc",
      "right" : "handlePossibleFileOverviewJsDoc",
      "info" : "SimpleName[8802-8833]:SimpleName[8802-8833]"
    }, {
      "left" : "JsDocInfoParser jsDocParser",
      "right" : "JsDocInfoParser jsDocParser",
      "info" : "SingleVariableDeclaration[8841-8868]:SingleVariableDeclaration[8841-8868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8870-9053]:Block[8870-9053]"
    }, {
      "left" : "if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo)",
      "right" : "if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo)",
      "info" : "IfStatement[8876-9031]:IfStatement[8876-9031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8940-9031]:Block[8940-9031]"
    }, {
      "left" : "fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();",
      "right" : "fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();",
      "info" : "ExpressionStatement[8948-9006]:ExpressionStatement[8948-9006]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9013-9025]:ReturnStatement[9013-9025]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9036-9049]:ReturnStatement[9036-9049]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9057-9064]:Modifier[9057-9064]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9065-9069]:PrimitiveType[9065-9069]"
    }, {
      "left" : "handlePossibleFileOverviewJsDoc",
      "right" : "handlePossibleFileOverviewJsDoc",
      "info" : "SimpleName[9070-9101]:SimpleName[9070-9101]"
    }, {
      "left" : "Comment comment",
      "right" : "Comment comment",
      "info" : "SingleVariableDeclaration[9102-9117]:SingleVariableDeclaration[9102-9117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9119-9269]:Block[9119-9269]"
    }, {
      "left" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);",
      "right" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);",
      "info" : "VariableDeclarationStatement[9125-9186]:VariableDeclarationStatement[9125-9186]"
    }, {
      "left" : "comment.setParsed(true);",
      "right" : "comment.setParsed(true);",
      "info" : "ExpressionStatement[9191-9215]:ExpressionStatement[9191-9215]"
    }, {
      "left" : "handlePossibleFileOverviewJsDoc(jsDocParser);",
      "right" : "handlePossibleFileOverviewJsDoc(jsDocParser);",
      "info" : "ExpressionStatement[9220-9265]:ExpressionStatement[9220-9265]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9273-9280]:Modifier[9273-9280]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[9281-9290]:SimpleType[9281-9290]"
    }, {
      "left" : "handleJsDoc",
      "right" : "handleJsDoc",
      "info" : "SimpleName[9291-9302]:SimpleName[9291-9302]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[9303-9315]:SingleVariableDeclaration[9303-9315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9317-9643]:Block[9317-9643]"
    }, {
      "left" : "Comment comment = node.getJsDocNode();",
      "right" : "Comment comment = node.getJsDocNode();",
      "info" : "VariableDeclarationStatement[9323-9361]:VariableDeclarationStatement[9323-9361]"
    }, {
      "left" : "if (comment != null)",
      "right" : "if (comment != null)",
      "info" : "IfStatement[9366-9622]:IfStatement[9366-9622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9387-9622]:Block[9387-9622]"
    }, {
      "left" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);",
      "right" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);",
      "info" : "VariableDeclarationStatement[9395-9456]:VariableDeclarationStatement[9395-9456]"
    }, {
      "left" : "comment.setParsed(true);",
      "right" : "comment.setParsed(true);",
      "info" : "ExpressionStatement[9463-9487]:ExpressionStatement[9463-9487]"
    }, {
      "left" : "if (!handlePossibleFileOverviewJsDoc(jsDocParser))",
      "right" : "if (!handlePossibleFileOverviewJsDoc(jsDocParser))",
      "info" : "IfStatement[9494-9616]:IfStatement[9494-9616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9545-9616]:Block[9545-9616]"
    }, {
      "left" : "return jsDocParser.retrieveAndResetParsedJSDocInfo();",
      "right" : "return jsDocParser.retrieveAndResetParsedJSDocInfo();",
      "info" : "ReturnStatement[9555-9608]:ReturnStatement[9555-9608]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9627-9639]:ReturnStatement[9627-9639]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9647-9654]:Modifier[9647-9654]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[9655-9659]:SimpleType[9655-9659]"
    }, {
      "left" : "transform",
      "right" : "transform",
      "info" : "SimpleName[9660-9669]:SimpleName[9660-9669]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[9670-9682]:SingleVariableDeclaration[9670-9682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9684-9898]:Block[9684-9898]"
    }, {
      "left" : "JSDocInfo jsDocInfo = handleJsDoc(node);",
      "right" : "JSDocInfo jsDocInfo = handleJsDoc(node);",
      "info" : "VariableDeclarationStatement[9690-9730]:VariableDeclarationStatement[9690-9730]"
    }, {
      "left" : "Node irNode = justTransform(node);",
      "right" : "Node irNode = justTransform(node);",
      "info" : "VariableDeclarationStatement[9735-9769]:VariableDeclarationStatement[9735-9769]"
    }, {
      "left" : "if (jsDocInfo != null)",
      "right" : "if (jsDocInfo != null)",
      "info" : "IfStatement[9774-9842]:IfStatement[9774-9842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9797-9842]:Block[9797-9842]"
    }, {
      "left" : "irNode.setJSDocInfo(jsDocInfo);",
      "right" : "irNode.setJSDocInfo(jsDocInfo);",
      "info" : "ExpressionStatement[9805-9836]:ExpressionStatement[9805-9836]"
    }, {
      "left" : "setSourceInfo(irNode, node);",
      "right" : "setSourceInfo(irNode, node);",
      "info" : "ExpressionStatement[9847-9875]:ExpressionStatement[9847-9875]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[9880-9894]:ReturnStatement[9880-9894]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9902-9909]:Modifier[9902-9909]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[9910-9914]:SimpleType[9910-9914]"
    }, {
      "left" : "transformNameAsString",
      "right" : "transformNameAsString",
      "info" : "SimpleName[9915-9936]:SimpleName[9915-9936]"
    }, {
      "left" : "Name node",
      "right" : "Name node",
      "info" : "SingleVariableDeclaration[9937-9946]:SingleVariableDeclaration[9937-9946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9948-10186]:Block[9948-10186]"
    }, {
      "left" : "JSDocInfo jsDocInfo = handleJsDoc(node);",
      "right" : "JSDocInfo jsDocInfo = handleJsDoc(node);",
      "info" : "VariableDeclarationStatement[9954-9994]:VariableDeclarationStatement[9954-9994]"
    }, {
      "left" : "Node irNode = transformDispatcher.processName(node, true);",
      "right" : "Node irNode = transformDispatcher.processName(node, true);",
      "info" : "VariableDeclarationStatement[9999-10057]:VariableDeclarationStatement[9999-10057]"
    }, {
      "left" : "if (jsDocInfo != null)",
      "right" : "if (jsDocInfo != null)",
      "info" : "IfStatement[10062-10130]:IfStatement[10062-10130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10085-10130]:Block[10085-10130]"
    }, {
      "left" : "irNode.setJSDocInfo(jsDocInfo);",
      "right" : "irNode.setJSDocInfo(jsDocInfo);",
      "info" : "ExpressionStatement[10093-10124]:ExpressionStatement[10093-10124]"
    }, {
      "left" : "setSourceInfo(irNode, node);",
      "right" : "setSourceInfo(irNode, node);",
      "info" : "ExpressionStatement[10135-10163]:ExpressionStatement[10135-10163]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[10168-10182]:ReturnStatement[10168-10182]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10228-10235]:Modifier[10777-10784]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10236-10240]:PrimitiveType[10785-10789]"
    }, {
      "left" : "setSourceInfo",
      "right" : "setSourceInfo",
      "info" : "SimpleName[10241-10254]:SimpleName[10790-10803]"
    }, {
      "left" : "Node irNode",
      "right" : "Node irNode",
      "info" : "SingleVariableDeclaration[10255-10266]:SingleVariableDeclaration[10804-10815]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[10268-10280]:SingleVariableDeclaration[10817-10829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10282-11049]:Block[10831-11598]"
    }, {
      "left" : "if (irNode.getType() == Token.FUNCTION &&\n        irNode.getFirstChild().getLineno() != -1)",
      "right" : "if (irNode.getType() == Token.FUNCTION &&\n        irNode.getFirstChild().getLineno() != -1)",
      "info" : "IfStatement[10362-11045]:IfStatement[10911-11594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10454-10581]:Block[11003-11130]"
    }, {
      "left" : "irNode.setLineno(irNode.getFirstChild().getLineno());",
      "right" : "irNode.setLineno(irNode.getFirstChild().getLineno());",
      "info" : "ExpressionStatement[10462-10515]:ExpressionStatement[11011-11064]"
    }, {
      "left" : "irNode.setCharno(irNode.getFirstChild().getCharno());",
      "right" : "irNode.setCharno(irNode.getFirstChild().getCharno());",
      "info" : "ExpressionStatement[10522-10575]:ExpressionStatement[11071-11124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10587-11045]:Block[11136-11594]"
    }, {
      "left" : "if (irNode.getLineno() == -1)",
      "right" : "if (irNode.getLineno() == -1)",
      "info" : "IfStatement[10595-11039]:IfStatement[11144-11588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10625-11039]:Block[11174-11588]"
    }, {
      "left" : "int lineno = node.getLineno();",
      "right" : "int lineno = node.getLineno();",
      "info" : "VariableDeclarationStatement[10867-10897]:VariableDeclarationStatement[11416-11446]"
    }, {
      "left" : "irNode.setLineno(lineno);",
      "right" : "irNode.setLineno(lineno);",
      "info" : "ExpressionStatement[10906-10931]:ExpressionStatement[11455-11480]"
    }, {
      "left" : "int charno = position2charno(node.getAbsolutePosition());",
      "right" : "int charno = position2charno(node.getAbsolutePosition());",
      "info" : "VariableDeclarationStatement[10940-10997]:VariableDeclarationStatement[11489-11546]"
    }, {
      "left" : "irNode.setCharno(charno);",
      "right" : "irNode.setCharno(charno);",
      "info" : "ExpressionStatement[11006-11031]:ExpressionStatement[11555-11580]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11470-11477]:Modifier[12019-12026]"
    }, {
      "left" : "JsDocInfoParser",
      "right" : "JsDocInfoParser",
      "info" : "SimpleType[11478-11493]:SimpleType[12027-12042]"
    }, {
      "left" : "createJsDocInfoParser",
      "right" : "createJsDocInfoParser",
      "info" : "SimpleName[11494-11515]:SimpleName[12043-12064]"
    }, {
      "left" : "Comment node",
      "right" : "Comment node",
      "info" : "SingleVariableDeclaration[11516-11528]:SingleVariableDeclaration[12065-12077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11530-12259]:Block[12079-12808]"
    }, {
      "left" : "String comment = node.getValue();",
      "right" : "String comment = node.getValue();",
      "info" : "VariableDeclarationStatement[11536-11569]:VariableDeclarationStatement[12085-12118]"
    }, {
      "left" : "int lineno = node.getLineno();",
      "right" : "int lineno = node.getLineno();",
      "info" : "VariableDeclarationStatement[11574-11604]:VariableDeclarationStatement[12123-12153]"
    }, {
      "left" : "int position = node.getAbsolutePosition();",
      "right" : "int position = node.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[11609-11651]:VariableDeclarationStatement[12158-12200]"
    }, {
      "left" : "int numOpeningChars = 3;",
      "right" : "int numOpeningChars = 3;",
      "info" : "VariableDeclarationStatement[11731-11755]:VariableDeclarationStatement[12280-12304]"
    }, {
      "left" : "JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          sourceName,\n          config,\n          errorReporter);",
      "right" : "JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          sourceName,\n          config,\n          errorReporter);",
      "info" : "VariableDeclarationStatement[11760-12081]:VariableDeclarationStatement[12309-12630]"
    }, {
      "left" : "jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);",
      "right" : "jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);",
      "info" : "ExpressionStatement[12086-12146]:ExpressionStatement[12635-12695]"
    }, {
      "left" : "jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);",
      "right" : "jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);",
      "info" : "ExpressionStatement[12151-12206]:ExpressionStatement[12700-12755]"
    }, {
      "left" : "jsdocParser.parse();",
      "right" : "jsdocParser.parse();",
      "info" : "ExpressionStatement[12211-12231]:ExpressionStatement[12760-12780]"
    }, {
      "left" : "return jsdocParser;",
      "right" : "return jsdocParser;",
      "info" : "ReturnStatement[12236-12255]:ReturnStatement[12785-12804]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12263-12270]:Modifier[12812-12819]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12271-12274]:PrimitiveType[12820-12823]"
    }, {
      "left" : "position2charno",
      "right" : "position2charno",
      "info" : "SimpleName[12275-12290]:SimpleName[12824-12839]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[12291-12303]:SingleVariableDeclaration[12840-12852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12305-12532]:Block[12854-13081]"
    }, {
      "left" : "int lineIndex = sourceString.lastIndexOf('\\n', position);",
      "right" : "int lineIndex = sourceString.lastIndexOf('\\n', position);",
      "info" : "VariableDeclarationStatement[12311-12368]:VariableDeclarationStatement[12860-12917]"
    }, {
      "left" : "if (lineIndex == -1)",
      "right" : "if (lineIndex == -1)",
      "info" : "IfStatement[12373-12528]:IfStatement[12922-13077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12394-12424]:Block[12943-12973]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[12402-12418]:ReturnStatement[12951-12967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12430-12528]:Block[12979-13077]"
    }, {
      "left" : "return position - lineIndex - 1;",
      "right" : "return position - lineIndex - 1;",
      "info" : "ReturnStatement[12490-12522]:ReturnStatement[13039-13071]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12536-12543]:Modifier[13085-13092]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[12544-12548]:SimpleType[13093-13097]"
    }, {
      "left" : "justTransform",
      "right" : "justTransform",
      "info" : "SimpleName[12549-12562]:SimpleName[13098-13111]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[12563-12575]:SingleVariableDeclaration[13112-13124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12577-12628]:Block[13126-13177]"
    }, {
      "left" : "return transformDispatcher.process(node);",
      "right" : "return transformDispatcher.process(node);",
      "info" : "ReturnStatement[12583-12624]:ReturnStatement[13132-13173]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12632-12639]:Modifier[13181-13188]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[12640-12645]:TYPE_DECLARATION_KIND[13189-13194]"
    }, {
      "left" : "TransformDispatcher",
      "right" : "TransformDispatcher",
      "info" : "SimpleName[12646-12665]:SimpleName[13195-13214]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12705-12712]:Modifier[13254-13261]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[12713-12717]:SimpleType[13262-13266]"
    }, {
      "left" : "processGeneric",
      "right" : "processGeneric",
      "info" : "SimpleName[12718-12732]:SimpleName[13267-13281]"
    }, {
      "left" : "com.google.javascript.jscomp.mozilla.rhino.Node n",
      "right" : "com.google.javascript.jscomp.mozilla.rhino.Node n",
      "info" : "SingleVariableDeclaration[12742-12791]:SingleVariableDeclaration[13291-13340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12793-13015]:Block[13342-13564]"
    }, {
      "left" : "Node node = newNode(transformTokenType(n.getType()));",
      "right" : "Node node = newNode(transformTokenType(n.getType()));",
      "info" : "VariableDeclarationStatement[12801-12854]:VariableDeclarationStatement[13350-13403]"
    }, {
      "left" : "for (com.google.javascript.jscomp.mozilla.rhino.Node child : n)",
      "right" : "for (com.google.javascript.jscomp.mozilla.rhino.Node child : n)",
      "info" : "EnhancedForStatement[12861-12990]:EnhancedForStatement[13410-13539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12925-12990]:Block[13474-13539]"
    }, {
      "left" : "node.addChildToBack(transform((AstNode)child));",
      "right" : "node.addChildToBack(transform((AstNode)child));",
      "info" : "ExpressionStatement[12935-12982]:ExpressionStatement[13484-13531]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[12997-13009]:ReturnStatement[13546-13558]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13463-13470]:Modifier[14012-14019]"
    }, {
      "left" : "transformAsString",
      "right" : "transformAsString",
      "info" : "SimpleName[13476-13493]:SimpleName[14025-14042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13505-13891]:Block[14054-14494]"
    }, {
      "left" : "Node ret;",
      "right" : "Node ret;",
      "info" : "VariableDeclarationStatement[13513-13522]:VariableDeclarationStatement[14062-14071]"
    }, {
      "left" : "if (n instanceof Name)",
      "right" : "if (n instanceof Name)",
      "info" : "IfStatement[13529-13867]:IfStatement[14078-14407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13552-13607]:Block[14101-14156]"
    }, {
      "left" : "ret = transformNameAsString((Name)n);",
      "right" : "ret = transformNameAsString((Name)n);",
      "info" : "ExpressionStatement[13562-13599]:ExpressionStatement[14111-14148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13613-13867]:Block[14318-14407]"
    }, {
      "left" : "ret = transform(n);",
      "right" : "ret = transform(n);",
      "info" : "ExpressionStatement[13623-13642]:ExpressionStatement[14328-14347]"
    }, {
      "left" : "Preconditions.checkState(ret.getType() == Token.NUMBER\n            || ret.getType() == Token.STRING);",
      "right" : "Preconditions.checkState(ret.getType() == Token.STRING);",
      "info" : "ExpressionStatement[13651-13752]:ExpressionStatement[14414-14470]"
    }, {
      "left" : "ret.getType() == Token.STRING",
      "right" : "ret.getType() == Token.STRING",
      "info" : "InfixExpression[13721-13750]:InfixExpression[14439-14468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13796-13859]:Block[14194-14312]"
    }, {
      "left" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "right" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "info" : "ExpressionStatement[13806-13849]:ExpressionStatement[14261-14304]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[13874-13885]:ReturnStatement[14477-14488]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13897-13906]:MarkerAnnotation[14500-14509]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[13911-13915]:SimpleType[14514-14518]"
    }, {
      "left" : "processArrayLiteral",
      "right" : "processArrayLiteral",
      "info" : "SimpleName[13916-13935]:SimpleName[14519-14538]"
    }, {
      "left" : "ArrayLiteral literalNode",
      "right" : "ArrayLiteral literalNode",
      "info" : "SingleVariableDeclaration[13936-13960]:SingleVariableDeclaration[14539-14563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13962-14262]:Block[14565-14865]"
    }, {
      "left" : "if (literalNode.isDestructuring())",
      "right" : "if (literalNode.isDestructuring())",
      "info" : "IfStatement[13970-14062]:IfStatement[14573-14665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14005-14062]:Block[14608-14665]"
    }, {
      "left" : "reportDestructuringAssign(literalNode);",
      "right" : "reportDestructuringAssign(literalNode);",
      "info" : "ExpressionStatement[14015-14054]:ExpressionStatement[14618-14657]"
    }, {
      "left" : "Node node = newNode(Token.ARRAYLIT);",
      "right" : "Node node = newNode(Token.ARRAYLIT);",
      "info" : "VariableDeclarationStatement[14070-14106]:VariableDeclarationStatement[14673-14709]"
    }, {
      "left" : "for (AstNode child : literalNode.getElements())",
      "right" : "for (AstNode child : literalNode.getElements())",
      "info" : "EnhancedForStatement[14113-14237]:EnhancedForStatement[14716-14840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14161-14237]:Block[14764-14840]"
    }, {
      "left" : "Node c = transform(child);",
      "right" : "Node c = transform(child);",
      "info" : "VariableDeclarationStatement[14171-14197]:VariableDeclarationStatement[14774-14800]"
    }, {
      "left" : "node.addChildToBack(c);",
      "right" : "node.addChildToBack(c);",
      "info" : "ExpressionStatement[14206-14229]:ExpressionStatement[14809-14832]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[14244-14256]:ReturnStatement[14847-14859]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14268-14277]:MarkerAnnotation[14871-14880]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14282-14286]:SimpleType[14885-14889]"
    }, {
      "left" : "processAssignment",
      "right" : "processAssignment",
      "info" : "SimpleName[14287-14304]:SimpleName[14890-14907]"
    }, {
      "left" : "Assignment assignmentNode",
      "right" : "Assignment assignmentNode",
      "info" : "SingleVariableDeclaration[14305-14330]:SingleVariableDeclaration[14908-14933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14332-14644]:Block[14935-15247]"
    }, {
      "left" : "Node assign = processInfixExpression(assignmentNode);",
      "right" : "Node assign = processInfixExpression(assignmentNode);",
      "info" : "VariableDeclarationStatement[14340-14393]:VariableDeclarationStatement[14943-14996]"
    }, {
      "left" : "Node target = assign.getFirstChild();",
      "right" : "Node target = assign.getFirstChild();",
      "info" : "VariableDeclarationStatement[14400-14437]:VariableDeclarationStatement[15003-15040]"
    }, {
      "left" : "if (!validAssignmentTarget(target))",
      "right" : "if (!validAssignmentTarget(target))",
      "info" : "IfStatement[14444-14617]:IfStatement[15047-15220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14480-14617]:Block[15083-15220]"
    }, {
      "left" : "errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[14490-14609]:ExpressionStatement[15093-15212]"
    }, {
      "left" : "return assign;",
      "right" : "return assign;",
      "info" : "ReturnStatement[14624-14638]:ReturnStatement[15227-15241]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14650-14659]:MarkerAnnotation[15253-15262]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14664-14668]:SimpleType[15267-15271]"
    }, {
      "left" : "processAstRoot",
      "right" : "processAstRoot",
      "info" : "SimpleName[14669-14683]:SimpleName[15272-15286]"
    }, {
      "left" : "AstRoot rootNode",
      "right" : "AstRoot rootNode",
      "info" : "SingleVariableDeclaration[14684-14700]:SingleVariableDeclaration[15287-15303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14702-14941]:Block[15305-15544]"
    }, {
      "left" : "Node node = newNode(Token.SCRIPT);",
      "right" : "Node node = newNode(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[14710-14744]:VariableDeclarationStatement[15313-15347]"
    }, {
      "left" : "for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode)",
      "right" : "for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode)",
      "info" : "EnhancedForStatement[14751-14887]:EnhancedForStatement[15354-15490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14822-14887]:Block[15425-15490]"
    }, {
      "left" : "node.addChildToBack(transform((AstNode)child));",
      "right" : "node.addChildToBack(transform((AstNode)child));",
      "info" : "ExpressionStatement[14832-14879]:ExpressionStatement[15435-15482]"
    }, {
      "left" : "parseDirectives(node);",
      "right" : "parseDirectives(node);",
      "info" : "ExpressionStatement[14894-14916]:ExpressionStatement[15497-15519]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[14923-14935]:ReturnStatement[15526-15538]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15282-15289]:Modifier[15885-15892]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15290-15294]:PrimitiveType[15893-15897]"
    }, {
      "left" : "parseDirectives",
      "right" : "parseDirectives",
      "info" : "SimpleName[15295-15310]:SimpleName[15898-15913]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[15311-15320]:SingleVariableDeclaration[15914-15923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15322-15798]:Block[15925-16401]"
    }, {
      "left" : "Set<String> directives = null;",
      "right" : "Set<String> directives = null;",
      "info" : "VariableDeclarationStatement[15394-15424]:VariableDeclarationStatement[15997-16027]"
    }, {
      "left" : "while (isDirective(node.getFirstChild()))",
      "right" : "while (isDirective(node.getFirstChild()))",
      "info" : "WhileStatement[15431-15711]:WhileStatement[16034-16314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15473-15711]:Block[16076-16314]"
    }, {
      "left" : "String directive = node.removeFirstChild().getFirstChild().getString();",
      "right" : "String directive = node.removeFirstChild().getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[15483-15554]:VariableDeclarationStatement[16086-16157]"
    }, {
      "left" : "if (directives == null)",
      "right" : "if (directives == null)",
      "info" : "IfStatement[15563-15703]:IfStatement[16166-16306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15587-15649]:Block[16190-16252]"
    }, {
      "left" : "directives = Sets.newHashSet(directive);",
      "right" : "directives = Sets.newHashSet(directive);",
      "info" : "ExpressionStatement[15599-15639]:ExpressionStatement[16202-16242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15655-15703]:Block[16258-16306]"
    }, {
      "left" : "directives.add(directive);",
      "right" : "directives.add(directive);",
      "info" : "ExpressionStatement[15667-15693]:ExpressionStatement[16270-16296]"
    }, {
      "left" : "if (directives != null)",
      "right" : "if (directives != null)",
      "info" : "IfStatement[15719-15792]:IfStatement[16322-16395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15743-15792]:Block[16346-16395]"
    }, {
      "left" : "node.setDirectives(directives);",
      "right" : "node.setDirectives(directives);",
      "info" : "ExpressionStatement[15753-15784]:ExpressionStatement[16356-16387]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15804-15811]:Modifier[16407-16414]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15812-15819]:PrimitiveType[16415-16422]"
    }, {
      "left" : "isDirective",
      "right" : "isDirective",
      "info" : "SimpleName[15820-15831]:SimpleName[16423-16434]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15832-15838]:SingleVariableDeclaration[16435-16441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15840-16114]:Block[16443-16717]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[15848-15876]:IfStatement[16451-16479]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15863-15876]:ReturnStatement[16466-16479]"
    }, {
      "left" : "int nType = n.getType();",
      "right" : "int nType = n.getType();",
      "info" : "VariableDeclarationStatement[15884-15908]:VariableDeclarationStatement[16487-16511]"
    }, {
      "left" : "return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n          n.getFirstChild().getType() == Token.STRING &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());",
      "right" : "return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n          n.getFirstChild().getType() == Token.STRING &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());",
      "info" : "ReturnStatement[15915-16108]:ReturnStatement[16518-16711]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16120-16129]:MarkerAnnotation[16723-16732]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[16134-16138]:SimpleType[16737-16741]"
    }, {
      "left" : "processBlock",
      "right" : "processBlock",
      "info" : "SimpleName[16139-16151]:SimpleName[16742-16754]"
    }, {
      "left" : "Block blockNode",
      "right" : "Block blockNode",
      "info" : "SingleVariableDeclaration[16152-16167]:SingleVariableDeclaration[16755-16770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16169-16216]:Block[16772-16819]"
    }, {
      "left" : "return processGeneric(blockNode);",
      "right" : "return processGeneric(blockNode);",
      "info" : "ReturnStatement[16177-16210]:ReturnStatement[16780-16813]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16222-16231]:MarkerAnnotation[16825-16834]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[16236-16240]:SimpleType[16839-16843]"
    }, {
      "left" : "processBreakStatement",
      "right" : "processBreakStatement",
      "info" : "SimpleName[16241-16262]:SimpleName[16844-16865]"
    }, {
      "left" : "BreakStatement statementNode",
      "right" : "BreakStatement statementNode",
      "info" : "SingleVariableDeclaration[16263-16291]:SingleVariableDeclaration[16866-16894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16293-16611]:Block[16896-17214]"
    }, {
      "left" : "Node node = newNode(Token.BREAK);",
      "right" : "Node node = newNode(Token.BREAK);",
      "info" : "VariableDeclarationStatement[16301-16334]:VariableDeclarationStatement[16904-16937]"
    }, {
      "left" : "if (statementNode.getBreakLabel() != null)",
      "right" : "if (statementNode.getBreakLabel() != null)",
      "info" : "IfStatement[16341-16586]:IfStatement[16944-17189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16384-16586]:Block[16987-17189]"
    }, {
      "left" : "Node labelName = transform(statementNode.getBreakLabel());",
      "right" : "Node labelName = transform(statementNode.getBreakLabel());",
      "info" : "VariableDeclarationStatement[16394-16452]:VariableDeclarationStatement[16997-17055]"
    }, {
      "left" : "labelName.setType(Token.LABEL_NAME);",
      "right" : "labelName.setType(Token.LABEL_NAME);",
      "info" : "ExpressionStatement[16502-16538]:ExpressionStatement[17105-17141]"
    }, {
      "left" : "node.addChildToBack(labelName);",
      "right" : "node.addChildToBack(labelName);",
      "info" : "ExpressionStatement[16547-16578]:ExpressionStatement[17150-17181]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[16593-16605]:ReturnStatement[17196-17208]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16617-16626]:MarkerAnnotation[17220-17229]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[16631-16635]:SimpleType[17234-17238]"
    }, {
      "left" : "processCatchClause",
      "right" : "processCatchClause",
      "info" : "SimpleName[16636-16654]:SimpleName[17239-17257]"
    }, {
      "left" : "CatchClause clauseNode",
      "right" : "CatchClause clauseNode",
      "info" : "SingleVariableDeclaration[16655-16677]:SingleVariableDeclaration[17258-17280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16679-17105]:Block[17282-17708]"
    }, {
      "left" : "AstNode catchVar = clauseNode.getVarName();",
      "right" : "AstNode catchVar = clauseNode.getVarName();",
      "info" : "VariableDeclarationStatement[16687-16730]:VariableDeclarationStatement[17290-17333]"
    }, {
      "left" : "Node node = newNode(Token.CATCH, transform(catchVar));",
      "right" : "Node node = newNode(Token.CATCH, transform(catchVar));",
      "info" : "VariableDeclarationStatement[16737-16791]:VariableDeclarationStatement[17340-17394]"
    }, {
      "left" : "if (clauseNode.getCatchCondition() != null)",
      "right" : "if (clauseNode.getCatchCondition() != null)",
      "info" : "IfStatement[16798-17015]:IfStatement[17401-17618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16842-17015]:Block[17445-17618]"
    }, {
      "left" : "errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[16852-17007]:ExpressionStatement[17455-17610]"
    }, {
      "left" : "node.addChildToBack(transformBlock(clauseNode.getBody()));",
      "right" : "node.addChildToBack(transformBlock(clauseNode.getBody()));",
      "info" : "ExpressionStatement[17022-17080]:ExpressionStatement[17625-17683]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[17087-17099]:ReturnStatement[17690-17702]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17111-17120]:MarkerAnnotation[17714-17723]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17125-17129]:SimpleType[17728-17732]"
    }, {
      "left" : "processConditionalExpression",
      "right" : "processConditionalExpression",
      "info" : "SimpleName[17130-17158]:SimpleName[17733-17761]"
    }, {
      "left" : "ConditionalExpression exprNode",
      "right" : "ConditionalExpression exprNode",
      "info" : "SingleVariableDeclaration[17159-17189]:SingleVariableDeclaration[17762-17792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17191-17397]:Block[17794-18000]"
    }, {
      "left" : "return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));",
      "right" : "return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));",
      "info" : "ReturnStatement[17199-17391]:ReturnStatement[17802-17994]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17403-17412]:MarkerAnnotation[18006-18015]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17417-17421]:SimpleType[18020-18024]"
    }, {
      "left" : "processContinueStatement",
      "right" : "processContinueStatement",
      "info" : "SimpleName[17422-17446]:SimpleName[18025-18049]"
    }, {
      "left" : "ContinueStatement statementNode",
      "right" : "ContinueStatement statementNode",
      "info" : "SingleVariableDeclaration[17447-17478]:SingleVariableDeclaration[18050-18081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17480-17791]:Block[18083-18394]"
    }, {
      "left" : "Node node = newNode(Token.CONTINUE);",
      "right" : "Node node = newNode(Token.CONTINUE);",
      "info" : "VariableDeclarationStatement[17488-17524]:VariableDeclarationStatement[18091-18127]"
    }, {
      "left" : "if (statementNode.getLabel() != null)",
      "right" : "if (statementNode.getLabel() != null)",
      "info" : "IfStatement[17531-17766]:IfStatement[18134-18369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17569-17766]:Block[18172-18369]"
    }, {
      "left" : "Node labelName = transform(statementNode.getLabel());",
      "right" : "Node labelName = transform(statementNode.getLabel());",
      "info" : "VariableDeclarationStatement[17579-17632]:VariableDeclarationStatement[18182-18235]"
    }, {
      "left" : "labelName.setType(Token.LABEL_NAME);",
      "right" : "labelName.setType(Token.LABEL_NAME);",
      "info" : "ExpressionStatement[17682-17718]:ExpressionStatement[18285-18321]"
    }, {
      "left" : "node.addChildToBack(labelName);",
      "right" : "node.addChildToBack(labelName);",
      "info" : "ExpressionStatement[17727-17758]:ExpressionStatement[18330-18361]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[17773-17785]:ReturnStatement[18376-18388]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17797-17806]:MarkerAnnotation[18400-18409]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17811-17815]:SimpleType[18414-18418]"
    }, {
      "left" : "processDoLoop",
      "right" : "processDoLoop",
      "info" : "SimpleName[17816-17829]:SimpleName[18419-18432]"
    }, {
      "left" : "DoLoop loopNode",
      "right" : "DoLoop loopNode",
      "info" : "SingleVariableDeclaration[17830-17845]:SingleVariableDeclaration[18433-18448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17847-17989]:Block[18450-18592]"
    }, {
      "left" : "return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));",
      "right" : "return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));",
      "info" : "ReturnStatement[17855-17983]:ReturnStatement[18458-18586]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17995-18004]:MarkerAnnotation[18598-18607]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18009-18013]:SimpleType[18612-18616]"
    }, {
      "left" : "processElementGet",
      "right" : "processElementGet",
      "info" : "SimpleName[18014-18031]:SimpleName[18617-18634]"
    }, {
      "left" : "ElementGet getNode",
      "right" : "ElementGet getNode",
      "info" : "SingleVariableDeclaration[18032-18050]:SingleVariableDeclaration[18635-18653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18052-18192]:Block[18655-18795]"
    }, {
      "left" : "return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));",
      "right" : "return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));",
      "info" : "ReturnStatement[18060-18186]:ReturnStatement[18663-18789]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18198-18207]:MarkerAnnotation[18801-18810]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18212-18216]:SimpleType[18815-18819]"
    }, {
      "left" : "processEmptyExpression",
      "right" : "processEmptyExpression",
      "info" : "SimpleName[18217-18239]:SimpleName[18820-18842]"
    }, {
      "left" : "EmptyExpression exprNode",
      "right" : "EmptyExpression exprNode",
      "info" : "SingleVariableDeclaration[18240-18264]:SingleVariableDeclaration[18843-18867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18266-18332]:Block[18869-18935]"
    }, {
      "left" : "Node node = newNode(Token.EMPTY);",
      "right" : "Node node = newNode(Token.EMPTY);",
      "info" : "VariableDeclarationStatement[18274-18307]:VariableDeclarationStatement[18877-18910]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[18314-18326]:ReturnStatement[18917-18929]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18338-18347]:MarkerAnnotation[18941-18950]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18352-18356]:SimpleType[18955-18959]"
    }, {
      "left" : "processExpressionStatement",
      "right" : "processExpressionStatement",
      "info" : "SimpleName[18357-18383]:SimpleName[18960-18986]"
    }, {
      "left" : "ExpressionStatement statementNode",
      "right" : "ExpressionStatement statementNode",
      "info" : "SingleVariableDeclaration[18384-18417]:SingleVariableDeclaration[18987-19020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18419-18586]:Block[19022-19189]"
    }, {
      "left" : "Node node = newNode(transformTokenType(statementNode.getType()));",
      "right" : "Node node = newNode(transformTokenType(statementNode.getType()));",
      "info" : "VariableDeclarationStatement[18427-18492]:VariableDeclarationStatement[19030-19095]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getExpression()));",
      "right" : "node.addChildToBack(transform(statementNode.getExpression()));",
      "info" : "ExpressionStatement[18499-18561]:ExpressionStatement[19102-19164]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[18568-18580]:ReturnStatement[19171-19183]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18592-18601]:MarkerAnnotation[19195-19204]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18606-18610]:SimpleType[19209-19213]"
    }, {
      "left" : "processForInLoop",
      "right" : "processForInLoop",
      "info" : "SimpleName[18611-18627]:SimpleName[19214-19230]"
    }, {
      "left" : "ForInLoop loopNode",
      "right" : "ForInLoop loopNode",
      "info" : "SingleVariableDeclaration[18628-18646]:SingleVariableDeclaration[19231-19249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18648-18841]:Block[19251-19444]"
    }, {
      "left" : "return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));",
      "right" : "return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));",
      "info" : "ReturnStatement[18656-18835]:ReturnStatement[19259-19438]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18847-18856]:MarkerAnnotation[19450-19459]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18861-18865]:SimpleType[19464-19468]"
    }, {
      "left" : "processForLoop",
      "right" : "processForLoop",
      "info" : "SimpleName[18866-18880]:SimpleName[19469-19483]"
    }, {
      "left" : "ForLoop loopNode",
      "right" : "ForLoop loopNode",
      "info" : "SingleVariableDeclaration[18881-18897]:SingleVariableDeclaration[19484-19500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18899-19177]:Block[19502-19780]"
    }, {
      "left" : "Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));",
      "right" : "Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));",
      "info" : "VariableDeclarationStatement[18907-19089]:VariableDeclarationStatement[19510-19692]"
    }, {
      "left" : "node.addChildToBack(transformBlock(loopNode.getBody()));",
      "right" : "node.addChildToBack(transformBlock(loopNode.getBody()));",
      "info" : "ExpressionStatement[19096-19152]:ExpressionStatement[19699-19755]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[19159-19171]:ReturnStatement[19762-19774]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19183-19192]:MarkerAnnotation[19786-19795]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[19197-19201]:SimpleType[19800-19804]"
    }, {
      "left" : "processFunctionCall",
      "right" : "processFunctionCall",
      "info" : "SimpleName[19202-19221]:SimpleName[19805-19824]"
    }, {
      "left" : "FunctionCall callNode",
      "right" : "FunctionCall callNode",
      "info" : "SingleVariableDeclaration[19222-19243]:SingleVariableDeclaration[19825-19846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19245-19681]:Block[19848-20284]"
    }, {
      "left" : "Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));",
      "right" : "Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));",
      "info" : "VariableDeclarationStatement[19253-19373]:VariableDeclarationStatement[19856-19976]"
    }, {
      "left" : "for (AstNode child : callNode.getArguments())",
      "right" : "for (AstNode child : callNode.getArguments())",
      "info" : "EnhancedForStatement[19380-19482]:EnhancedForStatement[19983-20085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19426-19482]:Block[20029-20085]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[19436-19474]:ExpressionStatement[20039-20077]"
    }, {
      "left" : "int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();",
      "right" : "int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();",
      "info" : "VariableDeclarationStatement[19490-19559]:VariableDeclarationStatement[20093-20162]"
    }, {
      "left" : "node.setLineno(callNode.getLineno());",
      "right" : "node.setLineno(callNode.getLineno());",
      "info" : "ExpressionStatement[19566-19603]:ExpressionStatement[20169-20206]"
    }, {
      "left" : "node.setCharno(position2charno(leftParamPos));",
      "right" : "node.setCharno(position2charno(leftParamPos));",
      "info" : "ExpressionStatement[19610-19656]:ExpressionStatement[20213-20259]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[19663-19675]:ReturnStatement[20266-20278]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19687-19696]:MarkerAnnotation[20290-20299]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[19701-19705]:SimpleType[20304-20308]"
    }, {
      "left" : "processFunctionNode",
      "right" : "processFunctionNode",
      "info" : "SimpleName[19706-19725]:SimpleName[20309-20328]"
    }, {
      "left" : "FunctionNode functionNode",
      "right" : "FunctionNode functionNode",
      "info" : "SingleVariableDeclaration[19726-19751]:SingleVariableDeclaration[20329-20354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19753-21998]:Block[20356-22601]"
    }, {
      "left" : "Name name = functionNode.getFunctionName();",
      "right" : "Name name = functionNode.getFunctionName();",
      "info" : "VariableDeclarationStatement[19761-19804]:VariableDeclarationStatement[20364-20407]"
    }, {
      "left" : "Boolean isUnnamedFunction = false;",
      "right" : "Boolean isUnnamedFunction = false;",
      "info" : "VariableDeclarationStatement[19811-19845]:VariableDeclarationStatement[20414-20448]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[19852-20248]:IfStatement[20455-20851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19870-20248]:Block[20473-20851]"
    }, {
      "left" : "int functionType = functionNode.getFunctionType();",
      "right" : "int functionType = functionNode.getFunctionType();",
      "info" : "VariableDeclarationStatement[19880-19930]:VariableDeclarationStatement[20483-20533]"
    }, {
      "left" : "if (functionType != FunctionNode.FUNCTION_EXPRESSION)",
      "right" : "if (functionType != FunctionNode.FUNCTION_EXPRESSION)",
      "info" : "IfStatement[19939-20147]:IfStatement[20542-20750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19993-20147]:Block[20596-20750]"
    }, {
      "left" : "errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[20005-20137]:ExpressionStatement[20608-20740]"
    }, {
      "left" : "name = new Name();",
      "right" : "name = new Name();",
      "info" : "ExpressionStatement[20156-20174]:ExpressionStatement[20759-20777]"
    }, {
      "left" : "name.setIdentifier(\"\");",
      "right" : "name.setIdentifier(\"\");",
      "info" : "ExpressionStatement[20183-20206]:ExpressionStatement[20786-20809]"
    }, {
      "left" : "isUnnamedFunction = true;",
      "right" : "isUnnamedFunction = true;",
      "info" : "ExpressionStatement[20215-20240]:ExpressionStatement[20818-20843]"
    }, {
      "left" : "Node node = newNode(Token.FUNCTION);",
      "right" : "Node node = newNode(Token.FUNCTION);",
      "info" : "VariableDeclarationStatement[20255-20291]:VariableDeclarationStatement[20858-20894]"
    }, {
      "left" : "Node newName = transform(name);",
      "right" : "Node newName = transform(name);",
      "info" : "VariableDeclarationStatement[20298-20329]:VariableDeclarationStatement[20901-20932]"
    }, {
      "left" : "if (isUnnamedFunction)",
      "right" : "if (isUnnamedFunction)",
      "info" : "IfStatement[20336-20848]:IfStatement[20939-21451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20359-20848]:Block[20962-21451]"
    }, {
      "left" : "newName.setLineno(functionNode.getLineno());",
      "right" : "newName.setLineno(functionNode.getLineno());",
      "info" : "ExpressionStatement[20469-20513]:ExpressionStatement[21072-21116]"
    }, {
      "left" : "int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();",
      "right" : "int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();",
      "info" : "VariableDeclarationStatement[20701-20786]:VariableDeclarationStatement[21304-21389]"
    }, {
      "left" : "newName.setCharno(position2charno(lpColumn));",
      "right" : "newName.setCharno(position2charno(lpColumn));",
      "info" : "ExpressionStatement[20795-20840]:ExpressionStatement[21398-21443]"
    }, {
      "left" : "node.addChildToBack(newName);",
      "right" : "node.addChildToBack(newName);",
      "info" : "ExpressionStatement[20856-20885]:ExpressionStatement[21459-21488]"
    }, {
      "left" : "Node lp = newNode(Token.LP);",
      "right" : "Node lp = newNode(Token.LP);",
      "info" : "VariableDeclarationStatement[20892-20920]:VariableDeclarationStatement[21495-21523]"
    }, {
      "left" : "Name fnName = functionNode.getFunctionName();",
      "right" : "Name fnName = functionNode.getFunctionName();",
      "info" : "VariableDeclarationStatement[21375-21420]:VariableDeclarationStatement[21978-22023]"
    }, {
      "left" : "if (fnName != null)",
      "right" : "if (fnName != null)",
      "info" : "IfStatement[21427-21561]:IfStatement[22030-22164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21447-21498]:Block[22050-22101]"
    }, {
      "left" : "lp.setLineno(fnName.getLineno());",
      "right" : "lp.setLineno(fnName.getLineno());",
      "info" : "ExpressionStatement[21457-21490]:ExpressionStatement[22060-22093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21504-21561]:Block[22107-22164]"
    }, {
      "left" : "lp.setLineno(functionNode.getLineno());",
      "right" : "lp.setLineno(functionNode.getLineno());",
      "info" : "ExpressionStatement[21514-21553]:ExpressionStatement[22117-22156]"
    }, {
      "left" : "int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();",
      "right" : "int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[21568-21655]:VariableDeclarationStatement[22171-22258]"
    }, {
      "left" : "lp.setCharno(position2charno(lparenCharno));",
      "right" : "lp.setCharno(position2charno(lparenCharno));",
      "info" : "ExpressionStatement[21663-21707]:ExpressionStatement[22266-22310]"
    }, {
      "left" : "for (AstNode param : functionNode.getParams())",
      "right" : "for (AstNode param : functionNode.getParams())",
      "info" : "EnhancedForStatement[21714-21815]:EnhancedForStatement[22317-22418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21761-21815]:Block[22364-22418]"
    }, {
      "left" : "lp.addChildToBack(transform(param));",
      "right" : "lp.addChildToBack(transform(param));",
      "info" : "ExpressionStatement[21771-21807]:ExpressionStatement[22374-22410]"
    }, {
      "left" : "node.addChildToBack(lp);",
      "right" : "node.addChildToBack(lp);",
      "info" : "ExpressionStatement[21822-21846]:ExpressionStatement[22425-22449]"
    }, {
      "left" : "Node bodyNode = transform(functionNode.getBody());",
      "right" : "Node bodyNode = transform(functionNode.getBody());",
      "info" : "VariableDeclarationStatement[21854-21904]:VariableDeclarationStatement[22457-22507]"
    }, {
      "left" : "parseDirectives(bodyNode);",
      "right" : "parseDirectives(bodyNode);",
      "info" : "ExpressionStatement[21911-21937]:ExpressionStatement[22514-22540]"
    }, {
      "left" : "node.addChildToBack(bodyNode);",
      "right" : "node.addChildToBack(bodyNode);",
      "info" : "ExpressionStatement[21944-21974]:ExpressionStatement[22547-22577]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[21980-21992]:ReturnStatement[22583-22595]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22004-22013]:MarkerAnnotation[22607-22616]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[22018-22022]:SimpleType[22621-22625]"
    }, {
      "left" : "processIfStatement",
      "right" : "processIfStatement",
      "info" : "SimpleName[22023-22041]:SimpleName[22626-22644]"
    }, {
      "left" : "IfStatement statementNode",
      "right" : "IfStatement statementNode",
      "info" : "SingleVariableDeclaration[22042-22067]:SingleVariableDeclaration[22645-22670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22069-22403]:Block[22672-23006]"
    }, {
      "left" : "Node node = newNode(Token.IF);",
      "right" : "Node node = newNode(Token.IF);",
      "info" : "VariableDeclarationStatement[22077-22107]:VariableDeclarationStatement[22680-22710]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getCondition()));",
      "right" : "node.addChildToBack(transform(statementNode.getCondition()));",
      "info" : "ExpressionStatement[22114-22175]:ExpressionStatement[22717-22778]"
    }, {
      "left" : "node.addChildToBack(transformBlock(statementNode.getThenPart()));",
      "right" : "node.addChildToBack(transformBlock(statementNode.getThenPart()));",
      "info" : "ExpressionStatement[22182-22247]:ExpressionStatement[22785-22850]"
    }, {
      "left" : "if (statementNode.getElsePart() != null)",
      "right" : "if (statementNode.getElsePart() != null)",
      "info" : "IfStatement[22254-22378]:IfStatement[22857-22981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22295-22378]:Block[22898-22981]"
    }, {
      "left" : "node.addChildToBack(transformBlock(statementNode.getElsePart()));",
      "right" : "node.addChildToBack(transformBlock(statementNode.getElsePart()));",
      "info" : "ExpressionStatement[22305-22370]:ExpressionStatement[22908-22973]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[22385-22397]:ReturnStatement[22988-23000]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22409-22418]:MarkerAnnotation[23012-23021]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[22423-22427]:SimpleType[23026-23030]"
    }, {
      "left" : "processInfixExpression",
      "right" : "processInfixExpression",
      "info" : "SimpleName[22428-22450]:SimpleName[23031-23053]"
    }, {
      "left" : "InfixExpression exprNode",
      "right" : "InfixExpression exprNode",
      "info" : "SingleVariableDeclaration[22451-22475]:SingleVariableDeclaration[23054-23078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22477-23125]:Block[23080-23728]"
    }, {
      "left" : "Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));",
      "right" : "Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));",
      "info" : "VariableDeclarationStatement[22485-22637]:VariableDeclarationStatement[23088-23240]"
    }, {
      "left" : "n.setLineno(exprNode.getLineno());",
      "right" : "n.setLineno(exprNode.getLineno());",
      "info" : "ExpressionStatement[22740-22774]:ExpressionStatement[23343-23377]"
    }, {
      "left" : "n.setCharno(position2charno(exprNode.getAbsolutePosition() +\n          exprNode.getOperatorPosition()));",
      "right" : "n.setCharno(position2charno(exprNode.getAbsolutePosition() +\n          exprNode.getOperatorPosition()));",
      "info" : "ExpressionStatement[22999-23103]:ExpressionStatement[23602-23706]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23110-23119]:ReturnStatement[23713-23722]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23131-23140]:MarkerAnnotation[23734-23743]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[23145-23149]:SimpleType[23748-23752]"
    }, {
      "left" : "processKeywordLiteral",
      "right" : "processKeywordLiteral",
      "info" : "SimpleName[23150-23171]:SimpleName[23753-23774]"
    }, {
      "left" : "KeywordLiteral literalNode",
      "right" : "KeywordLiteral literalNode",
      "info" : "SingleVariableDeclaration[23172-23198]:SingleVariableDeclaration[23775-23801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23200-23272]:Block[23803-23875]"
    }, {
      "left" : "return newNode(transformTokenType(literalNode.getType()));",
      "right" : "return newNode(transformTokenType(literalNode.getType()));",
      "info" : "ReturnStatement[23208-23266]:ReturnStatement[23811-23869]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23278-23287]:MarkerAnnotation[23881-23890]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[23292-23296]:SimpleType[23895-23899]"
    }, {
      "left" : "processLabel",
      "right" : "processLabel",
      "info" : "SimpleName[23297-23309]:SimpleName[23900-23912]"
    }, {
      "left" : "Label labelNode",
      "right" : "Label labelNode",
      "info" : "SingleVariableDeclaration[23310-23325]:SingleVariableDeclaration[23913-23928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23327-23401]:Block[23930-24004]"
    }, {
      "left" : "return newStringNode(Token.LABEL_NAME, labelNode.getName());",
      "right" : "return newStringNode(Token.LABEL_NAME, labelNode.getName());",
      "info" : "ReturnStatement[23335-23395]:ReturnStatement[23938-23998]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23407-23416]:MarkerAnnotation[24010-24019]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[23421-23425]:SimpleType[24024-24028]"
    }, {
      "left" : "processLabeledStatement",
      "right" : "processLabeledStatement",
      "info" : "SimpleName[23426-23449]:SimpleName[24029-24052]"
    }, {
      "left" : "LabeledStatement statementNode",
      "right" : "LabeledStatement statementNode",
      "info" : "SingleVariableDeclaration[23450-23480]:SingleVariableDeclaration[24053-24083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23482-24087]:Block[24085-24690]"
    }, {
      "left" : "Node node = newNode(Token.LABEL);",
      "right" : "Node node = newNode(Token.LABEL);",
      "info" : "VariableDeclarationStatement[23490-23523]:VariableDeclarationStatement[24093-24126]"
    }, {
      "left" : "Node prev = null;",
      "right" : "Node prev = null;",
      "info" : "VariableDeclarationStatement[23530-23547]:VariableDeclarationStatement[24133-24150]"
    }, {
      "left" : "Node cur = node;",
      "right" : "Node cur = node;",
      "info" : "VariableDeclarationStatement[23554-23570]:VariableDeclarationStatement[24157-24173]"
    }, {
      "left" : "for (Label label : statementNode.getLabels())",
      "right" : "for (Label label : statementNode.getLabels())",
      "info" : "EnhancedForStatement[23577-23994]:EnhancedForStatement[24180-24597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23623-23994]:Block[24226-24597]"
    }, {
      "left" : "if (prev != null)",
      "right" : "if (prev != null)",
      "info" : "IfStatement[23633-23698]:IfStatement[24236-24301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23651-23698]:Block[24254-24301]"
    }, {
      "left" : "prev.addChildToBack(cur);",
      "right" : "prev.addChildToBack(cur);",
      "info" : "ExpressionStatement[23663-23688]:ExpressionStatement[24266-24291]"
    }, {
      "left" : "cur.addChildToBack(transform(label));",
      "right" : "cur.addChildToBack(transform(label));",
      "info" : "ExpressionStatement[23707-23744]:ExpressionStatement[24310-24347]"
    }, {
      "left" : "cur.setLineno(label.getLineno());",
      "right" : "cur.setLineno(label.getLineno());",
      "info" : "ExpressionStatement[23754-23787]:ExpressionStatement[24357-24390]"
    }, {
      "left" : "int clauseAbsolutePosition =\n            position2charno(label.getAbsolutePosition());",
      "right" : "int clauseAbsolutePosition =\n            position2charno(label.getAbsolutePosition());",
      "info" : "VariableDeclarationStatement[23796-23882]:VariableDeclarationStatement[24399-24485]"
    }, {
      "left" : "cur.setCharno(clauseAbsolutePosition);",
      "right" : "cur.setCharno(clauseAbsolutePosition);",
      "info" : "ExpressionStatement[23891-23929]:ExpressionStatement[24494-24532]"
    }, {
      "left" : "prev = cur;",
      "right" : "prev = cur;",
      "info" : "ExpressionStatement[23939-23950]:ExpressionStatement[24542-24553]"
    }, {
      "left" : "cur = newNode(Token.LABEL);",
      "right" : "cur = newNode(Token.LABEL);",
      "info" : "ExpressionStatement[23959-23986]:ExpressionStatement[24562-24589]"
    }, {
      "left" : "prev.addChildToBack(transform(statementNode.getStatement()));",
      "right" : "prev.addChildToBack(transform(statementNode.getStatement()));",
      "info" : "ExpressionStatement[24001-24062]:ExpressionStatement[24604-24665]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[24069-24081]:ReturnStatement[24672-24684]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24093-24102]:MarkerAnnotation[24696-24705]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[24107-24111]:SimpleType[24710-24714]"
    }, {
      "left" : "processName",
      "right" : "processName",
      "info" : "SimpleName[24112-24123]:SimpleName[24715-24726]"
    }, {
      "left" : "Name nameNode",
      "right" : "Name nameNode",
      "info" : "SingleVariableDeclaration[24124-24137]:SingleVariableDeclaration[24727-24740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24139-24189]:Block[24742-24792]"
    }, {
      "left" : "return processName(nameNode, false);",
      "right" : "return processName(nameNode, false);",
      "info" : "ReturnStatement[24147-24183]:ReturnStatement[24750-24786]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[24195-24199]:SimpleType[24798-24802]"
    }, {
      "left" : "processName",
      "right" : "processName",
      "info" : "SimpleName[24200-24211]:SimpleName[24803-24814]"
    }, {
      "left" : "Name nameNode",
      "right" : "Name nameNode",
      "info" : "SingleVariableDeclaration[24212-24225]:SingleVariableDeclaration[24815-24828]"
    }, {
      "left" : "boolean asString",
      "right" : "boolean asString",
      "info" : "SingleVariableDeclaration[24227-24243]:SingleVariableDeclaration[24830-24846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24245-24646]:Block[24848-25249]"
    }, {
      "left" : "if (asString)",
      "right" : "if (asString)",
      "info" : "IfStatement[24253-24640]:IfStatement[24856-25243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24267-24346]:Block[24870-24949]"
    }, {
      "left" : "return newStringNode(Token.STRING, nameNode.getIdentifier());",
      "right" : "return newStringNode(Token.STRING, nameNode.getIdentifier());",
      "info" : "ReturnStatement[24277-24338]:ReturnStatement[24880-24941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24352-24640]:Block[24955-25243]"
    }, {
      "left" : "if (isReservedKeyword(nameNode.getIdentifier()))",
      "right" : "if (isReservedKeyword(nameNode.getIdentifier()))",
      "info" : "IfStatement[24362-24564]:IfStatement[24965-25167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24411-24564]:Block[25014-25167]"
    }, {
      "left" : "errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[24423-24554]:ExpressionStatement[25026-25157]"
    }, {
      "left" : "return newStringNode(Token.NAME, nameNode.getIdentifier());",
      "right" : "return newStringNode(Token.NAME, nameNode.getIdentifier());",
      "info" : "ReturnStatement[24573-24632]:ReturnStatement[25176-25235]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24695-24702]:Modifier[25298-25305]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24703-24710]:PrimitiveType[25306-25313]"
    }, {
      "left" : "isReservedKeyword",
      "right" : "isReservedKeyword",
      "info" : "SimpleName[24711-24728]:SimpleName[25314-25331]"
    }, {
      "left" : "String identifier",
      "right" : "String identifier",
      "info" : "SingleVariableDeclaration[24729-24746]:SingleVariableDeclaration[25332-25349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24748-24835]:Block[25351-25438]"
    }, {
      "left" : "return reservedKeywords != null && reservedKeywords.contains(identifier);",
      "right" : "return reservedKeywords != null && reservedKeywords.contains(identifier);",
      "info" : "ReturnStatement[24756-24829]:ReturnStatement[25359-25432]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24841-24850]:MarkerAnnotation[25444-25453]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[24855-24859]:SimpleType[25458-25462]"
    }, {
      "left" : "processNewExpression",
      "right" : "processNewExpression",
      "info" : "SimpleName[24860-24880]:SimpleName[25463-25483]"
    }, {
      "left" : "NewExpression exprNode",
      "right" : "NewExpression exprNode",
      "info" : "SingleVariableDeclaration[24881-24903]:SingleVariableDeclaration[25484-25506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24905-24956]:Block[25508-25559]"
    }, {
      "left" : "return processFunctionCall(exprNode);",
      "right" : "return processFunctionCall(exprNode);",
      "info" : "ReturnStatement[24913-24950]:ReturnStatement[25516-25553]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24962-24971]:MarkerAnnotation[25565-25574]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[24976-24980]:SimpleType[25579-25583]"
    }, {
      "left" : "processNumberLiteral",
      "right" : "processNumberLiteral",
      "info" : "SimpleName[24981-25001]:SimpleName[25584-25604]"
    }, {
      "left" : "NumberLiteral literalNode",
      "right" : "NumberLiteral literalNode",
      "info" : "SingleVariableDeclaration[25002-25027]:SingleVariableDeclaration[25605-25630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25029-25089]:Block[25632-25692]"
    }, {
      "left" : "return newNumberNode(literalNode.getNumber());",
      "right" : "return newNumberNode(literalNode.getNumber());",
      "info" : "ReturnStatement[25037-25083]:ReturnStatement[25640-25686]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25095-25104]:MarkerAnnotation[25698-25707]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[25109-25113]:SimpleType[25712-25716]"
    }, {
      "left" : "processObjectLiteral",
      "right" : "processObjectLiteral",
      "info" : "SimpleName[25114-25134]:SimpleName[25717-25737]"
    }, {
      "left" : "ObjectLiteral literalNode",
      "right" : "ObjectLiteral literalNode",
      "info" : "SingleVariableDeclaration[25135-25160]:SingleVariableDeclaration[25738-25763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25162-26334]:Block[25765-26937]"
    }, {
      "left" : "if (literalNode.isDestructuring())",
      "right" : "if (literalNode.isDestructuring())",
      "info" : "IfStatement[25170-25262]:IfStatement[25773-25865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25205-25262]:Block[25808-25865]"
    }, {
      "left" : "reportDestructuringAssign(literalNode);",
      "right" : "reportDestructuringAssign(literalNode);",
      "info" : "ExpressionStatement[25215-25254]:ExpressionStatement[25818-25857]"
    }, {
      "left" : "Node node = newNode(Token.OBJECTLIT);",
      "right" : "Node node = newNode(Token.OBJECTLIT);",
      "info" : "VariableDeclarationStatement[25270-25307]:VariableDeclarationStatement[25873-25910]"
    }, {
      "left" : "for (ObjectProperty el : literalNode.getElements())",
      "right" : "for (ObjectProperty el : literalNode.getElements())",
      "info" : "EnhancedForStatement[25314-26309]:EnhancedForStatement[25917-26912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25366-26309]:Block[25969-26912]"
    }, {
      "left" : "if (config.languageMode == LanguageMode.ECMASCRIPT3)",
      "right" : "if (config.languageMode == LanguageMode.ECMASCRIPT3)",
      "info" : "IfStatement[25376-25625]:IfStatement[25979-26228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25429-25625]:Block[26032-26228]"
    }, {
      "left" : "if (el.isGetter())",
      "right" : "if (el.isGetter())",
      "info" : "IfStatement[25441-25615]:IfStatement[26044-26218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25460-25525]:Block[26063-26128]"
    }, {
      "left" : "reportGetter(el);",
      "right" : "reportGetter(el);",
      "info" : "ExpressionStatement[25474-25491]:ExpressionStatement[26077-26094]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[25504-25513]:ContinueStatement[26107-26116]"
    }, {
      "left" : "if (el.isSetter())",
      "right" : "if (el.isSetter())",
      "info" : "IfStatement[25531-25615]:IfStatement[26134-26218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25550-25615]:Block[26153-26218]"
    }, {
      "left" : "reportSetter(el);",
      "right" : "reportSetter(el);",
      "info" : "ExpressionStatement[25564-25581]:ExpressionStatement[26167-26184]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[25594-25603]:ContinueStatement[26197-26206]"
    }, {
      "left" : "Node key = transformAsString(el.getLeft());",
      "right" : "Node key = transformAsString(el.getLeft());",
      "info" : "VariableDeclarationStatement[25635-25678]:VariableDeclarationStatement[26238-26281]"
    }, {
      "left" : "Node value = transform(el.getRight());",
      "right" : "Node value = transform(el.getRight());",
      "info" : "VariableDeclarationStatement[25687-25725]:VariableDeclarationStatement[26290-26328]"
    }, {
      "left" : "if (el.isGetter())",
      "right" : "if (el.isGetter())",
      "info" : "IfStatement[25734-26231]:IfStatement[26337-26834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25753-25979]:Block[26356-26582]"
    }, {
      "left" : "key.setType(Token.GET);",
      "right" : "key.setType(Token.GET);",
      "info" : "ExpressionStatement[25765-25788]:ExpressionStatement[26368-26391]"
    }, {
      "left" : "Preconditions.checkState(value.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(value.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[25799-25859]:ExpressionStatement[26402-26462]"
    }, {
      "left" : "if (getFnParamNode(value).hasChildren())",
      "right" : "if (getFnParamNode(value).hasChildren())",
      "info" : "IfStatement[25870-25969]:IfStatement[26473-26572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25911-25969]:Block[26514-26572]"
    }, {
      "left" : "reportGetterParam(el.getLeft());",
      "right" : "reportGetterParam(el.getLeft());",
      "info" : "ExpressionStatement[25925-25957]:ExpressionStatement[26528-26560]"
    }, {
      "left" : "if (el.isSetter())",
      "right" : "if (el.isSetter())",
      "info" : "IfStatement[25985-26231]:IfStatement[26588-26834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26004-26231]:Block[26607-26834]"
    }, {
      "left" : "key.setType(Token.SET);",
      "right" : "key.setType(Token.SET);",
      "info" : "ExpressionStatement[26016-26039]:ExpressionStatement[26619-26642]"
    }, {
      "left" : "Preconditions.checkState(value.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(value.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[26050-26110]:ExpressionStatement[26653-26713]"
    }, {
      "left" : "if (!getFnParamNode(value).hasOneChild())",
      "right" : "if (!getFnParamNode(value).hasOneChild())",
      "info" : "IfStatement[26121-26221]:IfStatement[26724-26824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26163-26221]:Block[26766-26824]"
    }, {
      "left" : "reportSetterParam(el.getLeft());",
      "right" : "reportSetterParam(el.getLeft());",
      "info" : "ExpressionStatement[26177-26209]:ExpressionStatement[26780-26812]"
    }, {
      "left" : "key.addChildToFront(value);",
      "right" : "key.addChildToFront(value);",
      "info" : "ExpressionStatement[26240-26267]:ExpressionStatement[26843-26870]"
    }, {
      "left" : "node.addChildToBack(key);",
      "right" : "node.addChildToBack(key);",
      "info" : "ExpressionStatement[26276-26301]:ExpressionStatement[26879-26904]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[26316-26328]:ReturnStatement[26919-26931]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26450-26454]:SimpleType[27053-27057]"
    }, {
      "left" : "getFnParamNode",
      "right" : "getFnParamNode",
      "info" : "SimpleName[26455-26469]:SimpleName[27058-27072]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[26470-26481]:SingleVariableDeclaration[27073-27084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26483-26672]:Block[27086-27275]"
    }, {
      "left" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[26557-26621]:ExpressionStatement[27160-27224]"
    }, {
      "left" : "return fnNode.getFirstChild().getNext();",
      "right" : "return fnNode.getFirstChild().getNext();",
      "info" : "ReturnStatement[26627-26667]:ReturnStatement[27230-27270]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26678-26687]:MarkerAnnotation[27281-27290]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26692-26696]:SimpleType[27295-27299]"
    }, {
      "left" : "processObjectProperty",
      "right" : "processObjectProperty",
      "info" : "SimpleName[26697-26718]:SimpleName[27300-27321]"
    }, {
      "left" : "ObjectProperty propertyNode",
      "right" : "ObjectProperty propertyNode",
      "info" : "SingleVariableDeclaration[26719-26746]:SingleVariableDeclaration[27322-27349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26748-26806]:Block[27351-27409]"
    }, {
      "left" : "return processInfixExpression(propertyNode);",
      "right" : "return processInfixExpression(propertyNode);",
      "info" : "ReturnStatement[26756-26800]:ReturnStatement[27359-27403]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26812-26821]:MarkerAnnotation[27415-27424]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26826-26830]:SimpleType[27429-27433]"
    }, {
      "left" : "processParenthesizedExpression",
      "right" : "processParenthesizedExpression",
      "info" : "SimpleName[26831-26861]:SimpleName[27434-27464]"
    }, {
      "left" : "ParenthesizedExpression exprNode",
      "right" : "ParenthesizedExpression exprNode",
      "info" : "SingleVariableDeclaration[26862-26894]:SingleVariableDeclaration[27465-27497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26896-27036]:Block[27499-27639]"
    }, {
      "left" : "Node node = transform(exprNode.getExpression());",
      "right" : "Node node = transform(exprNode.getExpression());",
      "info" : "VariableDeclarationStatement[26904-26952]:VariableDeclarationStatement[27507-27555]"
    }, {
      "left" : "node.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);",
      "right" : "node.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);",
      "info" : "ExpressionStatement[26959-27011]:ExpressionStatement[27562-27614]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[27018-27030]:ReturnStatement[27621-27633]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27042-27051]:MarkerAnnotation[27645-27654]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27056-27060]:SimpleType[27659-27663]"
    }, {
      "left" : "processPropertyGet",
      "right" : "processPropertyGet",
      "info" : "SimpleName[27061-27079]:SimpleName[27664-27682]"
    }, {
      "left" : "PropertyGet getNode",
      "right" : "PropertyGet getNode",
      "info" : "SingleVariableDeclaration[27080-27099]:SingleVariableDeclaration[27683-27702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27101-27250]:Block[27704-27853]"
    }, {
      "left" : "return newNode(\n          Token.GETPROP,\n          transform(getNode.getTarget()),\n          transformAsString(getNode.getProperty()));",
      "right" : "return newNode(\n          Token.GETPROP,\n          transform(getNode.getTarget()),\n          transformAsString(getNode.getProperty()));",
      "info" : "ReturnStatement[27109-27244]:ReturnStatement[27712-27847]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27256-27265]:MarkerAnnotation[27859-27868]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27270-27274]:SimpleType[27873-27877]"
    }, {
      "left" : "processRegExpLiteral",
      "right" : "processRegExpLiteral",
      "info" : "SimpleName[27275-27295]:SimpleName[27878-27898]"
    }, {
      "left" : "RegExpLiteral literalNode",
      "right" : "RegExpLiteral literalNode",
      "info" : "SingleVariableDeclaration[27296-27321]:SingleVariableDeclaration[27899-27924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27323-27889]:Block[27926-28492]"
    }, {
      "left" : "Node literalStringNode = newStringNode(literalNode.getValue());",
      "right" : "Node literalStringNode = newStringNode(literalNode.getValue());",
      "info" : "VariableDeclarationStatement[27331-27394]:VariableDeclarationStatement[27934-27997]"
    }, {
      "left" : "literalStringNode.setLineno(literalNode.getLineno());",
      "right" : "literalStringNode.setLineno(literalNode.getLineno());",
      "info" : "ExpressionStatement[27440-27493]:ExpressionStatement[28043-28096]"
    }, {
      "left" : "Node node = newNode(Token.REGEXP, literalStringNode);",
      "right" : "Node node = newNode(Token.REGEXP, literalStringNode);",
      "info" : "VariableDeclarationStatement[27500-27553]:VariableDeclarationStatement[28103-28156]"
    }, {
      "left" : "String flags = literalNode.getFlags();",
      "right" : "String flags = literalNode.getFlags();",
      "info" : "VariableDeclarationStatement[27560-27598]:VariableDeclarationStatement[28163-28201]"
    }, {
      "left" : "if (flags != null && !flags.isEmpty())",
      "right" : "if (flags != null && !flags.isEmpty())",
      "info" : "IfStatement[27605-27864]:IfStatement[28208-28467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27644-27864]:Block[28247-28467]"
    }, {
      "left" : "Node flagsNode = newStringNode(flags);",
      "right" : "Node flagsNode = newStringNode(flags);",
      "info" : "VariableDeclarationStatement[27654-27692]:VariableDeclarationStatement[28257-28295]"
    }, {
      "left" : "flagsNode.setLineno(literalNode.getLineno());",
      "right" : "flagsNode.setLineno(literalNode.getLineno());",
      "info" : "ExpressionStatement[27771-27816]:ExpressionStatement[28374-28419]"
    }, {
      "left" : "node.addChildToBack(flagsNode);",
      "right" : "node.addChildToBack(flagsNode);",
      "info" : "ExpressionStatement[27825-27856]:ExpressionStatement[28428-28459]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[27871-27883]:ReturnStatement[28474-28486]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27895-27904]:MarkerAnnotation[28498-28507]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27909-27913]:SimpleType[28512-28516]"
    }, {
      "left" : "processReturnStatement",
      "right" : "processReturnStatement",
      "info" : "SimpleName[27914-27936]:SimpleName[28517-28539]"
    }, {
      "left" : "ReturnStatement statementNode",
      "right" : "ReturnStatement statementNode",
      "info" : "SingleVariableDeclaration[27937-27966]:SingleVariableDeclaration[28540-28569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27968-28167]:Block[28571-28770]"
    }, {
      "left" : "Node node = newNode(Token.RETURN);",
      "right" : "Node node = newNode(Token.RETURN);",
      "info" : "VariableDeclarationStatement[27976-28010]:VariableDeclarationStatement[28579-28613]"
    }, {
      "left" : "if (statementNode.getReturnValue() != null)",
      "right" : "if (statementNode.getReturnValue() != null)",
      "info" : "IfStatement[28017-28142]:IfStatement[28620-28745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28061-28142]:Block[28664-28745]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getReturnValue()));",
      "right" : "node.addChildToBack(transform(statementNode.getReturnValue()));",
      "info" : "ExpressionStatement[28071-28134]:ExpressionStatement[28674-28737]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[28149-28161]:ReturnStatement[28752-28764]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28173-28182]:MarkerAnnotation[28776-28785]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[28187-28191]:SimpleType[28790-28794]"
    }, {
      "left" : "processScope",
      "right" : "processScope",
      "info" : "SimpleName[28192-28204]:SimpleName[28795-28807]"
    }, {
      "left" : "Scope scopeNode",
      "right" : "Scope scopeNode",
      "info" : "SingleVariableDeclaration[28205-28220]:SingleVariableDeclaration[28808-28823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28222-28269]:Block[28825-28872]"
    }, {
      "left" : "return processGeneric(scopeNode);",
      "right" : "return processGeneric(scopeNode);",
      "info" : "ReturnStatement[28230-28263]:ReturnStatement[28833-28866]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28275-28284]:MarkerAnnotation[28878-28887]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[28289-28293]:SimpleType[28892-28896]"
    }, {
      "left" : "processStringLiteral",
      "right" : "processStringLiteral",
      "info" : "SimpleName[28294-28314]:SimpleName[28897-28917]"
    }, {
      "left" : "StringLiteral literalNode",
      "right" : "StringLiteral literalNode",
      "info" : "SingleVariableDeclaration[28315-28340]:SingleVariableDeclaration[28918-28943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28342-28419]:Block[28945-29022]"
    }, {
      "left" : "Node n = newStringNode(literalNode.getValue());",
      "right" : "Node n = newStringNode(literalNode.getValue());",
      "info" : "VariableDeclarationStatement[28350-28397]:VariableDeclarationStatement[28953-29000]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28404-28413]:ReturnStatement[29007-29016]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28425-28434]:MarkerAnnotation[29028-29037]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[28439-28443]:SimpleType[29042-29046]"
    }, {
      "left" : "processSwitchCase",
      "right" : "processSwitchCase",
      "info" : "SimpleName[28444-28461]:SimpleName[29047-29064]"
    }, {
      "left" : "SwitchCase caseNode",
      "right" : "SwitchCase caseNode",
      "info" : "SingleVariableDeclaration[28462-28481]:SingleVariableDeclaration[29065-29084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28483-29148]:Block[29086-29751]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "VariableDeclarationStatement[28491-28501]:VariableDeclarationStatement[29094-29104]"
    }, {
      "left" : "if (caseNode.isDefault())",
      "right" : "if (caseNode.isDefault())",
      "info" : "IfStatement[28508-28699]:IfStatement[29111-29302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28534-28582]:Block[29137-29185]"
    }, {
      "left" : "node = newNode(Token.DEFAULT);",
      "right" : "node = newNode(Token.DEFAULT);",
      "info" : "ExpressionStatement[28544-28574]:ExpressionStatement[29147-29177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28588-28699]:Block[29191-29302]"
    }, {
      "left" : "AstNode expr = caseNode.getExpression();",
      "right" : "AstNode expr = caseNode.getExpression();",
      "info" : "VariableDeclarationStatement[28598-28638]:VariableDeclarationStatement[29201-29241]"
    }, {
      "left" : "node = newNode(Token.CASE, transform(expr));",
      "right" : "node = newNode(Token.CASE, transform(expr));",
      "info" : "ExpressionStatement[28647-28691]:ExpressionStatement[29250-29294]"
    }, {
      "left" : "Node block = newNode(Token.BLOCK);",
      "right" : "Node block = newNode(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[28706-28740]:VariableDeclarationStatement[29309-29343]"
    }, {
      "left" : "block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "right" : "block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "info" : "ExpressionStatement[28747-28801]:ExpressionStatement[29350-29404]"
    }, {
      "left" : "block.setLineno(caseNode.getLineno());",
      "right" : "block.setLineno(caseNode.getLineno());",
      "info" : "ExpressionStatement[28808-28846]:ExpressionStatement[29411-29449]"
    }, {
      "left" : "block.setCharno(position2charno(caseNode.getAbsolutePosition()));",
      "right" : "block.setCharno(position2charno(caseNode.getAbsolutePosition()));",
      "info" : "ExpressionStatement[28853-28918]:ExpressionStatement[29456-29521]"
    }, {
      "left" : "if (caseNode.getStatements() != null)",
      "right" : "if (caseNode.getStatements() != null)",
      "info" : "IfStatement[28925-29089]:IfStatement[29528-29692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28963-29089]:Block[29566-29692]"
    }, {
      "left" : "for (AstNode child : caseNode.getStatements())",
      "right" : "for (AstNode child : caseNode.getStatements())",
      "info" : "EnhancedForStatement[28973-29081]:EnhancedForStatement[29576-29684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29020-29081]:Block[29623-29684]"
    }, {
      "left" : "block.addChildToBack(transform(child));",
      "right" : "block.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[29032-29071]:ExpressionStatement[29635-29674]"
    }, {
      "left" : "node.addChildToBack(block);",
      "right" : "node.addChildToBack(block);",
      "info" : "ExpressionStatement[29096-29123]:ExpressionStatement[29699-29726]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[29130-29142]:ReturnStatement[29733-29745]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29154-29163]:MarkerAnnotation[29757-29766]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[29168-29172]:SimpleType[29771-29775]"
    }, {
      "left" : "processSwitchStatement",
      "right" : "processSwitchStatement",
      "info" : "SimpleName[29173-29195]:SimpleName[29776-29798]"
    }, {
      "left" : "SwitchStatement statementNode",
      "right" : "SwitchStatement statementNode",
      "info" : "SingleVariableDeclaration[29196-29225]:SingleVariableDeclaration[29799-29828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29227-29456]:Block[29830-30059]"
    }, {
      "left" : "Node node = newNode(Token.SWITCH,\n          transform(statementNode.getExpression()));",
      "right" : "Node node = newNode(Token.SWITCH,\n          transform(statementNode.getExpression()));",
      "info" : "VariableDeclarationStatement[29235-29321]:VariableDeclarationStatement[29838-29924]"
    }, {
      "left" : "for (AstNode child : statementNode.getCases())",
      "right" : "for (AstNode child : statementNode.getCases())",
      "info" : "EnhancedForStatement[29328-29431]:EnhancedForStatement[29931-30034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29375-29431]:Block[29978-30034]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[29385-29423]:ExpressionStatement[29988-30026]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[29438-29450]:ReturnStatement[30041-30053]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29462-29471]:MarkerAnnotation[30065-30074]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[29476-29480]:SimpleType[30079-30083]"
    }, {
      "left" : "processThrowStatement",
      "right" : "processThrowStatement",
      "info" : "SimpleName[29481-29502]:SimpleName[30084-30105]"
    }, {
      "left" : "ThrowStatement statementNode",
      "right" : "ThrowStatement statementNode",
      "info" : "SingleVariableDeclaration[29503-29531]:SingleVariableDeclaration[30106-30134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29533-29627]:Block[30136-30230]"
    }, {
      "left" : "return newNode(Token.THROW,\n          transform(statementNode.getExpression()));",
      "right" : "return newNode(Token.THROW,\n          transform(statementNode.getExpression()));",
      "info" : "ReturnStatement[29541-29621]:ReturnStatement[30144-30224]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29633-29642]:MarkerAnnotation[30236-30245]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[29647-29651]:SimpleType[30250-30254]"
    }, {
      "left" : "processTryStatement",
      "right" : "processTryStatement",
      "info" : "SimpleName[29652-29671]:SimpleName[30255-30274]"
    }, {
      "left" : "TryStatement statementNode",
      "right" : "TryStatement statementNode",
      "info" : "SingleVariableDeclaration[29672-29698]:SingleVariableDeclaration[30275-30301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29700-30726]:Block[30303-31329]"
    }, {
      "left" : "Node node = newNode(Token.TRY,\n          transformBlock(statementNode.getTryBlock()));",
      "right" : "Node node = newNode(Token.TRY,\n          transformBlock(statementNode.getTryBlock()));",
      "info" : "VariableDeclarationStatement[29708-29794]:VariableDeclarationStatement[30311-30397]"
    }, {
      "left" : "Node block = newNode(Token.BLOCK);",
      "right" : "Node block = newNode(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[29801-29835]:VariableDeclarationStatement[30404-30438]"
    }, {
      "left" : "boolean lineSet = false;",
      "right" : "boolean lineSet = false;",
      "info" : "VariableDeclarationStatement[29842-29866]:VariableDeclarationStatement[30445-30469]"
    }, {
      "left" : "for (CatchClause cc : statementNode.getCatchClauses())",
      "right" : "for (CatchClause cc : statementNode.getCatchClauses())",
      "info" : "EnhancedForStatement[29874-30189]:EnhancedForStatement[30477-30792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29929-30189]:Block[30532-30792]"
    }, {
      "left" : "if (lineSet == false)",
      "right" : "if (lineSet == false)",
      "info" : "IfStatement[30030-30136]:IfStatement[30633-30739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30052-30136]:Block[30655-30739]"
    }, {
      "left" : "block.setLineno(cc.getLineno());",
      "right" : "block.setLineno(cc.getLineno());",
      "info" : "ExpressionStatement[30066-30098]:ExpressionStatement[30669-30701]"
    }, {
      "left" : "lineSet = true;",
      "right" : "lineSet = true;",
      "info" : "ExpressionStatement[30111-30126]:ExpressionStatement[30714-30729]"
    }, {
      "left" : "block.addChildToBack(transform(cc));",
      "right" : "block.addChildToBack(transform(cc));",
      "info" : "ExpressionStatement[30145-30181]:ExpressionStatement[30748-30784]"
    }, {
      "left" : "node.addChildToBack(block);",
      "right" : "node.addChildToBack(block);",
      "info" : "ExpressionStatement[30196-30223]:ExpressionStatement[30799-30826]"
    }, {
      "left" : "AstNode finallyBlock = statementNode.getFinallyBlock();",
      "right" : "AstNode finallyBlock = statementNode.getFinallyBlock();",
      "info" : "VariableDeclarationStatement[30231-30286]:VariableDeclarationStatement[30834-30889]"
    }, {
      "left" : "if (finallyBlock != null)",
      "right" : "if (finallyBlock != null)",
      "info" : "IfStatement[30293-30387]:IfStatement[30896-30990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30319-30387]:Block[30922-30990]"
    }, {
      "left" : "node.addChildToBack(transformBlock(finallyBlock));",
      "right" : "node.addChildToBack(transformBlock(finallyBlock));",
      "info" : "ExpressionStatement[30329-30379]:ExpressionStatement[30932-30982]"
    }, {
      "left" : "if ((lineSet == false) && (finallyBlock != null))",
      "right" : "if ((lineSet == false) && (finallyBlock != null))",
      "info" : "IfStatement[30590-30700]:IfStatement[31193-31303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30640-30700]:Block[31243-31303]"
    }, {
      "left" : "block.setLineno(finallyBlock.getLineno());",
      "right" : "block.setLineno(finallyBlock.getLineno());",
      "info" : "ExpressionStatement[30650-30692]:ExpressionStatement[31253-31295]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[30708-30720]:ReturnStatement[31311-31323]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30732-30741]:MarkerAnnotation[31335-31344]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[30746-30750]:SimpleType[31349-31353]"
    }, {
      "left" : "processUnaryExpression",
      "right" : "processUnaryExpression",
      "info" : "SimpleName[30751-30773]:SimpleName[31354-31376]"
    }, {
      "left" : "UnaryExpression exprNode",
      "right" : "UnaryExpression exprNode",
      "info" : "SingleVariableDeclaration[30774-30798]:SingleVariableDeclaration[31377-31401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30800-31634]:Block[31403-32237]"
    }, {
      "left" : "int type = transformTokenType(exprNode.getType());",
      "right" : "int type = transformTokenType(exprNode.getType());",
      "info" : "VariableDeclarationStatement[30808-30858]:VariableDeclarationStatement[31411-31461]"
    }, {
      "left" : "Node operand = transform(exprNode.getOperand());",
      "right" : "Node operand = transform(exprNode.getOperand());",
      "info" : "VariableDeclarationStatement[30865-30913]:VariableDeclarationStatement[31468-31516]"
    }, {
      "left" : "if (type == Token.NEG && operand.getType() == Token.NUMBER)",
      "right" : "if (type == Token.NEG && operand.getType() == Token.NUMBER)",
      "info" : "IfStatement[30920-31628]:IfStatement[31523-32231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30980-31062]:Block[31583-31665]"
    }, {
      "left" : "operand.setDouble(-operand.getDouble());",
      "right" : "operand.setDouble(-operand.getDouble());",
      "info" : "ExpressionStatement[30990-31030]:ExpressionStatement[31593-31633]"
    }, {
      "left" : "return operand;",
      "right" : "return operand;",
      "info" : "ReturnStatement[31039-31054]:ReturnStatement[31642-31657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31068-31628]:Block[31671-32231]"
    }, {
      "left" : "if (type == Token.INC || type == Token.DEC)",
      "right" : "if (type == Token.INC || type == Token.DEC)",
      "info" : "IfStatement[31078-31451]:IfStatement[31681-32054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31122-31451]:Block[31725-32054]"
    }, {
      "left" : "if (!validAssignmentTarget(operand))",
      "right" : "if (!validAssignmentTarget(operand))",
      "info" : "IfStatement[31134-31441]:IfStatement[31737-32044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31171-31441]:Block[31774-32044]"
    }, {
      "left" : "String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";",
      "right" : "String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";",
      "info" : "VariableDeclarationStatement[31185-31308]:VariableDeclarationStatement[31788-31911]"
    }, {
      "left" : "errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[31321-31429]:ExpressionStatement[31924-32032]"
    }, {
      "left" : "Node node = newNode(type, operand);",
      "right" : "Node node = newNode(type, operand);",
      "info" : "VariableDeclarationStatement[31461-31496]:VariableDeclarationStatement[32064-32099]"
    }, {
      "left" : "if (exprNode.isPostfix())",
      "right" : "if (exprNode.isPostfix())",
      "info" : "IfStatement[31505-31599]:IfStatement[32108-32202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31531-31599]:Block[32134-32202]"
    }, {
      "left" : "node.putBooleanProp(Node.INCRDECR_PROP, true);",
      "right" : "node.putBooleanProp(Node.INCRDECR_PROP, true);",
      "info" : "ExpressionStatement[31543-31589]:ExpressionStatement[32146-32192]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[31608-31620]:ReturnStatement[32211-32223]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31640-31647]:Modifier[32243-32250]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31648-31655]:PrimitiveType[32251-32258]"
    }, {
      "left" : "validAssignmentTarget",
      "right" : "validAssignmentTarget",
      "info" : "SimpleName[31656-31677]:SimpleName[32259-32280]"
    }, {
      "left" : "Node target",
      "right" : "Node target",
      "info" : "SingleVariableDeclaration[31678-31689]:SingleVariableDeclaration[32281-32292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31691-31864]:Block[32294-32467]"
    }, {
      "left" : "switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }",
      "right" : "switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }",
      "info" : "SwitchStatement[31699-31838]:SwitchStatement[32302-32441]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[31735-31751]:SwitchCase[32338-32354]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[31760-31779]:SwitchCase[32363-32382]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[31788-31807]:SwitchCase[32391-32410]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31818-31830]:ReturnStatement[32421-32433]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31845-31858]:ReturnStatement[32448-32461]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31870-31879]:MarkerAnnotation[32473-32482]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[31884-31888]:SimpleType[32487-32491]"
    }, {
      "left" : "processVariableDeclaration",
      "right" : "processVariableDeclaration",
      "info" : "SimpleName[31889-31915]:SimpleName[32492-32518]"
    }, {
      "left" : "VariableDeclaration declarationNode",
      "right" : "VariableDeclaration declarationNode",
      "info" : "SingleVariableDeclaration[31916-31951]:SingleVariableDeclaration[32519-32554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31953-32337]:Block[32556-32940]"
    }, {
      "left" : "if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.jscomp.mozilla.rhino.Token.CONST)",
      "right" : "if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.jscomp.mozilla.rhino.Token.CONST)",
      "info" : "IfStatement[31961-32145]:IfStatement[32564-32748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32090-32145]:Block[32693-32748]"
    }, {
      "left" : "processIllegalToken(declarationNode);",
      "right" : "processIllegalToken(declarationNode);",
      "info" : "ExpressionStatement[32100-32137]:ExpressionStatement[32703-32740]"
    }, {
      "left" : "Node node = newNode(Token.VAR);",
      "right" : "Node node = newNode(Token.VAR);",
      "info" : "VariableDeclarationStatement[32153-32184]:VariableDeclarationStatement[32756-32787]"
    }, {
      "left" : "for (VariableInitializer child : declarationNode.getVariables())",
      "right" : "for (VariableInitializer child : declarationNode.getVariables())",
      "info" : "EnhancedForStatement[32191-32312]:EnhancedForStatement[32794-32915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32256-32312]:Block[32859-32915]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[32266-32304]:ExpressionStatement[32869-32907]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[32319-32331]:ReturnStatement[32922-32934]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32343-32352]:MarkerAnnotation[32946-32955]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[32357-32361]:SimpleType[32960-32964]"
    }, {
      "left" : "processVariableInitializer",
      "right" : "processVariableInitializer",
      "info" : "SimpleName[32362-32388]:SimpleName[32965-32991]"
    }, {
      "left" : "VariableInitializer initializerNode",
      "right" : "VariableInitializer initializerNode",
      "info" : "SingleVariableDeclaration[32389-32424]:SingleVariableDeclaration[32992-33027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32426-32688]:Block[33029-33291]"
    }, {
      "left" : "Node node = transform(initializerNode.getTarget());",
      "right" : "Node node = transform(initializerNode.getTarget());",
      "info" : "VariableDeclarationStatement[32434-32485]:VariableDeclarationStatement[33037-33088]"
    }, {
      "left" : "if (initializerNode.getInitializer() != null)",
      "right" : "if (initializerNode.getInitializer() != null)",
      "info" : "IfStatement[32492-32663]:IfStatement[33095-33266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32538-32663]:Block[33141-33266]"
    }, {
      "left" : "node.addChildToBack(transform(initializerNode.getInitializer()));",
      "right" : "node.addChildToBack(transform(initializerNode.getInitializer()));",
      "info" : "ExpressionStatement[32548-32613]:ExpressionStatement[33151-33216]"
    }, {
      "left" : "node.setLineno(node.getLineno());",
      "right" : "node.setLineno(node.getLineno());",
      "info" : "ExpressionStatement[32622-32655]:ExpressionStatement[33225-33258]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[32670-32682]:ReturnStatement[33273-33285]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32694-32703]:MarkerAnnotation[33297-33306]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[32708-32712]:SimpleType[33311-33315]"
    }, {
      "left" : "processWhileLoop",
      "right" : "processWhileLoop",
      "info" : "SimpleName[32713-32729]:SimpleName[33316-33332]"
    }, {
      "left" : "WhileLoop loopNode",
      "right" : "WhileLoop loopNode",
      "info" : "SingleVariableDeclaration[32730-32748]:SingleVariableDeclaration[33333-33351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32750-32895]:Block[33353-33498]"
    }, {
      "left" : "return newNode(\n          Token.WHILE,\n          transform(loopNode.getCondition()),\n          transformBlock(loopNode.getBody()));",
      "right" : "return newNode(\n          Token.WHILE,\n          transform(loopNode.getCondition()),\n          transformBlock(loopNode.getBody()));",
      "info" : "ReturnStatement[32758-32889]:ReturnStatement[33361-33492]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32901-32910]:MarkerAnnotation[33504-33513]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[32915-32919]:SimpleType[33518-33522]"
    }, {
      "left" : "processWithStatement",
      "right" : "processWithStatement",
      "info" : "SimpleName[32920-32940]:SimpleName[33523-33543]"
    }, {
      "left" : "WithStatement statementNode",
      "right" : "WithStatement statementNode",
      "info" : "SingleVariableDeclaration[32941-32968]:SingleVariableDeclaration[33544-33571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32970-33130]:Block[33573-33733]"
    }, {
      "left" : "return newNode(\n          Token.WITH,\n          transform(statementNode.getExpression()),\n          transformBlock(statementNode.getStatement()));",
      "right" : "return newNode(\n          Token.WITH,\n          transform(statementNode.getExpression()),\n          transformBlock(statementNode.getStatement()));",
      "info" : "ReturnStatement[32978-33124]:ReturnStatement[33581-33727]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33136-33145]:MarkerAnnotation[33739-33748]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[33150-33154]:SimpleType[33753-33757]"
    }, {
      "left" : "processIllegalToken",
      "right" : "processIllegalToken",
      "info" : "SimpleName[33155-33174]:SimpleName[33758-33777]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[33175-33187]:SingleVariableDeclaration[33778-33790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33189-33453]:Block[33792-34056]"
    }, {
      "left" : "errorReporter.error(\n          \"Unsupported syntax: \" +\n          com.google.javascript.jscomp.mozilla.rhino.Token.typeToName(\n              node.getType()),\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"Unsupported syntax: \" +\n          com.google.javascript.jscomp.mozilla.rhino.Token.typeToName(\n              node.getType()),\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[33197-33412]:ExpressionStatement[33800-34015]"
    }, {
      "left" : "return newNode(Token.EMPTY);",
      "right" : "return newNode(Token.EMPTY);",
      "info" : "ReturnStatement[33419-33447]:ReturnStatement[34022-34050]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33459-33463]:PrimitiveType[34062-34066]"
    }, {
      "left" : "reportDestructuringAssign",
      "right" : "reportDestructuringAssign",
      "info" : "SimpleName[33464-33489]:SimpleName[34067-34092]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[33490-33502]:SingleVariableDeclaration[34093-34105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33504-33644]:Block[34107-34247]"
    }, {
      "left" : "errorReporter.error(\n          \"destructuring assignment forbidden\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"destructuring assignment forbidden\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[33512-33638]:ExpressionStatement[34115-34241]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33650-33654]:PrimitiveType[34253-34257]"
    }, {
      "left" : "reportGetter",
      "right" : "reportGetter",
      "info" : "SimpleName[33655-33667]:SimpleName[34258-34270]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[33668-33680]:SingleVariableDeclaration[34271-34283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33682-33834]:Block[34285-34437]"
    }, {
      "left" : "errorReporter.error(\n          \"getters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"getters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[33690-33828]:ExpressionStatement[34293-34431]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33840-33844]:PrimitiveType[34443-34447]"
    }, {
      "left" : "reportSetter",
      "right" : "reportSetter",
      "info" : "SimpleName[33845-33857]:SimpleName[34448-34460]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[33858-33870]:SingleVariableDeclaration[34461-34473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33872-34024]:Block[34475-34627]"
    }, {
      "left" : "errorReporter.error(\n          \"setters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"setters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[33880-34018]:ExpressionStatement[34483-34621]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34030-34034]:PrimitiveType[34633-34637]"
    }, {
      "left" : "reportGetterParam",
      "right" : "reportGetterParam",
      "info" : "SimpleName[34035-34052]:SimpleName[34638-34655]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[34053-34065]:SingleVariableDeclaration[34656-34668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34067-34204]:Block[34670-34807]"
    }, {
      "left" : "errorReporter.error(\n          \"getters may not have parameters\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"getters may not have parameters\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[34075-34198]:ExpressionStatement[34678-34801]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34210-34214]:PrimitiveType[34813-34817]"
    }, {
      "left" : "reportSetterParam",
      "right" : "reportSetterParam",
      "info" : "SimpleName[34215-34232]:SimpleName[34818-34835]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[34233-34245]:SingleVariableDeclaration[34836-34848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34247-34392]:Block[34850-34995]"
    }, {
      "left" : "errorReporter.error(\n          \"setters must have exactly one parameter\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"setters must have exactly one parameter\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[34255-34386]:ExpressionStatement[34858-34989]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34400-34407]:Modifier[35003-35010]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34408-34414]:Modifier[35011-35017]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[34415-34418]:PrimitiveType[35018-35021]"
    }, {
      "left" : "transformTokenType",
      "right" : "transformTokenType",
      "info" : "SimpleName[34419-34437]:SimpleName[35022-35040]"
    }, {
      "left" : "int token",
      "right" : "int token",
      "info" : "SingleVariableDeclaration[34438-34447]:SingleVariableDeclaration[35041-35050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34449-49443]:Block[35052-50046]"
    }, {
      "left" : "switch (token) {\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:\n        return Token.ERROR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:\n        return Token.EOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:\n        return Token.EOL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:\n        return Token.ENTERWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:\n        return Token.LEAVEWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:\n        return Token.GOTO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:\n        return Token.IFEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:\n        return Token.IFNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:\n        return Token.SETNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NE:\n        return Token.NE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LT:\n        return Token.LT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LE:\n        return Token.LE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GT:\n        return Token.GT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GE:\n        return Token.GE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.POS:\n        return Token.POS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:\n        return Token.SETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:\n        return Token.SETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:\n        return Token.BINDNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:\n        return Token.RETHROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IN:\n        return Token.IN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:\n        return Token.LOCAL_LOAD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:\n        return Token.GETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:\n        return Token.SETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:\n        return Token.CATCH_SCOPE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:\n        return Token.ENUM_INIT_KEYS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:\n        return Token.ENUM_INIT_VALUES;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:\n        return Token.ENUM_NEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:\n        return Token.ENUM_ID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:\n        return Token.THISFN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:\n        return Token.RETURN_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:\n        return Token.GET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:\n        return Token.SET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:\n        return Token.DEL_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:\n        return Token.REF_CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:\n        return Token.REF_SPECIAL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:\n        return Token.DEFAULTNAMESPACE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:\n        return Token.ESCXMLTEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:\n        return Token.ESCXMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:\n        return Token.REF_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:\n        return Token.REF_NS_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:\n        return Token.REF_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:\n        return Token.REF_NS_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:\n        return Token.TRY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:\n        return Token.SEMI;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LB:\n        return Token.LB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RB:\n        return Token.RB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LC:\n        return Token.LC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RC:\n        return Token.RC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LP:\n        return Token.LP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RP:\n        return Token.RP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:\n        return Token.COLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OR:\n        return Token.OR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.AND:\n        return Token.AND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INC:\n        return Token.INC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:\n        return Token.DOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:\n        return Token.EXPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:\n        return Token.IMPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IF:\n        return Token.IF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:\n        return Token.ELSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:\n        return Token.DEFAULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DO:\n        return Token.DO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:\n        return Token.FINALLY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:\n        return Token.RESERVED;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:\n        return Token.TARGET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:\n        return Token.LOOP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:\n        return Token.JSR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:\n        return Token.TYPEOFNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:\n        return Token.USE_STACK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:\n        return Token.SETPROP_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:\n        return Token.SETELEM_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:\n        return Token.LOCAL_BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:\n        return Token.SET_REF_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:\n        return Token.DOTDOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:\n        return Token.COLONCOLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XML:\n        return Token.XML;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:\n        return Token.DOTQUERY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:\n        return Token.XMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:\n        return Token.XMLEND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:\n        return Token.TO_OBJECT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:\n        return Token.TO_DOUBLE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET:\n        return Token.GET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET:\n        return Token.SET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:\n        return Token.SETCONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }",
      "right" : "switch (token) {\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:\n        return Token.ERROR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:\n        return Token.EOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:\n        return Token.EOL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:\n        return Token.ENTERWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:\n        return Token.LEAVEWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:\n        return Token.GOTO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:\n        return Token.IFEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:\n        return Token.IFNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:\n        return Token.SETNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NE:\n        return Token.NE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LT:\n        return Token.LT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LE:\n        return Token.LE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GT:\n        return Token.GT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GE:\n        return Token.GE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.POS:\n        return Token.POS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:\n        return Token.SETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:\n        return Token.SETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:\n        return Token.BINDNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:\n        return Token.RETHROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IN:\n        return Token.IN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:\n        return Token.LOCAL_LOAD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:\n        return Token.GETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:\n        return Token.SETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:\n        return Token.CATCH_SCOPE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:\n        return Token.ENUM_INIT_KEYS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:\n        return Token.ENUM_INIT_VALUES;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:\n        return Token.ENUM_NEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:\n        return Token.ENUM_ID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:\n        return Token.THISFN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:\n        return Token.RETURN_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:\n        return Token.GET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:\n        return Token.SET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:\n        return Token.DEL_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:\n        return Token.REF_CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:\n        return Token.REF_SPECIAL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:\n        return Token.DEFAULTNAMESPACE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:\n        return Token.ESCXMLTEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:\n        return Token.ESCXMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:\n        return Token.REF_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:\n        return Token.REF_NS_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:\n        return Token.REF_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:\n        return Token.REF_NS_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:\n        return Token.TRY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:\n        return Token.SEMI;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LB:\n        return Token.LB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RB:\n        return Token.RB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LC:\n        return Token.LC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RC:\n        return Token.RC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LP:\n        return Token.LP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RP:\n        return Token.RP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:\n        return Token.COLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OR:\n        return Token.OR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.AND:\n        return Token.AND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INC:\n        return Token.INC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:\n        return Token.DOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:\n        return Token.EXPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:\n        return Token.IMPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IF:\n        return Token.IF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:\n        return Token.ELSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:\n        return Token.DEFAULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DO:\n        return Token.DO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:\n        return Token.FINALLY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:\n        return Token.RESERVED;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:\n        return Token.TARGET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:\n        return Token.LOOP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:\n        return Token.JSR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:\n        return Token.TYPEOFNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:\n        return Token.USE_STACK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:\n        return Token.SETPROP_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:\n        return Token.SETELEM_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:\n        return Token.LOCAL_BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:\n        return Token.SET_REF_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:\n        return Token.DOTDOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:\n        return Token.COLONCOLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XML:\n        return Token.XML;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:\n        return Token.DOTQUERY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:\n        return Token.XMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:\n        return Token.XMLEND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:\n        return Token.TO_OBJECT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:\n        return Token.TO_DOUBLE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET:\n        return Token.GET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET:\n        return Token.SET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:\n        return Token.SETCONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }",
      "info" : "SwitchStatement[34455-49352]:SwitchStatement[35058-49955]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:",
      "info" : "SwitchCase[34478-34538]:SwitchCase[35081-35141]"
    }, {
      "left" : "return Token.ERROR;",
      "right" : "return Token.ERROR;",
      "info" : "ReturnStatement[34547-34566]:ReturnStatement[35150-35169]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:",
      "info" : "SwitchCase[34573-34631]:SwitchCase[35176-35234]"
    }, {
      "left" : "return Token.EOF;",
      "right" : "return Token.EOF;",
      "info" : "ReturnStatement[34640-34657]:ReturnStatement[35243-35260]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:",
      "info" : "SwitchCase[34664-34722]:SwitchCase[35267-35325]"
    }, {
      "left" : "return Token.EOL;",
      "right" : "return Token.EOL;",
      "info" : "ReturnStatement[34731-34748]:ReturnStatement[35334-35351]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:",
      "info" : "SwitchCase[34755-34819]:SwitchCase[35358-35422]"
    }, {
      "left" : "return Token.ENTERWITH;",
      "right" : "return Token.ENTERWITH;",
      "info" : "ReturnStatement[34828-34851]:ReturnStatement[35431-35454]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:",
      "info" : "SwitchCase[34858-34922]:SwitchCase[35461-35525]"
    }, {
      "left" : "return Token.LEAVEWITH;",
      "right" : "return Token.LEAVEWITH;",
      "info" : "ReturnStatement[34931-34954]:ReturnStatement[35534-35557]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:",
      "info" : "SwitchCase[34961-35022]:SwitchCase[35564-35625]"
    }, {
      "left" : "return Token.RETURN;",
      "right" : "return Token.RETURN;",
      "info" : "ReturnStatement[35031-35051]:ReturnStatement[35634-35654]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:",
      "info" : "SwitchCase[35058-35117]:SwitchCase[35661-35720]"
    }, {
      "left" : "return Token.GOTO;",
      "right" : "return Token.GOTO;",
      "info" : "ReturnStatement[35126-35144]:ReturnStatement[35729-35747]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:",
      "info" : "SwitchCase[35151-35210]:SwitchCase[35754-35813]"
    }, {
      "left" : "return Token.IFEQ;",
      "right" : "return Token.IFEQ;",
      "info" : "ReturnStatement[35219-35237]:ReturnStatement[35822-35840]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:",
      "info" : "SwitchCase[35244-35303]:SwitchCase[35847-35906]"
    }, {
      "left" : "return Token.IFNE;",
      "right" : "return Token.IFNE;",
      "info" : "ReturnStatement[35312-35330]:ReturnStatement[35915-35933]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:",
      "info" : "SwitchCase[35337-35399]:SwitchCase[35940-36002]"
    }, {
      "left" : "return Token.SETNAME;",
      "right" : "return Token.SETNAME;",
      "info" : "ReturnStatement[35408-35429]:ReturnStatement[36011-36032]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:",
      "info" : "SwitchCase[35436-35496]:SwitchCase[36039-36099]"
    }, {
      "left" : "return Token.BITOR;",
      "right" : "return Token.BITOR;",
      "info" : "ReturnStatement[35505-35524]:ReturnStatement[36108-36127]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:",
      "info" : "SwitchCase[35531-35592]:SwitchCase[36134-36195]"
    }, {
      "left" : "return Token.BITXOR;",
      "right" : "return Token.BITXOR;",
      "info" : "ReturnStatement[35601-35621]:ReturnStatement[36204-36224]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:",
      "info" : "SwitchCase[35628-35689]:SwitchCase[36231-36292]"
    }, {
      "left" : "return Token.BITAND;",
      "right" : "return Token.BITAND;",
      "info" : "ReturnStatement[35698-35718]:ReturnStatement[36301-36321]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:",
      "info" : "SwitchCase[35725-35782]:SwitchCase[36328-36385]"
    }, {
      "left" : "return Token.EQ;",
      "right" : "return Token.EQ;",
      "info" : "ReturnStatement[35791-35807]:ReturnStatement[36394-36410]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NE:",
      "info" : "SwitchCase[35814-35871]:SwitchCase[36417-36474]"
    }, {
      "left" : "return Token.NE;",
      "right" : "return Token.NE;",
      "info" : "ReturnStatement[35880-35896]:ReturnStatement[36483-36499]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LT:",
      "info" : "SwitchCase[35903-35960]:SwitchCase[36506-36563]"
    }, {
      "left" : "return Token.LT;",
      "right" : "return Token.LT;",
      "info" : "ReturnStatement[35969-35985]:ReturnStatement[36572-36588]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LE:",
      "info" : "SwitchCase[35992-36049]:SwitchCase[36595-36652]"
    }, {
      "left" : "return Token.LE;",
      "right" : "return Token.LE;",
      "info" : "ReturnStatement[36058-36074]:ReturnStatement[36661-36677]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GT:",
      "info" : "SwitchCase[36081-36138]:SwitchCase[36684-36741]"
    }, {
      "left" : "return Token.GT;",
      "right" : "return Token.GT;",
      "info" : "ReturnStatement[36147-36163]:ReturnStatement[36750-36766]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GE:",
      "info" : "SwitchCase[36170-36227]:SwitchCase[36773-36830]"
    }, {
      "left" : "return Token.GE;",
      "right" : "return Token.GE;",
      "info" : "ReturnStatement[36236-36252]:ReturnStatement[36839-36855]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:",
      "info" : "SwitchCase[36259-36317]:SwitchCase[36862-36920]"
    }, {
      "left" : "return Token.LSH;",
      "right" : "return Token.LSH;",
      "info" : "ReturnStatement[36326-36343]:ReturnStatement[36929-36946]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:",
      "info" : "SwitchCase[36350-36408]:SwitchCase[36953-37011]"
    }, {
      "left" : "return Token.RSH;",
      "right" : "return Token.RSH;",
      "info" : "ReturnStatement[36417-36434]:ReturnStatement[37020-37037]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:",
      "info" : "SwitchCase[36441-36500]:SwitchCase[37044-37103]"
    }, {
      "left" : "return Token.URSH;",
      "right" : "return Token.URSH;",
      "info" : "ReturnStatement[36509-36527]:ReturnStatement[37112-37130]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:",
      "info" : "SwitchCase[36534-36592]:SwitchCase[37137-37195]"
    }, {
      "left" : "return Token.ADD;",
      "right" : "return Token.ADD;",
      "info" : "ReturnStatement[36601-36618]:ReturnStatement[37204-37221]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:",
      "info" : "SwitchCase[36625-36683]:SwitchCase[37228-37286]"
    }, {
      "left" : "return Token.SUB;",
      "right" : "return Token.SUB;",
      "info" : "ReturnStatement[36692-36709]:ReturnStatement[37295-37312]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:",
      "info" : "SwitchCase[36716-36774]:SwitchCase[37319-37377]"
    }, {
      "left" : "return Token.MUL;",
      "right" : "return Token.MUL;",
      "info" : "ReturnStatement[36783-36800]:ReturnStatement[37386-37403]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:",
      "info" : "SwitchCase[36807-36865]:SwitchCase[37410-37468]"
    }, {
      "left" : "return Token.DIV;",
      "right" : "return Token.DIV;",
      "info" : "ReturnStatement[36874-36891]:ReturnStatement[37477-37494]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:",
      "info" : "SwitchCase[36898-36956]:SwitchCase[37501-37559]"
    }, {
      "left" : "return Token.MOD;",
      "right" : "return Token.MOD;",
      "info" : "ReturnStatement[36965-36982]:ReturnStatement[37568-37585]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:",
      "info" : "SwitchCase[36989-37047]:SwitchCase[37592-37650]"
    }, {
      "left" : "return Token.NOT;",
      "right" : "return Token.NOT;",
      "info" : "ReturnStatement[37056-37073]:ReturnStatement[37659-37676]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:",
      "info" : "SwitchCase[37080-37141]:SwitchCase[37683-37744]"
    }, {
      "left" : "return Token.BITNOT;",
      "right" : "return Token.BITNOT;",
      "info" : "ReturnStatement[37150-37170]:ReturnStatement[37753-37773]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.POS:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.POS:",
      "info" : "SwitchCase[37177-37235]:SwitchCase[37780-37838]"
    }, {
      "left" : "return Token.POS;",
      "right" : "return Token.POS;",
      "info" : "ReturnStatement[37244-37261]:ReturnStatement[37847-37864]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:",
      "info" : "SwitchCase[37268-37326]:SwitchCase[37871-37929]"
    }, {
      "left" : "return Token.NEG;",
      "right" : "return Token.NEG;",
      "info" : "ReturnStatement[37335-37352]:ReturnStatement[37938-37955]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:",
      "info" : "SwitchCase[37359-37417]:SwitchCase[37962-38020]"
    }, {
      "left" : "return Token.NEW;",
      "right" : "return Token.NEW;",
      "info" : "ReturnStatement[37426-37443]:ReturnStatement[38029-38046]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:",
      "info" : "SwitchCase[37450-37512]:SwitchCase[38053-38115]"
    }, {
      "left" : "return Token.DELPROP;",
      "right" : "return Token.DELPROP;",
      "info" : "ReturnStatement[37521-37542]:ReturnStatement[38124-38145]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:",
      "info" : "SwitchCase[37549-37610]:SwitchCase[38152-38213]"
    }, {
      "left" : "return Token.TYPEOF;",
      "right" : "return Token.TYPEOF;",
      "info" : "ReturnStatement[37619-37639]:ReturnStatement[38222-38242]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:",
      "info" : "SwitchCase[37646-37708]:SwitchCase[38249-38311]"
    }, {
      "left" : "return Token.GETPROP;",
      "right" : "return Token.GETPROP;",
      "info" : "ReturnStatement[37717-37738]:ReturnStatement[38320-38341]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:",
      "info" : "SwitchCase[37745-37807]:SwitchCase[38348-38410]"
    }, {
      "left" : "return Token.SETPROP;",
      "right" : "return Token.SETPROP;",
      "info" : "ReturnStatement[37816-37837]:ReturnStatement[38419-38440]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:",
      "info" : "SwitchCase[37844-37906]:SwitchCase[38447-38509]"
    }, {
      "left" : "return Token.GETELEM;",
      "right" : "return Token.GETELEM;",
      "info" : "ReturnStatement[37915-37936]:ReturnStatement[38518-38539]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:",
      "info" : "SwitchCase[37943-38005]:SwitchCase[38546-38608]"
    }, {
      "left" : "return Token.SETELEM;",
      "right" : "return Token.SETELEM;",
      "info" : "ReturnStatement[38014-38035]:ReturnStatement[38617-38638]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:",
      "info" : "SwitchCase[38042-38101]:SwitchCase[38645-38704]"
    }, {
      "left" : "return Token.CALL;",
      "right" : "return Token.CALL;",
      "info" : "ReturnStatement[38110-38128]:ReturnStatement[38713-38731]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:",
      "info" : "SwitchCase[38135-38194]:SwitchCase[38738-38797]"
    }, {
      "left" : "return Token.NAME;",
      "right" : "return Token.NAME;",
      "info" : "ReturnStatement[38203-38221]:ReturnStatement[38806-38824]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:",
      "info" : "SwitchCase[38228-38289]:SwitchCase[38831-38892]"
    }, {
      "left" : "return Token.NUMBER;",
      "right" : "return Token.NUMBER;",
      "info" : "ReturnStatement[38298-38318]:ReturnStatement[38901-38921]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:",
      "info" : "SwitchCase[38325-38386]:SwitchCase[38928-38989]"
    }, {
      "left" : "return Token.STRING;",
      "right" : "return Token.STRING;",
      "info" : "ReturnStatement[38395-38415]:ReturnStatement[38998-39018]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:",
      "info" : "SwitchCase[38422-38481]:SwitchCase[39025-39084]"
    }, {
      "left" : "return Token.NULL;",
      "right" : "return Token.NULL;",
      "info" : "ReturnStatement[38490-38508]:ReturnStatement[39093-39111]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:",
      "info" : "SwitchCase[38515-38574]:SwitchCase[39118-39177]"
    }, {
      "left" : "return Token.THIS;",
      "right" : "return Token.THIS;",
      "info" : "ReturnStatement[38583-38601]:ReturnStatement[39186-39204]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:",
      "info" : "SwitchCase[38608-38668]:SwitchCase[39211-39271]"
    }, {
      "left" : "return Token.FALSE;",
      "right" : "return Token.FALSE;",
      "info" : "ReturnStatement[38677-38696]:ReturnStatement[39280-39299]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:",
      "info" : "SwitchCase[38703-38762]:SwitchCase[39306-39365]"
    }, {
      "left" : "return Token.TRUE;",
      "right" : "return Token.TRUE;",
      "info" : "ReturnStatement[38771-38789]:ReturnStatement[39374-39392]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:",
      "info" : "SwitchCase[38796-38855]:SwitchCase[39399-39458]"
    }, {
      "left" : "return Token.SHEQ;",
      "right" : "return Token.SHEQ;",
      "info" : "ReturnStatement[38864-38882]:ReturnStatement[39467-39485]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:",
      "info" : "SwitchCase[38889-38948]:SwitchCase[39492-39551]"
    }, {
      "left" : "return Token.SHNE;",
      "right" : "return Token.SHNE;",
      "info" : "ReturnStatement[38957-38975]:ReturnStatement[39560-39578]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:",
      "info" : "SwitchCase[38982-39043]:SwitchCase[39585-39646]"
    }, {
      "left" : "return Token.REGEXP;",
      "right" : "return Token.REGEXP;",
      "info" : "ReturnStatement[39052-39072]:ReturnStatement[39655-39675]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:",
      "info" : "SwitchCase[39079-39142]:SwitchCase[39682-39745]"
    }, {
      "left" : "return Token.BINDNAME;",
      "right" : "return Token.BINDNAME;",
      "info" : "ReturnStatement[39151-39173]:ReturnStatement[39754-39776]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:",
      "info" : "SwitchCase[39180-39240]:SwitchCase[39783-39843]"
    }, {
      "left" : "return Token.THROW;",
      "right" : "return Token.THROW;",
      "info" : "ReturnStatement[39249-39268]:ReturnStatement[39852-39871]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:",
      "info" : "SwitchCase[39275-39337]:SwitchCase[39878-39940]"
    }, {
      "left" : "return Token.RETHROW;",
      "right" : "return Token.RETHROW;",
      "info" : "ReturnStatement[39346-39367]:ReturnStatement[39949-39970]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IN:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IN:",
      "info" : "SwitchCase[39374-39431]:SwitchCase[39977-40034]"
    }, {
      "left" : "return Token.IN;",
      "right" : "return Token.IN;",
      "info" : "ReturnStatement[39440-39456]:ReturnStatement[40043-40059]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:",
      "info" : "SwitchCase[39463-39528]:SwitchCase[40066-40131]"
    }, {
      "left" : "return Token.INSTANCEOF;",
      "right" : "return Token.INSTANCEOF;",
      "info" : "ReturnStatement[39537-39561]:ReturnStatement[40140-40164]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:",
      "info" : "SwitchCase[39568-39633]:SwitchCase[40171-40236]"
    }, {
      "left" : "return Token.LOCAL_LOAD;",
      "right" : "return Token.LOCAL_LOAD;",
      "info" : "ReturnStatement[39642-39666]:ReturnStatement[40245-40269]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:",
      "info" : "SwitchCase[39673-39734]:SwitchCase[40276-40337]"
    }, {
      "left" : "return Token.GETVAR;",
      "right" : "return Token.GETVAR;",
      "info" : "ReturnStatement[39743-39763]:ReturnStatement[40346-40366]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:",
      "info" : "SwitchCase[39770-39831]:SwitchCase[40373-40434]"
    }, {
      "left" : "return Token.SETVAR;",
      "right" : "return Token.SETVAR;",
      "info" : "ReturnStatement[39840-39860]:ReturnStatement[40443-40463]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:",
      "info" : "SwitchCase[39867-39933]:SwitchCase[40470-40536]"
    }, {
      "left" : "return Token.CATCH_SCOPE;",
      "right" : "return Token.CATCH_SCOPE;",
      "info" : "ReturnStatement[39942-39967]:ReturnStatement[40545-40570]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:",
      "info" : "SwitchCase[39974-40043]:SwitchCase[40577-40646]"
    }, {
      "left" : "return Token.ENUM_INIT_KEYS;",
      "right" : "return Token.ENUM_INIT_KEYS;",
      "info" : "ReturnStatement[40052-40080]:ReturnStatement[40655-40683]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:",
      "info" : "SwitchCase[40087-40158]:SwitchCase[40690-40761]"
    }, {
      "left" : "return Token.ENUM_INIT_VALUES;",
      "right" : "return Token.ENUM_INIT_VALUES;",
      "info" : "ReturnStatement[40167-40197]:ReturnStatement[40770-40800]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:",
      "info" : "SwitchCase[40204-40268]:SwitchCase[40807-40871]"
    }, {
      "left" : "return Token.ENUM_NEXT;",
      "right" : "return Token.ENUM_NEXT;",
      "info" : "ReturnStatement[40277-40300]:ReturnStatement[40880-40903]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:",
      "info" : "SwitchCase[40307-40369]:SwitchCase[40910-40972]"
    }, {
      "left" : "return Token.ENUM_ID;",
      "right" : "return Token.ENUM_ID;",
      "info" : "ReturnStatement[40378-40399]:ReturnStatement[40981-41002]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:",
      "info" : "SwitchCase[40406-40467]:SwitchCase[41009-41070]"
    }, {
      "left" : "return Token.THISFN;",
      "right" : "return Token.THISFN;",
      "info" : "ReturnStatement[40476-40496]:ReturnStatement[41079-41099]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:",
      "info" : "SwitchCase[40503-40571]:SwitchCase[41106-41174]"
    }, {
      "left" : "return Token.RETURN_RESULT;",
      "right" : "return Token.RETURN_RESULT;",
      "info" : "ReturnStatement[40580-40607]:ReturnStatement[41183-41210]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:",
      "info" : "SwitchCase[40614-40677]:SwitchCase[41217-41280]"
    }, {
      "left" : "return Token.ARRAYLIT;",
      "right" : "return Token.ARRAYLIT;",
      "info" : "ReturnStatement[40686-40708]:ReturnStatement[41289-41311]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:",
      "info" : "SwitchCase[40715-40779]:SwitchCase[41318-41382]"
    }, {
      "left" : "return Token.OBJECTLIT;",
      "right" : "return Token.OBJECTLIT;",
      "info" : "ReturnStatement[40788-40811]:ReturnStatement[41391-41414]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:",
      "info" : "SwitchCase[40818-40880]:SwitchCase[41421-41483]"
    }, {
      "left" : "return Token.GET_REF;",
      "right" : "return Token.GET_REF;",
      "info" : "ReturnStatement[40889-40910]:ReturnStatement[41492-41513]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:",
      "info" : "SwitchCase[40917-40979]:SwitchCase[41520-41582]"
    }, {
      "left" : "return Token.SET_REF;",
      "right" : "return Token.SET_REF;",
      "info" : "ReturnStatement[40988-41009]:ReturnStatement[41591-41612]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:",
      "info" : "SwitchCase[41016-41078]:SwitchCase[41619-41681]"
    }, {
      "left" : "return Token.DEL_REF;",
      "right" : "return Token.DEL_REF;",
      "info" : "ReturnStatement[41087-41108]:ReturnStatement[41690-41711]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:",
      "info" : "SwitchCase[41115-41178]:SwitchCase[41718-41781]"
    }, {
      "left" : "return Token.REF_CALL;",
      "right" : "return Token.REF_CALL;",
      "info" : "ReturnStatement[41187-41209]:ReturnStatement[41790-41812]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:",
      "info" : "SwitchCase[41216-41282]:SwitchCase[41819-41885]"
    }, {
      "left" : "return Token.REF_SPECIAL;",
      "right" : "return Token.REF_SPECIAL;",
      "info" : "ReturnStatement[41291-41316]:ReturnStatement[41894-41919]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:",
      "info" : "SwitchCase[41323-41394]:SwitchCase[41926-41997]"
    }, {
      "left" : "return Token.DEFAULTNAMESPACE;",
      "right" : "return Token.DEFAULTNAMESPACE;",
      "info" : "ReturnStatement[41403-41433]:ReturnStatement[42006-42036]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:",
      "info" : "SwitchCase[41440-41505]:SwitchCase[42043-42108]"
    }, {
      "left" : "return Token.ESCXMLTEXT;",
      "right" : "return Token.ESCXMLTEXT;",
      "info" : "ReturnStatement[41514-41538]:ReturnStatement[42117-42141]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:",
      "info" : "SwitchCase[41545-41610]:SwitchCase[42148-42213]"
    }, {
      "left" : "return Token.ESCXMLATTR;",
      "right" : "return Token.ESCXMLATTR;",
      "info" : "ReturnStatement[41619-41643]:ReturnStatement[42222-42246]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:",
      "info" : "SwitchCase[41650-41715]:SwitchCase[42253-42318]"
    }, {
      "left" : "return Token.REF_MEMBER;",
      "right" : "return Token.REF_MEMBER;",
      "info" : "ReturnStatement[41724-41748]:ReturnStatement[42327-42351]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:",
      "info" : "SwitchCase[41755-41823]:SwitchCase[42358-42426]"
    }, {
      "left" : "return Token.REF_NS_MEMBER;",
      "right" : "return Token.REF_NS_MEMBER;",
      "info" : "ReturnStatement[41832-41859]:ReturnStatement[42435-42462]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:",
      "info" : "SwitchCase[41866-41929]:SwitchCase[42469-42532]"
    }, {
      "left" : "return Token.REF_NAME;",
      "right" : "return Token.REF_NAME;",
      "info" : "ReturnStatement[41938-41960]:ReturnStatement[42541-42563]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:",
      "info" : "SwitchCase[41967-42033]:SwitchCase[42570-42636]"
    }, {
      "left" : "return Token.REF_NS_NAME;",
      "right" : "return Token.REF_NS_NAME;",
      "info" : "ReturnStatement[42042-42067]:ReturnStatement[42645-42670]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:",
      "info" : "SwitchCase[42074-42132]:SwitchCase[42677-42735]"
    }, {
      "left" : "return Token.TRY;",
      "right" : "return Token.TRY;",
      "info" : "ReturnStatement[42141-42158]:ReturnStatement[42744-42761]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:",
      "info" : "SwitchCase[42165-42224]:SwitchCase[42768-42827]"
    }, {
      "left" : "return Token.SEMI;",
      "right" : "return Token.SEMI;",
      "info" : "ReturnStatement[42233-42251]:ReturnStatement[42836-42854]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LB:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LB:",
      "info" : "SwitchCase[42258-42315]:SwitchCase[42861-42918]"
    }, {
      "left" : "return Token.LB;",
      "right" : "return Token.LB;",
      "info" : "ReturnStatement[42324-42340]:ReturnStatement[42927-42943]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RB:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RB:",
      "info" : "SwitchCase[42347-42404]:SwitchCase[42950-43007]"
    }, {
      "left" : "return Token.RB;",
      "right" : "return Token.RB;",
      "info" : "ReturnStatement[42413-42429]:ReturnStatement[43016-43032]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LC:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LC:",
      "info" : "SwitchCase[42436-42493]:SwitchCase[43039-43096]"
    }, {
      "left" : "return Token.LC;",
      "right" : "return Token.LC;",
      "info" : "ReturnStatement[42502-42518]:ReturnStatement[43105-43121]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RC:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RC:",
      "info" : "SwitchCase[42525-42582]:SwitchCase[43128-43185]"
    }, {
      "left" : "return Token.RC;",
      "right" : "return Token.RC;",
      "info" : "ReturnStatement[42591-42607]:ReturnStatement[43194-43210]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LP:",
      "info" : "SwitchCase[42614-42671]:SwitchCase[43217-43274]"
    }, {
      "left" : "return Token.LP;",
      "right" : "return Token.LP;",
      "info" : "ReturnStatement[42680-42696]:ReturnStatement[43283-43299]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RP:",
      "info" : "SwitchCase[42703-42760]:SwitchCase[43306-43363]"
    }, {
      "left" : "return Token.RP;",
      "right" : "return Token.RP;",
      "info" : "ReturnStatement[42769-42785]:ReturnStatement[43372-43388]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:",
      "info" : "SwitchCase[42792-42852]:SwitchCase[43395-43455]"
    }, {
      "left" : "return Token.COMMA;",
      "right" : "return Token.COMMA;",
      "info" : "ReturnStatement[42861-42880]:ReturnStatement[43464-43483]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:",
      "info" : "SwitchCase[42887-42948]:SwitchCase[43490-43551]"
    }, {
      "left" : "return Token.ASSIGN;",
      "right" : "return Token.ASSIGN;",
      "info" : "ReturnStatement[42957-42977]:ReturnStatement[43560-43580]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[42984-43051]:SwitchCase[43587-43654]"
    }, {
      "left" : "return Token.ASSIGN_BITOR;",
      "right" : "return Token.ASSIGN_BITOR;",
      "info" : "ReturnStatement[43060-43086]:ReturnStatement[43663-43689]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[43093-43161]:SwitchCase[43696-43764]"
    }, {
      "left" : "return Token.ASSIGN_BITXOR;",
      "right" : "return Token.ASSIGN_BITXOR;",
      "info" : "ReturnStatement[43170-43197]:ReturnStatement[43773-43800]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[43204-43272]:SwitchCase[43807-43875]"
    }, {
      "left" : "return Token.ASSIGN_BITAND;",
      "right" : "return Token.ASSIGN_BITAND;",
      "info" : "ReturnStatement[43281-43308]:ReturnStatement[43884-43911]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:",
      "info" : "SwitchCase[43315-43380]:SwitchCase[43918-43983]"
    }, {
      "left" : "return Token.ASSIGN_LSH;",
      "right" : "return Token.ASSIGN_LSH;",
      "info" : "ReturnStatement[43389-43413]:ReturnStatement[43992-44016]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:",
      "info" : "SwitchCase[43420-43485]:SwitchCase[44023-44088]"
    }, {
      "left" : "return Token.ASSIGN_RSH;",
      "right" : "return Token.ASSIGN_RSH;",
      "info" : "ReturnStatement[43494-43518]:ReturnStatement[44097-44121]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:",
      "info" : "SwitchCase[43525-43591]:SwitchCase[44128-44194]"
    }, {
      "left" : "return Token.ASSIGN_URSH;",
      "right" : "return Token.ASSIGN_URSH;",
      "info" : "ReturnStatement[43600-43625]:ReturnStatement[44203-44228]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:",
      "info" : "SwitchCase[43632-43697]:SwitchCase[44235-44300]"
    }, {
      "left" : "return Token.ASSIGN_ADD;",
      "right" : "return Token.ASSIGN_ADD;",
      "info" : "ReturnStatement[43706-43730]:ReturnStatement[44309-44333]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:",
      "info" : "SwitchCase[43737-43802]:SwitchCase[44340-44405]"
    }, {
      "left" : "return Token.ASSIGN_SUB;",
      "right" : "return Token.ASSIGN_SUB;",
      "info" : "ReturnStatement[43811-43835]:ReturnStatement[44414-44438]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:",
      "info" : "SwitchCase[43842-43907]:SwitchCase[44445-44510]"
    }, {
      "left" : "return Token.ASSIGN_MUL;",
      "right" : "return Token.ASSIGN_MUL;",
      "info" : "ReturnStatement[43916-43940]:ReturnStatement[44519-44543]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:",
      "info" : "SwitchCase[43947-44012]:SwitchCase[44550-44615]"
    }, {
      "left" : "return Token.ASSIGN_DIV;",
      "right" : "return Token.ASSIGN_DIV;",
      "info" : "ReturnStatement[44021-44045]:ReturnStatement[44624-44648]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:",
      "info" : "SwitchCase[44052-44117]:SwitchCase[44655-44720]"
    }, {
      "left" : "return Token.ASSIGN_MOD;",
      "right" : "return Token.ASSIGN_MOD;",
      "info" : "ReturnStatement[44126-44150]:ReturnStatement[44729-44753]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:",
      "info" : "SwitchCase[44157-44216]:SwitchCase[44760-44819]"
    }, {
      "left" : "return Token.HOOK;",
      "right" : "return Token.HOOK;",
      "info" : "ReturnStatement[44225-44243]:ReturnStatement[44828-44846]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:",
      "info" : "SwitchCase[44250-44310]:SwitchCase[44853-44913]"
    }, {
      "left" : "return Token.COLON;",
      "right" : "return Token.COLON;",
      "info" : "ReturnStatement[44319-44338]:ReturnStatement[44922-44941]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.OR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.OR:",
      "info" : "SwitchCase[44345-44402]:SwitchCase[44948-45005]"
    }, {
      "left" : "return Token.OR;",
      "right" : "return Token.OR;",
      "info" : "ReturnStatement[44411-44427]:ReturnStatement[45014-45030]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.AND:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.AND:",
      "info" : "SwitchCase[44434-44492]:SwitchCase[45037-45095]"
    }, {
      "left" : "return Token.AND;",
      "right" : "return Token.AND;",
      "info" : "ReturnStatement[44501-44518]:ReturnStatement[45104-45121]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.INC:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.INC:",
      "info" : "SwitchCase[44525-44583]:SwitchCase[45128-45186]"
    }, {
      "left" : "return Token.INC;",
      "right" : "return Token.INC;",
      "info" : "ReturnStatement[44592-44609]:ReturnStatement[45195-45212]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:",
      "info" : "SwitchCase[44616-44674]:SwitchCase[45219-45277]"
    }, {
      "left" : "return Token.DEC;",
      "right" : "return Token.DEC;",
      "info" : "ReturnStatement[44683-44700]:ReturnStatement[45286-45303]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:",
      "info" : "SwitchCase[44707-44765]:SwitchCase[45310-45368]"
    }, {
      "left" : "return Token.DOT;",
      "right" : "return Token.DOT;",
      "info" : "ReturnStatement[44774-44791]:ReturnStatement[45377-45394]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:",
      "info" : "SwitchCase[44798-44861]:SwitchCase[45401-45464]"
    }, {
      "left" : "return Token.FUNCTION;",
      "right" : "return Token.FUNCTION;",
      "info" : "ReturnStatement[44870-44892]:ReturnStatement[45473-45495]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:",
      "info" : "SwitchCase[44899-44960]:SwitchCase[45502-45563]"
    }, {
      "left" : "return Token.EXPORT;",
      "right" : "return Token.EXPORT;",
      "info" : "ReturnStatement[44969-44989]:ReturnStatement[45572-45592]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:",
      "info" : "SwitchCase[44996-45057]:SwitchCase[45599-45660]"
    }, {
      "left" : "return Token.IMPORT;",
      "right" : "return Token.IMPORT;",
      "info" : "ReturnStatement[45066-45086]:ReturnStatement[45669-45689]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IF:",
      "info" : "SwitchCase[45093-45150]:SwitchCase[45696-45753]"
    }, {
      "left" : "return Token.IF;",
      "right" : "return Token.IF;",
      "info" : "ReturnStatement[45159-45175]:ReturnStatement[45762-45778]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:",
      "info" : "SwitchCase[45182-45241]:SwitchCase[45785-45844]"
    }, {
      "left" : "return Token.ELSE;",
      "right" : "return Token.ELSE;",
      "info" : "ReturnStatement[45250-45268]:ReturnStatement[45853-45871]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:",
      "info" : "SwitchCase[45275-45336]:SwitchCase[45878-45939]"
    }, {
      "left" : "return Token.SWITCH;",
      "right" : "return Token.SWITCH;",
      "info" : "ReturnStatement[45345-45365]:ReturnStatement[45948-45968]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:",
      "info" : "SwitchCase[45372-45431]:SwitchCase[45975-46034]"
    }, {
      "left" : "return Token.CASE;",
      "right" : "return Token.CASE;",
      "info" : "ReturnStatement[45440-45458]:ReturnStatement[46043-46061]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:",
      "info" : "SwitchCase[45465-45527]:SwitchCase[46068-46130]"
    }, {
      "left" : "return Token.DEFAULT;",
      "right" : "return Token.DEFAULT;",
      "info" : "ReturnStatement[45536-45557]:ReturnStatement[46139-46160]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:",
      "info" : "SwitchCase[45564-45624]:SwitchCase[46167-46227]"
    }, {
      "left" : "return Token.WHILE;",
      "right" : "return Token.WHILE;",
      "info" : "ReturnStatement[45633-45652]:ReturnStatement[46236-46255]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DO:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DO:",
      "info" : "SwitchCase[45659-45716]:SwitchCase[46262-46319]"
    }, {
      "left" : "return Token.DO;",
      "right" : "return Token.DO;",
      "info" : "ReturnStatement[45725-45741]:ReturnStatement[46328-46344]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:",
      "info" : "SwitchCase[45748-45806]:SwitchCase[46351-46409]"
    }, {
      "left" : "return Token.FOR;",
      "right" : "return Token.FOR;",
      "info" : "ReturnStatement[45815-45832]:ReturnStatement[46418-46435]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:",
      "info" : "SwitchCase[45839-45899]:SwitchCase[46442-46502]"
    }, {
      "left" : "return Token.BREAK;",
      "right" : "return Token.BREAK;",
      "info" : "ReturnStatement[45908-45927]:ReturnStatement[46511-46530]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:",
      "info" : "SwitchCase[45934-45997]:SwitchCase[46537-46600]"
    }, {
      "left" : "return Token.CONTINUE;",
      "right" : "return Token.CONTINUE;",
      "info" : "ReturnStatement[46006-46028]:ReturnStatement[46609-46631]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:",
      "info" : "SwitchCase[46035-46093]:SwitchCase[46638-46696]"
    }, {
      "left" : "return Token.VAR;",
      "right" : "return Token.VAR;",
      "info" : "ReturnStatement[46102-46119]:ReturnStatement[46705-46722]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:",
      "info" : "SwitchCase[46126-46185]:SwitchCase[46729-46788]"
    }, {
      "left" : "return Token.WITH;",
      "right" : "return Token.WITH;",
      "info" : "ReturnStatement[46194-46212]:ReturnStatement[46797-46815]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:",
      "info" : "SwitchCase[46219-46279]:SwitchCase[46822-46882]"
    }, {
      "left" : "return Token.CATCH;",
      "right" : "return Token.CATCH;",
      "info" : "ReturnStatement[46288-46307]:ReturnStatement[46891-46910]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:",
      "info" : "SwitchCase[46314-46376]:SwitchCase[46917-46979]"
    }, {
      "left" : "return Token.FINALLY;",
      "right" : "return Token.FINALLY;",
      "info" : "ReturnStatement[46385-46406]:ReturnStatement[46988-47009]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:",
      "info" : "SwitchCase[46413-46472]:SwitchCase[47016-47075]"
    }, {
      "left" : "return Token.VOID;",
      "right" : "return Token.VOID;",
      "info" : "ReturnStatement[46481-46499]:ReturnStatement[47084-47102]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:",
      "info" : "SwitchCase[46506-46569]:SwitchCase[47109-47172]"
    }, {
      "left" : "return Token.RESERVED;",
      "right" : "return Token.RESERVED;",
      "info" : "ReturnStatement[46578-46600]:ReturnStatement[47181-47203]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:",
      "info" : "SwitchCase[46607-46667]:SwitchCase[47210-47270]"
    }, {
      "left" : "return Token.EMPTY;",
      "right" : "return Token.EMPTY;",
      "info" : "ReturnStatement[46676-46695]:ReturnStatement[47279-47298]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:",
      "info" : "SwitchCase[46702-46762]:SwitchCase[47305-47365]"
    }, {
      "left" : "return Token.BLOCK;",
      "right" : "return Token.BLOCK;",
      "info" : "ReturnStatement[46771-46790]:ReturnStatement[47374-47393]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:",
      "info" : "SwitchCase[46797-46857]:SwitchCase[47400-47460]"
    }, {
      "left" : "return Token.LABEL;",
      "right" : "return Token.LABEL;",
      "info" : "ReturnStatement[46866-46885]:ReturnStatement[47469-47488]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:",
      "info" : "SwitchCase[46892-46953]:SwitchCase[47495-47556]"
    }, {
      "left" : "return Token.TARGET;",
      "right" : "return Token.TARGET;",
      "info" : "ReturnStatement[46962-46982]:ReturnStatement[47565-47585]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:",
      "info" : "SwitchCase[46989-47048]:SwitchCase[47592-47651]"
    }, {
      "left" : "return Token.LOOP;",
      "right" : "return Token.LOOP;",
      "info" : "ReturnStatement[47057-47075]:ReturnStatement[47660-47678]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:",
      "info" : "SwitchCase[47082-47146]:SwitchCase[47685-47749]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:",
      "info" : "SwitchCase[47153-47219]:SwitchCase[47756-47822]"
    }, {
      "left" : "return Token.EXPR_RESULT;",
      "right" : "return Token.EXPR_RESULT;",
      "info" : "ReturnStatement[47228-47253]:ReturnStatement[47831-47856]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:",
      "info" : "SwitchCase[47260-47318]:SwitchCase[47863-47921]"
    }, {
      "left" : "return Token.JSR;",
      "right" : "return Token.JSR;",
      "info" : "ReturnStatement[47327-47344]:ReturnStatement[47930-47947]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:",
      "info" : "SwitchCase[47351-47412]:SwitchCase[47954-48015]"
    }, {
      "left" : "return Token.SCRIPT;",
      "right" : "return Token.SCRIPT;",
      "info" : "ReturnStatement[47421-47441]:ReturnStatement[48024-48044]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:",
      "info" : "SwitchCase[47448-47513]:SwitchCase[48051-48116]"
    }, {
      "left" : "return Token.TYPEOFNAME;",
      "right" : "return Token.TYPEOFNAME;",
      "info" : "ReturnStatement[47522-47546]:ReturnStatement[48125-48149]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:",
      "info" : "SwitchCase[47553-47617]:SwitchCase[48156-48220]"
    }, {
      "left" : "return Token.USE_STACK;",
      "right" : "return Token.USE_STACK;",
      "info" : "ReturnStatement[47626-47649]:ReturnStatement[48229-48252]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:",
      "info" : "SwitchCase[47656-47721]:SwitchCase[48259-48324]"
    }, {
      "left" : "return Token.SETPROP_OP;",
      "right" : "return Token.SETPROP_OP;",
      "info" : "ReturnStatement[47730-47754]:ReturnStatement[48333-48357]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:",
      "info" : "SwitchCase[47761-47826]:SwitchCase[48364-48429]"
    }, {
      "left" : "return Token.SETELEM_OP;",
      "right" : "return Token.SETELEM_OP;",
      "info" : "ReturnStatement[47835-47859]:ReturnStatement[48438-48462]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:",
      "info" : "SwitchCase[47866-47932]:SwitchCase[48469-48535]"
    }, {
      "left" : "return Token.LOCAL_BLOCK;",
      "right" : "return Token.LOCAL_BLOCK;",
      "info" : "ReturnStatement[47941-47966]:ReturnStatement[48544-48569]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:",
      "info" : "SwitchCase[47973-48038]:SwitchCase[48576-48641]"
    }, {
      "left" : "return Token.SET_REF_OP;",
      "right" : "return Token.SET_REF_OP;",
      "info" : "ReturnStatement[48047-48071]:ReturnStatement[48650-48674]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:",
      "info" : "SwitchCase[48078-48139]:SwitchCase[48681-48742]"
    }, {
      "left" : "return Token.DOTDOT;",
      "right" : "return Token.DOTDOT;",
      "info" : "ReturnStatement[48148-48168]:ReturnStatement[48751-48771]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:",
      "info" : "SwitchCase[48175-48240]:SwitchCase[48778-48843]"
    }, {
      "left" : "return Token.COLONCOLON;",
      "right" : "return Token.COLONCOLON;",
      "info" : "ReturnStatement[48249-48273]:ReturnStatement[48852-48876]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XML:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XML:",
      "info" : "SwitchCase[48280-48338]:SwitchCase[48883-48941]"
    }, {
      "left" : "return Token.XML;",
      "right" : "return Token.XML;",
      "info" : "ReturnStatement[48347-48364]:ReturnStatement[48950-48967]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:",
      "info" : "SwitchCase[48371-48434]:SwitchCase[48974-49037]"
    }, {
      "left" : "return Token.DOTQUERY;",
      "right" : "return Token.DOTQUERY;",
      "info" : "ReturnStatement[48443-48465]:ReturnStatement[49046-49068]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:",
      "info" : "SwitchCase[48472-48534]:SwitchCase[49075-49137]"
    }, {
      "left" : "return Token.XMLATTR;",
      "right" : "return Token.XMLATTR;",
      "info" : "ReturnStatement[48543-48564]:ReturnStatement[49146-49167]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:",
      "info" : "SwitchCase[48571-48632]:SwitchCase[49174-49235]"
    }, {
      "left" : "return Token.XMLEND;",
      "right" : "return Token.XMLEND;",
      "info" : "ReturnStatement[48641-48661]:ReturnStatement[49244-49264]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:",
      "info" : "SwitchCase[48668-48732]:SwitchCase[49271-49335]"
    }, {
      "left" : "return Token.TO_OBJECT;",
      "right" : "return Token.TO_OBJECT;",
      "info" : "ReturnStatement[48741-48764]:ReturnStatement[49344-49367]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:",
      "info" : "SwitchCase[48771-48835]:SwitchCase[49374-49438]"
    }, {
      "left" : "return Token.TO_DOUBLE;",
      "right" : "return Token.TO_DOUBLE;",
      "info" : "ReturnStatement[48844-48867]:ReturnStatement[49447-49470]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GET:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GET:",
      "info" : "SwitchCase[48874-48932]:SwitchCase[49477-49535]"
    }, {
      "left" : "return Token.GET;",
      "right" : "return Token.GET;",
      "info" : "ReturnStatement[48941-48958]:ReturnStatement[49544-49561]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET:",
      "info" : "SwitchCase[48965-49023]:SwitchCase[49568-49626]"
    }, {
      "left" : "return Token.SET;",
      "right" : "return Token.SET;",
      "info" : "ReturnStatement[49032-49049]:ReturnStatement[49635-49652]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:",
      "info" : "SwitchCase[49056-49116]:SwitchCase[49659-49719]"
    }, {
      "left" : "return Token.CONST;",
      "right" : "return Token.CONST;",
      "info" : "ReturnStatement[49125-49144]:ReturnStatement[49728-49747]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:",
      "info" : "SwitchCase[49151-49214]:SwitchCase[49754-49817]"
    }, {
      "left" : "return Token.SETCONST;",
      "right" : "return Token.SETCONST;",
      "info" : "ReturnStatement[49223-49245]:ReturnStatement[49826-49848]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:",
      "info" : "SwitchCase[49252-49315]:SwitchCase[49855-49918]"
    }, {
      "left" : "return Token.DEBUGGER;",
      "right" : "return Token.DEBUGGER;",
      "info" : "ReturnStatement[49324-49346]:ReturnStatement[49927-49949]"
    }, {
      "left" : "throw new IllegalStateException(String.valueOf(token));",
      "right" : "throw new IllegalStateException(String.valueOf(token));",
      "info" : "ThrowStatement[49384-49439]:ThrowStatement[49987-50042]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49519-49526]:Modifier[50122-50129]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49527-49531]:SimpleType[50130-50134]"
    }, {
      "left" : "newNode",
      "right" : "newNode",
      "info" : "SimpleName[49532-49539]:SimpleName[50135-50142]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[49540-49548]:SingleVariableDeclaration[50143-50151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49550-49611]:Block[50153-50214]"
    }, {
      "left" : "return new Node(type).clonePropsFrom(templateNode);",
      "right" : "return new Node(type).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[49556-49607]:ReturnStatement[50159-50210]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49615-49622]:Modifier[50218-50225]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49623-49627]:SimpleType[50226-50230]"
    }, {
      "left" : "newNode",
      "right" : "newNode",
      "info" : "SimpleName[49628-49635]:SimpleName[50231-50238]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[49636-49644]:SingleVariableDeclaration[50239-50247]"
    }, {
      "left" : "Node child1",
      "right" : "Node child1",
      "info" : "SingleVariableDeclaration[49646-49657]:SingleVariableDeclaration[50249-50260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49659-49728]:Block[50262-50331]"
    }, {
      "left" : "return new Node(type, child1).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[49665-49724]:ReturnStatement[50268-50327]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49732-49739]:Modifier[50335-50342]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49740-49744]:SimpleType[50343-50347]"
    }, {
      "left" : "newNode",
      "right" : "newNode",
      "info" : "SimpleName[49745-49752]:SimpleName[50348-50355]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[49753-49761]:SingleVariableDeclaration[50356-50364]"
    }, {
      "left" : "Node child1",
      "right" : "Node child1",
      "info" : "SingleVariableDeclaration[49763-49774]:SingleVariableDeclaration[50366-50377]"
    }, {
      "left" : "Node child2",
      "right" : "Node child2",
      "info" : "SingleVariableDeclaration[49776-49787]:SingleVariableDeclaration[50379-50390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49789-49866]:Block[50392-50469]"
    }, {
      "left" : "return new Node(type, child1, child2).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1, child2).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[49795-49862]:ReturnStatement[50398-50465]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49870-49877]:Modifier[50473-50480]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49878-49882]:SimpleType[50481-50485]"
    }, {
      "left" : "newNode",
      "right" : "newNode",
      "info" : "SimpleName[49883-49890]:SimpleName[50486-50493]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[49891-49899]:SingleVariableDeclaration[50494-50502]"
    }, {
      "left" : "Node child1",
      "right" : "Node child1",
      "info" : "SingleVariableDeclaration[49901-49912]:SingleVariableDeclaration[50504-50515]"
    }, {
      "left" : "Node child2",
      "right" : "Node child2",
      "info" : "SingleVariableDeclaration[49914-49925]:SingleVariableDeclaration[50517-50528]"
    }, {
      "left" : "Node child3",
      "right" : "Node child3",
      "info" : "SingleVariableDeclaration[49927-49938]:SingleVariableDeclaration[50530-50541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49940-50025]:Block[50543-50628]"
    }, {
      "left" : "return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[49946-50021]:ReturnStatement[50549-50624]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50029-50036]:Modifier[50632-50639]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[50037-50041]:SimpleType[50640-50644]"
    }, {
      "left" : "newStringNode",
      "right" : "newStringNode",
      "info" : "SimpleName[50042-50055]:SimpleName[50645-50658]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[50056-50068]:SingleVariableDeclaration[50659-50671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50070-50138]:Block[50673-50741]"
    }, {
      "left" : "return Node.newString(value).clonePropsFrom(templateNode);",
      "right" : "return Node.newString(value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[50076-50134]:ReturnStatement[50679-50737]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50142-50149]:Modifier[50745-50752]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[50150-50154]:SimpleType[50753-50757]"
    }, {
      "left" : "newStringNode",
      "right" : "newStringNode",
      "info" : "SimpleName[50155-50168]:SimpleName[50758-50771]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[50169-50177]:SingleVariableDeclaration[50772-50780]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[50179-50191]:SingleVariableDeclaration[50782-50794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50193-50267]:Block[50796-50870]"
    }, {
      "left" : "return Node.newString(type, value).clonePropsFrom(templateNode);",
      "right" : "return Node.newString(type, value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[50199-50263]:ReturnStatement[50802-50866]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50271-50278]:Modifier[50874-50881]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[50279-50283]:SimpleType[50882-50886]"
    }, {
      "left" : "newNumberNode",
      "right" : "newNumberNode",
      "info" : "SimpleName[50284-50297]:SimpleName[50887-50900]"
    }, {
      "left" : "Double value",
      "right" : "Double value",
      "info" : "SingleVariableDeclaration[50298-50310]:SingleVariableDeclaration[50901-50913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50312-50380]:Block[50915-50983]"
    }, {
      "left" : "return Node.newNumber(value).clonePropsFrom(templateNode);",
      "right" : "return Node.newNumber(value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[50318-50376]:ReturnStatement[50921-50979]"
    } ]
  },
  "interFileMappings" : { }
}