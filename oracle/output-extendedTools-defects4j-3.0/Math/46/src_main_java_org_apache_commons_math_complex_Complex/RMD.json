{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "TypeDeclaration[1257-40171]:TypeDeclaration[1257-40141]"
    }, {
      "left" : "public static final Complex I = new Complex(0.0, 1.0);",
      "right" : "public static final Complex I = new Complex(0.0, 1.0);",
      "info" : "FieldDeclaration[2328-2451]:FieldDeclaration[2328-2451]"
    }, {
      "left" : "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",
      "right" : "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",
      "info" : "FieldDeclaration[2493-2617]:FieldDeclaration[2493-2617]"
    }, {
      "left" : "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
      "right" : "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
      "info" : "FieldDeclaration[2661-2814]:FieldDeclaration[2661-2814]"
    }, {
      "left" : "public static final Complex ONE = new Complex(1.0, 0.0);",
      "right" : "public static final Complex ONE = new Complex(1.0, 0.0);",
      "info" : "FieldDeclaration[2819-2929]:FieldDeclaration[2819-2929]"
    }, {
      "left" : "public static final Complex ZERO = new Complex(0.0, 0.0);",
      "right" : "public static final Complex ZERO = new Complex(0.0, 0.0);",
      "info" : "FieldDeclaration[2934-3045]:FieldDeclaration[2934-3045]"
    }, {
      "left" : "private static final long serialVersionUID = -6195664516687396620L;",
      "right" : "private static final long serialVersionUID = -6195664516687396620L;",
      "info" : "FieldDeclaration[3051-3161]:FieldDeclaration[3051-3161]"
    }, {
      "left" : "private final double imaginary;",
      "right" : "private final double imaginary;",
      "info" : "FieldDeclaration[3167-3229]:FieldDeclaration[3167-3229]"
    }, {
      "left" : "private final double real;",
      "right" : "private final double real;",
      "info" : "FieldDeclaration[3234-3286]:FieldDeclaration[3234-3286]"
    }, {
      "left" : "private final transient boolean isNaN;",
      "right" : "private final transient boolean isNaN;",
      "info" : "FieldDeclaration[3291-3392]:FieldDeclaration[3291-3392]"
    }, {
      "left" : "private final transient boolean isInfinite;",
      "right" : "private final transient boolean isInfinite;",
      "info" : "FieldDeclaration[3397-3499]:FieldDeclaration[3397-3499]"
    }, {
      "left" : "private final transient boolean isZero;",
      "right" : "private final transient boolean isZero;",
      "info" : "FieldDeclaration[3504-3598]:FieldDeclaration[3504-3598]"
    }, {
      "left" : "public Complex(double real)",
      "right" : "public Complex(double real)",
      "info" : "MethodDeclaration[3604-3774]:MethodDeclaration[3604-3774]"
    }, {
      "left" : "public Complex(double real, double imaginary)",
      "right" : "public Complex(double real, double imaginary)",
      "info" : "MethodDeclaration[3780-4267]:MethodDeclaration[3780-4267]"
    }, {
      "left" : "public double abs()",
      "right" : "public double abs()",
      "info" : "MethodDeclaration[4273-5245]:MethodDeclaration[4273-5245]"
    }, {
      "left" : "public Complex add(Complex addend) throws NullArgumentException",
      "right" : "public Complex add(Complex addend) throws NullArgumentException",
      "info" : "MethodDeclaration[5251-6274]:MethodDeclaration[5251-6274]"
    }, {
      "left" : "public Complex add(double addend)",
      "right" : "public Complex add(double addend)",
      "info" : "MethodDeclaration[6280-6738]:MethodDeclaration[6280-6738]"
    }, {
      "left" : "public Complex conjugate()",
      "right" : "public Complex conjugate()",
      "info" : "MethodDeclaration[6745-7481]:MethodDeclaration[6745-7481]"
    }, {
      "left" : "public Complex divide(Complex divisor)\n        throws NullArgumentException",
      "right" : "public Complex divide(Complex divisor)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[7487-10340]:MethodDeclaration[7487-10325]"
    }, {
      "left" : "public Complex divide(double divisor)",
      "right" : "public Complex divide(double divisor)",
      "info" : "MethodDeclaration[10346-11103]:MethodDeclaration[10331-11073]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[11109-12223]:MethodDeclaration[11079-12193]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[12229-12641]:MethodDeclaration[12199-12611]"
    }, {
      "left" : "public double getImaginary()",
      "right" : "public double getImaginary()",
      "info" : "MethodDeclaration[12647-12801]:MethodDeclaration[12617-12771]"
    }, {
      "left" : "public double getReal()",
      "right" : "public double getReal()",
      "info" : "MethodDeclaration[12807-12941]:MethodDeclaration[12777-12911]"
    }, {
      "left" : "public boolean isNaN()",
      "right" : "public boolean isNaN()",
      "info" : "MethodDeclaration[12947-13218]:MethodDeclaration[12917-13188]"
    }, {
      "left" : "public boolean isInfinite()",
      "right" : "public boolean isInfinite()",
      "info" : "MethodDeclaration[13224-13661]:MethodDeclaration[13194-13631]"
    }, {
      "left" : "public Complex multiply(Complex factor)\n        throws NullArgumentException",
      "right" : "public Complex multiply(Complex factor)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[13667-15327]:MethodDeclaration[13637-15297]"
    }, {
      "left" : "public Complex multiply(double factor)",
      "right" : "public Complex multiply(double factor)",
      "info" : "MethodDeclaration[15333-16043]:MethodDeclaration[15303-16013]"
    }, {
      "left" : "public Complex negate()",
      "right" : "public Complex negate()",
      "info" : "MethodDeclaration[16049-16420]:MethodDeclaration[16019-16390]"
    }, {
      "left" : "public Complex subtract(Complex subtrahend)\n        throws NullArgumentException",
      "right" : "public Complex subtract(Complex subtrahend)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[16426-17489]:MethodDeclaration[16396-17459]"
    }, {
      "left" : "public Complex subtract(double subtrahend)",
      "right" : "public Complex subtract(double subtrahend)",
      "info" : "MethodDeclaration[17495-17944]:MethodDeclaration[17465-17914]"
    }, {
      "left" : "public Complex acos()",
      "right" : "public Complex acos()",
      "info" : "MethodDeclaration[17950-18650]:MethodDeclaration[17920-18620]"
    }, {
      "left" : "public Complex asin()",
      "right" : "public Complex asin()",
      "info" : "MethodDeclaration[18656-19342]:MethodDeclaration[18626-19312]"
    }, {
      "left" : "public Complex atan()",
      "right" : "public Complex atan()",
      "info" : "MethodDeclaration[19348-20059]:MethodDeclaration[19318-20029]"
    }, {
      "left" : "public Complex cos()",
      "right" : "public Complex cos()",
      "info" : "MethodDeclaration[20065-21391]:MethodDeclaration[20035-21361]"
    }, {
      "left" : "public Complex cosh()",
      "right" : "public Complex cosh()",
      "info" : "MethodDeclaration[21397-22760]:MethodDeclaration[21367-22730]"
    }, {
      "left" : "public Complex exp()",
      "right" : "public Complex exp()",
      "info" : "MethodDeclaration[22766-24142]:MethodDeclaration[22736-24112]"
    }, {
      "left" : "public Complex log()",
      "right" : "public Complex log()",
      "info" : "MethodDeclaration[24148-25693]:MethodDeclaration[24118-25663]"
    }, {
      "left" : "public Complex pow(Complex x)\n        throws NullArgumentException",
      "right" : "public Complex pow(Complex x)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[25699-26584]:MethodDeclaration[25669-26554]"
    }, {
      "left" : "public Complex pow(double x)",
      "right" : "public Complex pow(double x)",
      "info" : "MethodDeclaration[26590-26921]:MethodDeclaration[26560-26891]"
    }, {
      "left" : "public Complex sin()",
      "right" : "public Complex sin()",
      "info" : "MethodDeclaration[26927-28254]:MethodDeclaration[26897-28224]"
    }, {
      "left" : "public Complex sinh()",
      "right" : "public Complex sinh()",
      "info" : "MethodDeclaration[28260-29595]:MethodDeclaration[28230-29565]"
    }, {
      "left" : "public Complex sqrt()",
      "right" : "public Complex sqrt()",
      "info" : "MethodDeclaration[29601-31462]:MethodDeclaration[29571-31432]"
    }, {
      "left" : "public Complex sqrt1z()",
      "right" : "public Complex sqrt1z()",
      "info" : "MethodDeclaration[31468-32242]:MethodDeclaration[31438-32212]"
    }, {
      "left" : "public Complex tan()",
      "right" : "public Complex tan()",
      "info" : "MethodDeclaration[32248-33766]:MethodDeclaration[32218-33736]"
    }, {
      "left" : "public Complex tanh()",
      "right" : "public Complex tanh()",
      "info" : "MethodDeclaration[33772-35298]:MethodDeclaration[33742-35268]"
    }, {
      "left" : "public double getArgument()",
      "right" : "public double getArgument()",
      "info" : "MethodDeclaration[35306-36225]:MethodDeclaration[35276-36195]"
    }, {
      "left" : "public List<Complex> nthRoot(int n)",
      "right" : "public List<Complex> nthRoot(int n)",
      "info" : "MethodDeclaration[36231-38317]:MethodDeclaration[36201-38287]"
    }, {
      "left" : "protected Complex createComplex(double realPart,\n                                    double imaginaryPart)",
      "right" : "protected Complex createComplex(double realPart,\n                                    double imaginaryPart)",
      "info" : "MethodDeclaration[38323-38759]:MethodDeclaration[38293-38729]"
    }, {
      "left" : "public static Complex valueOf(double realPart,\n                                  double imaginaryPart)",
      "right" : "public static Complex valueOf(double realPart,\n                                  double imaginaryPart)",
      "info" : "MethodDeclaration[38765-39246]:MethodDeclaration[38735-39216]"
    }, {
      "left" : "public static Complex valueOf(double realPart)",
      "right" : "public static Complex valueOf(double realPart)",
      "info" : "MethodDeclaration[39252-39565]:MethodDeclaration[39222-39535]"
    }, {
      "left" : "protected final Object readResolve()",
      "right" : "protected final Object readResolve()",
      "info" : "MethodDeclaration[39571-39928]:MethodDeclaration[39541-39898]"
    }, {
      "left" : "public ComplexField getField()",
      "right" : "public ComplexField getField()",
      "info" : "MethodDeclaration[39934-40040]:MethodDeclaration[39904-40010]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[40046-40169]:MethodDeclaration[40016-40139]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2253-2259]:Modifier[2253-2259]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2260-2265]:TYPE_DECLARATION_KIND[2260-2265]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleName[2266-2273]:SimpleName[2266-2273]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3714-3720]:Modifier[3714-3720]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleName[3721-3728]:SimpleName[3721-3728]"
    }, {
      "left" : "double real",
      "right" : "double real",
      "info" : "SingleVariableDeclaration[3729-3740]:SingleVariableDeclaration[3729-3740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3742-3774]:Block[3742-3774]"
    }, {
      "left" : "this(real, 0.0);",
      "right" : "this(real, 0.0);",
      "info" : "ConstructorInvocation[3752-3768]:ConstructorInvocation[3752-3768]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3940-3946]:Modifier[3940-3946]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleName[3947-3954]:SimpleName[3947-3954]"
    }, {
      "left" : "double real",
      "right" : "double real",
      "info" : "SingleVariableDeclaration[3955-3966]:SingleVariableDeclaration[3955-3966]"
    }, {
      "left" : "double imaginary",
      "right" : "double imaginary",
      "info" : "SingleVariableDeclaration[3968-3984]:SingleVariableDeclaration[3968-3984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3986-4267]:Block[3986-4267]"
    }, {
      "left" : "this.real = real;",
      "right" : "this.real = real;",
      "info" : "ExpressionStatement[3996-4013]:ExpressionStatement[3996-4013]"
    }, {
      "left" : "this.imaginary = imaginary;",
      "right" : "this.imaginary = imaginary;",
      "info" : "ExpressionStatement[4022-4049]:ExpressionStatement[4022-4049]"
    }, {
      "left" : "isNaN = Double.isNaN(real) || Double.isNaN(imaginary);",
      "right" : "isNaN = Double.isNaN(real) || Double.isNaN(imaginary);",
      "info" : "ExpressionStatement[4059-4113]:ExpressionStatement[4059-4113]"
    }, {
      "left" : "isInfinite = !isNaN &&\n            (Double.isInfinite(real) || Double.isInfinite(imaginary));",
      "right" : "isInfinite = !isNaN &&\n            (Double.isInfinite(real) || Double.isInfinite(imaginary));",
      "info" : "ExpressionStatement[4122-4215]:ExpressionStatement[4122-4215]"
    }, {
      "left" : "isZero = real == 0 && imaginary == 0;",
      "right" : "isZero = real == 0 && imaginary == 0;",
      "info" : "ExpressionStatement[4224-4261]:ExpressionStatement[4224-4261]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4581-4587]:Modifier[4581-4587]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[4588-4594]:PrimitiveType[4588-4594]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[4595-4598]:SimpleName[4595-4598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4601-5245]:Block[4601-5245]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[4611-4664]:IfStatement[4611-4664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4622-4664]:Block[4622-4664]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[4636-4654]:ReturnStatement[4636-4654]"
    }, {
      "left" : "if (isInfinite())",
      "right" : "if (isInfinite())",
      "info" : "IfStatement[4673-4747]:IfStatement[4673-4747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4691-4747]:Block[4691-4747]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[4705-4737]:ReturnStatement[4705-4737]"
    }, {
      "left" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
      "right" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
      "info" : "IfStatement[4756-5239]:IfStatement[4756-5239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4806-5022]:Block[4806-5022]"
    }, {
      "left" : "if (imaginary == 0.0)",
      "right" : "if (imaginary == 0.0)",
      "info" : "IfStatement[4820-4900]:IfStatement[4820-4900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4842-4900]:Block[4842-4900]"
    }, {
      "left" : "return FastMath.abs(real);",
      "right" : "return FastMath.abs(real);",
      "info" : "ReturnStatement[4860-4886]:ReturnStatement[4860-4886]"
    }, {
      "left" : "double q = real / imaginary;",
      "right" : "double q = real / imaginary;",
      "info" : "VariableDeclarationStatement[4913-4941]:VariableDeclarationStatement[4913-4941]"
    }, {
      "left" : "return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);",
      "right" : "return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);",
      "info" : "ReturnStatement[4954-5012]:ReturnStatement[4954-5012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5028-5239]:Block[5028-5239]"
    }, {
      "left" : "if (real == 0.0)",
      "right" : "if (real == 0.0)",
      "info" : "IfStatement[5042-5122]:IfStatement[5042-5122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5059-5122]:Block[5059-5122]"
    }, {
      "left" : "return FastMath.abs(imaginary);",
      "right" : "return FastMath.abs(imaginary);",
      "info" : "ReturnStatement[5077-5108]:ReturnStatement[5077-5108]"
    }, {
      "left" : "double q = imaginary / real;",
      "right" : "double q = imaginary / real;",
      "info" : "VariableDeclarationStatement[5135-5163]:VariableDeclarationStatement[5135-5163]"
    }, {
      "left" : "return FastMath.abs(real) * FastMath.sqrt(1 + q * q);",
      "right" : "return FastMath.abs(real) * FastMath.sqrt(1 + q * q);",
      "info" : "ReturnStatement[5176-5229]:ReturnStatement[5176-5229]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5972-5978]:Modifier[5972-5978]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[5979-5986]:SimpleType[5979-5986]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[5987-5990]:SimpleName[5987-5990]"
    }, {
      "left" : "Complex addend",
      "right" : "Complex addend",
      "info" : "SingleVariableDeclaration[5991-6005]:SingleVariableDeclaration[5991-6005]"
    }, {
      "left" : "NullArgumentException",
      "right" : "NullArgumentException",
      "info" : "SimpleType[6014-6035]:SimpleType[6014-6035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6036-6274]:Block[6036-6274]"
    }, {
      "left" : "MathUtils.checkNotNull(addend);",
      "right" : "MathUtils.checkNotNull(addend);",
      "info" : "ExpressionStatement[6046-6077]:ExpressionStatement[6046-6077]"
    }, {
      "left" : "if (isNaN || addend.isNaN)",
      "right" : "if (isNaN || addend.isNaN)",
      "info" : "IfStatement[6086-6148]:IfStatement[6086-6148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6113-6148]:Block[6113-6148]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[6127-6138]:ReturnStatement[6127-6138]"
    }, {
      "left" : "return createComplex(real + addend.getReal(),\n                             imaginary + addend.getImaginary());",
      "right" : "return createComplex(real + addend.getReal(),\n                             imaginary + addend.getImaginary());",
      "info" : "ReturnStatement[6158-6268]:ReturnStatement[6158-6268]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6561-6567]:Modifier[6561-6567]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[6568-6575]:SimpleType[6568-6575]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[6576-6579]:SimpleName[6576-6579]"
    }, {
      "left" : "double addend",
      "right" : "double addend",
      "info" : "SingleVariableDeclaration[6580-6593]:SingleVariableDeclaration[6580-6593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6595-6738]:Block[6595-6738]"
    }, {
      "left" : "if (isNaN || Double.isNaN(addend))",
      "right" : "if (isNaN || Double.isNaN(addend))",
      "info" : "IfStatement[6605-6675]:IfStatement[6605-6675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6640-6675]:Block[6640-6675]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[6654-6665]:ReturnStatement[6654-6665]"
    }, {
      "left" : "return createComplex(real + addend, imaginary);",
      "right" : "return createComplex(real + addend, imaginary);",
      "info" : "ReturnStatement[6685-6732]:ReturnStatement[6685-6732]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7343-7349]:Modifier[7343-7349]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[7350-7357]:SimpleType[7350-7357]"
    }, {
      "left" : "conjugate",
      "right" : "conjugate",
      "info" : "SimpleName[7358-7367]:SimpleName[7358-7367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7370-7481]:Block[7370-7481]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[7380-7426]:IfStatement[7380-7426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7391-7426]:Block[7391-7426]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[7405-7416]:ReturnStatement[7405-7416]"
    }, {
      "left" : "return createComplex(real, -imaginary);",
      "right" : "return createComplex(real, -imaginary);",
      "info" : "ReturnStatement[7436-7475]:ReturnStatement[7436-7475]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9346-9352]:Modifier[9346-9352]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[9353-9360]:SimpleType[9353-9360]"
    }, {
      "left" : "divide",
      "right" : "divide",
      "info" : "SimpleName[9361-9367]:SimpleName[9361-9367]"
    }, {
      "left" : "Complex divisor",
      "right" : "Complex divisor",
      "info" : "SingleVariableDeclaration[9368-9383]:SingleVariableDeclaration[9368-9383]"
    }, {
      "left" : "NullArgumentException",
      "right" : "NullArgumentException",
      "info" : "SimpleType[9400-9421]:SimpleType[9400-9421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9422-10340]:Block[9422-10325]"
    }, {
      "left" : "MathUtils.checkNotNull(divisor);",
      "right" : "MathUtils.checkNotNull(divisor);",
      "info" : "ExpressionStatement[9432-9464]:ExpressionStatement[9432-9464]"
    }, {
      "left" : "if (isNaN || divisor.isNaN)",
      "right" : "if (isNaN || divisor.isNaN)",
      "info" : "IfStatement[9473-9536]:IfStatement[9473-9536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9501-9536]:Block[9501-9536]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[9515-9526]:ReturnStatement[9515-9526]"
    }, {
      "left" : "if (divisor.isZero)",
      "right" : "if (divisor.isZero)",
      "info" : "IfStatement[9546-9674]:IfStatement[9546-9659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9566-9674]:Block[9566-9659]"
    }, {
      "left" : "return isZero ? NaN : INF;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[9638-9664]:ReturnStatement[9638-9649]"
    }, {
      "left" : "NaN",
      "right" : "NaN",
      "info" : "SimpleName[9654-9657]:SimpleName[9645-9648]"
    }, {
      "left" : "if (divisor.isInfinite() && !isInfinite())",
      "right" : "if (divisor.isInfinite() && !isInfinite())",
      "info" : "IfStatement[9684-9763]:IfStatement[9669-9748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9727-9763]:Block[9712-9748]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[9741-9753]:ReturnStatement[9726-9738]"
    }, {
      "left" : "final double c = divisor.getReal();",
      "right" : "final double c = divisor.getReal();",
      "info" : "VariableDeclarationStatement[9773-9808]:VariableDeclarationStatement[9758-9793]"
    }, {
      "left" : "final double d = divisor.getImaginary();",
      "right" : "final double d = divisor.getImaginary();",
      "info" : "VariableDeclarationStatement[9817-9857]:VariableDeclarationStatement[9802-9842]"
    }, {
      "left" : "if (FastMath.abs(c) < FastMath.abs(d))",
      "right" : "if (FastMath.abs(c) < FastMath.abs(d))",
      "info" : "IfStatement[9867-10334]:IfStatement[9852-10319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9906-10117]:Block[9891-10102]"
    }, {
      "left" : "double q = c / d;",
      "right" : "double q = c / d;",
      "info" : "VariableDeclarationStatement[9920-9937]:VariableDeclarationStatement[9905-9922]"
    }, {
      "left" : "double denominator = c * q + d;",
      "right" : "double denominator = c * q + d;",
      "info" : "VariableDeclarationStatement[9950-9981]:VariableDeclarationStatement[9935-9966]"
    }, {
      "left" : "return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);",
      "right" : "return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);",
      "info" : "ReturnStatement[9994-10107]:ReturnStatement[9979-10092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10123-10334]:Block[10108-10319]"
    }, {
      "left" : "double q = d / c;",
      "right" : "double q = d / c;",
      "info" : "VariableDeclarationStatement[10137-10154]:VariableDeclarationStatement[10122-10139]"
    }, {
      "left" : "double denominator = d * q + c;",
      "right" : "double denominator = d * q + c;",
      "info" : "VariableDeclarationStatement[10167-10198]:VariableDeclarationStatement[10152-10183]"
    }, {
      "left" : "return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);",
      "right" : "return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);",
      "info" : "ReturnStatement[10211-10324]:ReturnStatement[10196-10309]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10646-10652]:Modifier[10631-10637]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[10653-10660]:SimpleType[10638-10645]"
    }, {
      "left" : "divide",
      "right" : "divide",
      "info" : "SimpleName[10661-10667]:SimpleName[10646-10652]"
    }, {
      "left" : "double divisor",
      "right" : "double divisor",
      "info" : "SingleVariableDeclaration[10668-10682]:SingleVariableDeclaration[10653-10667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10684-11103]:Block[10669-11073]"
    }, {
      "left" : "if (isNaN || Double.isNaN(divisor))",
      "right" : "if (isNaN || Double.isNaN(divisor))",
      "info" : "IfStatement[10694-10765]:IfStatement[10679-10750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10730-10765]:Block[10715-10750]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[10744-10755]:ReturnStatement[10729-10740]"
    }, {
      "left" : "if (divisor == 0d)",
      "right" : "if (divisor == 0d)",
      "info" : "IfStatement[10774-10901]:IfStatement[10759-10871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10793-10901]:Block[10778-10871]"
    }, {
      "left" : "return isZero ? NaN : INF;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[10865-10891]:ReturnStatement[10850-10861]"
    }, {
      "left" : "NaN",
      "right" : "NaN",
      "info" : "SimpleName[10881-10884]:SimpleName[10857-10860]"
    }, {
      "left" : "if (Double.isInfinite(divisor))",
      "right" : "if (Double.isInfinite(divisor))",
      "info" : "IfStatement[10910-11000]:IfStatement[10880-10970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10942-11000]:Block[10912-10970]"
    }, {
      "left" : "return !isInfinite() ? ZERO : NaN;",
      "right" : "return !isInfinite() ? ZERO : NaN;",
      "info" : "ReturnStatement[10956-10990]:ReturnStatement[10926-10960]"
    }, {
      "left" : "return createComplex(real / divisor,\n                             imaginary  / divisor);",
      "right" : "return createComplex(real / divisor,\n                             imaginary  / divisor);",
      "info" : "ReturnStatement[11009-11097]:ReturnStatement[10979-11067]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11828-11837]:MarkerAnnotation[11798-11807]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11842-11848]:Modifier[11812-11818]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11849-11856]:PrimitiveType[11819-11826]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[11857-11863]:SimpleName[11827-11833]"
    }, {
      "left" : "Object other",
      "right" : "Object other",
      "info" : "SingleVariableDeclaration[11864-11876]:SingleVariableDeclaration[11834-11846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11878-12223]:Block[11848-12193]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[11888-11943]:IfStatement[11858-11913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11907-11943]:Block[11877-11913]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11921-11933]:ReturnStatement[11891-11903]"
    }, {
      "left" : "if (other instanceof Complex)",
      "right" : "if (other instanceof Complex)",
      "info" : "IfStatement[11952-12195]:IfStatement[11922-12165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11981-12195]:Block[11951-12165]"
    }, {
      "left" : "Complex c = (Complex)other;",
      "right" : "Complex c = (Complex)other;",
      "info" : "VariableDeclarationStatement[11995-12022]:VariableDeclarationStatement[11965-11992]"
    }, {
      "left" : "if (c.isNaN)",
      "right" : "if (c.isNaN)",
      "info" : "IfStatement[12035-12185]:IfStatement[12005-12155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12048-12093]:Block[12018-12063]"
    }, {
      "left" : "return isNaN;",
      "right" : "return isNaN;",
      "info" : "ReturnStatement[12066-12079]:ReturnStatement[12036-12049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12099-12185]:Block[12069-12155]"
    }, {
      "left" : "return (real == c.real) && (imaginary == c.imaginary);",
      "right" : "return (real == c.real) && (imaginary == c.imaginary);",
      "info" : "ReturnStatement[12117-12171]:ReturnStatement[12087-12141]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12204-12217]:ReturnStatement[12174-12187]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12456-12465]:MarkerAnnotation[12426-12435]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12470-12476]:Modifier[12440-12446]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12477-12480]:PrimitiveType[12447-12450]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[12481-12489]:SimpleName[12451-12459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12492-12641]:Block[12462-12611]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[12502-12546]:IfStatement[12472-12516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12513-12546]:Block[12483-12516]"
    }, {
      "left" : "return 7;",
      "right" : "return 7;",
      "info" : "ReturnStatement[12527-12536]:ReturnStatement[12497-12506]"
    }, {
      "left" : "return 37 * (17 * MathUtils.hash(imaginary) +\n            MathUtils.hash(real));",
      "right" : "return 37 * (17 * MathUtils.hash(imaginary) +\n            MathUtils.hash(real));",
      "info" : "ReturnStatement[12555-12635]:ReturnStatement[12525-12605]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12739-12745]:Modifier[12709-12715]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[12746-12752]:PrimitiveType[12716-12722]"
    }, {
      "left" : "getImaginary",
      "right" : "getImaginary",
      "info" : "SimpleName[12753-12765]:SimpleName[12723-12735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12768-12801]:Block[12738-12771]"
    }, {
      "left" : "return imaginary;",
      "right" : "return imaginary;",
      "info" : "ReturnStatement[12778-12795]:ReturnStatement[12748-12765]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12889-12895]:Modifier[12859-12865]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[12896-12902]:PrimitiveType[12866-12872]"
    }, {
      "left" : "getReal",
      "right" : "getReal",
      "info" : "SimpleName[12903-12910]:SimpleName[12873-12880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12913-12941]:Block[12883-12911]"
    }, {
      "left" : "return real;",
      "right" : "return real;",
      "info" : "ReturnStatement[12923-12935]:ReturnStatement[12893-12905]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13166-13172]:Modifier[13136-13142]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13173-13180]:PrimitiveType[13143-13150]"
    }, {
      "left" : "isNaN",
      "right" : "isNaN",
      "info" : "SimpleName[13181-13186]:SimpleName[13151-13156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13189-13218]:Block[13159-13188]"
    }, {
      "left" : "return isNaN;",
      "right" : "return isNaN;",
      "info" : "ReturnStatement[13199-13212]:ReturnStatement[13169-13182]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13599-13605]:Modifier[13569-13575]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13606-13613]:PrimitiveType[13576-13583]"
    }, {
      "left" : "isInfinite",
      "right" : "isInfinite",
      "info" : "SimpleName[13614-13624]:SimpleName[13584-13594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13627-13661]:Block[13597-13631]"
    }, {
      "left" : "return isInfinite;",
      "right" : "return isInfinite;",
      "info" : "ReturnStatement[13637-13655]:ReturnStatement[13607-13625]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14685-14691]:Modifier[14655-14661]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[14692-14699]:SimpleType[14662-14669]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[14700-14708]:SimpleName[14670-14678]"
    }, {
      "left" : "Complex factor",
      "right" : "Complex factor",
      "info" : "SingleVariableDeclaration[14709-14723]:SingleVariableDeclaration[14679-14693]"
    }, {
      "left" : "NullArgumentException",
      "right" : "NullArgumentException",
      "info" : "SimpleType[14740-14761]:SimpleType[14710-14731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14762-15327]:Block[14732-15297]"
    }, {
      "left" : "MathUtils.checkNotNull(factor);",
      "right" : "MathUtils.checkNotNull(factor);",
      "info" : "ExpressionStatement[14772-14803]:ExpressionStatement[14742-14773]"
    }, {
      "left" : "if (isNaN || factor.isNaN)",
      "right" : "if (isNaN || factor.isNaN)",
      "info" : "IfStatement[14812-14874]:IfStatement[14782-14844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14839-14874]:Block[14809-14844]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[14853-14864]:ReturnStatement[14823-14834]"
    }, {
      "left" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor.real) ||\n            Double.isInfinite(factor.imaginary))",
      "right" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor.real) ||\n            Double.isInfinite(factor.imaginary))",
      "info" : "IfStatement[14883-15160]:IfStatement[14853-15130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15053-15160]:Block[15023-15130]"
    }, {
      "left" : "return INF;",
      "right" : "return INF;",
      "info" : "ReturnStatement[15139-15150]:ReturnStatement[15109-15120]"
    }, {
      "left" : "return createComplex(real * factor.real - imaginary * factor.imaginary,\n                             real * factor.imaginary + imaginary * factor.real);",
      "right" : "return createComplex(real * factor.real - imaginary * factor.imaginary,\n                             real * factor.imaginary + imaginary * factor.real);",
      "info" : "ReturnStatement[15169-15321]:ReturnStatement[15139-15291]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15623-15629]:Modifier[15593-15599]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[15630-15637]:SimpleType[15600-15607]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[15638-15646]:SimpleName[15608-15616]"
    }, {
      "left" : "double factor",
      "right" : "double factor",
      "info" : "SingleVariableDeclaration[15647-15660]:SingleVariableDeclaration[15617-15630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15662-16043]:Block[15632-16013]"
    }, {
      "left" : "if (isNaN || Double.isNaN(factor))",
      "right" : "if (isNaN || Double.isNaN(factor))",
      "info" : "IfStatement[15672-15742]:IfStatement[15642-15712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15707-15742]:Block[15677-15712]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[15721-15732]:ReturnStatement[15691-15702]"
    }, {
      "left" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor))",
      "right" : "if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor))",
      "info" : "IfStatement[15751-15972]:IfStatement[15721-15942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15865-15972]:Block[15835-15942]"
    }, {
      "left" : "return INF;",
      "right" : "return INF;",
      "info" : "ReturnStatement[15951-15962]:ReturnStatement[15921-15932]"
    }, {
      "left" : "return createComplex(real * factor, imaginary * factor);",
      "right" : "return createComplex(real * factor, imaginary * factor);",
      "info" : "ReturnStatement[15981-16037]:ReturnStatement[15951-16007]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16284-16290]:Modifier[16254-16260]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[16291-16298]:SimpleType[16261-16268]"
    }, {
      "left" : "negate",
      "right" : "negate",
      "info" : "SimpleName[16299-16305]:SimpleName[16269-16275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16308-16420]:Block[16278-16390]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[16318-16364]:IfStatement[16288-16334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16329-16364]:Block[16299-16334]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[16343-16354]:ReturnStatement[16313-16324]"
    }, {
      "left" : "return createComplex(-real, -imaginary);",
      "right" : "return createComplex(-real, -imaginary);",
      "info" : "ReturnStatement[16374-16414]:ReturnStatement[16344-16384]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17154-17160]:Modifier[17124-17130]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[17161-17168]:SimpleType[17131-17138]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[17169-17177]:SimpleName[17139-17147]"
    }, {
      "left" : "Complex subtrahend",
      "right" : "Complex subtrahend",
      "info" : "SingleVariableDeclaration[17178-17196]:SingleVariableDeclaration[17148-17166]"
    }, {
      "left" : "NullArgumentException",
      "right" : "NullArgumentException",
      "info" : "SimpleType[17213-17234]:SimpleType[17183-17204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17235-17489]:Block[17205-17459]"
    }, {
      "left" : "MathUtils.checkNotNull(subtrahend);",
      "right" : "MathUtils.checkNotNull(subtrahend);",
      "info" : "ExpressionStatement[17245-17280]:ExpressionStatement[17215-17250]"
    }, {
      "left" : "if (isNaN || subtrahend.isNaN)",
      "right" : "if (isNaN || subtrahend.isNaN)",
      "info" : "IfStatement[17289-17355]:IfStatement[17259-17325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17320-17355]:Block[17290-17325]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[17334-17345]:ReturnStatement[17304-17315]"
    }, {
      "left" : "return createComplex(real - subtrahend.getReal(),\n                             imaginary - subtrahend.getImaginary());",
      "right" : "return createComplex(real - subtrahend.getReal(),\n                             imaginary - subtrahend.getImaginary());",
      "info" : "ReturnStatement[17365-17483]:ReturnStatement[17335-17453]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17751-17757]:Modifier[17721-17727]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[17758-17765]:SimpleType[17728-17735]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[17766-17774]:SimpleName[17736-17744]"
    }, {
      "left" : "double subtrahend",
      "right" : "double subtrahend",
      "info" : "SingleVariableDeclaration[17775-17792]:SingleVariableDeclaration[17745-17762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17794-17944]:Block[17764-17914]"
    }, {
      "left" : "if (isNaN || Double.isNaN(subtrahend))",
      "right" : "if (isNaN || Double.isNaN(subtrahend))",
      "info" : "IfStatement[17804-17878]:IfStatement[17774-17848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17843-17878]:Block[17813-17848]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[17857-17868]:ReturnStatement[17827-17838]"
    }, {
      "left" : "return createComplex(real - subtrahend, imaginary);",
      "right" : "return createComplex(real - subtrahend, imaginary);",
      "info" : "ReturnStatement[17887-17938]:ReturnStatement[17857-17908]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18473-18479]:Modifier[18443-18449]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[18480-18487]:SimpleType[18450-18457]"
    }, {
      "left" : "acos",
      "right" : "acos",
      "info" : "SimpleName[18488-18492]:SimpleName[18458-18462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18495-18650]:Block[18465-18620]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[18505-18551]:IfStatement[18475-18521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18516-18551]:Block[18486-18521]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[18530-18541]:ReturnStatement[18500-18511]"
    }, {
      "left" : "return this.add(this.sqrt1z().multiply(I)).log()\n            .multiply(I.negate());",
      "right" : "return this.add(this.sqrt1z().multiply(I)).log()\n            .multiply(I.negate());",
      "info" : "ReturnStatement[18561-18644]:ReturnStatement[18531-18614]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19170-19176]:Modifier[19140-19146]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[19177-19184]:SimpleType[19147-19154]"
    }, {
      "left" : "asin",
      "right" : "asin",
      "info" : "SimpleName[19185-19189]:SimpleName[19155-19159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19192-19342]:Block[19162-19312]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[19202-19248]:IfStatement[19172-19218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19213-19248]:Block[19183-19218]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[19227-19238]:ReturnStatement[19197-19208]"
    }, {
      "left" : "return sqrt1z().add(this.multiply(I)).log()\n            .multiply(I.negate());",
      "right" : "return sqrt1z().add(this.multiply(I)).log()\n            .multiply(I.negate());",
      "info" : "ReturnStatement[19258-19336]:ReturnStatement[19228-19306]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19858-19864]:Modifier[19828-19834]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[19865-19872]:SimpleType[19835-19842]"
    }, {
      "left" : "atan",
      "right" : "atan",
      "info" : "SimpleName[19873-19877]:SimpleName[19843-19847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19880-20059]:Block[19850-20029]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[19890-19936]:IfStatement[19860-19906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19901-19936]:Block[19871-19906]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[19915-19926]:ReturnStatement[19885-19896]"
    }, {
      "left" : "return this.add(I).divide(I.subtract(this)).log()\n            .multiply(I.divide(createComplex(2.0, 0.0)));",
      "right" : "return this.add(I).divide(I.subtract(this)).log()\n            .multiply(I.divide(createComplex(2.0, 0.0)));",
      "info" : "ReturnStatement[19946-20053]:ReturnStatement[19916-20023]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21151-21157]:Modifier[21121-21127]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[21158-21165]:SimpleType[21128-21135]"
    }, {
      "left" : "cos",
      "right" : "cos",
      "info" : "SimpleName[21166-21169]:SimpleName[21136-21139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21172-21391]:Block[21142-21361]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[21182-21228]:IfStatement[21152-21198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21193-21228]:Block[21163-21198]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[21207-21218]:ReturnStatement[21177-21188]"
    }, {
      "left" : "return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),\n                             -FastMath.sin(real) * MathUtils.sinh(imaginary));",
      "right" : "return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),\n                             -FastMath.sin(real) * MathUtils.sinh(imaginary));",
      "info" : "ReturnStatement[21238-21385]:ReturnStatement[21208-21355]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22520-22526]:Modifier[22490-22496]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[22527-22534]:SimpleType[22497-22504]"
    }, {
      "left" : "cosh",
      "right" : "cosh",
      "info" : "SimpleName[22535-22539]:SimpleName[22505-22509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22542-22760]:Block[22512-22730]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[22552-22598]:IfStatement[22522-22568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22563-22598]:Block[22533-22568]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[22577-22588]:ReturnStatement[22547-22558]"
    }, {
      "left" : "return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),\n                             MathUtils.sinh(real) * FastMath.sin(imaginary));",
      "right" : "return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),\n                             MathUtils.sinh(real) * FastMath.sin(imaginary));",
      "info" : "ReturnStatement[22608-22754]:ReturnStatement[22578-22724]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23883-23889]:Modifier[23853-23859]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[23890-23897]:SimpleType[23860-23867]"
    }, {
      "left" : "exp",
      "right" : "exp",
      "info" : "SimpleName[23898-23901]:SimpleName[23868-23871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23904-24142]:Block[23874-24112]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[23914-23960]:IfStatement[23884-23930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23925-23960]:Block[23895-23930]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[23939-23950]:ReturnStatement[23909-23920]"
    }, {
      "left" : "double expReal = FastMath.exp(real);",
      "right" : "double expReal = FastMath.exp(real);",
      "info" : "VariableDeclarationStatement[23970-24006]:VariableDeclarationStatement[23940-23976]"
    }, {
      "left" : "return createComplex(expReal *  FastMath.cos(imaginary),\n                             expReal * FastMath.sin(imaginary));",
      "right" : "return createComplex(expReal *  FastMath.cos(imaginary),\n                             expReal * FastMath.sin(imaginary));",
      "info" : "ReturnStatement[24015-24136]:ReturnStatement[23985-24106]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25496-25502]:Modifier[25466-25472]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[25503-25510]:SimpleType[25473-25480]"
    }, {
      "left" : "log",
      "right" : "log",
      "info" : "SimpleName[25511-25514]:SimpleName[25481-25484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25517-25693]:Block[25487-25663]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[25527-25573]:IfStatement[25497-25543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25538-25573]:Block[25508-25543]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[25552-25563]:ReturnStatement[25522-25533]"
    }, {
      "left" : "return createComplex(FastMath.log(abs()),\n                             FastMath.atan2(imaginary, real));",
      "right" : "return createComplex(FastMath.log(abs()),\n                             FastMath.atan2(imaginary, real));",
      "info" : "ReturnStatement[25583-25687]:ReturnStatement[25553-25657]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26430-26436]:Modifier[26400-26406]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[26437-26444]:SimpleType[26407-26414]"
    }, {
      "left" : "pow",
      "right" : "pow",
      "info" : "SimpleName[26445-26448]:SimpleName[26415-26418]"
    }, {
      "left" : "Complex x",
      "right" : "Complex x",
      "info" : "SingleVariableDeclaration[26449-26458]:SingleVariableDeclaration[26419-26428]"
    }, {
      "left" : "NullArgumentException",
      "right" : "NullArgumentException",
      "info" : "SimpleType[26475-26496]:SimpleType[26445-26466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26497-26584]:Block[26467-26554]"
    }, {
      "left" : "MathUtils.checkNotNull(x);",
      "right" : "MathUtils.checkNotNull(x);",
      "info" : "ExpressionStatement[26507-26533]:ExpressionStatement[26477-26503]"
    }, {
      "left" : "return this.log().multiply(x).exp();",
      "right" : "return this.log().multiply(x).exp();",
      "info" : "ReturnStatement[26542-26578]:ReturnStatement[26512-26548]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26840-26846]:Modifier[26810-26816]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[26847-26854]:SimpleType[26817-26824]"
    }, {
      "left" : "pow",
      "right" : "pow",
      "info" : "SimpleName[26855-26858]:SimpleName[26825-26828]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[26859-26867]:SingleVariableDeclaration[26829-26837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26869-26921]:Block[26839-26891]"
    }, {
      "left" : "return this.log().multiply(x).exp();",
      "right" : "return this.log().multiply(x).exp();",
      "info" : "ReturnStatement[26879-26915]:ReturnStatement[26849-26885]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28015-28021]:Modifier[27985-27991]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[28022-28029]:SimpleType[27992-27999]"
    }, {
      "left" : "sin",
      "right" : "sin",
      "info" : "SimpleName[28030-28033]:SimpleName[28000-28003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28036-28254]:Block[28006-28224]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[28046-28092]:IfStatement[28016-28062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28057-28092]:Block[28027-28062]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[28071-28082]:ReturnStatement[28041-28052]"
    }, {
      "left" : "return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),\n                             FastMath.cos(real) * MathUtils.sinh(imaginary));",
      "right" : "return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),\n                             FastMath.cos(real) * MathUtils.sinh(imaginary));",
      "info" : "ReturnStatement[28102-28248]:ReturnStatement[28072-28218]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29372-29378]:Modifier[29342-29348]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[29379-29386]:SimpleType[29349-29356]"
    }, {
      "left" : "sinh",
      "right" : "sinh",
      "info" : "SimpleName[29387-29391]:SimpleName[29357-29361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29394-29595]:Block[29364-29565]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[29404-29450]:IfStatement[29374-29420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29415-29450]:Block[29385-29420]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[29429-29440]:ReturnStatement[29399-29410]"
    }, {
      "left" : "return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),\n            MathUtils.cosh(real) * FastMath.sin(imaginary));",
      "right" : "return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),\n            MathUtils.cosh(real) * FastMath.sin(imaginary));",
      "info" : "ReturnStatement[29460-29589]:ReturnStatement[29430-29559]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30951-30957]:Modifier[30921-30927]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[30958-30965]:SimpleType[30928-30935]"
    }, {
      "left" : "sqrt",
      "right" : "sqrt",
      "info" : "SimpleName[30966-30970]:SimpleName[30936-30940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30973-31462]:Block[30943-31432]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[30983-31029]:IfStatement[30953-30999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30994-31029]:Block[30964-30999]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[31008-31019]:ReturnStatement[30978-30989]"
    }, {
      "left" : "if (real == 0.0 && imaginary == 0.0)",
      "right" : "if (real == 0.0 && imaginary == 0.0)",
      "info" : "IfStatement[31039-31131]:IfStatement[31009-31101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31076-31131]:Block[31046-31101]"
    }, {
      "left" : "return createComplex(0.0, 0.0);",
      "right" : "return createComplex(0.0, 0.0);",
      "info" : "ReturnStatement[31090-31121]:ReturnStatement[31060-31091]"
    }, {
      "left" : "double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);",
      "right" : "double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);",
      "info" : "VariableDeclarationStatement[31141-31202]:VariableDeclarationStatement[31111-31172]"
    }, {
      "left" : "if (real >= 0.0)",
      "right" : "if (real >= 0.0)",
      "info" : "IfStatement[31211-31456]:IfStatement[31181-31426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31228-31299]:Block[31198-31269]"
    }, {
      "left" : "return createComplex(t, imaginary / (2.0 * t));",
      "right" : "return createComplex(t, imaginary / (2.0 * t));",
      "info" : "ReturnStatement[31242-31289]:ReturnStatement[31212-31259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31305-31456]:Block[31275-31426]"
    }, {
      "left" : "return createComplex(FastMath.abs(imaginary) / (2.0 * t),\n                                 MathUtils.indicator(imaginary) * t);",
      "right" : "return createComplex(FastMath.abs(imaginary) / (2.0 * t),\n                                 MathUtils.indicator(imaginary) * t);",
      "info" : "ReturnStatement[31319-31446]:ReturnStatement[31289-31416]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32134-32140]:Modifier[32104-32110]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[32141-32148]:SimpleType[32111-32118]"
    }, {
      "left" : "sqrt1z",
      "right" : "sqrt1z",
      "info" : "SimpleName[32149-32155]:SimpleName[32119-32125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32158-32242]:Block[32128-32212]"
    }, {
      "left" : "return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",
      "right" : "return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",
      "info" : "ReturnStatement[32168-32236]:ReturnStatement[32138-32206]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33416-33422]:Modifier[33386-33392]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[33423-33430]:SimpleType[33393-33400]"
    }, {
      "left" : "tan",
      "right" : "tan",
      "info" : "SimpleName[33431-33434]:SimpleName[33401-33404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33437-33766]:Block[33407-33736]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[33447-33493]:IfStatement[33417-33463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33458-33493]:Block[33428-33463]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[33472-33483]:ReturnStatement[33442-33453]"
    }, {
      "left" : "double real2 = 2.0 * real;",
      "right" : "double real2 = 2.0 * real;",
      "info" : "VariableDeclarationStatement[33503-33529]:VariableDeclarationStatement[33473-33499]"
    }, {
      "left" : "double imaginary2 = 2.0 * imaginary;",
      "right" : "double imaginary2 = 2.0 * imaginary;",
      "info" : "VariableDeclarationStatement[33538-33574]:VariableDeclarationStatement[33508-33544]"
    }, {
      "left" : "double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);",
      "right" : "double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);",
      "info" : "VariableDeclarationStatement[33583-33643]:VariableDeclarationStatement[33553-33613]"
    }, {
      "left" : "return createComplex(FastMath.sin(real2) / d,\n                             MathUtils.sinh(imaginary2) / d);",
      "right" : "return createComplex(FastMath.sin(real2) / d,\n                             MathUtils.sinh(imaginary2) / d);",
      "info" : "ReturnStatement[33653-33760]:ReturnStatement[33623-33730]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34947-34953]:Modifier[34917-34923]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[34954-34961]:SimpleType[34924-34931]"
    }, {
      "left" : "tanh",
      "right" : "tanh",
      "info" : "SimpleName[34962-34966]:SimpleName[34932-34936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34969-35298]:Block[34939-35268]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[34979-35025]:IfStatement[34949-34995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34990-35025]:Block[34960-34995]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[35004-35015]:ReturnStatement[34974-34985]"
    }, {
      "left" : "double real2 = 2.0 * real;",
      "right" : "double real2 = 2.0 * real;",
      "info" : "VariableDeclarationStatement[35035-35061]:VariableDeclarationStatement[35005-35031]"
    }, {
      "left" : "double imaginary2 = 2.0 * imaginary;",
      "right" : "double imaginary2 = 2.0 * imaginary;",
      "info" : "VariableDeclarationStatement[35070-35106]:VariableDeclarationStatement[35040-35076]"
    }, {
      "left" : "double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);",
      "right" : "double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);",
      "info" : "VariableDeclarationStatement[35115-35175]:VariableDeclarationStatement[35085-35145]"
    }, {
      "left" : "return createComplex(MathUtils.sinh(real2) / d,\n                             FastMath.sin(imaginary2) / d);",
      "right" : "return createComplex(MathUtils.sinh(real2) / d,\n                             FastMath.sin(imaginary2) / d);",
      "info" : "ReturnStatement[35185-35292]:ReturnStatement[35155-35262]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36132-36138]:Modifier[36102-36108]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[36139-36145]:PrimitiveType[36109-36115]"
    }, {
      "left" : "getArgument",
      "right" : "getArgument",
      "info" : "SimpleName[36146-36157]:SimpleName[36116-36127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36160-36225]:Block[36130-36195]"
    }, {
      "left" : "return FastMath.atan2(getImaginary(), getReal());",
      "right" : "return FastMath.atan2(getImaginary(), getReal());",
      "info" : "ReturnStatement[36170-36219]:ReturnStatement[36140-36189]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37147-37153]:Modifier[37117-37123]"
    }, {
      "left" : "List<Complex>",
      "right" : "List<Complex>",
      "info" : "ParameterizedType[37154-37167]:ParameterizedType[37124-37137]"
    }, {
      "left" : "nthRoot",
      "right" : "nthRoot",
      "info" : "SimpleName[37168-37175]:SimpleName[37138-37145]"
    }, {
      "left" : "int n",
      "right" : "int n",
      "info" : "SingleVariableDeclaration[37176-37181]:SingleVariableDeclaration[37146-37151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37183-38317]:Block[37153-38287]"
    }, {
      "left" : "if (n <= 0)",
      "right" : "if (n <= 0)",
      "info" : "IfStatement[37194-37364]:IfStatement[37164-37334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37206-37364]:Block[37176-37334]"
    }, {
      "left" : "throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,\n                                           n);",
      "right" : "throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,\n                                           n);",
      "info" : "ThrowStatement[37220-37354]:ThrowStatement[37190-37324]"
    }, {
      "left" : "final List<Complex> result = new ArrayList<Complex>();",
      "right" : "final List<Complex> result = new ArrayList<Complex>();",
      "info" : "VariableDeclarationStatement[37374-37428]:VariableDeclarationStatement[37344-37398]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[37438-37516]:IfStatement[37408-37486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37449-37516]:Block[37419-37486]"
    }, {
      "left" : "result.add(NaN);",
      "right" : "result.add(NaN);",
      "info" : "ExpressionStatement[37463-37479]:ExpressionStatement[37433-37449]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[37492-37506]:ReturnStatement[37462-37476]"
    }, {
      "left" : "if (isInfinite())",
      "right" : "if (isInfinite())",
      "info" : "IfStatement[37525-37610]:IfStatement[37495-37580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37543-37610]:Block[37513-37580]"
    }, {
      "left" : "result.add(INF);",
      "right" : "result.add(INF);",
      "info" : "ExpressionStatement[37557-37573]:ExpressionStatement[37527-37543]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[37586-37600]:ReturnStatement[37556-37570]"
    }, {
      "left" : "final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);",
      "right" : "final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);",
      "info" : "VariableDeclarationStatement[37695-37752]:VariableDeclarationStatement[37665-37722]"
    }, {
      "left" : "final double nthPhi = getArgument() / n;",
      "right" : "final double nthPhi = getArgument() / n;",
      "info" : "VariableDeclarationStatement[37832-37872]:VariableDeclarationStatement[37802-37842]"
    }, {
      "left" : "final double slice = 2 * FastMath.PI / n;",
      "right" : "final double slice = 2 * FastMath.PI / n;",
      "info" : "VariableDeclarationStatement[37881-37922]:VariableDeclarationStatement[37851-37892]"
    }, {
      "left" : "double innerPart = nthPhi;",
      "right" : "double innerPart = nthPhi;",
      "info" : "VariableDeclarationStatement[37931-37957]:VariableDeclarationStatement[37901-37927]"
    }, {
      "left" : "for (int k = 0; k < n ; k++)",
      "right" : "for (int k = 0; k < n ; k++)",
      "info" : "ForStatement[37966-38287]:ForStatement[37936-38257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37995-38287]:Block[37965-38257]"
    }, {
      "left" : "final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);",
      "right" : "final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);",
      "info" : "VariableDeclarationStatement[38035-38099]:VariableDeclarationStatement[38005-38069]"
    }, {
      "left" : "final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);",
      "right" : "final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);",
      "info" : "VariableDeclarationStatement[38112-38181]:VariableDeclarationStatement[38082-38151]"
    }, {
      "left" : "result.add(createComplex(realPart, imaginaryPart));",
      "right" : "result.add(createComplex(realPart, imaginaryPart));",
      "info" : "ExpressionStatement[38194-38245]:ExpressionStatement[38164-38215]"
    }, {
      "left" : "innerPart += slice;",
      "right" : "innerPart += slice;",
      "info" : "ExpressionStatement[38258-38277]:ExpressionStatement[38228-38247]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[38297-38311]:ReturnStatement[38267-38281]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[38592-38601]:Modifier[38562-38571]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[38602-38609]:SimpleType[38572-38579]"
    }, {
      "left" : "createComplex",
      "right" : "createComplex",
      "info" : "SimpleName[38610-38623]:SimpleName[38580-38593]"
    }, {
      "left" : "double realPart",
      "right" : "double realPart",
      "info" : "SingleVariableDeclaration[38624-38639]:SingleVariableDeclaration[38594-38609]"
    }, {
      "left" : "double imaginaryPart",
      "right" : "double imaginaryPart",
      "info" : "SingleVariableDeclaration[38677-38697]:SingleVariableDeclaration[38647-38667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38699-38759]:Block[38669-38729]"
    }, {
      "left" : "return new Complex(realPart, imaginaryPart);",
      "right" : "return new Complex(realPart, imaginaryPart);",
      "info" : "ReturnStatement[38709-38753]:ReturnStatement[38679-38723]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38968-38974]:Modifier[38938-38944]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38975-38981]:Modifier[38945-38951]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[38982-38989]:SimpleType[38952-38959]"
    }, {
      "left" : "valueOf",
      "right" : "valueOf",
      "info" : "SimpleName[38990-38997]:SimpleName[38960-38967]"
    }, {
      "left" : "double realPart",
      "right" : "double realPart",
      "info" : "SingleVariableDeclaration[38998-39013]:SingleVariableDeclaration[38968-38983]"
    }, {
      "left" : "double imaginaryPart",
      "right" : "double imaginaryPart",
      "info" : "SingleVariableDeclaration[39049-39069]:SingleVariableDeclaration[39019-39039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39071-39246]:Block[39041-39216]"
    }, {
      "left" : "if (Double.isNaN(realPart) ||\n            Double.isNaN(imaginaryPart))",
      "right" : "if (Double.isNaN(realPart) ||\n            Double.isNaN(imaginaryPart))",
      "info" : "IfStatement[39081-39187]:IfStatement[39051-39157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39152-39187]:Block[39122-39157]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[39166-39177]:ReturnStatement[39136-39147]"
    }, {
      "left" : "return new Complex(realPart, imaginaryPart);",
      "right" : "return new Complex(realPart, imaginaryPart);",
      "info" : "ReturnStatement[39196-39240]:ReturnStatement[39166-39210]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39401-39407]:Modifier[39371-39377]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39408-39414]:Modifier[39378-39384]"
    }, {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "SimpleType[39415-39422]:SimpleType[39385-39392]"
    }, {
      "left" : "valueOf",
      "right" : "valueOf",
      "info" : "SimpleName[39423-39430]:SimpleName[39393-39400]"
    }, {
      "left" : "double realPart",
      "right" : "double realPart",
      "info" : "SingleVariableDeclaration[39431-39446]:SingleVariableDeclaration[39401-39416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39448-39565]:Block[39418-39535]"
    }, {
      "left" : "if (Double.isNaN(realPart))",
      "right" : "if (Double.isNaN(realPart))",
      "info" : "IfStatement[39458-39521]:IfStatement[39428-39491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39486-39521]:Block[39456-39491]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[39500-39511]:ReturnStatement[39470-39481]"
    }, {
      "left" : "return new Complex(realPart);",
      "right" : "return new Complex(realPart);",
      "info" : "ReturnStatement[39530-39559]:ReturnStatement[39500-39529]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[39837-39846]:Modifier[39807-39816]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[39847-39852]:Modifier[39817-39822]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[39853-39859]:SimpleType[39823-39829]"
    }, {
      "left" : "readResolve",
      "right" : "readResolve",
      "info" : "SimpleName[39860-39871]:SimpleName[39830-39841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39874-39928]:Block[39844-39898]"
    }, {
      "left" : "return createComplex(real, imaginary);",
      "right" : "return createComplex(real, imaginary);",
      "info" : "ReturnStatement[39884-39922]:ReturnStatement[39854-39892]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39959-39965]:Modifier[39929-39935]"
    }, {
      "left" : "ComplexField",
      "right" : "ComplexField",
      "info" : "SimpleType[39966-39978]:SimpleType[39936-39948]"
    }, {
      "left" : "getField",
      "right" : "getField",
      "info" : "SimpleName[39979-39987]:SimpleName[39949-39957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39990-40040]:Block[39960-40010]"
    }, {
      "left" : "return ComplexField.getInstance();",
      "right" : "return ComplexField.getInstance();",
      "info" : "ReturnStatement[40000-40034]:ReturnStatement[39970-40004]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[40071-40080]:MarkerAnnotation[40041-40050]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40085-40091]:Modifier[40055-40061]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[40092-40098]:SimpleType[40062-40068]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[40099-40107]:SimpleName[40069-40077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40110-40169]:Block[40080-40139]"
    }, {
      "left" : "return \"(\" + real + \", \" + imaginary + \")\";",
      "right" : "return \"(\" + real + \", \" + imaginary + \")\";",
      "info" : "ReturnStatement[40120-40163]:ReturnStatement[40090-40133]"
    } ]
  },
  "interFileMappings" : { }
}