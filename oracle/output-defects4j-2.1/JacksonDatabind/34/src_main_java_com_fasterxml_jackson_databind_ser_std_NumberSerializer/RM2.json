{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NumberSerializer",
      "right" : "NumberSerializer",
      "info" : "TypeDeclaration[452-3222]:TypeDeclaration[452-3222]"
    }, {
      "left" : "public final static NumberSerializer instance = new NumberSerializer(Number.class);",
      "right" : "public final static NumberSerializer instance = new NumberSerializer(Number.class);",
      "info" : "FieldDeclaration[759-935]:FieldDeclaration[759-935]"
    }, {
      "left" : "protected final boolean _isInt;",
      "right" : "protected final boolean _isInt;",
      "info" : "FieldDeclaration[941-972]:FieldDeclaration[941-972]"
    }, {
      "left" : "public NumberSerializer(Class<? extends Number> rawType)",
      "right" : "public NumberSerializer(Class<? extends Number> rawType)",
      "info" : "MethodDeclaration[978-1236]:MethodDeclaration[978-1236]"
    }, {
      "left" : "public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException",
      "right" : "public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException",
      "info" : "MethodDeclaration[1242-2411]:MethodDeclaration[1242-2411]"
    }, {
      "left" : "public JsonNode getSchema(SerializerProvider provider, Type typeHint)",
      "right" : "public JsonNode getSchema(SerializerProvider provider, Type typeHint)",
      "info" : "MethodDeclaration[2417-2578]:MethodDeclaration[2417-2578]"
    }, {
      "left" : "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
      "right" : "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
      "info" : "MethodDeclaration[2584-3220]:MethodDeclaration[2584-3220]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1069-1236]:Block[1069-1236]"
    }, {
      "left" : "super(rawType, false);",
      "right" : "super(rawType, false);",
      "info" : "SuperConstructorInvocation[1079-1101]:SuperConstructorInvocation[1079-1101]"
    }, {
      "left" : "_isInt = (rawType == BigInteger.class);",
      "right" : "_isInt = (rawType == BigInteger.class);",
      "info" : "ExpressionStatement[1191-1230]:ExpressionStatement[1191-1230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1361-2411]:Block[1361-2411]"
    }, {
      "left" : "if (value instanceof BigDecimal)",
      "right" : "if (value instanceof BigDecimal)",
      "info" : "IfStatement[1425-2405]:IfStatement[1425-2405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1458-1516]:Block[1458-1516]"
    }, {
      "left" : "g.writeNumber((BigDecimal) value);",
      "right" : "g.writeNumber((BigDecimal) value);",
      "info" : "ExpressionStatement[1472-1506]:ExpressionStatement[1472-1506]"
    }, {
      "left" : "if (value instanceof BigInteger)",
      "right" : "if (value instanceof BigInteger)",
      "info" : "IfStatement[1522-2405]:IfStatement[1522-2405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1555-1738]:Block[1555-1738]"
    }, {
      "left" : "g.writeNumber((BigInteger) value);",
      "right" : "g.writeNumber((BigInteger) value);",
      "info" : "ExpressionStatement[1569-1603]:ExpressionStatement[1569-1603]"
    }, {
      "left" : "if (value instanceof Integer)",
      "right" : "if (value instanceof Integer)",
      "info" : "IfStatement[1744-2405]:IfStatement[1744-2405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1774-1830]:Block[1774-1830]"
    }, {
      "left" : "g.writeNumber(value.intValue());",
      "right" : "g.writeNumber(value.intValue());",
      "info" : "ExpressionStatement[1788-1820]:ExpressionStatement[1788-1820]"
    }, {
      "left" : "if (value instanceof Long)",
      "right" : "if (value instanceof Long)",
      "info" : "IfStatement[1836-2405]:IfStatement[1836-2405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1863-1920]:Block[1863-1920]"
    }, {
      "left" : "g.writeNumber(value.longValue());",
      "right" : "g.writeNumber(value.longValue());",
      "info" : "ExpressionStatement[1877-1910]:ExpressionStatement[1877-1910]"
    }, {
      "left" : "if (value instanceof Double)",
      "right" : "if (value instanceof Double)",
      "info" : "IfStatement[1926-2405]:IfStatement[1926-2405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1955-2014]:Block[1955-2014]"
    }, {
      "left" : "g.writeNumber(value.doubleValue());",
      "right" : "g.writeNumber(value.doubleValue());",
      "info" : "ExpressionStatement[1969-2004]:ExpressionStatement[1969-2004]"
    }, {
      "left" : "if (value instanceof Float)",
      "right" : "if (value instanceof Float)",
      "info" : "IfStatement[2020-2405]:IfStatement[2020-2405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2048-2106]:Block[2048-2106]"
    }, {
      "left" : "g.writeNumber(value.floatValue());",
      "right" : "g.writeNumber(value.floatValue());",
      "info" : "ExpressionStatement[2062-2096]:ExpressionStatement[2062-2096]"
    }, {
      "left" : "if ((value instanceof Byte) || (value instanceof Short))",
      "right" : "if ((value instanceof Byte) || (value instanceof Short))",
      "info" : "IfStatement[2112-2405]:IfStatement[2112-2405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2169-2271]:Block[2169-2271]"
    }, {
      "left" : "g.writeNumber(value.intValue());",
      "right" : "g.writeNumber(value.intValue());",
      "info" : "ExpressionStatement[2183-2215]:ExpressionStatement[2183-2215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2277-2405]:Block[2277-2405]"
    }, {
      "left" : "g.writeNumber(value.toString());",
      "right" : "g.writeNumber(value.toString());",
      "info" : "ExpressionStatement[2363-2395]:ExpressionStatement[2363-2395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2501-2578]:Block[2501-2578]"
    }, {
      "left" : "return createSchemaNode(_isInt ? \"integer\" : \"number\", true);",
      "right" : "return createSchemaNode(_isInt ? \"integer\" : \"number\", true);",
      "info" : "ReturnStatement[2511-2572]:ReturnStatement[2511-2572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2719-3220]:Block[2719-3220]"
    }, {
      "left" : "if (_isInt)",
      "right" : "if (_isInt)",
      "info" : "IfStatement[2729-3214]:IfStatement[2729-3214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2741-2834]:Block[2741-2834]"
    }, {
      "left" : "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
      "right" : "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
      "info" : "ExpressionStatement[2755-2824]:ExpressionStatement[2755-2824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2840-3214]:Block[2840-3214]"
    }, {
      "left" : "Class<?> h = handledType();",
      "right" : "Class<?> h = handledType();",
      "info" : "VariableDeclarationStatement[2854-2881]:VariableDeclarationStatement[2854-2881]"
    }, {
      "left" : "if (h == BigDecimal.class)",
      "right" : "if (h == BigDecimal.class)",
      "info" : "IfStatement[2894-3204]:IfStatement[2894-3204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2921-3024]:Block[2921-3024]"
    }, {
      "left" : "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
      "right" : "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);",
      "info" : "ExpressionStatement[2939-3010]:ExpressionStatement[2939-3010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3030-3204]:Block[3030-3204]"
    }, {
      "left" : "visitor.expectNumberFormat(typeHint);",
      "right" : "visitor.expectNumberFormat(typeHint);",
      "info" : "ExpressionStatement[3153-3190]:ExpressionStatement[3153-3190]"
    } ]
  },
  "interFileMappings" : { }
}