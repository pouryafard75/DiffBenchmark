{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CharSequenceTranslator",
      "right" : "CharSequenceTranslator",
      "info" : "TypeDeclaration[961-5127]:TypeDeclaration[961-4947]"
    }, {
      "left" : "public abstract int translate(CharSequence input, int index, Writer out) throws IOException;",
      "right" : "public abstract int translate(CharSequence input, int index, Writer out) throws IOException;",
      "info" : "MethodDeclaration[1249-2010]:MethodDeclaration[1249-2010]"
    }, {
      "left" : "public final String translate(CharSequence input)",
      "right" : "public final String translate(CharSequence input)",
      "info" : "MethodDeclaration[2016-2614]:MethodDeclaration[2016-2614]"
    }, {
      "left" : "public final void translate(CharSequence input, Writer out) throws IOException",
      "right" : "public final void translate(CharSequence input, Writer out) throws IOException",
      "info" : "MethodDeclaration[2620-4076]:MethodDeclaration[2620-3896]"
    }, {
      "left" : "public final CharSequenceTranslator with(CharSequenceTranslator... translators)",
      "right" : "public final CharSequenceTranslator with(CharSequenceTranslator... translators)",
      "info" : "MethodDeclaration[4082-4762]:MethodDeclaration[3902-4582]"
    }, {
      "left" : "public static String hex(int codepoint)",
      "right" : "public static String hex(int codepoint)",
      "info" : "MethodDeclaration[4768-5124]:MethodDeclaration[4588-4944]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2213-2614]:Block[2213-2614]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[2223-2278]:IfStatement[2223-2278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2242-2278]:Block[2242-2278]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[2256-2268]:ReturnStatement[2256-2268]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2287-2608]:TryStatement[2287-2608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2291-2450]:Block[2291-2450]"
    }, {
      "left" : "StringWriter writer = new StringWriter(input.length() * 2);",
      "right" : "StringWriter writer = new StringWriter(input.length() * 2);",
      "info" : "VariableDeclarationStatement[2305-2364]:VariableDeclarationStatement[2305-2364]"
    }, {
      "left" : "translate(input, writer);",
      "right" : "translate(input, writer);",
      "info" : "ExpressionStatement[2377-2402]:ExpressionStatement[2377-2402]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[2415-2440]:ReturnStatement[2415-2440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2475-2608]:Block[2475-2608]"
    }, {
      "left" : "throw new RuntimeException(ioe);",
      "right" : "throw new RuntimeException(ioe);",
      "info" : "ThrowStatement[2566-2598]:ThrowStatement[2566-2598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3061-4076]:Block[3061-3896]"
    }, {
      "left" : "if (out == null)",
      "right" : "if (out == null)",
      "info" : "IfStatement[3071-3178]:IfStatement[3071-3178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3088-3178]:Block[3088-3178]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Writer must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Writer must not be null\");",
      "info" : "ThrowStatement[3102-3168]:ThrowStatement[3102-3168]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[3187-3237]:IfStatement[3187-3237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3206-3237]:Block[3206-3237]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3220-3227]:ReturnStatement[3220-3227]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[3246-3258]:VariableDeclarationStatement[3246-3258]"
    }, {
      "left" : "int len = Character.codePointCount(input, 0, input.length());",
      "right" : "int len = input.length();",
      "info" : "VariableDeclarationStatement[3267-3328]:VariableDeclarationStatement[3267-3292]"
    }, {
      "left" : "while (pos < len)",
      "right" : "while (pos < len)",
      "info" : "WhileStatement[3337-4070]:WhileStatement[3301-3890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3355-4070]:Block[3319-3890]"
    }, {
      "left" : "int consumed = translate(input, pos, out);",
      "right" : "int consumed = translate(input, pos, out);",
      "info" : "VariableDeclarationStatement[3369-3411]:VariableDeclarationStatement[3333-3375]"
    }, {
      "left" : "if (consumed == 0)",
      "right" : "if (consumed == 0)",
      "info" : "IfStatement[3424-4041]:IfStatement[3388-3591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3443-3569]:Block[3407-3591]"
    }, {
      "left" : "char[] c = Character.toChars(Character.codePointAt(input, pos));",
      "right" : "char[] c = Character.toChars(Character.codePointAt(input, pos));",
      "info" : "VariableDeclarationStatement[3461-3525]:VariableDeclarationStatement[3425-3489]"
    }, {
      "left" : "out.write(c);",
      "right" : "out.write(c);",
      "info" : "ExpressionStatement[3542-3555]:ExpressionStatement[3506-3519]"
    }, {
      "left" : "for (int pt = 0; pt < consumed; pt++)",
      "right" : "for (int pt = 0; pt < consumed; pt++)",
      "info" : "ForStatement[3745-4004]:ForStatement[3748-3880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3824-3926]:Block[3786-3880]"
    }, {
      "left" : "pos += Character.charCount(Character.codePointAt(input, pos));",
      "right" : "pos += Character.charCount(Character.codePointAt(input, pos));",
      "info" : "ExpressionStatement[3842-3904]:ExpressionStatement[3804-3866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4506-4762]:Block[4326-4582]"
    }, {
      "left" : "CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1];",
      "right" : "CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1];",
      "info" : "VariableDeclarationStatement[4516-4603]:VariableDeclarationStatement[4336-4423]"
    }, {
      "left" : "newArray[0] = this;",
      "right" : "newArray[0] = this;",
      "info" : "ExpressionStatement[4612-4631]:ExpressionStatement[4432-4451]"
    }, {
      "left" : "System.arraycopy(translators, 0, newArray, 1, translators.length);",
      "right" : "System.arraycopy(translators, 0, newArray, 1, translators.length);",
      "info" : "ExpressionStatement[4640-4706]:ExpressionStatement[4460-4526]"
    }, {
      "left" : "return new AggregateTranslator(newArray);",
      "right" : "return new AggregateTranslator(newArray);",
      "info" : "ReturnStatement[4715-4756]:ReturnStatement[4535-4576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5042-5124]:Block[4862-4944]"
    }, {
      "left" : "return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH);",
      "right" : "return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH);",
      "info" : "ReturnStatement[5052-5118]:ReturnStatement[4872-4938]"
    } ]
  },
  "interFileMappings" : { }
}