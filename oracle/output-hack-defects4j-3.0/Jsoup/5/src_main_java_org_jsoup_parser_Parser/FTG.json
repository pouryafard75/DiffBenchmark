{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Parser",
      "right" : "Parser",
      "info" : "TypeDeclaration[119-11109]:TypeDeclaration[119-11213]"
    }, {
      "left" : "private static final String SQ = \"'\";",
      "right" : "private static final String SQ = \"'\";",
      "info" : "FieldDeclaration[329-366]:FieldDeclaration[329-366]"
    }, {
      "left" : "private static final String DQ = \"\\\"\";",
      "right" : "private static final String DQ = \"\\\"\";",
      "info" : "FieldDeclaration[371-409]:FieldDeclaration[371-409]"
    }, {
      "left" : "private static final Tag htmlTag = Tag.valueOf(\"html\");",
      "right" : "private static final Tag htmlTag = Tag.valueOf(\"html\");",
      "info" : "FieldDeclaration[415-470]:FieldDeclaration[415-470]"
    }, {
      "left" : "private static final Tag headTag = Tag.valueOf(\"head\");",
      "right" : "private static final Tag headTag = Tag.valueOf(\"head\");",
      "info" : "FieldDeclaration[475-530]:FieldDeclaration[475-530]"
    }, {
      "left" : "private static final Tag bodyTag = Tag.valueOf(\"body\");",
      "right" : "private static final Tag bodyTag = Tag.valueOf(\"body\");",
      "info" : "FieldDeclaration[535-590]:FieldDeclaration[535-590]"
    }, {
      "left" : "private static final Tag titleTag = Tag.valueOf(\"title\");",
      "right" : "private static final Tag titleTag = Tag.valueOf(\"title\");",
      "info" : "FieldDeclaration[595-652]:FieldDeclaration[595-652]"
    }, {
      "left" : "private static final Tag textareaTag = Tag.valueOf(\"textarea\");",
      "right" : "private static final Tag textareaTag = Tag.valueOf(\"textarea\");",
      "info" : "FieldDeclaration[657-720]:FieldDeclaration[657-720]"
    }, {
      "left" : "private final LinkedList<Element> stack;",
      "right" : "private final LinkedList<Element> stack;",
      "info" : "FieldDeclaration[726-766]:FieldDeclaration[726-766]"
    }, {
      "left" : "private final TokenQueue tq;",
      "right" : "private final TokenQueue tq;",
      "info" : "FieldDeclaration[771-799]:FieldDeclaration[771-799]"
    }, {
      "left" : "private final Document doc;",
      "right" : "private final Document doc;",
      "info" : "FieldDeclaration[804-831]:FieldDeclaration[804-831]"
    }, {
      "left" : "private String baseUri;",
      "right" : "private String baseUri;",
      "info" : "FieldDeclaration[836-859]:FieldDeclaration[836-859]"
    }, {
      "left" : "private boolean relaxed = false;",
      "right" : "private boolean relaxed = false;",
      "info" : "FieldDeclaration[864-896]:FieldDeclaration[864-896]"
    }, {
      "left" : "private Parser(String html, String baseUri, boolean isBodyFragment)",
      "right" : "private Parser(String html, String baseUri, boolean isBodyFragment)",
      "info" : "MethodDeclaration[902-1366]:MethodDeclaration[902-1366]"
    }, {
      "left" : "public static Document parse(String html, String baseUri)",
      "right" : "public static Document parse(String html, String baseUri)",
      "info" : "MethodDeclaration[1372-1737]:MethodDeclaration[1372-1737]"
    }, {
      "left" : "public static Document parseBodyFragment(String bodyHtml, String baseUri)",
      "right" : "public static Document parseBodyFragment(String bodyHtml, String baseUri)",
      "info" : "MethodDeclaration[1743-2205]:MethodDeclaration[1743-2205]"
    }, {
      "left" : "public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",
      "right" : "public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",
      "info" : "MethodDeclaration[2211-2841]:MethodDeclaration[2211-2841]"
    }, {
      "left" : "private Document parse()",
      "right" : "private Document parse()",
      "info" : "MethodDeclaration[2847-3428]:MethodDeclaration[2847-3428]"
    }, {
      "left" : "private void parseComment()",
      "right" : "private void parseComment()",
      "info" : "MethodDeclaration[3434-3732]:MethodDeclaration[3434-3732]"
    }, {
      "left" : "private void parseXmlDecl()",
      "right" : "private void parseXmlDecl()",
      "info" : "MethodDeclaration[3738-4087]:MethodDeclaration[3738-4087]"
    }, {
      "left" : "private void parseEndTag()",
      "right" : "private void parseEndTag()",
      "info" : "MethodDeclaration[4093-4350]:MethodDeclaration[4093-4350]"
    }, {
      "left" : "private void parseStartTag()",
      "right" : "private void parseStartTag()",
      "info" : "MethodDeclaration[4356-6519]:MethodDeclaration[4356-6519]"
    }, {
      "left" : "private Attribute parseAttribute()",
      "right" : "private Attribute parseAttribute()",
      "info" : "MethodDeclaration[6525-7574]:MethodDeclaration[6525-7678]"
    }, {
      "left" : "private void parseTextNode()",
      "right" : "private void parseTextNode()",
      "info" : "MethodDeclaration[7580-8043]:MethodDeclaration[7684-8147]"
    }, {
      "left" : "private void parseCdata()",
      "right" : "private void parseCdata()",
      "info" : "MethodDeclaration[8049-8288]:MethodDeclaration[8153-8392]"
    }, {
      "left" : "private Element addChildToParent(Element child, boolean isEmptyElement)",
      "right" : "private Element addChildToParent(Element child, boolean isEmptyElement)",
      "info" : "MethodDeclaration[8294-9394]:MethodDeclaration[8398-9498]"
    }, {
      "left" : "private boolean stackHasValidParent(Tag childTag)",
      "right" : "private boolean stackHasValidParent(Tag childTag)",
      "info" : "MethodDeclaration[9400-10003]:MethodDeclaration[9504-10107]"
    }, {
      "left" : "private Element popStackToSuitableContainer(Tag tag)",
      "right" : "private Element popStackToSuitableContainer(Tag tag)",
      "info" : "MethodDeclaration[10009-10265]:MethodDeclaration[10113-10369]"
    }, {
      "left" : "private Element popStackToClose(Tag tag)",
      "right" : "private Element popStackToClose(Tag tag)",
      "info" : "MethodDeclaration[10271-11039]:MethodDeclaration[10375-11143]"
    }, {
      "left" : "private Element last()",
      "right" : "private Element last()",
      "info" : "MethodDeclaration[11045-11107]:MethodDeclaration[11149-11211]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[902-909]:Modifier[902-909]"
    }, {
      "left" : "Parser",
      "right" : "Parser",
      "info" : "SimpleName[910-916]:SimpleName[910-916]"
    }, {
      "left" : "String html",
      "right" : "String html",
      "info" : "SingleVariableDeclaration[917-928]:SingleVariableDeclaration[917-928]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[930-944]:SingleVariableDeclaration[930-944]"
    }, {
      "left" : "boolean isBodyFragment",
      "right" : "boolean isBodyFragment",
      "info" : "SingleVariableDeclaration[946-968]:SingleVariableDeclaration[946-968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[970-1366]:Block[970-1366]"
    }, {
      "left" : "Validate.notNull(html);",
      "right" : "Validate.notNull(html);",
      "info" : "ExpressionStatement[980-1003]:ExpressionStatement[980-1003]"
    }, {
      "left" : "Validate.notNull(baseUri);",
      "right" : "Validate.notNull(baseUri);",
      "info" : "ExpressionStatement[1012-1038]:ExpressionStatement[1012-1038]"
    }, {
      "left" : "stack = new LinkedList<Element>();",
      "right" : "stack = new LinkedList<Element>();",
      "info" : "ExpressionStatement[1048-1082]:ExpressionStatement[1048-1082]"
    }, {
      "left" : "tq = new TokenQueue(html);",
      "right" : "tq = new TokenQueue(html);",
      "info" : "ExpressionStatement[1091-1117]:ExpressionStatement[1091-1117]"
    }, {
      "left" : "this.baseUri = baseUri;",
      "right" : "this.baseUri = baseUri;",
      "info" : "ExpressionStatement[1126-1149]:ExpressionStatement[1126-1149]"
    }, {
      "left" : "if (isBodyFragment)",
      "right" : "if (isBodyFragment)",
      "info" : "IfStatement[1159-1360]:IfStatement[1159-1360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1179-1274]:Block[1179-1274]"
    }, {
      "left" : "doc = Document.createShell(baseUri);",
      "right" : "doc = Document.createShell(baseUri);",
      "info" : "ExpressionStatement[1193-1229]:ExpressionStatement[1193-1229]"
    }, {
      "left" : "stack.add(doc.body());",
      "right" : "stack.add(doc.body());",
      "info" : "ExpressionStatement[1242-1264]:ExpressionStatement[1242-1264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1280-1360]:Block[1280-1360]"
    }, {
      "left" : "doc = new Document(baseUri);",
      "right" : "doc = new Document(baseUri);",
      "info" : "ExpressionStatement[1294-1322]:ExpressionStatement[1294-1322]"
    }, {
      "left" : "stack.add(doc);",
      "right" : "stack.add(doc);",
      "info" : "ExpressionStatement[1335-1350]:ExpressionStatement[1335-1350]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1583-1589]:Modifier[1583-1589]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1590-1596]:Modifier[1590-1596]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[1597-1605]:SimpleType[1597-1605]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[1606-1611]:SimpleName[1606-1611]"
    }, {
      "left" : "String html",
      "right" : "String html",
      "info" : "SingleVariableDeclaration[1612-1623]:SingleVariableDeclaration[1612-1623]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[1625-1639]:SingleVariableDeclaration[1625-1639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1641-1737]:Block[1641-1737]"
    }, {
      "left" : "Parser parser = new Parser(html, baseUri, false);",
      "right" : "Parser parser = new Parser(html, baseUri, false);",
      "info" : "VariableDeclarationStatement[1651-1700]:VariableDeclarationStatement[1651-1700]"
    }, {
      "left" : "return parser.parse();",
      "right" : "return parser.parse();",
      "info" : "ReturnStatement[1709-1731]:ReturnStatement[1709-1731]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2032-2038]:Modifier[2032-2038]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2039-2045]:Modifier[2039-2045]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[2046-2054]:SimpleType[2046-2054]"
    }, {
      "left" : "parseBodyFragment",
      "right" : "parseBodyFragment",
      "info" : "SimpleName[2055-2072]:SimpleName[2055-2072]"
    }, {
      "left" : "String bodyHtml",
      "right" : "String bodyHtml",
      "info" : "SingleVariableDeclaration[2073-2088]:SingleVariableDeclaration[2073-2088]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[2090-2104]:SingleVariableDeclaration[2090-2104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2106-2205]:Block[2106-2205]"
    }, {
      "left" : "Parser parser = new Parser(bodyHtml, baseUri, true);",
      "right" : "Parser parser = new Parser(bodyHtml, baseUri, true);",
      "info" : "VariableDeclarationStatement[2116-2168]:VariableDeclarationStatement[2116-2168]"
    }, {
      "left" : "return parser.parse();",
      "right" : "return parser.parse();",
      "info" : "ReturnStatement[2177-2199]:ReturnStatement[2177-2199]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2630-2636]:Modifier[2630-2636]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2637-2643]:Modifier[2637-2643]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[2644-2652]:SimpleType[2644-2652]"
    }, {
      "left" : "parseBodyFragmentRelaxed",
      "right" : "parseBodyFragmentRelaxed",
      "info" : "SimpleName[2653-2677]:SimpleName[2653-2677]"
    }, {
      "left" : "String bodyHtml",
      "right" : "String bodyHtml",
      "info" : "SingleVariableDeclaration[2678-2693]:SingleVariableDeclaration[2678-2693]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[2695-2709]:SingleVariableDeclaration[2695-2709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2711-2841]:Block[2711-2841]"
    }, {
      "left" : "Parser parser = new Parser(bodyHtml, baseUri, true);",
      "right" : "Parser parser = new Parser(bodyHtml, baseUri, true);",
      "info" : "VariableDeclarationStatement[2721-2773]:VariableDeclarationStatement[2721-2773]"
    }, {
      "left" : "parser.relaxed = true;",
      "right" : "parser.relaxed = true;",
      "info" : "ExpressionStatement[2782-2804]:ExpressionStatement[2782-2804]"
    }, {
      "left" : "return parser.parse();",
      "right" : "return parser.parse();",
      "info" : "ReturnStatement[2813-2835]:ReturnStatement[2813-2835]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2847-2854]:Modifier[2847-2854]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[2855-2863]:SimpleType[2855-2863]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[2864-2869]:SimpleName[2864-2869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2872-3428]:Block[2872-3428]"
    }, {
      "left" : "while (!tq.isEmpty())",
      "right" : "while (!tq.isEmpty())",
      "info" : "WhileStatement[2882-3390]:WhileStatement[2882-3390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2904-3390]:Block[2904-3390]"
    }, {
      "left" : "if (tq.matchesStartTag())",
      "right" : "if (tq.matchesStartTag())",
      "info" : "IfStatement[2918-3380]:IfStatement[2918-3380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2944-2992]:Block[2944-2992]"
    }, {
      "left" : "parseStartTag();",
      "right" : "parseStartTag();",
      "info" : "ExpressionStatement[2962-2978]:ExpressionStatement[2962-2978]"
    }, {
      "left" : "if (tq.matchesCS(\"</\"))",
      "right" : "if (tq.matchesCS(\"</\"))",
      "info" : "IfStatement[2998-3380]:IfStatement[2998-3380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3022-3068]:Block[3022-3068]"
    }, {
      "left" : "parseEndTag();",
      "right" : "parseEndTag();",
      "info" : "ExpressionStatement[3040-3054]:ExpressionStatement[3040-3054]"
    }, {
      "left" : "if (tq.matchesCS(\"<!--\"))",
      "right" : "if (tq.matchesCS(\"<!--\"))",
      "info" : "IfStatement[3074-3380]:IfStatement[3074-3380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3100-3147]:Block[3100-3147]"
    }, {
      "left" : "parseComment();",
      "right" : "parseComment();",
      "info" : "ExpressionStatement[3118-3133]:ExpressionStatement[3118-3133]"
    }, {
      "left" : "if (tq.matches(\"<![CDATA[\"))",
      "right" : "if (tq.matches(\"<![CDATA[\"))",
      "info" : "IfStatement[3153-3380]:IfStatement[3153-3380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3182-3227]:Block[3182-3227]"
    }, {
      "left" : "parseCdata();",
      "right" : "parseCdata();",
      "info" : "ExpressionStatement[3200-3213]:ExpressionStatement[3200-3213]"
    }, {
      "left" : "if (tq.matchesCS(\"<?\") || tq.matchesCS(\"<!\"))",
      "right" : "if (tq.matchesCS(\"<?\") || tq.matchesCS(\"<!\"))",
      "info" : "IfStatement[3233-3380]:IfStatement[3233-3380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3279-3326]:Block[3279-3326]"
    }, {
      "left" : "parseXmlDecl();",
      "right" : "parseXmlDecl();",
      "info" : "ExpressionStatement[3297-3312]:ExpressionStatement[3297-3312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3332-3380]:Block[3332-3380]"
    }, {
      "left" : "parseTextNode();",
      "right" : "parseTextNode();",
      "info" : "ExpressionStatement[3350-3366]:ExpressionStatement[3350-3366]"
    }, {
      "left" : "return doc.normalise();",
      "right" : "return doc.normalise();",
      "info" : "ReturnStatement[3399-3422]:ReturnStatement[3399-3422]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3434-3441]:Modifier[3434-3441]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3442-3446]:PrimitiveType[3442-3446]"
    }, {
      "left" : "parseComment",
      "right" : "parseComment",
      "info" : "SimpleName[3447-3459]:SimpleName[3447-3459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3462-3732]:Block[3462-3732]"
    }, {
      "left" : "tq.consume(\"<!--\");",
      "right" : "tq.consume(\"<!--\");",
      "info" : "ExpressionStatement[3472-3491]:ExpressionStatement[3472-3491]"
    }, {
      "left" : "String data = tq.chompTo(\"->\");",
      "right" : "String data = tq.chompTo(\"->\");",
      "info" : "VariableDeclarationStatement[3500-3531]:VariableDeclarationStatement[3500-3531]"
    }, {
      "left" : "if (data.endsWith(\"-\"))",
      "right" : "if (data.endsWith(\"-\"))",
      "info" : "IfStatement[3541-3635]:IfStatement[3541-3635]"
    }, {
      "left" : "data = data.substring(0, data.length()-1);",
      "right" : "data = data.substring(0, data.length()-1);",
      "info" : "ExpressionStatement[3593-3635]:ExpressionStatement[3593-3635]"
    }, {
      "left" : "Comment comment = new Comment(data, baseUri);",
      "right" : "Comment comment = new Comment(data, baseUri);",
      "info" : "VariableDeclarationStatement[3644-3689]:VariableDeclarationStatement[3644-3689]"
    }, {
      "left" : "last().appendChild(comment);",
      "right" : "last().appendChild(comment);",
      "info" : "ExpressionStatement[3698-3726]:ExpressionStatement[3698-3726]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3738-3745]:Modifier[3738-3745]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3746-3750]:PrimitiveType[3746-3750]"
    }, {
      "left" : "parseXmlDecl",
      "right" : "parseXmlDecl",
      "info" : "SimpleName[3751-3763]:SimpleName[3751-3763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3766-4087]:Block[3766-4087]"
    }, {
      "left" : "tq.consume(\"<\");",
      "right" : "tq.consume(\"<\");",
      "info" : "ExpressionStatement[3776-3792]:ExpressionStatement[3776-3792]"
    }, {
      "left" : "Character firstChar = tq.consume();",
      "right" : "Character firstChar = tq.consume();",
      "info" : "VariableDeclarationStatement[3801-3836]:VariableDeclarationStatement[3801-3836]"
    }, {
      "left" : "boolean procInstr = firstChar.toString().equals(\"!\");",
      "right" : "boolean procInstr = firstChar.toString().equals(\"!\");",
      "info" : "VariableDeclarationStatement[3878-3931]:VariableDeclarationStatement[3878-3931]"
    }, {
      "left" : "String data = tq.chompTo(\">\");",
      "right" : "String data = tq.chompTo(\">\");",
      "info" : "VariableDeclarationStatement[3940-3970]:VariableDeclarationStatement[3940-3970]"
    }, {
      "left" : "XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);",
      "right" : "XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);",
      "info" : "VariableDeclarationStatement[3980-4047]:VariableDeclarationStatement[3980-4047]"
    }, {
      "left" : "last().appendChild(decl);",
      "right" : "last().appendChild(decl);",
      "info" : "ExpressionStatement[4056-4081]:ExpressionStatement[4056-4081]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4093-4100]:Modifier[4093-4100]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4101-4105]:PrimitiveType[4101-4105]"
    }, {
      "left" : "parseEndTag",
      "right" : "parseEndTag",
      "info" : "SimpleName[4106-4117]:SimpleName[4106-4117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4120-4350]:Block[4120-4350]"
    }, {
      "left" : "tq.consume(\"</\");",
      "right" : "tq.consume(\"</\");",
      "info" : "ExpressionStatement[4130-4147]:ExpressionStatement[4130-4147]"
    }, {
      "left" : "String tagName = tq.consumeTagName();",
      "right" : "String tagName = tq.consumeTagName();",
      "info" : "VariableDeclarationStatement[4156-4193]:VariableDeclarationStatement[4156-4193]"
    }, {
      "left" : "tq.chompTo(\">\");",
      "right" : "tq.chompTo(\">\");",
      "info" : "ExpressionStatement[4202-4218]:ExpressionStatement[4202-4218]"
    }, {
      "left" : "if (tagName.length() != 0)",
      "right" : "if (tagName.length() != 0)",
      "info" : "IfStatement[4228-4344]:IfStatement[4228-4344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4255-4344]:Block[4255-4344]"
    }, {
      "left" : "Tag tag = Tag.valueOf(tagName);",
      "right" : "Tag tag = Tag.valueOf(tagName);",
      "info" : "VariableDeclarationStatement[4269-4300]:VariableDeclarationStatement[4269-4300]"
    }, {
      "left" : "popStackToClose(tag);",
      "right" : "popStackToClose(tag);",
      "info" : "ExpressionStatement[4313-4334]:ExpressionStatement[4313-4334]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4356-4363]:Modifier[4356-4363]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4364-4368]:PrimitiveType[4364-4368]"
    }, {
      "left" : "parseStartTag",
      "right" : "parseStartTag",
      "info" : "SimpleName[4369-4382]:SimpleName[4369-4382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4385-6519]:Block[4385-6519]"
    }, {
      "left" : "tq.consume(\"<\");",
      "right" : "tq.consume(\"<\");",
      "info" : "ExpressionStatement[4395-4411]:ExpressionStatement[4395-4411]"
    }, {
      "left" : "String tagName = tq.consumeTagName();",
      "right" : "String tagName = tq.consumeTagName();",
      "info" : "VariableDeclarationStatement[4420-4457]:VariableDeclarationStatement[4420-4457]"
    }, {
      "left" : "Validate.notEmpty(tagName, \"Unexpectedly empty tagname. (This should not occur, please report!)\");",
      "right" : "Validate.notEmpty(tagName, \"Unexpectedly empty tagname. (This should not occur, please report!)\");",
      "info" : "ExpressionStatement[4466-4564]:ExpressionStatement[4466-4564]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[4582-4605]:ExpressionStatement[4582-4605]"
    }, {
      "left" : "Attributes attributes = new Attributes();",
      "right" : "Attributes attributes = new Attributes();",
      "info" : "VariableDeclarationStatement[4614-4655]:VariableDeclarationStatement[4614-4655]"
    }, {
      "left" : "while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty())",
      "right" : "while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty())",
      "info" : "WhileStatement[4664-4861]:WhileStatement[4664-4861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4720-4861]:Block[4720-4861]"
    }, {
      "left" : "Attribute attribute = parseAttribute();",
      "right" : "Attribute attribute = parseAttribute();",
      "info" : "VariableDeclarationStatement[4734-4773]:VariableDeclarationStatement[4734-4773]"
    }, {
      "left" : "if (attribute != null)",
      "right" : "if (attribute != null)",
      "info" : "IfStatement[4786-4851]:IfStatement[4786-4851]"
    }, {
      "left" : "attributes.put(attribute);",
      "right" : "attributes.put(attribute);",
      "info" : "ExpressionStatement[4825-4851]:ExpressionStatement[4825-4851]"
    }, {
      "left" : "Tag tag = Tag.valueOf(tagName);",
      "right" : "Tag tag = Tag.valueOf(tagName);",
      "info" : "VariableDeclarationStatement[4871-4902]:VariableDeclarationStatement[4871-4902]"
    }, {
      "left" : "Element child = new Element(tag, baseUri, attributes);",
      "right" : "Element child = new Element(tag, baseUri, attributes);",
      "info" : "VariableDeclarationStatement[4911-4965]:VariableDeclarationStatement[4911-4965]"
    }, {
      "left" : "boolean isEmptyElement = tag.isEmpty();",
      "right" : "boolean isEmptyElement = tag.isEmpty();",
      "info" : "VariableDeclarationStatement[4975-5014]:VariableDeclarationStatement[4975-5014]"
    }, {
      "left" : "if (tq.matchChomp(\"/>\"))",
      "right" : "if (tq.matchChomp(\"/>\"))",
      "info" : "IfStatement[5090-5429]:IfStatement[5090-5429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5115-5380]:Block[5115-5380]"
    }, {
      "left" : "isEmptyElement = true;",
      "right" : "isEmptyElement = true;",
      "info" : "ExpressionStatement[5159-5181]:ExpressionStatement[5159-5181]"
    }, {
      "left" : "if (!tag.isKnownTag())",
      "right" : "if (!tag.isKnownTag())",
      "info" : "IfStatement[5194-5370]:IfStatement[5194-5370]"
    }, {
      "left" : "tag.setSelfClosing();",
      "right" : "tag.setSelfClosing();",
      "info" : "ExpressionStatement[5349-5370]:ExpressionStatement[5349-5370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5386-5429]:Block[5386-5429]"
    }, {
      "left" : "tq.matchChomp(\">\");",
      "right" : "tq.matchChomp(\">\");",
      "info" : "ExpressionStatement[5400-5419]:ExpressionStatement[5400-5419]"
    }, {
      "left" : "addChildToParent(child, isEmptyElement);",
      "right" : "addChildToParent(child, isEmptyElement);",
      "info" : "ExpressionStatement[5438-5478]:ExpressionStatement[5438-5478]"
    }, {
      "left" : "if (tag.isData())",
      "right" : "if (tag.isData())",
      "info" : "IfStatement[5580-6148]:IfStatement[5580-6148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5598-6148]:Block[5598-6148]"
    }, {
      "left" : "String data = tq.chompToIgnoreCase(\"</\" + tagName);",
      "right" : "String data = tq.chompToIgnoreCase(\"</\" + tagName);",
      "info" : "VariableDeclarationStatement[5612-5663]:VariableDeclarationStatement[5612-5663]"
    }, {
      "left" : "tq.chompTo(\">\");",
      "right" : "tq.chompTo(\">\");",
      "info" : "ExpressionStatement[5676-5692]:ExpressionStatement[5676-5692]"
    }, {
      "left" : "popStackToClose(tag);",
      "right" : "popStackToClose(tag);",
      "info" : "ExpressionStatement[5705-5726]:ExpressionStatement[5705-5726]"
    }, {
      "left" : "Node dataNode;",
      "right" : "Node dataNode;",
      "info" : "VariableDeclarationStatement[5752-5766]:VariableDeclarationStatement[5752-5766]"
    }, {
      "left" : "if (tag.equals(titleTag) || tag.equals(textareaTag))",
      "right" : "if (tag.equals(titleTag) || tag.equals(textareaTag))",
      "info" : "IfStatement[5779-6048]:IfStatement[5779-6048]"
    }, {
      "left" : "dataNode = TextNode.createFromEncoded(data, baseUri);",
      "right" : "dataNode = TextNode.createFromEncoded(data, baseUri);",
      "info" : "ExpressionStatement[5922-5975]:ExpressionStatement[5922-5975]"
    }, {
      "left" : "dataNode = new DataNode(data, baseUri);",
      "right" : "dataNode = new DataNode(data, baseUri);",
      "info" : "ExpressionStatement[6009-6048]:ExpressionStatement[6009-6048]"
    }, {
      "left" : "child.appendChild(dataNode);",
      "right" : "child.appendChild(dataNode);",
      "info" : "ExpressionStatement[6107-6135]:ExpressionStatement[6107-6135]"
    }, {
      "left" : "if (child.tagName().equals(\"base\"))",
      "right" : "if (child.tagName().equals(\"base\"))",
      "info" : "IfStatement[6202-6513]:IfStatement[6202-6513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6238-6513]:Block[6238-6513]"
    }, {
      "left" : "String href = child.absUrl(\"href\");",
      "right" : "String href = child.absUrl(\"href\");",
      "info" : "VariableDeclarationStatement[6252-6287]:VariableDeclarationStatement[6252-6287]"
    }, {
      "left" : "if (href.length() != 0)",
      "right" : "if (href.length() != 0)",
      "info" : "IfStatement[6300-6503]:IfStatement[6300-6503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6324-6503]:Block[6324-6503]"
    }, {
      "left" : "baseUri = href;",
      "right" : "baseUri = href;",
      "info" : "ExpressionStatement[6370-6385]:ExpressionStatement[6370-6385]"
    }, {
      "left" : "doc.setBaseUri(href);",
      "right" : "doc.setBaseUri(href);",
      "info" : "ExpressionStatement[6402-6423]:ExpressionStatement[6402-6423]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6525-6532]:Modifier[6525-6532]"
    }, {
      "left" : "Attribute",
      "right" : "Attribute",
      "info" : "SimpleType[6533-6542]:SimpleType[6533-6542]"
    }, {
      "left" : "parseAttribute",
      "right" : "parseAttribute",
      "info" : "SimpleName[6543-6557]:SimpleName[6543-6557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6560-7574]:Block[6560-7678]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[6570-6593]:ExpressionStatement[6570-6593]"
    }, {
      "left" : "String key = tq.consumeAttributeKey();",
      "right" : "String key = tq.consumeAttributeKey();",
      "info" : "VariableDeclarationStatement[6602-6640]:VariableDeclarationStatement[6602-6640]"
    }, {
      "left" : "String value = \"\";",
      "right" : "String value = \"\";",
      "info" : "VariableDeclarationStatement[6649-6667]:VariableDeclarationStatement[6649-6667]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[6676-6699]:ExpressionStatement[6676-6699]"
    }, {
      "left" : "if (tq.matchChomp(\"=\"))",
      "right" : "if (tq.matchChomp(\"=\"))",
      "info" : "IfStatement[6708-7384]:IfStatement[6708-7384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6732-7384]:Block[6732-7384]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[6746-6769]:ExpressionStatement[6746-6769]"
    }, {
      "left" : "if (tq.matchChomp(SQ))",
      "right" : "if (tq.matchChomp(SQ))",
      "info" : "IfStatement[6783-7338]:IfStatement[6783-7338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6806-6861]:Block[6806-6861]"
    }, {
      "left" : "value = tq.chompTo(SQ);",
      "right" : "value = tq.chompTo(SQ);",
      "info" : "ExpressionStatement[6824-6847]:ExpressionStatement[6824-6847]"
    }, {
      "left" : "if (tq.matchChomp(DQ))",
      "right" : "if (tq.matchChomp(DQ))",
      "info" : "IfStatement[6867-7338]:IfStatement[6867-7338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6890-6945]:Block[6890-6945]"
    }, {
      "left" : "value = tq.chompTo(DQ);",
      "right" : "value = tq.chompTo(DQ);",
      "info" : "ExpressionStatement[6908-6931]:ExpressionStatement[6908-6931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6951-7338]:Block[6951-7338]"
    }, {
      "left" : "StringBuilder valueAccum = new StringBuilder();",
      "right" : "StringBuilder valueAccum = new StringBuilder();",
      "info" : "VariableDeclarationStatement[6969-7016]:VariableDeclarationStatement[6969-7016]"
    }, {
      "left" : "while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty())",
      "right" : "while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty())",
      "info" : "WhileStatement[7122-7277]:WhileStatement[7122-7277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7205-7277]:Block[7205-7277]"
    }, {
      "left" : "valueAccum.append(tq.consume());",
      "right" : "valueAccum.append(tq.consume());",
      "info" : "ExpressionStatement[7227-7259]:ExpressionStatement[7227-7259]"
    }, {
      "left" : "value = valueAccum.toString();",
      "right" : "value = valueAccum.toString();",
      "info" : "ExpressionStatement[7294-7324]:ExpressionStatement[7294-7324]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[7351-7374]:ExpressionStatement[7351-7374]"
    }, {
      "left" : "if (key.length() != 0)",
      "right" : "if (key.length() != 0)",
      "info" : "IfStatement[7393-7568]:IfStatement[7393-7672]"
    }, {
      "left" : "return Attribute.createFromEncoded(key, value);",
      "right" : "return Attribute.createFromEncoded(key, value);",
      "info" : "ReturnStatement[7428-7475]:ReturnStatement[7428-7475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7489-7568]:Block[7489-7672]"
    }, {
      "left" : "tq.consume();",
      "right" : "tq.advance();",
      "info" : "ExpressionStatement[7503-7516]:ExpressionStatement[7607-7620]"
    }, {
      "left" : "consume",
      "right" : "advance",
      "info" : "SimpleName[7506-7513]:SimpleName[7610-7617]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7546-7558]:ReturnStatement[7650-7662]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7580-7587]:Modifier[7684-7691]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7588-7592]:PrimitiveType[7692-7696]"
    }, {
      "left" : "parseTextNode",
      "right" : "parseTextNode",
      "info" : "SimpleName[7593-7606]:SimpleName[7697-7710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7609-8043]:Block[7713-8147]"
    }, {
      "left" : "TextNode textNode;",
      "right" : "TextNode textNode;",
      "info" : "VariableDeclarationStatement[7619-7637]:VariableDeclarationStatement[7723-7741]"
    }, {
      "left" : "if (tq.peek().equals('<'))",
      "right" : "if (tq.peek().equals('<'))",
      "info" : "IfStatement[7756-7999]:IfStatement[7860-8103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7783-7871]:Block[7887-7975]"
    }, {
      "left" : "tq.advance();",
      "right" : "tq.advance();",
      "info" : "ExpressionStatement[7797-7810]:ExpressionStatement[7901-7914]"
    }, {
      "left" : "textNode = new TextNode(\"<\", baseUri);",
      "right" : "textNode = new TextNode(\"<\", baseUri);",
      "info" : "ExpressionStatement[7823-7861]:ExpressionStatement[7927-7965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7877-7999]:Block[7981-8103]"
    }, {
      "left" : "String text = tq.consumeTo(\"<\");",
      "right" : "String text = tq.consumeTo(\"<\");",
      "info" : "VariableDeclarationStatement[7891-7923]:VariableDeclarationStatement[7995-8027]"
    }, {
      "left" : "textNode = TextNode.createFromEncoded(text, baseUri);",
      "right" : "textNode = TextNode.createFromEncoded(text, baseUri);",
      "info" : "ExpressionStatement[7936-7989]:ExpressionStatement[8040-8093]"
    }, {
      "left" : "last().appendChild(textNode);",
      "right" : "last().appendChild(textNode);",
      "info" : "ExpressionStatement[8008-8037]:ExpressionStatement[8112-8141]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8049-8056]:Modifier[8153-8160]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8057-8061]:PrimitiveType[8161-8165]"
    }, {
      "left" : "parseCdata",
      "right" : "parseCdata",
      "info" : "SimpleName[8062-8072]:SimpleName[8166-8176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8075-8288]:Block[8179-8392]"
    }, {
      "left" : "tq.consume(\"<![CDATA[\");",
      "right" : "tq.consume(\"<![CDATA[\");",
      "info" : "ExpressionStatement[8085-8109]:ExpressionStatement[8189-8213]"
    }, {
      "left" : "String rawText = tq.chompTo(\"]]>\");",
      "right" : "String rawText = tq.chompTo(\"]]>\");",
      "info" : "VariableDeclarationStatement[8118-8153]:VariableDeclarationStatement[8222-8257]"
    }, {
      "left" : "TextNode textNode = new TextNode(rawText, baseUri);",
      "right" : "TextNode textNode = new TextNode(rawText, baseUri);",
      "info" : "VariableDeclarationStatement[8162-8213]:VariableDeclarationStatement[8266-8317]"
    }, {
      "left" : "last().appendChild(textNode);",
      "right" : "last().appendChild(textNode);",
      "info" : "ExpressionStatement[8253-8282]:ExpressionStatement[8357-8386]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8294-8301]:Modifier[8398-8405]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[8302-8309]:SimpleType[8406-8413]"
    }, {
      "left" : "addChildToParent",
      "right" : "addChildToParent",
      "info" : "SimpleName[8310-8326]:SimpleName[8414-8430]"
    }, {
      "left" : "Element child",
      "right" : "Element child",
      "info" : "SingleVariableDeclaration[8327-8340]:SingleVariableDeclaration[8431-8444]"
    }, {
      "left" : "boolean isEmptyElement",
      "right" : "boolean isEmptyElement",
      "info" : "SingleVariableDeclaration[8342-8364]:SingleVariableDeclaration[8446-8468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8366-9394]:Block[8470-9498]"
    }, {
      "left" : "Element parent = popStackToSuitableContainer(child.tag());",
      "right" : "Element parent = popStackToSuitableContainer(child.tag());",
      "info" : "VariableDeclarationStatement[8376-8434]:VariableDeclarationStatement[8480-8538]"
    }, {
      "left" : "Tag childTag = child.tag();",
      "right" : "Tag childTag = child.tag();",
      "info" : "VariableDeclarationStatement[8443-8470]:VariableDeclarationStatement[8547-8574]"
    }, {
      "left" : "boolean validAncestor = stackHasValidParent(childTag);",
      "right" : "boolean validAncestor = stackHasValidParent(childTag);",
      "info" : "VariableDeclarationStatement[8479-8533]:VariableDeclarationStatement[8583-8637]"
    }, {
      "left" : "if (!validAncestor && !relaxed)",
      "right" : "if (!validAncestor && !relaxed)",
      "info" : "IfStatement[8543-9265]:IfStatement[8647-9369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8575-9265]:Block[8679-9369]"
    }, {
      "left" : "Tag parentTag = childTag.getImplicitParent();",
      "right" : "Tag parentTag = childTag.getImplicitParent();",
      "info" : "VariableDeclarationStatement[8645-8690]:VariableDeclarationStatement[8749-8794]"
    }, {
      "left" : "Element implicit = new Element(parentTag, baseUri);",
      "right" : "Element implicit = new Element(parentTag, baseUri);",
      "info" : "VariableDeclarationStatement[8703-8754]:VariableDeclarationStatement[8807-8858]"
    }, {
      "left" : "if (child.tag().equals(bodyTag))",
      "right" : "if (child.tag().equals(bodyTag))",
      "info" : "IfStatement[8844-8998]:IfStatement[8948-9102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8877-8998]:Block[8981-9102]"
    }, {
      "left" : "Element head = new Element(headTag, baseUri);",
      "right" : "Element head = new Element(headTag, baseUri);",
      "info" : "VariableDeclarationStatement[8895-8940]:VariableDeclarationStatement[8999-9044]"
    }, {
      "left" : "implicit.appendChild(head);",
      "right" : "implicit.appendChild(head);",
      "info" : "ExpressionStatement[8957-8984]:ExpressionStatement[9061-9088]"
    }, {
      "left" : "implicit.appendChild(child);",
      "right" : "implicit.appendChild(child);",
      "info" : "ExpressionStatement[9011-9039]:ExpressionStatement[9115-9143]"
    }, {
      "left" : "Element root = addChildToParent(implicit, false);",
      "right" : "Element root = addChildToParent(implicit, false);",
      "info" : "VariableDeclarationStatement[9110-9159]:VariableDeclarationStatement[9214-9263]"
    }, {
      "left" : "if (!isEmptyElement)",
      "right" : "if (!isEmptyElement)",
      "info" : "IfStatement[9172-9230]:IfStatement[9276-9334]"
    }, {
      "left" : "stack.addLast(child);",
      "right" : "stack.addLast(child);",
      "info" : "ExpressionStatement[9209-9230]:ExpressionStatement[9313-9334]"
    }, {
      "left" : "return root;",
      "right" : "return root;",
      "info" : "ReturnStatement[9243-9255]:ReturnStatement[9347-9359]"
    }, {
      "left" : "parent.appendChild(child);",
      "right" : "parent.appendChild(child);",
      "info" : "ExpressionStatement[9275-9301]:ExpressionStatement[9379-9405]"
    }, {
      "left" : "if (!isEmptyElement)",
      "right" : "if (!isEmptyElement)",
      "info" : "IfStatement[9311-9365]:IfStatement[9415-9469]"
    }, {
      "left" : "stack.addLast(child);",
      "right" : "stack.addLast(child);",
      "info" : "ExpressionStatement[9344-9365]:ExpressionStatement[9448-9469]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[9374-9388]:ReturnStatement[9478-9492]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9400-9407]:Modifier[9504-9511]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9408-9415]:PrimitiveType[9512-9519]"
    }, {
      "left" : "stackHasValidParent",
      "right" : "stackHasValidParent",
      "info" : "SimpleName[9416-9435]:SimpleName[9520-9539]"
    }, {
      "left" : "Tag childTag",
      "right" : "Tag childTag",
      "info" : "SingleVariableDeclaration[9436-9448]:SingleVariableDeclaration[9540-9552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9450-10003]:Block[9554-10107]"
    }, {
      "left" : "if (stack.size() == 1 && childTag.equals(htmlTag))",
      "right" : "if (stack.size() == 1 && childTag.equals(htmlTag))",
      "info" : "IfStatement[9460-9535]:IfStatement[9564-9639]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9523-9535]:ReturnStatement[9627-9639]"
    }, {
      "left" : "if (childTag.requiresSpecificParent())",
      "right" : "if (childTag.requiresSpecificParent())",
      "info" : "IfStatement[9576-9680]:IfStatement[9680-9784]"
    }, {
      "left" : "return stack.getLast().tag().isValidParent(childTag);",
      "right" : "return stack.getLast().tag().isValidParent(childTag);",
      "info" : "ReturnStatement[9627-9680]:ReturnStatement[9731-9784]"
    }, {
      "left" : "for (int i = stack.size() -1; i >= 0; i--)",
      "right" : "for (int i = stack.size() -1; i >= 0; i--)",
      "info" : "ForStatement[9750-9975]:ForStatement[9854-10079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9793-9975]:Block[9897-10079]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[9807-9833]:VariableDeclarationStatement[9911-9937]"
    }, {
      "left" : "Tag parent2 = el.tag();",
      "right" : "Tag parent2 = el.tag();",
      "info" : "VariableDeclarationStatement[9846-9869]:VariableDeclarationStatement[9950-9973]"
    }, {
      "left" : "if (parent2.isValidAncestor(childTag))",
      "right" : "if (parent2.isValidAncestor(childTag))",
      "info" : "IfStatement[9882-9965]:IfStatement[9986-10069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9921-9965]:Block[10025-10069]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9939-9951]:ReturnStatement[10043-10055]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9984-9997]:ReturnStatement[10088-10101]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10009-10016]:Modifier[10113-10120]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[10017-10024]:SimpleType[10121-10128]"
    }, {
      "left" : "popStackToSuitableContainer",
      "right" : "popStackToSuitableContainer",
      "info" : "SimpleName[10025-10052]:SimpleName[10129-10156]"
    }, {
      "left" : "Tag tag",
      "right" : "Tag tag",
      "info" : "SingleVariableDeclaration[10053-10060]:SingleVariableDeclaration[10157-10164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10062-10265]:Block[10166-10369]"
    }, {
      "left" : "while (!stack.isEmpty())",
      "right" : "while (!stack.isEmpty())",
      "info" : "WhileStatement[10072-10238]:WhileStatement[10176-10342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10097-10238]:Block[10201-10342]"
    }, {
      "left" : "if (last().tag().canContain(tag))",
      "right" : "if (last().tag().canContain(tag))",
      "info" : "IfStatement[10111-10228]:IfStatement[10215-10332]"
    }, {
      "left" : "return last();",
      "right" : "return last();",
      "info" : "ReturnStatement[10161-10175]:ReturnStatement[10265-10279]"
    }, {
      "left" : "stack.removeLast();",
      "right" : "stack.removeLast();",
      "info" : "ExpressionStatement[10209-10228]:ExpressionStatement[10313-10332]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10247-10259]:ReturnStatement[10351-10363]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10271-10278]:Modifier[10375-10382]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[10279-10286]:SimpleType[10383-10390]"
    }, {
      "left" : "popStackToClose",
      "right" : "popStackToClose",
      "info" : "SimpleName[10287-10302]:SimpleName[10391-10406]"
    }, {
      "left" : "Tag tag",
      "right" : "Tag tag",
      "info" : "SingleVariableDeclaration[10303-10310]:SingleVariableDeclaration[10407-10414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10312-11039]:Block[10416-11143]"
    }, {
      "left" : "int counter = 0;",
      "right" : "int counter = 0;",
      "info" : "VariableDeclarationStatement[10417-10433]:VariableDeclarationStatement[10521-10537]"
    }, {
      "left" : "Element elToClose = null;",
      "right" : "Element elToClose = null;",
      "info" : "VariableDeclarationStatement[10442-10467]:VariableDeclarationStatement[10546-10571]"
    }, {
      "left" : "for (int i = stack.size() -1; i > 0; i--)",
      "right" : "for (int i = stack.size() -1; i > 0; i--)",
      "info" : "ForStatement[10476-10866]:ForStatement[10580-10970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10518-10866]:Block[10622-10970]"
    }, {
      "left" : "counter++;",
      "right" : "counter++;",
      "info" : "ExpressionStatement[10532-10542]:ExpressionStatement[10636-10646]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[10555-10581]:VariableDeclarationStatement[10659-10685]"
    }, {
      "left" : "Tag elTag = el.tag();",
      "right" : "Tag elTag = el.tag();",
      "info" : "VariableDeclarationStatement[10594-10615]:VariableDeclarationStatement[10698-10719]"
    }, {
      "left" : "if (elTag.equals(bodyTag) || elTag.equals(htmlTag))",
      "right" : "if (elTag.equals(bodyTag) || elTag.equals(htmlTag))",
      "info" : "IfStatement[10628-10856]:IfStatement[10732-10960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10680-10757]:Block[10784-10861]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10737-10743]:BreakStatement[10841-10847]"
    }, {
      "left" : "if (elTag.equals(tag))",
      "right" : "if (elTag.equals(tag))",
      "info" : "IfStatement[10763-10856]:IfStatement[10867-10960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10786-10856]:Block[10890-10960]"
    }, {
      "left" : "elToClose = el;",
      "right" : "elToClose = el;",
      "info" : "ExpressionStatement[10804-10819]:ExpressionStatement[10908-10923]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10836-10842]:BreakStatement[10940-10946]"
    }, {
      "left" : "if (elToClose != null)",
      "right" : "if (elToClose != null)",
      "info" : "IfStatement[10875-11007]:IfStatement[10979-11111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10898-11007]:Block[11002-11111]"
    }, {
      "left" : "for (int i = 0; i < counter; i++)",
      "right" : "for (int i = 0; i < counter; i++)",
      "info" : "ForStatement[10912-10997]:ForStatement[11016-11101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10946-10997]:Block[11050-11101]"
    }, {
      "left" : "stack.removeLast();",
      "right" : "stack.removeLast();",
      "info" : "ExpressionStatement[10964-10983]:ExpressionStatement[11068-11087]"
    }, {
      "left" : "return elToClose;",
      "right" : "return elToClose;",
      "info" : "ReturnStatement[11016-11033]:ReturnStatement[11120-11137]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11045-11052]:Modifier[11149-11156]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[11053-11060]:SimpleType[11157-11164]"
    }, {
      "left" : "last",
      "right" : "last",
      "info" : "SimpleName[11061-11065]:SimpleName[11165-11169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11068-11107]:Block[11172-11211]"
    }, {
      "left" : "return stack.getLast();",
      "right" : "return stack.getLast();",
      "info" : "ReturnStatement[11078-11101]:ReturnStatement[11182-11205]"
    } ]
  },
  "interFileMappings" : { }
}