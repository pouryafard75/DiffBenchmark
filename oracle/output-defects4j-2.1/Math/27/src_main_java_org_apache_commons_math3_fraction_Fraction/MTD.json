{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "TypeDeclaration[1251-23380]:TypeDeclaration[1251-23372]"
    }, {
      "left" : "public static final Fraction TWO = new Fraction(2, 1);",
      "right" : "public static final Fraction TWO = new Fraction(2, 1);",
      "info" : "FieldDeclaration[1495-1593]:FieldDeclaration[1495-1593]"
    }, {
      "left" : "public static final Fraction ONE = new Fraction(1, 1);",
      "right" : "public static final Fraction ONE = new Fraction(1, 1);",
      "info" : "FieldDeclaration[1599-1693]:FieldDeclaration[1599-1693]"
    }, {
      "left" : "public static final Fraction ZERO = new Fraction(0, 1);",
      "right" : "public static final Fraction ZERO = new Fraction(0, 1);",
      "info" : "FieldDeclaration[1699-1794]:FieldDeclaration[1699-1794]"
    }, {
      "left" : "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",
      "right" : "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",
      "info" : "FieldDeclaration[1800-1904]:FieldDeclaration[1800-1904]"
    }, {
      "left" : "public static final Fraction ONE_FIFTH = new Fraction(1, 5);",
      "right" : "public static final Fraction ONE_FIFTH = new Fraction(1, 5);",
      "info" : "FieldDeclaration[1910-2012]:FieldDeclaration[1910-2012]"
    }, {
      "left" : "public static final Fraction ONE_HALF = new Fraction(1, 2);",
      "right" : "public static final Fraction ONE_HALF = new Fraction(1, 2);",
      "info" : "FieldDeclaration[2018-2119]:FieldDeclaration[2018-2119]"
    }, {
      "left" : "public static final Fraction ONE_QUARTER = new Fraction(1, 4);",
      "right" : "public static final Fraction ONE_QUARTER = new Fraction(1, 4);",
      "info" : "FieldDeclaration[2125-2229]:FieldDeclaration[2125-2229]"
    }, {
      "left" : "public static final Fraction ONE_THIRD = new Fraction(1, 3);",
      "right" : "public static final Fraction ONE_THIRD = new Fraction(1, 3);",
      "info" : "FieldDeclaration[2235-2337]:FieldDeclaration[2235-2337]"
    }, {
      "left" : "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",
      "right" : "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",
      "info" : "FieldDeclaration[2343-2448]:FieldDeclaration[2343-2448]"
    }, {
      "left" : "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",
      "right" : "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",
      "info" : "FieldDeclaration[2454-2561]:FieldDeclaration[2454-2561]"
    }, {
      "left" : "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",
      "right" : "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",
      "info" : "FieldDeclaration[2567-2670]:FieldDeclaration[2567-2670]"
    }, {
      "left" : "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",
      "right" : "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",
      "info" : "FieldDeclaration[2676-2781]:FieldDeclaration[2676-2781]"
    }, {
      "left" : "public static final Fraction TWO_THIRDS = new Fraction(2, 3);",
      "right" : "public static final Fraction TWO_THIRDS = new Fraction(2, 3);",
      "info" : "FieldDeclaration[2787-2890]:FieldDeclaration[2787-2890]"
    }, {
      "left" : "public static final Fraction MINUS_ONE = new Fraction(-1, 1);",
      "right" : "public static final Fraction MINUS_ONE = new Fraction(-1, 1);",
      "info" : "FieldDeclaration[2896-3002]:FieldDeclaration[2896-3002]"
    }, {
      "left" : "private static final long serialVersionUID = 3698073679419233275L;",
      "right" : "private static final long serialVersionUID = 3698073679419233275L;",
      "info" : "FieldDeclaration[3008-3117]:FieldDeclaration[3008-3117]"
    }, {
      "left" : "private final int denominator;",
      "right" : "private final int denominator;",
      "info" : "FieldDeclaration[3123-3181]:FieldDeclaration[3123-3181]"
    }, {
      "left" : "private final int numerator;",
      "right" : "private final int numerator;",
      "info" : "FieldDeclaration[3187-3241]:FieldDeclaration[3187-3241]"
    }, {
      "left" : "public Fraction(double value) throws FractionConversionException",
      "right" : "public Fraction(double value) throws FractionConversionException",
      "info" : "MethodDeclaration[3247-3585]:MethodDeclaration[3247-3585]"
    }, {
      "left" : "public Fraction(double value, double epsilon, int maxIterations)\n        throws FractionConversionException",
      "right" : "public Fraction(double value, double epsilon, int maxIterations)\n        throws FractionConversionException",
      "info" : "MethodDeclaration[3591-4441]:MethodDeclaration[3591-4441]"
    }, {
      "left" : "public Fraction(double value, int maxDenominator)\n        throws FractionConversionException",
      "right" : "public Fraction(double value, int maxDenominator)\n        throws FractionConversionException",
      "info" : "MethodDeclaration[4447-5126]:MethodDeclaration[4447-5126]"
    }, {
      "left" : "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException",
      "right" : "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException",
      "info" : "MethodDeclaration[5132-8397]:MethodDeclaration[5132-8397]"
    }, {
      "left" : "public Fraction(int num)",
      "right" : "public Fraction(int num)",
      "info" : "MethodDeclaration[8403-8576]:MethodDeclaration[8403-8576]"
    }, {
      "left" : "public Fraction(int num, int den)",
      "right" : "public Fraction(int num, int den)",
      "info" : "MethodDeclaration[8582-9794]:MethodDeclaration[8582-9794]"
    }, {
      "left" : "public Fraction abs()",
      "right" : "public Fraction abs()",
      "info" : "MethodDeclaration[9800-10083]:MethodDeclaration[9800-10083]"
    }, {
      "left" : "public int compareTo(Fraction object)",
      "right" : "public int compareTo(Fraction object)",
      "info" : "MethodDeclaration[10089-10564]:MethodDeclaration[10089-10564]"
    }, {
      "left" : "public double doubleValue()",
      "right" : "public double doubleValue()",
      "info" : "MethodDeclaration[10570-10864]:MethodDeclaration[10570-10864]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[10870-11809]:MethodDeclaration[10870-11809]"
    }, {
      "left" : "public float floatValue()",
      "right" : "public float floatValue()",
      "info" : "MethodDeclaration[11815-12086]:MethodDeclaration[11815-12086]"
    }, {
      "left" : "public int getDenominator()",
      "right" : "public int getDenominator()",
      "info" : "MethodDeclaration[12092-12234]:MethodDeclaration[12092-12234]"
    }, {
      "left" : "public int getNumerator()",
      "right" : "public int getNumerator()",
      "info" : "MethodDeclaration[12240-12374]:MethodDeclaration[12240-12374]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[12380-12586]:MethodDeclaration[12380-12586]"
    }, {
      "left" : "public int intValue()",
      "right" : "public int intValue()",
      "info" : "MethodDeclaration[12592-12836]:MethodDeclaration[12592-12836]"
    }, {
      "left" : "public long longValue()",
      "right" : "public long longValue()",
      "info" : "MethodDeclaration[12842-13089]:MethodDeclaration[12842-13089]"
    }, {
      "left" : "public Fraction negate()",
      "right" : "public Fraction negate()",
      "info" : "MethodDeclaration[13095-13460]:MethodDeclaration[13095-13460]"
    }, {
      "left" : "public Fraction reciprocal()",
      "right" : "public Fraction reciprocal()",
      "info" : "MethodDeclaration[13466-13669]:MethodDeclaration[13466-13669]"
    }, {
      "left" : "public Fraction add(Fraction fraction)",
      "right" : "public Fraction add(Fraction fraction)",
      "info" : "MethodDeclaration[13675-14263]:MethodDeclaration[13675-14263]"
    }, {
      "left" : "public Fraction add(final int i)",
      "right" : "public Fraction add(final int i)",
      "info" : "MethodDeclaration[14269-14504]:MethodDeclaration[14269-14504]"
    }, {
      "left" : "public Fraction subtract(Fraction fraction)",
      "right" : "public Fraction subtract(Fraction fraction)",
      "info" : "MethodDeclaration[14510-15110]:MethodDeclaration[14510-15110]"
    }, {
      "left" : "public Fraction subtract(final int i)",
      "right" : "public Fraction subtract(final int i)",
      "info" : "MethodDeclaration[15116-15368]:MethodDeclaration[15116-15368]"
    }, {
      "left" : "private Fraction addSub(Fraction fraction, boolean isAdd)",
      "right" : "private Fraction addSub(Fraction fraction, boolean isAdd)",
      "info" : "MethodDeclaration[15374-18066]:MethodDeclaration[15374-18066]"
    }, {
      "left" : "public Fraction multiply(Fraction fraction)",
      "right" : "public Fraction multiply(Fraction fraction)",
      "info" : "MethodDeclaration[18072-19235]:MethodDeclaration[18072-19235]"
    }, {
      "left" : "public Fraction multiply(final int i)",
      "right" : "public Fraction multiply(final int i)",
      "info" : "MethodDeclaration[19241-19480]:MethodDeclaration[19241-19480]"
    }, {
      "left" : "public Fraction divide(Fraction fraction)",
      "right" : "public Fraction divide(Fraction fraction)",
      "info" : "MethodDeclaration[19486-20425]:MethodDeclaration[19486-20425]"
    }, {
      "left" : "public Fraction divide(final int i)",
      "right" : "public Fraction divide(final int i)",
      "info" : "MethodDeclaration[20431-20664]:MethodDeclaration[20431-20664]"
    }, {
      "left" : "public double percentageValue()",
      "right" : "public double percentageValue()",
      "info" : "MethodDeclaration[20670-21013]:MethodDeclaration[20670-21005]"
    }, {
      "left" : "public static Fraction getReducedFraction(int numerator, int denominator)",
      "right" : "public static Fraction getReducedFraction(int numerator, int denominator)",
      "info" : "MethodDeclaration[21019-22680]:MethodDeclaration[21011-22672]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[22686-23263]:MethodDeclaration[22678-23255]"
    }, {
      "left" : "public FractionField getField()",
      "right" : "public FractionField getField()",
      "info" : "MethodDeclaration[23269-23377]:MethodDeclaration[23261-23369]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3544-3585]:Block[3544-3585]"
    }, {
      "left" : "this(value, 1.0e-5, 100);",
      "right" : "this(value, 1.0e-5, 100);",
      "info" : "ConstructorInvocation[3554-3579]:ConstructorInvocation[3554-3579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4370-4441]:Block[4370-4441]"
    }, {
      "left" : "this(value, epsilon, Integer.MAX_VALUE, maxIterations);",
      "right" : "this(value, epsilon, Integer.MAX_VALUE, maxIterations);",
      "info" : "ConstructorInvocation[4380-4435]:ConstructorInvocation[4380-4435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5075-5126]:Block[5075-5126]"
    }, {
      "left" : "this(value, 0, maxDenominator, 100);",
      "right" : "this(value, 0, maxDenominator, 100);",
      "info" : "ConstructorInvocation[5084-5120]:ConstructorInvocation[5084-5120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6675-8397]:Block[6675-8397]"
    }, {
      "left" : "long overflow = Integer.MAX_VALUE;",
      "right" : "long overflow = Integer.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[6685-6719]:VariableDeclarationStatement[6685-6719]"
    }, {
      "left" : "double r0 = value;",
      "right" : "double r0 = value;",
      "info" : "VariableDeclarationStatement[6728-6746]:VariableDeclarationStatement[6728-6746]"
    }, {
      "left" : "long a0 = (long)FastMath.floor(r0);",
      "right" : "long a0 = (long)FastMath.floor(r0);",
      "info" : "VariableDeclarationStatement[6755-6790]:VariableDeclarationStatement[6755-6790]"
    }, {
      "left" : "if (a0 > overflow)",
      "right" : "if (a0 > overflow)",
      "info" : "IfStatement[6799-6895]:IfStatement[6799-6895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6818-6895]:Block[6818-6895]"
    }, {
      "left" : "throw new FractionConversionException(value, a0, 1l);",
      "right" : "throw new FractionConversionException(value, a0, 1l);",
      "info" : "ThrowStatement[6832-6885]:ThrowStatement[6832-6885]"
    }, {
      "left" : "if (FastMath.abs(a0 - value) < epsilon)",
      "right" : "if (FastMath.abs(a0 - value) < epsilon)",
      "info" : "IfStatement[7000-7144]:IfStatement[7000-7144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7040-7144]:Block[7040-7144]"
    }, {
      "left" : "this.numerator = (int) a0;",
      "right" : "this.numerator = (int) a0;",
      "info" : "ExpressionStatement[7054-7080]:ExpressionStatement[7054-7080]"
    }, {
      "left" : "this.denominator = 1;",
      "right" : "this.denominator = 1;",
      "info" : "ExpressionStatement[7093-7114]:ExpressionStatement[7093-7114]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7127-7134]:ReturnStatement[7127-7134]"
    }, {
      "left" : "long p0 = 1;",
      "right" : "long p0 = 1;",
      "info" : "VariableDeclarationStatement[7154-7166]:VariableDeclarationStatement[7154-7166]"
    }, {
      "left" : "long q0 = 0;",
      "right" : "long q0 = 0;",
      "info" : "VariableDeclarationStatement[7175-7187]:VariableDeclarationStatement[7175-7187]"
    }, {
      "left" : "long p1 = a0;",
      "right" : "long p1 = a0;",
      "info" : "VariableDeclarationStatement[7196-7209]:VariableDeclarationStatement[7196-7209]"
    }, {
      "left" : "long q1 = 1;",
      "right" : "long q1 = 1;",
      "info" : "VariableDeclarationStatement[7218-7230]:VariableDeclarationStatement[7218-7230]"
    }, {
      "left" : "long p2 = 0;",
      "right" : "long p2 = 0;",
      "info" : "VariableDeclarationStatement[7240-7252]:VariableDeclarationStatement[7240-7252]"
    }, {
      "left" : "long q2 = 1;",
      "right" : "long q2 = 1;",
      "info" : "VariableDeclarationStatement[7261-7273]:VariableDeclarationStatement[7261-7273]"
    }, {
      "left" : "int n = 0;",
      "right" : "int n = 0;",
      "info" : "VariableDeclarationStatement[7283-7293]:VariableDeclarationStatement[7283-7293]"
    }, {
      "left" : "boolean stop = false;",
      "right" : "boolean stop = false;",
      "info" : "VariableDeclarationStatement[7302-7323]:VariableDeclarationStatement[7302-7323]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[7332-8049]:DoStatement[7332-8049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7335-8034]:Block[7335-8034]"
    }, {
      "left" : "++n;",
      "right" : "++n;",
      "info" : "ExpressionStatement[7349-7353]:ExpressionStatement[7349-7353]"
    }, {
      "left" : "double r1 = 1.0 / (r0 - a0);",
      "right" : "double r1 = 1.0 / (r0 - a0);",
      "info" : "VariableDeclarationStatement[7366-7394]:VariableDeclarationStatement[7366-7394]"
    }, {
      "left" : "long a1 = (long)FastMath.floor(r1);",
      "right" : "long a1 = (long)FastMath.floor(r1);",
      "info" : "VariableDeclarationStatement[7407-7442]:VariableDeclarationStatement[7407-7442]"
    }, {
      "left" : "p2 = (a1 * p1) + p0;",
      "right" : "p2 = (a1 * p1) + p0;",
      "info" : "ExpressionStatement[7455-7475]:ExpressionStatement[7455-7475]"
    }, {
      "left" : "q2 = (a1 * q1) + q0;",
      "right" : "q2 = (a1 * q1) + q0;",
      "info" : "ExpressionStatement[7488-7508]:ExpressionStatement[7488-7508]"
    }, {
      "left" : "if ((p2 > overflow) || (q2 > overflow))",
      "right" : "if ((p2 > overflow) || (q2 > overflow))",
      "info" : "IfStatement[7521-7646]:IfStatement[7521-7646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7561-7646]:Block[7561-7646]"
    }, {
      "left" : "throw new FractionConversionException(value, p2, q2);",
      "right" : "throw new FractionConversionException(value, p2, q2);",
      "info" : "ThrowStatement[7579-7632]:ThrowStatement[7579-7632]"
    }, {
      "left" : "double convergent = (double)p2 / (double)q2;",
      "right" : "double convergent = (double)p2 / (double)q2;",
      "info" : "VariableDeclarationStatement[7660-7704]:VariableDeclarationStatement[7660-7704]"
    }, {
      "left" : "if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator)",
      "right" : "if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator)",
      "info" : "IfStatement[7717-8024]:IfStatement[7717-8024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7809-7974]:Block[7809-7974]"
    }, {
      "left" : "p0 = p1;",
      "right" : "p0 = p1;",
      "info" : "ExpressionStatement[7827-7835]:ExpressionStatement[7827-7835]"
    }, {
      "left" : "p1 = p2;",
      "right" : "p1 = p2;",
      "info" : "ExpressionStatement[7852-7860]:ExpressionStatement[7852-7860]"
    }, {
      "left" : "q0 = q1;",
      "right" : "q0 = q1;",
      "info" : "ExpressionStatement[7877-7885]:ExpressionStatement[7877-7885]"
    }, {
      "left" : "q1 = q2;",
      "right" : "q1 = q2;",
      "info" : "ExpressionStatement[7902-7910]:ExpressionStatement[7902-7910]"
    }, {
      "left" : "a0 = a1;",
      "right" : "a0 = a1;",
      "info" : "ExpressionStatement[7927-7935]:ExpressionStatement[7927-7935]"
    }, {
      "left" : "r0 = r1;",
      "right" : "r0 = r1;",
      "info" : "ExpressionStatement[7952-7960]:ExpressionStatement[7952-7960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7980-8024]:Block[7980-8024]"
    }, {
      "left" : "stop = true;",
      "right" : "stop = true;",
      "info" : "ExpressionStatement[7998-8010]:ExpressionStatement[7998-8010]"
    }, {
      "left" : "if (n >= maxIterations)",
      "right" : "if (n >= maxIterations)",
      "info" : "IfStatement[8059-8167]:IfStatement[8059-8167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8083-8167]:Block[8083-8167]"
    }, {
      "left" : "throw new FractionConversionException(value, maxIterations);",
      "right" : "throw new FractionConversionException(value, maxIterations);",
      "info" : "ThrowStatement[8097-8157]:ThrowStatement[8097-8157]"
    }, {
      "left" : "if (q2 < maxDenominator)",
      "right" : "if (q2 < maxDenominator)",
      "info" : "IfStatement[8177-8390]:IfStatement[8177-8390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8202-8293]:Block[8202-8293]"
    }, {
      "left" : "this.numerator = (int) p2;",
      "right" : "this.numerator = (int) p2;",
      "info" : "ExpressionStatement[8216-8242]:ExpressionStatement[8216-8242]"
    }, {
      "left" : "this.denominator = (int) q2;",
      "right" : "this.denominator = (int) q2;",
      "info" : "ExpressionStatement[8255-8283]:ExpressionStatement[8255-8283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8299-8390]:Block[8299-8390]"
    }, {
      "left" : "this.numerator = (int) p1;",
      "right" : "this.numerator = (int) p1;",
      "info" : "ExpressionStatement[8313-8339]:ExpressionStatement[8313-8339]"
    }, {
      "left" : "this.denominator = (int) q1;",
      "right" : "this.denominator = (int) q1;",
      "info" : "ExpressionStatement[8352-8380]:ExpressionStatement[8352-8380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8547-8576]:Block[8547-8576]"
    }, {
      "left" : "this(num, 1);",
      "right" : "this(num, 1);",
      "info" : "ConstructorInvocation[8557-8570]:ConstructorInvocation[8557-8570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8885-9794]:Block[8885-9794]"
    }, {
      "left" : "if (den == 0)",
      "right" : "if (den == 0)",
      "info" : "IfStatement[8895-9070]:IfStatement[8895-9070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8909-9070]:Block[8909-9070]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              num, den);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              num, den);",
      "info" : "ThrowStatement[8923-9060]:ThrowStatement[8923-9060]"
    }, {
      "left" : "if (den < 0)",
      "right" : "if (den < 0)",
      "info" : "IfStatement[9079-9403]:IfStatement[9079-9403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9092-9403]:Block[9092-9403]"
    }, {
      "left" : "if (num == Integer.MIN_VALUE ||\n                den == Integer.MIN_VALUE)",
      "right" : "if (num == Integer.MIN_VALUE ||\n                den == Integer.MIN_VALUE)",
      "info" : "IfStatement[9106-9345]:IfStatement[9106-9345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9180-9345]:Block[9180-9345]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  num, den);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  num, den);",
      "info" : "ThrowStatement[9198-9331]:ThrowStatement[9198-9331]"
    }, {
      "left" : "num = -num;",
      "right" : "num = -num;",
      "info" : "ExpressionStatement[9358-9369]:ExpressionStatement[9358-9369]"
    }, {
      "left" : "den = -den;",
      "right" : "den = -den;",
      "info" : "ExpressionStatement[9382-9393]:ExpressionStatement[9382-9393]"
    }, {
      "left" : "final int d = ArithmeticUtils.gcd(num, den);",
      "right" : "final int d = ArithmeticUtils.gcd(num, den);",
      "info" : "VariableDeclarationStatement[9488-9532]:VariableDeclarationStatement[9488-9532]"
    }, {
      "left" : "if (d > 1)",
      "right" : "if (d > 1)",
      "info" : "IfStatement[9541-9607]:IfStatement[9541-9607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9552-9607]:Block[9552-9607]"
    }, {
      "left" : "num /= d;",
      "right" : "num /= d;",
      "info" : "ExpressionStatement[9566-9575]:ExpressionStatement[9566-9575]"
    }, {
      "left" : "den /= d;",
      "right" : "den /= d;",
      "info" : "ExpressionStatement[9588-9597]:ExpressionStatement[9588-9597]"
    }, {
      "left" : "if (den < 0)",
      "right" : "if (den < 0)",
      "info" : "IfStatement[9652-9724]:IfStatement[9652-9724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9665-9724]:Block[9665-9724]"
    }, {
      "left" : "num = -num;",
      "right" : "num = -num;",
      "info" : "ExpressionStatement[9679-9690]:ExpressionStatement[9679-9690]"
    }, {
      "left" : "den = -den;",
      "right" : "den = -den;",
      "info" : "ExpressionStatement[9703-9714]:ExpressionStatement[9703-9714]"
    }, {
      "left" : "this.numerator   = num;",
      "right" : "this.numerator   = num;",
      "info" : "ExpressionStatement[9733-9756]:ExpressionStatement[9733-9756]"
    }, {
      "left" : "this.denominator = den;",
      "right" : "this.denominator = den;",
      "info" : "ExpressionStatement[9765-9788]:ExpressionStatement[9765-9788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9925-10083]:Block[9925-10083]"
    }, {
      "left" : "Fraction ret;",
      "right" : "Fraction ret;",
      "info" : "VariableDeclarationStatement[9935-9948]:VariableDeclarationStatement[9935-9948]"
    }, {
      "left" : "if (numerator >= 0)",
      "right" : "if (numerator >= 0)",
      "info" : "IfStatement[9957-10057]:IfStatement[9957-10057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9977-10012]:Block[9977-10012]"
    }, {
      "left" : "ret = this;",
      "right" : "ret = this;",
      "info" : "ExpressionStatement[9991-10002]:ExpressionStatement[9991-10002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10018-10057]:Block[10018-10057]"
    }, {
      "left" : "ret = negate();",
      "right" : "ret = negate();",
      "info" : "ExpressionStatement[10032-10047]:ExpressionStatement[10032-10047]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[10066-10077]:ReturnStatement[10066-10077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10379-10564]:Block[10379-10564]"
    }, {
      "left" : "long nOd = ((long) numerator) * object.denominator;",
      "right" : "long nOd = ((long) numerator) * object.denominator;",
      "info" : "VariableDeclarationStatement[10389-10440]:VariableDeclarationStatement[10389-10440]"
    }, {
      "left" : "long dOn = ((long) denominator) * object.numerator;",
      "right" : "long dOn = ((long) denominator) * object.numerator;",
      "info" : "VariableDeclarationStatement[10449-10500]:VariableDeclarationStatement[10449-10500]"
    }, {
      "left" : "return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);",
      "right" : "return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);",
      "info" : "ReturnStatement[10509-10558]:ReturnStatement[10509-10558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10801-10864]:Block[10801-10864]"
    }, {
      "left" : "return (double)numerator / (double)denominator;",
      "right" : "return (double)numerator / (double)denominator;",
      "info" : "ReturnStatement[10811-10858]:ReturnStatement[10811-10858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11379-11809]:Block[11379-11809]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[11389-11444]:IfStatement[11389-11444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11408-11444]:Block[11408-11444]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11422-11434]:ReturnStatement[11422-11434]"
    }, {
      "left" : "if (other instanceof Fraction)",
      "right" : "if (other instanceof Fraction)",
      "info" : "IfStatement[11453-11781]:IfStatement[11453-11781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11484-11781]:Block[11484-11781]"
    }, {
      "left" : "Fraction rhs = (Fraction)other;",
      "right" : "Fraction rhs = (Fraction)other;",
      "info" : "VariableDeclarationStatement[11639-11670]:VariableDeclarationStatement[11639-11670]"
    }, {
      "left" : "return (numerator == rhs.numerator) &&\n                (denominator == rhs.denominator);",
      "right" : "return (numerator == rhs.numerator) &&\n                (denominator == rhs.denominator);",
      "info" : "ReturnStatement[11683-11771]:ReturnStatement[11683-11771]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11790-11803]:ReturnStatement[11790-11803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12042-12086]:Block[12042-12086]"
    }, {
      "left" : "return (float)doubleValue();",
      "right" : "return (float)doubleValue();",
      "info" : "ReturnStatement[12052-12080]:ReturnStatement[12052-12080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12199-12234]:Block[12199-12234]"
    }, {
      "left" : "return denominator;",
      "right" : "return denominator;",
      "info" : "ReturnStatement[12209-12228]:ReturnStatement[12209-12228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12341-12374]:Block[12341-12374]"
    }, {
      "left" : "return numerator;",
      "right" : "return numerator;",
      "info" : "ReturnStatement[12351-12368]:ReturnStatement[12351-12368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12522-12586]:Block[12522-12586]"
    }, {
      "left" : "return 37 * (37 * 17 + numerator) + denominator;",
      "right" : "return 37 * (37 * 17 + numerator) + denominator;",
      "info" : "ReturnStatement[12532-12580]:ReturnStatement[12532-12580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12794-12836]:Block[12794-12836]"
    }, {
      "left" : "return (int)doubleValue();",
      "right" : "return (int)doubleValue();",
      "info" : "ReturnStatement[12804-12830]:ReturnStatement[12804-12830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13046-13089]:Block[13046-13089]"
    }, {
      "left" : "return (long)doubleValue();",
      "right" : "return (long)doubleValue();",
      "info" : "ReturnStatement[13056-13083]:ReturnStatement[13056-13083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13235-13460]:Block[13235-13460]"
    }, {
      "left" : "if (numerator==Integer.MIN_VALUE)",
      "right" : "if (numerator==Integer.MIN_VALUE)",
      "info" : "IfStatement[13245-13400]:IfStatement[13245-13400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13279-13400]:Block[13279-13400]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);",
      "info" : "ThrowStatement[13293-13390]:ThrowStatement[13293-13390]"
    }, {
      "left" : "return new Fraction(-numerator, denominator);",
      "right" : "return new Fraction(-numerator, denominator);",
      "info" : "ReturnStatement[13409-13454]:ReturnStatement[13409-13454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13609-13669]:Block[13609-13669]"
    }, {
      "left" : "return new Fraction(denominator, numerator);",
      "right" : "return new Fraction(denominator, numerator);",
      "info" : "ReturnStatement[13619-13663]:ReturnStatement[13619-13663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14207-14263]:Block[14207-14263]"
    }, {
      "left" : "return addSub(fraction, true /* add */);",
      "right" : "return addSub(fraction, true /* add */);",
      "info" : "ReturnStatement[14217-14257]:ReturnStatement[14217-14257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14426-14504]:Block[14426-14504]"
    }, {
      "left" : "return new Fraction(numerator + i * denominator, denominator);",
      "right" : "return new Fraction(numerator + i * denominator, denominator);",
      "info" : "ReturnStatement[14436-14498]:ReturnStatement[14436-14498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15048-15110]:Block[15048-15110]"
    }, {
      "left" : "return addSub(fraction, false /* subtract */);",
      "right" : "return addSub(fraction, false /* subtract */);",
      "info" : "ReturnStatement[15058-15104]:ReturnStatement[15058-15104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15290-15368]:Block[15290-15368]"
    }, {
      "left" : "return new Fraction(numerator - i * denominator, denominator);",
      "right" : "return new Fraction(numerator - i * denominator, denominator);",
      "info" : "ReturnStatement[15300-15362]:ReturnStatement[15300-15362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15925-18066]:Block[15925-18066]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[15935-16040]:IfStatement[15935-16040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15957-16040]:Block[15957-16040]"
    }, {
      "left" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "right" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "info" : "ThrowStatement[15971-16030]:ThrowStatement[15971-16030]"
    }, {
      "left" : "if (numerator == 0)",
      "right" : "if (numerator == 0)",
      "info" : "IfStatement[16091-16179]:IfStatement[16091-16179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16111-16179]:Block[16111-16179]"
    }, {
      "left" : "return isAdd ? fraction : fraction.negate();",
      "right" : "return isAdd ? fraction : fraction.negate();",
      "info" : "ReturnStatement[16125-16169]:ReturnStatement[16125-16169]"
    }, {
      "left" : "if (fraction.numerator == 0)",
      "right" : "if (fraction.numerator == 0)",
      "info" : "IfStatement[16188-16253]:IfStatement[16188-16253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16217-16253]:Block[16217-16253]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16231-16243]:ReturnStatement[16231-16243]"
    }, {
      "left" : "int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator);",
      "right" : "int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[16362-16426]:VariableDeclarationStatement[16362-16426]"
    }, {
      "left" : "if (d1==1)",
      "right" : "if (d1==1)",
      "info" : "IfStatement[16435-16910]:IfStatement[16435-16910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16446-16910]:Block[16446-16910]"
    }, {
      "left" : "int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",
      "right" : "int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[16510-16581]:VariableDeclarationStatement[16510-16581]"
    }, {
      "left" : "int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",
      "right" : "int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",
      "info" : "VariableDeclarationStatement[16594-16665]:VariableDeclarationStatement[16594-16665]"
    }, {
      "left" : "return new Fraction\n                (isAdd ? ArithmeticUtils.addAndCheck(uvp, upv) :\n                 ArithmeticUtils.subAndCheck(uvp, upv),\n                 ArithmeticUtils.mulAndCheck(denominator, fraction.denominator));",
      "right" : "return new Fraction\n                (isAdd ? ArithmeticUtils.addAndCheck(uvp, upv) :\n                 ArithmeticUtils.subAndCheck(uvp, upv),\n                 ArithmeticUtils.mulAndCheck(denominator, fraction.denominator));",
      "info" : "ReturnStatement[16678-16900]:ReturnStatement[16678-16900]"
    }, {
      "left" : "BigInteger uvp = BigInteger.valueOf(numerator)\n        .multiply(BigInteger.valueOf(fraction.denominator/d1));",
      "right" : "BigInteger uvp = BigInteger.valueOf(numerator)\n        .multiply(BigInteger.valueOf(fraction.denominator/d1));",
      "info" : "VariableDeclarationStatement[17088-17198]:VariableDeclarationStatement[17088-17198]"
    }, {
      "left" : "BigInteger upv = BigInteger.valueOf(fraction.numerator)\n        .multiply(BigInteger.valueOf(denominator/d1));",
      "right" : "BigInteger upv = BigInteger.valueOf(fraction.numerator)\n        .multiply(BigInteger.valueOf(denominator/d1));",
      "info" : "VariableDeclarationStatement[17207-17317]:VariableDeclarationStatement[17207-17317]"
    }, {
      "left" : "BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);",
      "right" : "BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);",
      "info" : "VariableDeclarationStatement[17326-17382]:VariableDeclarationStatement[17326-17382]"
    }, {
      "left" : "int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();",
      "right" : "int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();",
      "info" : "VariableDeclarationStatement[17492-17546]:VariableDeclarationStatement[17492-17546]"
    }, {
      "left" : "int d2 = (tmodd1==0)?d1:ArithmeticUtils.gcd(tmodd1, d1);",
      "right" : "int d2 = (tmodd1==0)?d1:ArithmeticUtils.gcd(tmodd1, d1);",
      "info" : "VariableDeclarationStatement[17555-17611]:VariableDeclarationStatement[17555-17611]"
    }, {
      "left" : "BigInteger w = t.divide(BigInteger.valueOf(d2));",
      "right" : "BigInteger w = t.divide(BigInteger.valueOf(d2));",
      "info" : "VariableDeclarationStatement[17666-17714]:VariableDeclarationStatement[17666-17714]"
    }, {
      "left" : "if (w.bitLength() > 31)",
      "right" : "if (w.bitLength() > 31)",
      "info" : "IfStatement[17723-17906]:IfStatement[17723-17906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17747-17906]:Block[17747-17906]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,\n                                              w);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,\n                                              w);",
      "info" : "ThrowStatement[17761-17896]:ThrowStatement[17761-17896]"
    }, {
      "left" : "return new Fraction (w.intValue(),\n                ArithmeticUtils.mulAndCheck(denominator/d1,\n                        fraction.denominator/d2));",
      "right" : "return new Fraction (w.intValue(),\n                ArithmeticUtils.mulAndCheck(denominator/d1,\n                        fraction.denominator/d2));",
      "info" : "ReturnStatement[17915-18060]:ReturnStatement[17915-18060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18587-19235]:Block[18587-19235]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[18597-18702]:IfStatement[18597-18702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18619-18702]:Block[18619-18702]"
    }, {
      "left" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "right" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "info" : "ThrowStatement[18633-18692]:ThrowStatement[18633-18692]"
    }, {
      "left" : "if (numerator == 0 || fraction.numerator == 0)",
      "right" : "if (numerator == 0 || fraction.numerator == 0)",
      "info" : "IfStatement[18711-18794]:IfStatement[18711-18794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18758-18794]:Block[18758-18794]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[18772-18784]:ReturnStatement[18772-18784]"
    }, {
      "left" : "int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);",
      "right" : "int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[18900-18962]:VariableDeclarationStatement[18900-18962]"
    }, {
      "left" : "int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);",
      "right" : "int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);",
      "info" : "VariableDeclarationStatement[18971-19033]:VariableDeclarationStatement[18971-19033]"
    }, {
      "left" : "return getReducedFraction\n        (ArithmeticUtils.mulAndCheck(numerator/d1, fraction.numerator/d2),\n                ArithmeticUtils.mulAndCheck(denominator/d2, fraction.denominator/d1));",
      "right" : "return getReducedFraction\n        (ArithmeticUtils.mulAndCheck(numerator/d1, fraction.numerator/d2),\n                ArithmeticUtils.mulAndCheck(denominator/d2, fraction.denominator/d1));",
      "info" : "ReturnStatement[19042-19229]:ReturnStatement[19042-19229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19416-19480]:Block[19416-19480]"
    }, {
      "left" : "return new Fraction(numerator * i, denominator);",
      "right" : "return new Fraction(numerator * i, denominator);",
      "info" : "ReturnStatement[19426-19474]:ReturnStatement[19426-19474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20027-20425]:Block[20027-20425]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[20037-20142]:IfStatement[20037-20142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20059-20142]:Block[20059-20142]"
    }, {
      "left" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "right" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "info" : "ThrowStatement[20073-20132]:ThrowStatement[20073-20132]"
    }, {
      "left" : "if (fraction.numerator == 0)",
      "right" : "if (fraction.numerator == 0)",
      "info" : "IfStatement[20151-20371]:IfStatement[20151-20371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20180-20371]:Block[20180-20371]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY,\n                                              fraction.numerator, fraction.denominator);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY,\n                                              fraction.numerator, fraction.denominator);",
      "info" : "ThrowStatement[20194-20361]:ThrowStatement[20194-20361]"
    }, {
      "left" : "return multiply(fraction.reciprocal());",
      "right" : "return multiply(fraction.reciprocal());",
      "info" : "ReturnStatement[20380-20419]:ReturnStatement[20380-20419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20600-20664]:Block[20600-20664]"
    }, {
      "left" : "return new Fraction(numerator, denominator * i);",
      "right" : "return new Fraction(numerator, denominator * i);",
      "info" : "ReturnStatement[20610-20658]:ReturnStatement[20610-20658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20962-21013]:Block[20962-21005]"
    }, {
      "left" : "return multiply(100).doubleValue();",
      "right" : "return 100 * doubleValue();",
      "info" : "ReturnStatement[20972-21007]:ReturnStatement[20972-20999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21611-22680]:Block[21603-22672]"
    }, {
      "left" : "if (denominator == 0)",
      "right" : "if (denominator == 0)",
      "info" : "IfStatement[21621-21818]:IfStatement[21613-21810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21643-21818]:Block[21635-21810]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              numerator, denominator);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              numerator, denominator);",
      "info" : "ThrowStatement[21657-21808]:ThrowStatement[21649-21800]"
    }, {
      "left" : "if (numerator==0)",
      "right" : "if (numerator==0)",
      "info" : "IfStatement[21827-21900]:IfStatement[21819-21892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21845-21900]:Block[21837-21892]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[21859-21871]:ReturnStatement[21851-21863]"
    }, {
      "left" : "if (denominator==Integer.MIN_VALUE && (numerator&1)==0)",
      "right" : "if (denominator==Integer.MIN_VALUE && (numerator&1)==0)",
      "info" : "IfStatement[21968-22077]:IfStatement[21960-22069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22024-22077]:Block[22016-22069]"
    }, {
      "left" : "numerator/=2;",
      "right" : "numerator/=2;",
      "info" : "ExpressionStatement[22038-22051]:ExpressionStatement[22030-22043]"
    }, {
      "left" : "denominator/=2;",
      "right" : "denominator/=2;",
      "info" : "ExpressionStatement[22052-22067]:ExpressionStatement[22044-22059]"
    }, {
      "left" : "if (denominator < 0)",
      "right" : "if (denominator < 0)",
      "info" : "IfStatement[22086-22474]:IfStatement[22078-22466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22107-22474]:Block[22099-22466]"
    }, {
      "left" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
      "right" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
      "info" : "IfStatement[22121-22388]:IfStatement[22113-22380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22209-22388]:Block[22201-22380]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  numerator, denominator);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  numerator, denominator);",
      "info" : "ThrowStatement[22227-22374]:ThrowStatement[22219-22366]"
    }, {
      "left" : "numerator = -numerator;",
      "right" : "numerator = -numerator;",
      "info" : "ExpressionStatement[22401-22424]:ExpressionStatement[22393-22416]"
    }, {
      "left" : "denominator = -denominator;",
      "right" : "denominator = -denominator;",
      "info" : "ExpressionStatement[22437-22464]:ExpressionStatement[22429-22456]"
    }, {
      "left" : "int gcd = ArithmeticUtils.gcd(numerator, denominator);",
      "right" : "int gcd = ArithmeticUtils.gcd(numerator, denominator);",
      "info" : "VariableDeclarationStatement[22513-22567]:VariableDeclarationStatement[22505-22559]"
    }, {
      "left" : "numerator /= gcd;",
      "right" : "numerator /= gcd;",
      "info" : "ExpressionStatement[22576-22593]:ExpressionStatement[22568-22585]"
    }, {
      "left" : "denominator /= gcd;",
      "right" : "denominator /= gcd;",
      "info" : "ExpressionStatement[22602-22621]:ExpressionStatement[22594-22613]"
    }, {
      "left" : "return new Fraction(numerator, denominator);",
      "right" : "return new Fraction(numerator, denominator);",
      "info" : "ReturnStatement[22630-22674]:ReturnStatement[22622-22666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22992-23263]:Block[22984-23255]"
    }, {
      "left" : "String str = null;",
      "right" : "String str = null;",
      "info" : "VariableDeclarationStatement[23002-23020]:VariableDeclarationStatement[22994-23012]"
    }, {
      "left" : "if (denominator == 1)",
      "right" : "if (denominator == 1)",
      "info" : "IfStatement[23029-23237]:IfStatement[23021-23229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23051-23109]:Block[23043-23101]"
    }, {
      "left" : "str = Integer.toString(numerator);",
      "right" : "str = Integer.toString(numerator);",
      "info" : "ExpressionStatement[23065-23099]:ExpressionStatement[23057-23091]"
    }, {
      "left" : "if (numerator == 0)",
      "right" : "if (numerator == 0)",
      "info" : "IfStatement[23115-23237]:IfStatement[23107-23229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23135-23169]:Block[23127-23161]"
    }, {
      "left" : "str = \"0\";",
      "right" : "str = \"0\";",
      "info" : "ExpressionStatement[23149-23159]:ExpressionStatement[23141-23151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23175-23237]:Block[23167-23229]"
    }, {
      "left" : "str = numerator + \" / \" + denominator;",
      "right" : "str = numerator + \" / \" + denominator;",
      "info" : "ExpressionStatement[23189-23227]:ExpressionStatement[23181-23219]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[23246-23257]:ReturnStatement[23238-23249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23326-23377]:Block[23318-23369]"
    }, {
      "left" : "return FractionField.getInstance();",
      "right" : "return FractionField.getInstance();",
      "info" : "ReturnStatement[23336-23371]:ReturnStatement[23328-23363]"
    } ]
  },
  "interFileMappings" : { }
}