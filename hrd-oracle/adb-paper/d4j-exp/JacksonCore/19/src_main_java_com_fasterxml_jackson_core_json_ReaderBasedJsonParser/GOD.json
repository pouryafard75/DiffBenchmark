{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ReaderBasedJsonParser",
      "right" : "ReaderBasedJsonParser",
      "info" : "TypeDeclaration[409-94842]:TypeDeclaration[409-94988]"
    }, {
      "left" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "right" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "info" : "FieldDeclaration[801-873]:FieldDeclaration[801-873]"
    }, {
      "left" : "protected Reader _reader;",
      "right" : "protected Reader _reader;",
      "info" : "FieldDeclaration[1050-1256]:FieldDeclaration[1050-1256]"
    }, {
      "left" : "protected char[] _inputBuffer;",
      "right" : "protected char[] _inputBuffer;",
      "info" : "FieldDeclaration[1262-1416]:FieldDeclaration[1262-1416]"
    }, {
      "left" : "protected boolean _bufferRecyclable;",
      "right" : "protected boolean _bufferRecyclable;",
      "info" : "FieldDeclaration[1422-1708]:FieldDeclaration[1422-1708]"
    }, {
      "left" : "protected ObjectCodec _objectCodec;",
      "right" : "protected ObjectCodec _objectCodec;",
      "info" : "FieldDeclaration[1879-1914]:FieldDeclaration[1879-1914]"
    }, {
      "left" : "final protected CharsToNameCanonicalizer _symbols;",
      "right" : "final protected CharsToNameCanonicalizer _symbols;",
      "info" : "FieldDeclaration[1920-1970]:FieldDeclaration[1920-1970]"
    }, {
      "left" : "final protected int _hashSeed;",
      "right" : "final protected int _hashSeed;",
      "info" : "FieldDeclaration[1976-2006]:FieldDeclaration[1976-2006]"
    }, {
      "left" : "protected boolean _tokenIncomplete;",
      "right" : "protected boolean _tokenIncomplete;",
      "info" : "FieldDeclaration[2177-2405]:FieldDeclaration[2177-2405]"
    }, {
      "left" : "protected long _nameStartOffset;",
      "right" : "protected long _nameStartOffset;",
      "info" : "FieldDeclaration[2411-2737]:FieldDeclaration[2411-2737]"
    }, {
      "left" : "protected int _nameStartRow;",
      "right" : "protected int _nameStartRow;",
      "info" : "FieldDeclaration[2743-2805]:FieldDeclaration[2743-2805]"
    }, {
      "left" : "protected int _nameStartCol;",
      "right" : "protected int _nameStartCol;",
      "info" : "FieldDeclaration[2811-2873]:FieldDeclaration[2811-2873]"
    }, {
      "left" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n            ObjectCodec codec, CharsToNameCanonicalizer st,\n            char[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "right" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n            ObjectCodec codec, CharsToNameCanonicalizer st,\n            char[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "info" : "MethodDeclaration[3041-3732]:MethodDeclaration[3041-3732]"
    }, {
      "left" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n        ObjectCodec codec, CharsToNameCanonicalizer st)",
      "right" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n        ObjectCodec codec, CharsToNameCanonicalizer st)",
      "info" : "MethodDeclaration[3738-4291]:MethodDeclaration[3738-4291]"
    }, {
      "left" : "public ObjectCodec getCodec()",
      "right" : "public ObjectCodec getCodec()",
      "info" : "MethodDeclaration[4476-4540]:MethodDeclaration[4476-4540]"
    }, {
      "left" : "public void setCodec(ObjectCodec c)",
      "right" : "public void setCodec(ObjectCodec c)",
      "info" : "MethodDeclaration[4545-4612]:MethodDeclaration[4545-4612]"
    }, {
      "left" : "public int releaseBuffered(Writer w) throws IOException",
      "right" : "public int releaseBuffered(Writer w) throws IOException",
      "info" : "MethodDeclaration[4618-4918]:MethodDeclaration[4618-4918]"
    }, {
      "left" : "public Object getInputSource()",
      "right" : "public Object getInputSource()",
      "info" : "MethodDeclaration[4924-4984]:MethodDeclaration[4924-4984]"
    }, {
      "left" : "protected boolean loadMore() throws IOException",
      "right" : "protected boolean loadMore() throws IOException",
      "info" : "MethodDeclaration[4990-5990]:MethodDeclaration[4990-5990]"
    }, {
      "left" : "protected char getNextChar(String eofMsg) throws IOException",
      "right" : "protected char getNextChar(String eofMsg) throws IOException",
      "info" : "MethodDeclaration[5996-6214]:MethodDeclaration[5996-6214]"
    }, {
      "left" : "protected void _closeInput() throws IOException",
      "right" : "protected void _closeInput() throws IOException",
      "info" : "MethodDeclaration[6220-6881]:MethodDeclaration[6220-6881]"
    }, {
      "left" : "protected void _releaseBuffers() throws IOException",
      "right" : "protected void _releaseBuffers() throws IOException",
      "info" : "MethodDeclaration[6887-7586]:MethodDeclaration[6887-7586]"
    }, {
      "left" : "public final String getText() throws IOException",
      "right" : "public final String getText() throws IOException",
      "info" : "MethodDeclaration[7767-8426]:MethodDeclaration[7767-8426]"
    }, {
      "left" : "public final String getValueAsString() throws IOException",
      "right" : "public final String getValueAsString() throws IOException",
      "info" : "MethodDeclaration[8518-9015]:MethodDeclaration[8518-9015]"
    }, {
      "left" : "public final String getValueAsString(String defValue) throws IOException",
      "right" : "public final String getValueAsString(String defValue) throws IOException",
      "info" : "MethodDeclaration[9039-9551]:MethodDeclaration[9039-9551]"
    }, {
      "left" : "protected final String _getText2(JsonToken t)",
      "right" : "protected final String _getText2(JsonToken t)",
      "info" : "MethodDeclaration[9557-9999]:MethodDeclaration[9557-9999]"
    }, {
      "left" : "public final char[] getTextCharacters() throws IOException",
      "right" : "public final char[] getTextCharacters() throws IOException",
      "info" : "MethodDeclaration[10005-11299]:MethodDeclaration[10005-11299]"
    }, {
      "left" : "public final int getTextLength() throws IOException",
      "right" : "public final int getTextLength() throws IOException",
      "info" : "MethodDeclaration[11305-12051]:MethodDeclaration[11305-12051]"
    }, {
      "left" : "public final int getTextOffset() throws IOException",
      "right" : "public final int getTextOffset() throws IOException",
      "info" : "MethodDeclaration[12057-12748]:MethodDeclaration[12057-12748]"
    }, {
      "left" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "right" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[12754-14086]:MethodDeclaration[12754-14086]"
    }, {
      "left" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "right" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "info" : "MethodDeclaration[14092-14726]:MethodDeclaration[14092-14726]"
    }, {
      "left" : "protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException",
      "right" : "protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException",
      "info" : "MethodDeclaration[14732-19868]:MethodDeclaration[14732-19868]"
    }, {
      "left" : "public final JsonToken nextToken() throws IOException",
      "right" : "public final JsonToken nextToken() throws IOException",
      "info" : "MethodDeclaration[20047-24459]:MethodDeclaration[20047-24459]"
    }, {
      "left" : "private final JsonToken _nextAfterName()",
      "right" : "private final JsonToken _nextAfterName()",
      "info" : "MethodDeclaration[24465-25132]:MethodDeclaration[24465-25132]"
    }, {
      "left" : "public boolean nextFieldName(SerializableString sstr) throws IOException",
      "right" : "public boolean nextFieldName(SerializableString sstr) throws IOException",
      "info" : "MethodDeclaration[25350-28016]:MethodDeclaration[25350-28016]"
    }, {
      "left" : "public String nextFieldName() throws IOException",
      "right" : "public String nextFieldName() throws IOException",
      "info" : "MethodDeclaration[28022-30851]:MethodDeclaration[28022-30851]"
    }, {
      "left" : "private final void _isNextTokenNameYes(int i) throws IOException",
      "right" : "private final void _isNextTokenNameYes(int i) throws IOException",
      "info" : "MethodDeclaration[30857-32065]:MethodDeclaration[30857-32065]"
    }, {
      "left" : "protected boolean _isNextTokenNameMaybe(int i, String nameToMatch) throws IOException",
      "right" : "protected boolean _isNextTokenNameMaybe(int i, String nameToMatch) throws IOException",
      "info" : "MethodDeclaration[32071-33619]:MethodDeclaration[32071-33619]"
    }, {
      "left" : "private final JsonToken _nextTokenNotInObject(int i) throws IOException",
      "right" : "private final JsonToken _nextTokenNotInObject(int i) throws IOException",
      "info" : "MethodDeclaration[33625-35143]:MethodDeclaration[33625-35143]"
    }, {
      "left" : "public final String nextTextValue() throws IOException",
      "right" : "public final String nextTextValue() throws IOException",
      "info" : "MethodDeclaration[35203-36246]:MethodDeclaration[35203-36246]"
    }, {
      "left" : "public final int nextIntValue(int defaultValue) throws IOException",
      "right" : "public final int nextIntValue(int defaultValue) throws IOException",
      "info" : "MethodDeclaration[36302-37188]:MethodDeclaration[36302-37188]"
    }, {
      "left" : "public final long nextLongValue(long defaultValue) throws IOException",
      "right" : "public final long nextLongValue(long defaultValue) throws IOException",
      "info" : "MethodDeclaration[37244-38174]:MethodDeclaration[37244-38174]"
    }, {
      "left" : "public final Boolean nextBooleanValue() throws IOException",
      "right" : "public final Boolean nextBooleanValue() throws IOException",
      "info" : "MethodDeclaration[38234-39321]:MethodDeclaration[38234-39321]"
    }, {
      "left" : "protected final JsonToken _parsePosNumber(int ch) throws IOException",
      "right" : "protected final JsonToken _parsePosNumber(int ch) throws IOException",
      "info" : "MethodDeclaration[39511-42265]:MethodDeclaration[39511-42265]"
    }, {
      "left" : "private final JsonToken _parseFloat(int ch, int startPtr, int ptr, boolean neg, int intLen)\n        throws IOException",
      "right" : "private final JsonToken _parseFloat(int ch, int startPtr, int ptr, boolean neg, int intLen)\n        throws IOException",
      "info" : "MethodDeclaration[42271-44653]:MethodDeclaration[42271-44653]"
    }, {
      "left" : "protected final JsonToken _parseNegNumber() throws IOException",
      "right" : "protected final JsonToken _parseNegNumber() throws IOException",
      "info" : "MethodDeclaration[44659-46170]:MethodDeclaration[44659-46170]"
    }, {
      "left" : "private final JsonToken _parseNumber2(boolean neg, int startPtr) throws IOException",
      "right" : "private final JsonToken _parseNumber2(boolean neg, int startPtr) throws IOException",
      "info" : "MethodDeclaration[46176-50827]:MethodDeclaration[46176-50973]"
    }, {
      "left" : "private final char _verifyNoLeadingZeroes() throws IOException",
      "right" : "private final char _verifyNoLeadingZeroes() throws IOException",
      "info" : "MethodDeclaration[50833-51399]:MethodDeclaration[50979-51545]"
    }, {
      "left" : "private char _verifyNLZ2() throws IOException",
      "right" : "private char _verifyNLZ2() throws IOException",
      "info" : "MethodDeclaration[51405-52435]:MethodDeclaration[51551-52581]"
    }, {
      "left" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException",
      "right" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException",
      "info" : "MethodDeclaration[52441-53921]:MethodDeclaration[52587-54067]"
    }, {
      "left" : "private final void _verifyRootSpace(int ch) throws IOException",
      "right" : "private final void _verifyRootSpace(int ch) throws IOException",
      "info" : "MethodDeclaration[53927-54624]:MethodDeclaration[54073-54770]"
    }, {
      "left" : "protected final String _parseName() throws IOException",
      "right" : "protected final String _parseName() throws IOException",
      "info" : "MethodDeclaration[54817-55754]:MethodDeclaration[54963-55900]"
    }, {
      "left" : "private String _parseName2(int startPtr, int hash, int endChar) throws IOException",
      "right" : "private String _parseName2(int startPtr, int hash, int endChar) throws IOException",
      "info" : "MethodDeclaration[55760-57775]:MethodDeclaration[55906-57921]"
    }, {
      "left" : "protected String _handleOddName(int i) throws IOException",
      "right" : "protected String _handleOddName(int i) throws IOException",
      "info" : "MethodDeclaration[57781-60129]:MethodDeclaration[57927-60275]"
    }, {
      "left" : "protected String _parseAposName() throws IOException",
      "right" : "protected String _parseAposName() throws IOException",
      "info" : "MethodDeclaration[60135-61118]:MethodDeclaration[60281-61264]"
    }, {
      "left" : "protected JsonToken _handleOddValue(int i) throws IOException",
      "right" : "protected JsonToken _handleOddValue(int i) throws IOException",
      "info" : "MethodDeclaration[61124-63326]:MethodDeclaration[61270-63472]"
    }, {
      "left" : "protected JsonToken _handleApos() throws IOException",
      "right" : "protected JsonToken _handleApos() throws IOException",
      "info" : "MethodDeclaration[63332-64795]:MethodDeclaration[63478-64941]"
    }, {
      "left" : "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException",
      "right" : "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException",
      "info" : "MethodDeclaration[64801-66286]:MethodDeclaration[64947-66432]"
    }, {
      "left" : "protected final void _finishString() throws IOException",
      "right" : "protected final void _finishString() throws IOException",
      "info" : "MethodDeclaration[66292-67481]:MethodDeclaration[66438-67627]"
    }, {
      "left" : "protected void _finishString2() throws IOException",
      "right" : "protected void _finishString2() throws IOException",
      "info" : "MethodDeclaration[67487-68947]:MethodDeclaration[67633-69093]"
    }, {
      "left" : "protected final void _skipString() throws IOException",
      "right" : "protected final void _skipString() throws IOException",
      "info" : "MethodDeclaration[68953-70559]:MethodDeclaration[69099-70705]"
    }, {
      "left" : "protected final void _skipCR() throws IOException",
      "right" : "protected final void _skipCR() throws IOException",
      "info" : "MethodDeclaration[70748-71143]:MethodDeclaration[70894-71289]"
    }, {
      "left" : "private final int _skipColon() throws IOException",
      "right" : "private final int _skipColon() throws IOException",
      "info" : "MethodDeclaration[71149-72956]:MethodDeclaration[71295-73102]"
    }, {
      "left" : "private final int _skipColon2(boolean gotColon) throws IOException",
      "right" : "private final int _skipColon2(boolean gotColon) throws IOException",
      "info" : "MethodDeclaration[72962-74193]:MethodDeclaration[73108-74339]"
    }, {
      "left" : "private final int _skipColonFast(int ptr) throws IOException",
      "right" : "private final int _skipColonFast(int ptr) throws IOException",
      "info" : "MethodDeclaration[74274-75887]:MethodDeclaration[74420-76033]"
    }, {
      "left" : "private final int _skipComma(int i) throws IOException",
      "right" : "private final int _skipComma(int i) throws IOException",
      "info" : "MethodDeclaration[75945-76874]:MethodDeclaration[76091-77020]"
    }, {
      "left" : "private final int _skipAfterComma2() throws IOException",
      "right" : "private final int _skipAfterComma2() throws IOException",
      "info" : "MethodDeclaration[76880-77879]:MethodDeclaration[77026-78025]"
    }, {
      "left" : "private final int _skipWSOrEnd() throws IOException",
      "right" : "private final int _skipWSOrEnd() throws IOException",
      "info" : "MethodDeclaration[77885-79485]:MethodDeclaration[78031-79631]"
    }, {
      "left" : "private int _skipWSOrEnd2() throws IOException",
      "right" : "private int _skipWSOrEnd2() throws IOException",
      "info" : "MethodDeclaration[79491-80509]:MethodDeclaration[79637-80655]"
    }, {
      "left" : "private void _skipComment() throws IOException",
      "right" : "private void _skipComment() throws IOException",
      "info" : "MethodDeclaration[80515-81221]:MethodDeclaration[80661-81367]"
    }, {
      "left" : "private void _skipCComment() throws IOException",
      "right" : "private void _skipCComment() throws IOException",
      "info" : "MethodDeclaration[81227-82280]:MethodDeclaration[81373-82426]"
    }, {
      "left" : "private boolean _skipYAMLComment() throws IOException",
      "right" : "private boolean _skipYAMLComment() throws IOException",
      "info" : "MethodDeclaration[82286-82484]:MethodDeclaration[82432-82630]"
    }, {
      "left" : "private void _skipLine() throws IOException",
      "right" : "private void _skipLine() throws IOException",
      "info" : "MethodDeclaration[82490-83110]:MethodDeclaration[82636-83256]"
    }, {
      "left" : "protected char _decodeEscaped() throws IOException",
      "right" : "protected char _decodeEscaped() throws IOException",
      "info" : "MethodDeclaration[83116-84582]:MethodDeclaration[83262-84728]"
    }, {
      "left" : "private final void _matchTrue() throws IOException",
      "right" : "private final void _matchTrue() throws IOException",
      "info" : "MethodDeclaration[84588-85129]:MethodDeclaration[84734-85275]"
    }, {
      "left" : "private final void _matchFalse() throws IOException",
      "right" : "private final void _matchFalse() throws IOException",
      "info" : "MethodDeclaration[85135-85697]:MethodDeclaration[85281-85843]"
    }, {
      "left" : "private final void _matchNull() throws IOException",
      "right" : "private final void _matchNull() throws IOException",
      "info" : "MethodDeclaration[85703-86244]:MethodDeclaration[85849-86390]"
    }, {
      "left" : "protected final void _matchToken(String matchStr, int i) throws IOException",
      "right" : "protected final void _matchToken(String matchStr, int i) throws IOException",
      "info" : "MethodDeclaration[86250-87372]:MethodDeclaration[86396-87518]"
    }, {
      "left" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "right" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[87543-92277]:MethodDeclaration[87689-92423]"
    }, {
      "left" : "public JsonLocation getTokenLocation()",
      "right" : "public JsonLocation getTokenLocation()",
      "info" : "MethodDeclaration[92490-92958]:MethodDeclaration[92636-93104]"
    }, {
      "left" : "public JsonLocation getCurrentLocation()",
      "right" : "public JsonLocation getCurrentLocation()",
      "info" : "MethodDeclaration[92964-93247]:MethodDeclaration[93110-93393]"
    }, {
      "left" : "private final void _updateLocation()",
      "right" : "private final void _updateLocation()",
      "info" : "MethodDeclaration[93271-93493]:MethodDeclaration[93417-93639]"
    }, {
      "left" : "private final void _updateNameLocation()",
      "right" : "private final void _updateNameLocation()",
      "info" : "MethodDeclaration[93517-93719]:MethodDeclaration[93663-93865]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "info" : "MethodDeclaration[93892-94049]:MethodDeclaration[94038-94195]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart, String msg) throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart, String msg) throws IOException",
      "info" : "MethodDeclaration[94055-94840]:MethodDeclaration[94201-94986]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[574-580]:Modifier[574-580]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[581-586]:TYPE_DECLARATION_KIND[581-586]"
    }, {
      "left" : "ReaderBasedJsonParser",
      "right" : "ReaderBasedJsonParser",
      "info" : "SimpleName[587-608]:SimpleName[587-608]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3228-3234]:Modifier[3228-3234]"
    }, {
      "left" : "ReaderBasedJsonParser",
      "right" : "ReaderBasedJsonParser",
      "info" : "SimpleName[3235-3256]:SimpleName[3235-3256]"
    }, {
      "left" : "IOContext ctxt",
      "right" : "IOContext ctxt",
      "info" : "SingleVariableDeclaration[3257-3271]:SingleVariableDeclaration[3257-3271]"
    }, {
      "left" : "int features",
      "right" : "int features",
      "info" : "SingleVariableDeclaration[3273-3285]:SingleVariableDeclaration[3273-3285]"
    }, {
      "left" : "Reader r",
      "right" : "Reader r",
      "info" : "SingleVariableDeclaration[3287-3295]:SingleVariableDeclaration[3287-3295]"
    }, {
      "left" : "ObjectCodec codec",
      "right" : "ObjectCodec codec",
      "info" : "SingleVariableDeclaration[3309-3326]:SingleVariableDeclaration[3309-3326]"
    }, {
      "left" : "CharsToNameCanonicalizer st",
      "right" : "CharsToNameCanonicalizer st",
      "info" : "SingleVariableDeclaration[3328-3355]:SingleVariableDeclaration[3328-3355]"
    }, {
      "left" : "char[] inputBuffer",
      "right" : "char[] inputBuffer",
      "info" : "SingleVariableDeclaration[3369-3387]:SingleVariableDeclaration[3369-3387]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[3389-3398]:SingleVariableDeclaration[3389-3398]"
    }, {
      "left" : "int end",
      "right" : "int end",
      "info" : "SingleVariableDeclaration[3400-3407]:SingleVariableDeclaration[3400-3407]"
    }, {
      "left" : "boolean bufferRecyclable",
      "right" : "boolean bufferRecyclable",
      "info" : "SingleVariableDeclaration[3421-3445]:SingleVariableDeclaration[3421-3445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3451-3732]:Block[3451-3732]"
    }, {
      "left" : "super(ctxt, features);",
      "right" : "super(ctxt, features);",
      "info" : "SuperConstructorInvocation[3461-3483]:SuperConstructorInvocation[3461-3483]"
    }, {
      "left" : "_reader = r;",
      "right" : "_reader = r;",
      "info" : "ExpressionStatement[3492-3504]:ExpressionStatement[3492-3504]"
    }, {
      "left" : "_inputBuffer = inputBuffer;",
      "right" : "_inputBuffer = inputBuffer;",
      "info" : "ExpressionStatement[3513-3540]:ExpressionStatement[3513-3540]"
    }, {
      "left" : "_inputPtr = start;",
      "right" : "_inputPtr = start;",
      "info" : "ExpressionStatement[3549-3567]:ExpressionStatement[3549-3567]"
    }, {
      "left" : "_inputEnd = end;",
      "right" : "_inputEnd = end;",
      "info" : "ExpressionStatement[3576-3592]:ExpressionStatement[3576-3592]"
    }, {
      "left" : "_objectCodec = codec;",
      "right" : "_objectCodec = codec;",
      "info" : "ExpressionStatement[3601-3622]:ExpressionStatement[3601-3622]"
    }, {
      "left" : "_symbols = st;",
      "right" : "_symbols = st;",
      "info" : "ExpressionStatement[3631-3645]:ExpressionStatement[3631-3645]"
    }, {
      "left" : "_hashSeed = st.hashSeed();",
      "right" : "_hashSeed = st.hashSeed();",
      "info" : "ExpressionStatement[3654-3680]:ExpressionStatement[3654-3680]"
    }, {
      "left" : "_bufferRecyclable = bufferRecyclable;",
      "right" : "_bufferRecyclable = bufferRecyclable;",
      "info" : "ExpressionStatement[3689-3726]:ExpressionStatement[3689-3726]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3887-3893]:Modifier[3887-3893]"
    }, {
      "left" : "ReaderBasedJsonParser",
      "right" : "ReaderBasedJsonParser",
      "info" : "SimpleName[3894-3915]:SimpleName[3894-3915]"
    }, {
      "left" : "IOContext ctxt",
      "right" : "IOContext ctxt",
      "info" : "SingleVariableDeclaration[3916-3930]:SingleVariableDeclaration[3916-3930]"
    }, {
      "left" : "int features",
      "right" : "int features",
      "info" : "SingleVariableDeclaration[3932-3944]:SingleVariableDeclaration[3932-3944]"
    }, {
      "left" : "Reader r",
      "right" : "Reader r",
      "info" : "SingleVariableDeclaration[3946-3954]:SingleVariableDeclaration[3946-3954]"
    }, {
      "left" : "ObjectCodec codec",
      "right" : "ObjectCodec codec",
      "info" : "SingleVariableDeclaration[3964-3981]:SingleVariableDeclaration[3964-3981]"
    }, {
      "left" : "CharsToNameCanonicalizer st",
      "right" : "CharsToNameCanonicalizer st",
      "info" : "SingleVariableDeclaration[3983-4010]:SingleVariableDeclaration[3983-4010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4016-4291]:Block[4016-4291]"
    }, {
      "left" : "super(ctxt, features);",
      "right" : "super(ctxt, features);",
      "info" : "SuperConstructorInvocation[4026-4048]:SuperConstructorInvocation[4026-4048]"
    }, {
      "left" : "_reader = r;",
      "right" : "_reader = r;",
      "info" : "ExpressionStatement[4057-4069]:ExpressionStatement[4057-4069]"
    }, {
      "left" : "_inputBuffer = ctxt.allocTokenBuffer();",
      "right" : "_inputBuffer = ctxt.allocTokenBuffer();",
      "info" : "ExpressionStatement[4078-4117]:ExpressionStatement[4078-4117]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[4126-4140]:ExpressionStatement[4126-4140]"
    }, {
      "left" : "_inputEnd = 0;",
      "right" : "_inputEnd = 0;",
      "info" : "ExpressionStatement[4149-4163]:ExpressionStatement[4149-4163]"
    }, {
      "left" : "_objectCodec = codec;",
      "right" : "_objectCodec = codec;",
      "info" : "ExpressionStatement[4172-4193]:ExpressionStatement[4172-4193]"
    }, {
      "left" : "_symbols = st;",
      "right" : "_symbols = st;",
      "info" : "ExpressionStatement[4202-4216]:ExpressionStatement[4202-4216]"
    }, {
      "left" : "_hashSeed = st.hashSeed();",
      "right" : "_hashSeed = st.hashSeed();",
      "info" : "ExpressionStatement[4225-4251]:ExpressionStatement[4225-4251]"
    }, {
      "left" : "_bufferRecyclable = true;",
      "right" : "_bufferRecyclable = true;",
      "info" : "ExpressionStatement[4260-4285]:ExpressionStatement[4260-4285]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4476-4485]:MarkerAnnotation[4476-4485]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4486-4492]:Modifier[4486-4492]"
    }, {
      "left" : "ObjectCodec",
      "right" : "ObjectCodec",
      "info" : "SimpleType[4493-4504]:SimpleType[4493-4504]"
    }, {
      "left" : "getCodec",
      "right" : "getCodec",
      "info" : "SimpleName[4505-4513]:SimpleName[4505-4513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4516-4540]:Block[4516-4540]"
    }, {
      "left" : "return _objectCodec;",
      "right" : "return _objectCodec;",
      "info" : "ReturnStatement[4518-4538]:ReturnStatement[4518-4538]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4545-4554]:MarkerAnnotation[4545-4554]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4555-4561]:Modifier[4555-4561]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4562-4566]:PrimitiveType[4562-4566]"
    }, {
      "left" : "setCodec",
      "right" : "setCodec",
      "info" : "SimpleName[4567-4575]:SimpleName[4567-4575]"
    }, {
      "left" : "ObjectCodec c",
      "right" : "ObjectCodec c",
      "info" : "SingleVariableDeclaration[4576-4589]:SingleVariableDeclaration[4576-4589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4591-4612]:Block[4591-4612]"
    }, {
      "left" : "_objectCodec = c;",
      "right" : "_objectCodec = c;",
      "info" : "ExpressionStatement[4593-4610]:ExpressionStatement[4593-4610]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4618-4627]:MarkerAnnotation[4618-4627]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4632-4638]:Modifier[4632-4638]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4639-4642]:PrimitiveType[4639-4642]"
    }, {
      "left" : "releaseBuffered",
      "right" : "releaseBuffered",
      "info" : "SimpleName[4643-4658]:SimpleName[4643-4658]"
    }, {
      "left" : "Writer w",
      "right" : "Writer w",
      "info" : "SingleVariableDeclaration[4659-4667]:SingleVariableDeclaration[4659-4667]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4676-4687]:SimpleType[4676-4687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4688-4918]:Block[4688-4918]"
    }, {
      "left" : "int count = _inputEnd - _inputPtr;",
      "right" : "int count = _inputEnd - _inputPtr;",
      "info" : "VariableDeclarationStatement[4698-4732]:VariableDeclarationStatement[4698-4732]"
    }, {
      "left" : "if (count < 1)",
      "right" : "if (count < 1)",
      "info" : "IfStatement[4741-4769]:IfStatement[4741-4769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4756-4769]:Block[4756-4769]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[4758-4767]:ReturnStatement[4758-4767]"
    }, {
      "left" : "int origPtr = _inputPtr;",
      "right" : "int origPtr = _inputPtr;",
      "info" : "VariableDeclarationStatement[4819-4843]:VariableDeclarationStatement[4819-4843]"
    }, {
      "left" : "w.write(_inputBuffer, origPtr, count);",
      "right" : "w.write(_inputBuffer, origPtr, count);",
      "info" : "ExpressionStatement[4852-4890]:ExpressionStatement[4852-4890]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[4899-4912]:ReturnStatement[4899-4912]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4924-4933]:MarkerAnnotation[4924-4933]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4934-4940]:Modifier[4934-4940]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[4941-4947]:SimpleType[4941-4947]"
    }, {
      "left" : "getInputSource",
      "right" : "getInputSource",
      "info" : "SimpleName[4948-4962]:SimpleName[4948-4962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4965-4984]:Block[4965-4984]"
    }, {
      "left" : "return _reader;",
      "right" : "return _reader;",
      "info" : "ReturnStatement[4967-4982]:ReturnStatement[4967-4982]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4990-4999]:MarkerAnnotation[4990-4999]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5004-5013]:Modifier[5004-5013]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5014-5021]:PrimitiveType[5014-5021]"
    }, {
      "left" : "loadMore",
      "right" : "loadMore",
      "info" : "SimpleName[5022-5030]:SimpleName[5022-5030]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5040-5051]:SimpleType[5040-5051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5056-5990]:Block[5056-5990]"
    }, {
      "left" : "final int bufSize = _inputEnd;",
      "right" : "final int bufSize = _inputEnd;",
      "info" : "VariableDeclarationStatement[5066-5096]:VariableDeclarationStatement[5066-5096]"
    }, {
      "left" : "_currInputProcessed += bufSize;",
      "right" : "_currInputProcessed += bufSize;",
      "info" : "ExpressionStatement[5106-5137]:ExpressionStatement[5106-5137]"
    }, {
      "left" : "_currInputRowStart -= bufSize;",
      "right" : "_currInputRowStart -= bufSize;",
      "info" : "ExpressionStatement[5146-5176]:ExpressionStatement[5146-5176]"
    }, {
      "left" : "_nameStartOffset -= bufSize;",
      "right" : "_nameStartOffset -= bufSize;",
      "info" : "ExpressionStatement[5425-5453]:ExpressionStatement[5425-5453]"
    }, {
      "left" : "if (_reader != null)",
      "right" : "if (_reader != null)",
      "info" : "IfStatement[5463-5962]:IfStatement[5463-5962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5484-5962]:Block[5484-5962]"
    }, {
      "left" : "int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);",
      "right" : "int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);",
      "info" : "VariableDeclarationStatement[5498-5561]:VariableDeclarationStatement[5498-5561]"
    }, {
      "left" : "if (count > 0)",
      "right" : "if (count > 0)",
      "info" : "IfStatement[5574-5699]:IfStatement[5574-5699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5589-5699]:Block[5589-5699]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[5607-5621]:ExpressionStatement[5607-5621]"
    }, {
      "left" : "_inputEnd = count;",
      "right" : "_inputEnd = count;",
      "info" : "ExpressionStatement[5638-5656]:ExpressionStatement[5638-5656]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5673-5685]:ReturnStatement[5673-5685]"
    }, {
      "left" : "_closeInput();",
      "right" : "_closeInput();",
      "info" : "ExpressionStatement[5740-5754]:ExpressionStatement[5740-5754]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[5819-5952]:IfStatement[5819-5952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5835-5952]:Block[5835-5952]"
    }, {
      "left" : "throw new IOException(\"Reader returned 0 characters when trying to read \"+_inputEnd);",
      "right" : "throw new IOException(\"Reader returned 0 characters when trying to read \"+_inputEnd);",
      "info" : "ThrowStatement[5853-5938]:ThrowStatement[5853-5938]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5971-5984]:ReturnStatement[5971-5984]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5996-6005]:Modifier[5996-6005]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[6006-6010]:PrimitiveType[6006-6010]"
    }, {
      "left" : "getNextChar",
      "right" : "getNextChar",
      "info" : "SimpleName[6011-6022]:SimpleName[6011-6022]"
    }, {
      "left" : "String eofMsg",
      "right" : "String eofMsg",
      "info" : "SingleVariableDeclaration[6023-6036]:SingleVariableDeclaration[6023-6036]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6045-6056]:SimpleType[6045-6056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6057-6214]:Block[6057-6214]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[6067-6166]:IfStatement[6067-6166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6095-6166]:Block[6095-6166]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[6109-6156]:IfStatement[6109-6156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6126-6156]:Block[6126-6156]"
    }, {
      "left" : "_reportInvalidEOF(eofMsg);",
      "right" : "_reportInvalidEOF(eofMsg);",
      "info" : "ExpressionStatement[6128-6154]:ExpressionStatement[6128-6154]"
    }, {
      "left" : "return _inputBuffer[_inputPtr++];",
      "right" : "return _inputBuffer[_inputPtr++];",
      "info" : "ReturnStatement[6175-6208]:ReturnStatement[6175-6208]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6220-6229]:MarkerAnnotation[6220-6229]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[6234-6243]:Modifier[6234-6243]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6244-6248]:PrimitiveType[6244-6248]"
    }, {
      "left" : "_closeInput",
      "right" : "_closeInput",
      "info" : "SimpleName[6249-6260]:SimpleName[6249-6260]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6270-6281]:SimpleType[6270-6281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6282-6881]:Block[6282-6881]"
    }, {
      "left" : "if (_reader != null)",
      "right" : "if (_reader != null)",
      "info" : "IfStatement[6678-6875]:IfStatement[6678-6875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6699-6875]:Block[6699-6875]"
    }, {
      "left" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "right" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "info" : "IfStatement[6713-6837]:IfStatement[6713-6837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6789-6837]:Block[6789-6837]"
    }, {
      "left" : "_reader.close();",
      "right" : "_reader.close();",
      "info" : "ExpressionStatement[6807-6823]:ExpressionStatement[6807-6823]"
    }, {
      "left" : "_reader = null;",
      "right" : "_reader = null;",
      "info" : "ExpressionStatement[6850-6865]:ExpressionStatement[6850-6865]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7139-7148]:MarkerAnnotation[7139-7148]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7153-7162]:Modifier[7153-7162]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7163-7167]:PrimitiveType[7163-7167]"
    }, {
      "left" : "_releaseBuffers",
      "right" : "_releaseBuffers",
      "info" : "SimpleName[7168-7183]:SimpleName[7168-7183]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7193-7204]:SimpleType[7193-7204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7205-7586]:Block[7205-7586]"
    }, {
      "left" : "super._releaseBuffers();",
      "right" : "super._releaseBuffers();",
      "info" : "ExpressionStatement[7215-7239]:ExpressionStatement[7215-7239]"
    }, {
      "left" : "_symbols.release();",
      "right" : "_symbols.release();",
      "info" : "ExpressionStatement[7285-7304]:ExpressionStatement[7285-7304]"
    }, {
      "left" : "if (_bufferRecyclable)",
      "right" : "if (_bufferRecyclable)",
      "info" : "IfStatement[7373-7580]:IfStatement[7373-7580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7396-7580]:Block[7396-7580]"
    }, {
      "left" : "char[] buf = _inputBuffer;",
      "right" : "char[] buf = _inputBuffer;",
      "info" : "VariableDeclarationStatement[7410-7436]:VariableDeclarationStatement[7410-7436]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[7449-7570]:IfStatement[7449-7570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7466-7570]:Block[7466-7570]"
    }, {
      "left" : "_inputBuffer = null;",
      "right" : "_inputBuffer = null;",
      "info" : "ExpressionStatement[7484-7504]:ExpressionStatement[7484-7504]"
    }, {
      "left" : "_ioContext.releaseTokenBuffer(buf);",
      "right" : "_ioContext.releaseTokenBuffer(buf);",
      "info" : "ExpressionStatement[7521-7556]:ExpressionStatement[7521-7556]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8026-8035]:MarkerAnnotation[8026-8035]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8040-8046]:Modifier[8040-8046]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[8047-8052]:Modifier[8047-8052]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8053-8059]:SimpleType[8053-8059]"
    }, {
      "left" : "getText",
      "right" : "getText",
      "info" : "SimpleName[8060-8067]:SimpleName[8060-8067]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8077-8088]:SimpleType[8077-8088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8093-8426]:Block[8093-8426]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[8103-8128]:VariableDeclarationStatement[8103-8128]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[8137-8391]:IfStatement[8137-8391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8170-8391]:Block[8170-8391]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[8184-8330]:IfStatement[8184-8330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8206-8330]:Block[8206-8330]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[8224-8249]:ExpressionStatement[8224-8249]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[8266-8282]:ExpressionStatement[8266-8282]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[8343-8381]:ReturnStatement[8343-8381]"
    }, {
      "left" : "return _getText2(t);",
      "right" : "return _getText2(t);",
      "info" : "ReturnStatement[8400-8420]:ReturnStatement[8400-8420]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8518-8527]:MarkerAnnotation[8518-8527]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8532-8538]:Modifier[8532-8538]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[8539-8544]:Modifier[8539-8544]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8545-8551]:SimpleType[8545-8551]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[8552-8568]:SimpleName[8552-8568]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8578-8589]:SimpleType[8578-8589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8594-9015]:Block[8594-9015]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[8604-8867]:IfStatement[8604-8867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8646-8867]:Block[8646-8867]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[8660-8806]:IfStatement[8660-8806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8682-8806]:Block[8682-8806]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[8700-8725]:ExpressionStatement[8700-8725]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[8742-8758]:ExpressionStatement[8742-8758]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[8819-8857]:ReturnStatement[8819-8857]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[8876-8964]:IfStatement[8876-8964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8916-8964]:Block[8916-8964]"
    }, {
      "left" : "return getCurrentName();",
      "right" : "return getCurrentName();",
      "info" : "ReturnStatement[8930-8954]:ReturnStatement[8930-8954]"
    }, {
      "left" : "return super.getValueAsString(null);",
      "right" : "return super.getValueAsString(null);",
      "info" : "ReturnStatement[8973-9009]:ReturnStatement[8973-9009]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9039-9048]:MarkerAnnotation[9039-9048]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9053-9059]:Modifier[9053-9059]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[9060-9065]:Modifier[9060-9065]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9066-9072]:SimpleType[9066-9072]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[9073-9089]:SimpleName[9073-9089]"
    }, {
      "left" : "String defValue",
      "right" : "String defValue",
      "info" : "SingleVariableDeclaration[9090-9105]:SingleVariableDeclaration[9090-9105]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9114-9125]:SimpleType[9114-9125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9126-9551]:Block[9126-9551]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[9136-9399]:IfStatement[9136-9399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9178-9399]:Block[9178-9399]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[9192-9338]:IfStatement[9192-9338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9214-9338]:Block[9214-9338]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[9232-9257]:ExpressionStatement[9232-9257]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[9274-9290]:ExpressionStatement[9274-9290]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[9351-9389]:ReturnStatement[9351-9389]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[9408-9496]:IfStatement[9408-9496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9448-9496]:Block[9448-9496]"
    }, {
      "left" : "return getCurrentName();",
      "right" : "return getCurrentName();",
      "info" : "ReturnStatement[9462-9486]:ReturnStatement[9462-9486]"
    }, {
      "left" : "return super.getValueAsString(defValue);",
      "right" : "return super.getValueAsString(defValue);",
      "info" : "ReturnStatement[9505-9545]:ReturnStatement[9505-9545]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[9557-9566]:Modifier[9557-9566]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[9567-9572]:Modifier[9567-9572]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9573-9579]:SimpleType[9573-9579]"
    }, {
      "left" : "_getText2",
      "right" : "_getText2",
      "info" : "SimpleName[9580-9589]:SimpleName[9580-9589]"
    }, {
      "left" : "JsonToken t",
      "right" : "JsonToken t",
      "info" : "SingleVariableDeclaration[9590-9601]:SingleVariableDeclaration[9590-9601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9603-9999]:Block[9603-9999]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[9613-9664]:IfStatement[9613-9664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9628-9664]:Block[9628-9664]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9642-9654]:ReturnStatement[9642-9654]"
    }, {
      "left" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n            return t.asString();\n        }",
      "right" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n            return t.asString();\n        }",
      "info" : "SwitchStatement[9673-9993]:SwitchStatement[9673-9993]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[9699-9718]:SwitchCase[9699-9718]"
    }, {
      "left" : "return _parsingContext.getCurrentName();",
      "right" : "return _parsingContext.getCurrentName();",
      "info" : "ReturnStatement[9731-9771]:ReturnStatement[9731-9771]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[9781-9796]:SwitchCase[9781-9796]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[9833-9852]:SwitchCase[9833-9852]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[9861-9882]:SwitchCase[9861-9882]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[9895-9933]:ReturnStatement[9895-9933]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9942-9950]:SwitchCase[9942-9950]"
    }, {
      "left" : "return t.asString();",
      "right" : "return t.asString();",
      "info" : "ReturnStatement[9963-9983]:ReturnStatement[9963-9983]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10005-10014]:MarkerAnnotation[10005-10014]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10019-10025]:Modifier[10019-10025]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[10026-10031]:Modifier[10026-10031]"
    }, {
      "left" : "char[]",
      "right" : "char[]",
      "info" : "ArrayType[10032-10038]:ArrayType[10032-10038]"
    }, {
      "left" : "getTextCharacters",
      "right" : "getTextCharacters",
      "info" : "SimpleName[10039-10056]:SimpleName[10039-10056]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10066-10077]:SimpleType[10066-10077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10082-11299]:Block[10082-11299]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[10092-11272]:IfStatement[10092-11272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10116-11272]:Block[10116-11272]"
    }, {
      "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n            default:\n                return _currToken.asCharArray();\n            }",
      "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n            default:\n                return _currToken.asCharArray();\n            }",
      "info" : "SwitchStatement[10165-11262]:SwitchStatement[10165-11262]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[10204-10223]:SwitchCase[10204-10223]"
    }, {
      "left" : "if (!_nameCopied)",
      "right" : "if (!_nameCopied)",
      "info" : "IfStatement[10240-10785]:IfStatement[10240-10785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10258-10785]:Block[10258-10785]"
    }, {
      "left" : "String name = _parsingContext.getCurrentName();",
      "right" : "String name = _parsingContext.getCurrentName();",
      "info" : "VariableDeclarationStatement[10280-10327]:VariableDeclarationStatement[10280-10327]"
    }, {
      "left" : "int nameLen = name.length();",
      "right" : "int nameLen = name.length();",
      "info" : "VariableDeclarationStatement[10348-10376]:VariableDeclarationStatement[10348-10376]"
    }, {
      "left" : "if (_nameCopyBuffer == null)",
      "right" : "if (_nameCopyBuffer == null)",
      "info" : "IfStatement[10397-10660]:IfStatement[10397-10660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10426-10532]:Block[10426-10532]"
    }, {
      "left" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "right" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "info" : "ExpressionStatement[10452-10510]:ExpressionStatement[10452-10510]"
    }, {
      "left" : "if (_nameCopyBuffer.length < nameLen)",
      "right" : "if (_nameCopyBuffer.length < nameLen)",
      "info" : "IfStatement[10538-10660]:IfStatement[10538-10660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10576-10660]:Block[10576-10660]"
    }, {
      "left" : "_nameCopyBuffer = new char[nameLen];",
      "right" : "_nameCopyBuffer = new char[nameLen];",
      "info" : "ExpressionStatement[10602-10638]:ExpressionStatement[10602-10638]"
    }, {
      "left" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "right" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "info" : "ExpressionStatement[10681-10727]:ExpressionStatement[10681-10727]"
    }, {
      "left" : "_nameCopied = true;",
      "right" : "_nameCopied = true;",
      "info" : "ExpressionStatement[10748-10767]:ExpressionStatement[10748-10767]"
    }, {
      "left" : "return _nameCopyBuffer;",
      "right" : "return _nameCopyBuffer;",
      "info" : "ReturnStatement[10802-10825]:ReturnStatement[10802-10825]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[10838-10853]:SwitchCase[10838-10853]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[10870-11028]:IfStatement[10870-11028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10892-11028]:Block[10892-11028]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[10914-10939]:ExpressionStatement[10914-10939]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[10960-10976]:ExpressionStatement[10960-10976]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[11073-11092]:SwitchCase[11073-11092]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[11105-11126]:SwitchCase[11105-11126]"
    }, {
      "left" : "return _textBuffer.getTextBuffer();",
      "right" : "return _textBuffer.getTextBuffer();",
      "info" : "ReturnStatement[11143-11178]:ReturnStatement[11143-11178]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11191-11199]:SwitchCase[11191-11199]"
    }, {
      "left" : "return _currToken.asCharArray();",
      "right" : "return _currToken.asCharArray();",
      "info" : "ReturnStatement[11216-11248]:ReturnStatement[11216-11248]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11281-11293]:ReturnStatement[11281-11293]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11305-11314]:MarkerAnnotation[11305-11314]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11319-11325]:Modifier[11319-11325]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[11326-11331]:Modifier[11326-11331]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11332-11335]:PrimitiveType[11332-11335]"
    }, {
      "left" : "getTextLength",
      "right" : "getTextLength",
      "info" : "SimpleName[11336-11349]:SimpleName[11336-11349]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11359-11370]:SimpleType[11359-11370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11375-12051]:Block[11375-12051]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[11385-12027]:IfStatement[11385-12027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11409-12027]:Block[11409-12027]"
    }, {
      "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n            default:\n                return _currToken.asCharArray().length;\n            }",
      "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n            default:\n                return _currToken.asCharArray().length;\n            }",
      "info" : "SwitchStatement[11458-12017]:SwitchStatement[11458-12017]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[11497-11516]:SwitchCase[11497-11516]"
    }, {
      "left" : "return _parsingContext.getCurrentName().length();",
      "right" : "return _parsingContext.getCurrentName().length();",
      "info" : "ReturnStatement[11533-11582]:ReturnStatement[11533-11582]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[11595-11610]:SwitchCase[11595-11610]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[11627-11785]:IfStatement[11627-11785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11649-11785]:Block[11649-11785]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[11671-11696]:ExpressionStatement[11671-11696]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[11717-11733]:ExpressionStatement[11717-11733]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[11830-11849]:SwitchCase[11830-11849]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[11862-11883]:SwitchCase[11862-11883]"
    }, {
      "left" : "return _textBuffer.size();",
      "right" : "return _textBuffer.size();",
      "info" : "ReturnStatement[11900-11926]:ReturnStatement[11900-11926]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11939-11947]:SwitchCase[11939-11947]"
    }, {
      "left" : "return _currToken.asCharArray().length;",
      "right" : "return _currToken.asCharArray().length;",
      "info" : "ReturnStatement[11964-12003]:ReturnStatement[11964-12003]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[12036-12045]:ReturnStatement[12036-12045]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12057-12066]:MarkerAnnotation[12057-12066]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12071-12077]:Modifier[12071-12077]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[12078-12083]:Modifier[12078-12083]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12084-12087]:PrimitiveType[12084-12087]"
    }, {
      "left" : "getTextOffset",
      "right" : "getTextOffset",
      "info" : "SimpleName[12088-12101]:SimpleName[12088-12101]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12111-12122]:SimpleType[12111-12122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12127-12748]:Block[12127-12748]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[12204-12724]:IfStatement[12204-12724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12228-12724]:Block[12228-12724]"
    }, {
      "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "info" : "SwitchStatement[12242-12714]:SwitchStatement[12242-12714]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[12281-12300]:SwitchCase[12281-12300]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[12317-12326]:ReturnStatement[12317-12326]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[12339-12354]:SwitchCase[12339-12354]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[12371-12529]:IfStatement[12371-12529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12393-12529]:Block[12393-12529]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[12415-12440]:ExpressionStatement[12415-12440]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[12461-12477]:ExpressionStatement[12461-12477]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[12574-12593]:SwitchCase[12574-12593]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[12606-12627]:SwitchCase[12606-12627]"
    }, {
      "left" : "return _textBuffer.getTextOffset();",
      "right" : "return _textBuffer.getTextOffset();",
      "info" : "ReturnStatement[12644-12679]:ReturnStatement[12644-12679]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12692-12700]:SwitchCase[12692-12700]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[12733-12742]:ReturnStatement[12733-12742]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12754-12763]:MarkerAnnotation[12754-12763]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12768-12774]:Modifier[12768-12774]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[12775-12781]:ArrayType[12775-12781]"
    }, {
      "left" : "getBinaryValue",
      "right" : "getBinaryValue",
      "info" : "SimpleName[12782-12796]:SimpleName[12782-12796]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[12797-12821]:SingleVariableDeclaration[12797-12821]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12830-12841]:SimpleType[12830-12841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12846-14086]:Block[12846-14086]"
    }, {
      "left" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "right" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "info" : "IfStatement[12856-13128]:IfStatement[12856-13128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12989-13128]:Block[12989-13128]"
    }, {
      "left" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "right" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "info" : "ExpressionStatement[13003-13118]:ExpressionStatement[13003-13118]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[13243-14051]:IfStatement[13243-14051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13265-13712]:Block[13265-13712]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13279-13527]:TryStatement[13279-13527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13283-13356]:Block[13283-13356]"
    }, {
      "left" : "_binaryValue = _decodeBase64(b64variant);",
      "right" : "_binaryValue = _decodeBase64(b64variant);",
      "info" : "ExpressionStatement[13301-13342]:ExpressionStatement[13301-13342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13394-13527]:Block[13394-13527]"
    }, {
      "left" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "right" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "info" : "ThrowStatement[13412-13513]:ThrowStatement[13412-13513]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[13677-13702]:ExpressionStatement[13677-13702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13718-14051]:Block[13718-14051]"
    }, {
      "left" : "if (_binaryValue == null)",
      "right" : "if (_binaryValue == null)",
      "info" : "IfStatement[13770-14041]:IfStatement[13770-14041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13796-14041]:Block[13796-14041]"
    }, {
      "left" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[13814-13910]:VariableDeclarationStatement[13814-13910]"
    }, {
      "left" : "_decodeBase64(getText(), builder, b64variant);",
      "right" : "_decodeBase64(getText(), builder, b64variant);",
      "info" : "ExpressionStatement[13927-13973]:ExpressionStatement[13927-13973]"
    }, {
      "left" : "_binaryValue = builder.toByteArray();",
      "right" : "_binaryValue = builder.toByteArray();",
      "info" : "ExpressionStatement[13990-14027]:ExpressionStatement[13990-14027]"
    }, {
      "left" : "return _binaryValue;",
      "right" : "return _binaryValue;",
      "info" : "ReturnStatement[14060-14080]:ReturnStatement[14060-14080]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14092-14101]:MarkerAnnotation[14092-14101]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14106-14112]:Modifier[14106-14112]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14113-14116]:PrimitiveType[14113-14116]"
    }, {
      "left" : "readBinaryValue",
      "right" : "readBinaryValue",
      "info" : "SimpleName[14117-14132]:SimpleName[14117-14132]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[14133-14157]:SingleVariableDeclaration[14133-14157]"
    }, {
      "left" : "OutputStream out",
      "right" : "OutputStream out",
      "info" : "SingleVariableDeclaration[14159-14175]:SingleVariableDeclaration[14159-14175]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14184-14195]:SimpleType[14184-14195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14200-14726]:Block[14200-14726]"
    }, {
      "left" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "right" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "info" : "IfStatement[14286-14466]:IfStatement[14286-14466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14349-14466]:Block[14349-14466]"
    }, {
      "left" : "byte[] b = getBinaryValue(b64variant);",
      "right" : "byte[] b = getBinaryValue(b64variant);",
      "info" : "VariableDeclarationStatement[14363-14401]:VariableDeclarationStatement[14363-14401]"
    }, {
      "left" : "out.write(b);",
      "right" : "out.write(b);",
      "info" : "ExpressionStatement[14414-14427]:ExpressionStatement[14414-14427]"
    }, {
      "left" : "return b.length;",
      "right" : "return b.length;",
      "info" : "ReturnStatement[14440-14456]:ReturnStatement[14440-14456]"
    }, {
      "left" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "right" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "info" : "VariableDeclarationStatement[14529-14573]:VariableDeclarationStatement[14529-14573]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14582-14720]:TryStatement[14582-14720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14586-14651]:Block[14586-14651]"
    }, {
      "left" : "return _readBinary(b64variant, out, buf);",
      "right" : "return _readBinary(b64variant, out, buf);",
      "info" : "ReturnStatement[14600-14641]:ReturnStatement[14600-14641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14660-14720]:Block[14660-14720]"
    }, {
      "left" : "_ioContext.releaseBase64Buffer(buf);",
      "right" : "_ioContext.releaseBase64Buffer(buf);",
      "info" : "ExpressionStatement[14674-14710]:ExpressionStatement[14674-14710]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14732-14741]:Modifier[14732-14741]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14742-14745]:PrimitiveType[14742-14745]"
    }, {
      "left" : "_readBinary",
      "right" : "_readBinary",
      "info" : "SimpleName[14746-14757]:SimpleName[14746-14757]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[14758-14782]:SingleVariableDeclaration[14758-14782]"
    }, {
      "left" : "OutputStream out",
      "right" : "OutputStream out",
      "info" : "SingleVariableDeclaration[14784-14800]:SingleVariableDeclaration[14784-14800]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[14802-14815]:SingleVariableDeclaration[14802-14815]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14824-14835]:SimpleType[14824-14835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14840-19868]:Block[14840-19868]"
    }, {
      "left" : "int outputPtr = 0;",
      "right" : "int outputPtr = 0;",
      "info" : "VariableDeclarationStatement[14850-14868]:VariableDeclarationStatement[14850-14868]"
    }, {
      "left" : "final int outputEnd = buffer.length - 3;",
      "right" : "final int outputEnd = buffer.length - 3;",
      "info" : "VariableDeclarationStatement[14877-14917]:VariableDeclarationStatement[14877-14917]"
    }, {
      "left" : "int outputCount = 0;",
      "right" : "int outputCount = 0;",
      "info" : "VariableDeclarationStatement[14926-14946]:VariableDeclarationStatement[14926-14946]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[14956-19678]:WhileStatement[14956-19678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14969-19678]:Block[14969-19678]"
    }, {
      "left" : "char ch;",
      "right" : "char ch;",
      "info" : "VariableDeclarationStatement[15046-15054]:VariableDeclarationStatement[15046-15054]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[15067-15264]:DoStatement[15067-15264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15070-15239]:Block[15070-15239]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[15088-15177]:IfStatement[15088-15177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15116-15177]:Block[15116-15177]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[15138-15159]:ExpressionStatement[15138-15159]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[15194-15225]:ExpressionStatement[15194-15225]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[15277-15320]:VariableDeclarationStatement[15277-15320]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[15333-15643]:IfStatement[15333-15643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15347-15643]:Block[15347-15643]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[15402-15463]:IfStatement[15402-15463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15417-15463]:Block[15417-15463]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15439-15445]:BreakStatement[15439-15445]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[15480-15526]:ExpressionStatement[15480-15526]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[15543-15629]:IfStatement[15543-15629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15557-15629]:Block[15557-15629]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[15602-15611]:ContinueStatement[15602-15611]"
    }, {
      "left" : "if (outputPtr > outputEnd)",
      "right" : "if (outputPtr > outputEnd)",
      "info" : "IfStatement[15699-15863]:IfStatement[15699-15863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15726-15863]:Block[15726-15863]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[15744-15769]:ExpressionStatement[15744-15769]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[15786-15818]:ExpressionStatement[15786-15818]"
    }, {
      "left" : "outputPtr = 0;",
      "right" : "outputPtr = 0;",
      "info" : "ExpressionStatement[15835-15849]:ExpressionStatement[15835-15849]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[15877-15900]:VariableDeclarationStatement[15877-15900]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[15985-16066]:IfStatement[15985-16066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16013-16066]:Block[16013-16066]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[16031-16052]:ExpressionStatement[16031-16052]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[16079-16110]:ExpressionStatement[16079-16110]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[16123-16162]:ExpressionStatement[16123-16162]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[16175-16267]:IfStatement[16175-16267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16189-16267]:Block[16189-16267]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[16207-16253]:ExpressionStatement[16207-16253]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[16280-16320]:ExpressionStatement[16280-16320]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[16395-16476]:IfStatement[16395-16476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16423-16476]:Block[16423-16476]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[16441-16462]:ExpressionStatement[16441-16462]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[16489-16520]:ExpressionStatement[16489-16520]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[16533-16572]:ExpressionStatement[16533-16572]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[16643-17845]:IfStatement[16643-17845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16657-17845]:Block[16657-17845]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[16675-17120]:IfStatement[16675-17120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16723-17120]:Block[16723-17120]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[16828-17035]:IfStatement[16828-17035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16872-17035]:Block[16872-17035]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[16898-16916]:ExpressionStatement[16898-16916]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[16941-16982]:ExpressionStatement[16941-16982]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17007-17013]:BreakStatement[17007-17013]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[17056-17102]:ExpressionStatement[17056-17102]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[17137-17831]:IfStatement[17137-17831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17185-17831]:Block[17185-17831]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[17251-17348]:IfStatement[17251-17348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17279-17348]:Block[17279-17348]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[17305-17326]:ExpressionStatement[17305-17326]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[17369-17400]:ExpressionStatement[17369-17400]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[17421-17619]:IfStatement[17421-17619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17458-17619]:Block[17458-17619]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[17484-17597]:ThrowStatement[17484-17597]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[17703-17721]:ExpressionStatement[17703-17721]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[17742-17783]:ExpressionStatement[17742-17783]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17804-17813]:ContinueStatement[17804-17813]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[17892-17932]:ExpressionStatement[17892-17932]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[18016-18097]:IfStatement[18016-18097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18044-18097]:Block[18044-18097]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[18062-18083]:ExpressionStatement[18062-18083]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[18110-18141]:ExpressionStatement[18110-18141]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[18154-18193]:ExpressionStatement[18154-18193]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[18206-19384]:IfStatement[18206-19384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18220-19384]:Block[18220-19384]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[18238-18756]:IfStatement[18238-18756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18286-18756]:Block[18286-18756]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[18391-18671]:IfStatement[18391-18671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18435-18671]:Block[18435-18671]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[18461-18479]:ExpressionStatement[18461-18479]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[18504-18552]:ExpressionStatement[18504-18552]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[18577-18618]:ExpressionStatement[18577-18618]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18643-18649]:BreakStatement[18643-18649]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[18692-18738]:ExpressionStatement[18692-18738]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[18773-19370]:IfStatement[18773-19370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18821-19370]:Block[18821-19370]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[19173-19191]:ExpressionStatement[19173-19191]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[19212-19260]:ExpressionStatement[19212-19260]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[19281-19322]:ExpressionStatement[19281-19322]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[19343-19352]:ContinueStatement[19343-19352]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[19451-19491]:ExpressionStatement[19451-19491]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "info" : "ExpressionStatement[19504-19553]:ExpressionStatement[19504-19553]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[19566-19614]:ExpressionStatement[19566-19614]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[19627-19668]:ExpressionStatement[19627-19668]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[19687-19712]:ExpressionStatement[19687-19712]"
    }, {
      "left" : "if (outputPtr > 0)",
      "right" : "if (outputPtr > 0)",
      "info" : "IfStatement[19721-19834]:IfStatement[19721-19834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19740-19834]:Block[19740-19834]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[19754-19779]:ExpressionStatement[19754-19779]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[19792-19824]:ExpressionStatement[19792-19824]"
    }, {
      "left" : "return outputCount;",
      "right" : "return outputCount;",
      "info" : "ReturnStatement[19843-19862]:ReturnStatement[19843-19862]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20162-20171]:MarkerAnnotation[20162-20171]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20176-20182]:Modifier[20176-20182]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[20183-20188]:Modifier[20183-20188]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[20189-20198]:SimpleType[20189-20198]"
    }, {
      "left" : "nextToken",
      "right" : "nextToken",
      "info" : "SimpleName[20199-20208]:SimpleName[20199-20208]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20218-20229]:SimpleType[20218-20229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20234-24459]:Block[20234-24459]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[20457-20545]:IfStatement[20457-20545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20497-20545]:Block[20497-20545]"
    }, {
      "left" : "return _nextAfterName();",
      "right" : "return _nextAfterName();",
      "info" : "ReturnStatement[20511-20535]:ReturnStatement[20511-20535]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[20694-20722]:ExpressionStatement[20694-20722]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[20731-20822]:IfStatement[20731-20822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20753-20822]:Block[20753-20822]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[20767-20781]:ExpressionStatement[20767-20781]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[20831-20854]:VariableDeclarationStatement[20831-20854]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[20863-21127]:IfStatement[20863-21127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20874-21127]:Block[20874-21127]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[21069-21077]:ExpressionStatement[21069-21077]"
    }, {
      "left" : "return (_currToken = null);",
      "right" : "return (_currToken = null);",
      "info" : "ReturnStatement[21090-21117]:ReturnStatement[21090-21117]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[21178-21198]:ExpressionStatement[21178-21198]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[21234-21533]:IfStatement[21234-21533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21257-21533]:Block[21257-21533]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[21271-21289]:ExpressionStatement[21271-21289]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[21302-21401]:IfStatement[21302-21401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21334-21401]:Block[21334-21401]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[21352-21387]:ExpressionStatement[21352-21387]"
    }, {
      "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
      "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
      "info" : "ExpressionStatement[21414-21468]:ExpressionStatement[21414-21468]"
    }, {
      "left" : "return (_currToken = JsonToken.END_ARRAY);",
      "right" : "return (_currToken = JsonToken.END_ARRAY);",
      "info" : "ReturnStatement[21481-21523]:ReturnStatement[21481-21523]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[21542-21841]:IfStatement[21542-21841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21563-21841]:Block[21563-21841]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[21577-21595]:ExpressionStatement[21577-21595]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[21608-21708]:IfStatement[21608-21708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21641-21708]:Block[21641-21708]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[21659-21694]:ExpressionStatement[21659-21694]"
    }, {
      "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
      "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
      "info" : "ExpressionStatement[21721-21775]:ExpressionStatement[21721-21775]"
    }, {
      "left" : "return (_currToken = JsonToken.END_OBJECT);",
      "right" : "return (_currToken = JsonToken.END_OBJECT);",
      "info" : "ReturnStatement[21788-21831]:ReturnStatement[21788-21831]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[21895-21972]:IfStatement[21895-21972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21930-21972]:Block[21930-21972]"
    }, {
      "left" : "i = _skipComma(i);",
      "right" : "i = _skipComma(i);",
      "info" : "ExpressionStatement[21944-21962]:ExpressionStatement[21944-21962]"
    }, {
      "left" : "boolean inObject = _parsingContext.inObject();",
      "right" : "boolean inObject = _parsingContext.inObject();",
      "info" : "VariableDeclarationStatement[22143-22189]:VariableDeclarationStatement[22143-22189]"
    }, {
      "left" : "if (inObject)",
      "right" : "if (inObject)",
      "info" : "IfStatement[22198-22505]:IfStatement[22198-22505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22212-22505]:Block[22212-22505]"
    }, {
      "left" : "_updateNameLocation();",
      "right" : "_updateNameLocation();",
      "info" : "ExpressionStatement[22267-22289]:ExpressionStatement[22267-22289]"
    }, {
      "left" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "right" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "info" : "VariableDeclarationStatement[22302-22368]:VariableDeclarationStatement[22302-22368]"
    }, {
      "left" : "_parsingContext.setCurrentName(name);",
      "right" : "_parsingContext.setCurrentName(name);",
      "info" : "ExpressionStatement[22381-22418]:ExpressionStatement[22381-22418]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[22431-22465]:ExpressionStatement[22431-22465]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[22478-22495]:ExpressionStatement[22478-22495]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[22514-22532]:ExpressionStatement[22514-22532]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[22594-22606]:VariableDeclarationStatement[22594-22606]"
    }, {
      "left" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            t = JsonToken.VALUE_STRING;\n            break;\n        case '[':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "right" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            t = JsonToken.VALUE_STRING;\n            break;\n        case '[':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "info" : "SwitchStatement[22616-24317]:SwitchStatement[22616-24317]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[22637-22646]:SwitchCase[22637-22646]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[22659-22683]:ExpressionStatement[22659-22683]"
    }, {
      "left" : "t = JsonToken.VALUE_STRING;",
      "right" : "t = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[22696-22723]:ExpressionStatement[22696-22723]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22736-22742]:BreakStatement[22736-22742]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[22751-22760]:SwitchCase[22751-22760]"
    }, {
      "left" : "if (!inObject)",
      "right" : "if (!inObject)",
      "info" : "IfStatement[22773-22910]:IfStatement[22773-22910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22788-22910]:Block[22788-22910]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[22806-22896]:ExpressionStatement[22806-22896]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[22923-22949]:ExpressionStatement[22923-22949]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22962-22968]:BreakStatement[22962-22968]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[22977-22986]:SwitchCase[22977-22986]"
    }, {
      "left" : "if (!inObject)",
      "right" : "if (!inObject)",
      "info" : "IfStatement[22999-23137]:IfStatement[22999-23137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23014-23137]:Block[23014-23137]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[23032-23123]:ExpressionStatement[23032-23123]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[23150-23177]:ExpressionStatement[23150-23177]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23190-23196]:BreakStatement[23190-23196]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[23205-23214]:SwitchCase[23205-23214]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[23223-23232]:SwitchCase[23223-23232]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a value\");",
      "right" : "_reportUnexpectedChar(i, \"expected a value\");",
      "info" : "ExpressionStatement[23354-23399]:ExpressionStatement[23354-23399]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[23408-23417]:SwitchCase[23408-23417]"
    }, {
      "left" : "_matchTrue();",
      "right" : "_matchTrue();",
      "info" : "ExpressionStatement[23430-23443]:ExpressionStatement[23430-23443]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[23456-23481]:ExpressionStatement[23456-23481]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23494-23500]:BreakStatement[23494-23500]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[23509-23518]:SwitchCase[23509-23518]"
    }, {
      "left" : "_matchFalse();",
      "right" : "_matchFalse();",
      "info" : "ExpressionStatement[23531-23545]:ExpressionStatement[23531-23545]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[23558-23584]:ExpressionStatement[23558-23584]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23597-23603]:BreakStatement[23597-23603]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[23612-23621]:SwitchCase[23612-23621]"
    }, {
      "left" : "_matchNull();",
      "right" : "_matchNull();",
      "info" : "ExpressionStatement[23634-23647]:ExpressionStatement[23634-23647]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[23660-23685]:ExpressionStatement[23660-23685]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23698-23704]:BreakStatement[23698-23704]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[23714-23723]:SwitchCase[23714-23723]"
    }, {
      "left" : "t = _parseNegNumber();",
      "right" : "t = _parseNegNumber();",
      "info" : "ExpressionStatement[23959-23981]:ExpressionStatement[23959-23981]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23994-24000]:BreakStatement[23994-24000]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[24009-24018]:SwitchCase[24009-24018]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[24027-24036]:SwitchCase[24027-24036]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[24045-24054]:SwitchCase[24045-24054]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[24063-24072]:SwitchCase[24063-24072]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[24081-24090]:SwitchCase[24081-24090]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[24099-24108]:SwitchCase[24099-24108]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[24117-24126]:SwitchCase[24117-24126]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[24135-24144]:SwitchCase[24135-24144]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[24153-24162]:SwitchCase[24153-24162]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[24171-24180]:SwitchCase[24171-24180]"
    }, {
      "left" : "t = _parsePosNumber(i);",
      "right" : "t = _parsePosNumber(i);",
      "info" : "ExpressionStatement[24193-24216]:ExpressionStatement[24193-24216]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24229-24235]:BreakStatement[24229-24235]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24244-24252]:SwitchCase[24244-24252]"
    }, {
      "left" : "t = _handleOddValue(i);",
      "right" : "t = _handleOddValue(i);",
      "info" : "ExpressionStatement[24265-24288]:ExpressionStatement[24265-24288]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24301-24307]:BreakStatement[24301-24307]"
    }, {
      "left" : "if (inObject)",
      "right" : "if (inObject)",
      "info" : "IfStatement[24327-24411]:IfStatement[24327-24411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24341-24411]:Block[24341-24411]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[24355-24370]:ExpressionStatement[24355-24370]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[24383-24401]:ReturnStatement[24383-24401]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[24420-24435]:ExpressionStatement[24420-24435]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[24444-24453]:ReturnStatement[24444-24453]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24465-24472]:Modifier[24465-24472]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[24473-24478]:Modifier[24473-24478]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[24479-24488]:SimpleType[24479-24488]"
    }, {
      "left" : "_nextAfterName",
      "right" : "_nextAfterName",
      "info" : "SimpleName[24489-24503]:SimpleName[24489-24503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24510-25132]:Block[24510-25132]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[24520-24540]:ExpressionStatement[24520-24540]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[24588-24613]:VariableDeclarationStatement[24588-24613]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[24622-24640]:ExpressionStatement[24622-24640]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[24793-25093]:IfStatement[24793-25093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24825-24939]:Block[24825-24939]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[24839-24929]:ExpressionStatement[24839-24929]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[24945-25093]:IfStatement[24945-25093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24978-25093]:Block[24978-25093]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[24992-25083]:ExpressionStatement[24992-25083]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[25102-25126]:ReturnStatement[25102-25126]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25350-25359]:MarkerAnnotation[25350-25359]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25364-25370]:Modifier[25364-25370]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25371-25378]:PrimitiveType[25371-25378]"
    }, {
      "left" : "nextFieldName",
      "right" : "nextFieldName",
      "info" : "SimpleName[25379-25392]:SimpleName[25379-25392]"
    }, {
      "left" : "SerializableString sstr",
      "right" : "SerializableString sstr",
      "info" : "SingleVariableDeclaration[25393-25416]:SingleVariableDeclaration[25393-25416]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[25425-25436]:SimpleType[25425-25436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25441-28016]:Block[25441-28016]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[25521-25549]:ExpressionStatement[25521-25549]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[25558-25665]:IfStatement[25558-25665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25598-25665]:Block[25598-25665]"
    }, {
      "left" : "_nextAfterName();",
      "right" : "_nextAfterName();",
      "info" : "ExpressionStatement[25612-25629]:ExpressionStatement[25612-25629]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25642-25655]:ReturnStatement[25642-25655]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[25674-25734]:IfStatement[25674-25734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25696-25734]:Block[25696-25734]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[25710-25724]:ExpressionStatement[25710-25724]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[25743-25766]:VariableDeclarationStatement[25743-25766]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[25775-25875]:IfStatement[25775-25875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25786-25875]:Block[25786-25875]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[25800-25808]:ExpressionStatement[25800-25808]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[25821-25839]:ExpressionStatement[25821-25839]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25852-25865]:ReturnStatement[25852-25865]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[25884-25904]:ExpressionStatement[25884-25904]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[25914-26230]:IfStatement[25914-26230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25937-26230]:Block[25937-26230]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[25951-25969]:ExpressionStatement[25951-25969]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[25982-26081]:IfStatement[25982-26081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26014-26081]:Block[26014-26081]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[26032-26067]:ExpressionStatement[26032-26067]"
    }, {
      "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
      "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
      "info" : "ExpressionStatement[26094-26148]:ExpressionStatement[26094-26148]"
    }, {
      "left" : "_currToken = JsonToken.END_ARRAY;",
      "right" : "_currToken = JsonToken.END_ARRAY;",
      "info" : "ExpressionStatement[26161-26194]:ExpressionStatement[26161-26194]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26207-26220]:ReturnStatement[26207-26220]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[26239-26555]:IfStatement[26239-26555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26260-26555]:Block[26260-26555]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[26274-26292]:ExpressionStatement[26274-26292]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[26305-26405]:IfStatement[26305-26405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26338-26405]:Block[26338-26405]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[26356-26391]:ExpressionStatement[26356-26391]"
    }, {
      "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
      "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
      "info" : "ExpressionStatement[26418-26472]:ExpressionStatement[26418-26472]"
    }, {
      "left" : "_currToken = JsonToken.END_OBJECT;",
      "right" : "_currToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[26485-26519]:ExpressionStatement[26485-26519]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26532-26545]:ReturnStatement[26532-26545]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[26564-26641]:IfStatement[26564-26641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26599-26641]:Block[26599-26641]"
    }, {
      "left" : "i = _skipComma(i);",
      "right" : "i = _skipComma(i);",
      "info" : "ExpressionStatement[26613-26631]:ExpressionStatement[26613-26631]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[26651-26790]:IfStatement[26651-26790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26684-26790]:Block[26684-26790]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[26698-26716]:ExpressionStatement[26698-26716]"
    }, {
      "left" : "_nextTokenNotInObject(i);",
      "right" : "_nextTokenNotInObject(i);",
      "info" : "ExpressionStatement[26729-26754]:ExpressionStatement[26729-26754]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26767-26780]:ReturnStatement[26767-26780]"
    }, {
      "left" : "_updateNameLocation();",
      "right" : "_updateNameLocation();",
      "info" : "ExpressionStatement[26800-26822]:ExpressionStatement[26800-26822]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[26831-27952]:IfStatement[26831-27952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26851-27952]:Block[26851-27952]"
    }, {
      "left" : "char[] nameChars = sstr.asQuotedChars();",
      "right" : "char[] nameChars = sstr.asQuotedChars();",
      "info" : "VariableDeclarationStatement[26930-26970]:VariableDeclarationStatement[26930-26970]"
    }, {
      "left" : "final int len = nameChars.length;",
      "right" : "final int len = nameChars.length;",
      "info" : "VariableDeclarationStatement[26983-27016]:VariableDeclarationStatement[26983-27016]"
    }, {
      "left" : "if ((_inputPtr + len + 4) < _inputEnd)",
      "right" : "if ((_inputPtr + len + 4) < _inputEnd)",
      "info" : "IfStatement[27113-27942]:IfStatement[27113-27942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27152-27942]:Block[27152-27942]"
    }, {
      "left" : "final int end = _inputPtr+len;",
      "right" : "final int end = _inputPtr+len;",
      "info" : "VariableDeclarationStatement[27229-27259]:VariableDeclarationStatement[27229-27259]"
    }, {
      "left" : "if (_inputBuffer[end] == '\"')",
      "right" : "if (_inputBuffer[end] == '\"')",
      "info" : "IfStatement[27276-27928]:IfStatement[27276-27928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27306-27928]:Block[27306-27928]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[27328-27343]:VariableDeclarationStatement[27328-27343]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[27364-27384]:VariableDeclarationStatement[27364-27384]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[27405-27910]:WhileStatement[27405-27910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27418-27910]:Block[27418-27910]"
    }, {
      "left" : "if (ptr == end)",
      "right" : "if (ptr == end)",
      "info" : "IfStatement[27444-27692]:IfStatement[27444-27692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27460-27692]:Block[27460-27692]"
    }, {
      "left" : "_parsingContext.setCurrentName(sstr.getValue());",
      "right" : "_parsingContext.setCurrentName(sstr.getValue());",
      "info" : "ExpressionStatement[27505-27553]:ExpressionStatement[27505-27553]"
    }, {
      "left" : "_isNextTokenNameYes(_skipColonFast(ptr+1));",
      "right" : "_isNextTokenNameYes(_skipColonFast(ptr+1));",
      "info" : "ExpressionStatement[27582-27625]:ExpressionStatement[27582-27625]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27654-27666]:ReturnStatement[27654-27666]"
    }, {
      "left" : "if (nameChars[offset] != _inputBuffer[ptr])",
      "right" : "if (nameChars[offset] != _inputBuffer[ptr])",
      "info" : "IfStatement[27717-27823]:IfStatement[27717-27823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27761-27823]:Block[27761-27823]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27791-27797]:BreakStatement[27791-27797]"
    }, {
      "left" : "++offset;",
      "right" : "++offset;",
      "info" : "ExpressionStatement[27848-27857]:ExpressionStatement[27848-27857]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[27882-27888]:ExpressionStatement[27882-27888]"
    }, {
      "left" : "return _isNextTokenNameMaybe(i, sstr.getValue());",
      "right" : "return _isNextTokenNameMaybe(i, sstr.getValue());",
      "info" : "ReturnStatement[27961-28010]:ReturnStatement[27961-28010]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28022-28031]:MarkerAnnotation[28022-28031]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28036-28042]:Modifier[28036-28042]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[28043-28049]:SimpleType[28043-28049]"
    }, {
      "left" : "nextFieldName",
      "right" : "nextFieldName",
      "info" : "SimpleName[28050-28063]:SimpleName[28050-28063]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[28073-28084]:SimpleType[28073-28084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28089-30851]:Block[28089-30851]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[28186-28214]:ExpressionStatement[28186-28214]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[28223-28329]:IfStatement[28223-28329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28263-28329]:Block[28263-28329]"
    }, {
      "left" : "_nextAfterName();",
      "right" : "_nextAfterName();",
      "info" : "ExpressionStatement[28277-28294]:ExpressionStatement[28277-28294]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28307-28319]:ReturnStatement[28307-28319]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[28338-28398]:IfStatement[28338-28398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28360-28398]:Block[28360-28398]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[28374-28388]:ExpressionStatement[28374-28388]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[28407-28430]:VariableDeclarationStatement[28407-28430]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[28439-28538]:IfStatement[28439-28538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28450-28538]:Block[28450-28538]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[28464-28472]:ExpressionStatement[28464-28472]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[28485-28503]:ExpressionStatement[28485-28503]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28516-28528]:ReturnStatement[28516-28528]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[28547-28567]:ExpressionStatement[28547-28567]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[28576-28891]:IfStatement[28576-28891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28599-28891]:Block[28599-28891]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[28613-28631]:ExpressionStatement[28613-28631]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[28644-28743]:IfStatement[28644-28743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28676-28743]:Block[28676-28743]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[28694-28729]:ExpressionStatement[28694-28729]"
    }, {
      "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
      "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
      "info" : "ExpressionStatement[28756-28810]:ExpressionStatement[28756-28810]"
    }, {
      "left" : "_currToken = JsonToken.END_ARRAY;",
      "right" : "_currToken = JsonToken.END_ARRAY;",
      "info" : "ExpressionStatement[28823-28856]:ExpressionStatement[28823-28856]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28869-28881]:ReturnStatement[28869-28881]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[28900-29215]:IfStatement[28900-29215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28921-29215]:Block[28921-29215]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[28935-28953]:ExpressionStatement[28935-28953]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[28966-29066]:IfStatement[28966-29066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28999-29066]:Block[28999-29066]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[29017-29052]:ExpressionStatement[29017-29052]"
    }, {
      "left" : "_parsingContext = _parsingContext.clearAndGetParent();",
      "right" : "_parsingContext = _parsingContext.clearAndGetParent();",
      "info" : "ExpressionStatement[29079-29133]:ExpressionStatement[29079-29133]"
    }, {
      "left" : "_currToken = JsonToken.END_OBJECT;",
      "right" : "_currToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[29146-29180]:ExpressionStatement[29146-29180]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29193-29205]:ReturnStatement[29193-29205]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[29224-29301]:IfStatement[29224-29301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29259-29301]:Block[29259-29301]"
    }, {
      "left" : "i = _skipComma(i);",
      "right" : "i = _skipComma(i);",
      "info" : "ExpressionStatement[29273-29291]:ExpressionStatement[29273-29291]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[29310-29448]:IfStatement[29310-29448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29343-29448]:Block[29343-29448]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[29357-29375]:ExpressionStatement[29357-29375]"
    }, {
      "left" : "_nextTokenNotInObject(i);",
      "right" : "_nextTokenNotInObject(i);",
      "info" : "ExpressionStatement[29388-29413]:ExpressionStatement[29388-29413]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29426-29438]:ReturnStatement[29426-29438]"
    }, {
      "left" : "_updateNameLocation();",
      "right" : "_updateNameLocation();",
      "info" : "ExpressionStatement[29458-29480]:ExpressionStatement[29458-29480]"
    }, {
      "left" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "right" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "info" : "VariableDeclarationStatement[29489-29555]:VariableDeclarationStatement[29489-29555]"
    }, {
      "left" : "_parsingContext.setCurrentName(name);",
      "right" : "_parsingContext.setCurrentName(name);",
      "info" : "ExpressionStatement[29564-29601]:ExpressionStatement[29564-29601]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[29610-29644]:ExpressionStatement[29610-29644]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[29653-29670]:ExpressionStatement[29653-29670]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[29680-29698]:ExpressionStatement[29680-29698]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[29707-29849]:IfStatement[29707-29849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29727-29849]:Block[29727-29849]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[29741-29765]:ExpressionStatement[29741-29765]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[29778-29814]:ExpressionStatement[29778-29814]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[29827-29839]:ReturnStatement[29827-29839]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[29919-29931]:VariableDeclarationStatement[29919-29931]"
    }, {
      "left" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "right" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "info" : "SwitchStatement[29941-30800]:SwitchStatement[29941-30800]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[29962-29971]:SwitchCase[29962-29971]"
    }, {
      "left" : "t = _parseNegNumber();",
      "right" : "t = _parseNegNumber();",
      "info" : "ExpressionStatement[29984-30006]:ExpressionStatement[29984-30006]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30019-30025]:BreakStatement[30019-30025]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[30034-30043]:SwitchCase[30034-30043]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[30052-30061]:SwitchCase[30052-30061]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[30070-30079]:SwitchCase[30070-30079]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[30088-30097]:SwitchCase[30088-30097]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[30106-30115]:SwitchCase[30106-30115]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[30124-30133]:SwitchCase[30124-30133]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[30142-30151]:SwitchCase[30142-30151]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[30160-30169]:SwitchCase[30160-30169]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[30178-30187]:SwitchCase[30178-30187]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[30196-30205]:SwitchCase[30196-30205]"
    }, {
      "left" : "t = _parsePosNumber(i);",
      "right" : "t = _parsePosNumber(i);",
      "info" : "ExpressionStatement[30218-30241]:ExpressionStatement[30218-30241]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30254-30260]:BreakStatement[30254-30260]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[30269-30278]:SwitchCase[30269-30278]"
    }, {
      "left" : "_matchFalse();",
      "right" : "_matchFalse();",
      "info" : "ExpressionStatement[30291-30305]:ExpressionStatement[30291-30305]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[30318-30344]:ExpressionStatement[30318-30344]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30357-30363]:BreakStatement[30357-30363]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[30372-30381]:SwitchCase[30372-30381]"
    }, {
      "left" : "_matchNull();",
      "right" : "_matchNull();",
      "info" : "ExpressionStatement[30394-30407]:ExpressionStatement[30394-30407]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[30420-30445]:ExpressionStatement[30420-30445]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30458-30464]:BreakStatement[30458-30464]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[30473-30482]:SwitchCase[30473-30482]"
    }, {
      "left" : "_matchTrue();",
      "right" : "_matchTrue();",
      "info" : "ExpressionStatement[30495-30508]:ExpressionStatement[30495-30508]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[30521-30546]:ExpressionStatement[30521-30546]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30559-30565]:BreakStatement[30559-30565]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[30574-30583]:SwitchCase[30574-30583]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[30596-30622]:ExpressionStatement[30596-30622]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30635-30641]:BreakStatement[30635-30641]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[30650-30659]:SwitchCase[30650-30659]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[30672-30699]:ExpressionStatement[30672-30699]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30712-30718]:BreakStatement[30712-30718]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[30727-30735]:SwitchCase[30727-30735]"
    }, {
      "left" : "t = _handleOddValue(i);",
      "right" : "t = _handleOddValue(i);",
      "info" : "ExpressionStatement[30748-30771]:ExpressionStatement[30748-30771]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30784-30790]:BreakStatement[30784-30790]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[30809-30824]:ExpressionStatement[30809-30824]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[30833-30845]:ReturnStatement[30833-30845]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30857-30864]:Modifier[30857-30864]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[30865-30870]:Modifier[30865-30870]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30871-30875]:PrimitiveType[30871-30875]"
    }, {
      "left" : "_isNextTokenNameYes",
      "right" : "_isNextTokenNameYes",
      "info" : "SimpleName[30876-30895]:SimpleName[30876-30895]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[30896-30901]:SingleVariableDeclaration[30896-30901]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30910-30921]:SimpleType[30910-30921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30926-32065]:Block[30926-32065]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[30936-30970]:ExpressionStatement[30936-30970]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[30979-30997]:ExpressionStatement[30979-30997]"
    }, {
      "left" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n        }",
      "right" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n        }",
      "info" : "SwitchStatement[31007-32018]:SwitchStatement[31007-32018]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[31028-31037]:SwitchCase[31028-31037]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[31050-31074]:ExpressionStatement[31050-31074]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[31087-31123]:ExpressionStatement[31087-31123]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31136-31143]:ReturnStatement[31136-31143]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[31152-31161]:SwitchCase[31152-31161]"
    }, {
      "left" : "_nextToken = JsonToken.START_ARRAY;",
      "right" : "_nextToken = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[31174-31209]:ExpressionStatement[31174-31209]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31222-31229]:ReturnStatement[31222-31229]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[31238-31247]:SwitchCase[31238-31247]"
    }, {
      "left" : "_nextToken = JsonToken.START_OBJECT;",
      "right" : "_nextToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[31260-31296]:ExpressionStatement[31260-31296]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31309-31316]:ReturnStatement[31309-31316]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[31325-31334]:SwitchCase[31325-31334]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[31347-31370]:ExpressionStatement[31347-31370]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_TRUE;",
      "right" : "_nextToken = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[31383-31417]:ExpressionStatement[31383-31417]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31430-31437]:ReturnStatement[31430-31437]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[31446-31455]:SwitchCase[31446-31455]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[31468-31492]:ExpressionStatement[31468-31492]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_FALSE;",
      "right" : "_nextToken = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[31505-31540]:ExpressionStatement[31505-31540]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31553-31560]:ReturnStatement[31553-31560]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[31569-31578]:SwitchCase[31569-31578]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[31591-31614]:ExpressionStatement[31591-31614]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_NULL;",
      "right" : "_nextToken = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[31627-31661]:ExpressionStatement[31627-31661]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31674-31681]:ReturnStatement[31674-31681]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[31690-31699]:SwitchCase[31690-31699]"
    }, {
      "left" : "_nextToken = _parseNegNumber();",
      "right" : "_nextToken = _parseNegNumber();",
      "info" : "ExpressionStatement[31712-31743]:ExpressionStatement[31712-31743]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31756-31763]:ReturnStatement[31756-31763]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[31772-31781]:SwitchCase[31772-31781]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[31790-31799]:SwitchCase[31790-31799]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[31808-31817]:SwitchCase[31808-31817]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[31826-31835]:SwitchCase[31826-31835]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[31844-31853]:SwitchCase[31844-31853]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[31862-31871]:SwitchCase[31862-31871]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[31880-31889]:SwitchCase[31880-31889]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[31898-31907]:SwitchCase[31898-31907]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[31916-31925]:SwitchCase[31916-31925]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[31934-31943]:SwitchCase[31934-31943]"
    }, {
      "left" : "_nextToken = _parsePosNumber(i);",
      "right" : "_nextToken = _parsePosNumber(i);",
      "info" : "ExpressionStatement[31956-31988]:ExpressionStatement[31956-31988]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32001-32008]:ReturnStatement[32001-32008]"
    }, {
      "left" : "_nextToken = _handleOddValue(i);",
      "right" : "_nextToken = _handleOddValue(i);",
      "info" : "ExpressionStatement[32027-32059]:ExpressionStatement[32027-32059]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[32071-32080]:Modifier[32071-32080]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32081-32088]:PrimitiveType[32081-32088]"
    }, {
      "left" : "_isNextTokenNameMaybe",
      "right" : "_isNextTokenNameMaybe",
      "info" : "SimpleName[32089-32110]:SimpleName[32089-32110]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[32111-32116]:SingleVariableDeclaration[32111-32116]"
    }, {
      "left" : "String nameToMatch",
      "right" : "String nameToMatch",
      "info" : "SingleVariableDeclaration[32118-32136]:SingleVariableDeclaration[32118-32136]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32145-32156]:SimpleType[32145-32156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32161-33619]:Block[32161-33619]"
    }, {
      "left" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "right" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "info" : "VariableDeclarationStatement[32229-32295]:VariableDeclarationStatement[32229-32295]"
    }, {
      "left" : "_parsingContext.setCurrentName(name);",
      "right" : "_parsingContext.setCurrentName(name);",
      "info" : "ExpressionStatement[32304-32341]:ExpressionStatement[32304-32341]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[32350-32384]:ExpressionStatement[32350-32384]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[32393-32410]:ExpressionStatement[32393-32410]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[32419-32437]:ExpressionStatement[32419-32437]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[32446-32608]:IfStatement[32446-32608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32466-32608]:Block[32466-32608]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[32480-32504]:ExpressionStatement[32480-32504]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[32517-32553]:ExpressionStatement[32517-32553]"
    }, {
      "left" : "return nameToMatch.equals(name);",
      "right" : "return nameToMatch.equals(name);",
      "info" : "ReturnStatement[32566-32598]:ReturnStatement[32566-32598]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[32668-32680]:VariableDeclarationStatement[32668-32680]"
    }, {
      "left" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "right" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "info" : "SwitchStatement[32689-33548]:SwitchStatement[32689-33548]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[32710-32719]:SwitchCase[32710-32719]"
    }, {
      "left" : "t = _parseNegNumber();",
      "right" : "t = _parseNegNumber();",
      "info" : "ExpressionStatement[32732-32754]:ExpressionStatement[32732-32754]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32767-32773]:BreakStatement[32767-32773]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[32782-32791]:SwitchCase[32782-32791]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[32800-32809]:SwitchCase[32800-32809]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[32818-32827]:SwitchCase[32818-32827]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[32836-32845]:SwitchCase[32836-32845]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[32854-32863]:SwitchCase[32854-32863]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[32872-32881]:SwitchCase[32872-32881]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[32890-32899]:SwitchCase[32890-32899]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[32908-32917]:SwitchCase[32908-32917]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[32926-32935]:SwitchCase[32926-32935]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[32944-32953]:SwitchCase[32944-32953]"
    }, {
      "left" : "t = _parsePosNumber(i);",
      "right" : "t = _parsePosNumber(i);",
      "info" : "ExpressionStatement[32966-32989]:ExpressionStatement[32966-32989]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33002-33008]:BreakStatement[33002-33008]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[33017-33026]:SwitchCase[33017-33026]"
    }, {
      "left" : "_matchFalse();",
      "right" : "_matchFalse();",
      "info" : "ExpressionStatement[33039-33053]:ExpressionStatement[33039-33053]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[33066-33092]:ExpressionStatement[33066-33092]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33105-33111]:BreakStatement[33105-33111]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[33120-33129]:SwitchCase[33120-33129]"
    }, {
      "left" : "_matchNull();",
      "right" : "_matchNull();",
      "info" : "ExpressionStatement[33142-33155]:ExpressionStatement[33142-33155]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[33168-33193]:ExpressionStatement[33168-33193]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33206-33212]:BreakStatement[33206-33212]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[33221-33230]:SwitchCase[33221-33230]"
    }, {
      "left" : "_matchTrue();",
      "right" : "_matchTrue();",
      "info" : "ExpressionStatement[33243-33256]:ExpressionStatement[33243-33256]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[33269-33294]:ExpressionStatement[33269-33294]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33307-33313]:BreakStatement[33307-33313]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[33322-33331]:SwitchCase[33322-33331]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[33344-33370]:ExpressionStatement[33344-33370]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33383-33389]:BreakStatement[33383-33389]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[33398-33407]:SwitchCase[33398-33407]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[33420-33447]:ExpressionStatement[33420-33447]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33460-33466]:BreakStatement[33460-33466]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[33475-33483]:SwitchCase[33475-33483]"
    }, {
      "left" : "t = _handleOddValue(i);",
      "right" : "t = _handleOddValue(i);",
      "info" : "ExpressionStatement[33496-33519]:ExpressionStatement[33496-33519]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33532-33538]:BreakStatement[33532-33538]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[33557-33572]:ExpressionStatement[33557-33572]"
    }, {
      "left" : "return nameToMatch.equals(name);",
      "right" : "return nameToMatch.equals(name);",
      "info" : "ReturnStatement[33581-33613]:ReturnStatement[33581-33613]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33625-33632]:Modifier[33625-33632]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[33633-33638]:Modifier[33633-33638]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[33639-33648]:SimpleType[33639-33648]"
    }, {
      "left" : "_nextTokenNotInObject",
      "right" : "_nextTokenNotInObject",
      "info" : "SimpleName[33649-33670]:SimpleName[33649-33670]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[33671-33676]:SingleVariableDeclaration[33671-33676]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[33685-33696]:SimpleType[33685-33696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33701-35143]:Block[33701-35143]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[33711-33837]:IfStatement[33711-33837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33731-33837]:Block[33731-33837]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[33745-33769]:ExpressionStatement[33745-33769]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_STRING);",
      "right" : "return (_currToken = JsonToken.VALUE_STRING);",
      "info" : "ReturnStatement[33782-33827]:ReturnStatement[33782-33827]"
    }, {
      "left" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            return (_currToken = _parseNegNumber());\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicated by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parsePosNumber(i));\n        }",
      "right" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            return (_currToken = _parseNegNumber());\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicated by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parsePosNumber(i));\n        }",
      "info" : "SwitchStatement[33846-35087]:SwitchStatement[33846-35087]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[33867-33876]:SwitchCase[33867-33876]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[33889-33979]:ExpressionStatement[33889-33979]"
    }, {
      "left" : "return (_currToken = JsonToken.START_ARRAY);",
      "right" : "return (_currToken = JsonToken.START_ARRAY);",
      "info" : "ReturnStatement[33992-34036]:ReturnStatement[33992-34036]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[34045-34054]:SwitchCase[34045-34054]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[34067-34158]:ExpressionStatement[34067-34158]"
    }, {
      "left" : "return (_currToken = JsonToken.START_OBJECT);",
      "right" : "return (_currToken = JsonToken.START_OBJECT);",
      "info" : "ReturnStatement[34171-34216]:ReturnStatement[34171-34216]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[34225-34234]:SwitchCase[34225-34234]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[34247-34270]:ExpressionStatement[34247-34270]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_TRUE);",
      "right" : "return (_currToken = JsonToken.VALUE_TRUE);",
      "info" : "ReturnStatement[34283-34326]:ReturnStatement[34283-34326]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[34335-34344]:SwitchCase[34335-34344]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[34357-34381]:ExpressionStatement[34357-34381]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_FALSE);",
      "right" : "return (_currToken = JsonToken.VALUE_FALSE);",
      "info" : "ReturnStatement[34394-34438]:ReturnStatement[34394-34438]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[34447-34456]:SwitchCase[34447-34456]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[34469-34492]:ExpressionStatement[34469-34492]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_NULL);",
      "right" : "return (_currToken = JsonToken.VALUE_NULL);",
      "info" : "ReturnStatement[34505-34548]:ReturnStatement[34505-34548]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[34557-34566]:SwitchCase[34557-34566]"
    }, {
      "left" : "return (_currToken = _parseNegNumber());",
      "right" : "return (_currToken = _parseNegNumber());",
      "info" : "ReturnStatement[34579-34619]:ReturnStatement[34579-34619]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[34852-34861]:SwitchCase[34852-34861]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[34870-34879]:SwitchCase[34870-34879]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[34888-34897]:SwitchCase[34888-34897]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[34906-34915]:SwitchCase[34906-34915]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[34924-34933]:SwitchCase[34924-34933]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[34942-34951]:SwitchCase[34942-34951]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[34960-34969]:SwitchCase[34960-34969]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[34978-34987]:SwitchCase[34978-34987]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[34996-35005]:SwitchCase[34996-35005]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[35014-35023]:SwitchCase[35014-35023]"
    }, {
      "left" : "return (_currToken = _parsePosNumber(i));",
      "right" : "return (_currToken = _parsePosNumber(i));",
      "info" : "ReturnStatement[35036-35077]:ReturnStatement[35036-35077]"
    }, {
      "left" : "return (_currToken = _handleOddValue(i));",
      "right" : "return (_currToken = _handleOddValue(i));",
      "info" : "ReturnStatement[35096-35137]:ReturnStatement[35096-35137]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35203-35212]:MarkerAnnotation[35203-35212]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35217-35223]:Modifier[35217-35223]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[35224-35229]:Modifier[35224-35229]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[35230-35236]:SimpleType[35230-35236]"
    }, {
      "left" : "nextTextValue",
      "right" : "nextTextValue",
      "info" : "SimpleName[35237-35250]:SimpleName[35237-35250]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35260-35271]:SimpleType[35260-35271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35276-36246]:Block[35276-36246]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[35286-36117]:IfStatement[35286-36117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35326-36117]:Block[35326-36117]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[35379-35399]:ExpressionStatement[35379-35399]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[35412-35437]:VariableDeclarationStatement[35412-35437]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[35450-35468]:ExpressionStatement[35450-35468]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[35481-35496]:ExpressionStatement[35481-35496]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[35509-35753]:IfStatement[35509-35753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35542-35753]:Block[35542-35753]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[35560-35684]:IfStatement[35560-35684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35582-35684]:Block[35582-35684]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[35604-35629]:ExpressionStatement[35604-35629]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[35650-35666]:ExpressionStatement[35650-35666]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[35701-35739]:ReturnStatement[35701-35739]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[35766-36082]:IfStatement[35766-36082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35798-35920]:Block[35798-35920]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[35816-35906]:ExpressionStatement[35816-35906]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[35926-36082]:IfStatement[35926-36082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35959-36082]:Block[35959-36082]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[35977-36068]:ExpressionStatement[35977-36068]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[36095-36107]:ReturnStatement[36095-36107]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "right" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "info" : "ReturnStatement[36174-36240]:ReturnStatement[36174-36240]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36302-36311]:MarkerAnnotation[36302-36311]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36316-36322]:Modifier[36316-36322]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[36323-36328]:Modifier[36323-36328]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[36329-36332]:PrimitiveType[36329-36332]"
    }, {
      "left" : "nextIntValue",
      "right" : "nextIntValue",
      "info" : "SimpleName[36333-36345]:SimpleName[36333-36345]"
    }, {
      "left" : "int defaultValue",
      "right" : "int defaultValue",
      "info" : "SingleVariableDeclaration[36346-36362]:SingleVariableDeclaration[36346-36362]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[36371-36382]:SimpleType[36371-36382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36387-37188]:Block[36387-37188]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[36397-37043]:IfStatement[36397-37043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36437-37043]:Block[36437-37043]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[36451-36471]:ExpressionStatement[36451-36471]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[36484-36509]:VariableDeclarationStatement[36484-36509]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[36522-36540]:ExpressionStatement[36522-36540]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[36553-36568]:ExpressionStatement[36553-36568]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[36581-36671]:IfStatement[36581-36671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36618-36671]:Block[36618-36671]"
    }, {
      "left" : "return getIntValue();",
      "right" : "return getIntValue();",
      "info" : "ReturnStatement[36636-36657]:ReturnStatement[36636-36657]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[36684-37000]:IfStatement[36684-37000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36716-36838]:Block[36716-36838]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[36734-36824]:ExpressionStatement[36734-36824]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[36844-37000]:IfStatement[36844-37000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36877-37000]:Block[36877-37000]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[36895-36986]:ExpressionStatement[36895-36986]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[37013-37033]:ReturnStatement[37013-37033]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "info" : "ReturnStatement[37100-37182]:ReturnStatement[37100-37182]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37244-37253]:MarkerAnnotation[37244-37253]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37258-37264]:Modifier[37258-37264]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[37265-37270]:Modifier[37265-37270]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[37271-37275]:PrimitiveType[37271-37275]"
    }, {
      "left" : "nextLongValue",
      "right" : "nextLongValue",
      "info" : "SimpleName[37276-37289]:SimpleName[37276-37289]"
    }, {
      "left" : "long defaultValue",
      "right" : "long defaultValue",
      "info" : "SingleVariableDeclaration[37290-37307]:SingleVariableDeclaration[37290-37307]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[37316-37327]:SimpleType[37316-37327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37332-38174]:Block[37332-38174]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[37342-38028]:IfStatement[37342-38028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37382-38028]:Block[37382-38028]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[37435-37455]:ExpressionStatement[37435-37455]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[37468-37493]:VariableDeclarationStatement[37468-37493]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[37506-37524]:ExpressionStatement[37506-37524]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[37537-37552]:ExpressionStatement[37537-37552]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[37565-37656]:IfStatement[37565-37656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37602-37656]:Block[37602-37656]"
    }, {
      "left" : "return getLongValue();",
      "right" : "return getLongValue();",
      "info" : "ReturnStatement[37620-37642]:ReturnStatement[37620-37642]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[37669-37985]:IfStatement[37669-37985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37701-37823]:Block[37701-37823]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[37719-37809]:ExpressionStatement[37719-37809]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[37829-37985]:IfStatement[37829-37985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37862-37985]:Block[37862-37985]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[37880-37971]:ExpressionStatement[37880-37971]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[37998-38018]:ReturnStatement[37998-38018]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "info" : "ReturnStatement[38085-38168]:ReturnStatement[38085-38168]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38234-38243]:MarkerAnnotation[38234-38243]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38248-38254]:Modifier[38248-38254]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[38255-38260]:Modifier[38255-38260]"
    }, {
      "left" : "Boolean",
      "right" : "Boolean",
      "info" : "SimpleType[38261-38268]:SimpleType[38261-38268]"
    }, {
      "left" : "nextBooleanValue",
      "right" : "nextBooleanValue",
      "info" : "SimpleName[38269-38285]:SimpleName[38269-38285]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[38295-38306]:SimpleType[38295-38306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38311-39321]:Block[38311-39321]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[38321-39089]:IfStatement[38321-39089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38361-39089]:Block[38361-39089]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[38414-38434]:ExpressionStatement[38414-38434]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[38447-38472]:VariableDeclarationStatement[38447-38472]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[38485-38503]:ExpressionStatement[38485-38503]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[38516-38531]:ExpressionStatement[38516-38531]"
    }, {
      "left" : "if (t == JsonToken.VALUE_TRUE)",
      "right" : "if (t == JsonToken.VALUE_TRUE)",
      "info" : "IfStatement[38544-38627]:IfStatement[38544-38627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38575-38627]:Block[38575-38627]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[38593-38613]:ReturnStatement[38593-38613]"
    }, {
      "left" : "if (t == JsonToken.VALUE_FALSE)",
      "right" : "if (t == JsonToken.VALUE_FALSE)",
      "info" : "IfStatement[38640-38725]:IfStatement[38640-38725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38672-38725]:Block[38672-38725]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[38690-38711]:ReturnStatement[38690-38711]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[38738-39054]:IfStatement[38738-39054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38770-38892]:Block[38770-38892]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[38788-38878]:ExpressionStatement[38788-38878]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[38898-39054]:IfStatement[38898-39054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38931-39054]:Block[38931-39054]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[38949-39040]:ExpressionStatement[38949-39040]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39067-39079]:ReturnStatement[39067-39079]"
    }, {
      "left" : "JsonToken t = nextToken();",
      "right" : "JsonToken t = nextToken();",
      "info" : "VariableDeclarationStatement[39098-39124]:VariableDeclarationStatement[39098-39124]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[39133-39294]:IfStatement[39133-39294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39148-39294]:Block[39148-39294]"
    }, {
      "left" : "int id = t.id();",
      "right" : "int id = t.id();",
      "info" : "VariableDeclarationStatement[39162-39178]:VariableDeclarationStatement[39162-39178]"
    }, {
      "left" : "if (id == ID_TRUE)",
      "right" : "if (id == ID_TRUE)",
      "info" : "IfStatement[39191-39230]:IfStatement[39191-39230]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[39210-39230]:ReturnStatement[39210-39230]"
    }, {
      "left" : "if (id == ID_FALSE)",
      "right" : "if (id == ID_FALSE)",
      "info" : "IfStatement[39243-39284]:IfStatement[39243-39284]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[39263-39284]:ReturnStatement[39263-39284]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39303-39315]:ReturnStatement[39303-39315]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[40290-40299]:Modifier[40290-40299]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[40300-40305]:Modifier[40300-40305]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[40306-40315]:SimpleType[40306-40315]"
    }, {
      "left" : "_parsePosNumber",
      "right" : "_parsePosNumber",
      "info" : "SimpleName[40316-40331]:SimpleName[40316-40331]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[40332-40338]:SingleVariableDeclaration[40332-40338]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[40347-40358]:SimpleType[40347-40358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40363-42265]:Block[40363-42265]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[40646-40666]:VariableDeclarationStatement[40646-40666]"
    }, {
      "left" : "int startPtr = ptr-1;",
      "right" : "int startPtr = ptr-1;",
      "info" : "VariableDeclarationStatement[40675-40696]:VariableDeclarationStatement[40675-40696]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[40738-40769]:VariableDeclarationStatement[40738-40769]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[40826-40905]:IfStatement[40826-40905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40843-40905]:Block[40843-40905]"
    }, {
      "left" : "return _parseNumber2(false, startPtr);",
      "right" : "return _parseNumber2(false, startPtr);",
      "info" : "ReturnStatement[40857-40895]:ReturnStatement[40857-40895]"
    }, {
      "left" : "int intLen = 1;",
      "right" : "int intLen = 1;",
      "info" : "VariableDeclarationStatement[41203-41218]:VariableDeclarationStatement[41203-41218]"
    }, {
      "left" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                _inputPtr = startPtr;\n                return _parseNumber2(false, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
      "right" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                _inputPtr = startPtr;\n                return _parseNumber2(false, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
      "info" : "LabeledStatement[41303-41643]:LabeledStatement[41303-41643]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[41321-41643]:WhileStatement[41321-41643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41334-41643]:Block[41334-41643]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[41348-41477]:IfStatement[41348-41477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41369-41477]:Block[41369-41477]"
    }, {
      "left" : "_inputPtr = startPtr;",
      "right" : "_inputPtr = startPtr;",
      "info" : "ExpressionStatement[41387-41408]:ExpressionStatement[41387-41408]"
    }, {
      "left" : "return _parseNumber2(false, startPtr);",
      "right" : "return _parseNumber2(false, startPtr);",
      "info" : "ReturnStatement[41425-41463]:ReturnStatement[41425-41463]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[41490-41521]:ExpressionStatement[41490-41521]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[41534-41611]:IfStatement[41534-41611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41564-41611]:Block[41564-41611]"
    }, {
      "left" : "break int_loop;",
      "right" : "break int_loop;",
      "info" : "BreakStatement[41582-41597]:BreakStatement[41582-41597]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[41624-41633]:ExpressionStatement[41624-41633]"
    }, {
      "left" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
      "right" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
      "info" : "IfStatement[41652-41810]:IfStatement[41652-41810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41704-41810]:Block[41704-41810]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[41718-41734]:ExpressionStatement[41718-41734]"
    }, {
      "left" : "return _parseFloat(ch, startPtr, ptr, false, intLen);",
      "right" : "return _parseFloat(ch, startPtr, ptr, false, intLen);",
      "info" : "ReturnStatement[41747-41800]:ReturnStatement[41747-41800]"
    }, {
      "left" : "--ptr;",
      "right" : "--ptr;",
      "info" : "ExpressionStatement[41887-41893]:ExpressionStatement[41887-41893]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[41943-41959]:ExpressionStatement[41943-41959]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[42046-42121]:IfStatement[42046-42121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42076-42121]:Block[42076-42121]"
    }, {
      "left" : "_verifyRootSpace(ch);",
      "right" : "_verifyRootSpace(ch);",
      "info" : "ExpressionStatement[42090-42111]:ExpressionStatement[42090-42111]"
    }, {
      "left" : "int len = ptr-startPtr;",
      "right" : "int len = ptr-startPtr;",
      "info" : "VariableDeclarationStatement[42130-42153]:VariableDeclarationStatement[42130-42153]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "info" : "ExpressionStatement[42162-42219]:ExpressionStatement[42162-42219]"
    }, {
      "left" : "return resetInt(false, intLen);",
      "right" : "return resetInt(false, intLen);",
      "info" : "ReturnStatement[42228-42259]:ReturnStatement[42228-42259]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42271-42278]:Modifier[42271-42278]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[42279-42284]:Modifier[42279-42284]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[42285-42294]:SimpleType[42285-42294]"
    }, {
      "left" : "_parseFloat",
      "right" : "_parseFloat",
      "info" : "SimpleName[42295-42306]:SimpleName[42295-42306]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[42307-42313]:SingleVariableDeclaration[42307-42313]"
    }, {
      "left" : "int startPtr",
      "right" : "int startPtr",
      "info" : "SingleVariableDeclaration[42315-42327]:SingleVariableDeclaration[42315-42327]"
    }, {
      "left" : "int ptr",
      "right" : "int ptr",
      "info" : "SingleVariableDeclaration[42329-42336]:SingleVariableDeclaration[42329-42336]"
    }, {
      "left" : "boolean neg",
      "right" : "boolean neg",
      "info" : "SingleVariableDeclaration[42338-42349]:SingleVariableDeclaration[42338-42349]"
    }, {
      "left" : "int intLen",
      "right" : "int intLen",
      "info" : "SingleVariableDeclaration[42351-42361]:SingleVariableDeclaration[42351-42361]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[42378-42389]:SimpleType[42378-42389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42394-44653]:Block[42394-44653]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[42404-42435]:VariableDeclarationStatement[42404-42435]"
    }, {
      "left" : "int fractLen = 0;",
      "right" : "int fractLen = 0;",
      "info" : "VariableDeclarationStatement[42444-42461]:VariableDeclarationStatement[42444-42461]"
    }, {
      "left" : "if (ch == '.')",
      "right" : "if (ch == '.')",
      "info" : "IfStatement[42517-43120]:IfStatement[42517-43120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42532-43120]:Block[42532-43120]"
    }, {
      "left" : "fract_loop:\n            while (true) {\n                if (ptr >= inputLen) {\n                    return _parseNumber2(neg, startPtr);\n                }\n                ch = (int) _inputBuffer[ptr++];\n                if (ch < INT_0 || ch > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n            }",
      "right" : "fract_loop:\n            while (true) {\n                if (ptr >= inputLen) {\n                    return _parseNumber2(neg, startPtr);\n                }\n                ch = (int) _inputBuffer[ptr++];\n                if (ch < INT_0 || ch > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n            }",
      "info" : "LabeledStatement[42563-42909]:LabeledStatement[42563-42909]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[42587-42909]:WhileStatement[42587-42909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42600-42909]:Block[42600-42909]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[42618-42715]:IfStatement[42618-42715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42639-42715]:Block[42639-42715]"
    }, {
      "left" : "return _parseNumber2(neg, startPtr);",
      "right" : "return _parseNumber2(neg, startPtr);",
      "info" : "ReturnStatement[42661-42697]:ReturnStatement[42661-42697]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[42732-42763]:ExpressionStatement[42732-42763]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[42780-42867]:IfStatement[42780-42867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42810-42867]:Block[42810-42867]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[42832-42849]:BreakStatement[42832-42849]"
    }, {
      "left" : "++fractLen;",
      "right" : "++fractLen;",
      "info" : "ExpressionStatement[42884-42895]:ExpressionStatement[42884-42895]"
    }, {
      "left" : "if (fractLen == 0)",
      "right" : "if (fractLen == 0)",
      "info" : "IfStatement[42987-43110]:IfStatement[42987-43110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43006-43110]:Block[43006-43110]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
      "info" : "ExpressionStatement[43024-43096]:ExpressionStatement[43024-43096]"
    }, {
      "left" : "int expLen = 0;",
      "right" : "int expLen = 0;",
      "info" : "VariableDeclarationStatement[43129-43144]:VariableDeclarationStatement[43129-43144]"
    }, {
      "left" : "if (ch == 'e' || ch == 'E')",
      "right" : "if (ch == 'e' || ch == 'E')",
      "info" : "IfStatement[43153-44215]:IfStatement[43153-44215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43181-44215]:Block[43181-44215]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[43214-43341]:IfStatement[43214-43341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43235-43341]:Block[43235-43341]"
    }, {
      "left" : "_inputPtr = startPtr;",
      "right" : "_inputPtr = startPtr;",
      "info" : "ExpressionStatement[43253-43274]:ExpressionStatement[43253-43274]"
    }, {
      "left" : "return _parseNumber2(neg, startPtr);",
      "right" : "return _parseNumber2(neg, startPtr);",
      "info" : "ReturnStatement[43291-43327]:ReturnStatement[43291-43327]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[43385-43416]:ExpressionStatement[43385-43416]"
    }, {
      "left" : "if (ch == INT_MINUS || ch == INT_PLUS)",
      "right" : "if (ch == INT_MINUS || ch == INT_PLUS)",
      "info" : "IfStatement[43429-43708]:IfStatement[43429-43708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43468-43708]:Block[43468-43708]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[43507-43646]:IfStatement[43507-43646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43528-43646]:Block[43528-43646]"
    }, {
      "left" : "_inputPtr = startPtr;",
      "right" : "_inputPtr = startPtr;",
      "info" : "ExpressionStatement[43550-43571]:ExpressionStatement[43550-43571]"
    }, {
      "left" : "return _parseNumber2(neg, startPtr);",
      "right" : "return _parseNumber2(neg, startPtr);",
      "info" : "ReturnStatement[43592-43628]:ReturnStatement[43592-43628]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[43663-43694]:ExpressionStatement[43663-43694]"
    }, {
      "left" : "while (ch <= INT_9 && ch >= INT_0)",
      "right" : "while (ch <= INT_9 && ch >= INT_0)",
      "info" : "WhileStatement[43721-44001]:WhileStatement[43721-44001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43756-44001]:Block[43756-44001]"
    }, {
      "left" : "++expLen;",
      "right" : "++expLen;",
      "info" : "ExpressionStatement[43774-43783]:ExpressionStatement[43774-43783]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[43800-43939]:IfStatement[43800-43939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43821-43939]:Block[43821-43939]"
    }, {
      "left" : "_inputPtr = startPtr;",
      "right" : "_inputPtr = startPtr;",
      "info" : "ExpressionStatement[43843-43864]:ExpressionStatement[43843-43864]"
    }, {
      "left" : "return _parseNumber2(neg, startPtr);",
      "right" : "return _parseNumber2(neg, startPtr);",
      "info" : "ReturnStatement[43885-43921]:ReturnStatement[43885-43921]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[43956-43987]:ExpressionStatement[43956-43987]"
    }, {
      "left" : "if (expLen == 0)",
      "right" : "if (expLen == 0)",
      "info" : "IfStatement[44079-44205]:IfStatement[44079-44205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44096-44205]:Block[44096-44205]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
      "info" : "ExpressionStatement[44114-44191]:ExpressionStatement[44114-44191]"
    }, {
      "left" : "--ptr;",
      "right" : "--ptr;",
      "info" : "ExpressionStatement[44224-44230]:ExpressionStatement[44224-44230]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[44280-44296]:ExpressionStatement[44280-44296]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[44383-44458]:IfStatement[44383-44458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44413-44458]:Block[44413-44458]"
    }, {
      "left" : "_verifyRootSpace(ch);",
      "right" : "_verifyRootSpace(ch);",
      "info" : "ExpressionStatement[44427-44448]:ExpressionStatement[44427-44448]"
    }, {
      "left" : "int len = ptr-startPtr;",
      "right" : "int len = ptr-startPtr;",
      "info" : "VariableDeclarationStatement[44467-44490]:VariableDeclarationStatement[44467-44490]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "info" : "ExpressionStatement[44499-44556]:ExpressionStatement[44499-44556]"
    }, {
      "left" : "return resetFloat(neg, intLen, fractLen, expLen);",
      "right" : "return resetFloat(neg, intLen, fractLen, expLen);",
      "info" : "ReturnStatement[44598-44647]:ReturnStatement[44598-44647]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[44659-44668]:Modifier[44659-44668]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[44669-44674]:Modifier[44669-44674]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[44675-44684]:SimpleType[44675-44684]"
    }, {
      "left" : "_parseNegNumber",
      "right" : "_parseNegNumber",
      "info" : "SimpleName[44685-44700]:SimpleName[44685-44700]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[44710-44721]:SimpleType[44710-44721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44726-46170]:Block[44726-46170]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[44736-44756]:VariableDeclarationStatement[44736-44756]"
    }, {
      "left" : "int startPtr = ptr-1;",
      "right" : "int startPtr = ptr-1;",
      "info" : "VariableDeclarationStatement[44765-44786]:VariableDeclarationStatement[44765-44786]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[44833-44864]:VariableDeclarationStatement[44833-44864]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[44874-44956]:IfStatement[44874-44956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44895-44956]:Block[44895-44956]"
    }, {
      "left" : "return _parseNumber2(true, startPtr);",
      "right" : "return _parseNumber2(true, startPtr);",
      "info" : "ReturnStatement[44909-44946]:ReturnStatement[44909-44946]"
    }, {
      "left" : "int ch = _inputBuffer[ptr++];",
      "right" : "int ch = _inputBuffer[ptr++];",
      "info" : "VariableDeclarationStatement[44965-44994]:VariableDeclarationStatement[44965-44994]"
    }, {
      "left" : "if (ch > INT_9 || ch < INT_0)",
      "right" : "if (ch > INT_9 || ch < INT_0)",
      "info" : "IfStatement[45066-45192]:IfStatement[45066-45192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45096-45192]:Block[45096-45192]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[45110-45126]:ExpressionStatement[45110-45126]"
    }, {
      "left" : "return _handleInvalidNumberStart(ch, true);",
      "right" : "return _handleInvalidNumberStart(ch, true);",
      "info" : "ReturnStatement[45139-45182]:ReturnStatement[45139-45182]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[45248-45326]:IfStatement[45248-45326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45265-45326]:Block[45265-45326]"
    }, {
      "left" : "return _parseNumber2(true, startPtr);",
      "right" : "return _parseNumber2(true, startPtr);",
      "info" : "ReturnStatement[45279-45316]:ReturnStatement[45279-45316]"
    }, {
      "left" : "int intLen = 1;",
      "right" : "int intLen = 1;",
      "info" : "VariableDeclarationStatement[45335-45350]:VariableDeclarationStatement[45335-45350]"
    }, {
      "left" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                return _parseNumber2(true, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
      "right" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                return _parseNumber2(true, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
      "info" : "LabeledStatement[45435-45736]:LabeledStatement[45435-45736]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[45453-45736]:WhileStatement[45453-45736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45466-45736]:Block[45466-45736]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[45480-45570]:IfStatement[45480-45570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45501-45570]:Block[45501-45570]"
    }, {
      "left" : "return _parseNumber2(true, startPtr);",
      "right" : "return _parseNumber2(true, startPtr);",
      "info" : "ReturnStatement[45519-45556]:ReturnStatement[45519-45556]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[45583-45614]:ExpressionStatement[45583-45614]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[45627-45704]:IfStatement[45627-45704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45657-45704]:Block[45657-45704]"
    }, {
      "left" : "break int_loop;",
      "right" : "break int_loop;",
      "info" : "BreakStatement[45675-45690]:BreakStatement[45675-45690]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[45717-45726]:ExpressionStatement[45717-45726]"
    }, {
      "left" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
      "right" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
      "info" : "IfStatement[45746-45903]:IfStatement[45746-45903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45798-45903]:Block[45798-45903]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[45812-45828]:ExpressionStatement[45812-45828]"
    }, {
      "left" : "return _parseFloat(ch, startPtr, ptr, true, intLen);",
      "right" : "return _parseFloat(ch, startPtr, ptr, true, intLen);",
      "info" : "ReturnStatement[45841-45893]:ReturnStatement[45841-45893]"
    }, {
      "left" : "--ptr;",
      "right" : "--ptr;",
      "info" : "ExpressionStatement[45912-45918]:ExpressionStatement[45912-45918]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[45927-45943]:ExpressionStatement[45927-45943]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[45952-46027]:IfStatement[45952-46027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45982-46027]:Block[45982-46027]"
    }, {
      "left" : "_verifyRootSpace(ch);",
      "right" : "_verifyRootSpace(ch);",
      "info" : "ExpressionStatement[45996-46017]:ExpressionStatement[45996-46017]"
    }, {
      "left" : "int len = ptr-startPtr;",
      "right" : "int len = ptr-startPtr;",
      "info" : "VariableDeclarationStatement[46036-46059]:VariableDeclarationStatement[46036-46059]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "info" : "ExpressionStatement[46068-46125]:ExpressionStatement[46068-46125]"
    }, {
      "left" : "return resetInt(true, intLen);",
      "right" : "return resetInt(true, intLen);",
      "info" : "ReturnStatement[46134-46164]:ReturnStatement[46134-46164]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46503-46510]:Modifier[46503-46510]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[46511-46516]:Modifier[46511-46516]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[46517-46526]:SimpleType[46517-46526]"
    }, {
      "left" : "_parseNumber2",
      "right" : "_parseNumber2",
      "info" : "SimpleName[46527-46540]:SimpleName[46527-46540]"
    }, {
      "left" : "boolean neg",
      "right" : "boolean neg",
      "info" : "SingleVariableDeclaration[46541-46552]:SingleVariableDeclaration[46541-46552]"
    }, {
      "left" : "int startPtr",
      "right" : "int startPtr",
      "info" : "SingleVariableDeclaration[46554-46566]:SingleVariableDeclaration[46554-46566]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[46575-46586]:SimpleType[46575-46586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46591-50827]:Block[46591-50973]"
    }, {
      "left" : "_inputPtr = neg ? (startPtr+1) : startPtr;",
      "right" : "_inputPtr = neg ? (startPtr+1) : startPtr;",
      "info" : "ExpressionStatement[46601-46643]:ExpressionStatement[46601-46643]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[46652-46708]:VariableDeclarationStatement[46652-46708]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[46717-46732]:VariableDeclarationStatement[46717-46732]"
    }, {
      "left" : "if (neg)",
      "right" : "if (neg)",
      "info" : "IfStatement[46775-46831]:IfStatement[46775-46831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46784-46831]:Block[46784-46831]"
    }, {
      "left" : "outBuf[outPtr++] = '-';",
      "right" : "outBuf[outPtr++] = '-';",
      "info" : "ExpressionStatement[46798-46821]:ExpressionStatement[46798-46821]"
    }, {
      "left" : "int intLen = 0;",
      "right" : "int intLen = 0;",
      "info" : "VariableDeclarationStatement[46903-46918]:VariableDeclarationStatement[46903-46918]"
    }, {
      "left" : "char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");",
      "right" : "char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");",
      "info" : "VariableDeclarationStatement[46927-47035]:VariableDeclarationStatement[46927-47035]"
    }, {
      "left" : "if (c == '0')",
      "right" : "if (c == '0')",
      "info" : "IfStatement[47044-47111]:IfStatement[47044-47111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47058-47111]:Block[47058-47111]"
    }, {
      "left" : "c = _verifyNoLeadingZeroes();",
      "right" : "c = _verifyNoLeadingZeroes();",
      "info" : "ExpressionStatement[47072-47101]:ExpressionStatement[47072-47101]"
    }, {
      "left" : "boolean eof = false;",
      "right" : "boolean eof = false;",
      "info" : "VariableDeclarationStatement[47120-47140]:VariableDeclarationStatement[47120-47140]"
    }, {
      "left" : "int_loop:\n        while (c >= '0' && c <= '9') {\n            ++intLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                // EOF is legal for main level int values\n                c = CHAR_NULL;\n                eof = true;\n                break int_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        }",
      "right" : "int_loop:\n        while (c >= '0' && c <= '9') {\n            ++intLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                // EOF is legal for main level int values\n                c = CHAR_NULL;\n                eof = true;\n                break int_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        }",
      "info" : "LabeledStatement[47200-47723]:LabeledStatement[47200-47723]"
    }, {
      "left" : "while (c >= '0' && c <= '9')",
      "right" : "while (c >= '0' && c <= '9')",
      "info" : "WhileStatement[47218-47723]:WhileStatement[47218-47723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47247-47723]:Block[47247-47723]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[47261-47270]:ExpressionStatement[47261-47270]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[47283-47416]:IfStatement[47283-47416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47312-47416]:Block[47312-47416]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[47330-47374]:ExpressionStatement[47330-47374]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[47391-47402]:ExpressionStatement[47391-47402]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[47429-47450]:ExpressionStatement[47429-47450]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[47463-47670]:IfStatement[47463-47670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47506-47670]:Block[47506-47670]"
    }, {
      "left" : "c = CHAR_NULL;",
      "right" : "c = CHAR_NULL;",
      "info" : "ExpressionStatement[47582-47596]:ExpressionStatement[47582-47596]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[47613-47624]:ExpressionStatement[47613-47624]"
    }, {
      "left" : "break int_loop;",
      "right" : "break int_loop;",
      "info" : "BreakStatement[47641-47656]:BreakStatement[47641-47656]"
    }, {
      "left" : "c = _inputBuffer[_inputPtr++];",
      "right" : "c = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[47683-47713]:ExpressionStatement[47683-47713]"
    }, {
      "left" : "if (intLen == 0)",
      "right" : "if (intLen == 0)",
      "info" : "IfStatement[47778-47860]:IfStatement[47778-47860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47795-47860]:Block[47795-47860]"
    }, {
      "left" : "return _handleInvalidNumberStart(c, neg);",
      "right" : "return _handleInvalidNumberStart(c, neg);",
      "info" : "ReturnStatement[47809-47850]:ReturnStatement[47809-47850]"
    }, {
      "left" : "int fractLen = 0;",
      "right" : "int fractLen = 0;",
      "info" : "VariableDeclarationStatement[47870-47887]:VariableDeclarationStatement[47870-47887]"
    }, {
      "left" : "if (c == '.')",
      "right" : "if (c == '.')",
      "info" : "IfStatement[47942-48810]:IfStatement[47942-48956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47956-48810]:Block[47956-48956]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[47987-48008]:ExpressionStatement[48133-48154]"
    }, {
      "left" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n            }",
      "right" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n            }",
      "info" : "LabeledStatement[48022-48600]:LabeledStatement[48168-48746]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[48046-48600]:WhileStatement[48192-48746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48059-48600]:Block[48205-48746]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[48077-48209]:IfStatement[48223-48355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48120-48209]:Block[48266-48355]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[48142-48153]:ExpressionStatement[48288-48299]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[48174-48191]:BreakStatement[48320-48337]"
    }, {
      "left" : "c = _inputBuffer[_inputPtr++];",
      "right" : "c = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[48226-48256]:ExpressionStatement[48372-48402]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[48273-48358]:IfStatement[48419-48504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48301-48358]:Block[48447-48504]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[48323-48340]:BreakStatement[48469-48486]"
    }, {
      "left" : "++fractLen;",
      "right" : "++fractLen;",
      "info" : "ExpressionStatement[48375-48386]:ExpressionStatement[48521-48532]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[48403-48548]:IfStatement[48549-48694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48432-48548]:Block[48578-48694]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[48454-48498]:ExpressionStatement[48600-48644]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[48519-48530]:ExpressionStatement[48665-48676]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[48565-48586]:ExpressionStatement[48711-48732]"
    }, {
      "left" : "if (fractLen == 0)",
      "right" : "if (fractLen == 0)",
      "info" : "IfStatement[48678-48800]:IfStatement[48824-48946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48697-48800]:Block[48843-48946]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "info" : "ExpressionStatement[48715-48786]:ExpressionStatement[48861-48932]"
    }, {
      "left" : "int expLen = 0;",
      "right" : "int expLen = 0;",
      "info" : "VariableDeclarationStatement[48820-48835]:VariableDeclarationStatement[48966-48981]"
    }, {
      "left" : "if (c == 'e' || c == 'E')",
      "right" : "if (c == 'e' || c == 'E')",
      "info" : "IfStatement[48844-50462]:IfStatement[48990-50608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48870-50462]:Block[49016-50608]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[48897-49030]:IfStatement[49043-49176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48926-49030]:Block[49072-49176]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[48944-48988]:ExpressionStatement[49090-49134]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[49005-49016]:ExpressionStatement[49151-49162]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[49043-49064]:ExpressionStatement[49189-49210]"
    }, {
      "left" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"expected a digit for number exponent\");",
      "right" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"expected a digit for number exponent\");",
      "info" : "ExpressionStatement[49144-49270]:ExpressionStatement[49290-49416]"
    }, {
      "left" : "if (c == '-' || c == '+')",
      "right" : "if (c == '-' || c == '+')",
      "info" : "IfStatement[49314-49745]:IfStatement[49460-49891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49340-49745]:Block[49486-49891]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[49358-49503]:IfStatement[49504-49649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49387-49503]:Block[49533-49649]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[49409-49453]:ExpressionStatement[49555-49599]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[49474-49485]:ExpressionStatement[49620-49631]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[49520-49541]:ExpressionStatement[49666-49687]"
    }, {
      "left" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                    : getNextChar(\"expected a digit for number exponent\");",
      "right" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                    : getNextChar(\"expected a digit for number exponent\");",
      "info" : "ExpressionStatement[49601-49731]:ExpressionStatement[49747-49877]"
    }, {
      "left" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n            }",
      "right" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n            }",
      "info" : "LabeledStatement[49759-50249]:LabeledStatement[49905-50395]"
    }, {
      "left" : "while (c <= INT_9 && c >= INT_0)",
      "right" : "while (c <= INT_9 && c >= INT_0)",
      "info" : "WhileStatement[49781-50249]:WhileStatement[49927-50395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49814-50249]:Block[49960-50395]"
    }, {
      "left" : "++expLen;",
      "right" : "++expLen;",
      "info" : "ExpressionStatement[49832-49841]:ExpressionStatement[49978-49987]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[49858-50003]:IfStatement[50004-50149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49887-50003]:Block[50033-50149]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[49909-49953]:ExpressionStatement[50055-50099]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[49974-49985]:ExpressionStatement[50120-50131]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[50020-50041]:ExpressionStatement[50166-50187]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[50058-50188]:IfStatement[50204-50334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50101-50188]:Block[50247-50334]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[50123-50134]:ExpressionStatement[50269-50280]"
    }, {
      "left" : "break exp_loop;",
      "right" : "break exp_loop;",
      "info" : "BreakStatement[50155-50170]:BreakStatement[50301-50316]"
    }, {
      "left" : "c = _inputBuffer[_inputPtr++];",
      "right" : "c = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[50205-50235]:ExpressionStatement[50351-50381]"
    }, {
      "left" : "if (expLen == 0)",
      "right" : "if (expLen == 0)",
      "info" : "IfStatement[50327-50452]:IfStatement[50473-50598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50344-50452]:Block[50490-50598]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "info" : "ExpressionStatement[50362-50438]:ExpressionStatement[50508-50584]"
    }, {
      "left" : "if (!eof)",
      "right" : "if (!eof)",
      "info" : "IfStatement[50548-50689]:IfStatement[50694-50835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50558-50689]:Block[50704-50835]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[50572-50584]:ExpressionStatement[50718-50730]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[50597-50679]:IfStatement[50743-50825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50627-50679]:Block[50773-50825]"
    }, {
      "left" : "_verifyRootSpace(c);",
      "right" : "_verifyRootSpace(c);",
      "info" : "ExpressionStatement[50645-50665]:ExpressionStatement[50791-50811]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[50698-50735]:ExpressionStatement[50844-50881]"
    }, {
      "left" : "return reset(neg, intLen, fractLen, expLen);",
      "right" : "return reset(neg, intLen, fractLen, expLen);",
      "info" : "ReturnStatement[50777-50821]:ReturnStatement[50923-50967]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50954-50961]:Modifier[51100-51107]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[50962-50967]:Modifier[51108-51113]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[50968-50972]:PrimitiveType[51114-51118]"
    }, {
      "left" : "_verifyNoLeadingZeroes",
      "right" : "_verifyNoLeadingZeroes",
      "info" : "SimpleName[50973-50995]:SimpleName[51119-51141]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[51005-51016]:SimpleType[51151-51162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51021-51399]:Block[51167-51545]"
    }, {
      "left" : "if (_inputPtr < _inputEnd)",
      "right" : "if (_inputPtr < _inputEnd)",
      "info" : "IfStatement[51059-51319]:IfStatement[51205-51465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51086-51319]:Block[51232-51465]"
    }, {
      "left" : "char ch = _inputBuffer[_inputPtr];",
      "right" : "char ch = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[51100-51134]:VariableDeclarationStatement[51246-51280]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[51240-51309]:IfStatement[51386-51455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51266-51309]:Block[51412-51455]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[51284-51295]:ReturnStatement[51430-51441]"
    }, {
      "left" : "return _verifyNLZ2();",
      "right" : "return _verifyNLZ2();",
      "info" : "ReturnStatement[51372-51393]:ReturnStatement[51518-51539]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51405-51412]:Modifier[51551-51558]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[51413-51417]:PrimitiveType[51559-51563]"
    }, {
      "left" : "_verifyNLZ2",
      "right" : "_verifyNLZ2",
      "info" : "SimpleName[51418-51429]:SimpleName[51564-51575]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[51439-51450]:SimpleType[51585-51596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51455-52435]:Block[51601-52581]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[51465-51543]:IfStatement[51611-51689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51508-51543]:Block[51654-51689]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[51522-51533]:ReturnStatement[51668-51679]"
    }, {
      "left" : "char ch = _inputBuffer[_inputPtr];",
      "right" : "char ch = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[51552-51586]:VariableDeclarationStatement[51698-51732]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[51595-51656]:IfStatement[51741-51802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51621-51656]:Block[51767-51802]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[51635-51646]:ReturnStatement[51781-51792]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "right" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "info" : "IfStatement[51665-51792]:IfStatement[51811-51938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51718-51792]:Block[51864-51938]"
    }, {
      "left" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "right" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "info" : "ExpressionStatement[51732-51782]:ExpressionStatement[51878-51928]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[51911-51923]:ExpressionStatement[52057-52069]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[51962-52410]:IfStatement[52108-52556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51979-52410]:Block[52125-52556]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[51993-52400]:WhileStatement[52139-52546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52037-52400]:Block[52183-52546]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr];",
      "right" : "ch = _inputBuffer[_inputPtr];",
      "info" : "ExpressionStatement[52055-52084]:ExpressionStatement[52201-52230]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[52101-52221]:IfStatement[52247-52367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52127-52221]:Block[52273-52367]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[52192-52203]:ReturnStatement[52338-52349]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[52238-52250]:ExpressionStatement[52384-52396]"
    }, {
      "left" : "if (ch != '0')",
      "right" : "if (ch != '0')",
      "info" : "IfStatement[52289-52386]:IfStatement[52435-52532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52304-52386]:Block[52450-52532]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52362-52368]:BreakStatement[52508-52514]"
    }, {
      "left" : "return ch;",
      "right" : "return ch;",
      "info" : "ReturnStatement[52419-52429]:ReturnStatement[52565-52575]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[52561-52570]:Modifier[52707-52716]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[52571-52580]:SimpleType[52717-52726]"
    }, {
      "left" : "_handleInvalidNumberStart",
      "right" : "_handleInvalidNumberStart",
      "info" : "SimpleName[52581-52606]:SimpleName[52727-52752]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[52607-52613]:SingleVariableDeclaration[52753-52759]"
    }, {
      "left" : "boolean negative",
      "right" : "boolean negative",
      "info" : "SingleVariableDeclaration[52615-52631]:SingleVariableDeclaration[52761-52777]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[52640-52651]:SimpleType[52786-52797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52656-53921]:Block[52802-54067]"
    }, {
      "left" : "if (ch == 'I')",
      "right" : "if (ch == 'I')",
      "info" : "IfStatement[52666-53784]:IfStatement[52812-53930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52681-53784]:Block[52827-53930]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[52695-52803]:IfStatement[52841-52949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52723-52803]:Block[52869-52949]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[52741-52789]:IfStatement[52887-52935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52758-52789]:Block[52904-52935]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[52760-52787]:ExpressionStatement[52906-52933]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[52816-52847]:ExpressionStatement[52962-52993]"
    }, {
      "left" : "if (ch == 'N')",
      "right" : "if (ch == 'N')",
      "info" : "IfStatement[52860-53774]:IfStatement[53006-53920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52875-53309]:Block[53021-53455]"
    }, {
      "left" : "String match = negative ? \"-INF\" :\"+INF\";",
      "right" : "String match = negative ? \"-INF\" :\"+INF\";",
      "info" : "VariableDeclarationStatement[52893-52934]:VariableDeclarationStatement[53039-53080]"
    }, {
      "left" : "_matchToken(match, 3);",
      "right" : "_matchToken(match, 3);",
      "info" : "ExpressionStatement[52951-52973]:ExpressionStatement[53097-53119]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[52990-53169]:IfStatement[53136-53315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53040-53169]:Block[53186-53315]"
    }, {
      "left" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[53062-53151]:ReturnStatement[53208-53297]"
    }, {
      "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[53186-53295]:ExpressionStatement[53332-53441]"
    }, {
      "left" : "if (ch == 'n')",
      "right" : "if (ch == 'n')",
      "info" : "IfStatement[53315-53774]:IfStatement[53461-53920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53330-53774]:Block[53476-53920]"
    }, {
      "left" : "String match = negative ? \"-Infinity\" :\"+Infinity\";",
      "right" : "String match = negative ? \"-Infinity\" :\"+Infinity\";",
      "info" : "VariableDeclarationStatement[53348-53399]:VariableDeclarationStatement[53494-53545]"
    }, {
      "left" : "_matchToken(match, 3);",
      "right" : "_matchToken(match, 3);",
      "info" : "ExpressionStatement[53416-53438]:ExpressionStatement[53562-53584]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[53455-53634]:IfStatement[53601-53780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53505-53634]:Block[53651-53780]"
    }, {
      "left" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[53527-53616]:ReturnStatement[53673-53762]"
    }, {
      "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[53651-53760]:ExpressionStatement[53797-53906]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "info" : "ExpressionStatement[53793-53894]:ExpressionStatement[53939-54040]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[53903-53915]:ReturnStatement[54049-54061]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54172-54179]:Modifier[54318-54325]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[54180-54185]:Modifier[54326-54331]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54186-54190]:PrimitiveType[54332-54336]"
    }, {
      "left" : "_verifyRootSpace",
      "right" : "_verifyRootSpace",
      "info" : "SimpleName[54191-54207]:SimpleName[54337-54353]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[54208-54214]:SingleVariableDeclaration[54354-54360]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[54223-54234]:SimpleType[54369-54380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54239-54624]:Block[54385-54770]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[54309-54321]:ExpressionStatement[54455-54467]"
    }, {
      "left" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
      "right" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
      "info" : "SwitchStatement[54330-54584]:SwitchStatement[54476-54730]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[54352-54361]:SwitchCase[54498-54507]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[54370-54380]:SwitchCase[54516-54526]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[54393-54400]:ReturnStatement[54539-54546]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[54409-54419]:SwitchCase[54555-54565]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[54432-54442]:ExpressionStatement[54578-54588]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[54455-54462]:ReturnStatement[54601-54608]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[54471-54481]:SwitchCase[54617-54627]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[54494-54510]:ExpressionStatement[54640-54656]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[54523-54554]:ExpressionStatement[54669-54700]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[54567-54574]:ReturnStatement[54713-54720]"
    }, {
      "left" : "_reportMissingRootWS(ch);",
      "right" : "_reportMissingRootWS(ch);",
      "info" : "ExpressionStatement[54593-54618]:ExpressionStatement[54739-54764]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[54817-54826]:Modifier[54963-54972]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[54827-54832]:Modifier[54973-54978]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[54833-54839]:SimpleType[54979-54985]"
    }, {
      "left" : "_parseName",
      "right" : "_parseName",
      "info" : "SimpleName[54840-54850]:SimpleName[54986-54996]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[54860-54871]:SimpleType[55006-55017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54876-55754]:Block[55022-55900]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[55044-55064]:VariableDeclarationStatement[55190-55210]"
    }, {
      "left" : "int hash = _hashSeed;",
      "right" : "int hash = _hashSeed;",
      "info" : "VariableDeclarationStatement[55073-55094]:VariableDeclarationStatement[55219-55240]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[55103-55133]:VariableDeclarationStatement[55249-55279]"
    }, {
      "left" : "while (ptr < _inputEnd)",
      "right" : "while (ptr < _inputEnd)",
      "info" : "WhileStatement[55143-55640]:WhileStatement[55289-55786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55167-55640]:Block[55313-55786]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[55181-55208]:VariableDeclarationStatement[55327-55354]"
    }, {
      "left" : "if (ch < codes.length && codes[ch] != 0)",
      "right" : "if (ch < codes.length && codes[ch] != 0)",
      "info" : "IfStatement[55221-55542]:IfStatement[55367-55688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55262-55542]:Block[55408-55688]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[55280-55505]:IfStatement[55426-55651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55295-55505]:Block[55441-55651]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[55317-55339]:VariableDeclarationStatement[55463-55485]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[55360-55378]:ExpressionStatement[55506-55524]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[55420-55487]:ReturnStatement[55566-55633]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55522-55528]:BreakStatement[55668-55674]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "info" : "ExpressionStatement[55555-55611]:ExpressionStatement[55701-55757]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[55624-55630]:ExpressionStatement[55770-55776]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[55649-55671]:VariableDeclarationStatement[55795-55817]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[55680-55696]:ExpressionStatement[55826-55842]"
    }, {
      "left" : "return _parseName2(start, hash, INT_QUOTE);",
      "right" : "return _parseName2(start, hash, INT_QUOTE);",
      "info" : "ReturnStatement[55705-55748]:ReturnStatement[55851-55894]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55760-55767]:Modifier[55906-55913]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[55768-55774]:SimpleType[55914-55920]"
    }, {
      "left" : "_parseName2",
      "right" : "_parseName2",
      "info" : "SimpleName[55775-55786]:SimpleName[55921-55932]"
    }, {
      "left" : "int startPtr",
      "right" : "int startPtr",
      "info" : "SingleVariableDeclaration[55787-55799]:SingleVariableDeclaration[55933-55945]"
    }, {
      "left" : "int hash",
      "right" : "int hash",
      "info" : "SingleVariableDeclaration[55801-55809]:SingleVariableDeclaration[55947-55955]"
    }, {
      "left" : "int endChar",
      "right" : "int endChar",
      "info" : "SingleVariableDeclaration[55811-55822]:SingleVariableDeclaration[55957-55968]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[55831-55842]:SimpleType[55977-55988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55847-57775]:Block[55993-57921]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "info" : "ExpressionStatement[55857-55933]:ExpressionStatement[56003-56079]"
    }, {
      "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "info" : "VariableDeclarationStatement[56088-56136]:VariableDeclarationStatement[56234-56282]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[56145-56194]:VariableDeclarationStatement[56291-56340]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[56204-57477]:WhileStatement[56350-57623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56217-57477]:Block[56363-57623]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[56231-56425]:IfStatement[56377-56571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56259-56425]:Block[56405-56571]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[56277-56411]:IfStatement[56423-56557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56294-56411]:Block[56440-56557]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing '\"+((char) endChar)+\"' for name\");",
      "right" : "_reportInvalidEOF(\": was expecting closing '\"+((char) endChar)+\"' for name\");",
      "info" : "ExpressionStatement[56316-56393]:ExpressionStatement[56462-56539]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[56438-56473]:VariableDeclarationStatement[56584-56619]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[56486-56502]:VariableDeclarationStatement[56632-56648]"
    }, {
      "left" : "if (i <= INT_BACKSLASH)",
      "right" : "if (i <= INT_BACKSLASH)",
      "info" : "IfStatement[56515-57142]:IfStatement[56661-57288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56539-57142]:Block[56685-57288]"
    }, {
      "left" : "if (i == INT_BACKSLASH)",
      "right" : "if (i == INT_BACKSLASH)",
      "info" : "IfStatement[56557-57128]:IfStatement[56703-57274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56581-56873]:Block[56727-57019]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[56834-56855]:ExpressionStatement[56980-57001]"
    }, {
      "left" : "if (i <= endChar)",
      "right" : "if (i <= endChar)",
      "info" : "IfStatement[56879-57128]:IfStatement[57025-57274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56897-57128]:Block[57043-57274]"
    }, {
      "left" : "if (i == endChar)",
      "right" : "if (i == endChar)",
      "info" : "IfStatement[56919-56991]:IfStatement[57065-57137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56937-56991]:Block[57083-57137]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56963-56969]:BreakStatement[57109-57115]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[57012-57110]:IfStatement[57158-57256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57031-57110]:Block[57177-57256]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"name\");",
      "right" : "_throwUnquotedSpace(i, \"name\");",
      "info" : "ExpressionStatement[57057-57088]:ExpressionStatement[57203-57234]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + c;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + c;",
      "info" : "ExpressionStatement[57155-57210]:ExpressionStatement[57301-57356]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[57268-57289]:ExpressionStatement[57414-57435]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[57334-57467]:IfStatement[57480-57613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57363-57467]:Block[57509-57613]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[57381-57425]:ExpressionStatement[57527-57571]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[57442-57453]:ExpressionStatement[57588-57599]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[57486-57523]:ExpressionStatement[57632-57669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57532-57769]:Block[57678-57915]"
    }, {
      "left" : "TextBuffer tb = _textBuffer;",
      "right" : "TextBuffer tb = _textBuffer;",
      "info" : "VariableDeclarationStatement[57546-57574]:VariableDeclarationStatement[57692-57720]"
    }, {
      "left" : "char[] buf = tb.getTextBuffer();",
      "right" : "char[] buf = tb.getTextBuffer();",
      "info" : "VariableDeclarationStatement[57587-57619]:VariableDeclarationStatement[57733-57765]"
    }, {
      "left" : "int start = tb.getTextOffset();",
      "right" : "int start = tb.getTextOffset();",
      "info" : "VariableDeclarationStatement[57632-57663]:VariableDeclarationStatement[57778-57809]"
    }, {
      "left" : "int len = tb.size();",
      "right" : "int len = tb.size();",
      "info" : "VariableDeclarationStatement[57676-57696]:VariableDeclarationStatement[57822-57842]"
    }, {
      "left" : "return _symbols.findSymbol(buf, start, len, hash);",
      "right" : "return _symbols.findSymbol(buf, start, len, hash);",
      "info" : "ReturnStatement[57709-57759]:ReturnStatement[57855-57905]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[58031-58040]:Modifier[58177-58186]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[58041-58047]:SimpleType[58187-58193]"
    }, {
      "left" : "_handleOddName",
      "right" : "_handleOddName",
      "info" : "SimpleName[58048-58062]:SimpleName[58194-58208]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[58063-58068]:SingleVariableDeclaration[58209-58214]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[58077-58088]:SimpleType[58223-58234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58093-60129]:Block[58239-60275]"
    }, {
      "left" : "if (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[58149-58254]:IfStatement[58295-58400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58206-58254]:Block[58352-58400]"
    }, {
      "left" : "return _parseAposName();",
      "right" : "return _parseAposName();",
      "info" : "ReturnStatement[58220-58244]:ReturnStatement[58366-58390]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "right" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "info" : "IfStatement[58329-58480]:IfStatement[58475-58626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58381-58480]:Block[58527-58626]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");",
      "info" : "ExpressionStatement[58395-58470]:ExpressionStatement[58541-58616]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeLatin1JsNames();",
      "right" : "final int[] codes = CharTypes.getInputCodeLatin1JsNames();",
      "info" : "VariableDeclarationStatement[58489-58547]:VariableDeclarationStatement[58635-58693]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[58556-58589]:VariableDeclarationStatement[58702-58735]"
    }, {
      "left" : "boolean firstOk;",
      "right" : "boolean firstOk;",
      "info" : "VariableDeclarationStatement[58672-58688]:VariableDeclarationStatement[58818-58834]"
    }, {
      "left" : "if (i < maxCode)",
      "right" : "if (i < maxCode)",
      "info" : "IfStatement[58698-58887]:IfStatement[58844-59033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58715-58806]:Block[58861-58952]"
    }, {
      "left" : "firstOk = (codes[i] == 0);",
      "right" : "firstOk = (codes[i] == 0);",
      "info" : "ExpressionStatement[58770-58796]:ExpressionStatement[58916-58942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58812-58887]:Block[58958-59033]"
    }, {
      "left" : "firstOk = Character.isJavaIdentifierPart((char) i);",
      "right" : "firstOk = Character.isJavaIdentifierPart((char) i);",
      "info" : "ExpressionStatement[58826-58877]:ExpressionStatement[58972-59023]"
    }, {
      "left" : "if (!firstOk)",
      "right" : "if (!firstOk)",
      "info" : "IfStatement[58896-59073]:IfStatement[59042-59219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58910-59073]:Block[59056-59219]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "info" : "ExpressionStatement[58924-59063]:ExpressionStatement[59070-59209]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[59082-59102]:VariableDeclarationStatement[59228-59248]"
    }, {
      "left" : "int hash = _hashSeed;",
      "right" : "int hash = _hashSeed;",
      "info" : "VariableDeclarationStatement[59111-59132]:VariableDeclarationStatement[59257-59278]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[59141-59172]:VariableDeclarationStatement[59287-59318]"
    }, {
      "left" : "if (ptr < inputLen)",
      "right" : "if (ptr < inputLen)",
      "info" : "IfStatement[59182-60013]:IfStatement[59328-60159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59202-60013]:Block[59348-60159]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[59216-60003]:DoStatement[59362-60149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59219-59979]:Block[59365-60125]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[59237-59264]:VariableDeclarationStatement[59383-59410]"
    }, {
      "left" : "if (ch < maxCode)",
      "right" : "if (ch < maxCode)",
      "info" : "IfStatement[59281-59869]:IfStatement[59427-60015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59299-59595]:Block[59445-59741]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[59321-59577]:IfStatement[59467-59723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59341-59577]:Block[59487-59723]"
    }, {
      "left" : "int start = _inputPtr-1;",
      "right" : "int start = _inputPtr-1;",
      "info" : "VariableDeclarationStatement[59367-59391]:VariableDeclarationStatement[59513-59537]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[59447-59463]:ExpressionStatement[59593-59609]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[59488-59555]:ReturnStatement[59634-59701]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart((char) ch))",
      "right" : "if (!Character.isJavaIdentifierPart((char) ch))",
      "info" : "IfStatement[59601-59869]:IfStatement[59747-60015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59649-59869]:Block[59795-60015]"
    }, {
      "left" : "int start = _inputPtr-1;",
      "right" : "int start = _inputPtr-1;",
      "info" : "VariableDeclarationStatement[59671-59695]:VariableDeclarationStatement[59817-59841]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[59747-59763]:ExpressionStatement[59893-59909]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[59784-59851]:ReturnStatement[59930-59997]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "info" : "ExpressionStatement[59886-59942]:ExpressionStatement[60032-60088]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[59959-59965]:ExpressionStatement[60105-60111]"
    }, {
      "left" : "int start = _inputPtr-1;",
      "right" : "int start = _inputPtr-1;",
      "info" : "VariableDeclarationStatement[60022-60046]:VariableDeclarationStatement[60168-60192]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[60055-60071]:ExpressionStatement[60201-60217]"
    }, {
      "left" : "return _handleOddName2(start, hash, codes);",
      "right" : "return _handleOddName2(start, hash, codes);",
      "info" : "ReturnStatement[60080-60123]:ReturnStatement[60226-60269]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[60135-60144]:Modifier[60281-60290]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[60145-60151]:SimpleType[60291-60297]"
    }, {
      "left" : "_parseAposName",
      "right" : "_parseAposName",
      "info" : "SimpleName[60152-60166]:SimpleName[60298-60312]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[60176-60187]:SimpleType[60322-60333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60192-61118]:Block[60338-61264]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[60249-60269]:VariableDeclarationStatement[60395-60415]"
    }, {
      "left" : "int hash = _hashSeed;",
      "right" : "int hash = _hashSeed;",
      "info" : "VariableDeclarationStatement[60278-60299]:VariableDeclarationStatement[60424-60445]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[60308-60339]:VariableDeclarationStatement[60454-60485]"
    }, {
      "left" : "if (ptr < inputLen)",
      "right" : "if (ptr < inputLen)",
      "info" : "IfStatement[60349-61007]:IfStatement[60495-61153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60369-61007]:Block[60515-61153]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[60383-60413]:VariableDeclarationStatement[60529-60559]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[60426-60459]:VariableDeclarationStatement[60572-60605]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[60473-60997]:DoStatement[60619-61143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60476-60973]:Block[60622-61119]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[60494-60521]:VariableDeclarationStatement[60640-60667]"
    }, {
      "left" : "if (ch == '\\'')",
      "right" : "if (ch == '\\'')",
      "info" : "IfStatement[60538-60764]:IfStatement[60684-60910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60554-60764]:Block[60700-60910]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[60576-60598]:VariableDeclarationStatement[60722-60744]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[60619-60637]:ExpressionStatement[60765-60783]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[60679-60746]:ReturnStatement[60825-60892]"
    }, {
      "left" : "if (ch < maxCode && codes[ch] != 0)",
      "right" : "if (ch < maxCode && codes[ch] != 0)",
      "info" : "IfStatement[60781-60863]:IfStatement[60927-61009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60817-60863]:Block[60963-61009]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60839-60845]:BreakStatement[60985-60991]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "info" : "ExpressionStatement[60880-60936]:ExpressionStatement[61026-61082]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[60953-60959]:ExpressionStatement[61099-61105]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[61017-61039]:VariableDeclarationStatement[61163-61185]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[61048-61064]:ExpressionStatement[61194-61210]"
    }, {
      "left" : "return _parseName2(start, hash, '\\'');",
      "right" : "return _parseName2(start, hash, '\\'');",
      "info" : "ReturnStatement[61074-61112]:ReturnStatement[61220-61258]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[61279-61288]:Modifier[61425-61434]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[61289-61298]:SimpleType[61435-61444]"
    }, {
      "left" : "_handleOddValue",
      "right" : "_handleOddValue",
      "info" : "SimpleName[61299-61314]:SimpleName[61445-61460]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[61315-61320]:SingleVariableDeclaration[61461-61466]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[61329-61340]:SimpleType[61475-61486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61345-63326]:Block[61491-63472]"
    }, {
      "left" : "switch (i) {\n        case '\\'':\n            /* [JACKSON-173]: allow single quotes. Unlike with regular\n             * Strings, we'll eagerly parse contents; this so that there's\n             * no need to store information on quote char used.\n             *\n             * Also, no separation to fast/slow parsing; we'll just do\n             * one regular (~= slowish) parsing, to keep code simple\n             */\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n        }",
      "right" : "switch (i) {\n        case '\\'':\n            /* [JACKSON-173]: allow single quotes. Unlike with regular\n             * Strings, we'll eagerly parse contents; this so that there's\n             * no need to store information on quote char used.\n             *\n             * Also, no separation to fast/slow parsing; we'll just do\n             * one regular (~= slowish) parsing, to keep code simple\n             */\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n        }",
      "info" : "SwitchStatement[61432-62939]:SwitchStatement[61578-63085]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[61453-61463]:SwitchCase[61599-61609]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[61857-61954]:IfStatement[62003-62100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61901-61954]:Block[62047-62100]"
    }, {
      "left" : "return _handleApos();",
      "right" : "return _handleApos();",
      "info" : "ReturnStatement[61919-61940]:ReturnStatement[62065-62086]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61967-61973]:BreakStatement[62113-62119]"
    }, {
      "left" : "case 'N':",
      "right" : "case 'N':",
      "info" : "SwitchCase[61982-61991]:SwitchCase[62128-62137]"
    }, {
      "left" : "_matchToken(\"NaN\", 1);",
      "right" : "_matchToken(\"NaN\", 1);",
      "info" : "ExpressionStatement[62004-62026]:ExpressionStatement[62150-62172]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[62039-62158]:IfStatement[62185-62304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62089-62158]:Block[62235-62304]"
    }, {
      "left" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "right" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "info" : "ReturnStatement[62107-62144]:ReturnStatement[62253-62290]"
    }, {
      "left" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[62171-62274]:ExpressionStatement[62317-62420]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62287-62293]:BreakStatement[62433-62439]"
    }, {
      "left" : "case 'I':",
      "right" : "case 'I':",
      "info" : "SwitchCase[62302-62311]:SwitchCase[62448-62457]"
    }, {
      "left" : "_matchToken(\"Infinity\", 1);",
      "right" : "_matchToken(\"Infinity\", 1);",
      "info" : "ExpressionStatement[62324-62351]:ExpressionStatement[62470-62497]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[62364-62502]:IfStatement[62510-62648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62414-62502]:Block[62560-62648]"
    }, {
      "left" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[62432-62488]:ReturnStatement[62578-62634]"
    }, {
      "left" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[62515-62623]:ExpressionStatement[62661-62769]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62636-62642]:BreakStatement[62782-62788]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[62651-62660]:SwitchCase[62797-62806]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[62705-62849]:IfStatement[62851-62995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62733-62849]:Block[62879-62995]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[62751-62835]:IfStatement[62897-62981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62768-62835]:Block[62914-62981]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[62790-62817]:ExpressionStatement[62936-62963]"
    }, {
      "left" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);",
      "right" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);",
      "info" : "ReturnStatement[62862-62929]:ReturnStatement[63008-63075]"
    }, {
      "left" : "if (Character.isJavaIdentifierStart(i))",
      "right" : "if (Character.isJavaIdentifierStart(i))",
      "info" : "IfStatement[63002-63132]:IfStatement[63148-63278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63042-63132]:Block[63188-63278]"
    }, {
      "left" : "_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");",
      "right" : "_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[63056-63122]:ExpressionStatement[63202-63268]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "right" : "_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[63189-63299]:ExpressionStatement[63335-63445]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[63308-63320]:ReturnStatement[63454-63466]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[63332-63341]:Modifier[63478-63487]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[63342-63351]:SimpleType[63488-63497]"
    }, {
      "left" : "_handleApos",
      "right" : "_handleApos",
      "info" : "SimpleName[63352-63363]:SimpleName[63498-63509]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[63373-63384]:SimpleType[63519-63530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63389-64795]:Block[63535-64941]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[63399-63455]:VariableDeclarationStatement[63545-63601]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[63464-63513]:VariableDeclarationStatement[63610-63659]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[63523-64704]:WhileStatement[63669-64850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63536-64704]:Block[63682-64850]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[63550-63737]:IfStatement[63696-63883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63578-63737]:Block[63724-63883]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[63596-63723]:IfStatement[63742-63869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63613-63723]:Block[63759-63869]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "info" : "ExpressionStatement[63635-63705]:ExpressionStatement[63781-63851]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[63750-63785]:VariableDeclarationStatement[63896-63931]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[63798-63814]:VariableDeclarationStatement[63944-63960]"
    }, {
      "left" : "if (i <= '\\\\')",
      "right" : "if (i <= '\\\\')",
      "info" : "IfStatement[63827-64438]:IfStatement[63973-64584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63842-64438]:Block[63988-64584]"
    }, {
      "left" : "if (i == '\\\\')",
      "right" : "if (i == '\\\\')",
      "info" : "IfStatement[63860-64424]:IfStatement[64006-64570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63875-64167]:Block[64021-64313]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[64128-64149]:ExpressionStatement[64274-64295]"
    }, {
      "left" : "if (i <= '\\'')",
      "right" : "if (i <= '\\'')",
      "info" : "IfStatement[64173-64424]:IfStatement[64319-64570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64188-64424]:Block[64334-64570]"
    }, {
      "left" : "if (i == '\\'')",
      "right" : "if (i == '\\'')",
      "info" : "IfStatement[64210-64279]:IfStatement[64356-64425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64225-64279]:Block[64371-64425]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64251-64257]:BreakStatement[64397-64403]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[64300-64406]:IfStatement[64446-64552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64319-64406]:Block[64465-64552]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"string value\");",
      "right" : "_throwUnquotedSpace(i, \"string value\");",
      "info" : "ExpressionStatement[64345-64384]:ExpressionStatement[64491-64530]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[64482-64615]:IfStatement[64628-64761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64511-64615]:Block[64657-64761]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[64529-64573]:ExpressionStatement[64675-64719]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[64590-64601]:ExpressionStatement[64736-64747]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[64673-64694]:ExpressionStatement[64819-64840]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[64713-64750]:ExpressionStatement[64859-64896]"
    }, {
      "left" : "return JsonToken.VALUE_STRING;",
      "right" : "return JsonToken.VALUE_STRING;",
      "info" : "ReturnStatement[64759-64789]:ReturnStatement[64905-64935]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[64801-64808]:Modifier[64947-64954]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[64809-64815]:SimpleType[64955-64961]"
    }, {
      "left" : "_handleOddName2",
      "right" : "_handleOddName2",
      "info" : "SimpleName[64816-64831]:SimpleName[64962-64977]"
    }, {
      "left" : "int startPtr",
      "right" : "int startPtr",
      "info" : "SingleVariableDeclaration[64832-64844]:SingleVariableDeclaration[64978-64990]"
    }, {
      "left" : "int hash",
      "right" : "int hash",
      "info" : "SingleVariableDeclaration[64846-64854]:SingleVariableDeclaration[64992-65000]"
    }, {
      "left" : "int[] codes",
      "right" : "int[] codes",
      "info" : "SingleVariableDeclaration[64856-64867]:SingleVariableDeclaration[65002-65013]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[64876-64887]:SimpleType[65022-65033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64892-66286]:Block[65038-66432]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "info" : "ExpressionStatement[64902-64978]:ExpressionStatement[65048-65124]"
    }, {
      "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "info" : "VariableDeclarationStatement[64987-65035]:VariableDeclarationStatement[65133-65181]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[65044-65093]:VariableDeclarationStatement[65190-65239]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[65102-65135]:VariableDeclarationStatement[65248-65281]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[65145-65987]:WhileStatement[65291-66133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65158-65987]:Block[65304-66133]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[65172-65340]:IfStatement[65318-65486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65200-65340]:Block[65346-65486]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[65218-65326]:IfStatement[65364-65472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65235-65326]:Block[65381-65472]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65302-65308]:BreakStatement[65448-65454]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[65353-65386]:VariableDeclarationStatement[65499-65532]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[65399-65415]:VariableDeclarationStatement[65545-65561]"
    }, {
      "left" : "if (i <= maxCode)",
      "right" : "if (i <= maxCode)",
      "info" : "IfStatement[65428-65627]:IfStatement[65574-65773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65446-65543]:Block[65592-65689]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[65464-65529]:IfStatement[65610-65675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65483-65529]:Block[65629-65675]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65505-65511]:BreakStatement[65651-65657]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart(c))",
      "right" : "if (!Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[65549-65627]:IfStatement[65695-65773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65589-65627]:Block[65735-65773]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65607-65613]:BreakStatement[65753-65759]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[65640-65652]:ExpressionStatement[65786-65798]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
      "info" : "ExpressionStatement[65665-65720]:ExpressionStatement[65811-65866]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[65778-65799]:ExpressionStatement[65924-65945]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[65844-65977]:IfStatement[65990-66123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65873-65977]:Block[66019-66123]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[65891-65935]:ExpressionStatement[66037-66081]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[65952-65963]:ExpressionStatement[66098-66109]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[65996-66033]:ExpressionStatement[66142-66179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66042-66280]:Block[66188-66426]"
    }, {
      "left" : "TextBuffer tb = _textBuffer;",
      "right" : "TextBuffer tb = _textBuffer;",
      "info" : "VariableDeclarationStatement[66056-66084]:VariableDeclarationStatement[66202-66230]"
    }, {
      "left" : "char[] buf = tb.getTextBuffer();",
      "right" : "char[] buf = tb.getTextBuffer();",
      "info" : "VariableDeclarationStatement[66097-66129]:VariableDeclarationStatement[66243-66275]"
    }, {
      "left" : "int start = tb.getTextOffset();",
      "right" : "int start = tb.getTextOffset();",
      "info" : "VariableDeclarationStatement[66142-66173]:VariableDeclarationStatement[66288-66319]"
    }, {
      "left" : "int len = tb.size();",
      "right" : "int len = tb.size();",
      "info" : "VariableDeclarationStatement[66186-66206]:VariableDeclarationStatement[66332-66352]"
    }, {
      "left" : "return _symbols.findSymbol(buf, start, len, hash);",
      "right" : "return _symbols.findSymbol(buf, start, len, hash);",
      "info" : "ReturnStatement[66220-66270]:ReturnStatement[66366-66416]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[66292-66301]:MarkerAnnotation[66438-66447]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[66306-66315]:Modifier[66452-66461]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[66316-66321]:Modifier[66462-66467]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[66322-66326]:PrimitiveType[66468-66472]"
    }, {
      "left" : "_finishString",
      "right" : "_finishString",
      "info" : "SimpleName[66327-66340]:SimpleName[66473-66486]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[66350-66361]:SimpleType[66496-66507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66366-67481]:Block[66512-67627]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[66563-66583]:VariableDeclarationStatement[66709-66729]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[66592-66623]:VariableDeclarationStatement[66738-66769]"
    }, {
      "left" : "if (ptr < inputLen)",
      "right" : "if (ptr < inputLen)",
      "info" : "IfStatement[66633-67250]:IfStatement[66779-67396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66653-67250]:Block[66799-67396]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[66667-66697]:VariableDeclarationStatement[66813-66843]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[66710-66743]:VariableDeclarationStatement[66856-66889]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[66757-67240]:DoStatement[66903-67386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66760-67216]:Block[66906-67362]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[66778-66805]:VariableDeclarationStatement[66924-66951]"
    }, {
      "left" : "if (ch < maxCode && codes[ch] != 0)",
      "right" : "if (ch < maxCode && codes[ch] != 0)",
      "info" : "IfStatement[66822-67179]:IfStatement[66968-67325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66858-67179]:Block[67004-67325]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[66880-67134]:IfStatement[67026-67280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66895-67134]:Block[67041-67280]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "info" : "ExpressionStatement[66921-66991]:ExpressionStatement[67067-67137]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[67016-67034]:ExpressionStatement[67162-67180]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[67105-67112]:ReturnStatement[67251-67258]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67155-67161]:BreakStatement[67301-67307]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[67196-67202]:ExpressionStatement[67342-67348]"
    }, {
      "left" : "_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "right" : "_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "info" : "ExpressionStatement[67356-67424]:ExpressionStatement[67502-67570]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[67433-67449]:ExpressionStatement[67579-67595]"
    }, {
      "left" : "_finishString2();",
      "right" : "_finishString2();",
      "info" : "ExpressionStatement[67458-67475]:ExpressionStatement[67604-67621]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[67487-67496]:Modifier[67633-67642]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67497-67501]:PrimitiveType[67643-67647]"
    }, {
      "left" : "_finishString2",
      "right" : "_finishString2",
      "info" : "SimpleName[67502-67516]:SimpleName[67648-67662]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[67526-67537]:SimpleType[67672-67683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67542-68947]:Block[67688-69093]"
    }, {
      "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "info" : "VariableDeclarationStatement[67552-67600]:VariableDeclarationStatement[67698-67746]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[67609-67658]:VariableDeclarationStatement[67755-67804]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[67667-67697]:VariableDeclarationStatement[67813-67843]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[67706-67739]:VariableDeclarationStatement[67852-67885]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[67749-68895]:WhileStatement[67895-69041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67762-68895]:Block[67908-69041]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[67776-67963]:IfStatement[67922-68109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67804-67963]:Block[67950-68109]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[67822-67949]:IfStatement[67968-68095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67839-67949]:Block[67985-68095]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "info" : "ExpressionStatement[67861-67931]:ExpressionStatement[68007-68077]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[67976-68011]:VariableDeclarationStatement[68122-68157]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[68024-68040]:VariableDeclarationStatement[68170-68186]"
    }, {
      "left" : "if (i < maxCode && codes[i] != 0)",
      "right" : "if (i < maxCode && codes[i] != 0)",
      "info" : "IfStatement[68053-68629]:IfStatement[68199-68775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68087-68629]:Block[68233-68775]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[68105-68597]:IfStatement[68251-68743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68125-68171]:Block[68271-68317]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[68147-68153]:BreakStatement[68293-68299]"
    }, {
      "left" : "if (i == INT_BACKSLASH)",
      "right" : "if (i == INT_BACKSLASH)",
      "info" : "IfStatement[68177-68597]:IfStatement[68323-68743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68201-68493]:Block[68347-68639]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[68454-68475]:ExpressionStatement[68600-68621]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[68499-68597]:IfStatement[68645-68743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68518-68597]:Block[68664-68743]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"string value\");",
      "right" : "_throwUnquotedSpace(i, \"string value\");",
      "info" : "ExpressionStatement[68540-68579]:ExpressionStatement[68686-68725]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[68673-68806]:IfStatement[68819-68952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68702-68806]:Block[68848-68952]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[68720-68764]:ExpressionStatement[68866-68910]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[68781-68792]:ExpressionStatement[68927-68938]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[68864-68885]:ExpressionStatement[69010-69031]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[68904-68941]:ExpressionStatement[69050-69087]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[69150-69159]:Modifier[69296-69305]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[69160-69165]:Modifier[69306-69311]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[69166-69170]:PrimitiveType[69312-69316]"
    }, {
      "left" : "_skipString",
      "right" : "_skipString",
      "info" : "SimpleName[69171-69182]:SimpleName[69317-69328]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[69192-69203]:SimpleType[69338-69349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69208-70559]:Block[69354-70705]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[69218-69243]:ExpressionStatement[69364-69389]"
    }, {
      "left" : "int inPtr = _inputPtr;",
      "right" : "int inPtr = _inputPtr;",
      "info" : "VariableDeclarationStatement[69253-69275]:VariableDeclarationStatement[69399-69421]"
    }, {
      "left" : "int inLen = _inputEnd;",
      "right" : "int inLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[69284-69306]:VariableDeclarationStatement[69430-69452]"
    }, {
      "left" : "char[] inBuf = _inputBuffer;",
      "right" : "char[] inBuf = _inputBuffer;",
      "info" : "VariableDeclarationStatement[69315-69343]:VariableDeclarationStatement[69461-69489]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[69353-70553]:WhileStatement[69499-70699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69366-70553]:Block[69512-70699]"
    }, {
      "left" : "if (inPtr >= inLen)",
      "right" : "if (inPtr >= inLen)",
      "info" : "IfStatement[69380-69664]:IfStatement[69526-69810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69400-69664]:Block[69546-69810]"
    }, {
      "left" : "_inputPtr = inPtr;",
      "right" : "_inputPtr = inPtr;",
      "info" : "ExpressionStatement[69418-69436]:ExpressionStatement[69564-69582]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[69453-69580]:IfStatement[69599-69726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69470-69580]:Block[69616-69726]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "info" : "ExpressionStatement[69492-69562]:ExpressionStatement[69638-69708]"
    }, {
      "left" : "inPtr = _inputPtr;",
      "right" : "inPtr = _inputPtr;",
      "info" : "ExpressionStatement[69597-69615]:ExpressionStatement[69743-69761]"
    }, {
      "left" : "inLen = _inputEnd;",
      "right" : "inLen = _inputEnd;",
      "info" : "ExpressionStatement[69632-69650]:ExpressionStatement[69778-69796]"
    }, {
      "left" : "char c = inBuf[inPtr++];",
      "right" : "char c = inBuf[inPtr++];",
      "info" : "VariableDeclarationStatement[69677-69701]:VariableDeclarationStatement[69823-69847]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[69714-69730]:VariableDeclarationStatement[69860-69876]"
    }, {
      "left" : "if (i <= INT_BACKSLASH)",
      "right" : "if (i <= INT_BACKSLASH)",
      "info" : "IfStatement[69743-70543]:IfStatement[69889-70689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69767-70543]:Block[69913-70689]"
    }, {
      "left" : "if (i == INT_BACKSLASH)",
      "right" : "if (i == INT_BACKSLASH)",
      "info" : "IfStatement[69785-70529]:IfStatement[69931-70675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69809-70176]:Block[69955-70322]"
    }, {
      "left" : "_inputPtr = inPtr;",
      "right" : "_inputPtr = inPtr;",
      "info" : "ExpressionStatement[70015-70033]:ExpressionStatement[70161-70179]"
    }, {
      "left" : "_decodeEscaped();",
      "right" : "_decodeEscaped();",
      "info" : "ExpressionStatement[70063-70080]:ExpressionStatement[70209-70226]"
    }, {
      "left" : "inPtr = _inputPtr;",
      "right" : "inPtr = _inputPtr;",
      "info" : "ExpressionStatement[70101-70119]:ExpressionStatement[70247-70265]"
    }, {
      "left" : "inLen = _inputEnd;",
      "right" : "inLen = _inputEnd;",
      "info" : "ExpressionStatement[70140-70158]:ExpressionStatement[70286-70304]"
    }, {
      "left" : "if (i <= INT_QUOTE)",
      "right" : "if (i <= INT_QUOTE)",
      "info" : "IfStatement[70182-70529]:IfStatement[70328-70675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70202-70529]:Block[70348-70675]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[70224-70341]:IfStatement[70370-70487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70244-70341]:Block[70390-70487]"
    }, {
      "left" : "_inputPtr = inPtr;",
      "right" : "_inputPtr = inPtr;",
      "info" : "ExpressionStatement[70270-70288]:ExpressionStatement[70416-70434]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[70313-70319]:BreakStatement[70459-70465]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[70362-70511]:IfStatement[70508-70657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70381-70511]:Block[70527-70657]"
    }, {
      "left" : "_inputPtr = inPtr;",
      "right" : "_inputPtr = inPtr;",
      "info" : "ExpressionStatement[70407-70425]:ExpressionStatement[70553-70571]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"string value\");",
      "right" : "_throwUnquotedSpace(i, \"string value\");",
      "info" : "ExpressionStatement[70450-70489]:ExpressionStatement[70596-70635]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[70866-70875]:Modifier[71012-71021]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[70876-70881]:Modifier[71022-71027]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[70882-70886]:PrimitiveType[71028-71032]"
    }, {
      "left" : "_skipCR",
      "right" : "_skipCR",
      "info" : "SimpleName[70887-70894]:SimpleName[71033-71040]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[70904-70915]:SimpleType[71050-71061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70916-71143]:Block[71062-71289]"
    }, {
      "left" : "if (_inputPtr < _inputEnd || loadMore())",
      "right" : "if (_inputPtr < _inputEnd || loadMore())",
      "info" : "IfStatement[70926-71072]:IfStatement[71072-71218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70967-71072]:Block[71113-71218]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == '\\n')",
      "right" : "if (_inputBuffer[_inputPtr] == '\\n')",
      "info" : "IfStatement[70981-71062]:IfStatement[71127-71208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71018-71062]:Block[71164-71208]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[71036-71048]:ExpressionStatement[71182-71194]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[71081-71097]:ExpressionStatement[71227-71243]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[71106-71137]:ExpressionStatement[71252-71283]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[71149-71156]:Modifier[71295-71302]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[71157-71162]:Modifier[71303-71308]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[71163-71166]:PrimitiveType[71309-71312]"
    }, {
      "left" : "_skipColon",
      "right" : "_skipColon",
      "info" : "SimpleName[71167-71177]:SimpleName[71313-71323]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[71187-71198]:SimpleType[71333-71344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71203-72956]:Block[71349-73102]"
    }, {
      "left" : "if ((_inputPtr + 4) >= _inputEnd)",
      "right" : "if ((_inputPtr + 4) >= _inputEnd)",
      "info" : "IfStatement[71213-71297]:IfStatement[71359-71443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71247-71297]:Block[71393-71443]"
    }, {
      "left" : "return _skipColon2(false);",
      "right" : "return _skipColon2(false);",
      "info" : "ReturnStatement[71261-71287]:ReturnStatement[71407-71433]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[71306-71339]:VariableDeclarationStatement[71452-71485]"
    }, {
      "left" : "if (c == ':')",
      "right" : "if (c == ':')",
      "info" : "IfStatement[71348-72119]:IfStatement[71494-72265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71362-72119]:Block[71508-72265]"
    }, {
      "left" : "int i = _inputBuffer[++_inputPtr];",
      "right" : "int i = _inputBuffer[++_inputPtr];",
      "info" : "VariableDeclarationStatement[71409-71443]:VariableDeclarationStatement[71555-71589]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[71456-71680]:IfStatement[71602-71826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71475-71680]:Block[71621-71826]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[71509-71611]:IfStatement[71655-71757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71546-71611]:Block[71692-71757]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[71568-71593]:ReturnStatement[71714-71739]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[71628-71640]:ExpressionStatement[71774-71786]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[71657-71666]:ReturnStatement[71803-71812]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[71693-72046]:IfStatement[71839-72192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71729-72046]:Block[71875-72192]"
    }, {
      "left" : "i = (int) _inputBuffer[++_inputPtr];",
      "right" : "i = (int) _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[71747-71783]:ExpressionStatement[71893-71929]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[71800-72032]:IfStatement[71946-72178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71819-72032]:Block[71965-72178]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[71841-71951]:IfStatement[71987-72097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71878-71951]:Block[72024-72097]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[71904-71929]:ReturnStatement[72050-72075]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[71972-71984]:ExpressionStatement[72118-72130]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[72005-72014]:ReturnStatement[72151-72160]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[72059-72084]:ReturnStatement[72205-72230]"
    }, {
      "left" : "if (c == ' ' || c == '\\t')",
      "right" : "if (c == ' ' || c == '\\t')",
      "info" : "IfStatement[72128-72209]:IfStatement[72274-72355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72155-72209]:Block[72301-72355]"
    }, {
      "left" : "c = _inputBuffer[++_inputPtr];",
      "right" : "c = _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[72169-72199]:ExpressionStatement[72315-72345]"
    }, {
      "left" : "if (c == ':')",
      "right" : "if (c == ':')",
      "info" : "IfStatement[72218-72915]:IfStatement[72364-73061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72232-72915]:Block[72378-73061]"
    }, {
      "left" : "int i = _inputBuffer[++_inputPtr];",
      "right" : "int i = _inputBuffer[++_inputPtr];",
      "info" : "VariableDeclarationStatement[72246-72280]:VariableDeclarationStatement[72392-72426]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[72293-72501]:IfStatement[72439-72647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72312-72501]:Block[72458-72647]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[72330-72432]:IfStatement[72476-72578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72367-72432]:Block[72513-72578]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[72389-72414]:ReturnStatement[72535-72560]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[72449-72461]:ExpressionStatement[72595-72607]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[72478-72487]:ReturnStatement[72624-72633]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[72514-72867]:IfStatement[72660-73013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72550-72867]:Block[72696-73013]"
    }, {
      "left" : "i = (int) _inputBuffer[++_inputPtr];",
      "right" : "i = (int) _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[72568-72604]:ExpressionStatement[72714-72750]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[72621-72853]:IfStatement[72767-72999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72640-72853]:Block[72786-72999]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[72662-72772]:IfStatement[72808-72918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72699-72772]:Block[72845-72918]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[72725-72750]:ReturnStatement[72871-72896]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[72793-72805]:ExpressionStatement[72939-72951]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[72826-72835]:ReturnStatement[72972-72981]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[72880-72905]:ReturnStatement[73026-73051]"
    }, {
      "left" : "return _skipColon2(false);",
      "right" : "return _skipColon2(false);",
      "info" : "ReturnStatement[72924-72950]:ReturnStatement[73070-73096]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[72962-72969]:Modifier[73108-73115]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[72970-72975]:Modifier[73116-73121]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[72976-72979]:PrimitiveType[73122-73125]"
    }, {
      "left" : "_skipColon2",
      "right" : "_skipColon2",
      "info" : "SimpleName[72980-72991]:SimpleName[73126-73137]"
    }, {
      "left" : "boolean gotColon",
      "right" : "boolean gotColon",
      "info" : "SingleVariableDeclaration[72992-73008]:SingleVariableDeclaration[73138-73154]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[73017-73028]:SimpleType[73163-73174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73033-74193]:Block[73179-74339]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[73043-74187]:WhileStatement[73189-74333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73056-74187]:Block[73202-74333]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[73070-73151]:IfStatement[73216-73297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73098-73151]:Block[73244-73297]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[73116-73137]:ExpressionStatement[73262-73283]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[73164-73204]:VariableDeclarationStatement[73310-73350]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[73217-73829]:IfStatement[73363-73975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73236-73829]:Block[73382-73975]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[73254-73359]:IfStatement[73400-73505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73274-73359]:Block[73420-73505]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[73296-73311]:ExpressionStatement[73442-73457]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[73332-73341]:ContinueStatement[73478-73487]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[73376-73516]:IfStatement[73522-73662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73395-73516]:Block[73541-73662]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[73417-73498]:IfStatement[73563-73644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73441-73498]:Block[73587-73644]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[73467-73476]:ContinueStatement[73613-73622]"
    }, {
      "left" : "if (gotColon)",
      "right" : "if (gotColon)",
      "info" : "IfStatement[73533-73596]:IfStatement[73679-73742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73547-73596]:Block[73693-73742]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[73569-73578]:ReturnStatement[73715-73724]"
    }, {
      "left" : "if (i != INT_COLON)",
      "right" : "if (i != INT_COLON)",
      "info" : "IfStatement[73613-73756]:IfStatement[73759-73902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73633-73756]:Block[73779-73902]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "info" : "ExpressionStatement[73655-73738]:ExpressionStatement[73801-73884]"
    }, {
      "left" : "gotColon = true;",
      "right" : "gotColon = true;",
      "info" : "ExpressionStatement[73773-73789]:ExpressionStatement[73919-73935]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[73806-73815]:ContinueStatement[73952-73961]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[73842-74177]:IfStatement[73988-74323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73861-74177]:Block[74007-74323]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[73879-74163]:IfStatement[74025-74309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73896-74004]:Block[74042-74150]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[73918-73934]:ExpressionStatement[74064-74080]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[73955-73986]:ExpressionStatement[74101-74132]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[74010-74163]:IfStatement[74156-74309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74027-74077]:Block[74173-74223]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[74049-74059]:ExpressionStatement[74195-74205]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[74083-74163]:IfStatement[74229-74309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74101-74163]:Block[74247-74309]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[74123-74145]:ExpressionStatement[74269-74291]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[74274-74281]:Modifier[74420-74427]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[74282-74287]:Modifier[74428-74433]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[74288-74291]:PrimitiveType[74434-74437]"
    }, {
      "left" : "_skipColonFast",
      "right" : "_skipColonFast",
      "info" : "SimpleName[74292-74306]:SimpleName[74438-74452]"
    }, {
      "left" : "int ptr",
      "right" : "int ptr",
      "info" : "SingleVariableDeclaration[74307-74314]:SingleVariableDeclaration[74453-74460]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[74323-74334]:SimpleType[74469-74480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74339-75887]:Block[74485-76033]"
    }, {
      "left" : "int i = (int) _inputBuffer[ptr++];",
      "right" : "int i = (int) _inputBuffer[ptr++];",
      "info" : "VariableDeclarationStatement[74349-74383]:VariableDeclarationStatement[74495-74529]"
    }, {
      "left" : "if (i == INT_COLON)",
      "right" : "if (i == INT_COLON)",
      "info" : "IfStatement[74392-75105]:IfStatement[74538-75251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74412-75105]:Block[74558-75251]"
    }, {
      "left" : "i = _inputBuffer[ptr++];",
      "right" : "i = _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[74459-74483]:ExpressionStatement[74605-74629]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[74496-75001]:IfStatement[74642-75147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74515-74686]:Block[74661-74832]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[74549-74672]:IfStatement[74695-74818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74586-74672]:Block[74732-74818]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[74608-74624]:ExpressionStatement[74754-74770]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[74645-74654]:ReturnStatement[74791-74800]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[74692-75001]:IfStatement[74838-75147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74728-75001]:Block[74874-75147]"
    }, {
      "left" : "i = (int) _inputBuffer[ptr++];",
      "right" : "i = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[74746-74776]:ExpressionStatement[74892-74922]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[74793-74987]:IfStatement[74939-75133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74812-74987]:Block[74958-75133]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[74834-74969]:IfStatement[74980-75115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74871-74969]:Block[75017-75115]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[74897-74913]:ExpressionStatement[75043-75059]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[74938-74947]:ReturnStatement[75084-75093]"
    }, {
      "left" : "_inputPtr = ptr-1;",
      "right" : "_inputPtr = ptr-1;",
      "info" : "ExpressionStatement[75014-75032]:ExpressionStatement[75160-75178]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[75045-75070]:ReturnStatement[75191-75216]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[75114-75198]:IfStatement[75260-75344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75150-75198]:Block[75296-75344]"
    }, {
      "left" : "i = _inputBuffer[ptr++];",
      "right" : "i = _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[75164-75188]:ExpressionStatement[75310-75334]"
    }, {
      "left" : "boolean gotColon = (i == INT_COLON);",
      "right" : "boolean gotColon = (i == INT_COLON);",
      "info" : "VariableDeclarationStatement[75207-75243]:VariableDeclarationStatement[75353-75389]"
    }, {
      "left" : "if (gotColon)",
      "right" : "if (gotColon)",
      "info" : "IfStatement[75252-75816]:IfStatement[75398-75962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75266-75816]:Block[75412-75962]"
    }, {
      "left" : "i = _inputBuffer[ptr++];",
      "right" : "i = _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[75280-75304]:ExpressionStatement[75426-75450]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[75317-75806]:IfStatement[75463-75952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75336-75491]:Block[75482-75637]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[75354-75477]:IfStatement[75500-75623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75391-75477]:Block[75537-75623]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[75413-75429]:ExpressionStatement[75559-75575]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[75450-75459]:ReturnStatement[75596-75605]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[75497-75806]:IfStatement[75643-75952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75533-75806]:Block[75679-75952]"
    }, {
      "left" : "i = (int) _inputBuffer[ptr++];",
      "right" : "i = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[75551-75581]:ExpressionStatement[75697-75727]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[75598-75792]:IfStatement[75744-75938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75617-75792]:Block[75763-75938]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[75639-75774]:IfStatement[75785-75920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75676-75774]:Block[75822-75920]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[75702-75718]:ExpressionStatement[75848-75864]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[75743-75752]:ReturnStatement[75889-75898]"
    }, {
      "left" : "_inputPtr = ptr-1;",
      "right" : "_inputPtr = ptr-1;",
      "info" : "ExpressionStatement[75825-75843]:ExpressionStatement[75971-75989]"
    }, {
      "left" : "return _skipColon2(gotColon);",
      "right" : "return _skipColon2(gotColon);",
      "info" : "ReturnStatement[75852-75881]:ReturnStatement[75998-76027]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[75945-75952]:Modifier[76091-76098]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[75953-75958]:Modifier[76099-76104]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[75959-75962]:PrimitiveType[76105-76108]"
    }, {
      "left" : "_skipComma",
      "right" : "_skipComma",
      "info" : "SimpleName[75963-75973]:SimpleName[76109-76119]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[75974-75979]:SingleVariableDeclaration[76120-76125]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[75988-75999]:SimpleType[76134-76145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76004-76874]:Block[76150-77020]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[76014-76160]:IfStatement[76160-76306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76034-76160]:Block[76180-76306]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[76048-76150]:ExpressionStatement[76194-76296]"
    }, {
      "left" : "while (_inputPtr < _inputEnd)",
      "right" : "while (_inputPtr < _inputEnd)",
      "info" : "WhileStatement[76169-76833]:WhileStatement[76315-76979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76199-76833]:Block[76345-76979]"
    }, {
      "left" : "i = (int) _inputBuffer[_inputPtr++];",
      "right" : "i = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[76213-76249]:ExpressionStatement[76359-76395]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[76262-76475]:IfStatement[76408-76621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76281-76475]:Block[76427-76621]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[76299-76435]:IfStatement[76445-76581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76336-76435]:Block[76482-76581]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[76358-76370]:ExpressionStatement[76504-76516]"
    }, {
      "left" : "return _skipAfterComma2();",
      "right" : "return _skipAfterComma2();",
      "info" : "ReturnStatement[76391-76417]:ReturnStatement[76537-76563]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[76452-76461]:ReturnStatement[76598-76607]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[76488-76823]:IfStatement[76634-76969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76507-76823]:Block[76653-76969]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[76525-76809]:IfStatement[76671-76955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76542-76650]:Block[76688-76796]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[76564-76580]:ExpressionStatement[76710-76726]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[76601-76632]:ExpressionStatement[76747-76778]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[76656-76809]:IfStatement[76802-76955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76673-76723]:Block[76819-76869]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[76695-76705]:ExpressionStatement[76841-76851]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[76729-76809]:IfStatement[76875-76955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76747-76809]:Block[76893-76955]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[76769-76791]:ExpressionStatement[76915-76937]"
    }, {
      "left" : "return _skipAfterComma2();",
      "right" : "return _skipAfterComma2();",
      "info" : "ReturnStatement[76842-76868]:ReturnStatement[76988-77014]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[76880-76887]:Modifier[77026-77033]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[76888-76893]:Modifier[77034-77039]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[76894-76897]:PrimitiveType[77040-77043]"
    }, {
      "left" : "_skipAfterComma2",
      "right" : "_skipAfterComma2",
      "info" : "SimpleName[76898-76914]:SimpleName[77044-77060]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[76924-76935]:SimpleType[77070-77081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76940-77879]:Block[77086-78025]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[76950-77758]:WhileStatement[77096-77904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76994-77758]:Block[77140-77904]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[77008-77048]:VariableDeclarationStatement[77154-77194]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[77061-77400]:IfStatement[77207-77546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77080-77400]:Block[77226-77546]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[77098-77203]:IfStatement[77244-77349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77118-77203]:Block[77264-77349]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[77140-77155]:ExpressionStatement[77286-77301]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[77176-77185]:ContinueStatement[77322-77331]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[77220-77360]:IfStatement[77366-77506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77239-77360]:Block[77385-77506]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[77261-77342]:IfStatement[77407-77488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77285-77342]:Block[77431-77488]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[77311-77320]:ContinueStatement[77457-77466]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[77377-77386]:ReturnStatement[77523-77532]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[77413-77748]:IfStatement[77559-77894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77432-77748]:Block[77578-77894]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[77450-77734]:IfStatement[77596-77880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77467-77575]:Block[77613-77721]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[77489-77505]:ExpressionStatement[77635-77651]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[77526-77557]:ExpressionStatement[77672-77703]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[77581-77734]:IfStatement[77727-77880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77598-77648]:Block[77744-77794]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[77620-77630]:ExpressionStatement[77766-77776]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[77654-77734]:IfStatement[77800-77880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77672-77734]:Block[77818-77880]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[77694-77716]:ExpressionStatement[77840-77862]"
    }, {
      "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ThrowStatement[77767-77873]:ThrowStatement[77913-78019]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[77885-77892]:Modifier[78031-78038]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[77893-77898]:Modifier[78039-78044]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[77899-77902]:PrimitiveType[78045-78048]"
    }, {
      "left" : "_skipWSOrEnd",
      "right" : "_skipWSOrEnd",
      "info" : "SimpleName[77903-77915]:SimpleName[78049-78061]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[77925-77936]:SimpleType[78071-78082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77941-79485]:Block[78087-79631]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[78103-78228]:IfStatement[78249-78374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78131-78228]:Block[78277-78374]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[78145-78218]:IfStatement[78291-78364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78162-78218]:Block[78308-78364]"
    }, {
      "left" : "return _eofAsNextChar();",
      "right" : "return _eofAsNextChar();",
      "info" : "ReturnStatement[78180-78204]:ReturnStatement[78326-78350]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++];",
      "right" : "int i = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[78237-78271]:VariableDeclarationStatement[78383-78417]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[78280-78466]:IfStatement[78426-78612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78299-78466]:Block[78445-78612]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[78313-78434]:IfStatement[78459-78580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78350-78434]:Block[78496-78580]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[78368-78380]:ExpressionStatement[78514-78526]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[78397-78420]:ReturnStatement[78543-78566]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[78447-78456]:ReturnStatement[78593-78602]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[78475-78775]:IfStatement[78621-78921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78495-78775]:Block[78641-78921]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[78509-78765]:IfStatement[78655-78911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78526-78622]:Block[78672-78768]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[78544-78560]:ExpressionStatement[78690-78706]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[78577-78608]:ExpressionStatement[78723-78754]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[78628-78765]:IfStatement[78774-78911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78645-78687]:Block[78791-78833]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[78663-78673]:ExpressionStatement[78809-78819]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[78693-78765]:IfStatement[78839-78911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78711-78765]:Block[78857-78911]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[78729-78751]:ExpressionStatement[78875-78897]"
    }, {
      "left" : "while (_inputPtr < _inputEnd)",
      "right" : "while (_inputPtr < _inputEnd)",
      "info" : "WhileStatement[78785-79447]:WhileStatement[78931-79593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78815-79447]:Block[78961-79593]"
    }, {
      "left" : "i = (int) _inputBuffer[_inputPtr++];",
      "right" : "i = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[78829-78865]:ExpressionStatement[78975-79011]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[78878-79088]:IfStatement[79024-79234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78897-79088]:Block[79043-79234]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[78915-79048]:IfStatement[79061-79194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78952-79048]:Block[79098-79194]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[78974-78986]:ExpressionStatement[79120-79132]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[79007-79030]:ReturnStatement[79153-79176]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[79065-79074]:ReturnStatement[79211-79220]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[79101-79437]:IfStatement[79247-79583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79121-79437]:Block[79267-79583]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[79139-79423]:IfStatement[79285-79569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79156-79264]:Block[79302-79410]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[79178-79194]:ExpressionStatement[79324-79340]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[79215-79246]:ExpressionStatement[79361-79392]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[79270-79423]:IfStatement[79416-79569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79287-79337]:Block[79433-79483]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[79309-79319]:ExpressionStatement[79455-79465]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[79343-79423]:IfStatement[79489-79569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79361-79423]:Block[79507-79569]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[79383-79405]:ExpressionStatement[79529-79551]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[79456-79479]:ReturnStatement[79602-79625]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[79491-79498]:Modifier[79637-79644]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[79499-79502]:PrimitiveType[79645-79648]"
    }, {
      "left" : "_skipWSOrEnd2",
      "right" : "_skipWSOrEnd2",
      "info" : "SimpleName[79503-79516]:SimpleName[79649-79662]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[79526-79537]:SimpleType[79672-79683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79542-80509]:Block[79688-80655]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[79552-80503]:WhileStatement[79698-80649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79565-80503]:Block[79711-80649]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[79579-79746]:IfStatement[79725-79892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79607-79746]:Block[79753-79892]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[79625-79732]:IfStatement[79771-79878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79642-79732]:Block[79788-79878]"
    }, {
      "left" : "return _eofAsNextChar();",
      "right" : "return _eofAsNextChar();",
      "info" : "ReturnStatement[79690-79714]:ReturnStatement[79836-79860]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[79759-79799]:VariableDeclarationStatement[79905-79945]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[79812-80493]:IfStatement[79958-80639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79831-80151]:Block[79977-80297]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[79849-79954]:IfStatement[79995-80100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79869-79954]:Block[80015-80100]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[79891-79906]:ExpressionStatement[80037-80052]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[79927-79936]:ContinueStatement[80073-80082]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[79971-80111]:IfStatement[80117-80257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79990-80111]:Block[80136-80257]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[80012-80093]:IfStatement[80158-80239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80036-80093]:Block[80182-80239]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[80062-80071]:ContinueStatement[80208-80217]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[80128-80137]:ReturnStatement[80274-80283]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[80157-80493]:IfStatement[80303-80639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80177-80493]:Block[80323-80639]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[80195-80479]:IfStatement[80341-80625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80212-80320]:Block[80358-80466]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[80234-80250]:ExpressionStatement[80380-80396]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[80271-80302]:ExpressionStatement[80417-80448]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[80326-80479]:IfStatement[80472-80625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80343-80393]:Block[80489-80539]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[80365-80375]:ExpressionStatement[80511-80521]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[80399-80479]:IfStatement[80545-80625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80417-80479]:Block[80563-80625]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[80439-80461]:ExpressionStatement[80585-80607]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[80515-80522]:Modifier[80661-80668]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[80523-80527]:PrimitiveType[80669-80673]"
    }, {
      "left" : "_skipComment",
      "right" : "_skipComment",
      "info" : "SimpleName[80528-80540]:SimpleName[80674-80686]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[80550-80561]:SimpleType[80696-80707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80566-81221]:Block[80712-81367]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "info" : "IfStatement[80576-80780]:IfStatement[80722-80926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80616-80780]:Block[80762-80926]"
    }, {
      "left" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "right" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "info" : "ExpressionStatement[80630-80770]:ExpressionStatement[80776-80916]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[80846-80948]:IfStatement[80992-81094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80889-80948]:Block[81035-81094]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[80903-80938]:ExpressionStatement[81049-81084]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[80957-80992]:VariableDeclarationStatement[81103-81138]"
    }, {
      "left" : "if (c == '/')",
      "right" : "if (c == '/')",
      "info" : "IfStatement[81001-81215]:IfStatement[81147-81361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81015-81051]:Block[81161-81197]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[81029-81041]:ExpressionStatement[81175-81187]"
    }, {
      "left" : "if (c == '*')",
      "right" : "if (c == '*')",
      "info" : "IfStatement[81057-81215]:IfStatement[81203-81361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81071-81111]:Block[81217-81257]"
    }, {
      "left" : "_skipCComment();",
      "right" : "_skipCComment();",
      "info" : "ExpressionStatement[81085-81101]:ExpressionStatement[81231-81247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81117-81215]:Block[81263-81361]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "right" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "info" : "ExpressionStatement[81131-81205]:ExpressionStatement[81277-81351]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[81227-81234]:Modifier[81373-81380]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[81235-81239]:PrimitiveType[81381-81385]"
    }, {
      "left" : "_skipCComment",
      "right" : "_skipCComment",
      "info" : "SimpleName[81240-81253]:SimpleName[81386-81399]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[81263-81274]:SimpleType[81409-81420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81279-82280]:Block[81425-82426]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[81327-82230]:WhileStatement[81473-82376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81373-82230]:Block[81519-82376]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[81387-81427]:VariableDeclarationStatement[81533-81573]"
    }, {
      "left" : "if (i <= '*')",
      "right" : "if (i <= '*')",
      "info" : "IfStatement[81440-82220]:IfStatement[81586-82366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81454-82220]:Block[81600-82366]"
    }, {
      "left" : "if (i == '*')",
      "right" : "if (i == '*')",
      "info" : "IfStatement[81472-81818]:IfStatement[81618-81964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81486-81818]:Block[81632-81964]"
    }, {
      "left" : "if ((_inputPtr >= _inputEnd) && !loadMore())",
      "right" : "if ((_inputPtr >= _inputEnd) && !loadMore())",
      "info" : "IfStatement[81516-81615]:IfStatement[81662-81761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81561-81615]:Block[81707-81761]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[81587-81593]:BreakStatement[81733-81739]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "right" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "info" : "IfStatement[81636-81770]:IfStatement[81782-81916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81678-81770]:Block[81824-81916]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[81704-81716]:ExpressionStatement[81850-81862]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[81741-81748]:ReturnStatement[81887-81894]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[81791-81800]:ContinueStatement[81937-81946]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[81835-82206]:IfStatement[81981-82352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81854-82206]:Block[82000-82352]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[81876-82188]:IfStatement[82022-82334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81893-82013]:Block[82039-82159]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[81919-81935]:ExpressionStatement[82065-82081]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[81960-81991]:ExpressionStatement[82106-82137]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[82019-82188]:IfStatement[82165-82334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82036-82094]:Block[82182-82240]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[82062-82072]:ExpressionStatement[82208-82218]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[82100-82188]:IfStatement[82246-82334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82118-82188]:Block[82264-82334]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[82144-82166]:ExpressionStatement[82290-82312]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[82239-82274]:ExpressionStatement[82385-82420]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[82286-82293]:Modifier[82432-82439]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[82294-82301]:PrimitiveType[82440-82447]"
    }, {
      "left" : "_skipYAMLComment",
      "right" : "_skipYAMLComment",
      "info" : "SimpleName[82302-82318]:SimpleName[82448-82464]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[82328-82339]:SimpleType[82474-82485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82344-82484]:Block[82490-82630]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "info" : "IfStatement[82354-82436]:IfStatement[82500-82582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82399-82436]:Block[82545-82582]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[82413-82426]:ReturnStatement[82559-82572]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[82445-82457]:ExpressionStatement[82591-82603]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[82466-82478]:ReturnStatement[82612-82624]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[82490-82497]:Modifier[82636-82643]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[82498-82502]:PrimitiveType[82644-82648]"
    }, {
      "left" : "_skipLine",
      "right" : "_skipLine",
      "info" : "SimpleName[82503-82512]:SimpleName[82649-82658]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[82522-82533]:SimpleType[82668-82679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82538-83110]:Block[82684-83256]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[82592-83104]:WhileStatement[82738-83250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82638-83104]:Block[82784-83250]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[82652-82692]:VariableDeclarationStatement[82798-82838]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[82705-83094]:IfStatement[82851-83240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82724-83094]:Block[82870-83240]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[82742-83080]:IfStatement[82888-83226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82759-82894]:Block[82905-83040]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[82781-82797]:ExpressionStatement[82927-82943]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[82818-82849]:ExpressionStatement[82964-82995]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[82870-82876]:BreakStatement[83016-83022]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[82900-83080]:IfStatement[83046-83226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82917-82994]:Block[83063-83140]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[82939-82949]:ExpressionStatement[83085-83095]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[82970-82976]:BreakStatement[83116-83122]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[83000-83080]:IfStatement[83146-83226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83018-83080]:Block[83164-83226]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[83040-83062]:ExpressionStatement[83186-83208]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[83116-83125]:MarkerAnnotation[83262-83271]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[83130-83139]:Modifier[83276-83285]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[83140-83144]:PrimitiveType[83286-83290]"
    }, {
      "left" : "_decodeEscaped",
      "right" : "_decodeEscaped",
      "info" : "SimpleName[83145-83159]:SimpleName[83291-83305]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[83169-83180]:SimpleType[83315-83326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83185-84582]:Block[83331-84728]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[83195-83347]:IfStatement[83341-83493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83223-83347]:Block[83369-83493]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[83237-83337]:IfStatement[83383-83483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83254-83337]:Block[83400-83483]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[83272-83323]:ExpressionStatement[83418-83469]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[83356-83391]:VariableDeclarationStatement[83502-83537]"
    }, {
      "left" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape(c);\n        }",
      "right" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape(c);\n        }",
      "info" : "SwitchStatement[83401-83962]:SwitchStatement[83547-84108]"
    }, {
      "left" : "case 'b':",
      "right" : "case 'b':",
      "info" : "SwitchCase[83471-83480]:SwitchCase[83617-83626]"
    }, {
      "left" : "return '\\b';",
      "right" : "return '\\b';",
      "info" : "ReturnStatement[83493-83505]:ReturnStatement[83639-83651]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[83514-83523]:SwitchCase[83660-83669]"
    }, {
      "left" : "return '\\t';",
      "right" : "return '\\t';",
      "info" : "ReturnStatement[83536-83548]:ReturnStatement[83682-83694]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[83557-83566]:SwitchCase[83703-83712]"
    }, {
      "left" : "return '\\n';",
      "right" : "return '\\n';",
      "info" : "ReturnStatement[83579-83591]:ReturnStatement[83725-83737]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[83600-83609]:SwitchCase[83746-83755]"
    }, {
      "left" : "return '\\f';",
      "right" : "return '\\f';",
      "info" : "ReturnStatement[83622-83634]:ReturnStatement[83768-83780]"
    }, {
      "left" : "case 'r':",
      "right" : "case 'r':",
      "info" : "SwitchCase[83643-83652]:SwitchCase[83789-83798]"
    }, {
      "left" : "return '\\r';",
      "right" : "return '\\r';",
      "info" : "ReturnStatement[83665-83677]:ReturnStatement[83811-83823]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[83743-83752]:SwitchCase[83889-83898]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[83761-83770]:SwitchCase[83907-83916]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[83779-83789]:SwitchCase[83925-83935]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[83802-83811]:ReturnStatement[83948-83957]"
    }, {
      "left" : "case 'u':",
      "right" : "case 'u':",
      "info" : "SwitchCase[83821-83830]:SwitchCase[83967-83976]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[83870-83876]:BreakStatement[84016-84022]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[83886-83894]:SwitchCase[84032-84040]"
    }, {
      "left" : "return _handleUnrecognizedCharacterEscape(c);",
      "right" : "return _handleUnrecognizedCharacterEscape(c);",
      "info" : "ReturnStatement[83907-83952]:ReturnStatement[84053-84098]"
    }, {
      "left" : "int value = 0;",
      "right" : "int value = 0;",
      "info" : "VariableDeclarationStatement[84019-84033]:VariableDeclarationStatement[84165-84179]"
    }, {
      "left" : "for (int i = 0; i < 4; ++i)",
      "right" : "for (int i = 0; i < 4; ++i)",
      "info" : "ForStatement[84042-84547]:ForStatement[84188-84693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84070-84547]:Block[84216-84693]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[84084-84252]:IfStatement[84230-84398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84112-84252]:Block[84258-84398]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[84130-84238]:IfStatement[84276-84384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84147-84238]:Block[84293-84384]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[84169-84220]:ExpressionStatement[84315-84366]"
    }, {
      "left" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "right" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[84265-84306]:VariableDeclarationStatement[84411-84452]"
    }, {
      "left" : "int digit = CharTypes.charToHex(ch);",
      "right" : "int digit = CharTypes.charToHex(ch);",
      "info" : "VariableDeclarationStatement[84319-84355]:VariableDeclarationStatement[84465-84501]"
    }, {
      "left" : "if (digit < 0)",
      "right" : "if (digit < 0)",
      "info" : "IfStatement[84368-84495]:IfStatement[84514-84641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84383-84495]:Block[84529-84641]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "right" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "info" : "ExpressionStatement[84401-84481]:ExpressionStatement[84547-84627]"
    }, {
      "left" : "value = (value << 4) | digit;",
      "right" : "value = (value << 4) | digit;",
      "info" : "ExpressionStatement[84508-84537]:ExpressionStatement[84654-84683]"
    }, {
      "left" : "return (char) value;",
      "right" : "return (char) value;",
      "info" : "ReturnStatement[84556-84576]:ReturnStatement[84702-84722]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[84588-84595]:Modifier[84734-84741]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[84596-84601]:Modifier[84742-84747]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[84602-84606]:PrimitiveType[84748-84752]"
    }, {
      "left" : "_matchTrue",
      "right" : "_matchTrue",
      "info" : "SimpleName[84607-84617]:SimpleName[84753-84763]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[84627-84638]:SimpleType[84773-84784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84639-85129]:Block[84785-85275]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[84649-84669]:VariableDeclarationStatement[84795-84815]"
    }, {
      "left" : "if ((ptr + 3) < _inputEnd)",
      "right" : "if ((ptr + 3) < _inputEnd)",
      "info" : "IfStatement[84678-85043]:IfStatement[84824-85189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84705-85043]:Block[84851-85189]"
    }, {
      "left" : "final char[] b = _inputBuffer;",
      "right" : "final char[] b = _inputBuffer;",
      "info" : "VariableDeclarationStatement[84719-84749]:VariableDeclarationStatement[84865-84895]"
    }, {
      "left" : "if (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e')",
      "right" : "if (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e')",
      "info" : "IfStatement[84762-85033]:IfStatement[84908-85179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84819-85033]:Block[84965-85179]"
    }, {
      "left" : "char c = b[++ptr];",
      "right" : "char c = b[++ptr];",
      "info" : "VariableDeclarationStatement[84837-84855]:VariableDeclarationStatement[84983-85001]"
    }, {
      "left" : "if (c < '0' || c == ']' || c == '}')",
      "right" : "if (c < '0' || c == ']' || c == '}')",
      "info" : "IfStatement[84872-85019]:IfStatement[85018-85165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84909-85019]:Block[85055-85165]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[84957-84973]:ExpressionStatement[85103-85119]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[84994-85001]:ReturnStatement[85140-85147]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[85100-85123]:ExpressionStatement[85246-85269]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[85135-85142]:Modifier[85281-85288]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[85143-85148]:Modifier[85289-85294]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[85149-85153]:PrimitiveType[85295-85299]"
    }, {
      "left" : "_matchFalse",
      "right" : "_matchFalse",
      "info" : "SimpleName[85154-85165]:SimpleName[85300-85311]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[85175-85186]:SimpleType[85321-85332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85187-85697]:Block[85333-85843]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[85197-85217]:VariableDeclarationStatement[85343-85363]"
    }, {
      "left" : "if ((ptr + 4) < _inputEnd)",
      "right" : "if ((ptr + 4) < _inputEnd)",
      "info" : "IfStatement[85226-85610]:IfStatement[85372-85756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85253-85610]:Block[85399-85756]"
    }, {
      "left" : "final char[] b = _inputBuffer;",
      "right" : "final char[] b = _inputBuffer;",
      "info" : "VariableDeclarationStatement[85267-85297]:VariableDeclarationStatement[85413-85443]"
    }, {
      "left" : "if (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e')",
      "right" : "if (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e')",
      "info" : "IfStatement[85310-85600]:IfStatement[85456-85746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85386-85600]:Block[85532-85746]"
    }, {
      "left" : "char c = b[++ptr];",
      "right" : "char c = b[++ptr];",
      "info" : "VariableDeclarationStatement[85404-85422]:VariableDeclarationStatement[85550-85568]"
    }, {
      "left" : "if (c < '0' || c == ']' || c == '}')",
      "right" : "if (c < '0' || c == ']' || c == '}')",
      "info" : "IfStatement[85439-85586]:IfStatement[85585-85732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85476-85586]:Block[85622-85732]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[85524-85540]:ExpressionStatement[85670-85686]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[85561-85568]:ReturnStatement[85707-85714]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[85667-85691]:ExpressionStatement[85813-85837]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[85703-85710]:Modifier[85849-85856]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[85711-85716]:Modifier[85857-85862]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[85717-85721]:PrimitiveType[85863-85867]"
    }, {
      "left" : "_matchNull",
      "right" : "_matchNull",
      "info" : "SimpleName[85722-85732]:SimpleName[85868-85878]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[85742-85753]:SimpleType[85888-85899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85754-86244]:Block[85900-86390]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[85764-85784]:VariableDeclarationStatement[85910-85930]"
    }, {
      "left" : "if ((ptr + 3) < _inputEnd)",
      "right" : "if ((ptr + 3) < _inputEnd)",
      "info" : "IfStatement[85793-86158]:IfStatement[85939-86304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85820-86158]:Block[85966-86304]"
    }, {
      "left" : "final char[] b = _inputBuffer;",
      "right" : "final char[] b = _inputBuffer;",
      "info" : "VariableDeclarationStatement[85834-85864]:VariableDeclarationStatement[85980-86010]"
    }, {
      "left" : "if (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l')",
      "right" : "if (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l')",
      "info" : "IfStatement[85877-86148]:IfStatement[86023-86294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85934-86148]:Block[86080-86294]"
    }, {
      "left" : "char c = b[++ptr];",
      "right" : "char c = b[++ptr];",
      "info" : "VariableDeclarationStatement[85952-85970]:VariableDeclarationStatement[86098-86116]"
    }, {
      "left" : "if (c < '0' || c == ']' || c == '}')",
      "right" : "if (c < '0' || c == ']' || c == '}')",
      "info" : "IfStatement[85987-86134]:IfStatement[86133-86280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86024-86134]:Block[86170-86280]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[86072-86088]:ExpressionStatement[86218-86234]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[86109-86116]:ReturnStatement[86255-86262]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[86215-86238]:ExpressionStatement[86361-86384]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[86337-86346]:Modifier[86483-86492]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[86347-86352]:Modifier[86493-86498]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[86353-86357]:PrimitiveType[86499-86503]"
    }, {
      "left" : "_matchToken",
      "right" : "_matchToken",
      "info" : "SimpleName[86358-86369]:SimpleName[86504-86515]"
    }, {
      "left" : "String matchStr",
      "right" : "String matchStr",
      "info" : "SingleVariableDeclaration[86370-86385]:SingleVariableDeclaration[86516-86531]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[86387-86392]:SingleVariableDeclaration[86533-86538]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[86401-86412]:SimpleType[86547-86558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86417-87372]:Block[86563-87518]"
    }, {
      "left" : "final int len = matchStr.length();",
      "right" : "final int len = matchStr.length();",
      "info" : "VariableDeclarationStatement[86427-86461]:VariableDeclarationStatement[86573-86607]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[86471-86847]:DoStatement[86617-86993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86474-86828]:Block[86620-86974]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[86488-86651]:IfStatement[86634-86797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86516-86651]:Block[86662-86797]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[86534-86637]:IfStatement[86680-86783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86551-86637]:Block[86697-86783]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[86573-86619]:ExpressionStatement[86719-86765]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
      "right" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
      "info" : "IfStatement[86664-86793]:IfStatement[86810-86939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86715-86793]:Block[86861-86939]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[86733-86779]:ExpressionStatement[86879-86925]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[86806-86818]:ExpressionStatement[86952-86964]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[86933-87041]:IfStatement[87079-87187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86961-87041]:Block[87107-87187]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[86975-87031]:IfStatement[87121-87177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86992-87031]:Block[87138-87177]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[87010-87017]:ReturnStatement[87156-87163]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[87050-87083]:VariableDeclarationStatement[87196-87229]"
    }, {
      "left" : "if (c < '0' || c == ']' || c == '}')",
      "right" : "if (c < '0' || c == ']' || c == '}')",
      "info" : "IfStatement[87092-87186]:IfStatement[87238-87332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87129-87186]:Block[87275-87332]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[87169-87176]:ReturnStatement[87315-87322]"
    }, {
      "left" : "if (Character.isJavaIdentifierPart(c))",
      "right" : "if (Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[87241-87350]:IfStatement[87387-87496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87280-87350]:Block[87426-87496]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[87294-87340]:ExpressionStatement[87440-87486]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[87359-87366]:ReturnStatement[87505-87512]"
    }, {
      "left" : "@SuppressWarnings(\"resource\")",
      "right" : "@SuppressWarnings(\"resource\")",
      "info" : "SingleMemberAnnotation[87651-87680]:SingleMemberAnnotation[87797-87826]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[87685-87694]:Modifier[87831-87840]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[87695-87701]:ArrayType[87841-87847]"
    }, {
      "left" : "_decodeBase64",
      "right" : "_decodeBase64",
      "info" : "SimpleName[87702-87715]:SimpleName[87848-87861]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[87716-87740]:SingleVariableDeclaration[87862-87886]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[87749-87760]:SimpleType[87895-87906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87765-92277]:Block[87911-92423]"
    }, {
      "left" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[87775-87825]:VariableDeclarationStatement[87921-87971]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[87856-92271]:WhileStatement[88002-92417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87869-92271]:Block[88015-92417]"
    }, {
      "left" : "char ch;",
      "right" : "char ch;",
      "info" : "VariableDeclarationStatement[87946-87954]:VariableDeclarationStatement[88092-88100]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[87967-88164]:DoStatement[88113-88310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87970-88139]:Block[88116-88285]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[87988-88077]:IfStatement[88134-88223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88016-88077]:Block[88162-88223]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[88038-88059]:ExpressionStatement[88184-88205]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[88094-88125]:ExpressionStatement[88240-88271]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[88177-88220]:VariableDeclarationStatement[88323-88366]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[88233-88566]:IfStatement[88379-88712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88247-88566]:Block[88393-88712]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[88265-88386]:IfStatement[88411-88532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88280-88386]:Block[88426-88532]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[88339-88368]:ReturnStatement[88485-88514]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[88403-88449]:ExpressionStatement[88549-88595]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[88466-88552]:IfStatement[88612-88698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88480-88552]:Block[88626-88698]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[88525-88534]:ContinueStatement[88671-88680]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[88579-88602]:VariableDeclarationStatement[88725-88748]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[88687-88768]:IfStatement[88833-88914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88715-88768]:Block[88861-88914]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[88733-88754]:ExpressionStatement[88879-88900]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[88781-88812]:ExpressionStatement[88927-88958]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[88825-88864]:ExpressionStatement[88971-89010]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[88877-88969]:IfStatement[89023-89115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88891-88969]:Block[89037-89115]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[88909-88955]:ExpressionStatement[89055-89101]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[88982-89022]:ExpressionStatement[89128-89168]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[89097-89178]:IfStatement[89243-89324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89125-89178]:Block[89271-89324]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[89143-89164]:ExpressionStatement[89289-89310]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[89191-89222]:ExpressionStatement[89337-89368]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[89235-89274]:ExpressionStatement[89381-89420]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[89345-90639]:IfStatement[89491-90785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89359-90639]:Block[89505-90785]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[89377-89832]:IfStatement[89523-89978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89425-89832]:Block[89571-89978]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[89530-89747]:IfStatement[89676-89893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89574-89747]:Block[89720-89893]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[89600-89618]:ExpressionStatement[89746-89764]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[89643-89671]:ExpressionStatement[89789-89817]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[89696-89725]:ReturnStatement[89842-89871]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[89768-89814]:ExpressionStatement[89914-89960]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[89849-90547]:IfStatement[89995-90693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89897-90547]:Block[90043-90693]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[89980-90077]:IfStatement[90126-90223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90008-90077]:Block[90154-90223]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[90034-90055]:ExpressionStatement[90180-90201]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[90098-90129]:ExpressionStatement[90244-90275]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[90150-90348]:IfStatement[90296-90494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90187-90348]:Block[90333-90494]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[90213-90326]:ThrowStatement[90359-90472]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[90432-90450]:ExpressionStatement[90578-90596]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[90471-90499]:ExpressionStatement[90617-90645]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[90520-90529]:ContinueStatement[90666-90675]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[90686-90726]:ExpressionStatement[90832-90872]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[90810-90891]:IfStatement[90956-91037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90838-90891]:Block[90984-91037]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[90856-90877]:ExpressionStatement[91002-91023]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[90904-90935]:ExpressionStatement[91050-91081]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[90948-90987]:ExpressionStatement[91094-91133]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[91000-92103]:IfStatement[91146-92249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91014-92103]:Block[91160-92249]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[91032-91495]:IfStatement[91178-91641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91080-91495]:Block[91226-91641]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[91185-91410]:IfStatement[91331-91556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91229-91410]:Block[91375-91556]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[91255-91273]:ExpressionStatement[91401-91419]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[91298-91334]:ExpressionStatement[91444-91480]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[91359-91388]:ReturnStatement[91505-91534]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[91431-91477]:ExpressionStatement[91577-91623]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[91512-92011]:IfStatement[91658-92157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91560-92011]:Block[91706-92157]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[91888-91906]:ExpressionStatement[92034-92052]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[91927-91963]:ExpressionStatement[92073-92109]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[91984-91993]:ContinueStatement[92130-92139]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[92170-92210]:ExpressionStatement[92316-92356]"
    }, {
      "left" : "builder.appendThreeBytes(decodedData);",
      "right" : "builder.appendThreeBytes(decodedData);",
      "info" : "ExpressionStatement[92223-92261]:ExpressionStatement[92369-92407]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[92490-92499]:MarkerAnnotation[92636-92645]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[92504-92510]:Modifier[92650-92656]"
    }, {
      "left" : "JsonLocation",
      "right" : "JsonLocation",
      "info" : "SimpleType[92511-92523]:SimpleType[92657-92669]"
    }, {
      "left" : "getTokenLocation",
      "right" : "getTokenLocation",
      "info" : "SimpleName[92524-92540]:SimpleName[92670-92686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92547-92958]:Block[92693-93104]"
    }, {
      "left" : "final Object src = _ioContext.getSourceReference();",
      "right" : "final Object src = _ioContext.getSourceReference();",
      "info" : "VariableDeclarationStatement[92557-92608]:VariableDeclarationStatement[92703-92754]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[92617-92841]:IfStatement[92763-92987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92657-92841]:Block[92803-92987]"
    }, {
      "left" : "long total = _currInputProcessed + (_nameStartOffset-1);",
      "right" : "long total = _currInputProcessed + (_nameStartOffset-1);",
      "info" : "VariableDeclarationStatement[92671-92727]:VariableDeclarationStatement[92817-92873]"
    }, {
      "left" : "return new JsonLocation(src,\n                    -1L, total, _nameStartRow, _nameStartCol);",
      "right" : "return new JsonLocation(src,\n                    -1L, total, _nameStartRow, _nameStartCol);",
      "info" : "ReturnStatement[92740-92831]:ReturnStatement[92886-92977]"
    }, {
      "left" : "return new JsonLocation(src,\n                -1L, _tokenInputTotal-1, _tokenInputRow, _tokenInputCol);",
      "right" : "return new JsonLocation(src,\n                -1L, _tokenInputTotal-1, _tokenInputRow, _tokenInputCol);",
      "info" : "ReturnStatement[92850-92952]:ReturnStatement[92996-93098]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[92964-92973]:MarkerAnnotation[93110-93119]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[92978-92984]:Modifier[93124-93130]"
    }, {
      "left" : "JsonLocation",
      "right" : "JsonLocation",
      "info" : "SimpleType[92985-92997]:SimpleType[93131-93143]"
    }, {
      "left" : "getCurrentLocation",
      "right" : "getCurrentLocation",
      "info" : "SimpleName[92998-93016]:SimpleName[93144-93162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93019-93247]:Block[93165-93393]"
    }, {
      "left" : "int col = _inputPtr - _currInputRowStart + 1;",
      "right" : "int col = _inputPtr - _currInputRowStart + 1;",
      "info" : "VariableDeclarationStatement[93029-93074]:VariableDeclarationStatement[93175-93220]"
    }, {
      "left" : "return new JsonLocation(_ioContext.getSourceReference(),\n                -1L, _currInputProcessed + _inputPtr,\n                _currInputRow, col);",
      "right" : "return new JsonLocation(_ioContext.getSourceReference(),\n                -1L, _currInputProcessed + _inputPtr,\n                _currInputRow, col);",
      "info" : "ReturnStatement[93094-93241]:ReturnStatement[93240-93387]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[93271-93278]:Modifier[93417-93424]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[93279-93284]:Modifier[93425-93430]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[93285-93289]:PrimitiveType[93431-93435]"
    }, {
      "left" : "_updateLocation",
      "right" : "_updateLocation",
      "info" : "SimpleName[93290-93305]:SimpleName[93436-93451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93312-93493]:Block[93458-93639]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[93322-93342]:VariableDeclarationStatement[93468-93488]"
    }, {
      "left" : "_tokenInputTotal = _currInputProcessed + ptr;",
      "right" : "_tokenInputTotal = _currInputProcessed + ptr;",
      "info" : "ExpressionStatement[93351-93396]:ExpressionStatement[93497-93542]"
    }, {
      "left" : "_tokenInputRow = _currInputRow;",
      "right" : "_tokenInputRow = _currInputRow;",
      "info" : "ExpressionStatement[93405-93436]:ExpressionStatement[93551-93582]"
    }, {
      "left" : "_tokenInputCol = ptr - _currInputRowStart;",
      "right" : "_tokenInputCol = ptr - _currInputRowStart;",
      "info" : "ExpressionStatement[93445-93487]:ExpressionStatement[93591-93633]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[93517-93524]:Modifier[93663-93670]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[93525-93530]:Modifier[93671-93676]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[93531-93535]:PrimitiveType[93677-93681]"
    }, {
      "left" : "_updateNameLocation",
      "right" : "_updateNameLocation",
      "info" : "SimpleName[93536-93555]:SimpleName[93682-93701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93562-93719]:Block[93708-93865]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[93572-93592]:VariableDeclarationStatement[93718-93738]"
    }, {
      "left" : "_nameStartOffset = ptr;",
      "right" : "_nameStartOffset = ptr;",
      "info" : "ExpressionStatement[93601-93624]:ExpressionStatement[93747-93770]"
    }, {
      "left" : "_nameStartRow = _currInputRow;",
      "right" : "_nameStartRow = _currInputRow;",
      "info" : "ExpressionStatement[93633-93663]:ExpressionStatement[93779-93809]"
    }, {
      "left" : "_nameStartCol = ptr - _currInputRowStart;",
      "right" : "_nameStartCol = ptr - _currInputRowStart;",
      "info" : "ExpressionStatement[93672-93713]:ExpressionStatement[93818-93859]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[93892-93901]:Modifier[94038-94047]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[93902-93906]:PrimitiveType[94048-94052]"
    }, {
      "left" : "_reportInvalidToken",
      "right" : "_reportInvalidToken",
      "info" : "SimpleName[93907-93926]:SimpleName[94053-94072]"
    }, {
      "left" : "String matchedPart",
      "right" : "String matchedPart",
      "info" : "SingleVariableDeclaration[93927-93945]:SingleVariableDeclaration[94073-94091]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[93954-93965]:SimpleType[94100-94111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93966-94049]:Block[94112-94195]"
    }, {
      "left" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "right" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "info" : "ExpressionStatement[93976-94043]:ExpressionStatement[94122-94189]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[94055-94064]:Modifier[94201-94210]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[94065-94069]:PrimitiveType[94211-94215]"
    }, {
      "left" : "_reportInvalidToken",
      "right" : "_reportInvalidToken",
      "info" : "SimpleName[94070-94089]:SimpleName[94216-94235]"
    }, {
      "left" : "String matchedPart",
      "right" : "String matchedPart",
      "info" : "SingleVariableDeclaration[94090-94108]:SingleVariableDeclaration[94236-94254]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[94110-94120]:SingleVariableDeclaration[94256-94266]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[94129-94140]:SimpleType[94275-94286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94145-94840]:Block[94291-94986]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "right" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "info" : "VariableDeclarationStatement[94155-94205]:VariableDeclarationStatement[94301-94351]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[94402-94750]:WhileStatement[94548-94896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94415-94750]:Block[94561-94896]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[94429-94552]:IfStatement[94575-94698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94457-94552]:Block[94603-94698]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[94475-94538]:IfStatement[94621-94684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94492-94538]:Block[94638-94684]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[94514-94520]:BreakStatement[94660-94666]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[94565-94598]:VariableDeclarationStatement[94711-94744]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart(c))",
      "right" : "if (!Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[94611-94689]:IfStatement[94757-94835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94651-94689]:Block[94797-94835]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[94669-94675]:BreakStatement[94815-94821]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[94702-94714]:ExpressionStatement[94848-94860]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[94727-94740]:ExpressionStatement[94873-94886]"
    }, {
      "left" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "right" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "info" : "ExpressionStatement[94759-94834]:ExpressionStatement[94905-94980]"
    } ]
  },
  "interFileMappings" : { }
}