{
  "matchedElements" : [
 {
    "left" : "class : XmlTreeBuilder",
    "right" : "class : XmlTreeBuilder",
    "info" : "TypeDeclaration[407-5258]:TypeDeclaration[407-5309]"
  }, {
    "left" : "package defaultSettings() : ",
    "right" : "package defaultSettings() : ",
    "info" : "MethodDeclaration[727-809]:MethodDeclaration[727-809]"
  }, {
    "left" : "protected initialiseParse(input , baseUri , parser ) : void",
    "right" : "protected initialiseParse(input , baseUri , parser ) : void",
    "info" : "MethodDeclaration[815-1146]:MethodDeclaration[815-1146]"
  }, {
    "left" : "package parse(input , baseUri ) : ",
    "right" : "package parse(input , baseUri ) : ",
    "info" : "MethodDeclaration[1152-1260]:MethodDeclaration[1152-1260]"
  }, {
    "left" : "package parse(input , baseUri ) : ",
    "right" : "package parse(input , baseUri ) : ",
    "info" : "MethodDeclaration[1266-1392]:MethodDeclaration[1266-1392]"
  }, {
    "left" : "protected process(token ) : boolean",
    "right" : "protected process(token ) : boolean",
    "info" : "MethodDeclaration[1398-2241]:MethodDeclaration[1398-2241]"
  }, {
    "left" : "private insertNode(node ) : void",
    "right" : "private insertNode(node ) : void",
    "info" : "MethodDeclaration[2247-2333]:MethodDeclaration[2247-2333]"
  }, {
    "left" : "package insert(startTag ) : ",
    "right" : "package insert(startTag ) : ",
    "info" : "MethodDeclaration[2339-2924]:MethodDeclaration[2339-2975]"
  }, {
    "left" : "package insert(commentToken ) : void",
    "right" : "package insert(commentToken ) : void",
    "info" : "MethodDeclaration[2930-3560]:MethodDeclaration[2981-3611]"
  }, {
    "left" : "package insert(token ) : void",
    "right" : "package insert(token ) : void",
    "info" : "MethodDeclaration[3566-3733]:MethodDeclaration[3617-3784]"
  }, {
    "left" : "package insert(d ) : void",
    "right" : "package insert(d ) : void",
    "info" : "MethodDeclaration[3739-3999]:MethodDeclaration[3790-4050]"
  }, {
    "left" : "private popStackToClose(endTag ) : void",
    "right" : "private popStackToClose(endTag ) : void",
    "info" : "MethodDeclaration[4005-4865]:MethodDeclaration[4056-4916]"
  }, {
    "left" : "package parseFragment(inputFragment , baseUri , parser ) : ",
    "right" : "package parseFragment(inputFragment , baseUri , parser ) : ",
    "info" : "MethodDeclaration[4872-5086]:MethodDeclaration[4923-5137]"
  }, {
    "left" : "package parseFragment(inputFragment , context , baseUri , parser ) : ",
    "right" : "package parseFragment(inputFragment , context , baseUri , parser ) : ",
    "info" : "MethodDeclaration[5092-5256]:MethodDeclaration[5143-5307]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[673-679]:Modifier[673-679]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[680-685]:TYPE_DECLARATION_KIND[680-685]"
  }, {
    "left" : "ParseSettings",
    "right" : "ParseSettings",
    "info" : "SimpleType[727-740]:SimpleType[727-740]"
  }, {
    "left" : "defaultSettings",
    "right" : "defaultSettings",
    "info" : "SimpleName[741-756]:SimpleName[741-756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[759-809]:Block[759-809]"
  }, {
    "left" : "return ParseSettings.preserveCase;",
    "right" : "return ParseSettings.preserveCase;",
    "info" : "ReturnStatement[769-803]:ReturnStatement[769-803]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[815-824]:MarkerAnnotation[815-824]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[829-838]:Modifier[829-838]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[839-843]:PrimitiveType[839-843]"
  }, {
    "left" : "initialiseParse",
    "right" : "initialiseParse",
    "info" : "SimpleName[844-859]:SimpleName[844-859]"
  }, {
    "left" : "Reader input",
    "right" : "Reader input",
    "info" : "SingleVariableDeclaration[860-872]:SingleVariableDeclaration[860-872]"
  }, {
    "left" : "String baseUri",
    "right" : "String baseUri",
    "info" : "SingleVariableDeclaration[874-888]:SingleVariableDeclaration[874-888]"
  }, {
    "left" : "Parser parser",
    "right" : "Parser parser",
    "info" : "SingleVariableDeclaration[890-903]:SingleVariableDeclaration[890-903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[905-1146]:Block[905-1146]"
  }, {
    "left" : "super.initialiseParse(input, baseUri, parser);",
    "right" : "super.initialiseParse(input, baseUri, parser);",
    "info" : "ExpressionStatement[915-961]:ExpressionStatement[915-961]"
  }, {
    "left" : "stack.add(doc);",
    "right" : "stack.add(doc);",
    "info" : "ExpressionStatement[970-985]:ExpressionStatement[970-985]"
  }, {
    "left" : "doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);",
    "right" : "doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);",
    "info" : "ExpressionStatement[1076-1140]:ExpressionStatement[1076-1140]"
  }, {
    "left" : "Document",
    "right" : "Document",
    "info" : "SimpleType[1152-1160]:SimpleType[1152-1160]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[1161-1166]:SimpleName[1161-1166]"
  }, {
    "left" : "Reader input",
    "right" : "Reader input",
    "info" : "SingleVariableDeclaration[1167-1179]:SingleVariableDeclaration[1167-1179]"
  }, {
    "left" : "String baseUri",
    "right" : "String baseUri",
    "info" : "SingleVariableDeclaration[1181-1195]:SingleVariableDeclaration[1181-1195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1197-1260]:Block[1197-1260]"
  }, {
    "left" : "return parse(input, baseUri, new Parser(this));",
    "right" : "return parse(input, baseUri, new Parser(this));",
    "info" : "ReturnStatement[1207-1254]:ReturnStatement[1207-1254]"
  }, {
    "left" : "Document",
    "right" : "Document",
    "info" : "SimpleType[1266-1274]:SimpleType[1266-1274]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[1275-1280]:SimpleName[1275-1280]"
  }, {
    "left" : "String input",
    "right" : "String input",
    "info" : "SingleVariableDeclaration[1281-1293]:SingleVariableDeclaration[1281-1293]"
  }, {
    "left" : "String baseUri",
    "right" : "String baseUri",
    "info" : "SingleVariableDeclaration[1295-1309]:SingleVariableDeclaration[1295-1309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1311-1392]:Block[1311-1392]"
  }, {
    "left" : "return parse(new StringReader(input), baseUri, new Parser(this));",
    "right" : "return parse(new StringReader(input), baseUri, new Parser(this));",
    "info" : "ReturnStatement[1321-1386]:ReturnStatement[1321-1386]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[1398-1407]:MarkerAnnotation[1398-1407]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[1412-1421]:Modifier[1412-1421]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[1422-1429]:PrimitiveType[1422-1429]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[1430-1437]:SimpleName[1430-1437]"
  }, {
    "left" : "Token token",
    "right" : "Token token",
    "info" : "SingleVariableDeclaration[1438-1449]:SingleVariableDeclaration[1438-1449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1451-2241]:Block[1451-2241]"
  }, {
    "left" : "switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }",
    "right" : "switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }",
    "info" : "SwitchStatement[1525-2214]:SwitchStatement[1525-2214]"
  }, {
    "left" : "case StartTag:",
    "right" : "case StartTag:",
    "info" : "SwitchCase[1559-1573]:SwitchCase[1559-1573]"
  }, {
    "left" : "insert(token.asStartTag());",
    "right" : "insert(token.asStartTag());",
    "info" : "ExpressionStatement[1590-1617]:ExpressionStatement[1590-1617]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[1634-1640]:BreakStatement[1634-1640]"
  }, {
    "left" : "case EndTag:",
    "right" : "case EndTag:",
    "info" : "SwitchCase[1653-1665]:SwitchCase[1653-1665]"
  }, {
    "left" : "popStackToClose(token.asEndTag());",
    "right" : "popStackToClose(token.asEndTag());",
    "info" : "ExpressionStatement[1682-1716]:ExpressionStatement[1682-1716]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[1733-1739]:BreakStatement[1733-1739]"
  }, {
    "left" : "case Comment:",
    "right" : "case Comment:",
    "info" : "SwitchCase[1752-1765]:SwitchCase[1752-1765]"
  }, {
    "left" : "insert(token.asComment());",
    "right" : "insert(token.asComment());",
    "info" : "ExpressionStatement[1782-1808]:ExpressionStatement[1782-1808]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[1825-1831]:BreakStatement[1825-1831]"
  }, {
    "left" : "case Character:",
    "right" : "case Character:",
    "info" : "SwitchCase[1844-1859]:SwitchCase[1844-1859]"
  }, {
    "left" : "insert(token.asCharacter());",
    "right" : "insert(token.asCharacter());",
    "info" : "ExpressionStatement[1876-1904]:ExpressionStatement[1876-1904]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[1921-1927]:BreakStatement[1921-1927]"
  }, {
    "left" : "case Doctype:",
    "right" : "case Doctype:",
    "info" : "SwitchCase[1940-1953]:SwitchCase[1940-1953]"
  }, {
    "left" : "insert(token.asDoctype());",
    "right" : "insert(token.asDoctype());",
    "info" : "ExpressionStatement[1970-1996]:ExpressionStatement[1970-1996]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[2013-2019]:BreakStatement[2013-2019]"
  }, {
    "left" : "case EOF:",
    "right" : "case EOF:",
    "info" : "SwitchCase[2032-2041]:SwitchCase[2032-2041]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[2106-2112]:BreakStatement[2106-2112]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[2125-2133]:SwitchCase[2125-2133]"
  }, {
    "left" : "Validate.fail(\"Unexpected token type: \" + token.type);",
    "right" : "Validate.fail(\"Unexpected token type: \" + token.type);",
    "info" : "ExpressionStatement[2150-2204]:ExpressionStatement[2150-2204]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[2223-2235]:ReturnStatement[2223-2235]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[2247-2254]:Modifier[2247-2254]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2255-2259]:PrimitiveType[2255-2259]"
  }, {
    "left" : "insertNode",
    "right" : "insertNode",
    "info" : "SimpleName[2260-2270]:SimpleName[2260-2270]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[2271-2280]:SingleVariableDeclaration[2271-2280]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2282-2333]:Block[2282-2333]"
  }, {
    "left" : "currentElement().appendChild(node);",
    "right" : "currentElement().appendChild(node);",
    "info" : "ExpressionStatement[2292-2327]:ExpressionStatement[2292-2327]"
  }, {
    "left" : "Element",
    "right" : "Element",
    "info" : "SimpleType[2339-2346]:SimpleType[2339-2346]"
  }, {
    "left" : "insert",
    "right" : "insert",
    "info" : "SimpleName[2347-2353]:SimpleName[2347-2353]"
  }, {
    "left" : "Token.StartTag startTag",
    "right" : "Token.StartTag startTag",
    "info" : "SingleVariableDeclaration[2354-2377]:SingleVariableDeclaration[2354-2377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2379-2924]:Block[2379-2975]"
  }, {
    "left" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
    "right" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
    "info" : "VariableDeclarationStatement[2389-2438]:VariableDeclarationStatement[2389-2438]"
  }, {
    "left" : "Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));",
    "right" : "Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));",
    "info" : "VariableDeclarationStatement[2549-2639]:VariableDeclarationStatement[2600-2690]"
  }, {
    "left" : "insertNode(el);",
    "right" : "insertNode(el);",
    "info" : "ExpressionStatement[2648-2663]:ExpressionStatement[2699-2714]"
  }, {
    "left" : "if (startTag.isSelfClosing())",
    "right" : "if (startTag.isSelfClosing())",
    "info" : "IfStatement[2672-2899]:IfStatement[2723-2950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2702-2855]:Block[2753-2906]"
  }, {
    "left" : "if (!tag.isKnownTag())",
    "right" : "if (!tag.isKnownTag())",
    "info" : "IfStatement[2716-2845]:IfStatement[2767-2896]"
  }, {
    "left" : "tag.setSelfClosing();",
    "right" : "tag.setSelfClosing();",
    "info" : "ExpressionStatement[2824-2845]:ExpressionStatement[2875-2896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2861-2899]:Block[2912-2950]"
  }, {
    "left" : "stack.add(el);",
    "right" : "stack.add(el);",
    "info" : "ExpressionStatement[2875-2889]:ExpressionStatement[2926-2940]"
  }, {
    "left" : "return el;",
    "right" : "return el;",
    "info" : "ReturnStatement[2908-2918]:ReturnStatement[2959-2969]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2930-2934]:PrimitiveType[2981-2985]"
  }, {
    "left" : "insert",
    "right" : "insert",
    "info" : "SimpleName[2935-2941]:SimpleName[2986-2992]"
  }, {
    "left" : "Token.Comment commentToken",
    "right" : "Token.Comment commentToken",
    "info" : "SingleVariableDeclaration[2942-2968]:SingleVariableDeclaration[2993-3019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2970-3560]:Block[3021-3611]"
  }, {
    "left" : "Comment comment = new Comment(commentToken.getData());",
    "right" : "Comment comment = new Comment(commentToken.getData());",
    "info" : "VariableDeclarationStatement[2980-3034]:VariableDeclarationStatement[3031-3085]"
  }, {
    "left" : "Node insert = comment;",
    "right" : "Node insert = comment;",
    "info" : "VariableDeclarationStatement[3043-3065]:VariableDeclarationStatement[3094-3116]"
  }, {
    "left" : "if (commentToken.bogus && comment.isXmlDeclaration())",
    "right" : "if (commentToken.bogus && comment.isXmlDeclaration())",
    "info" : "IfStatement[3074-3526]:IfStatement[3125-3577]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3128-3526]:Block[3179-3577]"
  }, {
    "left" : "XmlDeclaration decl = comment.asXmlDeclaration();",
    "right" : "XmlDeclaration decl = comment.asXmlDeclaration();",
    "info" : "VariableDeclarationStatement[3343-3392]:VariableDeclarationStatement[3394-3443]"
  }, {
    "left" : "if (decl != null)",
    "right" : "if (decl != null)",
    "info" : "IfStatement[3468-3516]:IfStatement[3519-3567]"
  }, {
    "left" : "insert = decl;",
    "right" : "insert = decl;",
    "info" : "ExpressionStatement[3502-3516]:ExpressionStatement[3553-3567]"
  }, {
    "left" : "insertNode(insert);",
    "right" : "insertNode(insert);",
    "info" : "ExpressionStatement[3535-3554]:ExpressionStatement[3586-3605]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3566-3570]:PrimitiveType[3617-3621]"
  }, {
    "left" : "insert",
    "right" : "insert",
    "info" : "SimpleName[3571-3577]:SimpleName[3622-3628]"
  }, {
    "left" : "Token.Character token",
    "right" : "Token.Character token",
    "info" : "SingleVariableDeclaration[3578-3599]:SingleVariableDeclaration[3629-3650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3601-3733]:Block[3652-3784]"
  }, {
    "left" : "final String data = token.getData();",
    "right" : "final String data = token.getData();",
    "info" : "VariableDeclarationStatement[3611-3647]:VariableDeclarationStatement[3662-3698]"
  }, {
    "left" : "insertNode(token.isCData() ? new CDataNode(data) : new TextNode(data));",
    "right" : "insertNode(token.isCData() ? new CDataNode(data) : new TextNode(data));",
    "info" : "ExpressionStatement[3656-3727]:ExpressionStatement[3707-3778]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3739-3743]:PrimitiveType[3790-3794]"
  }, {
    "left" : "insert",
    "right" : "insert",
    "info" : "SimpleName[3744-3750]:SimpleName[3795-3801]"
  }, {
    "left" : "Token.Doctype d",
    "right" : "Token.Doctype d",
    "info" : "SingleVariableDeclaration[3751-3766]:SingleVariableDeclaration[3802-3817]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3768-3999]:Block[3819-4050]"
  }, {
    "left" : "DocumentType doctypeNode = new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
    "right" : "DocumentType doctypeNode = new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
    "info" : "VariableDeclarationStatement[3778-3908]:VariableDeclarationStatement[3829-3959]"
  }, {
    "left" : "doctypeNode.setPubSysKey(d.getPubSysKey());",
    "right" : "doctypeNode.setPubSysKey(d.getPubSysKey());",
    "info" : "ExpressionStatement[3917-3960]:ExpressionStatement[3968-4011]"
  }, {
    "left" : "insertNode(doctypeNode);",
    "right" : "insertNode(doctypeNode);",
    "info" : "ExpressionStatement[3969-3993]:ExpressionStatement[4020-4044]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4201-4208]:Modifier[4252-4259]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4209-4213]:PrimitiveType[4260-4264]"
  }, {
    "left" : "popStackToClose",
    "right" : "popStackToClose",
    "info" : "SimpleName[4214-4229]:SimpleName[4265-4280]"
  }, {
    "left" : "Token.EndTag endTag",
    "right" : "Token.EndTag endTag",
    "info" : "SingleVariableDeclaration[4230-4249]:SingleVariableDeclaration[4281-4300]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4251-4865]:Block[4302-4916]"
  }, {
    "left" : "String elName = settings.normalizeTag(endTag.tagName);",
    "right" : "String elName = settings.normalizeTag(endTag.tagName);",
    "info" : "VariableDeclarationStatement[4261-4315]:VariableDeclarationStatement[4312-4366]"
  }, {
    "left" : "Element firstFound = null;",
    "right" : "Element firstFound = null;",
    "info" : "VariableDeclarationStatement[4324-4350]:VariableDeclarationStatement[4375-4401]"
  }, {
    "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
    "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
    "info" : "ForStatement[4360-4585]:ForStatement[4411-4636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4409-4585]:Block[4460-4636]"
  }, {
    "left" : "Element next = stack.get(pos);",
    "right" : "Element next = stack.get(pos);",
    "info" : "VariableDeclarationStatement[4423-4453]:VariableDeclarationStatement[4474-4504]"
  }, {
    "left" : "if (next.nodeName().equals(elName))",
    "right" : "if (next.nodeName().equals(elName))",
    "info" : "IfStatement[4466-4575]:IfStatement[4517-4626]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4502-4575]:Block[4553-4626]"
  }, {
    "left" : "firstFound = next;",
    "right" : "firstFound = next;",
    "info" : "ExpressionStatement[4520-4538]:ExpressionStatement[4571-4589]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4555-4561]:BreakStatement[4606-4612]"
  }, {
    "left" : "if (firstFound == null)",
    "right" : "if (firstFound == null)",
    "info" : "IfStatement[4594-4637]:IfStatement[4645-4688]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[4630-4637]:ReturnStatement[4681-4688]"
  }, {
    "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
    "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
    "info" : "ForStatement[4666-4859]:ForStatement[4717-4910]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4715-4859]:Block[4766-4910]"
  }, {
    "left" : "Element next = stack.get(pos);",
    "right" : "Element next = stack.get(pos);",
    "info" : "VariableDeclarationStatement[4729-4759]:VariableDeclarationStatement[4780-4810]"
  }, {
    "left" : "stack.remove(pos);",
    "right" : "stack.remove(pos);",
    "info" : "ExpressionStatement[4772-4790]:ExpressionStatement[4823-4841]"
  }, {
    "left" : "if (next == firstFound)",
    "right" : "if (next == firstFound)",
    "info" : "IfStatement[4803-4849]:IfStatement[4854-4900]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4843-4849]:BreakStatement[4894-4900]"
  }, {
    "left" : "List<Node>",
    "right" : "List<Node>",
    "info" : "ParameterizedType[4872-4882]:ParameterizedType[4923-4933]"
  }, {
    "left" : "parseFragment",
    "right" : "parseFragment",
    "info" : "SimpleName[4883-4896]:SimpleName[4934-4947]"
  }, {
    "left" : "String inputFragment",
    "right" : "String inputFragment",
    "info" : "SingleVariableDeclaration[4897-4917]:SingleVariableDeclaration[4948-4968]"
  }, {
    "left" : "String baseUri",
    "right" : "String baseUri",
    "info" : "SingleVariableDeclaration[4919-4933]:SingleVariableDeclaration[4970-4984]"
  }, {
    "left" : "Parser parser",
    "right" : "Parser parser",
    "info" : "SingleVariableDeclaration[4935-4948]:SingleVariableDeclaration[4986-4999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4950-5086]:Block[5001-5137]"
  }, {
    "left" : "initialiseParse(new StringReader(inputFragment), baseUri, parser);",
    "right" : "initialiseParse(new StringReader(inputFragment), baseUri, parser);",
    "info" : "ExpressionStatement[4960-5026]:ExpressionStatement[5011-5077]"
  }, {
    "left" : "runParser();",
    "right" : "runParser();",
    "info" : "ExpressionStatement[5035-5047]:ExpressionStatement[5086-5098]"
  }, {
    "left" : "return doc.childNodes();",
    "right" : "return doc.childNodes();",
    "info" : "ReturnStatement[5056-5080]:ReturnStatement[5107-5131]"
  }, {
    "left" : "List<Node>",
    "right" : "List<Node>",
    "info" : "ParameterizedType[5092-5102]:ParameterizedType[5143-5153]"
  }, {
    "left" : "parseFragment",
    "right" : "parseFragment",
    "info" : "SimpleName[5103-5116]:SimpleName[5154-5167]"
  }, {
    "left" : "String inputFragment",
    "right" : "String inputFragment",
    "info" : "SingleVariableDeclaration[5117-5137]:SingleVariableDeclaration[5168-5188]"
  }, {
    "left" : "Element context",
    "right" : "Element context",
    "info" : "SingleVariableDeclaration[5139-5154]:SingleVariableDeclaration[5190-5205]"
  }, {
    "left" : "String baseUri",
    "right" : "String baseUri",
    "info" : "SingleVariableDeclaration[5156-5170]:SingleVariableDeclaration[5207-5221]"
  }, {
    "left" : "Parser parser",
    "right" : "Parser parser",
    "info" : "SingleVariableDeclaration[5172-5185]:SingleVariableDeclaration[5223-5236]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5187-5256]:Block[5238-5307]"
  }, {
    "left" : "return parseFragment(inputFragment, baseUri, parser);",
    "right" : "return parseFragment(inputFragment, baseUri, parser);",
    "info" : "ReturnStatement[5197-5250]:ReturnStatement[5248-5301]"
  } ]
}