{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AbstractLeastSquaresOptimizer",
      "right" : "AbstractLeastSquaresOptimizer",
      "info" : "TypeDeclaration[1777-10440]:TypeDeclaration[1777-10776]"
    }, {
      "left" : "private RealMatrix weightMatrixSqrt;",
      "right" : "private RealMatrix weightMatrixSqrt;",
      "info" : "FieldDeclaration[2027-2108]:FieldDeclaration[2027-2108]"
    }, {
      "left" : "private double cost;",
      "right" : "private double cost;",
      "info" : "FieldDeclaration[2113-2198]:FieldDeclaration[2113-2198]"
    }, {
      "left" : "protected AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair> checker)",
      "right" : "protected AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair> checker)",
      "info" : "MethodDeclaration[2204-2384]:MethodDeclaration[2204-2384]"
    }, {
      "left" : "protected RealMatrix computeWeightedJacobian(double[] params)",
      "right" : "protected RealMatrix computeWeightedJacobian(double[] params)",
      "info" : "MethodDeclaration[2390-2863]:MethodDeclaration[2390-2863]"
    }, {
      "left" : "protected double computeCost(double[] residuals)",
      "right" : "protected double computeCost(double[] residuals)",
      "info" : "MethodDeclaration[2869-3208]:MethodDeclaration[2869-3208]"
    }, {
      "left" : "public double getRMS()",
      "right" : "public double getRMS()",
      "info" : "MethodDeclaration[3214-3725]:MethodDeclaration[3214-3725]"
    }, {
      "left" : "public double getChiSquare()",
      "right" : "public double getChiSquare()",
      "info" : "MethodDeclaration[3731-4025]:MethodDeclaration[3731-4025]"
    }, {
      "left" : "public RealMatrix getWeightSquareRoot()",
      "right" : "public RealMatrix getWeightSquareRoot()",
      "info" : "MethodDeclaration[4031-4244]:MethodDeclaration[4031-4244]"
    }, {
      "left" : "protected void setCost(double cost)",
      "right" : "protected void setCost(double cost)",
      "info" : "MethodDeclaration[4250-4395]:MethodDeclaration[4250-4395]"
    }, {
      "left" : "public double[][] computeCovariances(double[] params,\n                                         double threshold)",
      "right" : "public double[][] computeCovariances(double[] params,\n                                         double threshold)",
      "info" : "MethodDeclaration[4401-5607]:MethodDeclaration[4401-5607]"
    }, {
      "left" : "public double[] computeSigma(double[] params,\n                                 double covarianceSingularityThreshold)",
      "right" : "public double[] computeSigma(double[] params,\n                                 double covarianceSingularityThreshold)",
      "info" : "MethodDeclaration[5613-6783]:MethodDeclaration[5613-6783]"
    }, {
      "left" : "public PointVectorValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException",
      "right" : "public PointVectorValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException",
      "info" : "MethodDeclaration[6789-8035]:MethodDeclaration[6789-8035]"
    }, {
      "left" : "protected double[] computeResiduals(double[] objectiveValue)",
      "right" : "protected double[] computeResiduals(double[] objectiveValue)",
      "info" : "MethodDeclaration[8041-9188]:MethodDeclaration[8041-9188]"
    }, {
      "left" : "private void parseOptimizationData(OptimizationData... optData)",
      "right" : "private void parseOptimizationData(OptimizationData... optData)",
      "info" : "MethodDeclaration[9194-10079]:MethodDeclaration[9194-10079]"
    }, {
      "left" : "private RealMatrix squareRoot(RealMatrix m)",
      "right" : "private RealMatrix squareRoot(RealMatrix m)",
      "info" : "MethodDeclaration[10085-10438]:MethodDeclaration[10085-10774]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2353-2384]:Block[2353-2384]"
    }, {
      "left" : "super(checker);",
      "right" : "super(checker);",
      "info" : "SuperConstructorInvocation[2363-2378]:SuperConstructorInvocation[2363-2378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2759-2863]:Block[2759-2863]"
    }, {
      "left" : "return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));",
      "right" : "return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));",
      "info" : "ReturnStatement[2769-2857]:ReturnStatement[2769-2857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3067-3208]:Block[3067-3208]"
    }, {
      "left" : "final ArrayRealVector r = new ArrayRealVector(residuals);",
      "right" : "final ArrayRealVector r = new ArrayRealVector(residuals);",
      "info" : "VariableDeclarationStatement[3077-3134]:VariableDeclarationStatement[3077-3134]"
    }, {
      "left" : "return FastMath.sqrt(r.dotProduct(getWeight().operate(r)));",
      "right" : "return FastMath.sqrt(r.dotProduct(getWeight().operate(r)));",
      "info" : "ReturnStatement[3143-3202]:ReturnStatement[3143-3202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3654-3725]:Block[3654-3725]"
    }, {
      "left" : "return FastMath.sqrt(getChiSquare() / getTargetSize());",
      "right" : "return FastMath.sqrt(getChiSquare() / getTargetSize());",
      "info" : "ReturnStatement[3664-3719]:ReturnStatement[3664-3719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3990-4025]:Block[3990-4025]"
    }, {
      "left" : "return cost * cost;",
      "right" : "return cost * cost;",
      "info" : "ReturnStatement[4000-4019]:ReturnStatement[4000-4019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4197-4244]:Block[4197-4244]"
    }, {
      "left" : "return weightMatrixSqrt.copy();",
      "right" : "return weightMatrixSqrt.copy();",
      "info" : "ReturnStatement[4207-4238]:ReturnStatement[4207-4238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4362-4395]:Block[4362-4395]"
    }, {
      "left" : "this.cost = cost;",
      "right" : "this.cost = cost;",
      "info" : "ExpressionStatement[4372-4389]:ExpressionStatement[4372-4389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5219-5607]:Block[5219-5607]"
    }, {
      "left" : "final RealMatrix j = computeWeightedJacobian(params);",
      "right" : "final RealMatrix j = computeWeightedJacobian(params);",
      "info" : "VariableDeclarationStatement[5261-5314]:VariableDeclarationStatement[5261-5314]"
    }, {
      "left" : "final RealMatrix jTj = j.transpose().multiply(j);",
      "right" : "final RealMatrix jTj = j.transpose().multiply(j);",
      "info" : "VariableDeclarationStatement[5358-5407]:VariableDeclarationStatement[5358-5407]"
    }, {
      "left" : "final DecompositionSolver solver\n            = new QRDecomposition(jTj, threshold).getSolver();",
      "right" : "final DecompositionSolver solver\n            = new QRDecomposition(jTj, threshold).getSolver();",
      "info" : "VariableDeclarationStatement[5460-5555]:VariableDeclarationStatement[5460-5555]"
    }, {
      "left" : "return solver.getInverse().getData();",
      "right" : "return solver.getInverse().getData();",
      "info" : "ReturnStatement[5564-5601]:ReturnStatement[5564-5601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6486-6783]:Block[6486-6783]"
    }, {
      "left" : "final int nC = params.length;",
      "right" : "final int nC = params.length;",
      "info" : "VariableDeclarationStatement[6496-6525]:VariableDeclarationStatement[6496-6525]"
    }, {
      "left" : "final double[] sig = new double[nC];",
      "right" : "final double[] sig = new double[nC];",
      "info" : "VariableDeclarationStatement[6534-6570]:VariableDeclarationStatement[6534-6570]"
    }, {
      "left" : "final double[][] cov = computeCovariances(params, covarianceSingularityThreshold);",
      "right" : "final double[][] cov = computeCovariances(params, covarianceSingularityThreshold);",
      "info" : "VariableDeclarationStatement[6579-6661]:VariableDeclarationStatement[6579-6661]"
    }, {
      "left" : "for (int i = 0; i < nC; ++i)",
      "right" : "for (int i = 0; i < nC; ++i)",
      "info" : "ForStatement[6670-6757]:ForStatement[6670-6757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6699-6757]:Block[6699-6757]"
    }, {
      "left" : "sig[i] = FastMath.sqrt(cov[i][i]);",
      "right" : "sig[i] = FastMath.sqrt(cov[i][i]);",
      "info" : "ExpressionStatement[6713-6747]:ExpressionStatement[6713-6747]"
    }, {
      "left" : "return sig;",
      "right" : "return sig;",
      "info" : "ReturnStatement[6766-6777]:ReturnStatement[6766-6777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7864-8035]:Block[7864-8035]"
    }, {
      "left" : "parseOptimizationData(optData);",
      "right" : "parseOptimizationData(optData);",
      "info" : "ExpressionStatement[7904-7935]:ExpressionStatement[7904-7935]"
    }, {
      "left" : "return super.optimize(optData);",
      "right" : "return super.optimize(optData);",
      "info" : "ReturnStatement[7998-8029]:ReturnStatement[7998-8029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8727-9188]:Block[8727-9188]"
    }, {
      "left" : "final double[] target = getTarget();",
      "right" : "final double[] target = getTarget();",
      "info" : "VariableDeclarationStatement[8737-8773]:VariableDeclarationStatement[8737-8773]"
    }, {
      "left" : "if (objectiveValue.length != target.length)",
      "right" : "if (objectiveValue.length != target.length)",
      "info" : "IfStatement[8782-8974]:IfStatement[8782-8974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8826-8974]:Block[8826-8974]"
    }, {
      "left" : "throw new DimensionMismatchException(target.length,\n                                                 objectiveValue.length);",
      "right" : "throw new DimensionMismatchException(target.length,\n                                                 objectiveValue.length);",
      "info" : "ThrowStatement[8840-8964]:ThrowStatement[8840-8964]"
    }, {
      "left" : "final double[] residuals = new double[target.length];",
      "right" : "final double[] residuals = new double[target.length];",
      "info" : "VariableDeclarationStatement[8984-9037]:VariableDeclarationStatement[8984-9037]"
    }, {
      "left" : "for (int i = 0; i < target.length; i++)",
      "right" : "for (int i = 0; i < target.length; i++)",
      "info" : "ForStatement[9046-9155]:ForStatement[9046-9155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9086-9155]:Block[9086-9155]"
    }, {
      "left" : "residuals[i] = target[i] - objectiveValue[i];",
      "right" : "residuals[i] = target[i] - objectiveValue[i];",
      "info" : "ExpressionStatement[9100-9145]:ExpressionStatement[9100-9145]"
    }, {
      "left" : "return residuals;",
      "right" : "return residuals;",
      "info" : "ReturnStatement[9165-9182]:ReturnStatement[9165-9182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9623-10079]:Block[9623-10079]"
    }, {
      "left" : "for (OptimizationData data : optData)",
      "right" : "for (OptimizationData data : optData)",
      "info" : "EnhancedForStatement[9754-10073]:EnhancedForStatement[9754-10073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9792-10073]:Block[9792-10073]"
    }, {
      "left" : "if (data instanceof Weight)",
      "right" : "if (data instanceof Weight)",
      "info" : "IfStatement[9806-10063]:IfStatement[9806-10063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9834-10063]:Block[9834-10063]"
    }, {
      "left" : "weightMatrixSqrt = squareRoot(((Weight) data).getWeight());",
      "right" : "weightMatrixSqrt = squareRoot(((Weight) data).getWeight());",
      "info" : "ExpressionStatement[9852-9911]:ExpressionStatement[9852-9911]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10043-10049]:BreakStatement[10043-10049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10321-10438]:Block[10647-10768]"
    }, {
      "left" : "final EigenDecomposition dec = new EigenDecomposition(m);",
      "right" : "final EigenDecomposition dec = new EigenDecomposition(m);",
      "info" : "VariableDeclarationStatement[10335-10392]:VariableDeclarationStatement[10661-10718]"
    }, {
      "left" : "return dec.getSquareRoot();",
      "right" : "return dec.getSquareRoot();",
      "info" : "ReturnStatement[10405-10432]:ReturnStatement[10731-10758]"
    } ]
  },
  "interFileMappings" : { }
}