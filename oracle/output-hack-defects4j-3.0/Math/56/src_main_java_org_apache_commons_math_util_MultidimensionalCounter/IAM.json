{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MultidimensionalCounter",
      "right" : "MultidimensionalCounter",
      "info" : "TypeDeclaration[1093-8885]:TypeDeclaration[1093-8772]"
    }, {
      "left" : "private final int dimension;",
      "right" : "private final int dimension;",
      "info" : "FieldDeclaration[1929-2002]:FieldDeclaration[1929-2002]"
    }, {
      "left" : "private final int[] uniCounterOffset;",
      "right" : "private final int[] uniCounterOffset;",
      "info" : "FieldDeclaration[2007-2094]:FieldDeclaration[2007-2094]"
    }, {
      "left" : "private final int[] size;",
      "right" : "private final int[] size;",
      "info" : "FieldDeclaration[2099-2162]:FieldDeclaration[2099-2162]"
    }, {
      "left" : "private final int totalSize;",
      "right" : "private final int totalSize;",
      "info" : "FieldDeclaration[2167-2259]:FieldDeclaration[2167-2259]"
    }, {
      "left" : "private final int last;",
      "right" : "private final int last;",
      "info" : "FieldDeclaration[2264-2335]:FieldDeclaration[2264-2335]"
    }, {
      "left" : "Iterator",
      "right" : "Iterator",
      "info" : "TypeDeclaration[2341-4823]:TypeDeclaration[2341-4823]"
    }, {
      "left" : "private final int[] counter = new int[dimension];",
      "right" : "private final int[] counter = new int[dimension];",
      "info" : "FieldDeclaration[2488-2598]:FieldDeclaration[2488-2598]"
    }, {
      "left" : "private int count = -1;",
      "right" : "private int count = -1;",
      "info" : "FieldDeclaration[2607-2689]:FieldDeclaration[2607-2689]"
    }, {
      "left" : "Iterator()",
      "right" : "Iterator()",
      "info" : "MethodDeclaration[2699-2835]:MethodDeclaration[2699-2835]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[2845-3120]:MethodDeclaration[2845-3120]"
    }, {
      "left" : "public Integer next()",
      "right" : "public Integer next()",
      "info" : "MethodDeclaration[3130-3573]:MethodDeclaration[3130-3573]"
    }, {
      "left" : "public int getCount()",
      "right" : "public int getCount()",
      "info" : "MethodDeclaration[3583-3796]:MethodDeclaration[3583-3796]"
    }, {
      "left" : "public int[] getCounts()",
      "right" : "public int[] getCounts()",
      "info" : "MethodDeclaration[3805-4049]:MethodDeclaration[3805-4049]"
    }, {
      "left" : "public int getCount(int dim)",
      "right" : "public int getCount(int dim)",
      "info" : "MethodDeclaration[4059-4647]:MethodDeclaration[4059-4647]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[4657-4817]:MethodDeclaration[4657-4817]"
    }, {
      "left" : "public MultidimensionalCounter(int ... size)",
      "right" : "public MultidimensionalCounter(int ... size)",
      "info" : "MethodDeclaration[4829-5675]:MethodDeclaration[4829-5675]"
    }, {
      "left" : "public Iterator iterator()",
      "right" : "public Iterator iterator()",
      "info" : "MethodDeclaration[5681-5843]:MethodDeclaration[5681-5843]"
    }, {
      "left" : "public int getDimension()",
      "right" : "public int getDimension()",
      "info" : "MethodDeclaration[5849-6041]:MethodDeclaration[5849-6041]"
    }, {
      "left" : "public int[] getCounts(int index)",
      "right" : "public int[] getCounts(int index)",
      "info" : "MethodDeclaration[6047-7092]:MethodDeclaration[6047-6979]"
    }, {
      "left" : "public int getCount(int ... c) throws OutOfRangeException",
      "right" : "public int getCount(int ... c) throws OutOfRangeException",
      "info" : "MethodDeclaration[7098-8160]:MethodDeclaration[6985-8047]"
    }, {
      "left" : "public int getSize()",
      "right" : "public int getSize()",
      "info" : "MethodDeclaration[8166-8345]:MethodDeclaration[8053-8232]"
    }, {
      "left" : "public int[] getSizes()",
      "right" : "public int[] getSizes()",
      "info" : "MethodDeclaration[8350-8594]:MethodDeclaration[8237-8481]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[8600-8883]:MethodDeclaration[8487-8770]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1857-1863]:Modifier[1857-1863]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1864-1869]:TYPE_DECLARATION_KIND[1864-1869]"
    }, {
      "left" : "MultidimensionalCounter",
      "right" : "MultidimensionalCounter",
      "info" : "SimpleName[1870-1893]:SimpleName[1870-1893]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2417-2423]:Modifier[2417-2423]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2424-2429]:TYPE_DECLARATION_KIND[2424-2429]"
    }, {
      "left" : "Iterator",
      "right" : "Iterator",
      "info" : "SimpleName[2430-2438]:SimpleName[2430-2438]"
    }, {
      "left" : "Iterator",
      "right" : "Iterator",
      "info" : "SimpleName[2781-2789]:SimpleName[2781-2789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2792-2835]:Block[2792-2835]"
    }, {
      "left" : "counter[last] = -1;",
      "right" : "counter[last] = -1;",
      "info" : "ExpressionStatement[2806-2825]:ExpressionStatement[2806-2825]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2894-2900]:Modifier[2894-2900]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2901-2908]:PrimitiveType[2901-2908]"
    }, {
      "left" : "hasNext",
      "right" : "hasNext",
      "info" : "SimpleName[2909-2916]:SimpleName[2909-2916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2919-3120]:Block[2919-3120]"
    }, {
      "left" : "for (int i = 0; i < dimension; i++)",
      "right" : "for (int i = 0; i < dimension; i++)",
      "info" : "ForStatement[2933-3084]:ForStatement[2933-3084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2969-3084]:Block[2969-3084]"
    }, {
      "left" : "if (counter[i] != size[i] - 1)",
      "right" : "if (counter[i] != size[i] - 1)",
      "info" : "IfStatement[2987-3070]:IfStatement[2987-3070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3018-3070]:Block[3018-3070]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3040-3052]:ReturnStatement[3040-3052]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3097-3110]:ReturnStatement[3097-3110]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3262-3268]:Modifier[3262-3268]"
    }, {
      "left" : "Integer",
      "right" : "Integer",
      "info" : "SimpleType[3269-3276]:SimpleType[3269-3276]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[3277-3281]:SimpleName[3277-3281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3284-3573]:Block[3284-3573]"
    }, {
      "left" : "for (int i = last; i >= 0; i--)",
      "right" : "for (int i = last; i >= 0; i--)",
      "info" : "ForStatement[3298-3534]:ForStatement[3298-3534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3330-3534]:Block[3330-3534]"
    }, {
      "left" : "if (counter[i] == size[i] - 1)",
      "right" : "if (counter[i] == size[i] - 1)",
      "info" : "IfStatement[3348-3520]:IfStatement[3348-3520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3379-3434]:Block[3379-3434]"
    }, {
      "left" : "counter[i] = 0;",
      "right" : "counter[i] = 0;",
      "info" : "ExpressionStatement[3401-3416]:ExpressionStatement[3401-3416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3440-3520]:Block[3440-3520]"
    }, {
      "left" : "++counter[i];",
      "right" : "++counter[i];",
      "info" : "ExpressionStatement[3462-3475]:ExpressionStatement[3462-3475]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3496-3502]:BreakStatement[3496-3502]"
    }, {
      "left" : "return ++count;",
      "right" : "return ++count;",
      "info" : "ReturnStatement[3548-3563]:ReturnStatement[3548-3563]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3737-3743]:Modifier[3737-3743]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[3744-3747]:PrimitiveType[3744-3747]"
    }, {
      "left" : "getCount",
      "right" : "getCount",
      "info" : "SimpleName[3748-3756]:SimpleName[3748-3756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3759-3796]:Block[3759-3796]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[3773-3786]:ReturnStatement[3773-3786]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3967-3973]:Modifier[3967-3973]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[3974-3979]:ArrayType[3974-3979]"
    }, {
      "left" : "getCounts",
      "right" : "getCounts",
      "info" : "SimpleName[3980-3989]:SimpleName[3980-3989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3992-4049]:Block[3992-4049]"
    }, {
      "left" : "return MathUtils.copyOf(counter);",
      "right" : "return MathUtils.copyOf(counter);",
      "info" : "ReturnStatement[4006-4039]:ReturnStatement[4006-4039]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4574-4580]:Modifier[4574-4580]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4581-4584]:PrimitiveType[4581-4584]"
    }, {
      "left" : "getCount",
      "right" : "getCount",
      "info" : "SimpleName[4585-4593]:SimpleName[4585-4593]"
    }, {
      "left" : "int dim",
      "right" : "int dim",
      "info" : "SingleVariableDeclaration[4594-4601]:SingleVariableDeclaration[4594-4601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4603-4647]:Block[4603-4647]"
    }, {
      "left" : "return counter[dim];",
      "right" : "return counter[dim];",
      "info" : "ReturnStatement[4617-4637]:ReturnStatement[4617-4637]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4730-4736]:Modifier[4730-4736]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4737-4741]:PrimitiveType[4737-4741]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[4742-4748]:SimpleName[4742-4748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4751-4817]:Block[4751-4817]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[4765-4807]:ThrowStatement[4765-4807]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5039-5045]:Modifier[5039-5045]"
    }, {
      "left" : "MultidimensionalCounter",
      "right" : "MultidimensionalCounter",
      "info" : "SimpleName[5046-5069]:SimpleName[5046-5069]"
    }, {
      "left" : "int ... size",
      "right" : "int ... size",
      "info" : "SingleVariableDeclaration[5070-5082]:SingleVariableDeclaration[5070-5082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5084-5675]:Block[5084-5675]"
    }, {
      "left" : "dimension = size.length;",
      "right" : "dimension = size.length;",
      "info" : "ExpressionStatement[5094-5118]:ExpressionStatement[5094-5118]"
    }, {
      "left" : "this.size = MathUtils.copyOf(size);",
      "right" : "this.size = MathUtils.copyOf(size);",
      "info" : "ExpressionStatement[5127-5162]:ExpressionStatement[5127-5162]"
    }, {
      "left" : "uniCounterOffset = new int[dimension];",
      "right" : "uniCounterOffset = new int[dimension];",
      "info" : "ExpressionStatement[5172-5210]:ExpressionStatement[5172-5210]"
    }, {
      "left" : "last = dimension - 1;",
      "right" : "last = dimension - 1;",
      "info" : "ExpressionStatement[5220-5241]:ExpressionStatement[5220-5241]"
    }, {
      "left" : "int tS = size[last];",
      "right" : "int tS = size[last];",
      "info" : "VariableDeclarationStatement[5250-5270]:VariableDeclarationStatement[5250-5270]"
    }, {
      "left" : "for (int i = 0; i < last; i++)",
      "right" : "for (int i = 0; i < last; i++)",
      "info" : "ForStatement[5279-5518]:ForStatement[5279-5518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5310-5518]:Block[5310-5518]"
    }, {
      "left" : "int count = 1;",
      "right" : "int count = 1;",
      "info" : "VariableDeclarationStatement[5324-5338]:VariableDeclarationStatement[5324-5338]"
    }, {
      "left" : "for (int j = i + 1; j < dimension; j++)",
      "right" : "for (int j = i + 1; j < dimension; j++)",
      "info" : "ForStatement[5351-5440]:ForStatement[5351-5440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5391-5440]:Block[5391-5440]"
    }, {
      "left" : "count *= size[j];",
      "right" : "count *= size[j];",
      "info" : "ExpressionStatement[5409-5426]:ExpressionStatement[5409-5426]"
    }, {
      "left" : "uniCounterOffset[i] = count;",
      "right" : "uniCounterOffset[i] = count;",
      "info" : "ExpressionStatement[5453-5481]:ExpressionStatement[5453-5481]"
    }, {
      "left" : "tS *= size[i];",
      "right" : "tS *= size[i];",
      "info" : "ExpressionStatement[5494-5508]:ExpressionStatement[5494-5508]"
    }, {
      "left" : "uniCounterOffset[last] = 0;",
      "right" : "uniCounterOffset[last] = 0;",
      "info" : "ExpressionStatement[5527-5554]:ExpressionStatement[5527-5554]"
    }, {
      "left" : "if (tS <= 0)",
      "right" : "if (tS <= 0)",
      "info" : "IfStatement[5564-5644]:IfStatement[5564-5644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5577-5644]:Block[5577-5644]"
    }, {
      "left" : "throw new NotStrictlyPositiveException(tS);",
      "right" : "throw new NotStrictlyPositiveException(tS);",
      "info" : "ThrowStatement[5591-5634]:ThrowStatement[5591-5634]"
    }, {
      "left" : "totalSize = tS;",
      "right" : "totalSize = tS;",
      "info" : "ExpressionStatement[5654-5669]:ExpressionStatement[5654-5669]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5778-5784]:Modifier[5778-5784]"
    }, {
      "left" : "Iterator",
      "right" : "Iterator",
      "info" : "SimpleType[5785-5793]:SimpleType[5785-5793]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[5794-5802]:SimpleName[5794-5802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5805-5843]:Block[5805-5843]"
    }, {
      "left" : "return new Iterator();",
      "right" : "return new Iterator();",
      "info" : "ReturnStatement[5815-5837]:ReturnStatement[5815-5837]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5982-5988]:Modifier[5982-5988]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5989-5992]:PrimitiveType[5989-5992]"
    }, {
      "left" : "getDimension",
      "right" : "getDimension",
      "info" : "SimpleName[5993-6005]:SimpleName[5993-6005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6008-6041]:Block[6008-6041]"
    }, {
      "left" : "return dimension;",
      "right" : "return dimension;",
      "info" : "ReturnStatement[6018-6035]:ReturnStatement[6018-6035]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6352-6358]:Modifier[6352-6358]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[6359-6364]:ArrayType[6359-6364]"
    }, {
      "left" : "getCounts",
      "right" : "getCounts",
      "info" : "SimpleName[6365-6374]:SimpleName[6365-6374]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[6375-6384]:SingleVariableDeclaration[6375-6384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6386-7092]:Block[6386-6979]"
    }, {
      "left" : "if (index < 0 ||\n            index >= totalSize)",
      "right" : "if (index < 0 ||\n            index >= totalSize)",
      "info" : "IfStatement[6396-6520]:IfStatement[6396-6520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6445-6520]:Block[6445-6520]"
    }, {
      "left" : "throw new OutOfRangeException(index, 0, totalSize);",
      "right" : "throw new OutOfRangeException(index, 0, totalSize);",
      "info" : "ThrowStatement[6459-6510]:ThrowStatement[6459-6510]"
    }, {
      "left" : "final int[] indices = new int[dimension];",
      "right" : "final int[] indices = new int[dimension];",
      "info" : "VariableDeclarationStatement[6530-6571]:VariableDeclarationStatement[6530-6571]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[6581-6595]:VariableDeclarationStatement[6581-6595]"
    }, {
      "left" : "for (int i = 0; i < last; i++)",
      "right" : "for (int i = 0; i < last; i++)",
      "info" : "ForStatement[6604-6908]:ForStatement[6604-6908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6635-6908]:Block[6635-6908]"
    }, {
      "left" : "int idx = 0;",
      "right" : "int idx = 0;",
      "info" : "VariableDeclarationStatement[6649-6661]:VariableDeclarationStatement[6649-6661]"
    }, {
      "left" : "final int offset = uniCounterOffset[i];",
      "right" : "final int offset = uniCounterOffset[i];",
      "info" : "VariableDeclarationStatement[6674-6713]:VariableDeclarationStatement[6674-6713]"
    }, {
      "left" : "while (count <= index)",
      "right" : "while (count <= index)",
      "info" : "WhileStatement[6726-6820]:WhileStatement[6726-6820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6749-6820]:Block[6749-6820]"
    }, {
      "left" : "count += offset;",
      "right" : "count += offset;",
      "info" : "ExpressionStatement[6767-6783]:ExpressionStatement[6767-6783]"
    }, {
      "left" : "++idx;",
      "right" : "++idx;",
      "info" : "ExpressionStatement[6800-6806]:ExpressionStatement[6800-6806]"
    }, {
      "left" : "--idx;",
      "right" : "--idx;",
      "info" : "ExpressionStatement[6833-6839]:ExpressionStatement[6833-6839]"
    }, {
      "left" : "count -= offset;",
      "right" : "count -= offset;",
      "info" : "ExpressionStatement[6852-6868]:ExpressionStatement[6852-6868]"
    }, {
      "left" : "indices[i] = idx;",
      "right" : "indices[i] = idx;",
      "info" : "ExpressionStatement[6881-6898]:ExpressionStatement[6881-6898]"
    }, {
      "left" : "count",
      "right" : "count",
      "info" : "SimpleName[6946-6951]:SimpleName[6942-6947]"
    }, {
      "left" : "index",
      "right" : "index",
      "info" : "SimpleName[6954-6959]:SimpleName[6934-6939]"
    }, {
      "left" : "indices[last] = idx;",
      "right" : "indices[last] = index - count;",
      "info" : "ExpressionStatement[7041-7061]:ExpressionStatement[6918-6948]"
    }, {
      "left" : "idx",
      "right" : "index - count",
      "info" : "SimpleName[7057-7060]:InfixExpression[6934-6947]"
    }, {
      "left" : "return indices;",
      "right" : "return indices;",
      "info" : "ReturnStatement[7071-7086]:ReturnStatement[6958-6973]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7632-7638]:Modifier[7519-7525]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[7639-7642]:PrimitiveType[7526-7529]"
    }, {
      "left" : "getCount",
      "right" : "getCount",
      "info" : "SimpleName[7643-7651]:SimpleName[7530-7538]"
    }, {
      "left" : "int ... c",
      "right" : "int ... c",
      "info" : "SingleVariableDeclaration[7652-7661]:SingleVariableDeclaration[7539-7548]"
    }, {
      "left" : "OutOfRangeException",
      "right" : "OutOfRangeException",
      "info" : "SimpleType[7670-7689]:SimpleType[7557-7576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7690-8160]:Block[7577-8047]"
    }, {
      "left" : "if (c.length != dimension)",
      "right" : "if (c.length != dimension)",
      "info" : "IfStatement[7700-7809]:IfStatement[7587-7696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7727-7809]:Block[7614-7696]"
    }, {
      "left" : "throw new DimensionMismatchException(c.length, dimension);",
      "right" : "throw new DimensionMismatchException(c.length, dimension);",
      "info" : "ThrowStatement[7741-7799]:ThrowStatement[7628-7686]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[7818-7832]:VariableDeclarationStatement[7705-7719]"
    }, {
      "left" : "for (int i = 0; i < dimension; i++)",
      "right" : "for (int i = 0; i < dimension; i++)",
      "info" : "ForStatement[7841-8122]:ForStatement[7728-8009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7877-8122]:Block[7764-8009]"
    }, {
      "left" : "final int index = c[i];",
      "right" : "final int index = c[i];",
      "info" : "VariableDeclarationStatement[7891-7914]:VariableDeclarationStatement[7778-7801]"
    }, {
      "left" : "if (index < 0 ||\n                index >= size[i])",
      "right" : "if (index < 0 ||\n                index >= size[i])",
      "info" : "IfStatement[7927-8063]:IfStatement[7814-7950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7978-8063]:Block[7865-7950]"
    }, {
      "left" : "throw new OutOfRangeException(index, 0, size[i] - 1);",
      "right" : "throw new OutOfRangeException(index, 0, size[i] - 1);",
      "info" : "ThrowStatement[7996-8049]:ThrowStatement[7883-7936]"
    }, {
      "left" : "count += uniCounterOffset[i] * c[i];",
      "right" : "count += uniCounterOffset[i] * c[i];",
      "info" : "ExpressionStatement[8076-8112]:ExpressionStatement[7963-7999]"
    }, {
      "left" : "return count + c[last];",
      "right" : "return count + c[last];",
      "info" : "ReturnStatement[8131-8154]:ReturnStatement[8018-8041]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8291-8297]:Modifier[8178-8184]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[8298-8301]:PrimitiveType[8185-8188]"
    }, {
      "left" : "getSize",
      "right" : "getSize",
      "info" : "SimpleName[8302-8309]:SimpleName[8189-8196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8312-8345]:Block[8199-8232]"
    }, {
      "left" : "return totalSize;",
      "right" : "return totalSize;",
      "info" : "ReturnStatement[8322-8339]:ReturnStatement[8209-8226]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8524-8530]:Modifier[8411-8417]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[8531-8536]:ArrayType[8418-8423]"
    }, {
      "left" : "getSizes",
      "right" : "getSizes",
      "info" : "SimpleName[8537-8545]:SimpleName[8424-8432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8548-8594]:Block[8435-8481]"
    }, {
      "left" : "return MathUtils.copyOf(size);",
      "right" : "return MathUtils.copyOf(size);",
      "info" : "ReturnStatement[8558-8588]:ReturnStatement[8445-8475]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8637-8646]:MarkerAnnotation[8524-8533]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8651-8657]:Modifier[8538-8544]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8658-8664]:SimpleType[8545-8551]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[8665-8673]:SimpleName[8552-8560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8676-8883]:Block[8563-8770]"
    }, {
      "left" : "final StringBuilder sb = new StringBuilder();",
      "right" : "final StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[8686-8731]:VariableDeclarationStatement[8573-8618]"
    }, {
      "left" : "for (int i = 0; i < dimension; i++)",
      "right" : "for (int i = 0; i < dimension; i++)",
      "info" : "ForStatement[8740-8847]:ForStatement[8627-8734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8776-8847]:Block[8663-8734]"
    }, {
      "left" : "sb.append(\"[\").append(getCount(i)).append(\"]\");",
      "right" : "sb.append(\"[\").append(getCount(i)).append(\"]\");",
      "info" : "ExpressionStatement[8790-8837]:ExpressionStatement[8677-8724]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[8856-8877]:ReturnStatement[8743-8764]"
    } ]
  },
  "interFileMappings" : { }
}