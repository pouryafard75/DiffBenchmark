{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Element",
      "right" : "Element",
      "info" : "TypeDeclaration[285-40788]:TypeDeclaration[285-40843]"
    }, {
      "left" : "private Tag tag;",
      "right" : "private Tag tag;",
      "info" : "FieldDeclaration[597-613]:FieldDeclaration[597-613]"
    }, {
      "left" : "private Set<String> classNames;",
      "right" : "private Set<String> classNames;",
      "info" : "FieldDeclaration[618-649]:FieldDeclaration[618-649]"
    }, {
      "left" : "public Element(Tag tag, String baseUri, Attributes attributes)",
      "right" : "public Element(Tag tag, String baseUri, Attributes attributes)",
      "info" : "MethodDeclaration[659-1120]:MethodDeclaration[659-1120]"
    }, {
      "left" : "public Element(Tag tag, String baseUri)",
      "right" : "public Element(Tag tag, String baseUri)",
      "info" : "MethodDeclaration[1130-1505]:MethodDeclaration[1130-1505]"
    }, {
      "left" : "public String nodeName()",
      "right" : "public String nodeName()",
      "info" : "MethodDeclaration[1511-1587]:MethodDeclaration[1511-1587]"
    }, {
      "left" : "public String tagName()",
      "right" : "public String tagName()",
      "info" : "MethodDeclaration[1593-1772]:MethodDeclaration[1593-1772]"
    }, {
      "left" : "public Element tagName(String tagName)",
      "right" : "public Element tagName(String tagName)",
      "info" : "MethodDeclaration[1778-2201]:MethodDeclaration[1778-2201]"
    }, {
      "left" : "public Tag tag()",
      "right" : "public Tag tag()",
      "info" : "MethodDeclaration[2207-2342]:MethodDeclaration[2207-2342]"
    }, {
      "left" : "public boolean isBlock()",
      "right" : "public boolean isBlock()",
      "info" : "MethodDeclaration[2352-2632]:MethodDeclaration[2352-2632]"
    }, {
      "left" : "public String id()",
      "right" : "public String id()",
      "info" : "MethodDeclaration[2638-2882]:MethodDeclaration[2638-2882]"
    }, {
      "left" : "public Element attr(String attributeKey, String attributeValue)",
      "right" : "public Element attr(String attributeKey, String attributeValue)",
      "info" : "MethodDeclaration[2888-3250]:MethodDeclaration[2888-3250]"
    }, {
      "left" : "public Map<String, String> dataset()",
      "right" : "public Map<String, String> dataset()",
      "info" : "MethodDeclaration[3256-4026]:MethodDeclaration[3256-4026]"
    }, {
      "left" : "public final Element parent()",
      "right" : "public final Element parent()",
      "info" : "MethodDeclaration[4032-4120]:MethodDeclaration[4032-4120]"
    }, {
      "left" : "public Elements parents()",
      "right" : "public Elements parents()",
      "info" : "MethodDeclaration[4126-4420]:MethodDeclaration[4126-4420]"
    }, {
      "left" : "private static void accumulateParents(Element el, Elements parents)",
      "right" : "private static void accumulateParents(Element el, Elements parents)",
      "info" : "MethodDeclaration[4426-4697]:MethodDeclaration[4426-4697]"
    }, {
      "left" : "public Element child(int index)",
      "right" : "public Element child(int index)",
      "info" : "MethodDeclaration[4703-5284]:MethodDeclaration[4703-5284]"
    }, {
      "left" : "public Elements children()",
      "right" : "public Elements children()",
      "info" : "MethodDeclaration[5290-5943]:MethodDeclaration[5290-5943]"
    }, {
      "left" : "public List<TextNode> textNodes()",
      "right" : "public List<TextNode> textNodes()",
      "info" : "MethodDeclaration[5949-7138]:MethodDeclaration[5949-7138]"
    }, {
      "left" : "public List<DataNode> dataNodes()",
      "right" : "public List<DataNode> dataNodes()",
      "info" : "MethodDeclaration[7144-7776]:MethodDeclaration[7144-7776]"
    }, {
      "left" : "public Elements select(String cssQuery)",
      "right" : "public Elements select(String cssQuery)",
      "info" : "MethodDeclaration[7782-8730]:MethodDeclaration[7782-8730]"
    }, {
      "left" : "public Element appendChild(Node child)",
      "right" : "public Element appendChild(Node child)",
      "info" : "MethodDeclaration[8740-9059]:MethodDeclaration[8740-9059]"
    }, {
      "left" : "public Element prependChild(Node child)",
      "right" : "public Element prependChild(Node child)",
      "info" : "MethodDeclaration[9065-9401]:MethodDeclaration[9065-9401]"
    }, {
      "left" : "public Element insertChildren(int index, Collection<? extends Node> children)",
      "right" : "public Element insertChildren(int index, Collection<? extends Node> children)",
      "info" : "MethodDeclaration[9408-10446]:MethodDeclaration[9408-10446]"
    }, {
      "left" : "public Element appendElement(String tagName)",
      "right" : "public Element appendElement(String tagName)",
      "info" : "MethodDeclaration[10456-10939]:MethodDeclaration[10456-10939]"
    }, {
      "left" : "public Element prependElement(String tagName)",
      "right" : "public Element prependElement(String tagName)",
      "info" : "MethodDeclaration[10949-11436]:MethodDeclaration[10949-11436]"
    }, {
      "left" : "public Element appendText(String text)",
      "right" : "public Element appendText(String text)",
      "info" : "MethodDeclaration[11446-11749]:MethodDeclaration[11446-11749]"
    }, {
      "left" : "public Element prependText(String text)",
      "right" : "public Element prependText(String text)",
      "info" : "MethodDeclaration[11759-12065]:MethodDeclaration[11759-12065]"
    }, {
      "left" : "public Element append(String html)",
      "right" : "public Element append(String html)",
      "info" : "MethodDeclaration[12075-12573]:MethodDeclaration[12075-12573]"
    }, {
      "left" : "public Element prepend(String html)",
      "right" : "public Element prepend(String html)",
      "info" : "MethodDeclaration[12583-13109]:MethodDeclaration[12583-13109]"
    }, {
      "left" : "public Element before(String html)",
      "right" : "public Element before(String html)",
      "info" : "MethodDeclaration[13115-13451]:MethodDeclaration[13115-13451]"
    }, {
      "left" : "public Element before(Node node)",
      "right" : "public Element before(Node node)",
      "info" : "MethodDeclaration[13457-13774]:MethodDeclaration[13457-13774]"
    }, {
      "left" : "public Element after(String html)",
      "right" : "public Element after(String html)",
      "info" : "MethodDeclaration[13780-14113]:MethodDeclaration[13780-14113]"
    }, {
      "left" : "public Element after(Node node)",
      "right" : "public Element after(Node node)",
      "info" : "MethodDeclaration[14119-14433]:MethodDeclaration[14119-14433]"
    }, {
      "left" : "public Element empty()",
      "right" : "public Element empty()",
      "info" : "MethodDeclaration[14439-14641]:MethodDeclaration[14439-14641]"
    }, {
      "left" : "public Element wrap(String html)",
      "right" : "public Element wrap(String html)",
      "info" : "MethodDeclaration[14647-14978]:MethodDeclaration[14647-14978]"
    }, {
      "left" : "public Elements siblingElements()",
      "right" : "public Elements siblingElements()",
      "info" : "MethodDeclaration[14984-15565]:MethodDeclaration[14984-15565]"
    }, {
      "left" : "public Element nextElementSibling()",
      "right" : "public Element nextElementSibling()",
      "info" : "MethodDeclaration[15571-16329]:MethodDeclaration[15571-16329]"
    }, {
      "left" : "public Element previousElementSibling()",
      "right" : "public Element previousElementSibling()",
      "info" : "MethodDeclaration[16335-16855]:MethodDeclaration[16335-16855]"
    }, {
      "left" : "public Element firstElementSibling()",
      "right" : "public Element firstElementSibling()",
      "info" : "MethodDeclaration[16861-17236]:MethodDeclaration[16861-17236]"
    }, {
      "left" : "public Integer elementSiblingIndex()",
      "right" : "public Integer elementSiblingIndex()",
      "info" : "MethodDeclaration[17246-17580]:MethodDeclaration[17246-17580]"
    }, {
      "left" : "public Element lastElementSibling()",
      "right" : "public Element lastElementSibling()",
      "info" : "MethodDeclaration[17586-17921]:MethodDeclaration[17586-17921]"
    }, {
      "left" : "private static <E extends Element> Integer indexInList(Element search, List<E> elements)",
      "right" : "private static <E extends Element> Integer indexInList(Element search, List<E> elements)",
      "info" : "MethodDeclaration[17931-18288]:MethodDeclaration[17931-18288]"
    }, {
      "left" : "public Elements getElementsByTag(String tagName)",
      "right" : "public Elements getElementsByTag(String tagName)",
      "info" : "MethodDeclaration[18319-18832]:MethodDeclaration[18319-18832]"
    }, {
      "left" : "public Element getElementById(String id)",
      "right" : "public Element getElementById(String id)",
      "info" : "MethodDeclaration[18838-19620]:MethodDeclaration[18838-19620]"
    }, {
      "left" : "public Elements getElementsByClass(String className)",
      "right" : "public Elements getElementsByClass(String className)",
      "info" : "MethodDeclaration[19626-20312]:MethodDeclaration[19626-20312]"
    }, {
      "left" : "public Elements getElementsByAttribute(String key)",
      "right" : "public Elements getElementsByAttribute(String key)",
      "info" : "MethodDeclaration[20318-20737]:MethodDeclaration[20318-20737]"
    }, {
      "left" : "public Elements getElementsByAttributeStarting(String keyPrefix)",
      "right" : "public Elements getElementsByAttributeStarting(String keyPrefix)",
      "info" : "MethodDeclaration[20743-21328]:MethodDeclaration[20743-21328]"
    }, {
      "left" : "public Elements getElementsByAttributeValue(String key, String value)",
      "right" : "public Elements getElementsByAttributeValue(String key, String value)",
      "info" : "MethodDeclaration[21334-21771]:MethodDeclaration[21334-21771]"
    }, {
      "left" : "public Elements getElementsByAttributeValueNot(String key, String value)",
      "right" : "public Elements getElementsByAttributeValueNot(String key, String value)",
      "info" : "MethodDeclaration[21777-22229]:MethodDeclaration[21777-22229]"
    }, {
      "left" : "public Elements getElementsByAttributeValueStarting(String key, String valuePrefix)",
      "right" : "public Elements getElementsByAttributeValueStarting(String key, String valuePrefix)",
      "info" : "MethodDeclaration[22235-22713]:MethodDeclaration[22235-22713]"
    }, {
      "left" : "public Elements getElementsByAttributeValueEnding(String key, String valueSuffix)",
      "right" : "public Elements getElementsByAttributeValueEnding(String key, String valueSuffix)",
      "info" : "MethodDeclaration[22719-23191]:MethodDeclaration[22719-23191]"
    }, {
      "left" : "public Elements getElementsByAttributeValueContaining(String key, String match)",
      "right" : "public Elements getElementsByAttributeValueContaining(String key, String match)",
      "info" : "MethodDeclaration[23197-23662]:MethodDeclaration[23197-23662]"
    }, {
      "left" : "public Elements getElementsByAttributeValueMatching(String key, Pattern pattern)",
      "right" : "public Elements getElementsByAttributeValueMatching(String key, Pattern pattern)",
      "info" : "MethodDeclaration[23672-24177]:MethodDeclaration[23672-24177]"
    }, {
      "left" : "public Elements getElementsByAttributeValueMatching(String key, String regex)",
      "right" : "public Elements getElementsByAttributeValueMatching(String key, String regex)",
      "info" : "MethodDeclaration[24187-25033]:MethodDeclaration[24187-25033]"
    }, {
      "left" : "public Elements getElementsByIndexLessThan(int index)",
      "right" : "public Elements getElementsByIndexLessThan(int index)",
      "info" : "MethodDeclaration[25043-25344]:MethodDeclaration[25043-25344]"
    }, {
      "left" : "public Elements getElementsByIndexGreaterThan(int index)",
      "right" : "public Elements getElementsByIndexGreaterThan(int index)",
      "info" : "MethodDeclaration[25354-25667]:MethodDeclaration[25354-25667]"
    }, {
      "left" : "public Elements getElementsByIndexEquals(int index)",
      "right" : "public Elements getElementsByIndexEquals(int index)",
      "info" : "MethodDeclaration[25677-25972]:MethodDeclaration[25677-25972]"
    }, {
      "left" : "public Elements getElementsContainingText(String searchText)",
      "right" : "public Elements getElementsContainingText(String searchText)",
      "info" : "MethodDeclaration[25982-26469]:MethodDeclaration[25982-26469]"
    }, {
      "left" : "public Elements getElementsContainingOwnText(String searchText)",
      "right" : "public Elements getElementsContainingOwnText(String searchText)",
      "info" : "MethodDeclaration[26479-26990]:MethodDeclaration[26479-26990]"
    }, {
      "left" : "public Elements getElementsMatchingText(Pattern pattern)",
      "right" : "public Elements getElementsMatchingText(Pattern pattern)",
      "info" : "MethodDeclaration[27000-27381]:MethodDeclaration[27000-27381]"
    }, {
      "left" : "public Elements getElementsMatchingText(String regex)",
      "right" : "public Elements getElementsMatchingText(String regex)",
      "info" : "MethodDeclaration[27391-28138]:MethodDeclaration[27391-28138]"
    }, {
      "left" : "public Elements getElementsMatchingOwnText(Pattern pattern)",
      "right" : "public Elements getElementsMatchingOwnText(Pattern pattern)",
      "info" : "MethodDeclaration[28148-28542]:MethodDeclaration[28148-28542]"
    }, {
      "left" : "public Elements getElementsMatchingOwnText(String regex)",
      "right" : "public Elements getElementsMatchingOwnText(String regex)",
      "info" : "MethodDeclaration[28552-29308]:MethodDeclaration[28552-29308]"
    }, {
      "left" : "public Elements getAllElements()",
      "right" : "public Elements getAllElements()",
      "info" : "MethodDeclaration[29318-29567]:MethodDeclaration[29318-29567]"
    }, {
      "left" : "public String text()",
      "right" : "public String text()",
      "info" : "MethodDeclaration[29573-30762]:MethodDeclaration[29573-30762]"
    }, {
      "left" : "public void head(Node node, int depth)",
      "right" : "public void head(Node node, int depth)",
      "info" : "MethodDeclaration[30040-30621]:MethodDeclaration[30040-30621]"
    }, {
      "left" : "public void tail(Node node, int depth)",
      "right" : "public void tail(Node node, int depth)",
      "info" : "MethodDeclaration[30635-30689]:MethodDeclaration[30635-30689]"
    }, {
      "left" : "public String ownText()",
      "right" : "public String ownText()",
      "info" : "MethodDeclaration[30768-31452]:MethodDeclaration[30768-31452]"
    }, {
      "left" : "private void ownText(StringBuilder accum)",
      "right" : "private void ownText(StringBuilder accum)",
      "info" : "MethodDeclaration[31458-31838]:MethodDeclaration[31458-31838]"
    }, {
      "left" : "private static void appendNormalisedText(StringBuilder accum, TextNode textNode)",
      "right" : "private static void appendNormalisedText(StringBuilder accum, TextNode textNode)",
      "info" : "MethodDeclaration[31844-32180]:MethodDeclaration[31844-32180]"
    }, {
      "left" : "private static void appendWhitespaceIfBr(Element element, StringBuilder accum)",
      "right" : "private static void appendWhitespaceIfBr(Element element, StringBuilder accum)",
      "info" : "MethodDeclaration[32186-32392]:MethodDeclaration[32186-32392]"
    }, {
      "left" : "static boolean preserveWhitespace(Node node)",
      "right" : "static boolean preserveWhitespace(Node node)",
      "info" : "MethodDeclaration[32398-32828]:MethodDeclaration[32398-32828]"
    }, {
      "left" : "public Element text(String text)",
      "right" : "public Element text(String text)",
      "info" : "MethodDeclaration[32834-33206]:MethodDeclaration[32834-33206]"
    }, {
      "left" : "public boolean hasText()",
      "right" : "public boolean hasText()",
      "info" : "MethodDeclaration[33212-33817]:MethodDeclaration[33212-33817]"
    }, {
      "left" : "public String data()",
      "right" : "public String data()",
      "info" : "MethodDeclaration[33823-34544]:MethodDeclaration[33823-34544]"
    }, {
      "left" : "public String className()",
      "right" : "public String className()",
      "info" : "MethodDeclaration[34553-34945]:MethodDeclaration[34553-34945]"
    }, {
      "left" : "public Set<String> classNames()",
      "right" : "public Set<String> classNames()",
      "info" : "MethodDeclaration[34951-35594]:MethodDeclaration[34951-35594]"
    }, {
      "left" : "public Element classNames(Set<String> classNames)",
      "right" : "public Element classNames(Set<String> classNames)",
      "info" : "MethodDeclaration[35600-35953]:MethodDeclaration[35600-35953]"
    }, {
      "left" : "public boolean hasClass(String className)",
      "right" : "public boolean hasClass(String className)",
      "info" : "MethodDeclaration[35959-36379]:MethodDeclaration[35959-36379]"
    }, {
      "left" : "public Element addClass(String className)",
      "right" : "public Element addClass(String className)",
      "info" : "MethodDeclaration[36385-36746]:MethodDeclaration[36385-36746]"
    }, {
      "left" : "public Element removeClass(String className)",
      "right" : "public Element removeClass(String className)",
      "info" : "MethodDeclaration[36752-37127]:MethodDeclaration[36752-37127]"
    }, {
      "left" : "public Element toggleClass(String className)",
      "right" : "public Element toggleClass(String className)",
      "info" : "MethodDeclaration[37133-37641]:MethodDeclaration[37133-37641]"
    }, {
      "left" : "public String val()",
      "right" : "public String val()",
      "info" : "MethodDeclaration[37651-37947]:MethodDeclaration[37651-37947]"
    }, {
      "left" : "public Element val(String value)",
      "right" : "public Element val(String value)",
      "info" : "MethodDeclaration[37957-38287]:MethodDeclaration[37957-38287]"
    }, {
      "left" : "void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out)",
      "right" : "void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out)",
      "info" : "MethodDeclaration[38293-38822]:MethodDeclaration[38293-38822]"
    }, {
      "left" : "void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out)",
      "right" : "void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out)",
      "info" : "MethodDeclaration[38828-39327]:MethodDeclaration[38828-39327]"
    }, {
      "left" : "public String html()",
      "right" : "public String html()",
      "info" : "MethodDeclaration[39333-39757]:MethodDeclaration[39333-39812]"
    }, {
      "left" : "private void html(StringBuilder accum)",
      "right" : "private void html(StringBuilder accum)",
      "info" : "MethodDeclaration[39763-39881]:MethodDeclaration[39818-39936]"
    }, {
      "left" : "public Element html(String html)",
      "right" : "public Element html(String html)",
      "info" : "MethodDeclaration[39891-40192]:MethodDeclaration[39946-40247]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[40198-40258]:MethodDeclaration[40253-40313]"
    }, {
      "left" : "public boolean equals(Object o)",
      "right" : "public boolean equals(Object o)",
      "info" : "MethodDeclaration[40264-40343]:MethodDeclaration[40319-40398]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[40349-40561]:MethodDeclaration[40404-40616]"
    }, {
      "left" : "public Element clone()",
      "right" : "public Element clone()",
      "info" : "MethodDeclaration[40567-40786]:MethodDeclaration[40622-40841]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1009-1120]:Block[1009-1120]"
    }, {
      "left" : "super(baseUri, attributes);",
      "right" : "super(baseUri, attributes);",
      "info" : "SuperConstructorInvocation[1019-1046]:SuperConstructorInvocation[1019-1046]"
    }, {
      "left" : "Validate.notNull(tag);",
      "right" : "Validate.notNull(tag);",
      "info" : "ExpressionStatement[1064-1086]:ExpressionStatement[1064-1086]"
    }, {
      "left" : "this.tag = tag;",
      "right" : "this.tag = tag;",
      "info" : "ExpressionStatement[1099-1114]:ExpressionStatement[1099-1114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1452-1505]:Block[1452-1505]"
    }, {
      "left" : "this(tag, baseUri, new Attributes());",
      "right" : "this(tag, baseUri, new Attributes());",
      "info" : "ConstructorInvocation[1462-1499]:ConstructorInvocation[1462-1499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1550-1587]:Block[1550-1587]"
    }, {
      "left" : "return tag.getName();",
      "right" : "return tag.getName();",
      "info" : "ReturnStatement[1560-1581]:ReturnStatement[1560-1581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1735-1772]:Block[1735-1772]"
    }, {
      "left" : "return tag.getName();",
      "right" : "return tag.getName();",
      "info" : "ReturnStatement[1745-1766]:ReturnStatement[1745-1766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2070-2201]:Block[2070-2201]"
    }, {
      "left" : "Validate.notEmpty(tagName, \"Tag name must not be empty.\");",
      "right" : "Validate.notEmpty(tagName, \"Tag name must not be empty.\");",
      "info" : "ExpressionStatement[2080-2138]:ExpressionStatement[2080-2138]"
    }, {
      "left" : "tag = Tag.valueOf(tagName);",
      "right" : "tag = Tag.valueOf(tagName);",
      "info" : "ExpressionStatement[2147-2174]:ExpressionStatement[2147-2174]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[2183-2195]:ReturnStatement[2183-2195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2315-2342]:Block[2315-2342]"
    }, {
      "left" : "return tag;",
      "right" : "return tag;",
      "info" : "ReturnStatement[2325-2336]:ReturnStatement[2325-2336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2595-2632]:Block[2595-2632]"
    }, {
      "left" : "return tag.isBlock();",
      "right" : "return tag.isBlock();",
      "info" : "ReturnStatement[2605-2626]:ReturnStatement[2605-2626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2806-2882]:Block[2806-2882]"
    }, {
      "left" : "String id = attr(\"id\");",
      "right" : "String id = attr(\"id\");",
      "info" : "VariableDeclarationStatement[2816-2839]:VariableDeclarationStatement[2816-2839]"
    }, {
      "left" : "return id == null ? \"\" : id;",
      "right" : "return id == null ? \"\" : id;",
      "info" : "ReturnStatement[2848-2876]:ReturnStatement[2848-2876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3172-3250]:Block[3172-3250]"
    }, {
      "left" : "super.attr(attributeKey, attributeValue);",
      "right" : "super.attr(attributeKey, attributeValue);",
      "info" : "ExpressionStatement[3182-3223]:ExpressionStatement[3182-3223]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[3232-3244]:ReturnStatement[3232-3244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3982-4026]:Block[3982-4026]"
    }, {
      "left" : "return attributes.dataset();",
      "right" : "return attributes.dataset();",
      "info" : "ReturnStatement[3992-4020]:ReturnStatement[3992-4020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4076-4120]:Block[4076-4120]"
    }, {
      "left" : "return (Element) parentNode;",
      "right" : "return (Element) parentNode;",
      "info" : "ReturnStatement[4086-4114]:ReturnStatement[4086-4114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4304-4420]:Block[4304-4420]"
    }, {
      "left" : "Elements parents = new Elements();",
      "right" : "Elements parents = new Elements();",
      "info" : "VariableDeclarationStatement[4314-4348]:VariableDeclarationStatement[4314-4348]"
    }, {
      "left" : "accumulateParents(this, parents);",
      "right" : "accumulateParents(this, parents);",
      "info" : "ExpressionStatement[4357-4390]:ExpressionStatement[4357-4390]"
    }, {
      "left" : "return parents;",
      "right" : "return parents;",
      "info" : "ReturnStatement[4399-4414]:ReturnStatement[4399-4414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4494-4697]:Block[4494-4697]"
    }, {
      "left" : "Element parent = el.parent();",
      "right" : "Element parent = el.parent();",
      "info" : "VariableDeclarationStatement[4504-4533]:VariableDeclarationStatement[4504-4533]"
    }, {
      "left" : "if (parent != null && !parent.tagName().equals(\"#root\"))",
      "right" : "if (parent != null && !parent.tagName().equals(\"#root\"))",
      "info" : "IfStatement[4542-4691]:IfStatement[4542-4691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4599-4691]:Block[4599-4691]"
    }, {
      "left" : "parents.add(parent);",
      "right" : "parents.add(parent);",
      "info" : "ExpressionStatement[4613-4633]:ExpressionStatement[4613-4633]"
    }, {
      "left" : "accumulateParents(parent, parents);",
      "right" : "accumulateParents(parent, parents);",
      "info" : "ExpressionStatement[4646-4681]:ExpressionStatement[4646-4681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5239-5284]:Block[5239-5284]"
    }, {
      "left" : "return children().get(index);",
      "right" : "return children().get(index);",
      "info" : "ReturnStatement[5249-5278]:ReturnStatement[5249-5278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5590-5943]:Block[5590-5943]"
    }, {
      "left" : "List<Element> elements = new ArrayList<Element>();",
      "right" : "List<Element> elements = new ArrayList<Element>();",
      "info" : "VariableDeclarationStatement[5712-5762]:VariableDeclarationStatement[5712-5762]"
    }, {
      "left" : "for (Node node : childNodes)",
      "right" : "for (Node node : childNodes)",
      "info" : "EnhancedForStatement[5771-5898]:EnhancedForStatement[5771-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5800-5898]:Block[5800-5898]"
    }, {
      "left" : "if (node instanceof Element)",
      "right" : "if (node instanceof Element)",
      "info" : "IfStatement[5814-5888]:IfStatement[5814-5888]"
    }, {
      "left" : "elements.add((Element) node);",
      "right" : "elements.add((Element) node);",
      "info" : "ExpressionStatement[5859-5888]:ExpressionStatement[5859-5888]"
    }, {
      "left" : "return new Elements(elements);",
      "right" : "return new Elements(elements);",
      "info" : "ReturnStatement[5907-5937]:ReturnStatement[5907-5937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6874-7138]:Block[6874-7138]"
    }, {
      "left" : "List<TextNode> textNodes = new ArrayList<TextNode>();",
      "right" : "List<TextNode> textNodes = new ArrayList<TextNode>();",
      "info" : "VariableDeclarationStatement[6884-6937]:VariableDeclarationStatement[6884-6937]"
    }, {
      "left" : "for (Node node : childNodes)",
      "right" : "for (Node node : childNodes)",
      "info" : "EnhancedForStatement[6946-7076]:EnhancedForStatement[6946-7076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6975-7076]:Block[6975-7076]"
    }, {
      "left" : "if (node instanceof TextNode)",
      "right" : "if (node instanceof TextNode)",
      "info" : "IfStatement[6989-7066]:IfStatement[6989-7066]"
    }, {
      "left" : "textNodes.add((TextNode) node);",
      "right" : "textNodes.add((TextNode) node);",
      "info" : "ExpressionStatement[7035-7066]:ExpressionStatement[7035-7066]"
    }, {
      "left" : "return Collections.unmodifiableList(textNodes);",
      "right" : "return Collections.unmodifiableList(textNodes);",
      "info" : "ReturnStatement[7085-7132]:ReturnStatement[7085-7132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7512-7776]:Block[7512-7776]"
    }, {
      "left" : "List<DataNode> dataNodes = new ArrayList<DataNode>();",
      "right" : "List<DataNode> dataNodes = new ArrayList<DataNode>();",
      "info" : "VariableDeclarationStatement[7522-7575]:VariableDeclarationStatement[7522-7575]"
    }, {
      "left" : "for (Node node : childNodes)",
      "right" : "for (Node node : childNodes)",
      "info" : "EnhancedForStatement[7584-7714]:EnhancedForStatement[7584-7714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7613-7714]:Block[7613-7714]"
    }, {
      "left" : "if (node instanceof DataNode)",
      "right" : "if (node instanceof DataNode)",
      "info" : "IfStatement[7627-7704]:IfStatement[7627-7704]"
    }, {
      "left" : "dataNodes.add((DataNode) node);",
      "right" : "dataNodes.add((DataNode) node);",
      "info" : "ExpressionStatement[7673-7704]:ExpressionStatement[7673-7704]"
    }, {
      "left" : "return Collections.unmodifiableList(dataNodes);",
      "right" : "return Collections.unmodifiableList(dataNodes);",
      "info" : "ReturnStatement[7723-7770]:ReturnStatement[7723-7770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8675-8730]:Block[8675-8730]"
    }, {
      "left" : "return Selector.select(cssQuery, this);",
      "right" : "return Selector.select(cssQuery, this);",
      "info" : "ReturnStatement[8685-8724]:ReturnStatement[8685-8724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8961-9059]:Block[8961-9059]"
    }, {
      "left" : "Validate.notNull(child);",
      "right" : "Validate.notNull(child);",
      "info" : "ExpressionStatement[8971-8995]:ExpressionStatement[8971-8995]"
    }, {
      "left" : "addChildren(child);",
      "right" : "addChildren(child);",
      "info" : "ExpressionStatement[9013-9032]:ExpressionStatement[9013-9032]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9041-9053]:ReturnStatement[9041-9053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9300-9401]:Block[9300-9401]"
    }, {
      "left" : "Validate.notNull(child);",
      "right" : "Validate.notNull(child);",
      "info" : "ExpressionStatement[9310-9334]:ExpressionStatement[9310-9334]"
    }, {
      "left" : "addChildren(0, child);",
      "right" : "addChildren(0, child);",
      "info" : "ExpressionStatement[9352-9374]:ExpressionStatement[9352-9374]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9383-9395]:ReturnStatement[9383-9395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9956-10446]:Block[9956-10446]"
    }, {
      "left" : "Validate.notNull(children, \"Children collection to be inserted must not be null.\");",
      "right" : "Validate.notNull(children, \"Children collection to be inserted must not be null.\");",
      "info" : "ExpressionStatement[9966-10049]:ExpressionStatement[9966-10049]"
    }, {
      "left" : "int currentSize = childNodeSize();",
      "right" : "int currentSize = childNodeSize();",
      "info" : "VariableDeclarationStatement[10058-10092]:VariableDeclarationStatement[10058-10092]"
    }, {
      "left" : "if (index < 0)",
      "right" : "if (index < 0)",
      "info" : "IfStatement[10101-10140]:IfStatement[10101-10140]"
    }, {
      "left" : "index += currentSize +1;",
      "right" : "index += currentSize +1;",
      "info" : "ExpressionStatement[10116-10140]:ExpressionStatement[10116-10140]"
    }, {
      "left" : "Validate.isTrue(index >= 0 && index <= currentSize, \"Insert position out of bounds.\");",
      "right" : "Validate.isTrue(index >= 0 && index <= currentSize, \"Insert position out of bounds.\");",
      "info" : "ExpressionStatement[10164-10250]:ExpressionStatement[10164-10250]"
    }, {
      "left" : "ArrayList<Node> nodes = new ArrayList<Node>(children);",
      "right" : "ArrayList<Node> nodes = new ArrayList<Node>(children);",
      "info" : "VariableDeclarationStatement[10260-10314]:VariableDeclarationStatement[10260-10314]"
    }, {
      "left" : "Node[] nodeArray = nodes.toArray(new Node[nodes.size()]);",
      "right" : "Node[] nodeArray = nodes.toArray(new Node[nodes.size()]);",
      "info" : "VariableDeclarationStatement[10323-10380]:VariableDeclarationStatement[10323-10380]"
    }, {
      "left" : "addChildren(index, nodeArray);",
      "right" : "addChildren(index, nodeArray);",
      "info" : "ExpressionStatement[10389-10419]:ExpressionStatement[10389-10419]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[10428-10440]:ReturnStatement[10428-10440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10812-10939]:Block[10812-10939]"
    }, {
      "left" : "Element child = new Element(Tag.valueOf(tagName), baseUri());",
      "right" : "Element child = new Element(Tag.valueOf(tagName), baseUri());",
      "info" : "VariableDeclarationStatement[10822-10883]:VariableDeclarationStatement[10822-10883]"
    }, {
      "left" : "appendChild(child);",
      "right" : "appendChild(child);",
      "info" : "ExpressionStatement[10892-10911]:ExpressionStatement[10892-10911]"
    }, {
      "left" : "return child;",
      "right" : "return child;",
      "info" : "ReturnStatement[10920-10933]:ReturnStatement[10920-10933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11308-11436]:Block[11308-11436]"
    }, {
      "left" : "Element child = new Element(Tag.valueOf(tagName), baseUri());",
      "right" : "Element child = new Element(Tag.valueOf(tagName), baseUri());",
      "info" : "VariableDeclarationStatement[11318-11379]:VariableDeclarationStatement[11318-11379]"
    }, {
      "left" : "prependChild(child);",
      "right" : "prependChild(child);",
      "info" : "ExpressionStatement[11388-11408]:ExpressionStatement[11388-11408]"
    }, {
      "left" : "return child;",
      "right" : "return child;",
      "info" : "ReturnStatement[11417-11430]:ReturnStatement[11417-11430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11639-11749]:Block[11639-11749]"
    }, {
      "left" : "TextNode node = new TextNode(text, baseUri());",
      "right" : "TextNode node = new TextNode(text, baseUri());",
      "info" : "VariableDeclarationStatement[11649-11695]:VariableDeclarationStatement[11649-11695]"
    }, {
      "left" : "appendChild(node);",
      "right" : "appendChild(node);",
      "info" : "ExpressionStatement[11704-11722]:ExpressionStatement[11704-11722]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[11731-11743]:ReturnStatement[11731-11743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11954-12065]:Block[11954-12065]"
    }, {
      "left" : "TextNode node = new TextNode(text, baseUri());",
      "right" : "TextNode node = new TextNode(text, baseUri());",
      "info" : "VariableDeclarationStatement[11964-12010]:VariableDeclarationStatement[11964-12010]"
    }, {
      "left" : "prependChild(node);",
      "right" : "prependChild(node);",
      "info" : "ExpressionStatement[12019-12038]:ExpressionStatement[12019-12038]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12047-12059]:ReturnStatement[12047-12059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12380-12573]:Block[12380-12573]"
    }, {
      "left" : "Validate.notNull(html);",
      "right" : "Validate.notNull(html);",
      "info" : "ExpressionStatement[12390-12413]:ExpressionStatement[12390-12413]"
    }, {
      "left" : "List<Node> nodes = Parser.parseFragment(html, this, baseUri());",
      "right" : "List<Node> nodes = Parser.parseFragment(html, this, baseUri());",
      "info" : "VariableDeclarationStatement[12423-12486]:VariableDeclarationStatement[12423-12486]"
    }, {
      "left" : "addChildren(nodes.toArray(new Node[nodes.size()]));",
      "right" : "addChildren(nodes.toArray(new Node[nodes.size()]));",
      "info" : "ExpressionStatement[12495-12546]:ExpressionStatement[12495-12546]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12555-12567]:ReturnStatement[12555-12567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12905-13109]:Block[12905-13109]"
    }, {
      "left" : "Validate.notNull(html);",
      "right" : "Validate.notNull(html);",
      "info" : "ExpressionStatement[12915-12938]:ExpressionStatement[12915-12938]"
    }, {
      "left" : "List<Node> nodes = Parser.parseFragment(html, this, baseUri());",
      "right" : "List<Node> nodes = Parser.parseFragment(html, this, baseUri());",
      "info" : "VariableDeclarationStatement[12956-13019]:VariableDeclarationStatement[12956-13019]"
    }, {
      "left" : "addChildren(0, nodes.toArray(new Node[nodes.size()]));",
      "right" : "addChildren(0, nodes.toArray(new Node[nodes.size()]));",
      "info" : "ExpressionStatement[13028-13082]:ExpressionStatement[13028-13082]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13091-13103]:ReturnStatement[13091-13103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13399-13451]:Block[13399-13451]"
    }, {
      "left" : "return (Element) super.before(html);",
      "right" : "return (Element) super.before(html);",
      "info" : "ReturnStatement[13409-13445]:ReturnStatement[13409-13445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13722-13774]:Block[13722-13774]"
    }, {
      "left" : "return (Element) super.before(node);",
      "right" : "return (Element) super.before(node);",
      "info" : "ReturnStatement[13732-13768]:ReturnStatement[13732-13768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14062-14113]:Block[14062-14113]"
    }, {
      "left" : "return (Element) super.after(html);",
      "right" : "return (Element) super.after(html);",
      "info" : "ReturnStatement[14072-14107]:ReturnStatement[14072-14107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14382-14433]:Block[14382-14433]"
    }, {
      "left" : "return (Element) super.after(node);",
      "right" : "return (Element) super.after(node);",
      "info" : "ReturnStatement[14392-14427]:ReturnStatement[14392-14427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14585-14641]:Block[14585-14641]"
    }, {
      "left" : "childNodes.clear();",
      "right" : "childNodes.clear();",
      "info" : "ExpressionStatement[14595-14614]:ExpressionStatement[14595-14614]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14623-14635]:ReturnStatement[14623-14635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14928-14978]:Block[14928-14978]"
    }, {
      "left" : "return (Element) super.wrap(html);",
      "right" : "return (Element) super.wrap(html);",
      "info" : "ReturnStatement[14938-14972]:ReturnStatement[14938-14972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15250-15565]:Block[15250-15565]"
    }, {
      "left" : "if (parentNode == null)",
      "right" : "if (parentNode == null)",
      "info" : "IfStatement[15260-15319]:IfStatement[15260-15319]"
    }, {
      "left" : "return new Elements(0);",
      "right" : "return new Elements(0);",
      "info" : "ReturnStatement[15296-15319]:ReturnStatement[15296-15319]"
    }, {
      "left" : "List<Element> elements = parent().children();",
      "right" : "List<Element> elements = parent().children();",
      "info" : "VariableDeclarationStatement[15329-15374]:VariableDeclarationStatement[15329-15374]"
    }, {
      "left" : "Elements siblings = new Elements(elements.size() - 1);",
      "right" : "Elements siblings = new Elements(elements.size() - 1);",
      "info" : "VariableDeclarationStatement[15383-15437]:VariableDeclarationStatement[15383-15437]"
    }, {
      "left" : "for (Element el: elements)\n            if (el != this)\n                siblings.add(el);",
      "right" : "for (Element el: elements)\n            if (el != this)\n                siblings.add(el);",
      "info" : "EnhancedForStatement[15446-15534]:EnhancedForStatement[15446-15534]"
    }, {
      "left" : "if (el != this)",
      "right" : "if (el != this)",
      "info" : "IfStatement[15485-15534]:IfStatement[15485-15534]"
    }, {
      "left" : "siblings.add(el);",
      "right" : "siblings.add(el);",
      "info" : "ExpressionStatement[15517-15534]:ExpressionStatement[15517-15534]"
    }, {
      "left" : "return siblings;",
      "right" : "return siblings;",
      "info" : "ReturnStatement[15543-15559]:ReturnStatement[15543-15559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16018-16329]:Block[16018-16329]"
    }, {
      "left" : "if (parentNode == null)",
      "right" : "if (parentNode == null)",
      "info" : "IfStatement[16028-16064]:IfStatement[16028-16064]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16052-16064]:ReturnStatement[16052-16064]"
    }, {
      "left" : "List<Element> siblings = parent().children();",
      "right" : "List<Element> siblings = parent().children();",
      "info" : "VariableDeclarationStatement[16073-16118]:VariableDeclarationStatement[16073-16118]"
    }, {
      "left" : "Integer index = indexInList(this, siblings);",
      "right" : "Integer index = indexInList(this, siblings);",
      "info" : "VariableDeclarationStatement[16127-16171]:VariableDeclarationStatement[16127-16171]"
    }, {
      "left" : "Validate.notNull(index);",
      "right" : "Validate.notNull(index);",
      "info" : "ExpressionStatement[16180-16204]:ExpressionStatement[16180-16204]"
    }, {
      "left" : "if (siblings.size() > index+1)",
      "right" : "if (siblings.size() > index+1)",
      "info" : "IfStatement[16213-16323]:IfStatement[16213-16323]"
    }, {
      "left" : "return siblings.get(index+1);",
      "right" : "return siblings.get(index+1);",
      "info" : "ReturnStatement[16256-16285]:ReturnStatement[16256-16285]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16311-16323]:ReturnStatement[16311-16323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16560-16855]:Block[16560-16855]"
    }, {
      "left" : "if (parentNode == null)",
      "right" : "if (parentNode == null)",
      "info" : "IfStatement[16570-16606]:IfStatement[16570-16606]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16594-16606]:ReturnStatement[16594-16606]"
    }, {
      "left" : "List<Element> siblings = parent().children();",
      "right" : "List<Element> siblings = parent().children();",
      "info" : "VariableDeclarationStatement[16615-16660]:VariableDeclarationStatement[16615-16660]"
    }, {
      "left" : "Integer index = indexInList(this, siblings);",
      "right" : "Integer index = indexInList(this, siblings);",
      "info" : "VariableDeclarationStatement[16669-16713]:VariableDeclarationStatement[16669-16713]"
    }, {
      "left" : "Validate.notNull(index);",
      "right" : "Validate.notNull(index);",
      "info" : "ExpressionStatement[16722-16746]:ExpressionStatement[16722-16746]"
    }, {
      "left" : "if (index > 0)",
      "right" : "if (index > 0)",
      "info" : "IfStatement[16755-16849]:IfStatement[16755-16849]"
    }, {
      "left" : "return siblings.get(index-1);",
      "right" : "return siblings.get(index-1);",
      "info" : "ReturnStatement[16782-16811]:ReturnStatement[16782-16811]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16837-16849]:ReturnStatement[16837-16849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17061-17236]:Block[17061-17236]"
    }, {
      "left" : "List<Element> siblings = parent().children();",
      "right" : "List<Element> siblings = parent().children();",
      "info" : "VariableDeclarationStatement[17124-17169]:VariableDeclarationStatement[17124-17169]"
    }, {
      "left" : "return siblings.size() > 1 ? siblings.get(0) : null;",
      "right" : "return siblings.size() > 1 ? siblings.get(0) : null;",
      "info" : "ReturnStatement[17178-17230]:ReturnStatement[17178-17230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17479-17580]:Block[17479-17580]"
    }, {
      "left" : "if (parent() == null)",
      "right" : "if (parent() == null)",
      "info" : "IfStatement[17488-17519]:IfStatement[17488-17519]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[17510-17519]:ReturnStatement[17510-17519]"
    }, {
      "left" : "return indexInList(this, parent().children());",
      "right" : "return indexInList(this, parent().children());",
      "info" : "ReturnStatement[17527-17573]:ReturnStatement[17527-17573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17781-17921]:Block[17781-17921]"
    }, {
      "left" : "List<Element> siblings = parent().children();",
      "right" : "List<Element> siblings = parent().children();",
      "info" : "VariableDeclarationStatement[17791-17836]:VariableDeclarationStatement[17791-17836]"
    }, {
      "left" : "return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;",
      "right" : "return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;",
      "info" : "ReturnStatement[17845-17915]:ReturnStatement[17845-17915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18020-18288]:Block[18020-18288]"
    }, {
      "left" : "Validate.notNull(search);",
      "right" : "Validate.notNull(search);",
      "info" : "ExpressionStatement[18030-18055]:ExpressionStatement[18030-18055]"
    }, {
      "left" : "Validate.notNull(elements);",
      "right" : "Validate.notNull(elements);",
      "info" : "ExpressionStatement[18064-18091]:ExpressionStatement[18064-18091]"
    }, {
      "left" : "for (int i = 0; i < elements.size(); i++)",
      "right" : "for (int i = 0; i < elements.size(); i++)",
      "info" : "ForStatement[18101-18261]:ForStatement[18101-18261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18143-18261]:Block[18143-18261]"
    }, {
      "left" : "E element = elements.get(i);",
      "right" : "E element = elements.get(i);",
      "info" : "VariableDeclarationStatement[18157-18185]:VariableDeclarationStatement[18157-18185]"
    }, {
      "left" : "if (element.equals(search))",
      "right" : "if (element.equals(search))",
      "info" : "IfStatement[18198-18251]:IfStatement[18198-18251]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[18242-18251]:ReturnStatement[18242-18251]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[18270-18282]:ReturnStatement[18270-18282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18672-18832]:Block[18672-18832]"
    }, {
      "left" : "Validate.notEmpty(tagName);",
      "right" : "Validate.notEmpty(tagName);",
      "info" : "ExpressionStatement[18682-18709]:ExpressionStatement[18682-18709]"
    }, {
      "left" : "tagName = tagName.toLowerCase().trim();",
      "right" : "tagName = tagName.toLowerCase().trim();",
      "info" : "ExpressionStatement[18718-18757]:ExpressionStatement[18718-18757]"
    }, {
      "left" : "return Collector.collect(new Evaluator.Tag(tagName), this);",
      "right" : "return Collector.collect(new Evaluator.Tag(tagName), this);",
      "info" : "ReturnStatement[18767-18826]:ReturnStatement[18767-18826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19391-19620]:Block[19391-19620]"
    }, {
      "left" : "Validate.notEmpty(id);",
      "right" : "Validate.notEmpty(id);",
      "info" : "ExpressionStatement[19401-19423]:ExpressionStatement[19401-19423]"
    }, {
      "left" : "Elements elements = Collector.collect(new Evaluator.Id(id), this);",
      "right" : "Elements elements = Collector.collect(new Evaluator.Id(id), this);",
      "info" : "VariableDeclarationStatement[19441-19507]:VariableDeclarationStatement[19441-19507]"
    }, {
      "left" : "if (elements.size() > 0)",
      "right" : "if (elements.size() > 0)",
      "info" : "IfStatement[19516-19614]:IfStatement[19516-19614]"
    }, {
      "left" : "return elements.get(0);",
      "right" : "return elements.get(0);",
      "info" : "ReturnStatement[19553-19576]:ReturnStatement[19553-19576]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19602-19614]:ReturnStatement[19602-19614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20194-20312]:Block[20194-20312]"
    }, {
      "left" : "Validate.notEmpty(className);",
      "right" : "Validate.notEmpty(className);",
      "info" : "ExpressionStatement[20204-20233]:ExpressionStatement[20204-20233]"
    }, {
      "left" : "return Collector.collect(new Evaluator.Class(className), this);",
      "right" : "return Collector.collect(new Evaluator.Class(className), this);",
      "info" : "ReturnStatement[20243-20306]:ReturnStatement[20243-20306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20587-20737]:Block[20587-20737]"
    }, {
      "left" : "Validate.notEmpty(key);",
      "right" : "Validate.notEmpty(key);",
      "info" : "ExpressionStatement[20597-20620]:ExpressionStatement[20597-20620]"
    }, {
      "left" : "key = key.trim().toLowerCase();",
      "right" : "key = key.trim().toLowerCase();",
      "info" : "ExpressionStatement[20629-20660]:ExpressionStatement[20629-20660]"
    }, {
      "left" : "return Collector.collect(new Evaluator.Attribute(key), this);",
      "right" : "return Collector.collect(new Evaluator.Attribute(key), this);",
      "info" : "ReturnStatement[20670-20731]:ReturnStatement[20670-20731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21146-21328]:Block[21146-21328]"
    }, {
      "left" : "Validate.notEmpty(keyPrefix);",
      "right" : "Validate.notEmpty(keyPrefix);",
      "info" : "ExpressionStatement[21156-21185]:ExpressionStatement[21156-21185]"
    }, {
      "left" : "keyPrefix = keyPrefix.trim().toLowerCase();",
      "right" : "keyPrefix = keyPrefix.trim().toLowerCase();",
      "info" : "ExpressionStatement[21194-21237]:ExpressionStatement[21194-21237]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this);",
      "info" : "ReturnStatement[21247-21322]:ReturnStatement[21247-21322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21678-21771]:Block[21678-21771]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);",
      "info" : "ReturnStatement[21688-21765]:ReturnStatement[21688-21765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22133-22229]:Block[22133-22229]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);",
      "info" : "ReturnStatement[22143-22223]:ReturnStatement[22143-22223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22606-22713]:Block[22606-22713]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);",
      "info" : "ReturnStatement[22616-22707]:ReturnStatement[22616-22707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23086-23191]:Block[23086-23191]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);",
      "info" : "ReturnStatement[23096-23185]:ReturnStatement[23096-23185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23559-23662]:Block[23559-23662]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);",
      "info" : "ReturnStatement[23569-23656]:ReturnStatement[23569-23656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24065-24177]:Block[24065-24177]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this);",
      "info" : "ReturnStatement[24075-24162]:ReturnStatement[24075-24162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24735-25033]:Block[24735-25033]"
    }, {
      "left" : "Pattern pattern;",
      "right" : "Pattern pattern;",
      "info" : "VariableDeclarationStatement[24745-24761]:VariableDeclarationStatement[24745-24761]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[24770-24961]:TryStatement[24770-24961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24774-24831]:Block[24774-24831]"
    }, {
      "left" : "pattern = Pattern.compile(regex);",
      "right" : "pattern = Pattern.compile(regex);",
      "info" : "ExpressionStatement[24788-24821]:ExpressionStatement[24788-24821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24865-24961]:Block[24865-24961]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);",
      "right" : "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);",
      "info" : "ThrowStatement[24879-24951]:ThrowStatement[24879-24951]"
    }, {
      "left" : "return getElementsByAttributeValueMatching(key, pattern);",
      "right" : "return getElementsByAttributeValueMatching(key, pattern);",
      "info" : "ReturnStatement[24970-25027]:ReturnStatement[24970-25027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25261-25344]:Block[25261-25344]"
    }, {
      "left" : "return Collector.collect(new Evaluator.IndexLessThan(index), this);",
      "right" : "return Collector.collect(new Evaluator.IndexLessThan(index), this);",
      "info" : "ReturnStatement[25271-25338]:ReturnStatement[25271-25338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25581-25667]:Block[25581-25667]"
    }, {
      "left" : "return Collector.collect(new Evaluator.IndexGreaterThan(index), this);",
      "right" : "return Collector.collect(new Evaluator.IndexGreaterThan(index), this);",
      "info" : "ReturnStatement[25591-25661]:ReturnStatement[25591-25661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25891-25972]:Block[25891-25972]"
    }, {
      "left" : "return Collector.collect(new Evaluator.IndexEquals(index), this);",
      "right" : "return Collector.collect(new Evaluator.IndexEquals(index), this);",
      "info" : "ReturnStatement[25901-25966]:ReturnStatement[25901-25966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26382-26469]:Block[26382-26469]"
    }, {
      "left" : "return Collector.collect(new Evaluator.ContainsText(searchText), this);",
      "right" : "return Collector.collect(new Evaluator.ContainsText(searchText), this);",
      "info" : "ReturnStatement[26392-26463]:ReturnStatement[26392-26463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26900-26990]:Block[26900-26990]"
    }, {
      "left" : "return Collector.collect(new Evaluator.ContainsOwnText(searchText), this);",
      "right" : "return Collector.collect(new Evaluator.ContainsOwnText(searchText), this);",
      "info" : "ReturnStatement[26910-26984]:ReturnStatement[26910-26984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27302-27381]:Block[27302-27381]"
    }, {
      "left" : "return Collector.collect(new Evaluator.Matches(pattern), this);",
      "right" : "return Collector.collect(new Evaluator.Matches(pattern), this);",
      "info" : "ReturnStatement[27312-27375]:ReturnStatement[27312-27375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27857-28138]:Block[27857-28138]"
    }, {
      "left" : "Pattern pattern;",
      "right" : "Pattern pattern;",
      "info" : "VariableDeclarationStatement[27867-27883]:VariableDeclarationStatement[27867-27883]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27892-28083]:TryStatement[27892-28083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27896-27953]:Block[27896-27953]"
    }, {
      "left" : "pattern = Pattern.compile(regex);",
      "right" : "pattern = Pattern.compile(regex);",
      "info" : "ExpressionStatement[27910-27943]:ExpressionStatement[27910-27943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27987-28083]:Block[27987-28083]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);",
      "right" : "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);",
      "info" : "ThrowStatement[28001-28073]:ThrowStatement[28001-28073]"
    }, {
      "left" : "return getElementsMatchingText(pattern);",
      "right" : "return getElementsMatchingText(pattern);",
      "info" : "ReturnStatement[28092-28132]:ReturnStatement[28092-28132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28460-28542]:Block[28460-28542]"
    }, {
      "left" : "return Collector.collect(new Evaluator.MatchesOwn(pattern), this);",
      "right" : "return Collector.collect(new Evaluator.MatchesOwn(pattern), this);",
      "info" : "ReturnStatement[28470-28536]:ReturnStatement[28470-28536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29024-29308]:Block[29024-29308]"
    }, {
      "left" : "Pattern pattern;",
      "right" : "Pattern pattern;",
      "info" : "VariableDeclarationStatement[29034-29050]:VariableDeclarationStatement[29034-29050]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29059-29250]:TryStatement[29059-29250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29063-29120]:Block[29063-29120]"
    }, {
      "left" : "pattern = Pattern.compile(regex);",
      "right" : "pattern = Pattern.compile(regex);",
      "info" : "ExpressionStatement[29077-29110]:ExpressionStatement[29077-29110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29154-29250]:Block[29154-29250]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);",
      "right" : "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);",
      "info" : "ThrowStatement[29168-29240]:ThrowStatement[29168-29240]"
    }, {
      "left" : "return getElementsMatchingOwnText(pattern);",
      "right" : "return getElementsMatchingOwnText(pattern);",
      "info" : "ReturnStatement[29259-29302]:ReturnStatement[29259-29302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29491-29567]:Block[29491-29567]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AllElements(), this);",
      "right" : "return Collector.collect(new Evaluator.AllElements(), this);",
      "info" : "ReturnStatement[29501-29561]:ReturnStatement[29501-29561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29923-30762]:Block[29923-30762]"
    }, {
      "left" : "final StringBuilder accum = new StringBuilder();",
      "right" : "final StringBuilder accum = new StringBuilder();",
      "info" : "VariableDeclarationStatement[29933-29981]:VariableDeclarationStatement[29933-29981]"
    }, {
      "left" : "new NodeTraversor(new NodeVisitor() {\n            public void head(Node node, int depth) {\n                if (node instanceof TextNode) {\n                    TextNode textNode = (TextNode) node;\n                    appendNormalisedText(accum, textNode);\n                } else if (node instanceof Element) {\n                    Element element = (Element) node;\n                    if (accum.length() > 0 &&\n                        (element.isBlock() || element.tag.getName().equals(\"br\")) &&\n                        !TextNode.lastCharIsWhitespace(accum))\n                        accum.append(\" \");\n                }\n            }\n\n            public void tail(Node node, int depth) {\n            }\n        }).traverse(this);",
      "right" : "new NodeTraversor(new NodeVisitor() {\n            public void head(Node node, int depth) {\n                if (node instanceof TextNode) {\n                    TextNode textNode = (TextNode) node;\n                    appendNormalisedText(accum, textNode);\n                } else if (node instanceof Element) {\n                    Element element = (Element) node;\n                    if (accum.length() > 0 &&\n                        (element.isBlock() || element.tag.getName().equals(\"br\")) &&\n                        !TextNode.lastCharIsWhitespace(accum))\n                        accum.append(\" \");\n                }\n            }\n\n            public void tail(Node node, int depth) {\n            }\n        }).traverse(this);",
      "info" : "ExpressionStatement[29990-30716]:ExpressionStatement[29990-30716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30079-30621]:Block[30079-30621]"
    }, {
      "left" : "if (node instanceof TextNode)",
      "right" : "if (node instanceof TextNode)",
      "info" : "IfStatement[30097-30607]:IfStatement[30097-30607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30127-30262]:Block[30127-30262]"
    }, {
      "left" : "TextNode textNode = (TextNode) node;",
      "right" : "TextNode textNode = (TextNode) node;",
      "info" : "VariableDeclarationStatement[30149-30185]:VariableDeclarationStatement[30149-30185]"
    }, {
      "left" : "appendNormalisedText(accum, textNode);",
      "right" : "appendNormalisedText(accum, textNode);",
      "info" : "ExpressionStatement[30206-30244]:ExpressionStatement[30206-30244]"
    }, {
      "left" : "if (node instanceof Element)",
      "right" : "if (node instanceof Element)",
      "info" : "IfStatement[30268-30607]:IfStatement[30268-30607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30297-30607]:Block[30297-30607]"
    }, {
      "left" : "Element element = (Element) node;",
      "right" : "Element element = (Element) node;",
      "info" : "VariableDeclarationStatement[30319-30352]:VariableDeclarationStatement[30319-30352]"
    }, {
      "left" : "if (accum.length() > 0 &&\n                        (element.isBlock() || element.tag.getName().equals(\"br\")) &&\n                        !TextNode.lastCharIsWhitespace(accum))",
      "right" : "if (accum.length() > 0 &&\n                        (element.isBlock() || element.tag.getName().equals(\"br\")) &&\n                        !TextNode.lastCharIsWhitespace(accum))",
      "info" : "IfStatement[30373-30589]:IfStatement[30373-30589]"
    }, {
      "left" : "accum.append(\" \");",
      "right" : "accum.append(\" \");",
      "info" : "ExpressionStatement[30571-30589]:ExpressionStatement[30571-30589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30674-30689]:Block[30674-30689]"
    }, {
      "left" : "return accum.toString().trim();",
      "right" : "return accum.toString().trim();",
      "info" : "ReturnStatement[30725-30756]:ReturnStatement[30725-30756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31339-31452]:Block[31339-31452]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[31349-31388]:VariableDeclarationStatement[31349-31388]"
    }, {
      "left" : "ownText(sb);",
      "right" : "ownText(sb);",
      "info" : "ExpressionStatement[31397-31409]:ExpressionStatement[31397-31409]"
    }, {
      "left" : "return sb.toString().trim();",
      "right" : "return sb.toString().trim();",
      "info" : "ReturnStatement[31418-31446]:ReturnStatement[31418-31446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31500-31838]:Block[31500-31838]"
    }, {
      "left" : "for (Node child : childNodes)",
      "right" : "for (Node child : childNodes)",
      "info" : "EnhancedForStatement[31510-31832]:EnhancedForStatement[31510-31832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31540-31832]:Block[31540-31832]"
    }, {
      "left" : "if (child instanceof TextNode)",
      "right" : "if (child instanceof TextNode)",
      "info" : "IfStatement[31554-31822]:IfStatement[31554-31822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31585-31709]:Block[31585-31709]"
    }, {
      "left" : "TextNode textNode = (TextNode) child;",
      "right" : "TextNode textNode = (TextNode) child;",
      "info" : "VariableDeclarationStatement[31603-31640]:VariableDeclarationStatement[31603-31640]"
    }, {
      "left" : "appendNormalisedText(accum, textNode);",
      "right" : "appendNormalisedText(accum, textNode);",
      "info" : "ExpressionStatement[31657-31695]:ExpressionStatement[31657-31695]"
    }, {
      "left" : "if (child instanceof Element)",
      "right" : "if (child instanceof Element)",
      "info" : "IfStatement[31715-31822]:IfStatement[31715-31822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31745-31822]:Block[31745-31822]"
    }, {
      "left" : "appendWhitespaceIfBr((Element) child, accum);",
      "right" : "appendWhitespaceIfBr((Element) child, accum);",
      "info" : "ExpressionStatement[31763-31808]:ExpressionStatement[31763-31808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31925-32180]:Block[31925-32180]"
    }, {
      "left" : "String text = textNode.getWholeText();",
      "right" : "String text = textNode.getWholeText();",
      "info" : "VariableDeclarationStatement[31935-31973]:VariableDeclarationStatement[31935-31973]"
    }, {
      "left" : "if (preserveWhitespace(textNode.parentNode))",
      "right" : "if (preserveWhitespace(textNode.parentNode))",
      "info" : "IfStatement[31983-32174]:IfStatement[31983-32174]"
    }, {
      "left" : "accum.append(text);",
      "right" : "accum.append(text);",
      "info" : "ExpressionStatement[32040-32059]:ExpressionStatement[32040-32059]"
    }, {
      "left" : "StringUtil.appendNormalisedWhitespace(accum, text, TextNode.lastCharIsWhitespace(accum));",
      "right" : "StringUtil.appendNormalisedWhitespace(accum, text, TextNode.lastCharIsWhitespace(accum));",
      "info" : "ExpressionStatement[32085-32174]:ExpressionStatement[32085-32174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32265-32392]:Block[32265-32392]"
    }, {
      "left" : "if (element.tag.getName().equals(\"br\") && !TextNode.lastCharIsWhitespace(accum))",
      "right" : "if (element.tag.getName().equals(\"br\") && !TextNode.lastCharIsWhitespace(accum))",
      "info" : "IfStatement[32275-32386]:IfStatement[32275-32386]"
    }, {
      "left" : "accum.append(\" \");",
      "right" : "accum.append(\" \");",
      "info" : "ExpressionStatement[32368-32386]:ExpressionStatement[32368-32386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32443-32828]:Block[32443-32828]"
    }, {
      "left" : "if (node != null && node instanceof Element)",
      "right" : "if (node != null && node instanceof Element)",
      "info" : "IfStatement[32556-32800]:IfStatement[32556-32800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32601-32800]:Block[32601-32800]"
    }, {
      "left" : "Element element = (Element) node;",
      "right" : "Element element = (Element) node;",
      "info" : "VariableDeclarationStatement[32615-32648]:VariableDeclarationStatement[32615-32648]"
    }, {
      "left" : "return element.tag.preserveWhitespace() ||\n                element.parent() != null && element.parent().tag.preserveWhitespace();",
      "right" : "return element.tag.preserveWhitespace() ||\n                element.parent() != null && element.parent().tag.preserveWhitespace();",
      "info" : "ReturnStatement[32661-32790]:ReturnStatement[32661-32790]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32809-32822]:ReturnStatement[32809-32822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33039-33206]:Block[33039-33206]"
    }, {
      "left" : "Validate.notNull(text);",
      "right" : "Validate.notNull(text);",
      "info" : "ExpressionStatement[33049-33072]:ExpressionStatement[33049-33072]"
    }, {
      "left" : "empty();",
      "right" : "empty();",
      "info" : "ExpressionStatement[33082-33090]:ExpressionStatement[33082-33090]"
    }, {
      "left" : "TextNode textNode = new TextNode(text, baseUri);",
      "right" : "TextNode textNode = new TextNode(text, baseUri);",
      "info" : "VariableDeclarationStatement[33099-33147]:VariableDeclarationStatement[33099-33147]"
    }, {
      "left" : "appendChild(textNode);",
      "right" : "appendChild(textNode);",
      "info" : "ExpressionStatement[33156-33178]:ExpressionStatement[33156-33178]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[33188-33200]:ReturnStatement[33188-33200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33388-33817]:Block[33388-33817]"
    }, {
      "left" : "for (Node child: childNodes)",
      "right" : "for (Node child: childNodes)",
      "info" : "EnhancedForStatement[33398-33789]:EnhancedForStatement[33398-33789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33427-33789]:Block[33427-33789]"
    }, {
      "left" : "if (child instanceof TextNode)",
      "right" : "if (child instanceof TextNode)",
      "info" : "IfStatement[33441-33779]:IfStatement[33441-33779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33472-33615]:Block[33472-33615]"
    }, {
      "left" : "TextNode textNode = (TextNode) child;",
      "right" : "TextNode textNode = (TextNode) child;",
      "info" : "VariableDeclarationStatement[33490-33527]:VariableDeclarationStatement[33490-33527]"
    }, {
      "left" : "if (!textNode.isBlank())",
      "right" : "if (!textNode.isBlank())",
      "info" : "IfStatement[33544-33601]:IfStatement[33544-33601]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33589-33601]:ReturnStatement[33589-33601]"
    }, {
      "left" : "if (child instanceof Element)",
      "right" : "if (child instanceof Element)",
      "info" : "IfStatement[33621-33779]:IfStatement[33621-33779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33651-33779]:Block[33651-33779]"
    }, {
      "left" : "Element el = (Element) child;",
      "right" : "Element el = (Element) child;",
      "info" : "VariableDeclarationStatement[33669-33698]:VariableDeclarationStatement[33669-33698]"
    }, {
      "left" : "if (el.hasText())",
      "right" : "if (el.hasText())",
      "info" : "IfStatement[33715-33765]:IfStatement[33715-33765]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33753-33765]:ReturnStatement[33753-33765]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33798-33811]:ReturnStatement[33798-33811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34036-34544]:Block[34036-34544]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[34046-34085]:VariableDeclarationStatement[34046-34085]"
    }, {
      "left" : "for (Node childNode : childNodes)",
      "right" : "for (Node childNode : childNodes)",
      "info" : "EnhancedForStatement[34095-34508]:EnhancedForStatement[34095-34508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34129-34508]:Block[34129-34508]"
    }, {
      "left" : "if (childNode instanceof DataNode)",
      "right" : "if (childNode instanceof DataNode)",
      "info" : "IfStatement[34143-34498]:IfStatement[34143-34498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34178-34295]:Block[34178-34295]"
    }, {
      "left" : "DataNode data = (DataNode) childNode;",
      "right" : "DataNode data = (DataNode) childNode;",
      "info" : "VariableDeclarationStatement[34196-34233]:VariableDeclarationStatement[34196-34233]"
    }, {
      "left" : "sb.append(data.getWholeData());",
      "right" : "sb.append(data.getWholeData());",
      "info" : "ExpressionStatement[34250-34281]:ExpressionStatement[34250-34281]"
    }, {
      "left" : "if (childNode instanceof Element)",
      "right" : "if (childNode instanceof Element)",
      "info" : "IfStatement[34301-34498]:IfStatement[34301-34498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34335-34498]:Block[34335-34498]"
    }, {
      "left" : "Element element = (Element) childNode;",
      "right" : "Element element = (Element) childNode;",
      "info" : "VariableDeclarationStatement[34353-34391]:VariableDeclarationStatement[34353-34391]"
    }, {
      "left" : "String elementData = element.data();",
      "right" : "String elementData = element.data();",
      "info" : "VariableDeclarationStatement[34408-34444]:VariableDeclarationStatement[34408-34444]"
    }, {
      "left" : "sb.append(elementData);",
      "right" : "sb.append(elementData);",
      "info" : "ExpressionStatement[34461-34484]:ExpressionStatement[34461-34484]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[34517-34538]:ReturnStatement[34517-34538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34908-34945]:Block[34908-34945]"
    }, {
      "left" : "return attr(\"class\");",
      "right" : "return attr(\"class\");",
      "info" : "ReturnStatement[34918-34939]:ReturnStatement[34918-34939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35386-35594]:Block[35386-35594]"
    }, {
      "left" : "if (classNames == null)",
      "right" : "if (classNames == null)",
      "info" : "IfStatement[35396-35561]:IfStatement[35396-35561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35420-35561]:Block[35420-35561]"
    }, {
      "left" : "String[] names = className().split(\"\\\\s+\");",
      "right" : "String[] names = className().split(\"\\\\s+\");",
      "info" : "VariableDeclarationStatement[35434-35477]:VariableDeclarationStatement[35434-35477]"
    }, {
      "left" : "classNames = new LinkedHashSet<String>(Arrays.asList(names));",
      "right" : "classNames = new LinkedHashSet<String>(Arrays.asList(names));",
      "info" : "ExpressionStatement[35490-35551]:ExpressionStatement[35490-35551]"
    }, {
      "left" : "return classNames;",
      "right" : "return classNames;",
      "info" : "ReturnStatement[35570-35588]:ReturnStatement[35570-35588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35820-35953]:Block[35820-35953]"
    }, {
      "left" : "Validate.notNull(classNames);",
      "right" : "Validate.notNull(classNames);",
      "info" : "ExpressionStatement[35830-35859]:ExpressionStatement[35830-35859]"
    }, {
      "left" : "attributes.put(\"class\", StringUtil.join(classNames, \" \"));",
      "right" : "attributes.put(\"class\", StringUtil.join(classNames, \" \"));",
      "info" : "ExpressionStatement[35868-35926]:ExpressionStatement[35868-35926]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[35935-35947]:ReturnStatement[35935-35947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36173-36379]:Block[36173-36379]"
    }, {
      "left" : "Set<String> classNames = classNames();",
      "right" : "Set<String> classNames = classNames();",
      "info" : "VariableDeclarationStatement[36183-36221]:VariableDeclarationStatement[36183-36221]"
    }, {
      "left" : "for (String name : classNames)",
      "right" : "for (String name : classNames)",
      "info" : "EnhancedForStatement[36230-36351]:EnhancedForStatement[36230-36351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36261-36351]:Block[36261-36351]"
    }, {
      "left" : "if (className.equalsIgnoreCase(name))",
      "right" : "if (className.equalsIgnoreCase(name))",
      "info" : "IfStatement[36275-36341]:IfStatement[36275-36341]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36329-36341]:ReturnStatement[36329-36341]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36360-36373]:ReturnStatement[36360-36373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36574-36746]:Block[36574-36746]"
    }, {
      "left" : "Validate.notNull(className);",
      "right" : "Validate.notNull(className);",
      "info" : "ExpressionStatement[36584-36612]:ExpressionStatement[36584-36612]"
    }, {
      "left" : "Set<String> classes = classNames();",
      "right" : "Set<String> classes = classNames();",
      "info" : "VariableDeclarationStatement[36622-36657]:VariableDeclarationStatement[36622-36657]"
    }, {
      "left" : "classes.add(className);",
      "right" : "classes.add(className);",
      "info" : "ExpressionStatement[36666-36689]:ExpressionStatement[36666-36689]"
    }, {
      "left" : "classNames(classes);",
      "right" : "classNames(classes);",
      "info" : "ExpressionStatement[36698-36718]:ExpressionStatement[36698-36718]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[36728-36740]:ReturnStatement[36728-36740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36952-37127]:Block[36952-37127]"
    }, {
      "left" : "Validate.notNull(className);",
      "right" : "Validate.notNull(className);",
      "info" : "ExpressionStatement[36962-36990]:ExpressionStatement[36962-36990]"
    }, {
      "left" : "Set<String> classes = classNames();",
      "right" : "Set<String> classes = classNames();",
      "info" : "VariableDeclarationStatement[37000-37035]:VariableDeclarationStatement[37000-37035]"
    }, {
      "left" : "classes.remove(className);",
      "right" : "classes.remove(className);",
      "info" : "ExpressionStatement[37044-37070]:ExpressionStatement[37044-37070]"
    }, {
      "left" : "classNames(classes);",
      "right" : "classNames(classes);",
      "info" : "ExpressionStatement[37079-37099]:ExpressionStatement[37079-37099]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[37109-37121]:ReturnStatement[37109-37121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37372-37641]:Block[37372-37641]"
    }, {
      "left" : "Validate.notNull(className);",
      "right" : "Validate.notNull(className);",
      "info" : "ExpressionStatement[37382-37410]:ExpressionStatement[37382-37410]"
    }, {
      "left" : "Set<String> classes = classNames();",
      "right" : "Set<String> classes = classNames();",
      "info" : "VariableDeclarationStatement[37420-37455]:VariableDeclarationStatement[37420-37455]"
    }, {
      "left" : "if (classes.contains(className))",
      "right" : "if (classes.contains(className))",
      "info" : "IfStatement[37464-37584]:IfStatement[37464-37584]"
    }, {
      "left" : "classes.remove(className);",
      "right" : "classes.remove(className);",
      "info" : "ExpressionStatement[37509-37535]:ExpressionStatement[37509-37535]"
    }, {
      "left" : "classes.add(className);",
      "right" : "classes.add(className);",
      "info" : "ExpressionStatement[37561-37584]:ExpressionStatement[37561-37584]"
    }, {
      "left" : "classNames(classes);",
      "right" : "classNames(classes);",
      "info" : "ExpressionStatement[37593-37613]:ExpressionStatement[37593-37613]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[37623-37635]:ReturnStatement[37623-37635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37824-37947]:Block[37824-37947]"
    }, {
      "left" : "if (tagName().equals(\"textarea\"))",
      "right" : "if (tagName().equals(\"textarea\"))",
      "info" : "IfStatement[37834-37941]:IfStatement[37834-37941]"
    }, {
      "left" : "return text();",
      "right" : "return text();",
      "info" : "ReturnStatement[37880-37894]:ReturnStatement[37880-37894]"
    }, {
      "left" : "return attr(\"value\");",
      "right" : "return attr(\"value\");",
      "info" : "ReturnStatement[37920-37941]:ReturnStatement[37920-37941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38145-38287]:Block[38145-38287]"
    }, {
      "left" : "if (tagName().equals(\"textarea\"))",
      "right" : "if (tagName().equals(\"textarea\"))",
      "info" : "IfStatement[38155-38260]:IfStatement[38155-38260]"
    }, {
      "left" : "text(value);",
      "right" : "text(value);",
      "info" : "ExpressionStatement[38201-38213]:ExpressionStatement[38201-38213]"
    }, {
      "left" : "attr(\"value\", value);",
      "right" : "attr(\"value\", value);",
      "info" : "ExpressionStatement[38239-38260]:ExpressionStatement[38239-38260]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[38269-38281]:ReturnStatement[38269-38281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38373-38822]:Block[38373-38822]"
    }, {
      "left" : "if (accum.length() > 0 && out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline()))",
      "right" : "if (accum.length() > 0 && out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline()))",
      "info" : "IfStatement[38383-38565]:IfStatement[38383-38565]"
    }, {
      "left" : "indent(accum, depth, out);",
      "right" : "indent(accum, depth, out);",
      "info" : "ExpressionStatement[38539-38565]:ExpressionStatement[38539-38565]"
    }, {
      "left" : "accum\n                .append(\"<\")\n                .append(tagName());",
      "right" : "accum\n                .append(\"<\")\n                .append(tagName());",
      "info" : "ExpressionStatement[38574-38644]:ExpressionStatement[38574-38644]"
    }, {
      "left" : "attributes.html(accum, out);",
      "right" : "attributes.html(accum, out);",
      "info" : "ExpressionStatement[38653-38681]:ExpressionStatement[38653-38681]"
    }, {
      "left" : "if (childNodes.isEmpty() && tag.isSelfClosing())",
      "right" : "if (childNodes.isEmpty() && tag.isSelfClosing())",
      "info" : "IfStatement[38691-38816]:IfStatement[38691-38816]"
    }, {
      "left" : "accum.append(\" />\");",
      "right" : "accum.append(\" />\");",
      "info" : "ExpressionStatement[38752-38772]:ExpressionStatement[38752-38772]"
    }, {
      "left" : "accum.append(\">\");",
      "right" : "accum.append(\">\");",
      "info" : "ExpressionStatement[38798-38816]:ExpressionStatement[38798-38816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38908-39327]:Block[38908-39327]"
    }, {
      "left" : "if (!(childNodes.isEmpty() && tag.isSelfClosing()))",
      "right" : "if (!(childNodes.isEmpty() && tag.isSelfClosing()))",
      "info" : "IfStatement[38918-39321]:IfStatement[38918-39321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38970-39321]:Block[38970-39321]"
    }, {
      "left" : "if (out.prettyPrint() && (!childNodes.isEmpty() && (\n                    tag.formatAsBlock() || (out.outline() && (childNodes.size()>1 || (childNodes.size()==1 && !(childNodes.get(0) instanceof TextNode))))\n            )))",
      "right" : "if (out.prettyPrint() && (!childNodes.isEmpty() && (\n                    tag.formatAsBlock() || (out.outline() && (childNodes.size()>1 || (childNodes.size()==1 && !(childNodes.get(0) instanceof TextNode))))\n            )))",
      "info" : "IfStatement[38984-39249]:IfStatement[38984-39249]"
    }, {
      "left" : "indent(accum, depth, out);",
      "right" : "indent(accum, depth, out);",
      "info" : "ExpressionStatement[39223-39249]:ExpressionStatement[39223-39249]"
    }, {
      "left" : "accum.append(\"</\").append(tagName()).append(\">\");",
      "right" : "accum.append(\"</\").append(tagName()).append(\">\");",
      "info" : "ExpressionStatement[39262-39311]:ExpressionStatement[39262-39311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39638-39757]:Block[39638-39812]"
    }, {
      "left" : "StringBuilder accum = new StringBuilder();",
      "right" : "StringBuilder accum = new StringBuilder();",
      "info" : "VariableDeclarationStatement[39648-39690]:VariableDeclarationStatement[39648-39690]"
    }, {
      "left" : "html(accum);",
      "right" : "html(accum);",
      "info" : "ExpressionStatement[39699-39711]:ExpressionStatement[39699-39711]"
    }, {
      "left" : "return accum.toString().trim();",
      "right" : "return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString();",
      "info" : "ReturnStatement[39720-39751]:ReturnStatement[39720-39806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39802-39881]:Block[39857-39936]"
    }, {
      "left" : "for (Node node : childNodes)\n            node.outerHtml(accum);",
      "right" : "for (Node node : childNodes)\n            node.outerHtml(accum);",
      "info" : "EnhancedForStatement[39812-39875]:EnhancedForStatement[39867-39930]"
    }, {
      "left" : "node.outerHtml(accum);",
      "right" : "node.outerHtml(accum);",
      "info" : "ExpressionStatement[39853-39875]:ExpressionStatement[39908-39930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40125-40192]:Block[40180-40247]"
    }, {
      "left" : "empty();",
      "right" : "empty();",
      "info" : "ExpressionStatement[40135-40143]:ExpressionStatement[40190-40198]"
    }, {
      "left" : "append(html);",
      "right" : "append(html);",
      "info" : "ExpressionStatement[40152-40165]:ExpressionStatement[40207-40220]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[40174-40186]:ReturnStatement[40229-40241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40223-40258]:Block[40278-40313]"
    }, {
      "left" : "return outerHtml();",
      "right" : "return outerHtml();",
      "info" : "ReturnStatement[40233-40252]:ReturnStatement[40288-40307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40310-40343]:Block[40365-40398]"
    }, {
      "left" : "return this == o;",
      "right" : "return this == o;",
      "info" : "ReturnStatement[40320-40337]:ReturnStatement[40375-40392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40385-40561]:Block[40440-40616]"
    }, {
      "left" : "int result = super.hashCode();",
      "right" : "int result = super.hashCode();",
      "info" : "VariableDeclarationStatement[40435-40465]:VariableDeclarationStatement[40490-40520]"
    }, {
      "left" : "result = 31 * result + (tag != null ? tag.hashCode() : 0);",
      "right" : "result = 31 * result + (tag != null ? tag.hashCode() : 0);",
      "info" : "ExpressionStatement[40474-40532]:ExpressionStatement[40529-40587]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[40541-40555]:ReturnStatement[40596-40610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40604-40786]:Block[40659-40841]"
    }, {
      "left" : "Element clone = (Element) super.clone();",
      "right" : "Element clone = (Element) super.clone();",
      "info" : "VariableDeclarationStatement[40614-40654]:VariableDeclarationStatement[40669-40709]"
    }, {
      "left" : "clone.classNames = null;",
      "right" : "clone.classNames = null;",
      "info" : "ExpressionStatement[40663-40687]:ExpressionStatement[40718-40742]"
    }, {
      "left" : "return clone;",
      "right" : "return clone;",
      "info" : "ReturnStatement[40767-40780]:ReturnStatement[40822-40835]"
    } ]
  },
  "interFileMappings" : { }
}