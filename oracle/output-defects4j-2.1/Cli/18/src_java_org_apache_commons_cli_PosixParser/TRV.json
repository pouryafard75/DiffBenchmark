{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private List tokens = new ArrayList();",
      "right" : "private List tokens = new ArrayList();",
      "info" : "FieldDeclaration[1216-1293]:FieldDeclaration[1216-1293]"
    }, {
      "left" : "private boolean eatTheRest;",
      "right" : "private boolean eatTheRest;",
      "info" : "FieldDeclaration[1299-1375]:FieldDeclaration[1299-1375]"
    }, {
      "left" : "private Option currentOption;",
      "right" : "private Option currentOption;",
      "info" : "FieldDeclaration[1381-1451]:FieldDeclaration[1381-1451]"
    }, {
      "left" : "private Options options;",
      "right" : "private Options options;",
      "info" : "FieldDeclaration[1457-1517]:FieldDeclaration[1457-1517]"
    }, {
      "left" : "private void init()",
      "right" : "private void init()",
      "info" : "MethodDeclaration[1523-1845]:MethodDeclaration[1523-1845]"
    }, {
      "left" : "private void gobble(Iterator iter)",
      "right" : "private void gobble(Iterator iter)",
      "info" : "MethodDeclaration[5786-6123]:MethodDeclaration[5777-6114]"
    }, {
      "left" : "private void process(String value)",
      "right" : "private void process(String value)",
      "info" : "MethodDeclaration[6129-7266]:MethodDeclaration[6120-7257]"
    }, {
      "left" : "protected void burstToken(String token, boolean stopAtNonOption)",
      "right" : "protected void burstToken(String token, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[8209-10312]:MethodDeclaration[8139-10242]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1756-1845]:Block[1756-1845]"
    }, {
      "left" : "eatTheRest = false;",
      "right" : "eatTheRest = false;",
      "info" : "ExpressionStatement[1766-1785]:ExpressionStatement[1766-1785]"
    }, {
      "left" : "tokens.clear();",
      "right" : "tokens.clear();",
      "info" : "ExpressionStatement[1794-1809]:ExpressionStatement[1794-1809]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[1818-1839]:ExpressionStatement[1818-1839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5968-6123]:Block[5959-6114]"
    }, {
      "left" : "if (eatTheRest)",
      "right" : "if (eatTheRest)",
      "info" : "IfStatement[5978-6117]:IfStatement[5969-6108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6002-6117]:Block[5993-6108]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[6016-6107]:WhileStatement[6007-6098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6051-6107]:Block[6042-6098]"
    }, {
      "left" : "tokens.add(iter.next());",
      "right" : "tokens.add(iter.next());",
      "info" : "ExpressionStatement[6069-6093]:ExpressionStatement[6060-6084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6803-7266]:Block[6794-7257]"
    }, {
      "left" : "if (currentOption != null && currentOption.hasArg())",
      "right" : "if (currentOption != null && currentOption.hasArg())",
      "info" : "IfStatement[6813-7260]:IfStatement[6804-7251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6874-7135]:Block[6865-7126]"
    }, {
      "left" : "if (currentOption.hasArg())",
      "right" : "if (currentOption.hasArg())",
      "info" : "IfStatement[6888-7125]:IfStatement[6879-7116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6928-7016]:Block[6919-7007]"
    }, {
      "left" : "tokens.add(value);",
      "right" : "tokens.add(value);",
      "info" : "ExpressionStatement[6946-6964]:ExpressionStatement[6937-6955]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[6981-7002]:ExpressionStatement[6972-6993]"
    }, {
      "left" : "if (currentOption.hasArgs())",
      "right" : "if (currentOption.hasArgs())",
      "info" : "IfStatement[7034-7125]:IfStatement[7025-7116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7075-7125]:Block[7066-7116]"
    }, {
      "left" : "tokens.add(value);",
      "right" : "tokens.add(value);",
      "info" : "ExpressionStatement[7093-7111]:ExpressionStatement[7084-7102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7157-7260]:Block[7148-7251]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[7171-7189]:ExpressionStatement[7162-7180]"
    }, {
      "left" : "tokens.add(\"--\");",
      "right" : "tokens.add(\"--\");",
      "info" : "ExpressionStatement[7202-7219]:ExpressionStatement[7193-7210]"
    }, {
      "left" : "tokens.add(value);",
      "right" : "tokens.add(value);",
      "info" : "ExpressionStatement[7232-7250]:ExpressionStatement[7223-7241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9585-10312]:Block[9515-10242]"
    }, {
      "left" : "for (int i = 1; i < token.length(); i++)",
      "right" : "for (int i = 1; i < token.length(); i++)",
      "info" : "ForStatement[9595-10306]:ForStatement[9525-10236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9644-10306]:Block[9574-10236]"
    }, {
      "left" : "String ch = String.valueOf(token.charAt(i));",
      "right" : "String ch = String.valueOf(token.charAt(i));",
      "info" : "VariableDeclarationStatement[9658-9702]:VariableDeclarationStatement[9588-9632]"
    }, {
      "left" : "if (options.hasOption(ch))",
      "right" : "if (options.hasOption(ch))",
      "info" : "IfStatement[9716-10296]:IfStatement[9646-10226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9755-10059]:Block[9685-9989]"
    }, {
      "left" : "tokens.add(\"-\" + ch);",
      "right" : "tokens.add(\"-\" + ch);",
      "info" : "ExpressionStatement[9773-9794]:ExpressionStatement[9703-9724]"
    }, {
      "left" : "currentOption = options.getOption(ch);",
      "right" : "currentOption = options.getOption(ch);",
      "info" : "ExpressionStatement[9811-9849]:ExpressionStatement[9741-9779]"
    }, {
      "left" : "if (currentOption.hasArg() && (token.length() != (i + 1)))",
      "right" : "if (currentOption.hasArg() && (token.length() != (i + 1)))",
      "info" : "IfStatement[9867-10045]:IfStatement[9797-9975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9942-10045]:Block[9872-9975]"
    }, {
      "left" : "tokens.add(token.substring(i + 1));",
      "right" : "tokens.add(token.substring(i + 1));",
      "info" : "ExpressionStatement[9964-9999]:ExpressionStatement[9894-9929]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10021-10027]:BreakStatement[9951-9957]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[10077-10296]:IfStatement[10007-10226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10110-10193]:Block[10040-10123]"
    }, {
      "left" : "process(token.substring(i));",
      "right" : "process(token.substring(i));",
      "info" : "ExpressionStatement[10128-10156]:ExpressionStatement[10058-10086]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10173-10179]:BreakStatement[10103-10109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10223-10296]:Block[10153-10226]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[10241-10259]:ExpressionStatement[10171-10189]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10276-10282]:BreakStatement[10206-10212]"
    } ]
  },
  "interFileMappings" : { }
}