{
  "matchedElements" : [
 {
    "left" : "class : SpyAnnotationEngine",
    "right" : "class : SpyAnnotationEngine",
    "info" : "TypeDeclaration[550-2882]:TypeDeclaration[599-3149]"
  }, {
    "left" : "public createMockFor(annotation , field ) : ",
    "right" : "public createMockFor(annotation , field ) : ",
    "info" : "MethodDeclaration[654-748]:MethodDeclaration[703-797]"
  }, {
    "left" : "public process(context , testClass ) : void",
    "right" : "public process(context , testClass ) : void",
    "info" : "MethodDeclaration[760-2467]:MethodDeclaration[809-2734]"
  }, {
    "left" : "package assertNoAnnotations(annotation , field , ) : void",
    "right" : "package assertNoAnnotations(annotation , field , ) : void",
    "info" : "MethodDeclaration[2512-2875]:MethodDeclaration[2779-3142]"
  } ],
  "mappings" : [
 {
    "left" : "@SuppressWarnings({\"unchecked\"})",
    "right" : "@SuppressWarnings({\"unchecked\"})",
    "info" : "SingleMemberAnnotation[550-582]:SingleMemberAnnotation[599-631]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[584-590]:Modifier[633-639]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[591-596]:TYPE_DECLARATION_KIND[640-645]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[654-660]:Modifier[703-709]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[661-667]:SimpleType[710-716]"
  }, {
    "left" : "createMockFor",
    "right" : "createMockFor",
    "info" : "SimpleName[668-681]:SimpleName[717-730]"
  }, {
    "left" : "Annotation annotation",
    "right" : "Annotation annotation",
    "info" : "SingleVariableDeclaration[682-703]:SingleVariableDeclaration[731-752]"
  }, {
    "left" : "Field field",
    "right" : "Field field",
    "info" : "SingleVariableDeclaration[705-716]:SingleVariableDeclaration[754-765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[718-748]:Block[767-797]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[729-741]:ReturnStatement[778-790]"
  }, {
    "left" : "@SuppressWarnings(\"deprecation\")",
    "right" : "@SuppressWarnings(\"deprecation\")",
    "info" : "SingleMemberAnnotation[760-792]:SingleMemberAnnotation[809-841]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[798-804]:Modifier[847-853]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[805-809]:PrimitiveType[854-858]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[810-817]:SimpleName[859-866]"
  }, {
    "left" : "Class<?> context",
    "right" : "Class<?> context",
    "info" : "SingleVariableDeclaration[818-834]:SingleVariableDeclaration[867-883]"
  }, {
    "left" : "Object testClass",
    "right" : "Object testClass",
    "info" : "SingleVariableDeclaration[836-852]:SingleVariableDeclaration[885-901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[854-2467]:Block[903-2734]"
  }, {
    "left" : "Field[] fields = context.getDeclaredFields();",
    "right" : "Field[] fields = context.getDeclaredFields();",
    "info" : "VariableDeclarationStatement[865-910]:VariableDeclarationStatement[914-959]"
  }, {
    "left" : "for (Field field : fields)",
    "right" : "for (Field field : fields)",
    "info" : "EnhancedForStatement[920-2460]:EnhancedForStatement[969-2727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[947-2460]:Block[996-2727]"
  }, {
    "left" : "if (field.isAnnotationPresent(Spy.class))",
    "right" : "if (field.isAnnotationPresent(Spy.class))",
    "info" : "IfStatement[962-2449]:IfStatement[1011-2716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1004-2449]:Block[1053-2716]"
  }, {
    "left" : "assertNoAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);",
    "right" : "assertNoAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);",
    "info" : "ExpressionStatement[1023-1130]:ExpressionStatement[1072-1179]"
  }, {
    "left" : "boolean wasAccessible = field.isAccessible();",
    "right" : "boolean wasAccessible = field.isAccessible();",
    "info" : "VariableDeclarationStatement[1148-1193]:VariableDeclarationStatement[1197-1242]"
  }, {
    "left" : "field.setAccessible(true);",
    "right" : "field.setAccessible(true);",
    "info" : "ExpressionStatement[1211-1237]:ExpressionStatement[1260-1286]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[1255-2434]:TryStatement[1304-2701]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1259-2188]:Block[1308-2455]"
  }, {
    "left" : "Object instance = field.get(testClass);",
    "right" : "Object instance = field.get(testClass);",
    "info" : "VariableDeclarationStatement[1282-1321]:VariableDeclarationStatement[1331-1370]"
  }, {
    "left" : "if (instance == null)",
    "right" : "if (instance == null)",
    "info" : "IfStatement[1343-1875]:IfStatement[1392-1924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1365-1875]:Block[1414-1924]"
  }, {
    "left" : "throw new MockitoException(\"Cannot create a @Spy for '\" + field.getName() + \"' field because the *instance* is missing\\n\" +\r\n                        \t\t  \"The instance must be created *before* initMocks();\\n\" +\r\n                                  \"Example of correct usage of @Spy:\\n\" +\r\n                            \t  \"   @Spy List mock = new LinkedList();\\n\" +\r\n                            \t  \"   //also, don't forget about MockitoAnnotations.initMocks();\");",
    "right" : "throw new MockitoException(\"Cannot create a @Spy for '\" + field.getName() + \"' field because the *instance* is missing\\n\" +\r\n                        \t\t  \"The instance must be created *before* initMocks();\\n\" +\r\n                                  \"Example of correct usage of @Spy:\\n\" +\r\n                            \t  \"   @Spy List mock = new LinkedList();\\n\" +\r\n                            \t  \"   //also, don't forget about MockitoAnnotations.initMocks();\");",
    "info" : "ThrowStatement[1392-1850]:ThrowStatement[1441-1899]"
  }, {
    "left" : "if (new MockUtil().isMock(instance))",
    "right" : "if (new MockUtil().isMock(instance))",
    "info" : "IfStatement[1897-2169]:IfStatement[1946-2436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1934-2069]:Block[1983-2118]"
  }, {
    "left" : "Mockito.reset(instance);",
    "right" : "Mockito.reset(instance);",
    "info" : "ExpressionStatement[2022-2046]:ExpressionStatement[2071-2095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2075-2169]:Block[2124-2436]"
  }, {
    "left" : "field",
    "right" : "field",
    "info" : "METHOD_INVOCATION_RECEIVER[2102-2107]:METHOD_INVOCATION_RECEIVER[2151-2156]"
  }, {
    "left" : "field.set(testClass, Mockito.spy(instance));",
    "right" : "field.set(testClass, Mockito.mock(instance.getClass(), withSettings()\r\n                                .spiedInstance(instance)\r\n                                .defaultAnswer(Mockito.CALLS_REAL_METHODS)\r\n                                .name(field.getName())));",
    "info" : "ExpressionStatement[2102-2146]:ExpressionStatement[2151-2413]"
  }, {
    "left" : "field.set(testClass, Mockito.spy(instance))",
    "right" : "withSettings()\r\n                                .spiedInstance(instance)\r\n                                .defaultAnswer(Mockito.CALLS_REAL_METHODS)",
    "info" : "MethodInvocation[2102-2145]:MethodInvocation[2206-2354]"
  }, {
    "left" : "set",
    "right" : "defaultAnswer",
    "info" : "SimpleName[2108-2111]:SimpleName[2313-2326]"
  }, {
    "left" : "Mockito",
    "right" : "Mockito",
    "info" : "METHOD_INVOCATION_RECEIVER[2123-2130]:METHOD_INVOCATION_RECEIVER[2172-2179]"
  }, {
    "left" : "Mockito.spy(instance)",
    "right" : "withSettings()\r\n                                .spiedInstance(instance)",
    "info" : "MethodInvocation[2123-2144]:MethodInvocation[2206-2278]"
  }, {
    "left" : "spy",
    "right" : "spiedInstance",
    "info" : "SimpleName[2131-2134]:SimpleName[2255-2268]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2222-2348]:Block[2489-2615]"
  }, {
    "left" : "throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);",
    "right" : "throw new MockitoException(\"Problems initiating spied field \" + field.getName(), e);",
    "info" : "ThrowStatement[2245-2329]:ThrowStatement[2512-2596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2357-2434]:Block[2624-2701]"
  }, {
    "left" : "field.setAccessible(wasAccessible);",
    "right" : "field.setAccessible(wasAccessible);",
    "info" : "ExpressionStatement[2380-2415]:ExpressionStatement[2647-2682]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2512-2516]:PrimitiveType[2779-2783]"
  }, {
    "left" : "assertNoAnnotations",
    "right" : "assertNoAnnotations",
    "info" : "SimpleName[2517-2536]:SimpleName[2784-2803]"
  }, {
    "left" : "Class annotation",
    "right" : "Class annotation",
    "info" : "SingleVariableDeclaration[2537-2553]:SingleVariableDeclaration[2804-2820]"
  }, {
    "left" : "Field field",
    "right" : "Field field",
    "info" : "SingleVariableDeclaration[2555-2566]:SingleVariableDeclaration[2822-2833]"
  }, {
    "left" : "Class ... undesiredAnnotations",
    "right" : "Class ... undesiredAnnotations",
    "info" : "SingleVariableDeclaration[2568-2598]:SingleVariableDeclaration[2835-2865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2600-2875]:Block[2867-3142]"
  }, {
    "left" : "for (Class u : undesiredAnnotations)",
    "right" : "for (Class u : undesiredAnnotations)",
    "info" : "EnhancedForStatement[2611-2860]:EnhancedForStatement[2878-3127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2648-2860]:Block[2915-3127]"
  }, {
    "left" : "if (field.isAnnotationPresent(u))",
    "right" : "if (field.isAnnotationPresent(u))",
    "info" : "IfStatement[2663-2849]:IfStatement[2930-3116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2697-2849]:Block[2964-3116]"
  }, {
    "left" : "new Reporter().unsupportedCombinationOfAnnotations(annotation.getSimpleName(), annotation.getClass().getSimpleName());",
    "right" : "new Reporter().unsupportedCombinationOfAnnotations(annotation.getSimpleName(), annotation.getClass().getSimpleName());",
    "info" : "ExpressionStatement[2716-2834]:ExpressionStatement[2983-3101]"
  } ]
}