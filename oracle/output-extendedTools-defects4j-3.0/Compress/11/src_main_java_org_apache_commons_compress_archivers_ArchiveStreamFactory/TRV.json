{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final String AR = \"ar\";",
      "right" : "public static final String AR = \"ar\";",
      "info" : "FieldDeclaration[3071-3215]:FieldDeclaration[3071-3215]"
    }, {
      "left" : "public static final String CPIO = \"cpio\";",
      "right" : "public static final String CPIO = \"cpio\";",
      "info" : "FieldDeclaration[3220-3370]:FieldDeclaration[3220-3370]"
    }, {
      "left" : "public static final String DUMP = \"dump\";",
      "right" : "public static final String DUMP = \"dump\";",
      "info" : "FieldDeclaration[3375-3530]:FieldDeclaration[3375-3530]"
    }, {
      "left" : "public static final String JAR = \"jar\";",
      "right" : "public static final String JAR = \"jar\";",
      "info" : "FieldDeclaration[3535-3682]:FieldDeclaration[3535-3682]"
    }, {
      "left" : "public static final String TAR = \"tar\";",
      "right" : "public static final String TAR = \"tar\";",
      "info" : "FieldDeclaration[3687-3834]:FieldDeclaration[3687-3834]"
    }, {
      "left" : "public static final String ZIP = \"zip\";",
      "right" : "public static final String ZIP = \"zip\";",
      "info" : "FieldDeclaration[3839-3986]:FieldDeclaration[3839-3986]"
    }, {
      "left" : "public ArchiveInputStream createArchiveInputStream(\n            final String archiverName, final InputStream in)\n            throws ArchiveException",
      "right" : "public ArchiveInputStream createArchiveInputStream(\n            final String archiverName, final InputStream in)\n            throws ArchiveException",
      "info" : "MethodDeclaration[3992-5582]:MethodDeclaration[3992-5582]"
    }, {
      "left" : "public ArchiveOutputStream createArchiveOutputStream(\n            final String archiverName, final OutputStream out)\n            throws ArchiveException",
      "right" : "public ArchiveOutputStream createArchiveOutputStream(\n            final String archiverName, final OutputStream out)\n            throws ArchiveException",
      "info" : "MethodDeclaration[5588-7051]:MethodDeclaration[5588-7051]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4410-4416]:Modifier[4410-4416]"
    }, {
      "left" : "ArchiveInputStream",
      "right" : "ArchiveInputStream",
      "info" : "SimpleType[4417-4435]:SimpleType[4417-4435]"
    }, {
      "left" : "createArchiveInputStream",
      "right" : "createArchiveInputStream",
      "info" : "SimpleName[4436-4460]:SimpleName[4436-4460]"
    }, {
      "left" : "final String archiverName",
      "right" : "final String archiverName",
      "info" : "SingleVariableDeclaration[4474-4499]:SingleVariableDeclaration[4474-4499]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[4501-4521]:SingleVariableDeclaration[4501-4521]"
    }, {
      "left" : "ArchiveException",
      "right" : "ArchiveException",
      "info" : "SimpleType[4542-4558]:SimpleType[4542-4558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4559-5582]:Block[4559-5582]"
    }, {
      "left" : "if (archiverName == null)",
      "right" : "if (archiverName == null)",
      "info" : "IfStatement[4578-4697]:IfStatement[4578-4697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4604-4697]:Block[4604-4697]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Archivername must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"Archivername must not be null.\");",
      "info" : "ThrowStatement[4618-4687]:ThrowStatement[4618-4687]"
    }, {
      "left" : "if (in == null)",
      "right" : "if (in == null)",
      "info" : "IfStatement[4715-4823]:IfStatement[4715-4823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4731-4823]:Block[4731-4823]"
    }, {
      "left" : "throw new IllegalArgumentException(\"InputStream must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"InputStream must not be null.\");",
      "info" : "ThrowStatement[4745-4813]:ThrowStatement[4745-4813]"
    }, {
      "left" : "if (AR.equalsIgnoreCase(archiverName))",
      "right" : "if (AR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[4833-4932]:IfStatement[4833-4932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4872-4932]:Block[4872-4932]"
    }, {
      "left" : "return new ArArchiveInputStream(in);",
      "right" : "return new ArArchiveInputStream(in);",
      "info" : "ReturnStatement[4886-4922]:ReturnStatement[4886-4922]"
    }, {
      "left" : "if (ZIP.equalsIgnoreCase(archiverName))",
      "right" : "if (ZIP.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[4941-5042]:IfStatement[4941-5042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4981-5042]:Block[4981-5042]"
    }, {
      "left" : "return new ZipArchiveInputStream(in);",
      "right" : "return new ZipArchiveInputStream(in);",
      "info" : "ReturnStatement[4995-5032]:ReturnStatement[4995-5032]"
    }, {
      "left" : "if (TAR.equalsIgnoreCase(archiverName))",
      "right" : "if (TAR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[5051-5152]:IfStatement[5051-5152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5091-5152]:Block[5091-5152]"
    }, {
      "left" : "return new TarArchiveInputStream(in);",
      "right" : "return new TarArchiveInputStream(in);",
      "info" : "ReturnStatement[5105-5142]:ReturnStatement[5105-5142]"
    }, {
      "left" : "if (JAR.equalsIgnoreCase(archiverName))",
      "right" : "if (JAR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[5161-5262]:IfStatement[5161-5262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5201-5262]:Block[5201-5262]"
    }, {
      "left" : "return new JarArchiveInputStream(in);",
      "right" : "return new JarArchiveInputStream(in);",
      "info" : "ReturnStatement[5215-5252]:ReturnStatement[5215-5252]"
    }, {
      "left" : "if (CPIO.equalsIgnoreCase(archiverName))",
      "right" : "if (CPIO.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[5271-5374]:IfStatement[5271-5374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5312-5374]:Block[5312-5374]"
    }, {
      "left" : "return new CpioArchiveInputStream(in);",
      "right" : "return new CpioArchiveInputStream(in);",
      "info" : "ReturnStatement[5326-5364]:ReturnStatement[5326-5364]"
    }, {
      "left" : "if (DUMP.equalsIgnoreCase(archiverName))",
      "right" : "if (DUMP.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[5383-5486]:IfStatement[5383-5486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5424-5486]:Block[5424-5486]"
    }, {
      "left" : "return new DumpArchiveInputStream(in);",
      "right" : "return new DumpArchiveInputStream(in);",
      "info" : "ReturnStatement[5438-5476]:ReturnStatement[5438-5476]"
    }, {
      "left" : "throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");",
      "right" : "throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");",
      "info" : "ThrowStatement[5504-5576]:ThrowStatement[5504-5576]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6002-6008]:Modifier[6002-6008]"
    }, {
      "left" : "ArchiveOutputStream",
      "right" : "ArchiveOutputStream",
      "info" : "SimpleType[6009-6028]:SimpleType[6009-6028]"
    }, {
      "left" : "createArchiveOutputStream",
      "right" : "createArchiveOutputStream",
      "info" : "SimpleName[6029-6054]:SimpleName[6029-6054]"
    }, {
      "left" : "final String archiverName",
      "right" : "final String archiverName",
      "info" : "SingleVariableDeclaration[6068-6093]:SingleVariableDeclaration[6068-6093]"
    }, {
      "left" : "final OutputStream out",
      "right" : "final OutputStream out",
      "info" : "SingleVariableDeclaration[6095-6117]:SingleVariableDeclaration[6095-6117]"
    }, {
      "left" : "ArchiveException",
      "right" : "ArchiveException",
      "info" : "SimpleType[6138-6154]:SimpleType[6138-6154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6155-7051]:Block[6155-7051]"
    }, {
      "left" : "if (archiverName == null)",
      "right" : "if (archiverName == null)",
      "info" : "IfStatement[6165-6284]:IfStatement[6165-6284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6191-6284]:Block[6191-6284]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Archivername must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"Archivername must not be null.\");",
      "info" : "ThrowStatement[6205-6274]:ThrowStatement[6205-6274]"
    }, {
      "left" : "if (out == null)",
      "right" : "if (out == null)",
      "info" : "IfStatement[6293-6403]:IfStatement[6293-6403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6310-6403]:Block[6310-6403]"
    }, {
      "left" : "throw new IllegalArgumentException(\"OutputStream must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"OutputStream must not be null.\");",
      "info" : "ThrowStatement[6324-6393]:ThrowStatement[6324-6393]"
    }, {
      "left" : "if (AR.equalsIgnoreCase(archiverName))",
      "right" : "if (AR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[6413-6514]:IfStatement[6413-6514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6452-6514]:Block[6452-6514]"
    }, {
      "left" : "return new ArArchiveOutputStream(out);",
      "right" : "return new ArArchiveOutputStream(out);",
      "info" : "ReturnStatement[6466-6504]:ReturnStatement[6466-6504]"
    }, {
      "left" : "if (ZIP.equalsIgnoreCase(archiverName))",
      "right" : "if (ZIP.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[6523-6626]:IfStatement[6523-6626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6563-6626]:Block[6563-6626]"
    }, {
      "left" : "return new ZipArchiveOutputStream(out);",
      "right" : "return new ZipArchiveOutputStream(out);",
      "info" : "ReturnStatement[6577-6616]:ReturnStatement[6577-6616]"
    }, {
      "left" : "if (TAR.equalsIgnoreCase(archiverName))",
      "right" : "if (TAR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[6635-6738]:IfStatement[6635-6738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6675-6738]:Block[6675-6738]"
    }, {
      "left" : "return new TarArchiveOutputStream(out);",
      "right" : "return new TarArchiveOutputStream(out);",
      "info" : "ReturnStatement[6689-6728]:ReturnStatement[6689-6728]"
    }, {
      "left" : "if (JAR.equalsIgnoreCase(archiverName))",
      "right" : "if (JAR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[6747-6850]:IfStatement[6747-6850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6787-6850]:Block[6787-6850]"
    }, {
      "left" : "return new JarArchiveOutputStream(out);",
      "right" : "return new JarArchiveOutputStream(out);",
      "info" : "ReturnStatement[6801-6840]:ReturnStatement[6801-6840]"
    }, {
      "left" : "if (CPIO.equalsIgnoreCase(archiverName))",
      "right" : "if (CPIO.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[6859-6964]:IfStatement[6859-6964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6900-6964]:Block[6900-6964]"
    }, {
      "left" : "return new CpioArchiveOutputStream(out);",
      "right" : "return new CpioArchiveOutputStream(out);",
      "info" : "ReturnStatement[6914-6954]:ReturnStatement[6914-6954]"
    }, {
      "left" : "throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");",
      "right" : "throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");",
      "info" : "ThrowStatement[6973-7045]:ThrowStatement[6973-7045]"
    } ]
  },
  "interFileMappings" : { }
}