{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[3193-35310]:TypeDeclaration[2660-36587]"
  }, {
    "left" : "public static final String FILTER_VALUE_SEPARATOR = \"|\";",
    "right" : "public static final String FILTER_VALUE_SEPARATOR = \"|\";",
    "info" : "FieldDeclaration[3603-3659]:FieldDeclaration[3070-3126]"
  }, {
    "left" : "public static final String FILTER_VALUE_SEPARATOR_REGEX = \"\\\\|\";",
    "right" : "public static final String FILTER_VALUE_SEPARATOR_REGEX = \"\\\\|\";",
    "info" : "FieldDeclaration[3664-3728]:FieldDeclaration[3131-3195]"
  }, {
    "left" : "public static final String CURRENT_ADMIN_MODULE_ATTRIBUTE_NAME = \"currentAdminModule\";",
    "right" : "public static final String CURRENT_ADMIN_MODULE_ATTRIBUTE_NAME = \"currentAdminModule\";",
    "info" : "FieldDeclaration[3734-3820]:FieldDeclaration[3201-3287]"
  }, {
    "left" : "public static final String CURRENT_ADMIN_SECTION_ATTRIBUTE_NAME = \"currentAdminSection\";",
    "right" : "public static final String CURRENT_ADMIN_SECTION_ATTRIBUTE_NAME = \"currentAdminSection\";",
    "info" : "FieldDeclaration[3825-3913]:FieldDeclaration[3292-3380]"
  }, {
    "left" : "@Resource(name = \"blAdminEntityService\")\n    protected AdminEntityService service;",
    "right" : "@Resource(name = \"blAdminEntityService\")\n    protected AdminEntityService service;",
    "info" : "FieldDeclaration[4013-4095]:FieldDeclaration[3480-3562]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[4101-4187]:FieldDeclaration[3568-3654]"
  }, {
    "left" : "@Resource(name = \"blAdminNavigationService\")\n    protected AdminNavigationService adminNavigationService;",
    "right" : "@Resource(name = \"blAdminNavigationService\")\n    protected AdminNavigationService adminNavigationService;",
    "info" : "FieldDeclaration[4197-4302]:FieldDeclaration[3664-3769]"
  }, {
    "left" : "@Resource(name = \"blEntityConfiguration\")\n    protected EntityConfiguration entityConfiguration;",
    "right" : "@Resource(name = \"blEntityConfiguration\")\n    protected EntityConfiguration entityConfiguration;",
    "info" : "FieldDeclaration[4312-4408]:FieldDeclaration[3779-3875]"
  }, {
    "left" : "@Resource(name = \"blEntityFormValidator\")\n    protected EntityFormValidator entityFormValidator;",
    "right" : "@Resource(name = \"blEntityFormValidator\")\n    protected EntityFormValidator entityFormValidator;",
    "info" : "FieldDeclaration[4414-4510]:FieldDeclaration[3881-3977]"
  }, {
    "left" : "@Resource(name=\"blAdminSecurityRemoteService\")\n    protected SecurityVerifier adminRemoteSecurityService;",
    "right" : "@Resource(name=\"blAdminSecurityRemoteService\")\n    protected SecurityVerifier adminRemoteSecurityService;",
    "info" : "FieldDeclaration[4520-4625]:FieldDeclaration[3987-4092]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[4631-4926]:FieldDeclaration[4098-4393]"
  }, {
    "left" : "@Resource(name = \"blAdminAbstractControllerExtensionManager\")\n    protected AdminAbstractControllerExtensionManager extensionManager;",
    "right" : "@Resource(name = \"blAdminAbstractControllerExtensionManager\")\n    protected AdminAbstractControllerExtensionManager extensionManager;",
    "info" : "FieldDeclaration[4932-5065]:FieldDeclaration[4399-4532]"
  }, {
    "left" : "/**\n     * Convenience method for obtaining a fully built EntityForm for the given sectionKey, sectionClassName, and id.\n     * \n     * @param sectionKey\n     * @param sectionClassName\n     * @param id\n     * @return a fully composed EntityForm\n     * @throws ServiceException\n     */\n    protected EntityForm getEntityForm(String sectionKey, String sectionClassName, String id) throws ServiceException {\n        SectionCrumb sc = new SectionCrumb();\n        sc.setSectionId(id);\n        sc.setSectionIdentifier(\"structured-content/all\");\n        List<SectionCrumb> crumbs = new ArrayList<SectionCrumb>(1);\n        crumbs.add(sc);\n\n        PersistencePackageRequest ppr = getSectionPersistencePackageRequest(sectionClassName, crumbs, null);\n        ClassMetadata cmd = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();\n        Entity entity = service.getRecord(ppr, id, cmd, false).getDynamicResultSet().getRecords()[0];\n\n        Map<String, DynamicResultSet> subRecordsMap = service.getRecordsForAllSubCollections(ppr, entity, crumbs);\n\n        EntityForm entityForm = formService.createEntityForm(cmd, entity, subRecordsMap, crumbs);\n        return entityForm;\n    }",
    "right" : "/**\n     * Convenience method for obtaining a fully built EntityForm for the given sectionKey, sectionClassName, and id.\n     * \n     * @param sectionKey\n     * @param sectionClassName\n     * @param id\n     * @return a fully composed EntityForm\n     * @throws ServiceException\n     */\n    protected EntityForm getEntityForm(String sectionKey, String sectionClassName, String id) throws ServiceException {\n        SectionCrumb sc = new SectionCrumb();\n        sc.setSectionId(id);\n        sc.setSectionIdentifier(\"structured-content/all\");\n        List<SectionCrumb> crumbs = new ArrayList<SectionCrumb>(1);\n        crumbs.add(sc);\n\n        PersistencePackageRequest ppr = getSectionPersistencePackageRequest(sectionClassName, crumbs, null);\n        ClassMetadata cmd = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();\n        Entity entity = service.getRecord(ppr, id, cmd, false).getDynamicResultSet().getRecords()[0];\n\n        Map<String, DynamicResultSet> subRecordsMap = service.getRecordsForAllSubCollections(ppr, entity, crumbs);\n\n        EntityForm entityForm = formService.createEntityForm(cmd, entity, subRecordsMap, crumbs);\n        return entityForm;\n    }",
    "info" : "MethodDeclaration[5275-6465]:MethodDeclaration[4742-5932]"
  }, {
    "left" : "/**\n     * Returns a partial representing a dynamic form. An example of this is the dynamic fields that render\n     * on structured content, which are determined by the currently selected structured content type. This \n     * method is typically only invoked through Javascript and used to replace the current dynamic form with\n     * the one for the newly selected type.\n     * \n     * @param request\n     * @param response\n     * @param model\n     * @param pathVars\n     * @param info\n     * @return the return view path\n     * @throws Exception\n     */\n    protected String getDynamicForm(HttpServletRequest request, HttpServletResponse response, Model model,\n            Map<String, String> pathVars,\n            DynamicEntityFormInfo info) throws Exception {\n        String sectionKey = getSectionKey(pathVars);\n        EntityForm blankFormContainer = new EntityForm();\n        EntityForm dynamicForm = getBlankDynamicFieldTemplateForm(info);\n\n        blankFormContainer.putDynamicForm(info.getPropertyName(), dynamicForm);\n        model.addAttribute(\"dynamicForm\", dynamicForm);\n        model.addAttribute(\"entityForm\", blankFormContainer);\n        model.addAttribute(\"dynamicPropertyName\", info.getPropertyName());\n        \n        String reqUrl = request.getRequestURL().toString();\n        reqUrl = reqUrl.substring(0, reqUrl.indexOf(\"/dynamicForm\"));\n        model.addAttribute(\"currentUrl\", reqUrl);\n        \n        setModelAttributes(model, sectionKey);\n        return \"views/dynamicFormPartial\";\n    }",
    "right" : "/**\n     * Returns a partial representing a dynamic form. An example of this is the dynamic fields that render\n     * on structured content, which are determined by the currently selected structured content type. This \n     * method is typically only invoked through Javascript and used to replace the current dynamic form with\n     * the one for the newly selected type.\n     * \n     * @param request\n     * @param response\n     * @param model\n     * @param pathVars\n     * @param info\n     * @return the return view path\n     * @throws Exception\n     */\n    protected String getDynamicForm(HttpServletRequest request, HttpServletResponse response, Model model,\n            Map<String, String> pathVars,\n            DynamicEntityFormInfo info) throws Exception {\n        String sectionKey = getSectionKey(pathVars);\n        EntityForm blankFormContainer = new EntityForm();\n        EntityForm dynamicForm = getBlankDynamicFieldTemplateForm(info);\n\n        blankFormContainer.putDynamicForm(info.getPropertyName(), dynamicForm);\n        model.addAttribute(\"dynamicForm\", dynamicForm);\n        model.addAttribute(\"entityForm\", blankFormContainer);\n        model.addAttribute(\"dynamicPropertyName\", info.getPropertyName());\n\n        String reqUrl = request.getRequestURL().toString();\n        reqUrl = reqUrl.substring(0, reqUrl.indexOf(\"/dynamicForm\"));\n        model.addAttribute(\"currentUrl\", reqUrl);\n        \n        setModelAttributes(model, sectionKey);\n        return \"views/dynamicFormPartial\";\n    }",
    "info" : "MethodDeclaration[6475-7990]:MethodDeclaration[5942-7449]"
  }, {
    "left" : "/**\n     * Convenience method for obtaining a ListGrid DTO object for a collection. Note that if no <b>criteria</b> is\n     * available, then this should be null (or empty)\n     * \n     * @param mainMetadata class metadata for the root entity that this <b>collectionProperty</b> relates to\n     * @param id foreign key from the root entity for <b>collectionProperty</b>\n     * @param collectionProperty property that this collection should be based on from the root entity\n     * @param form the criteria form model attribute\n     * @param sectionKey the current main section key\n     * @return the list grid\n     * @throws ServiceException\n     */\n    protected ListGrid getCollectionListGrid(ClassMetadata mainMetadata, Entity entity, Property collectionProperty,\n            MultiValueMap<String, String> requestParams, String sectionKey, PersistenceResponse persistenceResponse, List<SectionCrumb> sectionCrumbs)\n            throws ServiceException {\n        String idProperty = service.getIdProperty(mainMetadata);\n        if (persistenceResponse != null && persistenceResponse.getAdditionalData().containsKey(PersistenceResponse.AdditionalData.CLONEID)) {\n            entity.findProperty(idProperty).setValue((String) persistenceResponse.getAdditionalData().get(PersistenceResponse.AdditionalData.CLONEID));\n        }\n        DynamicResultSet drs = service.getRecordsForCollection(mainMetadata, entity, collectionProperty,\n                getCriteria(requestParams), getStartIndex(requestParams), getMaxIndex(requestParams), sectionCrumbs).getDynamicResultSet();\n\n        ListGrid listGrid = formService.buildCollectionListGrid(entity.findProperty(idProperty).getValue(), drs,\n                collectionProperty, sectionKey, sectionCrumbs);\n        listGrid.setListGridType(ListGrid.Type.INLINE);\n\n        return listGrid;\n    }",
    "right" : "/**\n     * Convenience method for obtaining a ListGrid DTO object for a collection. Note that if no <b>criteria</b> is\n     * available, then this should be null (or empty)\n     * \n     * @param mainMetadata class metadata for the root entity that this <b>collectionProperty</b> relates to\n     * @param id foreign key from the root entity for <b>collectionProperty</b>\n     * @param collectionProperty property that this collection should be based on from the root entity\n     * @param form the criteria form model attribute\n     * @param sectionKey the current main section key\n     * @return the list grid\n     * @throws ServiceException\n     */\n    protected ListGrid getCollectionListGrid(ClassMetadata mainMetadata, Entity entity, Property collectionProperty,\n            MultiValueMap<String, String> requestParams, String sectionKey, PersistenceResponse persistenceResponse, List<SectionCrumb> sectionCrumbs)\n            throws ServiceException {\n        String idProperty = service.getIdProperty(mainMetadata);\n        if (persistenceResponse != null && persistenceResponse.getAdditionalData().containsKey(PersistenceResponse.AdditionalData.CLONEID)) {\n            entity.findProperty(idProperty).setValue((String) persistenceResponse.getAdditionalData().get(PersistenceResponse.AdditionalData.CLONEID));\n        }\n        DynamicResultSet drs = service.getRecordsForCollection(mainMetadata, entity, collectionProperty,\n                getCriteria(requestParams), getStartIndex(requestParams), getMaxIndex(requestParams), sectionCrumbs).getDynamicResultSet();\n\n        ListGrid listGrid = formService.buildCollectionListGrid(entity.findProperty(idProperty).getValue(), drs,\n                collectionProperty, sectionKey, sectionCrumbs);\n        listGrid.setListGridType(ListGrid.Type.INLINE);\n\n        return listGrid;\n    }",
    "info" : "MethodDeclaration[8127-9961]:MethodDeclaration[7586-9420]"
  }, {
    "left" : "/**\n     * Convenience method for obtaining a ListGrid DTO object for a collection. Note that if no <b>criteria</b> is\n     * available, then this should be null (or empty)\n     *\n     * @param mainMetadata class metadata for the root entity that this <b>collectionProperty</b> relates to\n     * @param id foreign key from the root entity for <b>collectionProperty</b>\n     * @param collectionProperty property that this collection should be based on from the root entity\n     * @param form the criteria form model attribute\n     * @param sectionKey the current main section key\n     * @return the list grid\n     * @throws ServiceException\n     */\n    protected ListGrid getCollectionListGrid(ClassMetadata mainMetadata, Entity entity, Property collectionProperty,\n                MultiValueMap<String, String> requestParams, String sectionKey, List<SectionCrumb> sectionCrumbs)\n                throws ServiceException {\n        return getCollectionListGrid(mainMetadata, entity, collectionProperty, requestParams, sectionKey, null, sectionCrumbs);\n    }",
    "right" : "/**\n     * Convenience method for obtaining a ListGrid DTO object for a collection. Note that if no <b>criteria</b> is\n     * available, then this should be null (or empty)\n     *\n     * @param mainMetadata class metadata for the root entity that this <b>collectionProperty</b> relates to\n     * @param id foreign key from the root entity for <b>collectionProperty</b>\n     * @param collectionProperty property that this collection should be based on from the root entity\n     * @param form the criteria form model attribute\n     * @param sectionKey the current main section key\n     * @return the list grid\n     * @throws ServiceException\n     */\n    protected ListGrid getCollectionListGrid(ClassMetadata mainMetadata, Entity entity, Property collectionProperty,\n                MultiValueMap<String, String> requestParams, String sectionKey, List<SectionCrumb> sectionCrumbs)\n                throws ServiceException {\n        return getCollectionListGrid(mainMetadata, entity, collectionProperty, requestParams, sectionKey, null, sectionCrumbs);\n    }",
    "info" : "MethodDeclaration[9967-11021]:MethodDeclaration[9426-10480]"
  }, {
    "left" : "/**\n     * @see #getBlankDynamicFieldTemplateForm(DynamicEntityFormInfo, EntityForm)\n     * @param info\n     * @throws ServiceException\n     */\n    protected EntityForm getBlankDynamicFieldTemplateForm(DynamicEntityFormInfo info) throws ServiceException {\n        return getBlankDynamicFieldTemplateForm(info, null);\n    }",
    "right" : "/**\n     * @see #getBlankDynamicFieldTemplateForm(DynamicEntityFormInfo, EntityForm)\n     * @param info\n     * @throws ServiceException\n     */\n    protected EntityForm getBlankDynamicFieldTemplateForm(DynamicEntityFormInfo info) throws ServiceException {\n        return getBlankDynamicFieldTemplateForm(info, null);\n    }",
    "info" : "MethodDeclaration[11027-11349]:MethodDeclaration[10486-10808]"
  }, {
    "left" : "/**\n     * Convenience method for obtaining a blank dynamic field template form. For example, if the main entity form should\n     * render different fields depending on the value of a specific field in that main form itself, the \"dynamic\" fields\n     * are generated by this method. Because this is invoked when a new value is chosen, the form generated by this method\n     * will never have values set.\n     * \n     * @param info\n     * @return the entity form\n     * @throws ServiceException\n     */\n    protected EntityForm getBlankDynamicFieldTemplateForm(DynamicEntityFormInfo info, EntityForm dynamicFormOverride) \n            throws ServiceException {\n        // We need to inspect with the second custom criteria set to the id of\n        // the desired structured content type\n        PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(info.getCeilingClassName())\n                .withSecurityCeilingEntityClassname(info.getSecurityCeilingClassName())\n                .withCustomCriteria(new String[] { info.getCriteriaName(), null, info.getPropertyName(), info.getPropertyValue() });\n        ClassMetadata cmd = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();\n        \n        EntityForm dynamicForm = formService.createEntityForm(cmd, null);\n        dynamicForm.clearFieldsMap();\n\n        if (dynamicFormOverride != null) {\n            dynamicFormOverride.clearFieldsMap();\n            Map<String, Field> fieldOverrides = dynamicFormOverride.getFields();\n            for (Entry<String, Field> override : fieldOverrides.entrySet()) {\n                if (dynamicForm.getFields().containsKey(override.getKey())) {\n                    dynamicForm.getFields().get(override.getKey()).setValue(override.getValue().getValue());\n                }\n            }\n        }\n        \n        // Set the specialized name for these fields - we need to handle them separately\n        dynamicForm.clearFieldsMap();\n        for (Tab tab : dynamicForm.getTabs()) {\n            for (FieldGroup group : tab.getFieldGroups()) {\n                for (Field field : group.getFields()) {\n                    field.setName(info.getPropertyName() + DynamicEntityFormInfo.FIELD_SEPARATOR + field.getName());\n                }\n            }\n        }\n\n        //extensionManager.getProxy().modifyDynamicForm(dynamicForm, );\n\n        return dynamicForm;\n    }",
    "right" : "protected EntityForm getEntityForm(DynamicEntityFormInfo info, EntityForm dynamicFormOverride) throws ServiceException {\n        // We need to inspect with the second custom criteria set to the id of\n        // the desired structured content type\n        PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(info.getCeilingClassName())\n                .withSecurityCeilingEntityClassname(info.getSecurityCeilingClassName())\n                .withCustomCriteria(new String[] { info.getCriteriaName(), null, info.getPropertyName(), info.getPropertyValue() });\n        ClassMetadata cmd = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();\n\n        EntityForm dynamicForm = formService.createEntityForm(cmd, null);\n        dynamicForm.clearFieldsMap();\n\n        if (dynamicFormOverride != null) {\n            dynamicFormOverride.clearFieldsMap();\n            Map<String, Field> fieldOverrides = dynamicFormOverride.getFields();\n            for (Entry<String, Field> override : fieldOverrides.entrySet()) {\n                if (dynamicForm.getFields().containsKey(override.getKey())) {\n                    dynamicForm.getFields().get(override.getKey()).setValue(override.getValue().getValue());\n                }\n            }\n        }\n        return dynamicForm;\n    }",
    "info" : "MethodDeclaration[11355-13779]:MethodDeclaration[13716-15061]"
  }, {
    "left" : "/**\n     * Convenience method for obtaining a dynamic field template form for a particular entity. This method differs from\n     * {@link #getBlankDynamicFieldTemplateForm(DynamicEntityFormInfo)} in that it will fill out the current values for \n     * the fields in this dynamic form from the database. This method is invoked when the initial view of a page containing\n     * a dynamic form is triggered.\n     * \n     * Optionally, you can pass in a pre-existing dynamic form to this method that already has updated values. Example usage\n     * would be for after validation has failed and you do not want to lookup old values from the database again.\n     * \n     * @param info\n     * @param entityId\n     * @param dynamicForm optional dynamic form that already has values to fill out\n     * @return the entity form\n     * @throws ServiceException\n     */\n    protected EntityForm getDynamicFieldTemplateForm(DynamicEntityFormInfo info, String entityId, EntityForm dynamicFormOverride) \n            throws ServiceException {\n        // We need to inspect with the second custom criteria set to the id of\n        // the desired structured content type\n        PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(info.getCeilingClassName())\n                .withSecurityCeilingEntityClassname(info.getSecurityCeilingClassName())\n                .withCustomCriteria(new String[] { info.getCriteriaName(), entityId, info.getPropertyName(), info.getPropertyValue() });\n        ClassMetadata cmd = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();\n        \n        // However, when we fetch, the second custom criteria needs to be the id\n        // of this particular structured content entity\n        ppr.setCustomCriteria(new String[] { info.getCriteriaName(), entityId });\n        Entity entity = service.getRecord(ppr, info.getPropertyValue(), cmd, true).getDynamicResultSet().getRecords()[0];\n        \n        List<Field> fieldsToMove = new ArrayList<Field>();\n        // override the results of the entity with the dynamic form passed in\n        if (dynamicFormOverride != null) {\n            dynamicFormOverride.clearFieldsMap();\n            Map<String, Field> fieldOverrides = dynamicFormOverride.getFields();\n            for (Entry<String, Field> override : fieldOverrides.entrySet()) {\n                if (entity.getPMap().containsKey(override.getKey())) {\n                    entity.getPMap().get(override.getKey()).setValue(override.getValue().getValue());\n                } else {\n                    fieldsToMove.add(override.getValue());\n                }\n            }\n        }\n        \n        // Assemble the dynamic form for structured content type\n        EntityForm dynamicForm = formService.createEntityForm(cmd, entity, null, null);\n        \n        for (Field field : fieldsToMove) {\n            FieldMetadata fmd = cmd.getPMap().get(field.getName()).getMetadata();\n            if (fmd instanceof BasicFieldMetadata) {\n                BasicFieldMetadata bfmd = (BasicFieldMetadata) fmd;\n                field.setFieldType(bfmd.getFieldType().toString());\n                field.setFriendlyName(bfmd.getFriendlyName());\n                field.setRequired(bfmd.getRequired());\n            }\n            dynamicForm.addField(field);\n        }\n        \n        // Set the specialized name for these fields - we need to handle them separately\n        dynamicForm.clearFieldsMap();\n        for (Tab tab : dynamicForm.getTabs()) {\n            for (FieldGroup group : tab.getFieldGroups()) {\n                for (Field field : group.getFields()) {\n                    field.setName(info.getPropertyName() + DynamicEntityFormInfo.FIELD_SEPARATOR + field.getName());\n                }\n            }\n        }\n        \n        extensionManager.getProxy().modifyDynamicForm(dynamicForm, entityId);\n    \n        return dynamicForm;\n    }",
    "right" : "/**\n     * Convenience method for obtaining a dynamic field template form for a particular entity. This method differs from\n     * {@link #getBlankDynamicFieldTemplateForm(DynamicEntityFormInfo)} in that it will fill out the current values for \n     * the fields in this dynamic form from the database. This method is invoked when the initial view of a page containing\n     * a dynamic form is triggered.\n     * \n     * Optionally, you can pass in a pre-existing dynamic form to this method that already has updated values. Example usage\n     * would be for after validation has failed and you do not want to lookup old values from the database again.\n     * \n     * @param info\n     * @param entityId\n     * @param dynamicForm optional dynamic form that already has values to fill out\n     * @return the entity form\n     * @throws ServiceException\n     */\n    protected EntityForm getDynamicFieldTemplateForm(DynamicEntityFormInfo info, String entityId, EntityForm dynamicFormOverride) \n            throws ServiceException {\n        // We need to inspect with the second custom criteria set to the id of\n        // the desired structured content type\n        PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(info.getCeilingClassName())\n                .withSecurityCeilingEntityClassname(info.getSecurityCeilingClassName())\n                .withCustomCriteria(new String[] { info.getCriteriaName(), entityId, info.getPropertyName(), info.getPropertyValue() });\n        ClassMetadata cmd = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();\n        \n        // However, when we fetch, the second custom criteria needs to be the id\n        // of this particular structured content entity\n        ppr.setCustomCriteria(new String[] { info.getCriteriaName(), entityId });\n        Entity entity = service.getRecord(ppr, info.getPropertyValue(), cmd, true).getDynamicResultSet().getRecords()[0];\n        \n        List<Field> fieldsToMove = new ArrayList<Field>();\n        // override the results of the entity with the dynamic form passed in\n        if (dynamicFormOverride != null) {\n            dynamicFormOverride.clearFieldsMap();\n            Map<String, Field> fieldOverrides = dynamicFormOverride.getFields();\n            for (Entry<String, Field> override : fieldOverrides.entrySet()) {\n                if (entity.getPMap().containsKey(override.getKey())) {\n                    entity.getPMap().get(override.getKey()).setValue(override.getValue().getValue());\n                } else {\n                    fieldsToMove.add(override.getValue());\n                }\n            }\n        }\n        \n        // Assemble the dynamic form for structured content type\n        EntityForm dynamicForm = formService.createEntityForm(cmd, entity, null, null);\n        \n        for (Field field : fieldsToMove) {\n            FieldMetadata fmd = cmd.getPMap().get(field.getName()).getMetadata();\n            if (fmd instanceof BasicFieldMetadata) {\n                BasicFieldMetadata bfmd = (BasicFieldMetadata) fmd;\n                field.setFieldType(bfmd.getFieldType().toString());\n                field.setFriendlyName(bfmd.getFriendlyName());\n                field.setRequired(bfmd.getRequired());\n            }\n            dynamicForm.addField(field);\n        }\n        \n        // Set the specialized name for these fields - we need to handle them separately\n        dynamicForm.clearFieldsMap();\n        for (Tab tab : dynamicForm.getTabs()) {\n            for (FieldGroup group : tab.getFieldGroups()) {\n                for (Field field : group.getFields()) {\n                    field.setName(info.getPropertyName() + DynamicEntityFormInfo.FIELD_SEPARATOR + field.getName());\n                }\n            }\n        }\n        \n        extensionManager.getProxy().modifyDynamicForm(dynamicForm, entityId);\n    \n        return dynamicForm;\n    }",
    "info" : "MethodDeclaration[13789-17714]:MethodDeclaration[15066-18991]"
  }, {
    "left" : "/**\n     * This method will scan the entityForm for all dynamic form fields and pull them out\n     * as appropriate.\n     * \n     * @param entityForm\n     */\n    protected void extractDynamicFormFields(EntityForm entityForm) {\n        Map<String, Field> dynamicFields = new HashMap<String, Field>();\n        \n        // Find all of the dynamic form fields\n        for (Entry<String, Field> entry : entityForm.getFields().entrySet()) {\n            if (entry.getKey().contains(DynamicEntityFormInfo.FIELD_SEPARATOR)) { \n                dynamicFields.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        // Remove the dynamic form fields from the main entity - they are persisted separately\n        for (Entry<String, Field> entry : dynamicFields.entrySet()) {\n            entityForm.removeField(entry.getKey());\n        }\n        \n        // Create the entity form for the dynamic form, as it needs to be persisted separately\n        for (Entry<String, Field> entry : dynamicFields.entrySet()) {\n            String[] fieldName = entry.getKey().split(\"\\\\\" + DynamicEntityFormInfo.FIELD_SEPARATOR);\n            DynamicEntityFormInfo info = entityForm.getDynamicFormInfo(fieldName[0]);\n                    \n            EntityForm dynamicForm = entityForm.getDynamicForm(fieldName[0]);\n            if (dynamicForm == null) {\n                dynamicForm = new EntityForm();\n                dynamicForm.setCeilingEntityClassname(info.getCeilingClassName());\n                entityForm.putDynamicForm(fieldName[0], dynamicForm);\n            }\n            \n            entry.getValue().setName(fieldName[1]);\n            dynamicForm.addField(entry.getValue());\n        }\n    }",
    "right" : "/**\n     * This method will scan the entityForm for all dynamic form fields and pull them out\n     * as appropriate.\n     * \n     * @param entityForm\n     */\n    protected void extractDynamicFormFields(EntityForm entityForm) {\n        Map<String, Field> dynamicFields = new HashMap<String, Field>();\n        \n        // Find all of the dynamic form fields\n        for (Entry<String, Field> entry : entityForm.getFields().entrySet()) {\n            if (entry.getKey().contains(DynamicEntityFormInfo.FIELD_SEPARATOR)) { \n                dynamicFields.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        // Remove the dynamic form fields from the main entity - they are persisted separately\n        for (Entry<String, Field> entry : dynamicFields.entrySet()) {\n            entityForm.removeField(entry.getKey());\n        }\n        \n        // Create the entity form for the dynamic form, as it needs to be persisted separately\n        for (Entry<String, Field> entry : dynamicFields.entrySet()) {\n            String[] fieldName = entry.getKey().split(\"\\\\\" + DynamicEntityFormInfo.FIELD_SEPARATOR);\n            DynamicEntityFormInfo info = entityForm.getDynamicFormInfo(fieldName[0]);\n                    \n            EntityForm dynamicForm = entityForm.getDynamicForm(fieldName[0]);\n            if (dynamicForm == null) {\n                dynamicForm = new EntityForm();\n                dynamicForm.setCeilingEntityClassname(info.getCeilingClassName());\n                entityForm.putDynamicForm(fieldName[0], dynamicForm);\n            }\n            \n            entry.getValue().setName(fieldName[1]);\n            dynamicForm.addField(entry.getValue());\n        }\n    }",
    "info" : "MethodDeclaration[17720-19413]:MethodDeclaration[18997-20690]"
  }, {
    "left" : "/**\n     * This method is used to determine the current section key. For this default implementation, the sectionKey is pulled\n     * from the pathVariable, {sectionKey}, as defined by the request mapping on this controller. To support controller\n     * inheritance and allow more specialized controllers to delegate some methods to this basic controller, overridden\n     * implementations of this method could return a hardcoded value instead of reading the map\n     * \n     * @param pathVars - the map of all currently bound path variables for this request\n     * @return the sectionKey for this request\n     */\n    protected String getSectionKey(Map<String, String> pathVars) {\n        return pathVars.get(\"sectionKey\");\n    }",
    "right" : "/**\n     * This method is used to determine the current section key. For this default implementation, the sectionKey is pulled\n     * from the pathVariable, {sectionKey}, as defined by the request mapping on this controller. To support controller\n     * inheritance and allow more specialized controllers to delegate some methods to this basic controller, overridden\n     * implementations of this method could return a hardcoded value instead of reading the map\n     * \n     * @param pathVars - the map of all currently bound path variables for this request\n     * @return the sectionKey for this request\n     */\n    protected String getSectionKey(Map<String, String> pathVars) {\n        return pathVars.get(\"sectionKey\");\n    }",
    "info" : "MethodDeclaration[19594-20323]:MethodDeclaration[20871-21600]"
  }, {
    "left" : "/**\n     * <p>Helper method to return an array of {@link org.broadleafcommerce.openadmin.dto.FilterAndSortCriteria} based on a map of propertyName -> list of criteria\n     * value. This will also grab the sorts off of the request parameters, if any.</p>\n     * \n     * <p>The multi-valued map allows users to specify multiple criteria values per property, as well as multiple sort\n     * properties and sort directions. For multiple sort properties and sort directions, these would usually come in as\n     * request parameters like:\n     * <br />\n     * <br />\n     * ....?sortProperty=defaultSku.name&sortProperty=manufacturer&sortDirection=ASCENDING&sortDirection=DESCENDING\n     * <br />\n     * <br />\n     * This would attach criteria such that defaultSku.name was sorted ascending, and manufacturer was sorted descending</p>\n     * \n     * @param requestParams usually a {@link MultiValueMap} that has been bound by a controller to receive all of the\n     * request parameters that are not explicitly named\n     * @return the final array of {@link org.broadleafcommerce.openadmin.dto.FilterAndSortCriteria} to pass to the fetch\n     * \n     * @see {@link #getSortPropertyNames(Map)}\n     * @see {@link #getSortDirections(Map)}\n     */\n    protected FilterAndSortCriteria[] getCriteria(Map<String, List<String>> requestParams) {\n        if (requestParams == null || requestParams.isEmpty()) {\n            return null;\n        }\n        \n        List<FilterAndSortCriteria> result = new ArrayList<FilterAndSortCriteria>();\n        for (Entry<String, List<String>> entry : requestParams.entrySet()) {\n            if (!entry.getKey().equals(FilterAndSortCriteria.SORT_PROPERTY_PARAMETER)\n                    && !entry.getKey().equals(FilterAndSortCriteria.SORT_DIRECTION_PARAMETER)\n                    && !entry.getKey().equals(FilterAndSortCriteria.MAX_INDEX_PARAMETER)\n                    && !entry.getKey().equals(FilterAndSortCriteria.START_INDEX_PARAMETER)) {\n                List<String> values = entry.getValue();\n                List<String> collapsedValues = new ArrayList<String>();\n                for (String value : values) {\n                    if (value.contains(FILTER_VALUE_SEPARATOR)) {\n                        String[] vs = value.split(FILTER_VALUE_SEPARATOR_REGEX);\n                        for (String v : vs) {\n                            collapsedValues.add(v);\n                        }\n                    } else {\n                        collapsedValues.add(value);\n                    }\n                }\n                \n                FilterAndSortCriteria fasCriteria = new FilterAndSortCriteria(entry.getKey(), collapsedValues);\n                result.add(fasCriteria);\n            }\n        }\n\n        List<String> sortProperties = getSortPropertyNames(requestParams);\n        List<String> sortDirections = getSortDirections(requestParams);\n        if (CollectionUtils.isNotEmpty(sortProperties)) {\n            //set up a map to determine if there is already some criteria set for the sort property\n            Map<String, FilterAndSortCriteria> fasMap = BLCMapUtils.keyedMap(result, new TypedClosure<String, FilterAndSortCriteria>() {\n    \n                @Override\n                public String getKey(FilterAndSortCriteria value) {\n                    return value.getPropertyId();\n                }\n            });\n            for (int i = 0; i < sortProperties.size(); i++) {\n                boolean sortAscending = SortDirection.ASCENDING.toString().equals(sortDirections.get(i));\n                FilterAndSortCriteria propertyCriteria = fasMap.get(sortProperties.get(i));\n                //If there is already criteria for this property, attach the sort to that. Otherwise, create some new\n                //FilterAndSortCriteria for the sort\n                if (propertyCriteria != null) {\n                    propertyCriteria.setSortAscending(sortAscending);\n                } else {\n                    FilterAndSortCriteria fasc = new FilterAndSortCriteria(sortProperties.get(i));\n                    fasc.setSortAscending(sortAscending);\n                    result.add(fasc);\n                }\n            }\n        }\n        \n        return result.toArray(new FilterAndSortCriteria[result.size()]);\n    }",
    "right" : "/**\n     * <p>Helper method to return an array of {@link org.broadleafcommerce.openadmin.dto.FilterAndSortCriteria} based on a map of propertyName -> list of criteria\n     * value. This will also grab the sorts off of the request parameters, if any.</p>\n     * \n     * <p>The multi-valued map allows users to specify multiple criteria values per property, as well as multiple sort\n     * properties and sort directions. For multiple sort properties and sort directions, these would usually come in as\n     * request parameters like:\n     * <br />\n     * <br />\n     * ....?sortProperty=defaultSku.name&sortProperty=manufacturer&sortDirection=ASCENDING&sortDirection=DESCENDING\n     * <br />\n     * <br />\n     * This would attach criteria such that defaultSku.name was sorted ascending, and manufacturer was sorted descending</p>\n     * \n     * @param requestParams usually a {@link MultiValueMap} that has been bound by a controller to receive all of the\n     * request parameters that are not explicitly named\n     * @return the final array of {@link org.broadleafcommerce.openadmin.dto.FilterAndSortCriteria} to pass to the fetch\n     * \n     * @see {@link #getSortPropertyNames(Map)}\n     * @see {@link #getSortDirections(Map)}\n     */\n    protected FilterAndSortCriteria[] getCriteria(Map<String, List<String>> requestParams) {\n        if (requestParams == null || requestParams.isEmpty()) {\n            return null;\n        }\n        \n        List<FilterAndSortCriteria> result = new ArrayList<FilterAndSortCriteria>();\n        for (Entry<String, List<String>> entry : requestParams.entrySet()) {\n            if (!entry.getKey().equals(FilterAndSortCriteria.SORT_PROPERTY_PARAMETER)\n                    && !entry.getKey().equals(FilterAndSortCriteria.SORT_DIRECTION_PARAMETER)\n                    && !entry.getKey().equals(FilterAndSortCriteria.MAX_INDEX_PARAMETER)\n                    && !entry.getKey().equals(FilterAndSortCriteria.START_INDEX_PARAMETER)) {\n                List<String> values = entry.getValue();\n                List<String> collapsedValues = new ArrayList<String>();\n                for (String value : values) {\n                    if (value.contains(FILTER_VALUE_SEPARATOR)) {\n                        String[] vs = value.split(FILTER_VALUE_SEPARATOR_REGEX);\n                        for (String v : vs) {\n                            collapsedValues.add(v);\n                        }\n                    } else {\n                        collapsedValues.add(value);\n                    }\n                }\n                \n                FilterAndSortCriteria fasCriteria = new FilterAndSortCriteria(entry.getKey(), collapsedValues);\n                result.add(fasCriteria);\n            }\n        }\n\n        List<String> sortProperties = getSortPropertyNames(requestParams);\n        List<String> sortDirections = getSortDirections(requestParams);\n        if (CollectionUtils.isNotEmpty(sortProperties)) {\n            //set up a map to determine if there is already some criteria set for the sort property\n            Map<String, FilterAndSortCriteria> fasMap = BLCMapUtils.keyedMap(result, new TypedClosure<String, FilterAndSortCriteria>() {\n    \n                @Override\n                public String getKey(FilterAndSortCriteria value) {\n                    return value.getPropertyId();\n                }\n            });\n            for (int i = 0; i < sortProperties.size(); i++) {\n                boolean sortAscending = SortDirection.ASCENDING.toString().equals(sortDirections.get(i));\n                FilterAndSortCriteria propertyCriteria = fasMap.get(sortProperties.get(i));\n                //If there is already criteria for this property, attach the sort to that. Otherwise, create some new\n                //FilterAndSortCriteria for the sort\n                if (propertyCriteria != null) {\n                    propertyCriteria.setSortAscending(sortAscending);\n                } else {\n                    FilterAndSortCriteria fasc = new FilterAndSortCriteria(sortProperties.get(i));\n                    fasc.setSortAscending(sortAscending);\n                    result.add(fasc);\n                }\n            }\n        }\n        \n        return result.toArray(new FilterAndSortCriteria[result.size()]);\n    }",
    "info" : "MethodDeclaration[20333-24583]:MethodDeclaration[21610-25860]"
  }, {
    "left" : "public value FilterAndSortCriteria) : String",
    "right" : "public value FilterAndSortCriteria) : String",
    "info" : "MethodDeclaration[23523-23668]:MethodDeclaration[24800-24945]"
  }, {
    "left" : "/**\n     * Obtains the list of sort directions from the bound request parameters. Note that these should appear in the same\n     * relative order as {@link #getSortPropertyNames(Map)}\n     * \n     * @param requestParams\n     * @return\n     */\n    protected List<String> getSortDirections(Map<String, List<String>> requestParams) {\n        List<String> sortTypes = requestParams.get(FilterAndSortCriteria.SORT_DIRECTION_PARAMETER);\n        return sortTypes;\n    }",
    "right" : "/**\n     * Obtains the list of sort directions from the bound request parameters. Note that these should appear in the same\n     * relative order as {@link #getSortPropertyNames(Map)}\n     * \n     * @param requestParams\n     * @return\n     */\n    protected List<String> getSortDirections(Map<String, List<String>> requestParams) {\n        List<String> sortTypes = requestParams.get(FilterAndSortCriteria.SORT_DIRECTION_PARAMETER);\n        return sortTypes;\n    }",
    "info" : "MethodDeclaration[24593-25055]:MethodDeclaration[25870-26332]"
  }, {
    "left" : "/**\n     * Obtains the list of property names to sort on from the bound request parameters. Note that these should appear in the\n     * same relative order as {@link #getSortDirections(Map)}.\n     * \n     * @param requestParams\n     * @return\n     */\n    protected List<String> getSortPropertyNames(Map<String, List<String>> requestParams) {\n        return requestParams.get(FilterAndSortCriteria.SORT_PROPERTY_PARAMETER);\n    }",
    "right" : "/**\n     * Obtains the list of property names to sort on from the bound request parameters. Note that these should appear in the\n     * same relative order as {@link #getSortDirections(Map)}.\n     * \n     * @param requestParams\n     * @return\n     */\n    protected List<String> getSortPropertyNames(Map<String, List<String>> requestParams) {\n        return requestParams.get(FilterAndSortCriteria.SORT_PROPERTY_PARAMETER);\n    }",
    "info" : "MethodDeclaration[25065-25493]:MethodDeclaration[26342-26770]"
  }, {
    "left" : "/**\n     * Gets the fully qualified ceiling entity classname for this section. If this section is not explicitly defined in\n     * the database, will return the value passed into this function. For example, if there is a mapping from \"/myentity\" to\n     * \"com.mycompany.myentity\", both \"http://localhost/myentity\" and \"http://localhost/com.mycompany.myentity\" are valid\n     * request paths.\n     * \n     * @param sectionKey\n     * @return the className for this sectionKey if found in the database or the sectionKey if not\n     */\n    protected String getClassNameForSection(String sectionKey) {\n        AdminSection section = adminNavigationService.findAdminSectionByURI(\"/\" + sectionKey);\n        \n        ExtensionResultHolder erh = new ExtensionResultHolder();\n        extensionManager.getProxy().overrideClassNameForSection(erh, sectionKey, section);\n        if (erh.getContextMap().get(AbstractAdminAbstractControllerExtensionHandler.NEW_CLASS_NAME) != null) {\n            return (String) erh.getContextMap().get(AbstractAdminAbstractControllerExtensionHandler.NEW_CLASS_NAME); \n        }\n        \n        return (section == null) ? sectionKey : section.getCeilingEntity();\n    }",
    "right" : "/**\n     * Gets the fully qualified ceiling entity classname for this section. If this section is not explicitly defined in\n     * the database, will return the value passed into this function. For example, if there is a mapping from \"/myentity\" to\n     * \"com.mycompany.myentity\", both \"http://localhost/myentity\" and \"http://localhost/com.mycompany.myentity\" are valid\n     * request paths.\n     * \n     * @param sectionKey\n     * @return the className for this sectionKey if found in the database or the sectionKey if not\n     */\n    protected String getClassNameForSection(String sectionKey) {\n        AdminSection section = adminNavigationService.findAdminSectionByURI(\"/\" + sectionKey);\n        \n        ExtensionResultHolder erh = new ExtensionResultHolder();\n        extensionManager.getProxy().overrideClassNameForSection(erh, sectionKey, section);\n        if (erh.getContextMap().get(AbstractAdminAbstractControllerExtensionHandler.NEW_CLASS_NAME) != null) {\n            return (String) erh.getContextMap().get(AbstractAdminAbstractControllerExtensionHandler.NEW_CLASS_NAME); \n        }\n        \n        return (section == null) ? sectionKey : section.getCeilingEntity();\n    }",
    "info" : "MethodDeclaration[25499-26686]:MethodDeclaration[26776-27963]"
  }, {
    "left" : "/**\n     * If there are certain types of entities that should not be allowed to be created, an override of this method would be\n     * able to specify that. It could also add additional types if desired.\n     * \n     * @param classTree\n     * @return a List<ClassTree> representing all potentially avaialble entity types to create\n     */\n    protected List<ClassTree> getAddEntityTypes(ClassTree classTree) {\n        return classTree.getCollapsedClassTrees();\n    }",
    "right" : "/**\n     * If there are certain types of entities that should not be allowed to be created, an override of this method would be\n     * able to specify that. It could also add additional types if desired.\n     * \n     * @param classTree\n     * @return a List<ClassTree> representing all potentially avaialble entity types to create\n     */\n    protected List<ClassTree> getAddEntityTypes(ClassTree classTree) {\n        return classTree.getCollapsedClassTrees();\n    }",
    "info" : "MethodDeclaration[26692-27158]:MethodDeclaration[27969-28435]"
  }, {
    "left" : "/**\n     * This method is called when attempting to add new entities that have a polymorphic tree. \n     * \n     * If this method returns null, there is no default type set for this particular entity type, and the user will be \n     * presented with a selection of possible types to utilize.\n     * \n     * If it returns a non-null value, the returned fullyQualifiedClassname will be used and will bypass the selection step.\n     * \n     * @return null if there is no default type, otherwise the default type\n     */\n    protected String getDefaultEntityType() {\n        return null;\n    }",
    "right" : "/**\n     * This method is called when attempting to add new entities that have a polymorphic tree. \n     * \n     * If this method returns null, there is no default type set for this particular entity type, and the user will be \n     * presented with a selection of possible types to utilize.\n     * \n     * If it returns a non-null value, the returned fullyQualifiedClassname will be used and will bypass the selection step.\n     * \n     * @return null if there is no default type, otherwise the default type\n     */\n    protected String getDefaultEntityType() {\n        return null;\n    }",
    "info" : "MethodDeclaration[27164-27753]:MethodDeclaration[28441-29030]"
  }, {
    "left" : "/**\n     * This method is invoked for every request for this controller. By default, we do not want to specify a custom\n     * criteria, but specialized controllers may want to.\n     * \n     * @return the custom criteria for this section for all requests, if any\n     */\n    protected String[] getSectionCustomCriteria() {\n        return null;\n    }",
    "right" : "/**\n     * This method is invoked for every request for this controller. By default, we do not want to specify a custom\n     * criteria, but specialized controllers may want to.\n     * \n     * @return the custom criteria for this section for all requests, if any\n     */\n    protected String[] getSectionCustomCriteria() {\n        return null;\n    }",
    "info" : "MethodDeclaration[27763-28112]:MethodDeclaration[29040-29389]"
  }, {
    "left" : "/**\n     * @deprecated in favor of {@link #attachSectionSpecificInfo(PersistencePackageRequest, Map)}\n     */\n    @Deprecated\n    protected void attachSectionSpecificInfo(PersistencePackageRequest ppr) {\n        \n    }",
    "right" : "/**\n     * @deprecated in favor of {@link #attachSectionSpecificInfo(PersistencePackageRequest, Map)}\n     */\n    @Deprecated\n    protected void attachSectionSpecificInfo(PersistencePackageRequest ppr) {\n        \n    }",
    "info" : "MethodDeclaration[28122-28340]:MethodDeclaration[29399-29617]"
  }, {
    "left" : "/**\n     * This method is invoked whenever an assembled EntityForm is rendered. This typically occurs when viewing an entity\n     * in the admin or viewing an error state on a POST for that entity.\n     * \n     * @param entityForm\n     */\n    protected void modifyEntityForm(EntityForm entityForm, Map<String, String> pathVars) {\n        \n    }",
    "right" : "/**\n     * This method is invoked whenever an assembled EntityForm is rendered. This typically occurs when viewing an entity\n     * in the admin or viewing an error state on a POST for that entity.\n     * \n     * @param entityForm\n     */\n    protected void modifyEntityForm(EntityForm entityForm, Map<String, String> pathVars) {\n        \n    }",
    "info" : "MethodDeclaration[28350-28694]:MethodDeclaration[29627-29971]"
  }, {
    "left" : "/**\n     * This method is invoked whenever an assembled EntityForm is rendered for the add entity screen.\n     * \n     * @param entityForm\n     */\n    protected void modifyAddEntityForm(EntityForm entityForm, Map<String, String> pathVars) {\n        \n    }",
    "right" : "/**\n     * This method is invoked whenever an assembled EntityForm is rendered for the add entity screen.\n     * \n     * @param entityForm\n     */\n    protected void modifyAddEntityForm(EntityForm entityForm, Map<String, String> pathVars) {\n        \n    }",
    "info" : "MethodDeclaration[28700-28955]:MethodDeclaration[29977-30232]"
  }, {
    "left" : "/**\n     * A hook method that is invoked every time the {@link #getSectionPersistencePackageRequest(String)} method is invoked.\n     * This allows specialized controllers to hook into every request and manipulate the persistence package request as\n     * desired.\n     * \n     * @param ppr\n     */\n    protected void attachSectionSpecificInfo(PersistencePackageRequest ppr, Map<String, String> pathVars) {\n        attachSectionSpecificInfo(ppr);\n    }",
    "right" : "/**\n     * A hook method that is invoked every time the {@link #getSectionPersistencePackageRequest(String)} method is invoked.\n     * This allows specialized controllers to hook into every request and manipulate the persistence package request as\n     * desired.\n     * \n     * @param ppr\n     */\n    protected void attachSectionSpecificInfo(PersistencePackageRequest ppr, Map<String, String> pathVars) {\n        attachSectionSpecificInfo(ppr);\n    }",
    "info" : "MethodDeclaration[28961-29412]:MethodDeclaration[30238-30689]"
  }, {
    "left" : "/**\n     * Obtains the requested start index parameter\n     * \n     * @param requestParams\n     * @return\n     */\n    protected Integer getStartIndex(Map<String, List<String>> requestParams) {\n        if (requestParams == null || requestParams.isEmpty()) {\n            return null;\n        }\n        \n        List<String> startIndex = requestParams.get(FilterAndSortCriteria.START_INDEX_PARAMETER);\n        return CollectionUtils.isEmpty(startIndex) ? null : Integer.parseInt(startIndex.get(0));\n    }",
    "right" : "/**\n     * Obtains the requested start index parameter\n     * \n     * @param requestParams\n     * @return\n     */\n    protected Integer getStartIndex(Map<String, List<String>> requestParams) {\n        if (requestParams == null || requestParams.isEmpty()) {\n            return null;\n        }\n        \n        List<String> startIndex = requestParams.get(FilterAndSortCriteria.START_INDEX_PARAMETER);\n        return CollectionUtils.isEmpty(startIndex) ? null : Integer.parseInt(startIndex.get(0));\n    }",
    "info" : "MethodDeclaration[29418-29919]:MethodDeclaration[30695-31196]"
  }, {
    "left" : "/**\n     * Obtains the requested max index parameter\n     * \n     * @param requestParams\n     * @return\n     */\n    protected Integer getMaxIndex(Map<String, List<String>> requestParams) {\n        if (requestParams == null || requestParams.isEmpty()) {\n            return null;\n        }\n        \n        List<String> maxIndex = requestParams.get(FilterAndSortCriteria.MAX_INDEX_PARAMETER);\n        return CollectionUtils.isEmpty(maxIndex) ? null : Integer.parseInt(maxIndex.get(0));\n    }",
    "right" : "/**\n     * Obtains the requested max index parameter\n     * \n     * @param requestParams\n     * @return\n     */\n    protected Integer getMaxIndex(Map<String, List<String>> requestParams) {\n        if (requestParams == null || requestParams.isEmpty()) {\n            return null;\n        }\n        \n        List<String> maxIndex = requestParams.get(FilterAndSortCriteria.MAX_INDEX_PARAMETER);\n        return CollectionUtils.isEmpty(maxIndex) ? null : Integer.parseInt(maxIndex.get(0));\n    }",
    "info" : "MethodDeclaration[29929-30418]:MethodDeclaration[31206-31695]"
  }, {
    "left" : "/**\n     * Attributes to add to the model on every request\n     * \n     * @param model\n     * @param sectionKey\n     */\n    protected void setModelAttributes(Model model, String sectionKey) {\n        AdminSection section = adminNavigationService.findAdminSectionByURI(\"/\" + sectionKey);\n\n        if (section != null) {\n            model.addAttribute(\"sectionKey\", sectionKey);\n            model.addAttribute(CURRENT_ADMIN_MODULE_ATTRIBUTE_NAME, section.getModule());\n            model.addAttribute(CURRENT_ADMIN_SECTION_ATTRIBUTE_NAME, section);\n        }\n        \n        extensionManager.getProxy().setAdditionalModelAttributes(model, sectionKey);\n    }",
    "right" : "/**\n     * Attributes to add to the model on every request\n     * \n     * @param model\n     * @param sectionKey\n     */\n    protected void setModelAttributes(Model model, String sectionKey) {\n        AdminSection section = adminNavigationService.findAdminSectionByURI(\"/\" + sectionKey);\n\n        if (section != null) {\n            model.addAttribute(\"sectionKey\", sectionKey);\n            model.addAttribute(CURRENT_ADMIN_MODULE_ATTRIBUTE_NAME, section.getModule());\n            model.addAttribute(CURRENT_ADMIN_SECTION_ATTRIBUTE_NAME, section);\n        }\n        \n        extensionManager.getProxy().setAdditionalModelAttributes(model, sectionKey);\n    }",
    "info" : "MethodDeclaration[30529-31184]:MethodDeclaration[31806-32461]"
  }, {
    "left" : "/**\n     * @deprecated in favor of {@link #getSectionPersistencePackageRequest(String, List, Map)}\n     */\n    @Deprecated\n    protected PersistencePackageRequest getSectionPersistencePackageRequest(String sectionClassName, List<SectionCrumb> sectionCrumbs) {\n        return getSectionPersistencePackageRequest(sectionClassName, sectionCrumbs, null);\n    }",
    "right" : "/**\n     * @deprecated in favor of {@link #getSectionPersistencePackageRequest(String, List, Map)}\n     */\n    @Deprecated\n    protected PersistencePackageRequest getSectionPersistencePackageRequest(String sectionClassName, List<SectionCrumb> sectionCrumbs) {\n        return getSectionPersistencePackageRequest(sectionClassName, sectionCrumbs, null);\n    }",
    "info" : "MethodDeclaration[31190-31546]:MethodDeclaration[32467-32823]"
  }, {
    "left" : "/**\n     * Returns a PersistencePackageRequest for the given sectionClassName. Will also invoke the \n     * {@link #getSectionCustomCriteria()} and {@link #attachSectionSpecificInfo(PersistencePackageRequest)} to allow\n     * specialized controllers to manipulate the request for every action in this controller.\n     * \n     * @param sectionClassName\n     * @param sectionCrumbs\n     * @param pathVars\n     * @return\n     */\n    protected PersistencePackageRequest getSectionPersistencePackageRequest(String sectionClassName, \n            List<SectionCrumb> sectionCrumbs, Map<String, String> pathVars) {\n        PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(sectionClassName)\n                .withCustomCriteria(getSectionCustomCriteria())\n                .withSectionCrumbs(sectionCrumbs);\n\n        attachSectionSpecificInfo(ppr, pathVars);\n        \n        return ppr;\n    }",
    "right" : "/**\n     * Returns a PersistencePackageRequest for the given sectionClassName. Will also invoke the \n     * {@link #getSectionCustomCriteria()} and {@link #attachSectionSpecificInfo(PersistencePackageRequest)} to allow\n     * specialized controllers to manipulate the request for every action in this controller.\n     * \n     * @param sectionClassName\n     * @param sectionCrumbs\n     * @param pathVars\n     * @return\n     */\n    protected PersistencePackageRequest getSectionPersistencePackageRequest(String sectionClassName, \n            List<SectionCrumb> sectionCrumbs, Map<String, String> pathVars) {\n        PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(sectionClassName)\n                .withCustomCriteria(getSectionCustomCriteria())\n                .withSectionCrumbs(sectionCrumbs);\n\n        attachSectionSpecificInfo(ppr, pathVars);\n        \n        return ppr;\n    }",
    "info" : "MethodDeclaration[31552-32497]:MethodDeclaration[32829-33774]"
  }, {
    "left" : "/**\n     * @deprecated in favor of {@link #getSectionPersistencePackageRequest(String, MultiValueMap, List, Map)}\n     */\n    @Deprecated\n    protected PersistencePackageRequest getSectionPersistencePackageRequest(String sectionClassName, \n            MultiValueMap<String, String> requestParams, List<SectionCrumb> sectionCrumbs) {\n        return getSectionPersistencePackageRequest(sectionClassName, requestParams, sectionCrumbs, null);\n    }",
    "right" : "/**\n     * @deprecated in favor of {@link #getSectionPersistencePackageRequest(String, MultiValueMap, List, Map)}\n     */\n    @Deprecated\n    protected PersistencePackageRequest getSectionPersistencePackageRequest(String sectionClassName, \n            MultiValueMap<String, String> requestParams, List<SectionCrumb> sectionCrumbs) {\n        return getSectionPersistencePackageRequest(sectionClassName, requestParams, sectionCrumbs, null);\n    }",
    "info" : "MethodDeclaration[32503-32947]:MethodDeclaration[33780-34224]"
  }, {
    "left" : "/**\n     * Returns the result of a call to {@link #getSectionPersistencePackageRequest(String)} with the additional filter\n     * and sort criteria attached.\n     * \n     * @param sectionClassName\n     * @param filterAndSortCriteria\n     * @return the PersistencePacakageRequest\n     */\n    protected PersistencePackageRequest getSectionPersistencePackageRequest(String sectionClassName, \n            MultiValueMap<String, String> requestParams, List<SectionCrumb> sectionCrumbs, Map<String, String> pathVars) {\n        FilterAndSortCriteria[] fascs = getCriteria(requestParams);\n        PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(sectionClassName)\n                .withCustomCriteria(getSectionCustomCriteria())\n                .withFilterAndSortCriteria(fascs)\n                .withStartIndex(getStartIndex(requestParams))\n                .withMaxIndex(getMaxIndex(requestParams))\n                .withSectionCrumbs(sectionCrumbs);\n\n        attachSectionSpecificInfo(ppr, pathVars);\n\n        return ppr;\n    }",
    "right" : "/**\n     * Returns the result of a call to {@link #getSectionPersistencePackageRequest(String)} with the additional filter\n     * and sort criteria attached.\n     * \n     * @param sectionClassName\n     * @param filterAndSortCriteria\n     * @return the PersistencePacakageRequest\n     */\n    protected PersistencePackageRequest getSectionPersistencePackageRequest(String sectionClassName, \n            MultiValueMap<String, String> requestParams, List<SectionCrumb> sectionCrumbs, Map<String, String> pathVars) {\n        FilterAndSortCriteria[] fascs = getCriteria(requestParams);\n        PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(sectionClassName)\n                .withCustomCriteria(getSectionCustomCriteria())\n                .withFilterAndSortCriteria(fascs)\n                .withStartIndex(getStartIndex(requestParams))\n                .withMaxIndex(getMaxIndex(requestParams))\n                .withSectionCrumbs(sectionCrumbs);\n\n        attachSectionSpecificInfo(ppr, pathVars);\n\n        return ppr;\n    }",
    "info" : "MethodDeclaration[32953-34034]:MethodDeclaration[34230-35311]"
  }, {
    "left" : "protected List<SectionCrumb> getSectionCrumbs(HttpServletRequest request, String currentSection, String currentSectionId) {\n        String crumbs = request.getParameter(\"sectionCrumbs\");\n        List<SectionCrumb> myCrumbs = new ArrayList<SectionCrumb>();\n        if (!StringUtils.isEmpty(crumbs)) {\n            String[] crumbParts = crumbs.split(\",\");\n            for (String part : crumbParts) {\n                SectionCrumb crumb = new SectionCrumb();\n                String[] crumbPieces = part.split(\"--\");\n                crumb.setSectionIdentifier(crumbPieces[0]);\n                crumb.setSectionId(crumbPieces[1]);\n                if (!myCrumbs.contains(crumb)) {\n                    myCrumbs.add(crumb);\n                }\n            }\n        }\n        if (currentSection != null && currentSectionId != null) {\n            SectionCrumb crumb = new SectionCrumb();\n            if (currentSection.startsWith(\"/\")) {\n                currentSection = currentSection.substring(1, currentSection.length());\n            }\n            crumb.setSectionIdentifier(currentSection);\n            crumb.setSectionId(currentSectionId);\n            if (!myCrumbs.contains(crumb)) {\n                myCrumbs.add(crumb);\n            }\n        }\n        return myCrumbs;\n    }",
    "right" : "protected List<SectionCrumb> getSectionCrumbs(HttpServletRequest request, String currentSection, String currentSectionId) {\n        String crumbs = request.getParameter(\"sectionCrumbs\");\n        List<SectionCrumb> myCrumbs = new ArrayList<SectionCrumb>();\n        if (!StringUtils.isEmpty(crumbs)) {\n            String[] crumbParts = crumbs.split(\",\");\n            for (String part : crumbParts) {\n                SectionCrumb crumb = new SectionCrumb();\n                String[] crumbPieces = part.split(\"--\");\n                crumb.setSectionIdentifier(crumbPieces[0]);\n                crumb.setSectionId(crumbPieces[1]);\n                if (!myCrumbs.contains(crumb)) {\n                    myCrumbs.add(crumb);\n                }\n            }\n        }\n        if (currentSection != null && currentSectionId != null) {\n            SectionCrumb crumb = new SectionCrumb();\n            if (currentSection.startsWith(\"/\")) {\n                currentSection = currentSection.substring(1, currentSection.length());\n            }\n            crumb.setSectionIdentifier(currentSection);\n            crumb.setSectionId(currentSectionId);\n            if (!myCrumbs.contains(crumb)) {\n                myCrumbs.add(crumb);\n            }\n        }\n        return myCrumbs;\n    }",
    "info" : "MethodDeclaration[34040-35308]:MethodDeclaration[35317-36585]"
  } ],
  "mappings" : [
 {
    "left" : "import org.broadleafcommerce.openadmin.dto.BasicFieldMetadata;",
    "right" : "import org.broadleafcommerce.openadmin.dto.*;",
    "info" : "ImportDeclaration[1229-1291]:ImportDeclaration[1229-1274]"
  }, {
    "left" : "import org.broadleafcommerce.openadmin.dto.ClassMetadata;",
    "right" : "import org.broadleafcommerce.openadmin.web.form.entity.EntityFormValidator;",
    "info" : "ImportDeclaration[1292-1349]:ImportDeclaration[1983-2058]"
  }, {
    "left" : "import org.broadleafcommerce.openadmin.dto.ClassTree;",
    "right" : "import org.broadleafcommerce.openadmin.web.form.entity.Field;",
    "info" : "ImportDeclaration[1350-1403]:ImportDeclaration[2059-2120]"
  }, {
    "left" : "import org.broadleafcommerce.openadmin.dto.DynamicResultSet;",
    "right" : "import org.broadleafcommerce.openadmin.web.form.entity.FieldGroup;",
    "info" : "ImportDeclaration[1404-1464]:ImportDeclaration[2121-2187]"
  }, {
    "left" : "import org.broadleafcommerce.openadmin.dto.Entity;",
    "right" : "import org.broadleafcommerce.openadmin.web.form.entity.Tab;",
    "info" : "ImportDeclaration[1465-1515]:ImportDeclaration[2188-2247]"
  }, {
    "left" : "import org.broadleafcommerce.openadmin.dto.FieldMetadata;",
    "right" : "import org.broadleafcommerce.openadmin.web.service.FormBuilderService;",
    "info" : "ImportDeclaration[1516-1573]:ImportDeclaration[2248-2318]"
  }, {
    "left" : "import org.broadleafcommerce.openadmin.dto.FilterAndSortCriteria;",
    "right" : "import org.springframework.ui.Model;",
    "info" : "ImportDeclaration[1574-1639]:ImportDeclaration[2319-2355]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3510-3516]:Modifier[2977-2983]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[3517-3525]:Modifier[2984-2992]"
  }, {
    "left" : "BroadleafAbstractController",
    "right" : "BroadleafAbstractController",
    "info" : "SimpleType[3564-3591]:SimpleType[3031-3058]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5564-5573]:Modifier[5031-5040]"
  }, {
    "left" : "EntityForm",
    "right" : "EntityForm",
    "info" : "SimpleType[5574-5584]:SimpleType[5041-5051]"
  }, {
    "left" : "String sectionKey",
    "right" : "String sectionKey",
    "info" : "SingleVariableDeclaration[5599-5616]:SingleVariableDeclaration[5066-5083]"
  }, {
    "left" : "String sectionClassName",
    "right" : "String sectionClassName",
    "info" : "SingleVariableDeclaration[5618-5641]:SingleVariableDeclaration[5085-5108]"
  }, {
    "left" : "String id",
    "right" : "String id",
    "info" : "SingleVariableDeclaration[5643-5652]:SingleVariableDeclaration[5110-5119]"
  }, {
    "left" : "ServiceException",
    "right" : "ServiceException",
    "info" : "SimpleType[5661-5677]:SimpleType[5128-5144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5678-6465]:Block[5145-5932]"
  }, {
    "left" : "SectionCrumb sc = new SectionCrumb();",
    "right" : "SectionCrumb sc = new SectionCrumb();",
    "info" : "VariableDeclarationStatement[5688-5725]:VariableDeclarationStatement[5155-5192]"
  }, {
    "left" : "sc.setSectionId(id);",
    "right" : "sc.setSectionId(id);",
    "info" : "ExpressionStatement[5734-5754]:ExpressionStatement[5201-5221]"
  }, {
    "left" : "sc.setSectionIdentifier(\"structured-content/all\");",
    "right" : "sc.setSectionIdentifier(\"structured-content/all\");",
    "info" : "ExpressionStatement[5763-5813]:ExpressionStatement[5230-5280]"
  }, {
    "left" : "List<SectionCrumb> crumbs = new ArrayList<SectionCrumb>(1);",
    "right" : "List<SectionCrumb> crumbs = new ArrayList<SectionCrumb>(1);",
    "info" : "VariableDeclarationStatement[5822-5881]:VariableDeclarationStatement[5289-5348]"
  }, {
    "left" : "crumbs.add(sc);",
    "right" : "crumbs.add(sc);",
    "info" : "ExpressionStatement[5890-5905]:ExpressionStatement[5357-5372]"
  }, {
    "left" : "PersistencePackageRequest ppr = getSectionPersistencePackageRequest(sectionClassName, crumbs, null);",
    "right" : "PersistencePackageRequest ppr = getSectionPersistencePackageRequest(sectionClassName, crumbs, null);",
    "info" : "VariableDeclarationStatement[5915-6015]:VariableDeclarationStatement[5382-5482]"
  }, {
    "left" : "ClassMetadata cmd = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();",
    "right" : "ClassMetadata cmd = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();",
    "info" : "VariableDeclarationStatement[6024-6115]:VariableDeclarationStatement[5491-5582]"
  }, {
    "left" : "Entity entity = service.getRecord(ppr, id, cmd, false).getDynamicResultSet().getRecords()[0];",
    "right" : "Entity entity = service.getRecord(ppr, id, cmd, false).getDynamicResultSet().getRecords()[0];",
    "info" : "VariableDeclarationStatement[6124-6217]:VariableDeclarationStatement[5591-5684]"
  }, {
    "left" : "Map<String, DynamicResultSet> subRecordsMap = service.getRecordsForAllSubCollections(ppr, entity, crumbs);",
    "right" : "Map<String, DynamicResultSet> subRecordsMap = service.getRecordsForAllSubCollections(ppr, entity, crumbs);",
    "info" : "VariableDeclarationStatement[6227-6333]:VariableDeclarationStatement[5694-5800]"
  }, {
    "left" : "EntityForm entityForm = formService.createEntityForm(cmd, entity, subRecordsMap, crumbs);",
    "right" : "EntityForm entityForm = formService.createEntityForm(cmd, entity, subRecordsMap, crumbs);",
    "info" : "VariableDeclarationStatement[6343-6432]:VariableDeclarationStatement[5810-5899]"
  }, {
    "left" : "return entityForm;",
    "right" : "return entityForm;",
    "info" : "ReturnStatement[6441-6459]:ReturnStatement[5908-5926]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[7035-7044]:Modifier[6502-6511]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[7045-7051]:SimpleType[6512-6518]"
  }, {
    "left" : "HttpServletRequest request",
    "right" : "HttpServletRequest request",
    "info" : "SingleVariableDeclaration[7067-7093]:SingleVariableDeclaration[6534-6560]"
  }, {
    "left" : "HttpServletResponse response",
    "right" : "HttpServletResponse response",
    "info" : "SingleVariableDeclaration[7095-7123]:SingleVariableDeclaration[6562-6590]"
  }, {
    "left" : "Model model",
    "right" : "Model model",
    "info" : "SingleVariableDeclaration[7125-7136]:SingleVariableDeclaration[6592-6603]"
  }, {
    "left" : "Map<String, String> pathVars",
    "right" : "Map<String, String> pathVars",
    "info" : "SingleVariableDeclaration[7150-7178]:SingleVariableDeclaration[6617-6645]"
  }, {
    "left" : "DynamicEntityFormInfo info",
    "right" : "DynamicEntityFormInfo info",
    "info" : "SingleVariableDeclaration[7192-7218]:SingleVariableDeclaration[6659-6685]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[7227-7236]:SimpleType[6694-6703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7237-7990]:Block[6704-7449]"
  }, {
    "left" : "String sectionKey = getSectionKey(pathVars);",
    "right" : "String sectionKey = getSectionKey(pathVars);",
    "info" : "VariableDeclarationStatement[7247-7291]:VariableDeclarationStatement[6714-6758]"
  }, {
    "left" : "EntityForm blankFormContainer = new EntityForm();",
    "right" : "EntityForm blankFormContainer = new EntityForm();",
    "info" : "VariableDeclarationStatement[7300-7349]:VariableDeclarationStatement[6767-6816]"
  }, {
    "left" : "EntityForm dynamicForm = getBlankDynamicFieldTemplateForm(info);",
    "right" : "EntityForm dynamicForm = getBlankDynamicFieldTemplateForm(info);",
    "info" : "VariableDeclarationStatement[7358-7422]:VariableDeclarationStatement[6825-6889]"
  }, {
    "left" : "blankFormContainer.putDynamicForm(info.getPropertyName(), dynamicForm);",
    "right" : "blankFormContainer.putDynamicForm(info.getPropertyName(), dynamicForm);",
    "info" : "ExpressionStatement[7432-7503]:ExpressionStatement[6899-6970]"
  }, {
    "left" : "model.addAttribute(\"dynamicForm\", dynamicForm);",
    "right" : "model.addAttribute(\"dynamicForm\", dynamicForm);",
    "info" : "ExpressionStatement[7512-7559]:ExpressionStatement[6979-7026]"
  }, {
    "left" : "model.addAttribute(\"entityForm\", blankFormContainer);",
    "right" : "model.addAttribute(\"entityForm\", blankFormContainer);",
    "info" : "ExpressionStatement[7568-7621]:ExpressionStatement[7035-7088]"
  }, {
    "left" : "model.addAttribute(\"dynamicPropertyName\", info.getPropertyName());",
    "right" : "model.addAttribute(\"dynamicPropertyName\", info.getPropertyName());",
    "info" : "ExpressionStatement[7630-7696]:ExpressionStatement[7097-7163]"
  }, {
    "left" : "String reqUrl = request.getRequestURL().toString();",
    "right" : "String reqUrl = request.getRequestURL().toString();",
    "info" : "VariableDeclarationStatement[7714-7765]:VariableDeclarationStatement[7173-7224]"
  }, {
    "left" : "reqUrl = reqUrl.substring(0, reqUrl.indexOf(\"/dynamicForm\"));",
    "right" : "reqUrl = reqUrl.substring(0, reqUrl.indexOf(\"/dynamicForm\"));",
    "info" : "ExpressionStatement[7774-7835]:ExpressionStatement[7233-7294]"
  }, {
    "left" : "model.addAttribute(\"currentUrl\", reqUrl);",
    "right" : "model.addAttribute(\"currentUrl\", reqUrl);",
    "info" : "ExpressionStatement[7844-7885]:ExpressionStatement[7303-7344]"
  }, {
    "left" : "setModelAttributes(model, sectionKey);",
    "right" : "setModelAttributes(model, sectionKey);",
    "info" : "ExpressionStatement[7903-7941]:ExpressionStatement[7362-7400]"
  }, {
    "left" : "return \"views/dynamicFormPartial\";",
    "right" : "return \"views/dynamicFormPartial\";",
    "info" : "ReturnStatement[7950-7984]:ReturnStatement[7409-7443]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[8780-8789]:Modifier[8239-8248]"
  }, {
    "left" : "ListGrid",
    "right" : "ListGrid",
    "info" : "SimpleType[8790-8798]:SimpleType[8249-8257]"
  }, {
    "left" : "ClassMetadata mainMetadata",
    "right" : "ClassMetadata mainMetadata",
    "info" : "SingleVariableDeclaration[8821-8847]:SingleVariableDeclaration[8280-8306]"
  }, {
    "left" : "Entity entity",
    "right" : "Entity entity",
    "info" : "SingleVariableDeclaration[8849-8862]:SingleVariableDeclaration[8308-8321]"
  }, {
    "left" : "Property collectionProperty",
    "right" : "Property collectionProperty",
    "info" : "SingleVariableDeclaration[8864-8891]:SingleVariableDeclaration[8323-8350]"
  }, {
    "left" : "MultiValueMap<String, String> requestParams",
    "right" : "MultiValueMap<String, String> requestParams",
    "info" : "SingleVariableDeclaration[8905-8948]:SingleVariableDeclaration[8364-8407]"
  }, {
    "left" : "String sectionKey",
    "right" : "String sectionKey",
    "info" : "SingleVariableDeclaration[8950-8967]:SingleVariableDeclaration[8409-8426]"
  }, {
    "left" : "PersistenceResponse persistenceResponse",
    "right" : "PersistenceResponse persistenceResponse",
    "info" : "SingleVariableDeclaration[8969-9008]:SingleVariableDeclaration[8428-8467]"
  }, {
    "left" : "List<SectionCrumb> sectionCrumbs",
    "right" : "List<SectionCrumb> sectionCrumbs",
    "info" : "SingleVariableDeclaration[9010-9042]:SingleVariableDeclaration[8469-8501]"
  }, {
    "left" : "ServiceException",
    "right" : "ServiceException",
    "info" : "SimpleType[9063-9079]:SimpleType[8522-8538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9080-9961]:Block[8539-9420]"
  }, {
    "left" : "String idProperty = service.getIdProperty(mainMetadata);",
    "right" : "String idProperty = service.getIdProperty(mainMetadata);",
    "info" : "VariableDeclarationStatement[9090-9146]:VariableDeclarationStatement[8549-8605]"
  }, {
    "left" : "if (persistenceResponse != null && persistenceResponse.getAdditionalData().containsKey(PersistenceResponse.AdditionalData.CLONEID))",
    "right" : "if (persistenceResponse != null && persistenceResponse.getAdditionalData().containsKey(PersistenceResponse.AdditionalData.CLONEID))",
    "info" : "IfStatement[9155-9450]:IfStatement[8614-8909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9287-9450]:Block[8746-8909]"
  }, {
    "left" : "entity.findProperty(idProperty).setValue((String) persistenceResponse.getAdditionalData().get(PersistenceResponse.AdditionalData.CLONEID));",
    "right" : "entity.findProperty(idProperty).setValue((String) persistenceResponse.getAdditionalData().get(PersistenceResponse.AdditionalData.CLONEID));",
    "info" : "ExpressionStatement[9301-9440]:ExpressionStatement[8760-8899]"
  }, {
    "left" : "DynamicResultSet drs = service.getRecordsForCollection(mainMetadata, entity, collectionProperty,\n                getCriteria(requestParams), getStartIndex(requestParams), getMaxIndex(requestParams), sectionCrumbs).getDynamicResultSet();",
    "right" : "DynamicResultSet drs = service.getRecordsForCollection(mainMetadata, entity, collectionProperty,\n                getCriteria(requestParams), getStartIndex(requestParams), getMaxIndex(requestParams), sectionCrumbs).getDynamicResultSet();",
    "info" : "VariableDeclarationStatement[9459-9695]:VariableDeclarationStatement[8918-9154]"
  }, {
    "left" : "ListGrid listGrid = formService.buildCollectionListGrid(entity.findProperty(idProperty).getValue(), drs,\n                collectionProperty, sectionKey, sectionCrumbs);",
    "right" : "ListGrid listGrid = formService.buildCollectionListGrid(entity.findProperty(idProperty).getValue(), drs,\n                collectionProperty, sectionKey, sectionCrumbs);",
    "info" : "VariableDeclarationStatement[9705-9873]:VariableDeclarationStatement[9164-9332]"
  }, {
    "left" : "listGrid.setListGridType(ListGrid.Type.INLINE);",
    "right" : "listGrid.setListGridType(ListGrid.Type.INLINE);",
    "info" : "ExpressionStatement[9882-9929]:ExpressionStatement[9341-9388]"
  }, {
    "left" : "return listGrid;",
    "right" : "return listGrid;",
    "info" : "ReturnStatement[9939-9955]:ReturnStatement[9398-9414]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[10619-10628]:Modifier[10078-10087]"
  }, {
    "left" : "ListGrid",
    "right" : "ListGrid",
    "info" : "SimpleType[10629-10637]:SimpleType[10088-10096]"
  }, {
    "left" : "ClassMetadata mainMetadata",
    "right" : "ClassMetadata mainMetadata",
    "info" : "SingleVariableDeclaration[10660-10686]:SingleVariableDeclaration[10119-10145]"
  }, {
    "left" : "Entity entity",
    "right" : "Entity entity",
    "info" : "SingleVariableDeclaration[10688-10701]:SingleVariableDeclaration[10147-10160]"
  }, {
    "left" : "Property collectionProperty",
    "right" : "Property collectionProperty",
    "info" : "SingleVariableDeclaration[10703-10730]:SingleVariableDeclaration[10162-10189]"
  }, {
    "left" : "MultiValueMap<String, String> requestParams",
    "right" : "MultiValueMap<String, String> requestParams",
    "info" : "SingleVariableDeclaration[10748-10791]:SingleVariableDeclaration[10207-10250]"
  }, {
    "left" : "String sectionKey",
    "right" : "String sectionKey",
    "info" : "SingleVariableDeclaration[10793-10810]:SingleVariableDeclaration[10252-10269]"
  }, {
    "left" : "List<SectionCrumb> sectionCrumbs",
    "right" : "List<SectionCrumb> sectionCrumbs",
    "info" : "SingleVariableDeclaration[10812-10844]:SingleVariableDeclaration[10271-10303]"
  }, {
    "left" : "ServiceException",
    "right" : "ServiceException",
    "info" : "SimpleType[10869-10885]:SimpleType[10328-10344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10886-11021]:Block[10345-10480]"
  }, {
    "left" : "return getCollectionListGrid(mainMetadata, entity, collectionProperty, requestParams, sectionKey, null, sectionCrumbs);",
    "right" : "return getCollectionListGrid(mainMetadata, entity, collectionProperty, requestParams, sectionKey, null, sectionCrumbs);",
    "info" : "ReturnStatement[10896-11015]:ReturnStatement[10355-10474]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[11175-11184]:Modifier[10634-10643]"
  }, {
    "left" : "EntityForm",
    "right" : "EntityForm",
    "info" : "SimpleType[11185-11195]:SimpleType[10644-10654]"
  }, {
    "left" : "DynamicEntityFormInfo info",
    "right" : "DynamicEntityFormInfo info",
    "info" : "SingleVariableDeclaration[11229-11255]:SingleVariableDeclaration[10688-10714]"
  }, {
    "left" : "ServiceException",
    "right" : "ServiceException",
    "info" : "SimpleType[11264-11280]:SimpleType[10723-10739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11281-11349]:Block[10740-10808]"
  }, {
    "left" : "return getBlankDynamicFieldTemplateForm(info, null);",
    "right" : "return getBlankDynamicFieldTemplateForm(info, null);",
    "info" : "ReturnStatement[11291-11343]:ReturnStatement[10750-10802]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[11861-11870]:Modifier[11323-11332]"
  }, {
    "left" : "EntityForm",
    "right" : "EntityForm",
    "info" : "SimpleType[11871-11881]:SimpleType[11333-11343]"
  }, {
    "left" : "DynamicEntityFormInfo info",
    "right" : "DynamicEntityFormInfo info",
    "info" : "SingleVariableDeclaration[11915-11941]:SingleVariableDeclaration[11388-11414]"
  }, {
    "left" : "EntityForm dynamicFormOverride",
    "right" : "EntityForm dynamicFormOverride",
    "info" : "SingleVariableDeclaration[11943-11973]:SingleVariableDeclaration[11416-11446]"
  }, {
    "left" : "ServiceException",
    "right" : "ServiceException",
    "info" : "SimpleType[11995-12011]:SimpleType[11455-11471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12012-13779]:Block[13835-15061]"
  }, {
    "left" : "PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(info.getCeilingClassName())\n                .withSecurityCeilingEntityClassname(info.getSecurityCeilingClassName())\n                .withCustomCriteria(new String[] { info.getCriteriaName(), null, info.getPropertyName(), info.getPropertyValue() });",
    "right" : "PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(info.getCeilingClassName())\n                .withSecurityCeilingEntityClassname(info.getSecurityCeilingClassName())\n                .withCustomCriteria(new String[] { info.getCriteriaName(), null, info.getPropertyName(), info.getPropertyValue() });",
    "info" : "VariableDeclarationStatement[12148-12509]:VariableDeclarationStatement[13971-14332]"
  }, {
    "left" : "ClassMetadata cmd = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();",
    "right" : "ClassMetadata cmd = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();",
    "info" : "VariableDeclarationStatement[12518-12609]:VariableDeclarationStatement[14341-14432]"
  }, {
    "left" : "EntityForm dynamicForm = formService.createEntityForm(cmd, null);",
    "right" : "EntityForm dynamicForm = formService.createEntityForm(cmd, null);",
    "info" : "VariableDeclarationStatement[12627-12692]:VariableDeclarationStatement[14442-14507]"
  }, {
    "left" : "dynamicForm",
    "right" : "dynamicForm",
    "info" : "SimpleName[12701-12712]:SimpleName[12169-12180]"
  }, {
    "left" : "dynamicForm.clearFieldsMap();",
    "right" : "dynamicForm.clearFieldsMap();",
    "info" : "ExpressionStatement[12701-12730]:ExpressionStatement[14516-14545]"
  }, {
    "left" : "if (dynamicFormOverride != null)",
    "right" : "if (dynamicFormOverride != null)",
    "info" : "IfStatement[12740-13212]:IfStatement[14555-15027]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12773-13212]:Block[14588-15027]"
  }, {
    "left" : "dynamicFormOverride.clearFieldsMap();",
    "right" : "dynamicFormOverride.clearFieldsMap();",
    "info" : "ExpressionStatement[12787-12824]:ExpressionStatement[14602-14639]"
  }, {
    "left" : "Map<String, Field> fieldOverrides = dynamicFormOverride.getFields();",
    "right" : "Map<String, Field> fieldOverrides = dynamicFormOverride.getFields();",
    "info" : "VariableDeclarationStatement[12837-12905]:VariableDeclarationStatement[14652-14720]"
  }, {
    "left" : "for (Entry<String, Field> override : fieldOverrides.entrySet())",
    "right" : "for (Entry<String, Field> override : fieldOverrides.entrySet())",
    "info" : "EnhancedForStatement[12918-13202]:EnhancedForStatement[14733-15017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12982-13202]:Block[14797-15017]"
  }, {
    "left" : "if (dynamicForm.getFields().containsKey(override.getKey()))",
    "right" : "if (dynamicForm.getFields().containsKey(override.getKey()))",
    "info" : "IfStatement[13000-13188]:IfStatement[14815-15003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13060-13188]:Block[14875-15003]"
  }, {
    "left" : "dynamicForm.getFields().get(override.getKey()).setValue(override.getValue().getValue());",
    "right" : "dynamicForm.getFields().get(override.getKey()).setValue(override.getValue().getValue());",
    "info" : "ExpressionStatement[13082-13170]:ExpressionStatement[14897-14985]"
  }, {
    "left" : "dynamicForm",
    "right" : "dynamicForm",
    "info" : "SimpleName[13319-13330]:SimpleName[13148-13159]"
  }, {
    "left" : "Tab",
    "right" : "Tab",
    "info" : "SimpleType[13362-13365]:SimpleType[13138-13141]"
  }, {
    "left" : "tab",
    "right" : "tab",
    "info" : "SimpleName[13366-13369]:SimpleName[13209-13212]"
  }, {
    "left" : "dynamicForm",
    "right" : "dynamicForm",
    "info" : "SimpleName[13372-13383]:SimpleName[13095-13106]"
  }, {
    "left" : "FieldGroup",
    "right" : "FieldGroup",
    "info" : "SimpleType[13414-13424]:SimpleType[13190-13200]"
  }, {
    "left" : "group",
    "right" : "group",
    "info" : "SimpleName[13425-13430]:SimpleName[13268-13273]"
  }, {
    "left" : "tab",
    "right" : "tab",
    "info" : "SimpleName[13433-13436]:SimpleName[13142-13145]"
  }, {
    "left" : "Field",
    "right" : "Field",
    "info" : "SimpleType[13478-13483]:SimpleType[13254-13259]"
  }, {
    "left" : "field",
    "right" : "field",
    "info" : "SimpleName[13484-13489]:SimpleName[13363-13368]"
  }, {
    "left" : "group",
    "right" : "group",
    "info" : "SimpleName[13492-13497]:SimpleName[13513-13518]"
  }, {
    "left" : "field",
    "right" : "field",
    "info" : "SimpleName[13533-13538]:SimpleName[13442-13447]"
  }, {
    "left" : "info",
    "right" : "info",
    "info" : "SimpleName[13547-13551]:SimpleName[13377-13381]"
  }, {
    "left" : "DynamicEntityFormInfo.FIELD_SEPARATOR",
    "right" : "DynamicEntityFormInfo.FIELD_SEPARATOR",
    "info" : "QualifiedName[13572-13609]:QualifiedName[13402-13439]"
  }, {
    "left" : "field",
    "right" : "field",
    "info" : "SimpleName[13612-13617]:SimpleName[13531-13536]"
  }, {
    "left" : "return dynamicForm;",
    "right" : "return dynamicForm;",
    "info" : "ReturnStatement[13754-13773]:ReturnStatement[15036-15055]"
  }, {
    "left" : "dynamicForm",
    "right" : "dynamicForm",
    "info" : "SimpleName[13761-13772]:SimpleName[13692-13703]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[14650-14659]:Modifier[15927-15936]"
  }, {
    "left" : "EntityForm",
    "right" : "EntityForm",
    "info" : "SimpleType[14660-14670]:SimpleType[15937-15947]"
  }, {
    "left" : "DynamicEntityFormInfo info",
    "right" : "DynamicEntityFormInfo info",
    "info" : "SingleVariableDeclaration[14699-14725]:SingleVariableDeclaration[15976-16002]"
  }, {
    "left" : "String entityId",
    "right" : "String entityId",
    "info" : "SingleVariableDeclaration[14727-14742]:SingleVariableDeclaration[16004-16019]"
  }, {
    "left" : "EntityForm dynamicFormOverride",
    "right" : "EntityForm dynamicFormOverride",
    "info" : "SingleVariableDeclaration[14744-14774]:SingleVariableDeclaration[16021-16051]"
  }, {
    "left" : "ServiceException",
    "right" : "ServiceException",
    "info" : "SimpleType[14796-14812]:SimpleType[16073-16089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14813-17714]:Block[16090-18991]"
  }, {
    "left" : "PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(info.getCeilingClassName())\n                .withSecurityCeilingEntityClassname(info.getSecurityCeilingClassName())\n                .withCustomCriteria(new String[] { info.getCriteriaName(), entityId, info.getPropertyName(), info.getPropertyValue() });",
    "right" : "PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(info.getCeilingClassName())\n                .withSecurityCeilingEntityClassname(info.getSecurityCeilingClassName())\n                .withCustomCriteria(new String[] { info.getCriteriaName(), entityId, info.getPropertyName(), info.getPropertyValue() });",
    "info" : "VariableDeclarationStatement[14949-15314]:VariableDeclarationStatement[16226-16591]"
  }, {
    "left" : "ClassMetadata cmd = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();",
    "right" : "ClassMetadata cmd = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();",
    "info" : "VariableDeclarationStatement[15323-15414]:VariableDeclarationStatement[16600-16691]"
  }, {
    "left" : "ppr.setCustomCriteria(new String[] { info.getCriteriaName(), entityId });",
    "right" : "ppr.setCustomCriteria(new String[] { info.getCriteriaName(), entityId });",
    "info" : "ExpressionStatement[15569-15642]:ExpressionStatement[16846-16919]"
  }, {
    "left" : "Entity entity = service.getRecord(ppr, info.getPropertyValue(), cmd, true).getDynamicResultSet().getRecords()[0];",
    "right" : "Entity entity = service.getRecord(ppr, info.getPropertyValue(), cmd, true).getDynamicResultSet().getRecords()[0];",
    "info" : "VariableDeclarationStatement[15651-15764]:VariableDeclarationStatement[16928-17041]"
  }, {
    "left" : "List<Field> fieldsToMove = new ArrayList<Field>();",
    "right" : "List<Field> fieldsToMove = new ArrayList<Field>();",
    "info" : "VariableDeclarationStatement[15782-15832]:VariableDeclarationStatement[17059-17109]"
  }, {
    "left" : "if (dynamicFormOverride != null)",
    "right" : "if (dynamicFormOverride != null)",
    "info" : "IfStatement[15919-16461]:IfStatement[17196-17738]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15952-16461]:Block[17229-17738]"
  }, {
    "left" : "dynamicFormOverride.clearFieldsMap();",
    "right" : "dynamicFormOverride.clearFieldsMap();",
    "info" : "ExpressionStatement[15966-16003]:ExpressionStatement[17243-17280]"
  }, {
    "left" : "Map<String, Field> fieldOverrides = dynamicFormOverride.getFields();",
    "right" : "Map<String, Field> fieldOverrides = dynamicFormOverride.getFields();",
    "info" : "VariableDeclarationStatement[16016-16084]:VariableDeclarationStatement[17293-17361]"
  }, {
    "left" : "for (Entry<String, Field> override : fieldOverrides.entrySet())",
    "right" : "for (Entry<String, Field> override : fieldOverrides.entrySet())",
    "info" : "EnhancedForStatement[16097-16451]:EnhancedForStatement[17374-17728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16161-16451]:Block[17438-17728]"
  }, {
    "left" : "if (entity.getPMap().containsKey(override.getKey()))",
    "right" : "if (entity.getPMap().containsKey(override.getKey()))",
    "info" : "IfStatement[16179-16437]:IfStatement[17456-17714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16232-16353]:Block[17509-17630]"
  }, {
    "left" : "entity.getPMap().get(override.getKey()).setValue(override.getValue().getValue());",
    "right" : "entity.getPMap().get(override.getKey()).setValue(override.getValue().getValue());",
    "info" : "ExpressionStatement[16254-16335]:ExpressionStatement[17531-17612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16359-16437]:Block[17636-17714]"
  }, {
    "left" : "fieldsToMove.add(override.getValue());",
    "right" : "fieldsToMove.add(override.getValue());",
    "info" : "ExpressionStatement[16381-16419]:ExpressionStatement[17658-17696]"
  }, {
    "left" : "EntityForm dynamicForm = formService.createEntityForm(cmd, entity, null, null);",
    "right" : "EntityForm dynamicForm = formService.createEntityForm(cmd, entity, null, null);",
    "info" : "VariableDeclarationStatement[16544-16623]:VariableDeclarationStatement[17821-17900]"
  }, {
    "left" : "for (Field field : fieldsToMove)",
    "right" : "for (Field field : fieldsToMove)",
    "info" : "EnhancedForStatement[16641-17129]:EnhancedForStatement[17918-18406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16674-17129]:Block[17951-18406]"
  }, {
    "left" : "FieldMetadata fmd = cmd.getPMap().get(field.getName()).getMetadata();",
    "right" : "FieldMetadata fmd = cmd.getPMap().get(field.getName()).getMetadata();",
    "info" : "VariableDeclarationStatement[16688-16757]:VariableDeclarationStatement[17965-18034]"
  }, {
    "left" : "if (fmd instanceof BasicFieldMetadata)",
    "right" : "if (fmd instanceof BasicFieldMetadata)",
    "info" : "IfStatement[16770-17078]:IfStatement[18047-18355]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16809-17078]:Block[18086-18355]"
  }, {
    "left" : "BasicFieldMetadata bfmd = (BasicFieldMetadata) fmd;",
    "right" : "BasicFieldMetadata bfmd = (BasicFieldMetadata) fmd;",
    "info" : "VariableDeclarationStatement[16827-16878]:VariableDeclarationStatement[18104-18155]"
  }, {
    "left" : "field.setFieldType(bfmd.getFieldType().toString());",
    "right" : "field.setFieldType(bfmd.getFieldType().toString());",
    "info" : "ExpressionStatement[16895-16946]:ExpressionStatement[18172-18223]"
  }, {
    "left" : "field.setFriendlyName(bfmd.getFriendlyName());",
    "right" : "field.setFriendlyName(bfmd.getFriendlyName());",
    "info" : "ExpressionStatement[16963-17009]:ExpressionStatement[18240-18286]"
  }, {
    "left" : "field.setRequired(bfmd.getRequired());",
    "right" : "field.setRequired(bfmd.getRequired());",
    "info" : "ExpressionStatement[17026-17064]:ExpressionStatement[18303-18341]"
  }, {
    "left" : "dynamicForm.addField(field);",
    "right" : "dynamicForm.addField(field);",
    "info" : "ExpressionStatement[17091-17119]:ExpressionStatement[18368-18396]"
  }, {
    "left" : "dynamicForm.clearFieldsMap();",
    "right" : "dynamicForm.clearFieldsMap();",
    "info" : "ExpressionStatement[17236-17265]:ExpressionStatement[18513-18542]"
  }, {
    "left" : "for (Tab tab : dynamicForm.getTabs())",
    "right" : "for (Tab tab : dynamicForm.getTabs())",
    "info" : "EnhancedForStatement[17274-17588]:EnhancedForStatement[18551-18865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17312-17588]:Block[18589-18865]"
  }, {
    "left" : "for (FieldGroup group : tab.getFieldGroups())",
    "right" : "for (FieldGroup group : tab.getFieldGroups())",
    "info" : "EnhancedForStatement[17326-17578]:EnhancedForStatement[18603-18855]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17372-17578]:Block[18649-18855]"
  }, {
    "left" : "for (Field field : group.getFields())",
    "right" : "for (Field field : group.getFields())",
    "info" : "EnhancedForStatement[17390-17564]:EnhancedForStatement[18667-18841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17428-17564]:Block[18705-18841]"
  }, {
    "left" : "field.setName(info.getPropertyName() + DynamicEntityFormInfo.FIELD_SEPARATOR + field.getName());",
    "right" : "field.setName(info.getPropertyName() + DynamicEntityFormInfo.FIELD_SEPARATOR + field.getName());",
    "info" : "ExpressionStatement[17450-17546]:ExpressionStatement[18727-18823]"
  }, {
    "left" : "extensionManager.getProxy().modifyDynamicForm(dynamicForm, entityId);",
    "right" : "extensionManager.getProxy().modifyDynamicForm(dynamicForm, entityId);",
    "info" : "ExpressionStatement[17606-17675]:ExpressionStatement[18883-18952]"
  }, {
    "left" : "return dynamicForm;",
    "right" : "return dynamicForm;",
    "info" : "ReturnStatement[17689-17708]:ReturnStatement[18966-18985]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[17882-17891]:Modifier[19159-19168]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17892-17896]:PrimitiveType[19169-19173]"
  }, {
    "left" : "EntityForm entityForm",
    "right" : "EntityForm entityForm",
    "info" : "SingleVariableDeclaration[17922-17943]:SingleVariableDeclaration[19199-19220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17945-19413]:Block[19222-20690]"
  }, {
    "left" : "Map<String, Field> dynamicFields = new HashMap<String, Field>();",
    "right" : "Map<String, Field> dynamicFields = new HashMap<String, Field>();",
    "info" : "VariableDeclarationStatement[17955-18019]:VariableDeclarationStatement[19232-19296]"
  }, {
    "left" : "for (Entry<String, Field> entry : entityForm.getFields().entrySet())",
    "right" : "for (Entry<String, Field> entry : entityForm.getFields().entrySet())",
    "info" : "EnhancedForStatement[18084-18330]:EnhancedForStatement[19361-19607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18153-18330]:Block[19430-19607]"
  }, {
    "left" : "if (entry.getKey().contains(DynamicEntityFormInfo.FIELD_SEPARATOR))",
    "right" : "if (entry.getKey().contains(DynamicEntityFormInfo.FIELD_SEPARATOR))",
    "info" : "IfStatement[18167-18320]:IfStatement[19444-19597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18235-18320]:Block[19512-19597]"
  }, {
    "left" : "dynamicFields.put(entry.getKey(), entry.getValue());",
    "right" : "dynamicFields.put(entry.getKey(), entry.getValue());",
    "info" : "ExpressionStatement[18254-18306]:ExpressionStatement[19531-19583]"
  }, {
    "left" : "for (Entry<String, Field> entry : dynamicFields.entrySet())",
    "right" : "for (Entry<String, Field> entry : dynamicFields.entrySet())",
    "info" : "EnhancedForStatement[18443-18566]:EnhancedForStatement[19720-19843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18503-18566]:Block[19780-19843]"
  }, {
    "left" : "entityForm.removeField(entry.getKey());",
    "right" : "entityForm.removeField(entry.getKey());",
    "info" : "ExpressionStatement[18517-18556]:ExpressionStatement[19794-19833]"
  }, {
    "left" : "for (Entry<String, Field> entry : dynamicFields.entrySet())",
    "right" : "for (Entry<String, Field> entry : dynamicFields.entrySet())",
    "info" : "EnhancedForStatement[18679-19407]:EnhancedForStatement[19956-20684]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18739-19407]:Block[20016-20684]"
  }, {
    "left" : "String[] fieldName = entry.getKey().split(\"\\\\\" + DynamicEntityFormInfo.FIELD_SEPARATOR);",
    "right" : "String[] fieldName = entry.getKey().split(\"\\\\\" + DynamicEntityFormInfo.FIELD_SEPARATOR);",
    "info" : "VariableDeclarationStatement[18753-18841]:VariableDeclarationStatement[20030-20118]"
  }, {
    "left" : "DynamicEntityFormInfo info = entityForm.getDynamicFormInfo(fieldName[0]);",
    "right" : "DynamicEntityFormInfo info = entityForm.getDynamicFormInfo(fieldName[0]);",
    "info" : "VariableDeclarationStatement[18854-18927]:VariableDeclarationStatement[20131-20204]"
  }, {
    "left" : "EntityForm dynamicForm = entityForm.getDynamicForm(fieldName[0]);",
    "right" : "EntityForm dynamicForm = entityForm.getDynamicForm(fieldName[0]);",
    "info" : "VariableDeclarationStatement[18961-19026]:VariableDeclarationStatement[20238-20303]"
  }, {
    "left" : "if (dynamicForm == null)",
    "right" : "if (dynamicForm == null)",
    "info" : "IfStatement[19039-19280]:IfStatement[20316-20557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19064-19280]:Block[20341-20557]"
  }, {
    "left" : "dynamicForm = new EntityForm();",
    "right" : "dynamicForm = new EntityForm();",
    "info" : "ExpressionStatement[19082-19113]:ExpressionStatement[20359-20390]"
  }, {
    "left" : "dynamicForm.setCeilingEntityClassname(info.getCeilingClassName());",
    "right" : "dynamicForm.setCeilingEntityClassname(info.getCeilingClassName());",
    "info" : "ExpressionStatement[19130-19196]:ExpressionStatement[20407-20473]"
  }, {
    "left" : "entityForm.putDynamicForm(fieldName[0], dynamicForm);",
    "right" : "entityForm.putDynamicForm(fieldName[0], dynamicForm);",
    "info" : "ExpressionStatement[19213-19266]:ExpressionStatement[20490-20543]"
  }, {
    "left" : "entry.getValue().setName(fieldName[1]);",
    "right" : "entry.getValue().setName(fieldName[1]);",
    "info" : "ExpressionStatement[19306-19345]:ExpressionStatement[20583-20622]"
  }, {
    "left" : "dynamicForm.addField(entry.getValue());",
    "right" : "dynamicForm.addField(entry.getValue());",
    "info" : "ExpressionStatement[19358-19397]:ExpressionStatement[20635-20674]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[20212-20221]:Modifier[21489-21498]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[20222-20228]:SimpleType[21499-21505]"
  }, {
    "left" : "Map<String, String> pathVars",
    "right" : "Map<String, String> pathVars",
    "info" : "SingleVariableDeclaration[20243-20271]:SingleVariableDeclaration[21520-21548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20273-20323]:Block[21550-21600]"
  }, {
    "left" : "return pathVars.get(\"sectionKey\");",
    "right" : "return pathVars.get(\"sectionKey\");",
    "info" : "ReturnStatement[20283-20317]:ReturnStatement[21560-21594]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[21577-21586]:Modifier[22854-22863]"
  }, {
    "left" : "FilterAndSortCriteria[]",
    "right" : "FilterAndSortCriteria[]",
    "info" : "ArrayType[21587-21610]:ArrayType[22864-22887]"
  }, {
    "left" : "Map<String, List<String>> requestParams",
    "right" : "Map<String, List<String>> requestParams",
    "info" : "SingleVariableDeclaration[21623-21662]:SingleVariableDeclaration[22900-22939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21664-24583]:Block[22941-25860]"
  }, {
    "left" : "if (requestParams == null || requestParams.isEmpty())",
    "right" : "if (requestParams == null || requestParams.isEmpty())",
    "info" : "IfStatement[21674-21764]:IfStatement[22951-23041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21728-21764]:Block[23005-23041]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[21742-21754]:ReturnStatement[23019-23031]"
  }, {
    "left" : "List<FilterAndSortCriteria> result = new ArrayList<FilterAndSortCriteria>();",
    "right" : "List<FilterAndSortCriteria> result = new ArrayList<FilterAndSortCriteria>();",
    "info" : "VariableDeclarationStatement[21782-21858]:VariableDeclarationStatement[23059-23135]"
  }, {
    "left" : "for (Entry<String, List<String>> entry : requestParams.entrySet())",
    "right" : "for (Entry<String, List<String>> entry : requestParams.entrySet())",
    "info" : "EnhancedForStatement[21867-23058]:EnhancedForStatement[23144-24335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21934-23058]:Block[23211-24335]"
  }, {
    "left" : "if (!entry.getKey().equals(FilterAndSortCriteria.SORT_PROPERTY_PARAMETER)\n                    && !entry.getKey().equals(FilterAndSortCriteria.SORT_DIRECTION_PARAMETER)\n                    && !entry.getKey().equals(FilterAndSortCriteria.MAX_INDEX_PARAMETER)\n                    && !entry.getKey().equals(FilterAndSortCriteria.START_INDEX_PARAMETER))",
    "right" : "if (!entry.getKey().equals(FilterAndSortCriteria.SORT_PROPERTY_PARAMETER)\n                    && !entry.getKey().equals(FilterAndSortCriteria.SORT_DIRECTION_PARAMETER)\n                    && !entry.getKey().equals(FilterAndSortCriteria.MAX_INDEX_PARAMETER)\n                    && !entry.getKey().equals(FilterAndSortCriteria.START_INDEX_PARAMETER))",
    "info" : "IfStatement[21948-23048]:IfStatement[23225-24325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22297-23048]:Block[23574-24325]"
  }, {
    "left" : "List<String> values = entry.getValue();",
    "right" : "List<String> values = entry.getValue();",
    "info" : "VariableDeclarationStatement[22315-22354]:VariableDeclarationStatement[23592-23631]"
  }, {
    "left" : "List<String> collapsedValues = new ArrayList<String>();",
    "right" : "List<String> collapsedValues = new ArrayList<String>();",
    "info" : "VariableDeclarationStatement[22371-22426]:VariableDeclarationStatement[23648-23703]"
  }, {
    "left" : "for (String value : values)",
    "right" : "for (String value : values)",
    "info" : "EnhancedForStatement[22443-22864]:EnhancedForStatement[23720-24141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22471-22864]:Block[23748-24141]"
  }, {
    "left" : "if (value.contains(FILTER_VALUE_SEPARATOR))",
    "right" : "if (value.contains(FILTER_VALUE_SEPARATOR))",
    "info" : "IfStatement[22493-22846]:IfStatement[23770-24123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22537-22765]:Block[23814-24042]"
  }, {
    "left" : "String[] vs = value.split(FILTER_VALUE_SEPARATOR_REGEX);",
    "right" : "String[] vs = value.split(FILTER_VALUE_SEPARATOR_REGEX);",
    "info" : "VariableDeclarationStatement[22563-22619]:VariableDeclarationStatement[23840-23896]"
  }, {
    "left" : "for (String v : vs)",
    "right" : "for (String v : vs)",
    "info" : "EnhancedForStatement[22644-22743]:EnhancedForStatement[23921-24020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22664-22743]:Block[23941-24020]"
  }, {
    "left" : "collapsedValues.add(v);",
    "right" : "collapsedValues.add(v);",
    "info" : "ExpressionStatement[22694-22717]:ExpressionStatement[23971-23994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22771-22846]:Block[24048-24123]"
  }, {
    "left" : "collapsedValues.add(value);",
    "right" : "collapsedValues.add(value);",
    "info" : "ExpressionStatement[22797-22824]:ExpressionStatement[24074-24101]"
  }, {
    "left" : "FilterAndSortCriteria fasCriteria = new FilterAndSortCriteria(entry.getKey(), collapsedValues);",
    "right" : "FilterAndSortCriteria fasCriteria = new FilterAndSortCriteria(entry.getKey(), collapsedValues);",
    "info" : "VariableDeclarationStatement[22898-22993]:VariableDeclarationStatement[24175-24270]"
  }, {
    "left" : "result.add(fasCriteria);",
    "right" : "result.add(fasCriteria);",
    "info" : "ExpressionStatement[23010-23034]:ExpressionStatement[24287-24311]"
  }, {
    "left" : "List<String> sortProperties = getSortPropertyNames(requestParams);",
    "right" : "List<String> sortProperties = getSortPropertyNames(requestParams);",
    "info" : "VariableDeclarationStatement[23068-23134]:VariableDeclarationStatement[24345-24411]"
  }, {
    "left" : "List<String> sortDirections = getSortDirections(requestParams);",
    "right" : "List<String> sortDirections = getSortDirections(requestParams);",
    "info" : "VariableDeclarationStatement[23143-23206]:VariableDeclarationStatement[24420-24483]"
  }, {
    "left" : "if (CollectionUtils.isNotEmpty(sortProperties))",
    "right" : "if (CollectionUtils.isNotEmpty(sortProperties))",
    "info" : "IfStatement[23215-24495]:IfStatement[24492-25772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23263-24495]:Block[24540-25772]"
  }, {
    "left" : "Map<String, FilterAndSortCriteria> fasMap = BLCMapUtils.keyedMap(result, new TypedClosure<String, FilterAndSortCriteria>() {\n    \n                @Override\n                public String getKey(FilterAndSortCriteria value) {\n                    return value.getPropertyId();\n                }\n            });",
    "right" : "Map<String, FilterAndSortCriteria> fasMap = BLCMapUtils.keyedMap(result, new TypedClosure<String, FilterAndSortCriteria>() {\n    \n                @Override\n                public String getKey(FilterAndSortCriteria value) {\n                    return value.getPropertyId();\n                }\n            });",
    "info" : "VariableDeclarationStatement[23377-23684]:VariableDeclarationStatement[24654-24961]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[23523-23532]:MarkerAnnotation[24800-24809]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23549-23555]:Modifier[24826-24832]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[23556-23562]:SimpleType[24833-24839]"
  }, {
    "left" : "FilterAndSortCriteria value",
    "right" : "FilterAndSortCriteria value",
    "info" : "SingleVariableDeclaration[23570-23597]:SingleVariableDeclaration[24847-24874]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23599-23668]:Block[24876-24945]"
  }, {
    "left" : "return value.getPropertyId();",
    "right" : "return value.getPropertyId();",
    "info" : "ReturnStatement[23621-23650]:ReturnStatement[24898-24927]"
  }, {
    "left" : "for (int i = 0; i < sortProperties.size(); i++)",
    "right" : "for (int i = 0; i < sortProperties.size(); i++)",
    "info" : "ForStatement[23697-24485]:ForStatement[24974-25762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23745-24485]:Block[25022-25762]"
  }, {
    "left" : "boolean sortAscending = SortDirection.ASCENDING.toString().equals(sortDirections.get(i));",
    "right" : "boolean sortAscending = SortDirection.ASCENDING.toString().equals(sortDirections.get(i));",
    "info" : "VariableDeclarationStatement[23763-23852]:VariableDeclarationStatement[25040-25129]"
  }, {
    "left" : "FilterAndSortCriteria propertyCriteria = fasMap.get(sortProperties.get(i));",
    "right" : "FilterAndSortCriteria propertyCriteria = fasMap.get(sortProperties.get(i));",
    "info" : "VariableDeclarationStatement[23869-23944]:VariableDeclarationStatement[25146-25221]"
  }, {
    "left" : "if (propertyCriteria != null)",
    "right" : "if (propertyCriteria != null)",
    "info" : "IfStatement[24132-24471]:IfStatement[25409-25748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24162-24251]:Block[25439-25528]"
  }, {
    "left" : "propertyCriteria.setSortAscending(sortAscending);",
    "right" : "propertyCriteria.setSortAscending(sortAscending);",
    "info" : "ExpressionStatement[24184-24233]:ExpressionStatement[25461-25510]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24257-24471]:Block[25534-25748]"
  }, {
    "left" : "FilterAndSortCriteria fasc = new FilterAndSortCriteria(sortProperties.get(i));",
    "right" : "FilterAndSortCriteria fasc = new FilterAndSortCriteria(sortProperties.get(i));",
    "info" : "VariableDeclarationStatement[24279-24357]:VariableDeclarationStatement[25556-25634]"
  }, {
    "left" : "fasc.setSortAscending(sortAscending);",
    "right" : "fasc.setSortAscending(sortAscending);",
    "info" : "ExpressionStatement[24378-24415]:ExpressionStatement[25655-25692]"
  }, {
    "left" : "result.add(fasc);",
    "right" : "result.add(fasc);",
    "info" : "ExpressionStatement[24436-24453]:ExpressionStatement[25713-25730]"
  }, {
    "left" : "return result.toArray(new FilterAndSortCriteria[result.size()]);",
    "right" : "return result.toArray(new FilterAndSortCriteria[result.size()]);",
    "info" : "ReturnStatement[24513-24577]:ReturnStatement[25790-25854]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[24840-24849]:Modifier[26117-26126]"
  }, {
    "left" : "List<String>",
    "right" : "List<String>",
    "info" : "ParameterizedType[24850-24862]:ParameterizedType[26127-26139]"
  }, {
    "left" : "Map<String, List<String>> requestParams",
    "right" : "Map<String, List<String>> requestParams",
    "info" : "SingleVariableDeclaration[24881-24920]:SingleVariableDeclaration[26158-26197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24922-25055]:Block[26199-26332]"
  }, {
    "left" : "List<String> sortTypes = requestParams.get(FilterAndSortCriteria.SORT_DIRECTION_PARAMETER);",
    "right" : "List<String> sortTypes = requestParams.get(FilterAndSortCriteria.SORT_DIRECTION_PARAMETER);",
    "info" : "VariableDeclarationStatement[24932-25023]:VariableDeclarationStatement[26209-26300]"
  }, {
    "left" : "return sortTypes;",
    "right" : "return sortTypes;",
    "info" : "ReturnStatement[25032-25049]:ReturnStatement[26309-26326]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[25320-25329]:Modifier[26597-26606]"
  }, {
    "left" : "List<String>",
    "right" : "List<String>",
    "info" : "ParameterizedType[25330-25342]:ParameterizedType[26607-26619]"
  }, {
    "left" : "Map<String, List<String>> requestParams",
    "right" : "Map<String, List<String>> requestParams",
    "info" : "SingleVariableDeclaration[25364-25403]:SingleVariableDeclaration[26641-26680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25405-25493]:Block[26682-26770]"
  }, {
    "left" : "return requestParams.get(FilterAndSortCriteria.SORT_PROPERTY_PARAMETER);",
    "right" : "return requestParams.get(FilterAndSortCriteria.SORT_PROPERTY_PARAMETER);",
    "info" : "ReturnStatement[25415-25487]:ReturnStatement[26692-26764]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[26036-26045]:Modifier[27313-27322]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[26046-26052]:SimpleType[27323-27329]"
  }, {
    "left" : "String sectionKey",
    "right" : "String sectionKey",
    "info" : "SingleVariableDeclaration[26076-26093]:SingleVariableDeclaration[27353-27370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26095-26686]:Block[27372-27963]"
  }, {
    "left" : "AdminSection section = adminNavigationService.findAdminSectionByURI(\"/\" + sectionKey);",
    "right" : "AdminSection section = adminNavigationService.findAdminSectionByURI(\"/\" + sectionKey);",
    "info" : "VariableDeclarationStatement[26105-26191]:VariableDeclarationStatement[27382-27468]"
  }, {
    "left" : "ExtensionResultHolder erh = new ExtensionResultHolder();",
    "right" : "ExtensionResultHolder erh = new ExtensionResultHolder();",
    "info" : "VariableDeclarationStatement[26209-26265]:VariableDeclarationStatement[27486-27542]"
  }, {
    "left" : "extensionManager.getProxy().overrideClassNameForSection(erh, sectionKey, section);",
    "right" : "extensionManager.getProxy().overrideClassNameForSection(erh, sectionKey, section);",
    "info" : "ExpressionStatement[26274-26356]:ExpressionStatement[27551-27633]"
  }, {
    "left" : "if (erh.getContextMap().get(AbstractAdminAbstractControllerExtensionHandler.NEW_CLASS_NAME) != null)",
    "right" : "if (erh.getContextMap().get(AbstractAdminAbstractControllerExtensionHandler.NEW_CLASS_NAME) != null)",
    "info" : "IfStatement[26365-26595]:IfStatement[27642-27872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26466-26595]:Block[27743-27872]"
  }, {
    "left" : "return (String) erh.getContextMap().get(AbstractAdminAbstractControllerExtensionHandler.NEW_CLASS_NAME);",
    "right" : "return (String) erh.getContextMap().get(AbstractAdminAbstractControllerExtensionHandler.NEW_CLASS_NAME);",
    "info" : "ReturnStatement[26480-26584]:ReturnStatement[27757-27861]"
  }, {
    "left" : "return (section == null) ? sectionKey : section.getCeilingEntity();",
    "right" : "return (section == null) ? sectionKey : section.getCeilingEntity();",
    "info" : "ReturnStatement[26613-26680]:ReturnStatement[27890-27957]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[27035-27044]:Modifier[28312-28321]"
  }, {
    "left" : "List<ClassTree>",
    "right" : "List<ClassTree>",
    "info" : "ParameterizedType[27045-27060]:ParameterizedType[28322-28337]"
  }, {
    "left" : "ClassTree classTree",
    "right" : "ClassTree classTree",
    "info" : "SingleVariableDeclaration[27079-27098]:SingleVariableDeclaration[28356-28375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27100-27158]:Block[28377-28435]"
  }, {
    "left" : "return classTree.getCollapsedClassTrees();",
    "right" : "return classTree.getCollapsedClassTrees();",
    "info" : "ReturnStatement[27110-27152]:ReturnStatement[28387-28429]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[27685-27694]:Modifier[28962-28971]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[27695-27701]:SimpleType[28972-28978]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27725-27753]:Block[29002-29030]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[27735-27747]:ReturnStatement[29012-29024]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[28038-28047]:Modifier[29315-29324]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[28048-28056]:ArrayType[29325-29333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28084-28112]:Block[29361-29389]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[28094-28106]:ReturnStatement[29371-29383]"
  }, {
    "left" : "@Deprecated",
    "right" : "@Deprecated",
    "info" : "MarkerAnnotation[28236-28247]:MarkerAnnotation[29513-29524]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[28252-28261]:Modifier[29529-29538]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28262-28266]:PrimitiveType[29539-29543]"
  }, {
    "left" : "PersistencePackageRequest ppr",
    "right" : "PersistencePackageRequest ppr",
    "info" : "SingleVariableDeclaration[28293-28322]:SingleVariableDeclaration[29570-29599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28324-28340]:Block[29601-29617]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[28593-28602]:Modifier[29870-29879]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28603-28607]:PrimitiveType[29880-29884]"
  }, {
    "left" : "EntityForm entityForm",
    "right" : "EntityForm entityForm",
    "info" : "SingleVariableDeclaration[28625-28646]:SingleVariableDeclaration[29902-29923]"
  }, {
    "left" : "Map<String, String> pathVars",
    "right" : "Map<String, String> pathVars",
    "info" : "SingleVariableDeclaration[28648-28676]:SingleVariableDeclaration[29925-29953]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28678-28694]:Block[29955-29971]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[28851-28860]:Modifier[30128-30137]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28861-28865]:PrimitiveType[30138-30142]"
  }, {
    "left" : "EntityForm entityForm",
    "right" : "EntityForm entityForm",
    "info" : "SingleVariableDeclaration[28886-28907]:SingleVariableDeclaration[30163-30184]"
  }, {
    "left" : "Map<String, String> pathVars",
    "right" : "Map<String, String> pathVars",
    "info" : "SingleVariableDeclaration[28909-28937]:SingleVariableDeclaration[30186-30214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28939-28955]:Block[30216-30232]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[29263-29272]:Modifier[30540-30549]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29273-29277]:PrimitiveType[30550-30554]"
  }, {
    "left" : "PersistencePackageRequest ppr",
    "right" : "PersistencePackageRequest ppr",
    "info" : "SingleVariableDeclaration[29304-29333]:SingleVariableDeclaration[30581-30610]"
  }, {
    "left" : "Map<String, String> pathVars",
    "right" : "Map<String, String> pathVars",
    "info" : "SingleVariableDeclaration[29335-29363]:SingleVariableDeclaration[30612-30640]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29365-29412]:Block[30642-30689]"
  }, {
    "left" : "attachSectionSpecificInfo(ppr);",
    "right" : "attachSectionSpecificInfo(ppr);",
    "info" : "ExpressionStatement[29375-29406]:ExpressionStatement[30652-30683]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[29536-29545]:Modifier[30813-30822]"
  }, {
    "left" : "Integer",
    "right" : "Integer",
    "info" : "SimpleType[29546-29553]:SimpleType[30823-30830]"
  }, {
    "left" : "Map<String, List<String>> requestParams",
    "right" : "Map<String, List<String>> requestParams",
    "info" : "SingleVariableDeclaration[29568-29607]:SingleVariableDeclaration[30845-30884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29609-29919]:Block[30886-31196]"
  }, {
    "left" : "if (requestParams == null || requestParams.isEmpty())",
    "right" : "if (requestParams == null || requestParams.isEmpty())",
    "info" : "IfStatement[29619-29709]:IfStatement[30896-30986]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29673-29709]:Block[30950-30986]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[29687-29699]:ReturnStatement[30964-30976]"
  }, {
    "left" : "List<String> startIndex = requestParams.get(FilterAndSortCriteria.START_INDEX_PARAMETER);",
    "right" : "List<String> startIndex = requestParams.get(FilterAndSortCriteria.START_INDEX_PARAMETER);",
    "info" : "VariableDeclarationStatement[29727-29816]:VariableDeclarationStatement[31004-31093]"
  }, {
    "left" : "return CollectionUtils.isEmpty(startIndex) ? null : Integer.parseInt(startIndex.get(0));",
    "right" : "return CollectionUtils.isEmpty(startIndex) ? null : Integer.parseInt(startIndex.get(0));",
    "info" : "ReturnStatement[29825-29913]:ReturnStatement[31102-31190]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[30045-30054]:Modifier[31322-31331]"
  }, {
    "left" : "Integer",
    "right" : "Integer",
    "info" : "SimpleType[30055-30062]:SimpleType[31332-31339]"
  }, {
    "left" : "Map<String, List<String>> requestParams",
    "right" : "Map<String, List<String>> requestParams",
    "info" : "SingleVariableDeclaration[30075-30114]:SingleVariableDeclaration[31352-31391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30116-30418]:Block[31393-31695]"
  }, {
    "left" : "if (requestParams == null || requestParams.isEmpty())",
    "right" : "if (requestParams == null || requestParams.isEmpty())",
    "info" : "IfStatement[30126-30216]:IfStatement[31403-31493]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30180-30216]:Block[31457-31493]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[30194-30206]:ReturnStatement[31471-31483]"
  }, {
    "left" : "List<String> maxIndex = requestParams.get(FilterAndSortCriteria.MAX_INDEX_PARAMETER);",
    "right" : "List<String> maxIndex = requestParams.get(FilterAndSortCriteria.MAX_INDEX_PARAMETER);",
    "info" : "VariableDeclarationStatement[30234-30319]:VariableDeclarationStatement[31511-31596]"
  }, {
    "left" : "return CollectionUtils.isEmpty(maxIndex) ? null : Integer.parseInt(maxIndex.get(0));",
    "right" : "return CollectionUtils.isEmpty(maxIndex) ? null : Integer.parseInt(maxIndex.get(0));",
    "info" : "ReturnStatement[30328-30412]:ReturnStatement[31605-31689]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[30653-30662]:Modifier[31930-31939]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[30663-30667]:PrimitiveType[31940-31944]"
  }, {
    "left" : "Model model",
    "right" : "Model model",
    "info" : "SingleVariableDeclaration[30687-30698]:SingleVariableDeclaration[31964-31975]"
  }, {
    "left" : "String sectionKey",
    "right" : "String sectionKey",
    "info" : "SingleVariableDeclaration[30700-30717]:SingleVariableDeclaration[31977-31994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30719-31184]:Block[31996-32461]"
  }, {
    "left" : "AdminSection section = adminNavigationService.findAdminSectionByURI(\"/\" + sectionKey);",
    "right" : "AdminSection section = adminNavigationService.findAdminSectionByURI(\"/\" + sectionKey);",
    "info" : "VariableDeclarationStatement[30729-30815]:VariableDeclarationStatement[32006-32092]"
  }, {
    "left" : "if (section != null)",
    "right" : "if (section != null)",
    "info" : "IfStatement[30825-31084]:IfStatement[32102-32361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30846-31084]:Block[32123-32361]"
  }, {
    "left" : "model.addAttribute(\"sectionKey\", sectionKey);",
    "right" : "model.addAttribute(\"sectionKey\", sectionKey);",
    "info" : "ExpressionStatement[30860-30905]:ExpressionStatement[32137-32182]"
  }, {
    "left" : "model.addAttribute(CURRENT_ADMIN_MODULE_ATTRIBUTE_NAME, section.getModule());",
    "right" : "model.addAttribute(CURRENT_ADMIN_MODULE_ATTRIBUTE_NAME, section.getModule());",
    "info" : "ExpressionStatement[30918-30995]:ExpressionStatement[32195-32272]"
  }, {
    "left" : "model.addAttribute(CURRENT_ADMIN_SECTION_ATTRIBUTE_NAME, section);",
    "right" : "model.addAttribute(CURRENT_ADMIN_SECTION_ATTRIBUTE_NAME, section);",
    "info" : "ExpressionStatement[31008-31074]:ExpressionStatement[32285-32351]"
  }, {
    "left" : "extensionManager.getProxy().setAdditionalModelAttributes(model, sectionKey);",
    "right" : "extensionManager.getProxy().setAdditionalModelAttributes(model, sectionKey);",
    "info" : "ExpressionStatement[31102-31178]:ExpressionStatement[32379-32455]"
  }, {
    "left" : "@Deprecated",
    "right" : "@Deprecated",
    "info" : "MarkerAnnotation[31301-31312]:MarkerAnnotation[32578-32589]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[31317-31326]:Modifier[32594-32603]"
  }, {
    "left" : "PersistencePackageRequest",
    "right" : "PersistencePackageRequest",
    "info" : "SimpleType[31327-31352]:SimpleType[32604-32629]"
  }, {
    "left" : "String sectionClassName",
    "right" : "String sectionClassName",
    "info" : "SingleVariableDeclaration[31389-31412]:SingleVariableDeclaration[32666-32689]"
  }, {
    "left" : "List<SectionCrumb> sectionCrumbs",
    "right" : "List<SectionCrumb> sectionCrumbs",
    "info" : "SingleVariableDeclaration[31414-31446]:SingleVariableDeclaration[32691-32723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31448-31546]:Block[32725-32823]"
  }, {
    "left" : "return getSectionPersistencePackageRequest(sectionClassName, sectionCrumbs, null);",
    "right" : "return getSectionPersistencePackageRequest(sectionClassName, sectionCrumbs, null);",
    "info" : "ReturnStatement[31458-31540]:ReturnStatement[32735-32817]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[31982-31991]:Modifier[33259-33268]"
  }, {
    "left" : "PersistencePackageRequest",
    "right" : "PersistencePackageRequest",
    "info" : "SimpleType[31992-32017]:SimpleType[33269-33294]"
  }, {
    "left" : "String sectionClassName",
    "right" : "String sectionClassName",
    "info" : "SingleVariableDeclaration[32054-32077]:SingleVariableDeclaration[33331-33354]"
  }, {
    "left" : "List<SectionCrumb> sectionCrumbs",
    "right" : "List<SectionCrumb> sectionCrumbs",
    "info" : "SingleVariableDeclaration[32092-32124]:SingleVariableDeclaration[33369-33401]"
  }, {
    "left" : "Map<String, String> pathVars",
    "right" : "Map<String, String> pathVars",
    "info" : "SingleVariableDeclaration[32126-32154]:SingleVariableDeclaration[33403-33431]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32156-32497]:Block[33433-33774]"
  }, {
    "left" : "PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(sectionClassName)\n                .withCustomCriteria(getSectionCustomCriteria())\n                .withSectionCrumbs(sectionCrumbs);",
    "right" : "PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(sectionClassName)\n                .withCustomCriteria(getSectionCustomCriteria())\n                .withSectionCrumbs(sectionCrumbs);",
    "info" : "VariableDeclarationStatement[32166-32411]:VariableDeclarationStatement[33443-33688]"
  }, {
    "left" : "attachSectionSpecificInfo(ppr, pathVars);",
    "right" : "attachSectionSpecificInfo(ppr, pathVars);",
    "info" : "ExpressionStatement[32421-32462]:ExpressionStatement[33698-33739]"
  }, {
    "left" : "return ppr;",
    "right" : "return ppr;",
    "info" : "ReturnStatement[32480-32491]:ReturnStatement[33757-33768]"
  }, {
    "left" : "@Deprecated",
    "right" : "@Deprecated",
    "info" : "MarkerAnnotation[32629-32640]:MarkerAnnotation[33906-33917]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[32645-32654]:Modifier[33922-33931]"
  }, {
    "left" : "PersistencePackageRequest",
    "right" : "PersistencePackageRequest",
    "info" : "SimpleType[32655-32680]:SimpleType[33932-33957]"
  }, {
    "left" : "String sectionClassName",
    "right" : "String sectionClassName",
    "info" : "SingleVariableDeclaration[32717-32740]:SingleVariableDeclaration[33994-34017]"
  }, {
    "left" : "MultiValueMap<String, String> requestParams",
    "right" : "MultiValueMap<String, String> requestParams",
    "info" : "SingleVariableDeclaration[32755-32798]:SingleVariableDeclaration[34032-34075]"
  }, {
    "left" : "List<SectionCrumb> sectionCrumbs",
    "right" : "List<SectionCrumb> sectionCrumbs",
    "info" : "SingleVariableDeclaration[32800-32832]:SingleVariableDeclaration[34077-34109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32834-32947]:Block[34111-34224]"
  }, {
    "left" : "return getSectionPersistencePackageRequest(sectionClassName, requestParams, sectionCrumbs, null);",
    "right" : "return getSectionPersistencePackageRequest(sectionClassName, requestParams, sectionCrumbs, null);",
    "info" : "ReturnStatement[32844-32941]:ReturnStatement[34121-34218]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[33244-33253]:Modifier[34521-34530]"
  }, {
    "left" : "PersistencePackageRequest",
    "right" : "PersistencePackageRequest",
    "info" : "SimpleType[33254-33279]:SimpleType[34531-34556]"
  }, {
    "left" : "String sectionClassName",
    "right" : "String sectionClassName",
    "info" : "SingleVariableDeclaration[33316-33339]:SingleVariableDeclaration[34593-34616]"
  }, {
    "left" : "MultiValueMap<String, String> requestParams",
    "right" : "MultiValueMap<String, String> requestParams",
    "info" : "SingleVariableDeclaration[33354-33397]:SingleVariableDeclaration[34631-34674]"
  }, {
    "left" : "List<SectionCrumb> sectionCrumbs",
    "right" : "List<SectionCrumb> sectionCrumbs",
    "info" : "SingleVariableDeclaration[33399-33431]:SingleVariableDeclaration[34676-34708]"
  }, {
    "left" : "Map<String, String> pathVars",
    "right" : "Map<String, String> pathVars",
    "info" : "SingleVariableDeclaration[33433-33461]:SingleVariableDeclaration[34710-34738]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33463-34034]:Block[34740-35311]"
  }, {
    "left" : "FilterAndSortCriteria[] fascs = getCriteria(requestParams);",
    "right" : "FilterAndSortCriteria[] fascs = getCriteria(requestParams);",
    "info" : "VariableDeclarationStatement[33473-33532]:VariableDeclarationStatement[34750-34809]"
  }, {
    "left" : "PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(sectionClassName)\n                .withCustomCriteria(getSectionCustomCriteria())\n                .withFilterAndSortCriteria(fascs)\n                .withStartIndex(getStartIndex(requestParams))\n                .withMaxIndex(getMaxIndex(requestParams))\n                .withSectionCrumbs(sectionCrumbs);",
    "right" : "PersistencePackageRequest ppr = PersistencePackageRequest.standard()\n                .withCeilingEntityClassname(sectionClassName)\n                .withCustomCriteria(getSectionCustomCriteria())\n                .withFilterAndSortCriteria(fascs)\n                .withStartIndex(getStartIndex(requestParams))\n                .withMaxIndex(getMaxIndex(requestParams))\n                .withSectionCrumbs(sectionCrumbs);",
    "info" : "VariableDeclarationStatement[33541-33956]:VariableDeclarationStatement[34818-35233]"
  }, {
    "left" : "attachSectionSpecificInfo(ppr, pathVars);",
    "right" : "attachSectionSpecificInfo(ppr, pathVars);",
    "info" : "ExpressionStatement[33966-34007]:ExpressionStatement[35243-35284]"
  }, {
    "left" : "return ppr;",
    "right" : "return ppr;",
    "info" : "ReturnStatement[34017-34028]:ReturnStatement[35294-35305]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[34040-34049]:Modifier[35317-35326]"
  }, {
    "left" : "List<SectionCrumb>",
    "right" : "List<SectionCrumb>",
    "info" : "ParameterizedType[34050-34068]:ParameterizedType[35327-35345]"
  }, {
    "left" : "HttpServletRequest request",
    "right" : "HttpServletRequest request",
    "info" : "SingleVariableDeclaration[34086-34112]:SingleVariableDeclaration[35363-35389]"
  }, {
    "left" : "String currentSection",
    "right" : "String currentSection",
    "info" : "SingleVariableDeclaration[34114-34135]:SingleVariableDeclaration[35391-35412]"
  }, {
    "left" : "String currentSectionId",
    "right" : "String currentSectionId",
    "info" : "SingleVariableDeclaration[34137-34160]:SingleVariableDeclaration[35414-35437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34162-35308]:Block[35439-36585]"
  }, {
    "left" : "String crumbs = request.getParameter(\"sectionCrumbs\");",
    "right" : "String crumbs = request.getParameter(\"sectionCrumbs\");",
    "info" : "VariableDeclarationStatement[34172-34226]:VariableDeclarationStatement[35449-35503]"
  }, {
    "left" : "List<SectionCrumb> myCrumbs = new ArrayList<SectionCrumb>();",
    "right" : "List<SectionCrumb> myCrumbs = new ArrayList<SectionCrumb>();",
    "info" : "VariableDeclarationStatement[34235-34295]:VariableDeclarationStatement[35512-35572]"
  }, {
    "left" : "if (!StringUtils.isEmpty(crumbs))",
    "right" : "if (!StringUtils.isEmpty(crumbs))",
    "info" : "IfStatement[34304-34795]:IfStatement[35581-36072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34338-34795]:Block[35615-36072]"
  }, {
    "left" : "String[] crumbParts = crumbs.split(\",\");",
    "right" : "String[] crumbParts = crumbs.split(\",\");",
    "info" : "VariableDeclarationStatement[34352-34392]:VariableDeclarationStatement[35629-35669]"
  }, {
    "left" : "for (String part : crumbParts)",
    "right" : "for (String part : crumbParts)",
    "info" : "EnhancedForStatement[34405-34785]:EnhancedForStatement[35682-36062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34436-34785]:Block[35713-36062]"
  }, {
    "left" : "SectionCrumb crumb = new SectionCrumb();",
    "right" : "SectionCrumb crumb = new SectionCrumb();",
    "info" : "VariableDeclarationStatement[34454-34494]:VariableDeclarationStatement[35731-35771]"
  }, {
    "left" : "String[] crumbPieces = part.split(\"--\");",
    "right" : "String[] crumbPieces = part.split(\"--\");",
    "info" : "VariableDeclarationStatement[34511-34551]:VariableDeclarationStatement[35788-35828]"
  }, {
    "left" : "crumb.setSectionIdentifier(crumbPieces[0]);",
    "right" : "crumb.setSectionIdentifier(crumbPieces[0]);",
    "info" : "ExpressionStatement[34568-34611]:ExpressionStatement[35845-35888]"
  }, {
    "left" : "crumb.setSectionId(crumbPieces[1]);",
    "right" : "crumb.setSectionId(crumbPieces[1]);",
    "info" : "ExpressionStatement[34628-34663]:ExpressionStatement[35905-35940]"
  }, {
    "left" : "if (!myCrumbs.contains(crumb))",
    "right" : "if (!myCrumbs.contains(crumb))",
    "info" : "IfStatement[34680-34771]:IfStatement[35957-36048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34711-34771]:Block[35988-36048]"
  }, {
    "left" : "myCrumbs.add(crumb);",
    "right" : "myCrumbs.add(crumb);",
    "info" : "ExpressionStatement[34733-34753]:ExpressionStatement[36010-36030]"
  }, {
    "left" : "if (currentSection != null && currentSectionId != null)",
    "right" : "if (currentSection != null && currentSectionId != null)",
    "info" : "IfStatement[34804-35277]:IfStatement[36081-36554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34860-35277]:Block[36137-36554]"
  }, {
    "left" : "SectionCrumb crumb = new SectionCrumb();",
    "right" : "SectionCrumb crumb = new SectionCrumb();",
    "info" : "VariableDeclarationStatement[34874-34914]:VariableDeclarationStatement[36151-36191]"
  }, {
    "left" : "if (currentSection.startsWith(\"/\"))",
    "right" : "if (currentSection.startsWith(\"/\"))",
    "info" : "IfStatement[34927-35065]:IfStatement[36204-36342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34963-35065]:Block[36240-36342]"
  }, {
    "left" : "currentSection = currentSection.substring(1, currentSection.length());",
    "right" : "currentSection = currentSection.substring(1, currentSection.length());",
    "info" : "ExpressionStatement[34981-35051]:ExpressionStatement[36258-36328]"
  }, {
    "left" : "crumb.setSectionIdentifier(currentSection);",
    "right" : "crumb.setSectionIdentifier(currentSection);",
    "info" : "ExpressionStatement[35078-35121]:ExpressionStatement[36355-36398]"
  }, {
    "left" : "crumb.setSectionId(currentSectionId);",
    "right" : "crumb.setSectionId(currentSectionId);",
    "info" : "ExpressionStatement[35134-35171]:ExpressionStatement[36411-36448]"
  }, {
    "left" : "if (!myCrumbs.contains(crumb))",
    "right" : "if (!myCrumbs.contains(crumb))",
    "info" : "IfStatement[35184-35267]:IfStatement[36461-36544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35215-35267]:Block[36492-36544]"
  }, {
    "left" : "myCrumbs.add(crumb);",
    "right" : "myCrumbs.add(crumb);",
    "info" : "ExpressionStatement[35233-35253]:ExpressionStatement[36510-36530]"
  }, {
    "left" : "return myCrumbs;",
    "right" : "return myCrumbs;",
    "info" : "ReturnStatement[35286-35302]:ReturnStatement[36563-36579]"
  } ]
}