{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DOMNodePointer",
      "right" : "DOMNodePointer",
      "info" : "TypeDeclaration[2030-28761]:TypeDeclaration[2030-28674]"
    }, {
      "left" : "private static final long serialVersionUID = -8751046933894857319L;",
      "right" : "private static final long serialVersionUID = -8751046933894857319L;",
      "info" : "FieldDeclaration[2194-2261]:FieldDeclaration[2194-2261]"
    }, {
      "left" : "private Node node;",
      "right" : "private Node node;",
      "info" : "FieldDeclaration[2267-2285]:FieldDeclaration[2267-2285]"
    }, {
      "left" : "private Map namespaces;",
      "right" : "private Map namespaces;",
      "info" : "FieldDeclaration[2290-2313]:FieldDeclaration[2290-2313]"
    }, {
      "left" : "private String defaultNamespace;",
      "right" : "private String defaultNamespace;",
      "info" : "FieldDeclaration[2318-2350]:FieldDeclaration[2318-2350]"
    }, {
      "left" : "private String id;",
      "right" : "private String id;",
      "info" : "FieldDeclaration[2355-2373]:FieldDeclaration[2355-2373]"
    }, {
      "left" : "private NamespaceResolver localNamespaceResolver;",
      "right" : "private NamespaceResolver localNamespaceResolver;",
      "info" : "FieldDeclaration[2378-2427]:FieldDeclaration[2378-2427]"
    }, {
      "left" : "public static final String XML_NAMESPACE_URI =\n            \"http://www.w3.org/XML/1998/namespace\";",
      "right" : "public static final String XML_NAMESPACE_URI =\n            \"http://www.w3.org/XML/1998/namespace\";",
      "info" : "FieldDeclaration[2433-2560]:FieldDeclaration[2433-2560]"
    }, {
      "left" : "public static final String XMLNS_NAMESPACE_URI =\n            \"http://www.w3.org/2000/xmlns/\";",
      "right" : "public static final String XMLNS_NAMESPACE_URI =\n            \"http://www.w3.org/2000/xmlns/\";",
      "info" : "FieldDeclaration[2566-2690]:FieldDeclaration[2566-2690]"
    }, {
      "left" : "public DOMNodePointer(Node node, Locale locale)",
      "right" : "public DOMNodePointer(Node node, Locale locale)",
      "info" : "MethodDeclaration[2696-2916]:MethodDeclaration[2696-2916]"
    }, {
      "left" : "public DOMNodePointer(Node node, Locale locale, String id)",
      "right" : "public DOMNodePointer(Node node, Locale locale, String id)",
      "info" : "MethodDeclaration[2922-3202]:MethodDeclaration[2922-3202]"
    }, {
      "left" : "public DOMNodePointer(NodePointer parent, Node node)",
      "right" : "public DOMNodePointer(NodePointer parent, Node node)",
      "info" : "MethodDeclaration[3208-3425]:MethodDeclaration[3208-3425]"
    }, {
      "left" : "public boolean testNode(NodeTest test)",
      "right" : "public boolean testNode(NodeTest test)",
      "info" : "MethodDeclaration[3431-3551]:MethodDeclaration[3431-3551]"
    }, {
      "left" : "public static boolean testNode(Node node, NodeTest test)",
      "right" : "public static boolean testNode(Node node, NodeTest test)",
      "info" : "MethodDeclaration[3557-5890]:MethodDeclaration[3557-5803]"
    }, {
      "left" : "private static boolean equalStrings(String s1, String s2)",
      "right" : "private static boolean equalStrings(String s1, String s2)",
      "info" : "MethodDeclaration[5896-6270]:MethodDeclaration[5809-6183]"
    }, {
      "left" : "public QName getName()",
      "right" : "public QName getName()",
      "info" : "MethodDeclaration[6276-6752]:MethodDeclaration[6189-6665]"
    }, {
      "left" : "public String getNamespaceURI()",
      "right" : "public String getNamespaceURI()",
      "info" : "MethodDeclaration[6758-6872]:MethodDeclaration[6671-6785]"
    }, {
      "left" : "public NodeIterator childIterator(\n        NodeTest test,\n        boolean reverse,\n        NodePointer startWith)",
      "right" : "public NodeIterator childIterator(\n        NodeTest test,\n        boolean reverse,\n        NodePointer startWith)",
      "info" : "MethodDeclaration[6878-7108]:MethodDeclaration[6791-7021]"
    }, {
      "left" : "public NodeIterator attributeIterator(QName name)",
      "right" : "public NodeIterator attributeIterator(QName name)",
      "info" : "MethodDeclaration[7114-7261]:MethodDeclaration[7027-7174]"
    }, {
      "left" : "public NodePointer namespacePointer(String prefix)",
      "right" : "public NodePointer namespacePointer(String prefix)",
      "info" : "MethodDeclaration[7267-7413]:MethodDeclaration[7180-7326]"
    }, {
      "left" : "public NodeIterator namespaceIterator()",
      "right" : "public NodeIterator namespaceIterator()",
      "info" : "MethodDeclaration[7419-7550]:MethodDeclaration[7332-7463]"
    }, {
      "left" : "public synchronized NamespaceResolver getNamespaceResolver()",
      "right" : "public synchronized NamespaceResolver getNamespaceResolver()",
      "info" : "MethodDeclaration[7556-7915]:MethodDeclaration[7469-7828]"
    }, {
      "left" : "public String getNamespaceURI(String prefix)",
      "right" : "public String getNamespaceURI(String prefix)",
      "info" : "MethodDeclaration[7921-9495]:MethodDeclaration[7834-9408]"
    }, {
      "left" : "public String getDefaultNamespaceURI()",
      "right" : "public String getDefaultNamespaceURI()",
      "info" : "MethodDeclaration[9501-10428]:MethodDeclaration[9414-10341]"
    }, {
      "left" : "public Object getBaseValue()",
      "right" : "public Object getBaseValue()",
      "info" : "MethodDeclaration[10434-10528]:MethodDeclaration[10347-10441]"
    }, {
      "left" : "public Object getImmediateNode()",
      "right" : "public Object getImmediateNode()",
      "info" : "MethodDeclaration[10534-10632]:MethodDeclaration[10447-10545]"
    }, {
      "left" : "public boolean isActual()",
      "right" : "public boolean isActual()",
      "info" : "MethodDeclaration[10638-10729]:MethodDeclaration[10551-10642]"
    }, {
      "left" : "public boolean isCollection()",
      "right" : "public boolean isCollection()",
      "info" : "MethodDeclaration[10735-10831]:MethodDeclaration[10648-10744]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[10837-10922]:MethodDeclaration[10750-10835]"
    }, {
      "left" : "public boolean isLeaf()",
      "right" : "public boolean isLeaf()",
      "info" : "MethodDeclaration[10928-11034]:MethodDeclaration[10841-10947]"
    }, {
      "left" : "public boolean isLanguage(String lang)",
      "right" : "public boolean isLanguage(String lang)",
      "info" : "MethodDeclaration[11040-11527]:MethodDeclaration[10953-11440]"
    }, {
      "left" : "protected static String findEnclosingAttribute(Node n, String attrName)",
      "right" : "protected static String findEnclosingAttribute(Node n, String attrName)",
      "info" : "MethodDeclaration[11533-12204]:MethodDeclaration[11446-12117]"
    }, {
      "left" : "protected String getLanguage()",
      "right" : "protected String getLanguage()",
      "info" : "MethodDeclaration[12210-12407]:MethodDeclaration[12123-12320]"
    }, {
      "left" : "public void setValue(Object value)",
      "right" : "public void setValue(Object value)",
      "info" : "MethodDeclaration[12413-14395]:MethodDeclaration[12326-14308]"
    }, {
      "left" : "public NodePointer createChild(\n        JXPathContext context,\n        QName name,\n        int index)",
      "right" : "public NodePointer createChild(\n        JXPathContext context,\n        QName name,\n        int index)",
      "info" : "MethodDeclaration[14401-15488]:MethodDeclaration[14314-15401]"
    }, {
      "left" : "public NodePointer createChild(JXPathContext context,\n                QName name, int index, Object value)",
      "right" : "public NodePointer createChild(JXPathContext context,\n                QName name, int index, Object value)",
      "info" : "MethodDeclaration[15494-15759]:MethodDeclaration[15407-15672]"
    }, {
      "left" : "public NodePointer createAttribute(JXPathContext context, QName name)",
      "right" : "public NodePointer createAttribute(JXPathContext context, QName name)",
      "info" : "MethodDeclaration[15765-16773]:MethodDeclaration[15678-16686]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[16779-17032]:MethodDeclaration[16692-16945]"
    }, {
      "left" : "public String asPath()",
      "right" : "public String asPath()",
      "info" : "MethodDeclaration[17038-19708]:MethodDeclaration[16951-19621]"
    }, {
      "left" : "private String escape(String string)",
      "right" : "private String escape(String string)",
      "info" : "MethodDeclaration[19714-20773]:MethodDeclaration[19627-20686]"
    }, {
      "left" : "private int getRelativePositionByName()",
      "right" : "private int getRelativePositionByName()",
      "info" : "MethodDeclaration[20779-21308]:MethodDeclaration[20692-21221]"
    }, {
      "left" : "private int getRelativePositionOfElement()",
      "right" : "private int getRelativePositionOfElement()",
      "info" : "MethodDeclaration[21314-21719]:MethodDeclaration[21227-21632]"
    }, {
      "left" : "private int getRelativePositionOfTextNode()",
      "right" : "private int getRelativePositionOfTextNode()",
      "info" : "MethodDeclaration[21725-22200]:MethodDeclaration[21638-22113]"
    }, {
      "left" : "private int getRelativePositionOfPI()",
      "right" : "private int getRelativePositionOfPI()",
      "info" : "MethodDeclaration[22206-22798]:MethodDeclaration[22119-22711]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[22804-22916]:MethodDeclaration[22717-22829]"
    }, {
      "left" : "public boolean equals(Object object)",
      "right" : "public boolean equals(Object object)",
      "info" : "MethodDeclaration[22922-23112]:MethodDeclaration[22835-23025]"
    }, {
      "left" : "public static String getPrefix(Node node)",
      "right" : "public static String getPrefix(Node node)",
      "info" : "MethodDeclaration[23118-23555]:MethodDeclaration[23031-23468]"
    }, {
      "left" : "public static String getLocalName(Node node)",
      "right" : "public static String getLocalName(Node node)",
      "info" : "MethodDeclaration[23561-24012]:MethodDeclaration[23474-23925]"
    }, {
      "left" : "public static String getNamespaceURI(Node node)",
      "right" : "public static String getNamespaceURI(Node node)",
      "info" : "MethodDeclaration[24018-24946]:MethodDeclaration[23931-24859]"
    }, {
      "left" : "public Object getValue()",
      "right" : "public Object getValue()",
      "info" : "MethodDeclaration[24952-25226]:MethodDeclaration[24865-25139]"
    }, {
      "left" : "private String stringValue(Node node)",
      "right" : "private String stringValue(Node node)",
      "info" : "MethodDeclaration[25232-26286]:MethodDeclaration[25145-26199]"
    }, {
      "left" : "public Pointer getPointerByID(JXPathContext context, String id)",
      "right" : "public Pointer getPointerByID(JXPathContext context, String id)",
      "info" : "MethodDeclaration[26292-26820]:MethodDeclaration[26205-26733]"
    }, {
      "left" : "private AbstractFactory getAbstractFactory(JXPathContext context)",
      "right" : "private AbstractFactory getAbstractFactory(JXPathContext context)",
      "info" : "MethodDeclaration[26826-27357]:MethodDeclaration[26739-27270]"
    }, {
      "left" : "public int compareChildNodePointers(\n            NodePointer pointer1, NodePointer pointer2)",
      "right" : "public int compareChildNodePointers(\n            NodePointer pointer1, NodePointer pointer2)",
      "info" : "MethodDeclaration[27363-28759]:MethodDeclaration[27276-28672]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2139-2145]:Modifier[2139-2145]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2146-2151]:TYPE_DECLARATION_KIND[2146-2151]"
    }, {
      "left" : "DOMNodePointer",
      "right" : "DOMNodePointer",
      "info" : "SimpleName[2152-2166]:SimpleName[2152-2166]"
    }, {
      "left" : "NodePointer",
      "right" : "NodePointer",
      "info" : "SimpleType[2175-2186]:SimpleType[2175-2186]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2806-2812]:Modifier[2806-2812]"
    }, {
      "left" : "DOMNodePointer",
      "right" : "DOMNodePointer",
      "info" : "SimpleName[2813-2827]:SimpleName[2813-2827]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[2828-2837]:SingleVariableDeclaration[2828-2837]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[2839-2852]:SingleVariableDeclaration[2839-2852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2854-2916]:Block[2854-2916]"
    }, {
      "left" : "super(null, locale);",
      "right" : "super(null, locale);",
      "info" : "SuperConstructorInvocation[2864-2884]:SuperConstructorInvocation[2864-2884]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[2893-2910]:ExpressionStatement[2893-2910]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3059-3065]:Modifier[3059-3065]"
    }, {
      "left" : "DOMNodePointer",
      "right" : "DOMNodePointer",
      "info" : "SimpleName[3066-3080]:SimpleName[3066-3080]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[3081-3090]:SingleVariableDeclaration[3081-3090]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[3092-3105]:SingleVariableDeclaration[3092-3105]"
    }, {
      "left" : "String id",
      "right" : "String id",
      "info" : "SingleVariableDeclaration[3107-3116]:SingleVariableDeclaration[3107-3116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3118-3202]:Block[3118-3202]"
    }, {
      "left" : "super(null, locale);",
      "right" : "super(null, locale);",
      "info" : "SuperConstructorInvocation[3128-3148]:SuperConstructorInvocation[3128-3148]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[3157-3174]:ExpressionStatement[3157-3174]"
    }, {
      "left" : "this.id = id;",
      "right" : "this.id = id;",
      "info" : "ExpressionStatement[3183-3196]:ExpressionStatement[3183-3196]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3316-3322]:Modifier[3316-3322]"
    }, {
      "left" : "DOMNodePointer",
      "right" : "DOMNodePointer",
      "info" : "SimpleName[3323-3337]:SimpleName[3323-3337]"
    }, {
      "left" : "NodePointer parent",
      "right" : "NodePointer parent",
      "info" : "SingleVariableDeclaration[3338-3356]:SingleVariableDeclaration[3338-3356]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[3358-3367]:SingleVariableDeclaration[3358-3367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3369-3425]:Block[3369-3425]"
    }, {
      "left" : "super(parent);",
      "right" : "super(parent);",
      "info" : "SuperConstructorInvocation[3379-3393]:SuperConstructorInvocation[3379-3393]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[3402-3419]:ExpressionStatement[3402-3419]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3468-3474]:Modifier[3468-3474]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3475-3482]:PrimitiveType[3475-3482]"
    }, {
      "left" : "testNode",
      "right" : "testNode",
      "info" : "SimpleName[3483-3491]:SimpleName[3483-3491]"
    }, {
      "left" : "NodeTest test",
      "right" : "NodeTest test",
      "info" : "SingleVariableDeclaration[3492-3505]:SingleVariableDeclaration[3492-3505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3507-3551]:Block[3507-3551]"
    }, {
      "left" : "return testNode(node, test);",
      "right" : "return testNode(node, test);",
      "info" : "ReturnStatement[3517-3545]:ReturnStatement[3517-3545]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3690-3696]:Modifier[3690-3696]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3697-3703]:Modifier[3697-3703]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3704-3711]:PrimitiveType[3704-3711]"
    }, {
      "left" : "testNode",
      "right" : "testNode",
      "info" : "SimpleName[3712-3720]:SimpleName[3712-3720]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[3721-3730]:SingleVariableDeclaration[3721-3730]"
    }, {
      "left" : "NodeTest test",
      "right" : "NodeTest test",
      "info" : "SingleVariableDeclaration[3732-3745]:SingleVariableDeclaration[3732-3745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3747-5890]:Block[3747-5803]"
    }, {
      "left" : "if (test == null)",
      "right" : "if (test == null)",
      "info" : "IfStatement[3757-3811]:IfStatement[3757-3811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3775-3811]:Block[3775-3811]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3789-3801]:ReturnStatement[3789-3801]"
    }, {
      "left" : "if (test instanceof NodeNameTest)",
      "right" : "if (test instanceof NodeNameTest)",
      "info" : "IfStatement[3820-4747]:IfStatement[3820-4747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3854-4747]:Block[3854-4747]"
    }, {
      "left" : "if (node.getNodeType() != Node.ELEMENT_NODE)",
      "right" : "if (node.getNodeType() != Node.ELEMENT_NODE)",
      "info" : "IfStatement[3868-3958]:IfStatement[3868-3958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3913-3958]:Block[3913-3958]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3931-3944]:ReturnStatement[3931-3944]"
    }, {
      "left" : "NodeNameTest nodeNameTest = (NodeNameTest) test;",
      "right" : "NodeNameTest nodeNameTest = (NodeNameTest) test;",
      "info" : "VariableDeclarationStatement[3972-4020]:VariableDeclarationStatement[3972-4020]"
    }, {
      "left" : "QName testName = nodeNameTest.getNodeName();",
      "right" : "QName testName = nodeNameTest.getNodeName();",
      "info" : "VariableDeclarationStatement[4033-4077]:VariableDeclarationStatement[4033-4077]"
    }, {
      "left" : "String namespaceURI = nodeNameTest.getNamespaceURI();",
      "right" : "String namespaceURI = nodeNameTest.getNamespaceURI();",
      "info" : "VariableDeclarationStatement[4090-4143]:VariableDeclarationStatement[4090-4143]"
    }, {
      "left" : "boolean wildcard = nodeNameTest.isWildcard();",
      "right" : "boolean wildcard = nodeNameTest.isWildcard();",
      "info" : "VariableDeclarationStatement[4156-4201]:VariableDeclarationStatement[4156-4201]"
    }, {
      "left" : "String testPrefix = testName.getPrefix();",
      "right" : "String testPrefix = testName.getPrefix();",
      "info" : "VariableDeclarationStatement[4214-4255]:VariableDeclarationStatement[4214-4255]"
    }, {
      "left" : "if (wildcard && testPrefix == null)",
      "right" : "if (wildcard && testPrefix == null)",
      "info" : "IfStatement[4268-4348]:IfStatement[4268-4348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4304-4348]:Block[4304-4348]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4322-4334]:ReturnStatement[4322-4334]"
    }, {
      "left" : "if (wildcard\n                || testName.getName()\n                        .equals(DOMNodePointer.getLocalName(node)))",
      "right" : "if (wildcard\n                || testName.getName()\n                        .equals(DOMNodePointer.getLocalName(node)))",
      "info" : "IfStatement[4361-4711]:IfStatement[4361-4711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4480-4711]:Block[4480-4711]"
    }, {
      "left" : "String nodeNS = DOMNodePointer.getNamespaceURI(node);",
      "right" : "String nodeNS = DOMNodePointer.getNamespaceURI(node);",
      "info" : "VariableDeclarationStatement[4498-4551]:VariableDeclarationStatement[4498-4551]"
    }, {
      "left" : "return equalStrings(namespaceURI, nodeNS) || nodeNS == null\n                        && equalStrings(testPrefix, getPrefix(node));",
      "right" : "return equalStrings(namespaceURI, nodeNS) || nodeNS == null\n                        && equalStrings(testPrefix, getPrefix(node));",
      "info" : "ReturnStatement[4568-4697]:ReturnStatement[4568-4697]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4724-4737]:ReturnStatement[4724-4737]"
    }, {
      "left" : "if (test instanceof NodeTypeTest)",
      "right" : "if (test instanceof NodeTypeTest)",
      "info" : "IfStatement[4756-5505]:IfStatement[4756-5418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4790-5505]:Block[4790-5418]"
    }, {
      "left" : "int nodeType = node.getNodeType();",
      "right" : "int nodeType = node.getNodeType();",
      "info" : "VariableDeclarationStatement[4804-4838]:VariableDeclarationStatement[4804-4838]"
    }, {
      "left" : "switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;\n                case Compiler.NODE_TYPE_TEXT :\n                    return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;\n                case Compiler.NODE_TYPE_COMMENT :\n                    return nodeType == Node.COMMENT_NODE;\n                case Compiler.NODE_TYPE_PI :\n                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n            }",
      "right" : "switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    return true;\n                case Compiler.NODE_TYPE_TEXT :\n                    return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;\n                case Compiler.NODE_TYPE_COMMENT :\n                    return nodeType == Node.COMMENT_NODE;\n                case Compiler.NODE_TYPE_PI :\n                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n            }",
      "info" : "SwitchStatement[4851-5469]:SwitchStatement[4851-5382]"
    }, {
      "left" : "case Compiler.NODE_TYPE_NODE :",
      "right" : "case Compiler.NODE_TYPE_NODE :",
      "info" : "SwitchCase[4914-4944]:SwitchCase[4914-4944]"
    }, {
      "left" : "return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;",
      "right" : "return true;",
      "info" : "ReturnStatement[4965-5064]:ReturnStatement[4965-4977]"
    }, {
      "left" : "case Compiler.NODE_TYPE_TEXT :",
      "right" : "case Compiler.NODE_TYPE_TEXT :",
      "info" : "SwitchCase[5081-5111]:SwitchCase[4994-5024]"
    }, {
      "left" : "return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;",
      "right" : "return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;",
      "info" : "ReturnStatement[5132-5229]:ReturnStatement[5045-5142]"
    }, {
      "left" : "case Compiler.NODE_TYPE_COMMENT :",
      "right" : "case Compiler.NODE_TYPE_COMMENT :",
      "info" : "SwitchCase[5246-5279]:SwitchCase[5159-5192]"
    }, {
      "left" : "return nodeType == Node.COMMENT_NODE;",
      "right" : "return nodeType == Node.COMMENT_NODE;",
      "info" : "ReturnStatement[5300-5337]:ReturnStatement[5213-5250]"
    }, {
      "left" : "case Compiler.NODE_TYPE_PI :",
      "right" : "case Compiler.NODE_TYPE_PI :",
      "info" : "SwitchCase[5354-5382]:SwitchCase[5267-5295]"
    }, {
      "left" : "return nodeType == Node.PROCESSING_INSTRUCTION_NODE;",
      "right" : "return nodeType == Node.PROCESSING_INSTRUCTION_NODE;",
      "info" : "ReturnStatement[5403-5455]:ReturnStatement[5316-5368]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5482-5495]:ReturnStatement[5395-5408]"
    }, {
      "left" : "if (test instanceof ProcessingInstructionTest)",
      "right" : "if (test instanceof ProcessingInstructionTest)",
      "info" : "IfStatement[5514-5862]:IfStatement[5427-5775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5561-5862]:Block[5474-5775]"
    }, {
      "left" : "if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE)",
      "right" : "if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE)",
      "info" : "IfStatement[5575-5852]:IfStatement[5488-5765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5635-5852]:Block[5548-5765]"
    }, {
      "left" : "String testPI = ((ProcessingInstructionTest) test).getTarget();",
      "right" : "String testPI = ((ProcessingInstructionTest) test).getTarget();",
      "info" : "VariableDeclarationStatement[5653-5716]:VariableDeclarationStatement[5566-5629]"
    }, {
      "left" : "String nodePI = ((ProcessingInstruction) node).getTarget();",
      "right" : "String nodePI = ((ProcessingInstruction) node).getTarget();",
      "info" : "VariableDeclarationStatement[5733-5792]:VariableDeclarationStatement[5646-5705]"
    }, {
      "left" : "return testPI.equals(nodePI);",
      "right" : "return testPI.equals(nodePI);",
      "info" : "ReturnStatement[5809-5838]:ReturnStatement[5722-5751]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5871-5884]:ReturnStatement[5784-5797]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6032-6039]:Modifier[5945-5952]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6040-6046]:Modifier[5953-5959]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6047-6054]:PrimitiveType[5960-5967]"
    }, {
      "left" : "equalStrings",
      "right" : "equalStrings",
      "info" : "SimpleName[6055-6067]:SimpleName[5968-5980]"
    }, {
      "left" : "String s1",
      "right" : "String s1",
      "info" : "SingleVariableDeclaration[6068-6077]:SingleVariableDeclaration[5981-5990]"
    }, {
      "left" : "String s2",
      "right" : "String s2",
      "info" : "SingleVariableDeclaration[6079-6088]:SingleVariableDeclaration[5992-6001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6090-6270]:Block[6003-6183]"
    }, {
      "left" : "if (s1 == s2)",
      "right" : "if (s1 == s2)",
      "info" : "IfStatement[6100-6150]:IfStatement[6013-6063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6114-6150]:Block[6027-6063]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6128-6140]:ReturnStatement[6041-6053]"
    }, {
      "left" : "s1 = s1 == null ? \"\" : s1.trim();",
      "right" : "s1 = s1 == null ? \"\" : s1.trim();",
      "info" : "ExpressionStatement[6159-6192]:ExpressionStatement[6072-6105]"
    }, {
      "left" : "s2 = s2 == null ? \"\" : s2.trim();",
      "right" : "s2 = s2 == null ? \"\" : s2.trim();",
      "info" : "ExpressionStatement[6201-6234]:ExpressionStatement[6114-6147]"
    }, {
      "left" : "return s1.equals(s2);",
      "right" : "return s1.equals(s2);",
      "info" : "ReturnStatement[6243-6264]:ReturnStatement[6156-6177]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6313-6319]:Modifier[6226-6232]"
    }, {
      "left" : "QName",
      "right" : "QName",
      "info" : "SimpleType[6320-6325]:SimpleType[6233-6238]"
    }, {
      "left" : "getName",
      "right" : "getName",
      "info" : "SimpleName[6326-6333]:SimpleName[6239-6246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6336-6752]:Block[6249-6665]"
    }, {
      "left" : "String ln = null;",
      "right" : "String ln = null;",
      "info" : "VariableDeclarationStatement[6346-6363]:VariableDeclarationStatement[6259-6276]"
    }, {
      "left" : "String ns = null;",
      "right" : "String ns = null;",
      "info" : "VariableDeclarationStatement[6372-6389]:VariableDeclarationStatement[6285-6302]"
    }, {
      "left" : "int type = node.getNodeType();",
      "right" : "int type = node.getNodeType();",
      "info" : "VariableDeclarationStatement[6398-6428]:VariableDeclarationStatement[6311-6341]"
    }, {
      "left" : "if (type == Node.ELEMENT_NODE)",
      "right" : "if (type == Node.ELEMENT_NODE)",
      "info" : "IfStatement[6437-6712]:IfStatement[6350-6625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6468-6580]:Block[6381-6493]"
    }, {
      "left" : "ns = DOMNodePointer.getPrefix(node);",
      "right" : "ns = DOMNodePointer.getPrefix(node);",
      "info" : "ExpressionStatement[6482-6518]:ExpressionStatement[6395-6431]"
    }, {
      "left" : "ln = DOMNodePointer.getLocalName(node);",
      "right" : "ln = DOMNodePointer.getLocalName(node);",
      "info" : "ExpressionStatement[6531-6570]:ExpressionStatement[6444-6483]"
    }, {
      "left" : "if (type == Node.PROCESSING_INSTRUCTION_NODE)",
      "right" : "if (type == Node.PROCESSING_INSTRUCTION_NODE)",
      "info" : "IfStatement[6594-6712]:IfStatement[6507-6625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6640-6712]:Block[6553-6625]"
    }, {
      "left" : "ln = ((ProcessingInstruction) node).getTarget();",
      "right" : "ln = ((ProcessingInstruction) node).getTarget();",
      "info" : "ExpressionStatement[6654-6702]:ExpressionStatement[6567-6615]"
    }, {
      "left" : "return new QName(ns, ln);",
      "right" : "return new QName(ns, ln);",
      "info" : "ReturnStatement[6721-6746]:ReturnStatement[6634-6659]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6795-6801]:Modifier[6708-6714]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6802-6808]:SimpleType[6715-6721]"
    }, {
      "left" : "getNamespaceURI",
      "right" : "getNamespaceURI",
      "info" : "SimpleName[6809-6824]:SimpleName[6722-6737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6827-6872]:Block[6740-6785]"
    }, {
      "left" : "return getNamespaceURI(node);",
      "right" : "return getNamespaceURI(node);",
      "info" : "ReturnStatement[6837-6866]:ReturnStatement[6750-6779]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6915-6921]:Modifier[6828-6834]"
    }, {
      "left" : "NodeIterator",
      "right" : "NodeIterator",
      "info" : "SimpleType[6922-6934]:SimpleType[6835-6847]"
    }, {
      "left" : "childIterator",
      "right" : "childIterator",
      "info" : "SimpleName[6935-6948]:SimpleName[6848-6861]"
    }, {
      "left" : "NodeTest test",
      "right" : "NodeTest test",
      "info" : "SingleVariableDeclaration[6958-6971]:SingleVariableDeclaration[6871-6884]"
    }, {
      "left" : "boolean reverse",
      "right" : "boolean reverse",
      "info" : "SingleVariableDeclaration[6981-6996]:SingleVariableDeclaration[6894-6909]"
    }, {
      "left" : "NodePointer startWith",
      "right" : "NodePointer startWith",
      "info" : "SingleVariableDeclaration[7006-7027]:SingleVariableDeclaration[6919-6940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7033-7108]:Block[6946-7021]"
    }, {
      "left" : "return new DOMNodeIterator(this, test, reverse, startWith);",
      "right" : "return new DOMNodeIterator(this, test, reverse, startWith);",
      "info" : "ReturnStatement[7043-7102]:ReturnStatement[6956-7015]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7151-7157]:Modifier[7064-7070]"
    }, {
      "left" : "NodeIterator",
      "right" : "NodeIterator",
      "info" : "SimpleType[7158-7170]:SimpleType[7071-7083]"
    }, {
      "left" : "attributeIterator",
      "right" : "attributeIterator",
      "info" : "SimpleName[7171-7188]:SimpleName[7084-7101]"
    }, {
      "left" : "QName name",
      "right" : "QName name",
      "info" : "SingleVariableDeclaration[7189-7199]:SingleVariableDeclaration[7102-7112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7201-7261]:Block[7114-7174]"
    }, {
      "left" : "return new DOMAttributeIterator(this, name);",
      "right" : "return new DOMAttributeIterator(this, name);",
      "info" : "ReturnStatement[7211-7255]:ReturnStatement[7124-7168]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7304-7310]:Modifier[7217-7223]"
    }, {
      "left" : "NodePointer",
      "right" : "NodePointer",
      "info" : "SimpleType[7311-7322]:SimpleType[7224-7235]"
    }, {
      "left" : "namespacePointer",
      "right" : "namespacePointer",
      "info" : "SimpleName[7323-7339]:SimpleName[7236-7252]"
    }, {
      "left" : "String prefix",
      "right" : "String prefix",
      "info" : "SingleVariableDeclaration[7340-7353]:SingleVariableDeclaration[7253-7266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7355-7413]:Block[7268-7326]"
    }, {
      "left" : "return new NamespacePointer(this, prefix);",
      "right" : "return new NamespacePointer(this, prefix);",
      "info" : "ReturnStatement[7365-7407]:ReturnStatement[7278-7320]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7456-7462]:Modifier[7369-7375]"
    }, {
      "left" : "NodeIterator",
      "right" : "NodeIterator",
      "info" : "SimpleType[7463-7475]:SimpleType[7376-7388]"
    }, {
      "left" : "namespaceIterator",
      "right" : "namespaceIterator",
      "info" : "SimpleName[7476-7493]:SimpleName[7389-7406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7496-7550]:Block[7409-7463]"
    }, {
      "left" : "return new DOMNamespaceIterator(this);",
      "right" : "return new DOMNamespaceIterator(this);",
      "info" : "ReturnStatement[7506-7544]:ReturnStatement[7419-7457]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7593-7599]:Modifier[7506-7512]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[7600-7612]:Modifier[7513-7525]"
    }, {
      "left" : "NamespaceResolver",
      "right" : "NamespaceResolver",
      "info" : "SimpleType[7613-7630]:SimpleType[7526-7543]"
    }, {
      "left" : "getNamespaceResolver",
      "right" : "getNamespaceResolver",
      "info" : "SimpleName[7631-7651]:SimpleName[7544-7564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7654-7915]:Block[7567-7828]"
    }, {
      "left" : "if (localNamespaceResolver == null)",
      "right" : "if (localNamespaceResolver == null)",
      "info" : "IfStatement[7664-7870]:IfStatement[7577-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7700-7870]:Block[7613-7783]"
    }, {
      "left" : "localNamespaceResolver = new NamespaceResolver(super.getNamespaceResolver());",
      "right" : "localNamespaceResolver = new NamespaceResolver(super.getNamespaceResolver());",
      "info" : "ExpressionStatement[7714-7791]:ExpressionStatement[7627-7704]"
    }, {
      "left" : "localNamespaceResolver.setNamespaceContextPointer(this);",
      "right" : "localNamespaceResolver.setNamespaceContextPointer(this);",
      "info" : "ExpressionStatement[7804-7860]:ExpressionStatement[7717-7773]"
    }, {
      "left" : "return localNamespaceResolver;",
      "right" : "return localNamespaceResolver;",
      "info" : "ReturnStatement[7879-7909]:ReturnStatement[7792-7822]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7958-7964]:Modifier[7871-7877]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7965-7971]:SimpleType[7878-7884]"
    }, {
      "left" : "getNamespaceURI",
      "right" : "getNamespaceURI",
      "info" : "SimpleName[7972-7987]:SimpleName[7885-7900]"
    }, {
      "left" : "String prefix",
      "right" : "String prefix",
      "info" : "SingleVariableDeclaration[7988-8001]:SingleVariableDeclaration[7901-7914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8003-9495]:Block[7916-9408]"
    }, {
      "left" : "if (prefix == null || prefix.equals(\"\"))",
      "right" : "if (prefix == null || prefix.equals(\"\"))",
      "info" : "IfStatement[8013-8110]:IfStatement[7926-8023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8054-8110]:Block[7967-8023]"
    }, {
      "left" : "return getDefaultNamespaceURI();",
      "right" : "return getDefaultNamespaceURI();",
      "info" : "ReturnStatement[8068-8100]:ReturnStatement[7981-8013]"
    }, {
      "left" : "if (prefix.equals(\"xml\"))",
      "right" : "if (prefix.equals(\"xml\"))",
      "info" : "IfStatement[8120-8195]:IfStatement[8033-8108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8146-8195]:Block[8059-8108]"
    }, {
      "left" : "return XML_NAMESPACE_URI;",
      "right" : "return XML_NAMESPACE_URI;",
      "info" : "ReturnStatement[8160-8185]:ReturnStatement[8073-8098]"
    }, {
      "left" : "if (prefix.equals(\"xmlns\"))",
      "right" : "if (prefix.equals(\"xmlns\"))",
      "info" : "IfStatement[8205-8284]:IfStatement[8118-8197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8233-8284]:Block[8146-8197]"
    }, {
      "left" : "return XMLNS_NAMESPACE_URI;",
      "right" : "return XMLNS_NAMESPACE_URI;",
      "info" : "ReturnStatement[8247-8274]:ReturnStatement[8160-8187]"
    }, {
      "left" : "String namespace = null;",
      "right" : "String namespace = null;",
      "info" : "VariableDeclarationStatement[8294-8318]:VariableDeclarationStatement[8207-8231]"
    }, {
      "left" : "if (namespaces == null)",
      "right" : "if (namespaces == null)",
      "info" : "IfStatement[8327-8484]:IfStatement[8240-8397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8351-8402]:Block[8264-8315]"
    }, {
      "left" : "namespaces = new HashMap();",
      "right" : "namespaces = new HashMap();",
      "info" : "ExpressionStatement[8365-8392]:ExpressionStatement[8278-8305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8416-8484]:Block[8329-8397]"
    }, {
      "left" : "namespace = (String) namespaces.get(prefix);",
      "right" : "namespace = (String) namespaces.get(prefix);",
      "info" : "ExpressionStatement[8430-8474]:ExpressionStatement[8343-8387]"
    }, {
      "left" : "if (namespace == null)",
      "right" : "if (namespace == null)",
      "info" : "IfStatement[8494-9262]:IfStatement[8407-9175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8517-9262]:Block[8430-9175]"
    }, {
      "left" : "String qname = \"xmlns:\" + prefix;",
      "right" : "String qname = \"xmlns:\" + prefix;",
      "info" : "VariableDeclarationStatement[8531-8564]:VariableDeclarationStatement[8444-8477]"
    }, {
      "left" : "Node aNode = node;",
      "right" : "Node aNode = node;",
      "info" : "VariableDeclarationStatement[8577-8595]:VariableDeclarationStatement[8490-8508]"
    }, {
      "left" : "if (aNode instanceof Document)",
      "right" : "if (aNode instanceof Document)",
      "info" : "IfStatement[8608-8718]:IfStatement[8521-8631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8639-8718]:Block[8552-8631]"
    }, {
      "left" : "aNode = ((Document)aNode).getDocumentElement();",
      "right" : "aNode = ((Document)aNode).getDocumentElement();",
      "info" : "ExpressionStatement[8657-8704]:ExpressionStatement[8570-8617]"
    }, {
      "left" : "while (aNode != null)",
      "right" : "while (aNode != null)",
      "info" : "WhileStatement[8731-9118]:WhileStatement[8644-9031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8753-9118]:Block[8666-9031]"
    }, {
      "left" : "if (aNode.getNodeType() == Node.ELEMENT_NODE)",
      "right" : "if (aNode.getNodeType() == Node.ELEMENT_NODE)",
      "info" : "IfStatement[8771-9057]:IfStatement[8684-8970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8817-9057]:Block[8730-8970]"
    }, {
      "left" : "Attr attr = ((Element) aNode).getAttributeNode(qname);",
      "right" : "Attr attr = ((Element) aNode).getAttributeNode(qname);",
      "info" : "VariableDeclarationStatement[8839-8893]:VariableDeclarationStatement[8752-8806]"
    }, {
      "left" : "if (attr != null)",
      "right" : "if (attr != null)",
      "info" : "IfStatement[8914-9039]:IfStatement[8827-8952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8932-9039]:Block[8845-8952]"
    }, {
      "left" : "namespace = attr.getValue();",
      "right" : "namespace = attr.getValue();",
      "info" : "ExpressionStatement[8958-8986]:ExpressionStatement[8871-8899]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9011-9017]:BreakStatement[8924-8930]"
    }, {
      "left" : "aNode = aNode.getParentNode();",
      "right" : "aNode = aNode.getParentNode();",
      "info" : "ExpressionStatement[9074-9104]:ExpressionStatement[8987-9017]"
    }, {
      "left" : "if (namespace == null || namespace.equals(\"\"))",
      "right" : "if (namespace == null || namespace.equals(\"\"))",
      "info" : "IfStatement[9131-9252]:IfStatement[9044-9165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9178-9252]:Block[9091-9165]"
    }, {
      "left" : "namespace = NodePointer.UNKNOWN_NAMESPACE;",
      "right" : "namespace = NodePointer.UNKNOWN_NAMESPACE;",
      "info" : "ExpressionStatement[9196-9238]:ExpressionStatement[9109-9151]"
    }, {
      "left" : "namespaces.put(prefix, namespace);",
      "right" : "namespaces.put(prefix, namespace);",
      "info" : "ExpressionStatement[9272-9306]:ExpressionStatement[9185-9219]"
    }, {
      "left" : "if (namespace == UNKNOWN_NAMESPACE)",
      "right" : "if (namespace == UNKNOWN_NAMESPACE)",
      "info" : "IfStatement[9315-9387]:IfStatement[9228-9300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9351-9387]:Block[9264-9300]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9365-9377]:ReturnStatement[9278-9290]"
    }, {
      "left" : "return namespace;",
      "right" : "return namespace;",
      "info" : "ReturnStatement[9472-9489]:ReturnStatement[9385-9402]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9538-9544]:Modifier[9451-9457]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9545-9551]:SimpleType[9458-9464]"
    }, {
      "left" : "getDefaultNamespaceURI",
      "right" : "getDefaultNamespaceURI",
      "info" : "SimpleName[9552-9574]:SimpleName[9465-9487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9577-10428]:Block[9490-10341]"
    }, {
      "left" : "if (defaultNamespace == null)",
      "right" : "if (defaultNamespace == null)",
      "info" : "IfStatement[9587-10192]:IfStatement[9500-10105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9617-10192]:Block[9530-10105]"
    }, {
      "left" : "Node aNode = node;",
      "right" : "Node aNode = node;",
      "info" : "VariableDeclarationStatement[9631-9649]:VariableDeclarationStatement[9544-9562]"
    }, {
      "left" : "if (aNode instanceof Document)",
      "right" : "if (aNode instanceof Document)",
      "info" : "IfStatement[9662-9773]:IfStatement[9575-9686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9693-9773]:Block[9606-9686]"
    }, {
      "left" : "aNode = ((Document) aNode).getDocumentElement();",
      "right" : "aNode = ((Document) aNode).getDocumentElement();",
      "info" : "ExpressionStatement[9711-9759]:ExpressionStatement[9624-9672]"
    }, {
      "left" : "while (aNode != null)",
      "right" : "while (aNode != null)",
      "info" : "WhileStatement[9786-10182]:WhileStatement[9699-10095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9808-10182]:Block[9721-10095]"
    }, {
      "left" : "if (aNode.getNodeType() == Node.ELEMENT_NODE)",
      "right" : "if (aNode.getNodeType() == Node.ELEMENT_NODE)",
      "info" : "IfStatement[9826-10121]:IfStatement[9739-10034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9872-10121]:Block[9785-10034]"
    }, {
      "left" : "Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\");",
      "right" : "Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\");",
      "info" : "VariableDeclarationStatement[9894-9950]:VariableDeclarationStatement[9807-9863]"
    }, {
      "left" : "if (attr != null)",
      "right" : "if (attr != null)",
      "info" : "IfStatement[9971-10103]:IfStatement[9884-10016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9989-10103]:Block[9902-10016]"
    }, {
      "left" : "defaultNamespace = attr.getValue();",
      "right" : "defaultNamespace = attr.getValue();",
      "info" : "ExpressionStatement[10015-10050]:ExpressionStatement[9928-9963]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10075-10081]:BreakStatement[9988-9994]"
    }, {
      "left" : "aNode = aNode.getParentNode();",
      "right" : "aNode = aNode.getParentNode();",
      "info" : "ExpressionStatement[10138-10168]:ExpressionStatement[10051-10081]"
    }, {
      "left" : "if (defaultNamespace == null)",
      "right" : "if (defaultNamespace == null)",
      "info" : "IfStatement[10201-10277]:IfStatement[10114-10190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10231-10277]:Block[10144-10190]"
    }, {
      "left" : "defaultNamespace = \"\";",
      "right" : "defaultNamespace = \"\";",
      "info" : "ExpressionStatement[10245-10267]:ExpressionStatement[10158-10180]"
    }, {
      "left" : "return defaultNamespace.equals(\"\") ? null : defaultNamespace;",
      "right" : "return defaultNamespace.equals(\"\") ? null : defaultNamespace;",
      "info" : "ReturnStatement[10361-10422]:ReturnStatement[10274-10335]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10471-10477]:Modifier[10384-10390]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[10478-10484]:SimpleType[10391-10397]"
    }, {
      "left" : "getBaseValue",
      "right" : "getBaseValue",
      "info" : "SimpleName[10485-10497]:SimpleName[10398-10410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10500-10528]:Block[10413-10441]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[10510-10522]:ReturnStatement[10423-10435]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10571-10577]:Modifier[10484-10490]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[10578-10584]:SimpleType[10491-10497]"
    }, {
      "left" : "getImmediateNode",
      "right" : "getImmediateNode",
      "info" : "SimpleName[10585-10601]:SimpleName[10498-10514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10604-10632]:Block[10517-10545]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[10614-10626]:ReturnStatement[10527-10539]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10675-10681]:Modifier[10588-10594]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10682-10689]:PrimitiveType[10595-10602]"
    }, {
      "left" : "isActual",
      "right" : "isActual",
      "info" : "SimpleName[10690-10698]:SimpleName[10603-10611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10701-10729]:Block[10614-10642]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10711-10723]:ReturnStatement[10624-10636]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10772-10778]:Modifier[10685-10691]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10779-10786]:PrimitiveType[10692-10699]"
    }, {
      "left" : "isCollection",
      "right" : "isCollection",
      "info" : "SimpleName[10787-10799]:SimpleName[10700-10712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10802-10831]:Block[10715-10744]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10812-10825]:ReturnStatement[10725-10738]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10874-10880]:Modifier[10787-10793]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[10881-10884]:PrimitiveType[10794-10797]"
    }, {
      "left" : "getLength",
      "right" : "getLength",
      "info" : "SimpleName[10885-10894]:SimpleName[10798-10807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10897-10922]:Block[10810-10835]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[10907-10916]:ReturnStatement[10820-10829]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10965-10971]:Modifier[10878-10884]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10972-10979]:PrimitiveType[10885-10892]"
    }, {
      "left" : "isLeaf",
      "right" : "isLeaf",
      "info" : "SimpleName[10980-10986]:SimpleName[10893-10899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10989-11034]:Block[10902-10947]"
    }, {
      "left" : "return !node.hasChildNodes();",
      "right" : "return !node.hasChildNodes();",
      "info" : "ReturnStatement[10999-11028]:ReturnStatement[10912-10941]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11313-11319]:Modifier[11226-11232]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11320-11327]:PrimitiveType[11233-11240]"
    }, {
      "left" : "isLanguage",
      "right" : "isLanguage",
      "info" : "SimpleName[11328-11338]:SimpleName[11241-11251]"
    }, {
      "left" : "String lang",
      "right" : "String lang",
      "info" : "SingleVariableDeclaration[11339-11350]:SingleVariableDeclaration[11252-11263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11352-11527]:Block[11265-11440]"
    }, {
      "left" : "String current = getLanguage();",
      "right" : "String current = getLanguage();",
      "info" : "VariableDeclarationStatement[11362-11393]:VariableDeclarationStatement[11275-11306]"
    }, {
      "left" : "return current == null ? super.isLanguage(lang)\n                : current.toUpperCase().startsWith(lang.toUpperCase());",
      "right" : "return current == null ? super.isLanguage(lang)\n                : current.toUpperCase().startsWith(lang.toUpperCase());",
      "info" : "ReturnStatement[11402-11521]:ReturnStatement[11315-11434]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[11757-11766]:Modifier[11670-11679]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11767-11773]:Modifier[11680-11686]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[11774-11780]:SimpleType[11687-11693]"
    }, {
      "left" : "findEnclosingAttribute",
      "right" : "findEnclosingAttribute",
      "info" : "SimpleName[11781-11803]:SimpleName[11694-11716]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11804-11810]:SingleVariableDeclaration[11717-11723]"
    }, {
      "left" : "String attrName",
      "right" : "String attrName",
      "info" : "SingleVariableDeclaration[11812-11827]:SingleVariableDeclaration[11725-11740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11829-12204]:Block[11742-12117]"
    }, {
      "left" : "while (n != null)",
      "right" : "while (n != null)",
      "info" : "WhileStatement[11839-12177]:WhileStatement[11752-12090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11857-12177]:Block[11770-12090]"
    }, {
      "left" : "if (n.getNodeType() == Node.ELEMENT_NODE)",
      "right" : "if (n.getNodeType() == Node.ELEMENT_NODE)",
      "info" : "IfStatement[11871-12132]:IfStatement[11784-12045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11913-12132]:Block[11826-12045]"
    }, {
      "left" : "Element e = (Element) n;",
      "right" : "Element e = (Element) n;",
      "info" : "VariableDeclarationStatement[11931-11955]:VariableDeclarationStatement[11844-11868]"
    }, {
      "left" : "String attr = e.getAttribute(attrName);",
      "right" : "String attr = e.getAttribute(attrName);",
      "info" : "VariableDeclarationStatement[11972-12011]:VariableDeclarationStatement[11885-11924]"
    }, {
      "left" : "if (attr != null && !attr.equals(\"\"))",
      "right" : "if (attr != null && !attr.equals(\"\"))",
      "info" : "IfStatement[12028-12118]:IfStatement[11941-12031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12066-12118]:Block[11979-12031]"
    }, {
      "left" : "return attr;",
      "right" : "return attr;",
      "info" : "ReturnStatement[12088-12100]:ReturnStatement[12001-12013]"
    }, {
      "left" : "n = n.getParentNode();",
      "right" : "n = n.getParentNode();",
      "info" : "ExpressionStatement[12145-12167]:ExpressionStatement[12058-12080]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12186-12198]:ReturnStatement[12099-12111]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[12312-12321]:Modifier[12225-12234]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[12322-12328]:SimpleType[12235-12241]"
    }, {
      "left" : "getLanguage",
      "right" : "getLanguage",
      "info" : "SimpleName[12329-12340]:SimpleName[12242-12253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12343-12407]:Block[12256-12320]"
    }, {
      "left" : "return findEnclosingAttribute(node, \"xml:lang\");",
      "right" : "return findEnclosingAttribute(node, \"xml:lang\");",
      "info" : "ReturnStatement[12353-12401]:ReturnStatement[12266-12314]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12730-12736]:Modifier[12643-12649]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12737-12741]:PrimitiveType[12650-12654]"
    }, {
      "left" : "setValue",
      "right" : "setValue",
      "info" : "SimpleName[12742-12750]:SimpleName[12655-12663]"
    }, {
      "left" : "Object value",
      "right" : "Object value",
      "info" : "SingleVariableDeclaration[12751-12763]:SingleVariableDeclaration[12664-12676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12765-14395]:Block[12678-14308]"
    }, {
      "left" : "if (node.getNodeType() == Node.TEXT_NODE\n            || node.getNodeType() == Node.CDATA_SECTION_NODE)",
      "right" : "if (node.getNodeType() == Node.TEXT_NODE\n            || node.getNodeType() == Node.CDATA_SECTION_NODE)",
      "info" : "IfStatement[12775-14389]:IfStatement[12688-14302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12878-13168]:Block[12791-13081]"
    }, {
      "left" : "String string = (String) TypeUtils.convert(value, String.class);",
      "right" : "String string = (String) TypeUtils.convert(value, String.class);",
      "info" : "VariableDeclarationStatement[12892-12956]:VariableDeclarationStatement[12805-12869]"
    }, {
      "left" : "if (string != null && !string.equals(\"\"))",
      "right" : "if (string != null && !string.equals(\"\"))",
      "info" : "IfStatement[12969-13158]:IfStatement[12882-13071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13011-13069]:Block[12924-12982]"
    }, {
      "left" : "node.setNodeValue(string);",
      "right" : "node.setNodeValue(string);",
      "info" : "ExpressionStatement[13029-13055]:ExpressionStatement[12942-12968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13087-13158]:Block[13000-13071]"
    }, {
      "left" : "node.getParentNode().removeChild(node);",
      "right" : "node.getParentNode().removeChild(node);",
      "info" : "ExpressionStatement[13105-13144]:ExpressionStatement[13018-13057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13182-14389]:Block[13095-14302]"
    }, {
      "left" : "NodeList children = node.getChildNodes();",
      "right" : "NodeList children = node.getChildNodes();",
      "info" : "VariableDeclarationStatement[13196-13237]:VariableDeclarationStatement[13109-13150]"
    }, {
      "left" : "int count = children.getLength();",
      "right" : "int count = children.getLength();",
      "info" : "VariableDeclarationStatement[13250-13283]:VariableDeclarationStatement[13163-13196]"
    }, {
      "left" : "for (int i = count; --i >= 0)",
      "right" : "for (int i = count; --i >= 0)",
      "info" : "ForStatement[13296-13430]:ForStatement[13209-13343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13327-13430]:Block[13240-13343]"
    }, {
      "left" : "Node child = children.item(i);",
      "right" : "Node child = children.item(i);",
      "info" : "VariableDeclarationStatement[13345-13375]:VariableDeclarationStatement[13258-13288]"
    }, {
      "left" : "node.removeChild(child);",
      "right" : "node.removeChild(child);",
      "info" : "ExpressionStatement[13392-13416]:ExpressionStatement[13305-13329]"
    }, {
      "left" : "if (value instanceof Node)",
      "right" : "if (value instanceof Node)",
      "info" : "IfStatement[13444-14379]:IfStatement[13357-14292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13471-14031]:Block[13384-13944]"
    }, {
      "left" : "Node valueNode = (Node) value;",
      "right" : "Node valueNode = (Node) value;",
      "info" : "VariableDeclarationStatement[13489-13519]:VariableDeclarationStatement[13402-13432]"
    }, {
      "left" : "if (valueNode instanceof Element\n                    || valueNode instanceof Document)",
      "right" : "if (valueNode instanceof Element\n                    || valueNode instanceof Document)",
      "info" : "IfStatement[13536-14017]:IfStatement[13449-13930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13623-13911]:Block[13536-13824]"
    }, {
      "left" : "children = valueNode.getChildNodes();",
      "right" : "children = valueNode.getChildNodes();",
      "info" : "ExpressionStatement[13645-13682]:ExpressionStatement[13558-13595]"
    }, {
      "left" : "for (int i = 0; i < children.getLength(); i++)",
      "right" : "for (int i = 0; i < children.getLength(); i++)",
      "info" : "ForStatement[13703-13893]:ForStatement[13616-13806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13750-13893]:Block[13663-13806]"
    }, {
      "left" : "Node child = children.item(i);",
      "right" : "Node child = children.item(i);",
      "info" : "VariableDeclarationStatement[13776-13806]:VariableDeclarationStatement[13689-13719]"
    }, {
      "left" : "node.appendChild(child.cloneNode(true));",
      "right" : "node.appendChild(child.cloneNode(true));",
      "info" : "ExpressionStatement[13831-13871]:ExpressionStatement[13744-13784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13933-14017]:Block[13846-13930]"
    }, {
      "left" : "node.appendChild(valueNode.cloneNode(true));",
      "right" : "node.appendChild(valueNode.cloneNode(true));",
      "info" : "ExpressionStatement[13955-13999]:ExpressionStatement[13868-13912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14049-14379]:Block[13962-14292]"
    }, {
      "left" : "String string = (String) TypeUtils.convert(value, String.class);",
      "right" : "String string = (String) TypeUtils.convert(value, String.class);",
      "info" : "VariableDeclarationStatement[14067-14131]:VariableDeclarationStatement[13980-14044]"
    }, {
      "left" : "if (string != null && !string.equals(\"\"))",
      "right" : "if (string != null && !string.equals(\"\"))",
      "info" : "IfStatement[14148-14365]:IfStatement[14061-14278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14190-14365]:Block[14103-14278]"
    }, {
      "left" : "Node textNode =\n                        node.getOwnerDocument().createTextNode(string);",
      "right" : "Node textNode =\n                        node.getOwnerDocument().createTextNode(string);",
      "info" : "VariableDeclarationStatement[14212-14299]:VariableDeclarationStatement[14125-14212]"
    }, {
      "left" : "node.appendChild(textNode);",
      "right" : "node.appendChild(textNode);",
      "info" : "ExpressionStatement[14320-14347]:ExpressionStatement[14233-14260]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14438-14444]:Modifier[14351-14357]"
    }, {
      "left" : "NodePointer",
      "right" : "NodePointer",
      "info" : "SimpleType[14445-14456]:SimpleType[14358-14369]"
    }, {
      "left" : "createChild",
      "right" : "createChild",
      "info" : "SimpleName[14457-14468]:SimpleName[14370-14381]"
    }, {
      "left" : "JXPathContext context",
      "right" : "JXPathContext context",
      "info" : "SingleVariableDeclaration[14478-14499]:SingleVariableDeclaration[14391-14412]"
    }, {
      "left" : "QName name",
      "right" : "QName name",
      "info" : "SingleVariableDeclaration[14509-14519]:SingleVariableDeclaration[14422-14432]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[14529-14538]:SingleVariableDeclaration[14442-14451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14544-15488]:Block[14457-15401]"
    }, {
      "left" : "if (index == WHOLE_COLLECTION)",
      "right" : "if (index == WHOLE_COLLECTION)",
      "info" : "IfStatement[14554-14619]:IfStatement[14467-14532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14585-14619]:Block[14498-14532]"
    }, {
      "left" : "index = 0;",
      "right" : "index = 0;",
      "info" : "ExpressionStatement[14599-14609]:ExpressionStatement[14512-14522]"
    }, {
      "left" : "boolean success =\n            getAbstractFactory(context).createObject(\n                context,\n                this,\n                node,\n                name.toString(),\n                index);",
      "right" : "boolean success =\n            getAbstractFactory(context).createObject(\n                context,\n                this,\n                node,\n                name.toString(),\n                index);",
      "info" : "VariableDeclarationStatement[14628-14825]:VariableDeclarationStatement[14541-14738]"
    }, {
      "left" : "if (success)",
      "right" : "if (success)",
      "info" : "IfStatement[14834-15289]:IfStatement[14747-15202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14847-15289]:Block[14760-15202]"
    }, {
      "left" : "NodeTest nodeTest;",
      "right" : "NodeTest nodeTest;",
      "info" : "VariableDeclarationStatement[14861-14879]:VariableDeclarationStatement[14774-14792]"
    }, {
      "left" : "String prefix = name.getPrefix();",
      "right" : "String prefix = name.getPrefix();",
      "info" : "VariableDeclarationStatement[14892-14925]:VariableDeclarationStatement[14805-14838]"
    }, {
      "left" : "String namespaceURI = prefix == null ? null :\n                context.getNamespaceURI(prefix);",
      "right" : "String namespaceURI = prefix == null ? null :\n                context.getNamespaceURI(prefix);",
      "info" : "VariableDeclarationStatement[14938-15032]:VariableDeclarationStatement[14851-14945]"
    }, {
      "left" : "nodeTest = new NodeNameTest(name, namespaceURI);",
      "right" : "nodeTest = new NodeNameTest(name, namespaceURI);",
      "info" : "ExpressionStatement[15045-15093]:ExpressionStatement[14958-15006]"
    }, {
      "left" : "NodeIterator it = childIterator(nodeTest, false, null);",
      "right" : "NodeIterator it = childIterator(nodeTest, false, null);",
      "info" : "VariableDeclarationStatement[15107-15162]:VariableDeclarationStatement[15020-15075]"
    }, {
      "left" : "if (it != null && it.setPosition(index + 1))",
      "right" : "if (it != null && it.setPosition(index + 1))",
      "info" : "IfStatement[15175-15279]:IfStatement[15088-15192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15220-15279]:Block[15133-15192]"
    }, {
      "left" : "return it.getNodePointer();",
      "right" : "return it.getNodePointer();",
      "info" : "ReturnStatement[15238-15265]:ReturnStatement[15151-15178]"
    }, {
      "left" : "throw new JXPathAbstractFactoryException(\n                \"Factory could not create a child node for path: \" + asPath()\n                        + \"/\" + name + \"[\" + (index + 1) + \"]\");",
      "right" : "throw new JXPathAbstractFactoryException(\n                \"Factory could not create a child node for path: \" + asPath()\n                        + \"/\" + name + \"[\" + (index + 1) + \"]\");",
      "info" : "ThrowStatement[15298-15482]:ThrowStatement[15211-15395]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15531-15537]:Modifier[15444-15450]"
    }, {
      "left" : "NodePointer",
      "right" : "NodePointer",
      "info" : "SimpleType[15538-15549]:SimpleType[15451-15462]"
    }, {
      "left" : "createChild",
      "right" : "createChild",
      "info" : "SimpleName[15550-15561]:SimpleName[15463-15474]"
    }, {
      "left" : "JXPathContext context",
      "right" : "JXPathContext context",
      "info" : "SingleVariableDeclaration[15562-15583]:SingleVariableDeclaration[15475-15496]"
    }, {
      "left" : "QName name",
      "right" : "QName name",
      "info" : "SingleVariableDeclaration[15601-15611]:SingleVariableDeclaration[15514-15524]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[15613-15622]:SingleVariableDeclaration[15526-15535]"
    }, {
      "left" : "Object value",
      "right" : "Object value",
      "info" : "SingleVariableDeclaration[15624-15636]:SingleVariableDeclaration[15537-15549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15642-15759]:Block[15555-15672]"
    }, {
      "left" : "NodePointer ptr = createChild(context, name, index);",
      "right" : "NodePointer ptr = createChild(context, name, index);",
      "info" : "VariableDeclarationStatement[15652-15704]:VariableDeclarationStatement[15565-15617]"
    }, {
      "left" : "ptr.setValue(value);",
      "right" : "ptr.setValue(value);",
      "info" : "ExpressionStatement[15713-15733]:ExpressionStatement[15626-15646]"
    }, {
      "left" : "return ptr;",
      "right" : "return ptr;",
      "info" : "ReturnStatement[15742-15753]:ReturnStatement[15655-15666]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15802-15808]:Modifier[15715-15721]"
    }, {
      "left" : "NodePointer",
      "right" : "NodePointer",
      "info" : "SimpleType[15809-15820]:SimpleType[15722-15733]"
    }, {
      "left" : "createAttribute",
      "right" : "createAttribute",
      "info" : "SimpleName[15821-15836]:SimpleName[15734-15749]"
    }, {
      "left" : "JXPathContext context",
      "right" : "JXPathContext context",
      "info" : "SingleVariableDeclaration[15837-15858]:SingleVariableDeclaration[15750-15771]"
    }, {
      "left" : "QName name",
      "right" : "QName name",
      "info" : "SingleVariableDeclaration[15860-15870]:SingleVariableDeclaration[15773-15783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15872-16773]:Block[15785-16686]"
    }, {
      "left" : "if (!(node instanceof Element))",
      "right" : "if (!(node instanceof Element))",
      "info" : "IfStatement[15882-15982]:IfStatement[15795-15895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15914-15982]:Block[15827-15895]"
    }, {
      "left" : "return super.createAttribute(context, name);",
      "right" : "return super.createAttribute(context, name);",
      "info" : "ReturnStatement[15928-15972]:ReturnStatement[15841-15885]"
    }, {
      "left" : "Element element = (Element) node;",
      "right" : "Element element = (Element) node;",
      "info" : "VariableDeclarationStatement[15991-16024]:VariableDeclarationStatement[15904-15937]"
    }, {
      "left" : "String prefix = name.getPrefix();",
      "right" : "String prefix = name.getPrefix();",
      "info" : "VariableDeclarationStatement[16033-16066]:VariableDeclarationStatement[15946-15979]"
    }, {
      "left" : "if (prefix != null)",
      "right" : "if (prefix != null)",
      "info" : "IfStatement[16075-16653]:IfStatement[15988-16566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16095-16499]:Block[16008-16412]"
    }, {
      "left" : "String ns = null;",
      "right" : "String ns = null;",
      "info" : "VariableDeclarationStatement[16109-16126]:VariableDeclarationStatement[16022-16039]"
    }, {
      "left" : "NamespaceResolver nsr = getNamespaceResolver();",
      "right" : "NamespaceResolver nsr = getNamespaceResolver();",
      "info" : "VariableDeclarationStatement[16139-16186]:VariableDeclarationStatement[16052-16099]"
    }, {
      "left" : "if (nsr != null)",
      "right" : "if (nsr != null)",
      "info" : "IfStatement[16199-16281]:IfStatement[16112-16194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16216-16281]:Block[16129-16194]"
    }, {
      "left" : "ns = nsr.getNamespaceURI(prefix);",
      "right" : "ns = nsr.getNamespaceURI(prefix);",
      "info" : "ExpressionStatement[16234-16267]:ExpressionStatement[16147-16180]"
    }, {
      "left" : "if (ns == null)",
      "right" : "if (ns == null)",
      "info" : "IfStatement[16294-16428]:IfStatement[16207-16341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16310-16428]:Block[16223-16341]"
    }, {
      "left" : "throw new JXPathException(\n                    \"Unknown namespace prefix: \" + prefix);",
      "right" : "throw new JXPathException(\n                    \"Unknown namespace prefix: \" + prefix);",
      "info" : "ThrowStatement[16328-16414]:ThrowStatement[16241-16327]"
    }, {
      "left" : "element.setAttributeNS(ns, name.toString(), \"\");",
      "right" : "element.setAttributeNS(ns, name.toString(), \"\");",
      "info" : "ExpressionStatement[16441-16489]:ExpressionStatement[16354-16402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16513-16653]:Block[16426-16566]"
    }, {
      "left" : "if (!element.hasAttribute(name.getName()))",
      "right" : "if (!element.hasAttribute(name.getName()))",
      "info" : "IfStatement[16527-16643]:IfStatement[16440-16556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16570-16643]:Block[16483-16556]"
    }, {
      "left" : "element.setAttribute(name.getName(), \"\");",
      "right" : "element.setAttribute(name.getName(), \"\");",
      "info" : "ExpressionStatement[16588-16629]:ExpressionStatement[16501-16542]"
    }, {
      "left" : "NodeIterator it = attributeIterator(name);",
      "right" : "NodeIterator it = attributeIterator(name);",
      "info" : "VariableDeclarationStatement[16662-16704]:VariableDeclarationStatement[16575-16617]"
    }, {
      "left" : "it.setPosition(1);",
      "right" : "it.setPosition(1);",
      "info" : "ExpressionStatement[16713-16731]:ExpressionStatement[16626-16644]"
    }, {
      "left" : "return it.getNodePointer();",
      "right" : "return it.getNodePointer();",
      "info" : "ReturnStatement[16740-16767]:ReturnStatement[16653-16680]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16816-16822]:Modifier[16729-16735]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16823-16827]:PrimitiveType[16736-16740]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[16828-16834]:SimpleName[16741-16747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16837-17032]:Block[16750-16945]"
    }, {
      "left" : "Node parent = node.getParentNode();",
      "right" : "Node parent = node.getParentNode();",
      "info" : "VariableDeclarationStatement[16847-16882]:VariableDeclarationStatement[16760-16795]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[16891-16992]:IfStatement[16804-16905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16911-16992]:Block[16824-16905]"
    }, {
      "left" : "throw new JXPathException(\"Cannot remove root DOM node\");",
      "right" : "throw new JXPathException(\"Cannot remove root DOM node\");",
      "info" : "ThrowStatement[16925-16982]:ThrowStatement[16838-16895]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[17001-17026]:ExpressionStatement[16914-16939]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17075-17081]:Modifier[16988-16994]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[17082-17088]:SimpleType[16995-17001]"
    }, {
      "left" : "asPath",
      "right" : "asPath",
      "info" : "SimpleName[17089-17095]:SimpleName[17002-17008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17098-19708]:Block[17011-19621]"
    }, {
      "left" : "if (id != null)",
      "right" : "if (id != null)",
      "info" : "IfStatement[17108-17182]:IfStatement[17021-17095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17124-17182]:Block[17037-17095]"
    }, {
      "left" : "return \"id('\" + escape(id) + \"')\";",
      "right" : "return \"id('\" + escape(id) + \"')\";",
      "info" : "ReturnStatement[17138-17172]:ReturnStatement[17051-17085]"
    }, {
      "left" : "StringBuffer buffer = new StringBuffer();",
      "right" : "StringBuffer buffer = new StringBuffer();",
      "info" : "VariableDeclarationStatement[17192-17233]:VariableDeclarationStatement[17105-17146]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[17242-17317]:IfStatement[17155-17230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17262-17317]:Block[17175-17230]"
    }, {
      "left" : "buffer.append(parent.asPath());",
      "right" : "buffer.append(parent.asPath());",
      "info" : "ExpressionStatement[17276-17307]:ExpressionStatement[17189-17220]"
    }, {
      "left" : "switch (node.getNodeType()) {\n            case Node.ELEMENT_NODE :\n                // If the parent pointer is not a DOMNodePointer, it is\n                // the parent's responsibility to produce the node test part\n                // of the path\n                if (parent instanceof DOMNodePointer) {\n                    if (buffer.length() == 0\n                            || buffer.charAt(buffer.length() - 1) != '/') {\n                        buffer.append('/');\n                    }\n                    String ln = DOMNodePointer.getLocalName(node);\n                    String nsURI = getNamespaceURI();\n                    if (nsURI == null) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    }\n                    else {\n                        String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        }\n                        else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n            break;\n            case Node.TEXT_NODE :\n            case Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case Node.PROCESSING_INSTRUCTION_NODE :\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(((ProcessingInstruction) node).getTarget()).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI()).append(']');\n                break;\n            case Node.DOCUMENT_NODE :\n                // That'll be empty\n        }",
      "right" : "switch (node.getNodeType()) {\n            case Node.ELEMENT_NODE :\n                // If the parent pointer is not a DOMNodePointer, it is\n                // the parent's responsibility to produce the node test part\n                // of the path\n                if (parent instanceof DOMNodePointer) {\n                    if (buffer.length() == 0\n                            || buffer.charAt(buffer.length() - 1) != '/') {\n                        buffer.append('/');\n                    }\n                    String ln = DOMNodePointer.getLocalName(node);\n                    String nsURI = getNamespaceURI();\n                    if (nsURI == null) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    }\n                    else {\n                        String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        }\n                        else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n            break;\n            case Node.TEXT_NODE :\n            case Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case Node.PROCESSING_INSTRUCTION_NODE :\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(((ProcessingInstruction) node).getTarget()).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI()).append(']');\n                break;\n            case Node.DOCUMENT_NODE :\n                // That'll be empty\n        }",
      "info" : "SwitchStatement[17326-19668]:SwitchStatement[17239-19581]"
    }, {
      "left" : "case Node.ELEMENT_NODE :",
      "right" : "case Node.ELEMENT_NODE :",
      "info" : "SwitchCase[17368-17392]:SwitchCase[17281-17305]"
    }, {
      "left" : "if (parent instanceof DOMNodePointer)",
      "right" : "if (parent instanceof DOMNodePointer)",
      "info" : "IfStatement[17589-18981]:IfStatement[17502-18894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17627-18981]:Block[17540-18894]"
    }, {
      "left" : "if (buffer.length() == 0\n                            || buffer.charAt(buffer.length() - 1) != '/')",
      "right" : "if (buffer.length() == 0\n                            || buffer.charAt(buffer.length() - 1) != '/')",
      "info" : "IfStatement[17649-17815]:IfStatement[17562-17728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17748-17815]:Block[17661-17728]"
    }, {
      "left" : "buffer.append('/');",
      "right" : "buffer.append('/');",
      "info" : "ExpressionStatement[17774-17793]:ExpressionStatement[17687-17706]"
    }, {
      "left" : "String ln = DOMNodePointer.getLocalName(node);",
      "right" : "String ln = DOMNodePointer.getLocalName(node);",
      "info" : "VariableDeclarationStatement[17836-17882]:VariableDeclarationStatement[17749-17795]"
    }, {
      "left" : "String nsURI = getNamespaceURI();",
      "right" : "String nsURI = getNamespaceURI();",
      "info" : "VariableDeclarationStatement[17903-17936]:VariableDeclarationStatement[17816-17849]"
    }, {
      "left" : "if (nsURI == null)",
      "right" : "if (nsURI == null)",
      "info" : "IfStatement[17957-18963]:IfStatement[17870-18876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17976-18166]:Block[17889-18079]"
    }, {
      "left" : "buffer.append(ln);",
      "right" : "buffer.append(ln);",
      "info" : "ExpressionStatement[18002-18020]:ExpressionStatement[17915-17933]"
    }, {
      "left" : "buffer.append('[');",
      "right" : "buffer.append('[');",
      "info" : "ExpressionStatement[18045-18064]:ExpressionStatement[17958-17977]"
    }, {
      "left" : "buffer.append(getRelativePositionByName()).append(']');",
      "right" : "buffer.append(getRelativePositionByName()).append(']');",
      "info" : "ExpressionStatement[18089-18144]:ExpressionStatement[18002-18057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18192-18963]:Block[18105-18876]"
    }, {
      "left" : "String prefix = getNamespaceResolver().getPrefix(nsURI);",
      "right" : "String prefix = getNamespaceResolver().getPrefix(nsURI);",
      "info" : "VariableDeclarationStatement[18218-18274]:VariableDeclarationStatement[18131-18187]"
    }, {
      "left" : "if (prefix != null)",
      "right" : "if (prefix != null)",
      "info" : "IfStatement[18299-18941]:IfStatement[18212-18854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18319-18660]:Block[18232-18573]"
    }, {
      "left" : "buffer.append(prefix);",
      "right" : "buffer.append(prefix);",
      "info" : "ExpressionStatement[18349-18371]:ExpressionStatement[18262-18284]"
    }, {
      "left" : "buffer.append(':');",
      "right" : "buffer.append(':');",
      "info" : "ExpressionStatement[18400-18419]:ExpressionStatement[18313-18332]"
    }, {
      "left" : "buffer.append(ln);",
      "right" : "buffer.append(ln);",
      "info" : "ExpressionStatement[18448-18466]:ExpressionStatement[18361-18379]"
    }, {
      "left" : "buffer.append('[');",
      "right" : "buffer.append('[');",
      "info" : "ExpressionStatement[18495-18514]:ExpressionStatement[18408-18427]"
    }, {
      "left" : "buffer.append(getRelativePositionByName());",
      "right" : "buffer.append(getRelativePositionByName());",
      "info" : "ExpressionStatement[18543-18586]:ExpressionStatement[18456-18499]"
    }, {
      "left" : "buffer.append(']');",
      "right" : "buffer.append(']');",
      "info" : "ExpressionStatement[18615-18634]:ExpressionStatement[18528-18547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18690-18941]:Block[18603-18854]"
    }, {
      "left" : "buffer.append(\"node()\");",
      "right" : "buffer.append(\"node()\");",
      "info" : "ExpressionStatement[18720-18744]:ExpressionStatement[18633-18657]"
    }, {
      "left" : "buffer.append('[');",
      "right" : "buffer.append('[');",
      "info" : "ExpressionStatement[18773-18792]:ExpressionStatement[18686-18705]"
    }, {
      "left" : "buffer.append(getRelativePositionOfElement());",
      "right" : "buffer.append(getRelativePositionOfElement());",
      "info" : "ExpressionStatement[18821-18867]:ExpressionStatement[18734-18780]"
    }, {
      "left" : "buffer.append(']');",
      "right" : "buffer.append(']');",
      "info" : "ExpressionStatement[18896-18915]:ExpressionStatement[18809-18828]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18994-19000]:BreakStatement[18907-18913]"
    }, {
      "left" : "case Node.TEXT_NODE :",
      "right" : "case Node.TEXT_NODE :",
      "info" : "SwitchCase[19013-19034]:SwitchCase[18926-18947]"
    }, {
      "left" : "case Node.CDATA_SECTION_NODE :",
      "right" : "case Node.CDATA_SECTION_NODE :",
      "info" : "SwitchCase[19047-19077]:SwitchCase[18960-18990]"
    }, {
      "left" : "buffer.append(\"/text()\");",
      "right" : "buffer.append(\"/text()\");",
      "info" : "ExpressionStatement[19094-19119]:ExpressionStatement[19007-19032]"
    }, {
      "left" : "buffer.append('[');",
      "right" : "buffer.append('[');",
      "info" : "ExpressionStatement[19136-19155]:ExpressionStatement[19049-19068]"
    }, {
      "left" : "buffer.append(getRelativePositionOfTextNode()).append(']');",
      "right" : "buffer.append(getRelativePositionOfTextNode()).append(']');",
      "info" : "ExpressionStatement[19172-19231]:ExpressionStatement[19085-19144]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19248-19254]:BreakStatement[19161-19167]"
    }, {
      "left" : "case Node.PROCESSING_INSTRUCTION_NODE :",
      "right" : "case Node.PROCESSING_INSTRUCTION_NODE :",
      "info" : "SwitchCase[19267-19306]:SwitchCase[19180-19219]"
    }, {
      "left" : "buffer.append(\"/processing-instruction(\\'\");",
      "right" : "buffer.append(\"/processing-instruction(\\'\");",
      "info" : "ExpressionStatement[19323-19367]:ExpressionStatement[19236-19280]"
    }, {
      "left" : "buffer.append(((ProcessingInstruction) node).getTarget()).append(\"')\");",
      "right" : "buffer.append(((ProcessingInstruction) node).getTarget()).append(\"')\");",
      "info" : "ExpressionStatement[19384-19455]:ExpressionStatement[19297-19368]"
    }, {
      "left" : "buffer.append('[');",
      "right" : "buffer.append('[');",
      "info" : "ExpressionStatement[19472-19491]:ExpressionStatement[19385-19404]"
    }, {
      "left" : "buffer.append(getRelativePositionOfPI()).append(']');",
      "right" : "buffer.append(getRelativePositionOfPI()).append(']');",
      "info" : "ExpressionStatement[19508-19561]:ExpressionStatement[19421-19474]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19578-19584]:BreakStatement[19491-19497]"
    }, {
      "left" : "case Node.DOCUMENT_NODE :",
      "right" : "case Node.DOCUMENT_NODE :",
      "info" : "SwitchCase[19597-19622]:SwitchCase[19510-19535]"
    }, {
      "left" : "return buffer.toString();",
      "right" : "return buffer.toString();",
      "info" : "ReturnStatement[19677-19702]:ReturnStatement[19590-19615]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19880-19887]:Modifier[19793-19800]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[19888-19894]:SimpleType[19801-19807]"
    }, {
      "left" : "escape",
      "right" : "escape",
      "info" : "SimpleName[19895-19901]:SimpleName[19808-19814]"
    }, {
      "left" : "String string",
      "right" : "String string",
      "info" : "SingleVariableDeclaration[19902-19915]:SingleVariableDeclaration[19815-19828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19917-20773]:Block[19830-20686]"
    }, {
      "left" : "final char[] c = new char[] { '\\'', '\"' };",
      "right" : "final char[] c = new char[] { '\\'', '\"' };",
      "info" : "VariableDeclarationStatement[19927-19969]:VariableDeclarationStatement[19840-19882]"
    }, {
      "left" : "final String[] esc = new String[] { \"&apos;\", \"&quot;\" };",
      "right" : "final String[] esc = new String[] { \"&apos;\", \"&quot;\" };",
      "info" : "VariableDeclarationStatement[19978-20035]:VariableDeclarationStatement[19891-19948]"
    }, {
      "left" : "StringBuffer sb = null;",
      "right" : "StringBuffer sb = null;",
      "info" : "VariableDeclarationStatement[20044-20067]:VariableDeclarationStatement[19957-19980]"
    }, {
      "left" : "for (int i = 0; sb == null && i < c.length; i++)",
      "right" : "for (int i = 0; sb == null && i < c.length; i++)",
      "info" : "ForStatement[20076-20242]:ForStatement[19989-20155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20125-20242]:Block[20038-20155]"
    }, {
      "left" : "if (string.indexOf(c[i]) >= 0)",
      "right" : "if (string.indexOf(c[i]) >= 0)",
      "info" : "IfStatement[20139-20232]:IfStatement[20052-20145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20170-20232]:Block[20083-20145]"
    }, {
      "left" : "sb = new StringBuffer(string);",
      "right" : "sb = new StringBuffer(string);",
      "info" : "ExpressionStatement[20188-20218]:ExpressionStatement[20101-20131]"
    }, {
      "left" : "if (sb == null)",
      "right" : "if (sb == null)",
      "info" : "IfStatement[20251-20305]:IfStatement[20164-20218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20267-20305]:Block[20180-20218]"
    }, {
      "left" : "return string;",
      "right" : "return string;",
      "info" : "ReturnStatement[20281-20295]:ReturnStatement[20194-20208]"
    }, {
      "left" : "for (int i = 0; i < c.length; i++)",
      "right" : "for (int i = 0; i < c.length; i++)",
      "info" : "ForStatement[20314-20737]:ForStatement[20227-20650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20349-20737]:Block[20262-20650]"
    }, {
      "left" : "if (string.indexOf(c[i]) < 0)",
      "right" : "if (string.indexOf(c[i]) < 0)",
      "info" : "IfStatement[20363-20434]:IfStatement[20276-20347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20393-20434]:Block[20306-20347]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[20411-20420]:ContinueStatement[20324-20333]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[20447-20459]:VariableDeclarationStatement[20360-20372]"
    }, {
      "left" : "while (pos < sb.length())",
      "right" : "while (pos < sb.length())",
      "info" : "WhileStatement[20472-20727]:WhileStatement[20385-20640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20498-20727]:Block[20411-20640]"
    }, {
      "left" : "if (sb.charAt(pos) == c[i])",
      "right" : "if (sb.charAt(pos) == c[i])",
      "info" : "IfStatement[20516-20713]:IfStatement[20429-20626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20544-20661]:Block[20457-20574]"
    }, {
      "left" : "sb.replace(pos, pos + 1, esc[i]);",
      "right" : "sb.replace(pos, pos + 1, esc[i]);",
      "info" : "ExpressionStatement[20566-20599]:ExpressionStatement[20479-20512]"
    }, {
      "left" : "pos += esc[i].length();",
      "right" : "pos += esc[i].length();",
      "info" : "ExpressionStatement[20620-20643]:ExpressionStatement[20533-20556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20667-20713]:Block[20580-20626]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[20689-20695]:ExpressionStatement[20602-20608]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[20746-20767]:ReturnStatement[20659-20680]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20879-20886]:Modifier[20792-20799]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[20887-20890]:PrimitiveType[20800-20803]"
    }, {
      "left" : "getRelativePositionByName",
      "right" : "getRelativePositionByName",
      "info" : "SimpleName[20891-20916]:SimpleName[20804-20829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20919-21308]:Block[20832-21221]"
    }, {
      "left" : "int count = 1;",
      "right" : "int count = 1;",
      "info" : "VariableDeclarationStatement[20929-20943]:VariableDeclarationStatement[20842-20856]"
    }, {
      "left" : "Node n = node.getPreviousSibling();",
      "right" : "Node n = node.getPreviousSibling();",
      "info" : "VariableDeclarationStatement[20952-20987]:VariableDeclarationStatement[20865-20900]"
    }, {
      "left" : "while (n != null)",
      "right" : "while (n != null)",
      "info" : "WhileStatement[20996-21280]:WhileStatement[20909-21193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21014-21280]:Block[20927-21193]"
    }, {
      "left" : "if (n.getNodeType() == Node.ELEMENT_NODE)",
      "right" : "if (n.getNodeType() == Node.ELEMENT_NODE)",
      "info" : "IfStatement[21028-21230]:IfStatement[20941-21143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21070-21230]:Block[20983-21143]"
    }, {
      "left" : "String nm = n.getNodeName();",
      "right" : "String nm = n.getNodeName();",
      "info" : "VariableDeclarationStatement[21088-21116]:VariableDeclarationStatement[21001-21029]"
    }, {
      "left" : "if (nm.equals(node.getNodeName()))",
      "right" : "if (nm.equals(node.getNodeName()))",
      "info" : "IfStatement[21133-21216]:IfStatement[21046-21129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21168-21216]:Block[21081-21129]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[21190-21198]:ExpressionStatement[21103-21111]"
    }, {
      "left" : "n = n.getPreviousSibling();",
      "right" : "n = n.getPreviousSibling();",
      "info" : "ExpressionStatement[21243-21270]:ExpressionStatement[21156-21183]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[21289-21302]:ReturnStatement[21202-21215]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21407-21414]:Modifier[21320-21327]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[21415-21418]:PrimitiveType[21328-21331]"
    }, {
      "left" : "getRelativePositionOfElement",
      "right" : "getRelativePositionOfElement",
      "info" : "SimpleName[21419-21447]:SimpleName[21332-21360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21450-21719]:Block[21363-21632]"
    }, {
      "left" : "int count = 1;",
      "right" : "int count = 1;",
      "info" : "VariableDeclarationStatement[21460-21474]:VariableDeclarationStatement[21373-21387]"
    }, {
      "left" : "Node n = node.getPreviousSibling();",
      "right" : "Node n = node.getPreviousSibling();",
      "info" : "VariableDeclarationStatement[21483-21518]:VariableDeclarationStatement[21396-21431]"
    }, {
      "left" : "while (n != null)",
      "right" : "while (n != null)",
      "info" : "WhileStatement[21527-21691]:WhileStatement[21440-21604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21545-21691]:Block[21458-21604]"
    }, {
      "left" : "if (n.getNodeType() == Node.ELEMENT_NODE)",
      "right" : "if (n.getNodeType() == Node.ELEMENT_NODE)",
      "info" : "IfStatement[21559-21641]:IfStatement[21472-21554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21601-21641]:Block[21514-21554]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[21619-21627]:ExpressionStatement[21532-21540]"
    }, {
      "left" : "n = n.getPreviousSibling();",
      "right" : "n = n.getPreviousSibling();",
      "info" : "ExpressionStatement[21654-21681]:ExpressionStatement[21567-21594]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[21700-21713]:ReturnStatement[21613-21626]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21828-21835]:Modifier[21741-21748]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[21836-21839]:PrimitiveType[21749-21752]"
    }, {
      "left" : "getRelativePositionOfTextNode",
      "right" : "getRelativePositionOfTextNode",
      "info" : "SimpleName[21840-21869]:SimpleName[21753-21782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21872-22200]:Block[21785-22113]"
    }, {
      "left" : "int count = 1;",
      "right" : "int count = 1;",
      "info" : "VariableDeclarationStatement[21882-21896]:VariableDeclarationStatement[21795-21809]"
    }, {
      "left" : "Node n = node.getPreviousSibling();",
      "right" : "Node n = node.getPreviousSibling();",
      "info" : "VariableDeclarationStatement[21905-21940]:VariableDeclarationStatement[21818-21853]"
    }, {
      "left" : "while (n != null)",
      "right" : "while (n != null)",
      "info" : "WhileStatement[21949-22172]:WhileStatement[21862-22085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21967-22172]:Block[21880-22085]"
    }, {
      "left" : "if (n.getNodeType() == Node.TEXT_NODE\n                || n.getNodeType() == Node.CDATA_SECTION_NODE)",
      "right" : "if (n.getNodeType() == Node.TEXT_NODE\n                || n.getNodeType() == Node.CDATA_SECTION_NODE)",
      "info" : "IfStatement[21981-22122]:IfStatement[21894-22035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22082-22122]:Block[21995-22035]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[22100-22108]:ExpressionStatement[22013-22021]"
    }, {
      "left" : "n = n.getPreviousSibling();",
      "right" : "n = n.getPreviousSibling();",
      "info" : "ExpressionStatement[22135-22162]:ExpressionStatement[22048-22075]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[22181-22194]:ReturnStatement[22094-22107]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22334-22341]:Modifier[22247-22254]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[22342-22345]:PrimitiveType[22255-22258]"
    }, {
      "left" : "getRelativePositionOfPI",
      "right" : "getRelativePositionOfPI",
      "info" : "SimpleName[22346-22369]:SimpleName[22259-22282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22372-22798]:Block[22285-22711]"
    }, {
      "left" : "int count = 1;",
      "right" : "int count = 1;",
      "info" : "VariableDeclarationStatement[22382-22396]:VariableDeclarationStatement[22295-22309]"
    }, {
      "left" : "String target = ((ProcessingInstruction) node).getTarget();",
      "right" : "String target = ((ProcessingInstruction) node).getTarget();",
      "info" : "VariableDeclarationStatement[22405-22464]:VariableDeclarationStatement[22318-22377]"
    }, {
      "left" : "Node n = node.getPreviousSibling();",
      "right" : "Node n = node.getPreviousSibling();",
      "info" : "VariableDeclarationStatement[22473-22508]:VariableDeclarationStatement[22386-22421]"
    }, {
      "left" : "while (n != null)",
      "right" : "while (n != null)",
      "info" : "WhileStatement[22517-22770]:WhileStatement[22430-22683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22535-22770]:Block[22448-22683]"
    }, {
      "left" : "if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE\n                && ((ProcessingInstruction) n).getTarget().equals(target))",
      "right" : "if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE\n                && ((ProcessingInstruction) n).getTarget().equals(target))",
      "info" : "IfStatement[22549-22720]:IfStatement[22462-22633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22680-22720]:Block[22593-22633]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[22698-22706]:ExpressionStatement[22611-22619]"
    }, {
      "left" : "n = n.getPreviousSibling();",
      "right" : "n = n.getPreviousSibling();",
      "info" : "ExpressionStatement[22733-22760]:ExpressionStatement[22646-22673]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[22779-22792]:ReturnStatement[22692-22705]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22841-22847]:Modifier[22754-22760]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[22848-22851]:PrimitiveType[22761-22764]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[22852-22860]:SimpleName[22765-22773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22863-22916]:Block[22776-22829]"
    }, {
      "left" : "return System.identityHashCode(node);",
      "right" : "return System.identityHashCode(node);",
      "info" : "ReturnStatement[22873-22910]:ReturnStatement[22786-22823]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22959-22965]:Modifier[22872-22878]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22966-22973]:PrimitiveType[22879-22886]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[22974-22980]:SimpleName[22887-22893]"
    }, {
      "left" : "Object object",
      "right" : "Object object",
      "info" : "SingleVariableDeclaration[22981-22994]:SingleVariableDeclaration[22894-22907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22996-23112]:Block[22909-23025]"
    }, {
      "left" : "return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node;",
      "right" : "return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node;",
      "info" : "ReturnStatement[23006-23106]:ReturnStatement[22919-23019]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23251-23257]:Modifier[23164-23170]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23258-23264]:Modifier[23171-23177]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[23265-23271]:SimpleType[23178-23184]"
    }, {
      "left" : "getPrefix",
      "right" : "getPrefix",
      "info" : "SimpleName[23272-23281]:SimpleName[23185-23194]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[23282-23291]:SingleVariableDeclaration[23195-23204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23293-23555]:Block[23206-23468]"
    }, {
      "left" : "String prefix = node.getPrefix();",
      "right" : "String prefix = node.getPrefix();",
      "info" : "VariableDeclarationStatement[23303-23336]:VariableDeclarationStatement[23216-23249]"
    }, {
      "left" : "if (prefix != null)",
      "right" : "if (prefix != null)",
      "info" : "IfStatement[23345-23403]:IfStatement[23258-23316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23365-23403]:Block[23278-23316]"
    }, {
      "left" : "return prefix;",
      "right" : "return prefix;",
      "info" : "ReturnStatement[23379-23393]:ReturnStatement[23292-23306]"
    }, {
      "left" : "String name = node.getNodeName();",
      "right" : "String name = node.getNodeName();",
      "info" : "VariableDeclarationStatement[23413-23446]:VariableDeclarationStatement[23326-23359]"
    }, {
      "left" : "int index = name.lastIndexOf(':');",
      "right" : "int index = name.lastIndexOf(':');",
      "info" : "VariableDeclarationStatement[23455-23489]:VariableDeclarationStatement[23368-23402]"
    }, {
      "left" : "return index < 0 ? null : name.substring(0, index);",
      "right" : "return index < 0 ? null : name.substring(0, index);",
      "info" : "ReturnStatement[23498-23549]:ReturnStatement[23411-23462]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23692-23698]:Modifier[23605-23611]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23699-23705]:Modifier[23612-23618]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[23706-23712]:SimpleType[23619-23625]"
    }, {
      "left" : "getLocalName",
      "right" : "getLocalName",
      "info" : "SimpleName[23713-23725]:SimpleName[23626-23638]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[23726-23735]:SingleVariableDeclaration[23639-23648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23737-24012]:Block[23650-23925]"
    }, {
      "left" : "String localName = node.getLocalName();",
      "right" : "String localName = node.getLocalName();",
      "info" : "VariableDeclarationStatement[23747-23786]:VariableDeclarationStatement[23660-23699]"
    }, {
      "left" : "if (localName != null)",
      "right" : "if (localName != null)",
      "info" : "IfStatement[23795-23859]:IfStatement[23708-23772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23818-23859]:Block[23731-23772]"
    }, {
      "left" : "return localName;",
      "right" : "return localName;",
      "info" : "ReturnStatement[23832-23849]:ReturnStatement[23745-23762]"
    }, {
      "left" : "String name = node.getNodeName();",
      "right" : "String name = node.getNodeName();",
      "info" : "VariableDeclarationStatement[23869-23902]:VariableDeclarationStatement[23782-23815]"
    }, {
      "left" : "int index = name.lastIndexOf(':');",
      "right" : "int index = name.lastIndexOf(':');",
      "info" : "VariableDeclarationStatement[23911-23945]:VariableDeclarationStatement[23824-23858]"
    }, {
      "left" : "return index < 0 ? name : name.substring(index + 1);",
      "right" : "return index < 0 ? name : name.substring(index + 1);",
      "info" : "ReturnStatement[23954-24006]:ReturnStatement[23867-23919]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24141-24147]:Modifier[24054-24060]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24148-24154]:Modifier[24061-24067]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[24155-24161]:SimpleType[24068-24074]"
    }, {
      "left" : "getNamespaceURI",
      "right" : "getNamespaceURI",
      "info" : "SimpleName[24162-24177]:SimpleName[24075-24090]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[24178-24187]:SingleVariableDeclaration[24091-24100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24189-24946]:Block[24102-24859]"
    }, {
      "left" : "if (node instanceof Document)",
      "right" : "if (node instanceof Document)",
      "info" : "IfStatement[24199-24299]:IfStatement[24112-24212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24229-24299]:Block[24142-24212]"
    }, {
      "left" : "node = ((Document) node).getDocumentElement();",
      "right" : "node = ((Document) node).getDocumentElement();",
      "info" : "ExpressionStatement[24243-24289]:ExpressionStatement[24156-24202]"
    }, {
      "left" : "Element element = (Element) node;",
      "right" : "Element element = (Element) node;",
      "info" : "VariableDeclarationStatement[24309-24342]:VariableDeclarationStatement[24222-24255]"
    }, {
      "left" : "String uri = element.getNamespaceURI();",
      "right" : "String uri = element.getNamespaceURI();",
      "info" : "VariableDeclarationStatement[24352-24391]:VariableDeclarationStatement[24265-24304]"
    }, {
      "left" : "if (uri != null)",
      "right" : "if (uri != null)",
      "info" : "IfStatement[24400-24452]:IfStatement[24313-24365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24417-24452]:Block[24330-24365]"
    }, {
      "left" : "return uri;",
      "right" : "return uri;",
      "info" : "ReturnStatement[24431-24442]:ReturnStatement[24344-24355]"
    }, {
      "left" : "String prefix = getPrefix(node);",
      "right" : "String prefix = getPrefix(node);",
      "info" : "VariableDeclarationStatement[24462-24494]:VariableDeclarationStatement[24375-24407]"
    }, {
      "left" : "String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;",
      "right" : "String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;",
      "info" : "VariableDeclarationStatement[24503-24563]:VariableDeclarationStatement[24416-24476]"
    }, {
      "left" : "Node aNode = node;",
      "right" : "Node aNode = node;",
      "info" : "VariableDeclarationStatement[24573-24591]:VariableDeclarationStatement[24486-24504]"
    }, {
      "left" : "while (aNode != null)",
      "right" : "while (aNode != null)",
      "info" : "WhileStatement[24600-24919]:WhileStatement[24513-24832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24622-24919]:Block[24535-24832]"
    }, {
      "left" : "if (aNode.getNodeType() == Node.ELEMENT_NODE)",
      "right" : "if (aNode.getNodeType() == Node.ELEMENT_NODE)",
      "info" : "IfStatement[24636-24866]:IfStatement[24549-24779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24682-24866]:Block[24595-24779]"
    }, {
      "left" : "Attr attr = ((Element) aNode).getAttributeNode(qname);",
      "right" : "Attr attr = ((Element) aNode).getAttributeNode(qname);",
      "info" : "VariableDeclarationStatement[24700-24754]:VariableDeclarationStatement[24613-24667]"
    }, {
      "left" : "if (attr != null)",
      "right" : "if (attr != null)",
      "info" : "IfStatement[24771-24852]:IfStatement[24684-24765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24789-24852]:Block[24702-24765]"
    }, {
      "left" : "return attr.getValue();",
      "right" : "return attr.getValue();",
      "info" : "ReturnStatement[24811-24834]:ReturnStatement[24724-24747]"
    }, {
      "left" : "aNode = aNode.getParentNode();",
      "right" : "aNode = aNode.getParentNode();",
      "info" : "ExpressionStatement[24879-24909]:ExpressionStatement[24792-24822]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24928-24940]:ReturnStatement[24841-24853]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24989-24995]:Modifier[24902-24908]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[24996-25002]:SimpleType[24909-24915]"
    }, {
      "left" : "getValue",
      "right" : "getValue",
      "info" : "SimpleName[25003-25011]:SimpleName[24916-24924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25014-25226]:Block[24927-25139]"
    }, {
      "left" : "if (node.getNodeType() == Node.COMMENT_NODE)",
      "right" : "if (node.getNodeType() == Node.COMMENT_NODE)",
      "info" : "IfStatement[25024-25186]:IfStatement[24937-25099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25069-25186]:Block[24982-25099]"
    }, {
      "left" : "String text = ((Comment) node).getData();",
      "right" : "String text = ((Comment) node).getData();",
      "info" : "VariableDeclarationStatement[25083-25124]:VariableDeclarationStatement[24996-25037]"
    }, {
      "left" : "return text == null ? \"\" : text.trim();",
      "right" : "return text == null ? \"\" : text.trim();",
      "info" : "ReturnStatement[25137-25176]:ReturnStatement[25050-25089]"
    }, {
      "left" : "return stringValue(node);",
      "right" : "return stringValue(node);",
      "info" : "ReturnStatement[25195-25220]:ReturnStatement[25108-25133]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25354-25361]:Modifier[25267-25274]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[25362-25368]:SimpleType[25275-25281]"
    }, {
      "left" : "stringValue",
      "right" : "stringValue",
      "info" : "SimpleName[25369-25380]:SimpleName[25282-25293]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[25381-25390]:SingleVariableDeclaration[25294-25303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25392-26286]:Block[25305-26199]"
    }, {
      "left" : "int nodeType = node.getNodeType();",
      "right" : "int nodeType = node.getNodeType();",
      "info" : "VariableDeclarationStatement[25402-25436]:VariableDeclarationStatement[25315-25349]"
    }, {
      "left" : "if (nodeType == Node.COMMENT_NODE)",
      "right" : "if (nodeType == Node.COMMENT_NODE)",
      "info" : "IfStatement[25445-25514]:IfStatement[25358-25427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25480-25514]:Block[25393-25427]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[25494-25504]:ReturnStatement[25407-25417]"
    }, {
      "left" : "boolean trim = !\"preserve\".equals(findEnclosingAttribute(node, \"xml:space\"));",
      "right" : "boolean trim = !\"preserve\".equals(findEnclosingAttribute(node, \"xml:space\"));",
      "info" : "VariableDeclarationStatement[25523-25600]:VariableDeclarationStatement[25436-25513]"
    }, {
      "left" : "if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE)",
      "right" : "if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE)",
      "info" : "IfStatement[25609-25804]:IfStatement[25522-25717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25680-25804]:Block[25593-25717]"
    }, {
      "left" : "String text = node.getNodeValue();",
      "right" : "String text = node.getNodeValue();",
      "info" : "VariableDeclarationStatement[25694-25728]:VariableDeclarationStatement[25607-25641]"
    }, {
      "left" : "return text == null ? \"\" : trim ? text.trim() : text;",
      "right" : "return text == null ? \"\" : trim ? text.trim() : text;",
      "info" : "ReturnStatement[25741-25794]:ReturnStatement[25654-25707]"
    }, {
      "left" : "if (nodeType == Node.PROCESSING_INSTRUCTION_NODE)",
      "right" : "if (nodeType == Node.PROCESSING_INSTRUCTION_NODE)",
      "info" : "IfStatement[25813-26008]:IfStatement[25726-25921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25863-26008]:Block[25776-25921]"
    }, {
      "left" : "String text = ((ProcessingInstruction) node).getData();",
      "right" : "String text = ((ProcessingInstruction) node).getData();",
      "info" : "VariableDeclarationStatement[25877-25932]:VariableDeclarationStatement[25790-25845]"
    }, {
      "left" : "return text == null ? \"\" : trim ? text.trim() : text;",
      "right" : "return text == null ? \"\" : trim ? text.trim() : text;",
      "info" : "ReturnStatement[25945-25998]:ReturnStatement[25858-25911]"
    }, {
      "left" : "NodeList list = node.getChildNodes();",
      "right" : "NodeList list = node.getChildNodes();",
      "info" : "VariableDeclarationStatement[26017-26054]:VariableDeclarationStatement[25930-25967]"
    }, {
      "left" : "StringBuffer buf = new StringBuffer(16);",
      "right" : "StringBuffer buf = new StringBuffer(16);",
      "info" : "VariableDeclarationStatement[26063-26103]:VariableDeclarationStatement[25976-26016]"
    }, {
      "left" : "for (int i = 0; i < list.getLength(); i++)",
      "right" : "for (int i = 0; i < list.getLength(); i++)",
      "info" : "ForStatement[26112-26249]:ForStatement[26025-26162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26155-26249]:Block[26068-26162]"
    }, {
      "left" : "Node child = list.item(i);",
      "right" : "Node child = list.item(i);",
      "info" : "VariableDeclarationStatement[26169-26195]:VariableDeclarationStatement[26082-26108]"
    }, {
      "left" : "buf.append(stringValue(child));",
      "right" : "buf.append(stringValue(child));",
      "info" : "ExpressionStatement[26208-26239]:ExpressionStatement[26121-26152]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[26258-26280]:ReturnStatement[26171-26193]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26424-26430]:Modifier[26337-26343]"
    }, {
      "left" : "Pointer",
      "right" : "Pointer",
      "info" : "SimpleType[26431-26438]:SimpleType[26344-26351]"
    }, {
      "left" : "getPointerByID",
      "right" : "getPointerByID",
      "info" : "SimpleName[26439-26453]:SimpleName[26352-26366]"
    }, {
      "left" : "JXPathContext context",
      "right" : "JXPathContext context",
      "info" : "SingleVariableDeclaration[26454-26475]:SingleVariableDeclaration[26367-26388]"
    }, {
      "left" : "String id",
      "right" : "String id",
      "info" : "SingleVariableDeclaration[26477-26486]:SingleVariableDeclaration[26390-26399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26488-26820]:Block[26401-26733]"
    }, {
      "left" : "Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node\n                : node.getOwnerDocument();",
      "right" : "Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node\n                : node.getOwnerDocument();",
      "info" : "VariableDeclarationStatement[26498-26619]:VariableDeclarationStatement[26411-26532]"
    }, {
      "left" : "Element element = document.getElementById(id);",
      "right" : "Element element = document.getElementById(id);",
      "info" : "VariableDeclarationStatement[26628-26674]:VariableDeclarationStatement[26541-26587]"
    }, {
      "left" : "return element == null ? (Pointer) new NullPointer(getLocale(), id)\n                : new DOMNodePointer(element, getLocale(), id);",
      "right" : "return element == null ? (Pointer) new NullPointer(getLocale(), id)\n                : new DOMNodePointer(element, getLocale(), id);",
      "info" : "ReturnStatement[26683-26814]:ReturnStatement[26596-26727]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26985-26992]:Modifier[26898-26905]"
    }, {
      "left" : "AbstractFactory",
      "right" : "AbstractFactory",
      "info" : "SimpleType[26993-27008]:SimpleType[26906-26921]"
    }, {
      "left" : "getAbstractFactory",
      "right" : "getAbstractFactory",
      "info" : "SimpleName[27009-27027]:SimpleName[26922-26940]"
    }, {
      "left" : "JXPathContext context",
      "right" : "JXPathContext context",
      "info" : "SingleVariableDeclaration[27028-27049]:SingleVariableDeclaration[26941-26962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27051-27357]:Block[26964-27270]"
    }, {
      "left" : "AbstractFactory factory = context.getFactory();",
      "right" : "AbstractFactory factory = context.getFactory();",
      "info" : "VariableDeclarationStatement[27061-27108]:VariableDeclarationStatement[26974-27021]"
    }, {
      "left" : "if (factory == null)",
      "right" : "if (factory == null)",
      "info" : "IfStatement[27117-27327]:IfStatement[27030-27240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27138-27327]:Block[27051-27240]"
    }, {
      "left" : "throw new JXPathException(\n                \"Factory is not set on the JXPathContext - \"\n                    + \"cannot create path: \"\n                    + asPath());",
      "right" : "throw new JXPathException(\n                \"Factory is not set on the JXPathContext - \"\n                    + \"cannot create path: \"\n                    + asPath());",
      "info" : "ThrowStatement[27152-27317]:ThrowStatement[27065-27230]"
    }, {
      "left" : "return factory;",
      "right" : "return factory;",
      "info" : "ReturnStatement[27336-27351]:ReturnStatement[27249-27264]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27400-27406]:Modifier[27313-27319]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[27407-27410]:PrimitiveType[27320-27323]"
    }, {
      "left" : "compareChildNodePointers",
      "right" : "compareChildNodePointers",
      "info" : "SimpleName[27411-27435]:SimpleName[27324-27348]"
    }, {
      "left" : "NodePointer pointer1",
      "right" : "NodePointer pointer1",
      "info" : "SingleVariableDeclaration[27449-27469]:SingleVariableDeclaration[27362-27382]"
    }, {
      "left" : "NodePointer pointer2",
      "right" : "NodePointer pointer2",
      "info" : "SingleVariableDeclaration[27471-27491]:SingleVariableDeclaration[27384-27404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27497-28759]:Block[27410-28672]"
    }, {
      "left" : "Node node1 = (Node) pointer1.getBaseValue();",
      "right" : "Node node1 = (Node) pointer1.getBaseValue();",
      "info" : "VariableDeclarationStatement[27507-27551]:VariableDeclarationStatement[27420-27464]"
    }, {
      "left" : "Node node2 = (Node) pointer2.getBaseValue();",
      "right" : "Node node2 = (Node) pointer2.getBaseValue();",
      "info" : "VariableDeclarationStatement[27560-27604]:VariableDeclarationStatement[27473-27517]"
    }, {
      "left" : "if (node1 == node2)",
      "right" : "if (node1 == node2)",
      "info" : "IfStatement[27613-27666]:IfStatement[27526-27579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27633-27666]:Block[27546-27579]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[27647-27656]:ReturnStatement[27560-27569]"
    }, {
      "left" : "int t1 = node1.getNodeType();",
      "right" : "int t1 = node1.getNodeType();",
      "info" : "VariableDeclarationStatement[27676-27705]:VariableDeclarationStatement[27589-27618]"
    }, {
      "left" : "int t2 = node2.getNodeType();",
      "right" : "int t2 = node2.getNodeType();",
      "info" : "VariableDeclarationStatement[27714-27743]:VariableDeclarationStatement[27627-27656]"
    }, {
      "left" : "if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE)",
      "right" : "if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE)",
      "info" : "IfStatement[27752-27846]:IfStatement[27665-27759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27812-27846]:Block[27725-27759]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[27826-27836]:ReturnStatement[27739-27749]"
    }, {
      "left" : "if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE)",
      "right" : "if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE)",
      "info" : "IfStatement[27855-27948]:IfStatement[27768-27861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27915-27948]:Block[27828-27861]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[27929-27938]:ReturnStatement[27842-27851]"
    }, {
      "left" : "if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE)",
      "right" : "if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE)",
      "info" : "IfStatement[27957-28444]:IfStatement[27870-28357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28017-28444]:Block[27930-28357]"
    }, {
      "left" : "NamedNodeMap map = ((Node) getNode()).getAttributes();",
      "right" : "NamedNodeMap map = ((Node) getNode()).getAttributes();",
      "info" : "VariableDeclarationStatement[28031-28085]:VariableDeclarationStatement[27944-27998]"
    }, {
      "left" : "int length = map.getLength();",
      "right" : "int length = map.getLength();",
      "info" : "VariableDeclarationStatement[28098-28127]:VariableDeclarationStatement[28011-28040]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[28140-28391]:ForStatement[28053-28304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28173-28391]:Block[28086-28304]"
    }, {
      "left" : "Node n = map.item(i);",
      "right" : "Node n = map.item(i);",
      "info" : "VariableDeclarationStatement[28191-28212]:VariableDeclarationStatement[28104-28125]"
    }, {
      "left" : "if (n == node1)",
      "right" : "if (n == node1)",
      "info" : "IfStatement[28229-28295]:IfStatement[28142-28208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28245-28295]:Block[28158-28208]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[28267-28277]:ReturnStatement[28180-28190]"
    }, {
      "left" : "if (n == node2)",
      "right" : "if (n == node2)",
      "info" : "IfStatement[28312-28377]:IfStatement[28225-28290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28328-28377]:Block[28241-28290]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[28350-28359]:ReturnStatement[28263-28272]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[28404-28413]:ReturnStatement[28317-28326]"
    }, {
      "left" : "Node current = node.getFirstChild();",
      "right" : "Node current = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[28454-28490]:VariableDeclarationStatement[28367-28403]"
    }, {
      "left" : "while (current != null)",
      "right" : "while (current != null)",
      "info" : "WhileStatement[28499-28735]:WhileStatement[28412-28648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28523-28735]:Block[28436-28648]"
    }, {
      "left" : "if (current == node1)",
      "right" : "if (current == node1)",
      "info" : "IfStatement[28537-28601]:IfStatement[28450-28514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28559-28601]:Block[28472-28514]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[28577-28587]:ReturnStatement[28490-28500]"
    }, {
      "left" : "if (current == node2)",
      "right" : "if (current == node2)",
      "info" : "IfStatement[28614-28677]:IfStatement[28527-28590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28636-28677]:Block[28549-28590]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[28654-28663]:ReturnStatement[28567-28576]"
    }, {
      "left" : "current = current.getNextSibling();",
      "right" : "current = current.getNextSibling();",
      "info" : "ExpressionStatement[28690-28725]:ExpressionStatement[28603-28638]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[28744-28753]:ReturnStatement[28657-28666]"
    } ]
  },
  "interFileMappings" : { }
}