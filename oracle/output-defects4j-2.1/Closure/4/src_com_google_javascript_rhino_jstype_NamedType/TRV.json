{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[3523-3571]:FieldDeclaration[3523-3571]"
    }, {
      "left" : "private final String reference;",
      "right" : "private final String reference;",
      "info" : "FieldDeclaration[3575-3606]:FieldDeclaration[3575-3606]"
    }, {
      "left" : "private final String sourceName;",
      "right" : "private final String sourceName;",
      "info" : "FieldDeclaration[3609-3641]:FieldDeclaration[3609-3641]"
    }, {
      "left" : "private final int lineno;",
      "right" : "private final int lineno;",
      "info" : "FieldDeclaration[3644-3669]:FieldDeclaration[3644-3669]"
    }, {
      "left" : "private final int charno;",
      "right" : "private final int charno;",
      "info" : "FieldDeclaration[3672-3697]:FieldDeclaration[3672-3697]"
    }, {
      "left" : "private Predicate<JSType> validator;",
      "right" : "private Predicate<JSType> validator;",
      "info" : "FieldDeclaration[3701-3785]:FieldDeclaration[3701-3785]"
    }, {
      "left" : "private List<PropertyContinuation> propertyContinuations = null;",
      "right" : "private List<PropertyContinuation> propertyContinuations = null;",
      "info" : "FieldDeclaration[3789-3903]:FieldDeclaration[3789-3903]"
    }, {
      "left" : "NamedType(JSTypeRegistry registry, String reference,\n      String sourceName, int lineno, int charno)",
      "right" : "NamedType(JSTypeRegistry registry, String reference,\n      String sourceName, int lineno, int charno)",
      "info" : "MethodDeclaration[3907-4315]:MethodDeclaration[3907-4315]"
    }, {
      "left" : "boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode)",
      "right" : "boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode)",
      "info" : "MethodDeclaration[4319-4951]:MethodDeclaration[4319-4951]"
    }, {
      "left" : "private void finishPropertyContinuations()",
      "right" : "private void finishPropertyContinuations()",
      "info" : "MethodDeclaration[4955-5335]:MethodDeclaration[4955-5335]"
    }, {
      "left" : "public JSType getReferencedType()",
      "right" : "public JSType getReferencedType()",
      "info" : "MethodDeclaration[5339-5499]:MethodDeclaration[5339-5499]"
    }, {
      "left" : "public String getReferenceName()",
      "right" : "public String getReferenceName()",
      "info" : "MethodDeclaration[5503-5575]:MethodDeclaration[5503-5575]"
    }, {
      "left" : "String toStringHelper(boolean forAnnotations)",
      "right" : "String toStringHelper(boolean forAnnotations)",
      "info" : "MethodDeclaration[5579-5664]:MethodDeclaration[5579-5664]"
    }, {
      "left" : "public boolean hasReferenceName()",
      "right" : "public boolean hasReferenceName()",
      "info" : "MethodDeclaration[5668-5736]:MethodDeclaration[5668-5736]"
    }, {
      "left" : "boolean isNamedType()",
      "right" : "boolean isNamedType()",
      "info" : "MethodDeclaration[5740-5796]:MethodDeclaration[5740-5796]"
    }, {
      "left" : "public boolean isNominalType()",
      "right" : "public boolean isNominalType()",
      "info" : "MethodDeclaration[5800-5865]:MethodDeclaration[5800-5865]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[5869-5941]:MethodDeclaration[5869-5941]"
    }, {
      "left" : "private boolean resolveViaRegistry(\n      ErrorReporter t, StaticScope<JSType> enclosing)",
      "right" : "private boolean resolveViaRegistry(\n      ErrorReporter t, StaticScope<JSType> enclosing)",
      "info" : "MethodDeclaration[7036-7421]:MethodDeclaration[7024-7409]"
    }, {
      "left" : "private void resolveViaProperties(ErrorReporter t,\n                                    StaticScope<JSType> enclosing)",
      "right" : "private void resolveViaProperties(ErrorReporter t,\n                                    StaticScope<JSType> enclosing)",
      "info" : "MethodDeclaration[7425-8894]:MethodDeclaration[7413-8882]"
    }, {
      "left" : "private JSType lookupViaProperties( ErrorReporter t,\n      StaticScope<JSType> enclosing)",
      "right" : "private JSType lookupViaProperties( ErrorReporter t,\n      StaticScope<JSType> enclosing)",
      "info" : "MethodDeclaration[8898-10308]:MethodDeclaration[8886-10296]"
    }, {
      "left" : "private void setReferencedAndResolvedType(JSType type, ErrorReporter t,\n      StaticScope<JSType> enclosing)",
      "right" : "private void setReferencedAndResolvedType(JSType type, ErrorReporter t,\n      StaticScope<JSType> enclosing)",
      "info" : "MethodDeclaration[10312-10599]:MethodDeclaration[10300-10587]"
    }, {
      "left" : "private void handleTypeCycle(ErrorReporter t)",
      "right" : "private void handleTypeCycle(ErrorReporter t)",
      "info" : "MethodDeclaration[10603-10904]:MethodDeclaration[10591-10892]"
    }, {
      "left" : "private void checkEnumElementCycle(ErrorReporter t)",
      "right" : "private void checkEnumElementCycle(ErrorReporter t)",
      "info" : "MethodDeclaration[10908-11172]:MethodDeclaration[10896-11160]"
    }, {
      "left" : "private void handleUnresolvedType(\n      ErrorReporter t, boolean ignoreForwardReferencedTypes)",
      "right" : "private void handleUnresolvedType(\n      ErrorReporter t, boolean ignoreForwardReferencedTypes)",
      "info" : "MethodDeclaration[11268-12082]:MethodDeclaration[11256-12070]"
    }, {
      "left" : "JSType getTypedefType(ErrorReporter t, StaticSlot<JSType> slot, String name)",
      "right" : "JSType getTypedefType(ErrorReporter t, StaticSlot<JSType> slot, String name)",
      "info" : "MethodDeclaration[12086-12303]:MethodDeclaration[12074-12291]"
    }, {
      "left" : "public boolean setValidator(Predicate<JSType> validator)",
      "right" : "public boolean setValidator(Predicate<JSType> validator)",
      "info" : "MethodDeclaration[12307-12704]:MethodDeclaration[12295-12692]"
    }, {
      "left" : "PropertyContinuation",
      "right" : "PropertyContinuation",
      "info" : "TypeDeclaration[12708-13386]:TypeDeclaration[12696-13374]"
    }, {
      "left" : "private final String propertyName;",
      "right" : "private final String propertyName;",
      "info" : "FieldDeclaration[12834-12868]:FieldDeclaration[12822-12856]"
    }, {
      "left" : "private final JSType type;",
      "right" : "private final JSType type;",
      "info" : "FieldDeclaration[12873-12899]:FieldDeclaration[12861-12887]"
    }, {
      "left" : "private final boolean inferred;",
      "right" : "private final boolean inferred;",
      "info" : "FieldDeclaration[12904-12935]:FieldDeclaration[12892-12923]"
    }, {
      "left" : "private final Node propertyNode;",
      "right" : "private final Node propertyNode;",
      "info" : "FieldDeclaration[12940-12972]:FieldDeclaration[12928-12960]"
    }, {
      "left" : "private PropertyContinuation(\n        String propertyName,\n        JSType type,\n        boolean inferred,\n        Node propertyNode)",
      "right" : "private PropertyContinuation(\n        String propertyName,\n        JSType type,\n        boolean inferred,\n        Node propertyNode)",
      "info" : "MethodDeclaration[12978-13254]:MethodDeclaration[12966-13242]"
    }, {
      "left" : "void commit(ObjectType target)",
      "right" : "void commit(ObjectType target)",
      "info" : "MethodDeclaration[13260-13382]:MethodDeclaration[13248-13370]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4070-4315]:Block[4070-4315]"
    }, {
      "left" : "super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));",
      "right" : "super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));",
      "info" : "SuperConstructorInvocation[4076-4149]:SuperConstructorInvocation[4076-4149]"
    }, {
      "left" : "Preconditions.checkNotNull(reference);",
      "right" : "Preconditions.checkNotNull(reference);",
      "info" : "ExpressionStatement[4155-4193]:ExpressionStatement[4155-4193]"
    }, {
      "left" : "this.reference = reference;",
      "right" : "this.reference = reference;",
      "info" : "ExpressionStatement[4198-4225]:ExpressionStatement[4198-4225]"
    }, {
      "left" : "this.sourceName = sourceName;",
      "right" : "this.sourceName = sourceName;",
      "info" : "ExpressionStatement[4230-4259]:ExpressionStatement[4230-4259]"
    }, {
      "left" : "this.lineno = lineno;",
      "right" : "this.lineno = lineno;",
      "info" : "ExpressionStatement[4264-4285]:ExpressionStatement[4264-4285]"
    }, {
      "left" : "this.charno = charno;",
      "right" : "this.charno = charno;",
      "info" : "ExpressionStatement[4290-4311]:ExpressionStatement[4290-4311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4431-4951]:Block[4431-4951]"
    }, {
      "left" : "if (!isResolved())",
      "right" : "if (!isResolved())",
      "info" : "IfStatement[4437-4947]:IfStatement[4437-4947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4456-4844]:Block[4456-4844]"
    }, {
      "left" : "if (propertyContinuations == null)",
      "right" : "if (propertyContinuations == null)",
      "info" : "IfStatement[4592-4690]:IfStatement[4592-4690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4627-4690]:Block[4627-4690]"
    }, {
      "left" : "propertyContinuations = Lists.newArrayList();",
      "right" : "propertyContinuations = Lists.newArrayList();",
      "info" : "ExpressionStatement[4637-4682]:ExpressionStatement[4637-4682]"
    }, {
      "left" : "propertyContinuations.add(\n          new PropertyContinuation(\n              propertyName, type, inferred, propertyNode));",
      "right" : "propertyContinuations.add(\n          new PropertyContinuation(\n              propertyName, type, inferred, propertyNode));",
      "info" : "ExpressionStatement[4697-4819]:ExpressionStatement[4697-4819]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4826-4838]:ReturnStatement[4826-4838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4850-4947]:Block[4850-4947]"
    }, {
      "left" : "return super.defineProperty(\n          propertyName, type, inferred, propertyNode);",
      "right" : "return super.defineProperty(\n          propertyName, type, inferred, propertyNode);",
      "info" : "ReturnStatement[4858-4941]:ReturnStatement[4858-4941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4998-5335]:Block[4998-5335]"
    }, {
      "left" : "ObjectType referencedObjType = getReferencedObjTypeInternal();",
      "right" : "ObjectType referencedObjType = getReferencedObjTypeInternal();",
      "info" : "VariableDeclarationStatement[5004-5066]:VariableDeclarationStatement[5004-5066]"
    }, {
      "left" : "if (referencedObjType != null && !referencedObjType.isUnknownType())",
      "right" : "if (referencedObjType != null && !referencedObjType.isUnknownType())",
      "info" : "IfStatement[5071-5297]:IfStatement[5071-5297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5140-5297]:Block[5140-5297]"
    }, {
      "left" : "if (propertyContinuations != null)",
      "right" : "if (propertyContinuations != null)",
      "info" : "IfStatement[5148-5291]:IfStatement[5148-5291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5183-5291]:Block[5183-5291]"
    }, {
      "left" : "for (PropertyContinuation c : propertyContinuations)",
      "right" : "for (PropertyContinuation c : propertyContinuations)",
      "info" : "EnhancedForStatement[5193-5283]:EnhancedForStatement[5193-5283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5246-5283]:Block[5246-5283]"
    }, {
      "left" : "c.commit(this);",
      "right" : "c.commit(this);",
      "info" : "ExpressionStatement[5258-5273]:ExpressionStatement[5258-5273]"
    }, {
      "left" : "propertyContinuations = null;",
      "right" : "propertyContinuations = null;",
      "info" : "ExpressionStatement[5302-5331]:ExpressionStatement[5302-5331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5454-5499]:Block[5454-5499]"
    }, {
      "left" : "return getReferencedTypeInternal();",
      "right" : "return getReferencedTypeInternal();",
      "info" : "ReturnStatement[5460-5495]:ReturnStatement[5460-5495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5548-5575]:Block[5548-5575]"
    }, {
      "left" : "return reference;",
      "right" : "return reference;",
      "info" : "ReturnStatement[5554-5571]:ReturnStatement[5554-5571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5637-5664]:Block[5637-5664]"
    }, {
      "left" : "return reference;",
      "right" : "return reference;",
      "info" : "ReturnStatement[5643-5660]:ReturnStatement[5643-5660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5714-5736]:Block[5714-5736]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5720-5732]:ReturnStatement[5720-5732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5774-5796]:Block[5774-5796]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5780-5792]:ReturnStatement[5780-5792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5843-5865]:Block[5843-5865]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5849-5861]:ReturnStatement[5849-5861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5903-5941]:Block[5903-5941]"
    }, {
      "left" : "return reference.hashCode();",
      "right" : "return reference.hashCode();",
      "info" : "ReturnStatement[5909-5937]:ReturnStatement[5909-5937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7246-7421]:Block[7234-7409]"
    }, {
      "left" : "JSType type = registry.getType(reference);",
      "right" : "JSType type = registry.getType(reference);",
      "info" : "VariableDeclarationStatement[7252-7294]:VariableDeclarationStatement[7240-7282]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[7299-7399]:IfStatement[7287-7387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7317-7399]:Block[7305-7387]"
    }, {
      "left" : "setReferencedAndResolvedType(type, t, enclosing);",
      "right" : "setReferencedAndResolvedType(type, t, enclosing);",
      "info" : "ExpressionStatement[7325-7374]:ExpressionStatement[7313-7362]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7381-7393]:ReturnStatement[7369-7381]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7404-7417]:ReturnStatement[7392-7405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7751-8894]:Block[7739-8882]"
    }, {
      "left" : "JSType value = lookupViaProperties(t, enclosing);",
      "right" : "JSType value = lookupViaProperties(t, enclosing);",
      "info" : "VariableDeclarationStatement[7757-7806]:VariableDeclarationStatement[7745-7794]"
    }, {
      "left" : "if (value != null && value.isFunctionType() &&\n        (value.isConstructor() || value.isInterface()))",
      "right" : "if (value != null && value.isFunctionType() &&\n        (value.isConstructor() || value.isInterface()))",
      "info" : "IfStatement[7846-8890]:IfStatement[7834-8878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7949-8112]:Block[7937-8100]"
    }, {
      "left" : "FunctionType functionType = value.toMaybeFunctionType();",
      "right" : "FunctionType functionType = value.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[7957-8013]:VariableDeclarationStatement[7945-8001]"
    }, {
      "left" : "setReferencedAndResolvedType(\n          functionType.getInstanceType(), t, enclosing);",
      "right" : "setReferencedAndResolvedType(\n          functionType.getInstanceType(), t, enclosing);",
      "info" : "ExpressionStatement[8020-8106]:ExpressionStatement[8008-8094]"
    }, {
      "left" : "if (value != null && value.isNoObjectType())",
      "right" : "if (value != null && value.isNoObjectType())",
      "info" : "IfStatement[8118-8890]:IfStatement[8106-8878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8163-8325]:Block[8151-8313]"
    }, {
      "left" : "setReferencedAndResolvedType(\n          registry.getNativeFunctionType(\n              JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing);",
      "right" : "setReferencedAndResolvedType(\n          registry.getNativeFunctionType(\n              JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing);",
      "info" : "ExpressionStatement[8171-8319]:ExpressionStatement[8159-8307]"
    }, {
      "left" : "if (value instanceof EnumType)",
      "right" : "if (value instanceof EnumType)",
      "info" : "IfStatement[8331-8890]:IfStatement[8319-8878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8362-8468]:Block[8350-8456]"
    }, {
      "left" : "setReferencedAndResolvedType(\n          ((EnumType) value).getElementsType(), t, enclosing);",
      "right" : "setReferencedAndResolvedType(\n          ((EnumType) value).getElementsType(), t, enclosing);",
      "info" : "ExpressionStatement[8370-8462]:ExpressionStatement[8358-8450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8474-8890]:Block[8462-8878]"
    }, {
      "left" : "handleUnresolvedType(t, value == null || value.isUnknownType());",
      "right" : "handleUnresolvedType(t, value == null || value.isUnknownType());",
      "info" : "ExpressionStatement[8820-8884]:ExpressionStatement[8808-8872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9267-10308]:Block[9255-10296]"
    }, {
      "left" : "String[] componentNames = reference.split(\"\\\\.\", -1);",
      "right" : "String[] componentNames = reference.split(\"\\\\.\", -1);",
      "info" : "VariableDeclarationStatement[9273-9326]:VariableDeclarationStatement[9261-9314]"
    }, {
      "left" : "if (componentNames[0].length() == 0)",
      "right" : "if (componentNames[0].length() == 0)",
      "info" : "IfStatement[9331-9394]:IfStatement[9319-9382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9368-9394]:Block[9356-9382]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9376-9388]:ReturnStatement[9364-9376]"
    }, {
      "left" : "StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]);",
      "right" : "StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]);",
      "info" : "VariableDeclarationStatement[9399-9462]:VariableDeclarationStatement[9387-9450]"
    }, {
      "left" : "if (slot == null)",
      "right" : "if (slot == null)",
      "info" : "IfStatement[9467-9511]:IfStatement[9455-9499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9485-9511]:Block[9473-9499]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9493-9505]:ReturnStatement[9481-9493]"
    }, {
      "left" : "JSType slotType = slot.getType();",
      "right" : "JSType slotType = slot.getType();",
      "info" : "VariableDeclarationStatement[9686-9719]:VariableDeclarationStatement[9674-9707]"
    }, {
      "left" : "if (slotType == null || slotType.isAllType() || slotType.isNoType())",
      "right" : "if (slotType == null || slotType.isAllType() || slotType.isNoType())",
      "info" : "IfStatement[9724-9819]:IfStatement[9712-9807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9793-9819]:Block[9781-9807]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9801-9813]:ReturnStatement[9789-9801]"
    }, {
      "left" : "JSType value = getTypedefType(t, slot, componentNames[0]);",
      "right" : "JSType value = getTypedefType(t, slot, componentNames[0]);",
      "info" : "VariableDeclarationStatement[9824-9882]:VariableDeclarationStatement[9812-9870]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[9887-9932]:IfStatement[9875-9920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9906-9932]:Block[9894-9920]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9914-9926]:ReturnStatement[9902-9914]"
    }, {
      "left" : "for (int i = 1; i < componentNames.length; i++)",
      "right" : "for (int i = 1; i < componentNames.length; i++)",
      "info" : "ForStatement[9978-10286]:ForStatement[9966-10274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10026-10286]:Block[10014-10274]"
    }, {
      "left" : "ObjectType parentClass = ObjectType.cast(value);",
      "right" : "ObjectType parentClass = ObjectType.cast(value);",
      "info" : "VariableDeclarationStatement[10034-10082]:VariableDeclarationStatement[10022-10070]"
    }, {
      "left" : "if (parentClass == null)",
      "right" : "if (parentClass == null)",
      "info" : "IfStatement[10089-10144]:IfStatement[10077-10132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10114-10144]:Block[10102-10132]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10124-10136]:ReturnStatement[10112-10124]"
    }, {
      "left" : "if (componentNames[i].length() == 0)",
      "right" : "if (componentNames[i].length() == 0)",
      "info" : "IfStatement[10151-10218]:IfStatement[10139-10206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10188-10218]:Block[10176-10206]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10198-10210]:ReturnStatement[10186-10198]"
    }, {
      "left" : "value = parentClass.getPropertyType(componentNames[i]);",
      "right" : "value = parentClass.getPropertyType(componentNames[i]);",
      "info" : "ExpressionStatement[10225-10280]:ExpressionStatement[10213-10268]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[10291-10304]:ReturnStatement[10279-10292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10421-10599]:Block[10409-10587]"
    }, {
      "left" : "if (validator != null)",
      "right" : "if (validator != null)",
      "info" : "IfStatement[10427-10486]:IfStatement[10415-10474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10450-10486]:Block[10438-10474]"
    }, {
      "left" : "validator.apply(type);",
      "right" : "validator.apply(type);",
      "info" : "ExpressionStatement[10458-10480]:ExpressionStatement[10446-10468]"
    }, {
      "left" : "setReferencedType(type);",
      "right" : "setReferencedType(type);",
      "info" : "ExpressionStatement[10491-10515]:ExpressionStatement[10479-10503]"
    }, {
      "left" : "checkEnumElementCycle(t);",
      "right" : "checkEnumElementCycle(t);",
      "info" : "ExpressionStatement[10520-10545]:ExpressionStatement[10508-10533]"
    }, {
      "left" : "setResolvedTypeInternal(getReferencedType());",
      "right" : "setResolvedTypeInternal(getReferencedType());",
      "info" : "ExpressionStatement[10550-10595]:ExpressionStatement[10538-10583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10649-10904]:Block[10637-10892]"
    }, {
      "left" : "setReferencedType(\n        registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));",
      "right" : "setReferencedType(\n        registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[10655-10739]:ExpressionStatement[10643-10727]"
    }, {
      "left" : "t.warning(\"Cycle detected in inheritance chain of type \" + reference,\n        sourceName, lineno, charno);",
      "right" : "t.warning(\"Cycle detected in inheritance chain of type \" + reference,\n        sourceName, lineno, charno);",
      "info" : "ExpressionStatement[10744-10850]:ExpressionStatement[10732-10838]"
    }, {
      "left" : "setResolvedTypeInternal(getReferencedType());",
      "right" : "setResolvedTypeInternal(getReferencedType());",
      "info" : "ExpressionStatement[10855-10900]:ExpressionStatement[10843-10888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10960-11172]:Block[10948-11160]"
    }, {
      "left" : "JSType referencedType = getReferencedType();",
      "right" : "JSType referencedType = getReferencedType();",
      "info" : "VariableDeclarationStatement[10966-11010]:VariableDeclarationStatement[10954-10998]"
    }, {
      "left" : "if (referencedType instanceof EnumElementType &&\n        ((EnumElementType) referencedType).getPrimitiveType() == this)",
      "right" : "if (referencedType instanceof EnumElementType &&\n        ((EnumElementType) referencedType).getPrimitiveType() == this)",
      "info" : "IfStatement[11015-11168]:IfStatement[11003-11156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11135-11168]:Block[11123-11156]"
    }, {
      "left" : "handleTypeCycle(t);",
      "right" : "handleTypeCycle(t);",
      "info" : "ExpressionStatement[11143-11162]:ExpressionStatement[11131-11150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11364-12082]:Block[11352-12070]"
    }, {
      "left" : "if (registry.isLastGeneration())",
      "right" : "if (registry.isLastGeneration())",
      "info" : "IfStatement[11370-12078]:IfStatement[11358-12066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11403-12028]:Block[11391-12016]"
    }, {
      "left" : "boolean isForwardDeclared =\n          ignoreForwardReferencedTypes &&\n          registry.isForwardDeclaredType(reference);",
      "right" : "boolean isForwardDeclared =\n          ignoreForwardReferencedTypes &&\n          registry.isForwardDeclaredType(reference);",
      "info" : "VariableDeclarationStatement[11411-11533]:VariableDeclarationStatement[11399-11521]"
    }, {
      "left" : "if (!isForwardDeclared && registry.isLastGeneration())",
      "right" : "if (!isForwardDeclared && registry.isLastGeneration())",
      "info" : "IfStatement[11540-11969]:IfStatement[11528-11957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11595-11713]:Block[11583-11701]"
    }, {
      "left" : "t.warning(\"Bad type annotation. Unknown type \" + reference,\n            sourceName, lineno, charno);",
      "right" : "t.warning(\"Bad type annotation. Unknown type \" + reference,\n            sourceName, lineno, charno);",
      "info" : "ExpressionStatement[11605-11705]:ExpressionStatement[11593-11693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11719-11969]:Block[11707-11957]"
    }, {
      "left" : "setReferencedType(\n            registry.getNativeObjectType(\n                JSTypeNative.NO_RESOLVED_TYPE));",
      "right" : "setReferencedType(\n            registry.getNativeObjectType(\n                JSTypeNative.NO_RESOLVED_TYPE));",
      "info" : "ExpressionStatement[11729-11838]:ExpressionStatement[11717-11826]"
    }, {
      "left" : "if (registry.isLastGeneration() && validator != null)",
      "right" : "if (registry.isLastGeneration() && validator != null)",
      "info" : "IfStatement[11848-11961]:IfStatement[11836-11949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11902-11961]:Block[11890-11949]"
    }, {
      "left" : "validator.apply(getReferencedType());",
      "right" : "validator.apply(getReferencedType());",
      "info" : "ExpressionStatement[11914-11951]:ExpressionStatement[11902-11939]"
    }, {
      "left" : "setResolvedTypeInternal(getReferencedType());",
      "right" : "setResolvedTypeInternal(getReferencedType());",
      "info" : "ExpressionStatement[11977-12022]:ExpressionStatement[11965-12010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12034-12078]:Block[12022-12066]"
    }, {
      "left" : "setResolvedTypeInternal(this);",
      "right" : "setResolvedTypeInternal(this);",
      "info" : "ExpressionStatement[12042-12072]:ExpressionStatement[12030-12060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12163-12303]:Block[12151-12291]"
    }, {
      "left" : "JSType type = slot.getType();",
      "right" : "JSType type = slot.getType();",
      "info" : "VariableDeclarationStatement[12169-12198]:VariableDeclarationStatement[12157-12186]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[12203-12247]:IfStatement[12191-12235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12221-12247]:Block[12209-12235]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[12229-12241]:ReturnStatement[12217-12229]"
    }, {
      "left" : "handleUnresolvedType(t, true);",
      "right" : "handleUnresolvedType(t, true);",
      "info" : "ExpressionStatement[12252-12282]:ExpressionStatement[12240-12270]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12287-12299]:ReturnStatement[12275-12287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12376-12704]:Block[12364-12692]"
    }, {
      "left" : "if (this.isResolved())",
      "right" : "if (this.isResolved())",
      "info" : "IfStatement[12560-12700]:IfStatement[12548-12688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12583-12634]:Block[12571-12622]"
    }, {
      "left" : "return super.setValidator(validator);",
      "right" : "return super.setValidator(validator);",
      "info" : "ReturnStatement[12591-12628]:ReturnStatement[12579-12616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12640-12700]:Block[12628-12688]"
    }, {
      "left" : "this.validator = validator;",
      "right" : "this.validator = validator;",
      "info" : "ExpressionStatement[12648-12675]:ExpressionStatement[12636-12663]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12682-12694]:ReturnStatement[12670-12682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13111-13254]:Block[13099-13242]"
    }, {
      "left" : "this.propertyName = propertyName;",
      "right" : "this.propertyName = propertyName;",
      "info" : "ExpressionStatement[13119-13152]:ExpressionStatement[13107-13140]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[13159-13176]:ExpressionStatement[13147-13164]"
    }, {
      "left" : "this.inferred = inferred;",
      "right" : "this.inferred = inferred;",
      "info" : "ExpressionStatement[13183-13208]:ExpressionStatement[13171-13196]"
    }, {
      "left" : "this.propertyNode = propertyNode;",
      "right" : "this.propertyNode = propertyNode;",
      "info" : "ExpressionStatement[13215-13248]:ExpressionStatement[13203-13236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13291-13382]:Block[13279-13370]"
    }, {
      "left" : "target.defineProperty(\n          propertyName, type, inferred, propertyNode);",
      "right" : "target.defineProperty(\n          propertyName, type, inferred, propertyNode);",
      "info" : "ExpressionStatement[13299-13376]:ExpressionStatement[13287-13364]"
    } ]
  },
  "interFileMappings" : { }
}