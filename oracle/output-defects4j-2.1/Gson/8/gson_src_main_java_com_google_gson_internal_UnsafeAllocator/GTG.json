{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "UnsafeAllocator",
      "right" : "UnsafeAllocator",
      "info" : "TypeDeclaration[765-3794]:TypeDeclaration[800-4351]"
    }, {
      "left" : "public abstract <T> T newInstance(Class<T> c) throws Exception;",
      "right" : "public abstract <T> T newInstance(Class<T> c) throws Exception;",
      "info" : "MethodDeclaration[942-1005]:MethodDeclaration[977-1040]"
    }, {
      "left" : "public static UnsafeAllocator create()",
      "right" : "public static UnsafeAllocator create()",
      "info" : "MethodDeclaration[1009-3550]:MethodDeclaration[1044-3684]"
    }, {
      "left" : "public <T> T newInstance(Class<T> c) throws Exception",
      "right" : "public <T> T newInstance(Class<T> c) throws Exception",
      "info" : "MethodDeclaration[1500-1679]:MethodDeclaration[1535-1747]"
    }, {
      "left" : "public <T> T newInstance(Class<T> c) throws Exception",
      "right" : "public <T> T newInstance(Class<T> c) throws Exception",
      "info" : "MethodDeclaration[2446-2633]:MethodDeclaration[2514-2734]"
    }, {
      "left" : "public <T> T newInstance(Class<T> c) throws Exception",
      "right" : "public <T> T newInstance(Class<T> c) throws Exception",
      "info" : "MethodDeclaration[3111-3297]:MethodDeclaration[3212-3431]"
    }, {
      "left" : "public <T> T newInstance(Class<T> c)",
      "right" : "public <T> T newInstance(Class<T> c)",
      "info" : "MethodDeclaration[3404-3539]:MethodDeclaration[3538-3673]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1048-3550]:Block[1083-3684]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1163-1728]:TryStatement[1198-1796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1167-1694]:Block[1202-1762]"
    }, {
      "left" : "Class<?> unsafeClass = Class.forName(\"sun.misc.Unsafe\");",
      "right" : "Class<?> unsafeClass = Class.forName(\"sun.misc.Unsafe\");",
      "info" : "VariableDeclarationStatement[1175-1231]:VariableDeclarationStatement[1210-1266]"
    }, {
      "left" : "Field f = unsafeClass.getDeclaredField(\"theUnsafe\");",
      "right" : "Field f = unsafeClass.getDeclaredField(\"theUnsafe\");",
      "info" : "VariableDeclarationStatement[1238-1290]:VariableDeclarationStatement[1273-1325]"
    }, {
      "left" : "f.setAccessible(true);",
      "right" : "f.setAccessible(true);",
      "info" : "ExpressionStatement[1297-1319]:ExpressionStatement[1332-1354]"
    }, {
      "left" : "final Object unsafe = f.get(null);",
      "right" : "final Object unsafe = f.get(null);",
      "info" : "VariableDeclarationStatement[1326-1360]:VariableDeclarationStatement[1361-1395]"
    }, {
      "left" : "final Method allocateInstance = unsafeClass.getMethod(\"allocateInstance\", Class.class);",
      "right" : "final Method allocateInstance = unsafeClass.getMethod(\"allocateInstance\", Class.class);",
      "info" : "VariableDeclarationStatement[1367-1454]:VariableDeclarationStatement[1402-1489]"
    }, {
      "left" : "return new UnsafeAllocator() {\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        public <T> T newInstance(Class<T> c) throws Exception {\n          return (T) allocateInstance.invoke(unsafe, c);\n        }\n      };",
      "right" : "return new UnsafeAllocator() {\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        public <T> T newInstance(Class<T> c) throws Exception {\n          assertInstantiable(c);\n          return (T) allocateInstance.invoke(unsafe, c);\n        }\n      };",
      "info" : "ReturnStatement[1461-1688]:ReturnStatement[1496-1756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1611-1679]:Block[1646-1747]"
    }, {
      "left" : "return (T) allocateInstance.invoke(unsafe, c);",
      "right" : "return (T) allocateInstance.invoke(unsafe, c);",
      "info" : "ReturnStatement[1623-1669]:ReturnStatement[1691-1737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1721-1728]:Block[1789-1796]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1980-2682]:TryStatement[2048-2783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1984-2648]:Block[2052-2749]"
    }, {
      "left" : "Method getConstructorId = ObjectStreamClass.class\n          .getDeclaredMethod(\"getConstructorId\", Class.class);",
      "right" : "Method getConstructorId = ObjectStreamClass.class\n          .getDeclaredMethod(\"getConstructorId\", Class.class);",
      "info" : "VariableDeclarationStatement[1992-2104]:VariableDeclarationStatement[2060-2172]"
    }, {
      "left" : "getConstructorId.setAccessible(true);",
      "right" : "getConstructorId.setAccessible(true);",
      "info" : "ExpressionStatement[2111-2148]:ExpressionStatement[2179-2216]"
    }, {
      "left" : "final int constructorId = (Integer) getConstructorId.invoke(null, Object.class);",
      "right" : "final int constructorId = (Integer) getConstructorId.invoke(null, Object.class);",
      "info" : "VariableDeclarationStatement[2155-2235]:VariableDeclarationStatement[2223-2303]"
    }, {
      "left" : "final Method newInstance = ObjectStreamClass.class\n          .getDeclaredMethod(\"newInstance\", Class.class, int.class);",
      "right" : "final Method newInstance = ObjectStreamClass.class\n          .getDeclaredMethod(\"newInstance\", Class.class, int.class);",
      "info" : "VariableDeclarationStatement[2242-2361]:VariableDeclarationStatement[2310-2429]"
    }, {
      "left" : "newInstance.setAccessible(true);",
      "right" : "newInstance.setAccessible(true);",
      "info" : "ExpressionStatement[2368-2400]:ExpressionStatement[2436-2468]"
    }, {
      "left" : "return new UnsafeAllocator() {\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        public <T> T newInstance(Class<T> c) throws Exception {\n          return (T) newInstance.invoke(null, c, constructorId);\n        }\n      };",
      "right" : "return new UnsafeAllocator() {\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        public <T> T newInstance(Class<T> c) throws Exception {\n          assertInstantiable(c);\n          return (T) newInstance.invoke(null, c, constructorId);\n        }\n      };",
      "info" : "ReturnStatement[2407-2642]:ReturnStatement[2475-2743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2557-2633]:Block[2625-2734]"
    }, {
      "left" : "return (T) newInstance.invoke(null, c, constructorId);",
      "right" : "return (T) newInstance.invoke(null, c, constructorId);",
      "info" : "ReturnStatement[2569-2623]:ReturnStatement[2670-2724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2675-2682]:Block[2776-2783]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2893-3346]:TryStatement[2994-3480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2897-3312]:Block[2998-3446]"
    }, {
      "left" : "final Method newInstance = ObjectInputStream.class\n          .getDeclaredMethod(\"newInstance\", Class.class, Class.class);",
      "right" : "final Method newInstance = ObjectInputStream.class\n          .getDeclaredMethod(\"newInstance\", Class.class, Class.class);",
      "info" : "VariableDeclarationStatement[2905-3026]:VariableDeclarationStatement[3006-3127]"
    }, {
      "left" : "newInstance.setAccessible(true);",
      "right" : "newInstance.setAccessible(true);",
      "info" : "ExpressionStatement[3033-3065]:ExpressionStatement[3134-3166]"
    }, {
      "left" : "return new UnsafeAllocator() {\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        public <T> T newInstance(Class<T> c) throws Exception {\n          return (T) newInstance.invoke(null, c, Object.class);\n        }\n      };",
      "right" : "return new UnsafeAllocator() {\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        public <T> T newInstance(Class<T> c) throws Exception {\n          assertInstantiable(c);\n          return (T) newInstance.invoke(null, c, Object.class);\n        }\n      };",
      "info" : "ReturnStatement[3072-3306]:ReturnStatement[3173-3440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3222-3297]:Block[3323-3431]"
    }, {
      "left" : "return (T) newInstance.invoke(null, c, Object.class);",
      "right" : "return (T) newInstance.invoke(null, c, Object.class);",
      "info" : "ReturnStatement[3234-3287]:ReturnStatement[3368-3421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3339-3346]:Block[3473-3480]"
    }, {
      "left" : "return new UnsafeAllocator() {\n      @Override\n      public <T> T newInstance(Class<T> c) {\n        throw new UnsupportedOperationException(\"Cannot allocate \" + c);\n      }\n    };",
      "right" : "return new UnsafeAllocator() {\n      @Override\n      public <T> T newInstance(Class<T> c) {\n        throw new UnsupportedOperationException(\"Cannot allocate \" + c);\n      }\n    };",
      "info" : "ReturnStatement[3367-3546]:ReturnStatement[3501-3680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3457-3539]:Block[3591-3673]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Cannot allocate \" + c);",
      "right" : "throw new UnsupportedOperationException(\"Cannot allocate \" + c);",
      "info" : "ThrowStatement[3467-3531]:ThrowStatement[3601-3665]"
    } ]
  },
  "interFileMappings" : { }
}