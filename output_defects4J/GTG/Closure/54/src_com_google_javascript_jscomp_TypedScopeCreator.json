{
  "matchedElements" : [
 {
    "left" : "class : TypedScopeCreator",
    "right" : "class : TypedScopeCreator",
    "info" : "TypeDeclaration[4399-66477]:TypeDeclaration[4399-66793]"
  }, {
    "left" : "DELEGATE_PROXY_SUFFIX",
    "right" : "DELEGATE_PROXY_SUFFIX",
    "info" : "FieldDeclaration[4904-5078]:FieldDeclaration[4904-5078]"
  }, {
    "left" : "MALFORMED_TYPEDEF",
    "right" : "MALFORMED_TYPEDEF",
    "info" : "FieldDeclaration[5082-5259]:FieldDeclaration[5082-5259]"
  }, {
    "left" : "ENUM_INITIALIZER",
    "right" : "ENUM_INITIALIZER",
    "info" : "FieldDeclaration[5263-5450]:FieldDeclaration[5263-5450]"
  }, {
    "left" : "CTOR_INITIALIZER",
    "right" : "CTOR_INITIALIZER",
    "info" : "FieldDeclaration[5454-5638]:FieldDeclaration[5454-5638]"
  }, {
    "left" : "IFACE_INITIALIZER",
    "right" : "IFACE_INITIALIZER",
    "info" : "FieldDeclaration[5642-5827]:FieldDeclaration[5642-5827]"
  }, {
    "left" : "CONSTRUCTOR_EXPECTED",
    "right" : "CONSTRUCTOR_EXPECTED",
    "info" : "FieldDeclaration[5831-6010]:FieldDeclaration[5831-6010]"
  }, {
    "left" : "UNKNOWN_LENDS",
    "right" : "UNKNOWN_LENDS",
    "info" : "FieldDeclaration[6014-6184]:FieldDeclaration[6014-6184]"
  }, {
    "left" : "LENDS_ON_NON_OBJECT",
    "right" : "LENDS_ON_NON_OBJECT",
    "info" : "FieldDeclaration[6188-6378]:FieldDeclaration[6188-6378]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[6382-6422]:FieldDeclaration[6382-6422]"
  }, {
    "left" : "typeParsingErrorReporter",
    "right" : "typeParsingErrorReporter",
    "info" : "FieldDeclaration[6425-6478]:FieldDeclaration[6425-6478]"
  }, {
    "left" : "validator",
    "right" : "validator",
    "info" : "FieldDeclaration[6481-6519]:FieldDeclaration[6481-6519]"
  }, {
    "left" : "codingConvention",
    "right" : "codingConvention",
    "info" : "FieldDeclaration[6522-6570]:FieldDeclaration[6522-6570]"
  }, {
    "left" : "typeRegistry",
    "right" : "typeRegistry",
    "info" : "FieldDeclaration[6573-6615]:FieldDeclaration[6573-6615]"
  }, {
    "left" : "delegateProxyPrototypes",
    "right" : "delegateProxyPrototypes",
    "info" : "FieldDeclaration[6618-6696]:FieldDeclaration[6618-6696]"
  }, {
    "left" : "delegateCallingConventions",
    "right" : "delegateCallingConventions",
    "info" : "FieldDeclaration[6699-6786]:FieldDeclaration[6699-6786]"
  }, {
    "left" : "class : DeferredSetType",
    "right" : "class : DeferredSetType",
    "info" : "TypeDeclaration[6790-7463]:TypeDeclaration[6790-7463]"
  }, {
    "left" : "node",
    "right" : "node",
    "info" : "FieldDeclaration[6969-6985]:FieldDeclaration[6969-6985]"
  }, {
    "left" : "type",
    "right" : "type",
    "info" : "FieldDeclaration[6990-7008]:FieldDeclaration[6990-7008]"
  }, {
    "left" : "package DeferredSetType(node , type )",
    "right" : "package DeferredSetType(node , type )",
    "info" : "MethodDeclaration[7014-7351]:MethodDeclaration[7014-7351]"
  }, {
    "left" : "package resolve(scope ) : void",
    "right" : "package resolve(scope ) : void",
    "info" : "MethodDeclaration[7357-7459]:MethodDeclaration[7357-7459]"
  }, {
    "left" : "package TypedScopeCreator(compiler )",
    "right" : "package TypedScopeCreator(compiler )",
    "info" : "MethodDeclaration[7467-7569]:MethodDeclaration[7467-7569]"
  }, {
    "left" : "package TypedScopeCreator(compiler , codingConvention )",
    "right" : "package TypedScopeCreator(compiler , codingConvention )",
    "info" : "MethodDeclaration[7573-7911]:MethodDeclaration[7573-7911]"
  }, {
    "left" : "public createScope(root , parent ) : ",
    "right" : "public createScope(root , parent ) : ",
    "info" : "MethodDeclaration[7915-9827]:MethodDeclaration[7915-9827]"
  }, {
    "left" : "package patchGlobalScope(globalScope , scriptRoot ) : void",
    "right" : "package patchGlobalScope(globalScope , scriptRoot ) : void",
    "info" : "MethodDeclaration[9831-11424]:MethodDeclaration[9831-11424]"
  }, {
    "left" : "package createInitialScope(root ) : ",
    "right" : "package createInitialScope(root ) : ",
    "info" : "MethodDeclaration[11428-12956]:MethodDeclaration[11428-12956]"
  }, {
    "left" : "private declareNativeFunctionType(scope , tId ) : void",
    "right" : "private declareNativeFunctionType(scope , tId ) : void",
    "info" : "MethodDeclaration[12960-13264]:MethodDeclaration[12960-13264]"
  }, {
    "left" : "private declareNativeValueType(scope , name , tId ) : void",
    "right" : "private declareNativeValueType(scope , name , tId ) : void",
    "info" : "MethodDeclaration[13268-13428]:MethodDeclaration[13268-13428]"
  }, {
    "left" : "private declareNativeType(scope , name , t ) : void",
    "right" : "private declareNativeType(scope , name , t ) : void",
    "info" : "MethodDeclaration[13432-13551]:MethodDeclaration[13432-13551]"
  }, {
    "left" : "class : DiscoverEnumsAndTypedefs",
    "right" : "class : DiscoverEnumsAndTypedefs",
    "info" : "TypeDeclaration[13555-15093]:TypeDeclaration[13555-15093]"
  }, {
    "left" : "registry",
    "right" : "registry",
    "info" : "FieldDeclaration[13654-13692]:FieldDeclaration[13654-13692]"
  }, {
    "left" : "package DiscoverEnumsAndTypedefs(registry )",
    "right" : "package DiscoverEnumsAndTypedefs(registry )",
    "info" : "MethodDeclaration[13698-13787]:MethodDeclaration[13698-13787]"
  }, {
    "left" : "public visit(t , node , parent ) : void",
    "right" : "public visit(t , node , parent ) : void",
    "info" : "MethodDeclaration[13793-14651]:MethodDeclaration[13793-14651]"
  }, {
    "left" : "private identifyNameNode(nameNode , valueNode , info ) : void",
    "right" : "private identifyNameNode(nameNode , valueNode , info ) : void",
    "info" : "MethodDeclaration[14657-15089]:MethodDeclaration[14657-15089]"
  }, {
    "left" : "private getNativeType(nativeType ) : ",
    "right" : "private getNativeType(nativeType ) : ",
    "info" : "MethodDeclaration[15097-15207]:MethodDeclaration[15097-15207]"
  }, {
    "left" : "class : AbstractScopeBuilder",
    "right" : "class : AbstractScopeBuilder",
    "info" : "TypeDeclaration[15211-60952]:TypeDeclaration[15211-61268]"
  }, {
    "left" : "scope",
    "right" : "scope",
    "info" : "FieldDeclaration[15302-15374]:FieldDeclaration[15302-15374]"
  }, {
    "left" : "deferredSetTypes",
    "right" : "deferredSetTypes",
    "info" : "FieldDeclaration[15380-15464]:FieldDeclaration[15380-15464]"
  }, {
    "left" : "nonExternFunctions",
    "right" : "nonExternFunctions",
    "info" : "FieldDeclaration[15470-15624]:FieldDeclaration[15470-15624]"
  }, {
    "left" : "stubDeclarations",
    "right" : "stubDeclarations",
    "info" : "FieldDeclaration[15630-15884]:FieldDeclaration[15630-15884]"
  }, {
    "left" : "sourceName",
    "right" : "sourceName",
    "info" : "FieldDeclaration[15890-15985]:FieldDeclaration[15890-15985]"
  }, {
    "left" : "inputId",
    "right" : "inputId",
    "info" : "FieldDeclaration[15991-16071]:FieldDeclaration[15991-16071]"
  }, {
    "left" : "private AbstractScopeBuilder(scope )",
    "right" : "private AbstractScopeBuilder(scope )",
    "info" : "MethodDeclaration[16077-16152]:MethodDeclaration[16077-16152]"
  }, {
    "left" : "package setDeferredType(node , type ) : void",
    "right" : "package setDeferredType(node , type ) : void",
    "info" : "MethodDeclaration[16158-16271]:MethodDeclaration[16158-16271]"
  }, {
    "left" : "package resolveTypes() : void",
    "right" : "package resolveTypes() : void",
    "info" : "MethodDeclaration[16277-16777]:MethodDeclaration[16277-16777]"
  }, {
    "left" : "public shouldTraverse(t , n , parent ) : boolean",
    "right" : "public shouldTraverse(t , n , parent ) : boolean",
    "info" : "MethodDeclaration[16783-17870]:MethodDeclaration[16783-17870]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[17876-19364]:MethodDeclaration[17876-19364]"
  }, {
    "left" : "private attachLiteralTypes(t , n ) : void",
    "right" : "private attachLiteralTypes(t , n ) : void",
    "info" : "MethodDeclaration[19370-20497]:MethodDeclaration[19370-20497]"
  }, {
    "left" : "private defineObjectLiteral(t , objectLit ) : void",
    "right" : "private defineObjectLiteral(t , objectLit ) : void",
    "info" : "MethodDeclaration[20503-22221]:MethodDeclaration[20503-22221]"
  }, {
    "left" : "package processObjectLitProperties(t , objLit , objLitType ) : void",
    "right" : "package processObjectLitProperties(t , objLit , objLitType ) : void",
    "info" : "MethodDeclaration[22227-23742]:MethodDeclaration[22227-23742]"
  }, {
    "left" : "private getDeclaredTypeInAnnotation(sourceName , node , info ) : ",
    "right" : "private getDeclaredTypeInAnnotation(sourceName , node , info ) : ",
    "info" : "MethodDeclaration[23748-24667]:MethodDeclaration[23748-24667]"
  }, {
    "left" : "package assertDefinitionNode(n , type int) : void",
    "right" : "package assertDefinitionNode(n , type int) : void",
    "info" : "MethodDeclaration[24673-24973]:MethodDeclaration[24673-24973]"
  }, {
    "left" : "package defineCatch(n , parent ) : void",
    "right" : "package defineCatch(n , parent ) : void",
    "info" : "MethodDeclaration[24979-25198]:MethodDeclaration[24979-25198]"
  }, {
    "left" : "package defineVar(n , parent ) : void",
    "right" : "package defineVar(n , parent ) : void",
    "info" : "MethodDeclaration[25204-25830]:MethodDeclaration[25204-25830]"
  }, {
    "left" : "package defineFunctionLiteral(n , parent ) : void",
    "right" : "package defineFunctionLiteral(n , parent ) : void",
    "info" : "MethodDeclaration[25836-26736]:MethodDeclaration[25836-26736]"
  }, {
    "left" : "private defineName(name , var , parent , info ) : void",
    "right" : "private defineName(name , var , parent , info ) : void",
    "info" : "MethodDeclaration[26742-27546]:MethodDeclaration[26742-27546]"
  }, {
    "left" : "private shouldUseFunctionLiteralType(type , info , lValue ) : boolean",
    "right" : "private shouldUseFunctionLiteralType(type , info , lValue ) : boolean",
    "info" : "MethodDeclaration[27552-28226]:MethodDeclaration[27552-28226]"
  }, {
    "left" : "private createFunctionTypeFromNodes(rValue , name , info , lvalueNode ) : ",
    "right" : "private createFunctionTypeFromNodes(rValue , name , info , lvalueNode ) : ",
    "info" : "MethodDeclaration[28232-33108]:MethodDeclaration[28232-33108]"
  }, {
    "left" : "private findOverriddenFunction(ownerType , propName ) : ",
    "right" : "private findOverriddenFunction(ownerType , propName ) : ",
    "info" : "MethodDeclaration[33114-33981]:MethodDeclaration[33114-33981]"
  }, {
    "left" : "private createEnumTypeFromNodes(rValue , name , info , lValueNode ) : ",
    "right" : "private createEnumTypeFromNodes(rValue , name , info , lValueNode ) : ",
    "info" : "MethodDeclaration[33987-36454]:MethodDeclaration[33987-36454]"
  }, {
    "left" : "private defineSlot(name , parent , type ) : void",
    "right" : "private defineSlot(name , parent , type ) : void",
    "info" : "MethodDeclaration[36460-36984]:MethodDeclaration[36460-36984]"
  }, {
    "left" : "package defineSlot(n , parent , type , inferred boolean) : void",
    "right" : "package defineSlot(n , parent , type , inferred boolean) : void",
    "info" : "MethodDeclaration[36990-38281]:MethodDeclaration[36990-38281]"
  }, {
    "left" : "package defineSlot(n , parent , variableName , type , inferred boolean) : void",
    "right" : "package defineSlot(n , parent , variableName , type , inferred boolean) : void",
    "info" : "MethodDeclaration[38288-43540]:MethodDeclaration[38288-43540]"
  }, {
    "left" : "private isQnameRootedInGlobalScope(n ) : boolean",
    "right" : "private isQnameRootedInGlobalScope(n ) : boolean",
    "info" : "MethodDeclaration[43546-43940]:MethodDeclaration[43546-43940]"
  }, {
    "left" : "private getDeclaredType(sourceName , info , lValue , rValue ) : ",
    "right" : "private getDeclaredType(sourceName , info , lValue , rValue ) : ",
    "info" : "MethodDeclaration[43946-46498]:MethodDeclaration[43946-46498]"
  }, {
    "left" : "private getFunctionType(v ) : ",
    "right" : "private getFunctionType(v ) : ",
    "info" : "MethodDeclaration[46504-46715]:MethodDeclaration[46504-46715]"
  }, {
    "left" : "private checkForCallingConventionDefiningCalls(n , delegateCallingConventions ...) : void",
    "right" : "private checkForCallingConventionDefiningCalls(n , delegateCallingConventions ...) : void",
    "info" : "MethodDeclaration[46721-47036]:MethodDeclaration[46721-47036]"
  }, {
    "left" : "private checkForClassDefiningCalls(t , n , parent ) : void",
    "right" : "private checkForClassDefiningCalls(t , n , parent ) : void",
    "info" : "MethodDeclaration[47042-49956]:MethodDeclaration[47042-49956]"
  }, {
    "left" : "private applyDelegateRelationship(delegateRelationship ) : void",
    "right" : "private applyDelegateRelationship(delegateRelationship ) : void",
    "info" : "MethodDeclaration[49962-51873]:MethodDeclaration[49962-51873]"
  }, {
    "left" : "package maybeDeclareQualifiedName(t , info , n , parent , rhsValue ) : void",
    "right" : "package maybeDeclareQualifiedName(t , info , n , parent , rhsValue ) : void",
    "info" : "MethodDeclaration[51879-57221]:MethodDeclaration[51879-57537]"
  }, {
    "left" : "private getObjectSlot(slotName ) : ",
    "right" : "private getObjectSlot(slotName ) : ",
    "info" : "MethodDeclaration[57227-57775]:MethodDeclaration[57543-58091]"
  }, {
    "left" : "package resolveStubDeclarations() : void",
    "right" : "package resolveStubDeclarations() : void",
    "info" : "MethodDeclaration[57781-59094]:MethodDeclaration[58097-59410]"
  }, {
    "left" : "class : CollectProperties",
    "right" : "class : CollectProperties",
    "info" : "TypeDeclaration[59100-60923]:TypeDeclaration[59416-61239]"
  }, {
    "left" : "thisType",
    "right" : "thisType",
    "info" : "FieldDeclaration[59321-59355]:FieldDeclaration[59637-59671]"
  }, {
    "left" : "package CollectProperties(thisType )",
    "right" : "package CollectProperties(thisType )",
    "info" : "MethodDeclaration[59363-59445]:MethodDeclaration[59679-59761]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[59453-59952]:MethodDeclaration[59769-60268]"
  }, {
    "left" : "private maybeCollectMember(t , member , nodeWithJsDocInfo , value ) : void",
    "right" : "private maybeCollectMember(t , member , nodeWithJsDocInfo , value ) : void",
    "info" : "MethodDeclaration[59960-60917]:MethodDeclaration[60276-61233]"
  }, {
    "left" : "class : StubDeclaration",
    "right" : "class : StubDeclaration",
    "info" : "TypeDeclaration[60956-61345]:TypeDeclaration[61272-61661]"
  }, {
    "left" : "node",
    "right" : "node",
    "info" : "FieldDeclaration[61071-61095]:FieldDeclaration[61387-61411]"
  }, {
    "left" : "isExtern",
    "right" : "isExtern",
    "info" : "FieldDeclaration[61100-61131]:FieldDeclaration[61416-61447]"
  }, {
    "left" : "ownerName",
    "right" : "ownerName",
    "info" : "FieldDeclaration[61136-61167]:FieldDeclaration[61452-61483]"
  }, {
    "left" : "private StubDeclaration(node , isExtern boolean, ownerName )",
    "right" : "private StubDeclaration(node , isExtern boolean, ownerName )",
    "info" : "MethodDeclaration[61173-61341]:MethodDeclaration[61489-61657]"
  }, {
    "left" : "class : GlobalScopeBuilder",
    "right" : "class : GlobalScopeBuilder",
    "info" : "TypeDeclaration[61349-63575]:TypeDeclaration[61665-63891]"
  }, {
    "left" : "private GlobalScopeBuilder(scope )",
    "right" : "private GlobalScopeBuilder(scope )",
    "info" : "MethodDeclaration[61535-61602]:MethodDeclaration[61851-61918]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[61608-62182]:MethodDeclaration[61924-62498]"
  }, {
    "left" : "package maybeDeclareQualifiedName(t , info , n , parent , rhsValue ) : void",
    "right" : "package maybeDeclareQualifiedName(t , info , n , parent , rhsValue ) : void",
    "info" : "MethodDeclaration[62188-62430]:MethodDeclaration[62504-62746]"
  }, {
    "left" : "private checkForTypedef(t , candidate , info ) : void",
    "right" : "private checkForTypedef(t , candidate , info ) : void",
    "info" : "MethodDeclaration[62436-63571]:MethodDeclaration[62752-63887]"
  }, {
    "left" : "class : LocalScopeBuilder",
    "right" : "class : LocalScopeBuilder",
    "info" : "TypeDeclaration[63605-66450]:TypeDeclaration[63921-66766]"
  }, {
    "left" : "private LocalScopeBuilder(scope )",
    "right" : "private LocalScopeBuilder(scope )",
    "info" : "MethodDeclaration[63780-63913]:MethodDeclaration[64096-64229]"
  }, {
    "left" : "package build() : void",
    "right" : "package build() : void",
    "info" : "MethodDeclaration[63919-64067]:MethodDeclaration[64235-64383]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[64073-64615]:MethodDeclaration[64389-64931]"
  }, {
    "left" : "private handleFunctionInputs(fnNode ) : void",
    "right" : "private handleFunctionInputs(fnNode ) : void",
    "info" : "MethodDeclaration[64621-65486]:MethodDeclaration[64937-65802]"
  }, {
    "left" : "private declareArguments(functionNode ) : void",
    "right" : "private declareArguments(functionNode ) : void",
    "info" : "MethodDeclaration[65492-66422]:MethodDeclaration[65808-66738]"
  } ],
  "mappings" : [
 {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6933-6940]:Modifier[6933-6940]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[6941-6946]:TYPE_DECLARATION_KIND[6941-6946]"
  }, {
    "left" : "DeferredSetType",
    "right" : "DeferredSetType",
    "info" : "SimpleName[7014-7029]:SimpleName[7014-7029]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[7030-7039]:SingleVariableDeclaration[7030-7039]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[7041-7052]:SingleVariableDeclaration[7041-7052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7054-7351]:Block[7054-7351]"
  }, {
    "left" : "Preconditions.checkNotNull(node);",
    "right" : "Preconditions.checkNotNull(node);",
    "info" : "ExpressionStatement[7062-7095]:ExpressionStatement[7062-7095]"
  }, {
    "left" : "Preconditions.checkNotNull(type);",
    "right" : "Preconditions.checkNotNull(type);",
    "info" : "ExpressionStatement[7102-7135]:ExpressionStatement[7102-7135]"
  }, {
    "left" : "this.node = node;",
    "right" : "this.node = node;",
    "info" : "ExpressionStatement[7142-7159]:ExpressionStatement[7142-7159]"
  }, {
    "left" : "this.type = type;",
    "right" : "this.type = type;",
    "info" : "ExpressionStatement[7166-7183]:ExpressionStatement[7166-7183]"
  }, {
    "left" : "node.setJSType(type);",
    "right" : "node.setJSType(type);",
    "info" : "ExpressionStatement[7324-7345]:ExpressionStatement[7324-7345]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7357-7361]:PrimitiveType[7357-7361]"
  }, {
    "left" : "resolve",
    "right" : "resolve",
    "info" : "SimpleName[7362-7369]:SimpleName[7362-7369]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[7370-7381]:SingleVariableDeclaration[7370-7381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7383-7459]:Block[7383-7459]"
  }, {
    "left" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
    "right" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
    "info" : "ExpressionStatement[7391-7453]:ExpressionStatement[7391-7453]"
  }, {
    "left" : "TypedScopeCreator",
    "right" : "TypedScopeCreator",
    "info" : "SimpleName[7467-7484]:SimpleName[7467-7484]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[7485-7510]:SingleVariableDeclaration[7485-7510]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7512-7569]:Block[7512-7569]"
  }, {
    "left" : "this(compiler, compiler.getCodingConvention());",
    "right" : "this(compiler, compiler.getCodingConvention());",
    "info" : "ConstructorInvocation[7518-7565]:ConstructorInvocation[7518-7565]"
  }, {
    "left" : "TypedScopeCreator",
    "right" : "TypedScopeCreator",
    "info" : "SimpleName[7573-7590]:SimpleName[7573-7590]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[7591-7616]:SingleVariableDeclaration[7591-7616]"
  }, {
    "left" : "CodingConvention codingConvention",
    "right" : "CodingConvention codingConvention",
    "info" : "SingleVariableDeclaration[7624-7657]:SingleVariableDeclaration[7624-7657]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7659-7911]:Block[7659-7911]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[7665-7690]:ExpressionStatement[7665-7690]"
  }, {
    "left" : "this.validator = compiler.getTypeValidator();",
    "right" : "this.validator = compiler.getTypeValidator();",
    "info" : "ExpressionStatement[7695-7740]:ExpressionStatement[7695-7740]"
  }, {
    "left" : "this.codingConvention = codingConvention;",
    "right" : "this.codingConvention = codingConvention;",
    "info" : "ExpressionStatement[7745-7786]:ExpressionStatement[7745-7786]"
  }, {
    "left" : "this.typeRegistry = compiler.getTypeRegistry();",
    "right" : "this.typeRegistry = compiler.getTypeRegistry();",
    "info" : "ExpressionStatement[7791-7838]:ExpressionStatement[7791-7838]"
  }, {
    "left" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
    "right" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
    "info" : "ExpressionStatement[7843-7907]:ExpressionStatement[7843-7907]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8052-8061]:MarkerAnnotation[8052-8061]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8064-8070]:Modifier[8064-8070]"
  }, {
    "left" : "Scope",
    "right" : "Scope",
    "info" : "SimpleType[8071-8076]:SimpleType[8071-8076]"
  }, {
    "left" : "createScope",
    "right" : "createScope",
    "info" : "SimpleName[8077-8088]:SimpleName[8077-8088]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[8089-8098]:SingleVariableDeclaration[8089-8098]"
  }, {
    "left" : "Scope parent",
    "right" : "Scope parent",
    "info" : "SingleVariableDeclaration[8100-8112]:SingleVariableDeclaration[8100-8112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8114-9827]:Block[8114-9827]"
  }, {
    "left" : "Scope newScope = null;",
    "right" : "Scope newScope = null;",
    "info" : "VariableDeclarationStatement[8309-8331]:VariableDeclarationStatement[8309-8331]"
  }, {
    "left" : "AbstractScopeBuilder scopeBuilder = null;",
    "right" : "AbstractScopeBuilder scopeBuilder = null;",
    "info" : "VariableDeclarationStatement[8336-8377]:VariableDeclarationStatement[8336-8377]"
  }, {
    "left" : "if (parent == null)",
    "right" : "if (parent == null)",
    "info" : "IfStatement[8382-8890]:IfStatement[8382-8890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8402-8685]:Block[8402-8685]"
  }, {
    "left" : "newScope = createInitialScope(root);",
    "right" : "newScope = createInitialScope(root);",
    "info" : "ExpressionStatement[8461-8497]:ExpressionStatement[8461-8497]"
  }, {
    "left" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
    "right" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
    "info" : "VariableDeclarationStatement[8505-8578]:VariableDeclarationStatement[8505-8578]"
  }, {
    "left" : "scopeBuilder = globalScopeBuilder;",
    "right" : "scopeBuilder = globalScopeBuilder;",
    "info" : "ExpressionStatement[8585-8619]:ExpressionStatement[8585-8619]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
    "right" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
    "info" : "ExpressionStatement[8626-8679]:ExpressionStatement[8626-8679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8691-8890]:Block[8691-8890]"
  }, {
    "left" : "newScope = new Scope(parent, root);",
    "right" : "newScope = new Scope(parent, root);",
    "info" : "ExpressionStatement[8699-8734]:ExpressionStatement[8699-8734]"
  }, {
    "left" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
    "right" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
    "info" : "VariableDeclarationStatement[8741-8811]:VariableDeclarationStatement[8741-8811]"
  }, {
    "left" : "scopeBuilder = localScopeBuilder;",
    "right" : "scopeBuilder = localScopeBuilder;",
    "info" : "ExpressionStatement[8818-8851]:ExpressionStatement[8818-8851]"
  }, {
    "left" : "localScopeBuilder.build();",
    "right" : "localScopeBuilder.build();",
    "info" : "ExpressionStatement[8858-8884]:ExpressionStatement[8858-8884]"
  }, {
    "left" : "scopeBuilder.resolveStubDeclarations();",
    "right" : "scopeBuilder.resolveStubDeclarations();",
    "info" : "ExpressionStatement[8896-8935]:ExpressionStatement[8896-8935]"
  }, {
    "left" : "scopeBuilder.resolveTypes();",
    "right" : "scopeBuilder.resolveTypes();",
    "info" : "ExpressionStatement[8940-8968]:ExpressionStatement[8940-8968]"
  }, {
    "left" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
    "right" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
    "info" : "EnhancedForStatement[9136-9608]:EnhancedForStatement[9136-9608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9194-9608]:Block[9194-9608]"
  }, {
    "left" : "JSType type = functionNode.getJSType();",
    "right" : "JSType type = functionNode.getJSType();",
    "info" : "VariableDeclarationStatement[9202-9241]:VariableDeclarationStatement[9202-9241]"
  }, {
    "left" : "if (type != null && type.isFunctionType())",
    "right" : "if (type != null && type.isFunctionType())",
    "info" : "IfStatement[9248-9602]:IfStatement[9248-9602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9291-9602]:Block[9291-9602]"
  }, {
    "left" : "FunctionType fnType = type.toMaybeFunctionType();",
    "right" : "FunctionType fnType = type.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[9301-9350]:VariableDeclarationStatement[9301-9350]"
  }, {
    "left" : "ObjectType fnThisType = fnType.getTypeOfThis();",
    "right" : "ObjectType fnThisType = fnType.getTypeOfThis();",
    "info" : "VariableDeclarationStatement[9359-9406]:VariableDeclarationStatement[9359-9406]"
  }, {
    "left" : "if (!fnThisType.isUnknownType())",
    "right" : "if (!fnThisType.isUnknownType())",
    "info" : "IfStatement[9415-9594]:IfStatement[9415-9594]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9448-9594]:Block[9448-9594]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
    "right" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
    "info" : "ExpressionStatement[9460-9584]:ExpressionStatement[9460-9584]"
  }, {
    "left" : "if (parent == null)",
    "right" : "if (parent == null)",
    "info" : "IfStatement[9614-9802]:IfStatement[9614-9802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9634-9802]:Block[9634-9802]"
  }, {
    "left" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
    "right" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
    "info" : "ExpressionStatement[9642-9796]:ExpressionStatement[9642-9796]"
  }, {
    "left" : "return newScope;",
    "right" : "return newScope;",
    "info" : "ReturnStatement[9807-9823]:ReturnStatement[9807-9823]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10116-10120]:PrimitiveType[10116-10120]"
  }, {
    "left" : "patchGlobalScope",
    "right" : "patchGlobalScope",
    "info" : "SimpleName[10121-10137]:SimpleName[10121-10137]"
  }, {
    "left" : "Scope globalScope",
    "right" : "Scope globalScope",
    "info" : "SingleVariableDeclaration[10138-10155]:SingleVariableDeclaration[10138-10155]"
  }, {
    "left" : "Node scriptRoot",
    "right" : "Node scriptRoot",
    "info" : "SingleVariableDeclaration[10157-10172]:SingleVariableDeclaration[10157-10172]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10174-11424]:Block[10174-11424]"
  }, {
    "left" : "Preconditions.checkState(scriptRoot.getType() == Token.SCRIPT);",
    "right" : "Preconditions.checkState(scriptRoot.getType() == Token.SCRIPT);",
    "info" : "ExpressionStatement[10329-10392]:ExpressionStatement[10329-10392]"
  }, {
    "left" : "Preconditions.checkNotNull(globalScope);",
    "right" : "Preconditions.checkNotNull(globalScope);",
    "info" : "ExpressionStatement[10397-10437]:ExpressionStatement[10397-10437]"
  }, {
    "left" : "Preconditions.checkState(globalScope.isGlobal());",
    "right" : "Preconditions.checkState(globalScope.isGlobal());",
    "info" : "ExpressionStatement[10442-10491]:ExpressionStatement[10442-10491]"
  }, {
    "left" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
    "right" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
    "info" : "VariableDeclarationStatement[10719-10774]:VariableDeclarationStatement[10719-10774]"
  }, {
    "left" : "Preconditions.checkNotNull(scriptName);",
    "right" : "Preconditions.checkNotNull(scriptName);",
    "info" : "ExpressionStatement[10779-10818]:ExpressionStatement[10779-10818]"
  }, {
    "left" : "Iterator<Var> varIter = globalScope.getVars();",
    "right" : "Iterator<Var> varIter = globalScope.getVars();",
    "info" : "VariableDeclarationStatement[10898-10944]:VariableDeclarationStatement[10898-10944]"
  }, {
    "left" : "List<Var> varsToRemove = Lists.newArrayList();",
    "right" : "List<Var> varsToRemove = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[10949-10995]:VariableDeclarationStatement[10949-10995]"
  }, {
    "left" : "while (varIter.hasNext())",
    "right" : "while (varIter.hasNext())",
    "info" : "WhileStatement[11000-11164]:WhileStatement[11000-11164]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11026-11164]:Block[11026-11164]"
  }, {
    "left" : "Var oldVar = varIter.next();",
    "right" : "Var oldVar = varIter.next();",
    "info" : "VariableDeclarationStatement[11034-11062]:VariableDeclarationStatement[11034-11062]"
  }, {
    "left" : "if (scriptName.equals(oldVar.getInputName()))",
    "right" : "if (scriptName.equals(oldVar.getInputName()))",
    "info" : "IfStatement[11069-11158]:IfStatement[11069-11158]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11115-11158]:Block[11115-11158]"
  }, {
    "left" : "varsToRemove.add(oldVar);",
    "right" : "varsToRemove.add(oldVar);",
    "info" : "ExpressionStatement[11125-11150]:ExpressionStatement[11125-11150]"
  }, {
    "left" : "for (Var var : varsToRemove)",
    "right" : "for (Var var : varsToRemove)",
    "info" : "EnhancedForStatement[11169-11239]:EnhancedForStatement[11169-11239]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11198-11239]:Block[11198-11239]"
  }, {
    "left" : "globalScope.undeclare(var);",
    "right" : "globalScope.undeclare(var);",
    "info" : "ExpressionStatement[11206-11233]:ExpressionStatement[11206-11233]"
  }, {
    "left" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
    "right" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
    "info" : "VariableDeclarationStatement[11286-11356]:VariableDeclarationStatement[11286-11356]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
    "right" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
    "info" : "ExpressionStatement[11361-11420]:ExpressionStatement[11361-11420]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[11556-11574]:MarkerAnnotation[11556-11574]"
  }, {
    "left" : "Scope",
    "right" : "Scope",
    "info" : "SimpleType[11577-11582]:SimpleType[11577-11582]"
  }, {
    "left" : "createInitialScope",
    "right" : "createInitialScope",
    "info" : "SimpleName[11583-11601]:SimpleName[11583-11601]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[11602-11611]:SingleVariableDeclaration[11602-11611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11613-12956]:Block[11613-12956]"
  }, {
    "left" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
    "right" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
    "info" : "ExpressionStatement[11620-11712]:ExpressionStatement[11620-11712]"
  }, {
    "left" : "Scope s = new Scope(root, compiler);",
    "right" : "Scope s = new Scope(root, compiler);",
    "info" : "VariableDeclarationStatement[11718-11754]:VariableDeclarationStatement[11718-11754]"
  }, {
    "left" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[11759-11809]:ExpressionStatement[11759-11809]"
  }, {
    "left" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[11814-11873]:ExpressionStatement[11814-11873]"
  }, {
    "left" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[11878-11927]:ExpressionStatement[11878-11927]"
  }, {
    "left" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[11932-11982]:ExpressionStatement[11932-11982]"
  }, {
    "left" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[11987-12042]:ExpressionStatement[11987-12042]"
  }, {
    "left" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[12047-12100]:ExpressionStatement[12047-12100]"
  }, {
    "left" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[12105-12163]:ExpressionStatement[12105-12163]"
  }, {
    "left" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[12168-12219]:ExpressionStatement[12168-12219]"
  }, {
    "left" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[12224-12280]:ExpressionStatement[12224-12280]"
  }, {
    "left" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[12285-12345]:ExpressionStatement[12285-12345]"
  }, {
    "left" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[12350-12401]:ExpressionStatement[12350-12401]"
  }, {
    "left" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[12406-12464]:ExpressionStatement[12406-12464]"
  }, {
    "left" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[12469-12526]:ExpressionStatement[12469-12526]"
  }, {
    "left" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[12531-12586]:ExpressionStatement[12531-12586]"
  }, {
    "left" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[12591-12645]:ExpressionStatement[12591-12645]"
  }, {
    "left" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
    "right" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
    "info" : "ExpressionStatement[12650-12700]:ExpressionStatement[12650-12700]"
  }, {
    "left" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
    "right" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
    "info" : "ExpressionStatement[12878-12937]:ExpressionStatement[12878-12937]"
  }, {
    "left" : "return s;",
    "right" : "return s;",
    "info" : "ReturnStatement[12943-12952]:ReturnStatement[12943-12952]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12960-12967]:Modifier[12960-12967]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12968-12972]:PrimitiveType[12968-12972]"
  }, {
    "left" : "declareNativeFunctionType",
    "right" : "declareNativeFunctionType",
    "info" : "SimpleName[12973-12998]:SimpleName[12973-12998]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[12999-13010]:SingleVariableDeclaration[12999-13010]"
  }, {
    "left" : "JSTypeNative tId",
    "right" : "JSTypeNative tId",
    "info" : "SingleVariableDeclaration[13012-13028]:SingleVariableDeclaration[13012-13028]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13030-13264]:Block[13030-13264]"
  }, {
    "left" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
    "right" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
    "info" : "VariableDeclarationStatement[13036-13093]:VariableDeclarationStatement[13036-13093]"
  }, {
    "left" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
    "right" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
    "info" : "ExpressionStatement[13098-13166]:ExpressionStatement[13098-13166]"
  }, {
    "left" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
    "right" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
    "info" : "ExpressionStatement[13171-13260]:ExpressionStatement[13171-13260]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13268-13275]:Modifier[13268-13275]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13276-13280]:PrimitiveType[13276-13280]"
  }, {
    "left" : "declareNativeValueType",
    "right" : "declareNativeValueType",
    "info" : "SimpleName[13281-13303]:SimpleName[13281-13303]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[13304-13315]:SingleVariableDeclaration[13304-13315]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[13317-13328]:SingleVariableDeclaration[13317-13328]"
  }, {
    "left" : "JSTypeNative tId",
    "right" : "JSTypeNative tId",
    "info" : "SingleVariableDeclaration[13336-13352]:SingleVariableDeclaration[13336-13352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13354-13428]:Block[13354-13428]"
  }, {
    "left" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
    "right" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
    "info" : "ExpressionStatement[13360-13424]:ExpressionStatement[13360-13424]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13432-13439]:Modifier[13432-13439]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13440-13444]:PrimitiveType[13440-13444]"
  }, {
    "left" : "declareNativeType",
    "right" : "declareNativeType",
    "info" : "SimpleName[13445-13462]:SimpleName[13445-13462]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[13463-13474]:SingleVariableDeclaration[13463-13474]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[13476-13487]:SingleVariableDeclaration[13476-13487]"
  }, {
    "left" : "JSType t",
    "right" : "JSType t",
    "info" : "SingleVariableDeclaration[13489-13497]:SingleVariableDeclaration[13489-13497]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13499-13551]:Block[13499-13551]"
  }, {
    "left" : "scope.declare(name, null, t, null, false);",
    "right" : "scope.declare(name, null, t, null, false);",
    "info" : "ExpressionStatement[13505-13547]:ExpressionStatement[13505-13547]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13555-13562]:Modifier[13555-13562]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13563-13569]:Modifier[13563-13569]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[13570-13575]:TYPE_DECLARATION_KIND[13570-13575]"
  }, {
    "left" : "DiscoverEnumsAndTypedefs",
    "right" : "DiscoverEnumsAndTypedefs",
    "info" : "SimpleName[13698-13722]:SimpleName[13698-13722]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[13723-13746]:SingleVariableDeclaration[13723-13746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13748-13787]:Block[13748-13787]"
  }, {
    "left" : "this.registry = registry;",
    "right" : "this.registry = registry;",
    "info" : "ExpressionStatement[13756-13781]:ExpressionStatement[13756-13781]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13793-13802]:MarkerAnnotation[13793-13802]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13807-13813]:Modifier[13807-13813]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13814-13818]:PrimitiveType[13814-13818]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[13819-13824]:SimpleName[13819-13824]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[13825-13840]:SingleVariableDeclaration[13825-13840]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[13842-13851]:SingleVariableDeclaration[13842-13851]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[13853-13864]:SingleVariableDeclaration[13853-13864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13866-14651]:Block[13866-14651]"
  }, {
    "left" : "Node nameNode = null;",
    "right" : "Node nameNode = null;",
    "info" : "VariableDeclarationStatement[13874-13895]:VariableDeclarationStatement[13874-13895]"
  }, {
    "left" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getInfoForNameNode(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.getType() == Token.ASSIGN) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
    "right" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getInfoForNameNode(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.getType() == Token.ASSIGN) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
    "info" : "SwitchStatement[13902-14645]:SwitchStatement[13902-14645]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[13936-13951]:SwitchCase[13936-13951]"
  }, {
    "left" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
    "right" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
    "info" : "ForStatement[13962-14199]:ForStatement[13962-14199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14057-14199]:Block[14057-14199]"
  }, {
    "left" : "identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getInfoForNameNode(child));",
    "right" : "identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getInfoForNameNode(child));",
    "info" : "ExpressionStatement[14071-14187]:ExpressionStatement[14071-14187]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14210-14216]:BreakStatement[14210-14216]"
  }, {
    "left" : "case Token.EXPR_RESULT:",
    "right" : "case Token.EXPR_RESULT:",
    "info" : "SwitchCase[14225-14248]:SwitchCase[14225-14248]"
  }, {
    "left" : "Node firstChild = node.getFirstChild();",
    "right" : "Node firstChild = node.getFirstChild();",
    "info" : "VariableDeclarationStatement[14259-14298]:VariableDeclarationStatement[14259-14298]"
  }, {
    "left" : "if (firstChild.getType() == Token.ASSIGN)",
    "right" : "if (firstChild.getType() == Token.ASSIGN)",
    "info" : "IfStatement[14309-14620]:IfStatement[14309-14620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14351-14509]:Block[14351-14509]"
  }, {
    "left" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());",
    "right" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());",
    "info" : "ExpressionStatement[14365-14497]:ExpressionStatement[14365-14497]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14515-14620]:Block[14515-14620]"
  }, {
    "left" : "identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());",
    "right" : "identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());",
    "info" : "ExpressionStatement[14529-14608]:ExpressionStatement[14529-14608]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14631-14637]:BreakStatement[14631-14637]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14657-14664]:Modifier[14657-14664]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14665-14669]:PrimitiveType[14665-14669]"
  }, {
    "left" : "identifyNameNode",
    "right" : "identifyNameNode",
    "info" : "SimpleName[14670-14686]:SimpleName[14670-14686]"
  }, {
    "left" : "Node nameNode",
    "right" : "Node nameNode",
    "info" : "SingleVariableDeclaration[14696-14709]:SingleVariableDeclaration[14696-14709]"
  }, {
    "left" : "Node valueNode",
    "right" : "Node valueNode",
    "info" : "SingleVariableDeclaration[14711-14725]:SingleVariableDeclaration[14711-14725]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[14727-14741]:SingleVariableDeclaration[14727-14741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14743-15089]:Block[14743-15089]"
  }, {
    "left" : "if (nameNode.isQualifiedName())",
    "right" : "if (nameNode.isQualifiedName())",
    "info" : "IfStatement[14751-15083]:IfStatement[14751-15083]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14783-15083]:Block[14783-15083]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[14793-15075]:IfStatement[14793-15075]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14811-15075]:Block[14811-15075]"
  }, {
    "left" : "if (info.hasEnumParameterType())",
    "right" : "if (info.hasEnumParameterType())",
    "info" : "IfStatement[14823-15065]:IfStatement[14823-15065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14856-14944]:Block[14856-14944]"
  }, {
    "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
    "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
    "info" : "ExpressionStatement[14870-14932]:ExpressionStatement[14870-14932]"
  }, {
    "left" : "if (info.hasTypedefType())",
    "right" : "if (info.hasTypedefType())",
    "info" : "IfStatement[14950-15065]:IfStatement[14950-15065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14977-15065]:Block[14977-15065]"
  }, {
    "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
    "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
    "info" : "ExpressionStatement[14991-15053]:ExpressionStatement[14991-15053]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15097-15104]:Modifier[15097-15104]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[15105-15111]:SimpleType[15105-15111]"
  }, {
    "left" : "getNativeType",
    "right" : "getNativeType",
    "info" : "SimpleName[15112-15125]:SimpleName[15112-15125]"
  }, {
    "left" : "JSTypeNative nativeType",
    "right" : "JSTypeNative nativeType",
    "info" : "SingleVariableDeclaration[15126-15149]:SingleVariableDeclaration[15126-15149]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15151-15207]:Block[15151-15207]"
  }, {
    "left" : "return typeRegistry.getNativeType(nativeType);",
    "right" : "return typeRegistry.getNativeType(nativeType);",
    "info" : "ReturnStatement[15157-15203]:ReturnStatement[15157-15203]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16077-16084]:Modifier[16077-16084]"
  }, {
    "left" : "AbstractScopeBuilder",
    "right" : "AbstractScopeBuilder",
    "info" : "SimpleName[16085-16105]:SimpleName[16085-16105]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[16106-16117]:SingleVariableDeclaration[16106-16117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16119-16152]:Block[16119-16152]"
  }, {
    "left" : "this.scope = scope;",
    "right" : "this.scope = scope;",
    "info" : "ExpressionStatement[16127-16146]:ExpressionStatement[16127-16146]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16158-16162]:PrimitiveType[16158-16162]"
  }, {
    "left" : "setDeferredType",
    "right" : "setDeferredType",
    "info" : "SimpleName[16163-16178]:SimpleName[16163-16178]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[16179-16188]:SingleVariableDeclaration[16179-16188]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[16190-16201]:SingleVariableDeclaration[16190-16201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16203-16271]:Block[16203-16271]"
  }, {
    "left" : "deferredSetTypes.add(new DeferredSetType(node, type));",
    "right" : "deferredSetTypes.add(new DeferredSetType(node, type));",
    "info" : "ExpressionStatement[16211-16265]:ExpressionStatement[16211-16265]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16277-16281]:PrimitiveType[16277-16281]"
  }, {
    "left" : "resolveTypes",
    "right" : "resolveTypes",
    "info" : "SimpleName[16282-16294]:SimpleName[16282-16294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16297-16777]:Block[16297-16777]"
  }, {
    "left" : "for (DeferredSetType deferred : deferredSetTypes)",
    "right" : "for (DeferredSetType deferred : deferredSetTypes)",
    "info" : "EnhancedForStatement[16354-16446]:EnhancedForStatement[16354-16446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16404-16446]:Block[16404-16446]"
  }, {
    "left" : "deferred.resolve(scope);",
    "right" : "deferred.resolve(scope);",
    "info" : "ExpressionStatement[16414-16438]:ExpressionStatement[16414-16438]"
  }, {
    "left" : "Iterator<Var> vars = scope.getVars();",
    "right" : "Iterator<Var> vars = scope.getVars();",
    "info" : "VariableDeclarationStatement[16509-16546]:VariableDeclarationStatement[16509-16546]"
  }, {
    "left" : "while (vars.hasNext())",
    "right" : "while (vars.hasNext())",
    "info" : "WhileStatement[16553-16644]:WhileStatement[16553-16644]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16576-16644]:Block[16576-16644]"
  }, {
    "left" : "vars.next().resolveType(typeParsingErrorReporter);",
    "right" : "vars.next().resolveType(typeParsingErrorReporter);",
    "info" : "ExpressionStatement[16586-16636]:ExpressionStatement[16586-16636]"
  }, {
    "left" : "typeRegistry.resolveTypesInScope(scope);",
    "right" : "typeRegistry.resolveTypesInScope(scope);",
    "info" : "ExpressionStatement[16731-16771]:ExpressionStatement[16731-16771]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16783-16792]:MarkerAnnotation[16783-16792]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16797-16803]:Modifier[16797-16803]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[16804-16809]:Modifier[16804-16809]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[16810-16817]:PrimitiveType[16810-16817]"
  }, {
    "left" : "shouldTraverse",
    "right" : "shouldTraverse",
    "info" : "SimpleName[16818-16832]:SimpleName[16818-16832]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[16833-16848]:SingleVariableDeclaration[16833-16848]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[16850-16856]:SingleVariableDeclaration[16850-16856]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[16866-16877]:SingleVariableDeclaration[16866-16877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16879-17870]:Block[16879-17870]"
  }, {
    "left" : "inputId = t.getInputId();",
    "right" : "inputId = t.getInputId();",
    "info" : "ExpressionStatement[16887-16912]:ExpressionStatement[16887-16912]"
  }, {
    "left" : "if (n.getType() == Token.FUNCTION ||\n          n.getType() == Token.SCRIPT)",
    "right" : "if (n.getType() == Token.FUNCTION ||\n          n.getType() == Token.SCRIPT)",
    "info" : "IfStatement[16919-17097]:IfStatement[16919-17097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16995-17097]:Block[16995-17097]"
  }, {
    "left" : "Preconditions.checkNotNull(inputId);",
    "right" : "Preconditions.checkNotNull(inputId);",
    "info" : "ExpressionStatement[17005-17041]:ExpressionStatement[17005-17041]"
  }, {
    "left" : "sourceName = NodeUtil.getSourceName(n);",
    "right" : "sourceName = NodeUtil.getSourceName(n);",
    "info" : "ExpressionStatement[17050-17089]:ExpressionStatement[17050-17089]"
  }, {
    "left" : "boolean descend = parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
    "right" : "boolean descend = parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
    "info" : "VariableDeclarationStatement[17229-17374]:VariableDeclarationStatement[17229-17374]"
  }, {
    "left" : "if (descend)",
    "right" : "if (descend)",
    "info" : "IfStatement[17382-17841]:IfStatement[17382-17841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17395-17841]:Block[17395-17841]"
  }, {
    "left" : "if (NodeUtil.isStatementParent(n))",
    "right" : "if (NodeUtil.isStatementParent(n))",
    "info" : "IfStatement[17531-17833]:IfStatement[17531-17833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17566-17833]:Block[17566-17833]"
  }, {
    "left" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
    "right" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
    "info" : "ForStatement[17578-17823]:ForStatement[17578-17823]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17685-17823]:Block[17685-17823]"
  }, {
    "left" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
    "right" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
    "info" : "IfStatement[17699-17811]:IfStatement[17699-17811]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17749-17811]:Block[17749-17811]"
  }, {
    "left" : "defineFunctionLiteral(child, n);",
    "right" : "defineFunctionLiteral(child, n);",
    "info" : "ExpressionStatement[17765-17797]:ExpressionStatement[17765-17797]"
  }, {
    "left" : "return descend;",
    "right" : "return descend;",
    "info" : "ReturnStatement[17849-17864]:ReturnStatement[17849-17864]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17876-17885]:MarkerAnnotation[17876-17885]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17890-17896]:Modifier[17890-17896]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17897-17901]:PrimitiveType[17897-17901]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[17902-17907]:SimpleName[17902-17907]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[17908-17923]:SingleVariableDeclaration[17908-17923]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[17925-17931]:SingleVariableDeclaration[17925-17931]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[17933-17944]:SingleVariableDeclaration[17933-17944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17946-19364]:Block[17946-19364]"
  }, {
    "left" : "inputId = t.getInputId();",
    "right" : "inputId = t.getInputId();",
    "info" : "ExpressionStatement[17954-17979]:ExpressionStatement[17954-17979]"
  }, {
    "left" : "attachLiteralTypes(t, n);",
    "right" : "attachLiteralTypes(t, n);",
    "info" : "ExpressionStatement[17986-18011]:ExpressionStatement[17986-18011]"
  }, {
    "left" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n, parent);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
    "right" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n, parent);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
    "info" : "SwitchStatement[18019-19358]:SwitchStatement[18019-19358]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[18050-18066]:SwitchCase[18050-18066]"
  }, {
    "left" : "checkForClassDefiningCalls(t, n, parent);",
    "right" : "checkForClassDefiningCalls(t, n, parent);",
    "info" : "ExpressionStatement[18077-18118]:ExpressionStatement[18077-18118]"
  }, {
    "left" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
    "right" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
    "info" : "ExpressionStatement[18129-18199]:ExpressionStatement[18129-18199]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18210-18216]:BreakStatement[18210-18216]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[18226-18246]:SwitchCase[18226-18246]"
  }, {
    "left" : "if (t.getInput() == null || !t.getInput().isExtern())",
    "right" : "if (t.getInput() == null || !t.getInput().isExtern())",
    "info" : "IfStatement[18257-18363]:IfStatement[18257-18363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18311-18363]:Block[18311-18363]"
  }, {
    "left" : "nonExternFunctions.add(n);",
    "right" : "nonExternFunctions.add(n);",
    "info" : "ExpressionStatement[18325-18351]:ExpressionStatement[18325-18351]"
  }, {
    "left" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
    "right" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
    "info" : "IfStatement[18440-18546]:IfStatement[18440-18546]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18487-18546]:Block[18487-18546]"
  }, {
    "left" : "defineFunctionLiteral(n, parent);",
    "right" : "defineFunctionLiteral(n, parent);",
    "info" : "ExpressionStatement[18501-18534]:ExpressionStatement[18501-18534]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18557-18563]:BreakStatement[18557-18563]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[18573-18591]:SwitchCase[18573-18591]"
  }, {
    "left" : "Node firstChild = n.getFirstChild();",
    "right" : "Node firstChild = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[18652-18688]:VariableDeclarationStatement[18652-18688]"
  }, {
    "left" : "if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName())",
    "right" : "if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName())",
    "info" : "IfStatement[18699-18914]:IfStatement[18699-18914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18788-18914]:Block[18788-18914]"
  }, {
    "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
    "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
    "info" : "ExpressionStatement[18802-18902]:ExpressionStatement[18802-18902]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18925-18931]:BreakStatement[18925-18931]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[18941-18958]:SwitchCase[18941-18958]"
  }, {
    "left" : "defineCatch(n, parent);",
    "right" : "defineCatch(n, parent);",
    "info" : "ExpressionStatement[18969-18992]:ExpressionStatement[18969-18992]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19003-19009]:BreakStatement[19003-19009]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[19019-19034]:SwitchCase[19019-19034]"
  }, {
    "left" : "defineVar(n, parent);",
    "right" : "defineVar(n, parent);",
    "info" : "ExpressionStatement[19045-19066]:ExpressionStatement[19045-19066]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19077-19083]:BreakStatement[19077-19083]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[19093-19112]:SwitchCase[19093-19112]"
  }, {
    "left" : "if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName())",
    "right" : "if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName())",
    "info" : "IfStatement[19163-19333]:IfStatement[19163-19333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19243-19333]:Block[19243-19333]"
  }, {
    "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
    "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
    "info" : "ExpressionStatement[19257-19321]:ExpressionStatement[19257-19321]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19344-19350]:BreakStatement[19344-19350]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19370-19377]:Modifier[19370-19377]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19378-19382]:PrimitiveType[19378-19382]"
  }, {
    "left" : "attachLiteralTypes",
    "right" : "attachLiteralTypes",
    "info" : "SimpleName[19383-19401]:SimpleName[19383-19401]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[19402-19417]:SingleVariableDeclaration[19402-19417]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[19419-19425]:SingleVariableDeclaration[19419-19425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19427-20497]:Block[19427-20497]"
  }, {
    "left" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          // Defer keys to the Token.OBJECTLIT case\n          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n            n.setJSType(getNativeType(STRING_TYPE));\n          }\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.REF_SPECIAL:\n          n.setJSType(getNativeType(UNKNOWN_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          defineObjectLiteral(t, n);\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
    "right" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          // Defer keys to the Token.OBJECTLIT case\n          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n            n.setJSType(getNativeType(STRING_TYPE));\n          }\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.REF_SPECIAL:\n          n.setJSType(getNativeType(UNKNOWN_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          defineObjectLiteral(t, n);\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
    "info" : "SwitchStatement[19435-20491]:SwitchStatement[19435-20491]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[19466-19482]:SwitchCase[19466-19482]"
  }, {
    "left" : "n.setJSType(getNativeType(NULL_TYPE));",
    "right" : "n.setJSType(getNativeType(NULL_TYPE));",
    "info" : "ExpressionStatement[19493-19531]:ExpressionStatement[19493-19531]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19542-19548]:BreakStatement[19542-19548]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[19558-19574]:SwitchCase[19558-19574]"
  }, {
    "left" : "n.setJSType(getNativeType(VOID_TYPE));",
    "right" : "n.setJSType(getNativeType(VOID_TYPE));",
    "info" : "ExpressionStatement[19585-19623]:ExpressionStatement[19585-19623]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19634-19640]:BreakStatement[19634-19640]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[19650-19668]:SwitchCase[19650-19668]"
  }, {
    "left" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
    "right" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
    "info" : "IfStatement[19731-19845]:IfStatement[19731-19845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19779-19845]:Block[19779-19845]"
  }, {
    "left" : "n.setJSType(getNativeType(STRING_TYPE));",
    "right" : "n.setJSType(getNativeType(STRING_TYPE));",
    "info" : "ExpressionStatement[19793-19833]:ExpressionStatement[19793-19833]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19856-19862]:BreakStatement[19856-19862]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[19872-19890]:SwitchCase[19872-19890]"
  }, {
    "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
    "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
    "info" : "ExpressionStatement[19901-19941]:ExpressionStatement[19901-19941]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19952-19958]:BreakStatement[19952-19958]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[19968-19984]:SwitchCase[19968-19984]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[19993-20010]:SwitchCase[19993-20010]"
  }, {
    "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
    "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
    "info" : "ExpressionStatement[20021-20062]:ExpressionStatement[20021-20062]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20073-20079]:BreakStatement[20073-20079]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[20089-20107]:SwitchCase[20089-20107]"
  }, {
    "left" : "n.setJSType(getNativeType(REGEXP_TYPE));",
    "right" : "n.setJSType(getNativeType(REGEXP_TYPE));",
    "info" : "ExpressionStatement[20118-20158]:ExpressionStatement[20118-20158]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20169-20175]:BreakStatement[20169-20175]"
  }, {
    "left" : "case Token.REF_SPECIAL:",
    "right" : "case Token.REF_SPECIAL:",
    "info" : "SwitchCase[20185-20208]:SwitchCase[20185-20208]"
  }, {
    "left" : "n.setJSType(getNativeType(UNKNOWN_TYPE));",
    "right" : "n.setJSType(getNativeType(UNKNOWN_TYPE));",
    "info" : "ExpressionStatement[20219-20260]:ExpressionStatement[20219-20260]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20271-20277]:BreakStatement[20271-20277]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[20287-20308]:SwitchCase[20287-20308]"
  }, {
    "left" : "defineObjectLiteral(t, n);",
    "right" : "defineObjectLiteral(t, n);",
    "info" : "ExpressionStatement[20319-20345]:ExpressionStatement[20319-20345]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20356-20362]:BreakStatement[20356-20362]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20503-20510]:Modifier[20503-20510]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20511-20515]:PrimitiveType[20511-20515]"
  }, {
    "left" : "defineObjectLiteral",
    "right" : "defineObjectLiteral",
    "info" : "SimpleName[20516-20535]:SimpleName[20516-20535]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[20536-20551]:SingleVariableDeclaration[20536-20551]"
  }, {
    "left" : "Node objectLit",
    "right" : "Node objectLit",
    "info" : "SingleVariableDeclaration[20553-20567]:SingleVariableDeclaration[20553-20567]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20569-22221]:Block[20569-22221]"
  }, {
    "left" : "JSType type = null;",
    "right" : "JSType type = null;",
    "info" : "VariableDeclarationStatement[20616-20635]:VariableDeclarationStatement[20616-20635]"
  }, {
    "left" : "JSDocInfo info = objectLit.getJSDocInfo();",
    "right" : "JSDocInfo info = objectLit.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[20642-20684]:VariableDeclarationStatement[20642-20684]"
  }, {
    "left" : "if (info != null &&\n          info.getLendsName() != null)",
    "right" : "if (info != null &&\n          info.getLendsName() != null)",
    "info" : "IfStatement[20691-21480]:IfStatement[20691-21480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20750-21480]:Block[20750-21480]"
  }, {
    "left" : "String lendsName = info.getLendsName();",
    "right" : "String lendsName = info.getLendsName();",
    "info" : "VariableDeclarationStatement[20760-20799]:VariableDeclarationStatement[20760-20799]"
  }, {
    "left" : "Var lendsVar = scope.getVar(lendsName);",
    "right" : "Var lendsVar = scope.getVar(lendsName);",
    "info" : "VariableDeclarationStatement[20808-20847]:VariableDeclarationStatement[20808-20847]"
  }, {
    "left" : "if (lendsVar == null)",
    "right" : "if (lendsVar == null)",
    "info" : "IfStatement[20856-21472]:IfStatement[20856-21472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20878-20994]:Block[20878-20994]"
  }, {
    "left" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
    "right" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
    "info" : "ExpressionStatement[20890-20984]:ExpressionStatement[20890-20984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21000-21472]:Block[21000-21472]"
  }, {
    "left" : "type = lendsVar.getType();",
    "right" : "type = lendsVar.getType();",
    "info" : "ExpressionStatement[21012-21038]:ExpressionStatement[21012-21038]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[21049-21141]:IfStatement[21049-21141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21067-21141]:Block[21067-21141]"
  }, {
    "left" : "type = typeRegistry.getNativeType(UNKNOWN_TYPE);",
    "right" : "type = typeRegistry.getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[21081-21129]:ExpressionStatement[21081-21129]"
  }, {
    "left" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
    "right" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
    "info" : "IfStatement[21152-21462]:IfStatement[21152-21462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21214-21404]:Block[21214-21404]"
  }, {
    "left" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
    "right" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
    "info" : "ExpressionStatement[21228-21367]:ExpressionStatement[21228-21367]"
  }, {
    "left" : "type = null;",
    "right" : "type = null;",
    "info" : "ExpressionStatement[21380-21392]:ExpressionStatement[21380-21392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21410-21462]:Block[21410-21462]"
  }, {
    "left" : "objectLit.setJSType(type);",
    "right" : "objectLit.setJSType(type);",
    "info" : "ExpressionStatement[21424-21450]:ExpressionStatement[21424-21450]"
  }, {
    "left" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
    "right" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
    "info" : "ExpressionStatement[21488-21532]:ExpressionStatement[21488-21532]"
  }, {
    "left" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
    "right" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
    "info" : "VariableDeclarationStatement[21539-21587]:VariableDeclarationStatement[21539-21587]"
  }, {
    "left" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
    "right" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
    "info" : "VariableDeclarationStatement[21594-21649]:VariableDeclarationStatement[21594-21649]"
  }, {
    "left" : "boolean createdEnumType = false;",
    "right" : "boolean createdEnumType = false;",
    "info" : "VariableDeclarationStatement[21656-21688]:VariableDeclarationStatement[21656-21688]"
  }, {
    "left" : "if (info != null && info.hasEnumParameterType())",
    "right" : "if (info != null && info.hasEnumParameterType())",
    "info" : "IfStatement[21695-21862]:IfStatement[21695-21862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21744-21862]:Block[21744-21862]"
  }, {
    "left" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
    "right" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
    "info" : "ExpressionStatement[21754-21822]:ExpressionStatement[21754-21822]"
  }, {
    "left" : "createdEnumType = true;",
    "right" : "createdEnumType = true;",
    "info" : "ExpressionStatement[21831-21854]:ExpressionStatement[21831-21854]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[21870-21954]:IfStatement[21870-21954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21888-21954]:Block[21888-21954]"
  }, {
    "left" : "type = typeRegistry.createAnonymousObjectType();",
    "right" : "type = typeRegistry.createAnonymousObjectType();",
    "info" : "ExpressionStatement[21898-21946]:ExpressionStatement[21898-21946]"
  }, {
    "left" : "setDeferredType(objectLit, type);",
    "right" : "setDeferredType(objectLit, type);",
    "info" : "ExpressionStatement[21962-21995]:ExpressionStatement[21962-21995]"
  }, {
    "left" : "if (!createdEnumType)",
    "right" : "if (!createdEnumType)",
    "info" : "IfStatement[22081-22215]:IfStatement[22081-22215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22103-22215]:Block[22103-22215]"
  }, {
    "left" : "processObjectLitProperties(\n            t, objectLit, ObjectType.cast(objectLit.getJSType()));",
    "right" : "processObjectLitProperties(\n            t, objectLit, ObjectType.cast(objectLit.getJSType()));",
    "info" : "ExpressionStatement[22113-22207]:ExpressionStatement[22113-22207]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22471-22475]:PrimitiveType[22471-22475]"
  }, {
    "left" : "processObjectLitProperties",
    "right" : "processObjectLitProperties",
    "info" : "SimpleName[22476-22502]:SimpleName[22476-22502]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[22512-22527]:SingleVariableDeclaration[22512-22527]"
  }, {
    "left" : "Node objLit",
    "right" : "Node objLit",
    "info" : "SingleVariableDeclaration[22529-22540]:SingleVariableDeclaration[22529-22540]"
  }, {
    "left" : "ObjectType objLitType",
    "right" : "ObjectType objLitType",
    "info" : "SingleVariableDeclaration[22542-22563]:SingleVariableDeclaration[22542-22563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22565-23742]:Block[22565-23742]"
  }, {
    "left" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
    "right" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
    "info" : "ForStatement[22573-23736]:ForStatement[22573-23736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22674-23736]:Block[22674-23736]"
  }, {
    "left" : "Node value = keyNode.getFirstChild();",
    "right" : "Node value = keyNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[22684-22721]:VariableDeclarationStatement[22684-22721]"
  }, {
    "left" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
    "right" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
    "info" : "VariableDeclarationStatement[22730-22788]:VariableDeclarationStatement[22730-22788]"
  }, {
    "left" : "JSDocInfo info = keyNode.getJSDocInfo();",
    "right" : "JSDocInfo info = keyNode.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[22797-22837]:VariableDeclarationStatement[22797-22837]"
  }, {
    "left" : "JSType valueType = getDeclaredType(\n            t.getSourceName(), info, keyNode, value);",
    "right" : "JSType valueType = getDeclaredType(\n            t.getSourceName(), info, keyNode, value);",
    "info" : "VariableDeclarationStatement[22846-22935]:VariableDeclarationStatement[22846-22935]"
  }, {
    "left" : "JSType keyType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            keyNode, valueType);",
    "right" : "JSType keyType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            keyNode, valueType);",
    "info" : "VariableDeclarationStatement[22944-23036]:VariableDeclarationStatement[22944-23036]"
  }, {
    "left" : "if (keyType != null)",
    "right" : "if (keyType != null)",
    "info" : "IfStatement[23045-23728]:IfStatement[23045-23728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23066-23728]:Block[23066-23728]"
  }, {
    "left" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
    "right" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
    "info" : "VariableDeclarationStatement[23187-23246]:VariableDeclarationStatement[23187-23246]"
  }, {
    "left" : "if (qualifiedName != null)",
    "right" : "if (qualifiedName != null)",
    "info" : "IfStatement[23257-23435]:IfStatement[23257-23435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23284-23369]:Block[23284-23369]"
  }, {
    "left" : "defineSlot(keyNode, objLit, qualifiedName, keyType, false);",
    "right" : "defineSlot(keyNode, objLit, qualifiedName, keyType, false);",
    "info" : "ExpressionStatement[23298-23357]:ExpressionStatement[23298-23357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23375-23435]:Block[23375-23435]"
  }, {
    "left" : "setDeferredType(keyNode, keyType);",
    "right" : "setDeferredType(keyNode, keyType);",
    "info" : "ExpressionStatement[23389-23423]:ExpressionStatement[23389-23423]"
  }, {
    "left" : "if (objLitType != null)",
    "right" : "if (objLitType != null)",
    "info" : "IfStatement[23447-23718]:IfStatement[23447-23718]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23471-23718]:Block[23471-23718]"
  }, {
    "left" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
    "right" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
    "info" : "VariableDeclarationStatement[23545-23612]:VariableDeclarationStatement[23545-23612]"
  }, {
    "left" : "objLitType.defineDeclaredProperty(\n                memberName, keyType, keyNode);",
    "right" : "objLitType.defineDeclaredProperty(\n                memberName, keyType, keyNode);",
    "info" : "ExpressionStatement[23625-23706]:ExpressionStatement[23625-23706]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23978-23985]:Modifier[23978-23985]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[23986-23992]:SimpleType[23986-23992]"
  }, {
    "left" : "getDeclaredTypeInAnnotation",
    "right" : "getDeclaredTypeInAnnotation",
    "info" : "SimpleName[23993-24020]:SimpleName[23993-24020]"
  }, {
    "left" : "String sourceName",
    "right" : "String sourceName",
    "info" : "SingleVariableDeclaration[24021-24038]:SingleVariableDeclaration[24021-24038]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[24048-24057]:SingleVariableDeclaration[24048-24057]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[24059-24073]:SingleVariableDeclaration[24059-24073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24075-24667]:Block[24075-24667]"
  }, {
    "left" : "JSType jsType = null;",
    "right" : "JSType jsType = null;",
    "info" : "VariableDeclarationStatement[24083-24104]:VariableDeclarationStatement[24083-24104]"
  }, {
    "left" : "Node objNode =\n          node.getType() == Token.GETPROP ? node.getFirstChild() :\n          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n          null;",
    "right" : "Node objNode =\n          node.getType() == Token.GETPROP ? node.getFirstChild() :\n          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n          null;",
    "info" : "VariableDeclarationStatement[24111-24287]:VariableDeclarationStatement[24111-24287]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[24294-24640]:IfStatement[24294-24640]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24312-24640]:Block[24312-24640]"
  }, {
    "left" : "if (info.hasType())",
    "right" : "if (info.hasType())",
    "info" : "IfStatement[24322-24632]:IfStatement[24322-24632]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24342-24418]:Block[24342-24418]"
  }, {
    "left" : "jsType = info.getType().evaluate(scope, typeRegistry);",
    "right" : "jsType = info.getType().evaluate(scope, typeRegistry);",
    "info" : "ExpressionStatement[24354-24408]:ExpressionStatement[24354-24408]"
  }, {
    "left" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
    "right" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
    "info" : "IfStatement[24424-24632]:IfStatement[24424-24632]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24481-24632]:Block[24481-24632]"
  }, {
    "left" : "String fnName = node.getQualifiedName();",
    "right" : "String fnName = node.getQualifiedName();",
    "info" : "VariableDeclarationStatement[24493-24533]:VariableDeclarationStatement[24493-24533]"
  }, {
    "left" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
    "right" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
    "info" : "ExpressionStatement[24544-24622]:ExpressionStatement[24544-24622]"
  }, {
    "left" : "return jsType;",
    "right" : "return jsType;",
    "info" : "ReturnStatement[24647-24661]:ReturnStatement[24647-24661]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[24817-24821]:PrimitiveType[24817-24821]"
  }, {
    "left" : "assertDefinitionNode",
    "right" : "assertDefinitionNode",
    "info" : "SimpleName[24822-24842]:SimpleName[24822-24842]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[24843-24849]:SingleVariableDeclaration[24843-24849]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[24851-24859]:SingleVariableDeclaration[24851-24859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24861-24973]:Block[24861-24973]"
  }, {
    "left" : "Preconditions.checkState(sourceName != null);",
    "right" : "Preconditions.checkState(sourceName != null);",
    "info" : "ExpressionStatement[24869-24914]:ExpressionStatement[24869-24914]"
  }, {
    "left" : "Preconditions.checkState(n.getType() == type);",
    "right" : "Preconditions.checkState(n.getType() == type);",
    "info" : "ExpressionStatement[24921-24967]:ExpressionStatement[24921-24967]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25029-25033]:PrimitiveType[25029-25033]"
  }, {
    "left" : "defineCatch",
    "right" : "defineCatch",
    "info" : "SimpleName[25034-25045]:SimpleName[25034-25045]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[25046-25052]:SingleVariableDeclaration[25046-25052]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[25054-25065]:SingleVariableDeclaration[25054-25065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25067-25198]:Block[25067-25198]"
  }, {
    "left" : "assertDefinitionNode(n, Token.CATCH);",
    "right" : "assertDefinitionNode(n, Token.CATCH);",
    "info" : "ExpressionStatement[25075-25112]:ExpressionStatement[25075-25112]"
  }, {
    "left" : "Node catchName = n.getFirstChild();",
    "right" : "Node catchName = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[25119-25154]:VariableDeclarationStatement[25119-25154]"
  }, {
    "left" : "defineSlot(catchName, n, null);",
    "right" : "defineSlot(catchName, n, null);",
    "info" : "ExpressionStatement[25161-25192]:ExpressionStatement[25161-25192]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25257-25261]:PrimitiveType[25257-25261]"
  }, {
    "left" : "defineVar",
    "right" : "defineVar",
    "info" : "SimpleName[25262-25271]:SimpleName[25262-25271]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[25272-25278]:SingleVariableDeclaration[25272-25278]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[25280-25291]:SingleVariableDeclaration[25280-25291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25293-25830]:Block[25293-25830]"
  }, {
    "left" : "assertDefinitionNode(n, Token.VAR);",
    "right" : "assertDefinitionNode(n, Token.VAR);",
    "info" : "ExpressionStatement[25301-25336]:ExpressionStatement[25301-25336]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[25343-25377]:VariableDeclarationStatement[25343-25377]"
  }, {
    "left" : "if (n.hasMoreThanOneChild())",
    "right" : "if (n.hasMoreThanOneChild())",
    "info" : "IfStatement[25384-25824]:IfStatement[25384-25824]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25413-25676]:Block[25413-25676]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[25423-25557]:IfStatement[25423-25557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25441-25557]:Block[25441-25557]"
  }, {
    "left" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
    "right" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
    "info" : "ExpressionStatement[25484-25547]:ExpressionStatement[25484-25547]"
  }, {
    "left" : "for (Node name : n.children())",
    "right" : "for (Node name : n.children())",
    "info" : "EnhancedForStatement[25566-25668]:EnhancedForStatement[25566-25668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25597-25668]:Block[25597-25668]"
  }, {
    "left" : "defineName(name, n, parent, name.getJSDocInfo());",
    "right" : "defineName(name, n, parent, name.getJSDocInfo());",
    "info" : "ExpressionStatement[25609-25658]:ExpressionStatement[25609-25658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25682-25824]:Block[25682-25824]"
  }, {
    "left" : "Node name = n.getFirstChild();",
    "right" : "Node name = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[25692-25722]:VariableDeclarationStatement[25692-25722]"
  }, {
    "left" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
    "right" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
    "info" : "ExpressionStatement[25731-25816]:ExpressionStatement[25731-25816]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25887-25891]:PrimitiveType[25887-25891]"
  }, {
    "left" : "defineFunctionLiteral",
    "right" : "defineFunctionLiteral",
    "info" : "SimpleName[25892-25913]:SimpleName[25892-25913]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[25914-25920]:SingleVariableDeclaration[25914-25920]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[25922-25933]:SingleVariableDeclaration[25922-25933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25935-26736]:Block[25935-26736]"
  }, {
    "left" : "assertDefinitionNode(n, Token.FUNCTION);",
    "right" : "assertDefinitionNode(n, Token.FUNCTION);",
    "info" : "ExpressionStatement[25943-25983]:ExpressionStatement[25943-25983]"
  }, {
    "left" : "Node lValue = NodeUtil.getBestLValue(n);",
    "right" : "Node lValue = NodeUtil.getBestLValue(n);",
    "info" : "VariableDeclarationStatement[26097-26137]:VariableDeclarationStatement[26097-26137]"
  }, {
    "left" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
    "right" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
    "info" : "VariableDeclarationStatement[26144-26190]:VariableDeclarationStatement[26144-26190]"
  }, {
    "left" : "String functionName = NodeUtil.getBestLValueName(lValue);",
    "right" : "String functionName = NodeUtil.getBestLValueName(lValue);",
    "info" : "VariableDeclarationStatement[26197-26254]:VariableDeclarationStatement[26197-26254]"
  }, {
    "left" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
    "right" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
    "info" : "VariableDeclarationStatement[26261-26358]:VariableDeclarationStatement[26261-26358]"
  }, {
    "left" : "setDeferredType(n, functionType);",
    "right" : "setDeferredType(n, functionType);",
    "info" : "ExpressionStatement[26424-26457]:ExpressionStatement[26424-26457]"
  }, {
    "left" : "if (NodeUtil.isFunctionDeclaration(n))",
    "right" : "if (NodeUtil.isFunctionDeclaration(n))",
    "info" : "IfStatement[26626-26730]:IfStatement[26626-26730]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26665-26730]:Block[26665-26730]"
  }, {
    "left" : "defineSlot(n.getFirstChild(), n, functionType);",
    "right" : "defineSlot(n.getFirstChild(), n, functionType);",
    "info" : "ExpressionStatement[26675-26722]:ExpressionStatement[26675-26722]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27126-27133]:Modifier[27126-27133]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27134-27138]:PrimitiveType[27134-27138]"
  }, {
    "left" : "defineName",
    "right" : "defineName",
    "info" : "SimpleName[27139-27149]:SimpleName[27139-27149]"
  }, {
    "left" : "Node name",
    "right" : "Node name",
    "info" : "SingleVariableDeclaration[27150-27159]:SingleVariableDeclaration[27150-27159]"
  }, {
    "left" : "Node var",
    "right" : "Node var",
    "info" : "SingleVariableDeclaration[27161-27169]:SingleVariableDeclaration[27161-27169]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[27171-27182]:SingleVariableDeclaration[27171-27182]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[27184-27198]:SingleVariableDeclaration[27184-27198]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27200-27546]:Block[27200-27546]"
  }, {
    "left" : "Node value = name.getFirstChild();",
    "right" : "Node value = name.getFirstChild();",
    "info" : "VariableDeclarationStatement[27208-27242]:VariableDeclarationStatement[27208-27242]"
  }, {
    "left" : "JSType type = getDeclaredType(sourceName, info, name, value);",
    "right" : "JSType type = getDeclaredType(sourceName, info, name, value);",
    "info" : "VariableDeclarationStatement[27275-27336]:VariableDeclarationStatement[27275-27336]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[27343-27505]:IfStatement[27343-27505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27361-27505]:Block[27361-27505]"
  }, {
    "left" : "type = name.isFromExterns() ?\n            getNativeType(UNKNOWN_TYPE) : null;",
    "right" : "type = name.isFromExterns() ?\n            getNativeType(UNKNOWN_TYPE) : null;",
    "info" : "ExpressionStatement[27420-27497]:ExpressionStatement[27420-27497]"
  }, {
    "left" : "defineSlot(name, var, type);",
    "right" : "defineSlot(name, var, type);",
    "info" : "ExpressionStatement[27512-27540]:ExpressionStatement[27512-27540]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27876-27883]:Modifier[27876-27883]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27884-27891]:PrimitiveType[27884-27891]"
  }, {
    "left" : "shouldUseFunctionLiteralType",
    "right" : "shouldUseFunctionLiteralType",
    "info" : "SimpleName[27892-27920]:SimpleName[27892-27920]"
  }, {
    "left" : "FunctionType type",
    "right" : "FunctionType type",
    "info" : "SingleVariableDeclaration[27930-27947]:SingleVariableDeclaration[27930-27947]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[27949-27963]:SingleVariableDeclaration[27949-27963]"
  }, {
    "left" : "Node lValue",
    "right" : "Node lValue",
    "info" : "SingleVariableDeclaration[27965-27976]:SingleVariableDeclaration[27965-27976]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27978-28226]:Block[27978-28226]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[27986-28034]:IfStatement[27986-28034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28004-28034]:Block[28004-28034]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[28014-28026]:ReturnStatement[28014-28026]"
  }, {
    "left" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
    "right" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
    "info" : "IfStatement[28041-28157]:IfStatement[28041-28157]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28126-28157]:Block[28126-28157]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28136-28149]:ReturnStatement[28136-28149]"
  }, {
    "left" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
    "right" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
    "info" : "ReturnStatement[28164-28220]:ReturnStatement[28164-28220]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29253-29260]:Modifier[29253-29260]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[29261-29273]:SimpleType[29261-29273]"
  }, {
    "left" : "createFunctionTypeFromNodes",
    "right" : "createFunctionTypeFromNodes",
    "info" : "SimpleName[29274-29301]:SimpleName[29274-29301]"
  }, {
    "left" : "@Nullable Node rValue",
    "right" : "@Nullable Node rValue",
    "info" : "SingleVariableDeclaration[29311-29332]:SingleVariableDeclaration[29311-29332]"
  }, {
    "left" : "@Nullable String name",
    "right" : "@Nullable String name",
    "info" : "SingleVariableDeclaration[29342-29363]:SingleVariableDeclaration[29342-29363]"
  }, {
    "left" : "@Nullable JSDocInfo info",
    "right" : "@Nullable JSDocInfo info",
    "info" : "SingleVariableDeclaration[29373-29397]:SingleVariableDeclaration[29373-29397]"
  }, {
    "left" : "@Nullable Node lvalueNode",
    "right" : "@Nullable Node lvalueNode",
    "info" : "SingleVariableDeclaration[29407-29432]:SingleVariableDeclaration[29407-29432]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29434-33108]:Block[29434-33108]"
  }, {
    "left" : "FunctionType functionType = null;",
    "right" : "FunctionType functionType = null;",
    "info" : "VariableDeclarationStatement[29443-29476]:VariableDeclarationStatement[29443-29476]"
  }, {
    "left" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
    "right" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
    "info" : "IfStatement[29558-30201]:IfStatement[29558-30201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29626-30201]:Block[29626-30201]"
  }, {
    "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
    "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
    "info" : "VariableDeclarationStatement[29636-29686]:VariableDeclarationStatement[29636-29686]"
  }, {
    "left" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
    "right" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
    "info" : "IfStatement[29695-30193]:IfStatement[29695-30193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29783-30193]:Block[29783-30193]"
  }, {
    "left" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
    "right" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[29795-29859]:VariableDeclarationStatement[29795-29859]"
  }, {
    "left" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
    "right" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
    "info" : "IfStatement[29870-30183]:IfStatement[29870-30183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29985-30183]:Block[29985-30183]"
  }, {
    "left" : "functionType = aliasedType;",
    "right" : "functionType = aliasedType;",
    "info" : "ExpressionStatement[29999-30026]:ExpressionStatement[29999-30026]"
  }, {
    "left" : "if (name != null && scope.isGlobal())",
    "right" : "if (name != null && scope.isGlobal())",
    "info" : "IfStatement[30040-30171]:IfStatement[30040-30171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30078-30171]:Block[30078-30171]"
  }, {
    "left" : "typeRegistry.declareType(name, functionType.getInstanceType());",
    "right" : "typeRegistry.declareType(name, functionType.getInstanceType());",
    "info" : "ExpressionStatement[30094-30157]:ExpressionStatement[30094-30157]"
  }, {
    "left" : "if (functionType == null)",
    "right" : "if (functionType == null)",
    "info" : "IfStatement[30209-33056]:IfStatement[30209-33056]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30235-33056]:Block[30235-33056]"
  }, {
    "left" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
    "right" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
    "info" : "VariableDeclarationStatement[30245-30299]:VariableDeclarationStatement[30245-30299]"
  }, {
    "left" : "boolean isFnLiteral =\n            rValue != null && rValue.getType() == Token.FUNCTION;",
    "right" : "boolean isFnLiteral =\n            rValue != null && rValue.getType() == Token.FUNCTION;",
    "info" : "VariableDeclarationStatement[30308-30395]:VariableDeclarationStatement[30308-30395]"
  }, {
    "left" : "Node fnRoot = isFnLiteral ? rValue : null;",
    "right" : "Node fnRoot = isFnLiteral ? rValue : null;",
    "info" : "VariableDeclarationStatement[30404-30446]:VariableDeclarationStatement[30404-30446]"
  }, {
    "left" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
    "right" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
    "info" : "VariableDeclarationStatement[30455-30543]:VariableDeclarationStatement[30455-30543]"
  }, {
    "left" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
    "right" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
    "info" : "VariableDeclarationStatement[30552-30613]:VariableDeclarationStatement[30552-30613]"
  }, {
    "left" : "if (info != null && info.hasType())",
    "right" : "if (info != null && info.hasType())",
    "info" : "IfStatement[30623-31020]:IfStatement[30623-31020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30659-31020]:Block[30659-31020]"
  }, {
    "left" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
    "right" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
    "info" : "VariableDeclarationStatement[30671-30730]:VariableDeclarationStatement[30671-30730]"
  }, {
    "left" : "type = type.restrictByNotNullOrUndefined();",
    "right" : "type = type.restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[30816-30859]:ExpressionStatement[30816-30859]"
  }, {
    "left" : "if (type.isFunctionType())",
    "right" : "if (type.isFunctionType())",
    "info" : "IfStatement[30870-31010]:IfStatement[30870-31010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30897-31010]:Block[30897-31010]"
  }, {
    "left" : "functionType = type.toMaybeFunctionType();",
    "right" : "functionType = type.toMaybeFunctionType();",
    "info" : "ExpressionStatement[30911-30953]:ExpressionStatement[30911-30953]"
  }, {
    "left" : "functionType.setJSDocInfo(info);",
    "right" : "functionType.setJSDocInfo(info);",
    "info" : "ExpressionStatement[30966-30998]:ExpressionStatement[30966-30998]"
  }, {
    "left" : "if (functionType == null)",
    "right" : "if (functionType == null)",
    "info" : "IfStatement[31030-33048]:IfStatement[31030-33048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31056-33048]:Block[31056-33048]"
  }, {
    "left" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
    "right" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
    "info" : "VariableDeclarationStatement[31123-31180]:VariableDeclarationStatement[31123-31180]"
  }, {
    "left" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
    "right" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
    "info" : "VariableDeclarationStatement[31191-31248]:VariableDeclarationStatement[31191-31248]"
  }, {
    "left" : "Var ownerVar = null;",
    "right" : "Var ownerVar = null;",
    "info" : "VariableDeclarationStatement[31259-31279]:VariableDeclarationStatement[31259-31279]"
  }, {
    "left" : "String propName = null;",
    "right" : "String propName = null;",
    "info" : "VariableDeclarationStatement[31290-31313]:VariableDeclarationStatement[31290-31313]"
  }, {
    "left" : "ObjectType ownerType = null;",
    "right" : "ObjectType ownerType = null;",
    "info" : "VariableDeclarationStatement[31324-31352]:VariableDeclarationStatement[31324-31352]"
  }, {
    "left" : "if (ownerName != null)",
    "right" : "if (ownerName != null)",
    "info" : "IfStatement[31363-31671]:IfStatement[31363-31671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31386-31671]:Block[31386-31671]"
  }, {
    "left" : "ownerVar = scope.getVar(ownerName);",
    "right" : "ownerVar = scope.getVar(ownerName);",
    "info" : "ExpressionStatement[31400-31435]:ExpressionStatement[31400-31435]"
  }, {
    "left" : "if (ownerVar != null)",
    "right" : "if (ownerVar != null)",
    "info" : "IfStatement[31448-31548]:IfStatement[31448-31548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31470-31548]:Block[31470-31548]"
  }, {
    "left" : "ownerType = ObjectType.cast(ownerVar.getType());",
    "right" : "ownerType = ObjectType.cast(ownerVar.getType());",
    "info" : "ExpressionStatement[31486-31534]:ExpressionStatement[31486-31534]"
  }, {
    "left" : "if (name != null)",
    "right" : "if (name != null)",
    "info" : "IfStatement[31561-31659]:IfStatement[31561-31659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31579-31659]:Block[31579-31659]"
  }, {
    "left" : "propName = name.substring(ownerName.length() + 1);",
    "right" : "propName = name.substring(ownerName.length() + 1);",
    "info" : "ExpressionStatement[31595-31645]:ExpressionStatement[31595-31645]"
  }, {
    "left" : "FunctionType overriddenPropType = null;",
    "right" : "FunctionType overriddenPropType = null;",
    "info" : "VariableDeclarationStatement[31683-31722]:VariableDeclarationStatement[31683-31722]"
  }, {
    "left" : "if (ownerType != null && propName != null)",
    "right" : "if (ownerType != null && propName != null)",
    "info" : "IfStatement[31733-31883]:IfStatement[31733-31883]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31776-31883]:Block[31776-31883]"
  }, {
    "left" : "overriddenPropType =\n                findOverriddenFunction(ownerType, propName);",
    "right" : "overriddenPropType =\n                findOverriddenFunction(ownerType, propName);",
    "info" : "ExpressionStatement[31790-31871]:ExpressionStatement[31790-31871]"
  }, {
    "left" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setSourceNode(fnRoot)\n              .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferInheritance(info);",
    "right" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setSourceNode(fnRoot)\n              .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferInheritance(info);",
    "info" : "VariableDeclarationStatement[31895-32261]:VariableDeclarationStatement[31895-32261]"
  }, {
    "left" : "boolean searchedForThisType = false;",
    "right" : "boolean searchedForThisType = false;",
    "info" : "VariableDeclarationStatement[32311-32347]:VariableDeclarationStatement[32311-32347]"
  }, {
    "left" : "if (ownerType != null && ownerType.isFunctionPrototypeType())",
    "right" : "if (ownerType != null && ownerType.isFunctionPrototypeType())",
    "info" : "IfStatement[32358-32762]:IfStatement[32358-32762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32420-32579]:Block[32420-32579]"
  }, {
    "left" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
    "right" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
    "info" : "ExpressionStatement[32434-32527]:ExpressionStatement[32434-32527]"
  }, {
    "left" : "searchedForThisType = true;",
    "right" : "searchedForThisType = true;",
    "info" : "ExpressionStatement[32540-32567]:ExpressionStatement[32540-32567]"
  }, {
    "left" : "if (ownerNode != null && ownerNode.getType() == Token.THIS)",
    "right" : "if (ownerNode != null && ownerNode.getType() == Token.THIS)",
    "info" : "IfStatement[32585-32762]:IfStatement[32585-32762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32645-32762]:Block[32645-32762]"
  }, {
    "left" : "builder.inferThisType(info, ownerNode.getJSType());",
    "right" : "builder.inferThisType(info, ownerNode.getJSType());",
    "info" : "ExpressionStatement[32659-32710]:ExpressionStatement[32659-32710]"
  }, {
    "left" : "searchedForThisType = true;",
    "right" : "searchedForThisType = true;",
    "info" : "ExpressionStatement[32723-32750]:ExpressionStatement[32723-32750]"
  }, {
    "left" : "if (!searchedForThisType)",
    "right" : "if (!searchedForThisType)",
    "info" : "IfStatement[32774-32854]:IfStatement[32774-32854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32800-32854]:Block[32800-32854]"
  }, {
    "left" : "builder.inferThisType(info);",
    "right" : "builder.inferThisType(info);",
    "info" : "ExpressionStatement[32814-32842]:ExpressionStatement[32814-32842]"
  }, {
    "left" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .inferReturnStatementsAsLastResort(fnBlock)\n              .buildAndRegister();",
    "right" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .inferReturnStatementsAsLastResort(fnBlock)\n              .buildAndRegister();",
    "info" : "ExpressionStatement[32866-33038]:ExpressionStatement[32866-33038]"
  }, {
    "left" : "return functionType;",
    "right" : "return functionType;",
    "info" : "ReturnStatement[33082-33102]:ReturnStatement[33082-33102]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33201-33208]:Modifier[33201-33208]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[33209-33221]:SimpleType[33209-33221]"
  }, {
    "left" : "findOverriddenFunction",
    "right" : "findOverriddenFunction",
    "info" : "SimpleName[33222-33244]:SimpleName[33222-33244]"
  }, {
    "left" : "ObjectType ownerType",
    "right" : "ObjectType ownerType",
    "info" : "SingleVariableDeclaration[33254-33274]:SingleVariableDeclaration[33254-33274]"
  }, {
    "left" : "String propName",
    "right" : "String propName",
    "info" : "SingleVariableDeclaration[33276-33291]:SingleVariableDeclaration[33276-33291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33293-33981]:Block[33293-33981]"
  }, {
    "left" : "JSType propType = ownerType.getPropertyType(propName);",
    "right" : "JSType propType = ownerType.getPropertyType(propName);",
    "info" : "VariableDeclarationStatement[33387-33441]:VariableDeclarationStatement[33387-33441]"
  }, {
    "left" : "if (propType != null && propType.isFunctionType())",
    "right" : "if (propType != null && propType.isFunctionType())",
    "info" : "IfStatement[33448-33955]:IfStatement[33448-33955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33499-33555]:Block[33499-33555]"
  }, {
    "left" : "return propType.toMaybeFunctionType();",
    "right" : "return propType.toMaybeFunctionType();",
    "info" : "ReturnStatement[33509-33547]:ReturnStatement[33509-33547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33561-33955]:Block[33561-33955]"
  }, {
    "left" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
    "right" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
    "info" : "EnhancedForStatement[33673-33947]:EnhancedForStatement[33673-33947]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33756-33947]:Block[33756-33947]"
  }, {
    "left" : "propType = iface.getPropertyType(propName);",
    "right" : "propType = iface.getPropertyType(propName);",
    "info" : "ExpressionStatement[33768-33811]:ExpressionStatement[33768-33811]"
  }, {
    "left" : "if (propType != null && propType.isFunctionType())",
    "right" : "if (propType != null && propType.isFunctionType())",
    "info" : "IfStatement[33822-33937]:IfStatement[33822-33937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33873-33937]:Block[33873-33937]"
  }, {
    "left" : "return propType.toMaybeFunctionType();",
    "right" : "return propType.toMaybeFunctionType();",
    "info" : "ReturnStatement[33887-33925]:ReturnStatement[33887-33925]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[33963-33975]:ReturnStatement[33963-33975]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[34671-34678]:Modifier[34671-34678]"
  }, {
    "left" : "EnumType",
    "right" : "EnumType",
    "info" : "SimpleType[34679-34687]:SimpleType[34679-34687]"
  }, {
    "left" : "createEnumTypeFromNodes",
    "right" : "createEnumTypeFromNodes",
    "info" : "SimpleName[34688-34711]:SimpleName[34688-34711]"
  }, {
    "left" : "Node rValue",
    "right" : "Node rValue",
    "info" : "SingleVariableDeclaration[34712-34723]:SingleVariableDeclaration[34712-34723]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[34725-34736]:SingleVariableDeclaration[34725-34736]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[34746-34760]:SingleVariableDeclaration[34746-34760]"
  }, {
    "left" : "Node lValueNode",
    "right" : "Node lValueNode",
    "info" : "SingleVariableDeclaration[34762-34777]:SingleVariableDeclaration[34762-34777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34779-36454]:Block[34779-36454]"
  }, {
    "left" : "Preconditions.checkNotNull(info);",
    "right" : "Preconditions.checkNotNull(info);",
    "info" : "ExpressionStatement[34787-34820]:ExpressionStatement[34787-34820]"
  }, {
    "left" : "Preconditions.checkState(info.hasEnumParameterType());",
    "right" : "Preconditions.checkState(info.hasEnumParameterType());",
    "info" : "ExpressionStatement[34827-34881]:ExpressionStatement[34827-34881]"
  }, {
    "left" : "EnumType enumType = null;",
    "right" : "EnumType enumType = null;",
    "info" : "VariableDeclarationStatement[34889-34914]:VariableDeclarationStatement[34889-34914]"
  }, {
    "left" : "if (rValue != null && rValue.isQualifiedName())",
    "right" : "if (rValue != null && rValue.isQualifiedName())",
    "info" : "IfStatement[34921-35193]:IfStatement[34921-35193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34969-35193]:Block[34969-35193]"
  }, {
    "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
    "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
    "info" : "VariableDeclarationStatement[35014-35064]:VariableDeclarationStatement[35014-35064]"
  }, {
    "left" : "if (var != null && var.getType() instanceof EnumType)",
    "right" : "if (var != null && var.getType() instanceof EnumType)",
    "info" : "IfStatement[35073-35185]:IfStatement[35073-35185]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35127-35185]:Block[35127-35185]"
  }, {
    "left" : "enumType = (EnumType) var.getType();",
    "right" : "enumType = (EnumType) var.getType();",
    "info" : "ExpressionStatement[35139-35175]:ExpressionStatement[35139-35175]"
  }, {
    "left" : "if (enumType == null)",
    "right" : "if (enumType == null)",
    "info" : "IfStatement[35201-36301]:IfStatement[35201-36301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35223-36301]:Block[35223-36301]"
  }, {
    "left" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
    "right" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
    "info" : "VariableDeclarationStatement[35233-35325]:VariableDeclarationStatement[35233-35325]"
  }, {
    "left" : "enumType = typeRegistry.createEnumType(name, elementsType);",
    "right" : "enumType = typeRegistry.createEnumType(name, elementsType);",
    "info" : "ExpressionStatement[35334-35393]:ExpressionStatement[35334-35393]"
  }, {
    "left" : "if (rValue != null && rValue.getType() == Token.OBJECTLIT)",
    "right" : "if (rValue != null && rValue.getType() == Token.OBJECTLIT)",
    "info" : "IfStatement[35403-36293]:IfStatement[35403-36293]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35462-36293]:Block[35462-36293]"
  }, {
    "left" : "Node key = rValue.getFirstChild();",
    "right" : "Node key = rValue.getFirstChild();",
    "info" : "VariableDeclarationStatement[35509-35543]:VariableDeclarationStatement[35509-35543]"
  }, {
    "left" : "while (key != null)",
    "right" : "while (key != null)",
    "info" : "WhileStatement[35554-36283]:WhileStatement[35554-36283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35574-36283]:Block[35574-36283]"
  }, {
    "left" : "String keyName = NodeUtil.getStringValue(key);",
    "right" : "String keyName = NodeUtil.getStringValue(key);",
    "info" : "VariableDeclarationStatement[35588-35634]:VariableDeclarationStatement[35588-35634]"
  }, {
    "left" : "if (keyName == null)",
    "right" : "if (keyName == null)",
    "info" : "IfStatement[35647-36238]:IfStatement[35647-36238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35668-35848]:Block[35668-35848]"
  }, {
    "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
    "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
    "info" : "ExpressionStatement[35740-35834]:ExpressionStatement[35740-35834]"
  }, {
    "left" : "if (enumType.hasOwnProperty(keyName))",
    "right" : "if (enumType.hasOwnProperty(keyName))",
    "info" : "IfStatement[35854-36238]:IfStatement[35854-36238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35892-35988]:Block[35892-35988]"
  }, {
    "left" : "compiler.report(JSError.make(sourceName, key, ENUM_DUP, keyName));",
    "right" : "compiler.report(JSError.make(sourceName, key, ENUM_DUP, keyName));",
    "info" : "ExpressionStatement[35908-35974]:ExpressionStatement[35908-35974]"
  }, {
    "left" : "if (!codingConvention.isValidEnumKey(keyName))",
    "right" : "if (!codingConvention.isValidEnumKey(keyName))",
    "info" : "IfStatement[35994-36238]:IfStatement[35994-36238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36041-36165]:Block[36041-36165]"
  }, {
    "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
    "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
    "info" : "ExpressionStatement[36057-36151]:ExpressionStatement[36057-36151]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36171-36238]:Block[36171-36238]"
  }, {
    "left" : "enumType.defineElement(keyName, key);",
    "right" : "enumType.defineElement(keyName, key);",
    "info" : "ExpressionStatement[36187-36224]:ExpressionStatement[36187-36224]"
  }, {
    "left" : "key = key.getNext();",
    "right" : "key = key.getNext();",
    "info" : "ExpressionStatement[36251-36271]:ExpressionStatement[36251-36271]"
  }, {
    "left" : "if (name != null && scope.isGlobal())",
    "right" : "if (name != null && scope.isGlobal())",
    "info" : "IfStatement[36309-36424]:IfStatement[36309-36424]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36347-36424]:Block[36347-36424]"
  }, {
    "left" : "typeRegistry.declareType(name, enumType.getElementsType());",
    "right" : "typeRegistry.declareType(name, enumType.getElementsType());",
    "info" : "ExpressionStatement[36357-36416]:ExpressionStatement[36357-36416]"
  }, {
    "left" : "return enumType;",
    "right" : "return enumType;",
    "info" : "ReturnStatement[36432-36448]:ReturnStatement[36432-36448]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36864-36871]:Modifier[36864-36871]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36872-36876]:PrimitiveType[36872-36876]"
  }, {
    "left" : "defineSlot",
    "right" : "defineSlot",
    "info" : "SimpleName[36877-36887]:SimpleName[36877-36887]"
  }, {
    "left" : "Node name",
    "right" : "Node name",
    "info" : "SingleVariableDeclaration[36888-36897]:SingleVariableDeclaration[36888-36897]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[36899-36910]:SingleVariableDeclaration[36899-36910]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[36912-36923]:SingleVariableDeclaration[36912-36923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36925-36984]:Block[36925-36984]"
  }, {
    "left" : "defineSlot(name, parent, type, type == null);",
    "right" : "defineSlot(name, parent, type, type == null);",
    "info" : "ExpressionStatement[36933-36978]:ExpressionStatement[36933-36978]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[37473-37477]:PrimitiveType[37473-37477]"
  }, {
    "left" : "defineSlot",
    "right" : "defineSlot",
    "info" : "SimpleName[37478-37488]:SimpleName[37478-37488]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[37489-37495]:SingleVariableDeclaration[37489-37495]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[37497-37508]:SingleVariableDeclaration[37497-37508]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[37510-37521]:SingleVariableDeclaration[37510-37521]"
  }, {
    "left" : "boolean inferred",
    "right" : "boolean inferred",
    "info" : "SingleVariableDeclaration[37523-37539]:SingleVariableDeclaration[37523-37539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37541-38281]:Block[37541-38281]"
  }, {
    "left" : "Preconditions.checkArgument(inferred || type != null);",
    "right" : "Preconditions.checkArgument(inferred || type != null);",
    "info" : "ExpressionStatement[37549-37603]:ExpressionStatement[37549-37603]"
  }, {
    "left" : "if (n.getType() == Token.NAME)",
    "right" : "if (n.getType() == Token.NAME)",
    "info" : "IfStatement[37747-38208]:IfStatement[37747-38208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37778-38009]:Block[37778-38009]"
  }, {
    "left" : "Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);",
    "right" : "Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);",
    "info" : "ExpressionStatement[37788-38001]:ExpressionStatement[37788-38001]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38015-38208]:Block[38015-38208]"
  }, {
    "left" : "Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));",
    "right" : "Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));",
    "info" : "ExpressionStatement[38025-38200]:ExpressionStatement[38025-38200]"
  }, {
    "left" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
    "right" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
    "info" : "ExpressionStatement[38215-38275]:ExpressionStatement[38215-38275]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[38717-38721]:PrimitiveType[38717-38721]"
  }, {
    "left" : "defineSlot",
    "right" : "defineSlot",
    "info" : "SimpleName[38722-38732]:SimpleName[38722-38732]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38733-38739]:SingleVariableDeclaration[38733-38739]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[38741-38752]:SingleVariableDeclaration[38741-38752]"
  }, {
    "left" : "String variableName",
    "right" : "String variableName",
    "info" : "SingleVariableDeclaration[38754-38773]:SingleVariableDeclaration[38754-38773]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[38783-38794]:SingleVariableDeclaration[38783-38794]"
  }, {
    "left" : "boolean inferred",
    "right" : "boolean inferred",
    "info" : "SingleVariableDeclaration[38796-38812]:SingleVariableDeclaration[38796-38812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38814-43540]:Block[38814-43540]"
  }, {
    "left" : "Preconditions.checkArgument(!variableName.isEmpty());",
    "right" : "Preconditions.checkArgument(!variableName.isEmpty());",
    "info" : "ExpressionStatement[38822-38875]:ExpressionStatement[38822-38875]"
  }, {
    "left" : "boolean isGlobalVar = n.getType() == Token.NAME && scope.isGlobal();",
    "right" : "boolean isGlobalVar = n.getType() == Token.NAME && scope.isGlobal();",
    "info" : "VariableDeclarationStatement[38883-38951]:VariableDeclarationStatement[38883-38951]"
  }, {
    "left" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.getType() == Token.VAR ||\n           parent.getType() == Token.FUNCTION);",
    "right" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.getType() == Token.VAR ||\n           parent.getType() == Token.FUNCTION);",
    "info" : "VariableDeclarationStatement[38958-39110]:VariableDeclarationStatement[38958-39110]"
  }, {
    "left" : "Scope scopeToDeclareIn = scope;",
    "right" : "Scope scopeToDeclareIn = scope;",
    "info" : "VariableDeclarationStatement[39318-39349]:VariableDeclarationStatement[39318-39349]"
  }, {
    "left" : "if (n.getType() == Token.GETPROP && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
    "right" : "if (n.getType() == Token.GETPROP && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
    "info" : "IfStatement[39356-39752]:IfStatement[39356-39752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39454-39752]:Block[39454-39752]"
  }, {
    "left" : "Scope globalScope = scope.getGlobalScope();",
    "right" : "Scope globalScope = scope.getGlobalScope();",
    "info" : "VariableDeclarationStatement[39464-39507]:VariableDeclarationStatement[39464-39507]"
  }, {
    "left" : "if (!globalScope.isDeclared(variableName, false))",
    "right" : "if (!globalScope.isDeclared(variableName, false))",
    "info" : "IfStatement[39630-39744]:IfStatement[39630-39744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39680-39744]:Block[39680-39744]"
  }, {
    "left" : "scopeToDeclareIn = scope.getGlobalScope();",
    "right" : "scopeToDeclareIn = scope.getGlobalScope();",
    "info" : "ExpressionStatement[39692-39734]:ExpressionStatement[39692-39734]"
  }, {
    "left" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
    "right" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
    "info" : "IfStatement[39796-42597]:IfStatement[39796-42597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39850-40027]:Block[39850-40027]"
  }, {
    "left" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
    "right" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
    "info" : "VariableDeclarationStatement[39860-39911]:VariableDeclarationStatement[39860-39911]"
  }, {
    "left" : "validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);",
    "right" : "validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);",
    "info" : "ExpressionStatement[39920-40019]:ExpressionStatement[39920-40019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40033-42597]:Block[40033-42597]"
  }, {
    "left" : "if (!inferred)",
    "right" : "if (!inferred)",
    "info" : "IfStatement[40043-40105]:IfStatement[40043-40105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40058-40105]:Block[40058-40105]"
  }, {
    "left" : "setDeferredType(n, type);",
    "right" : "setDeferredType(n, type);",
    "info" : "ExpressionStatement[40070-40095]:ExpressionStatement[40070-40095]"
  }, {
    "left" : "CompilerInput input = compiler.getInput(inputId);",
    "right" : "CompilerInput input = compiler.getInput(inputId);",
    "info" : "VariableDeclarationStatement[40115-40164]:VariableDeclarationStatement[40115-40164]"
  }, {
    "left" : "boolean isExtern = n.isFromExterns();",
    "right" : "boolean isExtern = n.isFromExterns();",
    "info" : "VariableDeclarationStatement[40244-40281]:VariableDeclarationStatement[40244-40281]"
  }, {
    "left" : "Var newVar =\n            scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
    "right" : "Var newVar =\n            scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
    "info" : "VariableDeclarationStatement[40290-40380]:VariableDeclarationStatement[40290-40380]"
  }, {
    "left" : "if (type instanceof EnumType)",
    "right" : "if (type instanceof EnumType)",
    "info" : "IfStatement[40390-40771]:IfStatement[40390-40771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40420-40771]:Block[40420-40771]"
  }, {
    "left" : "Node initialValue = newVar.getInitialValue();",
    "right" : "Node initialValue = newVar.getInitialValue();",
    "info" : "VariableDeclarationStatement[40432-40477]:VariableDeclarationStatement[40432-40477]"
  }, {
    "left" : "boolean isValidValue = initialValue != null &&\n              (initialValue.getType() == Token.OBJECTLIT ||\n               initialValue.isQualifiedName());",
    "right" : "boolean isValidValue = initialValue != null &&\n              (initialValue.getType() == Token.OBJECTLIT ||\n               initialValue.isQualifiedName());",
    "info" : "VariableDeclarationStatement[40488-40642]:VariableDeclarationStatement[40488-40642]"
  }, {
    "left" : "if (!isValidValue)",
    "right" : "if (!isValidValue)",
    "info" : "IfStatement[40653-40761]:IfStatement[40653-40761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40672-40761]:Block[40672-40761]"
  }, {
    "left" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
    "right" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
    "info" : "ExpressionStatement[40686-40749]:ExpressionStatement[40686-40749]"
  }, {
    "left" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
    "right" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
    "info" : "VariableDeclarationStatement[40860-40915]:VariableDeclarationStatement[40860-40915]"
  }, {
    "left" : "if (fnType != null &&\n            // We don't want to look at empty function types.\n            !type.isEmptyType())",
    "right" : "if (fnType != null &&\n            // We don't want to look at empty function types.\n            !type.isEmptyType())",
    "info" : "IfStatement[40924-42589]:IfStatement[40924-42589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41041-42589]:Block[41041-42589]"
  }, {
    "left" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n              !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE)))",
    "right" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n              !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE)))",
    "info" : "IfStatement[41053-42579]:IfStatement[41053-42579]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41176-42579]:Block[41176-42579]"
  }, {
    "left" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
    "right" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
    "info" : "VariableDeclarationStatement[41247-41311]:VariableDeclarationStatement[41247-41311]"
  }, {
    "left" : "scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), input,\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));",
    "right" : "scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), input,\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));",
    "info" : "ExpressionStatement[41324-41640]:ExpressionStatement[41324-41640]"
  }, {
    "left" : "if (newVar.getInitialValue() == null &&\n                !isExtern &&\n                // We want to make sure that when we declare a new instance\n                // type (with @constructor) that there's actually a ctor for it.\n                // This doesn't apply to structural constructors\n                // (like function(new:Array). Checking the constructed\n                // type against the variable name is a sufficient check for\n                // this.\n                variableName.equals(\n                    fnType.getInstanceType().getReferenceName()))",
    "right" : "if (newVar.getInitialValue() == null &&\n                !isExtern &&\n                // We want to make sure that when we declare a new instance\n                // type (with @constructor) that there's actually a ctor for it.\n                // This doesn't apply to structural constructors\n                // (like function(new:Array). Checking the constructed\n                // type against the variable name is a sufficient check for\n                // this.\n                variableName.equals(\n                    fnType.getInstanceType().getReferenceName()))",
    "info" : "IfStatement[41760-42567]:IfStatement[41760-42567]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42326-42567]:Block[42326-42567]"
  }, {
    "left" : "compiler.report(\n                  JSError.make(sourceName, n,\n                      fnType.isConstructor() ?\n                          CTOR_INITIALIZER : IFACE_INITIALIZER,\n                      variableName));",
    "right" : "compiler.report(\n                  JSError.make(sourceName, n,\n                      fnType.isConstructor() ?\n                          CTOR_INITIALIZER : IFACE_INITIALIZER,\n                      variableName));",
    "info" : "ExpressionStatement[42342-42553]:ExpressionStatement[42342-42553]"
  }, {
    "left" : "if (shouldDeclareOnGlobalThis)",
    "right" : "if (shouldDeclareOnGlobalThis)",
    "info" : "IfStatement[42605-43032]:IfStatement[42605-43032]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42636-43032]:Block[42636-43032]"
  }, {
    "left" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
    "right" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
    "info" : "VariableDeclarationStatement[42646-42728]:VariableDeclarationStatement[42646-42728]"
  }, {
    "left" : "if (inferred)",
    "right" : "if (inferred)",
    "info" : "IfStatement[42737-43024]:IfStatement[42737-43024]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42751-42939]:Block[42751-42939]"
  }, {
    "left" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
    "right" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
    "info" : "ExpressionStatement[42763-42929]:ExpressionStatement[42763-42929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42945-43024]:Block[42945-43024]"
  }, {
    "left" : "globalThis.defineDeclaredProperty(variableName, type, n);",
    "right" : "globalThis.defineDeclaredProperty(variableName, type, n);",
    "info" : "ExpressionStatement[42957-43014]:ExpressionStatement[42957-43014]"
  }, {
    "left" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
    "right" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
    "info" : "IfStatement[43040-43534]:IfStatement[43040-43534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43185-43534]:Block[43185-43534]"
  }, {
    "left" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
    "right" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
    "info" : "VariableDeclarationStatement[43195-43300]:VariableDeclarationStatement[43195-43300]"
  }, {
    "left" : "globalThisCtor.getInstanceType().clearCachedValues();",
    "right" : "globalThisCtor.getInstanceType().clearCachedValues();",
    "info" : "ExpressionStatement[43309-43362]:ExpressionStatement[43309-43362]"
  }, {
    "left" : "globalThisCtor.getPrototype().clearCachedValues();",
    "right" : "globalThisCtor.getPrototype().clearCachedValues();",
    "info" : "ExpressionStatement[43371-43421]:ExpressionStatement[43371-43421]"
  }, {
    "left" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
    "right" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
    "info" : "ExpressionStatement[43430-43526]:ExpressionStatement[43430-43526]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43638-43645]:Modifier[43638-43645]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[43646-43653]:PrimitiveType[43646-43653]"
  }, {
    "left" : "isQnameRootedInGlobalScope",
    "right" : "isQnameRootedInGlobalScope",
    "info" : "SimpleName[43654-43680]:SimpleName[43654-43680]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43681-43687]:SingleVariableDeclaration[43681-43687]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43689-43940]:Block[43689-43940]"
  }, {
    "left" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
    "right" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
    "info" : "VariableDeclarationStatement[43697-43744]:VariableDeclarationStatement[43697-43744]"
  }, {
    "left" : "if (root.getType() == Token.NAME)",
    "right" : "if (root.getType() == Token.NAME)",
    "info" : "IfStatement[43751-43914]:IfStatement[43751-43914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43785-43914]:Block[43785-43914]"
  }, {
    "left" : "Var var = scope.getVar(root.getString());",
    "right" : "Var var = scope.getVar(root.getString());",
    "info" : "VariableDeclarationStatement[43795-43836]:VariableDeclarationStatement[43795-43836]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[43845-43906]:IfStatement[43845-43906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43862-43906]:Block[43862-43906]"
  }, {
    "left" : "return var.isGlobal();",
    "right" : "return var.isGlobal();",
    "info" : "ReturnStatement[43874-43896]:ReturnStatement[43874-43896]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[43921-43934]:ReturnStatement[43921-43934]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44295-44302]:Modifier[44295-44302]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[44303-44309]:SimpleType[44303-44309]"
  }, {
    "left" : "getDeclaredType",
    "right" : "getDeclaredType",
    "info" : "SimpleName[44310-44325]:SimpleName[44310-44325]"
  }, {
    "left" : "String sourceName",
    "right" : "String sourceName",
    "info" : "SingleVariableDeclaration[44326-44343]:SingleVariableDeclaration[44326-44343]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[44345-44359]:SingleVariableDeclaration[44345-44359]"
  }, {
    "left" : "Node lValue",
    "right" : "Node lValue",
    "info" : "SingleVariableDeclaration[44369-44380]:SingleVariableDeclaration[44369-44380]"
  }, {
    "left" : "@Nullable Node rValue",
    "right" : "@Nullable Node rValue",
    "info" : "SingleVariableDeclaration[44382-44403]:SingleVariableDeclaration[44382-44403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44405-46498]:Block[44405-46498]"
  }, {
    "left" : "if (info != null && info.hasType())",
    "right" : "if (info != null && info.hasType())",
    "info" : "IfStatement[44413-46423]:IfStatement[44413-46423]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44449-44528]:Block[44449-44528]"
  }, {
    "left" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
    "right" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
    "info" : "ReturnStatement[44459-44520]:ReturnStatement[44459-44520]"
  }, {
    "left" : "if (rValue != null && rValue.getType() == Token.FUNCTION &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
    "right" : "if (rValue != null && rValue.getType() == Token.FUNCTION &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
    "info" : "IfStatement[44534-46423]:IfStatement[44534-46423]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44711-44755]:Block[44711-44755]"
  }, {
    "left" : "return rValue.getJSType();",
    "right" : "return rValue.getJSType();",
    "info" : "ReturnStatement[44721-44747]:ReturnStatement[44721-44747]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[44761-46423]:IfStatement[44761-46423]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44779-46423]:Block[44779-46423]"
  }, {
    "left" : "if (info.hasEnumParameterType())",
    "right" : "if (info.hasEnumParameterType())",
    "info" : "IfStatement[44789-46415]:IfStatement[44789-46415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44822-45084]:Block[44822-45084]"
  }, {
    "left" : "if (rValue != null && rValue.getType() == Token.OBJECTLIT)",
    "right" : "if (rValue != null && rValue.getType() == Token.OBJECTLIT)",
    "info" : "IfStatement[44834-45074]:IfStatement[44834-45074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44893-44945]:Block[44893-44945]"
  }, {
    "left" : "return rValue.getJSType();",
    "right" : "return rValue.getJSType();",
    "info" : "ReturnStatement[44907-44933]:ReturnStatement[44907-44933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44951-45074]:Block[44951-45074]"
  }, {
    "left" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
    "right" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
    "info" : "ReturnStatement[44965-45062]:ReturnStatement[44965-45062]"
  }, {
    "left" : "if (info.isConstructor() || info.isInterface())",
    "right" : "if (info.isConstructor() || info.isInterface())",
    "info" : "IfStatement[45090-46415]:IfStatement[45090-46415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45138-45259]:Block[45138-45259]"
  }, {
    "left" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
    "right" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
    "info" : "ReturnStatement[45150-45249]:ReturnStatement[45150-45249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45265-46415]:Block[45265-46415]"
  }, {
    "left" : "if (info.isConstant())",
    "right" : "if (info.isConstant())",
    "info" : "IfStatement[45345-46405]:IfStatement[45345-46405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45368-46405]:Block[45368-46405]"
  }, {
    "left" : "JSType knownType = null;",
    "right" : "JSType knownType = null;",
    "info" : "VariableDeclarationStatement[45382-45406]:VariableDeclarationStatement[45382-45406]"
  }, {
    "left" : "if (rValue != null)",
    "right" : "if (rValue != null)",
    "info" : "IfStatement[45419-46393]:IfStatement[45419-46393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45439-46393]:Block[45439-46393]"
  }, {
    "left" : "if (rValue.getJSType() != null\n                  && !rValue.getJSType().isUnknownType())",
    "right" : "if (rValue.getJSType() != null\n                  && !rValue.getJSType().isUnknownType())",
    "info" : "IfStatement[45455-46379]:IfStatement[45455-46379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45544-45604]:Block[45544-45604]"
  }, {
    "left" : "return rValue.getJSType();",
    "right" : "return rValue.getJSType();",
    "info" : "ReturnStatement[45562-45588]:ReturnStatement[45562-45588]"
  }, {
    "left" : "if (rValue.getType() == Token.OR)",
    "right" : "if (rValue.getType() == Token.OR)",
    "info" : "IfStatement[45610-46379]:IfStatement[45610-46379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45644-46379]:Block[45644-46379]"
  }, {
    "left" : "Node firstClause = rValue.getFirstChild();",
    "right" : "Node firstClause = rValue.getFirstChild();",
    "info" : "VariableDeclarationStatement[45856-45898]:VariableDeclarationStatement[45856-45898]"
  }, {
    "left" : "Node secondClause = firstClause.getNext();",
    "right" : "Node secondClause = firstClause.getNext();",
    "info" : "VariableDeclarationStatement[45915-45957]:VariableDeclarationStatement[45915-45957]"
  }, {
    "left" : "boolean namesMatch = firstClause.getType() == Token.NAME\n                    && lValue.getType() == Token.NAME\n                    && firstClause.getString().equals(lValue.getString());",
    "right" : "boolean namesMatch = firstClause.getType() == Token.NAME\n                    && lValue.getType() == Token.NAME\n                    && firstClause.getString().equals(lValue.getString());",
    "info" : "VariableDeclarationStatement[45974-46159]:VariableDeclarationStatement[45974-46159]"
  }, {
    "left" : "if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType())",
    "right" : "if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType())",
    "info" : "IfStatement[46176-46363]:IfStatement[46176-46363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46293-46363]:Block[46293-46363]"
  }, {
    "left" : "return secondClause.getJSType();",
    "right" : "return secondClause.getJSType();",
    "info" : "ReturnStatement[46313-46345]:ReturnStatement[46313-46345]"
  }, {
    "left" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
    "right" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
    "info" : "ReturnStatement[46431-46492]:ReturnStatement[46431-46492]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[46504-46511]:Modifier[46504-46511]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[46512-46524]:SimpleType[46512-46524]"
  }, {
    "left" : "getFunctionType",
    "right" : "getFunctionType",
    "info" : "SimpleName[46525-46540]:SimpleName[46525-46540]"
  }, {
    "left" : "@Nullable Var v",
    "right" : "@Nullable Var v",
    "info" : "SingleVariableDeclaration[46541-46556]:SingleVariableDeclaration[46541-46556]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46558-46715]:Block[46558-46715]"
  }, {
    "left" : "JSType t = v == null ? null : v.getType();",
    "right" : "JSType t = v == null ? null : v.getType();",
    "info" : "VariableDeclarationStatement[46566-46608]:VariableDeclarationStatement[46566-46608]"
  }, {
    "left" : "ObjectType o = t == null ? null : t.dereference();",
    "right" : "ObjectType o = t == null ? null : t.dereference();",
    "info" : "VariableDeclarationStatement[46615-46665]:VariableDeclarationStatement[46615-46665]"
  }, {
    "left" : "return JSType.toMaybeFunctionType(o);",
    "right" : "return JSType.toMaybeFunctionType(o);",
    "info" : "ReturnStatement[46672-46709]:ReturnStatement[46672-46709]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[46808-46815]:Modifier[46808-46815]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[46816-46820]:PrimitiveType[46816-46820]"
  }, {
    "left" : "checkForCallingConventionDefiningCalls",
    "right" : "checkForCallingConventionDefiningCalls",
    "info" : "SimpleName[46821-46859]:SimpleName[46821-46859]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[46869-46875]:SingleVariableDeclaration[46869-46875]"
  }, {
    "left" : "Map<String, String> delegateCallingConventions",
    "right" : "Map<String, String> delegateCallingConventions",
    "info" : "SingleVariableDeclaration[46877-46923]:SingleVariableDeclaration[46877-46923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46925-47036]:Block[46925-47036]"
  }, {
    "left" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
    "right" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
    "info" : "ExpressionStatement[46933-47030]:ExpressionStatement[46933-47030]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[47239-47246]:Modifier[47239-47246]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[47247-47251]:PrimitiveType[47247-47251]"
  }, {
    "left" : "checkForClassDefiningCalls",
    "right" : "checkForClassDefiningCalls",
    "info" : "SimpleName[47252-47278]:SimpleName[47252-47278]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[47288-47303]:SingleVariableDeclaration[47288-47303]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[47305-47311]:SingleVariableDeclaration[47305-47311]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[47313-47324]:SingleVariableDeclaration[47313-47324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47326-49956]:Block[47326-49956]"
  }, {
    "left" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
    "right" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
    "info" : "VariableDeclarationStatement[47334-47424]:VariableDeclarationStatement[47334-47424]"
  }, {
    "left" : "if (relationship != null)",
    "right" : "if (relationship != null)",
    "info" : "IfStatement[47431-48600]:IfStatement[47431-48600]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47457-48600]:Block[47457-48600]"
  }, {
    "left" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
    "right" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
    "info" : "VariableDeclarationStatement[47467-47564]:VariableDeclarationStatement[47467-47564]"
  }, {
    "left" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
    "right" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
    "info" : "VariableDeclarationStatement[47573-47666]:VariableDeclarationStatement[47573-47666]"
  }, {
    "left" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
    "right" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
    "info" : "IfStatement[47675-48592]:IfStatement[47675-48592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47785-48592]:Block[47785-48592]"
  }, {
    "left" : "ObjectType superClass = superCtor.getInstanceType();",
    "right" : "ObjectType superClass = superCtor.getInstanceType();",
    "info" : "VariableDeclarationStatement[47797-47849]:VariableDeclarationStatement[47797-47849]"
  }, {
    "left" : "ObjectType subClass = subCtor.getInstanceType();",
    "right" : "ObjectType subClass = subCtor.getInstanceType();",
    "info" : "VariableDeclarationStatement[47860-47908]:VariableDeclarationStatement[47860-47908]"
  }, {
    "left" : "superCtor = superClass.getConstructor();",
    "right" : "superCtor = superClass.getConstructor();",
    "info" : "ExpressionStatement[48106-48146]:ExpressionStatement[48106-48146]"
  }, {
    "left" : "subCtor = subClass.getConstructor();",
    "right" : "subCtor = subClass.getConstructor();",
    "info" : "ExpressionStatement[48157-48193]:ExpressionStatement[48157-48193]"
  }, {
    "left" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
    "right" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
    "info" : "IfStatement[48205-48403]:IfStatement[48205-48403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48323-48403]:Block[48323-48403]"
  }, {
    "left" : "validator.expectSuperType(t, n, superClass, subClass);",
    "right" : "validator.expectSuperType(t, n, superClass, subClass);",
    "info" : "ExpressionStatement[48337-48391]:ExpressionStatement[48337-48391]"
  }, {
    "left" : "if (superCtor != null && subCtor != null)",
    "right" : "if (superCtor != null && subCtor != null)",
    "info" : "IfStatement[48415-48582]:IfStatement[48415-48582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48457-48582]:Block[48457-48582]"
  }, {
    "left" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
    "right" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
    "info" : "ExpressionStatement[48471-48570]:ExpressionStatement[48471-48570]"
  }, {
    "left" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
    "right" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
    "info" : "VariableDeclarationStatement[48608-48700]:VariableDeclarationStatement[48608-48700]"
  }, {
    "left" : "if (singletonGetterClassName != null)",
    "right" : "if (singletonGetterClassName != null)",
    "info" : "IfStatement[48707-49230]:IfStatement[48707-49230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48745-49230]:Block[48745-49230]"
  }, {
    "left" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
    "right" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
    "info" : "VariableDeclarationStatement[48755-48856]:VariableDeclarationStatement[48755-48856]"
  }, {
    "left" : "if (objectType != null)",
    "right" : "if (objectType != null)",
    "info" : "IfStatement[48865-49222]:IfStatement[48865-49222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48889-49222]:Block[48889-49222]"
  }, {
    "left" : "FunctionType functionType = objectType.getConstructor();",
    "right" : "FunctionType functionType = objectType.getConstructor();",
    "info" : "VariableDeclarationStatement[48901-48957]:VariableDeclarationStatement[48901-48957]"
  }, {
    "left" : "if (functionType != null)",
    "right" : "if (functionType != null)",
    "info" : "IfStatement[48969-49212]:IfStatement[48969-49212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48995-49212]:Block[48995-49212]"
  }, {
    "left" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
    "right" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
    "info" : "VariableDeclarationStatement[49009-49095]:VariableDeclarationStatement[49009-49095]"
  }, {
    "left" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
    "right" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
    "info" : "ExpressionStatement[49108-49200]:ExpressionStatement[49108-49200]"
  }, {
    "left" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
    "right" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
    "info" : "VariableDeclarationStatement[49238-49336]:VariableDeclarationStatement[49238-49336]"
  }, {
    "left" : "if (delegateRelationship != null)",
    "right" : "if (delegateRelationship != null)",
    "info" : "IfStatement[49343-49443]:IfStatement[49343-49443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49377-49443]:Block[49377-49443]"
  }, {
    "left" : "applyDelegateRelationship(delegateRelationship);",
    "right" : "applyDelegateRelationship(delegateRelationship);",
    "info" : "ExpressionStatement[49387-49435]:ExpressionStatement[49387-49435]"
  }, {
    "left" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(t, n);",
    "right" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(t, n);",
    "info" : "VariableDeclarationStatement[49451-49543]:VariableDeclarationStatement[49451-49543]"
  }, {
    "left" : "if (objectLiteralCast != null)",
    "right" : "if (objectLiteralCast != null)",
    "info" : "IfStatement[49550-49950]:IfStatement[49550-49950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49581-49950]:Block[49581-49950]"
  }, {
    "left" : "ObjectType type = ObjectType.cast(\n            typeRegistry.getType(objectLiteralCast.typeName));",
    "right" : "ObjectType type = ObjectType.cast(\n            typeRegistry.getType(objectLiteralCast.typeName));",
    "info" : "VariableDeclarationStatement[49591-49688]:VariableDeclarationStatement[49591-49688]"
  }, {
    "left" : "if (type != null && type.getConstructor() != null)",
    "right" : "if (type != null && type.getConstructor() != null)",
    "info" : "IfStatement[49697-49942]:IfStatement[49697-49942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49748-49822]:Block[49748-49822]"
  }, {
    "left" : "setDeferredType(objectLiteralCast.objectNode, type);",
    "right" : "setDeferredType(objectLiteralCast.objectNode, type);",
    "info" : "ExpressionStatement[49760-49812]:ExpressionStatement[49760-49812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49828-49942]:Block[49828-49942]"
  }, {
    "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  CONSTRUCTOR_EXPECTED));",
    "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  CONSTRUCTOR_EXPECTED));",
    "info" : "ExpressionStatement[49840-49932]:ExpressionStatement[49840-49932]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[50040-50047]:Modifier[50040-50047]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[50048-50052]:PrimitiveType[50048-50052]"
  }, {
    "left" : "applyDelegateRelationship",
    "right" : "applyDelegateRelationship",
    "info" : "SimpleName[50053-50078]:SimpleName[50053-50078]"
  }, {
    "left" : "DelegateRelationship delegateRelationship",
    "right" : "DelegateRelationship delegateRelationship",
    "info" : "SingleVariableDeclaration[50088-50129]:SingleVariableDeclaration[50088-50129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50131-51873]:Block[50131-51873]"
  }, {
    "left" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
    "right" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
    "info" : "VariableDeclarationStatement[50139-50249]:VariableDeclarationStatement[50139-50249]"
  }, {
    "left" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
    "right" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
    "info" : "VariableDeclarationStatement[50256-50372]:VariableDeclarationStatement[50256-50372]"
  }, {
    "left" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
    "right" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
    "info" : "VariableDeclarationStatement[50379-50507]:VariableDeclarationStatement[50379-50507]"
  }, {
    "left" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
    "right" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
    "info" : "IfStatement[50514-51867]:IfStatement[50514-51867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50624-51867]:Block[50624-51867]"
  }, {
    "left" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
    "right" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
    "info" : "VariableDeclarationStatement[50634-50696]:VariableDeclarationStatement[50634-50696]"
  }, {
    "left" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
    "right" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
    "info" : "VariableDeclarationStatement[50705-50773]:VariableDeclarationStatement[50705-50773]"
  }, {
    "left" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
    "right" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
    "info" : "VariableDeclarationStatement[50782-50852]:VariableDeclarationStatement[50782-50852]"
  }, {
    "left" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
    "right" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
    "info" : "IfStatement[50862-51859]:IfStatement[50862-51859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50958-51859]:Block[50958-51859]"
  }, {
    "left" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
    "right" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
    "info" : "VariableDeclarationStatement[50970-51067]:VariableDeclarationStatement[50970-51067]"
  }, {
    "left" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
    "right" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
    "info" : "ExpressionStatement[51078-51169]:ExpressionStatement[51078-51169]"
  }, {
    "left" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
    "right" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
    "info" : "VariableDeclarationStatement[51180-51358]:VariableDeclarationStatement[51180-51358]"
  }, {
    "left" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
    "right" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
    "info" : "VariableDeclarationStatement[51370-51544]:VariableDeclarationStatement[51370-51544]"
  }, {
    "left" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
    "right" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
    "info" : "ExpressionStatement[51555-51609]:ExpressionStatement[51555-51609]"
  }, {
    "left" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
    "right" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
    "info" : "ExpressionStatement[51621-51780]:ExpressionStatement[51621-51780]"
  }, {
    "left" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
    "right" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
    "info" : "ExpressionStatement[51791-51849]:ExpressionStatement[51791-51849]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[52302-52306]:PrimitiveType[52302-52306]"
  }, {
    "left" : "maybeDeclareQualifiedName",
    "right" : "maybeDeclareQualifiedName",
    "info" : "SimpleName[52307-52332]:SimpleName[52307-52332]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[52333-52348]:SingleVariableDeclaration[52333-52348]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[52350-52364]:SingleVariableDeclaration[52350-52364]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[52374-52380]:SingleVariableDeclaration[52374-52380]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[52382-52393]:SingleVariableDeclaration[52382-52393]"
  }, {
    "left" : "Node rhsValue",
    "right" : "Node rhsValue",
    "info" : "SingleVariableDeclaration[52395-52408]:SingleVariableDeclaration[52395-52408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52410-57221]:Block[52410-57537]"
  }, {
    "left" : "Node ownerNode = n.getFirstChild();",
    "right" : "Node ownerNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[52418-52453]:VariableDeclarationStatement[52418-52453]"
  }, {
    "left" : "String ownerName = ownerNode.getQualifiedName();",
    "right" : "String ownerName = ownerNode.getQualifiedName();",
    "info" : "VariableDeclarationStatement[52460-52508]:VariableDeclarationStatement[52460-52508]"
  }, {
    "left" : "String qName = n.getQualifiedName();",
    "right" : "String qName = n.getQualifiedName();",
    "info" : "VariableDeclarationStatement[52515-52551]:VariableDeclarationStatement[52515-52551]"
  }, {
    "left" : "String propName = n.getLastChild().getString();",
    "right" : "String propName = n.getLastChild().getString();",
    "info" : "VariableDeclarationStatement[52558-52605]:VariableDeclarationStatement[52558-52605]"
  }, {
    "left" : "Preconditions.checkArgument(qName != null && ownerName != null);",
    "right" : "Preconditions.checkArgument(qName != null && ownerName != null);",
    "info" : "ExpressionStatement[52612-52676]:ExpressionStatement[52612-52676]"
  }, {
    "left" : "JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);",
    "right" : "JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);",
    "info" : "VariableDeclarationStatement[53334-53407]:VariableDeclarationStatement[53334-53407]"
  }, {
    "left" : "if (valueType == null && rhsValue != null)",
    "right" : "if (valueType == null && rhsValue != null)",
    "info" : "IfStatement[53414-53543]:IfStatement[53414-53543]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53457-53543]:Block[53457-53543]"
  }, {
    "left" : "valueType = rhsValue.getJSType();",
    "right" : "valueType = rhsValue.getJSType();",
    "info" : "ExpressionStatement[53502-53535]:ExpressionStatement[53502-53535]"
  }, {
    "left" : "if (\"prototype\".equals(propName))",
    "right" : "if (\"prototype\".equals(propName))",
    "info" : "IfStatement[53785-54739]:IfStatement[53785-55055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53819-54739]:Block[53819-55055]"
  }, {
    "left" : "Var qVar = scope.getVar(qName);",
    "right" : "Var qVar = scope.getVar(qName);",
    "info" : "VariableDeclarationStatement[53829-53860]:VariableDeclarationStatement[53829-53860]"
  }, {
    "left" : "if (qVar != null)",
    "right" : "if (qVar != null)",
    "info" : "IfStatement[53869-54731]:IfStatement[53869-55047]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53887-54731]:Block[53887-55047]"
  }, {
    "left" : "if (!qVar.isTypeInferred())",
    "right" : "if (!qVar.isTypeInferred())",
    "info" : "IfStatement[54216-54632]:IfStatement[54532-54948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54244-54632]:Block[54560-54948]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[54613-54620]:ReturnStatement[54929-54936]"
  }, {
    "left" : "if (qVar.getScope() == scope)",
    "right" : "if (qVar.getScope() == scope)",
    "info" : "IfStatement[54643-54721]:IfStatement[54959-55037]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54673-54721]:Block[54989-55037]"
  }, {
    "left" : "scope.undeclare(qVar);",
    "right" : "scope.undeclare(qVar);",
    "info" : "ExpressionStatement[54687-54709]:ExpressionStatement[55003-55025]"
  }, {
    "left" : "if (valueType == null)",
    "right" : "if (valueType == null)",
    "info" : "IfStatement[54747-55018]:IfStatement[55063-55334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54770-55018]:Block[55086-55334]"
  }, {
    "left" : "if (parent.getType() == Token.EXPR_RESULT)",
    "right" : "if (parent.getType() == Token.EXPR_RESULT)",
    "info" : "IfStatement[54780-54993]:IfStatement[55096-55309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54823-54993]:Block[55139-55309]"
  }, {
    "left" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
    "right" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
    "info" : "ExpressionStatement[54835-54983]:ExpressionStatement[55151-55299]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[55003-55010]:ReturnStatement[55319-55326]"
  }, {
    "left" : "boolean inferred = true;",
    "right" : "boolean inferred = true;",
    "info" : "VariableDeclarationStatement[55026-55050]:VariableDeclarationStatement[55342-55366]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[55057-55386]:IfStatement[55373-55702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55075-55386]:Block[55391-55702]"
  }, {
    "left" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
    "right" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
    "info" : "ExpressionStatement[55137-55378]:ExpressionStatement[55453-55694]"
  }, {
    "left" : "if (inferred)",
    "right" : "if (inferred)",
    "info" : "IfStatement[55394-55616]:IfStatement[55710-55932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55408-55616]:Block[55724-55932]"
  }, {
    "left" : "inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            (info != null || !scope.isDeclared(qName, false)));",
    "right" : "inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            (info != null || !scope.isDeclared(qName, false)));",
    "info" : "ExpressionStatement[55460-55608]:ExpressionStatement[55776-55924]"
  }, {
    "left" : "if (!inferred)",
    "right" : "if (!inferred)",
    "info" : "IfStatement[55624-57215]:IfStatement[55940-57531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55639-56495]:Block[55955-56811]"
  }, {
    "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
    "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
    "info" : "VariableDeclarationStatement[55649-55697]:VariableDeclarationStatement[55965-56013]"
  }, {
    "left" : "if (ownerType != null)",
    "right" : "if (ownerType != null)",
    "info" : "IfStatement[55706-56302]:IfStatement[56022-56618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55729-56302]:Block[56045-56618]"
  }, {
    "left" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
    "right" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
    "info" : "VariableDeclarationStatement[55842-55909]:VariableDeclarationStatement[56158-56225]"
  }, {
    "left" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
    "right" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
    "info" : "IfStatement[55920-56292]:IfStatement[56236-56608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56135-56292]:Block[56451-56608]"
  }, {
    "left" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
    "right" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
    "info" : "ExpressionStatement[56223-56280]:ExpressionStatement[56539-56596]"
  }, {
    "left" : "defineSlot(n, parent, valueType, inferred);",
    "right" : "defineSlot(n, parent, valueType, inferred);",
    "info" : "ExpressionStatement[56444-56487]:ExpressionStatement[56760-56803]"
  }, {
    "left" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.TRUE)",
    "right" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.TRUE)",
    "info" : "IfStatement[56501-57215]:IfStatement[56817-57531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56569-57215]:Block[56885-57531]"
  }, {
    "left" : "FunctionType ownerType =\n            JSType.toMaybeFunctionType(getObjectSlot(ownerName));",
    "right" : "FunctionType ownerType =\n            JSType.toMaybeFunctionType(getObjectSlot(ownerName));",
    "info" : "VariableDeclarationStatement[56645-56735]:VariableDeclarationStatement[56961-57051]"
  }, {
    "left" : "if (ownerType != null)",
    "right" : "if (ownerType != null)",
    "info" : "IfStatement[56744-57207]:IfStatement[57060-57523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56767-57207]:Block[57083-57523]"
  }, {
    "left" : "JSType ownerTypeOfThis = ownerType.getTypeOfThis();",
    "right" : "JSType ownerTypeOfThis = ownerType.getTypeOfThis();",
    "info" : "VariableDeclarationStatement[56779-56830]:VariableDeclarationStatement[57095-57146]"
  }, {
    "left" : "String delegateName = codingConvention.getDelegateSuperclassName();",
    "right" : "String delegateName = codingConvention.getDelegateSuperclassName();",
    "info" : "VariableDeclarationStatement[56841-56908]:VariableDeclarationStatement[57157-57224]"
  }, {
    "left" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
    "right" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
    "info" : "VariableDeclarationStatement[56919-57020]:VariableDeclarationStatement[57235-57336]"
  }, {
    "left" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
    "right" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
    "info" : "IfStatement[57031-57197]:IfStatement[57347-57513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57114-57197]:Block[57430-57513]"
  }, {
    "left" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
    "right" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
    "info" : "ExpressionStatement[57128-57185]:ExpressionStatement[57444-57501]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[57447-57454]:Modifier[57763-57770]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[57455-57465]:SimpleType[57771-57781]"
  }, {
    "left" : "getObjectSlot",
    "right" : "getObjectSlot",
    "info" : "SimpleName[57466-57479]:SimpleName[57782-57795]"
  }, {
    "left" : "String slotName",
    "right" : "String slotName",
    "info" : "SingleVariableDeclaration[57480-57495]:SingleVariableDeclaration[57796-57811]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57497-57775]:Block[57813-58091]"
  }, {
    "left" : "Var ownerVar = scope.getVar(slotName);",
    "right" : "Var ownerVar = scope.getVar(slotName);",
    "info" : "VariableDeclarationStatement[57505-57543]:VariableDeclarationStatement[57821-57859]"
  }, {
    "left" : "if (ownerVar != null)",
    "right" : "if (ownerVar != null)",
    "info" : "IfStatement[57550-57750]:IfStatement[57866-58066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57572-57750]:Block[57888-58066]"
  }, {
    "left" : "JSType ownerVarType = ownerVar.getType();",
    "right" : "JSType ownerVarType = ownerVar.getType();",
    "info" : "VariableDeclarationStatement[57582-57623]:VariableDeclarationStatement[57898-57939]"
  }, {
    "left" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
    "right" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
    "info" : "ReturnStatement[57632-57742]:ReturnStatement[57948-58058]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[57757-57769]:ReturnStatement[58073-58085]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[57912-57916]:PrimitiveType[58228-58232]"
  }, {
    "left" : "resolveStubDeclarations",
    "right" : "resolveStubDeclarations",
    "info" : "SimpleName[57917-57940]:SimpleName[58233-58256]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57943-59094]:Block[58259-59410]"
  }, {
    "left" : "for (StubDeclaration stub : stubDeclarations)",
    "right" : "for (StubDeclaration stub : stubDeclarations)",
    "info" : "EnhancedForStatement[57951-59088]:EnhancedForStatement[58267-59404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57997-59088]:Block[58313-59404]"
  }, {
    "left" : "Node n = stub.node;",
    "right" : "Node n = stub.node;",
    "info" : "VariableDeclarationStatement[58007-58026]:VariableDeclarationStatement[58323-58342]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[58035-58063]:VariableDeclarationStatement[58351-58379]"
  }, {
    "left" : "String qName = n.getQualifiedName();",
    "right" : "String qName = n.getQualifiedName();",
    "info" : "VariableDeclarationStatement[58072-58108]:VariableDeclarationStatement[58388-58424]"
  }, {
    "left" : "String propName = n.getLastChild().getString();",
    "right" : "String propName = n.getLastChild().getString();",
    "info" : "VariableDeclarationStatement[58117-58164]:VariableDeclarationStatement[58433-58480]"
  }, {
    "left" : "String ownerName = stub.ownerName;",
    "right" : "String ownerName = stub.ownerName;",
    "info" : "VariableDeclarationStatement[58173-58207]:VariableDeclarationStatement[58489-58523]"
  }, {
    "left" : "boolean isExtern = stub.isExtern;",
    "right" : "boolean isExtern = stub.isExtern;",
    "info" : "VariableDeclarationStatement[58216-58249]:VariableDeclarationStatement[58532-58565]"
  }, {
    "left" : "if (scope.isDeclared(qName, false))",
    "right" : "if (scope.isDeclared(qName, false))",
    "info" : "IfStatement[58259-58326]:IfStatement[58575-58642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58295-58326]:Block[58611-58642]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[58307-58316]:ContinueStatement[58623-58632]"
  }, {
    "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
    "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
    "info" : "VariableDeclarationStatement[58443-58491]:VariableDeclarationStatement[58759-58807]"
  }, {
    "left" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
    "right" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
    "info" : "VariableDeclarationStatement[58500-58572]:VariableDeclarationStatement[58816-58888]"
  }, {
    "left" : "defineSlot(n, parent, unknownType, true);",
    "right" : "defineSlot(n, parent, unknownType, true);",
    "info" : "ExpressionStatement[58581-58622]:ExpressionStatement[58897-58938]"
  }, {
    "left" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
    "right" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
    "info" : "IfStatement[58632-59080]:IfStatement[58948-59396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58720-58946]:Block[59036-59262]"
  }, {
    "left" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
    "right" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
    "info" : "ExpressionStatement[58862-58936]:ExpressionStatement[59178-59252]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58952-59080]:Block[59268-59396]"
  }, {
    "left" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
    "right" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
    "info" : "ExpressionStatement[58964-59070]:ExpressionStatement[59280-59386]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[59226-59233]:Modifier[59542-59549]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[59234-59239]:Modifier[59550-59555]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[59240-59245]:TYPE_DECLARATION_KIND[59556-59561]"
  }, {
    "left" : "CollectProperties",
    "right" : "CollectProperties",
    "info" : "SimpleName[59363-59380]:SimpleName[59679-59696]"
  }, {
    "left" : "ObjectType thisType",
    "right" : "ObjectType thisType",
    "info" : "SingleVariableDeclaration[59381-59400]:SingleVariableDeclaration[59697-59716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59402-59445]:Block[59718-59761]"
  }, {
    "left" : "this.thisType = thisType;",
    "right" : "this.thisType = thisType;",
    "info" : "ExpressionStatement[59412-59437]:ExpressionStatement[59728-59753]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[59453-59462]:MarkerAnnotation[59769-59778]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[59469-59475]:Modifier[59785-59791]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[59476-59480]:PrimitiveType[59792-59796]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[59481-59486]:SimpleName[59797-59802]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[59487-59502]:SingleVariableDeclaration[59803-59818]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[59504-59510]:SingleVariableDeclaration[59820-59826]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[59512-59523]:SingleVariableDeclaration[59828-59839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59525-59952]:Block[59841-60268]"
  }, {
    "left" : "if (n.getType() == Token.EXPR_RESULT)",
    "right" : "if (n.getType() == Token.EXPR_RESULT)",
    "info" : "IfStatement[59535-59944]:IfStatement[59851-60260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59573-59944]:Block[59889-60260]"
  }, {
    "left" : "Node child = n.getFirstChild();",
    "right" : "Node child = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[59585-59616]:VariableDeclarationStatement[59901-59932]"
  }, {
    "left" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child, null);\n              break;\n          }",
    "right" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child, null);\n              break;\n          }",
    "info" : "SwitchStatement[59627-59934]:SwitchStatement[59943-60250]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[59666-59684]:SwitchCase[59982-60000]"
  }, {
    "left" : "maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());",
    "right" : "maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());",
    "info" : "ExpressionStatement[59699-59791]:ExpressionStatement[60015-60107]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59806-59812]:BreakStatement[60122-60128]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[59825-59844]:SwitchCase[60141-60160]"
  }, {
    "left" : "maybeCollectMember(t, child, child, null);",
    "right" : "maybeCollectMember(t, child, child, null);",
    "info" : "ExpressionStatement[59859-59901]:ExpressionStatement[60175-60217]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59916-59922]:BreakStatement[60232-60238]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[59960-59967]:Modifier[60276-60283]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[59968-59972]:PrimitiveType[60284-60288]"
  }, {
    "left" : "maybeCollectMember",
    "right" : "maybeCollectMember",
    "info" : "SimpleName[59973-59991]:SimpleName[60289-60307]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[59992-60007]:SingleVariableDeclaration[60308-60323]"
  }, {
    "left" : "Node member",
    "right" : "Node member",
    "info" : "SingleVariableDeclaration[60019-60030]:SingleVariableDeclaration[60335-60346]"
  }, {
    "left" : "Node nodeWithJsDocInfo",
    "right" : "Node nodeWithJsDocInfo",
    "info" : "SingleVariableDeclaration[60032-60054]:SingleVariableDeclaration[60348-60370]"
  }, {
    "left" : "@Nullable Node value",
    "right" : "@Nullable Node value",
    "info" : "SingleVariableDeclaration[60056-60076]:SingleVariableDeclaration[60372-60392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60078-60917]:Block[60394-61233]"
  }, {
    "left" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
    "right" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[60088-60138]:VariableDeclarationStatement[60404-60454]"
  }, {
    "left" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
    "right" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
    "info" : "IfStatement[60334-60492]:IfStatement[60650-60808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60463-60492]:Block[60779-60808]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[60475-60482]:ReturnStatement[60791-60798]"
  }, {
    "left" : "member.getFirstChild().setJSType(thisType);",
    "right" : "member.getFirstChild().setJSType(thisType);",
    "info" : "ExpressionStatement[60502-60545]:ExpressionStatement[60818-60861]"
  }, {
    "left" : "JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);",
    "right" : "JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);",
    "info" : "VariableDeclarationStatement[60554-60626]:VariableDeclarationStatement[60870-60942]"
  }, {
    "left" : "Node name = member.getLastChild();",
    "right" : "Node name = member.getLastChild();",
    "info" : "VariableDeclarationStatement[60635-60669]:VariableDeclarationStatement[60951-60985]"
  }, {
    "left" : "if (jsType != null &&\n            (name.getType() == Token.NAME || name.getType() == Token.STRING))",
    "right" : "if (jsType != null &&\n            (name.getType() == Token.NAME || name.getType() == Token.STRING))",
    "info" : "IfStatement[60678-60909]:IfStatement[60994-61225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60778-60909]:Block[61094-61225]"
  }, {
    "left" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
    "right" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
    "info" : "ExpressionStatement[60790-60899]:ExpressionStatement[61106-61215]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61022-61029]:Modifier[61338-61345]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[61030-61036]:Modifier[61346-61352]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[61037-61042]:Modifier[61353-61358]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[61043-61048]:TYPE_DECLARATION_KIND[61359-61364]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61173-61180]:Modifier[61489-61496]"
  }, {
    "left" : "StubDeclaration",
    "right" : "StubDeclaration",
    "info" : "SimpleName[61181-61196]:SimpleName[61497-61512]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[61197-61206]:SingleVariableDeclaration[61513-61522]"
  }, {
    "left" : "boolean isExtern",
    "right" : "boolean isExtern",
    "info" : "SingleVariableDeclaration[61208-61224]:SingleVariableDeclaration[61524-61540]"
  }, {
    "left" : "String ownerName",
    "right" : "String ownerName",
    "info" : "SingleVariableDeclaration[61226-61242]:SingleVariableDeclaration[61542-61558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61244-61341]:Block[61560-61657]"
  }, {
    "left" : "this.node = node;",
    "right" : "this.node = node;",
    "info" : "ExpressionStatement[61252-61269]:ExpressionStatement[61568-61585]"
  }, {
    "left" : "this.isExtern = isExtern;",
    "right" : "this.isExtern = isExtern;",
    "info" : "ExpressionStatement[61276-61301]:ExpressionStatement[61592-61617]"
  }, {
    "left" : "this.ownerName = ownerName;",
    "right" : "this.ownerName = ownerName;",
    "info" : "ExpressionStatement[61308-61335]:ExpressionStatement[61624-61651]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61460-61467]:Modifier[61776-61783]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[61468-61473]:Modifier[61784-61789]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[61474-61479]:TYPE_DECLARATION_KIND[61790-61795]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61535-61542]:Modifier[61851-61858]"
  }, {
    "left" : "GlobalScopeBuilder",
    "right" : "GlobalScopeBuilder",
    "info" : "SimpleName[61543-61561]:SimpleName[61859-61877]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[61562-61573]:SingleVariableDeclaration[61878-61889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61575-61602]:Block[61891-61918]"
  }, {
    "left" : "super(scope);",
    "right" : "super(scope);",
    "info" : "SuperConstructorInvocation[61583-61596]:SuperConstructorInvocation[61899-61912]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[61852-61861]:MarkerAnnotation[62168-62177]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[61862-61868]:Modifier[62178-62184]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[61869-61873]:PrimitiveType[62185-62189]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[61874-61879]:SimpleName[62190-62195]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[61880-61895]:SingleVariableDeclaration[62196-62211]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[61897-61903]:SingleVariableDeclaration[62213-62219]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[61905-61916]:SingleVariableDeclaration[62221-62232]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61918-62182]:Block[62234-62498]"
  }, {
    "left" : "super.visit(t, n, parent);",
    "right" : "super.visit(t, n, parent);",
    "info" : "ExpressionStatement[61926-61952]:ExpressionStatement[62242-62268]"
  }, {
    "left" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
    "right" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
    "info" : "SwitchStatement[61960-62176]:SwitchStatement[62276-62492]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[61992-62007]:SwitchCase[62308-62323]"
  }, {
    "left" : "if (n.hasOneChild())",
    "right" : "if (n.hasOneChild())",
    "info" : "IfStatement[62048-62151]:IfStatement[62364-62467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62069-62151]:Block[62385-62467]"
  }, {
    "left" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
    "right" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
    "info" : "ExpressionStatement[62083-62139]:ExpressionStatement[62399-62455]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[62162-62168]:BreakStatement[62478-62484]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[62188-62197]:MarkerAnnotation[62504-62513]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[62202-62206]:PrimitiveType[62518-62522]"
  }, {
    "left" : "maybeDeclareQualifiedName",
    "right" : "maybeDeclareQualifiedName",
    "info" : "SimpleName[62207-62232]:SimpleName[62523-62548]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[62242-62257]:SingleVariableDeclaration[62558-62573]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[62259-62273]:SingleVariableDeclaration[62575-62589]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[62283-62289]:SingleVariableDeclaration[62599-62605]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[62291-62302]:SingleVariableDeclaration[62607-62618]"
  }, {
    "left" : "Node rhsValue",
    "right" : "Node rhsValue",
    "info" : "SingleVariableDeclaration[62304-62317]:SingleVariableDeclaration[62620-62633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62319-62430]:Block[62635-62746]"
  }, {
    "left" : "checkForTypedef(t, n, info);",
    "right" : "checkForTypedef(t, n, info);",
    "info" : "ExpressionStatement[62327-62355]:ExpressionStatement[62643-62671]"
  }, {
    "left" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
    "right" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
    "info" : "ExpressionStatement[62362-62424]:ExpressionStatement[62678-62740]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[62597-62604]:Modifier[62913-62920]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[62605-62609]:PrimitiveType[62921-62925]"
  }, {
    "left" : "checkForTypedef",
    "right" : "checkForTypedef",
    "info" : "SimpleName[62610-62625]:SimpleName[62926-62941]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[62635-62650]:SingleVariableDeclaration[62951-62966]"
  }, {
    "left" : "Node candidate",
    "right" : "Node candidate",
    "info" : "SingleVariableDeclaration[62652-62666]:SingleVariableDeclaration[62968-62982]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[62668-62682]:SingleVariableDeclaration[62984-62998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62684-63571]:Block[63000-63887]"
  }, {
    "left" : "if (info == null || !info.hasTypedefType())",
    "right" : "if (info == null || !info.hasTypedefType())",
    "info" : "IfStatement[62692-62761]:IfStatement[63008-63077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62736-62761]:Block[63052-63077]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[62746-62753]:ReturnStatement[63062-63069]"
  }, {
    "left" : "String typedef = candidate.getQualifiedName();",
    "right" : "String typedef = candidate.getQualifiedName();",
    "info" : "VariableDeclarationStatement[62769-62815]:VariableDeclarationStatement[63085-63131]"
  }, {
    "left" : "if (typedef == null)",
    "right" : "if (typedef == null)",
    "info" : "IfStatement[62822-62868]:IfStatement[63138-63184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62843-62868]:Block[63159-63184]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[62853-62860]:ReturnStatement[63169-63176]"
  }, {
    "left" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
    "right" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
    "info" : "ExpressionStatement[63042-63105]:ExpressionStatement[63358-63421]"
  }, {
    "left" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
    "right" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
    "info" : "VariableDeclarationStatement[63113-63183]:VariableDeclarationStatement[63429-63499]"
  }, {
    "left" : "if (realType == null)",
    "right" : "if (realType == null)",
    "info" : "IfStatement[63190-63348]:IfStatement[63506-63664]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63212-63348]:Block[63528-63664]"
  }, {
    "left" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
    "right" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
    "info" : "ExpressionStatement[63222-63340]:ExpressionStatement[63538-63656]"
  }, {
    "left" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
    "right" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
    "info" : "ExpressionStatement[63356-63410]:ExpressionStatement[63672-63726]"
  }, {
    "left" : "if (candidate.getType() == Token.GETPROP)",
    "right" : "if (candidate.getType() == Token.GETPROP)",
    "info" : "IfStatement[63417-63565]:IfStatement[63733-63881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63459-63565]:Block[63775-63881]"
  }, {
    "left" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
    "right" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
    "info" : "ExpressionStatement[63469-63557]:ExpressionStatement[63785-63873]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[63707-63714]:Modifier[64023-64030]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[63715-63720]:Modifier[64031-64036]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[63721-63726]:TYPE_DECLARATION_KIND[64037-64042]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[63847-63854]:Modifier[64163-64170]"
  }, {
    "left" : "LocalScopeBuilder",
    "right" : "LocalScopeBuilder",
    "info" : "SimpleName[63855-63872]:SimpleName[64171-64188]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[63873-63884]:SingleVariableDeclaration[64189-64200]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63886-63913]:Block[64202-64229]"
  }, {
    "left" : "super(scope);",
    "right" : "super(scope);",
    "info" : "SuperConstructorInvocation[63894-63907]:SuperConstructorInvocation[64210-64223]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[63980-63984]:PrimitiveType[64296-64300]"
  }, {
    "left" : "build",
    "right" : "build",
    "info" : "SimpleName[63985-63990]:SimpleName[64301-64306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63993-64067]:Block[64309-64383]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
    "right" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
    "info" : "ExpressionStatement[64001-64061]:ExpressionStatement[64317-64377]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[64331-64340]:MarkerAnnotation[64647-64656]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[64341-64347]:Modifier[64657-64663]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[64348-64352]:PrimitiveType[64664-64668]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[64353-64358]:SimpleName[64669-64674]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[64359-64374]:SingleVariableDeclaration[64675-64690]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[64376-64382]:SingleVariableDeclaration[64692-64698]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[64384-64395]:SingleVariableDeclaration[64700-64711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64397-64615]:Block[64713-64931]"
  }, {
    "left" : "if (n == scope.getRootNode())",
    "right" : "if (n == scope.getRootNode())",
    "info" : "IfStatement[64405-64442]:IfStatement[64721-64758]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[64435-64442]:ReturnStatement[64751-64758]"
  }, {
    "left" : "if (n.getType() == Token.LP && parent == scope.getRootNode())",
    "right" : "if (n.getType() == Token.LP && parent == scope.getRootNode())",
    "info" : "IfStatement[64450-64575]:IfStatement[64766-64891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64512-64575]:Block[64828-64891]"
  }, {
    "left" : "handleFunctionInputs(parent);",
    "right" : "handleFunctionInputs(parent);",
    "info" : "ExpressionStatement[64522-64551]:ExpressionStatement[64838-64867]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[64560-64567]:ReturnStatement[64876-64883]"
  }, {
    "left" : "super.visit(t, n, parent);",
    "right" : "super.visit(t, n, parent);",
    "info" : "ExpressionStatement[64583-64609]:ExpressionStatement[64899-64925]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[64683-64690]:Modifier[64999-65006]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[64691-64695]:PrimitiveType[65007-65011]"
  }, {
    "left" : "handleFunctionInputs",
    "right" : "handleFunctionInputs",
    "info" : "SimpleName[64696-64716]:SimpleName[65012-65032]"
  }, {
    "left" : "Node fnNode",
    "right" : "Node fnNode",
    "info" : "SingleVariableDeclaration[64717-64728]:SingleVariableDeclaration[65033-65044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64730-65486]:Block[65046-65802]"
  }, {
    "left" : "Node fnNameNode = fnNode.getFirstChild();",
    "right" : "Node fnNameNode = fnNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[64774-64815]:VariableDeclarationStatement[65090-65131]"
  }, {
    "left" : "String fnName = fnNameNode.getString();",
    "right" : "String fnName = fnNameNode.getString();",
    "info" : "VariableDeclarationStatement[64822-64861]:VariableDeclarationStatement[65138-65177]"
  }, {
    "left" : "if (!fnName.isEmpty())",
    "right" : "if (!fnName.isEmpty())",
    "info" : "IfStatement[64868-65447]:IfStatement[65184-65763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64891-65447]:Block[65207-65763]"
  }, {
    "left" : "Scope.Var fnVar = scope.getVar(fnName);",
    "right" : "Scope.Var fnVar = scope.getVar(fnName);",
    "info" : "VariableDeclarationStatement[64901-64940]:VariableDeclarationStatement[65217-65256]"
  }, {
    "left" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
    "right" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
    "info" : "IfStatement[64949-65439]:IfStatement[65265-65755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65359-65439]:Block[65675-65755]"
  }, {
    "left" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
    "right" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
    "info" : "ExpressionStatement[65371-65429]:ExpressionStatement[65687-65745]"
  }, {
    "left" : "declareArguments(fnNode);",
    "right" : "declareArguments(fnNode);",
    "info" : "ExpressionStatement[65455-65480]:ExpressionStatement[65771-65796]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[65555-65562]:Modifier[65871-65878]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[65563-65567]:PrimitiveType[65879-65883]"
  }, {
    "left" : "declareArguments",
    "right" : "declareArguments",
    "info" : "SimpleName[65568-65584]:SimpleName[65884-65900]"
  }, {
    "left" : "Node functionNode",
    "right" : "Node functionNode",
    "info" : "SingleVariableDeclaration[65585-65602]:SingleVariableDeclaration[65901-65918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65604-66422]:Block[65920-66738]"
  }, {
    "left" : "Node astParameters = functionNode.getFirstChild().getNext();",
    "right" : "Node astParameters = functionNode.getFirstChild().getNext();",
    "info" : "VariableDeclarationStatement[65612-65672]:VariableDeclarationStatement[65928-65988]"
  }, {
    "left" : "Node body = astParameters.getNext();",
    "right" : "Node body = astParameters.getNext();",
    "info" : "VariableDeclarationStatement[65679-65715]:VariableDeclarationStatement[65995-66031]"
  }, {
    "left" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
    "right" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
    "info" : "VariableDeclarationStatement[65722-65813]:VariableDeclarationStatement[66038-66129]"
  }, {
    "left" : "if (functionType != null)",
    "right" : "if (functionType != null)",
    "info" : "IfStatement[65820-66416]:IfStatement[66136-66732]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65846-66416]:Block[66162-66732]"
  }, {
    "left" : "Node jsDocParameters = functionType.getParametersNode();",
    "right" : "Node jsDocParameters = functionType.getParametersNode();",
    "info" : "VariableDeclarationStatement[65856-65912]:VariableDeclarationStatement[66172-66228]"
  }, {
    "left" : "if (jsDocParameters != null)",
    "right" : "if (jsDocParameters != null)",
    "info" : "IfStatement[65921-66408]:IfStatement[66237-66724]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65950-66408]:Block[66266-66724]"
  }, {
    "left" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
    "right" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
    "info" : "VariableDeclarationStatement[65962-66016]:VariableDeclarationStatement[66278-66332]"
  }, {
    "left" : "for (Node astParameter : astParameters.children())",
    "right" : "for (Node astParameter : astParameters.children())",
    "info" : "EnhancedForStatement[66027-66398]:EnhancedForStatement[66343-66714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66078-66398]:Block[66394-66714]"
  }, {
    "left" : "if (jsDocParameter != null)",
    "right" : "if (jsDocParameter != null)",
    "info" : "IfStatement[66092-66386]:IfStatement[66408-66702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66120-66299]:Block[66436-66615]"
  }, {
    "left" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), false);",
    "right" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), false);",
    "info" : "ExpressionStatement[66136-66228]:ExpressionStatement[66452-66544]"
  }, {
    "left" : "jsDocParameter = jsDocParameter.getNext();",
    "right" : "jsDocParameter = jsDocParameter.getNext();",
    "info" : "ExpressionStatement[66243-66285]:ExpressionStatement[66559-66601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66305-66386]:Block[66621-66702]"
  }, {
    "left" : "defineSlot(astParameter, functionNode, null, true);",
    "right" : "defineSlot(astParameter, functionNode, null, true);",
    "info" : "ExpressionStatement[66321-66372]:ExpressionStatement[66637-66688]"
  } ]
}