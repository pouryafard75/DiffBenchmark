{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PlayApplicationPlugin",
      "right" : "PlayApplicationPlugin",
      "info" : "TypeDeclaration[3234-24732]:TypeDeclaration[3234-23887]"
    }, {
      "left" : "public static final int DEFAULT_HTTP_PORT = 9000;",
      "right" : "public static final int DEFAULT_HTTP_PORT = 9000;",
      "info" : "FieldDeclaration[3474-3523]:FieldDeclaration[3474-3523]"
    }, {
      "left" : "public static final String RUN_GROUP = \"Run\";",
      "right" : "public static final String RUN_GROUP = \"Run\";",
      "info" : "FieldDeclaration[3528-3573]:FieldDeclaration[3528-3573]"
    }, {
      "left" : "private final ModelRegistry modelRegistry;",
      "right" : "private final ModelRegistry modelRegistry;",
      "info" : "FieldDeclaration[3578-3620]:FieldDeclaration[3578-3620]"
    }, {
      "left" : "public PlayApplicationPlugin(ModelRegistry modelRegistry)",
      "right" : "public PlayApplicationPlugin(ModelRegistry modelRegistry)",
      "info" : "MethodDeclaration[3626-3747]:MethodDeclaration[3626-3747]"
    }, {
      "left" : "public void apply(Project project)",
      "right" : "public void apply(Project project)",
      "info" : "MethodDeclaration[3753-4222]:MethodDeclaration[3753-4222]"
    }, {
      "left" : "Rules",
      "right" : "Rules",
      "info" : "TypeDeclaration[4228-24730]:TypeDeclaration[4228-23885]"
    }, {
      "left" : "PlayPluginConfigurations configurations(ExtensionContainer extensions)",
      "right" : "PlayPluginConfigurations configurations(ExtensionContainer extensions)",
      "info" : "MethodDeclaration[4319-4489]:MethodDeclaration[4319-4489]"
    }, {
      "left" : "PlayToolChainInternal playToolChain(ServiceRegistry serviceRegistry)",
      "right" : "PlayToolChainInternal playToolChain(ServiceRegistry serviceRegistry)",
      "info" : "MethodDeclaration[4499-4663]:MethodDeclaration[4499-4663]"
    }, {
      "left" : "FileResolver fileResolver(ServiceRegistry serviceRegistry)",
      "right" : "FileResolver fileResolver(ServiceRegistry serviceRegistry)",
      "info" : "MethodDeclaration[4673-4818]:MethodDeclaration[4673-4818]"
    }, {
      "left" : "void register(ComponentTypeBuilder<PlayApplicationSpec> builder)",
      "right" : "void register(ComponentTypeBuilder<PlayApplicationSpec> builder)",
      "info" : "MethodDeclaration[4828-5004]:MethodDeclaration[4828-5004]"
    }, {
      "left" : "public void registerPlatformResolver(PlatformResolvers platformResolvers)",
      "right" : "public void registerPlatformResolver(PlatformResolvers platformResolvers)",
      "info" : "MethodDeclaration[5014-5183]:MethodDeclaration[5014-5183]"
    }, {
      "left" : "void createDefaultPlayApp(ModelMap<PlayApplicationSpec> builder)",
      "right" : "void createDefaultPlayApp(ModelMap<PlayApplicationSpec> builder)",
      "info" : "MethodDeclaration[5193-5321]:MethodDeclaration[5193-5321]"
    }, {
      "left" : "void registerApplication(BinaryTypeBuilder<PlayApplicationBinarySpec> builder)",
      "right" : "void registerApplication(BinaryTypeBuilder<PlayApplicationBinarySpec> builder)",
      "info" : "MethodDeclaration[5331-5524]:MethodDeclaration[5331-5524]"
    }, {
      "left" : "void registerTwirlLanguageType(LanguageTypeBuilder<TwirlSourceSet> builder)",
      "right" : "void registerTwirlLanguageType(LanguageTypeBuilder<TwirlSourceSet> builder)",
      "info" : "MethodDeclaration[5534-5761]:MethodDeclaration[5534-5761]"
    }, {
      "left" : "void registerRoutesLanguageType(LanguageTypeBuilder<RoutesSourceSet> builder)",
      "right" : "void registerRoutesLanguageType(LanguageTypeBuilder<RoutesSourceSet> builder)",
      "info" : "MethodDeclaration[5771-6002]:MethodDeclaration[5771-6002]"
    }, {
      "left" : "void failOnMultiplePlayComponents(ModelMap<PlayApplicationSpec> container)",
      "right" : "void failOnMultiplePlayComponents(ModelMap<PlayApplicationSpec> container)",
      "info" : "MethodDeclaration[6012-6286]:MethodDeclaration[6012-6286]"
    }, {
      "left" : "void failOnMultipleTargetPlatforms(ModelMap<PlayApplicationSpec> playApplications)",
      "right" : "void failOnMultipleTargetPlatforms(ModelMap<PlayApplicationSpec> playApplications)",
      "info" : "MethodDeclaration[6296-6948]:MethodDeclaration[6296-6948]"
    }, {
      "left" : "public void execute(PlayApplicationSpec playApplication)",
      "right" : "public void execute(PlayApplicationSpec playApplication)",
      "info" : "MethodDeclaration[6490-6922]:MethodDeclaration[6490-6922]"
    }, {
      "left" : "void failIfInjectedRouterIsUsedwithOldVersion(ModelMap<Task> tasks)",
      "right" : "void failIfInjectedRouterIsUsedwithOldVersion(ModelMap<Task> tasks)",
      "info" : "MethodDeclaration[6958-7825]:MethodDeclaration[6958-7825]"
    }, {
      "left" : "public void execute(RoutesCompile task)",
      "right" : "public void execute(RoutesCompile task)",
      "info" : "MethodDeclaration[7150-7799]:MethodDeclaration[7150-7799]"
    }, {
      "left" : "void createBinaries(ModelMap<PlayApplicationBinarySpec> binaries, final PlayApplicationSpec componentSpec,\n                            final PlatformResolvers platforms, final PlayToolChainInternal playToolChainInternal, final PlayPluginConfigurations configurations, final ServiceRegistry serviceRegistry,\n                            @Path(\"buildDir\") final File buildDir, final ProjectIdentifier projectIdentifier)",
      "right" : "void createBinaries(ModelMap<PlayApplicationBinarySpec> binaries, final PlayApplicationSpec componentSpec,\n                            final PlatformResolvers platforms, final PlayToolChainInternal playToolChainInternal, final PlayPluginConfigurations configurations, final ServiceRegistry serviceRegistry,\n                            @Path(\"buildDir\") final File buildDir, final ProjectIdentifier projectIdentifier)",
      "info" : "MethodDeclaration[7835-10897]:MethodDeclaration[7835-10897]"
    }, {
      "left" : "public void execute(PlayApplicationBinarySpec playBinary)",
      "right" : "public void execute(PlayApplicationBinarySpec playBinary)",
      "info" : "MethodDeclaration[8645-10871]:MethodDeclaration[8645-10871]"
    }, {
      "left" : "private PlayPlatform resolveTargetPlatform(PlayApplicationSpec componentSpec, final PlatformResolvers platforms)",
      "right" : "private PlayPlatform resolveTargetPlatform(PlayApplicationSpec componentSpec, final PlatformResolvers platforms)",
      "info" : "MethodDeclaration[10907-11218]:MethodDeclaration[10907-11218]"
    }, {
      "left" : "private PlatformRequirement getTargetPlatform(PlayApplicationSpecInternal playApplicationSpec)",
      "right" : "private PlatformRequirement getTargetPlatform(PlayApplicationSpecInternal playApplicationSpec)",
      "info" : "MethodDeclaration[11228-11678]:MethodDeclaration[11228-11678]"
    }, {
      "left" : "private void initialiseConfigurations(PlayPluginConfigurations configurations, PlayPlatform playPlatform)",
      "right" : "private void initialiseConfigurations(PlayPluginConfigurations configurations, PlayPlatform playPlatform)",
      "info" : "MethodDeclaration[11688-12263]:MethodDeclaration[11688-12263]"
    }, {
      "left" : "private void addRunSupportDependencies(PlayPluginConfigurations configurations, PlayPlatform playPlatform)",
      "right" : "private void addRunSupportDependencies(PlayPluginConfigurations configurations, PlayPlatform playPlatform)",
      "info" : "MethodDeclaration[12273-12932]:MethodDeclaration[12273-12932]"
    }, {
      "left" : "void createGeneratedScalaSourceSets(ModelMap<PlayApplicationBinarySpec> binaries, final ServiceRegistry serviceRegistry)",
      "right" : "void createGeneratedScalaSourceSets(ModelMap<PlayApplicationBinarySpec> binaries, final ServiceRegistry serviceRegistry)",
      "info" : "MethodDeclaration[12942-13291]:MethodDeclaration[12942-13291]"
    }, {
      "left" : "void createGeneratedScalaSourceSetsForType(final Class<? extends LanguageSourceSet> languageSourceSetType, ModelMap<PlayApplicationBinarySpec> binaries, ServiceRegistry serviceRegistry)",
      "right" : "void createGeneratedScalaSourceSetsForType(final Class<? extends LanguageSourceSet> languageSourceSetType, ModelMap<PlayApplicationBinarySpec> binaries, ServiceRegistry serviceRegistry)",
      "info" : "MethodDeclaration[13301-14466]:MethodDeclaration[13301-14466]"
    }, {
      "left" : "public void execute(PlayApplicationBinarySpec playApplicationBinarySpec)",
      "right" : "public void execute(PlayApplicationBinarySpec playApplicationBinarySpec)",
      "info" : "MethodDeclaration[13746-14440]:MethodDeclaration[13746-14440]"
    }, {
      "left" : "void createTwirlCompileTasks(ModelMap<Task> tasks, final PlayApplicationBinarySpec binary, ServiceRegistry serviceRegistry, @Path(\"buildDir\") final File buildDir)",
      "right" : "void createTwirlCompileTasks(ModelMap<Task> tasks, final PlayApplicationBinarySpec binary, ServiceRegistry serviceRegistry, @Path(\"buildDir\") final File buildDir)",
      "info" : "MethodDeclaration[14476-15944]:MethodDeclaration[14476-15944]"
    }, {
      "left" : "public void execute(TwirlCompile twirlCompile)",
      "right" : "public void execute(TwirlCompile twirlCompile)",
      "info" : "MethodDeclaration[15182-15900]:MethodDeclaration[15182-15900]"
    }, {
      "left" : "void createRoutesCompileTasks(ModelMap<Task> tasks, final PlayApplicationBinarySpec binary, ServiceRegistry serviceRegistry, @Path(\"buildDir\") final File buildDir)",
      "right" : "void createRoutesCompileTasks(ModelMap<Task> tasks, final PlayApplicationBinarySpec binary, ServiceRegistry serviceRegistry, @Path(\"buildDir\") final File buildDir)",
      "info" : "MethodDeclaration[15954-17638]:MethodDeclaration[15954-17638]"
    }, {
      "left" : "public void execute(RoutesCompile routesCompile)",
      "right" : "public void execute(RoutesCompile routesCompile)",
      "info" : "MethodDeclaration[16672-17594]:MethodDeclaration[16672-17594]"
    }, {
      "left" : "void createScalaCompileTask(ModelMap<Task> tasks, final PlayApplicationBinarySpec binary, @Path(\"buildDir\") final File buildDir)",
      "right" : "void createScalaCompileTask(ModelMap<Task> tasks, final PlayApplicationBinarySpec binary, @Path(\"buildDir\") final File buildDir)",
      "info" : "MethodDeclaration[17648-20072]:MethodDeclaration[17648-20072]"
    }, {
      "left" : "public void execute(PlatformScalaCompile scalaCompile)",
      "right" : "public void execute(PlatformScalaCompile scalaCompile)",
      "info" : "MethodDeclaration[18057-20046]:MethodDeclaration[18057-20046]"
    }, {
      "left" : "void createJarTasks(ModelMap<Task> tasks, final PlayApplicationBinarySpec binary)",
      "right" : "void createJarTasks(ModelMap<Task> tasks, final PlayApplicationBinarySpec binary)",
      "info" : "MethodDeclaration[20082-21752]:MethodDeclaration[20082-21752]"
    }, {
      "left" : "public void execute(Jar jar)",
      "right" : "public void execute(Jar jar)",
      "info" : "MethodDeclaration[20377-20884]:MethodDeclaration[20377-20884]"
    }, {
      "left" : "public void execute(Jar jar)",
      "right" : "public void execute(Jar jar)",
      "info" : "MethodDeclaration[21110-21726]:MethodDeclaration[21110-21726]"
    }, {
      "left" : "void createPlayRunTask(ModelMap<Task> tasks, BinaryContainer binaryContainer, final ServiceRegistry serviceRegistry, final PlayPluginConfigurations configurations, ProjectIdentifier projectIdentifier, final PlayToolChainInternal playToolChain)",
      "right" : "void createPlayRunTask(ModelMap<Task> tasks, BinaryContainer binaryContainer, final ServiceRegistry serviceRegistry, final PlayPluginConfigurations configurations, ProjectIdentifier projectIdentifier, final PlayToolChainInternal playToolChain)",
      "info" : "MethodDeclaration[21762-23959]:MethodDeclaration[21762-23665]"
    }, {
      "left" : "public void execute(PlayRun playRun)",
      "right" : "public void execute(PlayRun playRun)",
      "info" : "MethodDeclaration[22963-23915]:MethodDeclaration[22365-23621]"
    }, {
      "left" : "private File srcOutputDirectory(File buildDir, PlayApplicationBinarySpec binary, String taskName)",
      "right" : "private File srcOutputDirectory(File buildDir, PlayApplicationBinarySpec binary, String taskName)",
      "info" : "MethodDeclaration[24520-24724]:MethodDeclaration[23675-23879]"
    } ],
    "mappings" : [
 {
      "left" : "@Incubating",
      "right" : "@Incubating",
      "info" : "MarkerAnnotation[3394-3405]:MarkerAnnotation[3394-3405]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3406-3412]:Modifier[3406-3412]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3413-3418]:TYPE_DECLARATION_KIND[3413-3418]"
    }, {
      "left" : "PlayApplicationPlugin",
      "right" : "PlayApplicationPlugin",
      "info" : "SimpleName[3419-3440]:SimpleName[3419-3440]"
    }, {
      "left" : "@Inject",
      "right" : "@Inject",
      "info" : "MarkerAnnotation[3626-3633]:MarkerAnnotation[3626-3633]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3638-3644]:Modifier[3638-3644]"
    }, {
      "left" : "PlayApplicationPlugin",
      "right" : "PlayApplicationPlugin",
      "info" : "SimpleName[3645-3666]:SimpleName[3645-3666]"
    }, {
      "left" : "ModelRegistry modelRegistry",
      "right" : "ModelRegistry modelRegistry",
      "info" : "SingleVariableDeclaration[3667-3694]:SingleVariableDeclaration[3667-3694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3696-3747]:Block[3696-3747]"
    }, {
      "left" : "this.modelRegistry = modelRegistry;",
      "right" : "this.modelRegistry = modelRegistry;",
      "info" : "ExpressionStatement[3706-3741]:ExpressionStatement[3706-3741]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3753-3762]:MarkerAnnotation[3753-3762]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3767-3773]:Modifier[3767-3773]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3774-3778]:PrimitiveType[3774-3778]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[3779-3784]:SimpleName[3779-3784]"
    }, {
      "left" : "Project project",
      "right" : "Project project",
      "info" : "SingleVariableDeclaration[3785-3800]:SingleVariableDeclaration[3785-3800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3802-4222]:Block[3802-4222]"
    }, {
      "left" : "project.getPluginManager().apply(JavaLanguagePlugin.class);",
      "right" : "project.getPluginManager().apply(JavaLanguagePlugin.class);",
      "info" : "ExpressionStatement[3812-3871]:ExpressionStatement[3812-3871]"
    }, {
      "left" : "project.getPluginManager().apply(ScalaLanguagePlugin.class);",
      "right" : "project.getPluginManager().apply(ScalaLanguagePlugin.class);",
      "info" : "ExpressionStatement[3880-3940]:ExpressionStatement[3880-3940]"
    }, {
      "left" : "project.getExtensions().create(\"playConfigurations\", PlayPluginConfigurations.class, project.getConfigurations(), project.getDependencies());",
      "right" : "project.getExtensions().create(\"playConfigurations\", PlayPluginConfigurations.class, project.getConfigurations(), project.getDependencies());",
      "info" : "ExpressionStatement[3949-4090]:ExpressionStatement[3949-4090]"
    }, {
      "left" : "modelRegistry.getRoot().applyToAllLinksTransitive(ModelType.of(PlayApplicationSpec.class), PlaySourceSetRules.class);",
      "right" : "modelRegistry.getRoot().applyToAllLinksTransitive(ModelType.of(PlayApplicationSpec.class), PlaySourceSetRules.class);",
      "info" : "ExpressionStatement[4099-4216]:ExpressionStatement[4099-4216]"
    }, {
      "left" : "@SuppressWarnings(\"UnusedDeclaration\")",
      "right" : "@SuppressWarnings(\"UnusedDeclaration\")",
      "info" : "SingleMemberAnnotation[4228-4266]:SingleMemberAnnotation[4228-4266]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4271-4277]:Modifier[4271-4277]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4278-4283]:TYPE_DECLARATION_KIND[4278-4283]"
    }, {
      "left" : "Rules",
      "right" : "Rules",
      "info" : "SimpleName[4284-4289]:SimpleName[4284-4289]"
    }, {
      "left" : "RuleSource",
      "right" : "RuleSource",
      "info" : "SimpleType[4298-4308]:SimpleType[4298-4308]"
    }, {
      "left" : "@Model",
      "right" : "@Model",
      "info" : "MarkerAnnotation[4319-4325]:MarkerAnnotation[4319-4325]"
    }, {
      "left" : "PlayPluginConfigurations",
      "right" : "PlayPluginConfigurations",
      "info" : "SimpleType[4334-4358]:SimpleType[4334-4358]"
    }, {
      "left" : "configurations",
      "right" : "configurations",
      "info" : "SimpleName[4359-4373]:SimpleName[4359-4373]"
    }, {
      "left" : "ExtensionContainer extensions",
      "right" : "ExtensionContainer extensions",
      "info" : "SingleVariableDeclaration[4374-4403]:SingleVariableDeclaration[4374-4403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4405-4489]:Block[4405-4489]"
    }, {
      "left" : "return extensions.getByType(PlayPluginConfigurations.class);",
      "right" : "return extensions.getByType(PlayPluginConfigurations.class);",
      "info" : "ReturnStatement[4419-4479]:ReturnStatement[4419-4479]"
    }, {
      "left" : "@Model",
      "right" : "@Model",
      "info" : "MarkerAnnotation[4499-4505]:MarkerAnnotation[4499-4505]"
    }, {
      "left" : "PlayToolChainInternal",
      "right" : "PlayToolChainInternal",
      "info" : "SimpleType[4514-4535]:SimpleType[4514-4535]"
    }, {
      "left" : "playToolChain",
      "right" : "playToolChain",
      "info" : "SimpleName[4536-4549]:SimpleName[4536-4549]"
    }, {
      "left" : "ServiceRegistry serviceRegistry",
      "right" : "ServiceRegistry serviceRegistry",
      "info" : "SingleVariableDeclaration[4550-4581]:SingleVariableDeclaration[4550-4581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4583-4663]:Block[4583-4663]"
    }, {
      "left" : "return serviceRegistry.get(PlayToolChainInternal.class);",
      "right" : "return serviceRegistry.get(PlayToolChainInternal.class);",
      "info" : "ReturnStatement[4597-4653]:ReturnStatement[4597-4653]"
    }, {
      "left" : "@Model",
      "right" : "@Model",
      "info" : "MarkerAnnotation[4673-4679]:MarkerAnnotation[4673-4679]"
    }, {
      "left" : "FileResolver",
      "right" : "FileResolver",
      "info" : "SimpleType[4688-4700]:SimpleType[4688-4700]"
    }, {
      "left" : "fileResolver",
      "right" : "fileResolver",
      "info" : "SimpleName[4701-4713]:SimpleName[4701-4713]"
    }, {
      "left" : "ServiceRegistry serviceRegistry",
      "right" : "ServiceRegistry serviceRegistry",
      "info" : "SingleVariableDeclaration[4714-4745]:SingleVariableDeclaration[4714-4745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4747-4818]:Block[4747-4818]"
    }, {
      "left" : "return serviceRegistry.get(FileResolver.class);",
      "right" : "return serviceRegistry.get(FileResolver.class);",
      "info" : "ReturnStatement[4761-4808]:ReturnStatement[4761-4808]"
    }, {
      "left" : "@ComponentType",
      "right" : "@ComponentType",
      "info" : "MarkerAnnotation[4828-4842]:MarkerAnnotation[4828-4842]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4851-4855]:PrimitiveType[4851-4855]"
    }, {
      "left" : "register",
      "right" : "register",
      "info" : "SimpleName[4856-4864]:SimpleName[4856-4864]"
    }, {
      "left" : "ComponentTypeBuilder<PlayApplicationSpec> builder",
      "right" : "ComponentTypeBuilder<PlayApplicationSpec> builder",
      "info" : "SingleVariableDeclaration[4865-4914]:SingleVariableDeclaration[4865-4914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4916-5004]:Block[4916-5004]"
    }, {
      "left" : "builder.defaultImplementation(DefaultPlayApplicationSpec.class);",
      "right" : "builder.defaultImplementation(DefaultPlayApplicationSpec.class);",
      "info" : "ExpressionStatement[4930-4994]:ExpressionStatement[4930-4994]"
    }, {
      "left" : "@Mutate",
      "right" : "@Mutate",
      "info" : "MarkerAnnotation[5014-5021]:MarkerAnnotation[5014-5021]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5030-5036]:Modifier[5030-5036]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5037-5041]:PrimitiveType[5037-5041]"
    }, {
      "left" : "registerPlatformResolver",
      "right" : "registerPlatformResolver",
      "info" : "SimpleName[5042-5066]:SimpleName[5042-5066]"
    }, {
      "left" : "PlatformResolvers platformResolvers",
      "right" : "PlatformResolvers platformResolvers",
      "info" : "SingleVariableDeclaration[5067-5102]:SingleVariableDeclaration[5067-5102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5104-5183]:Block[5104-5183]"
    }, {
      "left" : "platformResolvers.register(new PlayPlatformResolver());",
      "right" : "platformResolvers.register(new PlayPlatformResolver());",
      "info" : "ExpressionStatement[5118-5173]:ExpressionStatement[5118-5173]"
    }, {
      "left" : "@Mutate",
      "right" : "@Mutate",
      "info" : "MarkerAnnotation[5193-5200]:MarkerAnnotation[5193-5200]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5209-5213]:PrimitiveType[5209-5213]"
    }, {
      "left" : "createDefaultPlayApp",
      "right" : "createDefaultPlayApp",
      "info" : "SimpleName[5214-5234]:SimpleName[5214-5234]"
    }, {
      "left" : "ModelMap<PlayApplicationSpec> builder",
      "right" : "ModelMap<PlayApplicationSpec> builder",
      "info" : "SingleVariableDeclaration[5235-5272]:SingleVariableDeclaration[5235-5272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5274-5321]:Block[5274-5321]"
    }, {
      "left" : "builder.create(\"play\");",
      "right" : "builder.create(\"play\");",
      "info" : "ExpressionStatement[5288-5311]:ExpressionStatement[5288-5311]"
    }, {
      "left" : "@BinaryType",
      "right" : "@BinaryType",
      "info" : "MarkerAnnotation[5331-5342]:MarkerAnnotation[5331-5342]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5351-5355]:PrimitiveType[5351-5355]"
    }, {
      "left" : "registerApplication",
      "right" : "registerApplication",
      "info" : "SimpleName[5356-5375]:SimpleName[5356-5375]"
    }, {
      "left" : "BinaryTypeBuilder<PlayApplicationBinarySpec> builder",
      "right" : "BinaryTypeBuilder<PlayApplicationBinarySpec> builder",
      "info" : "SingleVariableDeclaration[5376-5428]:SingleVariableDeclaration[5376-5428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5430-5524]:Block[5430-5524]"
    }, {
      "left" : "builder.defaultImplementation(DefaultPlayApplicationBinarySpec.class);",
      "right" : "builder.defaultImplementation(DefaultPlayApplicationBinarySpec.class);",
      "info" : "ExpressionStatement[5444-5514]:ExpressionStatement[5444-5514]"
    }, {
      "left" : "@LanguageType",
      "right" : "@LanguageType",
      "info" : "MarkerAnnotation[5534-5547]:MarkerAnnotation[5534-5547]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5556-5560]:PrimitiveType[5556-5560]"
    }, {
      "left" : "registerTwirlLanguageType",
      "right" : "registerTwirlLanguageType",
      "info" : "SimpleName[5561-5586]:SimpleName[5561-5586]"
    }, {
      "left" : "LanguageTypeBuilder<TwirlSourceSet> builder",
      "right" : "LanguageTypeBuilder<TwirlSourceSet> builder",
      "info" : "SingleVariableDeclaration[5587-5630]:SingleVariableDeclaration[5587-5630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5632-5761]:Block[5632-5761]"
    }, {
      "left" : "builder.setLanguageName(\"twirl\");",
      "right" : "builder.setLanguageName(\"twirl\");",
      "info" : "ExpressionStatement[5646-5679]:ExpressionStatement[5646-5679]"
    }, {
      "left" : "builder.defaultImplementation(DefaultTwirlSourceSet.class);",
      "right" : "builder.defaultImplementation(DefaultTwirlSourceSet.class);",
      "info" : "ExpressionStatement[5692-5751]:ExpressionStatement[5692-5751]"
    }, {
      "left" : "@LanguageType",
      "right" : "@LanguageType",
      "info" : "MarkerAnnotation[5771-5784]:MarkerAnnotation[5771-5784]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5793-5797]:PrimitiveType[5793-5797]"
    }, {
      "left" : "registerRoutesLanguageType",
      "right" : "registerRoutesLanguageType",
      "info" : "SimpleName[5798-5824]:SimpleName[5798-5824]"
    }, {
      "left" : "LanguageTypeBuilder<RoutesSourceSet> builder",
      "right" : "LanguageTypeBuilder<RoutesSourceSet> builder",
      "info" : "SingleVariableDeclaration[5825-5869]:SingleVariableDeclaration[5825-5869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5871-6002]:Block[5871-6002]"
    }, {
      "left" : "builder.setLanguageName(\"routes\");",
      "right" : "builder.setLanguageName(\"routes\");",
      "info" : "ExpressionStatement[5885-5919]:ExpressionStatement[5885-5919]"
    }, {
      "left" : "builder.defaultImplementation(DefaultRoutesSourceSet.class);",
      "right" : "builder.defaultImplementation(DefaultRoutesSourceSet.class);",
      "info" : "ExpressionStatement[5932-5992]:ExpressionStatement[5932-5992]"
    }, {
      "left" : "@Validate",
      "right" : "@Validate",
      "info" : "MarkerAnnotation[6012-6021]:MarkerAnnotation[6012-6021]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6030-6034]:PrimitiveType[6030-6034]"
    }, {
      "left" : "failOnMultiplePlayComponents",
      "right" : "failOnMultiplePlayComponents",
      "info" : "SimpleName[6035-6063]:SimpleName[6035-6063]"
    }, {
      "left" : "ModelMap<PlayApplicationSpec> container",
      "right" : "ModelMap<PlayApplicationSpec> container",
      "info" : "SingleVariableDeclaration[6064-6103]:SingleVariableDeclaration[6064-6103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6105-6286]:Block[6105-6286]"
    }, {
      "left" : "if (container.size() >= 2)",
      "right" : "if (container.size() >= 2)",
      "info" : "IfStatement[6119-6276]:IfStatement[6119-6276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6146-6276]:Block[6146-6276]"
    }, {
      "left" : "throw new GradleException(\"Multiple components of type 'PlayApplicationSpec' are not supported.\");",
      "right" : "throw new GradleException(\"Multiple components of type 'PlayApplicationSpec' are not supported.\");",
      "info" : "ThrowStatement[6164-6262]:ThrowStatement[6164-6262]"
    }, {
      "left" : "@Validate",
      "right" : "@Validate",
      "info" : "MarkerAnnotation[6296-6305]:MarkerAnnotation[6296-6305]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6314-6318]:PrimitiveType[6314-6318]"
    }, {
      "left" : "failOnMultipleTargetPlatforms",
      "right" : "failOnMultipleTargetPlatforms",
      "info" : "SimpleName[6319-6348]:SimpleName[6319-6348]"
    }, {
      "left" : "ModelMap<PlayApplicationSpec> playApplications",
      "right" : "ModelMap<PlayApplicationSpec> playApplications",
      "info" : "SingleVariableDeclaration[6349-6395]:SingleVariableDeclaration[6349-6395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6397-6948]:Block[6397-6948]"
    }, {
      "left" : "playApplications.afterEach(new Action<PlayApplicationSpec>() {\n                public void execute(PlayApplicationSpec playApplication) {\n                    PlayApplicationSpecInternal playApplicationInternal = (PlayApplicationSpecInternal) playApplication;\n                    if (playApplicationInternal.getTargetPlatforms().size() > 1) {\n                        throw new GradleException(\"Multiple target platforms for 'PlayApplicationSpec' is not (yet) supported.\");\n                    }\n                }\n            });",
      "right" : "playApplications.afterEach(new Action<PlayApplicationSpec>() {\n                public void execute(PlayApplicationSpec playApplication) {\n                    PlayApplicationSpecInternal playApplicationInternal = (PlayApplicationSpecInternal) playApplication;\n                    if (playApplicationInternal.getTargetPlatforms().size() > 1) {\n                        throw new GradleException(\"Multiple target platforms for 'PlayApplicationSpec' is not (yet) supported.\");\n                    }\n                }\n            });",
      "info" : "ExpressionStatement[6411-6938]:ExpressionStatement[6411-6938]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6490-6496]:Modifier[6490-6496]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6497-6501]:PrimitiveType[6497-6501]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[6502-6509]:SimpleName[6502-6509]"
    }, {
      "left" : "PlayApplicationSpec playApplication",
      "right" : "PlayApplicationSpec playApplication",
      "info" : "SingleVariableDeclaration[6510-6545]:SingleVariableDeclaration[6510-6545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6547-6922]:Block[6547-6922]"
    }, {
      "left" : "PlayApplicationSpecInternal playApplicationInternal = (PlayApplicationSpecInternal) playApplication;",
      "right" : "PlayApplicationSpecInternal playApplicationInternal = (PlayApplicationSpecInternal) playApplication;",
      "info" : "VariableDeclarationStatement[6569-6669]:VariableDeclarationStatement[6569-6669]"
    }, {
      "left" : "if (playApplicationInternal.getTargetPlatforms().size() > 1)",
      "right" : "if (playApplicationInternal.getTargetPlatforms().size() > 1)",
      "info" : "IfStatement[6690-6904]:IfStatement[6690-6904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6751-6904]:Block[6751-6904]"
    }, {
      "left" : "throw new GradleException(\"Multiple target platforms for 'PlayApplicationSpec' is not (yet) supported.\");",
      "right" : "throw new GradleException(\"Multiple target platforms for 'PlayApplicationSpec' is not (yet) supported.\");",
      "info" : "ThrowStatement[6777-6882]:ThrowStatement[6777-6882]"
    }, {
      "left" : "@Validate",
      "right" : "@Validate",
      "info" : "MarkerAnnotation[6958-6967]:MarkerAnnotation[6958-6967]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6976-6980]:PrimitiveType[6976-6980]"
    }, {
      "left" : "failIfInjectedRouterIsUsedwithOldVersion",
      "right" : "failIfInjectedRouterIsUsedwithOldVersion",
      "info" : "SimpleName[6981-7021]:SimpleName[6981-7021]"
    }, {
      "left" : "ModelMap<Task> tasks",
      "right" : "ModelMap<Task> tasks",
      "info" : "SingleVariableDeclaration[7022-7042]:SingleVariableDeclaration[7022-7042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7044-7825]:Block[7044-7825]"
    }, {
      "left" : "tasks.withType(RoutesCompile.class).afterEach(new Action<RoutesCompile>() {\n                @Override\n                public void execute(RoutesCompile task) {\n                    PlayPlatform playPlatform = task.getPlatform();\n                    if (!task.getStaticRoutesGenerator()) {\n                        VersionNumber minSupportedVersion = VersionNumber.parse(\"2.4.0\");\n                        VersionNumber playVersion = VersionNumber.parse(playPlatform.getPlayVersion());\n                        if (playVersion.compareTo(minSupportedVersion) < 0) {\n                            throw new GradleException(\"Injected routers are only supported in Play 2.4 or newer.\");\n                        }\n                    }\n                }\n            });",
      "right" : "tasks.withType(RoutesCompile.class).afterEach(new Action<RoutesCompile>() {\n                @Override\n                public void execute(RoutesCompile task) {\n                    PlayPlatform playPlatform = task.getPlatform();\n                    if (!task.getStaticRoutesGenerator()) {\n                        VersionNumber minSupportedVersion = VersionNumber.parse(\"2.4.0\");\n                        VersionNumber playVersion = VersionNumber.parse(playPlatform.getPlayVersion());\n                        if (playVersion.compareTo(minSupportedVersion) < 0) {\n                            throw new GradleException(\"Injected routers are only supported in Play 2.4 or newer.\");\n                        }\n                    }\n                }\n            });",
      "info" : "ExpressionStatement[7058-7815]:ExpressionStatement[7058-7815]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7150-7159]:MarkerAnnotation[7150-7159]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7176-7182]:Modifier[7176-7182]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7183-7187]:PrimitiveType[7183-7187]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[7188-7195]:SimpleName[7188-7195]"
    }, {
      "left" : "RoutesCompile task",
      "right" : "RoutesCompile task",
      "info" : "SingleVariableDeclaration[7196-7214]:SingleVariableDeclaration[7196-7214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7216-7799]:Block[7216-7799]"
    }, {
      "left" : "PlayPlatform playPlatform = task.getPlatform();",
      "right" : "PlayPlatform playPlatform = task.getPlatform();",
      "info" : "VariableDeclarationStatement[7238-7285]:VariableDeclarationStatement[7238-7285]"
    }, {
      "left" : "if (!task.getStaticRoutesGenerator())",
      "right" : "if (!task.getStaticRoutesGenerator())",
      "info" : "IfStatement[7306-7781]:IfStatement[7306-7781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7344-7781]:Block[7344-7781]"
    }, {
      "left" : "VersionNumber minSupportedVersion = VersionNumber.parse(\"2.4.0\");",
      "right" : "VersionNumber minSupportedVersion = VersionNumber.parse(\"2.4.0\");",
      "info" : "VariableDeclarationStatement[7370-7435]:VariableDeclarationStatement[7370-7435]"
    }, {
      "left" : "VersionNumber playVersion = VersionNumber.parse(playPlatform.getPlayVersion());",
      "right" : "VersionNumber playVersion = VersionNumber.parse(playPlatform.getPlayVersion());",
      "info" : "VariableDeclarationStatement[7460-7539]:VariableDeclarationStatement[7460-7539]"
    }, {
      "left" : "if (playVersion.compareTo(minSupportedVersion) < 0)",
      "right" : "if (playVersion.compareTo(minSupportedVersion) < 0)",
      "info" : "IfStatement[7564-7759]:IfStatement[7564-7759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7616-7759]:Block[7616-7759]"
    }, {
      "left" : "throw new GradleException(\"Injected routers are only supported in Play 2.4 or newer.\");",
      "right" : "throw new GradleException(\"Injected routers are only supported in Play 2.4 or newer.\");",
      "info" : "ThrowStatement[7646-7733]:ThrowStatement[7646-7733]"
    }, {
      "left" : "@ComponentBinaries",
      "right" : "@ComponentBinaries",
      "info" : "MarkerAnnotation[7835-7853]:MarkerAnnotation[7835-7853]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7862-7866]:PrimitiveType[7862-7866]"
    }, {
      "left" : "createBinaries",
      "right" : "createBinaries",
      "info" : "SimpleName[7867-7881]:SimpleName[7867-7881]"
    }, {
      "left" : "ModelMap<PlayApplicationBinarySpec> binaries",
      "right" : "ModelMap<PlayApplicationBinarySpec> binaries",
      "info" : "SingleVariableDeclaration[7882-7926]:SingleVariableDeclaration[7882-7926]"
    }, {
      "left" : "final PlayApplicationSpec componentSpec",
      "right" : "final PlayApplicationSpec componentSpec",
      "info" : "SingleVariableDeclaration[7928-7967]:SingleVariableDeclaration[7928-7967]"
    }, {
      "left" : "final PlatformResolvers platforms",
      "right" : "final PlatformResolvers platforms",
      "info" : "SingleVariableDeclaration[7997-8030]:SingleVariableDeclaration[7997-8030]"
    }, {
      "left" : "final PlayToolChainInternal playToolChainInternal",
      "right" : "final PlayToolChainInternal playToolChainInternal",
      "info" : "SingleVariableDeclaration[8032-8081]:SingleVariableDeclaration[8032-8081]"
    }, {
      "left" : "final PlayPluginConfigurations configurations",
      "right" : "final PlayPluginConfigurations configurations",
      "info" : "SingleVariableDeclaration[8083-8128]:SingleVariableDeclaration[8083-8128]"
    }, {
      "left" : "final ServiceRegistry serviceRegistry",
      "right" : "final ServiceRegistry serviceRegistry",
      "info" : "SingleVariableDeclaration[8130-8167]:SingleVariableDeclaration[8130-8167]"
    }, {
      "left" : "@Path(\"buildDir\") final File buildDir",
      "right" : "@Path(\"buildDir\") final File buildDir",
      "info" : "SingleVariableDeclaration[8197-8234]:SingleVariableDeclaration[8197-8234]"
    }, {
      "left" : "final ProjectIdentifier projectIdentifier",
      "right" : "final ProjectIdentifier projectIdentifier",
      "info" : "SingleVariableDeclaration[8236-8277]:SingleVariableDeclaration[8236-8277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8279-10897]:Block[8279-10897]"
    }, {
      "left" : "final FileResolver fileResolver = serviceRegistry.get(FileResolver.class);",
      "right" : "final FileResolver fileResolver = serviceRegistry.get(FileResolver.class);",
      "info" : "VariableDeclarationStatement[8294-8368]:VariableDeclarationStatement[8294-8368]"
    }, {
      "left" : "final Instantiator instantiator = serviceRegistry.get(Instantiator.class);",
      "right" : "final Instantiator instantiator = serviceRegistry.get(Instantiator.class);",
      "info" : "VariableDeclarationStatement[8381-8455]:VariableDeclarationStatement[8381-8455]"
    }, {
      "left" : "final String binaryName = String.format(\"%sBinary\", componentSpec.getName());",
      "right" : "final String binaryName = String.format(\"%sBinary\", componentSpec.getName());",
      "info" : "VariableDeclarationStatement[8468-8545]:VariableDeclarationStatement[8468-8545]"
    }, {
      "left" : "binaries.create(binaryName, new Action<PlayApplicationBinarySpec>() {\n                public void execute(PlayApplicationBinarySpec playBinary) {\n                    PlayApplicationBinarySpecInternal playBinaryInternal = (PlayApplicationBinarySpecInternal) playBinary;\n                    playBinaryInternal.setApplication(componentSpec);\n                    final File binaryBuildDir = new File(buildDir, binaryName);\n\n                    final PlayPlatform chosenPlatform = resolveTargetPlatform(componentSpec, platforms);\n                    initialiseConfigurations(configurations, chosenPlatform);\n\n                    playBinaryInternal.setTargetPlatform(chosenPlatform);\n                    playBinaryInternal.setToolChain(playToolChainInternal);\n\n                    File mainJar = new File(binaryBuildDir, String.format(\"lib/%s.jar\", projectIdentifier.getName()));\n                    File assetsJar = new File(binaryBuildDir, String.format(\"lib/%s-assets.jar\", projectIdentifier.getName()));\n                    playBinaryInternal.setJarFile(mainJar);\n                    playBinaryInternal.setAssetsJarFile(assetsJar);\n\n                    configurations.getPlay().addArtifact(new DefaultPublishArtifact(projectIdentifier.getName(), \"jar\", \"jar\", null, new Date(), mainJar, playBinaryInternal));\n                    configurations.getPlay().addArtifact(new DefaultPublishArtifact(projectIdentifier.getName(), \"jar\", \"jar\", \"assets\", new Date(), assetsJar, playBinaryInternal));\n\n                    JvmClasses classes = playBinary.getClasses();\n                    classes.setClassesDir(new File(binaryBuildDir, \"classes\"));\n\n                    ModelMap<JvmResourceSet> jvmResourceSets = componentSpec.getSources().withType(JvmResourceSet.class);\n                    for (JvmResourceSet jvmResourceSet : jvmResourceSets.values()) {\n                        for (File resourceDir : jvmResourceSet.getSource()) {\n                            classes.addResourceDir(resourceDir);\n                        }\n                    }\n\n                    PublicAssets assets = playBinary.getAssets();\n                    assets.addAssetDir(new File(projectIdentifier.getProjectDir(), \"public\"));\n\n                    playBinaryInternal.setClasspath(configurations.getPlay().getAllArtifacts());\n                }\n            });",
      "right" : "binaries.create(binaryName, new Action<PlayApplicationBinarySpec>() {\n                public void execute(PlayApplicationBinarySpec playBinary) {\n                    PlayApplicationBinarySpecInternal playBinaryInternal = (PlayApplicationBinarySpecInternal) playBinary;\n                    playBinaryInternal.setApplication(componentSpec);\n                    final File binaryBuildDir = new File(buildDir, binaryName);\n\n                    final PlayPlatform chosenPlatform = resolveTargetPlatform(componentSpec, platforms);\n                    initialiseConfigurations(configurations, chosenPlatform);\n\n                    playBinaryInternal.setTargetPlatform(chosenPlatform);\n                    playBinaryInternal.setToolChain(playToolChainInternal);\n\n                    File mainJar = new File(binaryBuildDir, String.format(\"lib/%s.jar\", projectIdentifier.getName()));\n                    File assetsJar = new File(binaryBuildDir, String.format(\"lib/%s-assets.jar\", projectIdentifier.getName()));\n                    playBinaryInternal.setJarFile(mainJar);\n                    playBinaryInternal.setAssetsJarFile(assetsJar);\n\n                    configurations.getPlay().addArtifact(new DefaultPublishArtifact(projectIdentifier.getName(), \"jar\", \"jar\", null, new Date(), mainJar, playBinaryInternal));\n                    configurations.getPlay().addArtifact(new DefaultPublishArtifact(projectIdentifier.getName(), \"jar\", \"jar\", \"assets\", new Date(), assetsJar, playBinaryInternal));\n\n                    JvmClasses classes = playBinary.getClasses();\n                    classes.setClassesDir(new File(binaryBuildDir, \"classes\"));\n\n                    ModelMap<JvmResourceSet> jvmResourceSets = componentSpec.getSources().withType(JvmResourceSet.class);\n                    for (JvmResourceSet jvmResourceSet : jvmResourceSets.values()) {\n                        for (File resourceDir : jvmResourceSet.getSource()) {\n                            classes.addResourceDir(resourceDir);\n                        }\n                    }\n\n                    PublicAssets assets = playBinary.getAssets();\n                    assets.addAssetDir(new File(projectIdentifier.getProjectDir(), \"public\"));\n\n                    playBinaryInternal.setClasspath(configurations.getPlay().getAllArtifacts());\n                }\n            });",
      "info" : "ExpressionStatement[8559-10887]:ExpressionStatement[8559-10887]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8645-8651]:Modifier[8645-8651]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8652-8656]:PrimitiveType[8652-8656]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[8657-8664]:SimpleName[8657-8664]"
    }, {
      "left" : "PlayApplicationBinarySpec playBinary",
      "right" : "PlayApplicationBinarySpec playBinary",
      "info" : "SingleVariableDeclaration[8665-8701]:SingleVariableDeclaration[8665-8701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8703-10871]:Block[8703-10871]"
    }, {
      "left" : "PlayApplicationBinarySpecInternal playBinaryInternal = (PlayApplicationBinarySpecInternal) playBinary;",
      "right" : "PlayApplicationBinarySpecInternal playBinaryInternal = (PlayApplicationBinarySpecInternal) playBinary;",
      "info" : "VariableDeclarationStatement[8725-8827]:VariableDeclarationStatement[8725-8827]"
    }, {
      "left" : "playBinaryInternal.setApplication(componentSpec);",
      "right" : "playBinaryInternal.setApplication(componentSpec);",
      "info" : "ExpressionStatement[8848-8897]:ExpressionStatement[8848-8897]"
    }, {
      "left" : "final File binaryBuildDir = new File(buildDir, binaryName);",
      "right" : "final File binaryBuildDir = new File(buildDir, binaryName);",
      "info" : "VariableDeclarationStatement[8918-8977]:VariableDeclarationStatement[8918-8977]"
    }, {
      "left" : "final PlayPlatform chosenPlatform = resolveTargetPlatform(componentSpec, platforms);",
      "right" : "final PlayPlatform chosenPlatform = resolveTargetPlatform(componentSpec, platforms);",
      "info" : "VariableDeclarationStatement[8999-9083]:VariableDeclarationStatement[8999-9083]"
    }, {
      "left" : "initialiseConfigurations(configurations, chosenPlatform);",
      "right" : "initialiseConfigurations(configurations, chosenPlatform);",
      "info" : "ExpressionStatement[9104-9161]:ExpressionStatement[9104-9161]"
    }, {
      "left" : "playBinaryInternal.setTargetPlatform(chosenPlatform);",
      "right" : "playBinaryInternal.setTargetPlatform(chosenPlatform);",
      "info" : "ExpressionStatement[9183-9236]:ExpressionStatement[9183-9236]"
    }, {
      "left" : "playBinaryInternal.setToolChain(playToolChainInternal);",
      "right" : "playBinaryInternal.setToolChain(playToolChainInternal);",
      "info" : "ExpressionStatement[9257-9312]:ExpressionStatement[9257-9312]"
    }, {
      "left" : "File mainJar = new File(binaryBuildDir, String.format(\"lib/%s.jar\", projectIdentifier.getName()));",
      "right" : "File mainJar = new File(binaryBuildDir, String.format(\"lib/%s.jar\", projectIdentifier.getName()));",
      "info" : "VariableDeclarationStatement[9334-9432]:VariableDeclarationStatement[9334-9432]"
    }, {
      "left" : "File assetsJar = new File(binaryBuildDir, String.format(\"lib/%s-assets.jar\", projectIdentifier.getName()));",
      "right" : "File assetsJar = new File(binaryBuildDir, String.format(\"lib/%s-assets.jar\", projectIdentifier.getName()));",
      "info" : "VariableDeclarationStatement[9453-9560]:VariableDeclarationStatement[9453-9560]"
    }, {
      "left" : "playBinaryInternal.setJarFile(mainJar);",
      "right" : "playBinaryInternal.setJarFile(mainJar);",
      "info" : "ExpressionStatement[9581-9620]:ExpressionStatement[9581-9620]"
    }, {
      "left" : "playBinaryInternal.setAssetsJarFile(assetsJar);",
      "right" : "playBinaryInternal.setAssetsJarFile(assetsJar);",
      "info" : "ExpressionStatement[9641-9688]:ExpressionStatement[9641-9688]"
    }, {
      "left" : "configurations.getPlay().addArtifact(new DefaultPublishArtifact(projectIdentifier.getName(), \"jar\", \"jar\", null, new Date(), mainJar, playBinaryInternal));",
      "right" : "configurations.getPlay().addArtifact(new DefaultPublishArtifact(projectIdentifier.getName(), \"jar\", \"jar\", null, new Date(), mainJar, playBinaryInternal));",
      "info" : "ExpressionStatement[9710-9865]:ExpressionStatement[9710-9865]"
    }, {
      "left" : "configurations.getPlay().addArtifact(new DefaultPublishArtifact(projectIdentifier.getName(), \"jar\", \"jar\", \"assets\", new Date(), assetsJar, playBinaryInternal));",
      "right" : "configurations.getPlay().addArtifact(new DefaultPublishArtifact(projectIdentifier.getName(), \"jar\", \"jar\", \"assets\", new Date(), assetsJar, playBinaryInternal));",
      "info" : "ExpressionStatement[9886-10047]:ExpressionStatement[9886-10047]"
    }, {
      "left" : "JvmClasses classes = playBinary.getClasses();",
      "right" : "JvmClasses classes = playBinary.getClasses();",
      "info" : "VariableDeclarationStatement[10069-10114]:VariableDeclarationStatement[10069-10114]"
    }, {
      "left" : "classes.setClassesDir(new File(binaryBuildDir, \"classes\"));",
      "right" : "classes.setClassesDir(new File(binaryBuildDir, \"classes\"));",
      "info" : "ExpressionStatement[10135-10194]:ExpressionStatement[10135-10194]"
    }, {
      "left" : "ModelMap<JvmResourceSet> jvmResourceSets = componentSpec.getSources().withType(JvmResourceSet.class);",
      "right" : "ModelMap<JvmResourceSet> jvmResourceSets = componentSpec.getSources().withType(JvmResourceSet.class);",
      "info" : "VariableDeclarationStatement[10216-10317]:VariableDeclarationStatement[10216-10317]"
    }, {
      "left" : "for (JvmResourceSet jvmResourceSet : jvmResourceSets.values())",
      "right" : "for (JvmResourceSet jvmResourceSet : jvmResourceSets.values())",
      "info" : "EnhancedForStatement[10338-10593]:EnhancedForStatement[10338-10593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10401-10593]:Block[10401-10593]"
    }, {
      "left" : "for (File resourceDir : jvmResourceSet.getSource())",
      "right" : "for (File resourceDir : jvmResourceSet.getSource())",
      "info" : "EnhancedForStatement[10427-10571]:EnhancedForStatement[10427-10571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10479-10571]:Block[10479-10571]"
    }, {
      "left" : "classes.addResourceDir(resourceDir);",
      "right" : "classes.addResourceDir(resourceDir);",
      "info" : "ExpressionStatement[10509-10545]:ExpressionStatement[10509-10545]"
    }, {
      "left" : "PublicAssets assets = playBinary.getAssets();",
      "right" : "PublicAssets assets = playBinary.getAssets();",
      "info" : "VariableDeclarationStatement[10615-10660]:VariableDeclarationStatement[10615-10660]"
    }, {
      "left" : "assets.addAssetDir(new File(projectIdentifier.getProjectDir(), \"public\"));",
      "right" : "assets.addAssetDir(new File(projectIdentifier.getProjectDir(), \"public\"));",
      "info" : "ExpressionStatement[10681-10755]:ExpressionStatement[10681-10755]"
    }, {
      "left" : "playBinaryInternal.setClasspath(configurations.getPlay().getAllArtifacts());",
      "right" : "playBinaryInternal.setClasspath(configurations.getPlay().getAllArtifacts());",
      "info" : "ExpressionStatement[10777-10853]:ExpressionStatement[10777-10853]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10907-10914]:Modifier[10907-10914]"
    }, {
      "left" : "PlayPlatform",
      "right" : "PlayPlatform",
      "info" : "SimpleType[10915-10927]:SimpleType[10915-10927]"
    }, {
      "left" : "resolveTargetPlatform",
      "right" : "resolveTargetPlatform",
      "info" : "SimpleName[10928-10949]:SimpleName[10928-10949]"
    }, {
      "left" : "PlayApplicationSpec componentSpec",
      "right" : "PlayApplicationSpec componentSpec",
      "info" : "SingleVariableDeclaration[10950-10983]:SingleVariableDeclaration[10950-10983]"
    }, {
      "left" : "final PlatformResolvers platforms",
      "right" : "final PlatformResolvers platforms",
      "info" : "SingleVariableDeclaration[10985-11018]:SingleVariableDeclaration[10985-11018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11020-11218]:Block[11020-11218]"
    }, {
      "left" : "PlatformRequirement targetPlatform = getTargetPlatform((PlayApplicationSpecInternal) componentSpec);",
      "right" : "PlatformRequirement targetPlatform = getTargetPlatform((PlayApplicationSpecInternal) componentSpec);",
      "info" : "VariableDeclarationStatement[11034-11134]:VariableDeclarationStatement[11034-11134]"
    }, {
      "left" : "return platforms.resolve(PlayPlatform.class, targetPlatform);",
      "right" : "return platforms.resolve(PlayPlatform.class, targetPlatform);",
      "info" : "ReturnStatement[11147-11208]:ReturnStatement[11147-11208]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11228-11235]:Modifier[11228-11235]"
    }, {
      "left" : "PlatformRequirement",
      "right" : "PlatformRequirement",
      "info" : "SimpleType[11236-11255]:SimpleType[11236-11255]"
    }, {
      "left" : "getTargetPlatform",
      "right" : "getTargetPlatform",
      "info" : "SimpleName[11256-11273]:SimpleName[11256-11273]"
    }, {
      "left" : "PlayApplicationSpecInternal playApplicationSpec",
      "right" : "PlayApplicationSpecInternal playApplicationSpec",
      "info" : "SingleVariableDeclaration[11274-11321]:SingleVariableDeclaration[11274-11321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11323-11678]:Block[11323-11678]"
    }, {
      "left" : "if (playApplicationSpec.getTargetPlatforms().isEmpty())",
      "right" : "if (playApplicationSpec.getTargetPlatforms().isEmpty())",
      "info" : "IfStatement[11337-11600]:IfStatement[11337-11600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11393-11600]:Block[11393-11600]"
    }, {
      "left" : "String defaultPlayPlatform = String.format(\"play-%s\", DefaultPlayPlatform.DEFAULT_PLAY_VERSION);",
      "right" : "String defaultPlayPlatform = String.format(\"play-%s\", DefaultPlayPlatform.DEFAULT_PLAY_VERSION);",
      "info" : "VariableDeclarationStatement[11411-11507]:VariableDeclarationStatement[11411-11507]"
    }, {
      "left" : "return DefaultPlatformRequirement.create(defaultPlayPlatform);",
      "right" : "return DefaultPlatformRequirement.create(defaultPlayPlatform);",
      "info" : "ReturnStatement[11524-11586]:ReturnStatement[11524-11586]"
    }, {
      "left" : "return playApplicationSpec.getTargetPlatforms().get(0);",
      "right" : "return playApplicationSpec.getTargetPlatforms().get(0);",
      "info" : "ReturnStatement[11613-11668]:ReturnStatement[11613-11668]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11688-11695]:Modifier[11688-11695]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11696-11700]:PrimitiveType[11696-11700]"
    }, {
      "left" : "initialiseConfigurations",
      "right" : "initialiseConfigurations",
      "info" : "SimpleName[11701-11725]:SimpleName[11701-11725]"
    }, {
      "left" : "PlayPluginConfigurations configurations",
      "right" : "PlayPluginConfigurations configurations",
      "info" : "SingleVariableDeclaration[11726-11765]:SingleVariableDeclaration[11726-11765]"
    }, {
      "left" : "PlayPlatform playPlatform",
      "right" : "PlayPlatform playPlatform",
      "info" : "SingleVariableDeclaration[11767-11792]:SingleVariableDeclaration[11767-11792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11794-12263]:Block[11794-12263]"
    }, {
      "left" : "configurations.getPlayPlatform().addDependency(((PlayPlatformInternal) playPlatform).getDependencyNotation(\"play\"));",
      "right" : "configurations.getPlayPlatform().addDependency(((PlayPlatformInternal) playPlatform).getDependencyNotation(\"play\"));",
      "info" : "ExpressionStatement[11808-11924]:ExpressionStatement[11808-11924]"
    }, {
      "left" : "configurations.getPlayTest().addDependency(((PlayPlatformInternal) playPlatform).getDependencyNotation(\"play-test\"));",
      "right" : "configurations.getPlayTest().addDependency(((PlayPlatformInternal) playPlatform).getDependencyNotation(\"play-test\"));",
      "info" : "ExpressionStatement[11937-12054]:ExpressionStatement[11937-12054]"
    }, {
      "left" : "configurations.getPlayRun().addDependency(((PlayPlatformInternal) playPlatform).getDependencyNotation(\"play-docs\"));",
      "right" : "configurations.getPlayRun().addDependency(((PlayPlatformInternal) playPlatform).getDependencyNotation(\"play-docs\"));",
      "info" : "ExpressionStatement[12067-12183]:ExpressionStatement[12067-12183]"
    }, {
      "left" : "addRunSupportDependencies(configurations, playPlatform);",
      "right" : "addRunSupportDependencies(configurations, playPlatform);",
      "info" : "ExpressionStatement[12197-12253]:ExpressionStatement[12197-12253]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12273-12280]:Modifier[12273-12280]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12281-12285]:PrimitiveType[12281-12285]"
    }, {
      "left" : "addRunSupportDependencies",
      "right" : "addRunSupportDependencies",
      "info" : "SimpleName[12286-12311]:SimpleName[12286-12311]"
    }, {
      "left" : "PlayPluginConfigurations configurations",
      "right" : "PlayPluginConfigurations configurations",
      "info" : "SingleVariableDeclaration[12312-12351]:SingleVariableDeclaration[12312-12351]"
    }, {
      "left" : "PlayPlatform playPlatform",
      "right" : "PlayPlatform playPlatform",
      "info" : "SingleVariableDeclaration[12353-12378]:SingleVariableDeclaration[12353-12378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12380-12932]:Block[12380-12932]"
    }, {
      "left" : "String playVersion = playPlatform.getPlayVersion();",
      "right" : "String playVersion = playPlatform.getPlayVersion();",
      "info" : "VariableDeclarationStatement[12394-12445]:VariableDeclarationStatement[12394-12445]"
    }, {
      "left" : "String scalaCompatibilityVersion = playPlatform.getScalaPlatform().getScalaCompatibilityVersion();",
      "right" : "String scalaCompatibilityVersion = playPlatform.getScalaPlatform().getScalaCompatibilityVersion();",
      "info" : "VariableDeclarationStatement[12458-12556]:VariableDeclarationStatement[12458-12556]"
    }, {
      "left" : "Iterable<Dependency> runSupportDependencies = PlayApplicationRunnerFactory.createPlayRunAdapter(playPlatform).getRunsupportClasspathDependencies(playVersion, scalaCompatibilityVersion);",
      "right" : "Iterable<Dependency> runSupportDependencies = PlayApplicationRunnerFactory.createPlayRunAdapter(playPlatform).getRunsupportClasspathDependencies(playVersion, scalaCompatibilityVersion);",
      "info" : "VariableDeclarationStatement[12569-12754]:VariableDeclarationStatement[12569-12754]"
    }, {
      "left" : "for (Dependency dependencyNotation : runSupportDependencies)",
      "right" : "for (Dependency dependencyNotation : runSupportDependencies)",
      "info" : "EnhancedForStatement[12767-12922]:EnhancedForStatement[12767-12922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12828-12922]:Block[12828-12922]"
    }, {
      "left" : "configurations.getPlayRun().addDependency(dependencyNotation);",
      "right" : "configurations.getPlayRun().addDependency(dependencyNotation);",
      "info" : "ExpressionStatement[12846-12908]:ExpressionStatement[12846-12908]"
    }, {
      "left" : "@Mutate",
      "right" : "@Mutate",
      "info" : "MarkerAnnotation[12942-12949]:MarkerAnnotation[12942-12949]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12958-12962]:PrimitiveType[12958-12962]"
    }, {
      "left" : "createGeneratedScalaSourceSets",
      "right" : "createGeneratedScalaSourceSets",
      "info" : "SimpleName[12963-12993]:SimpleName[12963-12993]"
    }, {
      "left" : "ModelMap<PlayApplicationBinarySpec> binaries",
      "right" : "ModelMap<PlayApplicationBinarySpec> binaries",
      "info" : "SingleVariableDeclaration[12994-13038]:SingleVariableDeclaration[12994-13038]"
    }, {
      "left" : "final ServiceRegistry serviceRegistry",
      "right" : "final ServiceRegistry serviceRegistry",
      "info" : "SingleVariableDeclaration[13040-13077]:SingleVariableDeclaration[13040-13077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13079-13291]:Block[13079-13291]"
    }, {
      "left" : "createGeneratedScalaSourceSetsForType(TwirlSourceSet.class, binaries, serviceRegistry);",
      "right" : "createGeneratedScalaSourceSetsForType(TwirlSourceSet.class, binaries, serviceRegistry);",
      "info" : "ExpressionStatement[13093-13180]:ExpressionStatement[13093-13180]"
    }, {
      "left" : "createGeneratedScalaSourceSetsForType(RoutesSourceSet.class, binaries, serviceRegistry);",
      "right" : "createGeneratedScalaSourceSetsForType(RoutesSourceSet.class, binaries, serviceRegistry);",
      "info" : "ExpressionStatement[13193-13281]:ExpressionStatement[13193-13281]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13301-13305]:PrimitiveType[13301-13305]"
    }, {
      "left" : "createGeneratedScalaSourceSetsForType",
      "right" : "createGeneratedScalaSourceSetsForType",
      "info" : "SimpleName[13306-13343]:SimpleName[13306-13343]"
    }, {
      "left" : "final Class<? extends LanguageSourceSet> languageSourceSetType",
      "right" : "final Class<? extends LanguageSourceSet> languageSourceSetType",
      "info" : "SingleVariableDeclaration[13344-13406]:SingleVariableDeclaration[13344-13406]"
    }, {
      "left" : "ModelMap<PlayApplicationBinarySpec> binaries",
      "right" : "ModelMap<PlayApplicationBinarySpec> binaries",
      "info" : "SingleVariableDeclaration[13408-13452]:SingleVariableDeclaration[13408-13452]"
    }, {
      "left" : "ServiceRegistry serviceRegistry",
      "right" : "ServiceRegistry serviceRegistry",
      "info" : "SingleVariableDeclaration[13454-13485]:SingleVariableDeclaration[13454-13485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13487-14466]:Block[13487-14466]"
    }, {
      "left" : "final FileResolver fileResolver = serviceRegistry.get(FileResolver.class);",
      "right" : "final FileResolver fileResolver = serviceRegistry.get(FileResolver.class);",
      "info" : "VariableDeclarationStatement[13501-13575]:VariableDeclarationStatement[13501-13575]"
    }, {
      "left" : "final Instantiator instantiator = serviceRegistry.get(Instantiator.class);",
      "right" : "final Instantiator instantiator = serviceRegistry.get(Instantiator.class);",
      "info" : "VariableDeclarationStatement[13588-13662]:VariableDeclarationStatement[13588-13662]"
    }, {
      "left" : "binaries.all(new Action<PlayApplicationBinarySpec>() {\n                @Override\n                public void execute(PlayApplicationBinarySpec playApplicationBinarySpec) {\n                    for (LanguageSourceSet languageSourceSet : playApplicationBinarySpec.getInputs().withType(languageSourceSetType)) {\n                        String name = String.format(\"%sScalaSources\", languageSourceSet.getName());\n                        ScalaLanguageSourceSet twirlScalaSources = BaseLanguageSourceSet.create(DefaultScalaLanguageSourceSet.class, name, playApplicationBinarySpec.getName(), fileResolver, instantiator);\n                        playApplicationBinarySpec.getGeneratedScala().put(languageSourceSet, twirlScalaSources);\n                    }\n                }\n            });",
      "right" : "binaries.all(new Action<PlayApplicationBinarySpec>() {\n                @Override\n                public void execute(PlayApplicationBinarySpec playApplicationBinarySpec) {\n                    for (LanguageSourceSet languageSourceSet : playApplicationBinarySpec.getInputs().withType(languageSourceSetType)) {\n                        String name = String.format(\"%sScalaSources\", languageSourceSet.getName());\n                        ScalaLanguageSourceSet twirlScalaSources = BaseLanguageSourceSet.create(DefaultScalaLanguageSourceSet.class, name, playApplicationBinarySpec.getName(), fileResolver, instantiator);\n                        playApplicationBinarySpec.getGeneratedScala().put(languageSourceSet, twirlScalaSources);\n                    }\n                }\n            });",
      "info" : "ExpressionStatement[13675-14456]:ExpressionStatement[13675-14456]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13746-13755]:MarkerAnnotation[13746-13755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13772-13778]:Modifier[13772-13778]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13779-13783]:PrimitiveType[13779-13783]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[13784-13791]:SimpleName[13784-13791]"
    }, {
      "left" : "PlayApplicationBinarySpec playApplicationBinarySpec",
      "right" : "PlayApplicationBinarySpec playApplicationBinarySpec",
      "info" : "SingleVariableDeclaration[13792-13843]:SingleVariableDeclaration[13792-13843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13845-14440]:Block[13845-14440]"
    }, {
      "left" : "for (LanguageSourceSet languageSourceSet : playApplicationBinarySpec.getInputs().withType(languageSourceSetType))",
      "right" : "for (LanguageSourceSet languageSourceSet : playApplicationBinarySpec.getInputs().withType(languageSourceSetType))",
      "info" : "EnhancedForStatement[13867-14422]:EnhancedForStatement[13867-14422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13981-14422]:Block[13981-14422]"
    }, {
      "left" : "String name = String.format(\"%sScalaSources\", languageSourceSet.getName());",
      "right" : "String name = String.format(\"%sScalaSources\", languageSourceSet.getName());",
      "info" : "VariableDeclarationStatement[14007-14082]:VariableDeclarationStatement[14007-14082]"
    }, {
      "left" : "ScalaLanguageSourceSet twirlScalaSources = BaseLanguageSourceSet.create(DefaultScalaLanguageSourceSet.class, name, playApplicationBinarySpec.getName(), fileResolver, instantiator);",
      "right" : "ScalaLanguageSourceSet twirlScalaSources = BaseLanguageSourceSet.create(DefaultScalaLanguageSourceSet.class, name, playApplicationBinarySpec.getName(), fileResolver, instantiator);",
      "info" : "VariableDeclarationStatement[14107-14287]:VariableDeclarationStatement[14107-14287]"
    }, {
      "left" : "playApplicationBinarySpec.getGeneratedScala().put(languageSourceSet, twirlScalaSources);",
      "right" : "playApplicationBinarySpec.getGeneratedScala().put(languageSourceSet, twirlScalaSources);",
      "info" : "ExpressionStatement[14312-14400]:ExpressionStatement[14312-14400]"
    }, {
      "left" : "@BinaryTasks",
      "right" : "@BinaryTasks",
      "info" : "MarkerAnnotation[14476-14488]:MarkerAnnotation[14476-14488]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14497-14501]:PrimitiveType[14497-14501]"
    }, {
      "left" : "createTwirlCompileTasks",
      "right" : "createTwirlCompileTasks",
      "info" : "SimpleName[14502-14525]:SimpleName[14502-14525]"
    }, {
      "left" : "ModelMap<Task> tasks",
      "right" : "ModelMap<Task> tasks",
      "info" : "SingleVariableDeclaration[14526-14546]:SingleVariableDeclaration[14526-14546]"
    }, {
      "left" : "final PlayApplicationBinarySpec binary",
      "right" : "final PlayApplicationBinarySpec binary",
      "info" : "SingleVariableDeclaration[14548-14586]:SingleVariableDeclaration[14548-14586]"
    }, {
      "left" : "ServiceRegistry serviceRegistry",
      "right" : "ServiceRegistry serviceRegistry",
      "info" : "SingleVariableDeclaration[14588-14619]:SingleVariableDeclaration[14588-14619]"
    }, {
      "left" : "@Path(\"buildDir\") final File buildDir",
      "right" : "@Path(\"buildDir\") final File buildDir",
      "info" : "SingleVariableDeclaration[14621-14658]:SingleVariableDeclaration[14621-14658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14660-15944]:Block[14660-15944]"
    }, {
      "left" : "for (final TwirlSourceSet twirlSourceSet : binary.getInputs().withType(TwirlSourceSet.class))",
      "right" : "for (final TwirlSourceSet twirlSourceSet : binary.getInputs().withType(TwirlSourceSet.class))",
      "info" : "EnhancedForStatement[14674-15934]:EnhancedForStatement[14674-15934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14768-15934]:Block[14768-15934]"
    }, {
      "left" : "final String twirlCompileTaskName = String.format(\"compile%s%s\", StringUtils.capitalize(binary.getName()), StringUtils.capitalize(twirlSourceSet.getName()));",
      "right" : "final String twirlCompileTaskName = String.format(\"compile%s%s\", StringUtils.capitalize(binary.getName()), StringUtils.capitalize(twirlSourceSet.getName()));",
      "info" : "VariableDeclarationStatement[14786-14943]:VariableDeclarationStatement[14786-14943]"
    }, {
      "left" : "final File twirlCompileOutputDirectory = srcOutputDirectory(buildDir, binary, twirlCompileTaskName);",
      "right" : "final File twirlCompileOutputDirectory = srcOutputDirectory(buildDir, binary, twirlCompileTaskName);",
      "info" : "VariableDeclarationStatement[14960-15060]:VariableDeclarationStatement[14960-15060]"
    }, {
      "left" : "tasks.create(twirlCompileTaskName, TwirlCompile.class, new Action<TwirlCompile>() {\n                    public void execute(TwirlCompile twirlCompile) {\n                        twirlCompile.setDescription(\"Compiles twirl templates for the '\" + twirlSourceSet.getName() + \"' source set.\");\n                        twirlCompile.setPlatform(binary.getTargetPlatform());\n                        twirlCompile.setSource(twirlSourceSet.getSource());\n                        twirlCompile.setOutputDirectory(twirlCompileOutputDirectory);\n\n                        ScalaLanguageSourceSet twirlScalaSources = binary.getGeneratedScala().get(twirlSourceSet);\n                        twirlScalaSources.getSource().srcDir(twirlCompileOutputDirectory);\n                        twirlScalaSources.builtBy(twirlCompile);\n                    }\n                });",
      "right" : "tasks.create(twirlCompileTaskName, TwirlCompile.class, new Action<TwirlCompile>() {\n                    public void execute(TwirlCompile twirlCompile) {\n                        twirlCompile.setDescription(\"Compiles twirl templates for the '\" + twirlSourceSet.getName() + \"' source set.\");\n                        twirlCompile.setPlatform(binary.getTargetPlatform());\n                        twirlCompile.setSource(twirlSourceSet.getSource());\n                        twirlCompile.setOutputDirectory(twirlCompileOutputDirectory);\n\n                        ScalaLanguageSourceSet twirlScalaSources = binary.getGeneratedScala().get(twirlSourceSet);\n                        twirlScalaSources.getSource().srcDir(twirlCompileOutputDirectory);\n                        twirlScalaSources.builtBy(twirlCompile);\n                    }\n                });",
      "info" : "ExpressionStatement[15078-15920]:ExpressionStatement[15078-15920]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15182-15188]:Modifier[15182-15188]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15189-15193]:PrimitiveType[15189-15193]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[15194-15201]:SimpleName[15194-15201]"
    }, {
      "left" : "TwirlCompile twirlCompile",
      "right" : "TwirlCompile twirlCompile",
      "info" : "SingleVariableDeclaration[15202-15227]:SingleVariableDeclaration[15202-15227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15229-15900]:Block[15229-15900]"
    }, {
      "left" : "twirlCompile.setDescription(\"Compiles twirl templates for the '\" + twirlSourceSet.getName() + \"' source set.\");",
      "right" : "twirlCompile.setDescription(\"Compiles twirl templates for the '\" + twirlSourceSet.getName() + \"' source set.\");",
      "info" : "ExpressionStatement[15255-15366]:ExpressionStatement[15255-15366]"
    }, {
      "left" : "twirlCompile.setPlatform(binary.getTargetPlatform());",
      "right" : "twirlCompile.setPlatform(binary.getTargetPlatform());",
      "info" : "ExpressionStatement[15391-15444]:ExpressionStatement[15391-15444]"
    }, {
      "left" : "twirlCompile.setSource(twirlSourceSet.getSource());",
      "right" : "twirlCompile.setSource(twirlSourceSet.getSource());",
      "info" : "ExpressionStatement[15469-15520]:ExpressionStatement[15469-15520]"
    }, {
      "left" : "twirlCompile.setOutputDirectory(twirlCompileOutputDirectory);",
      "right" : "twirlCompile.setOutputDirectory(twirlCompileOutputDirectory);",
      "info" : "ExpressionStatement[15545-15606]:ExpressionStatement[15545-15606]"
    }, {
      "left" : "ScalaLanguageSourceSet twirlScalaSources = binary.getGeneratedScala().get(twirlSourceSet);",
      "right" : "ScalaLanguageSourceSet twirlScalaSources = binary.getGeneratedScala().get(twirlSourceSet);",
      "info" : "VariableDeclarationStatement[15632-15722]:VariableDeclarationStatement[15632-15722]"
    }, {
      "left" : "twirlScalaSources.getSource().srcDir(twirlCompileOutputDirectory);",
      "right" : "twirlScalaSources.getSource().srcDir(twirlCompileOutputDirectory);",
      "info" : "ExpressionStatement[15747-15813]:ExpressionStatement[15747-15813]"
    }, {
      "left" : "twirlScalaSources.builtBy(twirlCompile);",
      "right" : "twirlScalaSources.builtBy(twirlCompile);",
      "info" : "ExpressionStatement[15838-15878]:ExpressionStatement[15838-15878]"
    }, {
      "left" : "@BinaryTasks",
      "right" : "@BinaryTasks",
      "info" : "MarkerAnnotation[15954-15966]:MarkerAnnotation[15954-15966]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15975-15979]:PrimitiveType[15975-15979]"
    }, {
      "left" : "createRoutesCompileTasks",
      "right" : "createRoutesCompileTasks",
      "info" : "SimpleName[15980-16004]:SimpleName[15980-16004]"
    }, {
      "left" : "ModelMap<Task> tasks",
      "right" : "ModelMap<Task> tasks",
      "info" : "SingleVariableDeclaration[16005-16025]:SingleVariableDeclaration[16005-16025]"
    }, {
      "left" : "final PlayApplicationBinarySpec binary",
      "right" : "final PlayApplicationBinarySpec binary",
      "info" : "SingleVariableDeclaration[16027-16065]:SingleVariableDeclaration[16027-16065]"
    }, {
      "left" : "ServiceRegistry serviceRegistry",
      "right" : "ServiceRegistry serviceRegistry",
      "info" : "SingleVariableDeclaration[16067-16098]:SingleVariableDeclaration[16067-16098]"
    }, {
      "left" : "@Path(\"buildDir\") final File buildDir",
      "right" : "@Path(\"buildDir\") final File buildDir",
      "info" : "SingleVariableDeclaration[16100-16137]:SingleVariableDeclaration[16100-16137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16139-17638]:Block[16139-17638]"
    }, {
      "left" : "for (final RoutesSourceSet routesSourceSet : binary.getInputs().withType(RoutesSourceSet.class))",
      "right" : "for (final RoutesSourceSet routesSourceSet : binary.getInputs().withType(RoutesSourceSet.class))",
      "info" : "EnhancedForStatement[16153-17628]:EnhancedForStatement[16153-17628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16250-17628]:Block[16250-17628]"
    }, {
      "left" : "final String routesCompileTaskName = String.format(\"compile%s%s\", StringUtils.capitalize(binary.getName()), StringUtils.capitalize(routesSourceSet.getName()));",
      "right" : "final String routesCompileTaskName = String.format(\"compile%s%s\", StringUtils.capitalize(binary.getName()), StringUtils.capitalize(routesSourceSet.getName()));",
      "info" : "VariableDeclarationStatement[16268-16427]:VariableDeclarationStatement[16268-16427]"
    }, {
      "left" : "final File routesCompilerOutputDirectory = srcOutputDirectory(buildDir, binary, routesCompileTaskName);",
      "right" : "final File routesCompilerOutputDirectory = srcOutputDirectory(buildDir, binary, routesCompileTaskName);",
      "info" : "VariableDeclarationStatement[16444-16547]:VariableDeclarationStatement[16444-16547]"
    }, {
      "left" : "tasks.create(routesCompileTaskName, RoutesCompile.class, new Action<RoutesCompile>() {\n                    public void execute(RoutesCompile routesCompile) {\n                        routesCompile.setDescription(\"Generates routes for the '\" + routesSourceSet.getName() + \"' source set.\");\n                        routesCompile.setPlatform(binary.getTargetPlatform());\n                        routesCompile.setAdditionalImports(new ArrayList<String>());\n                        routesCompile.setSource(routesSourceSet.getSource());\n                        routesCompile.setOutputDirectory(routesCompilerOutputDirectory);\n                        routesCompile.setStaticRoutesGenerator(binary.getApplication().getUseStaticRouter());\n\n                        ScalaLanguageSourceSet routesScalaSources = binary.getGeneratedScala().get(routesSourceSet);\n                        routesScalaSources.getSource().srcDir(routesCompilerOutputDirectory);\n                        routesScalaSources.builtBy(routesCompile);\n                    }\n                });",
      "right" : "tasks.create(routesCompileTaskName, RoutesCompile.class, new Action<RoutesCompile>() {\n                    public void execute(RoutesCompile routesCompile) {\n                        routesCompile.setDescription(\"Generates routes for the '\" + routesSourceSet.getName() + \"' source set.\");\n                        routesCompile.setPlatform(binary.getTargetPlatform());\n                        routesCompile.setAdditionalImports(new ArrayList<String>());\n                        routesCompile.setSource(routesSourceSet.getSource());\n                        routesCompile.setOutputDirectory(routesCompilerOutputDirectory);\n                        routesCompile.setStaticRoutesGenerator(binary.getApplication().getUseStaticRouter());\n\n                        ScalaLanguageSourceSet routesScalaSources = binary.getGeneratedScala().get(routesSourceSet);\n                        routesScalaSources.getSource().srcDir(routesCompilerOutputDirectory);\n                        routesScalaSources.builtBy(routesCompile);\n                    }\n                });",
      "info" : "ExpressionStatement[16565-17614]:ExpressionStatement[16565-17614]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16672-16678]:Modifier[16672-16678]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16679-16683]:PrimitiveType[16679-16683]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[16684-16691]:SimpleName[16684-16691]"
    }, {
      "left" : "RoutesCompile routesCompile",
      "right" : "RoutesCompile routesCompile",
      "info" : "SingleVariableDeclaration[16692-16719]:SingleVariableDeclaration[16692-16719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16721-17594]:Block[16721-17594]"
    }, {
      "left" : "routesCompile.setDescription(\"Generates routes for the '\" + routesSourceSet.getName() + \"' source set.\");",
      "right" : "routesCompile.setDescription(\"Generates routes for the '\" + routesSourceSet.getName() + \"' source set.\");",
      "info" : "ExpressionStatement[16747-16852]:ExpressionStatement[16747-16852]"
    }, {
      "left" : "routesCompile.setPlatform(binary.getTargetPlatform());",
      "right" : "routesCompile.setPlatform(binary.getTargetPlatform());",
      "info" : "ExpressionStatement[16877-16931]:ExpressionStatement[16877-16931]"
    }, {
      "left" : "routesCompile.setAdditionalImports(new ArrayList<String>());",
      "right" : "routesCompile.setAdditionalImports(new ArrayList<String>());",
      "info" : "ExpressionStatement[16956-17016]:ExpressionStatement[16956-17016]"
    }, {
      "left" : "routesCompile.setSource(routesSourceSet.getSource());",
      "right" : "routesCompile.setSource(routesSourceSet.getSource());",
      "info" : "ExpressionStatement[17041-17094]:ExpressionStatement[17041-17094]"
    }, {
      "left" : "routesCompile.setOutputDirectory(routesCompilerOutputDirectory);",
      "right" : "routesCompile.setOutputDirectory(routesCompilerOutputDirectory);",
      "info" : "ExpressionStatement[17119-17183]:ExpressionStatement[17119-17183]"
    }, {
      "left" : "routesCompile.setStaticRoutesGenerator(binary.getApplication().getUseStaticRouter());",
      "right" : "routesCompile.setStaticRoutesGenerator(binary.getApplication().getUseStaticRouter());",
      "info" : "ExpressionStatement[17208-17293]:ExpressionStatement[17208-17293]"
    }, {
      "left" : "ScalaLanguageSourceSet routesScalaSources = binary.getGeneratedScala().get(routesSourceSet);",
      "right" : "ScalaLanguageSourceSet routesScalaSources = binary.getGeneratedScala().get(routesSourceSet);",
      "info" : "VariableDeclarationStatement[17319-17411]:VariableDeclarationStatement[17319-17411]"
    }, {
      "left" : "routesScalaSources.getSource().srcDir(routesCompilerOutputDirectory);",
      "right" : "routesScalaSources.getSource().srcDir(routesCompilerOutputDirectory);",
      "info" : "ExpressionStatement[17436-17505]:ExpressionStatement[17436-17505]"
    }, {
      "left" : "routesScalaSources.builtBy(routesCompile);",
      "right" : "routesScalaSources.builtBy(routesCompile);",
      "info" : "ExpressionStatement[17530-17572]:ExpressionStatement[17530-17572]"
    }, {
      "left" : "@BinaryTasks",
      "right" : "@BinaryTasks",
      "info" : "MarkerAnnotation[17648-17660]:MarkerAnnotation[17648-17660]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17669-17673]:PrimitiveType[17669-17673]"
    }, {
      "left" : "createScalaCompileTask",
      "right" : "createScalaCompileTask",
      "info" : "SimpleName[17674-17696]:SimpleName[17674-17696]"
    }, {
      "left" : "ModelMap<Task> tasks",
      "right" : "ModelMap<Task> tasks",
      "info" : "SingleVariableDeclaration[17697-17717]:SingleVariableDeclaration[17697-17717]"
    }, {
      "left" : "final PlayApplicationBinarySpec binary",
      "right" : "final PlayApplicationBinarySpec binary",
      "info" : "SingleVariableDeclaration[17719-17757]:SingleVariableDeclaration[17719-17757]"
    }, {
      "left" : "@Path(\"buildDir\") final File buildDir",
      "right" : "@Path(\"buildDir\") final File buildDir",
      "info" : "SingleVariableDeclaration[17759-17796]:SingleVariableDeclaration[17759-17796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17798-20072]:Block[17798-20072]"
    }, {
      "left" : "final String scalaCompileTaskName = String.format(\"compile%s%s\", StringUtils.capitalize(binary.getName()), \"Scala\");",
      "right" : "final String scalaCompileTaskName = String.format(\"compile%s%s\", StringUtils.capitalize(binary.getName()), \"Scala\");",
      "info" : "VariableDeclarationStatement[17812-17928]:VariableDeclarationStatement[17812-17928]"
    }, {
      "left" : "tasks.create(scalaCompileTaskName, PlatformScalaCompile.class, new Action<PlatformScalaCompile>() {\n                public void execute(PlatformScalaCompile scalaCompile) {\n                    scalaCompile.setDescription(\"Compiles all scala and java source sets for the '\" + binary.getName() + \"' binary.\");\n\n                    scalaCompile.setDestinationDir(binary.getClasses().getClassesDir());\n                    scalaCompile.setPlatform(binary.getTargetPlatform().getScalaPlatform());\n                    //infer scala classpath\n                    String targetCompatibility = binary.getTargetPlatform().getJavaPlatform().getTargetCompatibility().getMajorVersion();\n                    scalaCompile.setSourceCompatibility(targetCompatibility);\n                    scalaCompile.setTargetCompatibility(targetCompatibility);\n\n                    IncrementalCompileOptions incrementalOptions = scalaCompile.getScalaCompileOptions().getIncrementalOptions();\n                    incrementalOptions.setAnalysisFile(new File(buildDir, String.format(\"tmp/scala/compilerAnalysis/%s.analysis\", scalaCompileTaskName)));\n\n                    for (LanguageSourceSet appSources : binary.getInputs().withType(ScalaLanguageSourceSet.class)) {\n                        scalaCompile.source(appSources.getSource());\n                        scalaCompile.dependsOn(appSources);\n                    }\n\n                    for (LanguageSourceSet appSources : binary.getInputs().withType(JavaSourceSet.class)) {\n                        scalaCompile.source(appSources.getSource());\n                        scalaCompile.dependsOn(appSources);\n                    }\n\n                    for (LanguageSourceSet generatedSourceSet : binary.getGeneratedScala().values()) {\n                        scalaCompile.source(generatedSourceSet.getSource());\n                        scalaCompile.dependsOn(generatedSourceSet);\n                    }\n\n                    scalaCompile.setClasspath(((PlayApplicationBinarySpecInternal) binary).getClasspath());\n\n                    binary.getClasses().builtBy(scalaCompile);\n                }\n            });",
      "right" : "tasks.create(scalaCompileTaskName, PlatformScalaCompile.class, new Action<PlatformScalaCompile>() {\n                public void execute(PlatformScalaCompile scalaCompile) {\n                    scalaCompile.setDescription(\"Compiles all scala and java source sets for the '\" + binary.getName() + \"' binary.\");\n\n                    scalaCompile.setDestinationDir(binary.getClasses().getClassesDir());\n                    scalaCompile.setPlatform(binary.getTargetPlatform().getScalaPlatform());\n                    //infer scala classpath\n                    String targetCompatibility = binary.getTargetPlatform().getJavaPlatform().getTargetCompatibility().getMajorVersion();\n                    scalaCompile.setSourceCompatibility(targetCompatibility);\n                    scalaCompile.setTargetCompatibility(targetCompatibility);\n\n                    IncrementalCompileOptions incrementalOptions = scalaCompile.getScalaCompileOptions().getIncrementalOptions();\n                    incrementalOptions.setAnalysisFile(new File(buildDir, String.format(\"tmp/scala/compilerAnalysis/%s.analysis\", scalaCompileTaskName)));\n\n                    for (LanguageSourceSet appSources : binary.getInputs().withType(ScalaLanguageSourceSet.class)) {\n                        scalaCompile.source(appSources.getSource());\n                        scalaCompile.dependsOn(appSources);\n                    }\n\n                    for (LanguageSourceSet appSources : binary.getInputs().withType(JavaSourceSet.class)) {\n                        scalaCompile.source(appSources.getSource());\n                        scalaCompile.dependsOn(appSources);\n                    }\n\n                    for (LanguageSourceSet generatedSourceSet : binary.getGeneratedScala().values()) {\n                        scalaCompile.source(generatedSourceSet.getSource());\n                        scalaCompile.dependsOn(generatedSourceSet);\n                    }\n\n                    scalaCompile.setClasspath(((PlayApplicationBinarySpecInternal) binary).getClasspath());\n\n                    binary.getClasses().builtBy(scalaCompile);\n                }\n            });",
      "info" : "ExpressionStatement[17941-20062]:ExpressionStatement[17941-20062]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18057-18063]:Modifier[18057-18063]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18064-18068]:PrimitiveType[18064-18068]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[18069-18076]:SimpleName[18069-18076]"
    }, {
      "left" : "PlatformScalaCompile scalaCompile",
      "right" : "PlatformScalaCompile scalaCompile",
      "info" : "SingleVariableDeclaration[18077-18110]:SingleVariableDeclaration[18077-18110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18112-20046]:Block[18112-20046]"
    }, {
      "left" : "scalaCompile.setDescription(\"Compiles all scala and java source sets for the '\" + binary.getName() + \"' binary.\");",
      "right" : "scalaCompile.setDescription(\"Compiles all scala and java source sets for the '\" + binary.getName() + \"' binary.\");",
      "info" : "ExpressionStatement[18134-18248]:ExpressionStatement[18134-18248]"
    }, {
      "left" : "scalaCompile.setDestinationDir(binary.getClasses().getClassesDir());",
      "right" : "scalaCompile.setDestinationDir(binary.getClasses().getClassesDir());",
      "info" : "ExpressionStatement[18270-18338]:ExpressionStatement[18270-18338]"
    }, {
      "left" : "scalaCompile.setPlatform(binary.getTargetPlatform().getScalaPlatform());",
      "right" : "scalaCompile.setPlatform(binary.getTargetPlatform().getScalaPlatform());",
      "info" : "ExpressionStatement[18359-18431]:ExpressionStatement[18359-18431]"
    }, {
      "left" : "String targetCompatibility = binary.getTargetPlatform().getJavaPlatform().getTargetCompatibility().getMajorVersion();",
      "right" : "String targetCompatibility = binary.getTargetPlatform().getJavaPlatform().getTargetCompatibility().getMajorVersion();",
      "info" : "VariableDeclarationStatement[18496-18613]:VariableDeclarationStatement[18496-18613]"
    }, {
      "left" : "scalaCompile.setSourceCompatibility(targetCompatibility);",
      "right" : "scalaCompile.setSourceCompatibility(targetCompatibility);",
      "info" : "ExpressionStatement[18634-18691]:ExpressionStatement[18634-18691]"
    }, {
      "left" : "scalaCompile.setTargetCompatibility(targetCompatibility);",
      "right" : "scalaCompile.setTargetCompatibility(targetCompatibility);",
      "info" : "ExpressionStatement[18712-18769]:ExpressionStatement[18712-18769]"
    }, {
      "left" : "IncrementalCompileOptions incrementalOptions = scalaCompile.getScalaCompileOptions().getIncrementalOptions();",
      "right" : "IncrementalCompileOptions incrementalOptions = scalaCompile.getScalaCompileOptions().getIncrementalOptions();",
      "info" : "VariableDeclarationStatement[18791-18900]:VariableDeclarationStatement[18791-18900]"
    }, {
      "left" : "incrementalOptions.setAnalysisFile(new File(buildDir, String.format(\"tmp/scala/compilerAnalysis/%s.analysis\", scalaCompileTaskName)));",
      "right" : "incrementalOptions.setAnalysisFile(new File(buildDir, String.format(\"tmp/scala/compilerAnalysis/%s.analysis\", scalaCompileTaskName)));",
      "info" : "ExpressionStatement[18921-19055]:ExpressionStatement[18921-19055]"
    }, {
      "left" : "for (LanguageSourceSet appSources : binary.getInputs().withType(ScalaLanguageSourceSet.class))",
      "right" : "for (LanguageSourceSet appSources : binary.getInputs().withType(ScalaLanguageSourceSet.class))",
      "info" : "EnhancedForStatement[19077-19324]:EnhancedForStatement[19077-19324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19172-19324]:Block[19172-19324]"
    }, {
      "left" : "scalaCompile.source(appSources.getSource());",
      "right" : "scalaCompile.source(appSources.getSource());",
      "info" : "ExpressionStatement[19198-19242]:ExpressionStatement[19198-19242]"
    }, {
      "left" : "scalaCompile.dependsOn(appSources);",
      "right" : "scalaCompile.dependsOn(appSources);",
      "info" : "ExpressionStatement[19267-19302]:ExpressionStatement[19267-19302]"
    }, {
      "left" : "for (LanguageSourceSet appSources : binary.getInputs().withType(JavaSourceSet.class))",
      "right" : "for (LanguageSourceSet appSources : binary.getInputs().withType(JavaSourceSet.class))",
      "info" : "EnhancedForStatement[19346-19584]:EnhancedForStatement[19346-19584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19432-19584]:Block[19432-19584]"
    }, {
      "left" : "scalaCompile.source(appSources.getSource());",
      "right" : "scalaCompile.source(appSources.getSource());",
      "info" : "ExpressionStatement[19458-19502]:ExpressionStatement[19458-19502]"
    }, {
      "left" : "scalaCompile.dependsOn(appSources);",
      "right" : "scalaCompile.dependsOn(appSources);",
      "info" : "ExpressionStatement[19527-19562]:ExpressionStatement[19527-19562]"
    }, {
      "left" : "for (LanguageSourceSet generatedSourceSet : binary.getGeneratedScala().values())",
      "right" : "for (LanguageSourceSet generatedSourceSet : binary.getGeneratedScala().values())",
      "info" : "EnhancedForStatement[19606-19855]:EnhancedForStatement[19606-19855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19687-19855]:Block[19687-19855]"
    }, {
      "left" : "scalaCompile.source(generatedSourceSet.getSource());",
      "right" : "scalaCompile.source(generatedSourceSet.getSource());",
      "info" : "ExpressionStatement[19713-19765]:ExpressionStatement[19713-19765]"
    }, {
      "left" : "scalaCompile.dependsOn(generatedSourceSet);",
      "right" : "scalaCompile.dependsOn(generatedSourceSet);",
      "info" : "ExpressionStatement[19790-19833]:ExpressionStatement[19790-19833]"
    }, {
      "left" : "scalaCompile.setClasspath(((PlayApplicationBinarySpecInternal) binary).getClasspath());",
      "right" : "scalaCompile.setClasspath(((PlayApplicationBinarySpecInternal) binary).getClasspath());",
      "info" : "ExpressionStatement[19877-19964]:ExpressionStatement[19877-19964]"
    }, {
      "left" : "binary.getClasses().builtBy(scalaCompile);",
      "right" : "binary.getClasses().builtBy(scalaCompile);",
      "info" : "ExpressionStatement[19986-20028]:ExpressionStatement[19986-20028]"
    }, {
      "left" : "@BinaryTasks",
      "right" : "@BinaryTasks",
      "info" : "MarkerAnnotation[20082-20094]:MarkerAnnotation[20082-20094]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20103-20107]:PrimitiveType[20103-20107]"
    }, {
      "left" : "createJarTasks",
      "right" : "createJarTasks",
      "info" : "SimpleName[20108-20122]:SimpleName[20108-20122]"
    }, {
      "left" : "ModelMap<Task> tasks",
      "right" : "ModelMap<Task> tasks",
      "info" : "SingleVariableDeclaration[20123-20143]:SingleVariableDeclaration[20123-20143]"
    }, {
      "left" : "final PlayApplicationBinarySpec binary",
      "right" : "final PlayApplicationBinarySpec binary",
      "info" : "SingleVariableDeclaration[20145-20183]:SingleVariableDeclaration[20145-20183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20185-21752]:Block[20185-21752]"
    }, {
      "left" : "String jarTaskName = String.format(\"create%sJar\", StringUtils.capitalize(binary.getName()));",
      "right" : "String jarTaskName = String.format(\"create%sJar\", StringUtils.capitalize(binary.getName()));",
      "info" : "VariableDeclarationStatement[20199-20291]:VariableDeclarationStatement[20199-20291]"
    }, {
      "left" : "tasks.create(jarTaskName, Jar.class, new Action<Jar>() {\n                public void execute(Jar jar) {\n                    jar.setDescription(\"Assembles the application jar for the '\" + binary.getName() + \"' binary.\");\n                    jar.setDestinationDir(binary.getJarFile().getParentFile());\n                    jar.setArchiveName(binary.getJarFile().getName());\n                    jar.from(binary.getClasses().getClassesDir());\n                    jar.from(binary.getClasses().getResourceDirs());\n                    jar.dependsOn(binary.getClasses());\n                }\n            });",
      "right" : "tasks.create(jarTaskName, Jar.class, new Action<Jar>() {\n                public void execute(Jar jar) {\n                    jar.setDescription(\"Assembles the application jar for the '\" + binary.getName() + \"' binary.\");\n                    jar.setDestinationDir(binary.getJarFile().getParentFile());\n                    jar.setArchiveName(binary.getJarFile().getName());\n                    jar.from(binary.getClasses().getClassesDir());\n                    jar.from(binary.getClasses().getResourceDirs());\n                    jar.dependsOn(binary.getClasses());\n                }\n            });",
      "info" : "ExpressionStatement[20304-20900]:ExpressionStatement[20304-20900]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20377-20383]:Modifier[20377-20383]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20384-20388]:PrimitiveType[20384-20388]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[20389-20396]:SimpleName[20389-20396]"
    }, {
      "left" : "Jar jar",
      "right" : "Jar jar",
      "info" : "SingleVariableDeclaration[20397-20404]:SingleVariableDeclaration[20397-20404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20406-20884]:Block[20406-20884]"
    }, {
      "left" : "jar.setDescription(\"Assembles the application jar for the '\" + binary.getName() + \"' binary.\");",
      "right" : "jar.setDescription(\"Assembles the application jar for the '\" + binary.getName() + \"' binary.\");",
      "info" : "ExpressionStatement[20428-20523]:ExpressionStatement[20428-20523]"
    }, {
      "left" : "jar.setDestinationDir(binary.getJarFile().getParentFile());",
      "right" : "jar.setDestinationDir(binary.getJarFile().getParentFile());",
      "info" : "ExpressionStatement[20544-20603]:ExpressionStatement[20544-20603]"
    }, {
      "left" : "jar.setArchiveName(binary.getJarFile().getName());",
      "right" : "jar.setArchiveName(binary.getJarFile().getName());",
      "info" : "ExpressionStatement[20624-20674]:ExpressionStatement[20624-20674]"
    }, {
      "left" : "jar.from(binary.getClasses().getClassesDir());",
      "right" : "jar.from(binary.getClasses().getClassesDir());",
      "info" : "ExpressionStatement[20695-20741]:ExpressionStatement[20695-20741]"
    }, {
      "left" : "jar.from(binary.getClasses().getResourceDirs());",
      "right" : "jar.from(binary.getClasses().getResourceDirs());",
      "info" : "ExpressionStatement[20762-20810]:ExpressionStatement[20762-20810]"
    }, {
      "left" : "jar.dependsOn(binary.getClasses());",
      "right" : "jar.dependsOn(binary.getClasses());",
      "info" : "ExpressionStatement[20831-20866]:ExpressionStatement[20831-20866]"
    }, {
      "left" : "String assetsJarTaskName = String.format(\"create%sAssetsJar\", StringUtils.capitalize(binary.getName()));",
      "right" : "String assetsJarTaskName = String.format(\"create%sAssetsJar\", StringUtils.capitalize(binary.getName()));",
      "info" : "VariableDeclarationStatement[20914-21018]:VariableDeclarationStatement[20914-21018]"
    }, {
      "left" : "tasks.create(assetsJarTaskName, Jar.class, new Action<Jar>() {\n                public void execute(Jar jar) {\n                    jar.setDescription(\"Assembles the assets jar for the '\" + binary.getName() + \"' binary.\");\n                    jar.setDestinationDir(binary.getAssetsJarFile().getParentFile());\n                    jar.setArchiveName(binary.getAssetsJarFile().getName());\n                    jar.setClassifier(\"assets\");\n                    CopySpecInternal newSpec = jar.getRootSpec().addChild();\n                    newSpec.from(binary.getAssets().getAssetDirs());\n                    newSpec.into(\"public\");\n                    jar.dependsOn(binary.getAssets());\n                }\n            });",
      "right" : "tasks.create(assetsJarTaskName, Jar.class, new Action<Jar>() {\n                public void execute(Jar jar) {\n                    jar.setDescription(\"Assembles the assets jar for the '\" + binary.getName() + \"' binary.\");\n                    jar.setDestinationDir(binary.getAssetsJarFile().getParentFile());\n                    jar.setArchiveName(binary.getAssetsJarFile().getName());\n                    jar.setClassifier(\"assets\");\n                    CopySpecInternal newSpec = jar.getRootSpec().addChild();\n                    newSpec.from(binary.getAssets().getAssetDirs());\n                    newSpec.into(\"public\");\n                    jar.dependsOn(binary.getAssets());\n                }\n            });",
      "info" : "ExpressionStatement[21031-21742]:ExpressionStatement[21031-21742]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21110-21116]:Modifier[21110-21116]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21117-21121]:PrimitiveType[21117-21121]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[21122-21129]:SimpleName[21122-21129]"
    }, {
      "left" : "Jar jar",
      "right" : "Jar jar",
      "info" : "SingleVariableDeclaration[21130-21137]:SingleVariableDeclaration[21130-21137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21139-21726]:Block[21139-21726]"
    }, {
      "left" : "jar.setDescription(\"Assembles the assets jar for the '\" + binary.getName() + \"' binary.\");",
      "right" : "jar.setDescription(\"Assembles the assets jar for the '\" + binary.getName() + \"' binary.\");",
      "info" : "ExpressionStatement[21161-21251]:ExpressionStatement[21161-21251]"
    }, {
      "left" : "jar.setDestinationDir(binary.getAssetsJarFile().getParentFile());",
      "right" : "jar.setDestinationDir(binary.getAssetsJarFile().getParentFile());",
      "info" : "ExpressionStatement[21272-21337]:ExpressionStatement[21272-21337]"
    }, {
      "left" : "jar.setArchiveName(binary.getAssetsJarFile().getName());",
      "right" : "jar.setArchiveName(binary.getAssetsJarFile().getName());",
      "info" : "ExpressionStatement[21358-21414]:ExpressionStatement[21358-21414]"
    }, {
      "left" : "jar.setClassifier(\"assets\");",
      "right" : "jar.setClassifier(\"assets\");",
      "info" : "ExpressionStatement[21435-21463]:ExpressionStatement[21435-21463]"
    }, {
      "left" : "CopySpecInternal newSpec = jar.getRootSpec().addChild();",
      "right" : "CopySpecInternal newSpec = jar.getRootSpec().addChild();",
      "info" : "VariableDeclarationStatement[21484-21540]:VariableDeclarationStatement[21484-21540]"
    }, {
      "left" : "newSpec.from(binary.getAssets().getAssetDirs());",
      "right" : "newSpec.from(binary.getAssets().getAssetDirs());",
      "info" : "ExpressionStatement[21561-21609]:ExpressionStatement[21561-21609]"
    }, {
      "left" : "newSpec.into(\"public\");",
      "right" : "newSpec.into(\"public\");",
      "info" : "ExpressionStatement[21630-21653]:ExpressionStatement[21630-21653]"
    }, {
      "left" : "jar.dependsOn(binary.getAssets());",
      "right" : "jar.dependsOn(binary.getAssets());",
      "info" : "ExpressionStatement[21674-21708]:ExpressionStatement[21674-21708]"
    }, {
      "left" : "@Mutate",
      "right" : "@Mutate",
      "info" : "MarkerAnnotation[21762-21769]:MarkerAnnotation[21762-21769]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21778-21782]:PrimitiveType[21778-21782]"
    }, {
      "left" : "createPlayRunTask",
      "right" : "createPlayRunTask",
      "info" : "SimpleName[21783-21800]:SimpleName[21783-21800]"
    }, {
      "left" : "ModelMap<Task> tasks",
      "right" : "ModelMap<Task> tasks",
      "info" : "SingleVariableDeclaration[21801-21821]:SingleVariableDeclaration[21801-21821]"
    }, {
      "left" : "BinaryContainer binaryContainer",
      "right" : "BinaryContainer binaryContainer",
      "info" : "SingleVariableDeclaration[21823-21854]:SingleVariableDeclaration[21823-21854]"
    }, {
      "left" : "final ServiceRegistry serviceRegistry",
      "right" : "final ServiceRegistry serviceRegistry",
      "info" : "SingleVariableDeclaration[21856-21893]:SingleVariableDeclaration[21856-21893]"
    }, {
      "left" : "final PlayPluginConfigurations configurations",
      "right" : "final PlayPluginConfigurations configurations",
      "info" : "SingleVariableDeclaration[21895-21940]:SingleVariableDeclaration[21895-21940]"
    }, {
      "left" : "ProjectIdentifier projectIdentifier",
      "right" : "ProjectIdentifier projectIdentifier",
      "info" : "SingleVariableDeclaration[21942-21977]:SingleVariableDeclaration[21942-21977]"
    }, {
      "left" : "final PlayToolChainInternal playToolChain",
      "right" : "final PlayToolChainInternal playToolChain",
      "info" : "SingleVariableDeclaration[21979-22020]:SingleVariableDeclaration[21979-22020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22022-23959]:Block[22022-23665]"
    }, {
      "left" : "for (final PlayApplicationBinarySpecInternal binary : binaryContainer.withType(PlayApplicationBinarySpecInternal.class))",
      "right" : "for (final PlayApplicationBinarySpecInternal binary : binaryContainer.withType(PlayApplicationBinarySpecInternal.class))",
      "info" : "EnhancedForStatement[22037-23949]:EnhancedForStatement[22037-23655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22158-23949]:Block[22158-23655]"
    }, {
      "left" : "String runTaskName = String.format(\"run%s\", StringUtils.capitalize(binary.getName()));",
      "right" : "String runTaskName = String.format(\"run%s\", StringUtils.capitalize(binary.getName()));",
      "info" : "VariableDeclarationStatement[22176-22262]:VariableDeclarationStatement[22176-22262]"
    }, {
      "left" : "DeploymentRegistry deploymentRegistry = serviceRegistry.get(DeploymentRegistry.class);",
      "right" : "DeploymentRegistry deploymentRegistry = serviceRegistry.get(DeploymentRegistry.class);",
      "info" : "VariableDeclarationStatement[22544-22630]:VariableDeclarationStatement[23256-23342]"
    }, {
      "left" : "deploymentHandle.registerBuildListener(serviceRegistry.get(Gradle.class));",
      "right" : "deploymentHandle.registerBuildListener(serviceRegistry.get(Gradle.class));",
      "info" : "ExpressionStatement[22786-22860]:ExpressionStatement[23524-23598]"
    }, {
      "left" : "tasks.create(runTaskName, PlayRun.class, new Action<PlayRun>() {\n                    public void execute(PlayRun playRun) {\n                        playRun.setDescription(\"Runs the Play application for local development.\");\n                        playRun.setGroup(RUN_GROUP);\n                        playRun.setHttpPort(DEFAULT_HTTP_PORT);\n                        playRun.setPlayToolProvider(playToolChain.select(binary.getTargetPlatform()));\n                        playRun.setApplicationJar(binary.getJarFile());\n                        playRun.setAssetsJar(binary.getAssetsJarFile());\n                        playRun.setAssetsDirs(binary.getAssets().getAssetDirs());\n                        playRun.setRuntimeClasspath(configurations.getPlayRun().getNonChangingArtifacts());\n                        playRun.setChangingClasspath(configurations.getPlayRun().getChangingArtifacts());\n                        playRun.setDeployment(deploymentHandle);\n                        playRun.dependsOn(binary.getBuildTask());\n                    }\n                });",
      "right" : "tasks.create(runTaskName, PlayRun.class, new Action<PlayRun>() {\n                    public void execute(PlayRun playRun) {\n                        playRun.setDescription(\"Runs the Play application for local development.\");\n                        playRun.setGroup(RUN_GROUP);\n                        playRun.setHttpPort(DEFAULT_HTTP_PORT);\n                        playRun.setPlayToolProvider(playToolChain.select(binary.getTargetPlatform()));\n                        playRun.setApplicationJar(binary.getJarFile());\n                        playRun.setAssetsJar(binary.getAssetsJarFile());\n                        playRun.setAssetsDirs(binary.getAssets().getAssetDirs());\n                        playRun.setRuntimeClasspath(configurations.getPlayRun().getNonChangingArtifacts());\n                        playRun.setChangingClasspath(configurations.getPlayRun().getChangingArtifacts());\n                        playRun.dependsOn(binary.getBuildTask());\n\n                        DeploymentRegistry deploymentRegistry = serviceRegistry.get(DeploymentRegistry.class);\n                        PlayApplicationDeploymentHandle deploymentHandle = deploymentRegistry.get(PlayApplicationDeploymentHandle.class, playRun.getPath());\n                        deploymentHandle.registerBuildListener(serviceRegistry.get(Gradle.class));\n\n                    }\n                });",
      "info" : "ExpressionStatement[22878-23935]:ExpressionStatement[22280-23641]"
    }, {
      "left" : "runTaskName",
      "right" : "runTaskName",
      "info" : "SimpleName[22891-22902]:SimpleName[22293-22304]"
    }, {
      "left" : "PlayRun.class",
      "right" : "PlayRun.class",
      "info" : "TypeLiteral[22904-22917]:TypeLiteral[22306-22319]"
    }, {
      "left" : "new Action<PlayRun>() {\n                    public void execute(PlayRun playRun) {\n                        playRun.setDescription(\"Runs the Play application for local development.\");\n                        playRun.setGroup(RUN_GROUP);\n                        playRun.setHttpPort(DEFAULT_HTTP_PORT);\n                        playRun.setPlayToolProvider(playToolChain.select(binary.getTargetPlatform()));\n                        playRun.setApplicationJar(binary.getJarFile());\n                        playRun.setAssetsJar(binary.getAssetsJarFile());\n                        playRun.setAssetsDirs(binary.getAssets().getAssetDirs());\n                        playRun.setRuntimeClasspath(configurations.getPlayRun().getNonChangingArtifacts());\n                        playRun.setChangingClasspath(configurations.getPlayRun().getChangingArtifacts());\n                        playRun.setDeployment(deploymentHandle);\n                        playRun.dependsOn(binary.getBuildTask());\n                    }\n                }",
      "right" : "new Action<PlayRun>() {\n                    public void execute(PlayRun playRun) {\n                        playRun.setDescription(\"Runs the Play application for local development.\");\n                        playRun.setGroup(RUN_GROUP);\n                        playRun.setHttpPort(DEFAULT_HTTP_PORT);\n                        playRun.setPlayToolProvider(playToolChain.select(binary.getTargetPlatform()));\n                        playRun.setApplicationJar(binary.getJarFile());\n                        playRun.setAssetsJar(binary.getAssetsJarFile());\n                        playRun.setAssetsDirs(binary.getAssets().getAssetDirs());\n                        playRun.setRuntimeClasspath(configurations.getPlayRun().getNonChangingArtifacts());\n                        playRun.setChangingClasspath(configurations.getPlayRun().getChangingArtifacts());\n                        playRun.dependsOn(binary.getBuildTask());\n\n                        DeploymentRegistry deploymentRegistry = serviceRegistry.get(DeploymentRegistry.class);\n                        PlayApplicationDeploymentHandle deploymentHandle = deploymentRegistry.get(PlayApplicationDeploymentHandle.class, playRun.getPath());\n                        deploymentHandle.registerBuildListener(serviceRegistry.get(Gradle.class));\n\n                    }\n                }",
      "info" : "ClassInstanceCreation[22919-23933]:ClassInstanceCreation[22321-23639]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22963-22969]:Modifier[22365-22371]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22970-22974]:PrimitiveType[22372-22376]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[22975-22982]:SimpleName[22377-22384]"
    }, {
      "left" : "PlayRun playRun",
      "right" : "PlayRun playRun",
      "info" : "SingleVariableDeclaration[22983-22998]:SingleVariableDeclaration[22385-22400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23000-23915]:Block[22402-23621]"
    }, {
      "left" : "playRun.setDescription(\"Runs the Play application for local development.\");",
      "right" : "playRun.setDescription(\"Runs the Play application for local development.\");",
      "info" : "ExpressionStatement[23026-23101]:ExpressionStatement[22428-22503]"
    }, {
      "left" : "playRun.setGroup(RUN_GROUP);",
      "right" : "playRun.setGroup(RUN_GROUP);",
      "info" : "ExpressionStatement[23126-23154]:ExpressionStatement[22528-22556]"
    }, {
      "left" : "playRun.setHttpPort(DEFAULT_HTTP_PORT);",
      "right" : "playRun.setHttpPort(DEFAULT_HTTP_PORT);",
      "info" : "ExpressionStatement[23179-23218]:ExpressionStatement[22581-22620]"
    }, {
      "left" : "playRun.setPlayToolProvider(playToolChain.select(binary.getTargetPlatform()));",
      "right" : "playRun.setPlayToolProvider(playToolChain.select(binary.getTargetPlatform()));",
      "info" : "ExpressionStatement[23243-23321]:ExpressionStatement[22645-22723]"
    }, {
      "left" : "playRun.setApplicationJar(binary.getJarFile());",
      "right" : "playRun.setApplicationJar(binary.getJarFile());",
      "info" : "ExpressionStatement[23346-23393]:ExpressionStatement[22748-22795]"
    }, {
      "left" : "playRun.setAssetsJar(binary.getAssetsJarFile());",
      "right" : "playRun.setAssetsJar(binary.getAssetsJarFile());",
      "info" : "ExpressionStatement[23418-23466]:ExpressionStatement[22820-22868]"
    }, {
      "left" : "playRun.setAssetsDirs(binary.getAssets().getAssetDirs());",
      "right" : "playRun.setAssetsDirs(binary.getAssets().getAssetDirs());",
      "info" : "ExpressionStatement[23491-23548]:ExpressionStatement[22893-22950]"
    }, {
      "left" : "playRun.setRuntimeClasspath(configurations.getPlayRun().getNonChangingArtifacts());",
      "right" : "playRun.setRuntimeClasspath(configurations.getPlayRun().getNonChangingArtifacts());",
      "info" : "ExpressionStatement[23573-23656]:ExpressionStatement[22975-23058]"
    }, {
      "left" : "playRun.setChangingClasspath(configurations.getPlayRun().getChangingArtifacts());",
      "right" : "playRun.setChangingClasspath(configurations.getPlayRun().getChangingArtifacts());",
      "info" : "ExpressionStatement[23681-23762]:ExpressionStatement[23083-23164]"
    }, {
      "left" : "playRun.dependsOn(binary.getBuildTask());",
      "right" : "playRun.dependsOn(binary.getBuildTask());",
      "info" : "ExpressionStatement[23852-23893]:ExpressionStatement[23189-23230]"
    }, {
      "left" : "PlayApplicationDeploymentHandle deploymentHandle  = deploymentRegistry.get(PlayApplicationDeploymentHandle.class, deploymentId);",
      "right" : "PlayApplicationDeploymentHandle deploymentHandle = deploymentRegistry.get(PlayApplicationDeploymentHandle.class, playRun.getPath());",
      "info" : "VariableDeclarationStatement[24114-24242]:VariableDeclarationStatement[23367-23499]"
    }, {
      "left" : "PlayApplicationDeploymentHandle.class",
      "right" : "PlayApplicationDeploymentHandle.class",
      "info" : "TypeLiteral[24189-24226]:TypeLiteral[23441-23478]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24520-24527]:Modifier[23675-23682]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[24528-24532]:SimpleType[23683-23687]"
    }, {
      "left" : "srcOutputDirectory",
      "right" : "srcOutputDirectory",
      "info" : "SimpleName[24533-24551]:SimpleName[23688-23706]"
    }, {
      "left" : "File buildDir",
      "right" : "File buildDir",
      "info" : "SingleVariableDeclaration[24552-24565]:SingleVariableDeclaration[23707-23720]"
    }, {
      "left" : "PlayApplicationBinarySpec binary",
      "right" : "PlayApplicationBinarySpec binary",
      "info" : "SingleVariableDeclaration[24567-24599]:SingleVariableDeclaration[23722-23754]"
    }, {
      "left" : "String taskName",
      "right" : "String taskName",
      "info" : "SingleVariableDeclaration[24601-24616]:SingleVariableDeclaration[23756-23771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24618-24724]:Block[23773-23879]"
    }, {
      "left" : "return new File(buildDir, String.format(\"%s/src/%s\", binary.getName(), taskName));",
      "right" : "return new File(buildDir, String.format(\"%s/src/%s\", binary.getName(), taskName));",
      "info" : "ReturnStatement[24632-24714]:ReturnStatement[23787-23869]"
    } ]
  },
  "interFileMappings" : { }
}