{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "IterableSubject",
      "right" : "IterableSubject",
      "info" : "TypeDeclaration[1499-18587]:TypeDeclaration[1499-19256]"
    }, {
      "left" : "static <T, C extends Iterable<T>>\n      IterableSubject<? extends IterableSubject<?, T, C>, T, C> create(\n          FailureStrategy failureStrategy, @Nullable Iterable<T> list)",
      "right" : "static <T, C extends Iterable<T>>\n      IterableSubject<? extends IterableSubject<?, T, C>, T, C> create(\n          FailureStrategy failureStrategy, @Nullable Iterable<T> list)",
      "info" : "MethodDeclaration[1709-1993]:MethodDeclaration[1709-1993]"
    }, {
      "left" : "protected IterableSubject(FailureStrategy failureStrategy, @Nullable C list)",
      "right" : "protected IterableSubject(FailureStrategy failureStrategy, @Nullable C list)",
      "info" : "MethodDeclaration[1997-2113]:MethodDeclaration[1997-2113]"
    }, {
      "left" : "public final void isEmpty()",
      "right" : "public final void isEmpty()",
      "info" : "MethodDeclaration[2117-2276]:MethodDeclaration[2117-2276]"
    }, {
      "left" : "public final void isNotEmpty()",
      "right" : "public final void isNotEmpty()",
      "info" : "MethodDeclaration[2280-2784]:MethodDeclaration[2280-2784]"
    }, {
      "left" : "public final void hasSize(int expectedSize)",
      "right" : "public final void hasSize(int expectedSize)",
      "info" : "MethodDeclaration[2788-3160]:MethodDeclaration[2788-3160]"
    }, {
      "left" : "public final void contains(@Nullable Object element)",
      "right" : "public final void contains(@Nullable Object element)",
      "info" : "MethodDeclaration[3164-3475]:MethodDeclaration[3164-3475]"
    }, {
      "left" : "public final void doesNotContain(@Nullable Object element)",
      "right" : "public final void doesNotContain(@Nullable Object element)",
      "info" : "MethodDeclaration[3479-3807]:MethodDeclaration[3479-3807]"
    }, {
      "left" : "public final void containsNoDuplicates()",
      "right" : "public final void containsNoDuplicates()",
      "info" : "MethodDeclaration[3811-4297]:MethodDeclaration[3811-4297]"
    }, {
      "left" : "public final void containsAnyOf(\n      @Nullable Object first, @Nullable Object second, @Nullable Object... rest)",
      "right" : "public final void containsAnyOf(\n      @Nullable Object first, @Nullable Object second, @Nullable Object... rest)",
      "info" : "MethodDeclaration[4301-4592]:MethodDeclaration[4301-4592]"
    }, {
      "left" : "public final void containsAnyIn(Iterable<?> expected)",
      "right" : "public final void containsAnyIn(Iterable<?> expected)",
      "info" : "MethodDeclaration[4596-4841]:MethodDeclaration[4596-4841]"
    }, {
      "left" : "private void containsAny(String failVerb, Iterable<?> expected)",
      "right" : "private void containsAny(String failVerb, Iterable<?> expected)",
      "info" : "MethodDeclaration[4845-5611]:MethodDeclaration[4845-5611]"
    }, {
      "left" : "public final Ordered containsAllOf(\n      @Nullable Object first, @Nullable Object second, @Nullable Object... rest)",
      "right" : "public final Ordered containsAllOf(\n      @Nullable Object first, @Nullable Object second, @Nullable Object... rest)",
      "info" : "MethodDeclaration[5615-6173]:MethodDeclaration[5615-6173]"
    }, {
      "left" : "public final Ordered containsAllIn(Iterable<?> expected)",
      "right" : "public final Ordered containsAllIn(Iterable<?> expected)",
      "info" : "MethodDeclaration[6177-6661]:MethodDeclaration[6177-6661]"
    }, {
      "left" : "private Ordered containsAll(String failVerb, Iterable<?> expectedIterable)",
      "right" : "private Ordered containsAll(String failVerb, Iterable<?> expectedIterable)",
      "info" : "MethodDeclaration[6665-8004]:MethodDeclaration[6665-8004]"
    }, {
      "left" : "private static void moveElements(List<?> input, Collection<Object> output, int maxElements)",
      "right" : "private static void moveElements(List<?> input, Collection<Object> output, int maxElements)",
      "info" : "MethodDeclaration[8008-8333]:MethodDeclaration[8008-8333]"
    }, {
      "left" : "public final Ordered containsExactly(@Nullable Object... varargs)",
      "right" : "public final Ordered containsExactly(@Nullable Object... varargs)",
      "info" : "MethodDeclaration[8337-9092]:MethodDeclaration[8337-9092]"
    }, {
      "left" : "public final Ordered containsExactlyElementsIn(Iterable<?> expected)",
      "right" : "public final Ordered containsExactlyElementsIn(Iterable<?> expected)",
      "info" : "MethodDeclaration[9096-9677]:MethodDeclaration[9096-9677]"
    }, {
      "left" : "private Ordered containsExactly(\n      String failVerb, Iterable<?> required, boolean addElementsInWarning)",
      "right" : "private Ordered containsExactly(\n      String failVerb, Iterable<?> required, boolean addElementsInWarning)",
      "info" : "MethodDeclaration[9681-13614]:MethodDeclaration[9681-13614]"
    }, {
      "left" : "protected final void failWithBadResultsAndSuffix(\n      String verb, Object expected, String failVerb, Object actual, String suffix)",
      "right" : "protected final void failWithBadResultsAndSuffix(\n      String verb, Object expected, String failVerb, Object actual, String suffix)",
      "info" : "MethodDeclaration[13618-14366]:MethodDeclaration[13618-14366]"
    }, {
      "left" : "public final void containsNoneOf(\n      @Nullable Object first, @Nullable Object second, @Nullable Object... rest)",
      "right" : "public final void containsNoneOf(\n      @Nullable Object first, @Nullable Object second, @Nullable Object... rest)",
      "info" : "MethodDeclaration[14370-14674]:MethodDeclaration[14370-14674]"
    }, {
      "left" : "public final void containsNoneIn(Iterable<?> excluded)",
      "right" : "public final void containsNoneIn(Iterable<?> excluded)",
      "info" : "MethodDeclaration[14678-14937]:MethodDeclaration[14678-14937]"
    }, {
      "left" : "private void containsNone(String failVerb, Iterable<?> excluded)",
      "right" : "private void containsNone(String failVerb, Iterable<?> excluded)",
      "info" : "MethodDeclaration[14941-15323]:MethodDeclaration[14941-15323]"
    }, {
      "left" : "NotInOrder",
      "right" : "NotInOrder",
      "info" : "TypeDeclaration[15327-15703]:TypeDeclaration[15327-15703]"
    }, {
      "left" : "private final String check;",
      "right" : "private final String check;",
      "info" : "FieldDeclaration[15436-15463]:FieldDeclaration[15436-15463]"
    }, {
      "left" : "private final Iterable<?> required;",
      "right" : "private final Iterable<?> required;",
      "info" : "FieldDeclaration[15468-15503]:FieldDeclaration[15468-15503]"
    }, {
      "left" : "NotInOrder(String check, Iterable<?> required)",
      "right" : "NotInOrder(String check, Iterable<?> required)",
      "info" : "MethodDeclaration[15509-15621]:MethodDeclaration[15509-15621]"
    }, {
      "left" : "public void inOrder()",
      "right" : "public void inOrder()",
      "info" : "MethodDeclaration[15627-15699]:MethodDeclaration[15627-15699]"
    }, {
      "left" : "private static final Ordered IN_ORDER =\n      new Ordered() {\n        @Override\n        public void inOrder() {}\n      };",
      "right" : "private static final Ordered IN_ORDER =\n      new Ordered() {\n        @Override\n        public void inOrder() {}\n      };",
      "info" : "FieldDeclaration[15707-15925]:FieldDeclaration[15707-15925]"
    }, {
      "left" : "public void inOrder()",
      "right" : "public void inOrder()",
      "info" : "MethodDeclaration[15874-15916]:MethodDeclaration[15874-15916]"
    }, {
      "left" : "public final void isStrictlyOrdered()",
      "right" : "public final void isStrictlyOrdered()",
      "info" : "MethodDeclaration[15929-16319]:MethodDeclaration[15929-16319]"
    }, {
      "left" : "public final void isStrictlyOrdered(final Comparator<? super T> comparator)",
      "right" : "public final void isStrictlyOrdered(final Comparator<? super T> comparator)",
      "info" : "MethodDeclaration[16323-16979]:MethodDeclaration[16323-16979]"
    }, {
      "left" : "public void check(T prev, T next)",
      "right" : "public void check(T prev, T next)",
      "info" : "MethodDeclaration[16772-16963]:MethodDeclaration[16772-16963]"
    }, {
      "left" : "// TODO(kak): Rename to isOrdered after we release 0.26 without the old isOrdered()\n  public final void isPartiallyOrdered()",
      "right" : "public final void isPartiallyOrdered()",
      "info" : "MethodDeclaration[16983-17452]:MethodDeclaration[17352-17760]"
    }, {
      "left" : "// TODO(kak): Rename to isOrdered after we release 0.26 without the old isOrdered()\n  public final void isPartiallyOrdered(final Comparator<? super T> comparator)",
      "right" : "public final void isPartiallyOrdered(final Comparator<? super T> comparator)",
      "info" : "MethodDeclaration[17456-18190]:MethodDeclaration[18407-18859]"
    }, {
      "left" : "public void check(T prev, T next)",
      "right" : "public void check(T prev, T next)",
      "info" : "MethodDeclaration[17983-18174]:MethodDeclaration[18196-18387]"
    }, {
      "left" : "PairwiseChecker",
      "right" : "PairwiseChecker",
      "info" : "TypeDeclaration[18194-18268]:TypeDeclaration[18863-18937]"
    }, {
      "left" : "void check(T prev, T next);",
      "right" : "void check(T prev, T next);",
      "info" : "MethodDeclaration[18237-18264]:MethodDeclaration[18906-18933]"
    }, {
      "left" : "private void pairwiseCheck(PairwiseChecker<T> checker)",
      "right" : "private void pairwiseCheck(PairwiseChecker<T> checker)",
      "info" : "MethodDeclaration[18272-18585]:MethodDeclaration[18941-19254]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1588-1594]:Modifier[1588-1594]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1595-1600]:TYPE_DECLARATION_KIND[1595-1600]"
    }, {
      "left" : "IterableSubject",
      "right" : "IterableSubject",
      "info" : "SimpleName[1601-1616]:SimpleName[1601-1616]"
    }, {
      "left" : "@SuppressWarnings({\"unchecked\", \"rawtypes\"})",
      "right" : "@SuppressWarnings({\"unchecked\", \"rawtypes\"})",
      "info" : "SingleMemberAnnotation[1709-1753]:SingleMemberAnnotation[1709-1753]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1756-1762]:Modifier[1756-1762]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[1764-1765]:TypeParameter[1764-1765]"
    }, {
      "left" : "C extends Iterable<T>",
      "right" : "C extends Iterable<T>",
      "info" : "TypeParameter[1767-1788]:TypeParameter[1767-1788]"
    }, {
      "left" : "IterableSubject<? extends IterableSubject<?, T, C>, T, C>",
      "right" : "IterableSubject<? extends IterableSubject<?, T, C>, T, C>",
      "info" : "ParameterizedType[1796-1853]:ParameterizedType[1796-1853]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[1854-1860]:SimpleName[1854-1860]"
    }, {
      "left" : "FailureStrategy failureStrategy",
      "right" : "FailureStrategy failureStrategy",
      "info" : "SingleVariableDeclaration[1872-1903]:SingleVariableDeclaration[1872-1903]"
    }, {
      "left" : "@Nullable Iterable<T> list",
      "right" : "@Nullable Iterable<T> list",
      "info" : "SingleVariableDeclaration[1905-1931]:SingleVariableDeclaration[1905-1931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1933-1993]:Block[1933-1993]"
    }, {
      "left" : "return new IterableSubject(failureStrategy, list);",
      "right" : "return new IterableSubject(failureStrategy, list);",
      "info" : "ReturnStatement[1939-1989]:ReturnStatement[1939-1989]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1997-2006]:Modifier[1997-2006]"
    }, {
      "left" : "IterableSubject",
      "right" : "IterableSubject",
      "info" : "SimpleName[2007-2022]:SimpleName[2007-2022]"
    }, {
      "left" : "FailureStrategy failureStrategy",
      "right" : "FailureStrategy failureStrategy",
      "info" : "SingleVariableDeclaration[2023-2054]:SingleVariableDeclaration[2023-2054]"
    }, {
      "left" : "@Nullable C list",
      "right" : "@Nullable C list",
      "info" : "SingleVariableDeclaration[2056-2072]:SingleVariableDeclaration[2056-2072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2074-2113]:Block[2074-2113]"
    }, {
      "left" : "super(failureStrategy, list);",
      "right" : "super(failureStrategy, list);",
      "info" : "SuperConstructorInvocation[2080-2109]:SuperConstructorInvocation[2080-2109]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2169-2175]:Modifier[2169-2175]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[2176-2181]:Modifier[2176-2181]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2182-2186]:PrimitiveType[2182-2186]"
    }, {
      "left" : "isEmpty",
      "right" : "isEmpty",
      "info" : "SimpleName[2187-2194]:SimpleName[2187-2194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2197-2276]:Block[2197-2276]"
    }, {
      "left" : "if (!Iterables.isEmpty(getSubject()))",
      "right" : "if (!Iterables.isEmpty(getSubject()))",
      "info" : "IfStatement[2203-2272]:IfStatement[2203-2272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2241-2272]:Block[2241-2272]"
    }, {
      "left" : "fail(\"is empty\");",
      "right" : "fail(\"is empty\");",
      "info" : "ExpressionStatement[2249-2266]:ExpressionStatement[2249-2266]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2328-2334]:Modifier[2328-2334]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[2335-2340]:Modifier[2335-2340]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2341-2345]:PrimitiveType[2341-2345]"
    }, {
      "left" : "isNotEmpty",
      "right" : "isNotEmpty",
      "info" : "SimpleName[2346-2356]:SimpleName[2346-2356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2359-2784]:Block[2359-2784]"
    }, {
      "left" : "if (Iterables.isEmpty(getSubject()))",
      "right" : "if (Iterables.isEmpty(getSubject()))",
      "info" : "IfStatement[2365-2780]:IfStatement[2365-2780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2402-2780]:Block[2402-2780]"
    }, {
      "left" : "fail(\"is not empty\");",
      "right" : "fail(\"is not empty\");",
      "info" : "ExpressionStatement[2753-2774]:ExpressionStatement[2753-2774]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2856-2862]:Modifier[2856-2862]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[2863-2868]:Modifier[2863-2868]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2869-2873]:PrimitiveType[2869-2873]"
    }, {
      "left" : "hasSize",
      "right" : "hasSize",
      "info" : "SimpleName[2874-2881]:SimpleName[2874-2881]"
    }, {
      "left" : "int expectedSize",
      "right" : "int expectedSize",
      "info" : "SingleVariableDeclaration[2882-2898]:SingleVariableDeclaration[2882-2898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2900-3160]:Block[2900-3160]"
    }, {
      "left" : "checkArgument(expectedSize >= 0, \"expectedSize(%s) must be >= 0\", expectedSize);",
      "right" : "checkArgument(expectedSize >= 0, \"expectedSize(%s) must be >= 0\", expectedSize);",
      "info" : "ExpressionStatement[2906-2986]:ExpressionStatement[2906-2986]"
    }, {
      "left" : "int actualSize = Iterables.size(getSubject());",
      "right" : "int actualSize = Iterables.size(getSubject());",
      "info" : "VariableDeclarationStatement[2991-3037]:VariableDeclarationStatement[2991-3037]"
    }, {
      "left" : "if (actualSize != expectedSize)",
      "right" : "if (actualSize != expectedSize)",
      "info" : "IfStatement[3042-3156]:IfStatement[3042-3156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3074-3156]:Block[3074-3156]"
    }, {
      "left" : "failWithBadResults(\"has a size of\", expectedSize, \"is\", actualSize);",
      "right" : "failWithBadResults(\"has a size of\", expectedSize, \"is\", actualSize);",
      "info" : "ExpressionStatement[3082-3150]:ExpressionStatement[3082-3150]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3268-3274]:Modifier[3268-3274]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[3275-3280]:Modifier[3275-3280]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3281-3285]:PrimitiveType[3281-3285]"
    }, {
      "left" : "contains",
      "right" : "contains",
      "info" : "SimpleName[3286-3294]:SimpleName[3286-3294]"
    }, {
      "left" : "@Nullable Object element",
      "right" : "@Nullable Object element",
      "info" : "SingleVariableDeclaration[3295-3319]:SingleVariableDeclaration[3295-3319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3321-3475]:Block[3321-3475]"
    }, {
      "left" : "if (!Iterables.contains(getSubject(), element))",
      "right" : "if (!Iterables.contains(getSubject(), element))",
      "info" : "IfStatement[3327-3471]:IfStatement[3327-3471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3375-3471]:Block[3375-3471]"
    }, {
      "left" : "failWithRawMessage(\"%s should have contained <%s>\", getDisplaySubject(), element);",
      "right" : "failWithRawMessage(\"%s should have contained <%s>\", getDisplaySubject(), element);",
      "info" : "ExpressionStatement[3383-3465]:ExpressionStatement[3383-3465]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3591-3597]:Modifier[3591-3597]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[3598-3603]:Modifier[3598-3603]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3604-3608]:PrimitiveType[3604-3608]"
    }, {
      "left" : "doesNotContain",
      "right" : "doesNotContain",
      "info" : "SimpleName[3609-3623]:SimpleName[3609-3623]"
    }, {
      "left" : "@Nullable Object element",
      "right" : "@Nullable Object element",
      "info" : "SingleVariableDeclaration[3624-3648]:SingleVariableDeclaration[3624-3648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3650-3807]:Block[3650-3807]"
    }, {
      "left" : "if (Iterables.contains(getSubject(), element))",
      "right" : "if (Iterables.contains(getSubject(), element))",
      "info" : "IfStatement[3656-3803]:IfStatement[3656-3803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3703-3803]:Block[3703-3803]"
    }, {
      "left" : "failWithRawMessage(\"%s should not have contained <%s>\", getDisplaySubject(), element);",
      "right" : "failWithRawMessage(\"%s should not have contained <%s>\", getDisplaySubject(), element);",
      "info" : "ExpressionStatement[3711-3797]:ExpressionStatement[3711-3797]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3890-3896]:Modifier[3890-3896]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[3897-3902]:Modifier[3897-3902]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3903-3907]:PrimitiveType[3903-3907]"
    }, {
      "left" : "containsNoDuplicates",
      "right" : "containsNoDuplicates",
      "info" : "SimpleName[3908-3928]:SimpleName[3908-3928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3931-4297]:Block[3931-4297]"
    }, {
      "left" : "List<Entry<T>> duplicates = Lists.newArrayList();",
      "right" : "List<Entry<T>> duplicates = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[3937-3986]:VariableDeclarationStatement[3937-3986]"
    }, {
      "left" : "for (Multiset.Entry<T> entry : LinkedHashMultiset.create(getSubject()).entrySet())",
      "right" : "for (Multiset.Entry<T> entry : LinkedHashMultiset.create(getSubject()).entrySet())",
      "info" : "EnhancedForStatement[3991-4154]:EnhancedForStatement[3991-4154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4074-4154]:Block[4074-4154]"
    }, {
      "left" : "if (entry.getCount() > 1)",
      "right" : "if (entry.getCount() > 1)",
      "info" : "IfStatement[4082-4148]:IfStatement[4082-4148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4108-4148]:Block[4108-4148]"
    }, {
      "left" : "duplicates.add(entry);",
      "right" : "duplicates.add(entry);",
      "info" : "ExpressionStatement[4118-4140]:ExpressionStatement[4118-4140]"
    }, {
      "left" : "if (!duplicates.isEmpty())",
      "right" : "if (!duplicates.isEmpty())",
      "info" : "IfStatement[4159-4293]:IfStatement[4159-4293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4186-4293]:Block[4186-4293]"
    }, {
      "left" : "failWithRawMessage(\"%s has the following duplicates: <%s>\", getDisplaySubject(), duplicates);",
      "right" : "failWithRawMessage(\"%s has the following duplicates: <%s>\", getDisplaySubject(), duplicates);",
      "info" : "ExpressionStatement[4194-4287]:ExpressionStatement[4194-4287]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4404-4410]:Modifier[4404-4410]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[4411-4416]:Modifier[4411-4416]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4417-4421]:PrimitiveType[4417-4421]"
    }, {
      "left" : "containsAnyOf",
      "right" : "containsAnyOf",
      "info" : "SimpleName[4422-4435]:SimpleName[4422-4435]"
    }, {
      "left" : "@Nullable Object first",
      "right" : "@Nullable Object first",
      "info" : "SingleVariableDeclaration[4443-4465]:SingleVariableDeclaration[4443-4465]"
    }, {
      "left" : "@Nullable Object second",
      "right" : "@Nullable Object second",
      "info" : "SingleVariableDeclaration[4467-4490]:SingleVariableDeclaration[4467-4490]"
    }, {
      "left" : "@Nullable Object... rest",
      "right" : "@Nullable Object... rest",
      "info" : "SingleVariableDeclaration[4492-4516]:SingleVariableDeclaration[4492-4516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4518-4592]:Block[4518-4592]"
    }, {
      "left" : "containsAny(\"contains any of\", accumulate(first, second, rest));",
      "right" : "containsAny(\"contains any of\", accumulate(first, second, rest));",
      "info" : "ExpressionStatement[4524-4588]:ExpressionStatement[4524-4588]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4728-4734]:Modifier[4728-4734]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[4735-4740]:Modifier[4735-4740]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4741-4745]:PrimitiveType[4741-4745]"
    }, {
      "left" : "containsAnyIn",
      "right" : "containsAnyIn",
      "info" : "SimpleName[4746-4759]:SimpleName[4746-4759]"
    }, {
      "left" : "Iterable<?> expected",
      "right" : "Iterable<?> expected",
      "info" : "SingleVariableDeclaration[4760-4780]:SingleVariableDeclaration[4760-4780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4782-4841]:Block[4782-4841]"
    }, {
      "left" : "containsAny(\"contains any element in\", expected);",
      "right" : "containsAny(\"contains any element in\", expected);",
      "info" : "ExpressionStatement[4788-4837]:ExpressionStatement[4788-4837]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4845-4852]:Modifier[4845-4852]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4853-4857]:PrimitiveType[4853-4857]"
    }, {
      "left" : "containsAny",
      "right" : "containsAny",
      "info" : "SimpleName[4858-4869]:SimpleName[4858-4869]"
    }, {
      "left" : "String failVerb",
      "right" : "String failVerb",
      "info" : "SingleVariableDeclaration[4870-4885]:SingleVariableDeclaration[4870-4885]"
    }, {
      "left" : "Iterable<?> expected",
      "right" : "Iterable<?> expected",
      "info" : "SingleVariableDeclaration[4887-4907]:SingleVariableDeclaration[4887-4907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4909-5611]:Block[4909-5611]"
    }, {
      "left" : "Collection<T> subject;",
      "right" : "Collection<T> subject;",
      "info" : "VariableDeclarationStatement[4915-4937]:VariableDeclarationStatement[4915-4937]"
    }, {
      "left" : "if (getSubject() instanceof Collection)",
      "right" : "if (getSubject() instanceof Collection)",
      "info" : "IfStatement[4942-5475]:IfStatement[4942-5475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4982-5170]:Block[4982-5170]"
    }, {
      "left" : "subject = (Collection<T>) getSubject();",
      "right" : "subject = (Collection<T>) getSubject();",
      "info" : "ExpressionStatement[5125-5164]:ExpressionStatement[5125-5164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5176-5475]:Block[5176-5475]"
    }, {
      "left" : "subject = Lists.newArrayList(getSubject());",
      "right" : "subject = Lists.newArrayList(getSubject());",
      "info" : "ExpressionStatement[5426-5469]:ExpressionStatement[5426-5469]"
    }, {
      "left" : "for (Object item : expected)",
      "right" : "for (Object item : expected)",
      "info" : "EnhancedForStatement[5481-5577]:EnhancedForStatement[5481-5577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5510-5577]:Block[5510-5577]"
    }, {
      "left" : "if (subject.contains(item))",
      "right" : "if (subject.contains(item))",
      "info" : "IfStatement[5518-5571]:IfStatement[5518-5571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5546-5571]:Block[5546-5571]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5556-5563]:ReturnStatement[5556-5563]"
    }, {
      "left" : "fail(failVerb, expected);",
      "right" : "fail(failVerb, expected);",
      "info" : "ExpressionStatement[5582-5607]:ExpressionStatement[5582-5607]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5975-5981]:Modifier[5975-5981]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5982-5987]:Modifier[5982-5987]"
    }, {
      "left" : "Ordered",
      "right" : "Ordered",
      "info" : "SimpleType[5988-5995]:SimpleType[5988-5995]"
    }, {
      "left" : "containsAllOf",
      "right" : "containsAllOf",
      "info" : "SimpleName[5996-6009]:SimpleName[5996-6009]"
    }, {
      "left" : "@Nullable Object first",
      "right" : "@Nullable Object first",
      "info" : "SingleVariableDeclaration[6017-6039]:SingleVariableDeclaration[6017-6039]"
    }, {
      "left" : "@Nullable Object second",
      "right" : "@Nullable Object second",
      "info" : "SingleVariableDeclaration[6041-6064]:SingleVariableDeclaration[6041-6064]"
    }, {
      "left" : "@Nullable Object... rest",
      "right" : "@Nullable Object... rest",
      "info" : "SingleVariableDeclaration[6066-6090]:SingleVariableDeclaration[6066-6090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6092-6173]:Block[6092-6173]"
    }, {
      "left" : "return containsAll(\"contains all of\", accumulate(first, second, rest));",
      "right" : "return containsAll(\"contains all of\", accumulate(first, second, rest));",
      "info" : "ReturnStatement[6098-6169]:ReturnStatement[6098-6169]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6537-6543]:Modifier[6537-6543]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[6544-6549]:Modifier[6544-6549]"
    }, {
      "left" : "Ordered",
      "right" : "Ordered",
      "info" : "SimpleType[6550-6557]:SimpleType[6550-6557]"
    }, {
      "left" : "containsAllIn",
      "right" : "containsAllIn",
      "info" : "SimpleName[6558-6571]:SimpleName[6558-6571]"
    }, {
      "left" : "Iterable<?> expected",
      "right" : "Iterable<?> expected",
      "info" : "SingleVariableDeclaration[6572-6592]:SingleVariableDeclaration[6572-6592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6594-6661]:Block[6594-6661]"
    }, {
      "left" : "return containsAll(\"contains all elements in\", expected);",
      "right" : "return containsAll(\"contains all elements in\", expected);",
      "info" : "ReturnStatement[6600-6657]:ReturnStatement[6600-6657]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6665-6672]:Modifier[6665-6672]"
    }, {
      "left" : "Ordered",
      "right" : "Ordered",
      "info" : "SimpleType[6673-6680]:SimpleType[6673-6680]"
    }, {
      "left" : "containsAll",
      "right" : "containsAll",
      "info" : "SimpleName[6681-6692]:SimpleName[6681-6692]"
    }, {
      "left" : "String failVerb",
      "right" : "String failVerb",
      "info" : "SingleVariableDeclaration[6693-6708]:SingleVariableDeclaration[6693-6708]"
    }, {
      "left" : "Iterable<?> expectedIterable",
      "right" : "Iterable<?> expectedIterable",
      "info" : "SingleVariableDeclaration[6710-6738]:SingleVariableDeclaration[6710-6738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6740-8004]:Block[6740-8004]"
    }, {
      "left" : "List<?> actual = Lists.newLinkedList(getSubject());",
      "right" : "List<?> actual = Lists.newLinkedList(getSubject());",
      "info" : "VariableDeclarationStatement[6746-6797]:VariableDeclarationStatement[6746-6797]"
    }, {
      "left" : "List<?> expected = Lists.newArrayList(expectedIterable);",
      "right" : "List<?> expected = Lists.newArrayList(expectedIterable);",
      "info" : "VariableDeclarationStatement[6802-6858]:VariableDeclarationStatement[6802-6858]"
    }, {
      "left" : "List<Object> missing = Lists.newArrayList();",
      "right" : "List<Object> missing = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[6864-6908]:VariableDeclarationStatement[6864-6908]"
    }, {
      "left" : "List<Object> actualNotInOrder = Lists.newArrayList();",
      "right" : "List<Object> actualNotInOrder = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[6913-6966]:VariableDeclarationStatement[6913-6966]"
    }, {
      "left" : "boolean ordered = true;",
      "right" : "boolean ordered = true;",
      "info" : "VariableDeclarationStatement[6972-6995]:VariableDeclarationStatement[6972-6995]"
    }, {
      "left" : "for (Object e : expected)",
      "right" : "for (Object e : expected)",
      "info" : "EnhancedForStatement[7045-7732]:EnhancedForStatement[7045-7732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7071-7732]:Block[7071-7732]"
    }, {
      "left" : "int index = actual.indexOf(e);",
      "right" : "int index = actual.indexOf(e);",
      "info" : "VariableDeclarationStatement[7079-7109]:VariableDeclarationStatement[7079-7109]"
    }, {
      "left" : "if (index != -1)",
      "right" : "if (index != -1)",
      "info" : "IfStatement[7116-7726]:IfStatement[7116-7726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7133-7412]:Block[7133-7412]"
    }, {
      "left" : "moveElements(actual, actualNotInOrder, index);",
      "right" : "moveElements(actual, actualNotInOrder, index);",
      "info" : "ExpressionStatement[7277-7323]:ExpressionStatement[7277-7323]"
    }, {
      "left" : "actual.remove(0);",
      "right" : "actual.remove(0);",
      "info" : "ExpressionStatement[7387-7404]:ExpressionStatement[7387-7404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7418-7726]:Block[7418-7726]"
    }, {
      "left" : "if (actualNotInOrder.remove(e))",
      "right" : "if (actualNotInOrder.remove(e))",
      "info" : "IfStatement[7482-7718]:IfStatement[7482-7718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7514-7605]:Block[7514-7605]"
    }, {
      "left" : "ordered = false;",
      "right" : "ordered = false;",
      "info" : "ExpressionStatement[7579-7595]:ExpressionStatement[7579-7595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7611-7718]:Block[7611-7718]"
    }, {
      "left" : "missing.add(e);",
      "right" : "missing.add(e);",
      "info" : "ExpressionStatement[7693-7708]:ExpressionStatement[7693-7708]"
    }, {
      "left" : "if (!missing.isEmpty())",
      "right" : "if (!missing.isEmpty())",
      "info" : "IfStatement[7791-7908]:IfStatement[7791-7908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7815-7908]:Block[7815-7908]"
    }, {
      "left" : "failWithBadResults(failVerb, expected, \"is missing\", countDuplicates(missing));",
      "right" : "failWithBadResults(failVerb, expected, \"is missing\", countDuplicates(missing));",
      "info" : "ExpressionStatement[7823-7902]:ExpressionStatement[7823-7902]"
    }, {
      "left" : "return ordered ? IN_ORDER : new NotInOrder(\"contains all elements in order\", expected);",
      "right" : "return ordered ? IN_ORDER : new NotInOrder(\"contains all elements in order\", expected);",
      "info" : "ReturnStatement[7913-8000]:ReturnStatement[7913-8000]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8151-8158]:Modifier[8151-8158]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8159-8165]:Modifier[8159-8165]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8166-8170]:PrimitiveType[8166-8170]"
    }, {
      "left" : "moveElements",
      "right" : "moveElements",
      "info" : "SimpleName[8171-8183]:SimpleName[8171-8183]"
    }, {
      "left" : "List<?> input",
      "right" : "List<?> input",
      "info" : "SingleVariableDeclaration[8184-8197]:SingleVariableDeclaration[8184-8197]"
    }, {
      "left" : "Collection<Object> output",
      "right" : "Collection<Object> output",
      "info" : "SingleVariableDeclaration[8199-8224]:SingleVariableDeclaration[8199-8224]"
    }, {
      "left" : "int maxElements",
      "right" : "int maxElements",
      "info" : "SingleVariableDeclaration[8226-8241]:SingleVariableDeclaration[8226-8241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8243-8333]:Block[8243-8333]"
    }, {
      "left" : "for (int i = 0; i < maxElements; i++)",
      "right" : "for (int i = 0; i < maxElements; i++)",
      "info" : "ForStatement[8249-8329]:ForStatement[8249-8329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8287-8329]:Block[8287-8329]"
    }, {
      "left" : "output.add(input.remove(0));",
      "right" : "output.add(input.remove(0));",
      "info" : "ExpressionStatement[8295-8323]:ExpressionStatement[8295-8323]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8763-8769]:Modifier[8763-8769]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[8770-8775]:Modifier[8770-8775]"
    }, {
      "left" : "Ordered",
      "right" : "Ordered",
      "info" : "SimpleType[8776-8783]:SimpleType[8776-8783]"
    }, {
      "left" : "containsExactly",
      "right" : "containsExactly",
      "info" : "SimpleName[8784-8799]:SimpleName[8784-8799]"
    }, {
      "left" : "@Nullable Object... varargs",
      "right" : "@Nullable Object... varargs",
      "info" : "SingleVariableDeclaration[8800-8827]:SingleVariableDeclaration[8800-8827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8829-9092]:Block[8829-9092]"
    }, {
      "left" : "List<Object> expected = (varargs == null) ? Lists.newArrayList((Object) null) : asList(varargs);",
      "right" : "List<Object> expected = (varargs == null) ? Lists.newArrayList((Object) null) : asList(varargs);",
      "info" : "VariableDeclarationStatement[8835-8931]:VariableDeclarationStatement[8835-8931]"
    }, {
      "left" : "return containsExactly(\n        \"contains exactly\",\n        expected,\n        varargs != null && varargs.length == 1 && varargs[0] instanceof Iterable);",
      "right" : "return containsExactly(\n        \"contains exactly\",\n        expected,\n        varargs != null && varargs.length == 1 && varargs[0] instanceof Iterable);",
      "info" : "ReturnStatement[8936-9088]:ReturnStatement[8936-9088]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9538-9544]:Modifier[9538-9544]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[9545-9550]:Modifier[9545-9550]"
    }, {
      "left" : "Ordered",
      "right" : "Ordered",
      "info" : "SimpleType[9551-9558]:SimpleType[9551-9558]"
    }, {
      "left" : "containsExactlyElementsIn",
      "right" : "containsExactlyElementsIn",
      "info" : "SimpleName[9559-9584]:SimpleName[9559-9584]"
    }, {
      "left" : "Iterable<?> expected",
      "right" : "Iterable<?> expected",
      "info" : "SingleVariableDeclaration[9585-9605]:SingleVariableDeclaration[9585-9605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9607-9677]:Block[9607-9677]"
    }, {
      "left" : "return containsExactly(\"contains exactly\", expected, false);",
      "right" : "return containsExactly(\"contains exactly\", expected, false);",
      "info" : "ReturnStatement[9613-9673]:ReturnStatement[9613-9673]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9681-9688]:Modifier[9681-9688]"
    }, {
      "left" : "Ordered",
      "right" : "Ordered",
      "info" : "SimpleType[9689-9696]:SimpleType[9689-9696]"
    }, {
      "left" : "containsExactly",
      "right" : "containsExactly",
      "info" : "SimpleName[9697-9712]:SimpleName[9697-9712]"
    }, {
      "left" : "String failVerb",
      "right" : "String failVerb",
      "info" : "SingleVariableDeclaration[9720-9735]:SingleVariableDeclaration[9720-9735]"
    }, {
      "left" : "Iterable<?> required",
      "right" : "Iterable<?> required",
      "info" : "SingleVariableDeclaration[9737-9757]:SingleVariableDeclaration[9737-9757]"
    }, {
      "left" : "boolean addElementsInWarning",
      "right" : "boolean addElementsInWarning",
      "info" : "SingleVariableDeclaration[9759-9787]:SingleVariableDeclaration[9759-9787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9789-13614]:Block[9789-13614]"
    }, {
      "left" : "String failSuffix = addElementsInWarning\n        ? \". Passing an iterable to the varargs method containsExactly(Object...) is \"\n            + \"often not the correct thing to do. Did you mean to call \"\n            + \"containsExactlyElementsIn(Iterable) instead?\"\n        : \"\";",
      "right" : "String failSuffix = addElementsInWarning\n        ? \". Passing an iterable to the varargs method containsExactly(Object...) is \"\n            + \"often not the correct thing to do. Did you mean to call \"\n            + \"containsExactlyElementsIn(Iterable) instead?\"\n        : \"\";",
      "info" : "VariableDeclarationStatement[9795-10070]:VariableDeclarationStatement[9795-10070]"
    }, {
      "left" : "Iterator<?> actualIter = getSubject().iterator();",
      "right" : "Iterator<?> actualIter = getSubject().iterator();",
      "info" : "VariableDeclarationStatement[10075-10124]:VariableDeclarationStatement[10075-10124]"
    }, {
      "left" : "Iterator<?> requiredIter = required.iterator();",
      "right" : "Iterator<?> requiredIter = required.iterator();",
      "info" : "VariableDeclarationStatement[10129-10176]:VariableDeclarationStatement[10129-10176]"
    }, {
      "left" : "while (actualIter.hasNext() && requiredIter.hasNext())",
      "right" : "while (actualIter.hasNext() && requiredIter.hasNext())",
      "info" : "WhileStatement[10246-12748]:WhileStatement[10246-12748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10301-12748]:Block[10301-12748]"
    }, {
      "left" : "Object actualElement = actualIter.next();",
      "right" : "Object actualElement = actualIter.next();",
      "info" : "VariableDeclarationStatement[10309-10350]:VariableDeclarationStatement[10309-10350]"
    }, {
      "left" : "Object requiredElement = requiredIter.next();",
      "right" : "Object requiredElement = requiredIter.next();",
      "info" : "VariableDeclarationStatement[10357-10402]:VariableDeclarationStatement[10357-10402]"
    }, {
      "left" : "if (!Objects.equal(actualElement, requiredElement))",
      "right" : "if (!Objects.equal(actualElement, requiredElement))",
      "info" : "IfStatement[10702-12742]:IfStatement[10702-12742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10754-12742]:Block[10754-12742]"
    }, {
      "left" : "Collection<Object> missing = Lists.newArrayList();",
      "right" : "Collection<Object> missing = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[10854-10904]:VariableDeclarationStatement[10854-10904]"
    }, {
      "left" : "missing.add(requiredElement);",
      "right" : "missing.add(requiredElement);",
      "info" : "ExpressionStatement[10913-10942]:ExpressionStatement[10913-10942]"
    }, {
      "left" : "Iterators.addAll(missing, requiredIter);",
      "right" : "Iterators.addAll(missing, requiredIter);",
      "info" : "ExpressionStatement[10951-10991]:ExpressionStatement[10951-10991]"
    }, {
      "left" : "Collection<Object> extra = Lists.newArrayList();",
      "right" : "Collection<Object> extra = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[11068-11116]:VariableDeclarationStatement[11068-11116]"
    }, {
      "left" : "if (!missing.remove(actualElement))",
      "right" : "if (!missing.remove(actualElement))",
      "info" : "IfStatement[11235-11318]:IfStatement[11235-11318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11271-11318]:Block[11271-11318]"
    }, {
      "left" : "extra.add(actualElement);",
      "right" : "extra.add(actualElement);",
      "info" : "ExpressionStatement[11283-11308]:ExpressionStatement[11283-11308]"
    }, {
      "left" : "while (actualIter.hasNext())",
      "right" : "while (actualIter.hasNext())",
      "info" : "WhileStatement[11327-11490]:WhileStatement[11327-11490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11356-11490]:Block[11356-11490]"
    }, {
      "left" : "Object item = actualIter.next();",
      "right" : "Object item = actualIter.next();",
      "info" : "VariableDeclarationStatement[11368-11400]:VariableDeclarationStatement[11368-11400]"
    }, {
      "left" : "if (!missing.remove(item))",
      "right" : "if (!missing.remove(item))",
      "info" : "IfStatement[11411-11480]:IfStatement[11411-11480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11438-11480]:Block[11438-11480]"
    }, {
      "left" : "extra.add(item);",
      "right" : "extra.add(item);",
      "info" : "ExpressionStatement[11452-11468]:ExpressionStatement[11452-11468]"
    }, {
      "left" : "if (!missing.isEmpty())",
      "right" : "if (!missing.isEmpty())",
      "info" : "IfStatement[11740-12383]:IfStatement[11740-12383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11764-12383]:Block[11764-12383]"
    }, {
      "left" : "if (!extra.isEmpty())",
      "right" : "if (!extra.isEmpty())",
      "info" : "IfStatement[11776-12373]:IfStatement[11776-12373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11798-12224]:Block[11798-12224]"
    }, {
      "left" : "failWithRawMessage(\n                \"Not true that %s %s <%s>. It is missing <%s> and has unexpected items <%s>%s\",\n                getDisplaySubject(),\n                failVerb,\n                required,\n                countDuplicates(missing),\n                countDuplicates(extra),\n                failSuffix);",
      "right" : "failWithRawMessage(\n                \"Not true that %s %s <%s>. It is missing <%s> and has unexpected items <%s>%s\",\n                getDisplaySubject(),\n                failVerb,\n                required,\n                countDuplicates(missing),\n                countDuplicates(extra),\n                failSuffix);",
      "info" : "ExpressionStatement[11897-12212]:ExpressionStatement[11897-12212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12230-12373]:Block[12230-12373]"
    }, {
      "left" : "failWithBadResultsAndSuffix(\n                failVerb, required, \"is missing\", countDuplicates(missing), failSuffix);",
      "right" : "failWithBadResultsAndSuffix(\n                failVerb, required, \"is missing\", countDuplicates(missing), failSuffix);",
      "info" : "ExpressionStatement[12244-12361]:ExpressionStatement[12244-12361]"
    }, {
      "left" : "if (!extra.isEmpty())",
      "right" : "if (!extra.isEmpty())",
      "info" : "IfStatement[12392-12559]:IfStatement[12392-12559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12414-12559]:Block[12414-12559]"
    }, {
      "left" : "failWithBadResultsAndSuffix(\n              failVerb, required, \"has unexpected items\", countDuplicates(extra), failSuffix);",
      "right" : "failWithBadResultsAndSuffix(\n              failVerb, required, \"has unexpected items\", countDuplicates(extra), failSuffix);",
      "info" : "ExpressionStatement[12426-12549]:ExpressionStatement[12426-12549]"
    }, {
      "left" : "return new NotInOrder(\"contains only these elements in order\", required);",
      "right" : "return new NotInOrder(\"contains only these elements in order\", required);",
      "info" : "ReturnStatement[12661-12734]:ReturnStatement[12661-12734]"
    }, {
      "left" : "if (actualIter.hasNext())",
      "right" : "if (actualIter.hasNext())",
      "info" : "IfStatement[13010-13458]:IfStatement[13010-13458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13036-13234]:Block[13036-13234]"
    }, {
      "left" : "failWithBadResultsAndSuffix(\n          failVerb,\n          required,\n          \"has unexpected items\",\n          countDuplicates(Lists.newArrayList(actualIter)),\n          failSuffix);",
      "right" : "failWithBadResultsAndSuffix(\n          failVerb,\n          required,\n          \"has unexpected items\",\n          countDuplicates(Lists.newArrayList(actualIter)),\n          failSuffix);",
      "info" : "ExpressionStatement[13044-13228]:ExpressionStatement[13044-13228]"
    }, {
      "left" : "if (requiredIter.hasNext())",
      "right" : "if (requiredIter.hasNext())",
      "info" : "IfStatement[13240-13458]:IfStatement[13240-13458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13268-13458]:Block[13268-13458]"
    }, {
      "left" : "failWithBadResultsAndSuffix(\n          failVerb,\n          required,\n          \"is missing\",\n          countDuplicates(Lists.newArrayList(requiredIter)),\n          failSuffix);",
      "right" : "failWithBadResultsAndSuffix(\n          failVerb,\n          required,\n          \"is missing\",\n          countDuplicates(Lists.newArrayList(requiredIter)),\n          failSuffix);",
      "info" : "ExpressionStatement[13276-13452]:ExpressionStatement[13276-13452]"
    }, {
      "left" : "return IN_ORDER;",
      "right" : "return IN_ORDER;",
      "info" : "ReturnStatement[13594-13610]:ReturnStatement[13594-13610]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14002-14011]:Modifier[14002-14011]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[14012-14017]:Modifier[14012-14017]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14018-14022]:PrimitiveType[14018-14022]"
    }, {
      "left" : "failWithBadResultsAndSuffix",
      "right" : "failWithBadResultsAndSuffix",
      "info" : "SimpleName[14023-14050]:SimpleName[14023-14050]"
    }, {
      "left" : "String verb",
      "right" : "String verb",
      "info" : "SingleVariableDeclaration[14058-14069]:SingleVariableDeclaration[14058-14069]"
    }, {
      "left" : "Object expected",
      "right" : "Object expected",
      "info" : "SingleVariableDeclaration[14071-14086]:SingleVariableDeclaration[14071-14086]"
    }, {
      "left" : "String failVerb",
      "right" : "String failVerb",
      "info" : "SingleVariableDeclaration[14088-14103]:SingleVariableDeclaration[14088-14103]"
    }, {
      "left" : "Object actual",
      "right" : "Object actual",
      "info" : "SingleVariableDeclaration[14105-14118]:SingleVariableDeclaration[14105-14118]"
    }, {
      "left" : "String suffix",
      "right" : "String suffix",
      "info" : "SingleVariableDeclaration[14120-14133]:SingleVariableDeclaration[14120-14133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14135-14366]:Block[14135-14366]"
    }, {
      "left" : "failWithRawMessage(\n        \"Not true that %s %s <%s>. It %s <%s>%s\",\n        getDisplaySubject(),\n        verb,\n        expected,\n        failVerb,\n        ((actual == null) ? \"null reference\" : actual),\n        suffix);",
      "right" : "failWithRawMessage(\n        \"Not true that %s %s <%s>. It %s <%s>%s\",\n        getDisplaySubject(),\n        verb,\n        expected,\n        failVerb,\n        ((actual == null) ? \"null reference\" : actual),\n        suffix);",
      "info" : "ExpressionStatement[14141-14362]:ExpressionStatement[14141-14362]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14483-14489]:Modifier[14483-14489]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[14490-14495]:Modifier[14490-14495]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14496-14500]:PrimitiveType[14496-14500]"
    }, {
      "left" : "containsNoneOf",
      "right" : "containsNoneOf",
      "info" : "SimpleName[14501-14515]:SimpleName[14501-14515]"
    }, {
      "left" : "@Nullable Object first",
      "right" : "@Nullable Object first",
      "info" : "SingleVariableDeclaration[14523-14545]:SingleVariableDeclaration[14523-14545]"
    }, {
      "left" : "@Nullable Object second",
      "right" : "@Nullable Object second",
      "info" : "SingleVariableDeclaration[14547-14570]:SingleVariableDeclaration[14547-14570]"
    }, {
      "left" : "@Nullable Object... rest",
      "right" : "@Nullable Object... rest",
      "info" : "SingleVariableDeclaration[14572-14596]:SingleVariableDeclaration[14572-14596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14598-14674]:Block[14598-14674]"
    }, {
      "left" : "containsNone(\"contains none of\", accumulate(first, second, rest));",
      "right" : "containsNone(\"contains none of\", accumulate(first, second, rest));",
      "info" : "ExpressionStatement[14604-14670]:ExpressionStatement[14604-14670]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14822-14828]:Modifier[14822-14828]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[14829-14834]:Modifier[14829-14834]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14835-14839]:PrimitiveType[14835-14839]"
    }, {
      "left" : "containsNoneIn",
      "right" : "containsNoneIn",
      "info" : "SimpleName[14840-14854]:SimpleName[14840-14854]"
    }, {
      "left" : "Iterable<?> excluded",
      "right" : "Iterable<?> excluded",
      "info" : "SingleVariableDeclaration[14855-14875]:SingleVariableDeclaration[14855-14875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14877-14937]:Block[14877-14937]"
    }, {
      "left" : "containsNone(\"contains no elements in\", excluded);",
      "right" : "containsNone(\"contains no elements in\", excluded);",
      "info" : "ExpressionStatement[14883-14933]:ExpressionStatement[14883-14933]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14941-14948]:Modifier[14941-14948]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14949-14953]:PrimitiveType[14949-14953]"
    }, {
      "left" : "containsNone",
      "right" : "containsNone",
      "info" : "SimpleName[14954-14966]:SimpleName[14954-14966]"
    }, {
      "left" : "String failVerb",
      "right" : "String failVerb",
      "info" : "SingleVariableDeclaration[14967-14982]:SingleVariableDeclaration[14967-14982]"
    }, {
      "left" : "Iterable<?> excluded",
      "right" : "Iterable<?> excluded",
      "info" : "SingleVariableDeclaration[14984-15004]:SingleVariableDeclaration[14984-15004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15006-15323]:Block[15006-15323]"
    }, {
      "left" : "Collection<Object> present = new ArrayList<Object>();",
      "right" : "Collection<Object> present = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[15012-15065]:VariableDeclarationStatement[15012-15065]"
    }, {
      "left" : "for (Object item : Sets.newLinkedHashSet(excluded))",
      "right" : "for (Object item : Sets.newLinkedHashSet(excluded))",
      "info" : "EnhancedForStatement[15070-15216]:EnhancedForStatement[15070-15216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15122-15216]:Block[15122-15216]"
    }, {
      "left" : "if (Iterables.contains(getSubject(), item))",
      "right" : "if (Iterables.contains(getSubject(), item))",
      "info" : "IfStatement[15130-15210]:IfStatement[15130-15210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15174-15210]:Block[15174-15210]"
    }, {
      "left" : "present.add(item);",
      "right" : "present.add(item);",
      "info" : "ExpressionStatement[15184-15202]:ExpressionStatement[15184-15202]"
    }, {
      "left" : "if (!present.isEmpty())",
      "right" : "if (!present.isEmpty())",
      "info" : "IfStatement[15221-15319]:IfStatement[15221-15319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15245-15319]:Block[15245-15319]"
    }, {
      "left" : "failWithBadResults(failVerb, excluded, \"contains\", present);",
      "right" : "failWithBadResults(failVerb, excluded, \"contains\", present);",
      "info" : "ExpressionStatement[15253-15313]:ExpressionStatement[15253-15313]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15386-15393]:Modifier[15386-15393]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[15394-15399]:TYPE_DECLARATION_KIND[15394-15399]"
    }, {
      "left" : "NotInOrder",
      "right" : "NotInOrder",
      "info" : "SimpleName[15400-15410]:SimpleName[15400-15410]"
    }, {
      "left" : "Ordered",
      "right" : "Ordered",
      "info" : "SimpleType[15422-15429]:SimpleType[15422-15429]"
    }, {
      "left" : "NotInOrder",
      "right" : "NotInOrder",
      "info" : "SimpleName[15509-15519]:SimpleName[15509-15519]"
    }, {
      "left" : "String check",
      "right" : "String check",
      "info" : "SingleVariableDeclaration[15520-15532]:SingleVariableDeclaration[15520-15532]"
    }, {
      "left" : "Iterable<?> required",
      "right" : "Iterable<?> required",
      "info" : "SingleVariableDeclaration[15534-15554]:SingleVariableDeclaration[15534-15554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15556-15621]:Block[15556-15621]"
    }, {
      "left" : "this.check = check;",
      "right" : "this.check = check;",
      "info" : "ExpressionStatement[15564-15583]:ExpressionStatement[15564-15583]"
    }, {
      "left" : "this.required = required;",
      "right" : "this.required = required;",
      "info" : "ExpressionStatement[15590-15615]:ExpressionStatement[15590-15615]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15627-15636]:MarkerAnnotation[15627-15636]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15641-15647]:Modifier[15641-15647]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15648-15652]:PrimitiveType[15648-15652]"
    }, {
      "left" : "inOrder",
      "right" : "inOrder",
      "info" : "SimpleName[15653-15660]:SimpleName[15653-15660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15663-15699]:Block[15663-15699]"
    }, {
      "left" : "fail(check, required);",
      "right" : "fail(check, required);",
      "info" : "ExpressionStatement[15671-15693]:ExpressionStatement[15671-15693]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15874-15883]:MarkerAnnotation[15874-15883]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15892-15898]:Modifier[15892-15898]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15899-15903]:PrimitiveType[15899-15903]"
    }, {
      "left" : "inOrder",
      "right" : "inOrder",
      "info" : "SimpleName[15904-15911]:SimpleName[15904-15911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15914-15916]:Block[15914-15916]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16222-16228]:Modifier[16222-16228]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16229-16234]:Modifier[16229-16234]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16235-16239]:PrimitiveType[16235-16239]"
    }, {
      "left" : "isStrictlyOrdered",
      "right" : "isStrictlyOrdered",
      "info" : "SimpleName[16240-16257]:SimpleName[16240-16257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16260-16319]:Block[16260-16319]"
    }, {
      "left" : "isStrictlyOrdered((Ordering) Ordering.natural());",
      "right" : "isStrictlyOrdered((Ordering) Ordering.natural());",
      "info" : "ExpressionStatement[16266-16315]:ExpressionStatement[16266-16315]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16600-16606]:Modifier[16600-16606]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16607-16612]:Modifier[16607-16612]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16613-16617]:PrimitiveType[16613-16617]"
    }, {
      "left" : "isStrictlyOrdered",
      "right" : "isStrictlyOrdered",
      "info" : "SimpleName[16618-16635]:SimpleName[16618-16635]"
    }, {
      "left" : "final Comparator<? super T> comparator",
      "right" : "final Comparator<? super T> comparator",
      "info" : "SingleVariableDeclaration[16636-16674]:SingleVariableDeclaration[16636-16674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16676-16979]:Block[16676-16979]"
    }, {
      "left" : "checkNotNull(comparator);",
      "right" : "checkNotNull(comparator);",
      "info" : "ExpressionStatement[16682-16707]:ExpressionStatement[16682-16707]"
    }, {
      "left" : "pairwiseCheck(\n        new PairwiseChecker<T>() {\n          @Override\n          public void check(T prev, T next) {\n            if (comparator.compare(prev, next) >= 0) {\n              fail(\"is strictly ordered\", prev, next);\n            }\n          }\n        });",
      "right" : "pairwiseCheck(\n        new PairwiseChecker<T>() {\n          @Override\n          public void check(T prev, T next) {\n            if (comparator.compare(prev, next) >= 0) {\n              fail(\"is strictly ordered\", prev, next);\n            }\n          }\n        });",
      "info" : "ExpressionStatement[16712-16975]:ExpressionStatement[16712-16975]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16772-16781]:MarkerAnnotation[16772-16781]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16792-16798]:Modifier[16792-16798]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16799-16803]:PrimitiveType[16799-16803]"
    }, {
      "left" : "check",
      "right" : "check",
      "info" : "SimpleName[16804-16809]:SimpleName[16804-16809]"
    }, {
      "left" : "T prev",
      "right" : "T prev",
      "info" : "SingleVariableDeclaration[16810-16816]:SingleVariableDeclaration[16810-16816]"
    }, {
      "left" : "T next",
      "right" : "T next",
      "info" : "SingleVariableDeclaration[16818-16824]:SingleVariableDeclaration[16818-16824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16826-16963]:Block[16826-16963]"
    }, {
      "left" : "if (comparator.compare(prev, next) >= 0)",
      "right" : "if (comparator.compare(prev, next) >= 0)",
      "info" : "IfStatement[16840-16951]:IfStatement[16840-16951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16881-16951]:Block[16881-16951]"
    }, {
      "left" : "fail(\"is strictly ordered\", prev, next);",
      "right" : "fail(\"is strictly ordered\", prev, next);",
      "info" : "ExpressionStatement[16897-16937]:ExpressionStatement[16897-16937]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17353-17359]:Modifier[17699-17705]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[17360-17365]:Modifier[17706-17711]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17366-17370]:PrimitiveType[17712-17716]"
    }, {
      "left" : "isPartiallyOrdered",
      "right" : "isPartiallyOrdered",
      "info" : "SimpleName[17371-17389]:SimpleName[17717-17735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17392-17452]:Block[17738-17760]"
    }, {
      "left" : "isPartiallyOrdered",
      "right" : "isOrdered",
      "info" : "SimpleName[17398-17416]:SimpleName[17744-17753]"
    }, {
      "left" : "isPartiallyOrdered((Ordering) Ordering.natural());",
      "right" : "isOrdered();",
      "info" : "ExpressionStatement[17398-17448]:ExpressionStatement[17744-17756]"
    }, {
      "left" : "(Ordering) Ordering.natural()",
      "right" : "(Ordering) Ordering.natural()",
      "info" : "METHOD_INVOCATION_ARGUMENTS[17417-17446]:METHOD_INVOCATION_ARGUMENTS[17313-17342]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17810-17816]:Modifier[18750-18756]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[17817-17822]:Modifier[18757-18762]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17823-17827]:PrimitiveType[18763-18767]"
    }, {
      "left" : "isPartiallyOrdered",
      "right" : "isPartiallyOrdered",
      "info" : "SimpleName[17828-17846]:SimpleName[18768-18786]"
    }, {
      "left" : "final Comparator<? super T> comparator",
      "right" : "final Comparator<? super T> comparator",
      "info" : "SingleVariableDeclaration[17847-17885]:SingleVariableDeclaration[18787-18825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17887-18190]:Block[18827-18859]"
    }, {
      "left" : "checkNotNull(comparator);",
      "right" : "checkNotNull(comparator);",
      "info" : "ExpressionStatement[17893-17918]:ExpressionStatement[18106-18131]"
    }, {
      "left" : "pairwiseCheck(\n        new PairwiseChecker<T>() {\n          @Override\n          public void check(T prev, T next) {\n            if (comparator.compare(prev, next) > 0) {\n              fail(\"is partially ordered\", prev, next);\n            }\n          }\n        });",
      "right" : "pairwiseCheck(\n        new PairwiseChecker<T>() {\n          @Override\n          public void check(T prev, T next) {\n            if (comparator.compare(prev, next) > 0) {\n              fail(\"is partially ordered\", prev, next);\n            }\n          }\n        });",
      "info" : "ExpressionStatement[17923-18186]:ExpressionStatement[18136-18399]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17983-17992]:MarkerAnnotation[18196-18205]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18003-18009]:Modifier[18216-18222]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18010-18014]:PrimitiveType[18223-18227]"
    }, {
      "left" : "check",
      "right" : "check",
      "info" : "SimpleName[18015-18020]:SimpleName[18228-18233]"
    }, {
      "left" : "T prev",
      "right" : "T prev",
      "info" : "SingleVariableDeclaration[18021-18027]:SingleVariableDeclaration[18234-18240]"
    }, {
      "left" : "T next",
      "right" : "T next",
      "info" : "SingleVariableDeclaration[18029-18035]:SingleVariableDeclaration[18242-18248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18037-18174]:Block[18250-18387]"
    }, {
      "left" : "if (comparator.compare(prev, next) > 0)",
      "right" : "if (comparator.compare(prev, next) > 0)",
      "info" : "IfStatement[18051-18162]:IfStatement[18264-18375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18091-18162]:Block[18304-18375]"
    }, {
      "left" : "fail(\"is partially ordered\", prev, next);",
      "right" : "fail(\"is partially ordered\", prev, next);",
      "info" : "ExpressionStatement[18107-18148]:ExpressionStatement[18320-18361]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18194-18201]:Modifier[18863-18870]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[18202-18211]:TYPE_DECLARATION_KIND[18871-18880]"
    }, {
      "left" : "PairwiseChecker",
      "right" : "PairwiseChecker",
      "info" : "SimpleName[18212-18227]:SimpleName[18881-18896]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18237-18241]:PrimitiveType[18906-18910]"
    }, {
      "left" : "check",
      "right" : "check",
      "info" : "SimpleName[18242-18247]:SimpleName[18911-18916]"
    }, {
      "left" : "T prev",
      "right" : "T prev",
      "info" : "SingleVariableDeclaration[18248-18254]:SingleVariableDeclaration[18917-18923]"
    }, {
      "left" : "T next",
      "right" : "T next",
      "info" : "SingleVariableDeclaration[18256-18262]:SingleVariableDeclaration[18925-18931]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18272-18279]:Modifier[18941-18948]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18280-18284]:PrimitiveType[18949-18953]"
    }, {
      "left" : "pairwiseCheck",
      "right" : "pairwiseCheck",
      "info" : "SimpleName[18285-18298]:SimpleName[18954-18967]"
    }, {
      "left" : "PairwiseChecker<T> checker",
      "right" : "PairwiseChecker<T> checker",
      "info" : "SingleVariableDeclaration[18299-18325]:SingleVariableDeclaration[18968-18994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18327-18585]:Block[18996-19254]"
    }, {
      "left" : "Iterator<T> iterator = getSubject().iterator();",
      "right" : "Iterator<T> iterator = getSubject().iterator();",
      "info" : "VariableDeclarationStatement[18333-18380]:VariableDeclarationStatement[19002-19049]"
    }, {
      "left" : "if (iterator.hasNext())",
      "right" : "if (iterator.hasNext())",
      "info" : "IfStatement[18385-18581]:IfStatement[19054-19250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18409-18581]:Block[19078-19250]"
    }, {
      "left" : "T prev = iterator.next();",
      "right" : "T prev = iterator.next();",
      "info" : "VariableDeclarationStatement[18417-18442]:VariableDeclarationStatement[19086-19111]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[18449-18575]:WhileStatement[19118-19244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18476-18575]:Block[19145-19244]"
    }, {
      "left" : "T next = iterator.next();",
      "right" : "T next = iterator.next();",
      "info" : "VariableDeclarationStatement[18486-18511]:VariableDeclarationStatement[19155-19180]"
    }, {
      "left" : "checker.check(prev, next);",
      "right" : "checker.check(prev, next);",
      "info" : "ExpressionStatement[18520-18546]:ExpressionStatement[19189-19215]"
    }, {
      "left" : "prev = next;",
      "right" : "prev = next;",
      "info" : "ExpressionStatement[18555-18567]:ExpressionStatement[19224-19236]"
    } ]
  },
  "interFileMappings" : { }
}