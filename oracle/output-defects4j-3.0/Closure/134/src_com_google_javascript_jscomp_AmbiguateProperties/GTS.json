{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AmbiguateProperties",
      "right" : "AmbiguateProperties",
      "info" : "TypeDeclaration[2186-20781]:TypeDeclaration[2186-20853]"
    }, {
      "left" : "private static final Logger logger = Logger.getLogger(\n      AmbiguateProperties.class.getName());",
      "right" : "private static final Logger logger = Logger.getLogger(\n      AmbiguateProperties.class.getName());",
      "info" : "FieldDeclaration[2798-2896]:FieldDeclaration[2798-2896]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2900-2940]:FieldDeclaration[2900-2940]"
    }, {
      "left" : "private final List<Node> stringNodesToRename = Lists.newArrayList();",
      "right" : "private final List<Node> stringNodesToRename = Lists.newArrayList();",
      "info" : "FieldDeclaration[2944-3012]:FieldDeclaration[2944-3012]"
    }, {
      "left" : "private final char[] reservedCharacters;",
      "right" : "private final char[] reservedCharacters;",
      "info" : "FieldDeclaration[3015-3055]:FieldDeclaration[3015-3055]"
    }, {
      "left" : "private final Map<String, Property> propertyMap = Maps.newHashMap();",
      "right" : "private final Map<String, Property> propertyMap = Maps.newHashMap();",
      "info" : "FieldDeclaration[3059-3178]:FieldDeclaration[3059-3178]"
    }, {
      "left" : "private final Set<String> externedNames = Sets.newHashSet();",
      "right" : "private final Set<String> externedNames = Sets.newHashSet();",
      "info" : "FieldDeclaration[3182-3289]:FieldDeclaration[3182-3289]"
    }, {
      "left" : "private final Set<String> quotedNames = Sets.newHashSet();",
      "right" : "private final Set<String> quotedNames = Sets.newHashSet();",
      "info" : "FieldDeclaration[3293-3432]:FieldDeclaration[3293-3432]"
    }, {
      "left" : "private final Map<String, String> renamingMap = Maps.newHashMap();",
      "right" : "private final Map<String, String> renamingMap = Maps.newHashMap();",
      "info" : "FieldDeclaration[3436-3556]:FieldDeclaration[3436-3556]"
    }, {
      "left" : "private final Map<Integer, String> colorMap = Maps.newHashMap();",
      "right" : "private final Map<Integer, String> colorMap = Maps.newHashMap();",
      "info" : "FieldDeclaration[3560-3687]:FieldDeclaration[3560-3687]"
    }, {
      "left" : "private static final Comparator<Property> FREQUENCY_COMPARATOR =\n      new Comparator<Property>() {\n        public int compare(Property p1, Property p2) {\n          if (p1.numOccurrences != p2.numOccurrences) {\n            return p2.numOccurrences - p1.numOccurrences;\n          }\n          return p1.oldName.compareTo(p2.oldName);\n        }\n      };",
      "right" : "private static final Comparator<Property> FREQUENCY_COMPARATOR =\n      new Comparator<Property>() {\n        public int compare(Property p1, Property p2) {\n          if (p1.numOccurrences != p2.numOccurrences) {\n            return p2.numOccurrences - p1.numOccurrences;\n          }\n          return p1.oldName.compareTo(p2.oldName);\n        }\n      };",
      "info" : "FieldDeclaration[3691-4173]:FieldDeclaration[3691-4173]"
    }, {
      "left" : "public int compare(Property p1, Property p2)",
      "right" : "public int compare(Property p1, Property p2)",
      "info" : "MethodDeclaration[3931-4164]:MethodDeclaration[3931-4164]"
    }, {
      "left" : "private BiMap<JSType, Integer> intForType = HashBiMap.create();",
      "right" : "private BiMap<JSType, Integer> intForType = HashBiMap.create();",
      "info" : "FieldDeclaration[4177-4303]:FieldDeclaration[4177-4303]"
    }, {
      "left" : "private Map<JSType, JSTypeBitSet> relatedBitsets = Maps.newHashMap();",
      "right" : "private Map<JSType, JSTypeBitSet> relatedBitsets = Maps.newHashMap();",
      "info" : "FieldDeclaration[4307-4476]:FieldDeclaration[4307-4476]"
    }, {
      "left" : "private final Set<JSType> invalidatingTypes;",
      "right" : "private final Set<JSType> invalidatingTypes;",
      "info" : "FieldDeclaration[4480-4593]:FieldDeclaration[4480-4593]"
    }, {
      "left" : "static final String SKIP_PREFIX = \"JSAbstractCompiler\";",
      "right" : "static final String SKIP_PREFIX = \"JSAbstractCompiler\";",
      "info" : "FieldDeclaration[4597-4768]:FieldDeclaration[4597-4768]"
    }, {
      "left" : "AmbiguateProperties(AbstractCompiler compiler,\n      char[] reservedCharacters)",
      "right" : "AmbiguateProperties(AbstractCompiler compiler,\n      char[] reservedCharacters)",
      "info" : "MethodDeclaration[4772-5886]:MethodDeclaration[4772-5886]"
    }, {
      "left" : "private void addInvalidatingType(JSType type)",
      "right" : "private void addInvalidatingType(JSType type)",
      "info" : "MethodDeclaration[5890-6424]:MethodDeclaration[5890-6424]"
    }, {
      "left" : "Map<String, String> getRenamingMap()",
      "right" : "Map<String, String> getRenamingMap()",
      "info" : "MethodDeclaration[6428-6494]:MethodDeclaration[6428-6494]"
    }, {
      "left" : "private int getIntForType(JSType type)",
      "right" : "private int getIntForType(JSType type)",
      "info" : "MethodDeclaration[6498-6790]:MethodDeclaration[6498-6790]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[6794-8880]:MethodDeclaration[6794-8843]"
    }, {
      "left" : "private BitSet getRelatedTypesOnNonUnion(JSType type)",
      "right" : "private BitSet getRelatedTypesOnNonUnion(JSType type)",
      "info" : "MethodDeclaration[8884-9316]:MethodDeclaration[8847-9279]"
    }, {
      "left" : "private void computeRelatedTypes(JSType type)",
      "right" : "private void computeRelatedTypes(JSType type)",
      "info" : "MethodDeclaration[9320-10607]:MethodDeclaration[9283-10570]"
    }, {
      "left" : "PropertyGraph",
      "right" : "PropertyGraph",
      "info" : "TypeDeclaration[10611-11482]:TypeDeclaration[10574-11445]"
    }, {
      "left" : "protected final Map<Property, PropertyGraphNode> nodes = Maps.newHashMap();",
      "right" : "protected final Map<Property, PropertyGraphNode> nodes = Maps.newHashMap();",
      "info" : "FieldDeclaration[10679-10754]:FieldDeclaration[10642-10717]"
    }, {
      "left" : "PropertyGraph(Collection<Property> props)",
      "right" : "PropertyGraph(Collection<Property> props)",
      "info" : "MethodDeclaration[10760-10907]:MethodDeclaration[10723-10870]"
    }, {
      "left" : "public List<GraphNode<Property, Void>> getNodes()",
      "right" : "public List<GraphNode<Property, Void>> getNodes()",
      "info" : "MethodDeclaration[10913-11046]:MethodDeclaration[10876-11009]"
    }, {
      "left" : "public GraphNode<Property, Void> getNode(Property property)",
      "right" : "public GraphNode<Property, Void> getNode(Property property)",
      "info" : "MethodDeclaration[11052-11153]:MethodDeclaration[11015-11116]"
    }, {
      "left" : "public SubGraph<Property, Void> newSubGraph()",
      "right" : "public SubGraph<Property, Void> newSubGraph()",
      "info" : "MethodDeclaration[11159-11249]:MethodDeclaration[11122-11212]"
    }, {
      "left" : "public void clearNodeAnnotations()",
      "right" : "public void clearNodeAnnotations()",
      "info" : "MethodDeclaration[11255-11393]:MethodDeclaration[11218-11356]"
    }, {
      "left" : "public int getWeight(Property value)",
      "right" : "public int getWeight(Property value)",
      "info" : "MethodDeclaration[11399-11478]:MethodDeclaration[11362-11441]"
    }, {
      "left" : "PropertySubGraph",
      "right" : "PropertySubGraph",
      "info" : "TypeDeclaration[11486-13642]:TypeDeclaration[11449-13603]"
    }, {
      "left" : "JSTypeBitSet typesInSet = new JSTypeBitSet(intForType.size());",
      "right" : "JSTypeBitSet typesInSet = new JSTypeBitSet(intForType.size());",
      "info" : "FieldDeclaration[11705-11839]:FieldDeclaration[11668-11802]"
    }, {
      "left" : "JSTypeBitSet typesRelatedToSet = new JSTypeBitSet(intForType.size());",
      "right" : "JSTypeBitSet typesRelatedToSet = new JSTypeBitSet(intForType.size());",
      "info" : "FieldDeclaration[11845-11971]:FieldDeclaration[11808-11934]"
    }, {
      "left" : "public boolean isIndependentOf(Property prop)",
      "right" : "public boolean isIndependentOf(Property prop)",
      "info" : "MethodDeclaration[11977-12461]:MethodDeclaration[11940-12423]"
    }, {
      "left" : "public void addNode(Property prop)",
      "right" : "public void addNode(Property prop)",
      "info" : "MethodDeclaration[12467-12795]:MethodDeclaration[12429-12756]"
    }, {
      "left" : "private JSTypeBitSet getRelated(JSType type)",
      "right" : "private JSTypeBitSet getRelated(JSType type)",
      "info" : "MethodDeclaration[12801-13331]:MethodDeclaration[12762-13292]"
    }, {
      "left" : "private void intersectRelatedTypesOnNonUnion(\n        JSType type, JSTypeBitSet relatedTypes)",
      "right" : "private void intersectRelatedTypesOnNonUnion(\n        JSType type, JSTypeBitSet relatedTypes)",
      "info" : "MethodDeclaration[13337-13638]:MethodDeclaration[13298-13599]"
    }, {
      "left" : "PropertyGraphNode",
      "right" : "PropertyGraphNode",
      "info" : "TypeDeclaration[13646-14123]:TypeDeclaration[13607-14084]"
    }, {
      "left" : "Property property;",
      "right" : "Property property;",
      "info" : "FieldDeclaration[13713-13731]:FieldDeclaration[13674-13692]"
    }, {
      "left" : "protected Annotation annotation;",
      "right" : "protected Annotation annotation;",
      "info" : "FieldDeclaration[13736-13768]:FieldDeclaration[13697-13729]"
    }, {
      "left" : "PropertyGraphNode(Property property)",
      "right" : "PropertyGraphNode(Property property)",
      "info" : "MethodDeclaration[13774-13850]:MethodDeclaration[13735-13811]"
    }, {
      "left" : "public Property getValue()",
      "right" : "public Property getValue()",
      "info" : "MethodDeclaration[13856-13913]:MethodDeclaration[13817-13874]"
    }, {
      "left" : "public <A extends Annotation> A getAnnotation()",
      "right" : "public <A extends Annotation> A getAnnotation()",
      "info" : "MethodDeclaration[13919-14038]:MethodDeclaration[13880-13999]"
    }, {
      "left" : "public void setAnnotation(Annotation data)",
      "right" : "public void setAnnotation(Annotation data)",
      "info" : "MethodDeclaration[14044-14119]:MethodDeclaration[14005-14080]"
    }, {
      "left" : "ProcessExterns",
      "right" : "ProcessExterns",
      "info" : "TypeDeclaration[14127-14842]:TypeDeclaration[14088-14803]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[14265-14838]:MethodDeclaration[14226-14799]"
    }, {
      "left" : "ProcessProperties",
      "right" : "ProcessProperties",
      "info" : "TypeDeclaration[14846-17193]:TypeDeclaration[14807-17154]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[14999-16557]:MethodDeclaration[14960-16518]"
    }, {
      "left" : "private void maybeMarkCandidate(Node n, JSType type, NodeTraversal t)",
      "right" : "private void maybeMarkCandidate(Node n, JSType type, NodeTraversal t)",
      "info" : "MethodDeclaration[16563-17032]:MethodDeclaration[16524-16993]"
    }, {
      "left" : "private Property recordProperty(String name, JSType type)",
      "right" : "private Property recordProperty(String name, JSType type)",
      "info" : "MethodDeclaration[17038-17189]:MethodDeclaration[16999-17150]"
    }, {
      "left" : "private boolean isInvalidatingType(JSType type)",
      "right" : "private boolean isInvalidatingType(JSType type)",
      "info" : "MethodDeclaration[17197-17925]:MethodDeclaration[17158-17886]"
    }, {
      "left" : "private Property getProperty(String name)",
      "right" : "private Property getProperty(String name)",
      "info" : "MethodDeclaration[17929-18134]:MethodDeclaration[17890-18095]"
    }, {
      "left" : "private JSType getJSType(Node n)",
      "right" : "private JSType getJSType(Node n)",
      "info" : "MethodDeclaration[18138-18750]:MethodDeclaration[18099-18711]"
    }, {
      "left" : "Property",
      "right" : "Property",
      "info" : "TypeDeclaration[18754-20091]:TypeDeclaration[18715-20163]"
    }, {
      "left" : "final String oldName;",
      "right" : "final String oldName;",
      "info" : "FieldDeclaration[18853-18874]:FieldDeclaration[18814-18835]"
    }, {
      "left" : "String newName;",
      "right" : "String newName;",
      "info" : "FieldDeclaration[18896-18911]:FieldDeclaration[18840-18855]"
    }, {
      "left" : "int numOccurrences;",
      "right" : "int numOccurrences;",
      "info" : "FieldDeclaration[18916-18935]:FieldDeclaration[18860-18879]"
    }, {
      "left" : "boolean skipAmbiguating;",
      "right" : "boolean skipAmbiguating;",
      "info" : "FieldDeclaration[18940-18964]:FieldDeclaration[18884-18908]"
    }, {
      "left" : "JSTypeBitSet typesSet = new JSTypeBitSet(intForType.size());",
      "right" : "JSTypeBitSet typesSet = new JSTypeBitSet(intForType.size());",
      "info" : "FieldDeclaration[18969-19029]:FieldDeclaration[18913-18973]"
    }, {
      "left" : "Property(String name)",
      "right" : "Property(String name)",
      "info" : "MethodDeclaration[19035-19244]:MethodDeclaration[19051-19260]"
    }, {
      "left" : "void addType(JSType newType)",
      "right" : "void addType(JSType newType)",
      "info" : "MethodDeclaration[19250-19747]:MethodDeclaration[19266-19763]"
    }, {
      "left" : "private void addNonUnionType(JSType newType)",
      "right" : "private void addNonUnionType(JSType newType)",
      "info" : "MethodDeclaration[19753-20087]:MethodDeclaration[19769-20159]"
    }, {
      "left" : "JSTypeBitSet",
      "right" : "JSTypeBitSet",
      "info" : "TypeDeclaration[20160-20779]:TypeDeclaration[20232-20851]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[20208-20256]:FieldDeclaration[20280-20328]"
    }, {
      "left" : "private JSTypeBitSet(int size)",
      "right" : "private JSTypeBitSet(int size)",
      "info" : "MethodDeclaration[20262-20319]:MethodDeclaration[20334-20391]"
    }, {
      "left" : "private JSTypeBitSet()",
      "right" : "private JSTypeBitSet()",
      "info" : "MethodDeclaration[20325-20370]:MethodDeclaration[20397-20442]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[20376-20775]:MethodDeclaration[20448-20847]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2744-2749]:TYPE_DECLARATION_KIND[2744-2749]"
    }, {
      "left" : "AmbiguateProperties",
      "right" : "AmbiguateProperties",
      "info" : "SimpleName[2750-2769]:SimpleName[2750-2769]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[2781-2793]:SimpleType[2781-2793]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3931-3937]:Modifier[3931-3937]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[3938-3941]:PrimitiveType[3938-3941]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[3942-3949]:SimpleName[3942-3949]"
    }, {
      "left" : "Property p1",
      "right" : "Property p1",
      "info" : "SingleVariableDeclaration[3950-3961]:SingleVariableDeclaration[3950-3961]"
    }, {
      "left" : "Property p2",
      "right" : "Property p2",
      "info" : "SingleVariableDeclaration[3963-3974]:SingleVariableDeclaration[3963-3974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3976-4164]:Block[3976-4164]"
    }, {
      "left" : "if (p1.numOccurrences != p2.numOccurrences)",
      "right" : "if (p1.numOccurrences != p2.numOccurrences)",
      "info" : "IfStatement[3988-4103]:IfStatement[3988-4103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4032-4103]:Block[4032-4103]"
    }, {
      "left" : "return p2.numOccurrences - p1.numOccurrences;",
      "right" : "return p2.numOccurrences - p1.numOccurrences;",
      "info" : "ReturnStatement[4046-4091]:ReturnStatement[4046-4091]"
    }, {
      "left" : "return p1.oldName.compareTo(p2.oldName);",
      "right" : "return p1.oldName.compareTo(p2.oldName);",
      "info" : "ReturnStatement[4114-4154]:ReturnStatement[4114-4154]"
    }, {
      "left" : "AmbiguateProperties",
      "right" : "AmbiguateProperties",
      "info" : "SimpleName[4772-4791]:SimpleName[4772-4791]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[4792-4817]:SingleVariableDeclaration[4792-4817]"
    }, {
      "left" : "char[] reservedCharacters",
      "right" : "char[] reservedCharacters",
      "info" : "SingleVariableDeclaration[4825-4850]:SingleVariableDeclaration[4825-4850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4852-5886]:Block[4852-5886]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[4858-4883]:ExpressionStatement[4858-4883]"
    }, {
      "left" : "this.reservedCharacters = reservedCharacters;",
      "right" : "this.reservedCharacters = reservedCharacters;",
      "info" : "ExpressionStatement[4888-4933]:ExpressionStatement[4888-4933]"
    }, {
      "left" : "JSTypeRegistry r = compiler.getTypeRegistry();",
      "right" : "JSTypeRegistry r = compiler.getTypeRegistry();",
      "info" : "VariableDeclarationStatement[4939-4985]:VariableDeclarationStatement[4939-4985]"
    }, {
      "left" : "invalidatingTypes = Sets.newHashSet(\n        r.getNativeType(JSTypeNative.ALL_TYPE),\n        r.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        r.getNativeType(JSTypeNative.NO_TYPE),\n        r.getNativeType(JSTypeNative.NULL_TYPE),\n        r.getNativeType(JSTypeNative.VOID_TYPE),\n        r.getNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE),\n        r.getNativeType(JSTypeNative.FUNCTION_PROTOTYPE),\n        r.getNativeType(JSTypeNative.GLOBAL_THIS),\n        r.getNativeType(JSTypeNative.OBJECT_TYPE),\n        r.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),\n        r.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),\n        r.getNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE),\n        r.getNativeType(JSTypeNative.UNKNOWN_TYPE));",
      "right" : "invalidatingTypes = Sets.newHashSet(\n        r.getNativeType(JSTypeNative.ALL_TYPE),\n        r.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        r.getNativeType(JSTypeNative.NO_TYPE),\n        r.getNativeType(JSTypeNative.NULL_TYPE),\n        r.getNativeType(JSTypeNative.VOID_TYPE),\n        r.getNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE),\n        r.getNativeType(JSTypeNative.FUNCTION_PROTOTYPE),\n        r.getNativeType(JSTypeNative.GLOBAL_THIS),\n        r.getNativeType(JSTypeNative.OBJECT_TYPE),\n        r.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),\n        r.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),\n        r.getNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE),\n        r.getNativeType(JSTypeNative.UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[4990-5723]:ExpressionStatement[4990-5723]"
    }, {
      "left" : "for (TypeMismatch mis : compiler.getTypeValidator().getMismatches())",
      "right" : "for (TypeMismatch mis : compiler.getTypeValidator().getMismatches())",
      "info" : "EnhancedForStatement[5729-5882]:EnhancedForStatement[5729-5882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5798-5882]:Block[5798-5882]"
    }, {
      "left" : "addInvalidatingType(mis.first);",
      "right" : "addInvalidatingType(mis.first);",
      "info" : "ExpressionStatement[5806-5837]:ExpressionStatement[5806-5837]"
    }, {
      "left" : "addInvalidatingType(mis.second);",
      "right" : "addInvalidatingType(mis.second);",
      "info" : "ExpressionStatement[5844-5876]:ExpressionStatement[5844-5876]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5980-5987]:Modifier[5980-5987]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5988-5992]:PrimitiveType[5988-5992]"
    }, {
      "left" : "addInvalidatingType",
      "right" : "addInvalidatingType",
      "info" : "SimpleName[5993-6012]:SimpleName[5993-6012]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[6013-6024]:SingleVariableDeclaration[6013-6024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6026-6424]:Block[6026-6424]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[6032-6075]:ExpressionStatement[6032-6075]"
    }, {
      "left" : "if (type instanceof UnionType)",
      "right" : "if (type instanceof UnionType)",
      "info" : "IfStatement[6080-6222]:IfStatement[6080-6222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6111-6222]:Block[6111-6222]"
    }, {
      "left" : "for (JSType alt : ((UnionType) type).getAlternates())",
      "right" : "for (JSType alt : ((UnionType) type).getAlternates())",
      "info" : "EnhancedForStatement[6119-6216]:EnhancedForStatement[6119-6216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6173-6216]:Block[6173-6216]"
    }, {
      "left" : "addInvalidatingType(alt);",
      "right" : "addInvalidatingType(alt);",
      "info" : "ExpressionStatement[6183-6208]:ExpressionStatement[6183-6208]"
    }, {
      "left" : "invalidatingTypes.add(type);",
      "right" : "invalidatingTypes.add(type);",
      "info" : "ExpressionStatement[6228-6256]:ExpressionStatement[6228-6256]"
    }, {
      "left" : "ObjectType objType = ObjectType.cast(type);",
      "right" : "ObjectType objType = ObjectType.cast(type);",
      "info" : "VariableDeclarationStatement[6261-6304]:VariableDeclarationStatement[6261-6304]"
    }, {
      "left" : "if (objType instanceof InstanceObjectType)",
      "right" : "if (objType instanceof InstanceObjectType)",
      "info" : "IfStatement[6309-6420]:IfStatement[6309-6420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6352-6420]:Block[6352-6420]"
    }, {
      "left" : "invalidatingTypes.add(objType.getImplicitPrototype());",
      "right" : "invalidatingTypes.add(objType.getImplicitPrototype());",
      "info" : "ExpressionStatement[6360-6414]:ExpressionStatement[6360-6414]"
    }, {
      "left" : "Map<String, String>",
      "right" : "Map<String, String>",
      "info" : "ParameterizedType[6428-6447]:ParameterizedType[6428-6447]"
    }, {
      "left" : "getRenamingMap",
      "right" : "getRenamingMap",
      "info" : "SimpleName[6448-6462]:SimpleName[6448-6462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6465-6494]:Block[6465-6494]"
    }, {
      "left" : "return renamingMap;",
      "right" : "return renamingMap;",
      "info" : "ReturnStatement[6471-6490]:ReturnStatement[6471-6490]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6561-6568]:Modifier[6561-6568]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[6569-6572]:PrimitiveType[6569-6572]"
    }, {
      "left" : "getIntForType",
      "right" : "getIntForType",
      "info" : "SimpleName[6573-6586]:SimpleName[6573-6586]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[6587-6598]:SingleVariableDeclaration[6587-6598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6600-6790]:Block[6600-6790]"
    }, {
      "left" : "if (intForType.containsKey(type))",
      "right" : "if (intForType.containsKey(type))",
      "info" : "IfStatement[6606-6693]:IfStatement[6606-6693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6640-6693]:Block[6640-6693]"
    }, {
      "left" : "return intForType.get(type).intValue();",
      "right" : "return intForType.get(type).intValue();",
      "info" : "ReturnStatement[6648-6687]:ReturnStatement[6648-6687]"
    }, {
      "left" : "int newInt = intForType.size() + 1;",
      "right" : "int newInt = intForType.size() + 1;",
      "info" : "VariableDeclarationStatement[6698-6733]:VariableDeclarationStatement[6698-6733]"
    }, {
      "left" : "intForType.put(type, newInt);",
      "right" : "intForType.put(type, newInt);",
      "info" : "ExpressionStatement[6738-6767]:ExpressionStatement[6738-6767]"
    }, {
      "left" : "return newInt;",
      "right" : "return newInt;",
      "info" : "ReturnStatement[6772-6786]:ReturnStatement[6772-6786]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6794-6800]:Modifier[6794-6800]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6801-6805]:PrimitiveType[6801-6805]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[6806-6813]:SimpleName[6806-6813]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[6814-6826]:SingleVariableDeclaration[6814-6826]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[6828-6837]:SingleVariableDeclaration[6828-6837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6839-8880]:Block[6839-8843]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, externs, new ProcessExterns());",
      "right" : "NodeTraversal.traverse(compiler, externs, new ProcessExterns());",
      "info" : "ExpressionStatement[6845-6909]:ExpressionStatement[6845-6909]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new ProcessProperties());",
      "right" : "NodeTraversal.traverse(compiler, root, new ProcessProperties());",
      "info" : "ExpressionStatement[6914-6978]:ExpressionStatement[6914-6978]"
    }, {
      "left" : "Set<String> reservedNames =\n        new HashSet<String>(externedNames.size() + quotedNames.size());",
      "right" : "Set<String> reservedNames =\n        new HashSet<String>(externedNames.size() + quotedNames.size());",
      "info" : "VariableDeclarationStatement[6984-7083]:VariableDeclarationStatement[6984-7083]"
    }, {
      "left" : "reservedNames.addAll(externedNames);",
      "right" : "reservedNames.addAll(externedNames);",
      "info" : "ExpressionStatement[7088-7124]:ExpressionStatement[7088-7124]"
    }, {
      "left" : "reservedNames.addAll(quotedNames);",
      "right" : "reservedNames.addAll(quotedNames);",
      "info" : "ExpressionStatement[7129-7163]:ExpressionStatement[7129-7163]"
    }, {
      "left" : "int numRenamedPropertyNames = 0;",
      "right" : "int numRenamedPropertyNames = 0;",
      "info" : "VariableDeclarationStatement[7169-7201]:VariableDeclarationStatement[7169-7201]"
    }, {
      "left" : "int numSkippedPropertyNames = 0;",
      "right" : "int numSkippedPropertyNames = 0;",
      "info" : "VariableDeclarationStatement[7206-7238]:VariableDeclarationStatement[7206-7238]"
    }, {
      "left" : "Set<Property> propsByFreq = new TreeSet<Property>(FREQUENCY_COMPARATOR);",
      "right" : "Set<Property> propsByFreq = new TreeSet<Property>(FREQUENCY_COMPARATOR);",
      "info" : "VariableDeclarationStatement[7243-7315]:VariableDeclarationStatement[7243-7315]"
    }, {
      "left" : "for (Property p : propertyMap.values())",
      "right" : "for (Property p : propertyMap.values())",
      "info" : "EnhancedForStatement[7320-7595]:EnhancedForStatement[7320-7558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7360-7595]:Block[7360-7558]"
    }, {
      "left" : "if (!p.skipAmbiguating)",
      "right" : "if (!p.skipAmbiguating)",
      "info" : "IfStatement[7368-7589]:IfStatement[7368-7552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7392-7501]:Block[7392-7464]"
    }, {
      "left" : "++numRenamedPropertyNames;",
      "right" : "++numRenamedPropertyNames;",
      "info" : "ExpressionStatement[7402-7428]:ExpressionStatement[7402-7428]"
    }, {
      "left" : "propsByFreq.add(p);",
      "right" : "propsByFreq.add(p);",
      "info" : "ExpressionStatement[7474-7493]:ExpressionStatement[7437-7456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7507-7589]:Block[7470-7552]"
    }, {
      "left" : "++numSkippedPropertyNames;",
      "right" : "++numSkippedPropertyNames;",
      "info" : "ExpressionStatement[7517-7543]:ExpressionStatement[7480-7506]"
    }, {
      "left" : "reservedNames.add(p.oldName);",
      "right" : "reservedNames.add(p.oldName);",
      "info" : "ExpressionStatement[7552-7581]:ExpressionStatement[7515-7544]"
    }, {
      "left" : "PropertyGraph graph = new PropertyGraph(Lists.newLinkedList(propsByFreq));",
      "right" : "PropertyGraph graph = new PropertyGraph(Lists.newLinkedList(propsByFreq));",
      "info" : "VariableDeclarationStatement[7601-7675]:VariableDeclarationStatement[7564-7638]"
    }, {
      "left" : "GraphColoring<Property, Void> coloring =\n        new GreedyGraphColoring<Property, Void>(graph, FREQUENCY_COMPARATOR);",
      "right" : "GraphColoring<Property, Void> coloring =\n        new GreedyGraphColoring<Property, Void>(graph, FREQUENCY_COMPARATOR);",
      "info" : "VariableDeclarationStatement[7680-7798]:VariableDeclarationStatement[7643-7761]"
    }, {
      "left" : "int numNewPropertyNames = coloring.color();",
      "right" : "int numNewPropertyNames = coloring.color();",
      "info" : "VariableDeclarationStatement[7803-7846]:VariableDeclarationStatement[7766-7809]"
    }, {
      "left" : "NameGenerator nameGen = new NameGenerator(\n        reservedNames, \"\", reservedCharacters);",
      "right" : "NameGenerator nameGen = new NameGenerator(\n        reservedNames, \"\", reservedCharacters);",
      "info" : "VariableDeclarationStatement[7852-7942]:VariableDeclarationStatement[7815-7905]"
    }, {
      "left" : "for (int i = 0; i < numNewPropertyNames; ++i)",
      "right" : "for (int i = 0; i < numNewPropertyNames; ++i)",
      "info" : "ForStatement[7947-8051]:ForStatement[7910-8014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7993-8051]:Block[7956-8014]"
    }, {
      "left" : "colorMap.put(i, nameGen.generateNextName());",
      "right" : "colorMap.put(i, nameGen.generateNextName());",
      "info" : "ExpressionStatement[8001-8045]:ExpressionStatement[7964-8008]"
    }, {
      "left" : "for (GraphNode<Property, Void> node : graph.getNodes())",
      "right" : "for (GraphNode<Property, Void> node : graph.getNodes())",
      "info" : "EnhancedForStatement[8056-8271]:EnhancedForStatement[8019-8234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8112-8271]:Block[8075-8234]"
    }, {
      "left" : "node.getValue().newName = colorMap.get(node.getAnnotation().hashCode());",
      "right" : "node.getValue().newName = colorMap.get(node.getAnnotation().hashCode());",
      "info" : "ExpressionStatement[8120-8192]:ExpressionStatement[8083-8155]"
    }, {
      "left" : "renamingMap.put(node.getValue().oldName, node.getValue().newName);",
      "right" : "renamingMap.put(node.getValue().oldName, node.getValue().newName);",
      "info" : "ExpressionStatement[8199-8265]:ExpressionStatement[8162-8228]"
    }, {
      "left" : "for (Node n : stringNodesToRename)",
      "right" : "for (Node n : stringNodesToRename)",
      "info" : "EnhancedForStatement[8309-8672]:EnhancedForStatement[8272-8635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8344-8672]:Block[8307-8635]"
    }, {
      "left" : "String oldName = n.getString();",
      "right" : "String oldName = n.getString();",
      "info" : "VariableDeclarationStatement[8352-8383]:VariableDeclarationStatement[8315-8346]"
    }, {
      "left" : "Property p = propertyMap.get(oldName);",
      "right" : "Property p = propertyMap.get(oldName);",
      "info" : "VariableDeclarationStatement[8390-8428]:VariableDeclarationStatement[8353-8391]"
    }, {
      "left" : "if (p != null && p.newName != null)",
      "right" : "if (p != null && p.newName != null)",
      "info" : "IfStatement[8435-8666]:IfStatement[8398-8629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8471-8666]:Block[8434-8629]"
    }, {
      "left" : "Preconditions.checkState(oldName.equals(p.oldName));",
      "right" : "Preconditions.checkState(oldName.equals(p.oldName));",
      "info" : "ExpressionStatement[8481-8533]:ExpressionStatement[8444-8496]"
    }, {
      "left" : "if (!p.newName.equals(oldName))",
      "right" : "if (!p.newName.equals(oldName))",
      "info" : "IfStatement[8542-8658]:IfStatement[8505-8621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8574-8658]:Block[8537-8621]"
    }, {
      "left" : "n.setString(p.newName);",
      "right" : "n.setString(p.newName);",
      "info" : "ExpressionStatement[8586-8609]:ExpressionStatement[8549-8572]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[8620-8648]:ExpressionStatement[8583-8611]"
    }, {
      "left" : "logger.info(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"\n                + numNewPropertyNames + \" and skipped renaming \"\n                + numSkippedPropertyNames + \" properties.\");",
      "right" : "logger.info(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"\n                + numNewPropertyNames + \" and skipped renaming \"\n                + numSkippedPropertyNames + \" properties.\");",
      "info" : "ExpressionStatement[8678-8876]:ExpressionStatement[8641-8839]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8884-8891]:Modifier[8847-8854]"
    }, {
      "left" : "BitSet",
      "right" : "BitSet",
      "info" : "SimpleType[8892-8898]:SimpleType[8855-8861]"
    }, {
      "left" : "getRelatedTypesOnNonUnion",
      "right" : "getRelatedTypesOnNonUnion",
      "info" : "SimpleName[8899-8924]:SimpleName[8862-8887]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[8925-8936]:SingleVariableDeclaration[8888-8899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8938-9316]:Block[8901-9279]"
    }, {
      "left" : "if (relatedBitsets.containsKey(type))",
      "right" : "if (relatedBitsets.containsKey(type))",
      "info" : "IfStatement[9058-9312]:IfStatement[9021-9275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9096-9142]:Block[9059-9105]"
    }, {
      "left" : "return relatedBitsets.get(type);",
      "right" : "return relatedBitsets.get(type);",
      "info" : "ReturnStatement[9104-9136]:ReturnStatement[9067-9099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9148-9312]:Block[9111-9275]"
    }, {
      "left" : "throw new RuntimeException(\"Related types should have been computed for\"\n                                 + \" type: \" + type + \" but have not been.\");",
      "right" : "throw new RuntimeException(\"Related types should have been computed for\"\n                                 + \" type: \" + type + \" but have not been.\");",
      "info" : "ThrowStatement[9156-9306]:ThrowStatement[9119-9269]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9394-9401]:Modifier[9357-9364]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9402-9406]:PrimitiveType[9365-9369]"
    }, {
      "left" : "computeRelatedTypes",
      "right" : "computeRelatedTypes",
      "info" : "SimpleName[9407-9426]:SimpleName[9370-9389]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[9427-9438]:SingleVariableDeclaration[9390-9401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9440-10607]:Block[9403-10570]"
    }, {
      "left" : "if (type instanceof UnionType)",
      "right" : "if (type instanceof UnionType)",
      "info" : "IfStatement[9446-9707]:IfStatement[9409-9670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9477-9707]:Block[9440-9670]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[9485-9528]:ExpressionStatement[9448-9491]"
    }, {
      "left" : "if (type instanceof UnionType)",
      "right" : "if (type instanceof UnionType)",
      "info" : "IfStatement[9535-9701]:IfStatement[9498-9664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9566-9701]:Block[9529-9664]"
    }, {
      "left" : "for (JSType alt : ((UnionType) type).getAlternates())",
      "right" : "for (JSType alt : ((UnionType) type).getAlternates())",
      "info" : "EnhancedForStatement[9576-9677]:EnhancedForStatement[9539-9640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9630-9677]:Block[9593-9640]"
    }, {
      "left" : "computeRelatedTypes(alt);",
      "right" : "computeRelatedTypes(alt);",
      "info" : "ExpressionStatement[9642-9667]:ExpressionStatement[9605-9630]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9686-9693]:ReturnStatement[9649-9656]"
    }, {
      "left" : "if (relatedBitsets.containsKey(type))",
      "right" : "if (relatedBitsets.containsKey(type))",
      "info" : "IfStatement[9713-9824]:IfStatement[9676-9787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9751-9824]:Block[9714-9787]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9811-9818]:ReturnStatement[9774-9781]"
    }, {
      "left" : "JSTypeBitSet related = new JSTypeBitSet(intForType.size());",
      "right" : "JSTypeBitSet related = new JSTypeBitSet(intForType.size());",
      "info" : "VariableDeclarationStatement[9830-9889]:VariableDeclarationStatement[9793-9852]"
    }, {
      "left" : "relatedBitsets.put(type, related);",
      "right" : "relatedBitsets.put(type, related);",
      "info" : "ExpressionStatement[9894-9928]:ExpressionStatement[9857-9891]"
    }, {
      "left" : "ObjectType parentType = type.toObjectType();",
      "right" : "ObjectType parentType = type.toObjectType();",
      "info" : "VariableDeclarationStatement[9934-9978]:VariableDeclarationStatement[9897-9941]"
    }, {
      "left" : "while (parentType != null)",
      "right" : "while (parentType != null)",
      "info" : "WhileStatement[9983-10117]:WhileStatement[9946-10080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10010-10117]:Block[9973-10080]"
    }, {
      "left" : "related.set(getIntForType(parentType));",
      "right" : "related.set(getIntForType(parentType));",
      "info" : "ExpressionStatement[10018-10057]:ExpressionStatement[9981-10020]"
    }, {
      "left" : "parentType = parentType.getImplicitPrototype();",
      "right" : "parentType = parentType.getImplicitPrototype();",
      "info" : "ExpressionStatement[10064-10111]:ExpressionStatement[10027-10074]"
    }, {
      "left" : "FunctionType constructor = null;",
      "right" : "FunctionType constructor = null;",
      "info" : "VariableDeclarationStatement[10123-10155]:VariableDeclarationStatement[10086-10118]"
    }, {
      "left" : "if (type instanceof FunctionType)",
      "right" : "if (type instanceof FunctionType)",
      "info" : "IfStatement[10160-10440]:IfStatement[10123-10403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10194-10242]:Block[10157-10205]"
    }, {
      "left" : "constructor = (FunctionType) type;",
      "right" : "constructor = (FunctionType) type;",
      "info" : "ExpressionStatement[10202-10236]:ExpressionStatement[10165-10199]"
    }, {
      "left" : "if (type instanceof FunctionPrototypeType)",
      "right" : "if (type instanceof FunctionPrototypeType)",
      "info" : "IfStatement[10248-10440]:IfStatement[10211-10403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10291-10369]:Block[10254-10332]"
    }, {
      "left" : "constructor = ((FunctionPrototypeType) type).getOwnerFunction();",
      "right" : "constructor = ((FunctionPrototypeType) type).getOwnerFunction();",
      "info" : "ExpressionStatement[10299-10363]:ExpressionStatement[10262-10326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10375-10440]:Block[10338-10403]"
    }, {
      "left" : "constructor = type.toObjectType().getConstructor();",
      "right" : "constructor = type.toObjectType().getConstructor();",
      "info" : "ExpressionStatement[10383-10434]:ExpressionStatement[10346-10397]"
    }, {
      "left" : "if (constructor != null)",
      "right" : "if (constructor != null)",
      "info" : "IfStatement[10445-10603]:IfStatement[10408-10566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10470-10603]:Block[10433-10566]"
    }, {
      "left" : "for (ObjectType itype : constructor.getAllImplementedInterfaces())",
      "right" : "for (ObjectType itype : constructor.getAllImplementedInterfaces())",
      "info" : "EnhancedForStatement[10478-10597]:EnhancedForStatement[10441-10560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10545-10597]:Block[10508-10560]"
    }, {
      "left" : "related.set(getIntForType(itype));",
      "right" : "related.set(getIntForType(itype));",
      "info" : "ExpressionStatement[10555-10589]:ExpressionStatement[10518-10552]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[10611-10616]:TYPE_DECLARATION_KIND[10574-10579]"
    }, {
      "left" : "PropertyGraph",
      "right" : "PropertyGraph",
      "info" : "SimpleName[10617-10630]:SimpleName[10580-10593]"
    }, {
      "left" : "PropertyGraph",
      "right" : "PropertyGraph",
      "info" : "SimpleName[10760-10773]:SimpleName[10723-10736]"
    }, {
      "left" : "Collection<Property> props",
      "right" : "Collection<Property> props",
      "info" : "SingleVariableDeclaration[10774-10800]:SingleVariableDeclaration[10737-10763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10802-10907]:Block[10765-10870]"
    }, {
      "left" : "for (Property prop : props)",
      "right" : "for (Property prop : props)",
      "info" : "EnhancedForStatement[10810-10901]:EnhancedForStatement[10773-10864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10838-10901]:Block[10801-10864]"
    }, {
      "left" : "nodes.put(prop, new PropertyGraphNode(prop));",
      "right" : "nodes.put(prop, new PropertyGraphNode(prop));",
      "info" : "ExpressionStatement[10848-10893]:ExpressionStatement[10811-10856]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10913-10919]:Modifier[10876-10882]"
    }, {
      "left" : "List<GraphNode<Property, Void>>",
      "right" : "List<GraphNode<Property, Void>>",
      "info" : "ParameterizedType[10920-10951]:ParameterizedType[10883-10914]"
    }, {
      "left" : "getNodes",
      "right" : "getNodes",
      "info" : "SimpleName[10952-10960]:SimpleName[10915-10923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10963-11046]:Block[10926-11009]"
    }, {
      "left" : "return Lists.<GraphNode<Property, Void>>newArrayList(nodes.values());",
      "right" : "return Lists.<GraphNode<Property, Void>>newArrayList(nodes.values());",
      "info" : "ReturnStatement[10971-11040]:ReturnStatement[10934-11003]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11052-11058]:Modifier[11015-11021]"
    }, {
      "left" : "GraphNode<Property, Void>",
      "right" : "GraphNode<Property, Void>",
      "info" : "ParameterizedType[11059-11084]:ParameterizedType[11022-11047]"
    }, {
      "left" : "getNode",
      "right" : "getNode",
      "info" : "SimpleName[11085-11092]:SimpleName[11048-11055]"
    }, {
      "left" : "Property property",
      "right" : "Property property",
      "info" : "SingleVariableDeclaration[11093-11110]:SingleVariableDeclaration[11056-11073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11112-11153]:Block[11075-11116]"
    }, {
      "left" : "return nodes.get(property);",
      "right" : "return nodes.get(property);",
      "info" : "ReturnStatement[11120-11147]:ReturnStatement[11083-11110]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11159-11165]:Modifier[11122-11128]"
    }, {
      "left" : "SubGraph<Property, Void>",
      "right" : "SubGraph<Property, Void>",
      "info" : "ParameterizedType[11166-11190]:ParameterizedType[11129-11153]"
    }, {
      "left" : "newSubGraph",
      "right" : "newSubGraph",
      "info" : "SimpleName[11191-11202]:SimpleName[11154-11165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11205-11249]:Block[11168-11212]"
    }, {
      "left" : "return new PropertySubGraph();",
      "right" : "return new PropertySubGraph();",
      "info" : "ReturnStatement[11213-11243]:ReturnStatement[11176-11206]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11255-11261]:Modifier[11218-11224]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11262-11266]:PrimitiveType[11225-11229]"
    }, {
      "left" : "clearNodeAnnotations",
      "right" : "clearNodeAnnotations",
      "info" : "SimpleName[11267-11287]:SimpleName[11230-11250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11290-11393]:Block[11253-11356]"
    }, {
      "left" : "for (PropertyGraphNode node : nodes.values())",
      "right" : "for (PropertyGraphNode node : nodes.values())",
      "info" : "EnhancedForStatement[11298-11387]:EnhancedForStatement[11261-11350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11344-11387]:Block[11307-11350]"
    }, {
      "left" : "node.setAnnotation(null);",
      "right" : "node.setAnnotation(null);",
      "info" : "ExpressionStatement[11354-11379]:ExpressionStatement[11317-11342]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11399-11405]:Modifier[11362-11368]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11406-11409]:PrimitiveType[11369-11372]"
    }, {
      "left" : "getWeight",
      "right" : "getWeight",
      "info" : "SimpleName[11410-11419]:SimpleName[11373-11382]"
    }, {
      "left" : "Property value",
      "right" : "Property value",
      "info" : "SingleVariableDeclaration[11420-11434]:SingleVariableDeclaration[11383-11397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11436-11478]:Block[11399-11441]"
    }, {
      "left" : "return value.numOccurrences;",
      "right" : "return value.numOccurrences;",
      "info" : "ReturnStatement[11444-11472]:ReturnStatement[11407-11435]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11640-11645]:TYPE_DECLARATION_KIND[11603-11608]"
    }, {
      "left" : "PropertySubGraph",
      "right" : "PropertySubGraph",
      "info" : "SimpleName[11646-11662]:SimpleName[11609-11625]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12261-12267]:Modifier[12224-12230]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12268-12275]:PrimitiveType[12231-12238]"
    }, {
      "left" : "isIndependentOf",
      "right" : "isIndependentOf",
      "info" : "SimpleName[12276-12291]:SimpleName[12239-12254]"
    }, {
      "left" : "Property prop",
      "right" : "Property prop",
      "info" : "SingleVariableDeclaration[12292-12305]:SingleVariableDeclaration[12255-12268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12307-12461]:Block[12270-12423]"
    }, {
      "left" : "if (typesRelatedToSet.intersects(prop.typesSet))",
      "right" : "if (typesRelatedToSet.intersects(prop.typesSet))",
      "info" : "IfStatement[12315-12395]:IfStatement[12278-12358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12364-12395]:Block[12327-12358]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12374-12387]:ReturnStatement[12337-12350]"
    }, {
      "left" : "return !getRelated(prop.type).intersects(typesInSet);",
      "right" : "return !prop.relatedTypesSet.intersects(typesInSet);",
      "info" : "ReturnStatement[12402-12455]:ReturnStatement[12365-12417]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12666-12672]:Modifier[12628-12634]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12673-12677]:PrimitiveType[12635-12639]"
    }, {
      "left" : "addNode",
      "right" : "addNode",
      "info" : "SimpleName[12678-12685]:SimpleName[12640-12647]"
    }, {
      "left" : "Property prop",
      "right" : "Property prop",
      "info" : "SingleVariableDeclaration[12686-12699]:SingleVariableDeclaration[12648-12661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12701-12795]:Block[12663-12756]"
    }, {
      "left" : "typesInSet.or(prop.typesSet);",
      "right" : "typesInSet.or(prop.typesSet);",
      "info" : "ExpressionStatement[12709-12738]:ExpressionStatement[12671-12700]"
    }, {
      "left" : "typesRelatedToSet",
      "right" : "typesRelatedToSet",
      "info" : "METHOD_INVOCATION_RECEIVER[12745-12762]:METHOD_INVOCATION_RECEIVER[12707-12724]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12922-12929]:Modifier[12883-12890]"
    }, {
      "left" : "JSTypeBitSet",
      "right" : "JSTypeBitSet",
      "info" : "SimpleType[12930-12942]:SimpleType[12891-12903]"
    }, {
      "left" : "getRelated",
      "right" : "getRelated",
      "info" : "SimpleName[12943-12953]:SimpleName[12904-12914]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[12954-12965]:SingleVariableDeclaration[12915-12926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12967-13331]:Block[12928-13292]"
    }, {
      "left" : "JSTypeBitSet relatedTypes = new JSTypeBitSet(intForType.size());",
      "right" : "JSTypeBitSet relatedTypes = new JSTypeBitSet(intForType.size());",
      "info" : "VariableDeclarationStatement[12975-13039]:VariableDeclarationStatement[12936-13000]"
    }, {
      "left" : "if (type instanceof UnionType)",
      "right" : "if (type instanceof UnionType)",
      "info" : "IfStatement[13046-13298]:IfStatement[13007-13259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13077-13222]:Block[13038-13183]"
    }, {
      "left" : "for (JSType alt : ((UnionType) type).getAlternates())",
      "right" : "for (JSType alt : ((UnionType) type).getAlternates())",
      "info" : "EnhancedForStatement[13087-13214]:EnhancedForStatement[13048-13175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13141-13214]:Block[13102-13175]"
    }, {
      "left" : "intersectRelatedTypesOnNonUnion(alt, relatedTypes);",
      "right" : "intersectRelatedTypesOnNonUnion(alt, relatedTypes);",
      "info" : "ExpressionStatement[13153-13204]:ExpressionStatement[13114-13165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13228-13298]:Block[13189-13259]"
    }, {
      "left" : "intersectRelatedTypesOnNonUnion(type, relatedTypes);",
      "right" : "intersectRelatedTypesOnNonUnion(type, relatedTypes);",
      "info" : "ExpressionStatement[13238-13290]:ExpressionStatement[13199-13251]"
    }, {
      "left" : "return relatedTypes;",
      "right" : "return relatedTypes;",
      "info" : "ReturnStatement[13305-13325]:ReturnStatement[13266-13286]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13481-13488]:Modifier[13442-13449]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13489-13493]:PrimitiveType[13450-13454]"
    }, {
      "left" : "intersectRelatedTypesOnNonUnion",
      "right" : "intersectRelatedTypesOnNonUnion",
      "info" : "SimpleName[13494-13525]:SimpleName[13455-13486]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[13535-13546]:SingleVariableDeclaration[13496-13507]"
    }, {
      "left" : "JSTypeBitSet relatedTypes",
      "right" : "JSTypeBitSet relatedTypes",
      "info" : "SingleVariableDeclaration[13548-13573]:SingleVariableDeclaration[13509-13534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13575-13638]:Block[13536-13599]"
    }, {
      "left" : "relatedTypes.or(getRelatedTypesOnNonUnion(type));",
      "right" : "relatedTypes.or(getRelatedTypesOnNonUnion(type));",
      "info" : "ExpressionStatement[13583-13632]:ExpressionStatement[13544-13593]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[13646-13651]:TYPE_DECLARATION_KIND[13607-13612]"
    }, {
      "left" : "PropertyGraphNode",
      "right" : "PropertyGraphNode",
      "info" : "SimpleName[13652-13669]:SimpleName[13613-13630]"
    }, {
      "left" : "PropertyGraphNode",
      "right" : "PropertyGraphNode",
      "info" : "SimpleName[13774-13791]:SimpleName[13735-13752]"
    }, {
      "left" : "Property property",
      "right" : "Property property",
      "info" : "SingleVariableDeclaration[13792-13809]:SingleVariableDeclaration[13753-13770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13811-13850]:Block[13772-13811]"
    }, {
      "left" : "this.property = property;",
      "right" : "this.property = property;",
      "info" : "ExpressionStatement[13819-13844]:ExpressionStatement[13780-13805]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13856-13862]:Modifier[13817-13823]"
    }, {
      "left" : "Property",
      "right" : "Property",
      "info" : "SimpleType[13863-13871]:SimpleType[13824-13832]"
    }, {
      "left" : "getValue",
      "right" : "getValue",
      "info" : "SimpleName[13872-13880]:SimpleName[13833-13841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13883-13913]:Block[13844-13874]"
    }, {
      "left" : "return property;",
      "right" : "return property;",
      "info" : "ReturnStatement[13891-13907]:ReturnStatement[13852-13868]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[13919-13949]:SingleMemberAnnotation[13880-13910]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13954-13960]:Modifier[13915-13921]"
    }, {
      "left" : "A extends Annotation",
      "right" : "A extends Annotation",
      "info" : "TypeParameter[13962-13982]:TypeParameter[13923-13943]"
    }, {
      "left" : "A",
      "right" : "A",
      "info" : "SimpleType[13984-13985]:SimpleType[13945-13946]"
    }, {
      "left" : "getAnnotation",
      "right" : "getAnnotation",
      "info" : "SimpleName[13986-13999]:SimpleName[13947-13960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14002-14038]:Block[13963-13999]"
    }, {
      "left" : "return (A) annotation;",
      "right" : "return (A) annotation;",
      "info" : "ReturnStatement[14010-14032]:ReturnStatement[13971-13993]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14044-14050]:Modifier[14005-14011]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14051-14055]:PrimitiveType[14012-14016]"
    }, {
      "left" : "setAnnotation",
      "right" : "setAnnotation",
      "info" : "SimpleName[14056-14069]:SimpleName[14017-14030]"
    }, {
      "left" : "Annotation data",
      "right" : "Annotation data",
      "info" : "SingleVariableDeclaration[14070-14085]:SingleVariableDeclaration[14031-14046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14087-14119]:Block[14048-14080]"
    }, {
      "left" : "annotation = data;",
      "right" : "annotation = data;",
      "info" : "ExpressionStatement[14095-14113]:ExpressionStatement[14056-14074]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14196-14203]:Modifier[14157-14164]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14204-14209]:TYPE_DECLARATION_KIND[14165-14170]"
    }, {
      "left" : "ProcessExterns",
      "right" : "ProcessExterns",
      "info" : "SimpleName[14210-14224]:SimpleName[14171-14185]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[14233-14258]:SimpleType[14194-14219]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14290-14296]:Modifier[14251-14257]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14297-14301]:PrimitiveType[14258-14262]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[14302-14307]:SimpleName[14263-14268]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[14308-14323]:SingleVariableDeclaration[14269-14284]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14325-14331]:SingleVariableDeclaration[14286-14292]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14333-14344]:SingleVariableDeclaration[14294-14305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14346-14838]:Block[14307-14799]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.GETPROP:\n          Node dest = n.getFirstChild().getNext();\n          externedNames.add(dest.getString());\n          break;\n        case Token.OBJECTLIT:\n          for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext().getNext()) {\n            if (child.getType() == Token.STRING) {\n              externedNames.add(child.getString());\n            }\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.GETPROP:\n          Node dest = n.getFirstChild().getNext();\n          externedNames.add(dest.getString());\n          break;\n        case Token.OBJECTLIT:\n          for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext().getNext()) {\n            if (child.getType() == Token.STRING) {\n              externedNames.add(child.getString());\n            }\n          }\n          break;\n      }",
      "info" : "SwitchStatement[14354-14832]:SwitchStatement[14315-14793]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[14385-14404]:SwitchCase[14346-14365]"
    }, {
      "left" : "Node dest = n.getFirstChild().getNext();",
      "right" : "Node dest = n.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[14415-14455]:VariableDeclarationStatement[14376-14416]"
    }, {
      "left" : "externedNames.add(dest.getString());",
      "right" : "externedNames.add(dest.getString());",
      "info" : "ExpressionStatement[14466-14502]:ExpressionStatement[14427-14463]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14513-14519]:BreakStatement[14474-14480]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[14528-14549]:SwitchCase[14489-14510]"
    }, {
      "left" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext().getNext())",
      "right" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext().getNext())",
      "info" : "ForStatement[14560-14807]:ForStatement[14521-14768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14677-14807]:Block[14638-14768]"
    }, {
      "left" : "if (child.getType() == Token.STRING)",
      "right" : "if (child.getType() == Token.STRING)",
      "info" : "IfStatement[14691-14795]:IfStatement[14652-14756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14728-14795]:Block[14689-14756]"
    }, {
      "left" : "externedNames.add(child.getString());",
      "right" : "externedNames.add(child.getString());",
      "info" : "ExpressionStatement[14744-14781]:ExpressionStatement[14705-14742]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14818-14824]:BreakStatement[14779-14785]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14927-14934]:Modifier[14888-14895]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14935-14940]:TYPE_DECLARATION_KIND[14896-14901]"
    }, {
      "left" : "ProcessProperties",
      "right" : "ProcessProperties",
      "info" : "SimpleName[14941-14958]:SimpleName[14902-14919]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[14967-14992]:SimpleType[14928-14953]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14999-15005]:Modifier[14960-14966]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15006-15010]:PrimitiveType[14967-14971]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[15011-15016]:SimpleName[14972-14977]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[15017-15032]:SingleVariableDeclaration[14978-14993]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15034-15040]:SingleVariableDeclaration[14995-15001]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[15042-15053]:SingleVariableDeclaration[15003-15014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15055-16557]:Block[15016-16518]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.GETPROP: {\n          Node propNode = n.getFirstChild().getNext();\n          JSType jstype = getJSType(n.getFirstChild());\n          maybeMarkCandidate(propNode, jstype, t);\n          break;\n        }\n        case Token.OBJECTLIT:\n          // The children of an OBJECTLIT node are alternating key/value pairs.\n          // We skip the values.\n          for (Node key = n.getFirstChild(); key != null;\n               key = key.getNext().getNext()) {\n            // We only want keys that are strings (not numbers), and only keys\n            // that were unquoted.\n            if (key.getType() == Token.STRING) {\n              if (!key.isQuotedString()) {\n                JSType jstype = getJSType(n.getFirstChild());\n                maybeMarkCandidate(key, jstype, t);\n              } else {\n                // Ensure that we never rename some other property in a way\n                // that could conflict with this quoted key.\n                quotedNames.add(key.getString());\n              }\n            }\n          }\n          break;\n        case Token.GETELEM:\n          // If this is a quoted property access (e.g. x['myprop']), we need to\n          // ensure that we never rename some other property in a way that\n          // could conflict with this quoted name.\n          Node child = n.getLastChild();\n          if (child.getType() == Token.STRING) {\n            quotedNames.add(child.getString());\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.GETPROP: {\n          Node propNode = n.getFirstChild().getNext();\n          JSType jstype = getJSType(n.getFirstChild());\n          maybeMarkCandidate(propNode, jstype, t);\n          break;\n        }\n        case Token.OBJECTLIT:\n          // The children of an OBJECTLIT node are alternating key/value pairs.\n          // We skip the values.\n          for (Node key = n.getFirstChild(); key != null;\n               key = key.getNext().getNext()) {\n            // We only want keys that are strings (not numbers), and only keys\n            // that were unquoted.\n            if (key.getType() == Token.STRING) {\n              if (!key.isQuotedString()) {\n                JSType jstype = getJSType(n.getFirstChild());\n                maybeMarkCandidate(key, jstype, t);\n              } else {\n                // Ensure that we never rename some other property in a way\n                // that could conflict with this quoted key.\n                quotedNames.add(key.getString());\n              }\n            }\n          }\n          break;\n        case Token.GETELEM:\n          // If this is a quoted property access (e.g. x['myprop']), we need to\n          // ensure that we never rename some other property in a way that\n          // could conflict with this quoted name.\n          Node child = n.getLastChild();\n          if (child.getType() == Token.STRING) {\n            quotedNames.add(child.getString());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[15063-16551]:SwitchStatement[15024-16512]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[15094-15113]:SwitchCase[15055-15074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15114-15304]:Block[15075-15265]"
    }, {
      "left" : "Node propNode = n.getFirstChild().getNext();",
      "right" : "Node propNode = n.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[15126-15170]:VariableDeclarationStatement[15087-15131]"
    }, {
      "left" : "JSType jstype = getJSType(n.getFirstChild());",
      "right" : "JSType jstype = getJSType(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[15181-15226]:VariableDeclarationStatement[15142-15187]"
    }, {
      "left" : "maybeMarkCandidate(propNode, jstype, t);",
      "right" : "maybeMarkCandidate(propNode, jstype, t);",
      "info" : "ExpressionStatement[15237-15277]:ExpressionStatement[15198-15238]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15288-15294]:BreakStatement[15249-15255]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[15313-15334]:SwitchCase[15274-15295]"
    }, {
      "left" : "for (Node key = n.getFirstChild(); key != null;\n               key = key.getNext().getNext())",
      "right" : "for (Node key = n.getFirstChild(); key != null;\n               key = key.getNext().getNext())",
      "info" : "ForStatement[15458-16125]:ForStatement[15419-16086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15552-16125]:Block[15513-16086]"
    }, {
      "left" : "if (key.getType() == Token.STRING)",
      "right" : "if (key.getType() == Token.STRING)",
      "info" : "IfStatement[15680-16113]:IfStatement[15641-16074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15715-16113]:Block[15676-16074]"
    }, {
      "left" : "if (!key.isQuotedString())",
      "right" : "if (!key.isQuotedString())",
      "info" : "IfStatement[15731-16099]:IfStatement[15692-16060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15758-15889]:Block[15719-15850]"
    }, {
      "left" : "JSType jstype = getJSType(n.getFirstChild());",
      "right" : "JSType jstype = getJSType(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[15776-15821]:VariableDeclarationStatement[15737-15782]"
    }, {
      "left" : "maybeMarkCandidate(key, jstype, t);",
      "right" : "maybeMarkCandidate(key, jstype, t);",
      "info" : "ExpressionStatement[15838-15873]:ExpressionStatement[15799-15834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15895-16099]:Block[15856-16060]"
    }, {
      "left" : "quotedNames.add(key.getString());",
      "right" : "quotedNames.add(key.getString());",
      "info" : "ExpressionStatement[16050-16083]:ExpressionStatement[16011-16044]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16136-16142]:BreakStatement[16097-16103]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[16151-16170]:SwitchCase[16112-16131]"
    }, {
      "left" : "Node child = n.getLastChild();",
      "right" : "Node child = n.getLastChild();",
      "info" : "VariableDeclarationStatement[16387-16417]:VariableDeclarationStatement[16348-16378]"
    }, {
      "left" : "if (child.getType() == Token.STRING)",
      "right" : "if (child.getType() == Token.STRING)",
      "info" : "IfStatement[16428-16526]:IfStatement[16389-16487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16465-16526]:Block[16426-16487]"
    }, {
      "left" : "quotedNames.add(child.getString());",
      "right" : "quotedNames.add(child.getString());",
      "info" : "ExpressionStatement[16479-16514]:ExpressionStatement[16440-16475]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16537-16543]:BreakStatement[16498-16504]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16797-16804]:Modifier[16758-16765]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16805-16809]:PrimitiveType[16766-16770]"
    }, {
      "left" : "maybeMarkCandidate",
      "right" : "maybeMarkCandidate",
      "info" : "SimpleName[16810-16828]:SimpleName[16771-16789]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16829-16835]:SingleVariableDeclaration[16790-16796]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[16837-16848]:SingleVariableDeclaration[16798-16809]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[16850-16865]:SingleVariableDeclaration[16811-16826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16867-17032]:Block[16828-16993]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[16875-16903]:VariableDeclarationStatement[16836-16864]"
    }, {
      "left" : "if (!externedNames.contains(name))",
      "right" : "if (!externedNames.contains(name))",
      "info" : "IfStatement[16910-17026]:IfStatement[16871-16987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16945-17026]:Block[16906-16987]"
    }, {
      "left" : "stringNodesToRename.add(n);",
      "right" : "stringNodesToRename.add(n);",
      "info" : "ExpressionStatement[16955-16982]:ExpressionStatement[16916-16943]"
    }, {
      "left" : "recordProperty(name, type);",
      "right" : "recordProperty(name, type);",
      "info" : "ExpressionStatement[16991-17018]:ExpressionStatement[16952-16979]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17038-17045]:Modifier[16999-17006]"
    }, {
      "left" : "Property",
      "right" : "Property",
      "info" : "SimpleType[17046-17054]:SimpleType[17007-17015]"
    }, {
      "left" : "recordProperty",
      "right" : "recordProperty",
      "info" : "SimpleName[17055-17069]:SimpleName[17016-17030]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[17070-17081]:SingleVariableDeclaration[17031-17042]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[17083-17094]:SingleVariableDeclaration[17044-17055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17096-17189]:Block[17057-17150]"
    }, {
      "left" : "Property prop = getProperty(name);",
      "right" : "Property prop = getProperty(name);",
      "info" : "VariableDeclarationStatement[17104-17138]:VariableDeclarationStatement[17065-17099]"
    }, {
      "left" : "prop.addType(type);",
      "right" : "prop.addType(type);",
      "info" : "ExpressionStatement[17145-17164]:ExpressionStatement[17106-17125]"
    }, {
      "left" : "return prop;",
      "right" : "return prop;",
      "info" : "ReturnStatement[17171-17183]:ReturnStatement[17132-17144]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17269-17276]:Modifier[17230-17237]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17277-17284]:PrimitiveType[17238-17245]"
    }, {
      "left" : "isInvalidatingType",
      "right" : "isInvalidatingType",
      "info" : "SimpleName[17285-17303]:SimpleName[17246-17264]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[17304-17315]:SingleVariableDeclaration[17265-17276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17317-17925]:Block[17278-17886]"
    }, {
      "left" : "if (type instanceof UnionType)",
      "right" : "if (type instanceof UnionType)",
      "info" : "IfStatement[17323-17632]:IfStatement[17284-17593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17354-17632]:Block[17315-17593]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[17362-17405]:ExpressionStatement[17323-17366]"
    }, {
      "left" : "if (type instanceof UnionType)",
      "right" : "if (type instanceof UnionType)",
      "info" : "IfStatement[17412-17626]:IfStatement[17373-17587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17443-17626]:Block[17404-17587]"
    }, {
      "left" : "for (JSType alt : ((UnionType) type).getAlternates())",
      "right" : "for (JSType alt : ((UnionType) type).getAlternates())",
      "info" : "EnhancedForStatement[17453-17596]:EnhancedForStatement[17414-17557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17507-17596]:Block[17468-17557]"
    }, {
      "left" : "if (isInvalidatingType(alt))",
      "right" : "if (isInvalidatingType(alt))",
      "info" : "IfStatement[17519-17586]:IfStatement[17480-17547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17548-17586]:Block[17509-17547]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17562-17574]:ReturnStatement[17523-17535]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17605-17618]:ReturnStatement[17566-17579]"
    }, {
      "left" : "ObjectType objType = ObjectType.cast(type);",
      "right" : "ObjectType objType = ObjectType.cast(type);",
      "info" : "VariableDeclarationStatement[17637-17680]:VariableDeclarationStatement[17598-17641]"
    }, {
      "left" : "return objType == null\n        || invalidatingTypes.contains(objType)\n        || !objType.hasReferenceName()\n        || (objType.isNamedType() && objType.isUnknownType())\n        || objType.isEnumType() || objType.autoboxesTo() != null;",
      "right" : "return objType == null\n        || invalidatingTypes.contains(objType)\n        || !objType.hasReferenceName()\n        || (objType.isNamedType() && objType.isUnknownType())\n        || objType.isEnumType() || objType.autoboxesTo() != null;",
      "info" : "ReturnStatement[17685-17921]:ReturnStatement[17646-17882]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17929-17936]:Modifier[17890-17897]"
    }, {
      "left" : "Property",
      "right" : "Property",
      "info" : "SimpleType[17937-17945]:SimpleType[17898-17906]"
    }, {
      "left" : "getProperty",
      "right" : "getProperty",
      "info" : "SimpleName[17946-17957]:SimpleName[17907-17918]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[17958-17969]:SingleVariableDeclaration[17919-17930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17971-18134]:Block[17932-18095]"
    }, {
      "left" : "Property prop = propertyMap.get(name);",
      "right" : "Property prop = propertyMap.get(name);",
      "info" : "VariableDeclarationStatement[17977-18015]:VariableDeclarationStatement[17938-17976]"
    }, {
      "left" : "if (prop == null)",
      "right" : "if (prop == null)",
      "info" : "IfStatement[18020-18113]:IfStatement[17981-18074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18038-18113]:Block[17999-18074]"
    }, {
      "left" : "prop = new Property(name);",
      "right" : "prop = new Property(name);",
      "info" : "ExpressionStatement[18046-18072]:ExpressionStatement[18007-18033]"
    }, {
      "left" : "propertyMap.put(name, prop);",
      "right" : "propertyMap.put(name, prop);",
      "info" : "ExpressionStatement[18079-18107]:ExpressionStatement[18040-18068]"
    }, {
      "left" : "return prop;",
      "right" : "return prop;",
      "info" : "ReturnStatement[18118-18130]:ReturnStatement[18079-18091]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18244-18251]:Modifier[18205-18212]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[18252-18258]:SimpleType[18213-18219]"
    }, {
      "left" : "getJSType",
      "right" : "getJSType",
      "info" : "SimpleName[18259-18268]:SimpleName[18220-18229]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18269-18275]:SingleVariableDeclaration[18230-18236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18277-18750]:Block[18238-18711]"
    }, {
      "left" : "JSType jsType = n.getJSType();",
      "right" : "JSType jsType = n.getJSType();",
      "info" : "VariableDeclarationStatement[18283-18313]:VariableDeclarationStatement[18244-18274]"
    }, {
      "left" : "if (jsType == null)",
      "right" : "if (jsType == null)",
      "info" : "IfStatement[18318-18746]:IfStatement[18279-18707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18338-18712]:Block[18299-18673]"
    }, {
      "left" : "return compiler.getTypeRegistry().getNativeType(\n          JSTypeNative.UNKNOWN_TYPE);",
      "right" : "return compiler.getTypeRegistry().getNativeType(\n          JSTypeNative.UNKNOWN_TYPE);",
      "info" : "ReturnStatement[18620-18706]:ReturnStatement[18581-18667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18718-18746]:Block[18679-18707]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[18726-18740]:ReturnStatement[18687-18701]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18824-18831]:Modifier[18785-18792]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[18832-18837]:TYPE_DECLARATION_KIND[18793-18798]"
    }, {
      "left" : "Property",
      "right" : "Property",
      "info" : "SimpleName[18838-18846]:SimpleName[18799-18807]"
    }, {
      "left" : "Property",
      "right" : "Property",
      "info" : "SimpleName[19035-19043]:SimpleName[19051-19059]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[19044-19055]:SingleVariableDeclaration[19060-19071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19057-19244]:Block[19073-19260]"
    }, {
      "left" : "this.oldName = name;",
      "right" : "this.oldName = name;",
      "info" : "ExpressionStatement[19065-19085]:ExpressionStatement[19081-19101]"
    }, {
      "left" : "if (name.startsWith(SKIP_PREFIX))",
      "right" : "if (name.startsWith(SKIP_PREFIX))",
      "info" : "IfStatement[19163-19238]:IfStatement[19179-19254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19197-19238]:Block[19213-19254]"
    }, {
      "left" : "skipAmbiguating = true;",
      "right" : "skipAmbiguating = true;",
      "info" : "ExpressionStatement[19207-19230]:ExpressionStatement[19223-19246]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19305-19309]:PrimitiveType[19321-19325]"
    }, {
      "left" : "addType",
      "right" : "addType",
      "info" : "SimpleName[19310-19317]:SimpleName[19326-19333]"
    }, {
      "left" : "JSType newType",
      "right" : "JSType newType",
      "info" : "SingleVariableDeclaration[19318-19332]:SingleVariableDeclaration[19334-19348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19334-19747]:Block[19350-19763]"
    }, {
      "left" : "if (skipAmbiguating)",
      "right" : "if (skipAmbiguating)",
      "info" : "IfStatement[19342-19388]:IfStatement[19358-19404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19363-19388]:Block[19379-19404]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19373-19380]:ReturnStatement[19389-19396]"
    }, {
      "left" : "++numOccurrences;",
      "right" : "++numOccurrences;",
      "info" : "ExpressionStatement[19396-19413]:ExpressionStatement[19412-19429]"
    }, {
      "left" : "if (newType instanceof UnionType)",
      "right" : "if (newType instanceof UnionType)",
      "info" : "IfStatement[19421-19709]:IfStatement[19437-19725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19455-19709]:Block[19471-19725]"
    }, {
      "left" : "newType = newType.restrictByNotNullOrUndefined();",
      "right" : "newType = newType.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[19465-19514]:ExpressionStatement[19481-19530]"
    }, {
      "left" : "if (newType instanceof UnionType)",
      "right" : "if (newType instanceof UnionType)",
      "info" : "IfStatement[19523-19701]:IfStatement[19539-19717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19557-19701]:Block[19573-19717]"
    }, {
      "left" : "for (JSType alt : ((UnionType) newType).getAlternates())",
      "right" : "for (JSType alt : ((UnionType) newType).getAlternates())",
      "info" : "EnhancedForStatement[19569-19673]:EnhancedForStatement[19585-19689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19626-19673]:Block[19642-19689]"
    }, {
      "left" : "addNonUnionType(alt);",
      "right" : "addNonUnionType(alt);",
      "info" : "ExpressionStatement[19640-19661]:ExpressionStatement[19656-19677]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19684-19691]:ReturnStatement[19700-19707]"
    }, {
      "left" : "addNonUnionType(newType);",
      "right" : "addNonUnionType(newType);",
      "info" : "ExpressionStatement[19716-19741]:ExpressionStatement[19732-19757]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19753-19760]:Modifier[19769-19776]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19761-19765]:PrimitiveType[19777-19781]"
    }, {
      "left" : "addNonUnionType",
      "right" : "addNonUnionType",
      "info" : "SimpleName[19766-19781]:SimpleName[19782-19797]"
    }, {
      "left" : "JSType newType",
      "right" : "JSType newType",
      "info" : "SingleVariableDeclaration[19782-19796]:SingleVariableDeclaration[19798-19812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19798-20087]:Block[19814-20159]"
    }, {
      "left" : "if (skipAmbiguating || isInvalidatingType(newType))",
      "right" : "if (skipAmbiguating || isInvalidatingType(newType))",
      "info" : "IfStatement[19806-19915]:IfStatement[19822-19931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19858-19915]:Block[19874-19931]"
    }, {
      "left" : "skipAmbiguating = true;",
      "right" : "skipAmbiguating = true;",
      "info" : "ExpressionStatement[19868-19891]:ExpressionStatement[19884-19907]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19900-19907]:ReturnStatement[19916-19923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19980-20037]:Block[20011-20153]"
    }, {
      "left" : "type = type.getLeastSupertype(newType);",
      "right" : "computeRelatedTypes(newType);",
      "info" : "ExpressionStatement[19990-20029]:ExpressionStatement[20021-20050]"
    }, {
      "left" : "type.getLeastSupertype(newType)",
      "right" : "computeRelatedTypes(newType)",
      "info" : "MethodInvocation[19997-20028]:MethodInvocation[20021-20049]"
    }, {
      "left" : "getLeastSupertype",
      "right" : "computeRelatedTypes",
      "info" : "SimpleName[20002-20019]:SimpleName[20021-20040]"
    }, {
      "left" : "typesSet",
      "right" : "typesSet",
      "info" : "METHOD_INVOCATION_RECEIVER[20044-20052]:METHOD_INVOCATION_RECEIVER[20059-20067]"
    }, {
      "left" : "getIntForType(newType)",
      "right" : "getIntForType(newType)",
      "info" : "MethodInvocation[20057-20079]:MethodInvocation[19953-19975]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20160-20167]:Modifier[20232-20239]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[20168-20173]:TYPE_DECLARATION_KIND[20240-20245]"
    }, {
      "left" : "JSTypeBitSet",
      "right" : "JSTypeBitSet",
      "info" : "SimpleName[20174-20186]:SimpleName[20246-20258]"
    }, {
      "left" : "BitSet",
      "right" : "BitSet",
      "info" : "SimpleType[20195-20201]:SimpleType[20267-20273]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20262-20269]:Modifier[20334-20341]"
    }, {
      "left" : "JSTypeBitSet",
      "right" : "JSTypeBitSet",
      "info" : "SimpleName[20270-20282]:SimpleName[20342-20354]"
    }, {
      "left" : "int size",
      "right" : "int size",
      "info" : "SingleVariableDeclaration[20283-20291]:SingleVariableDeclaration[20355-20363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20293-20319]:Block[20365-20391]"
    }, {
      "left" : "super(size);",
      "right" : "super(size);",
      "info" : "SuperConstructorInvocation[20301-20313]:SuperConstructorInvocation[20373-20385]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20325-20332]:Modifier[20397-20404]"
    }, {
      "left" : "JSTypeBitSet",
      "right" : "JSTypeBitSet",
      "info" : "SimpleName[20333-20345]:SimpleName[20405-20417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20348-20370]:Block[20420-20442]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[20356-20364]:SuperConstructorInvocation[20428-20436]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20441-20450]:MarkerAnnotation[20513-20522]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20455-20461]:Modifier[20527-20533]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[20462-20468]:SimpleType[20534-20540]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[20469-20477]:SimpleName[20541-20549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20480-20775]:Block[20552-20847]"
    }, {
      "left" : "int from = 0;",
      "right" : "int from = 0;",
      "info" : "VariableDeclarationStatement[20488-20501]:VariableDeclarationStatement[20560-20573]"
    }, {
      "left" : "int current = 0;",
      "right" : "int current = 0;",
      "info" : "VariableDeclarationStatement[20508-20524]:VariableDeclarationStatement[20580-20596]"
    }, {
      "left" : "List<String> types = Lists.newArrayList();",
      "right" : "List<String> types = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[20531-20573]:VariableDeclarationStatement[20603-20645]"
    }, {
      "left" : "while (-1 != (current = nextSetBit(from)))",
      "right" : "while (-1 != (current = nextSetBit(from)))",
      "info" : "WhileStatement[20580-20725]:WhileStatement[20652-20797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20623-20725]:Block[20695-20797]"
    }, {
      "left" : "types.add(intForType.inverse().get(current).toString());",
      "right" : "types.add(intForType.inverse().get(current).toString());",
      "info" : "ExpressionStatement[20633-20689]:ExpressionStatement[20705-20761]"
    }, {
      "left" : "from = current + 1;",
      "right" : "from = current + 1;",
      "info" : "ExpressionStatement[20698-20717]:ExpressionStatement[20770-20789]"
    }, {
      "left" : "return Joiner.on(\" && \").join(types);",
      "right" : "return Joiner.on(\" && \").join(types);",
      "info" : "ReturnStatement[20732-20769]:ReturnStatement[20804-20841]"
    } ]
  },
  "interFileMappings" : { }
}