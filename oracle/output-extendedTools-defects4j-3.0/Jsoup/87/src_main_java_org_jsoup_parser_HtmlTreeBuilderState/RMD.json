{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "enum : HtmlTreeBuilderState",
      "right" : "enum : HtmlTreeBuilderState",
      "info" : "EnumDeclaration[295-71590]:EnumDeclaration[295-71795]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[473-1554]:MethodDeclaration[473-1554]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[1587-2449]:MethodDeclaration[1587-2449]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[2459-2640]:MethodDeclaration[2459-2640]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[2673-3798]:MethodDeclaration[2673-3798]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[3827-6785]:MethodDeclaration[3827-6785]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[6795-6932]:MethodDeclaration[6795-6932]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[6969-8042]:MethodDeclaration[6969-8042]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[8052-8239]:MethodDeclaration[8052-8239]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[8271-10050]:MethodDeclaration[8271-10050]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[10060-10236]:MethodDeclaration[10060-10236]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[10265-38529]:MethodDeclaration[10265-38569]"
    }, {
      "left" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[38539-39355]:MethodDeclaration[38579-39478]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[39445-40091]:MethodDeclaration[39568-40214]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[40121-44010]:MethodDeclaration[40244-44135]"
    }, {
      "left" : "boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[44020-44501]:MethodDeclaration[44145-44628]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[44535-46322]:MethodDeclaration[44662-46451]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[46354-47916]:MethodDeclaration[46483-48047]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[47952-49777]:MethodDeclaration[48083-49925]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[49787-50033]:MethodDeclaration[49935-50181]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[50067-52161]:MethodDeclaration[50215-52309]"
    }, {
      "left" : "private boolean exitTableBody(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean exitTableBody(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[52171-52587]:MethodDeclaration[52319-52760]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[52597-52709]:MethodDeclaration[52770-52882]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[52737-54809]:MethodDeclaration[52910-54982]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[54819-54931]:MethodDeclaration[54992-55104]"
    }, {
      "left" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "right" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[54941-55177]:MethodDeclaration[55114-55350]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[55206-57058]:MethodDeclaration[55379-57233]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[57068-57179]:MethodDeclaration[57243-57354]"
    }, {
      "left" : "private void closeCell(HtmlTreeBuilder tb)",
      "right" : "private void closeCell(HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[57189-57413]:MethodDeclaration[57364-57588]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[57444-61460]:MethodDeclaration[57619-61651]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[61470-61593]:MethodDeclaration[61661-61784]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[61631-62424]:MethodDeclaration[61822-62615]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[62456-63465]:MethodDeclaration[62647-63656]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[63498-65287]:MethodDeclaration[63689-65492]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[65323-66255]:MethodDeclaration[65528-66460]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[66292-66834]:MethodDeclaration[66497-67039]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[66875-67507]:MethodDeclaration[67080-67712]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[67544-67683]:MethodDeclaration[67749-67888]"
    }, {
      "left" : "private static String nullString = String.valueOf('\\u0000');",
      "right" : "private static String nullString = String.valueOf('\\u0000');",
      "info" : "FieldDeclaration[67696-67756]:FieldDeclaration[67901-67961]"
    }, {
      "left" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "right" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "info" : "MethodDeclaration[67762-67816]:MethodDeclaration[67967-68021]"
    }, {
      "left" : "private static boolean isWhitespace(Token t)",
      "right" : "private static boolean isWhitespace(Token t)",
      "info" : "MethodDeclaration[67822-68029]:MethodDeclaration[68027-68234]"
    }, {
      "left" : "private static boolean isWhitespace(String data)",
      "right" : "private static boolean isWhitespace(String data)",
      "info" : "MethodDeclaration[68035-68132]:MethodDeclaration[68240-68337]"
    }, {
      "left" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[68138-68369]:MethodDeclaration[68343-68574]"
    }, {
      "left" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[68375-68608]:MethodDeclaration[68580-68813]"
    }, {
      "left" : "Constants",
      "right" : "Constants",
      "info" : "TypeDeclaration[68900-71588]:TypeDeclaration[69105-71793]"
    }, {
      "left" : "static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};",
      "right" : "static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};",
      "info" : "FieldDeclaration[68939-69092]:FieldDeclaration[69144-69297]"
    }, {
      "left" : "static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n            \"p\", \"section\", \"summary\", \"ul\"};",
      "right" : "static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n            \"p\", \"section\", \"summary\", \"ul\"};",
      "info" : "FieldDeclaration[69101-69388]:FieldDeclaration[69306-69593]"
    }, {
      "left" : "static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};",
      "right" : "static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};",
      "info" : "FieldDeclaration[69397-69479]:FieldDeclaration[69602-69684]"
    }, {
      "left" : "static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"};",
      "right" : "static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"};",
      "info" : "FieldDeclaration[69488-69565]:FieldDeclaration[69693-69770]"
    }, {
      "left" : "static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};",
      "right" : "static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};",
      "info" : "FieldDeclaration[69574-69656]:FieldDeclaration[69779-69861]"
    }, {
      "left" : "static final String[] DdDt = new String[]{\"dd\", \"dt\"};",
      "right" : "static final String[] DdDt = new String[]{\"dd\", \"dt\"};",
      "info" : "FieldDeclaration[69665-69719]:FieldDeclaration[69870-69924]"
    }, {
      "left" : "static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "right" : "static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "info" : "FieldDeclaration[69728-69860]:FieldDeclaration[69933-70065]"
    }, {
      "left" : "static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};",
      "right" : "static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};",
      "info" : "FieldDeclaration[69869-69956]:FieldDeclaration[70074-70161]"
    }, {
      "left" : "static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};",
      "right" : "static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};",
      "info" : "FieldDeclaration[69965-70076]:FieldDeclaration[70170-70281]"
    }, {
      "left" : "static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};",
      "right" : "static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};",
      "info" : "FieldDeclaration[70085-70167]:FieldDeclaration[70290-70372]"
    }, {
      "left" : "static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"};",
      "right" : "static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"};",
      "info" : "FieldDeclaration[70176-70265]:FieldDeclaration[70381-70470]"
    }, {
      "left" : "static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};",
      "right" : "static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};",
      "info" : "FieldDeclaration[70274-70352]:FieldDeclaration[70479-70557]"
    }, {
      "left" : "static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};",
      "right" : "static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};",
      "info" : "FieldDeclaration[70361-70426]:FieldDeclaration[70566-70631]"
    }, {
      "left" : "static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "right" : "static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[70435-70580]:FieldDeclaration[70640-70785]"
    }, {
      "left" : "static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};",
      "right" : "static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};",
      "info" : "FieldDeclaration[70589-70896]:FieldDeclaration[70794-71101]"
    }, {
      "left" : "static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "right" : "static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "info" : "FieldDeclaration[70905-71067]:FieldDeclaration[71110-71272]"
    }, {
      "left" : "static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "right" : "static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[71076-71177]:FieldDeclaration[71281-71382]"
    }, {
      "left" : "static final String[] InCellNames = new String[]{\"td\", \"th\"};",
      "right" : "static final String[] InCellNames = new String[]{\"td\", \"th\"};",
      "info" : "FieldDeclaration[71186-71247]:FieldDeclaration[71391-71452]"
    }, {
      "left" : "static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"};",
      "right" : "static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"};",
      "info" : "FieldDeclaration[71256-71350]:FieldDeclaration[71461-71555]"
    }, {
      "left" : "static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "right" : "static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[71359-71451]:FieldDeclaration[71564-71656]"
    }, {
      "left" : "static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "right" : "static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[71460-71582]:FieldDeclaration[71665-71787]"
    } ],
    "mappings" : [
 {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[473-480]:PrimitiveType[473-480]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[481-488]:SimpleName[481-488]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[489-496]:SingleVariableDeclaration[489-496]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[498-516]:SingleVariableDeclaration[498-516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[518-1554]:Block[518-1554]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[532-1519]:IfStatement[532-1519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[553-618]:Block[553-618]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[571-583]:ReturnStatement[571-583]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[624-1519]:IfStatement[624-1519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[643-700]:Block[643-700]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[661-686]:ExpressionStatement[661-686]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[706-1519]:IfStatement[706-1519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[725-1348]:Block[725-1348]"
    }, {
      "left" : "Token.Doctype d = t.asDoctype();",
      "right" : "Token.Doctype d = t.asDoctype();",
      "info" : "VariableDeclarationStatement[865-897]:VariableDeclarationStatement[865-897]"
    }, {
      "left" : "DocumentType doctype = new DocumentType(\n                    tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
      "right" : "DocumentType doctype = new DocumentType(\n                    tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
      "info" : "VariableDeclarationStatement[914-1064]:VariableDeclarationStatement[914-1064]"
    }, {
      "left" : "doctype.setPubSysKey(d.getPubSysKey());",
      "right" : "doctype.setPubSysKey(d.getPubSysKey());",
      "info" : "ExpressionStatement[1081-1120]:ExpressionStatement[1081-1120]"
    }, {
      "left" : "tb.getDocument().appendChild(doctype);",
      "right" : "tb.getDocument().appendChild(doctype);",
      "info" : "ExpressionStatement[1137-1175]:ExpressionStatement[1137-1175]"
    }, {
      "left" : "if (d.isForceQuirks())",
      "right" : "if (d.isForceQuirks())",
      "info" : "IfStatement[1192-1291]:IfStatement[1192-1291]"
    }, {
      "left" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "right" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "info" : "ExpressionStatement[1235-1291]:ExpressionStatement[1235-1291]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1308-1334]:ExpressionStatement[1308-1334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1354-1519]:Block[1354-1519]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1421-1447]:ExpressionStatement[1421-1447]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[1464-1485]:ReturnStatement[1464-1485]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1532-1544]:ReturnStatement[1532-1544]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[1587-1594]:PrimitiveType[1587-1594]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[1595-1602]:SimpleName[1595-1602]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[1603-1610]:SingleVariableDeclaration[1603-1610]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[1612-1630]:SingleVariableDeclaration[1612-1630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1632-2449]:Block[1632-2449]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[1646-2414]:IfStatement[1646-2414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1665-1742]:Block[1665-1742]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[1683-1698]:ExpressionStatement[1683-1698]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[1715-1728]:ReturnStatement[1715-1728]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[1748-2414]:IfStatement[1748-2414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1767-1824]:Block[1767-1824]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[1785-1810]:ExpressionStatement[1785-1810]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[1830-2414]:IfStatement[1830-2414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1851-1916]:Block[1851-1916]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1869-1881]:ReturnStatement[1869-1881]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[1922-2414]:IfStatement[1922-2414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1988-2089]:Block[1988-2089]"
    }, {
      "left" : "tb.insert(t.asStartTag());",
      "right" : "tb.insert(t.asStartTag());",
      "info" : "ExpressionStatement[2006-2032]:ExpressionStatement[2006-2032]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[2049-2075]:ExpressionStatement[2049-2075]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[2095-2414]:IfStatement[2095-2414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2189-2248]:Block[2189-2248]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[2207-2234]:ReturnStatement[2207-2234]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[2254-2414]:IfStatement[2254-2414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2272-2349]:Block[2272-2349]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2290-2305]:ExpressionStatement[2290-2305]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2322-2335]:ReturnStatement[2322-2335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2355-2414]:Block[2355-2414]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[2373-2400]:ReturnStatement[2373-2400]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2427-2439]:ReturnStatement[2427-2439]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2459-2466]:Modifier[2459-2466]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2467-2474]:PrimitiveType[2467-2474]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[2475-2487]:SimpleName[2475-2487]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[2488-2495]:SingleVariableDeclaration[2488-2495]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[2497-2515]:SingleVariableDeclaration[2497-2515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2517-2640]:Block[2517-2640]"
    }, {
      "left" : "tb.insertStartTag(\"html\");",
      "right" : "tb.insertStartTag(\"html\");",
      "info" : "ExpressionStatement[2531-2557]:ExpressionStatement[2531-2557]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[2570-2596]:ExpressionStatement[2570-2596]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[2609-2630]:ReturnStatement[2609-2630]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2673-2680]:PrimitiveType[2673-2680]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[2681-2688]:SimpleName[2681-2688]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[2689-2696]:SingleVariableDeclaration[2689-2696]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[2698-2716]:SingleVariableDeclaration[2698-2716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2718-3798]:Block[2718-3798]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[2732-3763]:IfStatement[2732-3763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2753-2797]:Block[2753-2797]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2771-2783]:ReturnStatement[2771-2783]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[2803-3763]:IfStatement[2803-3763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2822-2879]:Block[2822-2879]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[2840-2865]:ExpressionStatement[2840-2865]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[2885-3763]:IfStatement[2885-3763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2904-2981]:Block[2904-2981]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2922-2937]:ExpressionStatement[2922-2937]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2954-2967]:ReturnStatement[2954-2967]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[2987-3763]:IfStatement[2987-3763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3053-3137]:Block[3053-3137]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[3071-3100]:ReturnStatement[3071-3100]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\"))",
      "info" : "IfStatement[3143-3763]:IfStatement[3143-3763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3209-3362]:Block[3209-3362]"
    }, {
      "left" : "Element head = tb.insert(t.asStartTag());",
      "right" : "Element head = tb.insert(t.asStartTag());",
      "info" : "VariableDeclarationStatement[3227-3268]:VariableDeclarationStatement[3227-3268]"
    }, {
      "left" : "tb.setHeadElement(head);",
      "right" : "tb.setHeadElement(head);",
      "info" : "ExpressionStatement[3285-3309]:ExpressionStatement[3285-3309]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[3326-3348]:ExpressionStatement[3326-3348]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[3368-3763]:IfStatement[3368-3763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3462-3559]:Block[3462-3559]"
    }, {
      "left" : "tb.processStartTag(\"head\");",
      "right" : "tb.processStartTag(\"head\");",
      "info" : "ExpressionStatement[3480-3507]:ExpressionStatement[3480-3507]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3524-3545]:ReturnStatement[3524-3545]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[3565-3763]:IfStatement[3565-3763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3583-3660]:Block[3583-3660]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3601-3616]:ExpressionStatement[3601-3616]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3633-3646]:ReturnStatement[3633-3646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3666-3763]:Block[3666-3763]"
    }, {
      "left" : "tb.processStartTag(\"head\");",
      "right" : "tb.processStartTag(\"head\");",
      "info" : "ExpressionStatement[3684-3711]:ExpressionStatement[3684-3711]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3728-3749]:ReturnStatement[3728-3749]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3776-3788]:ReturnStatement[3776-3788]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3827-3834]:PrimitiveType[3827-3834]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[3835-3842]:SimpleName[3835-3842]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[3843-3850]:SingleVariableDeclaration[3843-3850]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[3852-3870]:SingleVariableDeclaration[3852-3870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3872-6785]:Block[3872-6785]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[3886-3995]:IfStatement[3886-3995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3907-3995]:Block[3907-3995]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[3925-3952]:ExpressionStatement[3925-3952]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3969-3981]:ReturnStatement[3969-3981]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[4008-6750]:SwitchStatement[4008-6750]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[4042-4055]:SwitchCase[4042-4055]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[4076-4101]:ExpressionStatement[4076-4101]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4122-4128]:BreakStatement[4122-4128]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[4145-4158]:SwitchCase[4145-4158]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[4179-4194]:ExpressionStatement[4179-4194]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4215-4228]:ReturnStatement[4215-4228]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[4245-4259]:SwitchCase[4245-4259]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[4280-4318]:VariableDeclarationStatement[4280-4318]"
    }, {
      "left" : "String name = start.normalName();",
      "right" : "String name = start.normalName();",
      "info" : "VariableDeclarationStatement[4339-4372]:VariableDeclarationStatement[4339-4372]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[4393-6094]:IfStatement[4393-6094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4418-4495]:Block[4418-4495]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[4444-4473]:ReturnStatement[4444-4473]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "info" : "IfStatement[4501-6094]:IfStatement[4501-6094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4576-4862]:Block[4576-4862]"
    }, {
      "left" : "Element el = tb.insertEmpty(start);",
      "right" : "Element el = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4602-4637]:VariableDeclarationStatement[4602-4637]"
    }, {
      "left" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "right" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "info" : "IfStatement[4742-4840]:IfStatement[4742-4840]"
    }, {
      "left" : "tb.maybeSetBaseUri(el);",
      "right" : "tb.maybeSetBaseUri(el);",
      "info" : "ExpressionStatement[4817-4840]:ExpressionStatement[4817-4840]"
    }, {
      "left" : "if (name.equals(\"meta\"))",
      "right" : "if (name.equals(\"meta\"))",
      "info" : "IfStatement[4868-6094]:IfStatement[4868-6094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4893-5028]:Block[4893-5028]"
    }, {
      "left" : "Element meta = tb.insertEmpty(start);",
      "right" : "Element meta = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4919-4956]:VariableDeclarationStatement[4919-4956]"
    }, {
      "left" : "if (name.equals(\"title\"))",
      "right" : "if (name.equals(\"title\"))",
      "info" : "IfStatement[5034-6094]:IfStatement[5034-6094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5060-5132]:Block[5060-5132]"
    }, {
      "left" : "handleRcData(start, tb);",
      "right" : "handleRcData(start, tb);",
      "info" : "ExpressionStatement[5086-5110]:ExpressionStatement[5086-5110]"
    }, {
      "left" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "right" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "info" : "IfStatement[5138-6094]:IfStatement[5138-6094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5184-5257]:Block[5184-5257]"
    }, {
      "left" : "handleRawtext(start, tb);",
      "right" : "handleRawtext(start, tb);",
      "info" : "ExpressionStatement[5210-5235]:ExpressionStatement[5210-5235]"
    }, {
      "left" : "if (name.equals(\"noscript\"))",
      "right" : "if (name.equals(\"noscript\"))",
      "info" : "IfStatement[5263-6094]:IfStatement[5263-6094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5292-5540]:Block[5292-5540]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5446-5463]:ExpressionStatement[5446-5463]"
    }, {
      "left" : "tb.transition(InHeadNoscript);",
      "right" : "tb.transition(InHeadNoscript);",
      "info" : "ExpressionStatement[5488-5518]:ExpressionStatement[5488-5518]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[5546-6094]:IfStatement[5546-6094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5573-5881]:Block[5573-5881]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "right" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "info" : "ExpressionStatement[5673-5724]:ExpressionStatement[5673-5724]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[5749-5772]:ExpressionStatement[5749-5772]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[5797-5817]:ExpressionStatement[5797-5817]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5842-5859]:ExpressionStatement[5842-5859]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[5887-6094]:IfStatement[5887-6094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5912-6013]:Block[5912-6013]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[5938-5953]:ExpressionStatement[5938-5953]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5978-5991]:ReturnStatement[5978-5991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6019-6094]:Block[6019-6094]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6045-6072]:ReturnStatement[6045-6072]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6115-6121]:BreakStatement[6115-6121]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[6138-6150]:SwitchCase[6138-6150]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[6171-6203]:VariableDeclarationStatement[6171-6203]"
    }, {
      "left" : "name = end.normalName();",
      "right" : "name = end.normalName();",
      "info" : "ExpressionStatement[6224-6248]:ExpressionStatement[6224-6248]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[6269-6636]:IfStatement[6269-6636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6294-6401]:Block[6294-6401]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[6320-6329]:ExpressionStatement[6320-6329]"
    }, {
      "left" : "tb.transition(AfterHead);",
      "right" : "tb.transition(AfterHead);",
      "info" : "ExpressionStatement[6354-6379]:ExpressionStatement[6354-6379]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "info" : "IfStatement[6407-6636]:IfStatement[6407-6636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6454-6529]:Block[6454-6529]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6480-6507]:ReturnStatement[6480-6507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6535-6636]:Block[6535-6636]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6561-6576]:ExpressionStatement[6561-6576]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6601-6614]:ReturnStatement[6601-6614]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6657-6663]:BreakStatement[6657-6663]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6680-6688]:SwitchCase[6680-6688]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6709-6736]:ReturnStatement[6709-6736]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6763-6775]:ReturnStatement[6763-6775]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6795-6802]:Modifier[6795-6802]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6803-6810]:PrimitiveType[6803-6810]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[6811-6823]:SimpleName[6811-6823]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[6824-6831]:SingleVariableDeclaration[6824-6831]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[6833-6847]:SingleVariableDeclaration[6833-6847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6849-6932]:Block[6849-6932]"
    }, {
      "left" : "tb.processEndTag(\"head\");",
      "right" : "tb.processEndTag(\"head\");",
      "info" : "ExpressionStatement[6863-6888]:ExpressionStatement[6863-6888]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[6901-6922]:ReturnStatement[6901-6922]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6969-6976]:PrimitiveType[6969-6976]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[6977-6984]:SimpleName[6977-6984]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[6985-6992]:SingleVariableDeclaration[6985-6992]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[6994-7012]:SingleVariableDeclaration[6994-7012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7014-8042]:Block[7014-8042]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[7028-8007]:IfStatement[7028-8007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7047-7094]:Block[7047-7094]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7065-7080]:ExpressionStatement[7065-7080]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[7100-8007]:IfStatement[7100-8007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7166-7227]:Block[7166-7227]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[7184-7213]:ReturnStatement[7184-7213]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\"))",
      "info" : "IfStatement[7233-8007]:IfStatement[7233-8007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7299-7379]:Block[7299-7379]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[7317-7326]:ExpressionStatement[7317-7326]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[7343-7365]:ExpressionStatement[7343-7365]"
    }, {
      "left" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "right" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "info" : "IfStatement[7385-8007]:IfStatement[7385-8007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7569-7630]:Block[7569-7630]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[7587-7616]:ReturnStatement[7587-7616]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\"))",
      "info" : "IfStatement[7636-8007]:IfStatement[7636-8007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7696-7755]:Block[7696-7755]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7714-7741]:ReturnStatement[7714-7741]"
    }, {
      "left" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag())",
      "right" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag())",
      "info" : "IfStatement[7761-8007]:IfStatement[7761-8007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7865-7942]:Block[7865-7942]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7883-7898]:ExpressionStatement[7883-7898]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7915-7928]:ReturnStatement[7915-7928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7948-8007]:Block[7948-8007]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7966-7993]:ReturnStatement[7966-7993]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8020-8032]:ReturnStatement[8020-8032]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8052-8059]:Modifier[8052-8059]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8060-8067]:PrimitiveType[8060-8067]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[8068-8080]:SimpleName[8068-8080]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[8081-8088]:SingleVariableDeclaration[8081-8088]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[8090-8108]:SingleVariableDeclaration[8090-8108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8110-8239]:Block[8110-8239]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[8124-8139]:ExpressionStatement[8124-8139]"
    }, {
      "left" : "tb.insert(new Token.Character().data(t.toString()));",
      "right" : "tb.insert(new Token.Character().data(t.toString()));",
      "info" : "ExpressionStatement[8152-8204]:ExpressionStatement[8152-8204]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8217-8229]:ReturnStatement[8217-8229]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8271-8278]:PrimitiveType[8271-8278]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[8279-8286]:SimpleName[8279-8286]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[8287-8294]:SingleVariableDeclaration[8287-8294]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[8296-8314]:SingleVariableDeclaration[8296-8314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8316-10050]:Block[8316-10050]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[8330-10015]:IfStatement[8330-10015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8351-8410]:Block[8351-8410]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[8369-8396]:ExpressionStatement[8369-8396]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[8416-10015]:IfStatement[8416-10015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8435-8492]:Block[8435-8492]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[8453-8478]:ExpressionStatement[8453-8478]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[8498-10015]:IfStatement[8498-10015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8517-8564]:Block[8517-8564]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[8535-8550]:ExpressionStatement[8535-8550]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[8570-10015]:IfStatement[8570-10015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8590-9684]:Block[8590-9684]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[8608-8649]:VariableDeclarationStatement[8608-8649]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[8666-8702]:VariableDeclarationStatement[8666-8702]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[8719-9670]:IfStatement[8719-9670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8744-8813]:Block[8744-8813]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[8766-8795]:ReturnStatement[8766-8795]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[8819-9670]:IfStatement[8819-9670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8844-8989]:Block[8844-8989]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8866-8886]:ExpressionStatement[8866-8886]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[8907-8928]:ExpressionStatement[8907-8928]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[8949-8971]:ExpressionStatement[8949-8971]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[8995-9670]:IfStatement[8995-9670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9024-9131]:Block[9024-9131]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[9046-9066]:ExpressionStatement[9046-9066]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[9087-9113]:ExpressionStatement[9087-9113]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "info" : "IfStatement[9137-9670]:IfStatement[9137-9670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9249-9484]:Block[9249-9484]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9271-9286]:ExpressionStatement[9271-9286]"
    }, {
      "left" : "Element head = tb.getHeadElement();",
      "right" : "Element head = tb.getHeadElement();",
      "info" : "VariableDeclarationStatement[9307-9342]:VariableDeclarationStatement[9307-9342]"
    }, {
      "left" : "tb.push(head);",
      "right" : "tb.push(head);",
      "info" : "ExpressionStatement[9363-9377]:ExpressionStatement[9363-9377]"
    }, {
      "left" : "tb.process(t, InHead);",
      "right" : "tb.process(t, InHead);",
      "info" : "ExpressionStatement[9398-9420]:ExpressionStatement[9398-9420]"
    }, {
      "left" : "tb.removeFromStack(head);",
      "right" : "tb.removeFromStack(head);",
      "info" : "ExpressionStatement[9441-9466]:ExpressionStatement[9441-9466]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[9490-9670]:IfStatement[9490-9670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9515-9604]:Block[9515-9604]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9537-9552]:ExpressionStatement[9537-9552]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9573-9586]:ReturnStatement[9573-9586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9610-9670]:Block[9610-9670]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9632-9652]:ExpressionStatement[9632-9652]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[9690-10015]:IfStatement[9690-10015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9708-9957]:Block[9708-9957]"
    }, {
      "left" : "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\"))",
      "right" : "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\"))",
      "info" : "IfStatement[9726-9943]:IfStatement[9726-9943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9788-9848]:Block[9788-9848]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9810-9830]:ExpressionStatement[9810-9830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9854-9943]:Block[9854-9943]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9876-9891]:ExpressionStatement[9876-9891]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9912-9925]:ReturnStatement[9912-9925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9963-10015]:Block[9963-10015]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9981-10001]:ExpressionStatement[9981-10001]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10028-10040]:ReturnStatement[10028-10040]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10060-10067]:Modifier[10060-10067]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10068-10075]:PrimitiveType[10068-10075]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[10076-10088]:SimpleName[10076-10088]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[10089-10096]:SingleVariableDeclaration[10089-10096]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[10098-10116]:SingleVariableDeclaration[10098-10116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10118-10236]:Block[10118-10236]"
    }, {
      "left" : "tb.processStartTag(\"body\");",
      "right" : "tb.processStartTag(\"body\");",
      "info" : "ExpressionStatement[10132-10159]:ExpressionStatement[10132-10159]"
    }, {
      "left" : "tb.framesetOk(true);",
      "right" : "tb.framesetOk(true);",
      "info" : "ExpressionStatement[10172-10192]:ExpressionStatement[10172-10192]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[10205-10226]:ReturnStatement[10205-10226]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10265-10272]:PrimitiveType[10265-10272]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[10273-10280]:SimpleName[10273-10280]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[10281-10288]:SingleVariableDeclaration[10281-10288]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[10290-10308]:SingleVariableDeclaration[10290-10308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10310-38529]:Block[10310-38569]"
    }, {
      "left" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    // todo - refactor to a switch statement\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.reader.matchConsume(\"\\n\"); // ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "right" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    // todo - refactor to a switch statement\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.normalName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.normalName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).normalName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).normalName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().normalName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.reader.matchConsume(\"\\n\"); // ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.normalName(), Constants.DdDt)) {\n                                tb.processEndTag(el.normalName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.normalName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().normalName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().normalName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.normalName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.normalName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.normalName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().normalName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().normalName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().normalName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().normalName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().normalName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().normalName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().normalName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "info" : "SwitchStatement[10324-38494]:SwitchStatement[10324-38534]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[10358-10373]:SwitchCase[10358-10373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10374-11080]:Block[10374-11080]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[10396-10432]:VariableDeclarationStatement[10396-10432]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[10453-11035]:IfStatement[10453-11035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10489-10641]:Block[10489-10641]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[10566-10581]:ExpressionStatement[10566-10581]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10606-10619]:ReturnStatement[10606-10619]"
    }, {
      "left" : "if (tb.framesetOk() && isWhitespace(c))",
      "right" : "if (tb.framesetOk() && isWhitespace(c))",
      "info" : "IfStatement[10647-11035]:IfStatement[10647-11035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10687-10862]:Block[10687-10862]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10767-10802]:ExpressionStatement[10767-10802]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10827-10840]:ExpressionStatement[10827-10840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10868-11035]:Block[10868-11035]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10894-10929]:ExpressionStatement[10894-10929]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10954-10967]:ExpressionStatement[10954-10967]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[10992-11013]:ExpressionStatement[10992-11013]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11056-11062]:BreakStatement[11056-11062]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[11097-11110]:SwitchCase[11097-11110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11111-11203]:Block[11111-11203]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[11133-11158]:ExpressionStatement[11133-11158]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11179-11185]:BreakStatement[11179-11185]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[11220-11233]:SwitchCase[11220-11233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11234-11323]:Block[11234-11323]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11256-11271]:ExpressionStatement[11256-11271]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11292-11305]:ReturnStatement[11292-11305]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[11340-11354]:SwitchCase[11340-11354]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[11375-11416]:VariableDeclarationStatement[11375-11416]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[11498-11534]:VariableDeclarationStatement[11498-11534]"
    }, {
      "left" : "if (name.equals(\"a\"))",
      "right" : "if (name.equals(\"a\"))",
      "info" : "IfStatement[11555-26899]:IfStatement[11555-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11577-12322]:Block[11577-12322]"
    }, {
      "left" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "right" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "info" : "IfStatement[11603-12123]:IfStatement[11603-12123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11651-12123]:Block[11651-12123]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11681-11696]:ExpressionStatement[11681-11696]"
    }, {
      "left" : "tb.processEndTag(\"a\");",
      "right" : "tb.processEndTag(\"a\");",
      "info" : "ExpressionStatement[11725-11747]:ExpressionStatement[11725-11747]"
    }, {
      "left" : "Element remainingA = tb.getFromStack(\"a\");",
      "right" : "Element remainingA = tb.getFromStack(\"a\");",
      "info" : "VariableDeclarationStatement[11824-11866]:VariableDeclarationStatement[11824-11866]"
    }, {
      "left" : "if (remainingA != null)",
      "right" : "if (remainingA != null)",
      "info" : "IfStatement[11895-12097]:IfStatement[11895-12097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11919-12097]:Block[11919-12097]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(remainingA);",
      "right" : "tb.removeFromActiveFormattingElements(remainingA);",
      "info" : "ExpressionStatement[11953-12003]:ExpressionStatement[11953-12003]"
    }, {
      "left" : "tb.removeFromStack(remainingA);",
      "right" : "tb.removeFromStack(remainingA);",
      "info" : "ExpressionStatement[12036-12067]:ExpressionStatement[12036-12067]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[12148-12183]:ExpressionStatement[12148-12183]"
    }, {
      "left" : "Element a = tb.insert(startTag);",
      "right" : "Element a = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[12208-12240]:VariableDeclarationStatement[12208-12240]"
    }, {
      "left" : "tb.pushActiveFormattingElements(a);",
      "right" : "tb.pushActiveFormattingElements(a);",
      "info" : "ExpressionStatement[12265-12300]:ExpressionStatement[12265-12300]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
      "info" : "IfStatement[12328-26899]:IfStatement[12328-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12397-12576]:Block[12397-12576]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[12423-12458]:ExpressionStatement[12423-12458]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[12483-12508]:ExpressionStatement[12483-12508]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[12533-12554]:ExpressionStatement[12533-12554]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
      "info" : "IfStatement[12582-26899]:IfStatement[12582-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12644-12842]:Block[12644-12842]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[12670-12775]:IfStatement[12670-12775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12697-12775]:Block[12697-12775]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[12727-12749]:ExpressionStatement[12727-12749]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[12800-12820]:ExpressionStatement[12800-12820]"
    }, {
      "left" : "if (name.equals(\"span\"))",
      "right" : "if (name.equals(\"span\"))",
      "info" : "IfStatement[12848-26899]:IfStatement[12848-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12873-13082]:Block[12873-13082]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[12980-13015]:ExpressionStatement[12980-13015]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[13040-13060]:ExpressionStatement[13040-13060]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[13088-26899]:IfStatement[13088-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13111-13919]:Block[13111-13923]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[13137-13158]:ExpressionStatement[13137-13158]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[13183-13224]:VariableDeclarationStatement[13183-13224]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[13249-13722]:ForStatement[13249-13726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13292-13722]:Block[13292-13726]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[13322-13348]:VariableDeclarationStatement[13322-13348]"
    }, {
      "left" : "if (el.nodeName().equals(\"li\"))",
      "right" : "if (el.normalName().equals(\"li\"))",
      "info" : "IfStatement[13377-13535]:IfStatement[13377-13537]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[13384-13392]:SimpleName[13384-13394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13409-13535]:Block[13411-13537]"
    }, {
      "left" : "tb.processEndTag(\"li\");",
      "right" : "tb.processEndTag(\"li\");",
      "info" : "ExpressionStatement[13443-13466]:ExpressionStatement[13445-13468]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13499-13505]:BreakStatement[13501-13507]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.normalName(), Constants.InBodyStartLiBreakers))",
      "info" : "IfStatement[13564-13696]:IfStatement[13566-13700]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[13612-13620]:SimpleName[13614-13624]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13690-13696]:BreakStatement[13694-13700]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[13747-13852]:IfStatement[13751-13856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13774-13852]:Block[13778-13856]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[13804-13826]:ExpressionStatement[13808-13830]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[13877-13897]:ExpressionStatement[13881-13901]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[13925-26899]:IfStatement[13929-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13950-14371]:Block[13954-14375]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[13976-13991]:ExpressionStatement[13980-13995]"
    }, {
      "left" : "Element html = tb.getStack().get(0);",
      "right" : "Element html = tb.getStack().get(0);",
      "info" : "VariableDeclarationStatement[14075-14111]:VariableDeclarationStatement[14079-14115]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[14136-14349]:EnhancedForStatement[14140-14353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14189-14349]:Block[14193-14353]"
    }, {
      "left" : "if (!html.hasAttr(attribute.getKey()))",
      "right" : "if (!html.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[14219-14323]:IfStatement[14223-14327]"
    }, {
      "left" : "html.attributes().put(attribute);",
      "right" : "html.attributes().put(attribute);",
      "info" : "ExpressionStatement[14290-14323]:ExpressionStatement[14294-14327]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
      "info" : "IfStatement[14377-26899]:IfStatement[14381-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14437-14514]:Block[14441-14518]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[14463-14492]:ReturnStatement[14467-14496]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[14520-26899]:IfStatement[14524-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14545-15313]:Block[14549-15319]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[14571-14586]:ExpressionStatement[14575-14590]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[14611-14652]:VariableDeclarationStatement[14615-14656]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).normalName().equals(\"body\")))",
      "info" : "IfStatement[14677-15291]:IfStatement[14681-15297]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[14737-14745]:SimpleName[14741-14751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14765-14897]:Block[14771-14903]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14848-14861]:ReturnStatement[14854-14867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14903-15291]:Block[14909-15297]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[14933-14954]:ExpressionStatement[14939-14960]"
    }, {
      "left" : "Element body = stack.get(1);",
      "right" : "Element body = stack.get(1);",
      "info" : "VariableDeclarationStatement[14983-15011]:VariableDeclarationStatement[14989-15017]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[15040-15265]:EnhancedForStatement[15046-15271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15093-15265]:Block[15099-15271]"
    }, {
      "left" : "if (!body.hasAttr(attribute.getKey()))",
      "right" : "if (!body.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[15127-15235]:IfStatement[15133-15241]"
    }, {
      "left" : "body.attributes().put(attribute);",
      "right" : "body.attributes().put(attribute);",
      "info" : "ExpressionStatement[15202-15235]:ExpressionStatement[15208-15241]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[15319-26899]:IfStatement[15325-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15348-16309]:Block[15354-16317]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[15374-15389]:ExpressionStatement[15380-15395]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[15414-15455]:VariableDeclarationStatement[15420-15461]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).normalName().equals(\"body\")))",
      "info" : "IfStatement[15480-16287]:IfStatement[15486-16295]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[15540-15548]:SimpleName[15546-15556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15568-15700]:Block[15576-15708]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15651-15664]:ReturnStatement[15659-15672]"
    }, {
      "left" : "if (!tb.framesetOk())",
      "right" : "if (!tb.framesetOk())",
      "info" : "IfStatement[15706-16287]:IfStatement[15714-16295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15728-15816]:Block[15736-15824]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15758-15771]:ReturnStatement[15766-15779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15822-16287]:Block[15830-16295]"
    }, {
      "left" : "Element second = stack.get(1);",
      "right" : "Element second = stack.get(1);",
      "info" : "VariableDeclarationStatement[15852-15882]:VariableDeclarationStatement[15860-15890]"
    }, {
      "left" : "if (second.parent() != null)",
      "right" : "if (second.parent() != null)",
      "info" : "IfStatement[15911-15988]:IfStatement[15919-15996]"
    }, {
      "left" : "second.remove();",
      "right" : "second.remove();",
      "info" : "ExpressionStatement[15972-15988]:ExpressionStatement[15980-15996]"
    }, {
      "left" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
      "right" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
      "info" : "WhileStatement[16071-16157]:WhileStatement[16079-16165]"
    }, {
      "left" : "stack.remove(stack.size()-1);",
      "right" : "stack.remove(stack.size()-1);",
      "info" : "ExpressionStatement[16128-16157]:ExpressionStatement[16136-16165]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16186-16206]:ExpressionStatement[16194-16214]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[16235-16261]:ExpressionStatement[16243-16269]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "info" : "IfStatement[16315-26899]:IfStatement[16323-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16366-16775]:Block[16374-16785]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16392-16497]:IfStatement[16400-16505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16419-16497]:Block[16427-16505]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[16449-16471]:ExpressionStatement[16457-16479]"
    }, {
      "left" : "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings))",
      "right" : "if (StringUtil.inSorted(tb.currentElement().normalName(), Constants.Headings))",
      "info" : "IfStatement[16522-16708]:IfStatement[16530-16718]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[16566-16574]:SimpleName[16574-16584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16599-16708]:Block[16609-16718]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[16629-16644]:ExpressionStatement[16639-16654]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[16673-16682]:ExpressionStatement[16683-16692]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16733-16753]:ExpressionStatement[16743-16763]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
      "info" : "IfStatement[16781-26899]:IfStatement[16791-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16845-17170]:Block[16855-17180]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16871-16976]:IfStatement[16881-16986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16898-16976]:Block[16908-16986]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[16928-16950]:ExpressionStatement[16938-16960]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[17001-17021]:ExpressionStatement[17011-17031]"
    }, {
      "left" : "tb.reader.matchConsume(\"\\n\");",
      "right" : "tb.reader.matchConsume(\"\\n\");",
      "info" : "ExpressionStatement[17046-17075]:ExpressionStatement[17056-17085]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[17127-17148]:ExpressionStatement[17137-17158]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[17176-26899]:IfStatement[17186-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17201-17580]:Block[17211-17590]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[17227-17373]:IfStatement[17237-17383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17260-17373]:Block[17270-17383]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[17290-17305]:ExpressionStatement[17300-17315]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17334-17347]:ReturnStatement[17344-17357]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[17398-17503]:IfStatement[17408-17513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17425-17503]:Block[17435-17513]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[17455-17477]:ExpressionStatement[17465-17487]"
    }, {
      "left" : "tb.insertForm(startTag, true);",
      "right" : "tb.insertForm(startTag, true);",
      "info" : "ExpressionStatement[17528-17558]:ExpressionStatement[17538-17568]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "info" : "IfStatement[17586-26899]:IfStatement[17596-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17633-18474]:Block[17643-18490]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[17659-17680]:ExpressionStatement[17669-17690]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[17705-17746]:VariableDeclarationStatement[17715-17756]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[17771-18277]:ForStatement[17781-18293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17814-18277]:Block[17824-18293]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[17844-17870]:VariableDeclarationStatement[17854-17880]"
    }, {
      "left" : "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(el.normalName(), Constants.DdDt))",
      "info" : "IfStatement[17899-18090]:IfStatement[17909-18104]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[17926-17934]:SimpleName[17936-17946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17955-18090]:Block[17967-18104]"
    }, {
      "left" : "tb.processEndTag(el.nodeName());",
      "right" : "tb.processEndTag(el.normalName());",
      "info" : "ExpressionStatement[17989-18021]:ExpressionStatement[18001-18035]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[18009-18017]:SimpleName[18021-18031]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18054-18060]:BreakStatement[18068-18074]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.normalName(), Constants.InBodyStartLiBreakers))",
      "info" : "IfStatement[18119-18251]:IfStatement[18133-18267]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[18167-18175]:SimpleName[18181-18191]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18245-18251]:BreakStatement[18261-18267]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[18302-18407]:IfStatement[18318-18423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18329-18407]:Block[18345-18423]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[18359-18381]:ExpressionStatement[18375-18397]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[18432-18452]:ExpressionStatement[18448-18468]"
    }, {
      "left" : "if (name.equals(\"plaintext\"))",
      "right" : "if (name.equals(\"plaintext\"))",
      "info" : "IfStatement[18480-26899]:IfStatement[18496-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18510-18810]:Block[18526-18826]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[18536-18641]:IfStatement[18552-18657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18563-18641]:Block[18579-18657]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[18593-18615]:ExpressionStatement[18609-18631]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[18666-18686]:ExpressionStatement[18682-18702]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "right" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "info" : "ExpressionStatement[18711-18761]:ExpressionStatement[18727-18777]"
    }, {
      "left" : "if (name.equals(\"button\"))",
      "right" : "if (name.equals(\"button\"))",
      "info" : "IfStatement[18816-26899]:IfStatement[18832-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18843-19347]:Block[18859-19363]"
    }, {
      "left" : "if (tb.inButtonScope(\"button\"))",
      "right" : "if (tb.inButtonScope(\"button\"))",
      "info" : "IfStatement[18869-19325]:IfStatement[18885-19341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18901-19129]:Block[18917-19145]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[18982-18997]:ExpressionStatement[18998-19013]"
    }, {
      "left" : "tb.processEndTag(\"button\");",
      "right" : "tb.processEndTag(\"button\");",
      "info" : "ExpressionStatement[19026-19053]:ExpressionStatement[19042-19069]"
    }, {
      "left" : "tb.process(startTag);",
      "right" : "tb.process(startTag);",
      "info" : "ExpressionStatement[19082-19103]:ExpressionStatement[19098-19119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19135-19325]:Block[19151-19341]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19165-19200]:ExpressionStatement[19181-19216]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[19229-19249]:ExpressionStatement[19245-19265]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[19278-19299]:ExpressionStatement[19294-19315]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Formatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.Formatters))",
      "info" : "IfStatement[19353-26899]:IfStatement[19369-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19406-19608]:Block[19422-19624]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19432-19467]:ExpressionStatement[19448-19483]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19492-19525]:VariableDeclarationStatement[19508-19541]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19550-19586]:ExpressionStatement[19566-19602]"
    }, {
      "left" : "if (name.equals(\"nobr\"))",
      "right" : "if (name.equals(\"nobr\"))",
      "info" : "IfStatement[19614-26899]:IfStatement[19630-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19639-20079]:Block[19655-20095]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19665-19700]:ExpressionStatement[19681-19716]"
    }, {
      "left" : "if (tb.inScope(\"nobr\"))",
      "right" : "if (tb.inScope(\"nobr\"))",
      "info" : "IfStatement[19725-19938]:IfStatement[19741-19954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19749-19938]:Block[19765-19954]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[19779-19794]:ExpressionStatement[19795-19810]"
    }, {
      "left" : "tb.processEndTag(\"nobr\");",
      "right" : "tb.processEndTag(\"nobr\");",
      "info" : "ExpressionStatement[19823-19848]:ExpressionStatement[19839-19864]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19877-19912]:ExpressionStatement[19893-19928]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19963-19996]:VariableDeclarationStatement[19979-20012]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[20021-20057]:ExpressionStatement[20037-20073]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "info" : "IfStatement[20085-26899]:IfStatement[20101-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20146-20383]:Block[20162-20399]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[20172-20207]:ExpressionStatement[20188-20223]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[20232-20252]:ExpressionStatement[20248-20268]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[20277-20315]:ExpressionStatement[20293-20331]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20340-20361]:ExpressionStatement[20356-20377]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[20389-26899]:IfStatement[20405-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20415-20770]:Block[20431-20786]"
    }, {
      "left" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "right" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[20441-20609]:IfStatement[20457-20625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20531-20609]:Block[20547-20625]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[20561-20583]:ExpressionStatement[20577-20599]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[20634-20654]:ExpressionStatement[20650-20670]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20679-20700]:ExpressionStatement[20695-20716]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[20725-20748]:ExpressionStatement[20741-20764]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[20776-26899]:IfStatement[20792-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20802-21071]:Block[20818-21087]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[20828-20863]:ExpressionStatement[20844-20879]"
    }, {
      "left" : "Element el = tb.insertEmpty(startTag);",
      "right" : "Element el = tb.insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[20888-20926]:VariableDeclarationStatement[20904-20942]"
    }, {
      "left" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[20951-21049]:IfStatement[20967-21065]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[21028-21049]:ExpressionStatement[21044-21065]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
      "info" : "IfStatement[21077-26899]:IfStatement[21093-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21136-21209]:Block[21152-21225]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[21162-21187]:ExpressionStatement[21178-21203]"
    }, {
      "left" : "if (name.equals(\"hr\"))",
      "right" : "if (name.equals(\"hr\"))",
      "info" : "IfStatement[21215-26899]:IfStatement[21231-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21238-21487]:Block[21254-21503]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[21264-21369]:IfStatement[21280-21385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21291-21369]:Block[21307-21385]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[21321-21343]:ExpressionStatement[21337-21359]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[21394-21419]:ExpressionStatement[21410-21435]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[21444-21465]:ExpressionStatement[21460-21481]"
    }, {
      "left" : "if (name.equals(\"image\"))",
      "right" : "if (name.equals(\"image\"))",
      "info" : "IfStatement[21493-26899]:IfStatement[21509-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21519-21791]:Block[21535-21807]"
    }, {
      "left" : "if (tb.getFromStack(\"svg\") == null)",
      "right" : "if (tb.getFromStack(\"svg\") == null)",
      "info" : "IfStatement[21545-21769]:IfStatement[21561-21785]"
    }, {
      "left" : "return tb.process(startTag.name(\"img\"));",
      "right" : "return tb.process(startTag.name(\"img\"));",
      "info" : "ReturnStatement[21609-21649]:ReturnStatement[21625-21665]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[21749-21769]:ExpressionStatement[21765-21785]"
    }, {
      "left" : "if (name.equals(\"isindex\"))",
      "right" : "if (name.equals(\"isindex\"))",
      "info" : "IfStatement[21797-26899]:IfStatement[21813-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21825-23446]:Block[21841-23462]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[21919-21934]:ExpressionStatement[21935-21950]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[21959-22033]:IfStatement[21975-22049]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22020-22033]:ReturnStatement[22036-22049]"
    }, {
      "left" : "tb.processStartTag(\"form\");",
      "right" : "tb.processStartTag(\"form\");",
      "info" : "ExpressionStatement[22059-22086]:ExpressionStatement[22075-22102]"
    }, {
      "left" : "if (startTag.attributes.hasKey(\"action\"))",
      "right" : "if (startTag.attributes.hasKey(\"action\"))",
      "info" : "IfStatement[22111-22328]:IfStatement[22127-22344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22153-22328]:Block[22169-22344]"
    }, {
      "left" : "Element form = tb.getFormElement();",
      "right" : "Element form = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[22183-22218]:VariableDeclarationStatement[22199-22234]"
    }, {
      "left" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "right" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "info" : "ExpressionStatement[22247-22302]:ExpressionStatement[22263-22318]"
    }, {
      "left" : "tb.processStartTag(\"hr\");",
      "right" : "tb.processStartTag(\"hr\");",
      "info" : "ExpressionStatement[22353-22378]:ExpressionStatement[22369-22394]"
    }, {
      "left" : "tb.processStartTag(\"label\");",
      "right" : "tb.processStartTag(\"label\");",
      "info" : "ExpressionStatement[22403-22431]:ExpressionStatement[22419-22447]"
    }, {
      "left" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "right" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "info" : "VariableDeclarationStatement[22506-22715]:VariableDeclarationStatement[22522-22731]"
    }, {
      "left" : "tb.process(new Token.Character().data(prompt));",
      "right" : "tb.process(new Token.Character().data(prompt));",
      "info" : "ExpressionStatement[22741-22788]:ExpressionStatement[22757-22804]"
    }, {
      "left" : "Attributes inputAttribs = new Attributes();",
      "right" : "Attributes inputAttribs = new Attributes();",
      "info" : "VariableDeclarationStatement[22847-22890]:VariableDeclarationStatement[22863-22906]"
    }, {
      "left" : "for (Attribute attr : startTag.attributes)",
      "right" : "for (Attribute attr : startTag.attributes)",
      "info" : "EnhancedForStatement[22915-23145]:EnhancedForStatement[22931-23161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22958-23145]:Block[22974-23161]"
    }, {
      "left" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
      "right" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
      "info" : "IfStatement[22988-23119]:IfStatement[23004-23135]"
    }, {
      "left" : "inputAttribs.put(attr);",
      "right" : "inputAttribs.put(attr);",
      "info" : "ExpressionStatement[23096-23119]:ExpressionStatement[23112-23135]"
    }, {
      "left" : "inputAttribs.put(\"name\", \"isindex\");",
      "right" : "inputAttribs.put(\"name\", \"isindex\");",
      "info" : "ExpressionStatement[23170-23206]:ExpressionStatement[23186-23222]"
    }, {
      "left" : "tb.processStartTag(\"input\", inputAttribs);",
      "right" : "tb.processStartTag(\"input\", inputAttribs);",
      "info" : "ExpressionStatement[23231-23273]:ExpressionStatement[23247-23289]"
    }, {
      "left" : "tb.processEndTag(\"label\");",
      "right" : "tb.processEndTag(\"label\");",
      "info" : "ExpressionStatement[23298-23324]:ExpressionStatement[23314-23340]"
    }, {
      "left" : "tb.processStartTag(\"hr\");",
      "right" : "tb.processStartTag(\"hr\");",
      "info" : "ExpressionStatement[23349-23374]:ExpressionStatement[23365-23390]"
    }, {
      "left" : "tb.processEndTag(\"form\");",
      "right" : "tb.processEndTag(\"form\");",
      "info" : "ExpressionStatement[23399-23424]:ExpressionStatement[23415-23440]"
    }, {
      "left" : "if (name.equals(\"textarea\"))",
      "right" : "if (name.equals(\"textarea\"))",
      "info" : "IfStatement[23452-26899]:IfStatement[23468-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23481-23993]:Block[23497-24009]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[23507-23527]:ExpressionStatement[23523-23543]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[23785-23832]:ExpressionStatement[23801-23848]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[23857-23880]:ExpressionStatement[23873-23896]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[23905-23926]:ExpressionStatement[23921-23942]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[23951-23971]:ExpressionStatement[23967-23987]"
    }, {
      "left" : "if (name.equals(\"xmp\"))",
      "right" : "if (name.equals(\"xmp\"))",
      "info" : "IfStatement[23999-26899]:IfStatement[24015-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24023-24335]:Block[24039-24351]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[24049-24154]:IfStatement[24065-24170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24076-24154]:Block[24092-24170]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[24106-24128]:ExpressionStatement[24122-24144]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[24179-24214]:ExpressionStatement[24195-24230]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24239-24260]:ExpressionStatement[24255-24276]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24285-24313]:ExpressionStatement[24301-24329]"
    }, {
      "left" : "if (name.equals(\"iframe\"))",
      "right" : "if (name.equals(\"iframe\"))",
      "info" : "IfStatement[24341-26899]:IfStatement[24357-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24368-24490]:Block[24384-24506]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24394-24415]:ExpressionStatement[24410-24431]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24440-24468]:ExpressionStatement[24456-24484]"
    }, {
      "left" : "if (name.equals(\"noembed\"))",
      "right" : "if (name.equals(\"noembed\"))",
      "info" : "IfStatement[24496-26899]:IfStatement[24512-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24524-24666]:Block[24540-24682]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24616-24644]:ExpressionStatement[24632-24660]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[24672-26899]:IfStatement[24688-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24699-25235]:Block[24715-25251]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[24725-24760]:ExpressionStatement[24741-24776]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[24785-24805]:ExpressionStatement[24801-24821]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24830-24851]:ExpressionStatement[24846-24867]"
    }, {
      "left" : "HtmlTreeBuilderState state = tb.state();",
      "right" : "HtmlTreeBuilderState state = tb.state();",
      "info" : "VariableDeclarationStatement[24877-24917]:VariableDeclarationStatement[24893-24933]"
    }, {
      "left" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "right" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "info" : "IfStatement[24942-25213]:IfStatement[24958-25229]"
    }, {
      "left" : "tb.transition(InSelectInTable);",
      "right" : "tb.transition(InSelectInTable);",
      "info" : "ExpressionStatement[25100-25131]:ExpressionStatement[25116-25147]"
    }, {
      "left" : "tb.transition(InSelect);",
      "right" : "tb.transition(InSelect);",
      "info" : "ExpressionStatement[25189-25213]:ExpressionStatement[25205-25229]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
      "info" : "IfStatement[25241-26899]:IfStatement[25257-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25302-25563]:Block[25318-25581]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().normalName().equals(\"option\"))",
      "info" : "IfStatement[25328-25436]:IfStatement[25344-25454]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[25352-25360]:SimpleName[25368-25378]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[25409-25436]:ExpressionStatement[25427-25454]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[25461-25496]:ExpressionStatement[25479-25514]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25521-25541]:ExpressionStatement[25539-25559]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
      "info" : "IfStatement[25569-26899]:IfStatement[25587-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25627-26094]:Block[25645-26114]"
    }, {
      "left" : "if (tb.inScope(\"ruby\"))",
      "right" : "if (tb.inScope(\"ruby\"))",
      "info" : "IfStatement[25653-26072]:IfStatement[25671-26092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25677-26072]:Block[25695-26092]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[25707-25735]:ExpressionStatement[25725-25753]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "right" : "if (!tb.currentElement().normalName().equals(\"ruby\"))",
      "info" : "IfStatement[25764-25997]:IfStatement[25782-26017]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[25789-25797]:SimpleName[25807-25817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25816-25997]:Block[25836-26017]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[25850-25865]:ExpressionStatement[25870-25885]"
    }, {
      "left" : "tb.popStackToBefore(\"ruby\");",
      "right" : "tb.popStackToBefore(\"ruby\");",
      "info" : "ExpressionStatement[25898-25926]:ExpressionStatement[25918-25946]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26026-26046]:ExpressionStatement[26046-26066]"
    }, {
      "left" : "if (name.equals(\"math\"))",
      "right" : "if (name.equals(\"math\"))",
      "info" : "IfStatement[26100-26899]:IfStatement[26120-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26125-26353]:Block[26145-26373]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26151-26186]:ExpressionStatement[26171-26206]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26311-26331]:ExpressionStatement[26331-26351]"
    }, {
      "left" : "if (name.equals(\"svg\"))",
      "right" : "if (name.equals(\"svg\"))",
      "info" : "IfStatement[26359-26899]:IfStatement[26379-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26383-26600]:Block[26403-26620]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26409-26444]:ExpressionStatement[26429-26464]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26558-26578]:ExpressionStatement[26578-26598]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
      "info" : "IfStatement[26606-26899]:IfStatement[26626-26919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26664-26765]:Block[26684-26785]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[26690-26705]:ExpressionStatement[26710-26725]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26730-26743]:ReturnStatement[26750-26763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26771-26899]:Block[26791-26919]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26797-26832]:ExpressionStatement[26817-26852]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26857-26877]:ExpressionStatement[26877-26897]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26920-26926]:BreakStatement[26940-26946]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[26944-26956]:SwitchCase[26964-26976]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[26977-27012]:VariableDeclarationStatement[26997-27032]"
    }, {
      "left" : "name = endTag.normalName();",
      "right" : "name = endTag.normalName();",
      "info" : "ExpressionStatement[27033-27060]:ExpressionStatement[27053-27080]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
      "info" : "IfStatement[27081-38237]:IfStatement[27101-38277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27151-32863]:Block[27171-32889]"
    }, {
      "left" : "for (int i = 0; i < 8; i++)",
      "right" : "for (int i = 0; i < 8; i++)",
      "info" : "ForStatement[27231-32841]:ForStatement[27251-32867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27259-32841]:Block[27279-32867]"
    }, {
      "left" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "right" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "info" : "VariableDeclarationStatement[27289-27344]:VariableDeclarationStatement[27309-27364]"
    }, {
      "left" : "if (formatEl == null)",
      "right" : "if (formatEl == null)",
      "info" : "IfStatement[27373-27981]:IfStatement[27393-28003]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[27427-27456]:ReturnStatement[27447-27476]"
    }, {
      "left" : "if (!tb.onStack(formatEl))",
      "right" : "if (!tb.onStack(formatEl))",
      "info" : "IfStatement[27490-27981]:IfStatement[27510-28003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27517-27722]:Block[27537-27742]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27551-27566]:ExpressionStatement[27571-27586]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[27599-27647]:ExpressionStatement[27619-27667]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27680-27692]:ReturnStatement[27700-27712]"
    }, {
      "left" : "if (!tb.inScope(formatEl.nodeName()))",
      "right" : "if (!tb.inScope(formatEl.normalName()))",
      "info" : "IfStatement[27728-27981]:IfStatement[27748-28003]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[27753-27761]:SimpleName[27773-27783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27766-27891]:Block[27788-27913]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27800-27815]:ExpressionStatement[27822-27837]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27848-27861]:ReturnStatement[27870-27883]"
    }, {
      "left" : "if (tb.currentElement() != formatEl)",
      "right" : "if (tb.currentElement() != formatEl)",
      "info" : "IfStatement[27897-27981]:IfStatement[27919-28003]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27966-27981]:ExpressionStatement[27988-28003]"
    }, {
      "left" : "Element furthestBlock = null;",
      "right" : "Element furthestBlock = null;",
      "info" : "VariableDeclarationStatement[28011-28040]:VariableDeclarationStatement[28033-28062]"
    }, {
      "left" : "Element commonAncestor = null;",
      "right" : "Element commonAncestor = null;",
      "info" : "VariableDeclarationStatement[28069-28099]:VariableDeclarationStatement[28091-28121]"
    }, {
      "left" : "boolean seenFormattingElement = false;",
      "right" : "boolean seenFormattingElement = false;",
      "info" : "VariableDeclarationStatement[28128-28166]:VariableDeclarationStatement[28150-28188]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[28195-28236]:VariableDeclarationStatement[28217-28258]"
    }, {
      "left" : "final int stackSize = stack.size();",
      "right" : "final int stackSize = stack.size();",
      "info" : "VariableDeclarationStatement[28427-28462]:VariableDeclarationStatement[28449-28484]"
    }, {
      "left" : "for (int si = 0; si < stackSize && si < 64; si++)",
      "right" : "for (int si = 0; si < stackSize && si < 64; si++)",
      "info" : "ForStatement[28491-29045]:ForStatement[28513-29067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28541-29045]:Block[28563-29067]"
    }, {
      "left" : "Element el = stack.get(si);",
      "right" : "Element el = stack.get(si);",
      "info" : "VariableDeclarationStatement[28575-28602]:VariableDeclarationStatement[28597-28624]"
    }, {
      "left" : "if (el == formatEl)",
      "right" : "if (el == formatEl)",
      "info" : "IfStatement[28635-29015]:IfStatement[28657-29037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28655-28828]:Block[28677-28850]"
    }, {
      "left" : "commonAncestor = stack.get(si - 1);",
      "right" : "commonAncestor = stack.get(si - 1);",
      "info" : "ExpressionStatement[28693-28728]:ExpressionStatement[28715-28750]"
    }, {
      "left" : "seenFormattingElement = true;",
      "right" : "seenFormattingElement = true;",
      "info" : "ExpressionStatement[28765-28794]:ExpressionStatement[28787-28816]"
    }, {
      "left" : "if (seenFormattingElement && tb.isSpecial(el))",
      "right" : "if (seenFormattingElement && tb.isSpecial(el))",
      "info" : "IfStatement[28834-29015]:IfStatement[28856-29037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28881-29015]:Block[28903-29037]"
    }, {
      "left" : "furthestBlock = el;",
      "right" : "furthestBlock = el;",
      "info" : "ExpressionStatement[28919-28938]:ExpressionStatement[28941-28960]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28975-28981]:BreakStatement[28997-29003]"
    }, {
      "left" : "if (furthestBlock == null)",
      "right" : "if (furthestBlock == null)",
      "info" : "IfStatement[29074-29331]:IfStatement[29096-29355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29101-29331]:Block[29123-29355]"
    }, {
      "left" : "tb.popStackToClose(formatEl.nodeName());",
      "right" : "tb.popStackToClose(formatEl.normalName());",
      "info" : "ExpressionStatement[29135-29175]:ExpressionStatement[29157-29199]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[29163-29171]:SimpleName[29185-29195]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[29208-29256]:ExpressionStatement[29232-29280]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29289-29301]:ReturnStatement[29313-29325]"
    }, {
      "left" : "Element node = furthestBlock;",
      "right" : "Element node = furthestBlock;",
      "info" : "VariableDeclarationStatement[29635-29664]:VariableDeclarationStatement[29659-29688]"
    }, {
      "left" : "Element lastNode = furthestBlock;",
      "right" : "Element lastNode = furthestBlock;",
      "info" : "VariableDeclarationStatement[29693-29726]:VariableDeclarationStatement[29717-29750]"
    }, {
      "left" : "for (int j = 0; j < 3; j++)",
      "right" : "for (int j = 0; j < 3; j++)",
      "info" : "ForStatement[29755-31312]:ForStatement[29779-31336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29783-31312]:Block[29807-31336]"
    }, {
      "left" : "if (tb.onStack(node))",
      "right" : "if (tb.onStack(node))",
      "info" : "IfStatement[29817-29904]:IfStatement[29841-29928]"
    }, {
      "left" : "node = tb.aboveOnStack(node);",
      "right" : "node = tb.aboveOnStack(node);",
      "info" : "ExpressionStatement[29875-29904]:ExpressionStatement[29899-29928]"
    }, {
      "left" : "if (!tb.isInActiveFormattingElements(node))",
      "right" : "if (!tb.isInActiveFormattingElements(node))",
      "info" : "IfStatement[29937-30220]:IfStatement[29961-30244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29981-30150]:Block[30005-30174]"
    }, {
      "left" : "tb.removeFromStack(node);",
      "right" : "tb.removeFromStack(node);",
      "info" : "ExpressionStatement[30045-30070]:ExpressionStatement[30069-30094]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[30107-30116]:ContinueStatement[30131-30140]"
    }, {
      "left" : "if (node == formatEl)",
      "right" : "if (node == formatEl)",
      "info" : "IfStatement[30156-30220]:IfStatement[30180-30244]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30214-30220]:BreakStatement[30238-30244]"
    }, {
      "left" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
      "right" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[30254-30363]:VariableDeclarationStatement[30278-30387]"
    }, {
      "left" : "tb.replaceActiveFormattingElement(node, replacement);",
      "right" : "tb.replaceActiveFormattingElement(node, replacement);",
      "info" : "ExpressionStatement[30493-30546]:ExpressionStatement[30517-30570]"
    }, {
      "left" : "tb.replaceOnStack(node, replacement);",
      "right" : "tb.replaceOnStack(node, replacement);",
      "info" : "ExpressionStatement[30579-30616]:ExpressionStatement[30603-30640]"
    }, {
      "left" : "node = replacement;",
      "right" : "node = replacement;",
      "info" : "ExpressionStatement[30649-30668]:ExpressionStatement[30673-30692]"
    }, {
      "left" : "if (lastNode == furthestBlock)",
      "right" : "if (lastNode == furthestBlock)",
      "info" : "IfStatement[30702-31054]:IfStatement[30726-31078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30733-31054]:Block[30757-31078]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[31087-31172]:IfStatement[31111-31196]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[31154-31172]:ExpressionStatement[31178-31196]"
    }, {
      "left" : "node.appendChild(lastNode);",
      "right" : "node.appendChild(lastNode);",
      "info" : "ExpressionStatement[31205-31232]:ExpressionStatement[31229-31256]"
    }, {
      "left" : "lastNode = node;",
      "right" : "lastNode = node;",
      "info" : "ExpressionStatement[31266-31282]:ExpressionStatement[31290-31306]"
    }, {
      "left" : "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
      "right" : "if (StringUtil.inSorted(commonAncestor.normalName(), Constants.InBodyEndTableFosters))",
      "info" : "IfStatement[31342-31868]:IfStatement[31366-31894]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[31381-31389]:SimpleName[31405-31415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31427-31643]:Block[31453-31669]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[31461-31546]:IfStatement[31487-31572]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[31528-31546]:ExpressionStatement[31554-31572]"
    }, {
      "left" : "tb.insertInFosterParent(lastNode);",
      "right" : "tb.insertInFosterParent(lastNode);",
      "info" : "ExpressionStatement[31579-31613]:ExpressionStatement[31605-31639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31649-31868]:Block[31675-31894]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[31683-31768]:IfStatement[31709-31794]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[31750-31768]:ExpressionStatement[31776-31794]"
    }, {
      "left" : "commonAncestor.appendChild(lastNode);",
      "right" : "commonAncestor.appendChild(lastNode);",
      "info" : "ExpressionStatement[31801-31838]:ExpressionStatement[31827-31864]"
    }, {
      "left" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "right" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[31898-31961]:VariableDeclarationStatement[31924-31987]"
    }, {
      "left" : "adopter.attributes().addAll(formatEl.attributes());",
      "right" : "adopter.attributes().addAll(formatEl.attributes());",
      "info" : "ExpressionStatement[31990-32041]:ExpressionStatement[32016-32067]"
    }, {
      "left" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "right" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "info" : "VariableDeclarationStatement[32070-32166]:VariableDeclarationStatement[32096-32192]"
    }, {
      "left" : "for (Node childNode : childNodes)",
      "right" : "for (Node childNode : childNodes)",
      "info" : "EnhancedForStatement[32195-32389]:EnhancedForStatement[32221-32415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32229-32389]:Block[32255-32415]"
    }, {
      "left" : "adopter.appendChild(childNode);",
      "right" : "adopter.appendChild(childNode);",
      "info" : "ExpressionStatement[32263-32294]:ExpressionStatement[32289-32320]"
    }, {
      "left" : "furthestBlock.appendChild(adopter);",
      "right" : "furthestBlock.appendChild(adopter);",
      "info" : "ExpressionStatement[32418-32453]:ExpressionStatement[32444-32479]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[32482-32530]:ExpressionStatement[32508-32556]"
    }, {
      "left" : "tb.removeFromStack(formatEl);",
      "right" : "tb.removeFromStack(formatEl);",
      "info" : "ExpressionStatement[32711-32740]:ExpressionStatement[32737-32766]"
    }, {
      "left" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "right" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "info" : "ExpressionStatement[32769-32815]:ExpressionStatement[32795-32841]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
      "info" : "IfStatement[32869-38237]:IfStatement[32895-38277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32928-33430]:Block[32954-33458]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[32954-33408]:IfStatement[32980-33436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32977-33138]:Block[33003-33164]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33055-33070]:ExpressionStatement[33081-33096]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33099-33112]:ReturnStatement[33125-33138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33144-33408]:Block[33170-33436]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[33174-33202]:ExpressionStatement[33200-33228]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().normalName().equals(name))",
      "info" : "IfStatement[33231-33328]:IfStatement[33257-33356]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[33256-33264]:SimpleName[33282-33292]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33313-33328]:ExpressionStatement[33341-33356]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[33357-33382]:ExpressionStatement[33385-33410]"
    }, {
      "left" : "if (name.equals(\"span\"))",
      "right" : "if (name.equals(\"span\"))",
      "info" : "IfStatement[33436-38237]:IfStatement[33464-38277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33461-33617]:Block[33489-33645]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[33566-33595]:ReturnStatement[33594-33623]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[33623-38237]:IfStatement[33651-38277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33646-34112]:Block[33674-34142]"
    }, {
      "left" : "if (!tb.inListItemScope(name))",
      "right" : "if (!tb.inListItemScope(name))",
      "info" : "IfStatement[33672-34090]:IfStatement[33700-34120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33703-33816]:Block[33731-33844]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33733-33748]:ExpressionStatement[33761-33776]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33777-33790]:ReturnStatement[33805-33818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33822-34090]:Block[33850-34120]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[33852-33884]:ExpressionStatement[33880-33912]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().normalName().equals(name))",
      "info" : "IfStatement[33913-34010]:IfStatement[33941-34040]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[33938-33946]:SimpleName[33966-33976]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33995-34010]:ExpressionStatement[34025-34040]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[34039-34064]:ExpressionStatement[34069-34094]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[34118-38237]:IfStatement[34148-38277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34143-34576]:Block[34173-34606]"
    }, {
      "left" : "if (!tb.inScope(\"body\"))",
      "right" : "if (!tb.inScope(\"body\"))",
      "info" : "IfStatement[34169-34554]:IfStatement[34199-34584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34194-34307]:Block[34224-34337]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[34224-34239]:ExpressionStatement[34254-34269]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34268-34281]:ReturnStatement[34298-34311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34313-34554]:Block[34343-34584]"
    }, {
      "left" : "tb.transition(AfterBody);",
      "right" : "tb.transition(AfterBody);",
      "info" : "ExpressionStatement[34503-34528]:ExpressionStatement[34533-34558]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[34582-38237]:IfStatement[34612-38277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34607-34796]:Block[34637-34826]"
    }, {
      "left" : "boolean notIgnored = tb.processEndTag(\"body\");",
      "right" : "boolean notIgnored = tb.processEndTag(\"body\");",
      "info" : "VariableDeclarationStatement[34633-34679]:VariableDeclarationStatement[34663-34709]"
    }, {
      "left" : "if (notIgnored)",
      "right" : "if (notIgnored)",
      "info" : "IfStatement[34704-34774]:IfStatement[34734-34804]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[34748-34774]:ReturnStatement[34778-34804]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[34802-38237]:IfStatement[34832-38277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34827-35519]:Block[34857-35551]"
    }, {
      "left" : "Element currentForm = tb.getFormElement();",
      "right" : "Element currentForm = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[34853-34895]:VariableDeclarationStatement[34883-34925]"
    }, {
      "left" : "tb.setFormElement(null);",
      "right" : "tb.setFormElement(null);",
      "info" : "ExpressionStatement[34920-34944]:ExpressionStatement[34950-34974]"
    }, {
      "left" : "if (currentForm == null || !tb.inScope(name))",
      "right" : "if (currentForm == null || !tb.inScope(name))",
      "info" : "IfStatement[34969-35497]:IfStatement[34999-35529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35015-35128]:Block[35045-35158]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35045-35060]:ExpressionStatement[35075-35090]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35089-35102]:ReturnStatement[35119-35132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35134-35497]:Block[35164-35529]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[35164-35192]:ExpressionStatement[35194-35222]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().normalName().equals(name))",
      "info" : "IfStatement[35221-35318]:IfStatement[35251-35350]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[35246-35254]:SimpleName[35276-35286]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35303-35318]:ExpressionStatement[35335-35350]"
    }, {
      "left" : "tb.removeFromStack(currentForm);",
      "right" : "tb.removeFromStack(currentForm);",
      "info" : "ExpressionStatement[35439-35471]:ExpressionStatement[35471-35503]"
    }, {
      "left" : "if (name.equals(\"p\"))",
      "right" : "if (name.equals(\"p\"))",
      "info" : "IfStatement[35525-38237]:IfStatement[35557-38277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35547-36124]:Block[35579-36158]"
    }, {
      "left" : "if (!tb.inButtonScope(name))",
      "right" : "if (!tb.inButtonScope(name))",
      "info" : "IfStatement[35573-36102]:IfStatement[35605-36136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35602-35828]:Block[35634-35860]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35632-35647]:ExpressionStatement[35664-35679]"
    }, {
      "left" : "tb.processStartTag(name);",
      "right" : "tb.processStartTag(name);",
      "info" : "ExpressionStatement[35676-35701]:ExpressionStatement[35708-35733]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[35776-35802]:ReturnStatement[35808-35834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35834-36102]:Block[35866-36136]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[35864-35896]:ExpressionStatement[35896-35928]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().normalName().equals(name))",
      "info" : "IfStatement[35925-36022]:IfStatement[35957-36056]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[35950-35958]:SimpleName[35982-35992]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36007-36022]:ExpressionStatement[36041-36056]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[36051-36076]:ExpressionStatement[36085-36110]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "info" : "IfStatement[36130-38237]:IfStatement[36164-38277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36177-36635]:Block[36211-36671]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[36203-36613]:IfStatement[36237-36649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36226-36339]:Block[36260-36373]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36256-36271]:ExpressionStatement[36290-36305]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36300-36313]:ReturnStatement[36334-36347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36345-36613]:Block[36379-36649]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[36375-36407]:ExpressionStatement[36409-36441]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().normalName().equals(name))",
      "info" : "IfStatement[36436-36533]:IfStatement[36470-36569]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[36461-36469]:SimpleName[36495-36505]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36518-36533]:ExpressionStatement[36554-36569]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[36562-36587]:ExpressionStatement[36598-36623]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "info" : "IfStatement[36641-38237]:IfStatement[36677-38277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36692-37178]:Block[36728-37216]"
    }, {
      "left" : "if (!tb.inScope(Constants.Headings))",
      "right" : "if (!tb.inScope(Constants.Headings))",
      "info" : "IfStatement[36718-37156]:IfStatement[36754-37194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36755-36868]:Block[36791-36904]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36785-36800]:ExpressionStatement[36821-36836]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36829-36842]:ReturnStatement[36865-36878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36874-37156]:Block[36910-37194]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[36904-36936]:ExpressionStatement[36940-36972]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().normalName().equals(name))",
      "info" : "IfStatement[36965-37062]:IfStatement[37001-37100]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[36990-36998]:SimpleName[37026-37036]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37047-37062]:ExpressionStatement[37085-37100]"
    }, {
      "left" : "tb.popStackToClose(Constants.Headings);",
      "right" : "tb.popStackToClose(Constants.Headings);",
      "info" : "ExpressionStatement[37091-37130]:ExpressionStatement[37129-37168]"
    }, {
      "left" : "if (name.equals(\"sarcasm\"))",
      "right" : "if (name.equals(\"sarcasm\"))",
      "info" : "IfStatement[37184-38237]:IfStatement[37222-38277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37212-37323]:Block[37250-37361]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[37272-37301]:ReturnStatement[37310-37339]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "info" : "IfStatement[37329-38237]:IfStatement[37367-38277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37390-37974]:Block[37428-38014]"
    }, {
      "left" : "if (!tb.inScope(\"name\"))",
      "right" : "if (!tb.inScope(\"name\"))",
      "info" : "IfStatement[37416-37952]:IfStatement[37454-37992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37441-37952]:Block[37479-37992]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[37471-37619]:IfStatement[37509-37657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37494-37619]:Block[37532-37657]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37528-37543]:ExpressionStatement[37566-37581]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37576-37589]:ReturnStatement[37614-37627]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[37648-37676]:ExpressionStatement[37686-37714]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().normalName().equals(name))",
      "info" : "IfStatement[37705-37802]:IfStatement[37743-37842]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[37730-37738]:SimpleName[37768-37778]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37787-37802]:ExpressionStatement[37827-37842]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[37831-37856]:ExpressionStatement[37871-37896]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[37885-37926]:ExpressionStatement[37925-37966]"
    }, {
      "left" : "if (name.equals(\"br\"))",
      "right" : "if (name.equals(\"br\"))",
      "info" : "IfStatement[37980-38237]:IfStatement[38020-38277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38003-38154]:Block[38043-38194]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[38029-38044]:ExpressionStatement[38069-38084]"
    }, {
      "left" : "tb.processStartTag(\"br\");",
      "right" : "tb.processStartTag(\"br\");",
      "info" : "ExpressionStatement[38069-38094]:ExpressionStatement[38109-38134]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38119-38132]:ReturnStatement[38159-38172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38160-38237]:Block[38200-38277]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[38186-38215]:ReturnStatement[38226-38255]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38259-38265]:BreakStatement[38299-38305]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[38282-38291]:SwitchCase[38322-38331]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38474-38480]:BreakStatement[38514-38520]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38507-38519]:ReturnStatement[38547-38559]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38539-38546]:PrimitiveType[38579-38586]"
    }, {
      "left" : "anyOtherEndTag",
      "right" : "anyOtherEndTag",
      "info" : "SimpleName[38547-38561]:SimpleName[38587-38601]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[38562-38569]:SingleVariableDeclaration[38602-38609]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[38571-38589]:SingleVariableDeclaration[38611-38629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38591-39355]:Block[38631-39478]"
    }, {
      "left" : "t.asEndTag()",
      "right" : "t.asEndTag()",
      "info" : "MethodInvocation[38644-38656]:MethodInvocation[38659-38671]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[38678-38719]:VariableDeclarationStatement[38797-38838]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[38732-39320]:ForStatement[38851-39443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38781-39320]:Block[38900-39443]"
    }, {
      "left" : "Element node = stack.get(pos);",
      "right" : "Element node = stack.get(pos);",
      "info" : "VariableDeclarationStatement[38799-38829]:VariableDeclarationStatement[38918-38948]"
    }, {
      "left" : "if (node.nodeName().equals(name))",
      "right" : "if (node.normalName().equals(name))",
      "info" : "IfStatement[38846-39306]:IfStatement[38965-39429]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[38855-38863]:SimpleName[38974-38984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38880-39135]:Block[39001-39258]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[38902-38934]:ExpressionStatement[39023-39055]"
    }, {
      "left" : "if (!name.equals(tb.currentElement().nodeName()))",
      "right" : "if (!name.equals(tb.currentElement().normalName()))",
      "info" : "IfStatement[38955-39044]:IfStatement[39076-39167]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[38992-39000]:SimpleName[39113-39123]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39029-39044]:ExpressionStatement[39152-39167]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[39065-39090]:ExpressionStatement[39188-39213]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39111-39117]:BreakStatement[39234-39240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39141-39306]:Block[39264-39429]"
    }, {
      "left" : "if (tb.isSpecial(node))",
      "right" : "if (tb.isSpecial(node))",
      "info" : "IfStatement[39163-39288]:IfStatement[39286-39411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39187-39288]:Block[39310-39411]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39213-39228]:ExpressionStatement[39336-39351]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39253-39266]:ReturnStatement[39376-39389]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39333-39345]:ReturnStatement[39456-39468]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39445-39452]:PrimitiveType[39568-39575]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[39453-39460]:SimpleName[39576-39583]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[39461-39468]:SingleVariableDeclaration[39584-39591]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[39470-39488]:SingleVariableDeclaration[39593-39611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39490-40091]:Block[39613-40214]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[39504-40056]:IfStatement[39627-40179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39525-39584]:Block[39648-39707]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[39543-39570]:ExpressionStatement[39666-39693]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[39590-40056]:IfStatement[39713-40179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39605-39829]:Block[39728-39952]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39623-39638]:ExpressionStatement[39746-39761]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[39717-39726]:ExpressionStatement[39840-39849]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[39743-39777]:ExpressionStatement[39866-39900]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[39794-39815]:ReturnStatement[39917-39938]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[39835-40056]:IfStatement[39958-40179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39853-40056]:Block[39976-40179]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[39982-39991]:ExpressionStatement[40105-40114]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[40008-40042]:ExpressionStatement[40131-40165]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40069-40081]:ReturnStatement[40192-40204]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40121-40128]:PrimitiveType[40244-40251]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[40129-40136]:SimpleName[40252-40259]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[40137-40144]:SingleVariableDeclaration[40260-40267]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[40146-40164]:SingleVariableDeclaration[40269-40287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40166-44010]:Block[40289-44135]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[40180-43960]:IfStatement[40303-44085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40201-40386]:Block[40324-40509]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[40219-40250]:ExpressionStatement[40342-40373]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[40267-40290]:ExpressionStatement[40390-40413]"
    }, {
      "left" : "tb.transition(InTableText);",
      "right" : "tb.transition(InTableText);",
      "info" : "ExpressionStatement[40307-40334]:ExpressionStatement[40430-40457]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[40351-40372]:ReturnStatement[40474-40495]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[40392-43960]:IfStatement[40515-44085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40411-40497]:Block[40534-40620]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[40429-40454]:ExpressionStatement[40552-40577]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40471-40483]:ReturnStatement[40594-40606]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[40503-43960]:IfStatement[40626-44085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40522-40599]:Block[40645-40722]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[40540-40555]:ExpressionStatement[40663-40678]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40572-40585]:ReturnStatement[40695-40708]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[40605-43960]:IfStatement[40728-44085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40625-42933]:Block[40748-43056]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[40643-40684]:VariableDeclarationStatement[40766-40807]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[40701-40737]:VariableDeclarationStatement[40824-40860]"
    }, {
      "left" : "if (name.equals(\"caption\"))",
      "right" : "if (name.equals(\"caption\"))",
      "info" : "IfStatement[40754-42744]:IfStatement[40877-42867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40782-40998]:Block[40905-41121]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[40804-40834]:ExpressionStatement[40927-40957]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[40855-40893]:ExpressionStatement[40978-41016]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[40914-40934]:ExpressionStatement[41037-41057]"
    }, {
      "left" : "tb.transition(InCaption);",
      "right" : "tb.transition(InCaption);",
      "info" : "ExpressionStatement[40955-40980]:ExpressionStatement[41078-41103]"
    }, {
      "left" : "if (name.equals(\"colgroup\"))",
      "right" : "if (name.equals(\"colgroup\"))",
      "info" : "IfStatement[41004-42744]:IfStatement[41127-42867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41033-41194]:Block[41156-41317]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[41055-41085]:ExpressionStatement[41178-41208]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[41106-41126]:ExpressionStatement[41229-41249]"
    }, {
      "left" : "tb.transition(InColumnGroup);",
      "right" : "tb.transition(InColumnGroup);",
      "info" : "ExpressionStatement[41147-41176]:ExpressionStatement[41270-41299]"
    }, {
      "left" : "if (name.equals(\"col\"))",
      "right" : "if (name.equals(\"col\"))",
      "info" : "IfStatement[41200-42744]:IfStatement[41323-42867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41224-41337]:Block[41347-41460]"
    }, {
      "left" : "tb.processStartTag(\"colgroup\");",
      "right" : "tb.processStartTag(\"colgroup\");",
      "info" : "ExpressionStatement[41246-41277]:ExpressionStatement[41369-41400]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41298-41319]:ReturnStatement[41421-41442]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[41343-42744]:IfStatement[41466-42867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41395-41554]:Block[41518-41677]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[41417-41447]:ExpressionStatement[41540-41570]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[41468-41488]:ExpressionStatement[41591-41611]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[41509-41536]:ExpressionStatement[41632-41659]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[41560-42744]:IfStatement[41683-42867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41603-41713]:Block[41726-41836]"
    }, {
      "left" : "tb.processStartTag(\"tbody\");",
      "right" : "tb.processStartTag(\"tbody\");",
      "info" : "ExpressionStatement[41625-41653]:ExpressionStatement[41748-41776]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41674-41695]:ReturnStatement[41797-41818]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[41719-42744]:IfStatement[41842-42867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41745-41979]:Block[41868-42102]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[41767-41782]:ExpressionStatement[41890-41905]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"table\");",
      "right" : "boolean processed = tb.processEndTag(\"table\");",
      "info" : "VariableDeclarationStatement[41803-41849]:VariableDeclarationStatement[41926-41972]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[41870-41961]:IfStatement[41993-42084]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41940-41961]:ReturnStatement[42063-42084]"
    }, {
      "left" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "right" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "info" : "IfStatement[41985-42744]:IfStatement[42108-42867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42029-42098]:Block[42152-42221]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[42051-42080]:ReturnStatement[42174-42203]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[42104-42744]:IfStatement[42227-42867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42130-42389]:Block[42253-42512]"
    }, {
      "left" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[42152-42371]:IfStatement[42275-42494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42217-42292]:Block[42340-42415]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42243-42270]:ReturnStatement[42366-42393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42298-42371]:Block[42421-42494]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[42324-42349]:ExpressionStatement[42447-42472]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[42395-42744]:IfStatement[42518-42867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42420-42671]:Block[42543-42794]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[42442-42457]:ExpressionStatement[42565-42580]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[42478-42653]:IfStatement[42601-42776]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42535-42548]:ReturnStatement[42658-42671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42574-42653]:Block[42697-42776]"
    }, {
      "left" : "tb.insertForm(startTag, false);",
      "right" : "tb.insertForm(startTag, false);",
      "info" : "ExpressionStatement[42600-42631]:ExpressionStatement[42723-42754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42677-42744]:Block[42800-42867]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42699-42726]:ReturnStatement[42822-42849]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42761-42773]:ReturnStatement[42884-42896]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[42939-43960]:IfStatement[43062-44085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42957-43775]:Block[43080-43898]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[42975-43010]:VariableDeclarationStatement[43098-43133]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[43027-43061]:VariableDeclarationStatement[43150-43184]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[43079-43709]:IfStatement[43202-43832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43105-43401]:Block[43228-43524]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[43127-43338]:IfStatement[43250-43461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43155-43256]:Block[43278-43379]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43181-43196]:ExpressionStatement[43304-43319]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43221-43234]:ReturnStatement[43344-43357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43262-43338]:Block[43385-43461]"
    }, {
      "left" : "tb.popStackToClose(\"table\");",
      "right" : "tb.popStackToClose(\"table\");",
      "info" : "ExpressionStatement[43288-43316]:ExpressionStatement[43411-43439]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[43359-43383]:ExpressionStatement[43482-43506]"
    }, {
      "left" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[43407-43709]:IfStatement[43530-43832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43547-43636]:Block[43670-43759]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43569-43584]:ExpressionStatement[43692-43707]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43605-43618]:ReturnStatement[43728-43741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43642-43709]:Block[43765-43832]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43664-43691]:ReturnStatement[43787-43814]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43726-43738]:ReturnStatement[43849-43861]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[43781-43960]:IfStatement[43904-44085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43796-43960]:Block[43919-44085]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().normalName().equals(\"html\"))",
      "info" : "IfStatement[43814-43900]:IfStatement[43937-44025]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[43838-43846]:SimpleName[43961-43971]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43885-43900]:ExpressionStatement[44010-44025]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43917-43929]:ReturnStatement[44042-44054]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43973-44000]:ReturnStatement[44098-44125]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44020-44027]:PrimitiveType[44145-44152]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[44028-44040]:SimpleName[44153-44165]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[44041-44048]:SingleVariableDeclaration[44166-44173]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[44050-44068]:SingleVariableDeclaration[44175-44193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44070-44501]:Block[44195-44628]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[44084-44099]:ExpressionStatement[44209-44224]"
    }, {
      "left" : "boolean processed;",
      "right" : "boolean processed;",
      "info" : "VariableDeclarationStatement[44112-44130]:VariableDeclarationStatement[44237-44255]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().normalName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[44143-44461]:IfStatement[44268-44588]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[44181-44189]:SimpleName[44306-44316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44236-44389]:Block[44363-44516]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[44254-44280]:ExpressionStatement[44381-44407]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44297-44331]:ExpressionStatement[44424-44458]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[44348-44375]:ExpressionStatement[44475-44502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44395-44461]:Block[44522-44588]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44413-44447]:ExpressionStatement[44540-44574]"
    }, {
      "left" : "return processed;",
      "right" : "return processed;",
      "info" : "ReturnStatement[44474-44491]:ReturnStatement[44601-44618]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44535-44542]:PrimitiveType[44662-44669]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[44543-44550]:SimpleName[44670-44677]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[44551-44558]:SingleVariableDeclaration[44678-44685]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[44560-44578]:SingleVariableDeclaration[44687-44705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44580-46322]:Block[44707-46451]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don't really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don't really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().normalName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "info" : "SwitchStatement[44594-46287]:SwitchStatement[44721-46416]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[44628-44643]:SwitchCase[44755-44770]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[44664-44700]:VariableDeclarationStatement[44791-44827]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[44721-44960]:IfStatement[44848-45087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44757-44858]:Block[44884-44985]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[44783-44798]:ExpressionStatement[44910-44925]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44823-44836]:ReturnStatement[44950-44963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44864-44960]:Block[44991-45087]"
    }, {
      "left" : "tb.getPendingTableCharacters().add(c.getData());",
      "right" : "tb.getPendingTableCharacters().add(c.getData());",
      "info" : "ExpressionStatement[44890-44938]:ExpressionStatement[45017-45065]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44981-44987]:BreakStatement[45108-45114]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[45004-45012]:SwitchCase[45131-45139]"
    }, {
      "left" : "if (tb.getPendingTableCharacters().size() > 0)",
      "right" : "if (tb.getPendingTableCharacters().size() > 0)",
      "info" : "IfStatement[45132-46176]:IfStatement[45259-46305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45179-46176]:Block[45306-46305]"
    }, {
      "left" : "for (String character : tb.getPendingTableCharacters())",
      "right" : "for (String character : tb.getPendingTableCharacters())",
      "info" : "EnhancedForStatement[45205-46098]:EnhancedForStatement[45332-46227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45261-46098]:Block[45388-46227]"
    }, {
      "left" : "if (!isWhitespace(character))",
      "right" : "if (!isWhitespace(character))",
      "info" : "IfStatement[45291-46072]:IfStatement[45418-46201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45321-45985]:Block[45448-46114]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[45421-45436]:ExpressionStatement[45548-45563]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().normalName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[45469-45955]:IfStatement[45596-46084]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[45507-45515]:SimpleName[45634-45644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45562-45819]:Block[45691-45948]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[45600-45626]:ExpressionStatement[45729-45755]"
    }, {
      "left" : "tb.process(new Token.Character().data(character), InBody);",
      "right" : "tb.process(new Token.Character().data(character), InBody);",
      "info" : "ExpressionStatement[45663-45721]:ExpressionStatement[45792-45850]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[45758-45785]:ExpressionStatement[45887-45914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45825-45955]:Block[45954-46084]"
    }, {
      "left" : "tb.process(new Token.Character().data(character), InBody);",
      "right" : "tb.process(new Token.Character().data(character), InBody);",
      "info" : "ExpressionStatement[45863-45921]:ExpressionStatement[45992-46050]"
    }, {
      "left" : "tb.insert(new Token.Character().data(character));",
      "right" : "tb.insert(new Token.Character().data(character));",
      "info" : "ExpressionStatement[46023-46072]:ExpressionStatement[46152-46201]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[46123-46154]:ExpressionStatement[46252-46283]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[46197-46231]:ExpressionStatement[46326-46360]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[46252-46273]:ReturnStatement[46381-46402]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46300-46312]:ReturnStatement[46429-46441]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46354-46361]:PrimitiveType[46483-46490]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[46362-46369]:SimpleName[46491-46498]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[46370-46377]:SingleVariableDeclaration[46499-46506]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[46379-46397]:SingleVariableDeclaration[46508-46526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46399-47916]:Block[46528-48047]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\"))",
      "info" : "IfStatement[46413-47881]:IfStatement[46542-48012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46478-47076]:Block[46607-47207]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[46496-46531]:VariableDeclarationStatement[46625-46660]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[46548-46582]:VariableDeclarationStatement[46677-46711]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[46599-47062]:IfStatement[46728-47193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46627-46716]:Block[46756-46845]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46649-46664]:ExpressionStatement[46778-46793]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46685-46698]:ReturnStatement[46814-46827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46722-47062]:Block[46851-47193]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[46744-46772]:ExpressionStatement[46873-46901]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "right" : "if (!tb.currentElement().normalName().equals(\"caption\"))",
      "info" : "IfStatement[46793-46887]:IfStatement[46922-47018]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[46818-46826]:SimpleName[46947-46957]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46872-46887]:ExpressionStatement[47003-47018]"
    }, {
      "left" : "tb.popStackToClose(\"caption\");",
      "right" : "tb.popStackToClose(\"caption\");",
      "info" : "ExpressionStatement[46908-46938]:ExpressionStatement[47039-47069]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[46959-47000]:ExpressionStatement[47090-47131]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[47021-47044]:ExpressionStatement[47152-47175]"
    }, {
      "left" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\")))",
      "right" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\")))",
      "info" : "IfStatement[47082-47881]:IfStatement[47213-48012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47384-47569]:Block[47515-47700]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47402-47417]:ExpressionStatement[47533-47548]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"caption\");",
      "right" : "boolean processed = tb.processEndTag(\"caption\");",
      "info" : "VariableDeclarationStatement[47434-47482]:VariableDeclarationStatement[47565-47613]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[47499-47555]:IfStatement[47630-47686]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[47534-47555]:ReturnStatement[47665-47686]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[47575-47881]:IfStatement[47706-48012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47737-47814]:Block[47868-47945]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47755-47770]:ExpressionStatement[47886-47901]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47787-47800]:ReturnStatement[47918-47931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47820-47881]:Block[47951-48012]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[47838-47867]:ReturnStatement[47969-47998]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47894-47906]:ReturnStatement[48025-48037]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47952-47959]:PrimitiveType[48083-48090]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[47960-47967]:SimpleName[48091-48098]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[47968-47975]:SingleVariableDeclaration[48099-48106]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[47977-47995]:SingleVariableDeclaration[48108-48126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47997-49777]:Block[48128-49925]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[48011-48120]:IfStatement[48142-48251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48032-48120]:Block[48163-48251]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[48050-48077]:ExpressionStatement[48181-48208]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[48094-48106]:ReturnStatement[48225-48237]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    if (endTag.normalName.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    if (endTag.normalName.equals(\"colgroup\")) {\n                        if (tb.currentElement().normalName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().normalName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[48133-49742]:SwitchStatement[48264-49890]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[48167-48180]:SwitchCase[48298-48311]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[48201-48226]:ExpressionStatement[48332-48357]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48247-48253]:BreakStatement[48378-48384]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[48270-48283]:SwitchCase[48401-48414]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[48304-48319]:ExpressionStatement[48435-48450]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48340-48346]:BreakStatement[48471-48477]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[48363-48377]:SwitchCase[48494-48508]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[48398-48439]:VariableDeclarationStatement[48529-48570]"
    }, {
      "left" : "switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
      "right" : "switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
      "info" : "SwitchStatement[48460-48823]:SwitchStatement[48591-48954]"
    }, {
      "left" : "case \"html\":",
      "right" : "case \"html\":",
      "info" : "SwitchCase[48517-48529]:SwitchCase[48648-48660]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[48558-48587]:ReturnStatement[48689-48718]"
    }, {
      "left" : "case \"col\":",
      "right" : "case \"col\":",
      "info" : "SwitchCase[48612-48623]:SwitchCase[48743-48754]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[48652-48677]:ExpressionStatement[48783-48808]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48706-48712]:BreakStatement[48837-48843]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48737-48745]:SwitchCase[48868-48876]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[48774-48801]:ReturnStatement[48905-48932]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48844-48850]:BreakStatement[48975-48981]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[48867-48879]:SwitchCase[48998-49010]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[48900-48935]:VariableDeclarationStatement[49031-49066]"
    }, {
      "left" : "if (endTag.normalName.equals(\"colgroup\"))",
      "right" : "if (endTag.normalName.equals(\"colgroup\"))",
      "info" : "IfStatement[48956-49390]:IfStatement[49087-49536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48998-49333]:Block[49129-49479]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().normalName().equals(\"html\"))",
      "info" : "IfStatement[49024-49311]:IfStatement[49155-49457]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[49048-49056]:SimpleName[49179-49189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49075-49188]:Block[49208-49334]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[49105-49120]:ExpressionStatement[49251-49266]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49149-49162]:ReturnStatement[49295-49308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49194-49311]:Block[49340-49457]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[49224-49233]:ExpressionStatement[49370-49379]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[49262-49285]:ExpressionStatement[49408-49431]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49363-49390]:ReturnStatement[49509-49536]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49411-49417]:BreakStatement[49557-49563]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[49434-49443]:SwitchCase[49580-49589]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().normalName().equals(\"html\"))",
      "info" : "IfStatement[49464-49655]:IfStatement[49610-49803]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[49488-49496]:SimpleName[49634-49644]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49539-49551]:ReturnStatement[49687-49699]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49628-49655]:ReturnStatement[49776-49803]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[49672-49680]:SwitchCase[49820-49828]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49701-49728]:ReturnStatement[49849-49876]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49755-49767]:ReturnStatement[49903-49915]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49787-49794]:Modifier[49935-49942]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49795-49802]:PrimitiveType[49943-49950]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[49803-49815]:SimpleName[49951-49963]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[49816-49823]:SingleVariableDeclaration[49964-49971]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[49825-49839]:SingleVariableDeclaration[49973-49987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49841-50033]:Block[49989-50181]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"colgroup\");",
      "right" : "boolean processed = tb.processEndTag(\"colgroup\");",
      "info" : "VariableDeclarationStatement[49855-49904]:VariableDeclarationStatement[50003-50052]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[49917-49998]:IfStatement[50065-50146]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[49977-49998]:ReturnStatement[50125-50146]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[50011-50023]:ReturnStatement[50159-50171]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[50067-50074]:PrimitiveType[50215-50222]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[50075-50082]:SimpleName[50223-50230]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[50083-50090]:SingleVariableDeclaration[50231-50238]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[50092-50110]:SingleVariableDeclaration[50240-50258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50112-52161]:Block[50260-52309]"
    }, {
      "left" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"template\")) {\n                        tb.insert(startTag);\n                    } else if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"template\")) {\n                        tb.insert(startTag);\n                    } else if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[50126-52126]:SwitchStatement[50274-52274]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[50160-50174]:SwitchCase[50308-50322]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[50195-50236]:VariableDeclarationStatement[50343-50384]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[50257-50293]:VariableDeclarationStatement[50405-50441]"
    }, {
      "left" : "if (name.equals(\"template\"))",
      "right" : "if (name.equals(\"template\"))",
      "info" : "IfStatement[50314-51043]:IfStatement[50462-51191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50343-50411]:Block[50491-50559]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[50369-50389]:ExpressionStatement[50517-50537]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[50417-51043]:IfStatement[50565-51191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50440-50613]:Block[50588-50761]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[50466-50500]:ExpressionStatement[50614-50648]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[50525-50545]:ExpressionStatement[50673-50693]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[50570-50591]:ExpressionStatement[50718-50739]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[50619-51043]:IfStatement[50767-51191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50656-50822]:Block[50804-50970]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[50682-50697]:ExpressionStatement[50830-50845]"
    }, {
      "left" : "tb.processStartTag(\"tr\");",
      "right" : "tb.processStartTag(\"tr\");",
      "info" : "ExpressionStatement[50722-50747]:ExpressionStatement[50870-50895]"
    }, {
      "left" : "return tb.process(startTag);",
      "right" : "return tb.process(startTag);",
      "info" : "ReturnStatement[50772-50800]:ReturnStatement[50920-50948]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[50828-51043]:IfStatement[50976-51191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50910-50986]:Block[51058-51134]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[50936-50964]:ReturnStatement[51084-51112]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[51016-51043]:ReturnStatement[51164-51191]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51064-51070]:BreakStatement[51212-51218]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[51087-51099]:SwitchCase[51235-51247]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[51120-51155]:VariableDeclarationStatement[51268-51303]"
    }, {
      "left" : "name = endTag.normalName();",
      "right" : "name = endTag.normalName();",
      "info" : "ExpressionStatement[51176-51203]:ExpressionStatement[51324-51351]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[51224-52012]:IfStatement[51372-52160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51276-51651]:Block[51424-51799]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[51302-51629]:IfStatement[51450-51777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51330-51443]:Block[51478-51591]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[51360-51375]:ExpressionStatement[51508-51523]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51404-51417]:ReturnStatement[51552-51565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51449-51629]:Block[51597-51777]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[51479-51513]:ExpressionStatement[51627-51661]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[51542-51551]:ExpressionStatement[51690-51699]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[51580-51603]:ExpressionStatement[51728-51751]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[51657-52012]:IfStatement[51805-52160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51683-51759]:Block[51831-51907]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[51709-51737]:ReturnStatement[51857-51885]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[51765-52012]:IfStatement[51913-52160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51854-51955]:Block[52002-52103]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[51880-51895]:ExpressionStatement[52028-52043]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51920-51933]:ReturnStatement[52068-52081]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[51985-52012]:ReturnStatement[52133-52160]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52033-52039]:BreakStatement[52181-52187]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[52056-52064]:SwitchCase[52204-52212]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[52085-52112]:ReturnStatement[52233-52260]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[52139-52151]:ReturnStatement[52287-52299]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52171-52178]:Modifier[52319-52326]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52179-52186]:PrimitiveType[52327-52334]"
    }, {
      "left" : "exitTableBody",
      "right" : "exitTableBody",
      "info" : "SimpleName[52187-52200]:SimpleName[52335-52348]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[52201-52208]:SingleVariableDeclaration[52349-52356]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[52210-52228]:SingleVariableDeclaration[52358-52376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52230-52587]:Block[52378-52760]"
    }, {
      "left" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "right" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "info" : "IfStatement[52244-52434]:IfStatement[52392-52582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52328-52434]:Block[52476-52582]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[52375-52390]:ExpressionStatement[52523-52538]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52407-52420]:ReturnStatement[52555-52568]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[52447-52481]:ExpressionStatement[52595-52629]"
    }, {
      "left" : "tb.processEndTag(tb.currentElement().nodeName());",
      "right" : "tb.processEndTag(tb.currentElement().normalName());",
      "info" : "ExpressionStatement[52494-52543]:ExpressionStatement[52642-52693]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[52531-52539]:SimpleName[52679-52689]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[52556-52577]:ReturnStatement[52729-52750]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52597-52604]:Modifier[52770-52777]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52605-52612]:PrimitiveType[52778-52785]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[52613-52625]:SimpleName[52786-52798]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[52626-52633]:SingleVariableDeclaration[52799-52806]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[52635-52653]:SingleVariableDeclaration[52808-52826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52655-52709]:Block[52828-52882]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[52669-52699]:ReturnStatement[52842-52872]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52737-52744]:PrimitiveType[52910-52917]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[52745-52752]:SimpleName[52918-52925]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[52753-52760]:SingleVariableDeclaration[52926-52933]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[52762-52780]:SingleVariableDeclaration[52935-52953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52782-54809]:Block[52955-54982]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[52796-54774]:IfStatement[52969-54947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52816-53545]:Block[52989-53718]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[52834-52875]:VariableDeclarationStatement[53007-53048]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[52892-52928]:VariableDeclarationStatement[53065-53101]"
    }, {
      "left" : "if (name.equals(\"template\"))",
      "right" : "if (name.equals(\"template\"))",
      "info" : "IfStatement[52946-53531]:IfStatement[53119-53704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52975-53035]:Block[53148-53208]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[52997-53017]:ExpressionStatement[53170-53190]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[53041-53531]:IfStatement[53214-53704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53078-53294]:Block[53251-53467]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[53100-53133]:ExpressionStatement[53273-53306]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[53154-53174]:ExpressionStatement[53327-53347]"
    }, {
      "left" : "tb.transition(InCell);",
      "right" : "tb.transition(InCell);",
      "info" : "ExpressionStatement[53195-53217]:ExpressionStatement[53368-53390]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[53238-53276]:ExpressionStatement[53411-53449]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[53300-53531]:IfStatement[53473-53704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53388-53458]:Block[53561-53631]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[53410-53440]:ReturnStatement[53583-53613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53464-53531]:Block[53637-53704]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[53486-53513]:ReturnStatement[53659-53686]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[53551-54774]:IfStatement[53724-54947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53569-54709]:Block[53742-54882]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[53587-53622]:VariableDeclarationStatement[53760-53795]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[53639-53673]:VariableDeclarationStatement[53812-53846]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[53691-54695]:IfStatement[53864-54868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53714-54029]:Block[53887-54202]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[53736-53873]:IfStatement[53909-54046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53764-53873]:Block[53937-54046]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[53790-53805]:ExpressionStatement[53963-53978]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53838-53851]:ReturnStatement[54011-54024]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[53894-53927]:ExpressionStatement[54067-54100]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[53948-53957]:ExpressionStatement[54121-54130]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[53984-54011]:ExpressionStatement[54157-54184]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[54035-54695]:IfStatement[54208-54868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54061-54131]:Block[54234-54304]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[54083-54113]:ReturnStatement[54256-54286]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[54137-54695]:IfStatement[54310-54868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54189-54444]:Block[54362-54617]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[54211-54340]:IfStatement[54384-54513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54239-54340]:Block[54412-54513]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[54265-54280]:ExpressionStatement[54438-54453]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54305-54318]:ReturnStatement[54478-54491]"
    }, {
      "left" : "tb.processEndTag(\"tr\");",
      "right" : "tb.processEndTag(\"tr\");",
      "info" : "ExpressionStatement[54361-54384]:ExpressionStatement[54534-54557]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[54405-54426]:ReturnStatement[54578-54599]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "info" : "IfStatement[54450-54695]:IfStatement[54623-54868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54533-54622]:Block[54706-54795]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[54555-54570]:ExpressionStatement[54728-54743]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54591-54604]:ReturnStatement[54764-54777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54628-54695]:Block[54801-54868]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[54650-54677]:ReturnStatement[54823-54850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54715-54774]:Block[54888-54947]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[54733-54760]:ReturnStatement[54906-54933]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[54787-54799]:ReturnStatement[54960-54972]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54819-54826]:Modifier[54992-54999]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54827-54834]:PrimitiveType[55000-55007]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[54835-54847]:SimpleName[55008-55020]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[54848-54855]:SingleVariableDeclaration[55021-55028]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[54857-54875]:SingleVariableDeclaration[55030-55048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54877-54931]:Block[55050-55104]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[54891-54921]:ReturnStatement[55064-55094]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54941-54948]:Modifier[55114-55121]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54949-54956]:PrimitiveType[55122-55129]"
    }, {
      "left" : "handleMissingTr",
      "right" : "handleMissingTr",
      "info" : "SimpleName[54957-54972]:SimpleName[55130-55145]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[54973-54980]:SingleVariableDeclaration[55146-55153]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[54982-54996]:SingleVariableDeclaration[55155-55169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54998-55177]:Block[55171-55350]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"tr\");",
      "right" : "boolean processed = tb.processEndTag(\"tr\");",
      "info" : "VariableDeclarationStatement[55012-55055]:VariableDeclarationStatement[55185-55228]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[55068-55167]:IfStatement[55241-55340]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[55099-55120]:ReturnStatement[55272-55293]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55154-55167]:ReturnStatement[55327-55340]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55206-55213]:PrimitiveType[55379-55386]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[55214-55221]:SimpleName[55387-55394]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[55222-55229]:SingleVariableDeclaration[55395-55402]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[55231-55249]:SingleVariableDeclaration[55404-55422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55251-57058]:Block[55424-57233]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[55265-57023]:IfStatement[55438-57198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55283-56594]:Block[55456-56769]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[55301-55336]:VariableDeclarationStatement[55474-55509]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[55353-55387]:VariableDeclarationStatement[55526-55560]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InCellNames))",
      "right" : "if (StringUtil.inSorted(name, Constants.InCellNames))",
      "info" : "IfStatement[55405-56580]:IfStatement[55578-56755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55459-56053]:Block[55632-56228]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[55481-55726]:IfStatement[55654-55899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55509-55726]:Block[55682-55899]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55535-55550]:ExpressionStatement[55708-55723]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55575-55596]:ExpressionStatement[55748-55769]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55691-55704]:ReturnStatement[55864-55877]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[55747-55775]:ExpressionStatement[55920-55948]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().normalName().equals(name))",
      "info" : "IfStatement[55796-55885]:IfStatement[55969-56060]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[55821-55829]:SimpleName[55994-56004]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55870-55885]:ExpressionStatement[56045-56060]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[55906-55931]:ExpressionStatement[56081-56106]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[55952-55993]:ExpressionStatement[56127-56168]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[56014-56035]:ExpressionStatement[56189-56210]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InCellBody))",
      "right" : "if (StringUtil.inSorted(name, Constants.InCellBody))",
      "info" : "IfStatement[56059-56580]:IfStatement[56234-56755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56112-56201]:Block[56287-56376]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56134-56149]:ExpressionStatement[56309-56324]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56170-56183]:ReturnStatement[56345-56358]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InCellTable))",
      "right" : "if (StringUtil.inSorted(name, Constants.InCellTable))",
      "info" : "IfStatement[56207-56580]:IfStatement[56382-56755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56261-56507]:Block[56436-56682]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[56283-56412]:IfStatement[56458-56587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56311-56412]:Block[56486-56587]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56337-56352]:ExpressionStatement[56512-56527]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56377-56390]:ReturnStatement[56552-56565]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[56433-56447]:ExpressionStatement[56608-56622]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56468-56489]:ReturnStatement[56643-56664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56513-56580]:Block[56688-56755]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56535-56562]:ReturnStatement[56710-56737]"
    }, {
      "left" : "if (t.isStartTag() &&\n                    StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol))",
      "right" : "if (t.isStartTag() &&\n                    StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol))",
      "info" : "IfStatement[56600-57023]:IfStatement[56775-57198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56713-56958]:Block[56888-57133]"
    }, {
      "left" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "right" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "info" : "IfStatement[56731-56875]:IfStatement[56906-57050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56786-56875]:Block[56961-57050]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56808-56823]:ExpressionStatement[56983-56998]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56844-56857]:ReturnStatement[57019-57032]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[56892-56906]:ExpressionStatement[57067-57081]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56923-56944]:ReturnStatement[57098-57119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56964-57023]:Block[57139-57198]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56982-57009]:ReturnStatement[57157-57184]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[57036-57048]:ReturnStatement[57211-57223]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57068-57075]:Modifier[57243-57250]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57076-57083]:PrimitiveType[57251-57258]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[57084-57096]:SimpleName[57259-57271]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[57097-57104]:SingleVariableDeclaration[57272-57279]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[57106-57124]:SingleVariableDeclaration[57281-57299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57126-57179]:Block[57301-57354]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[57140-57169]:ReturnStatement[57315-57344]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57189-57196]:Modifier[57364-57371]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57197-57201]:PrimitiveType[57372-57376]"
    }, {
      "left" : "closeCell",
      "right" : "closeCell",
      "info" : "SimpleName[57202-57211]:SimpleName[57377-57386]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[57212-57230]:SingleVariableDeclaration[57387-57405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57232-57413]:Block[57407-57588]"
    }, {
      "left" : "if (tb.inTableScope(\"td\"))",
      "right" : "if (tb.inTableScope(\"td\"))",
      "info" : "IfStatement[57246-57369]:IfStatement[57421-57544]"
    }, {
      "left" : "tb.processEndTag(\"td\");",
      "right" : "tb.processEndTag(\"td\");",
      "info" : "ExpressionStatement[57289-57312]:ExpressionStatement[57464-57487]"
    }, {
      "left" : "tb.processEndTag(\"th\");",
      "right" : "tb.processEndTag(\"th\");",
      "info" : "ExpressionStatement[57346-57369]:ExpressionStatement[57521-57544]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57444-57451]:PrimitiveType[57619-57626]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[57452-57459]:SimpleName[57627-57634]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[57460-57467]:SingleVariableDeclaration[57635-57642]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[57469-57487]:SingleVariableDeclaration[57644-57662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57489-61460]:Block[57664-61651]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        if (tb.currentElement().normalName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().normalName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().normalName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().normalName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).normalName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().normalName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().normalName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EOF:\n                    if (!tb.currentElement().normalName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[57503-61425]:SwitchStatement[57678-61616]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[57537-57552]:SwitchCase[57712-57727]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[57573-57609]:VariableDeclarationStatement[57748-57784]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[57630-57834]:IfStatement[57805-58009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57666-57767]:Block[57841-57942]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[57692-57707]:ExpressionStatement[57867-57882]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57732-57745]:ReturnStatement[57907-57920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57773-57834]:Block[57948-58009]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[57799-57812]:ExpressionStatement[57974-57987]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57855-57861]:BreakStatement[58030-58036]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[57878-57891]:SwitchCase[58053-58066]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[57912-57937]:ExpressionStatement[58087-58112]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57958-57964]:BreakStatement[58133-58139]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[57981-57994]:SwitchCase[58156-58169]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58015-58030]:ExpressionStatement[58190-58205]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58051-58064]:ReturnStatement[58226-58239]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[58081-58095]:SwitchCase[58256-58270]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[58116-58154]:VariableDeclarationStatement[58291-58329]"
    }, {
      "left" : "String name = start.normalName();",
      "right" : "String name = start.normalName();",
      "info" : "VariableDeclarationStatement[58175-58208]:VariableDeclarationStatement[58350-58383]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[58229-59617]:IfStatement[58404-59798]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[58278-58311]:ReturnStatement[58453-58486]"
    }, {
      "left" : "if (name.equals(\"option\"))",
      "right" : "if (name.equals(\"option\"))",
      "info" : "IfStatement[58337-59617]:IfStatement[58512-59798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58364-58562]:Block[58539-58739]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().normalName().equals(\"option\"))",
      "info" : "IfStatement[58390-58498]:IfStatement[58565-58675]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[58414-58422]:SimpleName[58589-58599]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[58471-58498]:ExpressionStatement[58648-58675]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58523-58540]:ExpressionStatement[58700-58717]"
    }, {
      "left" : "if (name.equals(\"optgroup\"))",
      "right" : "if (name.equals(\"optgroup\"))",
      "info" : "IfStatement[58568-59617]:IfStatement[58745-59798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58597-58937]:Block[58774-59118]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().normalName().equals(\"option\"))",
      "info" : "IfStatement[58623-58873]:IfStatement[58800-59054]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[58647-58655]:SimpleName[58824-58834]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[58704-58731]:ExpressionStatement[58883-58910]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().normalName().equals(\"optgroup\"))",
      "info" : "IfStatement[58761-58873]:IfStatement[58940-59054]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[58785-58793]:SimpleName[58964-58974]"
    }, {
      "left" : "tb.processEndTag(\"optgroup\");",
      "right" : "tb.processEndTag(\"optgroup\");",
      "info" : "ExpressionStatement[58844-58873]:ExpressionStatement[59025-59054]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58898-58915]:ExpressionStatement[59079-59096]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[58943-59617]:IfStatement[59124-59798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58970-59092]:Block[59151-59273]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58996-59011]:ExpressionStatement[59177-59192]"
    }, {
      "left" : "return tb.processEndTag(\"select\");",
      "right" : "return tb.processEndTag(\"select\");",
      "info" : "ReturnStatement[59036-59070]:ReturnStatement[59217-59251]"
    }, {
      "left" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "right" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "info" : "IfStatement[59098-59617]:IfStatement[59279-59798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59154-59426]:Block[59335-59607]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[59180-59195]:ExpressionStatement[59361-59376]"
    }, {
      "left" : "if (!tb.inSelectScope(\"select\"))",
      "right" : "if (!tb.inSelectScope(\"select\"))",
      "info" : "IfStatement[59220-59294]:IfStatement[59401-59475]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[59281-59294]:ReturnStatement[59462-59475]"
    }, {
      "left" : "tb.processEndTag(\"select\");",
      "right" : "tb.processEndTag(\"select\");",
      "info" : "ExpressionStatement[59327-59354]:ExpressionStatement[59508-59535]"
    }, {
      "left" : "return tb.process(start);",
      "right" : "return tb.process(start);",
      "info" : "ReturnStatement[59379-59404]:ReturnStatement[59560-59585]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[59432-59617]:IfStatement[59613-59798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59459-59536]:Block[59640-59717]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[59485-59514]:ReturnStatement[59666-59695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59542-59617]:Block[59723-59798]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[59568-59595]:ReturnStatement[59749-59776]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59638-59644]:BreakStatement[59819-59825]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[59661-59673]:SwitchCase[59842-59854]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[59694-59726]:VariableDeclarationStatement[59875-59907]"
    }, {
      "left" : "name = end.normalName();",
      "right" : "name = end.normalName();",
      "info" : "ExpressionStatement[59747-59771]:ExpressionStatement[59928-59952]"
    }, {
      "left" : "switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
      "right" : "switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().normalName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).normalName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().normalName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().normalName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
      "info" : "SwitchStatement[59792-61146]:SwitchStatement[59973-61335]"
    }, {
      "left" : "case \"optgroup\":",
      "right" : "case \"optgroup\":",
      "info" : "SwitchCase[59832-59848]:SwitchCase[60013-60029]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().normalName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).normalName().equals(\"optgroup\"))",
      "info" : "IfStatement[59877-60107]:IfStatement[60058-60292]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[59901-59909]:SimpleName[60082-60092]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[60017-60025]:SimpleName[60200-60210]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[60080-60107]:ExpressionStatement[60265-60292]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().normalName().equals(\"optgroup\"))",
      "info" : "IfStatement[60136-60313]:IfStatement[60321-60500]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[60160-60168]:SimpleName[60345-60355]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[60223-60232]:ExpressionStatement[60410-60419]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60298-60313]:ExpressionStatement[60485-60500]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60342-60348]:BreakStatement[60529-60535]"
    }, {
      "left" : "case \"option\":",
      "right" : "case \"option\":",
      "info" : "SwitchCase[60373-60387]:SwitchCase[60560-60574]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().normalName().equals(\"option\"))",
      "info" : "IfStatement[60416-60591]:IfStatement[60603-60780]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[60440-60448]:SimpleName[60627-60637]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[60501-60510]:ExpressionStatement[60690-60699]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60576-60591]:ExpressionStatement[60765-60780]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60620-60626]:BreakStatement[60809-60815]"
    }, {
      "left" : "case \"select\":",
      "right" : "case \"select\":",
      "info" : "SwitchCase[60651-60665]:SwitchCase[60840-60854]"
    }, {
      "left" : "if (!tb.inSelectScope(name))",
      "right" : "if (!tb.inSelectScope(name))",
      "info" : "IfStatement[60694-61000]:IfStatement[60883-61189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60723-60848]:Block[60912-61037]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60757-60772]:ExpressionStatement[60946-60961]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60805-60818]:ReturnStatement[60994-61007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60854-61000]:Block[61043-61189]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[60888-60913]:ExpressionStatement[61077-61102]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[60946-60970]:ExpressionStatement[61135-61159]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61029-61035]:BreakStatement[61218-61224]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[61060-61068]:SwitchCase[61249-61257]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[61097-61124]:ReturnStatement[61286-61313]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61167-61173]:BreakStatement[61356-61362]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[61190-61199]:SwitchCase[61379-61388]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().normalName().equals(\"html\"))",
      "info" : "IfStatement[61220-61311]:IfStatement[61409-61502]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[61245-61253]:SimpleName[61434-61444]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61296-61311]:ExpressionStatement[61487-61502]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61332-61338]:BreakStatement[61523-61529]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[61355-61363]:SwitchCase[61546-61554]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[61384-61411]:ReturnStatement[61575-61602]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[61438-61450]:ReturnStatement[61629-61641]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61470-61477]:Modifier[61661-61668]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61478-61485]:PrimitiveType[61669-61676]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[61486-61498]:SimpleName[61677-61689]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[61499-61506]:SingleVariableDeclaration[61690-61697]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[61508-61526]:SingleVariableDeclaration[61699-61717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61528-61593]:Block[61719-61784]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61542-61557]:ExpressionStatement[61733-61748]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61570-61583]:ReturnStatement[61761-61774]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61631-61638]:PrimitiveType[61822-61829]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[61639-61646]:SimpleName[61830-61837]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[61647-61654]:SingleVariableDeclaration[61838-61845]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[61656-61674]:SingleVariableDeclaration[61847-61865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61676-62424]:Block[61867-62615]"
    }, {
      "left" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61690-62414]:IfStatement[61881-62605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61821-61950]:Block[62012-62141]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61839-61854]:ExpressionStatement[62030-62045]"
    }, {
      "left" : "tb.processEndTag(\"select\");",
      "right" : "tb.processEndTag(\"select\");",
      "info" : "ExpressionStatement[61871-61898]:ExpressionStatement[62062-62089]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[61915-61936]:ReturnStatement[62106-62127]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61956-62414]:IfStatement[62147-62605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62083-62345]:Block[62274-62536]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62101-62116]:ExpressionStatement[62292-62307]"
    }, {
      "left" : "if (tb.inTableScope(t.asEndTag().normalName()))",
      "right" : "if (tb.inTableScope(t.asEndTag().normalName()))",
      "info" : "IfStatement[62133-62331]:IfStatement[62324-62522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62181-62292]:Block[62372-62483]"
    }, {
      "left" : "tb.processEndTag(\"select\");",
      "right" : "tb.processEndTag(\"select\");",
      "info" : "ExpressionStatement[62203-62230]:ExpressionStatement[62394-62421]"
    }, {
      "left" : "return (tb.process(t));",
      "right" : "return (tb.process(t));",
      "info" : "ReturnStatement[62251-62274]:ReturnStatement[62442-62465]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62318-62331]:ReturnStatement[62509-62522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62351-62414]:Block[62542-62605]"
    }, {
      "left" : "return tb.process(t, InSelect);",
      "right" : "return tb.process(t, InSelect);",
      "info" : "ReturnStatement[62369-62400]:ReturnStatement[62560-62591]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[62456-62463]:PrimitiveType[62647-62654]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[62464-62471]:SimpleName[62655-62662]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[62472-62479]:SingleVariableDeclaration[62663-62670]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[62481-62499]:SingleVariableDeclaration[62672-62690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62501-63465]:Block[62692-63656]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[62515-63430]:IfStatement[62706-63621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62536-62597]:Block[62727-62788]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[62554-62583]:ReturnStatement[62745-62774]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[62603-63430]:IfStatement[62794-63621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62622-62697]:Block[62813-62888]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[62640-62665]:ExpressionStatement[62831-62856]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[62703-63430]:IfStatement[62894-63621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62722-62799]:Block[62913-62990]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62740-62755]:ExpressionStatement[62931-62946]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62772-62785]:ReturnStatement[62963-62976]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[62805-63430]:IfStatement[62996-63621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62871-62932]:Block[63062-63123]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[62889-62918]:ReturnStatement[63080-63109]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[62938-63430]:IfStatement[63129-63621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63000-63225]:Block[63191-63416]"
    }, {
      "left" : "if (tb.isFragmentParsing())",
      "right" : "if (tb.isFragmentParsing())",
      "info" : "IfStatement[63018-63211]:IfStatement[63209-63402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63046-63135]:Block[63237-63326]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63068-63083]:ExpressionStatement[63259-63274]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63104-63117]:ReturnStatement[63295-63308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63141-63211]:Block[63332-63402]"
    }, {
      "left" : "tb.transition(AfterAfterBody);",
      "right" : "tb.transition(AfterAfterBody);",
      "info" : "ExpressionStatement[63163-63193]:ExpressionStatement[63354-63384]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[63231-63430]:IfStatement[63422-63621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63246-63300]:Block[63437-63491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63306-63430]:Block[63497-63621]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63324-63339]:ExpressionStatement[63515-63530]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[63356-63378]:ExpressionStatement[63547-63569]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[63395-63416]:ReturnStatement[63586-63607]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[63443-63455]:ReturnStatement[63634-63646]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[63498-63505]:PrimitiveType[63689-63696]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[63506-63513]:SimpleName[63697-63704]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[63514-63521]:SingleVariableDeclaration[63705-63712]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[63523-63541]:SingleVariableDeclaration[63714-63732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63543-65287]:Block[63734-65492]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[63557-65252]:IfStatement[63748-65457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63578-63637]:Block[63769-63828]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[63596-63623]:ExpressionStatement[63787-63814]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[63643-65252]:IfStatement[63834-65457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63662-63719]:Block[63853-63910]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[63680-63705]:ExpressionStatement[63871-63896]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[63725-65252]:IfStatement[63916-65457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63744-63821]:Block[63935-64012]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63762-63777]:ExpressionStatement[63953-63968]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63794-63807]:ReturnStatement[63985-63998]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[63827-65252]:IfStatement[64018-65457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63847-64496]:Block[64038-64687]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[63865-63903]:VariableDeclarationStatement[64056-64094]"
    }, {
      "left" : "switch (start.normalName()) {\n                    case \"html\":\n                        return tb.process(start, InBody);\n                    case \"frameset\":\n                        tb.insert(start);\n                        break;\n                    case \"frame\":\n                        tb.insertEmpty(start);\n                        break;\n                    case \"noframes\":\n                        return tb.process(start, InHead);\n                    default:\n                        tb.error(this);\n                        return false;\n                }",
      "right" : "switch (start.normalName()) {\n                    case \"html\":\n                        return tb.process(start, InBody);\n                    case \"frameset\":\n                        tb.insert(start);\n                        break;\n                    case \"frame\":\n                        tb.insertEmpty(start);\n                        break;\n                    case \"noframes\":\n                        return tb.process(start, InHead);\n                    default:\n                        tb.error(this);\n                        return false;\n                }",
      "info" : "SwitchStatement[63920-64482]:SwitchStatement[64111-64673]"
    }, {
      "left" : "case \"html\":",
      "right" : "case \"html\":",
      "info" : "SwitchCase[63970-63982]:SwitchCase[64161-64173]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[64007-64040]:ReturnStatement[64198-64231]"
    }, {
      "left" : "case \"frameset\":",
      "right" : "case \"frameset\":",
      "info" : "SwitchCase[64061-64077]:SwitchCase[64252-64268]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[64102-64119]:ExpressionStatement[64293-64310]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64144-64150]:BreakStatement[64335-64341]"
    }, {
      "left" : "case \"frame\":",
      "right" : "case \"frame\":",
      "info" : "SwitchCase[64171-64184]:SwitchCase[64362-64375]"
    }, {
      "left" : "tb.insertEmpty(start);",
      "right" : "tb.insertEmpty(start);",
      "info" : "ExpressionStatement[64209-64231]:ExpressionStatement[64400-64422]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64256-64262]:BreakStatement[64447-64453]"
    }, {
      "left" : "case \"noframes\":",
      "right" : "case \"noframes\":",
      "info" : "SwitchCase[64283-64299]:SwitchCase[64474-64490]"
    }, {
      "left" : "return tb.process(start, InHead);",
      "right" : "return tb.process(start, InHead);",
      "info" : "ReturnStatement[64324-64357]:ReturnStatement[64515-64548]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[64378-64386]:SwitchCase[64569-64577]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64411-64426]:ExpressionStatement[64602-64617]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64451-64464]:ReturnStatement[64642-64655]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\"))",
      "info" : "IfStatement[64502-65252]:IfStatement[64693-65457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64568-64976]:Block[64759-65179]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().normalName().equals(\"html\"))",
      "info" : "IfStatement[64586-64962]:IfStatement[64777-65165]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[64610-64618]:SimpleName[64801-64811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64637-64726]:Block[64830-64927]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64659-64674]:ExpressionStatement[64860-64875]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64695-64708]:ReturnStatement[64896-64909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64732-64962]:Block[64933-65165]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[64754-64763]:ExpressionStatement[64955-64964]"
    }, {
      "left" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "right" : "if (!tb.isFragmentParsing() && !tb.currentElement().normalName().equals(\"frameset\"))",
      "info" : "IfStatement[64784-64944]:IfStatement[64985-65147]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[64836-64844]:SimpleName[65037-65047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64867-64944]:Block[65070-65147]"
    }, {
      "left" : "tb.transition(AfterFrameset);",
      "right" : "tb.transition(AfterFrameset);",
      "info" : "ExpressionStatement[64893-64922]:ExpressionStatement[65096-65125]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[64982-65252]:IfStatement[65185-65457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64997-65169]:Block[65200-65374]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().normalName().equals(\"html\"))",
      "info" : "IfStatement[65015-65155]:IfStatement[65218-65360]"
    }, {
      "left" : "nodeName",
      "right" : "normalName",
      "info" : "SimpleName[65040-65048]:SimpleName[65243-65253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65067-65155]:Block[65272-65360]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65089-65104]:ExpressionStatement[65294-65309]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[65125-65137]:ReturnStatement[65330-65342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65175-65252]:Block[65380-65457]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65193-65208]:ExpressionStatement[65398-65413]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65225-65238]:ReturnStatement[65430-65443]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[65265-65277]:ReturnStatement[65470-65482]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[65323-65330]:PrimitiveType[65528-65535]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[65331-65338]:SimpleName[65536-65543]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[65339-65346]:SingleVariableDeclaration[65544-65551]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[65348-65366]:SingleVariableDeclaration[65553-65571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65368-66255]:Block[65573-66460]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[65382-66220]:IfStatement[65587-66425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65403-65462]:Block[65608-65667]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[65421-65448]:ExpressionStatement[65626-65653]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[65468-66220]:IfStatement[65673-66425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65487-65544]:Block[65692-65749]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[65505-65530]:ExpressionStatement[65710-65735]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[65550-66220]:IfStatement[65755-66425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65569-65646]:Block[65774-65851]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65587-65602]:ExpressionStatement[65792-65807]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65619-65632]:ReturnStatement[65824-65837]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[65652-66220]:IfStatement[65857-66425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65718-65779]:Block[65923-65984]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[65736-65765]:ReturnStatement[65941-65970]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[65785-66220]:IfStatement[65990-66425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65847-65913]:Block[66052-66118]"
    }, {
      "left" : "tb.transition(AfterAfterFrameset);",
      "right" : "tb.transition(AfterAfterFrameset);",
      "info" : "ExpressionStatement[65865-65899]:ExpressionStatement[66070-66104]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "info" : "IfStatement[65919-66220]:IfStatement[66124-66425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65989-66050]:Block[66194-66255]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[66007-66036]:ReturnStatement[66212-66241]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[66056-66220]:IfStatement[66261-66425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66071-66137]:Block[66276-66342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66143-66220]:Block[66348-66425]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[66161-66176]:ExpressionStatement[66366-66381]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[66193-66206]:ReturnStatement[66398-66411]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66233-66245]:ReturnStatement[66438-66450]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[66292-66299]:PrimitiveType[66497-66504]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[66300-66307]:SimpleName[66505-66512]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[66308-66315]:SingleVariableDeclaration[66513-66520]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[66317-66335]:SingleVariableDeclaration[66522-66540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66337-66834]:Block[66542-67039]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[66351-66799]:IfStatement[66556-67004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66370-66427]:Block[66575-66632]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[66388-66413]:ExpressionStatement[66593-66618]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "info" : "IfStatement[66433-66799]:IfStatement[66638-67004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66537-66598]:Block[66742-66803]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[66555-66584]:ReturnStatement[66760-66789]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[66604-66799]:IfStatement[66809-67004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66619-66669]:Block[66824-66874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66675-66799]:Block[66880-67004]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[66693-66708]:ExpressionStatement[66898-66913]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[66725-66747]:ExpressionStatement[66930-66952]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[66764-66785]:ReturnStatement[66969-66990]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66812-66824]:ReturnStatement[67017-67029]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[66875-66882]:PrimitiveType[67080-67087]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[66883-66890]:SimpleName[67088-67095]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[66891-66898]:SingleVariableDeclaration[67096-67103]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[66900-66918]:SingleVariableDeclaration[67105-67123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66920-67507]:Block[67125-67712]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[66934-67472]:IfStatement[67139-67677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66953-67010]:Block[67158-67215]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[66971-66996]:ExpressionStatement[67176-67201]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "info" : "IfStatement[67016-67472]:IfStatement[67221-67677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67120-67181]:Block[67325-67386]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[67138-67167]:ReturnStatement[67343-67372]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[67187-67472]:IfStatement[67392-67677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67202-67252]:Block[67407-67457]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "info" : "IfStatement[67258-67472]:IfStatement[67463-67677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67328-67389]:Block[67533-67594]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[67346-67375]:ReturnStatement[67551-67580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67395-67472]:Block[67600-67677]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[67413-67428]:ExpressionStatement[67618-67633]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67445-67458]:ReturnStatement[67650-67663]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67485-67497]:ReturnStatement[67690-67702]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67544-67551]:PrimitiveType[67749-67756]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[67552-67559]:SimpleName[67757-67764]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67560-67567]:SingleVariableDeclaration[67765-67772]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[67569-67587]:SingleVariableDeclaration[67774-67792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67589-67683]:Block[67794-67888]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67603-67615]:ReturnStatement[67808-67820]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[67762-67770]:Modifier[67967-67975]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67771-67778]:PrimitiveType[67976-67983]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[67779-67786]:SimpleName[67984-67991]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67787-67794]:SingleVariableDeclaration[67992-67999]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[67796-67814]:SingleVariableDeclaration[68001-68019]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67822-67829]:Modifier[68027-68034]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67830-67836]:Modifier[68035-68041]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67837-67844]:PrimitiveType[68042-68049]"
    }, {
      "left" : "isWhitespace",
      "right" : "isWhitespace",
      "info" : "SimpleName[67845-67857]:SimpleName[68050-68062]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67858-67865]:SingleVariableDeclaration[68063-68070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67867-68029]:Block[68072-68234]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[67877-68001]:IfStatement[68082-68206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67898-68001]:Block[68103-68206]"
    }, {
      "left" : "String data = t.asCharacter().getData();",
      "right" : "String data = t.asCharacter().getData();",
      "info" : "VariableDeclarationStatement[67912-67952]:VariableDeclarationStatement[68117-68157]"
    }, {
      "left" : "return isWhitespace(data);",
      "right" : "return isWhitespace(data);",
      "info" : "ReturnStatement[67965-67991]:ReturnStatement[68170-68196]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[68010-68023]:ReturnStatement[68215-68228]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68035-68042]:Modifier[68240-68247]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68043-68049]:Modifier[68248-68254]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[68050-68057]:PrimitiveType[68255-68262]"
    }, {
      "left" : "isWhitespace",
      "right" : "isWhitespace",
      "info" : "SimpleName[68058-68070]:SimpleName[68263-68275]"
    }, {
      "left" : "String data",
      "right" : "String data",
      "info" : "SingleVariableDeclaration[68071-68082]:SingleVariableDeclaration[68276-68287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68084-68132]:Block[68289-68337]"
    }, {
      "left" : "return StringUtil.isBlank(data);",
      "right" : "return StringUtil.isBlank(data);",
      "info" : "ReturnStatement[68094-68126]:ReturnStatement[68299-68331]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68138-68145]:Modifier[68343-68350]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68146-68152]:Modifier[68351-68357]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68153-68157]:PrimitiveType[68358-68362]"
    }, {
      "left" : "handleRcData",
      "right" : "handleRcData",
      "info" : "SimpleName[68158-68170]:SimpleName[68363-68375]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[68171-68194]:SingleVariableDeclaration[68376-68399]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[68196-68214]:SingleVariableDeclaration[68401-68419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68216-68369]:Block[68421-68574]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[68226-68273]:ExpressionStatement[68431-68478]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68282-68305]:ExpressionStatement[68487-68510]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68314-68334]:ExpressionStatement[68519-68539]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[68343-68363]:ExpressionStatement[68548-68568]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68375-68382]:Modifier[68580-68587]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68383-68389]:Modifier[68588-68594]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68390-68394]:PrimitiveType[68595-68599]"
    }, {
      "left" : "handleRawtext",
      "right" : "handleRawtext",
      "info" : "SimpleName[68395-68408]:SimpleName[68600-68613]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[68409-68432]:SingleVariableDeclaration[68614-68637]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[68434-68452]:SingleVariableDeclaration[68639-68657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68454-68608]:Block[68659-68813]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[68464-68512]:ExpressionStatement[68669-68717]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68521-68544]:ExpressionStatement[68726-68749]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68553-68573]:ExpressionStatement[68758-68778]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[68582-68602]:ExpressionStatement[68787-68807]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68900-68906]:Modifier[69105-69111]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[68907-68912]:Modifier[69112-69117]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[68913-68918]:TYPE_DECLARATION_KIND[69118-69123]"
    }, {
      "left" : "Constants",
      "right" : "Constants",
      "info" : "SimpleName[68919-68928]:SimpleName[69124-69133]"
    } ]
  },
  "interFileMappings" : { }
}