{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Attributes",
      "right" : "Attributes",
      "info" : "TypeDeclaration[462-14043]:TypeDeclaration[501-14861]"
    }, {
      "left" : "protected static final String dataPrefix = \"data-\";",
      "right" : "protected static final String dataPrefix = \"data-\";",
      "info" : "FieldDeclaration[1004-1055]:FieldDeclaration[1043-1094]"
    }, {
      "left" : "private static final int InitialCapacity = 4;",
      "right" : "private static final int InitialCapacity = 4;",
      "info" : "FieldDeclaration[1060-1105]:FieldDeclaration[1099-1144]"
    }, {
      "left" : "private static final int GrowthFactor = 2;",
      "right" : "private static final int GrowthFactor = 2;",
      "info" : "FieldDeclaration[1203-1245]:FieldDeclaration[1242-1284]"
    }, {
      "left" : "private static final String[] Empty = {};",
      "right" : "private static final String[] Empty = {};",
      "info" : "FieldDeclaration[1250-1291]:FieldDeclaration[1289-1330]"
    }, {
      "left" : "static final int NotFound = -1;",
      "right" : "static final int NotFound = -1;",
      "info" : "FieldDeclaration[1296-1327]:FieldDeclaration[1335-1366]"
    }, {
      "left" : "private static final String EmptyString = \"\";",
      "right" : "private static final String EmptyString = \"\";",
      "info" : "FieldDeclaration[1332-1377]:FieldDeclaration[1371-1416]"
    }, {
      "left" : "private int size = 0;",
      "right" : "private int size = 0;",
      "info" : "FieldDeclaration[1383-1404]:FieldDeclaration[1422-1443]"
    }, {
      "left" : "String[] keys = Empty;",
      "right" : "String[] keys = Empty;",
      "info" : "FieldDeclaration[1469-1491]:FieldDeclaration[1508-1530]"
    }, {
      "left" : "String[] vals = Empty;",
      "right" : "String[] vals = Empty;",
      "info" : "FieldDeclaration[1496-1518]:FieldDeclaration[1535-1557]"
    }, {
      "left" : "private void checkCapacity(int minNewSize)",
      "right" : "private void checkCapacity(int minNewSize)",
      "info" : "MethodDeclaration[1559-1980]:MethodDeclaration[1598-2019]"
    }, {
      "left" : "private static String[] copyOf(String[] orig, int size)",
      "right" : "private static String[] copyOf(String[] orig, int size)",
      "info" : "MethodDeclaration[2061-2282]:MethodDeclaration[2100-2321]"
    }, {
      "left" : "int indexOfKey(String key)",
      "right" : "int indexOfKey(String key)",
      "info" : "MethodDeclaration[2288-2492]:MethodDeclaration[2327-2531]"
    }, {
      "left" : "private int indexOfKeyIgnoreCase(String key)",
      "right" : "private int indexOfKeyIgnoreCase(String key)",
      "info" : "MethodDeclaration[2498-2730]:MethodDeclaration[2537-2769]"
    }, {
      "left" : "static String checkNotNull(String val)",
      "right" : "static String checkNotNull(String val)",
      "info" : "MethodDeclaration[2841-2935]:MethodDeclaration[2880-2974]"
    }, {
      "left" : "public String get(String key)",
      "right" : "public String get(String key)",
      "info" : "MethodDeclaration[2941-3302]:MethodDeclaration[2980-3341]"
    }, {
      "left" : "public String getIgnoreCase(String key)",
      "right" : "public String getIgnoreCase(String key)",
      "info" : "MethodDeclaration[3308-3685]:MethodDeclaration[3347-3724]"
    }, {
      "left" : "private void add(String key, String value)",
      "right" : "public Attributes add(String key, String value)",
      "info" : "MethodDeclaration[3691-3983]:MethodDeclaration[3730-4048]"
    }, {
      "left" : "public Attributes put(String key, String value)",
      "right" : "public Attributes put(String key, String value)",
      "info" : "MethodDeclaration[3989-4404]:MethodDeclaration[4054-4469]"
    }, {
      "left" : "void putIgnoreCase(String key, String value)",
      "right" : "void putIgnoreCase(String key, String value)",
      "info" : "MethodDeclaration[4410-4708]:MethodDeclaration[4475-4773]"
    }, {
      "left" : "public Attributes put(String key, boolean value)",
      "right" : "public Attributes put(String key, boolean value)",
      "info" : "MethodDeclaration[4714-5112]:MethodDeclaration[4779-5177]"
    }, {
      "left" : "public Attributes put(Attribute attribute)",
      "right" : "public Attributes put(Attribute attribute)",
      "info" : "MethodDeclaration[5118-5491]:MethodDeclaration[5183-5556]"
    }, {
      "left" : "private void remove(int index)",
      "right" : "private void remove(int index)",
      "info" : "MethodDeclaration[5526-5906]:MethodDeclaration[5591-5971]"
    }, {
      "left" : "public void remove(String key)",
      "right" : "public void remove(String key)",
      "info" : "MethodDeclaration[5912-6145]:MethodDeclaration[5977-6210]"
    }, {
      "left" : "public void removeIgnoreCase(String key)",
      "right" : "public void removeIgnoreCase(String key)",
      "info" : "MethodDeclaration[6151-6406]:MethodDeclaration[6216-6471]"
    }, {
      "left" : "public boolean hasKey(String key)",
      "right" : "public boolean hasKey(String key)",
      "info" : "MethodDeclaration[6412-6677]:MethodDeclaration[6477-6742]"
    }, {
      "left" : "public boolean hasKeyIgnoreCase(String key)",
      "right" : "public boolean hasKeyIgnoreCase(String key)",
      "info" : "MethodDeclaration[6683-6953]:MethodDeclaration[6748-7018]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[6959-7086]:MethodDeclaration[7024-7151]"
    }, {
      "left" : "public void addAll(Attributes incoming)",
      "right" : "public void addAll(Attributes incoming)",
      "info" : "MethodDeclaration[7165-7582]:MethodDeclaration[7293-7710]"
    }, {
      "left" : "public Iterator<Attribute> iterator()",
      "right" : "public Iterator<Attribute> iterator()",
      "info" : "MethodDeclaration[7588-8180]:MethodDeclaration[7716-8308]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "FieldDeclaration[7683-7693]:FieldDeclaration[7811-7821]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[7707-7802]:MethodDeclaration[7835-7930]"
    }, {
      "left" : "public Attribute next()",
      "right" : "public Attribute next()",
      "info" : "MethodDeclaration[7816-8016]:MethodDeclaration[7944-8144]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[8030-8163]:MethodDeclaration[8158-8291]"
    }, {
      "left" : "public List<Attribute> asList()",
      "right" : "public List<Attribute> asList()",
      "info" : "MethodDeclaration[8186-8759]:MethodDeclaration[8314-8887]"
    }, {
      "left" : "public Map<String, String> dataset()",
      "right" : "public Map<String, String> dataset()",
      "info" : "MethodDeclaration[8765-9057]:MethodDeclaration[8893-9185]"
    }, {
      "left" : "public String html()",
      "right" : "public String html()",
      "info" : "MethodDeclaration[9063-9632]:MethodDeclaration[9191-9760]"
    }, {
      "left" : "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException",
      "right" : "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException",
      "info" : "MethodDeclaration[9638-10323]:MethodDeclaration[9766-10451]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[10329-10398]:MethodDeclaration[10457-10526]"
    }, {
      "left" : "public boolean equals(Object o)",
      "right" : "public boolean equals(Object o)",
      "info" : "MethodDeclaration[10404-10978]:MethodDeclaration[10532-11106]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[10984-11345]:MethodDeclaration[11112-11473]"
    }, {
      "left" : "public Attributes clone()",
      "right" : "public Attributes clone()",
      "info" : "MethodDeclaration[11351-11707]:MethodDeclaration[11479-11835]"
    }, {
      "left" : "public void normalize()",
      "right" : "public void normalize()",
      "info" : "MethodDeclaration[11713-11898]:MethodDeclaration[11841-12026]"
    }, {
      "left" : "Dataset",
      "right" : "Dataset",
      "info" : "TypeDeclaration[11904-13953]:TypeDeclaration[12923-14771]"
    }, {
      "left" : "private final Attributes attributes;",
      "right" : "private final Attributes attributes;",
      "info" : "FieldDeclaration[12180-12216]:FieldDeclaration[12998-13034]"
    }, {
      "left" : "private Dataset(Attributes attributes)",
      "right" : "private Dataset(Attributes attributes)",
      "info" : "MethodDeclaration[12226-12318]:MethodDeclaration[13044-13136]"
    }, {
      "left" : "public Set<Entry<String, String>> entrySet()",
      "right" : "public Set<Entry<String, String>> entrySet()",
      "info" : "MethodDeclaration[12328-12437]:MethodDeclaration[13146-13255]"
    }, {
      "left" : "public String put(String key, String value)",
      "right" : "public String put(String key, String value)",
      "info" : "MethodDeclaration[12447-12727]:MethodDeclaration[13265-13545]"
    }, {
      "left" : "EntrySet",
      "right" : "EntrySet",
      "info" : "TypeDeclaration[12737-13222]:TypeDeclaration[13555-14040]"
    }, {
      "left" : "public Iterator<Map.Entry<String, String>> iterator()",
      "right" : "public Iterator<Map.Entry<String, String>> iterator()",
      "info" : "MethodDeclaration[12822-12959]:MethodDeclaration[13640-13777]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[12973-13212]:MethodDeclaration[13791-14030]"
    }, {
      "left" : "DatasetIterator",
      "right" : "DatasetIterator",
      "info" : "TypeDeclaration[13232-13947]:TypeDeclaration[14050-14765]"
    }, {
      "left" : "private Iterator<Attribute> attrIter = attributes.iterator();",
      "right" : "private Iterator<Attribute> attrIter = attributes.iterator();",
      "info" : "FieldDeclaration[13323-13384]:FieldDeclaration[14141-14202]"
    }, {
      "left" : "private Attribute attr;",
      "right" : "private Attribute attr;",
      "info" : "FieldDeclaration[13397-13420]:FieldDeclaration[14215-14238]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[13433-13671]:MethodDeclaration[14251-14489]"
    }, {
      "left" : "public Entry<String, String> next()",
      "right" : "public Entry<String, String> next()",
      "info" : "MethodDeclaration[13685-13837]:MethodDeclaration[14503-14655]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[13851-13937]:MethodDeclaration[14669-14755]"
    }, {
      "left" : "private static String dataKey(String key)",
      "right" : "private static String dataKey(String key)",
      "info" : "MethodDeclaration[13959-14041]:MethodDeclaration[14777-14859]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1602-1980]:Block[1641-2019]"
    }, {
      "left" : "Validate.isTrue(minNewSize >= size);",
      "right" : "Validate.isTrue(minNewSize >= size);",
      "info" : "ExpressionStatement[1612-1648]:ExpressionStatement[1651-1687]"
    }, {
      "left" : "int curSize = keys.length;",
      "right" : "int curSize = keys.length;",
      "info" : "VariableDeclarationStatement[1657-1683]:VariableDeclarationStatement[1696-1722]"
    }, {
      "left" : "if (curSize >= minNewSize)",
      "right" : "if (curSize >= minNewSize)",
      "info" : "IfStatement[1692-1738]:IfStatement[1731-1777]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[1731-1738]:ReturnStatement[1770-1777]"
    }, {
      "left" : "int newSize = curSize >= InitialCapacity ? size * GrowthFactor : InitialCapacity;",
      "right" : "int newSize = curSize >= InitialCapacity ? size * GrowthFactor : InitialCapacity;",
      "info" : "VariableDeclarationStatement[1748-1829]:VariableDeclarationStatement[1787-1868]"
    }, {
      "left" : "if (minNewSize > newSize)",
      "right" : "if (minNewSize > newSize)",
      "info" : "IfStatement[1838-1897]:IfStatement[1877-1936]"
    }, {
      "left" : "newSize = minNewSize;",
      "right" : "newSize = minNewSize;",
      "info" : "ExpressionStatement[1876-1897]:ExpressionStatement[1915-1936]"
    }, {
      "left" : "keys = copyOf(keys, newSize);",
      "right" : "keys = copyOf(keys, newSize);",
      "info" : "ExpressionStatement[1907-1936]:ExpressionStatement[1946-1975]"
    }, {
      "left" : "vals = copyOf(vals, newSize);",
      "right" : "vals = copyOf(vals, newSize);",
      "info" : "ExpressionStatement[1945-1974]:ExpressionStatement[1984-2013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2117-2282]:Block[2156-2321]"
    }, {
      "left" : "final String[] copy = new String[size];",
      "right" : "final String[] copy = new String[size];",
      "info" : "VariableDeclarationStatement[2127-2166]:VariableDeclarationStatement[2166-2205]"
    }, {
      "left" : "System.arraycopy(orig, 0, copy, 0,\n                Math.min(orig.length, size));",
      "right" : "System.arraycopy(orig, 0, copy, 0,\n                Math.min(orig.length, size));",
      "info" : "ExpressionStatement[2175-2255]:ExpressionStatement[2214-2294]"
    }, {
      "left" : "return copy;",
      "right" : "return copy;",
      "info" : "ReturnStatement[2264-2276]:ReturnStatement[2303-2315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2315-2492]:Block[2354-2531]"
    }, {
      "left" : "Validate.notNull(key);",
      "right" : "Validate.notNull(key);",
      "info" : "ExpressionStatement[2325-2347]:ExpressionStatement[2364-2386]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[2356-2461]:ForStatement[2395-2500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2387-2461]:Block[2426-2500]"
    }, {
      "left" : "if (key.equals(keys[i]))",
      "right" : "if (key.equals(keys[i]))",
      "info" : "IfStatement[2401-2451]:IfStatement[2440-2490]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[2442-2451]:ReturnStatement[2481-2490]"
    }, {
      "left" : "return NotFound;",
      "right" : "return NotFound;",
      "info" : "ReturnStatement[2470-2486]:ReturnStatement[2509-2525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2543-2730]:Block[2582-2769]"
    }, {
      "left" : "Validate.notNull(key);",
      "right" : "Validate.notNull(key);",
      "info" : "ExpressionStatement[2553-2575]:ExpressionStatement[2592-2614]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[2584-2699]:ForStatement[2623-2738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2615-2699]:Block[2654-2738]"
    }, {
      "left" : "if (key.equalsIgnoreCase(keys[i]))",
      "right" : "if (key.equalsIgnoreCase(keys[i]))",
      "info" : "IfStatement[2629-2689]:IfStatement[2668-2728]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[2680-2689]:ReturnStatement[2719-2728]"
    }, {
      "left" : "return NotFound;",
      "right" : "return NotFound;",
      "info" : "ReturnStatement[2708-2724]:ReturnStatement[2747-2763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2880-2935]:Block[2919-2974]"
    }, {
      "left" : "return val == null ? EmptyString : val;",
      "right" : "return val == null ? EmptyString : val;",
      "info" : "ReturnStatement[2890-2929]:ReturnStatement[2929-2968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3194-3302]:Block[3233-3341]"
    }, {
      "left" : "int i = indexOfKey(key);",
      "right" : "int i = indexOfKey(key);",
      "info" : "VariableDeclarationStatement[3204-3228]:VariableDeclarationStatement[3243-3267]"
    }, {
      "left" : "return i == NotFound ? EmptyString : checkNotNull(vals[i]);",
      "right" : "return i == NotFound ? EmptyString : checkNotNull(vals[i]);",
      "info" : "ReturnStatement[3237-3296]:ReturnStatement[3276-3335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3567-3685]:Block[3606-3724]"
    }, {
      "left" : "int i = indexOfKeyIgnoreCase(key);",
      "right" : "int i = indexOfKeyIgnoreCase(key);",
      "info" : "VariableDeclarationStatement[3577-3611]:VariableDeclarationStatement[3616-3650]"
    }, {
      "left" : "return i == NotFound ? EmptyString : checkNotNull(vals[i]);",
      "right" : "return i == NotFound ? EmptyString : checkNotNull(vals[i]);",
      "info" : "ReturnStatement[3620-3679]:ReturnStatement[3659-3718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3873-3983]:Block[3917-4048]"
    }, {
      "left" : "checkCapacity(size + 1);",
      "right" : "checkCapacity(size + 1);",
      "info" : "ExpressionStatement[3883-3907]:ExpressionStatement[3927-3951]"
    }, {
      "left" : "keys[size] = key;",
      "right" : "keys[size] = key;",
      "info" : "ExpressionStatement[3916-3933]:ExpressionStatement[3960-3977]"
    }, {
      "left" : "vals[size] = value;",
      "right" : "vals[size] = value;",
      "info" : "ExpressionStatement[3942-3961]:ExpressionStatement[3986-4005]"
    }, {
      "left" : "size++;",
      "right" : "size++;",
      "info" : "ExpressionStatement[3970-3977]:ExpressionStatement[4014-4021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4245-4404]:Block[4310-4469]"
    }, {
      "left" : "int i = indexOfKey(key);",
      "right" : "int i = indexOfKey(key);",
      "info" : "VariableDeclarationStatement[4255-4279]:VariableDeclarationStatement[4320-4344]"
    }, {
      "left" : "if (i != NotFound)",
      "right" : "if (i != NotFound)",
      "info" : "IfStatement[4288-4377]:IfStatement[4353-4442]"
    }, {
      "left" : "vals[i] = value;",
      "right" : "vals[i] = value;",
      "info" : "ExpressionStatement[4319-4335]:ExpressionStatement[4384-4400]"
    }, {
      "left" : "add(key, value);",
      "right" : "add(key, value);",
      "info" : "ExpressionStatement[4361-4377]:ExpressionStatement[4426-4442]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4386-4398]:ReturnStatement[4451-4463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4455-4708]:Block[4520-4773]"
    }, {
      "left" : "int i = indexOfKeyIgnoreCase(key);",
      "right" : "int i = indexOfKeyIgnoreCase(key);",
      "info" : "VariableDeclarationStatement[4465-4499]:VariableDeclarationStatement[4530-4564]"
    }, {
      "left" : "if (i != NotFound)",
      "right" : "if (i != NotFound)",
      "info" : "IfStatement[4508-4702]:IfStatement[4573-4767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4527-4660]:Block[4592-4725]"
    }, {
      "left" : "vals[i] = value;",
      "right" : "vals[i] = value;",
      "info" : "ExpressionStatement[4541-4557]:ExpressionStatement[4606-4622]"
    }, {
      "left" : "if (!keys[i].equals(key))",
      "right" : "if (!keys[i].equals(key))",
      "info" : "IfStatement[4570-4650]:IfStatement[4635-4715]"
    }, {
      "left" : "keys[i] = key;",
      "right" : "keys[i] = key;",
      "info" : "ExpressionStatement[4636-4650]:ExpressionStatement[4701-4715]"
    }, {
      "left" : "add(key, value);",
      "right" : "add(key, value);",
      "info" : "ExpressionStatement[4686-4702]:ExpressionStatement[4751-4767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4989-5112]:Block[5054-5177]"
    }, {
      "left" : "if (value)",
      "right" : "if (value)",
      "info" : "IfStatement[4999-5085]:IfStatement[5064-5150]"
    }, {
      "left" : "putIgnoreCase(key, null);",
      "right" : "putIgnoreCase(key, null);",
      "info" : "ExpressionStatement[5022-5047]:ExpressionStatement[5087-5112]"
    }, {
      "left" : "remove(key);",
      "right" : "remove(key);",
      "info" : "ExpressionStatement[5073-5085]:ExpressionStatement[5138-5150]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5094-5106]:ReturnStatement[5159-5171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5338-5491]:Block[5403-5556]"
    }, {
      "left" : "Validate.notNull(attribute);",
      "right" : "Validate.notNull(attribute);",
      "info" : "ExpressionStatement[5348-5376]:ExpressionStatement[5413-5441]"
    }, {
      "left" : "put(attribute.getKey(), attribute.getValue());",
      "right" : "put(attribute.getKey(), attribute.getValue());",
      "info" : "ExpressionStatement[5385-5431]:ExpressionStatement[5450-5496]"
    }, {
      "left" : "attribute.parent = this;",
      "right" : "attribute.parent = this;",
      "info" : "ExpressionStatement[5440-5464]:ExpressionStatement[5505-5529]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5473-5485]:ReturnStatement[5538-5550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5557-5906]:Block[5622-5971]"
    }, {
      "left" : "Validate.isFalse(index >= size);",
      "right" : "Validate.isFalse(index >= size);",
      "info" : "ExpressionStatement[5567-5599]:ExpressionStatement[5632-5664]"
    }, {
      "left" : "int shifted = size - index - 1;",
      "right" : "int shifted = size - index - 1;",
      "info" : "VariableDeclarationStatement[5608-5639]:VariableDeclarationStatement[5673-5704]"
    }, {
      "left" : "if (shifted > 0)",
      "right" : "if (shifted > 0)",
      "info" : "IfStatement[5648-5814]:IfStatement[5713-5879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5665-5814]:Block[5730-5879]"
    }, {
      "left" : "System.arraycopy(keys, index + 1, keys, index, shifted);",
      "right" : "System.arraycopy(keys, index + 1, keys, index, shifted);",
      "info" : "ExpressionStatement[5679-5735]:ExpressionStatement[5744-5800]"
    }, {
      "left" : "System.arraycopy(vals, index + 1, vals, index, shifted);",
      "right" : "System.arraycopy(vals, index + 1, vals, index, shifted);",
      "info" : "ExpressionStatement[5748-5804]:ExpressionStatement[5813-5869]"
    }, {
      "left" : "size--;",
      "right" : "size--;",
      "info" : "ExpressionStatement[5823-5830]:ExpressionStatement[5888-5895]"
    }, {
      "left" : "keys[size] = null;",
      "right" : "keys[size] = null;",
      "info" : "ExpressionStatement[5839-5857]:ExpressionStatement[5904-5922]"
    }, {
      "left" : "vals[size] = null;",
      "right" : "vals[size] = null;",
      "info" : "ExpressionStatement[5882-5900]:ExpressionStatement[5947-5965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6055-6145]:Block[6120-6210]"
    }, {
      "left" : "int i = indexOfKey(key);",
      "right" : "int i = indexOfKey(key);",
      "info" : "VariableDeclarationStatement[6065-6089]:VariableDeclarationStatement[6130-6154]"
    }, {
      "left" : "if (i != NotFound)",
      "right" : "if (i != NotFound)",
      "info" : "IfStatement[6098-6139]:IfStatement[6163-6204]"
    }, {
      "left" : "remove(i);",
      "right" : "remove(i);",
      "info" : "ExpressionStatement[6129-6139]:ExpressionStatement[6194-6204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6306-6406]:Block[6371-6471]"
    }, {
      "left" : "int i = indexOfKeyIgnoreCase(key);",
      "right" : "int i = indexOfKeyIgnoreCase(key);",
      "info" : "VariableDeclarationStatement[6316-6350]:VariableDeclarationStatement[6381-6415]"
    }, {
      "left" : "if (i != NotFound)",
      "right" : "if (i != NotFound)",
      "info" : "IfStatement[6359-6400]:IfStatement[6424-6465]"
    }, {
      "left" : "remove(i);",
      "right" : "remove(i);",
      "info" : "ExpressionStatement[6390-6400]:ExpressionStatement[6455-6465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6626-6677]:Block[6691-6742]"
    }, {
      "left" : "return indexOfKey(key) != NotFound;",
      "right" : "return indexOfKey(key) != NotFound;",
      "info" : "ReturnStatement[6636-6671]:ReturnStatement[6701-6736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6892-6953]:Block[6957-7018]"
    }, {
      "left" : "return indexOfKeyIgnoreCase(key) != NotFound;",
      "right" : "return indexOfKeyIgnoreCase(key) != NotFound;",
      "info" : "ReturnStatement[6902-6947]:ReturnStatement[6967-7012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7058-7086]:Block[7123-7151]"
    }, {
      "left" : "return size;",
      "right" : "return size;",
      "info" : "ReturnStatement[7068-7080]:ReturnStatement[7133-7145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7344-7582]:Block[7472-7710]"
    }, {
      "left" : "if (incoming.size() == 0)",
      "right" : "if (incoming.size() == 0)",
      "info" : "IfStatement[7354-7399]:IfStatement[7482-7527]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7392-7399]:ReturnStatement[7520-7527]"
    }, {
      "left" : "checkCapacity(size + incoming.size);",
      "right" : "checkCapacity(size + incoming.size);",
      "info" : "ExpressionStatement[7408-7444]:ExpressionStatement[7536-7572]"
    }, {
      "left" : "for (Attribute attr : incoming)",
      "right" : "for (Attribute attr : incoming)",
      "info" : "EnhancedForStatement[7454-7575]:EnhancedForStatement[7582-7703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7486-7575]:Block[7614-7703]"
    }, {
      "left" : "put(attr);",
      "right" : "put(attr);",
      "info" : "ExpressionStatement[7555-7565]:ExpressionStatement[7683-7693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7626-8180]:Block[7754-8308]"
    }, {
      "left" : "return new Iterator<Attribute>() {\n            int i = 0;\n\n            @Override\n            public boolean hasNext() {\n                return i < size;\n            }\n\n            @Override\n            public Attribute next() {\n                final Attribute attr = new Attribute(keys[i], vals[i], Attributes.this);\n                i++;\n                return attr;\n            }\n\n            @Override\n            public void remove() {\n                Attributes.this.remove(--i); // next() advanced, so rewind\n            }\n        };",
      "right" : "return new Iterator<Attribute>() {\n            int i = 0;\n\n            @Override\n            public boolean hasNext() {\n                return i < size;\n            }\n\n            @Override\n            public Attribute next() {\n                final Attribute attr = new Attribute(keys[i], vals[i], Attributes.this);\n                i++;\n                return attr;\n            }\n\n            @Override\n            public void remove() {\n                Attributes.this.remove(--i); // next() advanced, so rewind\n            }\n        };",
      "info" : "ReturnStatement[7636-8174]:ReturnStatement[7764-8302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7754-7802]:Block[7882-7930]"
    }, {
      "left" : "return i < size;",
      "right" : "return i < size;",
      "info" : "ReturnStatement[7772-7788]:ReturnStatement[7900-7916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7862-8016]:Block[7990-8144]"
    }, {
      "left" : "final Attribute attr = new Attribute(keys[i], vals[i], Attributes.this);",
      "right" : "final Attribute attr = new Attribute(keys[i], vals[i], Attributes.this);",
      "info" : "VariableDeclarationStatement[7880-7952]:VariableDeclarationStatement[8008-8080]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[7969-7973]:ExpressionStatement[8097-8101]"
    }, {
      "left" : "return attr;",
      "right" : "return attr;",
      "info" : "ReturnStatement[7990-8002]:ReturnStatement[8118-8130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8073-8163]:Block[8201-8291]"
    }, {
      "left" : "Attributes.this.remove(--i);",
      "right" : "Attributes.this.remove(--i);",
      "info" : "ExpressionStatement[8091-8119]:ExpressionStatement[8219-8247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8348-8759]:Block[8476-8887]"
    }, {
      "left" : "ArrayList<Attribute> list = new ArrayList<>(size);",
      "right" : "ArrayList<Attribute> list = new ArrayList<>(size);",
      "info" : "VariableDeclarationStatement[8358-8408]:VariableDeclarationStatement[8486-8536]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[8417-8702]:ForStatement[8545-8830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8448-8702]:Block[8576-8830]"
    }, {
      "left" : "Attribute attr = vals[i] == null ?\n                new BooleanAttribute(keys[i]) : // deprecated class, but maybe someone still wants it\n                new Attribute(keys[i], vals[i], Attributes.this);",
      "right" : "Attribute attr = vals[i] == null ?\n                new BooleanAttribute(keys[i]) : // deprecated class, but maybe someone still wants it\n                new Attribute(keys[i], vals[i], Attributes.this);",
      "info" : "VariableDeclarationStatement[8462-8664]:VariableDeclarationStatement[8590-8792]"
    }, {
      "left" : "list.add(attr);",
      "right" : "list.add(attr);",
      "info" : "ExpressionStatement[8677-8692]:ExpressionStatement[8805-8820]"
    }, {
      "left" : "return Collections.unmodifiableList(list);",
      "right" : "return Collections.unmodifiableList(list);",
      "info" : "ReturnStatement[8711-8753]:ReturnStatement[8839-8881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9016-9057]:Block[9144-9185]"
    }, {
      "left" : "return new Dataset(this);",
      "right" : "return new Dataset(this);",
      "info" : "ReturnStatement[9026-9051]:ReturnStatement[9154-9179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9276-9632]:Block[9404-9760]"
    }, {
      "left" : "StringBuilder sb = StringUtil.borrowBuilder();",
      "right" : "StringBuilder sb = StringUtil.borrowBuilder();",
      "info" : "VariableDeclarationStatement[9286-9332]:VariableDeclarationStatement[9414-9460]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9341-9580]:TryStatement[9469-9708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9345-9475]:Block[9473-9603]"
    }, {
      "left" : "html(sb, (new Document(\"\")).outputSettings());",
      "right" : "html(sb, (new Document(\"\")).outputSettings());",
      "info" : "ExpressionStatement[9359-9405]:ExpressionStatement[9487-9533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9498-9580]:Block[9626-9708]"
    }, {
      "left" : "throw new SerializationException(e);",
      "right" : "throw new SerializationException(e);",
      "info" : "ThrowStatement[9534-9570]:ThrowStatement[9662-9698]"
    }, {
      "left" : "return StringUtil.releaseBuilder(sb);",
      "right" : "return StringUtil.releaseBuilder(sb);",
      "info" : "ReturnStatement[9589-9626]:ReturnStatement[9717-9754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9732-10323]:Block[9860-10451]"
    }, {
      "left" : "final int sz = size;",
      "right" : "final int sz = size;",
      "info" : "VariableDeclarationStatement[9742-9762]:VariableDeclarationStatement[9870-9890]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[9771-10317]:ForStatement[9899-10445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9800-10317]:Block[9928-10445]"
    }, {
      "left" : "final String key = keys[i];",
      "right" : "final String key = keys[i];",
      "info" : "VariableDeclarationStatement[9859-9886]:VariableDeclarationStatement[9987-10014]"
    }, {
      "left" : "final String val = vals[i];",
      "right" : "final String val = vals[i];",
      "info" : "VariableDeclarationStatement[9899-9926]:VariableDeclarationStatement[10027-10054]"
    }, {
      "left" : "accum.append(' ').append(key);",
      "right" : "accum.append(' ').append(key);",
      "info" : "ExpressionStatement[9939-9969]:ExpressionStatement[10067-10097]"
    }, {
      "left" : "if (!Attribute.shouldCollapseAttribute(key, val, out))",
      "right" : "if (!Attribute.shouldCollapseAttribute(key, val, out))",
      "info" : "IfStatement[10067-10307]:IfStatement[10195-10435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10122-10307]:Block[10250-10435]"
    }, {
      "left" : "accum.append(\"=\\\"\");",
      "right" : "accum.append(\"=\\\"\");",
      "info" : "ExpressionStatement[10140-10160]:ExpressionStatement[10268-10288]"
    }, {
      "left" : "Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);",
      "right" : "Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);",
      "info" : "ExpressionStatement[10177-10258]:ExpressionStatement[10305-10386]"
    }, {
      "left" : "accum.append('\"');",
      "right" : "accum.append('\"');",
      "info" : "ExpressionStatement[10275-10293]:ExpressionStatement[10403-10421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10368-10398]:Block[10496-10526]"
    }, {
      "left" : "return html();",
      "right" : "return html();",
      "info" : "ReturnStatement[10378-10392]:ReturnStatement[10506-10520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10673-10978]:Block[10801-11106]"
    }, {
      "left" : "if (this == o)",
      "right" : "if (this == o)",
      "info" : "IfStatement[10683-10710]:IfStatement[10811-10838]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10698-10710]:ReturnStatement[10826-10838]"
    }, {
      "left" : "if (o == null || getClass() != o.getClass())",
      "right" : "if (o == null || getClass() != o.getClass())",
      "info" : "IfStatement[10719-10777]:IfStatement[10847-10905]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10764-10777]:ReturnStatement[10892-10905]"
    }, {
      "left" : "Attributes that = (Attributes) o;",
      "right" : "Attributes that = (Attributes) o;",
      "info" : "VariableDeclarationStatement[10787-10820]:VariableDeclarationStatement[10915-10948]"
    }, {
      "left" : "if (size != that.size)",
      "right" : "if (size != that.size)",
      "info" : "IfStatement[10830-10866]:IfStatement[10958-10994]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10853-10866]:ReturnStatement[10981-10994]"
    }, {
      "left" : "if (!Arrays.equals(keys, that.keys))",
      "right" : "if (!Arrays.equals(keys, that.keys))",
      "info" : "IfStatement[10875-10925]:IfStatement[11003-11053]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10912-10925]:ReturnStatement[11040-11053]"
    }, {
      "left" : "return Arrays.equals(vals, that.vals);",
      "right" : "return Arrays.equals(vals, that.vals);",
      "info" : "ReturnStatement[10934-10972]:ReturnStatement[11062-11100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11180-11345]:Block[11308-11473]"
    }, {
      "left" : "int result = size;",
      "right" : "int result = size;",
      "info" : "VariableDeclarationStatement[11190-11208]:VariableDeclarationStatement[11318-11336]"
    }, {
      "left" : "result = 31 * result + Arrays.hashCode(keys);",
      "right" : "result = 31 * result + Arrays.hashCode(keys);",
      "info" : "ExpressionStatement[11217-11262]:ExpressionStatement[11345-11390]"
    }, {
      "left" : "result = 31 * result + Arrays.hashCode(vals);",
      "right" : "result = 31 * result + Arrays.hashCode(vals);",
      "info" : "ExpressionStatement[11271-11316]:ExpressionStatement[11399-11444]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11325-11339]:ReturnStatement[11453-11467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11391-11707]:Block[11519-11835]"
    }, {
      "left" : "Attributes clone;",
      "right" : "Attributes clone;",
      "info" : "VariableDeclarationStatement[11401-11418]:VariableDeclarationStatement[11529-11546]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11427-11582]:TryStatement[11555-11710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11431-11490]:Block[11559-11618]"
    }, {
      "left" : "clone = (Attributes) super.clone();",
      "right" : "clone = (Attributes) super.clone();",
      "info" : "ExpressionStatement[11445-11480]:ExpressionStatement[11573-11608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11528-11582]:Block[11656-11710]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[11542-11572]:ThrowStatement[11670-11700]"
    }, {
      "left" : "clone.size = size;",
      "right" : "clone.size = size;",
      "info" : "ExpressionStatement[11591-11609]:ExpressionStatement[11719-11737]"
    }, {
      "left" : "keys = copyOf(keys, size);",
      "right" : "keys = copyOf(keys, size);",
      "info" : "ExpressionStatement[11618-11644]:ExpressionStatement[11746-11772]"
    }, {
      "left" : "vals = copyOf(vals, size);",
      "right" : "vals = copyOf(vals, size);",
      "info" : "ExpressionStatement[11653-11679]:ExpressionStatement[11781-11807]"
    }, {
      "left" : "return clone;",
      "right" : "return clone;",
      "info" : "ReturnStatement[11688-11701]:ReturnStatement[11816-11829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11798-11898]:Block[11926-12026]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[11808-11892]:ForStatement[11936-12020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11839-11892]:Block[11967-12020]"
    }, {
      "left" : "keys[i] = lowerCase(keys[i]);",
      "right" : "keys[i] = lowerCase(keys[i]);",
      "info" : "ExpressionStatement[11853-11882]:ExpressionStatement[11981-12010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12265-12318]:Block[13083-13136]"
    }, {
      "left" : "this.attributes = attributes;",
      "right" : "this.attributes = attributes;",
      "info" : "ExpressionStatement[12279-12308]:ExpressionStatement[13097-13126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12391-12437]:Block[13209-13255]"
    }, {
      "left" : "return new EntrySet();",
      "right" : "return new EntrySet();",
      "info" : "ReturnStatement[12405-12427]:ReturnStatement[13223-13245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12509-12727]:Block[13327-13545]"
    }, {
      "left" : "String dataKey = dataKey(key);",
      "right" : "String dataKey = dataKey(key);",
      "info" : "VariableDeclarationStatement[12523-12553]:VariableDeclarationStatement[13341-13371]"
    }, {
      "left" : "String oldValue = attributes.hasKey(dataKey) ? attributes.get(dataKey) : null;",
      "right" : "String oldValue = attributes.hasKey(dataKey) ? attributes.get(dataKey) : null;",
      "info" : "VariableDeclarationStatement[12566-12644]:VariableDeclarationStatement[13384-13462]"
    }, {
      "left" : "attributes.put(dataKey, value);",
      "right" : "attributes.put(dataKey, value);",
      "info" : "ExpressionStatement[12657-12688]:ExpressionStatement[13475-13506]"
    }, {
      "left" : "return oldValue;",
      "right" : "return oldValue;",
      "info" : "ReturnStatement[12701-12717]:ReturnStatement[13519-13535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12898-12959]:Block[13716-13777]"
    }, {
      "left" : "return new DatasetIterator();",
      "right" : "return new DatasetIterator();",
      "info" : "ReturnStatement[12916-12945]:ReturnStatement[13734-13763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13013-13212]:Block[13831-14030]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[13031-13045]:VariableDeclarationStatement[13849-13863]"
    }, {
      "left" : "Iterator iter = new DatasetIterator();",
      "right" : "Iterator iter = new DatasetIterator();",
      "info" : "VariableDeclarationStatement[13062-13100]:VariableDeclarationStatement[13880-13918]"
    }, {
      "left" : "while (iter.hasNext())\n                    count++;",
      "right" : "while (iter.hasNext())\n                    count++;",
      "info" : "WhileStatement[13117-13168]:WhileStatement[13935-13986]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[13160-13168]:ExpressionStatement[13978-13986]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[13185-13198]:ReturnStatement[14003-14016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13458-13671]:Block[14276-14489]"
    }, {
      "left" : "while (attrIter.hasNext())",
      "right" : "while (attrIter.hasNext())",
      "info" : "WhileStatement[13476-13627]:WhileStatement[14294-14445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13503-13627]:Block[14321-14445]"
    }, {
      "left" : "attr = attrIter.next();",
      "right" : "attr = attrIter.next();",
      "info" : "ExpressionStatement[13525-13548]:ExpressionStatement[14343-14366]"
    }, {
      "left" : "if (attr.isDataAttribute())",
      "right" : "if (attr.isDataAttribute())",
      "info" : "IfStatement[13569-13609]:IfStatement[14387-14427]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13597-13609]:ReturnStatement[14415-14427]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13644-13657]:ReturnStatement[14462-14475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13721-13837]:Block[14539-14655]"
    }, {
      "left" : "return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());",
      "right" : "return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());",
      "info" : "ReturnStatement[13739-13823]:ReturnStatement[14557-14641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13872-13937]:Block[14690-14755]"
    }, {
      "left" : "attributes.remove(attr.getKey());",
      "right" : "attributes.remove(attr.getKey());",
      "info" : "ExpressionStatement[13890-13923]:ExpressionStatement[14708-14741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14001-14041]:Block[14819-14859]"
    }, {
      "left" : "return dataPrefix + key;",
      "right" : "return dataPrefix + key;",
      "info" : "ReturnStatement[14011-14035]:ReturnStatement[14829-14853]"
    } ]
  },
  "interFileMappings" : { }
}