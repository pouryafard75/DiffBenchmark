{
  "matchedElements" : [
 {
    "left" : "class : Base64",
    "right" : "class : Base64",
    "info" : "TypeDeclaration[1118-34586]:TypeDeclaration[1118-34597]"
  }, {
    "left" : "CHUNK_SIZE",
    "right" : "CHUNK_SIZE",
    "info" : "FieldDeclaration[1648-2000]:FieldDeclaration[1648-2000]"
  }, {
    "left" : "CHUNK_SEPARATOR",
    "right" : "CHUNK_SEPARATOR",
    "info" : "FieldDeclaration[2006-2212]:FieldDeclaration[2006-2212]"
  }, {
    "left" : "STANDARD_ENCODE_TABLE",
    "right" : "STANDARD_ENCODE_TABLE",
    "info" : "FieldDeclaration[2218-3007]:FieldDeclaration[2218-3007]"
  }, {
    "left" : "URL_SAFE_ENCODE_TABLE",
    "right" : "URL_SAFE_ENCODE_TABLE",
    "info" : "FieldDeclaration[3013-3697]:FieldDeclaration[3013-3697]"
  }, {
    "left" : "PAD",
    "right" : "PAD",
    "info" : "FieldDeclaration[3703-3787]:FieldDeclaration[3703-3787]"
  }, {
    "left" : "DECODE_TABLE",
    "right" : "DECODE_TABLE",
    "info" : "FieldDeclaration[3793-5153]:FieldDeclaration[3793-5153]"
  }, {
    "left" : "MASK_6BITS",
    "right" : "MASK_6BITS",
    "info" : "FieldDeclaration[5159-5261]:FieldDeclaration[5159-5261]"
  }, {
    "left" : "MASK_8BITS",
    "right" : "MASK_8BITS",
    "info" : "FieldDeclaration[5267-5380]:FieldDeclaration[5267-5380]"
  }, {
    "left" : "encodeTable",
    "right" : "encodeTable",
    "info" : "FieldDeclaration[5650-5968]:FieldDeclaration[5650-5968]"
  }, {
    "left" : "lineLength",
    "right" : "lineLength",
    "info" : "FieldDeclaration[5974-6157]:FieldDeclaration[5974-6157]"
  }, {
    "left" : "lineSeparator",
    "right" : "lineSeparator",
    "info" : "FieldDeclaration[6163-6305]:FieldDeclaration[6163-6305]"
  }, {
    "left" : "decodeSize",
    "right" : "decodeSize",
    "info" : "FieldDeclaration[6311-6529]:FieldDeclaration[6311-6529]"
  }, {
    "left" : "encodeSize",
    "right" : "encodeSize",
    "info" : "FieldDeclaration[6535-6753]:FieldDeclaration[6535-6753]"
  }, {
    "left" : "buf",
    "right" : "buf",
    "info" : "FieldDeclaration[6759-6824]:FieldDeclaration[6759-6824]"
  }, {
    "left" : "pos",
    "right" : "pos",
    "info" : "FieldDeclaration[6830-6932]:FieldDeclaration[6830-6932]"
  }, {
    "left" : "readPos",
    "right" : "readPos",
    "info" : "FieldDeclaration[6938-7043]:FieldDeclaration[6938-7043]"
  }, {
    "left" : "currentLinePos",
    "right" : "currentLinePos",
    "info" : "FieldDeclaration[7049-7305]:FieldDeclaration[7049-7305]"
  }, {
    "left" : "modulus",
    "right" : "modulus",
    "info" : "FieldDeclaration[7311-7493]:FieldDeclaration[7311-7493]"
  }, {
    "left" : "eof",
    "right" : "eof",
    "info" : "FieldDeclaration[7499-7689]:FieldDeclaration[7499-7689]"
  }, {
    "left" : "x",
    "right" : "x",
    "info" : "FieldDeclaration[7695-7905]:FieldDeclaration[7695-7905]"
  }, {
    "left" : "public Base64()",
    "right" : "public Base64()",
    "info" : "MethodDeclaration[7911-8230]:MethodDeclaration[7911-8230]"
  }, {
    "left" : "public Base64(urlSafe boolean)",
    "right" : "public Base64(urlSafe boolean)",
    "info" : "MethodDeclaration[8236-8675]:MethodDeclaration[8236-8675]"
  }, {
    "left" : "public Base64(lineLength int)",
    "right" : "public Base64(lineLength int)",
    "info" : "MethodDeclaration[8681-9323]:MethodDeclaration[8681-9323]"
  }, {
    "left" : "public Base64(lineLength int, lineSeparator )",
    "right" : "public Base64(lineLength int, lineSeparator )",
    "info" : "MethodDeclaration[9329-10226]:MethodDeclaration[9329-10226]"
  }, {
    "left" : "public Base64(lineLength int, lineSeparator , urlSafe boolean)",
    "right" : "public Base64(lineLength int, lineSeparator , urlSafe boolean)",
    "info" : "MethodDeclaration[10232-12417]:MethodDeclaration[10232-12417]"
  }, {
    "left" : "public isUrlSafe() : boolean",
    "right" : "public isUrlSafe() : boolean",
    "info" : "MethodDeclaration[12423-12684]:MethodDeclaration[12423-12684]"
  }, {
    "left" : "package hasData() : boolean",
    "right" : "package hasData() : boolean",
    "info" : "MethodDeclaration[12690-12920]:MethodDeclaration[12690-12920]"
  }, {
    "left" : "package avail() : int",
    "right" : "package avail() : int",
    "info" : "MethodDeclaration[12926-13149]:MethodDeclaration[12926-13149]"
  }, {
    "left" : "private resizeBuf() : void",
    "right" : "private resizeBuf() : void",
    "info" : "MethodDeclaration[13155-13478]:MethodDeclaration[13155-13478]"
  }, {
    "left" : "package readResults(b , bPos int, bAvail int) : int",
    "right" : "package readResults(b , bPos int, bAvail int) : int",
    "info" : "MethodDeclaration[13484-14650]:MethodDeclaration[13484-14650]"
  }, {
    "left" : "package setInitialBuffer(out , outPos int, outAvail int) : void",
    "right" : "package setInitialBuffer(out , outPos int, outAvail int) : void",
    "info" : "MethodDeclaration[14656-15427]:MethodDeclaration[14656-15427]"
  }, {
    "left" : "package encode(in , inPos int, inAvail int) : void",
    "right" : "package encode(in , inPos int, inAvail int) : void",
    "info" : "MethodDeclaration[15433-18663]:MethodDeclaration[15433-18674]"
  }, {
    "left" : "package decode(in , inPos int, inAvail int) : void",
    "right" : "package decode(in , inPos int, inAvail int) : void",
    "info" : "MethodDeclaration[18669-21509]:MethodDeclaration[18680-21520]"
  }, {
    "left" : "public isBase64(octet byte) : boolean",
    "right" : "public isBase64(octet byte) : boolean",
    "info" : "MethodDeclaration[21515-21947]:MethodDeclaration[21526-21958]"
  }, {
    "left" : "public isArrayByteBase64(arrayOctet ) : boolean",
    "right" : "public isArrayByteBase64(arrayOctet ) : boolean",
    "info" : "MethodDeclaration[21953-22623]:MethodDeclaration[21964-22634]"
  }, {
    "left" : "private containsBase64Byte(arrayOctet ) : boolean",
    "right" : "private containsBase64Byte(arrayOctet ) : boolean",
    "info" : "MethodDeclaration[22629-23163]:MethodDeclaration[22640-23174]"
  }, {
    "left" : "public encodeBase64(binaryData ) : ",
    "right" : "public encodeBase64(binaryData ) : ",
    "info" : "MethodDeclaration[23169-23484]:MethodDeclaration[23180-23495]"
  }, {
    "left" : "public encodeBase64URLSafe(binaryData ) : ",
    "right" : "public encodeBase64URLSafe(binaryData ) : ",
    "info" : "MethodDeclaration[23490-23916]:MethodDeclaration[23501-23927]"
  }, {
    "left" : "public encodeBase64Chunked(binaryData ) : ",
    "right" : "public encodeBase64Chunked(binaryData ) : ",
    "info" : "MethodDeclaration[23927-24303]:MethodDeclaration[23938-24314]"
  }, {
    "left" : "public decode(pObject ) : ",
    "right" : "public decode(pObject ) : ",
    "info" : "MethodDeclaration[24309-25085]:MethodDeclaration[24320-25096]"
  }, {
    "left" : "public decode(pArray ) : ",
    "right" : "public decode(pArray ) : ",
    "info" : "MethodDeclaration[25091-25412]:MethodDeclaration[25102-25423]"
  }, {
    "left" : "public encodeBase64(binaryData , isChunked boolean) : ",
    "right" : "public encodeBase64(binaryData , isChunked boolean) : ",
    "info" : "MethodDeclaration[25418-26088]:MethodDeclaration[25429-26099]"
  }, {
    "left" : "public encodeBase64(binaryData , isChunked boolean, urlSafe boolean) : ",
    "right" : "public encodeBase64(binaryData , isChunked boolean, urlSafe boolean) : ",
    "info" : "MethodDeclaration[26094-28219]:MethodDeclaration[26105-28230]"
  }, {
    "left" : "public decodeBase64(base64Data ) : ",
    "right" : "public decodeBase64(base64Data ) : ",
    "info" : "MethodDeclaration[28225-29081]:MethodDeclaration[28236-29092]"
  }, {
    "left" : "package discardWhitespace(data ) : ",
    "right" : "package discardWhitespace(data ) : ",
    "info" : "MethodDeclaration[29087-29980]:MethodDeclaration[29098-29991]"
  }, {
    "left" : "private isWhiteSpace(byteToCheck byte) : boolean",
    "right" : "private isWhiteSpace(byteToCheck byte) : boolean",
    "info" : "MethodDeclaration[29987-30462]:MethodDeclaration[29998-30473]"
  }, {
    "left" : "package discardNonBase64(data ) : ",
    "right" : "package discardNonBase64(data ) : ",
    "info" : "MethodDeclaration[30468-31280]:MethodDeclaration[30479-31291]"
  }, {
    "left" : "public encode(pObject ) : ",
    "right" : "public encode(pObject ) : ",
    "info" : "MethodDeclaration[31334-32119]:MethodDeclaration[31345-32130]"
  }, {
    "left" : "public encode(pArray ) : ",
    "right" : "public encode(pArray ) : ",
    "info" : "MethodDeclaration[32125-32498]:MethodDeclaration[32136-32509]"
  }, {
    "left" : "public decodeInteger(pArray ) : ",
    "right" : "public decodeInteger(pArray ) : ",
    "info" : "MethodDeclaration[32562-32903]:MethodDeclaration[32573-32914]"
  }, {
    "left" : "public encodeInteger(bigInt ) : ",
    "right" : "public encodeInteger(bigInt ) : ",
    "info" : "MethodDeclaration[32909-33442]:MethodDeclaration[32920-33453]"
  }, {
    "left" : "package toIntegerBytes(bigInt ) : ",
    "right" : "package toIntegerBytes(bigInt ) : ",
    "info" : "MethodDeclaration[33448-34584]:MethodDeclaration[33459-34595]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1582-1588]:Modifier[1582-1588]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1589-1594]:TYPE_DECLARATION_KIND[1589-1594]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8186-8192]:Modifier[8186-8192]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[8193-8199]:SimpleName[8193-8199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8202-8230]:Block[8202-8230]"
  }, {
    "left" : "this(false);",
    "right" : "this(false);",
    "info" : "ConstructorInvocation[8212-8224]:ConstructorInvocation[8212-8224]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8585-8591]:Modifier[8585-8591]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[8592-8598]:SimpleName[8592-8598]"
  }, {
    "left" : "boolean urlSafe",
    "right" : "boolean urlSafe",
    "info" : "SingleVariableDeclaration[8599-8614]:SingleVariableDeclaration[8599-8614]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8616-8675]:Block[8616-8675]"
  }, {
    "left" : "this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);",
    "right" : "this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);",
    "info" : "ConstructorInvocation[8626-8669]:ConstructorInvocation[8626-8669]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9243-9249]:Modifier[9243-9249]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[9250-9256]:SimpleName[9250-9256]"
  }, {
    "left" : "int lineLength",
    "right" : "int lineLength",
    "info" : "SingleVariableDeclaration[9257-9271]:SingleVariableDeclaration[9257-9271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9273-9323]:Block[9273-9323]"
  }, {
    "left" : "this(lineLength, CHUNK_SEPARATOR);",
    "right" : "this(lineLength, CHUNK_SEPARATOR);",
    "info" : "ConstructorInvocation[9283-9317]:ConstructorInvocation[9283-9317]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10119-10125]:Modifier[10119-10125]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[10126-10132]:SimpleName[10126-10132]"
  }, {
    "left" : "int lineLength",
    "right" : "int lineLength",
    "info" : "SingleVariableDeclaration[10133-10147]:SingleVariableDeclaration[10133-10147]"
  }, {
    "left" : "byte[] lineSeparator",
    "right" : "byte[] lineSeparator",
    "info" : "SingleVariableDeclaration[10149-10169]:SingleVariableDeclaration[10149-10169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10171-10226]:Block[10171-10226]"
  }, {
    "left" : "this(lineLength, lineSeparator, false);",
    "right" : "this(lineLength, lineSeparator, false);",
    "info" : "ConstructorInvocation[10181-10220]:ConstructorInvocation[10181-10220]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11482-11488]:Modifier[11482-11488]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[11489-11495]:SimpleName[11489-11495]"
  }, {
    "left" : "int lineLength",
    "right" : "int lineLength",
    "info" : "SingleVariableDeclaration[11496-11510]:SingleVariableDeclaration[11496-11510]"
  }, {
    "left" : "byte[] lineSeparator",
    "right" : "byte[] lineSeparator",
    "info" : "SingleVariableDeclaration[11512-11532]:SingleVariableDeclaration[11512-11532]"
  }, {
    "left" : "boolean urlSafe",
    "right" : "boolean urlSafe",
    "info" : "SingleVariableDeclaration[11534-11549]:SingleVariableDeclaration[11534-11549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11551-12417]:Block[11551-12417]"
  }, {
    "left" : "this.lineLength = lineLength;",
    "right" : "this.lineLength = lineLength;",
    "info" : "ExpressionStatement[11561-11590]:ExpressionStatement[11561-11590]"
  }, {
    "left" : "this.lineSeparator = new byte[lineSeparator.length];",
    "right" : "this.lineSeparator = new byte[lineSeparator.length];",
    "info" : "ExpressionStatement[11599-11651]:ExpressionStatement[11599-11651]"
  }, {
    "left" : "System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);",
    "right" : "System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);",
    "info" : "ExpressionStatement[11660-11740]:ExpressionStatement[11660-11740]"
  }, {
    "left" : "if (lineLength > 0)",
    "right" : "if (lineLength > 0)",
    "info" : "IfStatement[11749-11886]:IfStatement[11749-11886]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11769-11836]:Block[11769-11836]"
  }, {
    "left" : "this.encodeSize = 4 + lineSeparator.length;",
    "right" : "this.encodeSize = 4 + lineSeparator.length;",
    "info" : "ExpressionStatement[11783-11826]:ExpressionStatement[11783-11826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11842-11886]:Block[11842-11886]"
  }, {
    "left" : "this.encodeSize = 4;",
    "right" : "this.encodeSize = 4;",
    "info" : "ExpressionStatement[11856-11876]:ExpressionStatement[11856-11876]"
  }, {
    "left" : "this.decodeSize = this.encodeSize - 1;",
    "right" : "this.decodeSize = this.encodeSize - 1;",
    "info" : "ExpressionStatement[11895-11933]:ExpressionStatement[11895-11933]"
  }, {
    "left" : "if (containsBase64Byte(lineSeparator))",
    "right" : "if (containsBase64Byte(lineSeparator))",
    "info" : "IfStatement[11942-12327]:IfStatement[11942-12327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11981-12327]:Block[11981-12327]"
  }, {
    "left" : "String sep;",
    "right" : "String sep;",
    "info" : "VariableDeclarationStatement[11995-12006]:VariableDeclarationStatement[11995-12006]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[12019-12202]:TryStatement[12019-12202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12023-12096]:Block[12023-12096]"
  }, {
    "left" : "sep = new String(lineSeparator, \"UTF-8\");",
    "right" : "sep = new String(lineSeparator, \"UTF-8\");",
    "info" : "ExpressionStatement[12041-12082]:ExpressionStatement[12041-12082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12138-12202]:Block[12138-12202]"
  }, {
    "left" : "sep = new String(lineSeparator);",
    "right" : "sep = new String(lineSeparator);",
    "info" : "ExpressionStatement[12156-12188]:ExpressionStatement[12156-12188]"
  }, {
    "left" : "throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [
\" + sep + \"]\");",
    "right" : "throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [
\" + sep + \"]\");",
    "info" : "ThrowStatement[12215-12317]:ThrowStatement[12215-12317]"
  }, {
    "left" : "this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;",
    "right" : "this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;",
    "info" : "ExpressionStatement[12336-12411]:ExpressionStatement[12336-12411]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12592-12598]:Modifier[12592-12598]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12599-12606]:PrimitiveType[12599-12606]"
  }, {
    "left" : "isUrlSafe",
    "right" : "isUrlSafe",
    "info" : "SimpleName[12607-12616]:SimpleName[12607-12616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12619-12684]:Block[12619-12684]"
  }, {
    "left" : "return this.encodeTable == URL_SAFE_ENCODE_TABLE;",
    "right" : "return this.encodeTable == URL_SAFE_ENCODE_TABLE;",
    "info" : "ReturnStatement[12629-12678]:ReturnStatement[12629-12678]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12862-12869]:PrimitiveType[12862-12869]"
  }, {
    "left" : "hasData",
    "right" : "hasData",
    "info" : "SimpleName[12870-12877]:SimpleName[12870-12877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12880-12920]:Block[12880-12920]"
  }, {
    "left" : "return this.buf != null;",
    "right" : "return this.buf != null;",
    "info" : "ReturnStatement[12890-12914]:ReturnStatement[12890-12914]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[13082-13085]:PrimitiveType[13082-13085]"
  }, {
    "left" : "avail",
    "right" : "avail",
    "info" : "SimpleName[13086-13091]:SimpleName[13086-13091]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13094-13149]:Block[13094-13149]"
  }, {
    "left" : "return buf != null ? pos - readPos : 0;",
    "right" : "return buf != null ? pos - readPos : 0;",
    "info" : "ReturnStatement[13104-13143]:ReturnStatement[13104-13143]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13186-13193]:Modifier[13186-13193]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13194-13198]:PrimitiveType[13194-13198]"
  }, {
    "left" : "resizeBuf",
    "right" : "resizeBuf",
    "info" : "SimpleName[13199-13208]:SimpleName[13199-13208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13211-13478]:Block[13211-13478]"
  }, {
    "left" : "if (buf == null)",
    "right" : "if (buf == null)",
    "info" : "IfStatement[13221-13472]:IfStatement[13221-13472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13238-13329]:Block[13238-13329]"
  }, {
    "left" : "buf = new byte[8192];",
    "right" : "buf = new byte[8192];",
    "info" : "ExpressionStatement[13252-13273]:ExpressionStatement[13252-13273]"
  }, {
    "left" : "pos = 0;",
    "right" : "pos = 0;",
    "info" : "ExpressionStatement[13286-13294]:ExpressionStatement[13286-13294]"
  }, {
    "left" : "readPos = 0;",
    "right" : "readPos = 0;",
    "info" : "ExpressionStatement[13307-13319]:ExpressionStatement[13307-13319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13335-13472]:Block[13335-13472]"
  }, {
    "left" : "byte[] b = new byte[buf.length * 2];",
    "right" : "byte[] b = new byte[buf.length * 2];",
    "info" : "VariableDeclarationStatement[13349-13385]:VariableDeclarationStatement[13349-13385]"
  }, {
    "left" : "System.arraycopy(buf, 0, b, 0, buf.length);",
    "right" : "System.arraycopy(buf, 0, b, 0, buf.length);",
    "info" : "ExpressionStatement[13398-13441]:ExpressionStatement[13398-13441]"
  }, {
    "left" : "buf = b;",
    "right" : "buf = b;",
    "info" : "ExpressionStatement[13454-13462]:ExpressionStatement[13454-13462]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14068-14071]:PrimitiveType[14068-14071]"
  }, {
    "left" : "readResults",
    "right" : "readResults",
    "info" : "SimpleName[14072-14083]:SimpleName[14072-14083]"
  }, {
    "left" : "byte[] b",
    "right" : "byte[] b",
    "info" : "SingleVariableDeclaration[14084-14092]:SingleVariableDeclaration[14084-14092]"
  }, {
    "left" : "int bPos",
    "right" : "int bPos",
    "info" : "SingleVariableDeclaration[14094-14102]:SingleVariableDeclaration[14094-14102]"
  }, {
    "left" : "int bAvail",
    "right" : "int bAvail",
    "info" : "SingleVariableDeclaration[14104-14114]:SingleVariableDeclaration[14104-14114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14116-14650]:Block[14116-14650]"
  }, {
    "left" : "if (buf != null)",
    "right" : "if (buf != null)",
    "info" : "IfStatement[14126-14615]:IfStatement[14126-14615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14143-14615]:Block[14143-14615]"
  }, {
    "left" : "int len = Math.min(avail(), bAvail);",
    "right" : "int len = Math.min(avail(), bAvail);",
    "info" : "VariableDeclarationStatement[14157-14193]:VariableDeclarationStatement[14157-14193]"
  }, {
    "left" : "if (buf != b)",
    "right" : "if (buf != b)",
    "info" : "IfStatement[14206-14581]:IfStatement[14206-14581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14220-14417]:Block[14220-14417]"
  }, {
    "left" : "System.arraycopy(buf, readPos, b, bPos, len);",
    "right" : "System.arraycopy(buf, readPos, b, bPos, len);",
    "info" : "ExpressionStatement[14238-14283]:ExpressionStatement[14238-14283]"
  }, {
    "left" : "readPos += len;",
    "right" : "readPos += len;",
    "info" : "ExpressionStatement[14300-14315]:ExpressionStatement[14300-14315]"
  }, {
    "left" : "if (readPos >= pos)",
    "right" : "if (readPos >= pos)",
    "info" : "IfStatement[14332-14403]:IfStatement[14332-14403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14352-14403]:Block[14352-14403]"
  }, {
    "left" : "buf = null;",
    "right" : "buf = null;",
    "info" : "ExpressionStatement[14374-14385]:ExpressionStatement[14374-14385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14423-14581]:Block[14423-14581]"
  }, {
    "left" : "buf = null;",
    "right" : "buf = null;",
    "info" : "ExpressionStatement[14556-14567]:ExpressionStatement[14556-14567]"
  }, {
    "left" : "return len;",
    "right" : "return len;",
    "info" : "ReturnStatement[14594-14605]:ReturnStatement[14594-14605]"
  }, {
    "left" : "return eof ? -1 : 0;",
    "right" : "return eof ? -1 : 0;",
    "info" : "ReturnStatement[14624-14644]:ReturnStatement[14624-14644]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15085-15089]:PrimitiveType[15085-15089]"
  }, {
    "left" : "setInitialBuffer",
    "right" : "setInitialBuffer",
    "info" : "SimpleName[15090-15106]:SimpleName[15090-15106]"
  }, {
    "left" : "byte[] out",
    "right" : "byte[] out",
    "info" : "SingleVariableDeclaration[15107-15117]:SingleVariableDeclaration[15107-15117]"
  }, {
    "left" : "int outPos",
    "right" : "int outPos",
    "info" : "SingleVariableDeclaration[15119-15129]:SingleVariableDeclaration[15119-15129]"
  }, {
    "left" : "int outAvail",
    "right" : "int outAvail",
    "info" : "SingleVariableDeclaration[15131-15143]:SingleVariableDeclaration[15131-15143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15145-15427]:Block[15145-15427]"
  }, {
    "left" : "if (out != null && out.length == outAvail)",
    "right" : "if (out != null && out.length == outAvail)",
    "info" : "IfStatement[15288-15421]:IfStatement[15288-15421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15331-15421]:Block[15331-15421]"
  }, {
    "left" : "buf = out;",
    "right" : "buf = out;",
    "info" : "ExpressionStatement[15345-15355]:ExpressionStatement[15345-15355]"
  }, {
    "left" : "pos = outPos;",
    "right" : "pos = outPos;",
    "info" : "ExpressionStatement[15368-15381]:ExpressionStatement[15368-15381]"
  }, {
    "left" : "readPos = outPos;",
    "right" : "readPos = outPos;",
    "info" : "ExpressionStatement[15394-15411]:ExpressionStatement[15394-15411]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16169-16173]:PrimitiveType[16169-16173]"
  }, {
    "left" : "encode",
    "right" : "encode",
    "info" : "SimpleName[16174-16180]:SimpleName[16174-16180]"
  }, {
    "left" : "byte[] in",
    "right" : "byte[] in",
    "info" : "SingleVariableDeclaration[16181-16190]:SingleVariableDeclaration[16181-16190]"
  }, {
    "left" : "int inPos",
    "right" : "int inPos",
    "info" : "SingleVariableDeclaration[16192-16201]:SingleVariableDeclaration[16192-16201]"
  }, {
    "left" : "int inAvail",
    "right" : "int inAvail",
    "info" : "SingleVariableDeclaration[16203-16214]:SingleVariableDeclaration[16203-16214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16216-18663]:Block[16216-18674]"
  }, {
    "left" : "if (eof)",
    "right" : "if (eof)",
    "info" : "IfStatement[16226-16266]:IfStatement[16226-16266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16235-16266]:Block[16235-16266]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[16249-16256]:ReturnStatement[16249-16256]"
  }, {
    "left" : "if (inAvail < 0)",
    "right" : "if (inAvail < 0)",
    "info" : "IfStatement[16377-18657]:IfStatement[16377-18668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16394-17653]:Block[16394-17664]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[16408-16419]:ExpressionStatement[16408-16419]"
  }, {
    "left" : "if (buf == null || buf.length - pos < encodeSize)",
    "right" : "if (buf == null || buf.length - pos < encodeSize)",
    "info" : "IfStatement[16432-16526]:IfStatement[16432-16526]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16482-16526]:Block[16482-16526]"
  }, {
    "left" : "resizeBuf();",
    "right" : "resizeBuf();",
    "info" : "ExpressionStatement[16500-16512]:ExpressionStatement[16500-16512]"
  }, {
    "left" : "switch (modulus) {\n                case 1:\n                    buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buf[pos++] = PAD;\n                        buf[pos++] = PAD;\n                    }\n                    break;\n\n                case 2:\n                    buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buf[pos++] = PAD;\n                    }\n                    break;\n            }",
    "right" : "switch (modulus) {\n                case 1:\n                    buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buf[pos++] = PAD;\n                        buf[pos++] = PAD;\n                    }\n                    break;\n\n                case 2:\n                    buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buf[pos++] = PAD;\n                    }\n                    break;\n            }",
    "info" : "SwitchStatement[16539-17466]:SwitchStatement[16539-17466]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[16574-16581]:SwitchCase[16574-16581]"
  }, {
    "left" : "buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];",
    "right" : "buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];",
    "info" : "ExpressionStatement[16602-16650]:ExpressionStatement[16602-16650]"
  }, {
    "left" : "buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];",
    "right" : "buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];",
    "info" : "ExpressionStatement[16671-16719]:ExpressionStatement[16671-16719]"
  }, {
    "left" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
    "right" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
    "info" : "IfStatement[16814-16963]:IfStatement[16814-16963]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16856-16963]:Block[16856-16963]"
  }, {
    "left" : "buf[pos++] = PAD;",
    "right" : "buf[pos++] = PAD;",
    "info" : "ExpressionStatement[16882-16899]:ExpressionStatement[16882-16899]"
  }, {
    "left" : "buf[pos++] = PAD;",
    "right" : "buf[pos++] = PAD;",
    "info" : "ExpressionStatement[16924-16941]:ExpressionStatement[16924-16941]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16984-16990]:BreakStatement[16984-16990]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[17008-17015]:SwitchCase[17008-17015]"
  }, {
    "left" : "buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];",
    "right" : "buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];",
    "info" : "ExpressionStatement[17036-17085]:ExpressionStatement[17036-17085]"
  }, {
    "left" : "buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];",
    "right" : "buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];",
    "info" : "ExpressionStatement[17106-17154]:ExpressionStatement[17106-17154]"
  }, {
    "left" : "buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];",
    "right" : "buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];",
    "info" : "ExpressionStatement[17175-17223]:ExpressionStatement[17175-17223]"
  }, {
    "left" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
    "right" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
    "info" : "IfStatement[17318-17425]:IfStatement[17318-17425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17360-17425]:Block[17360-17425]"
  }, {
    "left" : "buf[pos++] = PAD;",
    "right" : "buf[pos++] = PAD;",
    "info" : "ExpressionStatement[17386-17403]:ExpressionStatement[17386-17403]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17446-17452]:BreakStatement[17446-17452]"
  }, {
    "left" : "if (lineLength > 0)",
    "right" : "if (lineLength > 0 && pos > 0)",
    "info" : "IfStatement[17479-17643]:IfStatement[17479-17654]"
  }, {
    "left" : "lineLength > 0",
    "right" : "lineLength > 0",
    "info" : "InfixExpression[17483-17497]:InfixExpression[17483-17497]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17499-17643]:Block[17510-17654]"
  }, {
    "left" : "System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);",
    "right" : "System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);",
    "info" : "ExpressionStatement[17517-17584]:ExpressionStatement[17528-17595]"
  }, {
    "left" : "pos += lineSeparator.length;",
    "right" : "pos += lineSeparator.length;",
    "info" : "ExpressionStatement[17601-17629]:ExpressionStatement[17612-17640]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17659-18657]:Block[17670-18668]"
  }, {
    "left" : "for (int i = 0; i < inAvail; i++)",
    "right" : "for (int i = 0; i < inAvail; i++)",
    "info" : "ForStatement[17673-18647]:ForStatement[17684-18658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17707-18647]:Block[17718-18658]"
  }, {
    "left" : "if (buf == null || buf.length - pos < encodeSize)",
    "right" : "if (buf == null || buf.length - pos < encodeSize)",
    "info" : "IfStatement[17725-17827]:IfStatement[17736-17838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17775-17827]:Block[17786-17838]"
  }, {
    "left" : "resizeBuf();",
    "right" : "resizeBuf();",
    "info" : "ExpressionStatement[17797-17809]:ExpressionStatement[17808-17820]"
  }, {
    "left" : "modulus = (++modulus) % 3;",
    "right" : "modulus = (++modulus) % 3;",
    "info" : "ExpressionStatement[17844-17870]:ExpressionStatement[17855-17881]"
  }, {
    "left" : "int b = in[inPos++];",
    "right" : "int b = in[inPos++];",
    "info" : "VariableDeclarationStatement[17887-17907]:VariableDeclarationStatement[17898-17918]"
  }, {
    "left" : "if (b < 0)",
    "right" : "if (b < 0)",
    "info" : "IfStatement[17924-17948]:IfStatement[17935-17959]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17935-17948]:Block[17946-17959]"
  }, {
    "left" : "b += 256;",
    "right" : "b += 256;",
    "info" : "ExpressionStatement[17937-17946]:ExpressionStatement[17948-17957]"
  }, {
    "left" : "x = (x << 8) + b;",
    "right" : "x = (x << 8) + b;",
    "info" : "ExpressionStatement[17965-17982]:ExpressionStatement[17976-17993]"
  }, {
    "left" : "if (0 == modulus)",
    "right" : "if (0 == modulus)",
    "info" : "IfStatement[17999-18633]:IfStatement[18010-18644]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18017-18633]:Block[18028-18644]"
  }, {
    "left" : "buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];",
    "right" : "buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];",
    "info" : "ExpressionStatement[18039-18088]:ExpressionStatement[18050-18099]"
  }, {
    "left" : "buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];",
    "right" : "buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];",
    "info" : "ExpressionStatement[18109-18158]:ExpressionStatement[18120-18169]"
  }, {
    "left" : "buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];",
    "right" : "buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];",
    "info" : "ExpressionStatement[18179-18227]:ExpressionStatement[18190-18238]"
  }, {
    "left" : "buf[pos++] = encodeTable[x & MASK_6BITS];",
    "right" : "buf[pos++] = encodeTable[x & MASK_6BITS];",
    "info" : "ExpressionStatement[18248-18289]:ExpressionStatement[18259-18300]"
  }, {
    "left" : "currentLinePos += 4;",
    "right" : "currentLinePos += 4;",
    "info" : "ExpressionStatement[18310-18330]:ExpressionStatement[18321-18341]"
  }, {
    "left" : "if (lineLength > 0 && lineLength <= currentLinePos)",
    "right" : "if (lineLength > 0 && lineLength <= currentLinePos)",
    "info" : "IfStatement[18351-18615]:IfStatement[18362-18626]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18403-18615]:Block[18414-18626]"
  }, {
    "left" : "System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);",
    "right" : "System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);",
    "info" : "ExpressionStatement[18429-18496]:ExpressionStatement[18440-18507]"
  }, {
    "left" : "pos += lineSeparator.length;",
    "right" : "pos += lineSeparator.length;",
    "info" : "ExpressionStatement[18521-18549]:ExpressionStatement[18532-18560]"
  }, {
    "left" : "currentLinePos = 0;",
    "right" : "currentLinePos = 0;",
    "info" : "ExpressionStatement[18574-18593]:ExpressionStatement[18585-18604]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19760-19764]:PrimitiveType[19771-19775]"
  }, {
    "left" : "decode",
    "right" : "decode",
    "info" : "SimpleName[19765-19771]:SimpleName[19776-19782]"
  }, {
    "left" : "byte[] in",
    "right" : "byte[] in",
    "info" : "SingleVariableDeclaration[19772-19781]:SingleVariableDeclaration[19783-19792]"
  }, {
    "left" : "int inPos",
    "right" : "int inPos",
    "info" : "SingleVariableDeclaration[19783-19792]:SingleVariableDeclaration[19794-19803]"
  }, {
    "left" : "int inAvail",
    "right" : "int inAvail",
    "info" : "SingleVariableDeclaration[19794-19805]:SingleVariableDeclaration[19805-19816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19807-21509]:Block[19818-21520]"
  }, {
    "left" : "if (eof)",
    "right" : "if (eof)",
    "info" : "IfStatement[19817-19857]:IfStatement[19828-19868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19826-19857]:Block[19837-19868]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[19840-19847]:ReturnStatement[19851-19858]"
  }, {
    "left" : "if (inAvail < 0)",
    "right" : "if (inAvail < 0)",
    "info" : "IfStatement[19866-19918]:IfStatement[19877-19929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19883-19918]:Block[19894-19929]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[19897-19908]:ExpressionStatement[19908-19919]"
  }, {
    "left" : "for (int i = 0; i < inAvail; i++)",
    "right" : "for (int i = 0; i < inAvail; i++)",
    "info" : "ForStatement[19927-20828]:ForStatement[19938-20839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19961-20828]:Block[19972-20839]"
  }, {
    "left" : "if (buf == null || buf.length - pos < decodeSize)",
    "right" : "if (buf == null || buf.length - pos < decodeSize)",
    "info" : "IfStatement[19975-20069]:IfStatement[19986-20080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20025-20069]:Block[20036-20080]"
  }, {
    "left" : "resizeBuf();",
    "right" : "resizeBuf();",
    "info" : "ExpressionStatement[20043-20055]:ExpressionStatement[20054-20066]"
  }, {
    "left" : "byte b = in[inPos++];",
    "right" : "byte b = in[inPos++];",
    "info" : "VariableDeclarationStatement[20082-20103]:VariableDeclarationStatement[20093-20114]"
  }, {
    "left" : "if (b == PAD)",
    "right" : "if (b == PAD)",
    "info" : "IfStatement[20116-20818]:IfStatement[20127-20829]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20130-20230]:Block[20141-20241]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[20182-20193]:ExpressionStatement[20193-20204]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20210-20216]:BreakStatement[20221-20227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20236-20818]:Block[20247-20829]"
  }, {
    "left" : "if (b >= 0 && b < DECODE_TABLE.length)",
    "right" : "if (b >= 0 && b < DECODE_TABLE.length)",
    "info" : "IfStatement[20254-20804]:IfStatement[20265-20815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20293-20804]:Block[20304-20815]"
  }, {
    "left" : "int result = DECODE_TABLE[b];",
    "right" : "int result = DECODE_TABLE[b];",
    "info" : "VariableDeclarationStatement[20315-20344]:VariableDeclarationStatement[20326-20355]"
  }, {
    "left" : "if (result >= 0)",
    "right" : "if (result >= 0)",
    "info" : "IfStatement[20365-20786]:IfStatement[20376-20797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20382-20786]:Block[20393-20797]"
  }, {
    "left" : "modulus = (++modulus) % 4;",
    "right" : "modulus = (++modulus) % 4;",
    "info" : "ExpressionStatement[20408-20434]:ExpressionStatement[20419-20445]"
  }, {
    "left" : "x = (x << 6) + result;",
    "right" : "x = (x << 6) + result;",
    "info" : "ExpressionStatement[20459-20481]:ExpressionStatement[20470-20492]"
  }, {
    "left" : "if (modulus == 0)",
    "right" : "if (modulus == 0)",
    "info" : "IfStatement[20506-20764]:IfStatement[20517-20775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20524-20764]:Block[20535-20775]"
  }, {
    "left" : "buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "right" : "buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "info" : "ExpressionStatement[20554-20599]:ExpressionStatement[20565-20610]"
  }, {
    "left" : "buf[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
    "right" : "buf[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
    "info" : "ExpressionStatement[20628-20672]:ExpressionStatement[20639-20683]"
  }, {
    "left" : "buf[pos++] = (byte) (x & MASK_8BITS);",
    "right" : "buf[pos++] = (byte) (x & MASK_8BITS);",
    "info" : "ExpressionStatement[20701-20738]:ExpressionStatement[20712-20749]"
  }, {
    "left" : "if (eof && modulus != 0)",
    "right" : "if (eof && modulus != 0)",
    "info" : "IfStatement[21067-21503]:IfStatement[21078-21514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21092-21503]:Block[21103-21514]"
  }, {
    "left" : "x = x << 6;",
    "right" : "x = x << 6;",
    "info" : "ExpressionStatement[21106-21117]:ExpressionStatement[21117-21128]"
  }, {
    "left" : "switch (modulus) {\n                case 2:\n                    x = x << 6;\n                    buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    break;\n                case 3:\n                    buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buf[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    break;\n            }",
    "right" : "switch (modulus) {\n                case 2:\n                    x = x << 6;\n                    buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    break;\n                case 3:\n                    buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buf[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    break;\n            }",
    "info" : "SwitchStatement[21130-21493]:SwitchStatement[21141-21504]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[21165-21172]:SwitchCase[21176-21183]"
  }, {
    "left" : "x = x << 6;",
    "right" : "x = x << 6;",
    "info" : "ExpressionStatement[21193-21204]:ExpressionStatement[21204-21215]"
  }, {
    "left" : "buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "right" : "buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "info" : "ExpressionStatement[21225-21270]:ExpressionStatement[21236-21281]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21291-21297]:BreakStatement[21302-21308]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[21314-21321]:SwitchCase[21325-21332]"
  }, {
    "left" : "buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "right" : "buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "info" : "ExpressionStatement[21342-21387]:ExpressionStatement[21353-21398]"
  }, {
    "left" : "buf[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
    "right" : "buf[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
    "info" : "ExpressionStatement[21408-21452]:ExpressionStatement[21419-21463]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21473-21479]:BreakStatement[21484-21490]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21792-21798]:Modifier[21803-21809]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[21799-21805]:Modifier[21810-21816]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[21806-21813]:PrimitiveType[21817-21824]"
  }, {
    "left" : "isBase64",
    "right" : "isBase64",
    "info" : "SimpleName[21814-21822]:SimpleName[21825-21833]"
  }, {
    "left" : "byte octet",
    "right" : "byte octet",
    "info" : "SingleVariableDeclaration[21823-21833]:SingleVariableDeclaration[21834-21844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21835-21947]:Block[21846-21958]"
  }, {
    "left" : "return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);",
    "right" : "return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);",
    "info" : "ReturnStatement[21845-21941]:ReturnStatement[21856-21952]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22352-22358]:Modifier[22363-22369]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[22359-22365]:Modifier[22370-22376]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[22366-22373]:PrimitiveType[22377-22384]"
  }, {
    "left" : "isArrayByteBase64",
    "right" : "isArrayByteBase64",
    "info" : "SimpleName[22374-22391]:SimpleName[22385-22402]"
  }, {
    "left" : "byte[] arrayOctet",
    "right" : "byte[] arrayOctet",
    "info" : "SingleVariableDeclaration[22392-22409]:SingleVariableDeclaration[22403-22420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22411-22623]:Block[22422-22634]"
  }, {
    "left" : "for (int i = 0; i < arrayOctet.length; i++)",
    "right" : "for (int i = 0; i < arrayOctet.length; i++)",
    "info" : "ForStatement[22421-22596]:ForStatement[22432-22607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22465-22596]:Block[22476-22607]"
  }, {
    "left" : "if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i]))",
    "right" : "if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i]))",
    "info" : "IfStatement[22479-22586]:IfStatement[22490-22597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22541-22586]:Block[22552-22597]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22559-22572]:ReturnStatement[22570-22583]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[22605-22617]:ReturnStatement[22616-22628]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22923-22930]:Modifier[22934-22941]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[22931-22937]:Modifier[22942-22948]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[22938-22945]:PrimitiveType[22949-22956]"
  }, {
    "left" : "containsBase64Byte",
    "right" : "containsBase64Byte",
    "info" : "SimpleName[22946-22964]:SimpleName[22957-22975]"
  }, {
    "left" : "byte[] arrayOctet",
    "right" : "byte[] arrayOctet",
    "info" : "SingleVariableDeclaration[22965-22982]:SingleVariableDeclaration[22976-22993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22984-23163]:Block[22995-23174]"
  }, {
    "left" : "for (int i = 0; i < arrayOctet.length; i++)",
    "right" : "for (int i = 0; i < arrayOctet.length; i++)",
    "info" : "ForStatement[22994-23135]:ForStatement[23005-23146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23038-23135]:Block[23049-23146]"
  }, {
    "left" : "if (isBase64(arrayOctet[i]))",
    "right" : "if (isBase64(arrayOctet[i]))",
    "info" : "IfStatement[23052-23125]:IfStatement[23063-23136]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23081-23125]:Block[23092-23136]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[23099-23111]:ReturnStatement[23110-23122]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[23144-23157]:ReturnStatement[23155-23168]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23376-23382]:Modifier[23387-23393]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[23383-23389]:Modifier[23394-23400]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[23390-23396]:ArrayType[23401-23407]"
  }, {
    "left" : "encodeBase64",
    "right" : "encodeBase64",
    "info" : "SimpleName[23397-23409]:SimpleName[23408-23420]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[23410-23427]:SingleVariableDeclaration[23421-23438]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23429-23484]:Block[23440-23495]"
  }, {
    "left" : "return encodeBase64(binaryData, false);",
    "right" : "return encodeBase64(binaryData, false);",
    "info" : "ReturnStatement[23439-23478]:ReturnStatement[23450-23489]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23795-23801]:Modifier[23806-23812]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[23802-23808]:Modifier[23813-23819]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[23809-23815]:ArrayType[23820-23826]"
  }, {
    "left" : "encodeBase64URLSafe",
    "right" : "encodeBase64URLSafe",
    "info" : "SimpleName[23816-23835]:SimpleName[23827-23846]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[23836-23853]:SingleVariableDeclaration[23847-23864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23855-23916]:Block[23866-23927]"
  }, {
    "left" : "return encodeBase64(binaryData, false, true);",
    "right" : "return encodeBase64(binaryData, false, true);",
    "info" : "ReturnStatement[23865-23910]:ReturnStatement[23876-23921]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24189-24195]:Modifier[24200-24206]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24196-24202]:Modifier[24207-24213]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[24203-24209]:ArrayType[24214-24220]"
  }, {
    "left" : "encodeBase64Chunked",
    "right" : "encodeBase64Chunked",
    "info" : "SimpleName[24210-24229]:SimpleName[24221-24240]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[24230-24247]:SingleVariableDeclaration[24241-24258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24249-24303]:Block[24260-24314]"
  }, {
    "left" : "return encodeBase64(binaryData, true);",
    "right" : "return encodeBase64(binaryData, true);",
    "info" : "ReturnStatement[24259-24297]:ReturnStatement[24270-24308]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24827-24833]:Modifier[24838-24844]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[24834-24840]:SimpleType[24845-24851]"
  }, {
    "left" : "decode",
    "right" : "decode",
    "info" : "SimpleName[24841-24847]:SimpleName[24852-24858]"
  }, {
    "left" : "Object pObject",
    "right" : "Object pObject",
    "info" : "SingleVariableDeclaration[24848-24862]:SingleVariableDeclaration[24859-24873]"
  }, {
    "left" : "DecoderException",
    "right" : "DecoderException",
    "info" : "SimpleType[24871-24887]:SimpleType[24882-24898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24888-25085]:Block[24899-25096]"
  }, {
    "left" : "if (!(pObject instanceof byte[]))",
    "right" : "if (!(pObject instanceof byte[]))",
    "info" : "IfStatement[24898-25038]:IfStatement[24909-25049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24932-25038]:Block[24943-25049]"
  }, {
    "left" : "throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[]\");",
    "right" : "throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[]\");",
    "info" : "ThrowStatement[24946-25028]:ThrowStatement[24957-25039]"
  }, {
    "left" : "return decode((byte[]) pObject);",
    "right" : "return decode((byte[]) pObject);",
    "info" : "ReturnStatement[25047-25079]:ReturnStatement[25058-25090]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25332-25338]:Modifier[25343-25349]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[25339-25345]:ArrayType[25350-25356]"
  }, {
    "left" : "decode",
    "right" : "decode",
    "info" : "SimpleName[25346-25352]:SimpleName[25357-25363]"
  }, {
    "left" : "byte[] pArray",
    "right" : "byte[] pArray",
    "info" : "SingleVariableDeclaration[25353-25366]:SingleVariableDeclaration[25364-25377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25368-25412]:Block[25379-25423]"
  }, {
    "left" : "return decodeBase64(pArray);",
    "right" : "return decodeBase64(pArray);",
    "info" : "ReturnStatement[25378-25406]:ReturnStatement[25389-25417]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25950-25956]:Modifier[25961-25967]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25957-25963]:Modifier[25968-25974]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[25964-25970]:ArrayType[25975-25981]"
  }, {
    "left" : "encodeBase64",
    "right" : "encodeBase64",
    "info" : "SimpleName[25971-25983]:SimpleName[25982-25994]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[25984-26001]:SingleVariableDeclaration[25995-26012]"
  }, {
    "left" : "boolean isChunked",
    "right" : "boolean isChunked",
    "info" : "SingleVariableDeclaration[26003-26020]:SingleVariableDeclaration[26014-26031]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26022-26088]:Block[26033-26099]"
  }, {
    "left" : "return encodeBase64(binaryData, isChunked, false);",
    "right" : "return encodeBase64(binaryData, isChunked, false);",
    "info" : "ReturnStatement[26032-26082]:ReturnStatement[26043-26093]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26758-26764]:Modifier[26769-26775]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[26765-26771]:Modifier[26776-26782]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[26772-26778]:ArrayType[26783-26789]"
  }, {
    "left" : "encodeBase64",
    "right" : "encodeBase64",
    "info" : "SimpleName[26779-26791]:SimpleName[26790-26802]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[26792-26809]:SingleVariableDeclaration[26803-26820]"
  }, {
    "left" : "boolean isChunked",
    "right" : "boolean isChunked",
    "info" : "SingleVariableDeclaration[26811-26828]:SingleVariableDeclaration[26822-26839]"
  }, {
    "left" : "boolean urlSafe",
    "right" : "boolean urlSafe",
    "info" : "SingleVariableDeclaration[26830-26845]:SingleVariableDeclaration[26841-26856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26847-28219]:Block[26858-28230]"
  }, {
    "left" : "if (binaryData == null || binaryData.length == 0)",
    "right" : "if (binaryData == null || binaryData.length == 0)",
    "info" : "IfStatement[26857-26949]:IfStatement[26868-26960]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26907-26949]:Block[26918-26960]"
  }, {
    "left" : "return binaryData;",
    "right" : "return binaryData;",
    "info" : "ReturnStatement[26921-26939]:ReturnStatement[26932-26950]"
  }, {
    "left" : "Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);",
    "right" : "Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);",
    "info" : "VariableDeclarationStatement[26958-27045]:VariableDeclarationStatement[26969-27056]"
  }, {
    "left" : "long len = (binaryData.length * 4) / 3;",
    "right" : "long len = (binaryData.length * 4) / 3;",
    "info" : "VariableDeclarationStatement[27054-27093]:VariableDeclarationStatement[27065-27104]"
  }, {
    "left" : "long mod = len % 4;",
    "right" : "long mod = len % 4;",
    "info" : "VariableDeclarationStatement[27102-27121]:VariableDeclarationStatement[27113-27132]"
  }, {
    "left" : "if (mod != 0)",
    "right" : "if (mod != 0)",
    "info" : "IfStatement[27130-27183]:IfStatement[27141-27194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27144-27183]:Block[27155-27194]"
  }, {
    "left" : "len += 4 - mod;",
    "right" : "len += 4 - mod;",
    "info" : "ExpressionStatement[27158-27173]:ExpressionStatement[27169-27184]"
  }, {
    "left" : "if (isChunked)",
    "right" : "if (isChunked)",
    "info" : "IfStatement[27192-27288]:IfStatement[27203-27299]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27207-27288]:Block[27218-27299]"
  }, {
    "left" : "len += (1 + (len / CHUNK_SIZE)) * CHUNK_SEPARATOR.length;",
    "right" : "len += (1 + (len / CHUNK_SIZE)) * CHUNK_SEPARATOR.length;",
    "info" : "ExpressionStatement[27221-27278]:ExpressionStatement[27232-27289]"
  }, {
    "left" : "if (len > Integer.MAX_VALUE)",
    "right" : "if (len > Integer.MAX_VALUE)",
    "info" : "IfStatement[27297-27503]:IfStatement[27308-27514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27326-27503]:Block[27337-27514]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"Input array too big, output array would be bigger than Integer.MAX_VALUE=\" + Integer.MAX_VALUE);",
    "right" : "throw new IllegalArgumentException(\n                    \"Input array too big, output array would be bigger than Integer.MAX_VALUE=\" + Integer.MAX_VALUE);",
    "info" : "ThrowStatement[27340-27493]:ThrowStatement[27351-27504]"
  }, {
    "left" : "byte[] buf = new byte[(int) len];",
    "right" : "byte[] buf = new byte[(int) len];",
    "info" : "VariableDeclarationStatement[27512-27545]:VariableDeclarationStatement[27523-27556]"
  }, {
    "left" : "b64.setInitialBuffer(buf, 0, buf.length);",
    "right" : "b64.setInitialBuffer(buf, 0, buf.length);",
    "info" : "ExpressionStatement[27554-27595]:ExpressionStatement[27565-27606]"
  }, {
    "left" : "b64.encode(binaryData, 0, binaryData.length);",
    "right" : "b64.encode(binaryData, 0, binaryData.length);",
    "info" : "ExpressionStatement[27604-27649]:ExpressionStatement[27615-27660]"
  }, {
    "left" : "b64.encode(binaryData, 0, -1);",
    "right" : "b64.encode(binaryData, 0, -1);",
    "info" : "ExpressionStatement[27658-27688]:ExpressionStatement[27669-27699]"
  }, {
    "left" : "if (b64.buf != buf)",
    "right" : "if (b64.buf != buf)",
    "info" : "IfStatement[27794-27874]:IfStatement[27805-27885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27814-27874]:Block[27825-27885]"
  }, {
    "left" : "b64.readResults(buf, 0, buf.length);",
    "right" : "b64.readResults(buf, 0, buf.length);",
    "info" : "ExpressionStatement[27828-27864]:ExpressionStatement[27839-27875]"
  }, {
    "left" : "if (urlSafe && b64.pos < buf.length)",
    "right" : "if (urlSafe && b64.pos < buf.length)",
    "info" : "IfStatement[28002-28193]:IfStatement[28013-28204]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28039-28193]:Block[28050-28204]"
  }, {
    "left" : "byte[] smallerBuf = new byte[b64.pos];",
    "right" : "byte[] smallerBuf = new byte[b64.pos];",
    "info" : "VariableDeclarationStatement[28053-28091]:VariableDeclarationStatement[28064-28102]"
  }, {
    "left" : "System.arraycopy(buf, 0, smallerBuf, 0, b64.pos);",
    "right" : "System.arraycopy(buf, 0, smallerBuf, 0, b64.pos);",
    "info" : "ExpressionStatement[28104-28153]:ExpressionStatement[28115-28164]"
  }, {
    "left" : "buf = smallerBuf;",
    "right" : "buf = smallerBuf;",
    "info" : "ExpressionStatement[28166-28183]:ExpressionStatement[28177-28194]"
  }, {
    "left" : "return buf;",
    "right" : "return buf;",
    "info" : "ReturnStatement[28202-28213]:ReturnStatement[28213-28224]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28392-28398]:Modifier[28403-28409]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[28399-28405]:Modifier[28410-28416]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[28406-28412]:ArrayType[28417-28423]"
  }, {
    "left" : "decodeBase64",
    "right" : "decodeBase64",
    "info" : "SimpleName[28413-28425]:SimpleName[28424-28436]"
  }, {
    "left" : "byte[] base64Data",
    "right" : "byte[] base64Data",
    "info" : "SingleVariableDeclaration[28426-28443]:SingleVariableDeclaration[28437-28454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28445-29081]:Block[28456-29092]"
  }, {
    "left" : "if (base64Data == null || base64Data.length == 0)",
    "right" : "if (base64Data == null || base64Data.length == 0)",
    "info" : "IfStatement[28455-28547]:IfStatement[28466-28558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28505-28547]:Block[28516-28558]"
  }, {
    "left" : "return base64Data;",
    "right" : "return base64Data;",
    "info" : "ReturnStatement[28519-28537]:ReturnStatement[28530-28548]"
  }, {
    "left" : "Base64 b64 = new Base64();",
    "right" : "Base64 b64 = new Base64();",
    "info" : "VariableDeclarationStatement[28556-28582]:VariableDeclarationStatement[28567-28593]"
  }, {
    "left" : "long len = (base64Data.length * 3) / 4;",
    "right" : "long len = (base64Data.length * 3) / 4;",
    "info" : "VariableDeclarationStatement[28591-28630]:VariableDeclarationStatement[28602-28641]"
  }, {
    "left" : "byte[] buf = new byte[(int) len];",
    "right" : "byte[] buf = new byte[(int) len];",
    "info" : "VariableDeclarationStatement[28639-28672]:VariableDeclarationStatement[28650-28683]"
  }, {
    "left" : "b64.setInitialBuffer(buf, 0, buf.length);",
    "right" : "b64.setInitialBuffer(buf, 0, buf.length);",
    "info" : "ExpressionStatement[28681-28722]:ExpressionStatement[28692-28733]"
  }, {
    "left" : "b64.decode(base64Data, 0, base64Data.length);",
    "right" : "b64.decode(base64Data, 0, base64Data.length);",
    "info" : "ExpressionStatement[28731-28776]:ExpressionStatement[28742-28787]"
  }, {
    "left" : "b64.decode(base64Data, 0, -1);",
    "right" : "b64.decode(base64Data, 0, -1);",
    "info" : "ExpressionStatement[28785-28815]:ExpressionStatement[28796-28826]"
  }, {
    "left" : "byte[] result = new byte[b64.pos];",
    "right" : "byte[] result = new byte[b64.pos];",
    "info" : "VariableDeclarationStatement[28967-29001]:VariableDeclarationStatement[28978-29012]"
  }, {
    "left" : "b64.readResults(result, 0, result.length);",
    "right" : "b64.readResults(result, 0, result.length);",
    "info" : "ExpressionStatement[29010-29052]:ExpressionStatement[29021-29063]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[29061-29075]:ReturnStatement[29072-29086]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[29374-29380]:Modifier[29385-29391]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[29381-29387]:ArrayType[29392-29398]"
  }, {
    "left" : "discardWhitespace",
    "right" : "discardWhitespace",
    "info" : "SimpleName[29388-29405]:SimpleName[29399-29416]"
  }, {
    "left" : "byte[] data",
    "right" : "byte[] data",
    "info" : "SingleVariableDeclaration[29406-29417]:SingleVariableDeclaration[29417-29428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29419-29980]:Block[29430-29991]"
  }, {
    "left" : "byte groomedData[] = new byte[data.length];",
    "right" : "byte groomedData[] = new byte[data.length];",
    "info" : "VariableDeclarationStatement[29429-29472]:VariableDeclarationStatement[29440-29483]"
  }, {
    "left" : "int bytesCopied = 0;",
    "right" : "int bytesCopied = 0;",
    "info" : "VariableDeclarationStatement[29481-29501]:VariableDeclarationStatement[29492-29512]"
  }, {
    "left" : "for (int i = 0; i < data.length; i++)",
    "right" : "for (int i = 0; i < data.length; i++)",
    "info" : "ForStatement[29510-29826]:ForStatement[29521-29837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29548-29826]:Block[29559-29837]"
  }, {
    "left" : "switch (data[i]) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    break;\n                default :\n                    groomedData[bytesCopied++] = data[i];\n            }",
    "right" : "switch (data[i]) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    break;\n                default :\n                    groomedData[bytesCopied++] = data[i];\n            }",
    "info" : "SwitchStatement[29562-29816]:SwitchStatement[29573-29827]"
  }, {
    "left" : "case ' ' :",
    "right" : "case ' ' :",
    "info" : "SwitchCase[29597-29607]:SwitchCase[29608-29618]"
  }, {
    "left" : "case '\\n' :",
    "right" : "case '\\n' :",
    "info" : "SwitchCase[29624-29635]:SwitchCase[29635-29646]"
  }, {
    "left" : "case '\\r' :",
    "right" : "case '\\r' :",
    "info" : "SwitchCase[29652-29663]:SwitchCase[29663-29674]"
  }, {
    "left" : "case '\\t' :",
    "right" : "case '\\t' :",
    "info" : "SwitchCase[29680-29691]:SwitchCase[29691-29702]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[29712-29718]:BreakStatement[29723-29729]"
  }, {
    "left" : "default :",
    "right" : "default :",
    "info" : "SwitchCase[29735-29744]:SwitchCase[29746-29755]"
  }, {
    "left" : "groomedData[bytesCopied++] = data[i];",
    "right" : "groomedData[bytesCopied++] = data[i];",
    "info" : "ExpressionStatement[29765-29802]:ExpressionStatement[29776-29813]"
  }, {
    "left" : "byte packedData[] = new byte[bytesCopied];",
    "right" : "byte packedData[] = new byte[bytesCopied];",
    "info" : "VariableDeclarationStatement[29835-29877]:VariableDeclarationStatement[29846-29888]"
  }, {
    "left" : "System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);",
    "right" : "System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);",
    "info" : "ExpressionStatement[29886-29947]:ExpressionStatement[29897-29958]"
  }, {
    "left" : "return packedData;",
    "right" : "return packedData;",
    "info" : "ReturnStatement[29956-29974]:ReturnStatement[29967-29985]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[30184-30191]:Modifier[30195-30202]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30192-30198]:Modifier[30203-30209]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[30199-30206]:PrimitiveType[30210-30217]"
  }, {
    "left" : "isWhiteSpace",
    "right" : "isWhiteSpace",
    "info" : "SimpleName[30207-30219]:SimpleName[30218-30230]"
  }, {
    "left" : "byte byteToCheck",
    "right" : "byte byteToCheck",
    "info" : "SingleVariableDeclaration[30220-30236]:SingleVariableDeclaration[30231-30247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30238-30462]:Block[30249-30473]"
  }, {
    "left" : "switch (byteToCheck) {\n            case ' ' :\n            case '\\n' :\n            case '\\r' :\n            case '\\t' :\n                return true;\n            default :\n                return false;\n        }",
    "right" : "switch (byteToCheck) {\n            case ' ' :\n            case '\\n' :\n            case '\\r' :\n            case '\\t' :\n                return true;\n            default :\n                return false;\n        }",
    "info" : "SwitchStatement[30248-30456]:SwitchStatement[30259-30467]"
  }, {
    "left" : "case ' ' :",
    "right" : "case ' ' :",
    "info" : "SwitchCase[30283-30293]:SwitchCase[30294-30304]"
  }, {
    "left" : "case '\\n' :",
    "right" : "case '\\n' :",
    "info" : "SwitchCase[30306-30317]:SwitchCase[30317-30328]"
  }, {
    "left" : "case '\\r' :",
    "right" : "case '\\r' :",
    "info" : "SwitchCase[30330-30341]:SwitchCase[30341-30352]"
  }, {
    "left" : "case '\\t' :",
    "right" : "case '\\t' :",
    "info" : "SwitchCase[30354-30365]:SwitchCase[30365-30376]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[30382-30394]:ReturnStatement[30393-30405]"
  }, {
    "left" : "default :",
    "right" : "default :",
    "info" : "SwitchCase[30407-30416]:SwitchCase[30418-30427]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[30433-30446]:ReturnStatement[30444-30457]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30837-30843]:Modifier[30848-30854]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[30844-30850]:ArrayType[30855-30861]"
  }, {
    "left" : "discardNonBase64",
    "right" : "discardNonBase64",
    "info" : "SimpleName[30851-30867]:SimpleName[30862-30878]"
  }, {
    "left" : "byte[] data",
    "right" : "byte[] data",
    "info" : "SingleVariableDeclaration[30868-30879]:SingleVariableDeclaration[30879-30890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30881-31280]:Block[30892-31291]"
  }, {
    "left" : "byte groomedData[] = new byte[data.length];",
    "right" : "byte groomedData[] = new byte[data.length];",
    "info" : "VariableDeclarationStatement[30891-30934]:VariableDeclarationStatement[30902-30945]"
  }, {
    "left" : "int bytesCopied = 0;",
    "right" : "int bytesCopied = 0;",
    "info" : "VariableDeclarationStatement[30943-30963]:VariableDeclarationStatement[30954-30974]"
  }, {
    "left" : "for (int i = 0; i < data.length; i++)",
    "right" : "for (int i = 0; i < data.length; i++)",
    "info" : "ForStatement[30972-31126]:ForStatement[30983-31137]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31010-31126]:Block[31021-31137]"
  }, {
    "left" : "if (isBase64(data[i]))",
    "right" : "if (isBase64(data[i]))",
    "info" : "IfStatement[31024-31116]:IfStatement[31035-31127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31047-31116]:Block[31058-31127]"
  }, {
    "left" : "groomedData[bytesCopied++] = data[i];",
    "right" : "groomedData[bytesCopied++] = data[i];",
    "info" : "ExpressionStatement[31065-31102]:ExpressionStatement[31076-31113]"
  }, {
    "left" : "byte packedData[] = new byte[bytesCopied];",
    "right" : "byte packedData[] = new byte[bytesCopied];",
    "info" : "VariableDeclarationStatement[31135-31177]:VariableDeclarationStatement[31146-31188]"
  }, {
    "left" : "System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);",
    "right" : "System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);",
    "info" : "ExpressionStatement[31186-31247]:ExpressionStatement[31197-31258]"
  }, {
    "left" : "return packedData;",
    "right" : "return packedData;",
    "info" : "ReturnStatement[31256-31274]:ReturnStatement[31267-31285]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31861-31867]:Modifier[31872-31878]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[31868-31874]:SimpleType[31879-31885]"
  }, {
    "left" : "encode",
    "right" : "encode",
    "info" : "SimpleName[31875-31881]:SimpleName[31886-31892]"
  }, {
    "left" : "Object pObject",
    "right" : "Object pObject",
    "info" : "SingleVariableDeclaration[31882-31896]:SingleVariableDeclaration[31893-31907]"
  }, {
    "left" : "EncoderException",
    "right" : "EncoderException",
    "info" : "SimpleType[31905-31921]:SimpleType[31916-31932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31922-32119]:Block[31933-32130]"
  }, {
    "left" : "if (!(pObject instanceof byte[]))",
    "right" : "if (!(pObject instanceof byte[]))",
    "info" : "IfStatement[31932-32072]:IfStatement[31943-32083]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31966-32072]:Block[31977-32083]"
  }, {
    "left" : "throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");",
    "right" : "throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");",
    "info" : "ThrowStatement[31980-32062]:ThrowStatement[31991-32073]"
  }, {
    "left" : "return encode((byte[]) pObject);",
    "right" : "return encode((byte[]) pObject);",
    "info" : "ReturnStatement[32081-32113]:ReturnStatement[32092-32124]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32398-32404]:Modifier[32409-32415]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[32405-32411]:ArrayType[32416-32422]"
  }, {
    "left" : "encode",
    "right" : "encode",
    "info" : "SimpleName[32412-32418]:SimpleName[32423-32429]"
  }, {
    "left" : "byte[] pArray",
    "right" : "byte[] pArray",
    "info" : "SingleVariableDeclaration[32419-32432]:SingleVariableDeclaration[32430-32443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32434-32498]:Block[32445-32509]"
  }, {
    "left" : "return encodeBase64(pArray, false, isUrlSafe());",
    "right" : "return encodeBase64(pArray, false, isUrlSafe());",
    "info" : "ReturnStatement[32444-32492]:ReturnStatement[32455-32503]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32786-32792]:Modifier[32797-32803]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[32793-32799]:Modifier[32804-32810]"
  }, {
    "left" : "BigInteger",
    "right" : "BigInteger",
    "info" : "SimpleType[32800-32810]:SimpleType[32811-32821]"
  }, {
    "left" : "decodeInteger",
    "right" : "decodeInteger",
    "info" : "SimpleName[32811-32824]:SimpleName[32822-32835]"
  }, {
    "left" : "byte[] pArray",
    "right" : "byte[] pArray",
    "info" : "SingleVariableDeclaration[32825-32838]:SingleVariableDeclaration[32836-32849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32840-32903]:Block[32851-32914]"
  }, {
    "left" : "return new BigInteger(1, decodeBase64(pArray));",
    "right" : "return new BigInteger(1, decodeBase64(pArray));",
    "info" : "ReturnStatement[32850-32897]:ReturnStatement[32861-32908]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33193-33199]:Modifier[33204-33210]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[33200-33206]:Modifier[33211-33217]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[33207-33213]:ArrayType[33218-33224]"
  }, {
    "left" : "encodeInteger",
    "right" : "encodeInteger",
    "info" : "SimpleName[33214-33227]:SimpleName[33225-33238]"
  }, {
    "left" : "BigInteger bigInt",
    "right" : "BigInteger bigInt",
    "info" : "SingleVariableDeclaration[33228-33245]:SingleVariableDeclaration[33239-33256]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33247-33442]:Block[33258-33453]"
  }, {
    "left" : "if(bigInt == null)",
    "right" : "if(bigInt == null)",
    "info" : "IfStatement[33257-33376]:IfStatement[33268-33387]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33277-33376]:Block[33288-33387]"
  }, {
    "left" : "throw new NullPointerException(\"encodeInteger called with null parameter\");",
    "right" : "throw new NullPointerException(\"encodeInteger called with null parameter\");",
    "info" : "ThrowStatement[33291-33366]:ThrowStatement[33302-33377]"
  }, {
    "left" : "return encodeBase64(toIntegerBytes(bigInt), false);",
    "right" : "return encodeBase64(toIntegerBytes(bigInt), false);",
    "info" : "ReturnStatement[33385-33436]:ReturnStatement[33396-33447]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[33701-33707]:Modifier[33712-33718]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[33708-33714]:ArrayType[33719-33725]"
  }, {
    "left" : "toIntegerBytes",
    "right" : "toIntegerBytes",
    "info" : "SimpleName[33715-33729]:SimpleName[33726-33740]"
  }, {
    "left" : "BigInteger bigInt",
    "right" : "BigInteger bigInt",
    "info" : "SingleVariableDeclaration[33730-33747]:SingleVariableDeclaration[33741-33758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33749-34584]:Block[33760-34595]"
  }, {
    "left" : "int bitlen = bigInt.bitLength();",
    "right" : "int bitlen = bigInt.bitLength();",
    "info" : "VariableDeclarationStatement[33759-33791]:VariableDeclarationStatement[33770-33802]"
  }, {
    "left" : "bitlen = ((bitlen + 7) >> 3) << 3;",
    "right" : "bitlen = ((bitlen + 7) >> 3) << 3;",
    "info" : "ExpressionStatement[33824-33858]:ExpressionStatement[33835-33869]"
  }, {
    "left" : "byte[] bigBytes = bigInt.toByteArray();",
    "right" : "byte[] bigBytes = bigInt.toByteArray();",
    "info" : "VariableDeclarationStatement[33867-33906]:VariableDeclarationStatement[33878-33917]"
  }, {
    "left" : "if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8)))",
    "right" : "if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8)))",
    "info" : "IfStatement[33916-34056]:IfStatement[33927-34067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34016-34056]:Block[34027-34067]"
  }, {
    "left" : "return bigBytes;",
    "right" : "return bigBytes;",
    "info" : "ReturnStatement[34030-34046]:ReturnStatement[34041-34057]"
  }, {
    "left" : "int startSrc = 0;",
    "right" : "int startSrc = 0;",
    "info" : "VariableDeclarationStatement[34126-34143]:VariableDeclarationStatement[34137-34154]"
  }, {
    "left" : "int len = bigBytes.length;",
    "right" : "int len = bigBytes.length;",
    "info" : "VariableDeclarationStatement[34152-34178]:VariableDeclarationStatement[34163-34189]"
  }, {
    "left" : "if((bigInt.bitLength() % 8) == 0)",
    "right" : "if((bigInt.bitLength() % 8) == 0)",
    "info" : "IfStatement[34260-34350]:IfStatement[34271-34361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34294-34350]:Block[34305-34361]"
  }, {
    "left" : "startSrc = 1;",
    "right" : "startSrc = 1;",
    "info" : "ExpressionStatement[34308-34321]:ExpressionStatement[34319-34332]"
  }, {
    "left" : "len--;",
    "right" : "len--;",
    "info" : "ExpressionStatement[34334-34340]:ExpressionStatement[34345-34351]"
  }, {
    "left" : "int startDst = bitlen / 8 - len;",
    "right" : "int startDst = bitlen / 8 - len;",
    "info" : "VariableDeclarationStatement[34359-34391]:VariableDeclarationStatement[34370-34402]"
  }, {
    "left" : "byte[] resizedBytes = new byte[bitlen / 8];",
    "right" : "byte[] resizedBytes = new byte[bitlen / 8];",
    "info" : "VariableDeclarationStatement[34431-34474]:VariableDeclarationStatement[34442-34485]"
  }, {
    "left" : "System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);",
    "right" : "System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);",
    "info" : "ExpressionStatement[34483-34549]:ExpressionStatement[34494-34560]"
  }, {
    "left" : "return resizedBytes;",
    "right" : "return resizedBytes;",
    "info" : "ReturnStatement[34558-34578]:ReturnStatement[34569-34589]"
  } ]
}