{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Selector",
      "right" : "Selector",
      "info" : "TypeDeclaration[229-19537]:TypeDeclaration[229-20076]"
    }, {
      "left" : "private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};",
      "right" : "private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};",
      "info" : "FieldDeclaration[6016-6086]:FieldDeclaration[6016-6086]"
    }, {
      "left" : "private final Element root;",
      "right" : "private final Element root;",
      "info" : "FieldDeclaration[6091-6118]:FieldDeclaration[6091-6118]"
    }, {
      "left" : "private final LinkedHashSet<Element> elements;",
      "right" : "private final LinkedHashSet<Element> elements;",
      "info" : "FieldDeclaration[6123-6169]:FieldDeclaration[6123-6169]"
    }, {
      "left" : "private final String query;",
      "right" : "private final String query;",
      "info" : "FieldDeclaration[6213-6240]:FieldDeclaration[6213-6240]"
    }, {
      "left" : "private final TokenQueue tq;",
      "right" : "private final TokenQueue tq;",
      "info" : "FieldDeclaration[6245-6273]:FieldDeclaration[6245-6273]"
    }, {
      "left" : "private Selector(String query, Element root)",
      "right" : "private Selector(String query, Element root)",
      "info" : "MethodDeclaration[6279-6610]:MethodDeclaration[6279-6610]"
    }, {
      "left" : "public static Elements select(String query, Element root)",
      "right" : "public static Elements select(String query, Element root)",
      "info" : "MethodDeclaration[6616-6908]:MethodDeclaration[6616-6908]"
    }, {
      "left" : "public static Elements select(String query, Iterable<Element> roots)",
      "right" : "public static Elements select(String query, Iterable<Element> roots)",
      "info" : "MethodDeclaration[6914-7444]:MethodDeclaration[6914-7444]"
    }, {
      "left" : "private Elements select()",
      "right" : "private Elements select()",
      "info" : "MethodDeclaration[7450-8725]:MethodDeclaration[7450-8725]"
    }, {
      "left" : "private void combinator(char combinator)",
      "right" : "private void combinator(char combinator)",
      "info" : "MethodDeclaration[8735-9521]:MethodDeclaration[8735-9536]"
    }, {
      "left" : "private Elements findElements()",
      "right" : "private Elements findElements()",
      "info" : "MethodDeclaration[9532-10791]:MethodDeclaration[10071-11330]"
    }, {
      "left" : "private void addElements(Collection<Element> add)",
      "right" : "private void addElements(Collection<Element> add)",
      "info" : "MethodDeclaration[10801-10888]:MethodDeclaration[11340-11427]"
    }, {
      "left" : "private void intersectElements(Collection<Element> intersect)",
      "right" : "private void intersectElements(Collection<Element> intersect)",
      "info" : "MethodDeclaration[10898-11006]:MethodDeclaration[11437-11545]"
    }, {
      "left" : "private Elements byId()",
      "right" : "private Elements byId()",
      "info" : "MethodDeclaration[11012-11287]:MethodDeclaration[11551-11826]"
    }, {
      "left" : "private Elements byClass()",
      "right" : "private Elements byClass()",
      "info" : "MethodDeclaration[11293-11471]:MethodDeclaration[11832-12010]"
    }, {
      "left" : "private Elements byTag()",
      "right" : "private Elements byTag()",
      "info" : "MethodDeclaration[11477-11829]:MethodDeclaration[12016-12368]"
    }, {
      "left" : "private Elements byAttribute()",
      "right" : "private Elements byAttribute()",
      "info" : "MethodDeclaration[11835-13266]:MethodDeclaration[12374-13805]"
    }, {
      "left" : "private Elements allElements()",
      "right" : "private Elements allElements()",
      "info" : "MethodDeclaration[13272-13348]:MethodDeclaration[13811-13887]"
    }, {
      "left" : "private Elements indexLessThan()",
      "right" : "private Elements indexLessThan()",
      "info" : "MethodDeclaration[13396-13500]:MethodDeclaration[13935-14039]"
    }, {
      "left" : "private Elements indexGreaterThan()",
      "right" : "private Elements indexGreaterThan()",
      "info" : "MethodDeclaration[13510-13620]:MethodDeclaration[14049-14159]"
    }, {
      "left" : "private Elements indexEquals()",
      "right" : "private Elements indexEquals()",
      "info" : "MethodDeclaration[13630-13730]:MethodDeclaration[14169-14269]"
    }, {
      "left" : "private int consumeIndex()",
      "right" : "private int consumeIndex()",
      "info" : "MethodDeclaration[13736-13939]:MethodDeclaration[14275-14478]"
    }, {
      "left" : "private Elements has()",
      "right" : "private Elements has()",
      "info" : "MethodDeclaration[13977-14250]:MethodDeclaration[14516-14789]"
    }, {
      "left" : "private Elements contains(boolean own)",
      "right" : "private Elements contains(boolean own)",
      "info" : "MethodDeclaration[14318-14700]:MethodDeclaration[14857-15239]"
    }, {
      "left" : "private Elements matches(boolean own)",
      "right" : "private Elements matches(boolean own)",
      "info" : "MethodDeclaration[14752-15135]:MethodDeclaration[15291-15674]"
    }, {
      "left" : "private Elements not()",
      "right" : "private Elements not()",
      "info" : "MethodDeclaration[15163-15432]:MethodDeclaration[15702-15971]"
    }, {
      "left" : "private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates)",
      "right" : "private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates)",
      "info" : "MethodDeclaration[15470-15916]:MethodDeclaration[16009-16455]"
    }, {
      "left" : "private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates)",
      "right" : "private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates)",
      "info" : "MethodDeclaration[16104-16514]:MethodDeclaration[16643-17053]"
    }, {
      "left" : "private static Elements filterForParentsOfDescendants(Collection<Element> parents, Collection<Element> children)",
      "right" : "private static Elements filterForParentsOfDescendants(Collection<Element> parents, Collection<Element> children)",
      "info" : "MethodDeclaration[16597-17010]:MethodDeclaration[17136-17549]"
    }, {
      "left" : "private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates)",
      "right" : "private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates)",
      "info" : "MethodDeclaration[17045-17653]:MethodDeclaration[17584-18192]"
    }, {
      "left" : "private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates)",
      "right" : "private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates)",
      "info" : "MethodDeclaration[17690-18296]:MethodDeclaration[18229-18835]"
    }, {
      "left" : "private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates)",
      "right" : "private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates)",
      "info" : "MethodDeclaration[18360-18774]:MethodDeclaration[18899-19313]"
    }, {
      "left" : "static Elements filterOut(Collection<Element> elements, Collection<Element> outs)",
      "right" : "static Elements filterOut(Collection<Element> elements, Collection<Element> outs)",
      "info" : "MethodDeclaration[18861-19322]:MethodDeclaration[19400-19861]"
    }, {
      "left" : "SelectorParseException",
      "right" : "SelectorParseException",
      "info" : "TypeDeclaration[19328-19535]:TypeDeclaration[19867-20074]"
    }, {
      "left" : "public SelectorParseException(String msg, Object... params)",
      "right" : "public SelectorParseException(String msg, Object... params)",
      "info" : "MethodDeclaration[19411-19529]:MethodDeclaration[19950-20068]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5988-5994]:Modifier[5988-5994]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5995-6000]:TYPE_DECLARATION_KIND[5995-6000]"
    }, {
      "left" : "Selector",
      "right" : "Selector",
      "info" : "SimpleName[6001-6009]:SimpleName[6001-6009]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6279-6286]:Modifier[6279-6286]"
    }, {
      "left" : "Selector",
      "right" : "Selector",
      "info" : "SimpleName[6287-6295]:SimpleName[6287-6295]"
    }, {
      "left" : "String query",
      "right" : "String query",
      "info" : "SingleVariableDeclaration[6296-6308]:SingleVariableDeclaration[6296-6308]"
    }, {
      "left" : "Element root",
      "right" : "Element root",
      "info" : "SingleVariableDeclaration[6310-6322]:SingleVariableDeclaration[6310-6322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6324-6610]:Block[6324-6610]"
    }, {
      "left" : "Validate.notNull(query);",
      "right" : "Validate.notNull(query);",
      "info" : "ExpressionStatement[6334-6358]:ExpressionStatement[6334-6358]"
    }, {
      "left" : "query = query.trim();",
      "right" : "query = query.trim();",
      "info" : "ExpressionStatement[6367-6388]:ExpressionStatement[6367-6388]"
    }, {
      "left" : "Validate.notEmpty(query);",
      "right" : "Validate.notEmpty(query);",
      "info" : "ExpressionStatement[6397-6422]:ExpressionStatement[6397-6422]"
    }, {
      "left" : "Validate.notNull(root);",
      "right" : "Validate.notNull(root);",
      "info" : "ExpressionStatement[6431-6454]:ExpressionStatement[6431-6454]"
    }, {
      "left" : "this.elements = new LinkedHashSet<Element>();",
      "right" : "this.elements = new LinkedHashSet<Element>();",
      "info" : "ExpressionStatement[6464-6509]:ExpressionStatement[6464-6509]"
    }, {
      "left" : "this.query = query;",
      "right" : "this.query = query;",
      "info" : "ExpressionStatement[6518-6537]:ExpressionStatement[6518-6537]"
    }, {
      "left" : "this.root = root;",
      "right" : "this.root = root;",
      "info" : "ExpressionStatement[6546-6563]:ExpressionStatement[6546-6563]"
    }, {
      "left" : "this.tq = new TokenQueue(query);",
      "right" : "this.tq = new TokenQueue(query);",
      "info" : "ExpressionStatement[6572-6604]:ExpressionStatement[6572-6604]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6792-6798]:Modifier[6792-6798]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6799-6805]:Modifier[6799-6805]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[6806-6814]:SimpleType[6806-6814]"
    }, {
      "left" : "select",
      "right" : "select",
      "info" : "SimpleName[6815-6821]:SimpleName[6815-6821]"
    }, {
      "left" : "String query",
      "right" : "String query",
      "info" : "SingleVariableDeclaration[6822-6834]:SingleVariableDeclaration[6822-6834]"
    }, {
      "left" : "Element root",
      "right" : "Element root",
      "info" : "SingleVariableDeclaration[6836-6848]:SingleVariableDeclaration[6836-6848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6850-6908]:Block[6850-6908]"
    }, {
      "left" : "return new Selector(query, root).select();",
      "right" : "return new Selector(query, root).select();",
      "info" : "ReturnStatement[6860-6902]:ReturnStatement[6860-6902]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7092-7098]:Modifier[7092-7098]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7099-7105]:Modifier[7099-7105]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[7106-7114]:SimpleType[7106-7114]"
    }, {
      "left" : "select",
      "right" : "select",
      "info" : "SimpleName[7115-7121]:SimpleName[7115-7121]"
    }, {
      "left" : "String query",
      "right" : "String query",
      "info" : "SingleVariableDeclaration[7122-7134]:SingleVariableDeclaration[7122-7134]"
    }, {
      "left" : "Iterable<Element> roots",
      "right" : "Iterable<Element> roots",
      "info" : "SingleVariableDeclaration[7136-7159]:SingleVariableDeclaration[7136-7159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7161-7444]:Block[7161-7444]"
    }, {
      "left" : "Validate.notEmpty(query);",
      "right" : "Validate.notEmpty(query);",
      "info" : "ExpressionStatement[7171-7196]:ExpressionStatement[7171-7196]"
    }, {
      "left" : "Validate.notNull(roots);",
      "right" : "Validate.notNull(roots);",
      "info" : "ExpressionStatement[7205-7229]:ExpressionStatement[7205-7229]"
    }, {
      "left" : "LinkedHashSet<Element> elements = new LinkedHashSet<Element>();",
      "right" : "LinkedHashSet<Element> elements = new LinkedHashSet<Element>();",
      "info" : "VariableDeclarationStatement[7238-7301]:VariableDeclarationStatement[7238-7301]"
    }, {
      "left" : "for (Element root : roots)",
      "right" : "for (Element root : roots)",
      "info" : "EnhancedForStatement[7311-7399]:EnhancedForStatement[7311-7399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7338-7399]:Block[7338-7399]"
    }, {
      "left" : "elements.addAll(select(query, root));",
      "right" : "elements.addAll(select(query, root));",
      "info" : "ExpressionStatement[7352-7389]:ExpressionStatement[7352-7389]"
    }, {
      "left" : "return new Elements(elements);",
      "right" : "return new Elements(elements);",
      "info" : "ReturnStatement[7408-7438]:ReturnStatement[7408-7438]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7450-7457]:Modifier[7450-7457]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[7458-7466]:SimpleType[7458-7466]"
    }, {
      "left" : "select",
      "right" : "select",
      "info" : "SimpleName[7467-7473]:SimpleName[7467-7473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7476-8725]:Block[7476-8725]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[7486-7509]:ExpressionStatement[7486-7509]"
    }, {
      "left" : "if (tq.matchesAny(combinators))",
      "right" : "if (tq.matchesAny(combinators))",
      "info" : "IfStatement[7527-7887]:IfStatement[7527-7887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7559-7693]:Block[7559-7693]"
    }, {
      "left" : "elements.add(root);",
      "right" : "elements.add(root);",
      "info" : "ExpressionStatement[7626-7645]:ExpressionStatement[7626-7645]"
    }, {
      "left" : "combinator(tq.consume());",
      "right" : "combinator(tq.consume());",
      "info" : "ExpressionStatement[7658-7683]:ExpressionStatement[7658-7683]"
    }, {
      "left" : "if (tq.matches(\":has(\"))",
      "right" : "if (tq.matches(\":has(\"))",
      "info" : "IfStatement[7699-7887]:IfStatement[7699-7887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7724-7787]:Block[7724-7787]"
    }, {
      "left" : "elements.addAll(root.getAllElements());",
      "right" : "elements.addAll(root.getAllElements());",
      "info" : "ExpressionStatement[7738-7777]:ExpressionStatement[7738-7777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7793-7887]:Block[7793-7887]"
    }, {
      "left" : "addElements(findElements());",
      "right" : "addElements(findElements());",
      "info" : "ExpressionStatement[7807-7835]:ExpressionStatement[7807-7835]"
    }, {
      "left" : "while (!tq.isEmpty())",
      "right" : "while (!tq.isEmpty())",
      "info" : "WhileStatement[7924-8680]:WhileStatement[7924-8680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7946-8680]:Block[7946-8680]"
    }, {
      "left" : "boolean seenWhite = tq.consumeWhitespace();",
      "right" : "boolean seenWhite = tq.consumeWhitespace();",
      "info" : "VariableDeclarationStatement[7996-8039]:VariableDeclarationStatement[7996-8039]"
    }, {
      "left" : "if (tq.matchChomp(\",\"))",
      "right" : "if (tq.matchChomp(\",\"))",
      "info" : "IfStatement[8065-8670]:IfStatement[8065-8670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8089-8290]:Block[8089-8290]"
    }, {
      "left" : "while (!tq.isEmpty())",
      "right" : "while (!tq.isEmpty())",
      "info" : "WhileStatement[8119-8276]:WhileStatement[8119-8276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8141-8276]:Block[8141-8276]"
    }, {
      "left" : "String subQuery = tq.chompTo(\",\");",
      "right" : "String subQuery = tq.chompTo(\",\");",
      "info" : "VariableDeclarationStatement[8163-8197]:VariableDeclarationStatement[8163-8197]"
    }, {
      "left" : "elements.addAll(select(subQuery, root));",
      "right" : "elements.addAll(select(subQuery, root));",
      "info" : "ExpressionStatement[8218-8258]:ExpressionStatement[8218-8258]"
    }, {
      "left" : "if (tq.matchesAny(combinators))",
      "right" : "if (tq.matchesAny(combinators))",
      "info" : "IfStatement[8296-8670]:IfStatement[8296-8670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8328-8385]:Block[8328-8385]"
    }, {
      "left" : "combinator(tq.consume());",
      "right" : "combinator(tq.consume());",
      "info" : "ExpressionStatement[8346-8371]:ExpressionStatement[8346-8371]"
    }, {
      "left" : "if (seenWhite)",
      "right" : "if (seenWhite)",
      "info" : "IfStatement[8391-8670]:IfStatement[8391-8670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8406-8454]:Block[8406-8454]"
    }, {
      "left" : "combinator(' ');",
      "right" : "combinator(' ');",
      "info" : "ExpressionStatement[8424-8440]:ExpressionStatement[8424-8440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8460-8670]:Block[8460-8670]"
    }, {
      "left" : "Elements candidates = findElements();",
      "right" : "Elements candidates = findElements();",
      "info" : "VariableDeclarationStatement[8513-8550]:VariableDeclarationStatement[8513-8550]"
    }, {
      "left" : "intersectElements(filterForSelf(elements, candidates));",
      "right" : "intersectElements(filterForSelf(elements, candidates));",
      "info" : "ExpressionStatement[8601-8656]:ExpressionStatement[8601-8656]"
    }, {
      "left" : "return new Elements(elements);",
      "right" : "return new Elements(elements);",
      "info" : "ReturnStatement[8689-8719]:ReturnStatement[8689-8719]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8735-8742]:Modifier[8735-8742]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8743-8747]:PrimitiveType[8743-8747]"
    }, {
      "left" : "combinator",
      "right" : "combinator",
      "info" : "SimpleName[8748-8758]:SimpleName[8748-8758]"
    }, {
      "left" : "char combinator",
      "right" : "char combinator",
      "info" : "SingleVariableDeclaration[8759-8774]:SingleVariableDeclaration[8759-8774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8776-9521]:Block[8776-9536]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[8786-8809]:ExpressionStatement[8786-8809]"
    }, {
      "left" : "String subQuery = tq.consumeToAny(combinators);",
      "right" : "String subQuery = consumeSubQuery();",
      "info" : "VariableDeclarationStatement[8818-8865]:VariableDeclarationStatement[8818-8854]"
    }, {
      "left" : "Elements output;",
      "right" : "Elements output;",
      "info" : "VariableDeclarationStatement[8883-8899]:VariableDeclarationStatement[8898-8914]"
    }, {
      "left" : "if (combinator == '>')",
      "right" : "if (combinator == '>')",
      "info" : "IfStatement[8908-9455]:IfStatement[8923-9470]"
    }, {
      "left" : "output = filterForChildren(elements, select(subQuery, elements));",
      "right" : "output = filterForChildren(elements, select(subQuery, elements));",
      "info" : "ExpressionStatement[8943-9008]:ExpressionStatement[8958-9023]"
    }, {
      "left" : "if (combinator == ' ')",
      "right" : "if (combinator == ' ')",
      "info" : "IfStatement[9022-9455]:IfStatement[9037-9470]"
    }, {
      "left" : "output = filterForDescendants(elements, select(subQuery, elements));",
      "right" : "output = filterForDescendants(elements, select(subQuery, elements));",
      "info" : "ExpressionStatement[9057-9125]:ExpressionStatement[9072-9140]"
    }, {
      "left" : "if (combinator == '+')",
      "right" : "if (combinator == '+')",
      "info" : "IfStatement[9139-9455]:IfStatement[9154-9470]"
    }, {
      "left" : "output = filterForAdjacentSiblings(elements, select(subQuery, root));",
      "right" : "output = filterForAdjacentSiblings(elements, select(subQuery, root));",
      "info" : "ExpressionStatement[9174-9243]:ExpressionStatement[9189-9258]"
    }, {
      "left" : "if (combinator == '~')",
      "right" : "if (combinator == '~')",
      "info" : "IfStatement[9257-9455]:IfStatement[9272-9470]"
    }, {
      "left" : "output = filterForGeneralSiblings(elements, select(subQuery, root));",
      "right" : "output = filterForGeneralSiblings(elements, select(subQuery, root));",
      "info" : "ExpressionStatement[9292-9360]:ExpressionStatement[9307-9375]"
    }, {
      "left" : "throw new IllegalStateException(\"Unknown combinator: \" + combinator);",
      "right" : "throw new IllegalStateException(\"Unknown combinator: \" + combinator);",
      "info" : "ThrowStatement[9386-9455]:ThrowStatement[9401-9470]"
    }, {
      "left" : "elements.clear();",
      "right" : "elements.clear();",
      "info" : "ExpressionStatement[9473-9490]:ExpressionStatement[9488-9505]"
    }, {
      "left" : "elements.addAll(output);",
      "right" : "elements.addAll(output);",
      "info" : "ExpressionStatement[9491-9515]:ExpressionStatement[9506-9530]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9532-9539]:Modifier[10071-10078]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[9540-9548]:SimpleType[10079-10087]"
    }, {
      "left" : "findElements",
      "right" : "findElements",
      "info" : "SimpleName[9549-9561]:SimpleName[10088-10100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9564-10791]:Block[10103-11330]"
    }, {
      "left" : "if (tq.matchChomp(\"#\"))",
      "right" : "if (tq.matchChomp(\"#\"))",
      "info" : "IfStatement[9574-10785]:IfStatement[10113-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9598-9636]:Block[10137-10175]"
    }, {
      "left" : "return byId();",
      "right" : "return byId();",
      "info" : "ReturnStatement[9612-9626]:ReturnStatement[10151-10165]"
    }, {
      "left" : "if (tq.matchChomp(\".\"))",
      "right" : "if (tq.matchChomp(\".\"))",
      "info" : "IfStatement[9642-10785]:IfStatement[10181-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9666-9707]:Block[10205-10246]"
    }, {
      "left" : "return byClass();",
      "right" : "return byClass();",
      "info" : "ReturnStatement[9680-9697]:ReturnStatement[10219-10236]"
    }, {
      "left" : "if (tq.matchesWord())",
      "right" : "if (tq.matchesWord())",
      "info" : "IfStatement[9713-10785]:IfStatement[10252-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9735-9774]:Block[10274-10313]"
    }, {
      "left" : "return byTag();",
      "right" : "return byTag();",
      "info" : "ReturnStatement[9749-9764]:ReturnStatement[10288-10303]"
    }, {
      "left" : "if (tq.matches(\"[\"))",
      "right" : "if (tq.matches(\"[\"))",
      "info" : "IfStatement[9780-10785]:IfStatement[10319-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9801-9846]:Block[10340-10385]"
    }, {
      "left" : "return byAttribute();",
      "right" : "return byAttribute();",
      "info" : "ReturnStatement[9815-9836]:ReturnStatement[10354-10375]"
    }, {
      "left" : "if (tq.matchChomp(\"*\"))",
      "right" : "if (tq.matchChomp(\"*\"))",
      "info" : "IfStatement[9852-10785]:IfStatement[10391-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9876-9921]:Block[10415-10460]"
    }, {
      "left" : "return allElements();",
      "right" : "return allElements();",
      "info" : "ReturnStatement[9890-9911]:ReturnStatement[10429-10450]"
    }, {
      "left" : "if (tq.matchChomp(\":lt(\"))",
      "right" : "if (tq.matchChomp(\":lt(\"))",
      "info" : "IfStatement[9927-10785]:IfStatement[10466-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9954-10001]:Block[10493-10540]"
    }, {
      "left" : "return indexLessThan();",
      "right" : "return indexLessThan();",
      "info" : "ReturnStatement[9968-9991]:ReturnStatement[10507-10530]"
    }, {
      "left" : "if (tq.matchChomp(\":gt(\"))",
      "right" : "if (tq.matchChomp(\":gt(\"))",
      "info" : "IfStatement[10007-10785]:IfStatement[10546-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10034-10084]:Block[10573-10623]"
    }, {
      "left" : "return indexGreaterThan();",
      "right" : "return indexGreaterThan();",
      "info" : "ReturnStatement[10048-10074]:ReturnStatement[10587-10613]"
    }, {
      "left" : "if (tq.matchChomp(\":eq(\"))",
      "right" : "if (tq.matchChomp(\":eq(\"))",
      "info" : "IfStatement[10090-10785]:IfStatement[10629-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10117-10162]:Block[10656-10701]"
    }, {
      "left" : "return indexEquals();",
      "right" : "return indexEquals();",
      "info" : "ReturnStatement[10131-10152]:ReturnStatement[10670-10691]"
    }, {
      "left" : "if (tq.matches(\":has(\"))",
      "right" : "if (tq.matches(\":has(\"))",
      "info" : "IfStatement[10168-10785]:IfStatement[10707-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10193-10230]:Block[10732-10769]"
    }, {
      "left" : "return has();",
      "right" : "return has();",
      "info" : "ReturnStatement[10207-10220]:ReturnStatement[10746-10759]"
    }, {
      "left" : "if (tq.matches(\":contains(\"))",
      "right" : "if (tq.matches(\":contains(\"))",
      "info" : "IfStatement[10236-10785]:IfStatement[10775-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10266-10313]:Block[10805-10852]"
    }, {
      "left" : "return contains(false);",
      "right" : "return contains(false);",
      "info" : "ReturnStatement[10280-10303]:ReturnStatement[10819-10842]"
    }, {
      "left" : "if (tq.matches(\":containsOwn(\"))",
      "right" : "if (tq.matches(\":containsOwn(\"))",
      "info" : "IfStatement[10319-10785]:IfStatement[10858-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10352-10398]:Block[10891-10937]"
    }, {
      "left" : "return contains(true);",
      "right" : "return contains(true);",
      "info" : "ReturnStatement[10366-10388]:ReturnStatement[10905-10927]"
    }, {
      "left" : "if (tq.matches(\":matches(\"))",
      "right" : "if (tq.matches(\":matches(\"))",
      "info" : "IfStatement[10404-10785]:IfStatement[10943-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10433-10479]:Block[10972-11018]"
    }, {
      "left" : "return matches(false);",
      "right" : "return matches(false);",
      "info" : "ReturnStatement[10447-10469]:ReturnStatement[10986-11008]"
    }, {
      "left" : "if (tq.matches(\":matchesOwn(\"))",
      "right" : "if (tq.matches(\":matchesOwn(\"))",
      "info" : "IfStatement[10485-10785]:IfStatement[11024-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10517-10562]:Block[11056-11101]"
    }, {
      "left" : "return matches(true);",
      "right" : "return matches(true);",
      "info" : "ReturnStatement[10531-10552]:ReturnStatement[11070-11091]"
    }, {
      "left" : "if (tq.matches(\":not(\"))",
      "right" : "if (tq.matches(\":not(\"))",
      "info" : "IfStatement[10568-10785]:IfStatement[11107-11324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10593-10630]:Block[11132-11169]"
    }, {
      "left" : "return not();",
      "right" : "return not();",
      "info" : "ReturnStatement[10607-10620]:ReturnStatement[11146-11159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10636-10785]:Block[11175-11324]"
    }, {
      "left" : "throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());",
      "right" : "throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());",
      "info" : "ThrowStatement[10663-10775]:ThrowStatement[11202-11314]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10801-10808]:Modifier[11340-11347]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10809-10813]:PrimitiveType[11348-11352]"
    }, {
      "left" : "addElements",
      "right" : "addElements",
      "info" : "SimpleName[10814-10825]:SimpleName[11353-11364]"
    }, {
      "left" : "Collection<Element> add",
      "right" : "Collection<Element> add",
      "info" : "SingleVariableDeclaration[10826-10849]:SingleVariableDeclaration[11365-11388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10851-10888]:Block[11390-11427]"
    }, {
      "left" : "elements.addAll(add);",
      "right" : "elements.addAll(add);",
      "info" : "ExpressionStatement[10861-10882]:ExpressionStatement[11400-11421]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10898-10905]:Modifier[11437-11444]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10906-10910]:PrimitiveType[11445-11449]"
    }, {
      "left" : "intersectElements",
      "right" : "intersectElements",
      "info" : "SimpleName[10911-10928]:SimpleName[11450-11467]"
    }, {
      "left" : "Collection<Element> intersect",
      "right" : "Collection<Element> intersect",
      "info" : "SingleVariableDeclaration[10929-10958]:SingleVariableDeclaration[11468-11497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10960-11006]:Block[11499-11545]"
    }, {
      "left" : "elements.retainAll(intersect);",
      "right" : "elements.retainAll(intersect);",
      "info" : "ExpressionStatement[10970-11000]:ExpressionStatement[11509-11539]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11012-11019]:Modifier[11551-11558]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[11020-11028]:SimpleType[11559-11567]"
    }, {
      "left" : "byId",
      "right" : "byId",
      "info" : "SimpleName[11029-11033]:SimpleName[11568-11572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11036-11287]:Block[11575-11826]"
    }, {
      "left" : "String id = tq.consumeCssIdentifier();",
      "right" : "String id = tq.consumeCssIdentifier();",
      "info" : "VariableDeclarationStatement[11046-11084]:VariableDeclarationStatement[11585-11623]"
    }, {
      "left" : "Validate.notEmpty(id);",
      "right" : "Validate.notEmpty(id);",
      "info" : "ExpressionStatement[11093-11115]:ExpressionStatement[11632-11654]"
    }, {
      "left" : "Element found = root.getElementById(id);",
      "right" : "Element found = root.getElementById(id);",
      "info" : "VariableDeclarationStatement[11125-11165]:VariableDeclarationStatement[11664-11704]"
    }, {
      "left" : "Elements byId = new Elements();",
      "right" : "Elements byId = new Elements();",
      "info" : "VariableDeclarationStatement[11174-11205]:VariableDeclarationStatement[11713-11744]"
    }, {
      "left" : "if(found != null)",
      "right" : "if(found != null)",
      "info" : "IfStatement[11214-11260]:IfStatement[11753-11799]"
    }, {
      "left" : "byId.add(found);",
      "right" : "byId.add(found);",
      "info" : "ExpressionStatement[11244-11260]:ExpressionStatement[11783-11799]"
    }, {
      "left" : "return byId;",
      "right" : "return byId;",
      "info" : "ReturnStatement[11269-11281]:ReturnStatement[11808-11820]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11293-11300]:Modifier[11832-11839]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[11301-11309]:SimpleType[11840-11848]"
    }, {
      "left" : "byClass",
      "right" : "byClass",
      "info" : "SimpleName[11310-11317]:SimpleName[11849-11856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11320-11471]:Block[11859-12010]"
    }, {
      "left" : "String className = tq.consumeCssIdentifier();",
      "right" : "String className = tq.consumeCssIdentifier();",
      "info" : "VariableDeclarationStatement[11330-11375]:VariableDeclarationStatement[11869-11914]"
    }, {
      "left" : "Validate.notEmpty(className);",
      "right" : "Validate.notEmpty(className);",
      "info" : "ExpressionStatement[11384-11413]:ExpressionStatement[11923-11952]"
    }, {
      "left" : "return root.getElementsByClass(className);",
      "right" : "return root.getElementsByClass(className);",
      "info" : "ReturnStatement[11423-11465]:ReturnStatement[11962-12004]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11477-11484]:Modifier[12016-12023]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[11485-11493]:SimpleType[12024-12032]"
    }, {
      "left" : "byTag",
      "right" : "byTag",
      "info" : "SimpleName[11494-11499]:SimpleName[12033-12038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11502-11829]:Block[12041-12368]"
    }, {
      "left" : "String tagName = tq.consumeElementSelector();",
      "right" : "String tagName = tq.consumeElementSelector();",
      "info" : "VariableDeclarationStatement[11512-11557]:VariableDeclarationStatement[12051-12096]"
    }, {
      "left" : "Validate.notEmpty(tagName);",
      "right" : "Validate.notEmpty(tagName);",
      "info" : "ExpressionStatement[11566-11593]:ExpressionStatement[12105-12132]"
    }, {
      "left" : "if (tagName.contains(\"|\"))",
      "right" : "if (tagName.contains(\"|\"))",
      "info" : "IfStatement[11701-11776]:IfStatement[12240-12315]"
    }, {
      "left" : "tagName = tagName.replace(\"|\", \":\");",
      "right" : "tagName = tagName.replace(\"|\", \":\");",
      "info" : "ExpressionStatement[11740-11776]:ExpressionStatement[12279-12315]"
    }, {
      "left" : "return root.getElementsByTag(tagName);",
      "right" : "return root.getElementsByTag(tagName);",
      "info" : "ReturnStatement[11785-11823]:ReturnStatement[12324-12362]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11835-11842]:Modifier[12374-12381]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[11843-11851]:SimpleType[12382-12390]"
    }, {
      "left" : "byAttribute",
      "right" : "byAttribute",
      "info" : "SimpleName[11852-11863]:SimpleName[12391-12402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11866-13266]:Block[12405-13805]"
    }, {
      "left" : "TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']'));",
      "right" : "TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']'));",
      "info" : "VariableDeclarationStatement[11876-11935]:VariableDeclarationStatement[12415-12474]"
    }, {
      "left" : "String key = cq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\");",
      "right" : "String key = cq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\");",
      "info" : "VariableDeclarationStatement[11961-12025]:VariableDeclarationStatement[12500-12564]"
    }, {
      "left" : "Validate.notEmpty(key);",
      "right" : "Validate.notEmpty(key);",
      "info" : "ExpressionStatement[12083-12106]:ExpressionStatement[12622-12645]"
    }, {
      "left" : "cq.consumeWhitespace();",
      "right" : "cq.consumeWhitespace();",
      "info" : "ExpressionStatement[12115-12138]:ExpressionStatement[12654-12677]"
    }, {
      "left" : "if (cq.isEmpty())",
      "right" : "if (cq.isEmpty())",
      "info" : "IfStatement[12148-13260]:IfStatement[12687-13799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12166-12308]:Block[12705-12847]"
    }, {
      "left" : "return key.startsWith(\"^\") ? root.getElementsByAttributeStarting(key.substring(1)) : root.getElementsByAttribute(key);",
      "right" : "return key.startsWith(\"^\") ? root.getElementsByAttributeStarting(key.substring(1)) : root.getElementsByAttribute(key);",
      "info" : "ReturnStatement[12180-12298]:ReturnStatement[12719-12837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12314-13260]:Block[12853-13799]"
    }, {
      "left" : "if (cq.matchChomp(\"=\"))",
      "right" : "if (cq.matchChomp(\"=\"))",
      "info" : "IfStatement[12328-13250]:IfStatement[12867-13789]"
    }, {
      "left" : "return root.getElementsByAttributeValue(key, cq.remainder());",
      "right" : "return root.getElementsByAttributeValue(key, cq.remainder());",
      "info" : "ReturnStatement[12368-12429]:ReturnStatement[12907-12968]"
    }, {
      "left" : "if (cq.matchChomp(\"!=\"))",
      "right" : "if (cq.matchChomp(\"!=\"))",
      "info" : "IfStatement[12448-13250]:IfStatement[12987-13789]"
    }, {
      "left" : "return root.getElementsByAttributeValueNot(key, cq.remainder());",
      "right" : "return root.getElementsByAttributeValueNot(key, cq.remainder());",
      "info" : "ReturnStatement[12489-12553]:ReturnStatement[13028-13092]"
    }, {
      "left" : "if (cq.matchChomp(\"^=\"))",
      "right" : "if (cq.matchChomp(\"^=\"))",
      "info" : "IfStatement[12572-13250]:IfStatement[13111-13789]"
    }, {
      "left" : "return root.getElementsByAttributeValueStarting(key, cq.remainder());",
      "right" : "return root.getElementsByAttributeValueStarting(key, cq.remainder());",
      "info" : "ReturnStatement[12613-12682]:ReturnStatement[13152-13221]"
    }, {
      "left" : "if (cq.matchChomp(\"$=\"))",
      "right" : "if (cq.matchChomp(\"$=\"))",
      "info" : "IfStatement[12701-13250]:IfStatement[13240-13789]"
    }, {
      "left" : "return root.getElementsByAttributeValueEnding(key, cq.remainder());",
      "right" : "return root.getElementsByAttributeValueEnding(key, cq.remainder());",
      "info" : "ReturnStatement[12742-12809]:ReturnStatement[13281-13348]"
    }, {
      "left" : "if (cq.matchChomp(\"*=\"))",
      "right" : "if (cq.matchChomp(\"*=\"))",
      "info" : "IfStatement[12828-13250]:IfStatement[13367-13789]"
    }, {
      "left" : "return root.getElementsByAttributeValueContaining(key, cq.remainder());",
      "right" : "return root.getElementsByAttributeValueContaining(key, cq.remainder());",
      "info" : "ReturnStatement[12869-12940]:ReturnStatement[13408-13479]"
    }, {
      "left" : "if (cq.matchChomp(\"~=\"))",
      "right" : "if (cq.matchChomp(\"~=\"))",
      "info" : "IfStatement[12971-13250]:IfStatement[13510-13789]"
    }, {
      "left" : "return root.getElementsByAttributeValueMatching(key, cq.remainder());",
      "right" : "return root.getElementsByAttributeValueMatching(key, cq.remainder());",
      "info" : "ReturnStatement[13012-13081]:ReturnStatement[13551-13620]"
    }, {
      "left" : "throw new SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder());",
      "right" : "throw new SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder());",
      "info" : "ThrowStatement[13128-13250]:ThrowStatement[13667-13789]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13272-13279]:Modifier[13811-13818]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[13280-13288]:SimpleType[13819-13827]"
    }, {
      "left" : "allElements",
      "right" : "allElements",
      "info" : "SimpleName[13289-13300]:SimpleName[13828-13839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13303-13348]:Block[13842-13887]"
    }, {
      "left" : "return root.getAllElements();",
      "right" : "return root.getAllElements();",
      "info" : "ReturnStatement[13313-13342]:ReturnStatement[13852-13881]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13396-13403]:Modifier[13935-13942]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[13404-13412]:SimpleType[13943-13951]"
    }, {
      "left" : "indexLessThan",
      "right" : "indexLessThan",
      "info" : "SimpleName[13413-13426]:SimpleName[13952-13965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13429-13500]:Block[13968-14039]"
    }, {
      "left" : "return root.getElementsByIndexLessThan(consumeIndex());",
      "right" : "return root.getElementsByIndexLessThan(consumeIndex());",
      "info" : "ReturnStatement[13439-13494]:ReturnStatement[13978-14033]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13510-13517]:Modifier[14049-14056]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[13518-13526]:SimpleType[14057-14065]"
    }, {
      "left" : "indexGreaterThan",
      "right" : "indexGreaterThan",
      "info" : "SimpleName[13527-13543]:SimpleName[14066-14082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13546-13620]:Block[14085-14159]"
    }, {
      "left" : "return root.getElementsByIndexGreaterThan(consumeIndex());",
      "right" : "return root.getElementsByIndexGreaterThan(consumeIndex());",
      "info" : "ReturnStatement[13556-13614]:ReturnStatement[14095-14153]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13630-13637]:Modifier[14169-14176]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[13638-13646]:SimpleType[14177-14185]"
    }, {
      "left" : "indexEquals",
      "right" : "indexEquals",
      "info" : "SimpleName[13647-13658]:SimpleName[14186-14197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13661-13730]:Block[14200-14269]"
    }, {
      "left" : "return root.getElementsByIndexEquals(consumeIndex());",
      "right" : "return root.getElementsByIndexEquals(consumeIndex());",
      "info" : "ReturnStatement[13671-13724]:ReturnStatement[14210-14263]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13736-13743]:Modifier[14275-14282]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13744-13747]:PrimitiveType[14283-14286]"
    }, {
      "left" : "consumeIndex",
      "right" : "consumeIndex",
      "info" : "SimpleName[13748-13760]:SimpleName[14287-14299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13763-13939]:Block[14302-14478]"
    }, {
      "left" : "String indexS = tq.chompTo(\")\").trim();",
      "right" : "String indexS = tq.chompTo(\")\").trim();",
      "info" : "VariableDeclarationStatement[13773-13812]:VariableDeclarationStatement[14312-14351]"
    }, {
      "left" : "Validate.isTrue(StringUtil.isNumeric(indexS), \"Index must be numeric\");",
      "right" : "Validate.isTrue(StringUtil.isNumeric(indexS), \"Index must be numeric\");",
      "info" : "ExpressionStatement[13821-13892]:ExpressionStatement[14360-14431]"
    }, {
      "left" : "return Integer.parseInt(indexS);",
      "right" : "return Integer.parseInt(indexS);",
      "info" : "ReturnStatement[13901-13933]:ReturnStatement[14440-14472]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13977-13984]:Modifier[14516-14523]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[13985-13993]:SimpleType[14524-14532]"
    }, {
      "left" : "has",
      "right" : "has",
      "info" : "SimpleName[13994-13997]:SimpleName[14533-14536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14000-14250]:Block[14539-14789]"
    }, {
      "left" : "tq.consume(\":has\");",
      "right" : "tq.consume(\":has\");",
      "info" : "ExpressionStatement[14010-14029]:ExpressionStatement[14549-14568]"
    }, {
      "left" : "String subQuery = tq.chompBalanced('(',')');",
      "right" : "String subQuery = tq.chompBalanced('(',')');",
      "info" : "VariableDeclarationStatement[14038-14082]:VariableDeclarationStatement[14577-14621]"
    }, {
      "left" : "Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");",
      "right" : "Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");",
      "info" : "ExpressionStatement[14091-14159]:ExpressionStatement[14630-14698]"
    }, {
      "left" : "return filterForParentsOfDescendants(elements, select(subQuery, elements));",
      "right" : "return filterForParentsOfDescendants(elements, select(subQuery, elements));",
      "info" : "ReturnStatement[14169-14244]:ReturnStatement[14708-14783]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14318-14325]:Modifier[14857-14864]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[14326-14334]:SimpleType[14865-14873]"
    }, {
      "left" : "contains",
      "right" : "contains",
      "info" : "SimpleName[14335-14343]:SimpleName[14874-14882]"
    }, {
      "left" : "boolean own",
      "right" : "boolean own",
      "info" : "SingleVariableDeclaration[14344-14355]:SingleVariableDeclaration[14883-14894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14357-14700]:Block[14896-15239]"
    }, {
      "left" : "tq.consume(own ? \":containsOwn\" : \":contains\");",
      "right" : "tq.consume(own ? \":containsOwn\" : \":contains\");",
      "info" : "ExpressionStatement[14367-14414]:ExpressionStatement[14906-14953]"
    }, {
      "left" : "String searchText = TokenQueue.unescape(tq.chompBalanced('(',')'));",
      "right" : "String searchText = TokenQueue.unescape(tq.chompBalanced('(',')'));",
      "info" : "VariableDeclarationStatement[14423-14490]:VariableDeclarationStatement[14962-15029]"
    }, {
      "left" : "Validate.notEmpty(searchText, \":contains(text) query must not be empty\");",
      "right" : "Validate.notEmpty(searchText, \":contains(text) query must not be empty\");",
      "info" : "ExpressionStatement[14499-14572]:ExpressionStatement[15038-15111]"
    }, {
      "left" : "return own ? root.getElementsContainingOwnText(searchText) : root.getElementsContainingText(searchText);",
      "right" : "return own ? root.getElementsContainingOwnText(searchText) : root.getElementsContainingText(searchText);",
      "info" : "ReturnStatement[14590-14694]:ReturnStatement[15129-15233]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14752-14759]:Modifier[15291-15298]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[14760-14768]:SimpleType[15299-15307]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[14769-14776]:SimpleName[15308-15315]"
    }, {
      "left" : "boolean own",
      "right" : "boolean own",
      "info" : "SingleVariableDeclaration[14777-14788]:SingleVariableDeclaration[15316-15327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14790-15135]:Block[15329-15674]"
    }, {
      "left" : "tq.consume(own? \":matchesOwn\" : \":matches\");",
      "right" : "tq.consume(own? \":matchesOwn\" : \":matches\");",
      "info" : "ExpressionStatement[14800-14844]:ExpressionStatement[15339-15383]"
    }, {
      "left" : "String regex = tq.chompBalanced('(', ')');",
      "right" : "String regex = tq.chompBalanced('(', ')');",
      "info" : "VariableDeclarationStatement[14853-14895]:VariableDeclarationStatement[15392-15434]"
    }, {
      "left" : "Validate.notEmpty(regex, \":matches(regex) query must not be empty\");",
      "right" : "Validate.notEmpty(regex, \":matches(regex) query must not be empty\");",
      "info" : "ExpressionStatement[14953-15021]:ExpressionStatement[15492-15560]"
    }, {
      "left" : "return own ? root.getElementsMatchingOwnText(regex) : root.getElementsMatchingText(regex);",
      "right" : "return own ? root.getElementsMatchingOwnText(regex) : root.getElementsMatchingText(regex);",
      "info" : "ReturnStatement[15039-15129]:ReturnStatement[15578-15668]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15163-15170]:Modifier[15702-15709]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[15171-15179]:SimpleType[15710-15718]"
    }, {
      "left" : "not",
      "right" : "not",
      "info" : "SimpleName[15180-15183]:SimpleName[15719-15722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15186-15432]:Block[15725-15971]"
    }, {
      "left" : "tq.consume(\":not\");",
      "right" : "tq.consume(\":not\");",
      "info" : "ExpressionStatement[15196-15215]:ExpressionStatement[15735-15754]"
    }, {
      "left" : "String subQuery = tq.chompBalanced('(', ')');",
      "right" : "String subQuery = tq.chompBalanced('(', ')');",
      "info" : "VariableDeclarationStatement[15224-15269]:VariableDeclarationStatement[15763-15808]"
    }, {
      "left" : "Validate.notEmpty(subQuery, \":not(selector) subselect must not be empty\");",
      "right" : "Validate.notEmpty(subQuery, \":not(selector) subselect must not be empty\");",
      "info" : "ExpressionStatement[15278-15352]:ExpressionStatement[15817-15891]"
    }, {
      "left" : "return filterOut(root.getAllElements(), select(subQuery, root));",
      "right" : "return filterOut(root.getAllElements(), select(subQuery, root));",
      "info" : "ReturnStatement[15362-15426]:ReturnStatement[15901-15965]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15470-15477]:Modifier[16009-16016]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15478-15484]:Modifier[16017-16023]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[15485-15493]:SimpleType[16024-16032]"
    }, {
      "left" : "filterForChildren",
      "right" : "filterForChildren",
      "info" : "SimpleName[15494-15511]:SimpleName[16033-16050]"
    }, {
      "left" : "Collection<Element> parents",
      "right" : "Collection<Element> parents",
      "info" : "SingleVariableDeclaration[15512-15539]:SingleVariableDeclaration[16051-16078]"
    }, {
      "left" : "Collection<Element> candidates",
      "right" : "Collection<Element> candidates",
      "info" : "SingleVariableDeclaration[15541-15571]:SingleVariableDeclaration[16080-16110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15573-15916]:Block[16112-16455]"
    }, {
      "left" : "Elements children = new Elements();",
      "right" : "Elements children = new Elements();",
      "info" : "VariableDeclarationStatement[15583-15618]:VariableDeclarationStatement[16122-16157]"
    }, {
      "left" : "CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.parent() != null && c.parent().equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }\n        }",
      "right" : "CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.parent() != null && c.parent().equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }\n        }",
      "info" : "LabeledStatement[15627-15885]:LabeledStatement[16166-16424]"
    }, {
      "left" : "for (Element c : candidates)",
      "right" : "for (Element c : candidates)",
      "info" : "EnhancedForStatement[15634-15885]:EnhancedForStatement[16173-16424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15663-15885]:Block[16202-16424]"
    }, {
      "left" : "for (Element p : parents)",
      "right" : "for (Element p : parents)",
      "info" : "EnhancedForStatement[15677-15875]:EnhancedForStatement[16216-16414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15703-15875]:Block[16242-16414]"
    }, {
      "left" : "if (c.parent() != null && c.parent().equals(p))",
      "right" : "if (c.parent() != null && c.parent().equals(p))",
      "info" : "IfStatement[15721-15861]:IfStatement[16260-16400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15769-15861]:Block[16308-16400]"
    }, {
      "left" : "children.add(c);",
      "right" : "children.add(c);",
      "info" : "ExpressionStatement[15791-15807]:ExpressionStatement[16330-16346]"
    }, {
      "left" : "continue CHILD;",
      "right" : "continue CHILD;",
      "info" : "ContinueStatement[15828-15843]:ContinueStatement[16367-16382]"
    }, {
      "left" : "return children;",
      "right" : "return children;",
      "info" : "ReturnStatement[15894-15910]:ReturnStatement[16433-16449]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16104-16111]:Modifier[16643-16650]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16112-16118]:Modifier[16651-16657]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[16119-16127]:SimpleType[16658-16666]"
    }, {
      "left" : "filterForDescendants",
      "right" : "filterForDescendants",
      "info" : "SimpleName[16128-16148]:SimpleName[16667-16687]"
    }, {
      "left" : "Collection<Element> parents",
      "right" : "Collection<Element> parents",
      "info" : "SingleVariableDeclaration[16149-16176]:SingleVariableDeclaration[16688-16715]"
    }, {
      "left" : "Collection<Element> candidates",
      "right" : "Collection<Element> candidates",
      "info" : "SingleVariableDeclaration[16178-16208]:SingleVariableDeclaration[16717-16747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16210-16514]:Block[16749-17053]"
    }, {
      "left" : "Elements children = new Elements();",
      "right" : "Elements children = new Elements();",
      "info" : "VariableDeclarationStatement[16220-16255]:VariableDeclarationStatement[16759-16794]"
    }, {
      "left" : "CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.equals(p)) {\n                    continue CHILD;\n                }\n            }\n            children.add(c);\n        }",
      "right" : "CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.equals(p)) {\n                    continue CHILD;\n                }\n            }\n            children.add(c);\n        }",
      "info" : "LabeledStatement[16264-16483]:LabeledStatement[16803-17022]"
    }, {
      "left" : "for (Element c : candidates)",
      "right" : "for (Element c : candidates)",
      "info" : "EnhancedForStatement[16271-16483]:EnhancedForStatement[16810-17022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16300-16483]:Block[16839-17022]"
    }, {
      "left" : "for (Element p : parents)",
      "right" : "for (Element p : parents)",
      "info" : "EnhancedForStatement[16314-16444]:EnhancedForStatement[16853-16983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16340-16444]:Block[16879-16983]"
    }, {
      "left" : "if (c.equals(p))",
      "right" : "if (c.equals(p))",
      "info" : "IfStatement[16358-16430]:IfStatement[16897-16969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16375-16430]:Block[16914-16969]"
    }, {
      "left" : "continue CHILD;",
      "right" : "continue CHILD;",
      "info" : "ContinueStatement[16397-16412]:ContinueStatement[16936-16951]"
    }, {
      "left" : "children.add(c);",
      "right" : "children.add(c);",
      "info" : "ExpressionStatement[16457-16473]:ExpressionStatement[16996-17012]"
    }, {
      "left" : "return children;",
      "right" : "return children;",
      "info" : "ReturnStatement[16492-16508]:ReturnStatement[17031-17047]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16597-16604]:Modifier[17136-17143]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16605-16611]:Modifier[17144-17150]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[16612-16620]:SimpleType[17151-17159]"
    }, {
      "left" : "filterForParentsOfDescendants",
      "right" : "filterForParentsOfDescendants",
      "info" : "SimpleName[16621-16650]:SimpleName[17160-17189]"
    }, {
      "left" : "Collection<Element> parents",
      "right" : "Collection<Element> parents",
      "info" : "SingleVariableDeclaration[16651-16678]:SingleVariableDeclaration[17190-17217]"
    }, {
      "left" : "Collection<Element> children",
      "right" : "Collection<Element> children",
      "info" : "SingleVariableDeclaration[16680-16708]:SingleVariableDeclaration[17219-17247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16710-17010]:Block[17249-17549]"
    }, {
      "left" : "Elements filteredParents = new Elements();",
      "right" : "Elements filteredParents = new Elements();",
      "info" : "VariableDeclarationStatement[16720-16762]:VariableDeclarationStatement[17259-17301]"
    }, {
      "left" : "for (Element p : parents)",
      "right" : "for (Element p : parents)",
      "info" : "EnhancedForStatement[16771-16972]:EnhancedForStatement[17310-17511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16797-16972]:Block[17336-17511]"
    }, {
      "left" : "for (Element c : children)",
      "right" : "for (Element c : children)",
      "info" : "EnhancedForStatement[16811-16962]:EnhancedForStatement[17350-17501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16838-16962]:Block[17377-17501]"
    }, {
      "left" : "if (c.parents().contains(p))",
      "right" : "if (c.parents().contains(p))",
      "info" : "IfStatement[16856-16948]:IfStatement[17395-17487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16885-16948]:Block[17424-17487]"
    }, {
      "left" : "filteredParents.add(p);",
      "right" : "filteredParents.add(p);",
      "info" : "ExpressionStatement[16907-16930]:ExpressionStatement[17446-17469]"
    }, {
      "left" : "return filteredParents;",
      "right" : "return filteredParents;",
      "info" : "ReturnStatement[16981-17004]:ReturnStatement[17520-17543]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17045-17052]:Modifier[17584-17591]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17053-17059]:Modifier[17592-17598]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[17060-17068]:SimpleType[17599-17607]"
    }, {
      "left" : "filterForAdjacentSiblings",
      "right" : "filterForAdjacentSiblings",
      "info" : "SimpleName[17069-17094]:SimpleName[17608-17633]"
    }, {
      "left" : "Collection<Element> elements",
      "right" : "Collection<Element> elements",
      "info" : "SingleVariableDeclaration[17095-17123]:SingleVariableDeclaration[17634-17662]"
    }, {
      "left" : "Collection<Element> candidates",
      "right" : "Collection<Element> candidates",
      "info" : "SingleVariableDeclaration[17125-17155]:SingleVariableDeclaration[17664-17694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17157-17653]:Block[17696-18192]"
    }, {
      "left" : "Elements siblings = new Elements();",
      "right" : "Elements siblings = new Elements();",
      "info" : "VariableDeclarationStatement[17167-17202]:VariableDeclarationStatement[17706-17741]"
    }, {
      "left" : "SIBLING: for (Element c: candidates) {\n            for (Element e: elements) {\n                if (!e.parent().equals(c.parent()))\n                    continue;\n                Element previousSib = c.previousElementSibling();\n                if (previousSib != null && previousSib.equals(e)) {\n                    siblings.add(c);\n                    continue SIBLING;\n                }\n            }\n        }",
      "right" : "SIBLING: for (Element c: candidates) {\n            for (Element e: elements) {\n                if (!e.parent().equals(c.parent()))\n                    continue;\n                Element previousSib = c.previousElementSibling();\n                if (previousSib != null && previousSib.equals(e)) {\n                    siblings.add(c);\n                    continue SIBLING;\n                }\n            }\n        }",
      "info" : "LabeledStatement[17211-17622]:LabeledStatement[17750-18161]"
    }, {
      "left" : "for (Element c: candidates)",
      "right" : "for (Element c: candidates)",
      "info" : "EnhancedForStatement[17220-17622]:EnhancedForStatement[17759-18161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17248-17622]:Block[17787-18161]"
    }, {
      "left" : "for (Element e: elements)",
      "right" : "for (Element e: elements)",
      "info" : "EnhancedForStatement[17262-17612]:EnhancedForStatement[17801-18151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17288-17612]:Block[17827-18151]"
    }, {
      "left" : "if (!e.parent().equals(c.parent()))",
      "right" : "if (!e.parent().equals(c.parent()))",
      "info" : "IfStatement[17306-17371]:IfStatement[17845-17910]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17362-17371]:ContinueStatement[17901-17910]"
    }, {
      "left" : "Element previousSib = c.previousElementSibling();",
      "right" : "Element previousSib = c.previousElementSibling();",
      "info" : "VariableDeclarationStatement[17388-17437]:VariableDeclarationStatement[17927-17976]"
    }, {
      "left" : "if (previousSib != null && previousSib.equals(e))",
      "right" : "if (previousSib != null && previousSib.equals(e))",
      "info" : "IfStatement[17454-17598]:IfStatement[17993-18137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17504-17598]:Block[18043-18137]"
    }, {
      "left" : "siblings.add(c);",
      "right" : "siblings.add(c);",
      "info" : "ExpressionStatement[17526-17542]:ExpressionStatement[18065-18081]"
    }, {
      "left" : "continue SIBLING;",
      "right" : "continue SIBLING;",
      "info" : "ContinueStatement[17563-17580]:ContinueStatement[18102-18119]"
    }, {
      "left" : "return siblings;",
      "right" : "return siblings;",
      "info" : "ReturnStatement[17631-17647]:ReturnStatement[18170-18186]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17690-17697]:Modifier[18229-18236]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17698-17704]:Modifier[18237-18243]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[17705-17713]:SimpleType[18244-18252]"
    }, {
      "left" : "filterForGeneralSiblings",
      "right" : "filterForGeneralSiblings",
      "info" : "SimpleName[17714-17738]:SimpleName[18253-18277]"
    }, {
      "left" : "Collection<Element> elements",
      "right" : "Collection<Element> elements",
      "info" : "SingleVariableDeclaration[17739-17767]:SingleVariableDeclaration[18278-18306]"
    }, {
      "left" : "Collection<Element> candidates",
      "right" : "Collection<Element> candidates",
      "info" : "SingleVariableDeclaration[17769-17799]:SingleVariableDeclaration[18308-18338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17801-18296]:Block[18340-18835]"
    }, {
      "left" : "Elements output = new Elements();",
      "right" : "Elements output = new Elements();",
      "info" : "VariableDeclarationStatement[17811-17844]:VariableDeclarationStatement[18350-18383]"
    }, {
      "left" : "SIBLING: for (Element c: candidates) {\n            for (Element e: elements) {\n                if (!e.parent().equals(c.parent()))\n                    continue;\n                int ePos = e.elementSiblingIndex();\n                int cPos = c.elementSiblingIndex();\n                if (cPos > ePos) {\n                    output.add(c);\n                    continue SIBLING;\n                }\n            }\n        }",
      "right" : "SIBLING: for (Element c: candidates) {\n            for (Element e: elements) {\n                if (!e.parent().equals(c.parent()))\n                    continue;\n                int ePos = e.elementSiblingIndex();\n                int cPos = c.elementSiblingIndex();\n                if (cPos > ePos) {\n                    output.add(c);\n                    continue SIBLING;\n                }\n            }\n        }",
      "info" : "LabeledStatement[17853-18267]:LabeledStatement[18392-18806]"
    }, {
      "left" : "for (Element c: candidates)",
      "right" : "for (Element c: candidates)",
      "info" : "EnhancedForStatement[17862-18267]:EnhancedForStatement[18401-18806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17890-18267]:Block[18429-18806]"
    }, {
      "left" : "for (Element e: elements)",
      "right" : "for (Element e: elements)",
      "info" : "EnhancedForStatement[17904-18257]:EnhancedForStatement[18443-18796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17930-18257]:Block[18469-18796]"
    }, {
      "left" : "if (!e.parent().equals(c.parent()))",
      "right" : "if (!e.parent().equals(c.parent()))",
      "info" : "IfStatement[17948-18013]:IfStatement[18487-18552]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[18004-18013]:ContinueStatement[18543-18552]"
    }, {
      "left" : "int ePos = e.elementSiblingIndex();",
      "right" : "int ePos = e.elementSiblingIndex();",
      "info" : "VariableDeclarationStatement[18030-18065]:VariableDeclarationStatement[18569-18604]"
    }, {
      "left" : "int cPos = c.elementSiblingIndex();",
      "right" : "int cPos = c.elementSiblingIndex();",
      "info" : "VariableDeclarationStatement[18082-18117]:VariableDeclarationStatement[18621-18656]"
    }, {
      "left" : "if (cPos > ePos)",
      "right" : "if (cPos > ePos)",
      "info" : "IfStatement[18134-18243]:IfStatement[18673-18782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18151-18243]:Block[18690-18782]"
    }, {
      "left" : "output.add(c);",
      "right" : "output.add(c);",
      "info" : "ExpressionStatement[18173-18187]:ExpressionStatement[18712-18726]"
    }, {
      "left" : "continue SIBLING;",
      "right" : "continue SIBLING;",
      "info" : "ContinueStatement[18208-18225]:ContinueStatement[18747-18764]"
    }, {
      "left" : "return output;",
      "right" : "return output;",
      "info" : "ReturnStatement[18276-18290]:ReturnStatement[18815-18829]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18360-18367]:Modifier[18899-18906]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18368-18374]:Modifier[18907-18913]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[18375-18383]:SimpleType[18914-18922]"
    }, {
      "left" : "filterForSelf",
      "right" : "filterForSelf",
      "info" : "SimpleName[18384-18397]:SimpleName[18923-18936]"
    }, {
      "left" : "Collection<Element> parents",
      "right" : "Collection<Element> parents",
      "info" : "SingleVariableDeclaration[18398-18425]:SingleVariableDeclaration[18937-18964]"
    }, {
      "left" : "Collection<Element> candidates",
      "right" : "Collection<Element> candidates",
      "info" : "SingleVariableDeclaration[18427-18457]:SingleVariableDeclaration[18966-18996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18459-18774]:Block[18998-19313]"
    }, {
      "left" : "Elements children = new Elements();",
      "right" : "Elements children = new Elements();",
      "info" : "VariableDeclarationStatement[18469-18504]:VariableDeclarationStatement[19008-19043]"
    }, {
      "left" : "CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }   \n        }",
      "right" : "CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }   \n        }",
      "info" : "LabeledStatement[18513-18743]:LabeledStatement[19052-19282]"
    }, {
      "left" : "for (Element c : candidates)",
      "right" : "for (Element c : candidates)",
      "info" : "EnhancedForStatement[18520-18743]:EnhancedForStatement[19059-19282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18549-18743]:Block[19088-19282]"
    }, {
      "left" : "for (Element p : parents)",
      "right" : "for (Element p : parents)",
      "info" : "EnhancedForStatement[18563-18730]:EnhancedForStatement[19102-19269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18589-18730]:Block[19128-19269]"
    }, {
      "left" : "if (c.equals(p))",
      "right" : "if (c.equals(p))",
      "info" : "IfStatement[18607-18716]:IfStatement[19146-19255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18624-18716]:Block[19163-19255]"
    }, {
      "left" : "children.add(c);",
      "right" : "children.add(c);",
      "info" : "ExpressionStatement[18646-18662]:ExpressionStatement[19185-19201]"
    }, {
      "left" : "continue CHILD;",
      "right" : "continue CHILD;",
      "info" : "ContinueStatement[18683-18698]:ContinueStatement[19222-19237]"
    }, {
      "left" : "return children;",
      "right" : "return children;",
      "info" : "ReturnStatement[18752-18768]:ReturnStatement[19291-19307]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18861-18867]:Modifier[19400-19406]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[18868-18876]:SimpleType[19407-19415]"
    }, {
      "left" : "filterOut",
      "right" : "filterOut",
      "info" : "SimpleName[18877-18886]:SimpleName[19416-19425]"
    }, {
      "left" : "Collection<Element> elements",
      "right" : "Collection<Element> elements",
      "info" : "SingleVariableDeclaration[18887-18915]:SingleVariableDeclaration[19426-19454]"
    }, {
      "left" : "Collection<Element> outs",
      "right" : "Collection<Element> outs",
      "info" : "SingleVariableDeclaration[18917-18941]:SingleVariableDeclaration[19456-19480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18943-19322]:Block[19482-19861]"
    }, {
      "left" : "Elements output = new Elements();",
      "right" : "Elements output = new Elements();",
      "info" : "VariableDeclarationStatement[18953-18986]:VariableDeclarationStatement[19492-19525]"
    }, {
      "left" : "for (Element el: elements)",
      "right" : "for (Element el: elements)",
      "info" : "EnhancedForStatement[18995-19293]:EnhancedForStatement[19534-19832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19022-19293]:Block[19561-19832]"
    }, {
      "left" : "boolean found = false;",
      "right" : "boolean found = false;",
      "info" : "VariableDeclarationStatement[19036-19058]:VariableDeclarationStatement[19575-19597]"
    }, {
      "left" : "for (Element out: outs)",
      "right" : "for (Element out: outs)",
      "info" : "EnhancedForStatement[19071-19227]:EnhancedForStatement[19610-19766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19095-19227]:Block[19634-19766]"
    }, {
      "left" : "if (el.equals(out))",
      "right" : "if (el.equals(out))",
      "info" : "IfStatement[19113-19213]:IfStatement[19652-19752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19133-19213]:Block[19672-19752]"
    }, {
      "left" : "found = true;",
      "right" : "found = true;",
      "info" : "ExpressionStatement[19155-19168]:ExpressionStatement[19694-19707]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19189-19195]:BreakStatement[19728-19734]"
    }, {
      "left" : "if (!found)",
      "right" : "if (!found)",
      "info" : "IfStatement[19240-19283]:IfStatement[19779-19822]"
    }, {
      "left" : "output.add(el);",
      "right" : "output.add(el);",
      "info" : "ExpressionStatement[19268-19283]:ExpressionStatement[19807-19822]"
    }, {
      "left" : "return output;",
      "right" : "return output;",
      "info" : "ReturnStatement[19302-19316]:ReturnStatement[19841-19855]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19328-19334]:Modifier[19867-19873]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19335-19341]:Modifier[19874-19880]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[19342-19347]:TYPE_DECLARATION_KIND[19881-19886]"
    }, {
      "left" : "SelectorParseException",
      "right" : "SelectorParseException",
      "info" : "SimpleName[19348-19370]:SimpleName[19887-19909]"
    }, {
      "left" : "IllegalStateException",
      "right" : "IllegalStateException",
      "info" : "SimpleType[19379-19400]:SimpleType[19918-19939]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19411-19417]:Modifier[19950-19956]"
    }, {
      "left" : "SelectorParseException",
      "right" : "SelectorParseException",
      "info" : "SimpleName[19418-19440]:SimpleName[19957-19979]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[19441-19451]:SingleVariableDeclaration[19980-19990]"
    }, {
      "left" : "Object... params",
      "right" : "Object... params",
      "info" : "SingleVariableDeclaration[19453-19469]:SingleVariableDeclaration[19992-20008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19471-19529]:Block[20010-20068]"
    }, {
      "left" : "super(String.format(msg, params));",
      "right" : "super(String.format(msg, params));",
      "info" : "SuperConstructorInvocation[19485-19519]:SuperConstructorInvocation[20024-20058]"
    } ]
  },
  "interFileMappings" : { }
}