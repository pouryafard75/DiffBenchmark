{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DateTimeZone",
      "right" : "DateTimeZone",
      "info" : "TypeDeclaration[1531-51595]:TypeDeclaration[1531-51784]"
    }, {
      "left" : "private static final long serialVersionUID = 5546345482340108586L;",
      "right" : "private static final long serialVersionUID = 5546345482340108586L;",
      "info" : "FieldDeclaration[3645-3745]:FieldDeclaration[3645-3745]"
    }, {
      "left" : "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
      "right" : "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
      "info" : "FieldDeclaration[3751-3888]:FieldDeclaration[3751-3888]"
    }, {
      "left" : "private static final int MAX_MILLIS = (86400 * 1000) - 1;",
      "right" : "private static final int MAX_MILLIS = (86400 * 1000) - 1;",
      "info" : "FieldDeclaration[3893-3977]:FieldDeclaration[3893-3977]"
    }, {
      "left" : "private static Provider cProvider;",
      "right" : "private static Provider cProvider;",
      "info" : "FieldDeclaration[3983-4071]:FieldDeclaration[3983-4071]"
    }, {
      "left" : "private static NameProvider cNameProvider;",
      "right" : "private static NameProvider cNameProvider;",
      "info" : "FieldDeclaration[4076-4177]:FieldDeclaration[4076-4177]"
    }, {
      "left" : "private static Set<String> cAvailableIDs;",
      "right" : "private static Set<String> cAvailableIDs;",
      "info" : "FieldDeclaration[4182-4257]:FieldDeclaration[4182-4257]"
    }, {
      "left" : "private static volatile DateTimeZone cDefault;",
      "right" : "private static volatile DateTimeZone cDefault;",
      "info" : "FieldDeclaration[4262-4342]:FieldDeclaration[4262-4342]"
    }, {
      "left" : "private static DateTimeFormatter cOffsetFormatter;",
      "right" : "private static DateTimeFormatter cOffsetFormatter;",
      "info" : "FieldDeclaration[4347-4452]:FieldDeclaration[4347-4452]"
    }, {
      "left" : "private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;",
      "right" : "private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;",
      "info" : "FieldDeclaration[4458-4615]:FieldDeclaration[4458-4615]"
    }, {
      "left" : "private static Map<String, String> cZoneIdConversion;",
      "right" : "private static Map<String, String> cZoneIdConversion;",
      "info" : "FieldDeclaration[4621-4723]:FieldDeclaration[4621-4723]"
    }, {
      "left" : "public static DateTimeZone getDefault()",
      "right" : "public static DateTimeZone getDefault()",
      "info" : "MethodDeclaration[4887-6579]:MethodDeclaration[4887-6579]"
    }, {
      "left" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
      "right" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
      "info" : "MethodDeclaration[6585-7428]:MethodDeclaration[6585-7428]"
    }, {
      "left" : "public static DateTimeZone forID(String id)",
      "right" : "public static DateTimeZone forID(String id)",
      "info" : "MethodDeclaration[7512-8947]:MethodDeclaration[7512-8947]"
    }, {
      "left" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
      "right" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8953-9555]:MethodDeclaration[8953-9555]"
    }, {
      "left" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
      "right" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
      "info" : "MethodDeclaration[9561-12095]:MethodDeclaration[9561-12284]"
    }, {
      "left" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
      "right" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
      "info" : "MethodDeclaration[12101-12689]:MethodDeclaration[12290-12878]"
    }, {
      "left" : "public static DateTimeZone forTimeZone(TimeZone zone)",
      "right" : "public static DateTimeZone forTimeZone(TimeZone zone)",
      "info" : "MethodDeclaration[12695-14644]:MethodDeclaration[12884-14833]"
    }, {
      "left" : "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset)",
      "right" : "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset)",
      "info" : "MethodDeclaration[14728-15588]:MethodDeclaration[14917-15777]"
    }, {
      "left" : "public static Set<String> getAvailableIDs()",
      "right" : "public static Set<String> getAvailableIDs()",
      "info" : "MethodDeclaration[15594-15793]:MethodDeclaration[15783-15982]"
    }, {
      "left" : "public static Provider getProvider()",
      "right" : "public static Provider getProvider()",
      "info" : "MethodDeclaration[15877-16165]:MethodDeclaration[16066-16354]"
    }, {
      "left" : "public static void setProvider(Provider provider) throws SecurityException",
      "right" : "public static void setProvider(Provider provider) throws SecurityException",
      "info" : "MethodDeclaration[16171-16873]:MethodDeclaration[16360-17062]"
    }, {
      "left" : "private static void setProvider0(Provider provider)",
      "right" : "private static void setProvider0(Provider provider)",
      "info" : "MethodDeclaration[16879-17804]:MethodDeclaration[17068-17993]"
    }, {
      "left" : "private static Provider getDefaultProvider()",
      "right" : "private static Provider getDefaultProvider()",
      "info" : "MethodDeclaration[17810-19221]:MethodDeclaration[17999-19410]"
    }, {
      "left" : "public static NameProvider getNameProvider()",
      "right" : "public static NameProvider getNameProvider()",
      "info" : "MethodDeclaration[19305-19599]:MethodDeclaration[19494-19788]"
    }, {
      "left" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
      "right" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
      "info" : "MethodDeclaration[19605-20333]:MethodDeclaration[19794-20522]"
    }, {
      "left" : "private static void setNameProvider0(NameProvider nameProvider)",
      "right" : "private static void setNameProvider0(NameProvider nameProvider)",
      "info" : "MethodDeclaration[20339-20780]:MethodDeclaration[20528-20969]"
    }, {
      "left" : "private static NameProvider getDefaultNameProvider()",
      "right" : "private static NameProvider getDefaultNameProvider()",
      "info" : "MethodDeclaration[20786-21822]:MethodDeclaration[20975-22011]"
    }, {
      "left" : "private static synchronized String getConvertedId(String id)",
      "right" : "private static synchronized String getConvertedId(String id)",
      "info" : "MethodDeclaration[21906-23965]:MethodDeclaration[22095-24154]"
    }, {
      "left" : "private static int parseOffset(String str)",
      "right" : "private static int parseOffset(String str)",
      "info" : "MethodDeclaration[23971-24664]:MethodDeclaration[24160-24853]"
    }, {
      "left" : "public DateTimeZone getZone()",
      "right" : "public DateTimeZone getZone()",
      "info" : "MethodDeclaration[24206-24280]:MethodDeclaration[24395-24469]"
    }, {
      "left" : "public Chronology withUTC()",
      "right" : "public Chronology withUTC()",
      "info" : "MethodDeclaration[24293-24365]:MethodDeclaration[24482-24554]"
    }, {
      "left" : "public Chronology withZone(DateTimeZone zone)",
      "right" : "public Chronology withZone(DateTimeZone zone)",
      "info" : "MethodDeclaration[24378-24468]:MethodDeclaration[24567-24657]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[24481-24566]:MethodDeclaration[24670-24755]"
    }, {
      "left" : "private static String printOffset(int offset)",
      "right" : "private static String printOffset(int offset)",
      "info" : "MethodDeclaration[24670-26072]:MethodDeclaration[24859-26261]"
    }, {
      "left" : "private static synchronized DateTimeFormatter offsetFormatter()",
      "right" : "private static synchronized DateTimeFormatter offsetFormatter()",
      "info" : "MethodDeclaration[26078-26503]:MethodDeclaration[26267-26692]"
    }, {
      "left" : "private final String iID;",
      "right" : "private final String iID;",
      "info" : "FieldDeclaration[26620-26645]:FieldDeclaration[26809-26834]"
    }, {
      "left" : "protected DateTimeZone(String id)",
      "right" : "protected DateTimeZone(String id)",
      "info" : "MethodDeclaration[26651-26951]:MethodDeclaration[26840-27140]"
    }, {
      "left" : "public final String getID()",
      "right" : "public final String getID()",
      "info" : "MethodDeclaration[27058-27237]:MethodDeclaration[27247-27426]"
    }, {
      "left" : "public abstract String getNameKey(long instant);",
      "right" : "public abstract String getNameKey(long instant);",
      "info" : "MethodDeclaration[27243-27614]:MethodDeclaration[27432-27803]"
    }, {
      "left" : "public final String getShortName(long instant)",
      "right" : "public final String getShortName(long instant)",
      "info" : "MethodDeclaration[27620-28136]:MethodDeclaration[27809-28325]"
    }, {
      "left" : "public String getShortName(long instant, Locale locale)",
      "right" : "public String getShortName(long instant, Locale locale)",
      "info" : "MethodDeclaration[28142-29056]:MethodDeclaration[28331-29245]"
    }, {
      "left" : "public final String getName(long instant)",
      "right" : "public final String getName(long instant)",
      "info" : "MethodDeclaration[29062-29566]:MethodDeclaration[29251-29755]"
    }, {
      "left" : "public String getName(long instant, Locale locale)",
      "right" : "public String getName(long instant, Locale locale)",
      "info" : "MethodDeclaration[29572-30474]:MethodDeclaration[29761-30663]"
    }, {
      "left" : "public abstract int getOffset(long instant);",
      "right" : "public abstract int getOffset(long instant);",
      "info" : "MethodDeclaration[30480-30770]:MethodDeclaration[30669-30959]"
    }, {
      "left" : "public final int getOffset(ReadableInstant instant)",
      "right" : "public final int getOffset(ReadableInstant instant)",
      "info" : "MethodDeclaration[30776-31219]:MethodDeclaration[30965-31408]"
    }, {
      "left" : "public abstract int getStandardOffset(long instant);",
      "right" : "public abstract int getStandardOffset(long instant);",
      "info" : "MethodDeclaration[31225-31572]:MethodDeclaration[31414-31761]"
    }, {
      "left" : "public boolean isStandardOffset(long instant)",
      "right" : "public boolean isStandardOffset(long instant)",
      "info" : "MethodDeclaration[31578-32447]:MethodDeclaration[31767-32636]"
    }, {
      "left" : "public int getOffsetFromLocal(long instantLocal)",
      "right" : "public int getOffsetFromLocal(long instantLocal)",
      "info" : "MethodDeclaration[32453-35604]:MethodDeclaration[32642-35793]"
    }, {
      "left" : "public long convertUTCToLocal(long instantUTC)",
      "right" : "public long convertUTCToLocal(long instantUTC)",
      "info" : "MethodDeclaration[35610-36482]:MethodDeclaration[35799-36671]"
    }, {
      "left" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
      "right" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
      "info" : "MethodDeclaration[36488-37824]:MethodDeclaration[36677-38013]"
    }, {
      "left" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
      "right" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
      "info" : "MethodDeclaration[37830-40577]:MethodDeclaration[38019-40766]"
    }, {
      "left" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
      "right" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
      "info" : "MethodDeclaration[40583-41439]:MethodDeclaration[40772-41628]"
    }, {
      "left" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
      "right" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
      "info" : "MethodDeclaration[45952-46691]:MethodDeclaration[46141-46880]"
    }, {
      "left" : "public long adjustOffset(long instant, boolean earlierOrLater)",
      "right" : "public long adjustOffset(long instant, boolean earlierOrLater)",
      "info" : "MethodDeclaration[46697-48324]:MethodDeclaration[46886-48513]"
    }, {
      "left" : "public abstract boolean isFixed();",
      "right" : "public abstract boolean isFixed();",
      "info" : "MethodDeclaration[48527-48680]:MethodDeclaration[48716-48869]"
    }, {
      "left" : "public abstract long nextTransition(long instant);",
      "right" : "public abstract long nextTransition(long instant);",
      "info" : "MethodDeclaration[48686-49075]:MethodDeclaration[48875-49264]"
    }, {
      "left" : "public abstract long previousTransition(long instant);",
      "right" : "public abstract long previousTransition(long instant);",
      "info" : "MethodDeclaration[49081-49475]:MethodDeclaration[49270-49664]"
    }, {
      "left" : "public java.util.TimeZone toTimeZone()",
      "right" : "public java.util.TimeZone toTimeZone()",
      "info" : "MethodDeclaration[49578-49814]:MethodDeclaration[49767-50003]"
    }, {
      "left" : "public abstract boolean equals(Object object);",
      "right" : "public abstract boolean equals(Object object);",
      "info" : "MethodDeclaration[49820-50055]:MethodDeclaration[50009-50244]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[50061-50235]:MethodDeclaration[50250-50424]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[50241-50414]:MethodDeclaration[50430-50603]"
    }, {
      "left" : "protected Object writeReplace() throws ObjectStreamException",
      "right" : "protected Object writeReplace() throws ObjectStreamException",
      "info" : "MethodDeclaration[50420-50781]:MethodDeclaration[50609-50970]"
    }, {
      "left" : "Stub",
      "right" : "Stub",
      "info" : "TypeDeclaration[50787-51592]:TypeDeclaration[50976-51781]"
    }, {
      "left" : "private static final long serialVersionUID = -6471952376487863581L;",
      "right" : "private static final long serialVersionUID = -6471952376487863581L;",
      "info" : "FieldDeclaration[50915-51017]:FieldDeclaration[51104-51206]"
    }, {
      "left" : "private transient String iID;",
      "right" : "private transient String iID;",
      "info" : "FieldDeclaration[51026-51090]:FieldDeclaration[51215-51279]"
    }, {
      "left" : "Stub(String id)",
      "right" : "Stub(String id)",
      "info" : "MethodDeclaration[51100-51238]:MethodDeclaration[51289-51427]"
    }, {
      "left" : "private void writeObject(ObjectOutputStream out) throws IOException",
      "right" : "private void writeObject(ObjectOutputStream out) throws IOException",
      "info" : "MethodDeclaration[51248-51358]:MethodDeclaration[51437-51547]"
    }, {
      "left" : "private void readObject(ObjectInputStream in) throws IOException",
      "right" : "private void readObject(ObjectInputStream in) throws IOException",
      "info" : "MethodDeclaration[51368-51476]:MethodDeclaration[51557-51665]"
    }, {
      "left" : "private Object readResolve() throws ObjectStreamException",
      "right" : "private Object readResolve() throws ObjectStreamException",
      "info" : "MethodDeclaration[51486-51586]:MethodDeclaration[51675-51775]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4736-4803]:Block[4736-4803]"
    }, {
      "left" : "setProvider0(null);",
      "right" : "setProvider0(null);",
      "info" : "ExpressionStatement[4746-4765]:ExpressionStatement[4746-4765]"
    }, {
      "left" : "setNameProvider0(null);",
      "right" : "setNameProvider0(null);",
      "info" : "ExpressionStatement[4774-4797]:ExpressionStatement[4774-4797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5464-6579]:Block[5464-6579]"
    }, {
      "left" : "DateTimeZone zone = cDefault;",
      "right" : "DateTimeZone zone = cDefault;",
      "info" : "VariableDeclarationStatement[5474-5503]:VariableDeclarationStatement[5474-5503]"
    }, {
      "left" : "if (zone == null)",
      "right" : "if (zone == null)",
      "info" : "IfStatement[5512-6552]:IfStatement[5512-6552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5530-6552]:Block[5530-6552]"
    }, {
      "left" : "synchronized(DateTimeZone.class) {\n                zone = cDefault;\n                if (zone == null) {\n                    DateTimeZone temp = null;\n                    try {\n                        try {\n                            String id = System.getProperty(\"user.timezone\");\n                            if (id != null) {  // null check avoids stack overflow\n                                temp = forID(id);\n                            }\n                        } catch (RuntimeException ex) {\n                            // ignored\n                        }\n                        if (temp == null) {\n                            temp = forTimeZone(TimeZone.getDefault());\n                        }\n                    } catch (IllegalArgumentException ex) {\n                        // ignored\n                    }\n                    if (temp == null) {\n                        temp = UTC;\n                    }\n                    cDefault = zone = temp;\n                }\n            }",
      "right" : "synchronized(DateTimeZone.class) {\n                zone = cDefault;\n                if (zone == null) {\n                    DateTimeZone temp = null;\n                    try {\n                        try {\n                            String id = System.getProperty(\"user.timezone\");\n                            if (id != null) {  // null check avoids stack overflow\n                                temp = forID(id);\n                            }\n                        } catch (RuntimeException ex) {\n                            // ignored\n                        }\n                        if (temp == null) {\n                            temp = forTimeZone(TimeZone.getDefault());\n                        }\n                    } catch (IllegalArgumentException ex) {\n                        // ignored\n                    }\n                    if (temp == null) {\n                        temp = UTC;\n                    }\n                    cDefault = zone = temp;\n                }\n            }",
      "info" : "SynchronizedStatement[5544-6542]:SynchronizedStatement[5544-6542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5577-6542]:Block[5577-6542]"
    }, {
      "left" : "zone = cDefault;",
      "right" : "zone = cDefault;",
      "info" : "ExpressionStatement[5595-5611]:ExpressionStatement[5595-5611]"
    }, {
      "left" : "if (zone == null)",
      "right" : "if (zone == null)",
      "info" : "IfStatement[5628-6528]:IfStatement[5628-6528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5646-6528]:Block[5646-6528]"
    }, {
      "left" : "DateTimeZone temp = null;",
      "right" : "DateTimeZone temp = null;",
      "info" : "VariableDeclarationStatement[5668-5693]:VariableDeclarationStatement[5668-5693]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5714-6368]:TryStatement[5714-6368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5718-6273]:Block[5718-6273]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5744-6110]:TryStatement[5744-6110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5748-6015]:Block[5748-6015]"
    }, {
      "left" : "String id = System.getProperty(\"user.timezone\");",
      "right" : "String id = System.getProperty(\"user.timezone\");",
      "info" : "VariableDeclarationStatement[5778-5826]:VariableDeclarationStatement[5778-5826]"
    }, {
      "left" : "if (id != null)",
      "right" : "if (id != null)",
      "info" : "IfStatement[5855-5989]:IfStatement[5855-5989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5871-5989]:Block[5871-5989]"
    }, {
      "left" : "temp = forID(id);",
      "right" : "temp = forID(id);",
      "info" : "ExpressionStatement[5942-5959]:ExpressionStatement[5942-5959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6044-6110]:Block[6044-6110]"
    }, {
      "left" : "if (temp == null)",
      "right" : "if (temp == null)",
      "info" : "IfStatement[6135-6251]:IfStatement[6135-6251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6153-6251]:Block[6153-6251]"
    }, {
      "left" : "temp = forTimeZone(TimeZone.getDefault());",
      "right" : "temp = forTimeZone(TimeZone.getDefault());",
      "info" : "ExpressionStatement[6183-6225]:ExpressionStatement[6183-6225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6310-6368]:Block[6310-6368]"
    }, {
      "left" : "if (temp == null)",
      "right" : "if (temp == null)",
      "info" : "IfStatement[6389-6466]:IfStatement[6389-6466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6407-6466]:Block[6407-6466]"
    }, {
      "left" : "temp = UTC;",
      "right" : "temp = UTC;",
      "info" : "ExpressionStatement[6433-6444]:ExpressionStatement[6433-6444]"
    }, {
      "left" : "cDefault = zone = temp;",
      "right" : "cDefault = zone = temp;",
      "info" : "ExpressionStatement[6487-6510]:ExpressionStatement[6487-6510]"
    }, {
      "left" : "return zone;",
      "right" : "return zone;",
      "info" : "ReturnStatement[6561-6573]:ReturnStatement[6561-6573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7038-7428]:Block[7038-7428]"
    }, {
      "left" : "SecurityManager sm = System.getSecurityManager();",
      "right" : "SecurityManager sm = System.getSecurityManager();",
      "info" : "VariableDeclarationStatement[7048-7097]:VariableDeclarationStatement[7048-7097]"
    }, {
      "left" : "if (sm != null)",
      "right" : "if (sm != null)",
      "info" : "IfStatement[7106-7216]:IfStatement[7106-7216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7122-7216]:Block[7122-7216]"
    }, {
      "left" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));",
      "right" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));",
      "info" : "ExpressionStatement[7136-7206]:ExpressionStatement[7136-7206]"
    }, {
      "left" : "if (zone == null)",
      "right" : "if (zone == null)",
      "info" : "IfStatement[7225-7340]:IfStatement[7225-7340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7243-7340]:Block[7243-7340]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The datetime zone must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The datetime zone must not be null\");",
      "info" : "ThrowStatement[7257-7330]:ThrowStatement[7257-7330]"
    }, {
      "left" : "synchronized(DateTimeZone.class) {\n            cDefault = zone;\n        }",
      "right" : "synchronized(DateTimeZone.class) {\n            cDefault = zone;\n        }",
      "info" : "SynchronizedStatement[7349-7422]:SynchronizedStatement[7349-7422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7382-7422]:Block[7382-7422]"
    }, {
      "left" : "cDefault = zone;",
      "right" : "cDefault = zone;",
      "info" : "ExpressionStatement[7396-7412]:ExpressionStatement[7396-7412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8269-8947]:Block[8269-8947]"
    }, {
      "left" : "if (id == null)",
      "right" : "if (id == null)",
      "info" : "IfStatement[8279-8339]:IfStatement[8279-8339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8295-8339]:Block[8295-8339]"
    }, {
      "left" : "return getDefault();",
      "right" : "return getDefault();",
      "info" : "ReturnStatement[8309-8329]:ReturnStatement[8309-8329]"
    }, {
      "left" : "if (id.equals(\"UTC\"))",
      "right" : "if (id.equals(\"UTC\"))",
      "info" : "IfStatement[8348-8418]:IfStatement[8348-8418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8370-8418]:Block[8370-8418]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[8384-8408]:ReturnStatement[8384-8408]"
    }, {
      "left" : "DateTimeZone zone = cProvider.getZone(id);",
      "right" : "DateTimeZone zone = cProvider.getZone(id);",
      "info" : "VariableDeclarationStatement[8427-8469]:VariableDeclarationStatement[8427-8469]"
    }, {
      "left" : "if (zone != null)",
      "right" : "if (zone != null)",
      "info" : "IfStatement[8478-8532]:IfStatement[8478-8532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8496-8532]:Block[8496-8532]"
    }, {
      "left" : "return zone;",
      "right" : "return zone;",
      "info" : "ReturnStatement[8510-8522]:ReturnStatement[8510-8522]"
    }, {
      "left" : "if (id.startsWith(\"+\") || id.startsWith(\"-\"))",
      "right" : "if (id.startsWith(\"+\") || id.startsWith(\"-\"))",
      "info" : "IfStatement[8541-8842]:IfStatement[8541-8842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8587-8842]:Block[8587-8842]"
    }, {
      "left" : "int offset = parseOffset(id);",
      "right" : "int offset = parseOffset(id);",
      "info" : "VariableDeclarationStatement[8601-8630]:VariableDeclarationStatement[8601-8630]"
    }, {
      "left" : "if (offset == 0L)",
      "right" : "if (offset == 0L)",
      "info" : "IfStatement[8643-8832]:IfStatement[8643-8832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8661-8717]:Block[8661-8717]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[8679-8703]:ReturnStatement[8679-8703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8723-8832]:Block[8723-8832]"
    }, {
      "left" : "id = printOffset(offset);",
      "right" : "id = printOffset(offset);",
      "info" : "ExpressionStatement[8741-8766]:ExpressionStatement[8741-8766]"
    }, {
      "left" : "return fixedOffsetZone(id, offset);",
      "right" : "return fixedOffsetZone(id, offset);",
      "info" : "ReturnStatement[8783-8818]:ReturnStatement[8783-8818]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");",
      "right" : "throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");",
      "info" : "ThrowStatement[8851-8941]:ThrowStatement[8851-8941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9494-9555]:Block[9494-9555]"
    }, {
      "left" : "return forOffsetHoursMinutes(hoursOffset, 0);",
      "right" : "return forOffsetHoursMinutes(hoursOffset, 0);",
      "info" : "ReturnStatement[9504-9549]:ReturnStatement[9504-9549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11131-12095]:Block[11131-12284]"
    }, {
      "left" : "if (hoursOffset == 0 && minutesOffset == 0)",
      "right" : "if (hoursOffset == 0 && minutesOffset == 0)",
      "info" : "IfStatement[11141-11233]:IfStatement[11141-11233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11185-11233]:Block[11185-11233]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[11199-11223]:ReturnStatement[11199-11223]"
    }, {
      "left" : "if (hoursOffset < -23 || hoursOffset > 23)",
      "right" : "if (hoursOffset < -23 || hoursOffset > 23)",
      "info" : "IfStatement[11242-11382]:IfStatement[11242-11382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11285-11382]:Block[11285-11382]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);",
      "right" : "throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);",
      "info" : "ThrowStatement[11299-11372]:ThrowStatement[11299-11372]"
    }, {
      "left" : "if (minutesOffset < 0 || minutesOffset > 59)",
      "right" : "if (minutesOffset < -59 || minutesOffset > 59)",
      "info" : "IfStatement[11391-11537]:IfStatement[11391-11539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11436-11537]:Block[11438-11539]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);",
      "right" : "throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);",
      "info" : "ThrowStatement[11450-11527]:ThrowStatement[11452-11529]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[11546-11561]:VariableDeclarationStatement[11725-11740]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11570-12049]:TryStatement[11749-12238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11574-11935]:Block[11753-12124]"
    }, {
      "left" : "int hoursInMinutes = hoursOffset * 60;",
      "right" : "int hoursInMinutes = hoursOffset * 60;",
      "info" : "VariableDeclarationStatement[11588-11626]:VariableDeclarationStatement[11767-11805]"
    }, {
      "left" : "if (hoursInMinutes < 0)",
      "right" : "if (hoursInMinutes < 0)",
      "info" : "IfStatement[11639-11827]:IfStatement[11818-12016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11748-11827]:Block[11937-12016]"
    }, {
      "left" : "minutesOffset = hoursInMinutes + minutesOffset;",
      "right" : "minutesOffset = hoursInMinutes + minutesOffset;",
      "info" : "ExpressionStatement[11766-11813]:ExpressionStatement[11955-12002]"
    }, {
      "left" : "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",
      "right" : "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",
      "info" : "ExpressionStatement[11840-11925]:ExpressionStatement[12029-12114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11967-12049]:Block[12156-12238]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Offset is too large\");",
      "right" : "throw new IllegalArgumentException(\"Offset is too large\");",
      "info" : "ThrowStatement[11981-12039]:ThrowStatement[12170-12228]"
    }, {
      "left" : "return forOffsetMillis(offset);",
      "right" : "return forOffsetMillis(offset);",
      "info" : "ReturnStatement[12058-12089]:ReturnStatement[12247-12278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12416-12689]:Block[12605-12878]"
    }, {
      "left" : "if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS)",
      "right" : "if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS)",
      "info" : "IfStatement[12426-12586]:IfStatement[12615-12775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12487-12586]:Block[12676-12775]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Millis out of range: \" + millisOffset);",
      "right" : "throw new IllegalArgumentException(\"Millis out of range: \" + millisOffset);",
      "info" : "ThrowStatement[12501-12576]:ThrowStatement[12690-12765]"
    }, {
      "left" : "String id = printOffset(millisOffset);",
      "right" : "String id = printOffset(millisOffset);",
      "info" : "VariableDeclarationStatement[12595-12633]:VariableDeclarationStatement[12784-12822]"
    }, {
      "left" : "return fixedOffsetZone(id, millisOffset);",
      "right" : "return fixedOffsetZone(id, millisOffset);",
      "info" : "ReturnStatement[12642-12683]:ReturnStatement[12831-12872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13429-14644]:Block[13618-14833]"
    }, {
      "left" : "if (zone == null)",
      "right" : "if (zone == null)",
      "info" : "IfStatement[13439-13501]:IfStatement[13628-13690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13457-13501]:Block[13646-13690]"
    }, {
      "left" : "return getDefault();",
      "right" : "return getDefault();",
      "info" : "ReturnStatement[13471-13491]:ReturnStatement[13660-13680]"
    }, {
      "left" : "final String id = zone.getID();",
      "right" : "final String id = zone.getID();",
      "info" : "VariableDeclarationStatement[13510-13541]:VariableDeclarationStatement[13699-13730]"
    }, {
      "left" : "if (id.equals(\"UTC\"))",
      "right" : "if (id.equals(\"UTC\"))",
      "info" : "IfStatement[13550-13620]:IfStatement[13739-13809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13572-13620]:Block[13761-13809]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[13586-13610]:ReturnStatement[13775-13799]"
    }, {
      "left" : "DateTimeZone dtz = null;",
      "right" : "DateTimeZone dtz = null;",
      "info" : "VariableDeclarationStatement[13714-13738]:VariableDeclarationStatement[13903-13927]"
    }, {
      "left" : "String convId = getConvertedId(id);",
      "right" : "String convId = getConvertedId(id);",
      "info" : "VariableDeclarationStatement[13747-13782]:VariableDeclarationStatement[13936-13971]"
    }, {
      "left" : "if (convId != null)",
      "right" : "if (convId != null)",
      "info" : "IfStatement[13791-13867]:IfStatement[13980-14056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13811-13867]:Block[14000-14056]"
    }, {
      "left" : "dtz = cProvider.getZone(convId);",
      "right" : "dtz = cProvider.getZone(convId);",
      "info" : "ExpressionStatement[13825-13857]:ExpressionStatement[14014-14046]"
    }, {
      "left" : "if (dtz == null)",
      "right" : "if (dtz == null)",
      "info" : "IfStatement[13876-13945]:IfStatement[14065-14134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13893-13945]:Block[14082-14134]"
    }, {
      "left" : "dtz = cProvider.getZone(id);",
      "right" : "dtz = cProvider.getZone(id);",
      "info" : "ExpressionStatement[13907-13935]:ExpressionStatement[14096-14124]"
    }, {
      "left" : "if (dtz != null)",
      "right" : "if (dtz != null)",
      "info" : "IfStatement[13954-14006]:IfStatement[14143-14195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13971-14006]:Block[14160-14195]"
    }, {
      "left" : "return dtz;",
      "right" : "return dtz;",
      "info" : "ReturnStatement[13985-13996]:ReturnStatement[14174-14185]"
    }, {
      "left" : "if (convId == null)",
      "right" : "if (convId == null)",
      "info" : "IfStatement[14055-14539]:IfStatement[14244-14728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14075-14539]:Block[14264-14728]"
    }, {
      "left" : "convId = zone.getID();",
      "right" : "convId = zone.getID();",
      "info" : "ExpressionStatement[14089-14111]:ExpressionStatement[14278-14300]"
    }, {
      "left" : "if (convId.startsWith(\"GMT+\") || convId.startsWith(\"GMT-\"))",
      "right" : "if (convId.startsWith(\"GMT+\") || convId.startsWith(\"GMT-\"))",
      "info" : "IfStatement[14124-14529]:IfStatement[14313-14718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14184-14529]:Block[14373-14718]"
    }, {
      "left" : "convId = convId.substring(3);",
      "right" : "convId = convId.substring(3);",
      "info" : "ExpressionStatement[14202-14231]:ExpressionStatement[14391-14420]"
    }, {
      "left" : "int offset = parseOffset(convId);",
      "right" : "int offset = parseOffset(convId);",
      "info" : "VariableDeclarationStatement[14248-14281]:VariableDeclarationStatement[14437-14470]"
    }, {
      "left" : "if (offset == 0L)",
      "right" : "if (offset == 0L)",
      "info" : "IfStatement[14298-14515]:IfStatement[14487-14704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14316-14380]:Block[14505-14569]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[14338-14362]:ReturnStatement[14527-14551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14386-14515]:Block[14575-14704]"
    }, {
      "left" : "convId = printOffset(offset);",
      "right" : "convId = printOffset(offset);",
      "info" : "ExpressionStatement[14408-14437]:ExpressionStatement[14597-14626]"
    }, {
      "left" : "return fixedOffsetZone(convId, offset);",
      "right" : "return fixedOffsetZone(convId, offset);",
      "info" : "ReturnStatement[14458-14497]:ReturnStatement[14647-14686]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");",
      "right" : "throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");",
      "info" : "ThrowStatement[14548-14638]:ThrowStatement[14737-14827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14979-15588]:Block[15168-15777]"
    }, {
      "left" : "if (offset == 0)",
      "right" : "if (offset == 0)",
      "info" : "IfStatement[14989-15054]:IfStatement[15178-15243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15006-15054]:Block[15195-15243]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[15020-15044]:ReturnStatement[15209-15233]"
    }, {
      "left" : "if (iFixedOffsetCache == null)",
      "right" : "if (iFixedOffsetCache == null)",
      "info" : "IfStatement[15063-15189]:IfStatement[15252-15378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15094-15189]:Block[15283-15378]"
    }, {
      "left" : "iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",
      "right" : "iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",
      "info" : "ExpressionStatement[15108-15179]:ExpressionStatement[15297-15368]"
    }, {
      "left" : "DateTimeZone zone;",
      "right" : "DateTimeZone zone;",
      "info" : "VariableDeclarationStatement[15198-15216]:VariableDeclarationStatement[15387-15405]"
    }, {
      "left" : "Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);",
      "right" : "Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);",
      "info" : "VariableDeclarationStatement[15225-15281]:VariableDeclarationStatement[15414-15470]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[15290-15423]:IfStatement[15479-15612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15307-15423]:Block[15496-15612]"
    }, {
      "left" : "zone = ref.get();",
      "right" : "zone = ref.get();",
      "info" : "ExpressionStatement[15321-15338]:ExpressionStatement[15510-15527]"
    }, {
      "left" : "if (zone != null)",
      "right" : "if (zone != null)",
      "info" : "IfStatement[15351-15413]:IfStatement[15540-15602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15369-15413]:Block[15558-15602]"
    }, {
      "left" : "return zone;",
      "right" : "return zone;",
      "info" : "ReturnStatement[15387-15399]:ReturnStatement[15576-15588]"
    }, {
      "left" : "zone = new FixedDateTimeZone(id, null, offset, offset);",
      "right" : "zone = new FixedDateTimeZone(id, null, offset, offset);",
      "info" : "ExpressionStatement[15432-15487]:ExpressionStatement[15621-15676]"
    }, {
      "left" : "iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",
      "right" : "iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",
      "info" : "ExpressionStatement[15496-15561]:ExpressionStatement[15685-15750]"
    }, {
      "left" : "return zone;",
      "right" : "return zone;",
      "info" : "ReturnStatement[15570-15582]:ReturnStatement[15759-15771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15756-15793]:Block[15945-15982]"
    }, {
      "left" : "return cAvailableIDs;",
      "right" : "return cAvailableIDs;",
      "info" : "ReturnStatement[15766-15787]:ReturnStatement[15955-15976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16132-16165]:Block[16321-16354]"
    }, {
      "left" : "return cProvider;",
      "right" : "return cProvider;",
      "info" : "ReturnStatement[16142-16159]:ReturnStatement[16331-16348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16656-16873]:Block[16845-17062]"
    }, {
      "left" : "SecurityManager sm = System.getSecurityManager();",
      "right" : "SecurityManager sm = System.getSecurityManager();",
      "info" : "VariableDeclarationStatement[16666-16715]:VariableDeclarationStatement[16855-16904]"
    }, {
      "left" : "if (sm != null)",
      "right" : "if (sm != null)",
      "info" : "IfStatement[16724-16835]:IfStatement[16913-17024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16740-16835]:Block[16929-17024]"
    }, {
      "left" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setProvider\"));",
      "right" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setProvider\"));",
      "info" : "ExpressionStatement[16754-16825]:ExpressionStatement[16943-17014]"
    }, {
      "left" : "setProvider0(provider);",
      "right" : "setProvider0(provider);",
      "info" : "ExpressionStatement[16844-16867]:ExpressionStatement[17033-17056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17160-17804]:Block[17349-17993]"
    }, {
      "left" : "if (provider == null)",
      "right" : "if (provider == null)",
      "info" : "IfStatement[17170-17248]:IfStatement[17359-17437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17192-17248]:Block[17381-17437]"
    }, {
      "left" : "provider = getDefaultProvider();",
      "right" : "provider = getDefaultProvider();",
      "info" : "ExpressionStatement[17206-17238]:ExpressionStatement[17395-17427]"
    }, {
      "left" : "Set<String> ids = provider.getAvailableIDs();",
      "right" : "Set<String> ids = provider.getAvailableIDs();",
      "info" : "VariableDeclarationStatement[17257-17302]:VariableDeclarationStatement[17446-17491]"
    }, {
      "left" : "if (ids == null || ids.size() == 0)",
      "right" : "if (ids == null || ids.size() == 0)",
      "info" : "IfStatement[17311-17470]:IfStatement[17500-17659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17347-17470]:Block[17536-17659]"
    }, {
      "left" : "throw new IllegalArgumentException\n                (\"The provider doesn't have any available ids\");",
      "right" : "throw new IllegalArgumentException\n                (\"The provider doesn't have any available ids\");",
      "info" : "ThrowStatement[17361-17460]:ThrowStatement[17550-17649]"
    }, {
      "left" : "if (!ids.contains(\"UTC\"))",
      "right" : "if (!ids.contains(\"UTC\"))",
      "info" : "IfStatement[17479-17600]:IfStatement[17668-17789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17505-17600]:Block[17694-17789]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The provider doesn't support UTC\");",
      "right" : "throw new IllegalArgumentException(\"The provider doesn't support UTC\");",
      "info" : "ThrowStatement[17519-17590]:ThrowStatement[17708-17779]"
    }, {
      "left" : "if (!UTC.equals(provider.getZone(\"UTC\")))",
      "right" : "if (!UTC.equals(provider.getZone(\"UTC\")))",
      "info" : "IfStatement[17609-17739]:IfStatement[17798-17928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17651-17739]:Block[17840-17928]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid UTC zone provided\");",
      "right" : "throw new IllegalArgumentException(\"Invalid UTC zone provided\");",
      "info" : "ThrowStatement[17665-17729]:ThrowStatement[17854-17918]"
    }, {
      "left" : "cProvider = provider;",
      "right" : "cProvider = provider;",
      "info" : "ExpressionStatement[17748-17769]:ExpressionStatement[17937-17958]"
    }, {
      "left" : "cAvailableIDs = ids;",
      "right" : "cAvailableIDs = ids;",
      "info" : "ExpressionStatement[17778-17798]:ExpressionStatement[17967-17987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18200-19221]:Block[18389-19410]"
    }, {
      "left" : "Provider provider = null;",
      "right" : "Provider provider = null;",
      "info" : "VariableDeclarationStatement[18210-18235]:VariableDeclarationStatement[18399-18424]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18245-18791]:TryStatement[18434-18980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18249-18727]:Block[18438-18916]"
    }, {
      "left" : "String providerClass =\n                System.getProperty(\"org.joda.time.DateTimeZone.Provider\");",
      "right" : "String providerClass =\n                System.getProperty(\"org.joda.time.DateTimeZone.Provider\");",
      "info" : "VariableDeclarationStatement[18263-18360]:VariableDeclarationStatement[18452-18549]"
    }, {
      "left" : "if (providerClass != null)",
      "right" : "if (providerClass != null)",
      "info" : "IfStatement[18373-18717]:IfStatement[18562-18906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18400-18717]:Block[18589-18906]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18418-18703]:TryStatement[18607-18892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18422-18527]:Block[18611-18716]"
    }, {
      "left" : "provider = (Provider) Class.forName(providerClass).newInstance();",
      "right" : "provider = (Provider) Class.forName(providerClass).newInstance();",
      "info" : "ExpressionStatement[18444-18509]:ExpressionStatement[18633-18698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18549-18703]:Block[18738-18892]"
    }, {
      "left" : "Thread thread = Thread.currentThread();",
      "right" : "Thread thread = Thread.currentThread();",
      "info" : "VariableDeclarationStatement[18571-18610]:VariableDeclarationStatement[18760-18799]"
    }, {
      "left" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "right" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "info" : "ExpressionStatement[18631-18685]:ExpressionStatement[18820-18874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18757-18791]:Block[18946-18980]"
    }, {
      "left" : "if (provider == null)",
      "right" : "if (provider == null)",
      "info" : "IfStatement[18801-19104]:IfStatement[18990-19293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18823-19104]:Block[19012-19293]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18837-19094]:TryStatement[19026-19283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18841-18930]:Block[19030-19119]"
    }, {
      "left" : "provider = new ZoneInfoProvider(\"org/joda/time/tz/data\");",
      "right" : "provider = new ZoneInfoProvider(\"org/joda/time/tz/data\");",
      "info" : "ExpressionStatement[18859-18916]:ExpressionStatement[19048-19105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18952-19094]:Block[19141-19283]"
    }, {
      "left" : "Thread thread = Thread.currentThread();",
      "right" : "Thread thread = Thread.currentThread();",
      "info" : "VariableDeclarationStatement[18970-19009]:VariableDeclarationStatement[19159-19198]"
    }, {
      "left" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "right" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "info" : "ExpressionStatement[19026-19080]:ExpressionStatement[19215-19269]"
    }, {
      "left" : "if (provider == null)",
      "right" : "if (provider == null)",
      "info" : "IfStatement[19114-19189]:IfStatement[19303-19378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19136-19189]:Block[19325-19378]"
    }, {
      "left" : "provider = new UTCProvider();",
      "right" : "provider = new UTCProvider();",
      "info" : "ExpressionStatement[19150-19179]:ExpressionStatement[19339-19368]"
    }, {
      "left" : "return provider;",
      "right" : "return provider;",
      "info" : "ReturnStatement[19199-19215]:ReturnStatement[19388-19404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19562-19599]:Block[19751-19788]"
    }, {
      "left" : "return cNameProvider;",
      "right" : "return cNameProvider;",
      "info" : "ReturnStatement[19572-19593]:ReturnStatement[19761-19782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20104-20333]:Block[20293-20522]"
    }, {
      "left" : "SecurityManager sm = System.getSecurityManager();",
      "right" : "SecurityManager sm = System.getSecurityManager();",
      "info" : "VariableDeclarationStatement[20114-20163]:VariableDeclarationStatement[20303-20352]"
    }, {
      "left" : "if (sm != null)",
      "right" : "if (sm != null)",
      "info" : "IfStatement[20172-20287]:IfStatement[20361-20476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20188-20287]:Block[20377-20476]"
    }, {
      "left" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\"));",
      "right" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\"));",
      "info" : "ExpressionStatement[20202-20277]:ExpressionStatement[20391-20466]"
    }, {
      "left" : "setNameProvider0(nameProvider);",
      "right" : "setNameProvider0(nameProvider);",
      "info" : "ExpressionStatement[20296-20327]:ExpressionStatement[20485-20516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20636-20780]:Block[20825-20969]"
    }, {
      "left" : "if (nameProvider == null)",
      "right" : "if (nameProvider == null)",
      "info" : "IfStatement[20646-20736]:IfStatement[20835-20925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20672-20736]:Block[20861-20925]"
    }, {
      "left" : "nameProvider = getDefaultNameProvider();",
      "right" : "nameProvider = getDefaultNameProvider();",
      "info" : "ExpressionStatement[20686-20726]:ExpressionStatement[20875-20915]"
    }, {
      "left" : "cNameProvider = nameProvider;",
      "right" : "cNameProvider = nameProvider;",
      "info" : "ExpressionStatement[20745-20774]:ExpressionStatement[20934-20963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21092-21822]:Block[21281-22011]"
    }, {
      "left" : "NameProvider nameProvider = null;",
      "right" : "NameProvider nameProvider = null;",
      "info" : "VariableDeclarationStatement[21102-21135]:VariableDeclarationStatement[21291-21324]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21144-21685]:TryStatement[21333-21874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21148-21622]:Block[21337-21811]"
    }, {
      "left" : "String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");",
      "right" : "String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");",
      "info" : "VariableDeclarationStatement[21162-21247]:VariableDeclarationStatement[21351-21436]"
    }, {
      "left" : "if (providerClass != null)",
      "right" : "if (providerClass != null)",
      "info" : "IfStatement[21260-21612]:IfStatement[21449-21801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21287-21612]:Block[21476-21801]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21305-21598]:TryStatement[21494-21787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21309-21422]:Block[21498-21611]"
    }, {
      "left" : "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
      "right" : "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
      "info" : "ExpressionStatement[21331-21404]:ExpressionStatement[21520-21593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21444-21598]:Block[21633-21787]"
    }, {
      "left" : "Thread thread = Thread.currentThread();",
      "right" : "Thread thread = Thread.currentThread();",
      "info" : "VariableDeclarationStatement[21466-21505]:VariableDeclarationStatement[21655-21694]"
    }, {
      "left" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "right" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "info" : "ExpressionStatement[21526-21580]:ExpressionStatement[21715-21769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21652-21685]:Block[21841-21874]"
    }, {
      "left" : "if (nameProvider == null)",
      "right" : "if (nameProvider == null)",
      "info" : "IfStatement[21695-21786]:IfStatement[21884-21975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21721-21786]:Block[21910-21975]"
    }, {
      "left" : "nameProvider = new DefaultNameProvider();",
      "right" : "nameProvider = new DefaultNameProvider();",
      "info" : "ExpressionStatement[21735-21776]:ExpressionStatement[21924-21965]"
    }, {
      "left" : "return nameProvider;",
      "right" : "return nameProvider;",
      "info" : "ReturnStatement[21796-21816]:ReturnStatement[21985-22005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22128-23965]:Block[22317-24154]"
    }, {
      "left" : "Map<String, String> map = cZoneIdConversion;",
      "right" : "Map<String, String> map = cZoneIdConversion;",
      "info" : "VariableDeclarationStatement[22138-22182]:VariableDeclarationStatement[22327-22371]"
    }, {
      "left" : "if (map == null)",
      "right" : "if (map == null)",
      "info" : "IfStatement[22191-23931]:IfStatement[22380-24120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22208-23931]:Block[22397-24120]"
    }, {
      "left" : "map = new HashMap<String, String>();",
      "right" : "map = new HashMap<String, String>();",
      "info" : "ExpressionStatement[22276-22312]:ExpressionStatement[22465-22501]"
    }, {
      "left" : "map.put(\"GMT\", \"UTC\");",
      "right" : "map.put(\"GMT\", \"UTC\");",
      "info" : "ExpressionStatement[22325-22347]:ExpressionStatement[22514-22536]"
    }, {
      "left" : "map.put(\"WET\", \"WET\");",
      "right" : "map.put(\"WET\", \"WET\");",
      "info" : "ExpressionStatement[22360-22382]:ExpressionStatement[22549-22571]"
    }, {
      "left" : "map.put(\"CET\", \"CET\");",
      "right" : "map.put(\"CET\", \"CET\");",
      "info" : "ExpressionStatement[22395-22417]:ExpressionStatement[22584-22606]"
    }, {
      "left" : "map.put(\"MET\", \"CET\");",
      "right" : "map.put(\"MET\", \"CET\");",
      "info" : "ExpressionStatement[22430-22452]:ExpressionStatement[22619-22641]"
    }, {
      "left" : "map.put(\"ECT\", \"CET\");",
      "right" : "map.put(\"ECT\", \"CET\");",
      "info" : "ExpressionStatement[22465-22487]:ExpressionStatement[22654-22676]"
    }, {
      "left" : "map.put(\"EET\", \"EET\");",
      "right" : "map.put(\"EET\", \"EET\");",
      "info" : "ExpressionStatement[22500-22522]:ExpressionStatement[22689-22711]"
    }, {
      "left" : "map.put(\"MIT\", \"Pacific/Apia\");",
      "right" : "map.put(\"MIT\", \"Pacific/Apia\");",
      "info" : "ExpressionStatement[22535-22566]:ExpressionStatement[22724-22755]"
    }, {
      "left" : "map.put(\"HST\", \"Pacific/Honolulu\");",
      "right" : "map.put(\"HST\", \"Pacific/Honolulu\");",
      "info" : "ExpressionStatement[22579-22614]:ExpressionStatement[22768-22803]"
    }, {
      "left" : "map.put(\"AST\", \"America/Anchorage\");",
      "right" : "map.put(\"AST\", \"America/Anchorage\");",
      "info" : "ExpressionStatement[22650-22686]:ExpressionStatement[22839-22875]"
    }, {
      "left" : "map.put(\"PST\", \"America/Los_Angeles\");",
      "right" : "map.put(\"PST\", \"America/Los_Angeles\");",
      "info" : "ExpressionStatement[22699-22737]:ExpressionStatement[22888-22926]"
    }, {
      "left" : "map.put(\"MST\", \"America/Denver\");",
      "right" : "map.put(\"MST\", \"America/Denver\");",
      "info" : "ExpressionStatement[22750-22783]:ExpressionStatement[22939-22972]"
    }, {
      "left" : "map.put(\"PNT\", \"America/Phoenix\");",
      "right" : "map.put(\"PNT\", \"America/Phoenix\");",
      "info" : "ExpressionStatement[22819-22853]:ExpressionStatement[23008-23042]"
    }, {
      "left" : "map.put(\"CST\", \"America/Chicago\");",
      "right" : "map.put(\"CST\", \"America/Chicago\");",
      "info" : "ExpressionStatement[22866-22900]:ExpressionStatement[23055-23089]"
    }, {
      "left" : "map.put(\"EST\", \"America/New_York\");",
      "right" : "map.put(\"EST\", \"America/New_York\");",
      "info" : "ExpressionStatement[22913-22948]:ExpressionStatement[23102-23137]"
    }, {
      "left" : "map.put(\"IET\", \"America/Indiana/Indianapolis\");",
      "right" : "map.put(\"IET\", \"America/Indiana/Indianapolis\");",
      "info" : "ExpressionStatement[22984-23031]:ExpressionStatement[23173-23220]"
    }, {
      "left" : "map.put(\"PRT\", \"America/Puerto_Rico\");",
      "right" : "map.put(\"PRT\", \"America/Puerto_Rico\");",
      "info" : "ExpressionStatement[23044-23082]:ExpressionStatement[23233-23271]"
    }, {
      "left" : "map.put(\"CNT\", \"America/St_Johns\");",
      "right" : "map.put(\"CNT\", \"America/St_Johns\");",
      "info" : "ExpressionStatement[23095-23130]:ExpressionStatement[23284-23319]"
    }, {
      "left" : "map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");",
      "right" : "map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");",
      "info" : "ExpressionStatement[23143-23192]:ExpressionStatement[23332-23381]"
    }, {
      "left" : "map.put(\"BET\", \"America/Sao_Paulo\");",
      "right" : "map.put(\"BET\", \"America/Sao_Paulo\");",
      "info" : "ExpressionStatement[23205-23241]:ExpressionStatement[23394-23430]"
    }, {
      "left" : "map.put(\"ART\", \"Africa/Cairo\");",
      "right" : "map.put(\"ART\", \"Africa/Cairo\");",
      "info" : "ExpressionStatement[23254-23285]:ExpressionStatement[23443-23474]"
    }, {
      "left" : "map.put(\"CAT\", \"Africa/Harare\");",
      "right" : "map.put(\"CAT\", \"Africa/Harare\");",
      "info" : "ExpressionStatement[23298-23330]:ExpressionStatement[23487-23519]"
    }, {
      "left" : "map.put(\"EAT\", \"Africa/Addis_Ababa\");",
      "right" : "map.put(\"EAT\", \"Africa/Addis_Ababa\");",
      "info" : "ExpressionStatement[23343-23380]:ExpressionStatement[23532-23569]"
    }, {
      "left" : "map.put(\"NET\", \"Asia/Yerevan\");",
      "right" : "map.put(\"NET\", \"Asia/Yerevan\");",
      "info" : "ExpressionStatement[23393-23424]:ExpressionStatement[23582-23613]"
    }, {
      "left" : "map.put(\"PLT\", \"Asia/Karachi\");",
      "right" : "map.put(\"PLT\", \"Asia/Karachi\");",
      "info" : "ExpressionStatement[23437-23468]:ExpressionStatement[23626-23657]"
    }, {
      "left" : "map.put(\"IST\", \"Asia/Kolkata\");",
      "right" : "map.put(\"IST\", \"Asia/Kolkata\");",
      "info" : "ExpressionStatement[23481-23512]:ExpressionStatement[23670-23701]"
    }, {
      "left" : "map.put(\"BST\", \"Asia/Dhaka\");",
      "right" : "map.put(\"BST\", \"Asia/Dhaka\");",
      "info" : "ExpressionStatement[23525-23554]:ExpressionStatement[23714-23743]"
    }, {
      "left" : "map.put(\"VST\", \"Asia/Ho_Chi_Minh\");",
      "right" : "map.put(\"VST\", \"Asia/Ho_Chi_Minh\");",
      "info" : "ExpressionStatement[23567-23602]:ExpressionStatement[23756-23791]"
    }, {
      "left" : "map.put(\"CTT\", \"Asia/Shanghai\");",
      "right" : "map.put(\"CTT\", \"Asia/Shanghai\");",
      "info" : "ExpressionStatement[23615-23647]:ExpressionStatement[23804-23836]"
    }, {
      "left" : "map.put(\"JST\", \"Asia/Tokyo\");",
      "right" : "map.put(\"JST\", \"Asia/Tokyo\");",
      "info" : "ExpressionStatement[23660-23689]:ExpressionStatement[23849-23878]"
    }, {
      "left" : "map.put(\"ACT\", \"Australia/Darwin\");",
      "right" : "map.put(\"ACT\", \"Australia/Darwin\");",
      "info" : "ExpressionStatement[23702-23737]:ExpressionStatement[23891-23926]"
    }, {
      "left" : "map.put(\"AET\", \"Australia/Sydney\");",
      "right" : "map.put(\"AET\", \"Australia/Sydney\");",
      "info" : "ExpressionStatement[23750-23785]:ExpressionStatement[23939-23974]"
    }, {
      "left" : "map.put(\"SST\", \"Pacific/Guadalcanal\");",
      "right" : "map.put(\"SST\", \"Pacific/Guadalcanal\");",
      "info" : "ExpressionStatement[23798-23836]:ExpressionStatement[23987-24025]"
    }, {
      "left" : "map.put(\"NST\", \"Pacific/Auckland\");",
      "right" : "map.put(\"NST\", \"Pacific/Auckland\");",
      "info" : "ExpressionStatement[23849-23884]:ExpressionStatement[24038-24073]"
    }, {
      "left" : "cZoneIdConversion = map;",
      "right" : "cZoneIdConversion = map;",
      "info" : "ExpressionStatement[23897-23921]:ExpressionStatement[24086-24110]"
    }, {
      "left" : "return map.get(id);",
      "right" : "return map.get(id);",
      "info" : "ReturnStatement[23940-23959]:ReturnStatement[24129-24148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24014-24664]:Block[24203-24853]"
    }, {
      "left" : "Chronology chrono = new BaseChronology() {\n            public DateTimeZone getZone() {\n                return null;\n            }\n            public Chronology withUTC() {\n                return this;\n            }\n            public Chronology withZone(DateTimeZone zone) {\n                return this;\n            }\n            public String toString() {\n                return getClass().getName();\n            }\n        };",
      "right" : "Chronology chrono = new BaseChronology() {\n            public DateTimeZone getZone() {\n                return null;\n            }\n            public Chronology withUTC() {\n                return this;\n            }\n            public Chronology withZone(DateTimeZone zone) {\n                return this;\n            }\n            public String toString() {\n                return getClass().getName();\n            }\n        };",
      "info" : "VariableDeclarationStatement[24151-24577]:VariableDeclarationStatement[24340-24766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24236-24280]:Block[24425-24469]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24254-24266]:ReturnStatement[24443-24455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24321-24365]:Block[24510-24554]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[24339-24351]:ReturnStatement[24528-24540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24424-24468]:Block[24613-24657]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[24442-24454]:ReturnStatement[24631-24643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24506-24566]:Block[24695-24755]"
    }, {
      "left" : "return getClass().getName();",
      "right" : "return getClass().getName();",
      "info" : "ReturnStatement[24524-24552]:ReturnStatement[24713-24741]"
    }, {
      "left" : "return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);",
      "right" : "return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);",
      "info" : "ReturnStatement[24586-24658]:ReturnStatement[24775-24847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24996-26072]:Block[25185-26261]"
    }, {
      "left" : "StringBuffer buf = new StringBuffer();",
      "right" : "StringBuffer buf = new StringBuffer();",
      "info" : "VariableDeclarationStatement[25006-25044]:VariableDeclarationStatement[25195-25233]"
    }, {
      "left" : "if (offset >= 0)",
      "right" : "if (offset >= 0)",
      "info" : "IfStatement[25053-25186]:IfStatement[25242-25375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25070-25110]:Block[25259-25299]"
    }, {
      "left" : "buf.append('+');",
      "right" : "buf.append('+');",
      "info" : "ExpressionStatement[25084-25100]:ExpressionStatement[25273-25289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25116-25186]:Block[25305-25375]"
    }, {
      "left" : "buf.append('-');",
      "right" : "buf.append('-');",
      "info" : "ExpressionStatement[25130-25146]:ExpressionStatement[25319-25335]"
    }, {
      "left" : "offset = -offset;",
      "right" : "offset = -offset;",
      "info" : "ExpressionStatement[25159-25176]:ExpressionStatement[25348-25365]"
    }, {
      "left" : "int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;",
      "right" : "int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;",
      "info" : "VariableDeclarationStatement[25196-25251]:VariableDeclarationStatement[25385-25440]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, hours, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, hours, 2);",
      "info" : "ExpressionStatement[25260-25307]:ExpressionStatement[25449-25496]"
    }, {
      "left" : "offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;",
      "right" : "offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;",
      "info" : "ExpressionStatement[25316-25374]:ExpressionStatement[25505-25563]"
    }, {
      "left" : "int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;",
      "right" : "int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;",
      "info" : "VariableDeclarationStatement[25384-25443]:VariableDeclarationStatement[25573-25632]"
    }, {
      "left" : "buf.append(':');",
      "right" : "buf.append(':');",
      "info" : "ExpressionStatement[25452-25468]:ExpressionStatement[25641-25657]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, minutes, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, minutes, 2);",
      "info" : "ExpressionStatement[25477-25526]:ExpressionStatement[25666-25715]"
    }, {
      "left" : "offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;",
      "right" : "offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;",
      "info" : "ExpressionStatement[25535-25591]:ExpressionStatement[25724-25780]"
    }, {
      "left" : "if (offset == 0)",
      "right" : "if (offset == 0)",
      "info" : "IfStatement[25600-25663]:IfStatement[25789-25852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25617-25663]:Block[25806-25852]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[25631-25653]:ReturnStatement[25820-25842]"
    }, {
      "left" : "int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;",
      "right" : "int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;",
      "info" : "VariableDeclarationStatement[25673-25732]:VariableDeclarationStatement[25862-25921]"
    }, {
      "left" : "buf.append(':');",
      "right" : "buf.append(':');",
      "info" : "ExpressionStatement[25741-25757]:ExpressionStatement[25930-25946]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, seconds, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, seconds, 2);",
      "info" : "ExpressionStatement[25766-25815]:ExpressionStatement[25955-26004]"
    }, {
      "left" : "offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;",
      "right" : "offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;",
      "info" : "ExpressionStatement[25824-25880]:ExpressionStatement[26013-26069]"
    }, {
      "left" : "if (offset == 0)",
      "right" : "if (offset == 0)",
      "info" : "IfStatement[25889-25952]:IfStatement[26078-26141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25906-25952]:Block[26095-26141]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[25920-25942]:ReturnStatement[26109-26131]"
    }, {
      "left" : "buf.append('.');",
      "right" : "buf.append('.');",
      "info" : "ExpressionStatement[25962-25978]:ExpressionStatement[26151-26167]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, offset, 3);",
      "right" : "FormatUtils.appendPaddedInteger(buf, offset, 3);",
      "info" : "ExpressionStatement[25987-26035]:ExpressionStatement[26176-26224]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[26044-26066]:ReturnStatement[26233-26255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26263-26503]:Block[26452-26692]"
    }, {
      "left" : "if (cOffsetFormatter == null)",
      "right" : "if (cOffsetFormatter == null)",
      "info" : "IfStatement[26273-26464]:IfStatement[26462-26653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26303-26464]:Block[26492-26653]"
    }, {
      "left" : "cOffsetFormatter = new DateTimeFormatterBuilder()\n                .appendTimeZoneOffset(null, true, 2, 4)\n                .toFormatter();",
      "right" : "cOffsetFormatter = new DateTimeFormatterBuilder()\n                .appendTimeZoneOffset(null, true, 2, 4)\n                .toFormatter();",
      "info" : "ExpressionStatement[26317-26454]:ExpressionStatement[26506-26643]"
    }, {
      "left" : "return cOffsetFormatter;",
      "right" : "return cOffsetFormatter;",
      "info" : "ReturnStatement[26473-26497]:ReturnStatement[26662-26686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26819-26951]:Block[27008-27140]"
    }, {
      "left" : "if (id == null)",
      "right" : "if (id == null)",
      "info" : "IfStatement[26829-26927]:IfStatement[27018-27116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26845-26927]:Block[27034-27116]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Id must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Id must not be null\");",
      "info" : "ThrowStatement[26859-26917]:ThrowStatement[27048-27106]"
    }, {
      "left" : "iID = id;",
      "right" : "iID = id;",
      "info" : "ExpressionStatement[26936-26945]:ExpressionStatement[27125-27134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27210-27237]:Block[27399-27426]"
    }, {
      "left" : "return iID;",
      "right" : "return iID;",
      "info" : "ReturnStatement[27220-27231]:ReturnStatement[27409-27420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28085-28136]:Block[28274-28325]"
    }, {
      "left" : "return getShortName(instant, null);",
      "right" : "return getShortName(instant, null);",
      "info" : "ReturnStatement[28095-28130]:ReturnStatement[28284-28319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28673-29056]:Block[28862-29245]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[28683-28756]:IfStatement[28872-28945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28703-28756]:Block[28892-28945]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[28717-28746]:ExpressionStatement[28906-28935]"
    }, {
      "left" : "String nameKey = getNameKey(instant);",
      "right" : "String nameKey = getNameKey(instant);",
      "info" : "VariableDeclarationStatement[28765-28802]:VariableDeclarationStatement[28954-28991]"
    }, {
      "left" : "if (nameKey == null)",
      "right" : "if (nameKey == null)",
      "info" : "IfStatement[28811-28867]:IfStatement[29000-29056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28832-28867]:Block[29021-29056]"
    }, {
      "left" : "return iID;",
      "right" : "return iID;",
      "info" : "ReturnStatement[28846-28857]:ReturnStatement[29035-29046]"
    }, {
      "left" : "String name = cNameProvider.getShortName(locale, iID, nameKey);",
      "right" : "String name = cNameProvider.getShortName(locale, iID, nameKey);",
      "info" : "VariableDeclarationStatement[28876-28939]:VariableDeclarationStatement[29065-29128]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[28948-29002]:IfStatement[29137-29191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28966-29002]:Block[29155-29191]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[28980-28992]:ReturnStatement[29169-29181]"
    }, {
      "left" : "return printOffset(getOffset(instant));",
      "right" : "return printOffset(getOffset(instant));",
      "info" : "ReturnStatement[29011-29050]:ReturnStatement[29200-29239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29520-29566]:Block[29709-29755]"
    }, {
      "left" : "return getName(instant, null);",
      "right" : "return getName(instant, null);",
      "info" : "ReturnStatement[29530-29560]:ReturnStatement[29719-29749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30096-30474]:Block[30285-30663]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[30106-30179]:IfStatement[30295-30368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30126-30179]:Block[30315-30368]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[30140-30169]:ExpressionStatement[30329-30358]"
    }, {
      "left" : "String nameKey = getNameKey(instant);",
      "right" : "String nameKey = getNameKey(instant);",
      "info" : "VariableDeclarationStatement[30188-30225]:VariableDeclarationStatement[30377-30414]"
    }, {
      "left" : "if (nameKey == null)",
      "right" : "if (nameKey == null)",
      "info" : "IfStatement[30234-30290]:IfStatement[30423-30479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30255-30290]:Block[30444-30479]"
    }, {
      "left" : "return iID;",
      "right" : "return iID;",
      "info" : "ReturnStatement[30269-30280]:ReturnStatement[30458-30469]"
    }, {
      "left" : "String name = cNameProvider.getName(locale, iID, nameKey);",
      "right" : "String name = cNameProvider.getName(locale, iID, nameKey);",
      "info" : "VariableDeclarationStatement[30299-30357]:VariableDeclarationStatement[30488-30546]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[30366-30420]:IfStatement[30555-30609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30384-30420]:Block[30573-30609]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[30398-30410]:ReturnStatement[30587-30599]"
    }, {
      "left" : "return printOffset(getOffset(instant));",
      "right" : "return printOffset(getOffset(instant));",
      "info" : "ReturnStatement[30429-30468]:ReturnStatement[30618-30657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31059-31219]:Block[31248-31408]"
    }, {
      "left" : "if (instant == null)",
      "right" : "if (instant == null)",
      "info" : "IfStatement[31069-31166]:IfStatement[31258-31355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31090-31166]:Block[31279-31355]"
    }, {
      "left" : "return getOffset(DateTimeUtils.currentTimeMillis());",
      "right" : "return getOffset(DateTimeUtils.currentTimeMillis());",
      "info" : "ReturnStatement[31104-31156]:ReturnStatement[31293-31345]"
    }, {
      "left" : "return getOffset(instant.getMillis());",
      "right" : "return getOffset(instant.getMillis());",
      "info" : "ReturnStatement[31175-31213]:ReturnStatement[31364-31402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32375-32447]:Block[32564-32636]"
    }, {
      "left" : "return getOffset(instant) == getStandardOffset(instant);",
      "right" : "return getOffset(instant) == getStandardOffset(instant);",
      "info" : "ReturnStatement[32385-32441]:ReturnStatement[32574-32630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34094-35604]:Block[34283-35793]"
    }, {
      "left" : "final int offsetLocal = getOffset(instantLocal);",
      "right" : "final int offsetLocal = getOffset(instantLocal);",
      "info" : "VariableDeclarationStatement[34163-34211]:VariableDeclarationStatement[34352-34400]"
    }, {
      "left" : "final long instantAdjusted = instantLocal - offsetLocal;",
      "right" : "final long instantAdjusted = instantLocal - offsetLocal;",
      "info" : "VariableDeclarationStatement[34292-34348]:VariableDeclarationStatement[34481-34537]"
    }, {
      "left" : "final int offsetAdjusted = getOffset(instantAdjusted);",
      "right" : "final int offsetAdjusted = getOffset(instantAdjusted);",
      "info" : "VariableDeclarationStatement[34357-34411]:VariableDeclarationStatement[34546-34600]"
    }, {
      "left" : "if (offsetLocal != offsetAdjusted)",
      "right" : "if (offsetLocal != offsetAdjusted)",
      "info" : "IfStatement[34485-35567]:IfStatement[34674-35756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34520-35197]:Block[34709-35386]"
    }, {
      "left" : "if ((offsetLocal - offsetAdjusted) < 0)",
      "right" : "if ((offsetLocal - offsetAdjusted) < 0)",
      "info" : "IfStatement[34686-35187]:IfStatement[34875-35376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34726-35187]:Block[34915-35376]"
    }, {
      "left" : "long nextLocal = nextTransition(instantAdjusted);",
      "right" : "long nextLocal = nextTransition(instantAdjusted);",
      "info" : "VariableDeclarationStatement[34934-34983]:VariableDeclarationStatement[35123-35172]"
    }, {
      "left" : "long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);",
      "right" : "long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);",
      "info" : "VariableDeclarationStatement[35000-35066]:VariableDeclarationStatement[35189-35255]"
    }, {
      "left" : "if (nextLocal != nextAdjusted)",
      "right" : "if (nextLocal != nextAdjusted)",
      "info" : "IfStatement[35083-35173]:IfStatement[35272-35362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35114-35173]:Block[35303-35362]"
    }, {
      "left" : "return offsetLocal;",
      "right" : "return offsetLocal;",
      "info" : "ReturnStatement[35136-35155]:ReturnStatement[35325-35344]"
    }, {
      "left" : "if (offsetLocal >= 0)",
      "right" : "if (offsetLocal >= 0)",
      "info" : "IfStatement[35203-35567]:IfStatement[35392-35756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35225-35567]:Block[35414-35756]"
    }, {
      "left" : "long prev = previousTransition(instantAdjusted);",
      "right" : "long prev = previousTransition(instantAdjusted);",
      "info" : "VariableDeclarationStatement[35239-35287]:VariableDeclarationStatement[35428-35476]"
    }, {
      "left" : "if (prev < instantAdjusted)",
      "right" : "if (prev < instantAdjusted)",
      "info" : "IfStatement[35300-35557]:IfStatement[35489-35746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35328-35557]:Block[35517-35746]"
    }, {
      "left" : "int offsetPrev = getOffset(prev);",
      "right" : "int offsetPrev = getOffset(prev);",
      "info" : "VariableDeclarationStatement[35346-35379]:VariableDeclarationStatement[35535-35568]"
    }, {
      "left" : "int diff = offsetPrev - offsetLocal;",
      "right" : "int diff = offsetPrev - offsetLocal;",
      "info" : "VariableDeclarationStatement[35396-35432]:VariableDeclarationStatement[35585-35621]"
    }, {
      "left" : "if (instantAdjusted - prev <= diff)",
      "right" : "if (instantAdjusted - prev <= diff)",
      "info" : "IfStatement[35449-35543]:IfStatement[35638-35732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35485-35543]:Block[35674-35732]"
    }, {
      "left" : "return offsetPrev;",
      "right" : "return offsetPrev;",
      "info" : "ReturnStatement[35507-35525]:ReturnStatement[35696-35714]"
    }, {
      "left" : "return offsetAdjusted;",
      "right" : "return offsetAdjusted;",
      "info" : "ReturnStatement[35576-35598]:ReturnStatement[35765-35787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36101-36482]:Block[36290-36671]"
    }, {
      "left" : "int offset = getOffset(instantUTC);",
      "right" : "int offset = getOffset(instantUTC);",
      "info" : "VariableDeclarationStatement[36111-36146]:VariableDeclarationStatement[36300-36335]"
    }, {
      "left" : "long instantLocal = instantUTC + offset;",
      "right" : "long instantLocal = instantUTC + offset;",
      "info" : "VariableDeclarationStatement[36155-36195]:VariableDeclarationStatement[36344-36384]"
    }, {
      "left" : "if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0)",
      "right" : "if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0)",
      "info" : "IfStatement[36283-36447]:IfStatement[36472-36636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36350-36447]:Block[36539-36636]"
    }, {
      "left" : "throw new ArithmeticException(\"Adding time zone offset caused overflow\");",
      "right" : "throw new ArithmeticException(\"Adding time zone offset caused overflow\");",
      "info" : "ThrowStatement[36364-36437]:ThrowStatement[36553-36626]"
    }, {
      "left" : "return instantLocal;",
      "right" : "return instantLocal;",
      "info" : "ReturnStatement[36456-36476]:ReturnStatement[36645-36665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37485-37824]:Block[37674-38013]"
    }, {
      "left" : "int offsetOriginal = getOffset(originalInstantUTC);",
      "right" : "int offsetOriginal = getOffset(originalInstantUTC);",
      "info" : "VariableDeclarationStatement[37495-37546]:VariableDeclarationStatement[37684-37735]"
    }, {
      "left" : "long instantUTC = instantLocal - offsetOriginal;",
      "right" : "long instantUTC = instantLocal - offsetOriginal;",
      "info" : "VariableDeclarationStatement[37555-37603]:VariableDeclarationStatement[37744-37792]"
    }, {
      "left" : "int offsetLocalFromOriginal = getOffset(instantUTC);",
      "right" : "int offsetLocalFromOriginal = getOffset(instantUTC);",
      "info" : "VariableDeclarationStatement[37612-37664]:VariableDeclarationStatement[37801-37853]"
    }, {
      "left" : "if (offsetLocalFromOriginal == offsetOriginal)",
      "right" : "if (offsetLocalFromOriginal == offsetOriginal)",
      "info" : "IfStatement[37673-37762]:IfStatement[37862-37951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37720-37762]:Block[37909-37951]"
    }, {
      "left" : "return instantUTC;",
      "right" : "return instantUTC;",
      "info" : "ReturnStatement[37734-37752]:ReturnStatement[37923-37941]"
    }, {
      "left" : "return convertLocalToUTC(instantLocal, strict);",
      "right" : "return convertLocalToUTC(instantLocal, strict);",
      "info" : "ReturnStatement[37771-37818]:ReturnStatement[37960-38007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38499-40577]:Block[38688-40766]"
    }, {
      "left" : "int offsetLocal = getOffset(instantLocal);",
      "right" : "int offsetLocal = getOffset(instantLocal);",
      "info" : "VariableDeclarationStatement[38568-38610]:VariableDeclarationStatement[38757-38799]"
    }, {
      "left" : "int offset = getOffset(instantLocal - offsetLocal);",
      "right" : "int offset = getOffset(instantLocal - offsetLocal);",
      "info" : "VariableDeclarationStatement[38691-38742]:VariableDeclarationStatement[38880-38931]"
    }, {
      "left" : "if (offsetLocal != offset)",
      "right" : "if (offsetLocal != offset)",
      "info" : "IfStatement[38816-40205]:IfStatement[39005-40394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38843-40205]:Block[39032-40394]"
    }, {
      "left" : "if (strict || offsetLocal < 0)",
      "right" : "if (strict || offsetLocal < 0)",
      "info" : "IfStatement[39062-40195]:IfStatement[39251-40384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39093-40195]:Block[39282-40384]"
    }, {
      "left" : "long nextLocal = nextTransition(instantLocal - offsetLocal);",
      "right" : "long nextLocal = nextTransition(instantLocal - offsetLocal);",
      "info" : "VariableDeclarationStatement[39165-39225]:VariableDeclarationStatement[39354-39414]"
    }, {
      "left" : "if (nextLocal == (instantLocal - offsetLocal))",
      "right" : "if (nextLocal == (instantLocal - offsetLocal))",
      "info" : "IfStatement[39242-39356]:IfStatement[39431-39545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39289-39356]:Block[39478-39545]"
    }, {
      "left" : "nextLocal = Long.MAX_VALUE;",
      "right" : "nextLocal = Long.MAX_VALUE;",
      "info" : "ExpressionStatement[39311-39338]:ExpressionStatement[39500-39527]"
    }, {
      "left" : "long nextAdjusted = nextTransition(instantLocal - offset);",
      "right" : "long nextAdjusted = nextTransition(instantLocal - offset);",
      "info" : "VariableDeclarationStatement[39373-39431]:VariableDeclarationStatement[39562-39620]"
    }, {
      "left" : "if (nextAdjusted == (instantLocal - offset))",
      "right" : "if (nextAdjusted == (instantLocal - offset))",
      "info" : "IfStatement[39448-39563]:IfStatement[39637-39752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39493-39563]:Block[39682-39752]"
    }, {
      "left" : "nextAdjusted = Long.MAX_VALUE;",
      "right" : "nextAdjusted = Long.MAX_VALUE;",
      "info" : "ExpressionStatement[39515-39545]:ExpressionStatement[39704-39734]"
    }, {
      "left" : "if (nextLocal != nextAdjusted)",
      "right" : "if (nextLocal != nextAdjusted)",
      "info" : "IfStatement[39580-40181]:IfStatement[39769-40370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39611-40181]:Block[39800-40370]"
    }, {
      "left" : "if (strict)",
      "right" : "if (strict)",
      "info" : "IfStatement[39682-40163]:IfStatement[39871-40352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39694-39852]:Block[39883-40041]"
    }, {
      "left" : "throw new IllegalInstantException(instantLocal, getID());",
      "right" : "throw new IllegalInstantException(instantLocal, getID());",
      "info" : "ThrowStatement[39773-39830]:ThrowStatement[39962-40019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39858-40163]:Block[40047-40352]"
    }, {
      "left" : "offset = offsetLocal;",
      "right" : "offset = offsetLocal;",
      "info" : "ExpressionStatement[40120-40141]:ExpressionStatement[40309-40330]"
    }, {
      "left" : "long instantUTC = instantLocal - offset;",
      "right" : "long instantUTC = instantLocal - offset;",
      "info" : "VariableDeclarationStatement[40244-40284]:VariableDeclarationStatement[40433-40473]"
    }, {
      "left" : "if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0)",
      "right" : "if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0)",
      "info" : "IfStatement[40374-40544]:IfStatement[40563-40733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40442-40544]:Block[40631-40733]"
    }, {
      "left" : "throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");",
      "right" : "throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");",
      "info" : "ThrowStatement[40456-40534]:ThrowStatement[40645-40723]"
    }, {
      "left" : "return instantUTC;",
      "right" : "return instantUTC;",
      "info" : "ReturnStatement[40553-40571]:ReturnStatement[40742-40760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41136-41439]:Block[41325-41628]"
    }, {
      "left" : "if (newZone == null)",
      "right" : "if (newZone == null)",
      "info" : "IfStatement[41146-41227]:IfStatement[41335-41416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41167-41227]:Block[41356-41416]"
    }, {
      "left" : "newZone = DateTimeZone.getDefault();",
      "right" : "newZone = DateTimeZone.getDefault();",
      "info" : "ExpressionStatement[41181-41217]:ExpressionStatement[41370-41406]"
    }, {
      "left" : "if (newZone == this)",
      "right" : "if (newZone == this)",
      "info" : "IfStatement[41236-41299]:IfStatement[41425-41488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41257-41299]:Block[41446-41488]"
    }, {
      "left" : "return oldInstant;",
      "right" : "return oldInstant;",
      "info" : "ReturnStatement[41271-41289]:ReturnStatement[41460-41478]"
    }, {
      "left" : "long instantLocal = convertUTCToLocal(oldInstant);",
      "right" : "long instantLocal = convertUTCToLocal(oldInstant);",
      "info" : "VariableDeclarationStatement[41308-41358]:VariableDeclarationStatement[41497-41547]"
    }, {
      "left" : "return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",
      "right" : "return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",
      "info" : "ReturnStatement[41367-41433]:ReturnStatement[41556-41622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46457-46691]:Block[46646-46880]"
    }, {
      "left" : "if (isFixed())",
      "right" : "if (isFixed())",
      "info" : "IfStatement[46467-46519]:IfStatement[46656-46708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46482-46519]:Block[46671-46708]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46496-46509]:ReturnStatement[46685-46698]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[46528-46685]:TryStatement[46717-46874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46532-46613]:Block[46721-46802]"
    }, {
      "left" : "localDateTime.toDateTime(this);",
      "right" : "localDateTime.toDateTime(this);",
      "info" : "ExpressionStatement[46546-46577]:ExpressionStatement[46735-46766]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46590-46603]:ReturnStatement[46779-46792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46649-46685]:Block[46838-46874]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46663-46675]:ReturnStatement[46852-46864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47012-48324]:Block[47201-48513]"
    }, {
      "left" : "long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;",
      "right" : "long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;",
      "info" : "VariableDeclarationStatement[47181-47250]:VariableDeclarationStatement[47370-47439]"
    }, {
      "left" : "long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;",
      "right" : "long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;",
      "info" : "VariableDeclarationStatement[47259-47327]:VariableDeclarationStatement[47448-47516]"
    }, {
      "left" : "long offsetBefore = getOffset(instantBefore);",
      "right" : "long offsetBefore = getOffset(instantBefore);",
      "info" : "VariableDeclarationStatement[47336-47381]:VariableDeclarationStatement[47525-47570]"
    }, {
      "left" : "long offsetAfter = getOffset(instantAfter);",
      "right" : "long offsetAfter = getOffset(instantAfter);",
      "info" : "VariableDeclarationStatement[47390-47433]:VariableDeclarationStatement[47579-47622]"
    }, {
      "left" : "if (offsetBefore <= offsetAfter)",
      "right" : "if (offsetBefore <= offsetAfter)",
      "info" : "IfStatement[47442-47576]:IfStatement[47631-47765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47475-47576]:Block[47664-47765]"
    }, {
      "left" : "return instant;",
      "right" : "return instant;",
      "info" : "ReturnStatement[47489-47504]:ReturnStatement[47678-47693]"
    }, {
      "left" : "long diff = offsetBefore - offsetAfter;",
      "right" : "long diff = offsetBefore - offsetAfter;",
      "info" : "VariableDeclarationStatement[47664-47703]:VariableDeclarationStatement[47853-47892]"
    }, {
      "left" : "long transition = nextTransition(instantBefore);",
      "right" : "long transition = nextTransition(instantBefore);",
      "info" : "VariableDeclarationStatement[47712-47760]:VariableDeclarationStatement[47901-47949]"
    }, {
      "left" : "long overlapStart = transition - diff;",
      "right" : "long overlapStart = transition - diff;",
      "info" : "VariableDeclarationStatement[47769-47807]:VariableDeclarationStatement[47958-47996]"
    }, {
      "left" : "long overlapEnd = transition + diff;",
      "right" : "long overlapEnd = transition + diff;",
      "info" : "VariableDeclarationStatement[47816-47852]:VariableDeclarationStatement[48005-48041]"
    }, {
      "left" : "if (instant < overlapStart || instant >= overlapEnd)",
      "right" : "if (instant < overlapStart || instant >= overlapEnd)",
      "info" : "IfStatement[47861-47970]:IfStatement[48050-48159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47914-47970]:Block[48103-48159]"
    }, {
      "left" : "return instant;",
      "right" : "return instant;",
      "info" : "ReturnStatement[47926-47941]:ReturnStatement[48115-48130]"
    }, {
      "left" : "long afterStart = instant - overlapStart;",
      "right" : "long afterStart = instant - overlapStart;",
      "info" : "VariableDeclarationStatement[48016-48057]:VariableDeclarationStatement[48205-48246]"
    }, {
      "left" : "if (afterStart >= diff)",
      "right" : "if (afterStart >= diff)",
      "info" : "IfStatement[48066-48318]:IfStatement[48255-48507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48090-48200]:Block[48279-48389]"
    }, {
      "left" : "return earlierOrLater ? instant : instant - diff;",
      "right" : "return earlierOrLater ? instant : instant - diff;",
      "info" : "ReturnStatement[48141-48190]:ReturnStatement[48330-48379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48206-48318]:Block[48395-48507]"
    }, {
      "left" : "return earlierOrLater ? instant + diff : instant;",
      "right" : "return earlierOrLater ? instant + diff : instant;",
      "info" : "ReturnStatement[48259-48308]:ReturnStatement[48448-48497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49755-49814]:Block[49944-50003]"
    }, {
      "left" : "return java.util.TimeZone.getTimeZone(iID);",
      "right" : "return java.util.TimeZone.getTimeZone(iID);",
      "info" : "ReturnStatement[49765-49808]:ReturnStatement[49954-49997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50188-50235]:Block[50377-50424]"
    }, {
      "left" : "return 57 + getID().hashCode();",
      "right" : "return 57 + getID().hashCode();",
      "info" : "ReturnStatement[50198-50229]:ReturnStatement[50387-50418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50383-50414]:Block[50572-50603]"
    }, {
      "left" : "return getID();",
      "right" : "return getID();",
      "info" : "ReturnStatement[50393-50408]:ReturnStatement[50582-50597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50744-50781]:Block[50933-50970]"
    }, {
      "left" : "return new Stub(iID);",
      "right" : "return new Stub(iID);",
      "info" : "ReturnStatement[50754-50775]:ReturnStatement[50943-50964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51205-51238]:Block[51394-51427]"
    }, {
      "left" : "iID = id;",
      "right" : "iID = id;",
      "info" : "ExpressionStatement[51219-51228]:ExpressionStatement[51408-51417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51316-51358]:Block[51505-51547]"
    }, {
      "left" : "out.writeUTF(iID);",
      "right" : "out.writeUTF(iID);",
      "info" : "ExpressionStatement[51330-51348]:ExpressionStatement[51519-51537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51433-51476]:Block[51622-51665]"
    }, {
      "left" : "iID = in.readUTF();",
      "right" : "iID = in.readUTF();",
      "info" : "ExpressionStatement[51447-51466]:ExpressionStatement[51636-51655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51544-51586]:Block[51733-51775]"
    }, {
      "left" : "return forID(iID);",
      "right" : "return forID(iID);",
      "info" : "ReturnStatement[51558-51576]:ReturnStatement[51747-51765]"
    } ]
  },
  "interFileMappings" : { }
}