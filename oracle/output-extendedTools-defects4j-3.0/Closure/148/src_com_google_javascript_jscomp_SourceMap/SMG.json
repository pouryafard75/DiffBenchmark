{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SourceMap",
      "right" : "SourceMap",
      "info" : "TypeDeclaration[867-16711]:TypeDeclaration[867-18836]"
    }, {
      "left" : "String sourceFile;",
      "right" : "String sourceFile;",
      "info" : "FieldDeclaration[1379-1443]:FieldDeclaration[1432-1496]"
    }, {
      "left" : "Position originalPosition;",
      "right" : "Position originalPosition;",
      "info" : "FieldDeclaration[1449-1670]:FieldDeclaration[1502-1723]"
    }, {
      "left" : "Position startPosition;",
      "right" : "Position startPosition;",
      "info" : "FieldDeclaration[1676-1837]:FieldDeclaration[1729-1890]"
    }, {
      "left" : "Position endPosition;",
      "right" : "Position endPosition;",
      "info" : "FieldDeclaration[1843-2000]:FieldDeclaration[1896-2053]"
    }, {
      "left" : "String originalName;",
      "right" : "String originalName;",
      "info" : "FieldDeclaration[2006-2147]:FieldDeclaration[2059-2200]"
    }, {
      "left" : "private List<Mapping> mappings = Lists.newArrayList();",
      "right" : "private List<Mapping> mappings = Lists.newArrayList();",
      "info" : "FieldDeclaration[2929-3067]:FieldDeclaration[3916-4054]"
    }, {
      "left" : "private Position offsetPosition = new Position(0, 0);",
      "right" : "private Position offsetPosition = new Position(0, 0);",
      "info" : "FieldDeclaration[3071-3261]:FieldDeclaration[4058-4248]"
    }, {
      "left" : "private Position prefixPosition = new Position(0, 0);",
      "right" : "private Position prefixPosition = new Position(0, 0);",
      "info" : "FieldDeclaration[3265-3485]:FieldDeclaration[4252-4472]"
    }, {
      "left" : "private static String escapeString(String value)",
      "right" : "private static String escapeString(String value)",
      "info" : "MethodDeclaration[3489-3657]:MethodDeclaration[4476-4644]"
    }, {
      "left" : "private String lastSourceFile = null;",
      "right" : "private String lastSourceFile = null;",
      "info" : "FieldDeclaration[3660-3697]:FieldDeclaration[2348-2443]"
    }, {
      "left" : "private String lastSourceFileEscaped = null;",
      "right" : "private String lastSourceFileEscaped = null;",
      "info" : "FieldDeclaration[3700-3744]:FieldDeclaration[2448-2492]"
    }, {
      "left" : "void addMapping(Node node, Position startPosition, Position endPosition)",
      "right" : "void addMapping(Node node, Position startPosition, Position endPosition)",
      "info" : "MethodDeclaration[3748-6037]:MethodDeclaration[4648-6830]"
    }, {
      "left" : "void setWrapperPrefix(String prefix)",
      "right" : "void setWrapperPrefix(String prefix)",
      "info" : "MethodDeclaration[6041-6684]:MethodDeclaration[6834-7477]"
    }, {
      "left" : "void setStartingPosition(int offsetLine, int offsetIndex)",
      "right" : "void setStartingPosition(int offsetLine, int offsetIndex)",
      "info" : "MethodDeclaration[6688-7447]:MethodDeclaration[7481-8240]"
    }, {
      "left" : "void reset()",
      "right" : "void reset()",
      "info" : "MethodDeclaration[7451-7678]:MethodDeclaration[8244-8471]"
    }, {
      "left" : "public void appendTo(Appendable out, String name) throws IOException",
      "right" : "public void appendTo(Appendable out, String name) throws IOException",
      "info" : "MethodDeclaration[7953-10286]:MethodDeclaration[8475-10757]"
    }, {
      "left" : "LineMapper",
      "right" : "MappingTraversal",
      "info" : "TypeDeclaration[10290-16709]:TypeDeclaration[14419-18834]"
    }, {
      "left" : "private final Appendable out;",
      "right" : "private final Appendable out;",
      "info" : "FieldDeclaration[10566-10595]:FieldDeclaration[11473-11502]"
    }, {
      "left" : "private int line;",
      "right" : "private int line;",
      "info" : "FieldDeclaration[10600-10617]:FieldDeclaration[14659-14676]"
    }, {
      "left" : "private int col;",
      "right" : "private int col;",
      "info" : "FieldDeclaration[10622-10638]:FieldDeclaration[14681-14697]"
    }, {
      "left" : "private boolean firstChar = true;",
      "right" : "private boolean firstChar = true;",
      "info" : "FieldDeclaration[10704-10737]:FieldDeclaration[11569-11602]"
    }, {
      "left" : "private final static String UNMAPPED_STRING = \"-1\";",
      "right" : "private final static String UNMAPPED_STRING = \"-1\";",
      "info" : "FieldDeclaration[10743-10794]:FieldDeclaration[11608-11659]"
    }, {
      "left" : "private final static int UNMAPPED = -1;",
      "right" : "private final static int UNMAPPED = -1;",
      "info" : "FieldDeclaration[10800-10839]:FieldDeclaration[1136-1175]"
    }, {
      "left" : "LineMapper(Appendable out)",
      "right" : "LineMapper(Appendable out)",
      "info" : "MethodDeclaration[10845-10901]:MethodDeclaration[11752-11808]"
    }, {
      "left" : "// Prevent the creation of unnecessary temporary stings for often\n        // repeated values.\n\n\n\n    // Append the line mapping entries.\n    void appendLineMappings() throws IOException",
      "right" : "void traverse(MappingVisitor v) throws IOException",
      "info" : "MethodDeclaration[10907-13467]:MethodDeclaration[14775-16100]"
    }, {
      "left" : "private void openLine() throws IOException",
      "right" : "private void openLine() throws IOException",
      "info" : "MethodDeclaration[13472-13574]:MethodDeclaration[12893-13087]"
    }, {
      "left" : "private void closeLine() throws IOException",
      "right" : "private void closeLine() throws IOException",
      "info" : "MethodDeclaration[13579-13655]:MethodDeclaration[13093-13253]"
    }, {
      "left" : "private void addCharEntry(String id) throws IOException",
      "right" : "private void addCharEntry(String id) throws IOException",
      "info" : "MethodDeclaration[13660-13843]:MethodDeclaration[13259-13584]"
    }, {
      "left" : "private int getAdjustedLine(Position p)",
      "right" : "private int getAdjustedLine(Position p)",
      "info" : "MethodDeclaration[13849-14035]:MethodDeclaration[16106-16292]"
    }, {
      "left" : "private int getAdjustedCol(Position p)",
      "right" : "private int getAdjustedCol(Position p)",
      "info" : "MethodDeclaration[14041-14406]:MethodDeclaration[16298-16663]"
    }, {
      "left" : "private boolean isOverlapped(Mapping m1, Mapping m2)",
      "right" : "private boolean isOverlapped(Mapping m1, Mapping m2)",
      "info" : "MethodDeclaration[14412-14867]:MethodDeclaration[16669-17124]"
    }, {
      "left" : "private void writeClosedMapping(Mapping m) throws IOException",
      "right" : "private void maybeVisit(MappingVisitor v, Mapping m) throws IOException",
      "info" : "MethodDeclaration[14873-15412]:MethodDeclaration[17130-17670]"
    }, {
      "left" : "private void writeCharsBetween(Mapping prev, Mapping next)\n        throws IOException",
      "right" : "private void maybeVisitParent(MappingVisitor v, Mapping parent, Mapping m)\n        throws IOException",
      "info" : "MethodDeclaration[15418-15863]:MethodDeclaration[17676-18222]"
    }, {
      "left" : "private void writeCharsUpTo(\n        int nextLine, int nextCol, int id)\n        throws IOException",
      "right" : "public void visit(Mapping m, int line, int col, int nextLine, int nextCol)\n      throws IOException",
      "info" : "MethodDeclaration[15869-16705]:MethodDeclaration[11814-12583]"
    } ],
    "mappings" : [
 {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[2370-2384]:SingleVariableDeclaration[2696-2710]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2393-2404]:SimpleType[2719-2730]"
    }, {
      "left" : "out.append(\"[\");",
      "right" : "out.append(\"[\");",
      "info" : "ExpressionStatement[2413-2429]:ExpressionStatement[2739-2755]"
    }, {
      "left" : "out",
      "right" : "out",
      "info" : "METHOD_INVOCATION_RECEIVER[2437-2440]:METHOD_INVOCATION_RECEIVER[3431-3434]"
    }, {
      "left" : "out.append(\",\");",
      "right" : "out.append(\",\");",
      "info" : "ExpressionStatement[2538-2554]:ExpressionStatement[3408-3424]"
    }, {
      "left" : "out",
      "right" : "out",
      "info" : "METHOD_INVOCATION_RECEIVER[2563-2566]:METHOD_INVOCATION_RECEIVER[3137-3140]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "METHOD_INVOCATION_RECEIVER[2574-2580]:METHOD_INVOCATION_RECEIVER[3300-3306]"
    }, {
      "left" : "out.append(\",\");",
      "right" : "out.append(\",\");",
      "info" : "ExpressionStatement[2632-2648]:ExpressionStatement[3174-3190]"
    }, {
      "left" : "out",
      "right" : "out",
      "info" : "METHOD_INVOCATION_RECEIVER[2655-2658]:METHOD_INVOCATION_RECEIVER[3378-3381]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "METHOD_INVOCATION_RECEIVER[2666-2672]:METHOD_INVOCATION_RECEIVER[3442-3448]"
    }, {
      "left" : "if (originalName != null)",
      "right" : "if (m.originalName != null)",
      "info" : "IfStatement[2728-2822]:IfStatement[3517-3629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2754-2822]:Block[3545-3629]"
    }, {
      "left" : "out.append(\",\");",
      "right" : "out.append(\",\");",
      "info" : "ExpressionStatement[2764-2780]:ExpressionStatement[3555-3571]"
    }, {
      "left" : "out.append(originalName);",
      "right" : "out.append(escapeString(m.originalName));",
      "info" : "ExpressionStatement[2789-2814]:ExpressionStatement[3580-3621]"
    }, {
      "left" : "originalName",
      "right" : "escapeString",
      "info" : "SimpleName[2800-2812]:SimpleName[3591-3603]"
    }, {
      "left" : "out",
      "right" : "out",
      "info" : "METHOD_INVOCATION_RECEIVER[2830-2833]:METHOD_INVOCATION_RECEIVER[3637-3640]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3541-3548]:Modifier[4528-4535]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3549-3555]:Modifier[4536-4542]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3556-3562]:SimpleType[4543-4549]"
    }, {
      "left" : "escapeString",
      "right" : "escapeString",
      "info" : "SimpleName[3563-3575]:SimpleName[4550-4562]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[3576-3588]:SingleVariableDeclaration[4563-4575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3590-3657]:Block[4577-4644]"
    }, {
      "left" : "return CodeGenerator.escapeToDoubleQuotedJsString(value);",
      "right" : "return CodeGenerator.escapeToDoubleQuotedJsString(value);",
      "info" : "ReturnStatement[3596-3653]:ReturnStatement[4583-4640]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4015-4019]:PrimitiveType[4915-4919]"
    }, {
      "left" : "addMapping",
      "right" : "addMapping",
      "info" : "SimpleName[4020-4030]:SimpleName[4920-4930]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[4031-4040]:SingleVariableDeclaration[4931-4940]"
    }, {
      "left" : "Position startPosition",
      "right" : "Position startPosition",
      "info" : "SingleVariableDeclaration[4042-4064]:SingleVariableDeclaration[4942-4964]"
    }, {
      "left" : "Position endPosition",
      "right" : "Position endPosition",
      "info" : "SingleVariableDeclaration[4066-4086]:SingleVariableDeclaration[4966-4986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4088-6037]:Block[4988-6830]"
    }, {
      "left" : "String sourceFile = (String)node.getProp(Node.SOURCEFILE_PROP);",
      "right" : "String sourceFile = (String)node.getProp(Node.SOURCEFILE_PROP);",
      "info" : "VariableDeclarationStatement[4094-4157]:VariableDeclarationStatement[4994-5057]"
    }, {
      "left" : "if (sourceFile == null || node.getLineno() < 0)",
      "right" : "if (sourceFile == null || node.getLineno() < 0)",
      "info" : "IfStatement[4341-4410]:IfStatement[5241-5310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4389-4410]:Block[5289-5310]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4397-4404]:ReturnStatement[5297-5304]"
    }, {
      "left" : "String escapedSourceFile;",
      "right" : "String escapedSourceFile;",
      "info" : "VariableDeclarationStatement[4416-4441]:VariableDeclarationStatement[2873-2898]"
    }, {
      "left" : "if (lastSourceFile != sourceFile)",
      "right" : "if (lastSourceFile != sourceFile)",
      "info" : "IfStatement[4446-4619]:IfStatement[2905-3080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4480-4619]:Block[2939-3080]"
    }, {
      "left" : "lastSourceFile = sourceFile;",
      "right" : "lastSourceFile = sourceFile;",
      "info" : "ExpressionStatement[4529-4557]:ExpressionStatement[2986-3014]"
    }, {
      "left" : "lastSourceFileEscaped = escapeString(sourceFile);",
      "right" : "lastSourceFileEscaped = escapeString(sourceFile);",
      "info" : "ExpressionStatement[4564-4613]:ExpressionStatement[3023-3072]"
    }, {
      "left" : "escapedSourceFile = lastSourceFileEscaped;",
      "right" : "escapedSourceFile = lastSourceFileEscaped;",
      "info" : "ExpressionStatement[4624-4666]:ExpressionStatement[3087-3129]"
    }, {
      "left" : "Mapping mapping = new Mapping();",
      "right" : "Mapping mapping = new Mapping();",
      "info" : "VariableDeclarationStatement[4702-4734]:VariableDeclarationStatement[5347-5379]"
    }, {
      "left" : "mapping.sourceFile = escapedSourceFile;",
      "right" : "mapping.sourceFile = sourceFile;",
      "info" : "ExpressionStatement[4773-4812]:ExpressionStatement[5384-5416]"
    }, {
      "left" : "escapedSourceFile",
      "right" : "sourceFile",
      "info" : "SimpleName[4794-4811]:SimpleName[5405-5415]"
    }, {
      "left" : "mapping.originalPosition = new Position(node.getLineno(), node.getCharno());",
      "right" : "mapping.originalPosition = new Position(node.getLineno(), node.getCharno());",
      "info" : "ExpressionStatement[4817-4893]:ExpressionStatement[5421-5497]"
    }, {
      "left" : "String originalName = (String)node.getProp(Node.ORIGINALNAME_PROP);",
      "right" : "String originalName = (String)node.getProp(Node.ORIGINALNAME_PROP);",
      "info" : "VariableDeclarationStatement[4899-4966]:VariableDeclarationStatement[5503-5570]"
    }, {
      "left" : "if (originalName != null)",
      "right" : "if (originalName != null)",
      "info" : "IfStatement[4971-5061]:IfStatement[5575-5651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4997-5061]:Block[5601-5651]"
    }, {
      "left" : "mapping.originalName = escapeString(originalName);",
      "right" : "mapping.originalName = originalName;",
      "info" : "ExpressionStatement[5005-5055]:ExpressionStatement[5609-5645]"
    }, {
      "left" : "originalName",
      "right" : "originalName",
      "info" : "SimpleName[5041-5053]:SimpleName[5632-5644]"
    }, {
      "left" : "int offsetLine = offsetPosition.getLineNumber();",
      "right" : "int offsetLine = offsetPosition.getLineNumber();",
      "info" : "VariableDeclarationStatement[5299-5347]:VariableDeclarationStatement[6086-6134]"
    }, {
      "left" : "int startOffsetPosition = offsetPosition.getCharacterIndex();",
      "right" : "int startOffsetPosition = offsetPosition.getCharacterIndex();",
      "info" : "VariableDeclarationStatement[5354-5415]:VariableDeclarationStatement[6141-6202]"
    }, {
      "left" : "int endOffsetPosition = offsetPosition.getCharacterIndex();",
      "right" : "int endOffsetPosition = offsetPosition.getCharacterIndex();",
      "info" : "VariableDeclarationStatement[5422-5481]:VariableDeclarationStatement[6209-6268]"
    }, {
      "left" : "if (startPosition.getLineNumber() > 0)",
      "right" : "if (startPosition.getLineNumber() > 0)",
      "info" : "IfStatement[5489-5570]:IfStatement[6276-6357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5528-5570]:Block[6315-6357]"
    }, {
      "left" : "startOffsetPosition = 0;",
      "right" : "startOffsetPosition = 0;",
      "info" : "ExpressionStatement[5538-5562]:ExpressionStatement[6325-6349]"
    }, {
      "left" : "if (endPosition.getLineNumber() > 0)",
      "right" : "if (endPosition.getLineNumber() > 0)",
      "info" : "IfStatement[5578-5655]:IfStatement[6365-6442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5615-5655]:Block[6402-6442]"
    }, {
      "left" : "endOffsetPosition = 0;",
      "right" : "endOffsetPosition = 0;",
      "info" : "ExpressionStatement[5625-5647]:ExpressionStatement[6412-6434]"
    }, {
      "left" : "mapping.startPosition =\n          new Position(startPosition.getLineNumber() + offsetLine,\n                       startPosition.getCharacterIndex() + startOffsetPosition);",
      "right" : "mapping.startPosition =\n          new Position(startPosition.getLineNumber() + offsetLine,\n                       startPosition.getCharacterIndex() + startOffsetPosition);",
      "info" : "ExpressionStatement[5663-5834]:ExpressionStatement[6450-6621]"
    }, {
      "left" : "mapping.endPosition =\n          new Position(endPosition.getLineNumber() + offsetLine,\n                       endPosition.getCharacterIndex() + endOffsetPosition);",
      "right" : "mapping.endPosition =\n          new Position(endPosition.getLineNumber() + offsetLine,\n                       endPosition.getCharacterIndex() + endOffsetPosition);",
      "info" : "ExpressionStatement[5842-6005]:ExpressionStatement[6629-6792]"
    }, {
      "left" : "mappings.add(mapping);",
      "right" : "mappings.add(mapping);",
      "info" : "ExpressionStatement[6011-6033]:ExpressionStatement[6804-6826]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6288-6292]:PrimitiveType[7081-7085]"
    }, {
      "left" : "setWrapperPrefix",
      "right" : "setWrapperPrefix",
      "info" : "SimpleName[6293-6309]:SimpleName[7086-7102]"
    }, {
      "left" : "String prefix",
      "right" : "String prefix",
      "info" : "SingleVariableDeclaration[6310-6323]:SingleVariableDeclaration[7103-7116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6325-6684]:Block[7118-7477]"
    }, {
      "left" : "int prefixLine = 0;",
      "right" : "int prefixLine = 0;",
      "info" : "VariableDeclarationStatement[6389-6408]:VariableDeclarationStatement[7182-7201]"
    }, {
      "left" : "int prefixIndex = 0;",
      "right" : "int prefixIndex = 0;",
      "info" : "VariableDeclarationStatement[6413-6433]:VariableDeclarationStatement[7206-7226]"
    }, {
      "left" : "for (int i = 0; i < prefix.length(); ++i)",
      "right" : "for (int i = 0; i < prefix.length(); ++i)",
      "info" : "ForStatement[6439-6619]:ForStatement[7232-7412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6481-6619]:Block[7274-7412]"
    }, {
      "left" : "if (prefix.charAt(i) == '\\n')",
      "right" : "if (prefix.charAt(i) == '\\n')",
      "info" : "IfStatement[6489-6613]:IfStatement[7282-7406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6519-6575]:Block[7312-7368]"
    }, {
      "left" : "prefixLine++;",
      "right" : "prefixLine++;",
      "info" : "ExpressionStatement[6529-6542]:ExpressionStatement[7322-7335]"
    }, {
      "left" : "prefixIndex = 0;",
      "right" : "prefixIndex = 0;",
      "info" : "ExpressionStatement[6551-6567]:ExpressionStatement[7344-7360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6581-6613]:Block[7374-7406]"
    }, {
      "left" : "prefixIndex++;",
      "right" : "prefixIndex++;",
      "info" : "ExpressionStatement[6591-6605]:ExpressionStatement[7384-7398]"
    }, {
      "left" : "prefixPosition = new Position(prefixLine, prefixIndex);",
      "right" : "prefixPosition = new Position(prefixLine, prefixIndex);",
      "info" : "ExpressionStatement[6625-6680]:ExpressionStatement[7418-7473]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7183-7187]:PrimitiveType[7976-7980]"
    }, {
      "left" : "setStartingPosition",
      "right" : "setStartingPosition",
      "info" : "SimpleName[7188-7207]:SimpleName[7981-8000]"
    }, {
      "left" : "int offsetLine",
      "right" : "int offsetLine",
      "info" : "SingleVariableDeclaration[7208-7222]:SingleVariableDeclaration[8001-8015]"
    }, {
      "left" : "int offsetIndex",
      "right" : "int offsetIndex",
      "info" : "SingleVariableDeclaration[7224-7239]:SingleVariableDeclaration[8017-8032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7241-7447]:Block[8034-8240]"
    }, {
      "left" : "offsetPosition = new Position(offsetLine, offsetIndex);",
      "right" : "offsetPosition = new Position(offsetLine, offsetIndex);",
      "info" : "ExpressionStatement[7388-7443]:ExpressionStatement[8181-8236]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7541-7545]:PrimitiveType[8334-8338]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[7546-7551]:SimpleName[8339-8344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7554-7678]:Block[8347-8471]"
    }, {
      "left" : "mappings = Lists.newArrayList();",
      "right" : "mappings = Lists.newArrayList();",
      "info" : "ExpressionStatement[7560-7592]:ExpressionStatement[8353-8385]"
    }, {
      "left" : "offsetPosition = new Position(0, 0);",
      "right" : "offsetPosition = new Position(0, 0);",
      "info" : "ExpressionStatement[7597-7633]:ExpressionStatement[8390-8426]"
    }, {
      "left" : "prefixPosition = new Position(0, 0);",
      "right" : "prefixPosition = new Position(0, 0);",
      "info" : "ExpressionStatement[7638-7674]:ExpressionStatement[8431-8467]"
    }, {
      "left" : "int maxLine = 0;",
      "right" : "int maxLine = 0;",
      "info" : "VariableDeclarationStatement[7715-7731]:VariableDeclarationStatement[11081-11097]"
    }, {
      "left" : "maxLine = Math.max(maxLine, endPositionLine);",
      "right" : "maxLine = Math.max(maxLine, endPositionLine);",
      "info" : "ExpressionStatement[7842-7887]:ExpressionStatement[11241-11286]"
    }, {
      "left" : "return maxLine + prefixPosition.getLineNumber();",
      "right" : "return maxLine + prefixPosition.getLineNumber();",
      "info" : "ReturnStatement[7898-7946]:ReturnStatement[11336-11384]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8194-8200]:Modifier[8716-8722]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8201-8205]:PrimitiveType[8723-8727]"
    }, {
      "left" : "appendTo",
      "right" : "appendTo",
      "info" : "SimpleName[8206-8214]:SimpleName[8728-8736]"
    }, {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[8215-8229]:SingleVariableDeclaration[8737-8751]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[8231-8242]:SingleVariableDeclaration[8753-8764]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8251-8262]:SimpleType[8773-8784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8263-10286]:Block[8785-10757]"
    }, {
      "left" : "int maxLine = findLastLine();",
      "right" : "int maxLine = prepMappings();",
      "info" : "VariableDeclarationStatement[9520-9549]:VariableDeclarationStatement[10042-10071]"
    }, {
      "left" : "findLastLine",
      "right" : "prepMappings",
      "info" : "SimpleName[9534-9546]:SimpleName[10056-10068]"
    }, {
      "left" : "out.append(\"/** Begin line maps. **/{ \\\"file\\\" : \");",
      "right" : "out.append(\"/** Begin line maps. **/{ \\\"file\\\" : \");",
      "info" : "ExpressionStatement[9591-9643]:ExpressionStatement[10113-10165]"
    }, {
      "left" : "out.append(escapeString(name));",
      "right" : "out.append(escapeString(name));",
      "info" : "ExpressionStatement[9648-9679]:ExpressionStatement[10170-10201]"
    }, {
      "left" : "out.append(\", \\\"count\\\": \");",
      "right" : "out.append(\", \\\"count\\\": \");",
      "info" : "ExpressionStatement[9684-9712]:ExpressionStatement[10206-10234]"
    }, {
      "left" : "out.append(String.valueOf(maxLine + 1));",
      "right" : "out.append(String.valueOf(maxLine + 1));",
      "info" : "ExpressionStatement[9717-9757]:ExpressionStatement[10239-10279]"
    }, {
      "left" : "out.append(\" }\\n\");",
      "right" : "out.append(\" }\\n\");",
      "info" : "ExpressionStatement[9762-9781]:ExpressionStatement[10284-10303]"
    }, {
      "left" : "(new LineMapper(out)).appendLineMappings();",
      "right" : "(new LineMapper(out)).appendLineMappings();",
      "info" : "ExpressionStatement[9786-9829]:ExpressionStatement[10308-10351]"
    }, {
      "left" : "out.append(\"/** Begin file information. **/\\n\");",
      "right" : "out.append(\"/** Begin file information. **/\\n\");",
      "info" : "ExpressionStatement[9868-9916]:ExpressionStatement[10390-10438]"
    }, {
      "left" : "for (int i = 0; i <= maxLine; ++i)",
      "right" : "for (int i = 0; i <= maxLine; ++i)",
      "info" : "ForStatement[10022-10090]:ForStatement[10544-10612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10057-10090]:Block[10579-10612]"
    }, {
      "left" : "out.append(\"[]\\n\");",
      "right" : "out.append(\"[]\\n\");",
      "info" : "ExpressionStatement[10065-10084]:ExpressionStatement[10587-10606]"
    }, {
      "left" : "out.append(\"/** Begin mapping definitions. **/\\n\");",
      "right" : "out.append(\"/** Begin mapping definitions. **/\\n\");",
      "info" : "ExpressionStatement[10132-10183]:ExpressionStatement[10654-10705]"
    }, {
      "left" : "mapping.appendTo(out);",
      "right" : "(new MappingWriter()).appendMappings(out);",
      "info" : "ExpressionStatement[10230-10252]:ExpressionStatement[10711-10753]"
    }, {
      "left" : "mapping",
      "right" : "MappingWriter",
      "info" : "SimpleName[10230-10237]:SimpleName[10716-10729]"
    }, {
      "left" : "appendTo",
      "right" : "appendMappings",
      "info" : "SimpleName[10238-10246]:SimpleName[10733-10747]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10511-10518]:Modifier[14582-14589]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[10519-10524]:TYPE_DECLARATION_KIND[14590-14595]"
    }, {
      "left" : "LineMapper",
      "right" : "MappingTraversal",
      "info" : "SimpleName[10525-10535]:SimpleName[14596-14612]"
    }, {
      "left" : "LineMapper",
      "right" : "LineMapper",
      "info" : "SimpleName[10845-10855]:SimpleName[11752-11762]"
    }, {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[10856-10870]:SingleVariableDeclaration[11763-11777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10872-10901]:Block[11779-11808]"
    }, {
      "left" : "this.out = out;",
      "right" : "this.out = out;",
      "info" : "ExpressionStatement[10880-10895]:ExpressionStatement[11787-11802]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11143-11147]:PrimitiveType[14775-14779]"
    }, {
      "left" : "appendLineMappings",
      "right" : "MappingVisitor",
      "info" : "SimpleName[11148-11166]:SimpleName[14789-14803]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11176-11187]:SimpleType[14814-14825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11188-13467]:Block[14826-16100]"
    }, {
      "left" : "Preconditions.checkState(!mappings.isEmpty());",
      "right" : "Preconditions.checkState(!mappings.isEmpty());",
      "info" : "ExpressionStatement[11196-11242]:ExpressionStatement[14834-14880]"
    }, {
      "left" : "openLine();",
      "right" : "openLine();",
      "info" : "ExpressionStatement[11281-11292]:ExpressionStatement[12767-12778]"
    }, {
      "left" : "Deque<Mapping> stack = new ArrayDeque<Mapping>();",
      "right" : "Deque<Mapping> stack = new ArrayDeque<Mapping>();",
      "info" : "VariableDeclarationStatement[12441-12490]:VariableDeclarationStatement[15101-15150]"
    }, {
      "left" : "for (Mapping m : mappings)",
      "right" : "for (Mapping m : mappings)",
      "info" : "EnhancedForStatement[12497-13197]:EnhancedForStatement[15157-15854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12524-13197]:Block[15184-15854]"
    }, {
      "left" : "while (!stack.isEmpty() && !isOverlapped(stack.peek(), m))",
      "right" : "while (!stack.isEmpty() && !isOverlapped(stack.peek(), m))",
      "info" : "WhileStatement[12811-12963]:WhileStatement[15471-15618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12870-12963]:Block[15530-15618]"
    }, {
      "left" : "Mapping previous = stack.pop();",
      "right" : "Mapping previous = stack.pop();",
      "info" : "VariableDeclarationStatement[12882-12913]:VariableDeclarationStatement[15542-15573]"
    }, {
      "left" : "writeClosedMapping",
      "right" : "maybeVisit",
      "info" : "SimpleName[12924-12942]:SimpleName[15584-15594]"
    }, {
      "left" : "writeClosedMapping(previous);",
      "right" : "maybeVisit(v, previous);",
      "info" : "ExpressionStatement[12924-12953]:ExpressionStatement[15584-15608]"
    }, {
      "left" : "Mapping parent = stack.peek();",
      "right" : "Mapping parent = stack.peek();",
      "info" : "VariableDeclarationStatement[13097-13127]:VariableDeclarationStatement[15752-15782]"
    }, {
      "left" : "writeCharsBetween",
      "right" : "maybeVisitParent",
      "info" : "SimpleName[13136-13153]:SimpleName[15791-15807]"
    }, {
      "left" : "writeCharsBetween(parent, m);",
      "right" : "maybeVisitParent(v, parent, m);",
      "info" : "ExpressionStatement[13136-13165]:ExpressionStatement[15791-15822]"
    }, {
      "left" : "stack.push(m);",
      "right" : "stack.push(m);",
      "info" : "ExpressionStatement[13175-13189]:ExpressionStatement[15832-15846]"
    }, {
      "left" : "while (!stack.isEmpty())",
      "right" : "while (!stack.isEmpty())",
      "info" : "WhileStatement[13344-13442]:WhileStatement[16001-16094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13369-13442]:Block[16026-16094]"
    }, {
      "left" : "Mapping m = stack.pop();",
      "right" : "Mapping m = stack.pop();",
      "info" : "VariableDeclarationStatement[13379-13403]:VariableDeclarationStatement[16036-16060]"
    }, {
      "left" : "writeClosedMapping",
      "right" : "maybeVisit",
      "info" : "SimpleName[13412-13430]:SimpleName[16069-16079]"
    }, {
      "left" : "writeClosedMapping(m);",
      "right" : "maybeVisit(v, m);",
      "info" : "ExpressionStatement[13412-13434]:ExpressionStatement[16069-16086]"
    }, {
      "left" : "closeLine();",
      "right" : "closeLine();",
      "info" : "ExpressionStatement[13449-13461]:ExpressionStatement[12869-12881]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13472-13479]:Modifier[12948-12955]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13480-13484]:PrimitiveType[12956-12960]"
    }, {
      "left" : "openLine",
      "right" : "openLine",
      "info" : "SimpleName[13485-13493]:SimpleName[12961-12969]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13503-13514]:SimpleType[12979-12990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13515-13574]:Block[13016-13081]"
    }, {
      "left" : "out.append(\"[\");",
      "right" : "out.append(\"[\");",
      "info" : "ExpressionStatement[13523-13539]:ExpressionStatement[13026-13042]"
    }, {
      "left" : "this.firstChar = true;",
      "right" : "this.firstChar = true;",
      "info" : "ExpressionStatement[13546-13568]:ExpressionStatement[13051-13073]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13579-13586]:Modifier[13142-13149]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13587-13591]:PrimitiveType[13150-13154]"
    }, {
      "left" : "closeLine",
      "right" : "closeLine",
      "info" : "SimpleName[13592-13601]:SimpleName[13155-13164]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13611-13622]:SimpleType[13174-13185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13623-13655]:Block[13211-13247]"
    }, {
      "left" : "out.append(\"]\\n\");",
      "right" : "out.append(\"]\\n\");",
      "info" : "ExpressionStatement[13631-13649]:ExpressionStatement[13221-13239]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13660-13667]:Modifier[13356-13363]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13668-13672]:PrimitiveType[13364-13368]"
    }, {
      "left" : "addCharEntry",
      "right" : "addCharEntry",
      "info" : "SimpleName[13673-13685]:SimpleName[13369-13381]"
    }, {
      "left" : "String id",
      "right" : "String id",
      "info" : "SingleVariableDeclaration[13686-13695]:SingleVariableDeclaration[13382-13391]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13704-13715]:SimpleType[13400-13411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13716-13843]:Block[13437-13578]"
    }, {
      "left" : "if (firstChar)",
      "right" : "if (firstChar)",
      "info" : "IfStatement[13724-13815]:IfStatement[13447-13546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13739-13775]:Block[13462-13502]"
    }, {
      "left" : "firstChar = false;",
      "right" : "firstChar = false;",
      "info" : "ExpressionStatement[13749-13767]:ExpressionStatement[13474-13492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13781-13815]:Block[13508-13546]"
    }, {
      "left" : "out.append(\",\");",
      "right" : "out.append(\",\");",
      "info" : "ExpressionStatement[13791-13807]:ExpressionStatement[13520-13536]"
    }, {
      "left" : "out.append(id);",
      "right" : "out.append(id);",
      "info" : "ExpressionStatement[13822-13837]:ExpressionStatement[13555-13570]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13923-13930]:Modifier[16180-16187]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13931-13934]:PrimitiveType[16188-16191]"
    }, {
      "left" : "getAdjustedLine",
      "right" : "getAdjustedLine",
      "info" : "SimpleName[13935-13950]:SimpleName[16192-16207]"
    }, {
      "left" : "Position p",
      "right" : "Position p",
      "info" : "SingleVariableDeclaration[13951-13961]:SingleVariableDeclaration[16208-16218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13963-14035]:Block[16220-16292]"
    }, {
      "left" : "return p.getLineNumber() + prefixPosition.getLineNumber();",
      "right" : "return p.getLineNumber() + prefixPosition.getLineNumber();",
      "info" : "ReturnStatement[13971-14029]:ReturnStatement[16228-16286]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14117-14124]:Modifier[16374-16381]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14125-14128]:PrimitiveType[16382-16385]"
    }, {
      "left" : "getAdjustedCol",
      "right" : "getAdjustedCol",
      "info" : "SimpleName[14129-14143]:SimpleName[16386-16400]"
    }, {
      "left" : "Position p",
      "right" : "Position p",
      "info" : "SingleVariableDeclaration[14144-14154]:SingleVariableDeclaration[16401-16411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14156-14406]:Block[16413-16663]"
    }, {
      "left" : "int rawLine = p.getLineNumber();",
      "right" : "int rawLine = p.getLineNumber();",
      "info" : "VariableDeclarationStatement[14164-14196]:VariableDeclarationStatement[16421-16453]"
    }, {
      "left" : "int rawCol = p.getCharacterIndex();",
      "right" : "int rawCol = p.getCharacterIndex();",
      "info" : "VariableDeclarationStatement[14203-14238]:VariableDeclarationStatement[16460-16495]"
    }, {
      "left" : "return (rawLine != 0)\n          ? rawCol : rawCol + prefixPosition.getCharacterIndex();",
      "right" : "return (rawLine != 0)\n          ? rawCol : rawCol + prefixPosition.getCharacterIndex();",
      "info" : "ReturnStatement[14313-14400]:ReturnStatement[16570-16657]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14477-14484]:Modifier[16734-16741]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14485-14492]:PrimitiveType[16742-16749]"
    }, {
      "left" : "isOverlapped",
      "right" : "isOverlapped",
      "info" : "SimpleName[14493-14505]:SimpleName[16750-16762]"
    }, {
      "left" : "Mapping m1",
      "right" : "Mapping m1",
      "info" : "SingleVariableDeclaration[14506-14516]:SingleVariableDeclaration[16763-16773]"
    }, {
      "left" : "Mapping m2",
      "right" : "Mapping m2",
      "info" : "SingleVariableDeclaration[14518-14528]:SingleVariableDeclaration[16775-16785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14530-14867]:Block[16787-17124]"
    }, {
      "left" : "int l1 = m1.endPosition.getLineNumber();",
      "right" : "int l1 = m1.endPosition.getLineNumber();",
      "info" : "VariableDeclarationStatement[14619-14659]:VariableDeclarationStatement[16876-16916]"
    }, {
      "left" : "int l2 = m2.startPosition.getLineNumber();",
      "right" : "int l2 = m2.startPosition.getLineNumber();",
      "info" : "VariableDeclarationStatement[14666-14708]:VariableDeclarationStatement[16923-16965]"
    }, {
      "left" : "int c1 = m1.endPosition.getCharacterIndex();",
      "right" : "int c1 = m1.endPosition.getCharacterIndex();",
      "info" : "VariableDeclarationStatement[14715-14759]:VariableDeclarationStatement[16972-17016]"
    }, {
      "left" : "int c2 = m2.startPosition.getCharacterIndex();",
      "right" : "int c2 = m2.startPosition.getCharacterIndex();",
      "info" : "VariableDeclarationStatement[14766-14812]:VariableDeclarationStatement[17023-17069]"
    }, {
      "left" : "return (l1 == l2 && c1 >= c2) || l1 > l2;",
      "right" : "return (l1 == l2 && c1 >= c2) || l1 > l2;",
      "info" : "ReturnStatement[14820-14861]:ReturnStatement[17077-17118]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14990-14997]:Modifier[17247-17254]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14998-15002]:PrimitiveType[17255-17259]"
    }, {
      "left" : "writeClosedMapping",
      "right" : "MappingVisitor",
      "info" : "SimpleName[15003-15021]:SimpleName[17271-17285]"
    }, {
      "left" : "Mapping m",
      "right" : "Mapping m",
      "info" : "SingleVariableDeclaration[15022-15031]:SingleVariableDeclaration[17289-17298]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15040-15051]:SimpleType[17307-17318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15052-15412]:Block[17319-17670]"
    }, {
      "left" : "int nextLine = getAdjustedLine(m.endPosition);",
      "right" : "int nextLine = getAdjustedLine(m.endPosition);",
      "info" : "VariableDeclarationStatement[15060-15106]:VariableDeclarationStatement[17327-17373]"
    }, {
      "left" : "int nextCol = getAdjustedCol(m.endPosition);",
      "right" : "int nextCol = getAdjustedCol(m.endPosition);",
      "info" : "VariableDeclarationStatement[15113-15157]:VariableDeclarationStatement[17380-17424]"
    }, {
      "left" : "if (line < nextLine || (line == nextLine && col < nextCol))",
      "right" : "if (line < nextLine || (line == nextLine && col < nextCol))",
      "info" : "IfStatement[15288-15406]:IfStatement[17555-17664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15348-15406]:Block[17615-17664]"
    }, {
      "left" : "writeCharsUpTo",
      "right" : "visit",
      "info" : "SimpleName[15358-15372]:SimpleName[17625-17630]"
    }, {
      "left" : "writeCharsUpTo(nextLine, nextCol, m.id);",
      "right" : "visit(v, m, nextLine, nextCol);",
      "info" : "ExpressionStatement[15358-15398]:ExpressionStatement[17625-17656]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15500-15507]:Modifier[17758-17765]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15508-15512]:PrimitiveType[17766-17770]"
    }, {
      "left" : "writeCharsBetween",
      "right" : "maybeVisitParent",
      "info" : "SimpleName[15513-15530]:SimpleName[17771-17787]"
    }, {
      "left" : "Mapping prev",
      "right" : "Mapping parent",
      "info" : "SingleVariableDeclaration[15531-15543]:SingleVariableDeclaration[17806-17820]"
    }, {
      "left" : "prev",
      "right" : "parent",
      "info" : "SimpleName[15539-15543]:SimpleName[17814-17820]"
    }, {
      "left" : "Mapping next",
      "right" : "Mapping m",
      "info" : "SingleVariableDeclaration[15545-15557]:SingleVariableDeclaration[17822-17831]"
    }, {
      "left" : "next",
      "right" : "m",
      "info" : "SimpleName[15553-15557]:SimpleName[17830-17831]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15574-15585]:SimpleType[17848-17859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15586-15863]:Block[17860-18222]"
    }, {
      "left" : "int nextLine = getAdjustedLine(next.startPosition);",
      "right" : "int nextLine = getAdjustedLine(m.startPosition);",
      "info" : "VariableDeclarationStatement[15594-15645]:VariableDeclarationStatement[17868-17916]"
    }, {
      "left" : "next.startPosition",
      "right" : "m.startPosition",
      "info" : "QualifiedName[15625-15643]:QualifiedName[17899-17914]"
    }, {
      "left" : "int nextCol = getAdjustedCol(next.startPosition);",
      "right" : "int nextCol = getAdjustedCol(m.startPosition);",
      "info" : "VariableDeclarationStatement[15652-15701]:VariableDeclarationStatement[17923-17969]"
    }, {
      "left" : "next.startPosition",
      "right" : "m.startPosition",
      "info" : "QualifiedName[15681-15699]:QualifiedName[17952-17967]"
    }, {
      "left" : "(prev != null)",
      "right" : "(line == nextLine && col < nextCol)",
      "info" : "ParenthesizedExpression[15776-15790]:ParenthesizedExpression[18125-18160]"
    }, {
      "left" : "prev",
      "right" : "line",
      "info" : "SimpleName[15777-15781]:SimpleName[18126-18130]"
    }, {
      "left" : "prev != null",
      "right" : "line == nextLine",
      "info" : "InfixExpression[15777-15789]:InfixExpression[18126-18142]"
    }, {
      "left" : "!=",
      "right" : "==",
      "info" : "INFIX_EXPRESSION_OPERATOR[15782-15784]:INFIX_EXPRESSION_OPERATOR[18131-18133]"
    }, {
      "left" : "writeCharsUpTo",
      "right" : "visit",
      "info" : "SimpleName[15819-15833]:SimpleName[18172-18177]"
    }, {
      "left" : "writeCharsUpTo(nextLine, nextCol, id);",
      "right" : "visit(v, parent, nextLine, nextCol);",
      "info" : "ExpressionStatement[15819-15857]:ExpressionStatement[18172-18208]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[16004-16011]:Modifier[11904-11910]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16012-16016]:PrimitiveType[11911-11915]"
    }, {
      "left" : "writeCharsUpTo",
      "right" : "visit",
      "info" : "SimpleName[16017-16031]:SimpleName[11916-11921]"
    }, {
      "left" : "int nextLine",
      "right" : "int nextLine",
      "info" : "SingleVariableDeclaration[16041-16053]:SingleVariableDeclaration[11952-11964]"
    }, {
      "left" : "int nextCol",
      "right" : "int nextCol",
      "info" : "SingleVariableDeclaration[16055-16066]:SingleVariableDeclaration[11966-11977]"
    }, {
      "left" : "int id",
      "right" : "int nextCol",
      "info" : "SingleVariableDeclaration[16068-16074]:SingleVariableDeclaration[18433-18444]"
    }, {
      "left" : "id",
      "right" : "nextCol",
      "info" : "SimpleName[16072-16074]:SimpleName[18437-18444]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16091-16102]:SimpleType[11992-12003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16103-16705]:Block[12004-12583]"
    }, {
      "left" : "Preconditions.checkState(line <= nextLine, \"\");",
      "right" : "Preconditions.checkState(line <= nextLine);",
      "info" : "ExpressionStatement[16111-16158]:ExpressionStatement[18481-18524]"
    }, {
      "left" : "Preconditions.checkState(line < nextLine || col <= nextCol);",
      "right" : "Preconditions.checkState(line < nextLine || col <= nextCol);",
      "info" : "ExpressionStatement[16165-16225]:ExpressionStatement[18035-18095]"
    }, {
      "left" : "if (line == nextLine && col == nextCol)",
      "right" : "if (line == nextLine && col == nextCol)",
      "info" : "IfStatement[16233-16324]:IfStatement[18598-18730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16273-16324]:Block[18638-18730]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16309-16316]:ReturnStatement[18715-18722]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[16332-16338]:SimpleType[12296-12302]"
    }, {
      "left" : "idString",
      "right" : "lastIdString",
      "info" : "SimpleName[16339-16347]:SimpleName[12189-12201]"
    }, {
      "left" : "(id == UNMAPPED) ? UNMAPPED_STRING : String.valueOf(id)",
      "right" : "(id == UNMAPPED) ? UNMAPPED_STRING : String.valueOf(id)",
      "info" : "ConditionalExpression[16350-16405]:ConditionalExpression[12204-12259]"
    }, {
      "left" : "for (int i = line; i <= nextLine; i++)",
      "right" : "for (int i = line; i <= nextLine; i++)",
      "info" : "ForStatement[16413-16654]:ForStatement[12335-12577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16452-16654]:Block[12374-12577]"
    }, {
      "left" : "if (i == nextLine)",
      "right" : "if (i == nextLine)",
      "info" : "IfStatement[16462-16605]:IfStatement[12384-12527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16481-16605]:Block[12403-12527]"
    }, {
      "left" : "for (int j = col; j < nextCol; j++)",
      "right" : "for (int j = col; j < nextCol; j++)",
      "info" : "ForStatement[16493-16578]:ForStatement[12415-12500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16529-16578]:Block[12451-12500]"
    }, {
      "left" : "addCharEntry(idString);",
      "right" : "addCharEntry(idString);",
      "info" : "ExpressionStatement[16543-16566]:ExpressionStatement[12465-12488]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16589-16595]:BreakStatement[12511-12517]"
    }, {
      "left" : "closeLine();",
      "right" : "closeLine();",
      "info" : "ExpressionStatement[16614-16626]:ExpressionStatement[12537-12549]"
    }, {
      "left" : "openLine();",
      "right" : "openLine();",
      "info" : "ExpressionStatement[16635-16646]:ExpressionStatement[12558-12569]"
    }, {
      "left" : "line = nextLine;",
      "right" : "line = nextLine;",
      "info" : "ExpressionStatement[16662-16678]:ExpressionStatement[18787-18803]"
    }, {
      "left" : "col = nextCol;",
      "right" : "col = nextCol;",
      "info" : "ExpressionStatement[16685-16699]:ExpressionStatement[18810-18824]"
    } ]
  },
  "interFileMappings" : { }
}