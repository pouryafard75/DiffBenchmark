{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PropertyBuilder",
      "right" : "PropertyBuilder",
      "info" : "TypeDeclaration[365-17154]:TypeDeclaration[365-17184]"
    }, {
      "left" : "private final static Object NO_DEFAULT_MARKER = Boolean.FALSE;",
      "right" : "private final static Object NO_DEFAULT_MARKER = Boolean.FALSE;",
      "info" : "FieldDeclaration[585-647]:FieldDeclaration[585-647]"
    }, {
      "left" : "final protected SerializationConfig _config;",
      "right" : "final protected SerializationConfig _config;",
      "info" : "FieldDeclaration[653-697]:FieldDeclaration[653-697]"
    }, {
      "left" : "final protected BeanDescription _beanDesc;",
      "right" : "final protected BeanDescription _beanDesc;",
      "info" : "FieldDeclaration[702-744]:FieldDeclaration[702-744]"
    }, {
      "left" : "final protected AnnotationIntrospector _annotationIntrospector;",
      "right" : "final protected AnnotationIntrospector _annotationIntrospector;",
      "info" : "FieldDeclaration[750-813]:FieldDeclaration[750-813]"
    }, {
      "left" : "protected Object _defaultBean;",
      "right" : "protected Object _defaultBean;",
      "info" : "FieldDeclaration[819-1257]:FieldDeclaration[819-1257]"
    }, {
      "left" : "final protected JsonInclude.Value _defaultInclusion;",
      "right" : "final protected JsonInclude.Value _defaultInclusion;",
      "info" : "FieldDeclaration[1263-1588]:FieldDeclaration[1263-1588]"
    }, {
      "left" : "final protected boolean _useRealPropertyDefaults;",
      "right" : "final protected boolean _useRealPropertyDefaults;",
      "info" : "FieldDeclaration[1594-1850]:FieldDeclaration[1594-1850]"
    }, {
      "left" : "public PropertyBuilder(SerializationConfig config, BeanDescription beanDesc)",
      "right" : "public PropertyBuilder(SerializationConfig config, BeanDescription beanDesc)",
      "info" : "MethodDeclaration[1856-3143]:MethodDeclaration[1856-3143]"
    }, {
      "left" : "public Annotations getClassAnnotations()",
      "right" : "public Annotations getClassAnnotations()",
      "info" : "MethodDeclaration[3311-3407]:MethodDeclaration[3311-3407]"
    }, {
      "left" : "protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n            AnnotatedMember am, boolean defaultUseStaticTyping)\n        throws JsonMappingException",
      "right" : "protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n            AnnotatedMember am, boolean defaultUseStaticTyping)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[3413-11075]:MethodDeclaration[3413-11105]"
    }, {
      "left" : "protected JavaType findSerializationType(Annotated a, boolean useStaticTyping, JavaType declaredType)\n        throws JsonMappingException",
      "right" : "protected JavaType findSerializationType(Annotated a, boolean useStaticTyping, JavaType declaredType)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[11266-13895]:MethodDeclaration[11296-13925]"
    }, {
      "left" : "protected Object getDefaultBean()",
      "right" : "protected Object getDefaultBean()",
      "info" : "MethodDeclaration[14094-15080]:MethodDeclaration[14124-15110]"
    }, {
      "left" : "// since 2.9\n    protected Object getPropertyDefaultValue(String name, AnnotatedMember member,\n            JavaType type)",
      "right" : "// since 2.9\n    protected Object getPropertyDefaultValue(String name, AnnotatedMember member,\n            JavaType type)",
      "info" : "MethodDeclaration[15086-16365]:MethodDeclaration[15116-16395]"
    }, {
      "left" : "// since 2.9\n    protected Object getDefaultValue(JavaType type)",
      "right" : "// since 2.9\n    protected Object getDefaultValue(JavaType type)",
      "info" : "MethodDeclaration[16371-16547]:MethodDeclaration[16401-16577]"
    }, {
      "left" : "protected Object _throwWrapped(Exception e, String propName, Object defaultBean)",
      "right" : "protected Object _throwWrapped(Exception e, String propName, Object defaultBean)",
      "info" : "MethodDeclaration[16746-17152]:MethodDeclaration[16776-17182]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[532-538]:Modifier[532-538]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[539-544]:TYPE_DECLARATION_KIND[539-544]"
    }, {
      "left" : "PropertyBuilder",
      "right" : "PropertyBuilder",
      "info" : "SimpleName[545-560]:SimpleName[545-560]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1856-1862]:Modifier[1856-1862]"
    }, {
      "left" : "PropertyBuilder",
      "right" : "PropertyBuilder",
      "info" : "SimpleName[1863-1878]:SimpleName[1863-1878]"
    }, {
      "left" : "SerializationConfig config",
      "right" : "SerializationConfig config",
      "info" : "SingleVariableDeclaration[1879-1905]:SingleVariableDeclaration[1879-1905]"
    }, {
      "left" : "BeanDescription beanDesc",
      "right" : "BeanDescription beanDesc",
      "info" : "SingleVariableDeclaration[1907-1931]:SingleVariableDeclaration[1907-1931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1937-3143]:Block[1937-3143]"
    }, {
      "left" : "_config = config;",
      "right" : "_config = config;",
      "info" : "ExpressionStatement[1947-1964]:ExpressionStatement[1947-1964]"
    }, {
      "left" : "_beanDesc = beanDesc;",
      "right" : "_beanDesc = beanDesc;",
      "info" : "ExpressionStatement[1973-1994]:ExpressionStatement[1973-1994]"
    }, {
      "left" : "JsonInclude.Value inclPerType = JsonInclude.Value.merge(\n                beanDesc.findPropertyInclusion(JsonInclude.Value.empty()),\n                config.getDefaultPropertyInclusion(beanDesc.getBeanClass(),\n                        JsonInclude.Value.empty()));",
      "right" : "JsonInclude.Value inclPerType = JsonInclude.Value.merge(\n                beanDesc.findPropertyInclusion(JsonInclude.Value.empty()),\n                config.getDefaultPropertyInclusion(beanDesc.getBeanClass(),\n                        JsonInclude.Value.empty()));",
      "info" : "VariableDeclarationStatement[2583-2843]:VariableDeclarationStatement[2583-2843]"
    }, {
      "left" : "_defaultInclusion = JsonInclude.Value.merge(config.getDefaultPropertyInclusion(),\n                inclPerType);",
      "right" : "_defaultInclusion = JsonInclude.Value.merge(config.getDefaultPropertyInclusion(),\n                inclPerType);",
      "info" : "ExpressionStatement[2852-2963]:ExpressionStatement[2852-2963]"
    }, {
      "left" : "_useRealPropertyDefaults = inclPerType.getValueInclusion() == JsonInclude.Include.NON_DEFAULT;",
      "right" : "_useRealPropertyDefaults = inclPerType.getValueInclusion() == JsonInclude.Include.NON_DEFAULT;",
      "info" : "ExpressionStatement[2972-3066]:ExpressionStatement[2972-3066]"
    }, {
      "left" : "_annotationIntrospector = _config.getAnnotationIntrospector();",
      "right" : "_annotationIntrospector = _config.getAnnotationIntrospector();",
      "info" : "ExpressionStatement[3075-3137]:ExpressionStatement[3075-3137]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3311-3317]:Modifier[3311-3317]"
    }, {
      "left" : "Annotations",
      "right" : "Annotations",
      "info" : "SimpleType[3318-3329]:SimpleType[3318-3329]"
    }, {
      "left" : "getClassAnnotations",
      "right" : "getClassAnnotations",
      "info" : "SimpleName[3330-3349]:SimpleName[3330-3349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3352-3407]:Block[3352-3407]"
    }, {
      "left" : "return _beanDesc.getClassAnnotations();",
      "right" : "return _beanDesc.getClassAnnotations();",
      "info" : "ReturnStatement[3362-3401]:ReturnStatement[3362-3401]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3606-3615]:Modifier[3606-3615]"
    }, {
      "left" : "BeanPropertyWriter",
      "right" : "BeanPropertyWriter",
      "info" : "SimpleType[3616-3634]:SimpleType[3616-3634]"
    }, {
      "left" : "buildWriter",
      "right" : "buildWriter",
      "info" : "SimpleName[3635-3646]:SimpleName[3635-3646]"
    }, {
      "left" : "SerializerProvider prov",
      "right" : "SerializerProvider prov",
      "info" : "SingleVariableDeclaration[3647-3670]:SingleVariableDeclaration[3647-3670]"
    }, {
      "left" : "BeanPropertyDefinition propDef",
      "right" : "BeanPropertyDefinition propDef",
      "info" : "SingleVariableDeclaration[3684-3714]:SingleVariableDeclaration[3684-3714]"
    }, {
      "left" : "JavaType declaredType",
      "right" : "JavaType declaredType",
      "info" : "SingleVariableDeclaration[3716-3737]:SingleVariableDeclaration[3716-3737]"
    }, {
      "left" : "JsonSerializer<?> ser",
      "right" : "JsonSerializer<?> ser",
      "info" : "SingleVariableDeclaration[3739-3760]:SingleVariableDeclaration[3739-3760]"
    }, {
      "left" : "TypeSerializer typeSer",
      "right" : "TypeSerializer typeSer",
      "info" : "SingleVariableDeclaration[3774-3796]:SingleVariableDeclaration[3774-3796]"
    }, {
      "left" : "TypeSerializer contentTypeSer",
      "right" : "TypeSerializer contentTypeSer",
      "info" : "SingleVariableDeclaration[3798-3827]:SingleVariableDeclaration[3798-3827]"
    }, {
      "left" : "AnnotatedMember am",
      "right" : "AnnotatedMember am",
      "info" : "SingleVariableDeclaration[3841-3859]:SingleVariableDeclaration[3841-3859]"
    }, {
      "left" : "boolean defaultUseStaticTyping",
      "right" : "boolean defaultUseStaticTyping",
      "info" : "SingleVariableDeclaration[3861-3891]:SingleVariableDeclaration[3861-3891]"
    }, {
      "left" : "JsonMappingException",
      "right" : "JsonMappingException",
      "info" : "SimpleType[3908-3928]:SimpleType[3908-3928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3933-11075]:Block[3933-11105]"
    }, {
      "left" : "JavaType serializationType;",
      "right" : "JavaType serializationType;",
      "info" : "VariableDeclarationStatement[4038-4065]:VariableDeclarationStatement[4038-4065]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4074-4446]:TryStatement[4074-4476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4078-4186]:Block[4078-4186]"
    }, {
      "left" : "serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);",
      "right" : "serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);",
      "info" : "ExpressionStatement[4092-4176]:ExpressionStatement[4092-4176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4218-4446]:Block[4218-4476]"
    }, {
      "left" : "if (propDef == null)",
      "right" : "if (propDef == null)",
      "info" : "IfStatement[4232-4347]:IfStatement[4232-4362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4253-4347]:Block[4253-4362]"
    }, {
      "left" : "return prov.reportBadDefinition(declaredType, e.getMessage());",
      "right" : "return prov.reportBadDefinition(declaredType, ClassUtil.exceptionMessage(e));",
      "info" : "ReturnStatement[4271-4333]:ReturnStatement[4271-4348]"
    }, {
      "left" : "return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());",
      "right" : "return prov.reportBadPropertyDefinition(_beanDesc, propDef, ClassUtil.exceptionMessage(e));",
      "info" : "ReturnStatement[4360-4436]:ReturnStatement[4375-4466]"
    }, {
      "left" : "if (contentTypeSer != null)",
      "right" : "if (contentTypeSer != null)",
      "info" : "IfStatement[4553-5518]:IfStatement[4583-5548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4581-5518]:Block[4611-5548]"
    }, {
      "left" : "if (serializationType == null)",
      "right" : "if (serializationType == null)",
      "info" : "IfStatement[4826-5020]:IfStatement[4856-5050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4857-5020]:Block[4887-5050]"
    }, {
      "left" : "serializationType = declaredType;",
      "right" : "serializationType = declaredType;",
      "info" : "ExpressionStatement[4973-5006]:ExpressionStatement[5003-5036]"
    }, {
      "left" : "JavaType ct = serializationType.getContentType();",
      "right" : "JavaType ct = serializationType.getContentType();",
      "info" : "VariableDeclarationStatement[5033-5082]:VariableDeclarationStatement[5063-5112]"
    }, {
      "left" : "if (ct == null)",
      "right" : "if (ct == null)",
      "info" : "IfStatement[5181-5365]:IfStatement[5211-5395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5197-5365]:Block[5227-5395]"
    }, {
      "left" : "prov.reportBadPropertyDefinition(_beanDesc, propDef,\n                        \"serialization type \"+serializationType+\" has no content\");",
      "right" : "prov.reportBadPropertyDefinition(_beanDesc, propDef,\n                        \"serialization type \"+serializationType+\" has no content\");",
      "info" : "ExpressionStatement[5215-5351]:ExpressionStatement[5245-5381]"
    }, {
      "left" : "serializationType = serializationType.withContentTypeHandler(contentTypeSer);",
      "right" : "serializationType = serializationType.withContentTypeHandler(contentTypeSer);",
      "info" : "ExpressionStatement[5378-5455]:ExpressionStatement[5408-5485]"
    }, {
      "left" : "ct = serializationType.getContentType();",
      "right" : "ct = serializationType.getContentType();",
      "info" : "ExpressionStatement[5468-5508]:ExpressionStatement[5498-5538]"
    }, {
      "left" : "Object valueToSuppress = null;",
      "right" : "Object valueToSuppress = null;",
      "info" : "VariableDeclarationStatement[5528-5558]:VariableDeclarationStatement[5558-5588]"
    }, {
      "left" : "boolean suppressNulls = false;",
      "right" : "boolean suppressNulls = false;",
      "info" : "VariableDeclarationStatement[5567-5597]:VariableDeclarationStatement[5597-5627]"
    }, {
      "left" : "JavaType actualType = (serializationType == null) ? declaredType : serializationType;",
      "right" : "JavaType actualType = (serializationType == null) ? declaredType : serializationType;",
      "info" : "VariableDeclarationStatement[5699-5784]:VariableDeclarationStatement[5729-5814]"
    }, {
      "left" : "AnnotatedMember accessor = propDef.getAccessor();",
      "right" : "AnnotatedMember accessor = propDef.getAccessor();",
      "info" : "VariableDeclarationStatement[5882-5931]:VariableDeclarationStatement[5912-5961]"
    }, {
      "left" : "if (accessor == null)",
      "right" : "if (accessor == null)",
      "info" : "IfStatement[5940-6176]:IfStatement[5970-6206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5962-6176]:Block[5992-6206]"
    }, {
      "left" : "return prov.reportBadPropertyDefinition(_beanDesc, propDef,\n                    \"could not determine property type\");",
      "right" : "return prov.reportBadPropertyDefinition(_beanDesc, propDef,\n                    \"could not determine property type\");",
      "info" : "ReturnStatement[6049-6166]:ReturnStatement[6079-6196]"
    }, {
      "left" : "Class<?> rawPropertyType = accessor.getRawType();",
      "right" : "Class<?> rawPropertyType = accessor.getRawType();",
      "info" : "VariableDeclarationStatement[6185-6234]:VariableDeclarationStatement[6215-6264]"
    }, {
      "left" : "JsonInclude.Value inclV = _config.getDefaultInclusion(actualType.getRawClass(),\n                rawPropertyType, _defaultInclusion);",
      "right" : "JsonInclude.Value inclV = _config.getDefaultInclusion(actualType.getRawClass(),\n                rawPropertyType, _defaultInclusion);",
      "info" : "VariableDeclarationStatement[6522-6654]:VariableDeclarationStatement[6552-6684]"
    }, {
      "left" : "inclV = inclV.withOverrides(propDef.findInclusion());",
      "right" : "inclV = inclV.withOverrides(propDef.findInclusion());",
      "info" : "ExpressionStatement[6713-6766]:ExpressionStatement[6743-6796]"
    }, {
      "left" : "JsonInclude.Include inclusion = inclV.getValueInclusion();",
      "right" : "JsonInclude.Include inclusion = inclV.getValueInclusion();",
      "info" : "VariableDeclarationStatement[6776-6834]:VariableDeclarationStatement[6806-6864]"
    }, {
      "left" : "if (inclusion == JsonInclude.Include.USE_DEFAULTS)",
      "right" : "if (inclusion == JsonInclude.Include.USE_DEFAULTS)",
      "info" : "IfStatement[6843-6984]:IfStatement[6873-7014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6894-6984]:Block[6924-7014]"
    }, {
      "left" : "inclusion = JsonInclude.Include.ALWAYS;",
      "right" : "inclusion = JsonInclude.Include.ALWAYS;",
      "info" : "ExpressionStatement[6935-6974]:ExpressionStatement[6965-7004]"
    }, {
      "left" : "switch (inclusion) {\n        case NON_DEFAULT:\n            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,\n            //    so that if enclosing class has this, we may need to access values of property,\n            //    whereas for global defaults OR per-property overrides, we have more\n            //    static definition. Sigh.\n            // First: case of class/type specifying it; try to find POJO property defaults\n            Object defaultBean;\n\n            // 16-Oct-2016, tatu: Note: if we cannot for some reason create \"default instance\",\n            //    revert logic to the case of general/per-property handling, so both\n            //    type-default AND null are to be excluded.\n            //    (as per [databind#1417]\n            if (_useRealPropertyDefaults && (defaultBean = getDefaultBean()) != null) {\n                // 07-Sep-2016, tatu: may also need to front-load access forcing now\n                if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n                    am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n                }\n                try {\n                    valueToSuppress = am.getValue(defaultBean);\n                } catch (Exception e) {\n                    _throwWrapped(e, propDef.getName(), defaultBean);\n                }\n            } else {\n                valueToSuppress = BeanUtil.getDefaultValue(actualType);\n                suppressNulls = true;\n            }\n            if (valueToSuppress == null) {\n                suppressNulls = true;\n            } else {\n                if (valueToSuppress.getClass().isArray()) {\n                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n                }\n            }\n            break;\n        case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals\n            // always suppress nulls\n            suppressNulls = true;\n            // and for referential types, also \"empty\", which in their case means \"absent\"\n            if (actualType.isReferenceType()) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        case NON_EMPTY:\n            // always suppress nulls\n            suppressNulls = true;\n            // but possibly also 'empty' values:\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            break;\n        case CUSTOM: // new with 2.9\n            valueToSuppress = prov.includeFilterInstance(propDef, inclV.getValueFilter());\n            if (valueToSuppress == null) { // is this legal?\n                suppressNulls = true;\n            } else {\n                suppressNulls = prov.includeFilterSuppressNulls(valueToSuppress);\n            }\n            break;\n        case NON_NULL:\n            suppressNulls = true;\n            // fall through\n        case ALWAYS: // default\n        default:\n            // we may still want to suppress empty collections\n            if (actualType.isContainerType()\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        }",
      "right" : "switch (inclusion) {\n        case NON_DEFAULT:\n            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,\n            //    so that if enclosing class has this, we may need to access values of property,\n            //    whereas for global defaults OR per-property overrides, we have more\n            //    static definition. Sigh.\n            // First: case of class/type specifying it; try to find POJO property defaults\n            Object defaultBean;\n\n            // 16-Oct-2016, tatu: Note: if we cannot for some reason create \"default instance\",\n            //    revert logic to the case of general/per-property handling, so both\n            //    type-default AND null are to be excluded.\n            //    (as per [databind#1417]\n            if (_useRealPropertyDefaults && (defaultBean = getDefaultBean()) != null) {\n                // 07-Sep-2016, tatu: may also need to front-load access forcing now\n                if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n                    am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n                }\n                try {\n                    valueToSuppress = am.getValue(defaultBean);\n                } catch (Exception e) {\n                    _throwWrapped(e, propDef.getName(), defaultBean);\n                }\n            } else {\n                valueToSuppress = BeanUtil.getDefaultValue(actualType);\n                suppressNulls = true;\n            }\n            if (valueToSuppress == null) {\n                suppressNulls = true;\n            } else {\n                if (valueToSuppress.getClass().isArray()) {\n                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n                }\n            }\n            break;\n        case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals\n            // always suppress nulls\n            suppressNulls = true;\n            // and for referential types, also \"empty\", which in their case means \"absent\"\n            if (actualType.isReferenceType()) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        case NON_EMPTY:\n            // always suppress nulls\n            suppressNulls = true;\n            // but possibly also 'empty' values:\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            break;\n        case CUSTOM: // new with 2.9\n            valueToSuppress = prov.includeFilterInstance(propDef, inclV.getValueFilter());\n            if (valueToSuppress == null) { // is this legal?\n                suppressNulls = true;\n            } else {\n                suppressNulls = prov.includeFilterSuppressNulls(valueToSuppress);\n            }\n            break;\n        case NON_NULL:\n            suppressNulls = true;\n            // fall through\n        case ALWAYS: // default\n        default:\n            // we may still want to suppress empty collections\n            if (actualType.isContainerType()\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        }",
      "info" : "SwitchStatement[6993-10225]:SwitchStatement[7023-10255]"
    }, {
      "left" : "case NON_DEFAULT:",
      "right" : "case NON_DEFAULT:",
      "info" : "SwitchCase[7022-7039]:SwitchCase[7052-7069]"
    }, {
      "left" : "Object defaultBean;",
      "right" : "Object defaultBean;",
      "info" : "VariableDeclarationStatement[7458-7477]:VariableDeclarationStatement[7488-7507]"
    }, {
      "left" : "if (_useRealPropertyDefaults && (defaultBean = getDefaultBean()) != null)",
      "right" : "if (_useRealPropertyDefaults && (defaultBean = getDefaultBean()) != null)",
      "info" : "IfStatement[7774-8495]:IfStatement[7804-8525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7848-8364]:Block[7878-8394]"
    }, {
      "left" : "if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS))",
      "right" : "if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS))",
      "info" : "IfStatement[7951-8136]:IfStatement[7981-8166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8016-8136]:Block[8046-8166]"
    }, {
      "left" : "am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));",
      "right" : "am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));",
      "info" : "ExpressionStatement[8038-8118]:ExpressionStatement[8068-8148]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8153-8350]:TryStatement[8183-8380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8157-8240]:Block[8187-8270]"
    }, {
      "left" : "valueToSuppress = am.getValue(defaultBean);",
      "right" : "valueToSuppress = am.getValue(defaultBean);",
      "info" : "ExpressionStatement[8179-8222]:ExpressionStatement[8209-8252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8261-8350]:Block[8291-8380]"
    }, {
      "left" : "_throwWrapped(e, propDef.getName(), defaultBean);",
      "right" : "_throwWrapped(e, propDef.getName(), defaultBean);",
      "info" : "ExpressionStatement[8283-8332]:ExpressionStatement[8313-8362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8370-8495]:Block[8400-8525]"
    }, {
      "left" : "valueToSuppress = BeanUtil.getDefaultValue(actualType);",
      "right" : "valueToSuppress = BeanUtil.getDefaultValue(actualType);",
      "info" : "ExpressionStatement[8388-8443]:ExpressionStatement[8418-8473]"
    }, {
      "left" : "suppressNulls = true;",
      "right" : "suppressNulls = true;",
      "info" : "ExpressionStatement[8460-8481]:ExpressionStatement[8490-8511]"
    }, {
      "left" : "if (valueToSuppress == null)",
      "right" : "if (valueToSuppress == null)",
      "info" : "IfStatement[8508-8778]:IfStatement[8538-8808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8537-8590]:Block[8567-8620]"
    }, {
      "left" : "suppressNulls = true;",
      "right" : "suppressNulls = true;",
      "info" : "ExpressionStatement[8555-8576]:ExpressionStatement[8585-8606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8596-8778]:Block[8626-8808]"
    }, {
      "left" : "if (valueToSuppress.getClass().isArray())",
      "right" : "if (valueToSuppress.getClass().isArray())",
      "info" : "IfStatement[8614-8764]:IfStatement[8644-8794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8656-8764]:Block[8686-8794]"
    }, {
      "left" : "valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);",
      "right" : "valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);",
      "info" : "ExpressionStatement[8678-8746]:ExpressionStatement[8708-8776]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8791-8797]:BreakStatement[8821-8827]"
    }, {
      "left" : "case NON_ABSENT:",
      "right" : "case NON_ABSENT:",
      "info" : "SwitchCase[8806-8822]:SwitchCase[8836-8852]"
    }, {
      "left" : "suppressNulls = true;",
      "right" : "suppressNulls = true;",
      "info" : "ExpressionStatement[8921-8942]:ExpressionStatement[8951-8972]"
    }, {
      "left" : "if (actualType.isReferenceType())",
      "right" : "if (actualType.isReferenceType())",
      "info" : "IfStatement[9046-9166]:IfStatement[9076-9196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9080-9166]:Block[9110-9196]"
    }, {
      "left" : "valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;",
      "right" : "valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;",
      "info" : "ExpressionStatement[9098-9152]:ExpressionStatement[9128-9182]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9179-9185]:BreakStatement[9209-9215]"
    }, {
      "left" : "case NON_EMPTY:",
      "right" : "case NON_EMPTY:",
      "info" : "SwitchCase[9194-9209]:SwitchCase[9224-9239]"
    }, {
      "left" : "suppressNulls = true;",
      "right" : "suppressNulls = true;",
      "info" : "ExpressionStatement[9259-9280]:ExpressionStatement[9289-9310]"
    }, {
      "left" : "valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;",
      "right" : "valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;",
      "info" : "ExpressionStatement[9342-9396]:ExpressionStatement[9372-9426]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9409-9415]:BreakStatement[9439-9445]"
    }, {
      "left" : "case CUSTOM:",
      "right" : "case CUSTOM:",
      "info" : "SwitchCase[9424-9436]:SwitchCase[9454-9466]"
    }, {
      "left" : "valueToSuppress = prov.includeFilterInstance(propDef, inclV.getValueFilter());",
      "right" : "valueToSuppress = prov.includeFilterInstance(propDef, inclV.getValueFilter());",
      "info" : "ExpressionStatement[9465-9543]:ExpressionStatement[9495-9573]"
    }, {
      "left" : "if (valueToSuppress == null)",
      "right" : "if (valueToSuppress == null)",
      "info" : "IfStatement[9556-9759]:IfStatement[9586-9789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9585-9656]:Block[9615-9686]"
    }, {
      "left" : "suppressNulls = true;",
      "right" : "suppressNulls = true;",
      "info" : "ExpressionStatement[9621-9642]:ExpressionStatement[9651-9672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9662-9759]:Block[9692-9789]"
    }, {
      "left" : "suppressNulls = prov.includeFilterSuppressNulls(valueToSuppress);",
      "right" : "suppressNulls = prov.includeFilterSuppressNulls(valueToSuppress);",
      "info" : "ExpressionStatement[9680-9745]:ExpressionStatement[9710-9775]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9772-9778]:BreakStatement[9802-9808]"
    }, {
      "left" : "case NON_NULL:",
      "right" : "case NON_NULL:",
      "info" : "SwitchCase[9787-9801]:SwitchCase[9817-9831]"
    }, {
      "left" : "suppressNulls = true;",
      "right" : "suppressNulls = true;",
      "info" : "ExpressionStatement[9814-9835]:ExpressionStatement[9844-9865]"
    }, {
      "left" : "case ALWAYS:",
      "right" : "case ALWAYS:",
      "info" : "SwitchCase[9872-9884]:SwitchCase[9902-9914]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9904-9912]:SwitchCase[9934-9942]"
    }, {
      "left" : "if (actualType.isContainerType()\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS))",
      "right" : "if (actualType.isContainerType()\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS))",
      "info" : "IfStatement[9988-10196]:IfStatement[10018-10226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10110-10196]:Block[10140-10226]"
    }, {
      "left" : "valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;",
      "right" : "valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;",
      "info" : "ExpressionStatement[10128-10182]:ExpressionStatement[10158-10212]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10209-10215]:BreakStatement[10239-10245]"
    }, {
      "left" : "Class<?>[] views = propDef.findViews();",
      "right" : "Class<?>[] views = propDef.findViews();",
      "info" : "VariableDeclarationStatement[10234-10273]:VariableDeclarationStatement[10264-10303]"
    }, {
      "left" : "if (views == null)",
      "right" : "if (views == null)",
      "info" : "IfStatement[10282-10362]:IfStatement[10312-10392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10301-10362]:Block[10331-10392]"
    }, {
      "left" : "views = _beanDesc.findDefaultViews();",
      "right" : "views = _beanDesc.findDefaultViews();",
      "info" : "ExpressionStatement[10315-10352]:ExpressionStatement[10345-10382]"
    }, {
      "left" : "BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n                am, _beanDesc.getClassAnnotations(), declaredType,\n                ser, typeSer, serializationType, suppressNulls, valueToSuppress, views);",
      "right" : "BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n                am, _beanDesc.getClassAnnotations(), declaredType,\n                ser, typeSer, serializationType, suppressNulls, valueToSuppress, views);",
      "info" : "VariableDeclarationStatement[10371-10583]:VariableDeclarationStatement[10401-10613]"
    }, {
      "left" : "Object serDef = _annotationIntrospector.findNullSerializer(am);",
      "right" : "Object serDef = _annotationIntrospector.findNullSerializer(am);",
      "info" : "VariableDeclarationStatement[10638-10701]:VariableDeclarationStatement[10668-10731]"
    }, {
      "left" : "if (serDef != null)",
      "right" : "if (serDef != null)",
      "info" : "IfStatement[10710-10816]:IfStatement[10740-10846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10730-10816]:Block[10760-10846]"
    }, {
      "left" : "bpw.assignNullSerializer(prov.serializerInstance(am, serDef));",
      "right" : "bpw.assignNullSerializer(prov.serializerInstance(am, serDef));",
      "info" : "ExpressionStatement[10744-10806]:ExpressionStatement[10774-10836]"
    }, {
      "left" : "NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);",
      "right" : "NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);",
      "info" : "VariableDeclarationStatement[10869-10955]:VariableDeclarationStatement[10899-10985]"
    }, {
      "left" : "if (unwrapper != null)",
      "right" : "if (unwrapper != null)",
      "info" : "IfStatement[10964-11049]:IfStatement[10994-11079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10987-11049]:Block[11017-11079]"
    }, {
      "left" : "bpw = bpw.unwrappingWriter(unwrapper);",
      "right" : "bpw = bpw.unwrappingWriter(unwrapper);",
      "info" : "ExpressionStatement[11001-11039]:ExpressionStatement[11031-11069]"
    }, {
      "left" : "return bpw;",
      "right" : "return bpw;",
      "info" : "ReturnStatement[11058-11069]:ReturnStatement[11088-11099]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[11588-11597]:Modifier[11618-11627]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[11598-11606]:SimpleType[11628-11636]"
    }, {
      "left" : "findSerializationType",
      "right" : "findSerializationType",
      "info" : "SimpleName[11607-11628]:SimpleName[11637-11658]"
    }, {
      "left" : "Annotated a",
      "right" : "Annotated a",
      "info" : "SingleVariableDeclaration[11629-11640]:SingleVariableDeclaration[11659-11670]"
    }, {
      "left" : "boolean useStaticTyping",
      "right" : "boolean useStaticTyping",
      "info" : "SingleVariableDeclaration[11642-11665]:SingleVariableDeclaration[11672-11695]"
    }, {
      "left" : "JavaType declaredType",
      "right" : "JavaType declaredType",
      "info" : "SingleVariableDeclaration[11667-11688]:SingleVariableDeclaration[11697-11718]"
    }, {
      "left" : "JsonMappingException",
      "right" : "JsonMappingException",
      "info" : "SimpleType[11705-11725]:SimpleType[11735-11755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11730-13895]:Block[11760-13925]"
    }, {
      "left" : "JavaType secondary = _annotationIntrospector.refineSerializationType(_config, a, declaredType);",
      "right" : "JavaType secondary = _annotationIntrospector.refineSerializationType(_config, a, declaredType);",
      "info" : "VariableDeclarationStatement[11740-11835]:VariableDeclarationStatement[11770-11865]"
    }, {
      "left" : "if (secondary != declaredType)",
      "right" : "if (secondary != declaredType)",
      "info" : "IfStatement[11977-13351]:IfStatement[12007-13381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12008-13351]:Block[12038-13381]"
    }, {
      "left" : "Class<?> serClass = secondary.getRawClass();",
      "right" : "Class<?> serClass = secondary.getRawClass();",
      "info" : "VariableDeclarationStatement[12022-12066]:VariableDeclarationStatement[12052-12096]"
    }, {
      "left" : "Class<?> rawDeclared = declaredType.getRawClass();",
      "right" : "Class<?> rawDeclared = declaredType.getRawClass();",
      "info" : "VariableDeclarationStatement[12128-12178]:VariableDeclarationStatement[12158-12208]"
    }, {
      "left" : "if (serClass.isAssignableFrom(rawDeclared))",
      "right" : "if (serClass.isAssignableFrom(rawDeclared))",
      "info" : "IfStatement[12191-13267]:IfStatement[12221-13297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12235-12282]:Block[12265-12312]"
    }, {
      "left" : ";",
      "right" : ";",
      "info" : "EmptyStatement[12253-12254]:EmptyStatement[12283-12284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12288-13267]:Block[12318-13297]"
    }, {
      "left" : "if (!rawDeclared.isAssignableFrom(serClass))",
      "right" : "if (!rawDeclared.isAssignableFrom(serClass))",
      "info" : "IfStatement[12722-12997]:IfStatement[12752-13027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12767-12997]:Block[12797-13027]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Illegal concrete-type annotation for method '\"+a.getName()+\"': class \"+serClass.getName()+\" not a super-type of (declared) class \"+rawDeclared.getName());",
      "right" : "throw new IllegalArgumentException(\"Illegal concrete-type annotation for method '\"+a.getName()+\"': class \"+serClass.getName()+\" not a super-type of (declared) class \"+rawDeclared.getName());",
      "info" : "ThrowStatement[12789-12979]:ThrowStatement[12819-13009]"
    }, {
      "left" : "useStaticTyping = true;",
      "right" : "useStaticTyping = true;",
      "info" : "ExpressionStatement[13280-13303]:ExpressionStatement[13310-13333]"
    }, {
      "left" : "declaredType = secondary;",
      "right" : "declaredType = secondary;",
      "info" : "ExpressionStatement[13316-13341]:ExpressionStatement[13346-13371]"
    }, {
      "left" : "JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(a);",
      "right" : "JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(a);",
      "info" : "VariableDeclarationStatement[13436-13517]:VariableDeclarationStatement[13466-13547]"
    }, {
      "left" : "if ((typing != null) && (typing != JsonSerialize.Typing.DEFAULT_TYPING))",
      "right" : "if ((typing != null) && (typing != JsonSerialize.Typing.DEFAULT_TYPING))",
      "info" : "IfStatement[13526-13681]:IfStatement[13556-13711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13599-13681]:Block[13629-13711]"
    }, {
      "left" : "useStaticTyping = (typing == JsonSerialize.Typing.STATIC);",
      "right" : "useStaticTyping = (typing == JsonSerialize.Typing.STATIC);",
      "info" : "ExpressionStatement[13613-13671]:ExpressionStatement[13643-13701]"
    }, {
      "left" : "if (useStaticTyping)",
      "right" : "if (useStaticTyping)",
      "info" : "IfStatement[13690-13868]:IfStatement[13720-13898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13711-13868]:Block[13741-13898]"
    }, {
      "left" : "return declaredType.withStaticTyping();",
      "right" : "return declaredType.withStaticTyping();",
      "info" : "ReturnStatement[13806-13845]:ReturnStatement[13836-13875]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13877-13889]:ReturnStatement[13907-13919]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14094-14103]:Modifier[14124-14133]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[14104-14110]:SimpleType[14134-14140]"
    }, {
      "left" : "getDefaultBean",
      "right" : "getDefaultBean",
      "info" : "SimpleName[14111-14125]:SimpleName[14141-14155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14132-15080]:Block[14162-15110]"
    }, {
      "left" : "Object def = _defaultBean;",
      "right" : "Object def = _defaultBean;",
      "info" : "VariableDeclarationStatement[14142-14168]:VariableDeclarationStatement[14172-14198]"
    }, {
      "left" : "if (def == null)",
      "right" : "if (def == null)",
      "info" : "IfStatement[14177-15009]:IfStatement[14207-15039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14194-15009]:Block[14224-15039]"
    }, {
      "left" : "def = _beanDesc.instantiateBean(_config.canOverrideAccessModifiers());",
      "right" : "def = _beanDesc.instantiateBean(_config.canOverrideAccessModifiers());",
      "info" : "ExpressionStatement[14373-14443]:ExpressionStatement[14403-14473]"
    }, {
      "left" : "if (def == null)",
      "right" : "if (def == null)",
      "info" : "IfStatement[14456-14967]:IfStatement[14486-14997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14473-14967]:Block[14503-14997]"
    }, {
      "left" : "def = NO_DEFAULT_MARKER;",
      "right" : "def = NO_DEFAULT_MARKER;",
      "info" : "ExpressionStatement[14929-14953]:ExpressionStatement[14959-14983]"
    }, {
      "left" : "_defaultBean = def;",
      "right" : "_defaultBean = def;",
      "info" : "ExpressionStatement[14980-14999]:ExpressionStatement[15010-15029]"
    }, {
      "left" : "return (def == NO_DEFAULT_MARKER) ? null : _defaultBean;",
      "right" : "return (def == NO_DEFAULT_MARKER) ? null : _defaultBean;",
      "info" : "ReturnStatement[15018-15074]:ReturnStatement[15048-15104]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[15925-15936]:MarkerAnnotation[15955-15966]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[15954-15963]:Modifier[15984-15993]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[15964-15970]:SimpleType[15994-16000]"
    }, {
      "left" : "getPropertyDefaultValue",
      "right" : "getPropertyDefaultValue",
      "info" : "SimpleName[15971-15994]:SimpleName[16001-16024]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[15995-16006]:SingleVariableDeclaration[16025-16036]"
    }, {
      "left" : "AnnotatedMember member",
      "right" : "AnnotatedMember member",
      "info" : "SingleVariableDeclaration[16008-16030]:SingleVariableDeclaration[16038-16060]"
    }, {
      "left" : "JavaType type",
      "right" : "JavaType type",
      "info" : "SingleVariableDeclaration[16044-16057]:SingleVariableDeclaration[16074-16087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16063-16365]:Block[16093-16395]"
    }, {
      "left" : "Object defaultBean = getDefaultBean();",
      "right" : "Object defaultBean = getDefaultBean();",
      "info" : "VariableDeclarationStatement[16073-16111]:VariableDeclarationStatement[16103-16141]"
    }, {
      "left" : "if (defaultBean == null)",
      "right" : "if (defaultBean == null)",
      "info" : "IfStatement[16120-16198]:IfStatement[16150-16228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16145-16198]:Block[16175-16228]"
    }, {
      "left" : "return getDefaultValue(type);",
      "right" : "return getDefaultValue(type);",
      "info" : "ReturnStatement[16159-16188]:ReturnStatement[16189-16218]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16207-16359]:TryStatement[16237-16389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16211-16271]:Block[16241-16301]"
    }, {
      "left" : "return member.getValue(defaultBean);",
      "right" : "return member.getValue(defaultBean);",
      "info" : "ReturnStatement[16225-16261]:ReturnStatement[16255-16291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16292-16359]:Block[16322-16389]"
    }, {
      "left" : "return _throwWrapped(e, name, defaultBean);",
      "right" : "return _throwWrapped(e, name, defaultBean);",
      "info" : "ReturnStatement[16306-16349]:ReturnStatement[16336-16379]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[16416-16427]:MarkerAnnotation[16446-16457]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16445-16454]:Modifier[16475-16484]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[16455-16461]:SimpleType[16485-16491]"
    }, {
      "left" : "getDefaultValue",
      "right" : "getDefaultValue",
      "info" : "SimpleName[16462-16477]:SimpleName[16492-16507]"
    }, {
      "left" : "JavaType type",
      "right" : "JavaType type",
      "info" : "SingleVariableDeclaration[16478-16491]:SingleVariableDeclaration[16508-16521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16493-16547]:Block[16523-16577]"
    }, {
      "left" : "return BeanUtil.getDefaultValue(type);",
      "right" : "return BeanUtil.getDefaultValue(type);",
      "info" : "ReturnStatement[16503-16541]:ReturnStatement[16533-16571]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16746-16755]:Modifier[16776-16785]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[16756-16762]:SimpleType[16786-16792]"
    }, {
      "left" : "_throwWrapped",
      "right" : "_throwWrapped",
      "info" : "SimpleName[16763-16776]:SimpleName[16793-16806]"
    }, {
      "left" : "Exception e",
      "right" : "Exception e",
      "info" : "SingleVariableDeclaration[16777-16788]:SingleVariableDeclaration[16807-16818]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[16790-16805]:SingleVariableDeclaration[16820-16835]"
    }, {
      "left" : "Object defaultBean",
      "right" : "Object defaultBean",
      "info" : "SingleVariableDeclaration[16807-16825]:SingleVariableDeclaration[16837-16855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16831-17152]:Block[16861-17182]"
    }, {
      "left" : "Throwable t = e;",
      "right" : "Throwable t = e;",
      "info" : "VariableDeclarationStatement[16841-16857]:VariableDeclarationStatement[16871-16887]"
    }, {
      "left" : "while (t.getCause() != null)",
      "right" : "while (t.getCause() != null)",
      "info" : "WhileStatement[16866-16936]:WhileStatement[16896-16966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16895-16936]:Block[16925-16966]"
    }, {
      "left" : "t = t.getCause();",
      "right" : "t = t.getCause();",
      "info" : "ExpressionStatement[16909-16926]:ExpressionStatement[16939-16956]"
    }, {
      "left" : "ClassUtil.throwIfError(t);",
      "right" : "ClassUtil.throwIfError(t);",
      "info" : "ExpressionStatement[16945-16971]:ExpressionStatement[16975-17001]"
    }, {
      "left" : "ClassUtil.throwIfRTE(t);",
      "right" : "ClassUtil.throwIfRTE(t);",
      "info" : "ExpressionStatement[16980-17004]:ExpressionStatement[17010-17034]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Failed to get property '\"+propName+\"' of default \"+defaultBean.getClass().getName()+\" instance\");",
      "right" : "throw new IllegalArgumentException(\"Failed to get property '\"+propName+\"' of default \"+defaultBean.getClass().getName()+\" instance\");",
      "info" : "ThrowStatement[17013-17146]:ThrowStatement[17043-17176]"
    } ]
  },
  "interFileMappings" : { }
}