{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SortsTiming",
      "right" : "SortsTiming",
      "info" : "TypeDeclaration[572-31976]:TypeDeclaration[625-32324]"
    }, {
      "left" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"#.###\");",
      "right" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"#.###\");",
      "info" : "FieldDeclaration[604-675]:FieldDeclaration[657-728]"
    }, {
      "left" : "private static final int SIZE = 100000;",
      "right" : "private static final int SIZE = 100000;",
      "info" : "FieldDeclaration[680-719]:FieldDeclaration[733-772]"
    }, {
      "left" : "private static final boolean showResult = false;",
      "right" : "private static final boolean showResult = false;",
      "info" : "FieldDeclaration[725-773]:FieldDeclaration[778-826]"
    }, {
      "left" : "private static final boolean showComparison = true;",
      "right" : "private static final boolean showComparison = true;",
      "info" : "FieldDeclaration[778-829]:FieldDeclaration[831-882]"
    }, {
      "left" : "private static final boolean checkResults = true;",
      "right" : "private static final boolean checkResults = true;",
      "info" : "FieldDeclaration[834-883]:FieldDeclaration[887-936]"
    }, {
      "left" : "private static int insertionCount = 0;",
      "right" : "private static int insertionCount = 0;",
      "info" : "FieldDeclaration[889-927]:FieldDeclaration[942-980]"
    }, {
      "left" : "private static final double[] insertionResults = new double[1 * 3];",
      "right" : "private static final double[] insertionResults = new double[1 * 3];",
      "info" : "FieldDeclaration[932-999]:FieldDeclaration[985-1052]"
    }, {
      "left" : "private static int bubbleCount = 0;",
      "right" : "private static int bubbleCount = 0;",
      "info" : "FieldDeclaration[1004-1039]:FieldDeclaration[1057-1092]"
    }, {
      "left" : "private static final double[] bubbleResults = new double[1 * 3];",
      "right" : "private static final double[] bubbleResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1044-1108]:FieldDeclaration[1097-1161]"
    }, {
      "left" : "private static int shellCount = 0;",
      "right" : "private static int shellCount = 0;",
      "info" : "FieldDeclaration[1113-1147]:FieldDeclaration[1166-1200]"
    }, {
      "left" : "private static final double[] shellResults = new double[1 * 3];",
      "right" : "private static final double[] shellResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1152-1215]:FieldDeclaration[1205-1268]"
    }, {
      "left" : "private static int mergeInPlaceCount = 0;",
      "right" : "private static int mergeInPlaceCount = 0;",
      "info" : "FieldDeclaration[1220-1261]:FieldDeclaration[1273-1314]"
    }, {
      "left" : "private static final double[] mergeInPlaceResults = new double[1 * 3];",
      "right" : "private static final double[] mergeInPlaceResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1266-1336]:FieldDeclaration[1319-1389]"
    }, {
      "left" : "private static int mergeNotInPlaceCount = 0;",
      "right" : "private static int mergeNotInPlaceCount = 0;",
      "info" : "FieldDeclaration[1341-1385]:FieldDeclaration[1394-1438]"
    }, {
      "left" : "private static final double[] mergeNotInPlaceResults = new double[1 * 3];",
      "right" : "private static final double[] mergeNotInPlaceResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1390-1463]:FieldDeclaration[1443-1516]"
    }, {
      "left" : "private static int quickCount = 0;",
      "right" : "private static int quickCount = 0;",
      "info" : "FieldDeclaration[1468-1502]:FieldDeclaration[1521-1555]"
    }, {
      "left" : "private static final double[] quickResults = new double[3 * 3];",
      "right" : "private static final double[] quickResults = new double[3 * 3];",
      "info" : "FieldDeclaration[1507-1570]:FieldDeclaration[1560-1623]"
    }, {
      "left" : "private static int heapCount = 0;",
      "right" : "private static int heapCount = 0;",
      "info" : "FieldDeclaration[1575-1608]:FieldDeclaration[1628-1661]"
    }, {
      "left" : "private static final double[] heapResults = new double[1 * 3];",
      "right" : "private static final double[] heapResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1613-1675]:FieldDeclaration[1666-1728]"
    }, {
      "left" : "private static int countingCount = 0;",
      "right" : "private static int countingCount = 0;",
      "info" : "FieldDeclaration[1680-1717]:FieldDeclaration[1733-1770]"
    }, {
      "left" : "private static final double[] countingResults = new double[1 * 3];",
      "right" : "private static final double[] countingResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1722-1788]:FieldDeclaration[1775-1841]"
    }, {
      "left" : "private static int radixCount = 0;",
      "right" : "private static int radixCount = 0;",
      "info" : "FieldDeclaration[1793-1827]:FieldDeclaration[1846-1880]"
    }, {
      "left" : "private static final double[] radixResults = new double[1 * 3];",
      "right" : "private static final double[] radixResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1832-1895]:FieldDeclaration[1885-1948]"
    }, {
      "left" : "private static int americanFlagCount = 0;",
      "right" : "private static int americanFlagCount = 0;",
      "info" : "FieldDeclaration[1900-1941]:FieldDeclaration[1953-1994]"
    }, {
      "left" : "private static final double[] americanFlagResults = new double[1 * 3];",
      "right" : "private static final double[] americanFlagResults = new double[1 * 3];",
      "info" : "FieldDeclaration[1946-2016]:FieldDeclaration[1999-2069]"
    }, {
      "left" : "private static final boolean showInsertion = true;",
      "right" : "private static final boolean showInsertion = true;",
      "info" : "FieldDeclaration[2022-2072]:FieldDeclaration[2075-2125]"
    }, {
      "left" : "private static final boolean showBubble = true;",
      "right" : "private static final boolean showBubble = true;",
      "info" : "FieldDeclaration[2077-2124]:FieldDeclaration[2130-2177]"
    }, {
      "left" : "private static final boolean showShell = true;",
      "right" : "private static final boolean showShell = true;",
      "info" : "FieldDeclaration[2129-2175]:FieldDeclaration[2182-2228]"
    }, {
      "left" : "private static final boolean showMergeInPlace = true;",
      "right" : "private static final boolean showMergeInPlace = true;",
      "info" : "FieldDeclaration[2180-2233]:FieldDeclaration[2233-2286]"
    }, {
      "left" : "private static final boolean showMergeNotInPlace = true;",
      "right" : "private static final boolean showMergeNotInPlace = true;",
      "info" : "FieldDeclaration[2238-2294]:FieldDeclaration[2291-2347]"
    }, {
      "left" : "private static final boolean showQuick = true;",
      "right" : "private static final boolean showQuick = true;",
      "info" : "FieldDeclaration[2299-2345]:FieldDeclaration[2352-2398]"
    }, {
      "left" : "private static final boolean showHeap = true;",
      "right" : "private static final boolean showHeap = true;",
      "info" : "FieldDeclaration[2350-2395]:FieldDeclaration[2403-2448]"
    }, {
      "left" : "private static final boolean showCounting = true;",
      "right" : "private static final boolean showCounting = true;",
      "info" : "FieldDeclaration[2400-2449]:FieldDeclaration[2453-2502]"
    }, {
      "left" : "private static final boolean showRadix = true;",
      "right" : "private static final boolean showRadix = true;",
      "info" : "FieldDeclaration[2454-2500]:FieldDeclaration[2507-2553]"
    }, {
      "left" : "private static final boolean showAmericanFlag = true;",
      "right" : "private static final boolean showAmericanFlag = true;",
      "info" : "FieldDeclaration[2505-2558]:FieldDeclaration[2558-2611]"
    }, {
      "left" : "private static Integer[] unsorted = null;",
      "right" : "private static Integer[] unsorted = null;",
      "info" : "FieldDeclaration[2564-2605]:FieldDeclaration[2617-2658]"
    }, {
      "left" : "private static Integer[] sorted = null;",
      "right" : "private static Integer[] sorted = null;",
      "info" : "FieldDeclaration[2610-2649]:FieldDeclaration[2663-2702]"
    }, {
      "left" : "private static Integer[] reverse = null;",
      "right" : "private static Integer[] reverse = null;",
      "info" : "FieldDeclaration[2654-2694]:FieldDeclaration[2707-2747]"
    }, {
      "left" : "public static void main(String[] args)",
      "right" : "public static void main(String[] args)",
      "info" : "MethodDeclaration[2700-27237]:MethodDeclaration[2753-27362]"
    }, {
      "left" : "private static final void showComparison()",
      "right" : "private static final void showComparison()",
      "info" : "MethodDeclaration[27243-30206]:MethodDeclaration[27368-30417]"
    }, {
      "left" : "private static final void showResult(Integer[] u, Integer[] r)",
      "right" : "private static final void showResult(Integer[] u, Integer[] r)",
      "info" : "MethodDeclaration[30212-30414]:MethodDeclaration[30423-30625]"
    }, {
      "left" : "private static final boolean check(Integer[] array)",
      "right" : "private static final boolean check(Integer[] array)",
      "info" : "MethodDeclaration[30420-30630]:MethodDeclaration[30631-30841]"
    }, {
      "left" : "public static final String print(Integer[] array)",
      "right" : "public static final String print(Integer[] array)",
      "info" : "MethodDeclaration[30636-30739]:MethodDeclaration[30847-30950]"
    }, {
      "left" : "public static final String print(Integer[] array, int start, int length)",
      "right" : "public static final String print(Integer[] array, int start, int length)",
      "info" : "MethodDeclaration[30745-31088]:MethodDeclaration[30956-31299]"
    }, {
      "left" : "public static final String printWithPivot(Integer[] array, int pivotIndex, int start, int length)",
      "right" : "public static final String printWithPivot(Integer[] array, int pivotIndex, int start, int length)",
      "info" : "MethodDeclaration[31094-31564]:MethodDeclaration[31305-31775]"
    }, {
      "left" : "private static final long fSLEEP_INTERVAL = 100;",
      "right" : "private static final long fSLEEP_INTERVAL = 100;",
      "info" : "FieldDeclaration[31569-31617]:FieldDeclaration[31917-31965]"
    }, {
      "left" : "private static final void collectGarbage()",
      "right" : "private static final void collectGarbage()",
      "info" : "MethodDeclaration[31623-31974]:MethodDeclaration[31971-32322]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2739-27237]:Block[2792-27362]"
    }, {
      "left" : "System.out.println(\"Generating random array.\");",
      "right" : "System.out.println(\"Generating random array.\");",
      "info" : "ExpressionStatement[2749-2796]:ExpressionStatement[2802-2849]"
    }, {
      "left" : "Random random = new Random();",
      "right" : "Random random = new Random();",
      "info" : "VariableDeclarationStatement[2805-2834]:VariableDeclarationStatement[2858-2887]"
    }, {
      "left" : "unsorted = new Integer[SIZE];",
      "right" : "unsorted = new Integer[SIZE];",
      "info" : "ExpressionStatement[2843-2872]:ExpressionStatement[2896-2925]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[2881-2891]:VariableDeclarationStatement[2934-2944]"
    }, {
      "left" : "while (i < unsorted.length)",
      "right" : "while (i < unsorted.length)",
      "info" : "WhileStatement[2900-3028]:WhileStatement[2953-3081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2928-3028]:Block[2981-3081]"
    }, {
      "left" : "int j = random.nextInt(unsorted.length * 10);",
      "right" : "int j = random.nextInt(unsorted.length * 10);",
      "info" : "VariableDeclarationStatement[2942-2987]:VariableDeclarationStatement[2995-3040]"
    }, {
      "left" : "unsorted[i++] = j;",
      "right" : "unsorted[i++] = j;",
      "info" : "ExpressionStatement[3000-3018]:ExpressionStatement[3053-3071]"
    }, {
      "left" : "System.out.println(\"Generated random array.\");",
      "right" : "System.out.println(\"Generated random array.\");",
      "info" : "ExpressionStatement[3037-3083]:ExpressionStatement[3090-3136]"
    }, {
      "left" : "System.out.println(\"Generating sorted array.\");",
      "right" : "System.out.println(\"Generating sorted array.\");",
      "info" : "ExpressionStatement[3093-3140]:ExpressionStatement[3146-3193]"
    }, {
      "left" : "sorted = new Integer[SIZE];",
      "right" : "sorted = new Integer[SIZE];",
      "info" : "ExpressionStatement[3149-3176]:ExpressionStatement[3202-3229]"
    }, {
      "left" : "for (i = 0; i < sorted.length; i++)",
      "right" : "for (i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[3185-3259]:ForStatement[3238-3312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3221-3259]:Block[3274-3312]"
    }, {
      "left" : "sorted[i] = i;",
      "right" : "sorted[i] = i;",
      "info" : "ExpressionStatement[3235-3249]:ExpressionStatement[3288-3302]"
    }, {
      "left" : "System.out.println(\"Generated sorted array.\");",
      "right" : "System.out.println(\"Generated sorted array.\");",
      "info" : "ExpressionStatement[3268-3314]:ExpressionStatement[3321-3367]"
    }, {
      "left" : "System.out.println(\"Generating reverse sorted array.\");",
      "right" : "System.out.println(\"Generating reverse sorted array.\");",
      "info" : "ExpressionStatement[3324-3379]:ExpressionStatement[3377-3432]"
    }, {
      "left" : "reverse = new Integer[SIZE];",
      "right" : "reverse = new Integer[SIZE];",
      "info" : "ExpressionStatement[3388-3416]:ExpressionStatement[3441-3469]"
    }, {
      "left" : "for (i = (reverse.length - 1); i >= 0; i--)",
      "right" : "for (i = (reverse.length - 1); i >= 0; i--)",
      "info" : "ForStatement[3425-3521]:ForStatement[3478-3574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3469-3521]:Block[3522-3574]"
    }, {
      "left" : "reverse[i] = (SIZE - 1) - i;",
      "right" : "reverse[i] = (SIZE - 1) - i;",
      "info" : "ExpressionStatement[3483-3511]:ExpressionStatement[3536-3564]"
    }, {
      "left" : "System.out.println(\"Generated reverse sorted array.\");",
      "right" : "System.out.println(\"Generated reverse sorted array.\");",
      "info" : "ExpressionStatement[3530-3584]:ExpressionStatement[3583-3637]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[3593-3614]:ExpressionStatement[3646-3667]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[3623-3642]:ExpressionStatement[3676-3695]"
    }, {
      "left" : "System.out.println(\"Starting sorts...\");",
      "right" : "System.out.println(\"Starting sorts...\");",
      "info" : "ExpressionStatement[3652-3692]:ExpressionStatement[3705-3745]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[3701-3722]:ExpressionStatement[3754-3775]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[3731-3750]:ExpressionStatement[3784-3803]"
    }, {
      "left" : "if (showInsertion)",
      "right" : "if (showInsertion)",
      "info" : "IfStatement[3759-5735]:IfStatement[3812-5794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3778-5735]:Block[3831-5794]"
    }, {
      "left" : "long bInsertion = System.nanoTime();",
      "right" : "long bInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[3822-3858]:VariableDeclarationStatement[3875-3911]"
    }, {
      "left" : "Integer[] result = InsertionSort.sort(unsorted.clone());",
      "right" : "Integer[] result = InsertionSort.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[3871-3927]:VariableDeclarationStatement[3924-3980]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[3940-4036]:IfStatement[3993-4089]"
    }, {
      "left" : "System.err.println(\"InsertionSort failed.\");",
      "right" : "System.err.println(\"InsertionSort failed.\");",
      "info" : "ExpressionStatement[3992-4036]:ExpressionStatement[4045-4089]"
    }, {
      "left" : "long aInsertion = System.nanoTime();",
      "right" : "long aInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[4049-4085]:VariableDeclarationStatement[4102-4138]"
    }, {
      "left" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "right" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[4098-4157]:VariableDeclarationStatement[4151-4210]"
    }, {
      "left" : "System.out.println(\"Random: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[4170-4247]:ExpressionStatement[4223-4300]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[4260-4321]:IfStatement[4313-4374]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[4292-4321]:ExpressionStatement[4345-4374]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[4334-4412]:IfStatement[4387-4465]"
    }, {
      "left" : "insertionResults[insertionCount++] = diff;",
      "right" : "insertionResults[insertionCount++] = diff;",
      "info" : "ExpressionStatement[4370-4412]:ExpressionStatement[4423-4465]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[4425-4442]:ExpressionStatement[4478-4497]"
    }, {
      "left" : "bInsertion = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[4456-4487]:ExpressionStatement[4511-4542]"
    }, {
      "left" : "result = InsertionSort.sort(sorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[4500-4544]:ExpressionStatement[4555-4599]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[4557-4653]:IfStatement[4612-4708]"
    }, {
      "left" : "System.err.println(\"InsertionSort failed.\");",
      "right" : "System.err.println(\"InsertionSort failed.\");",
      "info" : "ExpressionStatement[4609-4653]:ExpressionStatement[4664-4708]"
    }, {
      "left" : "aInsertion = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[4666-4697]:ExpressionStatement[4721-4752]"
    }, {
      "left" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[4710-4762]:ExpressionStatement[4765-4817]"
    }, {
      "left" : "System.out.println(\"Sorted: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[4775-4852]:ExpressionStatement[4830-4907]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[4865-4924]:IfStatement[4920-4979]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[4897-4924]:ExpressionStatement[4952-4979]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[4937-5015]:IfStatement[4992-5070]"
    }, {
      "left" : "insertionResults[insertionCount++] = diff;",
      "right" : "insertionResults[insertionCount++] = diff;",
      "info" : "ExpressionStatement[4973-5015]:ExpressionStatement[5028-5070]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[5028-5045]:ExpressionStatement[5083-5102]"
    }, {
      "left" : "bInsertion = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[5059-5090]:ExpressionStatement[5116-5147]"
    }, {
      "left" : "result = InsertionSort.sort(reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[5103-5148]:ExpressionStatement[5160-5205]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[5161-5257]:IfStatement[5218-5314]"
    }, {
      "left" : "System.err.println(\"InsertionSort failed.\");",
      "right" : "System.err.println(\"InsertionSort failed.\");",
      "info" : "ExpressionStatement[5213-5257]:ExpressionStatement[5270-5314]"
    }, {
      "left" : "aInsertion = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[5270-5301]:ExpressionStatement[5327-5358]"
    }, {
      "left" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[5314-5366]:ExpressionStatement[5371-5423]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[5379-5464]:ExpressionStatement[5436-5521]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[5477-5537]:IfStatement[5534-5594]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[5509-5537]:ExpressionStatement[5566-5594]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[5550-5628]:IfStatement[5607-5685]"
    }, {
      "left" : "insertionResults[insertionCount++] = diff;",
      "right" : "insertionResults[insertionCount++] = diff;",
      "info" : "ExpressionStatement[5586-5628]:ExpressionStatement[5643-5685]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[5641-5658]:ExpressionStatement[5698-5717]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[5672-5693]:ExpressionStatement[5731-5752]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[5706-5725]:ExpressionStatement[5765-5784]"
    }, {
      "left" : "if (showBubble)",
      "right" : "if (showBubble)",
      "info" : "IfStatement[5745-7634]:IfStatement[5804-7699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5761-7634]:Block[5820-7699]"
    }, {
      "left" : "long bBubble = System.nanoTime();",
      "right" : "long bBubble = System.nanoTime();",
      "info" : "VariableDeclarationStatement[5802-5835]:VariableDeclarationStatement[5861-5894]"
    }, {
      "left" : "Integer[] result = BubbleSort.sort(unsorted.clone());",
      "right" : "Integer[] result = BubbleSort.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[5848-5901]:VariableDeclarationStatement[5907-5960]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[5914-6007]:IfStatement[5973-6066]"
    }, {
      "left" : "System.err.println(\"BubbleSort failed.\");",
      "right" : "System.err.println(\"BubbleSort failed.\");",
      "info" : "ExpressionStatement[5966-6007]:ExpressionStatement[6025-6066]"
    }, {
      "left" : "long aBubble = System.nanoTime();",
      "right" : "long aBubble = System.nanoTime();",
      "info" : "VariableDeclarationStatement[6020-6053]:VariableDeclarationStatement[6079-6112]"
    }, {
      "left" : "double diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "right" : "double diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[6066-6119]:VariableDeclarationStatement[6125-6178]"
    }, {
      "left" : "System.out.println(\"Random: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[6132-6206]:ExpressionStatement[6191-6265]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[6219-6280]:IfStatement[6278-6339]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[6251-6280]:ExpressionStatement[6310-6339]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[6293-6365]:IfStatement[6352-6424]"
    }, {
      "left" : "bubbleResults[bubbleCount++] = diff;",
      "right" : "bubbleResults[bubbleCount++] = diff;",
      "info" : "ExpressionStatement[6329-6365]:ExpressionStatement[6388-6424]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[6378-6395]:ExpressionStatement[6437-6456]"
    }, {
      "left" : "bBubble = System.nanoTime();",
      "right" : "bBubble = System.nanoTime();",
      "info" : "ExpressionStatement[6409-6437]:ExpressionStatement[6470-6498]"
    }, {
      "left" : "result = BubbleSort.sort(sorted.clone());",
      "right" : "result = BubbleSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[6450-6491]:ExpressionStatement[6511-6552]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[6504-6597]:IfStatement[6565-6658]"
    }, {
      "left" : "System.err.println(\"BubbleSort failed.\");",
      "right" : "System.err.println(\"BubbleSort failed.\");",
      "info" : "ExpressionStatement[6556-6597]:ExpressionStatement[6617-6658]"
    }, {
      "left" : "aBubble = System.nanoTime();",
      "right" : "aBubble = System.nanoTime();",
      "info" : "ExpressionStatement[6610-6638]:ExpressionStatement[6671-6699]"
    }, {
      "left" : "diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "right" : "diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[6651-6697]:ExpressionStatement[6712-6758]"
    }, {
      "left" : "System.out.println(\"Sorted: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[6710-6784]:ExpressionStatement[6771-6845]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[6797-6856]:IfStatement[6858-6917]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[6829-6856]:ExpressionStatement[6890-6917]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[6869-6941]:IfStatement[6930-7002]"
    }, {
      "left" : "bubbleResults[bubbleCount++] = diff;",
      "right" : "bubbleResults[bubbleCount++] = diff;",
      "info" : "ExpressionStatement[6905-6941]:ExpressionStatement[6966-7002]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[6954-6971]:ExpressionStatement[7015-7034]"
    }, {
      "left" : "bBubble = System.nanoTime();",
      "right" : "bBubble = System.nanoTime();",
      "info" : "ExpressionStatement[6985-7013]:ExpressionStatement[7048-7076]"
    }, {
      "left" : "result = BubbleSort.sort(reverse.clone());",
      "right" : "result = BubbleSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[7026-7068]:ExpressionStatement[7089-7131]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[7081-7174]:IfStatement[7144-7237]"
    }, {
      "left" : "System.err.println(\"BubbleSort failed.\");",
      "right" : "System.err.println(\"BubbleSort failed.\");",
      "info" : "ExpressionStatement[7133-7174]:ExpressionStatement[7196-7237]"
    }, {
      "left" : "aBubble = System.nanoTime();",
      "right" : "aBubble = System.nanoTime();",
      "info" : "ExpressionStatement[7187-7215]:ExpressionStatement[7250-7278]"
    }, {
      "left" : "diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "right" : "diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[7228-7274]:ExpressionStatement[7291-7337]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[7287-7369]:ExpressionStatement[7350-7432]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[7382-7442]:IfStatement[7445-7505]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[7414-7442]:ExpressionStatement[7477-7505]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[7455-7527]:IfStatement[7518-7590]"
    }, {
      "left" : "bubbleResults[bubbleCount++] = diff;",
      "right" : "bubbleResults[bubbleCount++] = diff;",
      "info" : "ExpressionStatement[7491-7527]:ExpressionStatement[7554-7590]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[7540-7557]:ExpressionStatement[7603-7622]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[7571-7592]:ExpressionStatement[7636-7657]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[7605-7624]:ExpressionStatement[7670-7689]"
    }, {
      "left" : "if (showShell)",
      "right" : "if (showShell)",
      "info" : "IfStatement[7644-9584]:IfStatement[7709-9655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7659-9584]:Block[7724-9655]"
    }, {
      "left" : "int[] shells = new int[] { 10, 5, 3, 1 };",
      "right" : "int[] shells = new int[] { 10, 5, 3, 1 };",
      "info" : "VariableDeclarationStatement[7673-7714]:VariableDeclarationStatement[7738-7779]"
    }, {
      "left" : "long bShell = System.nanoTime();",
      "right" : "long bShell = System.nanoTime();",
      "info" : "VariableDeclarationStatement[7755-7787]:VariableDeclarationStatement[7820-7852]"
    }, {
      "left" : "Integer[] result = ShellSort.sort(shells, unsorted.clone());",
      "right" : "Integer[] result = ShellSort.sort(shells, unsorted.clone());",
      "info" : "VariableDeclarationStatement[7800-7860]:VariableDeclarationStatement[7865-7925]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[7873-7965]:IfStatement[7938-8030]"
    }, {
      "left" : "System.err.println(\"ShellSort failed.\");",
      "right" : "System.err.println(\"ShellSort failed.\");",
      "info" : "ExpressionStatement[7925-7965]:ExpressionStatement[7990-8030]"
    }, {
      "left" : "long aShell = System.nanoTime();",
      "right" : "long aShell = System.nanoTime();",
      "info" : "VariableDeclarationStatement[7978-8010]:VariableDeclarationStatement[8043-8075]"
    }, {
      "left" : "double diff = (aShell - bShell) / 1000000d / 1000d;",
      "right" : "double diff = (aShell - bShell) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[8023-8074]:VariableDeclarationStatement[8088-8139]"
    }, {
      "left" : "System.out.println(\"Random: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[8087-8160]:ExpressionStatement[8152-8225]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[8173-8234]:IfStatement[8238-8299]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[8205-8234]:ExpressionStatement[8270-8299]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[8247-8317]:IfStatement[8312-8382]"
    }, {
      "left" : "shellResults[shellCount++] = diff;",
      "right" : "shellResults[shellCount++] = diff;",
      "info" : "ExpressionStatement[8283-8317]:ExpressionStatement[8348-8382]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[8330-8347]:ExpressionStatement[8395-8414]"
    }, {
      "left" : "bShell = System.nanoTime();",
      "right" : "bShell = System.nanoTime();",
      "info" : "ExpressionStatement[8361-8388]:ExpressionStatement[8428-8455]"
    }, {
      "left" : "result = ShellSort.sort(shells, sorted.clone());",
      "right" : "result = ShellSort.sort(shells, sorted.clone());",
      "info" : "ExpressionStatement[8401-8449]:ExpressionStatement[8468-8516]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[8462-8554]:IfStatement[8529-8621]"
    }, {
      "left" : "System.err.println(\"ShellSort failed.\");",
      "right" : "System.err.println(\"ShellSort failed.\");",
      "info" : "ExpressionStatement[8514-8554]:ExpressionStatement[8581-8621]"
    }, {
      "left" : "aShell = System.nanoTime();",
      "right" : "aShell = System.nanoTime();",
      "info" : "ExpressionStatement[8567-8594]:ExpressionStatement[8634-8661]"
    }, {
      "left" : "diff = (aShell - bShell) / 1000000d / 1000d;",
      "right" : "diff = (aShell - bShell) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[8607-8651]:ExpressionStatement[8674-8718]"
    }, {
      "left" : "System.out.println(\"Sorted: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[8664-8737]:ExpressionStatement[8731-8804]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[8750-8809]:IfStatement[8817-8876]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[8782-8809]:ExpressionStatement[8849-8876]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[8822-8892]:IfStatement[8889-8959]"
    }, {
      "left" : "shellResults[shellCount++] = diff;",
      "right" : "shellResults[shellCount++] = diff;",
      "info" : "ExpressionStatement[8858-8892]:ExpressionStatement[8925-8959]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[8905-8922]:ExpressionStatement[8972-8991]"
    }, {
      "left" : "bShell = System.nanoTime();",
      "right" : "bShell = System.nanoTime();",
      "info" : "ExpressionStatement[8936-8963]:ExpressionStatement[9005-9032]"
    }, {
      "left" : "result = ShellSort.sort(shells, reverse.clone());",
      "right" : "result = ShellSort.sort(shells, reverse.clone());",
      "info" : "ExpressionStatement[8976-9025]:ExpressionStatement[9045-9094]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[9038-9130]:IfStatement[9107-9199]"
    }, {
      "left" : "System.err.println(\"ShellSort failed.\");",
      "right" : "System.err.println(\"ShellSort failed.\");",
      "info" : "ExpressionStatement[9090-9130]:ExpressionStatement[9159-9199]"
    }, {
      "left" : "aShell = System.nanoTime();",
      "right" : "aShell = System.nanoTime();",
      "info" : "ExpressionStatement[9143-9170]:ExpressionStatement[9212-9239]"
    }, {
      "left" : "diff = (aShell - bShell) / 1000000d / 1000d;",
      "right" : "diff = (aShell - bShell) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[9183-9227]:ExpressionStatement[9252-9296]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[9240-9321]:ExpressionStatement[9309-9390]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[9334-9394]:IfStatement[9403-9463]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[9366-9394]:ExpressionStatement[9435-9463]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[9407-9477]:IfStatement[9476-9546]"
    }, {
      "left" : "shellResults[shellCount++] = diff;",
      "right" : "shellResults[shellCount++] = diff;",
      "info" : "ExpressionStatement[9443-9477]:ExpressionStatement[9512-9546]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[9490-9507]:ExpressionStatement[9559-9578]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[9521-9542]:ExpressionStatement[9592-9613]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[9555-9574]:ExpressionStatement[9626-9645]"
    }, {
      "left" : "if (showMergeNotInPlace)",
      "right" : "if (showMergeNotInPlace)",
      "info" : "IfStatement[9594-11629]:IfStatement[9665-11706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9619-11629]:Block[9690-11706]"
    }, {
      "left" : "long bMerge = System.nanoTime();",
      "right" : "long bMerge = System.nanoTime();",
      "info" : "VariableDeclarationStatement[9659-9691]:VariableDeclarationStatement[9730-9762]"
    }, {
      "left" : "Integer[] result = MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE, unsorted.clone());",
      "right" : "Integer[] result = MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE, unsorted.clone());",
      "info" : "VariableDeclarationStatement[9704-9791]:VariableDeclarationStatement[9775-9862]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[9804-9896]:IfStatement[9875-9967]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(\"MergeSort failed.\");",
      "info" : "ExpressionStatement[9856-9896]:ExpressionStatement[9927-9967]"
    }, {
      "left" : "long aMerge = System.nanoTime();",
      "right" : "long aMerge = System.nanoTime();",
      "info" : "VariableDeclarationStatement[9909-9941]:VariableDeclarationStatement[9980-10012]"
    }, {
      "left" : "double diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "double diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[9954-10005]:VariableDeclarationStatement[10025-10076]"
    }, {
      "left" : "System.out.println(\"Random: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[10018-10091]:ExpressionStatement[10089-10162]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[10104-10165]:IfStatement[10175-10236]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[10136-10165]:ExpressionStatement[10207-10236]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[10178-10268]:IfStatement[10249-10339]"
    }, {
      "left" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "right" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "info" : "ExpressionStatement[10214-10268]:ExpressionStatement[10285-10339]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[10281-10298]:ExpressionStatement[10352-10371]"
    }, {
      "left" : "bMerge = System.nanoTime();",
      "right" : "bMerge = System.nanoTime();",
      "info" : "ExpressionStatement[10312-10339]:ExpressionStatement[10385-10412]"
    }, {
      "left" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE, sorted.clone());",
      "right" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE, sorted.clone());",
      "info" : "ExpressionStatement[10352-10427]:ExpressionStatement[10425-10500]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[10440-10532]:IfStatement[10513-10605]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(\"MergeSort failed.\");",
      "info" : "ExpressionStatement[10492-10532]:ExpressionStatement[10565-10605]"
    }, {
      "left" : "aMerge = System.nanoTime();",
      "right" : "aMerge = System.nanoTime();",
      "info" : "ExpressionStatement[10545-10572]:ExpressionStatement[10618-10645]"
    }, {
      "left" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[10585-10629]:ExpressionStatement[10658-10702]"
    }, {
      "left" : "System.out.println(\"Sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[10642-10715]:ExpressionStatement[10715-10788]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[10728-10787]:IfStatement[10801-10860]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[10760-10787]:ExpressionStatement[10833-10860]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[10800-10890]:IfStatement[10873-10963]"
    }, {
      "left" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "right" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "info" : "ExpressionStatement[10836-10890]:ExpressionStatement[10909-10963]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[10903-10920]:ExpressionStatement[10976-10995]"
    }, {
      "left" : "bMerge = System.nanoTime();",
      "right" : "bMerge = System.nanoTime();",
      "info" : "ExpressionStatement[10934-10961]:ExpressionStatement[11009-11036]"
    }, {
      "left" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE, reverse.clone());",
      "right" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE, reverse.clone());",
      "info" : "ExpressionStatement[10974-11050]:ExpressionStatement[11049-11125]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[11063-11155]:IfStatement[11138-11230]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(\"MergeSort failed.\");",
      "info" : "ExpressionStatement[11115-11155]:ExpressionStatement[11190-11230]"
    }, {
      "left" : "aMerge = System.nanoTime();",
      "right" : "aMerge = System.nanoTime();",
      "info" : "ExpressionStatement[11168-11195]:ExpressionStatement[11243-11270]"
    }, {
      "left" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[11208-11252]:ExpressionStatement[11283-11327]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[11265-11346]:ExpressionStatement[11340-11421]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[11359-11419]:IfStatement[11434-11494]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[11391-11419]:ExpressionStatement[11466-11494]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[11432-11522]:IfStatement[11507-11597]"
    }, {
      "left" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "right" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "info" : "ExpressionStatement[11468-11522]:ExpressionStatement[11543-11597]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[11535-11552]:ExpressionStatement[11610-11629]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[11566-11587]:ExpressionStatement[11643-11664]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[11600-11619]:ExpressionStatement[11677-11696]"
    }, {
      "left" : "if (showMergeInPlace)",
      "right" : "if (showMergeInPlace)",
      "info" : "IfStatement[11639-13641]:IfStatement[11716-13724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11661-13641]:Block[11738-13724]"
    }, {
      "left" : "long bMerge = System.nanoTime();",
      "right" : "long bMerge = System.nanoTime();",
      "info" : "VariableDeclarationStatement[11701-11733]:VariableDeclarationStatement[11778-11810]"
    }, {
      "left" : "Integer[] result = MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE, unsorted.clone());",
      "right" : "Integer[] result = MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE, unsorted.clone());",
      "info" : "VariableDeclarationStatement[11746-11829]:VariableDeclarationStatement[11823-11906]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[11842-11934]:IfStatement[11919-12011]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(\"MergeSort failed.\");",
      "info" : "ExpressionStatement[11894-11934]:ExpressionStatement[11971-12011]"
    }, {
      "left" : "long aMerge = System.nanoTime();",
      "right" : "long aMerge = System.nanoTime();",
      "info" : "VariableDeclarationStatement[11947-11979]:VariableDeclarationStatement[12024-12056]"
    }, {
      "left" : "double diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "double diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[11992-12043]:VariableDeclarationStatement[12069-12120]"
    }, {
      "left" : "System.out.println(\"Random: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[12056-12129]:ExpressionStatement[12133-12206]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[12142-12203]:IfStatement[12219-12280]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[12174-12203]:ExpressionStatement[12251-12280]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[12216-12300]:IfStatement[12293-12377]"
    }, {
      "left" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "right" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "info" : "ExpressionStatement[12252-12300]:ExpressionStatement[12329-12377]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[12313-12330]:ExpressionStatement[12390-12409]"
    }, {
      "left" : "bMerge = System.nanoTime();",
      "right" : "bMerge = System.nanoTime();",
      "info" : "ExpressionStatement[12344-12371]:ExpressionStatement[12423-12450]"
    }, {
      "left" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE, sorted.clone());",
      "right" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE, sorted.clone());",
      "info" : "ExpressionStatement[12384-12455]:ExpressionStatement[12463-12534]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[12468-12560]:IfStatement[12547-12639]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(\"MergeSort failed.\");",
      "info" : "ExpressionStatement[12520-12560]:ExpressionStatement[12599-12639]"
    }, {
      "left" : "aMerge = System.nanoTime();",
      "right" : "aMerge = System.nanoTime();",
      "info" : "ExpressionStatement[12573-12600]:ExpressionStatement[12652-12679]"
    }, {
      "left" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[12613-12657]:ExpressionStatement[12692-12736]"
    }, {
      "left" : "System.out.println(\"Sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[12670-12743]:ExpressionStatement[12749-12822]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[12756-12815]:IfStatement[12835-12894]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[12788-12815]:ExpressionStatement[12867-12894]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[12828-12912]:IfStatement[12907-12991]"
    }, {
      "left" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "right" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "info" : "ExpressionStatement[12864-12912]:ExpressionStatement[12943-12991]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[12925-12942]:ExpressionStatement[13004-13023]"
    }, {
      "left" : "bMerge = System.nanoTime();",
      "right" : "bMerge = System.nanoTime();",
      "info" : "ExpressionStatement[12956-12983]:ExpressionStatement[13037-13064]"
    }, {
      "left" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE, reverse.clone());",
      "right" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE, reverse.clone());",
      "info" : "ExpressionStatement[12996-13068]:ExpressionStatement[13077-13149]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[13081-13173]:IfStatement[13162-13254]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(\"MergeSort failed.\");",
      "info" : "ExpressionStatement[13133-13173]:ExpressionStatement[13214-13254]"
    }, {
      "left" : "aMerge = System.nanoTime();",
      "right" : "aMerge = System.nanoTime();",
      "info" : "ExpressionStatement[13186-13213]:ExpressionStatement[13267-13294]"
    }, {
      "left" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[13226-13270]:ExpressionStatement[13307-13351]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[13283-13364]:ExpressionStatement[13364-13445]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[13377-13437]:IfStatement[13458-13518]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[13409-13437]:ExpressionStatement[13490-13518]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[13450-13534]:IfStatement[13531-13615]"
    }, {
      "left" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "right" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "info" : "ExpressionStatement[13486-13534]:ExpressionStatement[13567-13615]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[13547-13564]:ExpressionStatement[13628-13647]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[13578-13599]:ExpressionStatement[13661-13682]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[13612-13631]:ExpressionStatement[13695-13714]"
    }, {
      "left" : "if (showQuick)",
      "right" : "if (showQuick)",
      "info" : "IfStatement[13651-19509]:IfStatement[13734-19610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13666-19509]:Block[13749-19610]"
    }, {
      "left" : "long bQuick = System.nanoTime();",
      "right" : "long bQuick = System.nanoTime();",
      "info" : "VariableDeclarationStatement[13705-13737]:VariableDeclarationStatement[13788-13820]"
    }, {
      "left" : "Integer[] result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, unsorted.clone());",
      "right" : "Integer[] result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, unsorted.clone());",
      "info" : "VariableDeclarationStatement[13750-13830]:VariableDeclarationStatement[13833-13913]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[13843-13935]:IfStatement[13926-14018]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(\"QuickSort failed.\");",
      "info" : "ExpressionStatement[13895-13935]:ExpressionStatement[13978-14018]"
    }, {
      "left" : "long aQuick = System.nanoTime();",
      "right" : "long aQuick = System.nanoTime();",
      "info" : "VariableDeclarationStatement[13948-13980]:VariableDeclarationStatement[14031-14063]"
    }, {
      "left" : "double diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "double diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[13993-14044]:VariableDeclarationStatement[14076-14127]"
    }, {
      "left" : "System.out.println(\"Random: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[14057-14150]:ExpressionStatement[14140-14233]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[14163-14224]:IfStatement[14246-14307]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[14195-14224]:ExpressionStatement[14278-14307]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[14237-14307]:IfStatement[14320-14390]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[14273-14307]:ExpressionStatement[14356-14390]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[14320-14337]:ExpressionStatement[31836-31853]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[14351-14378]:ExpressionStatement[14436-14463]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, sorted.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, sorted.clone());",
      "info" : "ExpressionStatement[14391-14459]:ExpressionStatement[14476-14544]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[14472-14564]:IfStatement[14557-14649]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(\"QuickSort failed.\");",
      "info" : "ExpressionStatement[14524-14564]:ExpressionStatement[14609-14649]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[14577-14604]:ExpressionStatement[14662-14689]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[14617-14661]:ExpressionStatement[14702-14746]"
    }, {
      "left" : "System.out.println(\"Sorted: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[14674-14767]:ExpressionStatement[14759-14852]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[14780-14839]:IfStatement[14865-14924]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[14812-14839]:ExpressionStatement[14897-14924]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[14852-14922]:IfStatement[14937-15007]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[14888-14922]:ExpressionStatement[14973-15007]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[14935-14952]:ExpressionStatement[15020-15039]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[14966-14993]:ExpressionStatement[15053-15080]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, reverse.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, reverse.clone());",
      "info" : "ExpressionStatement[15006-15075]:ExpressionStatement[15093-15162]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[15088-15180]:IfStatement[15175-15267]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(\"QuickSort failed.\");",
      "info" : "ExpressionStatement[15140-15180]:ExpressionStatement[15227-15267]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[15193-15220]:ExpressionStatement[15280-15307]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[15233-15277]:ExpressionStatement[15320-15364]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[15290-15391]:ExpressionStatement[15377-15478]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[15404-15464]:IfStatement[15491-15551]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[15436-15464]:ExpressionStatement[15523-15551]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[15477-15547]:IfStatement[15564-15634]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[15513-15547]:ExpressionStatement[15600-15634]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[15560-15577]:ExpressionStatement[15647-15666]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[15591-15612]:ExpressionStatement[15680-15701]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[15625-15644]:ExpressionStatement[15714-15733]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[15658-15685]:ExpressionStatement[15747-15774]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, unsorted.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, unsorted.clone());",
      "info" : "ExpressionStatement[15698-15769]:ExpressionStatement[15787-15858]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[15782-15874]:IfStatement[15871-15963]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(\"QuickSort failed.\");",
      "info" : "ExpressionStatement[15834-15874]:ExpressionStatement[15923-15963]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[15887-15914]:ExpressionStatement[15976-16003]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[15927-15971]:ExpressionStatement[16016-16060]"
    }, {
      "left" : "System.out.println(\"Random: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[15984-16078]:ExpressionStatement[16073-16167]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[16091-16152]:IfStatement[16180-16241]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[16123-16152]:ExpressionStatement[16212-16241]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[16165-16235]:IfStatement[16254-16324]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[16201-16235]:ExpressionStatement[16290-16324]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[16248-16265]:ExpressionStatement[16337-16356]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[16279-16306]:ExpressionStatement[16370-16397]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, sorted.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, sorted.clone());",
      "info" : "ExpressionStatement[16319-16388]:ExpressionStatement[16410-16479]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[16401-16493]:IfStatement[16492-16584]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(\"QuickSort failed.\");",
      "info" : "ExpressionStatement[16453-16493]:ExpressionStatement[16544-16584]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[16506-16533]:ExpressionStatement[16597-16624]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[16546-16590]:ExpressionStatement[16637-16681]"
    }, {
      "left" : "System.out.println(\"Sorted: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[16603-16697]:ExpressionStatement[16694-16788]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[16710-16769]:IfStatement[16801-16860]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[16742-16769]:ExpressionStatement[16833-16860]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[16782-16852]:IfStatement[16873-16943]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[16818-16852]:ExpressionStatement[16909-16943]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[16865-16882]:ExpressionStatement[16956-16975]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[16896-16923]:ExpressionStatement[16989-17016]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, reverse.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, reverse.clone());",
      "info" : "ExpressionStatement[16936-17006]:ExpressionStatement[17029-17099]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[17019-17111]:IfStatement[17112-17204]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(\"QuickSort failed.\");",
      "info" : "ExpressionStatement[17071-17111]:ExpressionStatement[17164-17204]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[17124-17151]:ExpressionStatement[17217-17244]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[17164-17208]:ExpressionStatement[17257-17301]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[17221-17323]:ExpressionStatement[17314-17416]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[17336-17396]:IfStatement[17429-17489]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[17368-17396]:ExpressionStatement[17461-17489]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[17409-17479]:IfStatement[17502-17572]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[17445-17479]:ExpressionStatement[17538-17572]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[17492-17509]:ExpressionStatement[17585-17604]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[17523-17544]:ExpressionStatement[17618-17639]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[17557-17576]:ExpressionStatement[17652-17671]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[17590-17617]:ExpressionStatement[17685-17712]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, unsorted.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, unsorted.clone());",
      "info" : "ExpressionStatement[17630-17701]:ExpressionStatement[17725-17796]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[17714-17813]:IfStatement[17809-17908]"
    }, {
      "left" : "System.err.println(\"Random QuickSort failed.\");",
      "right" : "System.err.println(\"Random QuickSort failed.\");",
      "info" : "ExpressionStatement[17766-17813]:ExpressionStatement[17861-17908]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[17826-17853]:ExpressionStatement[17921-17948]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[17866-17910]:ExpressionStatement[17961-18005]"
    }, {
      "left" : "System.out.println(\"Random: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[17923-18007]:ExpressionStatement[18018-18102]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[18020-18081]:IfStatement[18115-18176]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[18052-18081]:ExpressionStatement[18147-18176]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[18094-18164]:IfStatement[18189-18259]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[18130-18164]:ExpressionStatement[18225-18259]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[18177-18194]:ExpressionStatement[18272-18291]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[18208-18235]:ExpressionStatement[18305-18332]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, sorted.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, sorted.clone());",
      "info" : "ExpressionStatement[18248-18317]:ExpressionStatement[18345-18414]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[18330-18429]:IfStatement[18427-18526]"
    }, {
      "left" : "System.err.println(\"Random QuickSort failed.\");",
      "right" : "System.err.println(\"Random QuickSort failed.\");",
      "info" : "ExpressionStatement[18382-18429]:ExpressionStatement[18479-18526]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[18442-18469]:ExpressionStatement[18539-18566]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[18482-18526]:ExpressionStatement[18579-18623]"
    }, {
      "left" : "System.out.println(\"Sorted: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[18539-18623]:ExpressionStatement[18636-18720]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[18636-18695]:IfStatement[18733-18792]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[18668-18695]:ExpressionStatement[18765-18792]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[18708-18778]:IfStatement[18805-18875]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[18744-18778]:ExpressionStatement[18841-18875]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[18791-18808]:ExpressionStatement[18888-18907]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bQuick = System.nanoTime();",
      "info" : "ExpressionStatement[18822-18849]:ExpressionStatement[18921-18948]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, reverse.clone());",
      "right" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, reverse.clone());",
      "info" : "ExpressionStatement[18862-18932]:ExpressionStatement[18961-19031]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[18945-19044]:IfStatement[19044-19143]"
    }, {
      "left" : "System.err.println(\"Random QuickSort failed.\");",
      "right" : "System.err.println(\"Random QuickSort failed.\");",
      "info" : "ExpressionStatement[18997-19044]:ExpressionStatement[19096-19143]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aQuick = System.nanoTime();",
      "info" : "ExpressionStatement[19057-19084]:ExpressionStatement[19156-19183]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[19097-19141]:ExpressionStatement[19196-19240]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[19154-19246]:ExpressionStatement[19253-19345]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[19259-19319]:IfStatement[19358-19418]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[19291-19319]:ExpressionStatement[19390-19418]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[19332-19402]:IfStatement[19431-19501]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "quickResults[quickCount++] = diff;",
      "info" : "ExpressionStatement[19368-19402]:ExpressionStatement[19467-19501]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[19415-19432]:ExpressionStatement[19514-19533]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[19446-19467]:ExpressionStatement[19547-19568]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[19480-19499]:ExpressionStatement[19581-19600]"
    }, {
      "left" : "if (showHeap)",
      "right" : "if (showHeap)",
      "info" : "IfStatement[19519-21349]:IfStatement[19620-21456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19533-21349]:Block[19634-21456]"
    }, {
      "left" : "long bHeap = System.nanoTime();",
      "right" : "long bHeap = System.nanoTime();",
      "info" : "VariableDeclarationStatement[19571-19602]:VariableDeclarationStatement[19672-19703]"
    }, {
      "left" : "Integer[] result = HeapSort.sort(unsorted.clone());",
      "right" : "Integer[] result = HeapSort.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[19615-19666]:VariableDeclarationStatement[19716-19767]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[19679-19770]:IfStatement[19780-19871]"
    }, {
      "left" : "System.err.println(\"HeapSort failed.\");",
      "right" : "System.err.println(\"HeapSort failed.\");",
      "info" : "ExpressionStatement[19731-19770]:ExpressionStatement[19832-19871]"
    }, {
      "left" : "long aHeap = System.nanoTime();",
      "right" : "long aHeap = System.nanoTime();",
      "info" : "VariableDeclarationStatement[19783-19814]:VariableDeclarationStatement[19884-19915]"
    }, {
      "left" : "double diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "right" : "double diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[19827-19876]:VariableDeclarationStatement[19928-19977]"
    }, {
      "left" : "System.out.println(\"Random: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[19889-19961]:ExpressionStatement[19990-20062]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[19974-20035]:IfStatement[20075-20136]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[20006-20035]:ExpressionStatement[20107-20136]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[20048-20116]:IfStatement[20149-20217]"
    }, {
      "left" : "heapResults[heapCount++] = diff;",
      "right" : "heapResults[heapCount++] = diff;",
      "info" : "ExpressionStatement[20084-20116]:ExpressionStatement[20185-20217]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[20129-20146]:ExpressionStatement[20230-20249]"
    }, {
      "left" : "bHeap = System.nanoTime();",
      "right" : "bHeap = System.nanoTime();",
      "info" : "ExpressionStatement[20160-20186]:ExpressionStatement[20263-20289]"
    }, {
      "left" : "result = HeapSort.sort(sorted.clone());",
      "right" : "result = HeapSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[20199-20238]:ExpressionStatement[20302-20341]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[20251-20342]:IfStatement[20354-20445]"
    }, {
      "left" : "System.err.println(\"HeapSort failed.\");",
      "right" : "System.err.println(\"HeapSort failed.\");",
      "info" : "ExpressionStatement[20303-20342]:ExpressionStatement[20406-20445]"
    }, {
      "left" : "aHeap = System.nanoTime();",
      "right" : "aHeap = System.nanoTime();",
      "info" : "ExpressionStatement[20355-20381]:ExpressionStatement[20458-20484]"
    }, {
      "left" : "diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "right" : "diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[20394-20436]:ExpressionStatement[20497-20539]"
    }, {
      "left" : "System.out.println(\"Sorted: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[20449-20521]:ExpressionStatement[20552-20624]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[20534-20593]:IfStatement[20637-20696]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[20566-20593]:ExpressionStatement[20669-20696]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[20606-20674]:IfStatement[20709-20777]"
    }, {
      "left" : "heapResults[heapCount++] = diff;",
      "right" : "heapResults[heapCount++] = diff;",
      "info" : "ExpressionStatement[20642-20674]:ExpressionStatement[20745-20777]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[20687-20704]:ExpressionStatement[20790-20809]"
    }, {
      "left" : "bHeap = System.nanoTime();",
      "right" : "bHeap = System.nanoTime();",
      "info" : "ExpressionStatement[20718-20744]:ExpressionStatement[20823-20849]"
    }, {
      "left" : "result = HeapSort.sort(reverse.clone());",
      "right" : "result = HeapSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[20757-20797]:ExpressionStatement[20862-20902]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[20810-20901]:IfStatement[20915-21006]"
    }, {
      "left" : "System.err.println(\"HeapSort failed.\");",
      "right" : "System.err.println(\"HeapSort failed.\");",
      "info" : "ExpressionStatement[20862-20901]:ExpressionStatement[20967-21006]"
    }, {
      "left" : "aHeap = System.nanoTime();",
      "right" : "aHeap = System.nanoTime();",
      "info" : "ExpressionStatement[20914-20940]:ExpressionStatement[21019-21045]"
    }, {
      "left" : "diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "right" : "diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[20953-20995]:ExpressionStatement[21058-21100]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[21008-21088]:ExpressionStatement[21113-21193]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[21101-21161]:IfStatement[21206-21266]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[21133-21161]:ExpressionStatement[21238-21266]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[21174-21242]:IfStatement[21279-21347]"
    }, {
      "left" : "heapResults[heapCount++] = diff;",
      "right" : "heapResults[heapCount++] = diff;",
      "info" : "ExpressionStatement[21210-21242]:ExpressionStatement[21315-21347]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[21255-21272]:ExpressionStatement[21360-21379]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[21286-21307]:ExpressionStatement[21393-21414]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[21320-21339]:ExpressionStatement[21427-21446]"
    }, {
      "left" : "if (showCounting)",
      "right" : "if (showCounting)",
      "info" : "IfStatement[21359-23306]:IfStatement[21466-23419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21377-23306]:Block[21484-23419]"
    }, {
      "left" : "long bCounting = System.nanoTime();",
      "right" : "long bCounting = System.nanoTime();",
      "info" : "VariableDeclarationStatement[21420-21455]:VariableDeclarationStatement[21527-21562]"
    }, {
      "left" : "Integer[] result = CountingSort.sort(unsorted.clone());",
      "right" : "Integer[] result = CountingSort.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[21468-21523]:VariableDeclarationStatement[21575-21630]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[21536-21631]:IfStatement[21643-21738]"
    }, {
      "left" : "System.err.println(\"CountingSort failed.\");",
      "right" : "System.err.println(\"CountingSort failed.\");",
      "info" : "ExpressionStatement[21588-21631]:ExpressionStatement[21695-21738]"
    }, {
      "left" : "long aCounting = System.nanoTime();",
      "right" : "long aCounting = System.nanoTime();",
      "info" : "VariableDeclarationStatement[21644-21679]:VariableDeclarationStatement[21751-21786]"
    }, {
      "left" : "double diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "right" : "double diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[21692-21749]:VariableDeclarationStatement[21799-21856]"
    }, {
      "left" : "System.out.println(\"Random: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[21762-21838]:ExpressionStatement[21869-21945]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[21851-21912]:IfStatement[21958-22019]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[21883-21912]:ExpressionStatement[21990-22019]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[21925-22001]:IfStatement[22032-22108]"
    }, {
      "left" : "countingResults[countingCount++] = diff;",
      "right" : "countingResults[countingCount++] = diff;",
      "info" : "ExpressionStatement[21961-22001]:ExpressionStatement[22068-22108]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[22014-22031]:ExpressionStatement[22121-22140]"
    }, {
      "left" : "bCounting = System.nanoTime();",
      "right" : "bCounting = System.nanoTime();",
      "info" : "ExpressionStatement[22045-22075]:ExpressionStatement[22154-22184]"
    }, {
      "left" : "result = CountingSort.sort(sorted.clone());",
      "right" : "result = CountingSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[22088-22131]:ExpressionStatement[22197-22240]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[22144-22239]:IfStatement[22253-22348]"
    }, {
      "left" : "System.err.println(\"CountingSort failed.\");",
      "right" : "System.err.println(\"CountingSort failed.\");",
      "info" : "ExpressionStatement[22196-22239]:ExpressionStatement[22305-22348]"
    }, {
      "left" : "aCounting = System.nanoTime();",
      "right" : "aCounting = System.nanoTime();",
      "info" : "ExpressionStatement[22252-22282]:ExpressionStatement[22361-22391]"
    }, {
      "left" : "diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "right" : "diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[22295-22345]:ExpressionStatement[22404-22454]"
    }, {
      "left" : "System.out.println(\"Sorted: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[22358-22434]:ExpressionStatement[22467-22543]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[22447-22506]:IfStatement[22556-22615]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[22479-22506]:ExpressionStatement[22588-22615]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[22519-22595]:IfStatement[22628-22704]"
    }, {
      "left" : "countingResults[countingCount++] = diff;",
      "right" : "countingResults[countingCount++] = diff;",
      "info" : "ExpressionStatement[22555-22595]:ExpressionStatement[22664-22704]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[22608-22625]:ExpressionStatement[22717-22736]"
    }, {
      "left" : "bCounting = System.nanoTime();",
      "right" : "bCounting = System.nanoTime();",
      "info" : "ExpressionStatement[22639-22669]:ExpressionStatement[22750-22780]"
    }, {
      "left" : "result = CountingSort.sort(reverse.clone());",
      "right" : "result = CountingSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[22682-22726]:ExpressionStatement[22793-22837]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[22739-22834]:IfStatement[22850-22945]"
    }, {
      "left" : "System.err.println(\"CountingSort failed.\");",
      "right" : "System.err.println(\"CountingSort failed.\");",
      "info" : "ExpressionStatement[22791-22834]:ExpressionStatement[22902-22945]"
    }, {
      "left" : "aCounting = System.nanoTime();",
      "right" : "aCounting = System.nanoTime();",
      "info" : "ExpressionStatement[22847-22877]:ExpressionStatement[22958-22988]"
    }, {
      "left" : "diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "right" : "diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[22890-22940]:ExpressionStatement[23001-23051]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[22953-23037]:ExpressionStatement[23064-23148]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[23050-23110]:IfStatement[23161-23221]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[23082-23110]:ExpressionStatement[23193-23221]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[23123-23199]:IfStatement[23234-23310]"
    }, {
      "left" : "countingResults[countingCount++] = diff;",
      "right" : "countingResults[countingCount++] = diff;",
      "info" : "ExpressionStatement[23159-23199]:ExpressionStatement[23270-23310]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[23212-23229]:ExpressionStatement[23323-23342]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[23243-23264]:ExpressionStatement[23356-23377]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[23277-23296]:ExpressionStatement[23390-23409]"
    }, {
      "left" : "if (showRadix)",
      "right" : "if (showRadix)",
      "info" : "IfStatement[23316-25176]:IfStatement[23429-25295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23331-25176]:Block[23444-25295]"
    }, {
      "left" : "long bRadix = System.nanoTime();",
      "right" : "long bRadix = System.nanoTime();",
      "info" : "VariableDeclarationStatement[23371-23403]:VariableDeclarationStatement[23484-23516]"
    }, {
      "left" : "Integer[] result = RadixSort.sort(unsorted.clone());",
      "right" : "Integer[] result = RadixSort.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[23416-23468]:VariableDeclarationStatement[23529-23581]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[23481-23573]:IfStatement[23594-23686]"
    }, {
      "left" : "System.err.println(\"RadixSort failed.\");",
      "right" : "System.err.println(\"RadixSort failed.\");",
      "info" : "ExpressionStatement[23533-23573]:ExpressionStatement[23646-23686]"
    }, {
      "left" : "long aRadix = System.nanoTime();",
      "right" : "long aRadix = System.nanoTime();",
      "info" : "VariableDeclarationStatement[23586-23618]:VariableDeclarationStatement[23699-23731]"
    }, {
      "left" : "double diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "double diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[23631-23682]:VariableDeclarationStatement[23744-23795]"
    }, {
      "left" : "System.out.println(\"Random: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[23695-23768]:ExpressionStatement[23808-23881]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[23781-23842]:IfStatement[23894-23955]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[23813-23842]:ExpressionStatement[23926-23955]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[23855-23925]:IfStatement[23968-24038]"
    }, {
      "left" : "radixResults[radixCount++] = diff;",
      "right" : "radixResults[radixCount++] = diff;",
      "info" : "ExpressionStatement[23891-23925]:ExpressionStatement[24004-24038]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[23938-23955]:ExpressionStatement[24051-24070]"
    }, {
      "left" : "bRadix = System.nanoTime();",
      "right" : "bRadix = System.nanoTime();",
      "info" : "ExpressionStatement[23969-23996]:ExpressionStatement[24084-24111]"
    }, {
      "left" : "result = RadixSort.sort(sorted.clone());",
      "right" : "result = RadixSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[24009-24049]:ExpressionStatement[24124-24164]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[24062-24154]:IfStatement[24177-24269]"
    }, {
      "left" : "System.err.println(\"RadixSort failed.\");",
      "right" : "System.err.println(\"RadixSort failed.\");",
      "info" : "ExpressionStatement[24114-24154]:ExpressionStatement[24229-24269]"
    }, {
      "left" : "aRadix = System.nanoTime();",
      "right" : "aRadix = System.nanoTime();",
      "info" : "ExpressionStatement[24167-24194]:ExpressionStatement[24282-24309]"
    }, {
      "left" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[24207-24251]:ExpressionStatement[24322-24366]"
    }, {
      "left" : "System.out.println(\"Sorted: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[24264-24337]:ExpressionStatement[24379-24452]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[24350-24409]:IfStatement[24465-24524]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[24382-24409]:ExpressionStatement[24497-24524]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[24422-24492]:IfStatement[24537-24607]"
    }, {
      "left" : "radixResults[radixCount++] = diff;",
      "right" : "radixResults[radixCount++] = diff;",
      "info" : "ExpressionStatement[24458-24492]:ExpressionStatement[24573-24607]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[24505-24522]:ExpressionStatement[24620-24639]"
    }, {
      "left" : "bRadix = System.nanoTime();",
      "right" : "bRadix = System.nanoTime();",
      "info" : "ExpressionStatement[24536-24563]:ExpressionStatement[24653-24680]"
    }, {
      "left" : "result = RadixSort.sort(reverse.clone());",
      "right" : "result = RadixSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[24576-24617]:ExpressionStatement[24693-24734]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[24630-24722]:IfStatement[24747-24839]"
    }, {
      "left" : "System.err.println(\"RadixSort failed.\");",
      "right" : "System.err.println(\"RadixSort failed.\");",
      "info" : "ExpressionStatement[24682-24722]:ExpressionStatement[24799-24839]"
    }, {
      "left" : "aRadix = System.nanoTime();",
      "right" : "aRadix = System.nanoTime();",
      "info" : "ExpressionStatement[24735-24762]:ExpressionStatement[24852-24879]"
    }, {
      "left" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[24775-24819]:ExpressionStatement[24892-24936]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[24832-24913]:ExpressionStatement[24949-25030]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[24926-24986]:IfStatement[25043-25103]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[24958-24986]:ExpressionStatement[25075-25103]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[24999-25069]:IfStatement[25116-25186]"
    }, {
      "left" : "radixResults[radixCount++] = diff;",
      "right" : "radixResults[radixCount++] = diff;",
      "info" : "ExpressionStatement[25035-25069]:ExpressionStatement[25152-25186]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[25082-25099]:ExpressionStatement[25199-25218]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[25113-25134]:ExpressionStatement[25232-25253]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[25147-25166]:ExpressionStatement[25266-25285]"
    }, {
      "left" : "if (showAmericanFlag)",
      "right" : "if (showAmericanFlag)",
      "info" : "IfStatement[25186-27172]:IfStatement[25305-27297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25208-27172]:Block[25327-27297]"
    }, {
      "left" : "long bRadix = System.nanoTime();",
      "right" : "long bRadix = System.nanoTime();",
      "info" : "VariableDeclarationStatement[25256-25288]:VariableDeclarationStatement[25375-25407]"
    }, {
      "left" : "Integer[] result = AmericanFlagSort.sort(unsorted.clone());",
      "right" : "Integer[] result = AmericanFlagSort.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[25301-25360]:VariableDeclarationStatement[25420-25479]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[25373-25473]:IfStatement[25492-25592]"
    }, {
      "left" : "System.err.println(\"AmericanFlag sort failed.\");",
      "right" : "System.err.println(\"AmericanFlag sort failed.\");",
      "info" : "ExpressionStatement[25425-25473]:ExpressionStatement[25544-25592]"
    }, {
      "left" : "long aRadix = System.nanoTime();",
      "right" : "long aRadix = System.nanoTime();",
      "info" : "VariableDeclarationStatement[25486-25518]:VariableDeclarationStatement[25605-25637]"
    }, {
      "left" : "double diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "double diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[25531-25582]:VariableDeclarationStatement[25650-25701]"
    }, {
      "left" : "System.out.println(\"Random: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[25595-25676]:ExpressionStatement[25714-25795]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[25689-25750]:IfStatement[25808-25869]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[25721-25750]:ExpressionStatement[25840-25869]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[25763-25847]:IfStatement[25882-25966]"
    }, {
      "left" : "americanFlagResults[americanFlagCount++] = diff;",
      "right" : "americanFlagResults[americanFlagCount++] = diff;",
      "info" : "ExpressionStatement[25799-25847]:ExpressionStatement[25918-25966]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[25860-25877]:ExpressionStatement[31862-31879]"
    }, {
      "left" : "bRadix = System.nanoTime();",
      "right" : "bRadix = System.nanoTime();",
      "info" : "ExpressionStatement[25891-25918]:ExpressionStatement[26012-26039]"
    }, {
      "left" : "result = AmericanFlagSort.sort(sorted.clone());",
      "right" : "result = AmericanFlagSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[25931-25978]:ExpressionStatement[26052-26099]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[25991-26091]:IfStatement[26112-26212]"
    }, {
      "left" : "System.err.println(\"AmericanFlag sort failed.\");",
      "right" : "System.err.println(\"AmericanFlag sort failed.\");",
      "info" : "ExpressionStatement[26043-26091]:ExpressionStatement[26164-26212]"
    }, {
      "left" : "aRadix = System.nanoTime();",
      "right" : "aRadix = System.nanoTime();",
      "info" : "ExpressionStatement[26104-26131]:ExpressionStatement[26225-26252]"
    }, {
      "left" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[26144-26188]:ExpressionStatement[26265-26309]"
    }, {
      "left" : "System.out.println(\"Sorted: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[26201-26282]:ExpressionStatement[26322-26403]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[26295-26354]:IfStatement[26416-26475]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[26327-26354]:ExpressionStatement[26448-26475]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[26367-26451]:IfStatement[26488-26572]"
    }, {
      "left" : "americanFlagResults[americanFlagCount++] = diff;",
      "right" : "americanFlagResults[americanFlagCount++] = diff;",
      "info" : "ExpressionStatement[26403-26451]:ExpressionStatement[26524-26572]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[26464-26481]:ExpressionStatement[31888-31905]"
    }, {
      "left" : "bRadix = System.nanoTime();",
      "right" : "bRadix = System.nanoTime();",
      "info" : "ExpressionStatement[26495-26522]:ExpressionStatement[26618-26645]"
    }, {
      "left" : "result = AmericanFlagSort.sort(reverse.clone());",
      "right" : "result = AmericanFlagSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[26535-26583]:ExpressionStatement[26658-26706]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[26596-26696]:IfStatement[26719-26819]"
    }, {
      "left" : "System.err.println(\"AmericanFlag sort failed.\");",
      "right" : "System.err.println(\"AmericanFlag sort failed.\");",
      "info" : "ExpressionStatement[26648-26696]:ExpressionStatement[26771-26819]"
    }, {
      "left" : "aRadix = System.nanoTime();",
      "right" : "aRadix = System.nanoTime();",
      "info" : "ExpressionStatement[26709-26736]:ExpressionStatement[26832-26859]"
    }, {
      "left" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[26749-26793]:ExpressionStatement[26872-26916]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[26806-26895]:ExpressionStatement[26929-27018]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[26908-26968]:IfStatement[27031-27091]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[26940-26968]:ExpressionStatement[27063-27091]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[26981-27065]:IfStatement[27104-27188]"
    }, {
      "left" : "americanFlagResults[americanFlagCount++] = diff;",
      "right" : "americanFlagResults[americanFlagCount++] = diff;",
      "info" : "ExpressionStatement[27017-27065]:ExpressionStatement[27140-27188]"
    }, {
      "left" : "collectGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[27078-27095]:ExpressionStatement[27201-27220]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[27109-27130]:ExpressionStatement[27234-27255]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[27143-27162]:ExpressionStatement[27268-27287]"
    }, {
      "left" : "if (showComparison)",
      "right" : "if (showComparison)",
      "info" : "IfStatement[27182-27231]:IfStatement[27307-27356]"
    }, {
      "left" : "showComparison();",
      "right" : "showComparison();",
      "info" : "ExpressionStatement[27214-27231]:ExpressionStatement[27339-27356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27286-30206]:Block[27411-30417]"
    }, {
      "left" : "System.out.println(\"Algorithm\\t\\t\\tRandom\\tSorted\\tReverse Sorted\");",
      "right" : "formatter.format(format, \"Algorithm\",\"Random\",\"Sorted\",\"Reverse Sorted\");",
      "info" : "ExpressionStatement[27296-27364]:ExpressionStatement[27604-27677]"
    }, {
      "left" : "if (showInsertion)",
      "right" : "if (showInsertion)",
      "info" : "IfStatement[27373-27613]:IfStatement[27686-27909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27392-27613]:Block[27705-27909]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[27406-27416]:VariableDeclarationStatement[28637-28647]"
    }, {
      "left" : "System.out.println(\"Insertion sort\\t\\t\\t\" + FORMAT.format(insertionResults[i++]) + \"\\t\" + FORMAT.format(insertionResults[i++]) + \"\\t\" + FORMAT.format(insertionResults[i++]));",
      "right" : "formatter.format(format, \"Insertion sort\", FORMAT.format(insertionResults[i++]), FORMAT.format(insertionResults[i++]), FORMAT.format(insertionResults[i++]));",
      "info" : "ExpressionStatement[27429-27603]:ExpressionStatement[27742-27899]"
    }, {
      "left" : "if (showBubble)",
      "right" : "if (showBubble)",
      "info" : "IfStatement[27622-27847]:IfStatement[27918-28126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27638-27847]:Block[27934-28126]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[27652-27662]:VariableDeclarationStatement[27948-27958]"
    }, {
      "left" : "System.out.println(\"Bubble sort\\t\\t\\t\" + FORMAT.format(bubbleResults[i++]) + \"\\t\" + FORMAT.format(bubbleResults[i++]) + \"\\t\" + FORMAT.format(bubbleResults[i++]));",
      "right" : "formatter.format(format, \"Bubble sort\", FORMAT.format(bubbleResults[i++]), FORMAT.format(bubbleResults[i++]), FORMAT.format(bubbleResults[i++]));",
      "info" : "ExpressionStatement[27675-27837]:ExpressionStatement[27971-28116]"
    }, {
      "left" : "if (showShell)",
      "right" : "if (showShell)",
      "info" : "IfStatement[27856-28076]:IfStatement[28135-28338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27871-28076]:Block[28150-28338]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[27885-27895]:VariableDeclarationStatement[27719-27729]"
    }, {
      "left" : "System.out.println(\"Shell sort\\t\\t\\t\" + FORMAT.format(shellResults[i++]) + \"\\t\" + FORMAT.format(shellResults[i++]) + \"\\t\" + FORMAT.format(shellResults[i++]));",
      "right" : "formatter.format(format, \"Shell sort\", FORMAT.format(shellResults[i++]), FORMAT.format(shellResults[i++]), FORMAT.format(shellResults[i++]));",
      "info" : "ExpressionStatement[27908-28066]:ExpressionStatement[28187-28328]"
    }, {
      "left" : "if (showMergeInPlace)",
      "right" : "if (showMergeInPlace)",
      "info" : "IfStatement[28085-28342]:IfStatement[28347-28589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28107-28342]:Block[28369-28589]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[28121-28131]:VariableDeclarationStatement[28164-28174]"
    }, {
      "left" : "System.out.println(\"Merge (in-place) sort\\t\\t\" + FORMAT.format(mergeInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeInPlaceResults[i++]));",
      "right" : "formatter.format(format, \"Merge (in-place) sort\", FORMAT.format(mergeInPlaceResults[i++]), FORMAT.format(mergeInPlaceResults[i++]), FORMAT.format(mergeInPlaceResults[i++]));",
      "info" : "ExpressionStatement[28144-28332]:ExpressionStatement[28406-28579]"
    }, {
      "left" : "if (showMergeNotInPlace)",
      "right" : "if (showMergeNotInPlace)",
      "info" : "IfStatement[28351-28622]:IfStatement[28598-28856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28376-28622]:Block[28623-28856]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[28390-28400]:VariableDeclarationStatement[28383-28393]"
    }, {
      "left" : "System.out.println(\"Merge (not-in-place) sort\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]) + \"\\t\" + FORMAT.format(mergeNotInPlaceResults[i++]));",
      "right" : "formatter.format(format, \"Merge (not-in-place) sort\", FORMAT.format(mergeNotInPlaceResults[i++]), FORMAT.format(mergeNotInPlaceResults[i++]), FORMAT.format(mergeNotInPlaceResults[i++]));",
      "info" : "ExpressionStatement[28413-28612]:ExpressionStatement[28660-28846]"
    }, {
      "left" : "if (showQuick)",
      "right" : "if (showQuick)",
      "info" : "IfStatement[28631-29240]:IfStatement[28865-29435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28646-29240]:Block[28880-29435]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[28660-28670]:VariableDeclarationStatement[28894-28904]"
    }, {
      "left" : "System.out.println(\"Quicksort with first as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "right" : "formatter.format(format, \"Quicksort with random as pivot\", FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]));",
      "info" : "ExpressionStatement[28683-28856]:ExpressionStatement[29264-29425]"
    }, {
      "left" : "System.out.println(\"Quicksort with middle as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "right" : "formatter.format(format, \"Quicksort with first as pivot\", FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]));",
      "info" : "ExpressionStatement[28869-29043]:ExpressionStatement[28917-29077]"
    }, {
      "left" : "System.out.println(\"Quicksort with random as pivot\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]) + \"\\t\" + FORMAT.format(quickResults[i++]));",
      "right" : "formatter.format(format, \"Quicksort with middle as pivot\", FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]));",
      "info" : "ExpressionStatement[29056-29230]:ExpressionStatement[29090-29251]"
    }, {
      "left" : "if (showHeap)",
      "right" : "if (showHeap)",
      "info" : "IfStatement[29249-29464]:IfStatement[29444-29642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29263-29464]:Block[29458-29642]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29277-29287]:VariableDeclarationStatement[29472-29482]"
    }, {
      "left" : "System.out.println(\"Heap sort\\t\\t\\t\" + FORMAT.format(heapResults[i++]) + \"\\t\" + FORMAT.format(heapResults[i++]) + \"\\t\" + FORMAT.format(heapResults[i++]));",
      "right" : "formatter.format(format, \"Heap sort\", FORMAT.format(heapResults[i++]), FORMAT.format(heapResults[i++]), FORMAT.format(heapResults[i++]));",
      "info" : "ExpressionStatement[29300-29454]:ExpressionStatement[29495-29632]"
    }, {
      "left" : "if (showCounting)",
      "right" : "if (showCounting)",
      "info" : "IfStatement[29473-29708]:IfStatement[29651-29869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29491-29708]:Block[29669-29869]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29505-29515]:VariableDeclarationStatement[29907-29917]"
    }, {
      "left" : "System.out.println(\"Counting sort\\t\\t\\t\" + FORMAT.format(countingResults[i++]) + \"\\t\" + FORMAT.format(countingResults[i++]) + \"\\t\" + FORMAT.format(countingResults[i++]));",
      "right" : "formatter.format(format, \"Counting sort\", FORMAT.format(countingResults[i++]), FORMAT.format(countingResults[i++]), FORMAT.format(countingResults[i++]));",
      "info" : "ExpressionStatement[29528-29698]:ExpressionStatement[29706-29859]"
    }, {
      "left" : "if (showRadix)",
      "right" : "if (showRadix)",
      "info" : "IfStatement[29717-29937]:IfStatement[29878-30081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29732-29937]:Block[29893-30081]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29746-29756]:VariableDeclarationStatement[30126-30136]"
    }, {
      "left" : "System.out.println(\"Radix sort\\t\\t\\t\" + FORMAT.format(radixResults[i++]) + \"\\t\" + FORMAT.format(radixResults[i++]) + \"\\t\" + FORMAT.format(radixResults[i++]));",
      "right" : "formatter.format(format, \"Radix sort\", FORMAT.format(radixResults[i++]), FORMAT.format(radixResults[i++]), FORMAT.format(radixResults[i++]));",
      "info" : "ExpressionStatement[29769-29927]:ExpressionStatement[29930-30071]"
    }, {
      "left" : "if (showAmericanFlag)",
      "right" : "if (showAmericanFlag)",
      "info" : "IfStatement[29946-30200]:IfStatement[30090-30329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29968-30200]:Block[30112-30329]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29982-29992]:VariableDeclarationStatement[29683-29693]"
    }, {
      "left" : "System.out.println(\"American Flag sort\\t\\t\" + FORMAT.format(americanFlagResults[i++]) + \"\\t\" + FORMAT.format(americanFlagResults[i++]) + \"\\t\" + FORMAT.format(americanFlagResults[i++]));",
      "right" : "formatter.format(format, \"American Flag sort\", FORMAT.format(americanFlagResults[i++]), FORMAT.format(americanFlagResults[i++]), FORMAT.format(americanFlagResults[i++]));",
      "info" : "ExpressionStatement[30005-30190]:ExpressionStatement[30149-30319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30275-30414]:Block[30486-30625]"
    }, {
      "left" : "System.out.println(\"Unsorted: \" + print(u));",
      "right" : "System.out.println(\"Unsorted: \" + print(u));",
      "info" : "ExpressionStatement[30285-30329]:ExpressionStatement[30496-30540]"
    }, {
      "left" : "System.out.println(\"Sorted: \" + print(r));",
      "right" : "System.out.println(\"Sorted: \" + print(r));",
      "info" : "ExpressionStatement[30338-30380]:ExpressionStatement[30549-30591]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[30389-30408]:ExpressionStatement[30600-30619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30472-30630]:Block[30683-30841]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[30482-30603]:ForStatement[30693-30814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30521-30603]:Block[30732-30814]"
    }, {
      "left" : "if (array[i - 1] > array[i])",
      "right" : "if (array[i - 1] > array[i])",
      "info" : "IfStatement[30535-30593]:IfStatement[30746-30804]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30580-30593]:ReturnStatement[30791-30804]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30612-30624]:ReturnStatement[30823-30835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30686-30739]:Block[30897-30950]"
    }, {
      "left" : "return print(array, 0, array.length);",
      "right" : "return print(array, 0, array.length);",
      "info" : "ReturnStatement[30696-30733]:ReturnStatement[30907-30944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30818-31088]:Block[31029-31299]"
    }, {
      "left" : "final Integer[] clone = array.clone();",
      "right" : "final Integer[] clone = array.clone();",
      "info" : "VariableDeclarationStatement[30828-30866]:VariableDeclarationStatement[31039-31077]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[30875-30919]:VariableDeclarationStatement[31086-31130]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[30928-31047]:ForStatement[31139-31258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30961-31047]:Block[31172-31258]"
    }, {
      "left" : "int e = clone[start + i];",
      "right" : "int e = clone[start + i];",
      "info" : "VariableDeclarationStatement[30975-31000]:VariableDeclarationStatement[31186-31211]"
    }, {
      "left" : "builder.append(e + \" \");",
      "right" : "builder.append(e + \" \");",
      "info" : "ExpressionStatement[31013-31037]:ExpressionStatement[31224-31248]"
    }, {
      "left" : "return builder.toString();",
      "right" : "return builder.toString();",
      "info" : "ReturnStatement[31056-31082]:ReturnStatement[31267-31293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31192-31564]:Block[31403-31775]"
    }, {
      "left" : "final Integer[] clone = array.clone();",
      "right" : "final Integer[] clone = array.clone();",
      "info" : "VariableDeclarationStatement[31202-31240]:VariableDeclarationStatement[31413-31451]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[31249-31293]:VariableDeclarationStatement[31460-31504]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[31302-31523]:ForStatement[31513-31734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31335-31523]:Block[31546-31734]"
    }, {
      "left" : "int e = clone[start + i];",
      "right" : "int e = clone[start + i];",
      "info" : "VariableDeclarationStatement[31349-31374]:VariableDeclarationStatement[31560-31585]"
    }, {
      "left" : "if (i == pivotIndex)",
      "right" : "if (i == pivotIndex)",
      "info" : "IfStatement[31387-31513]:IfStatement[31598-31724]"
    }, {
      "left" : "builder.append(\"`\" + e + \"` \");",
      "right" : "builder.append(\"`\" + e + \"` \");",
      "info" : "ExpressionStatement[31424-31455]:ExpressionStatement[31635-31666]"
    }, {
      "left" : "builder.append(e + \" \");",
      "right" : "builder.append(e + \" \");",
      "info" : "ExpressionStatement[31489-31513]:ExpressionStatement[31700-31724]"
    }, {
      "left" : "return builder.toString();",
      "right" : "return builder.toString();",
      "info" : "ReturnStatement[31532-31558]:ReturnStatement[31743-31769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31666-31974]:Block[32014-32322]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31676-31968]:TryStatement[32024-32316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31680-31890]:Block[32028-32238]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[31694-31706]:ExpressionStatement[32042-32054]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[31719-31731]:ExpressionStatement[32067-32079]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[31744-31756]:ExpressionStatement[32092-32104]"
    }, {
      "left" : "Thread.sleep(fSLEEP_INTERVAL);",
      "right" : "Thread.sleep(fSLEEP_INTERVAL);",
      "info" : "ExpressionStatement[31769-31799]:ExpressionStatement[32117-32147]"
    }, {
      "left" : "System.runFinalization();",
      "right" : "System.runFinalization();",
      "info" : "ExpressionStatement[31812-31837]:ExpressionStatement[32160-32185]"
    }, {
      "left" : "Thread.sleep(fSLEEP_INTERVAL);",
      "right" : "Thread.sleep(fSLEEP_INTERVAL);",
      "info" : "ExpressionStatement[31850-31880]:ExpressionStatement[32198-32228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31923-31968]:Block[32271-32316]"
    }, {
      "left" : "ex.printStackTrace();",
      "right" : "ex.printStackTrace();",
      "info" : "ExpressionStatement[31937-31958]:ExpressionStatement[32285-32306]"
    } ]
  },
  "interFileMappings" : { }
}