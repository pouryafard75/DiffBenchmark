{
  "matchedElements" : [
 {
    "left" : "class : NodeUtil",
    "right" : "class : NodeUtil",
    "info" : "TypeDeclaration[1420-89564]:TypeDeclaration[1420-89781]"
  }, {
    "left" : "MAX_POSITIVE_INTEGER_NUMBER",
    "right" : "MAX_POSITIVE_INTEGER_NUMBER",
    "info" : "FieldDeclaration[1537-1607]:FieldDeclaration[1537-1607]"
  }, {
    "left" : "JSC_PROPERTY_NAME_FN",
    "right" : "JSC_PROPERTY_NAME_FN",
    "info" : "FieldDeclaration[1611-1682]:FieldDeclaration[1611-1682]"
  }, {
    "left" : "CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
    "right" : "CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
    "info" : "FieldDeclaration[1819-2113]:FieldDeclaration[1819-2113]"
  }, {
    "left" : "private NodeUtil()",
    "right" : "private NodeUtil()",
    "info" : "MethodDeclaration[2157-2178]:MethodDeclaration[2157-2178]"
  }, {
    "left" : "package getImpureBooleanValue(n ) : ",
    "right" : "package getImpureBooleanValue(n ) : ",
    "info" : "MethodDeclaration[2182-3762]:MethodDeclaration[2182-3762]"
  }, {
    "left" : "package getPureBooleanValue(n ) : ",
    "right" : "package getPureBooleanValue(n ) : ",
    "info" : "MethodDeclaration[3766-5210]:MethodDeclaration[3766-5210]"
  }, {
    "left" : "package getStringValue(n ) : ",
    "right" : "package getStringValue(n ) : ",
    "info" : "MethodDeclaration[5214-6445]:MethodDeclaration[5214-6445]"
  }, {
    "left" : "package getStringValue(value double) : ",
    "right" : "package getStringValue(value double) : ",
    "info" : "MethodDeclaration[6449-6693]:MethodDeclaration[6449-6693]"
  }, {
    "left" : "package getArrayElementStringValue(n ) : ",
    "right" : "package getArrayElementStringValue(n ) : ",
    "info" : "MethodDeclaration[6697-7234]:MethodDeclaration[6697-7234]"
  }, {
    "left" : "package arrayToString(literal ) : ",
    "right" : "package arrayToString(literal ) : ",
    "info" : "MethodDeclaration[7238-7744]:MethodDeclaration[7238-7744]"
  }, {
    "left" : "package getNumberValue(n ) : ",
    "right" : "package getNumberValue(n ) : ",
    "info" : "MethodDeclaration[7748-9461]:MethodDeclaration[7748-9461]"
  }, {
    "left" : "package getStringNumberValue(rawJsString ) : ",
    "right" : "package getStringNumberValue(rawJsString ) : ",
    "info" : "MethodDeclaration[9465-10735]:MethodDeclaration[9465-10735]"
  }, {
    "left" : "package trimJsWhiteSpace(s ...) : ",
    "right" : "package trimJsWhiteSpace(s ...) : ",
    "info" : "MethodDeclaration[10739-11094]:MethodDeclaration[10739-11094]"
  }, {
    "left" : "package isStrWhiteSpaceChar(c int) : ",
    "right" : "package isStrWhiteSpaceChar(c int) : ",
    "info" : "MethodDeclaration[11098-11748]:MethodDeclaration[11098-11748]"
  }, {
    "left" : "package getFunctionName(n ) : ",
    "right" : "package getFunctionName(n ) : ",
    "info" : "MethodDeclaration[11752-12956]:MethodDeclaration[11752-12956]"
  }, {
    "left" : "public getNearestFunctionName(n ) : ",
    "right" : "public getNearestFunctionName(n ) : ",
    "info" : "MethodDeclaration[12960-14063]:MethodDeclaration[12960-14063]"
  }, {
    "left" : "package isImmutableValue(n ) : boolean",
    "right" : "package isImmutableValue(n ) : boolean",
    "info" : "MethodDeclaration[14068-14856]:MethodDeclaration[14068-14856]"
  }, {
    "left" : "package isLiteralValue(n , includeFunctions boolean) : boolean",
    "right" : "package isLiteralValue(n , includeFunctions boolean) : boolean",
    "info" : "MethodDeclaration[14860-16950]:MethodDeclaration[14860-16950]"
  }, {
    "left" : "package isValidDefineValue(val , defines ...) : boolean",
    "right" : "package isValidDefineValue(val , defines ...) : boolean",
    "info" : "MethodDeclaration[16954-18444]:MethodDeclaration[16954-18444]"
  }, {
    "left" : "package isEmptyBlock(block ) : boolean",
    "right" : "package isEmptyBlock(block ) : boolean",
    "info" : "MethodDeclaration[18448-18828]:MethodDeclaration[18448-18828]"
  }, {
    "left" : "package isSimpleOperator(n ) : boolean",
    "right" : "package isSimpleOperator(n ) : boolean",
    "info" : "MethodDeclaration[18832-18923]:MethodDeclaration[18832-18923]"
  }, {
    "left" : "package isSimpleOperatorType(type int) : boolean",
    "right" : "package isSimpleOperatorType(type int) : boolean",
    "info" : "MethodDeclaration[18927-19904]:MethodDeclaration[18927-19904]"
  }, {
    "left" : "public newExpr(child ) : ",
    "right" : "public newExpr(child ) : ",
    "info" : "MethodDeclaration[19908-20214]:MethodDeclaration[19908-20214]"
  }, {
    "left" : "package mayEffectMutableState(n ) : boolean",
    "right" : "package mayEffectMutableState(n ) : boolean",
    "info" : "MethodDeclaration[20218-20481]:MethodDeclaration[20218-20481]"
  }, {
    "left" : "package mayEffectMutableState(n , compiler ) : boolean",
    "right" : "package mayEffectMutableState(n , compiler ) : boolean",
    "info" : "MethodDeclaration[20485-20619]:MethodDeclaration[20485-20619]"
  }, {
    "left" : "package mayHaveSideEffects(n ) : boolean",
    "right" : "package mayHaveSideEffects(n ) : boolean",
    "info" : "MethodDeclaration[20623-20795]:MethodDeclaration[20623-20795]"
  }, {
    "left" : "package mayHaveSideEffects(n , compiler ) : boolean",
    "right" : "package mayHaveSideEffects(n , compiler ) : boolean",
    "info" : "MethodDeclaration[20799-20931]:MethodDeclaration[20799-20931]"
  }, {
    "left" : "private checkForStateChangeHelper(n , checkForNewObjects boolean, compiler ) : boolean",
    "right" : "private checkForStateChangeHelper(n , checkForNewObjects boolean, compiler ) : boolean",
    "info" : "MethodDeclaration[20935-25776]:MethodDeclaration[20935-25776]"
  }, {
    "left" : "package constructorCallHasSideEffects(callNode ) : boolean",
    "right" : "package constructorCallHasSideEffects(callNode ) : boolean",
    "info" : "MethodDeclaration[25780-26017]:MethodDeclaration[25780-26017]"
  }, {
    "left" : "package constructorCallHasSideEffects(callNode , compiler ) : boolean",
    "right" : "package constructorCallHasSideEffects(callNode , compiler ) : boolean",
    "info" : "MethodDeclaration[26021-26559]:MethodDeclaration[26021-26559]"
  }, {
    "left" : "BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",
    "right" : "BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",
    "info" : "FieldDeclaration[26772-26947]:FieldDeclaration[26772-26947]"
  }, {
    "left" : "OBJECT_METHODS_WITHOUT_SIDEEFFECTS",
    "right" : "OBJECT_METHODS_WITHOUT_SIDEEFFECTS",
    "info" : "FieldDeclaration[26950-27065]:FieldDeclaration[26950-27065]"
  }, {
    "left" : "REGEXP_METHODS",
    "right" : "REGEXP_METHODS",
    "info" : "FieldDeclaration[27068-27156]:FieldDeclaration[27068-27156]"
  }, {
    "left" : "STRING_REGEXP_METHODS",
    "right" : "STRING_REGEXP_METHODS",
    "info" : "FieldDeclaration[27159-27277]:FieldDeclaration[27159-27277]"
  }, {
    "left" : "package functionCallHasSideEffects(callNode ) : boolean",
    "right" : "package functionCallHasSideEffects(callNode ) : boolean",
    "info" : "MethodDeclaration[27281-27520]:MethodDeclaration[27281-27520]"
  }, {
    "left" : "package functionCallHasSideEffects(callNode , compiler ) : boolean",
    "right" : "package functionCallHasSideEffects(callNode , compiler ) : boolean",
    "info" : "MethodDeclaration[27524-29472]:MethodDeclaration[27524-29689]"
  }, {
    "left" : "package callHasLocalResult(n ) : boolean",
    "right" : "package callHasLocalResult(n ) : boolean",
    "info" : "MethodDeclaration[29476-29709]:MethodDeclaration[29693-29926]"
  }, {
    "left" : "package newHasLocalResult(n ) : boolean",
    "right" : "package newHasLocalResult(n ) : boolean",
    "info" : "MethodDeclaration[29713-29915]:MethodDeclaration[29930-30132]"
  }, {
    "left" : "package nodeTypeMayHaveSideEffects(n ) : boolean",
    "right" : "package nodeTypeMayHaveSideEffects(n ) : boolean",
    "info" : "MethodDeclaration[29919-30291]:MethodDeclaration[30136-30508]"
  }, {
    "left" : "package nodeTypeMayHaveSideEffects(n , compiler ) : boolean",
    "right" : "package nodeTypeMayHaveSideEffects(n , compiler ) : boolean",
    "info" : "MethodDeclaration[30295-30883]:MethodDeclaration[30512-31100]"
  }, {
    "left" : "package canBeSideEffected(n ) : boolean",
    "right" : "package canBeSideEffected(n ) : boolean",
    "info" : "MethodDeclaration[30887-31127]:MethodDeclaration[31104-31344]"
  }, {
    "left" : "package canBeSideEffected(n , knownConstants ...) : boolean",
    "right" : "package canBeSideEffected(n , knownConstants ...) : boolean",
    "info" : "MethodDeclaration[31131-32466]:MethodDeclaration[31348-32683]"
  }, {
    "left" : "package precedence(type int) : int",
    "right" : "package precedence(type int) : int",
    "info" : "MethodDeclaration[32903-34919]:MethodDeclaration[33120-35136]"
  }, {
    "left" : "package valueCheck(n , p ) : boolean",
    "right" : "package valueCheck(n , p ) : boolean",
    "info" : "MethodDeclaration[34923-35533]:MethodDeclaration[35140-35750]"
  }, {
    "left" : "class : NumbericResultPredicate",
    "right" : "class : NumbericResultPredicate",
    "info" : "TypeDeclaration[35537-35686]:TypeDeclaration[35754-35903]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[35607-35682]:MethodDeclaration[35824-35899]"
  }, {
    "left" : "NUMBERIC_RESULT_PREDICATE",
    "right" : "NUMBERIC_RESULT_PREDICATE",
    "info" : "FieldDeclaration[35690-35791]:FieldDeclaration[35907-36008]"
  }, {
    "left" : "package isNumericResult(n ) : boolean",
    "right" : "package isNumericResult(n ) : boolean",
    "info" : "MethodDeclaration[35795-35974]:MethodDeclaration[36012-36191]"
  }, {
    "left" : "package isNumericResultHelper(n ) : boolean",
    "right" : "package isNumericResultHelper(n ) : boolean",
    "info" : "MethodDeclaration[35978-36823]:MethodDeclaration[36195-37040]"
  }, {
    "left" : "class : BooleanResultPredicate",
    "right" : "class : BooleanResultPredicate",
    "info" : "TypeDeclaration[36827-36975]:TypeDeclaration[37044-37192]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[36896-36971]:MethodDeclaration[37113-37188]"
  }, {
    "left" : "BOOLEAN_RESULT_PREDICATE",
    "right" : "BOOLEAN_RESULT_PREDICATE",
    "info" : "FieldDeclaration[36979-37077]:FieldDeclaration[37196-37294]"
  }, {
    "left" : "package isBooleanResult(n ) : boolean",
    "right" : "package isBooleanResult(n ) : boolean",
    "info" : "MethodDeclaration[37081-37260]:MethodDeclaration[37298-37477]"
  }, {
    "left" : "package isBooleanResultHelper(n ) : boolean",
    "right" : "package isBooleanResultHelper(n ) : boolean",
    "info" : "MethodDeclaration[37264-37844]:MethodDeclaration[37481-38061]"
  }, {
    "left" : "package isUndefined(n ) : boolean",
    "right" : "package isUndefined(n ) : boolean",
    "info" : "MethodDeclaration[37848-38056]:MethodDeclaration[38065-38273]"
  }, {
    "left" : "package isNull(n ) : boolean",
    "right" : "package isNull(n ) : boolean",
    "info" : "MethodDeclaration[38060-38133]:MethodDeclaration[38277-38350]"
  }, {
    "left" : "package isNullOrUndefined(n ) : boolean",
    "right" : "package isNullOrUndefined(n ) : boolean",
    "info" : "MethodDeclaration[38137-38223]:MethodDeclaration[38354-38440]"
  }, {
    "left" : "class : MayBeStringResultPredicate",
    "right" : "class : MayBeStringResultPredicate",
    "info" : "TypeDeclaration[38227-38375]:TypeDeclaration[38444-38592]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[38300-38371]:MethodDeclaration[38517-38588]"
  }, {
    "left" : "MAY_BE_STRING_PREDICATE",
    "right" : "MAY_BE_STRING_PREDICATE",
    "info" : "FieldDeclaration[38379-38484]:FieldDeclaration[38596-38701]"
  }, {
    "left" : "package mayBeString(n ) : boolean",
    "right" : "package mayBeString(n ) : boolean",
    "info" : "MethodDeclaration[38488-38629]:MethodDeclaration[38705-38846]"
  }, {
    "left" : "package mayBeString(n , recurse boolean) : boolean",
    "right" : "package mayBeString(n , recurse boolean) : boolean",
    "info" : "MethodDeclaration[38633-38816]:MethodDeclaration[38850-39033]"
  }, {
    "left" : "package mayBeStringHelper(n ) : boolean",
    "right" : "package mayBeStringHelper(n ) : boolean",
    "info" : "MethodDeclaration[38820-38962]:MethodDeclaration[39037-39179]"
  }, {
    "left" : "package isAssociative(type int) : boolean",
    "right" : "package isAssociative(type int) : boolean",
    "info" : "MethodDeclaration[38966-39458]:MethodDeclaration[39183-39675]"
  }, {
    "left" : "package isCommutative(type int) : boolean",
    "right" : "package isCommutative(type int) : boolean",
    "info" : "MethodDeclaration[39462-39990]:MethodDeclaration[39679-40207]"
  }, {
    "left" : "package isAssignmentOp(n ) : boolean",
    "right" : "package isAssignmentOp(n ) : boolean",
    "info" : "MethodDeclaration[39994-40461]:MethodDeclaration[40211-40678]"
  }, {
    "left" : "package getOpFromAssignmentOp(n ) : int",
    "right" : "package getOpFromAssignmentOp(n ) : int",
    "info" : "MethodDeclaration[40465-41228]:MethodDeclaration[40682-41445]"
  }, {
    "left" : "package isExpressionNode(n ) : boolean",
    "right" : "package isExpressionNode(n ) : boolean",
    "info" : "MethodDeclaration[41232-41322]:MethodDeclaration[41449-41539]"
  }, {
    "left" : "package containsFunction(n ) : boolean",
    "right" : "package containsFunction(n ) : boolean",
    "info" : "MethodDeclaration[41326-41520]:MethodDeclaration[41543-41737]"
  }, {
    "left" : "package referencesThis(n ) : boolean",
    "right" : "package referencesThis(n ) : boolean",
    "info" : "MethodDeclaration[41524-41777]:MethodDeclaration[41741-41994]"
  }, {
    "left" : "package isGet(n ) : boolean",
    "right" : "package isGet(n ) : boolean",
    "info" : "MethodDeclaration[41781-41948]:MethodDeclaration[41998-42165]"
  }, {
    "left" : "package isGetProp(n ) : boolean",
    "right" : "package isGetProp(n ) : boolean",
    "info" : "MethodDeclaration[41952-42072]:MethodDeclaration[42169-42289]"
  }, {
    "left" : "package isName(n ) : boolean",
    "right" : "package isName(n ) : boolean",
    "info" : "MethodDeclaration[42076-42187]:MethodDeclaration[42293-42404]"
  }, {
    "left" : "package isNew(n ) : boolean",
    "right" : "package isNew(n ) : boolean",
    "info" : "MethodDeclaration[42191-42299]:MethodDeclaration[42408-42516]"
  }, {
    "left" : "package isVar(n ) : boolean",
    "right" : "package isVar(n ) : boolean",
    "info" : "MethodDeclaration[42303-42411]:MethodDeclaration[42520-42628]"
  }, {
    "left" : "package isVarDeclaration(n ) : boolean",
    "right" : "package isVarDeclaration(n ) : boolean",
    "info" : "MethodDeclaration[42415-42824]:MethodDeclaration[42632-43041]"
  }, {
    "left" : "package getAssignedValue(n ) : ",
    "right" : "package getAssignedValue(n ) : ",
    "info" : "MethodDeclaration[42828-43270]:MethodDeclaration[43045-43487]"
  }, {
    "left" : "package isString(n ) : boolean",
    "right" : "package isString(n ) : boolean",
    "info" : "MethodDeclaration[43274-43391]:MethodDeclaration[43491-43608]"
  }, {
    "left" : "package isExprAssign(n ) : boolean",
    "right" : "package isExprAssign(n ) : boolean",
    "info" : "MethodDeclaration[43395-43723]:MethodDeclaration[43612-43940]"
  }, {
    "left" : "package isAssign(n ) : boolean",
    "right" : "package isAssign(n ) : boolean",
    "info" : "MethodDeclaration[43727-43845]:MethodDeclaration[43944-44062]"
  }, {
    "left" : "package isExprCall(n ) : boolean",
    "right" : "package isExprCall(n ) : boolean",
    "info" : "MethodDeclaration[43849-44164]:MethodDeclaration[44066-44381]"
  }, {
    "left" : "package isForIn(n ) : boolean",
    "right" : "package isForIn(n ) : boolean",
    "info" : "MethodDeclaration[44168-44343]:MethodDeclaration[44385-44560]"
  }, {
    "left" : "package isLoopStructure(n ) : boolean",
    "right" : "package isLoopStructure(n ) : boolean",
    "info" : "MethodDeclaration[44347-44629]:MethodDeclaration[44564-44846]"
  }, {
    "left" : "package getLoopCodeBlock(n ) : ",
    "right" : "package getLoopCodeBlock(n ) : ",
    "info" : "MethodDeclaration[44633-45036]:MethodDeclaration[44850-45253]"
  }, {
    "left" : "package isWithinLoop(n ) : boolean",
    "right" : "package isWithinLoop(n ) : boolean",
    "info" : "MethodDeclaration[45040-45397]:MethodDeclaration[45257-45614]"
  }, {
    "left" : "package isControlStructure(n ) : boolean",
    "right" : "package isControlStructure(n ) : boolean",
    "info" : "MethodDeclaration[45401-45884]:MethodDeclaration[45618-46101]"
  }, {
    "left" : "package isControlStructureCodeBlock(parent , n ) : boolean",
    "right" : "package isControlStructureCodeBlock(parent , n ) : boolean",
    "info" : "MethodDeclaration[45888-46769]:MethodDeclaration[46105-46986]"
  }, {
    "left" : "package getConditionExpression(n ) : ",
    "right" : "package getConditionExpression(n ) : ",
    "info" : "MethodDeclaration[46773-47573]:MethodDeclaration[46990-47790]"
  }, {
    "left" : "package isStatementBlock(n ) : boolean",
    "right" : "package isStatementBlock(n ) : boolean",
    "info" : "MethodDeclaration[47577-47778]:MethodDeclaration[47794-47995]"
  }, {
    "left" : "package isStatement(n ) : boolean",
    "right" : "package isStatement(n ) : boolean",
    "info" : "MethodDeclaration[47782-47933]:MethodDeclaration[47999-48150]"
  }, {
    "left" : "package isStatementParent(parent ) : boolean",
    "right" : "package isStatementParent(parent ) : boolean",
    "info" : "MethodDeclaration[47937-48398]:MethodDeclaration[48154-48615]"
  }, {
    "left" : "package isSwitchCase(n ) : boolean",
    "right" : "package isSwitchCase(n ) : boolean",
    "info" : "MethodDeclaration[48402-48570]:MethodDeclaration[48619-48787]"
  }, {
    "left" : "package isReferenceName(n ) : boolean",
    "right" : "package isReferenceName(n ) : boolean",
    "info" : "MethodDeclaration[48574-48833]:MethodDeclaration[48791-49050]"
  }, {
    "left" : "package isLabelName(n ) : boolean",
    "right" : "package isLabelName(n ) : boolean",
    "info" : "MethodDeclaration[48837-48987]:MethodDeclaration[49054-49204]"
  }, {
    "left" : "package isTryFinallyNode(parent , child ) : boolean",
    "right" : "package isTryFinallyNode(parent , child ) : boolean",
    "info" : "MethodDeclaration[48991-49231]:MethodDeclaration[49208-49448]"
  }, {
    "left" : "package isTryCatchNodeContainer(n ) : boolean",
    "right" : "package isTryCatchNodeContainer(n ) : boolean",
    "info" : "MethodDeclaration[49235-49465]:MethodDeclaration[49452-49682]"
  }, {
    "left" : "package removeChild(parent , node ) : void",
    "right" : "package removeChild(parent , node ) : void",
    "info" : "MethodDeclaration[49469-51933]:MethodDeclaration[49686-52150]"
  }, {
    "left" : "package maybeAddFinally(tryNode ) : void",
    "right" : "package maybeAddFinally(tryNode ) : void",
    "info" : "MethodDeclaration[51937-52249]:MethodDeclaration[52154-52466]"
  }, {
    "left" : "package tryMergeBlock(block ) : boolean",
    "right" : "package tryMergeBlock(block ) : boolean",
    "info" : "MethodDeclaration[52253-52942]:MethodDeclaration[52470-53159]"
  }, {
    "left" : "package isCall(n ) : boolean",
    "right" : "package isCall(n ) : boolean",
    "info" : "MethodDeclaration[52946-53057]:MethodDeclaration[53163-53274]"
  }, {
    "left" : "package isCallOrNew(node ) : boolean",
    "right" : "package isCallOrNew(node ) : boolean",
    "info" : "MethodDeclaration[53061-53251]:MethodDeclaration[53278-53468]"
  }, {
    "left" : "package isFunction(n ) : boolean",
    "right" : "package isFunction(n ) : boolean",
    "info" : "MethodDeclaration[53255-53378]:MethodDeclaration[53472-53595]"
  }, {
    "left" : "package getFunctionBody(fn ) : ",
    "right" : "package getFunctionBody(fn ) : ",
    "info" : "MethodDeclaration[53382-53569]:MethodDeclaration[53599-53786]"
  }, {
    "left" : "package isThis(node ) : boolean",
    "right" : "package isThis(node ) : boolean",
    "info" : "MethodDeclaration[53573-53690]:MethodDeclaration[53790-53907]"
  }, {
    "left" : "package isArrayLiteral(node ) : boolean",
    "right" : "package isArrayLiteral(node ) : boolean",
    "info" : "MethodDeclaration[53695-53828]:MethodDeclaration[53912-54045]"
  }, {
    "left" : "package containsCall(n ) : boolean",
    "right" : "package containsCall(n ) : boolean",
    "info" : "MethodDeclaration[53832-53974]:MethodDeclaration[54049-54191]"
  }, {
    "left" : "package isFunctionDeclaration(n ) : boolean",
    "right" : "package isFunctionDeclaration(n ) : boolean",
    "info" : "MethodDeclaration[53978-54327]:MethodDeclaration[54195-54544]"
  }, {
    "left" : "package isHoistedFunctionDeclaration(n ) : boolean",
    "right" : "package isHoistedFunctionDeclaration(n ) : boolean",
    "info" : "MethodDeclaration[54331-54733]:MethodDeclaration[54548-54950]"
  }, {
    "left" : "package isFunctionExpression(n ) : boolean",
    "right" : "package isFunctionExpression(n ) : boolean",
    "info" : "MethodDeclaration[54737-55503]:MethodDeclaration[54954-55720]"
  }, {
    "left" : "package isEmptyFunctionExpression(node ) : boolean",
    "right" : "package isEmptyFunctionExpression(node ) : boolean",
    "info" : "MethodDeclaration[55507-55831]:MethodDeclaration[55724-56048]"
  }, {
    "left" : "package isVarArgsFunction(function ) : boolean",
    "right" : "package isVarArgsFunction(function ) : boolean",
    "info" : "MethodDeclaration[55835-56201]:MethodDeclaration[56052-56418]"
  }, {
    "left" : "package isObjectCallMethod(callNode , methodName ) : boolean",
    "right" : "package isObjectCallMethod(callNode , methodName ) : boolean",
    "info" : "MethodDeclaration[56205-56808]:MethodDeclaration[56422-57025]"
  }, {
    "left" : "package isFunctionObjectCall(callNode ) : boolean",
    "right" : "package isFunctionObjectCall(callNode ) : boolean",
    "info" : "MethodDeclaration[56813-57048]:MethodDeclaration[57030-57265]"
  }, {
    "left" : "package isFunctionObjectApply(callNode ) : boolean",
    "right" : "package isFunctionObjectApply(callNode ) : boolean",
    "info" : "MethodDeclaration[57052-57291]:MethodDeclaration[57269-57508]"
  }, {
    "left" : "package isFunctionObjectCallOrApply(callNode ) : boolean",
    "right" : "package isFunctionObjectCallOrApply(callNode ) : boolean",
    "info" : "MethodDeclaration[57295-57620]:MethodDeclaration[57512-57837]"
  }, {
    "left" : "package isSimpleFunctionObjectCall(callNode ) : boolean",
    "right" : "package isSimpleFunctionObjectCall(callNode ) : boolean",
    "info" : "MethodDeclaration[57624-58019]:MethodDeclaration[57841-58236]"
  }, {
    "left" : "package isVarOrSimpleAssignLhs(n , parent ) : boolean",
    "right" : "package isVarOrSimpleAssignLhs(n , parent ) : boolean",
    "info" : "MethodDeclaration[58023-58558]:MethodDeclaration[58240-58775]"
  }, {
    "left" : "package isLValue(node ) : boolean",
    "right" : "package isLValue(node ) : boolean",
    "info" : "MethodDeclaration[58562-59764]:MethodDeclaration[58779-59981]"
  }, {
    "left" : "package isObjectLitKey(node , parent ) : boolean",
    "right" : "package isObjectLitKey(node , parent ) : boolean",
    "info" : "MethodDeclaration[59768-60215]:MethodDeclaration[59985-60432]"
  }, {
    "left" : "package getObjectLitKeyName(key ) : ",
    "right" : "package getObjectLitKeyName(key ) : ",
    "info" : "MethodDeclaration[60219-60557]:MethodDeclaration[60436-60774]"
  }, {
    "left" : "package getObjectLitKeyTypeFromValueType(key , valueType ) : ",
    "right" : "package getObjectLitKeyTypeFromValueType(key , valueType ) : ",
    "info" : "MethodDeclaration[60561-61572]:MethodDeclaration[60778-61789]"
  }, {
    "left" : "package isGetOrSetKey(node ) : boolean",
    "right" : "package isGetOrSetKey(node ) : boolean",
    "info" : "MethodDeclaration[61576-61907]:MethodDeclaration[61793-62124]"
  }, {
    "left" : "package opToStr(operator int) : ",
    "right" : "package opToStr(operator int) : ",
    "info" : "MethodDeclaration[61911-63824]:MethodDeclaration[62128-64041]"
  }, {
    "left" : "package opToStrNoFail(operator int) : ",
    "right" : "package opToStrNoFail(operator int) : ",
    "info" : "MethodDeclaration[63828-64331]:MethodDeclaration[64045-64548]"
  }, {
    "left" : "package containsType(node , type int, traverseChildrenPred ) : boolean",
    "right" : "package containsType(node , type int, traverseChildrenPred ) : boolean",
    "info" : "MethodDeclaration[64335-64640]:MethodDeclaration[64552-64857]"
  }, {
    "left" : "package containsType(node , type int) : boolean",
    "right" : "package containsType(node , type int) : boolean",
    "info" : "MethodDeclaration[64644-64850]:MethodDeclaration[64861-65067]"
  }, {
    "left" : "package redeclareVarsInsideBranch(branch ) : void",
    "right" : "package redeclareVarsInsideBranch(branch ) : void",
    "info" : "MethodDeclaration[64855-65602]:MethodDeclaration[65072-65819]"
  }, {
    "left" : "package copyNameAnnotations(source , destination ) : void",
    "right" : "package copyNameAnnotations(source , destination ) : void",
    "info" : "MethodDeclaration[65606-65907]:MethodDeclaration[65823-66124]"
  }, {
    "left" : "private getAddingRoot(n ) : ",
    "right" : "private getAddingRoot(n ) : ",
    "info" : "MethodDeclaration[65911-66733]:MethodDeclaration[66128-66950]"
  }, {
    "left" : "public newFunctionNode(name , params , body , lineno int, charno int) : ",
    "right" : "public newFunctionNode(name , params , body , lineno int, charno int) : ",
    "info" : "MethodDeclaration[66737-67314]:MethodDeclaration[66954-67531]"
  }, {
    "left" : "public newQualifiedNameNode(convention , name , lineno int, charno int) : ",
    "right" : "public newQualifiedNameNode(convention , name , lineno int, charno int) : ",
    "info" : "MethodDeclaration[67318-68473]:MethodDeclaration[67535-68690]"
  }, {
    "left" : "package newQualifiedNameNode(convention , name , basisNode , originalName ) : ",
    "right" : "package newQualifiedNameNode(convention , name , basisNode , originalName ) : ",
    "info" : "MethodDeclaration[68477-69271]:MethodDeclaration[68694-69488]"
  }, {
    "left" : "public getRootOfQualifiedName(qName ) : ",
    "right" : "public getRootOfQualifiedName(qName ) : ",
    "info" : "MethodDeclaration[69275-69686]:MethodDeclaration[69492-69903]"
  }, {
    "left" : "package setDebugInformation(node , basisNode , originalName ) : void",
    "right" : "package setDebugInformation(node , basisNode , originalName ) : void",
    "info" : "MethodDeclaration[69690-70221]:MethodDeclaration[69907-70438]"
  }, {
    "left" : "private newName(convention , name , lineno int, charno int) : ",
    "right" : "private newName(convention , name , lineno int, charno int) : ",
    "info" : "MethodDeclaration[70225-70527]:MethodDeclaration[70442-70744]"
  }, {
    "left" : "package newName(convention , name , basisNode ) : ",
    "right" : "package newName(convention , name , basisNode ) : ",
    "info" : "MethodDeclaration[70531-71175]:MethodDeclaration[70748-71392]"
  }, {
    "left" : "package newName(convention , name , basisNode , originalName ) : ",
    "right" : "package newName(convention , name , basisNode , originalName ) : ",
    "info" : "MethodDeclaration[71179-71948]:MethodDeclaration[71396-72165]"
  }, {
    "left" : "package isLatin(s ...) : boolean",
    "right" : "package isLatin(s ...) : boolean",
    "info" : "MethodDeclaration[71952-72819]:MethodDeclaration[72169-73036]"
  }, {
    "left" : "package isValidPropertyName(name ) : boolean",
    "right" : "package isValidPropertyName(name ) : boolean",
    "info" : "MethodDeclaration[72823-73484]:MethodDeclaration[73040-73701]"
  }, {
    "left" : "class : VarCollector",
    "right" : "class : VarCollector",
    "info" : "TypeDeclaration[73488-73925]:TypeDeclaration[73705-74142]"
  }, {
    "left" : "vars",
    "right" : "vars",
    "info" : "FieldDeclaration[73547-73602]:FieldDeclaration[73764-73819]"
  }, {
    "left" : "public visit(n ) : void",
    "right" : "public visit(n ) : void",
    "info" : "MethodDeclaration[73608-73921]:MethodDeclaration[73825-74138]"
  }, {
    "left" : "public getVarsDeclaredInBranch(root ) : ",
    "right" : "public getVarsDeclaredInBranch(root ) : ",
    "info" : "MethodDeclaration[73929-74259]:MethodDeclaration[74146-74476]"
  }, {
    "left" : "package isPrototypePropertyDeclaration(n ) : boolean",
    "right" : "package isPrototypePropertyDeclaration(n ) : boolean",
    "info" : "MethodDeclaration[74263-74561]:MethodDeclaration[74480-74778]"
  }, {
    "left" : "package isPrototypeProperty(n ) : boolean",
    "right" : "package isPrototypeProperty(n ) : boolean",
    "info" : "MethodDeclaration[74565-74801]:MethodDeclaration[74782-75018]"
  }, {
    "left" : "package getPrototypeClassName(qName ) : ",
    "right" : "package getPrototypeClassName(qName ) : ",
    "info" : "MethodDeclaration[74805-75164]:MethodDeclaration[75022-75381]"
  }, {
    "left" : "package getPrototypePropertyName(qName ) : ",
    "right" : "package getPrototypePropertyName(qName ) : ",
    "info" : "MethodDeclaration[75168-75526]:MethodDeclaration[75385-75743]"
  }, {
    "left" : "package newUndefinedNode(srcReferenceNode ) : ",
    "right" : "package newUndefinedNode(srcReferenceNode ) : ",
    "info" : "MethodDeclaration[75530-75841]:MethodDeclaration[75747-76058]"
  }, {
    "left" : "package newVarNode(name , value ) : ",
    "right" : "package newVarNode(name , value ) : ",
    "info" : "MethodDeclaration[75845-76314]:MethodDeclaration[76062-76531]"
  }, {
    "left" : "class : MatchNameNode",
    "right" : "class : MatchNameNode",
    "info" : "TypeDeclaration[76318-76670]:TypeDeclaration[76535-76887]"
  }, {
    "left" : "name",
    "right" : "name",
    "info" : "FieldDeclaration[76463-76481]:FieldDeclaration[76680-76698]"
  }, {
    "left" : "package MatchNameNode(name )",
    "right" : "package MatchNameNode(name )",
    "info" : "MethodDeclaration[76487-76544]:MethodDeclaration[76704-76761]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[76550-76666]:MethodDeclaration[76767-76883]"
  }, {
    "left" : "class : MatchNodeType",
    "right" : "class : MatchNodeType",
    "info" : "TypeDeclaration[76674-76961]:TypeDeclaration[76891-77178]"
  }, {
    "left" : "type",
    "right" : "type",
    "info" : "FieldDeclaration[76806-76821]:FieldDeclaration[77023-77038]"
  }, {
    "left" : "package MatchNodeType(type int)",
    "right" : "package MatchNodeType(type int)",
    "info" : "MethodDeclaration[76827-76881]:MethodDeclaration[77044-77098]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[76887-76957]:MethodDeclaration[77104-77174]"
  }, {
    "left" : "class : MatchDeclaration",
    "right" : "class : MatchDeclaration",
    "info" : "TypeDeclaration[76966-77208]:TypeDeclaration[77183-77425]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[77101-77204]:MethodDeclaration[77318-77421]"
  }, {
    "left" : "class : MatchNotFunction",
    "right" : "class : MatchNotFunction",
    "info" : "TypeDeclaration[77212-77417]:TypeDeclaration[77429-77634]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[77348-77413]:MethodDeclaration[77565-77630]"
  }, {
    "left" : "MATCH_NOT_FUNCTION",
    "right" : "MATCH_NOT_FUNCTION",
    "info" : "FieldDeclaration[77421-77494]:FieldDeclaration[77638-77711]"
  }, {
    "left" : "class : MatchShallowStatement",
    "right" : "class : MatchShallowStatement",
    "info" : "TypeDeclaration[77498-77905]:TypeDeclaration[77715-78122]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[77653-77901]:MethodDeclaration[77870-78118]"
  }, {
    "left" : "package getNodeTypeReferenceCount(node , type int, traverseChildrenPred ) : int",
    "right" : "package getNodeTypeReferenceCount(node , type int, traverseChildrenPred ) : int",
    "info" : "MethodDeclaration[77909-78177]:MethodDeclaration[78126-78394]"
  }, {
    "left" : "package isNameReferenced(node , name , traverseChildrenPred ) : boolean",
    "right" : "package isNameReferenced(node , name , traverseChildrenPred ) : boolean",
    "info" : "MethodDeclaration[78181-78492]:MethodDeclaration[78398-78709]"
  }, {
    "left" : "package isNameReferenced(node , name ) : boolean",
    "right" : "package isNameReferenced(node , name ) : boolean",
    "info" : "MethodDeclaration[78496-78704]:MethodDeclaration[78713-78921]"
  }, {
    "left" : "package getNameReferenceCount(node , name ) : int",
    "right" : "package getNameReferenceCount(node , name ) : int",
    "info" : "MethodDeclaration[78708-78955]:MethodDeclaration[78925-79172]"
  }, {
    "left" : "package has(node , pred , traverseChildrenPred ) : boolean",
    "right" : "package has(node , pred , traverseChildrenPred ) : boolean",
    "info" : "MethodDeclaration[78959-79486]:MethodDeclaration[79176-79703]"
  }, {
    "left" : "package getCount(n , pred , traverseChildrenPred ) : int",
    "right" : "package getCount(n , pred , traverseChildrenPred ) : int",
    "info" : "MethodDeclaration[79490-79971]:MethodDeclaration[79707-80188]"
  }, {
    "left" : "interface : Visitor",
    "right" : "interface : Visitor",
    "info" : "TypeDeclaration[79975-80107]:TypeDeclaration[80192-80324]"
  }, {
    "left" : "public visit(node ) : void",
    "right" : "public visit(node ) : void",
    "info" : "MethodDeclaration[80081-80103]:MethodDeclaration[80298-80320]"
  }, {
    "left" : "package visitPreOrder(node , vistor , traverseChildrenPred ) : void",
    "right" : "package visitPreOrder(node , vistor , traverseChildrenPred ) : void",
    "info" : "MethodDeclaration[80111-80565]:MethodDeclaration[80328-80782]"
  }, {
    "left" : "package visitPostOrder(node , vistor , traverseChildrenPred ) : void",
    "right" : "package visitPostOrder(node , vistor , traverseChildrenPred ) : void",
    "info" : "MethodDeclaration[80569-81026]:MethodDeclaration[80786-81243]"
  }, {
    "left" : "package hasFinally(n ) : boolean",
    "right" : "package hasFinally(n ) : boolean",
    "info" : "MethodDeclaration[81030-81228]:MethodDeclaration[81247-81445]"
  }, {
    "left" : "package getCatchBlock(n ) : ",
    "right" : "package getCatchBlock(n ) : ",
    "info" : "MethodDeclaration[81232-81460]:MethodDeclaration[81449-81677]"
  }, {
    "left" : "package hasCatchHandler(n ) : boolean",
    "right" : "package hasCatchHandler(n ) : boolean",
    "info" : "MethodDeclaration[81464-81751]:MethodDeclaration[81681-81968]"
  }, {
    "left" : "public getFunctionParameters(fnNode ) : ",
    "right" : "public getFunctionParameters(fnNode ) : ",
    "info" : "MethodDeclaration[81755-82100]:MethodDeclaration[81972-82317]"
  }, {
    "left" : "package isConstantName(node ) : boolean",
    "right" : "package isConstantName(node ) : boolean",
    "info" : "MethodDeclaration[82104-82907]:MethodDeclaration[82321-83124]"
  }, {
    "left" : "package isConstantByConvention(convention , node , parent ) : boolean",
    "right" : "package isConstantByConvention(convention , node , parent ) : boolean",
    "info" : "MethodDeclaration[82911-83400]:MethodDeclaration[83128-83617]"
  }, {
    "left" : "package getInfoForNameNode(nameNode ) : ",
    "right" : "package getInfoForNameNode(nameNode ) : ",
    "info" : "MethodDeclaration[83404-83929]:MethodDeclaration[83621-84146]"
  }, {
    "left" : "public getFunctionJSDocInfo(n ) : ",
    "right" : "public getFunctionJSDocInfo(n ) : ",
    "info" : "MethodDeclaration[83933-84573]:MethodDeclaration[84150-84790]"
  }, {
    "left" : "public getSourceName(n ) : ",
    "right" : "public getSourceName(n ) : ",
    "info" : "MethodDeclaration[84577-84920]:MethodDeclaration[84794-85137]"
  }, {
    "left" : "package newCallNode(callTarget , ) : ",
    "right" : "package newCallNode(callTarget , ) : ",
    "info" : "MethodDeclaration[84924-85319]:MethodDeclaration[85141-85536]"
  }, {
    "left" : "package evaluatesToLocalValue(value ) : boolean",
    "right" : "package evaluatesToLocalValue(value ) : boolean",
    "info" : "MethodDeclaration[85323-85554]:MethodDeclaration[85540-85771]"
  }, {
    "left" : "package evaluatesToLocalValue(value , locals ...) : boolean",
    "right" : "package evaluatesToLocalValue(value , locals ...) : boolean",
    "info" : "MethodDeclaration[85558-88247]:MethodDeclaration[85775-88464]"
  }, {
    "left" : "private getNthSibling(first , index int) : ",
    "right" : "private getNthSibling(first , index int) : ",
    "info" : "MethodDeclaration[88251-88649]:MethodDeclaration[88468-88866]"
  }, {
    "left" : "package getArgumentForFunction(function , index int) : ",
    "right" : "package getArgumentForFunction(function , index int) : ",
    "info" : "MethodDeclaration[88653-88974]:MethodDeclaration[88870-89191]"
  }, {
    "left" : "package getArgumentForCallOrNew(call , index int) : ",
    "right" : "package getArgumentForCallOrNew(call , index int) : ",
    "info" : "MethodDeclaration[88978-89285]:MethodDeclaration[89195-89502]"
  }, {
    "left" : "private isToStringMethodCall(call ) : boolean",
    "right" : "private isToStringMethodCall(call ) : boolean",
    "info" : "MethodDeclaration[89289-89562]:MethodDeclaration[89506-89779]"
  } ],
  "mappings" : [
 {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[2157-2164]:Modifier[2157-2164]"
  }, {
    "left" : "NodeUtil",
    "right" : "NodeUtil",
    "info" : "SimpleName[2165-2173]:SimpleName[2165-2173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2176-2178]:Block[2176-2178]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[2465-2471]:Modifier[2465-2471]"
  }, {
    "left" : "TernaryValue",
    "right" : "TernaryValue",
    "info" : "SimpleType[2472-2484]:SimpleType[2472-2484]"
  }, {
    "left" : "getImpureBooleanValue",
    "right" : "getImpureBooleanValue",
    "info" : "SimpleName[2485-2506]:SimpleName[2485-2506]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[2507-2513]:SingleVariableDeclaration[2507-2513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2515-3762]:Block[2515-3762]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n      default:\n        return getPureBooleanValue(n);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n      default:\n        return getPureBooleanValue(n);\n    }",
    "info" : "SwitchStatement[2521-3758]:SwitchStatement[2521-3758]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[2550-2568]:SwitchCase[2550-2568]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[2575-2592]:SwitchCase[2575-2592]"
  }, {
    "left" : "return getImpureBooleanValue(n.getLastChild());",
    "right" : "return getImpureBooleanValue(n.getLastChild());",
    "info" : "ReturnStatement[2668-2715]:ReturnStatement[2668-2715]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[2722-2737]:SwitchCase[2722-2737]"
  }, {
    "left" : "TernaryValue value = getImpureBooleanValue(n.getLastChild());",
    "right" : "TernaryValue value = getImpureBooleanValue(n.getLastChild());",
    "info" : "VariableDeclarationStatement[2746-2807]:VariableDeclarationStatement[2746-2807]"
  }, {
    "left" : "return value.not();",
    "right" : "return value.not();",
    "info" : "ReturnStatement[2816-2835]:ReturnStatement[2816-2835]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[2842-2857]:SwitchCase[2842-2857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2858-3033]:Block[2858-3033]"
  }, {
    "left" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
    "right" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
    "info" : "VariableDeclarationStatement[2868-2928]:VariableDeclarationStatement[2868-2928]"
  }, {
    "left" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
    "right" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
    "info" : "VariableDeclarationStatement[2937-2996]:VariableDeclarationStatement[2937-2996]"
  }, {
    "left" : "return lhs.and(rhs);",
    "right" : "return lhs.and(rhs);",
    "info" : "ReturnStatement[3005-3025]:ReturnStatement[3005-3025]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[3040-3054]:SwitchCase[3040-3054]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3056-3230]:Block[3056-3230]"
  }, {
    "left" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
    "right" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
    "info" : "VariableDeclarationStatement[3066-3126]:VariableDeclarationStatement[3066-3126]"
  }, {
    "left" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
    "right" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
    "info" : "VariableDeclarationStatement[3135-3194]:VariableDeclarationStatement[3135-3194]"
  }, {
    "left" : "return lhs.or(rhs);",
    "right" : "return lhs.or(rhs);",
    "info" : "ReturnStatement[3203-3222]:ReturnStatement[3203-3222]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[3237-3253]:SwitchCase[3237-3253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3255-3575]:Block[3255-3575]"
  }, {
    "left" : "TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());",
    "right" : "TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());",
    "info" : "VariableDeclarationStatement[3265-3354]:VariableDeclarationStatement[3265-3354]"
  }, {
    "left" : "TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());",
    "right" : "TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());",
    "info" : "VariableDeclarationStatement[3363-3429]:VariableDeclarationStatement[3363-3429]"
  }, {
    "left" : "if (trueValue.equals(falseValue))",
    "right" : "if (trueValue.equals(falseValue))",
    "info" : "IfStatement[3438-3567]:IfStatement[3438-3567]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3472-3511]:Block[3472-3511]"
  }, {
    "left" : "return trueValue;",
    "right" : "return trueValue;",
    "info" : "ReturnStatement[3484-3501]:ReturnStatement[3484-3501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3517-3567]:Block[3517-3567]"
  }, {
    "left" : "return TernaryValue.UNKNOWN;",
    "right" : "return TernaryValue.UNKNOWN;",
    "info" : "ReturnStatement[3529-3557]:ReturnStatement[3529-3557]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[3582-3602]:SwitchCase[3582-3602]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[3609-3630]:SwitchCase[3609-3630]"
  }, {
    "left" : "return TernaryValue.TRUE;",
    "right" : "return TernaryValue.TRUE;",
    "info" : "ReturnStatement[3672-3697]:ReturnStatement[3672-3697]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[3705-3713]:SwitchCase[3705-3713]"
  }, {
    "left" : "return getPureBooleanValue(n);",
    "right" : "return getPureBooleanValue(n);",
    "info" : "ReturnStatement[3722-3752]:ReturnStatement[3722-3752]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4072-4078]:Modifier[4072-4078]"
  }, {
    "left" : "TernaryValue",
    "right" : "TernaryValue",
    "info" : "SimpleType[4079-4091]:SimpleType[4079-4091]"
  }, {
    "left" : "getPureBooleanValue",
    "right" : "getPureBooleanValue",
    "info" : "SimpleName[4092-4111]:SimpleName[4092-4111]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[4112-4118]:SingleVariableDeclaration[4112-4118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4120-5210]:Block[4120-5210]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n    }",
    "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n    }",
    "info" : "SwitchStatement[4126-5172]:SwitchStatement[4126-5172]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[4155-4173]:SwitchCase[4155-4173]"
  }, {
    "left" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
    "right" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
    "info" : "ReturnStatement[4182-4241]:ReturnStatement[4182-4241]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[4249-4267]:SwitchCase[4249-4267]"
  }, {
    "left" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
    "right" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
    "info" : "ReturnStatement[4276-4327]:ReturnStatement[4276-4327]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[4335-4350]:SwitchCase[4335-4350]"
  }, {
    "left" : "return getPureBooleanValue(n.getLastChild()).not();",
    "right" : "return getPureBooleanValue(n.getLastChild()).not();",
    "info" : "ReturnStatement[4359-4410]:ReturnStatement[4359-4410]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[4418-4434]:SwitchCase[4418-4434]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[4441-4458]:SwitchCase[4441-4458]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[4465-4481]:SwitchCase[4465-4481]"
  }, {
    "left" : "return TernaryValue.FALSE;",
    "right" : "return TernaryValue.FALSE;",
    "info" : "ReturnStatement[4490-4516]:ReturnStatement[4490-4516]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[4524-4540]:SwitchCase[4524-4540]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[4549-4577]:VariableDeclarationStatement[4549-4577]"
  }, {
    "left" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
    "right" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
    "info" : "IfStatement[4586-4928]:IfStatement[4586-4928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4650-4846]:Block[4650-4846]"
  }, {
    "left" : "return TernaryValue.FALSE;",
    "right" : "return TernaryValue.FALSE;",
    "info" : "ReturnStatement[4810-4836]:ReturnStatement[4810-4836]"
  }, {
    "left" : "if (\"Infinity\".equals(name))",
    "right" : "if (\"Infinity\".equals(name))",
    "info" : "IfStatement[4852-4928]:IfStatement[4852-4928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4881-4928]:Block[4881-4928]"
  }, {
    "left" : "return TernaryValue.TRUE;",
    "right" : "return TernaryValue.TRUE;",
    "info" : "ReturnStatement[4893-4918]:ReturnStatement[4893-4918]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4937-4943]:BreakStatement[4937-4943]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[4951-4967]:SwitchCase[4951-4967]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[4974-4992]:SwitchCase[4974-4992]"
  }, {
    "left" : "return TernaryValue.TRUE;",
    "right" : "return TernaryValue.TRUE;",
    "info" : "ReturnStatement[5001-5026]:ReturnStatement[5001-5026]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[5034-5054]:SwitchCase[5034-5054]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[5061-5082]:SwitchCase[5061-5082]"
  }, {
    "left" : "if (!mayHaveSideEffects(n))",
    "right" : "if (!mayHaveSideEffects(n))",
    "info" : "IfStatement[5091-5166]:IfStatement[5091-5166]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5119-5166]:Block[5119-5166]"
  }, {
    "left" : "return TernaryValue.TRUE;",
    "right" : "return TernaryValue.TRUE;",
    "info" : "ReturnStatement[5131-5156]:ReturnStatement[5131-5156]"
  }, {
    "left" : "return TernaryValue.UNKNOWN;",
    "right" : "return TernaryValue.UNKNOWN;",
    "info" : "ReturnStatement[5178-5206]:ReturnStatement[5178-5206]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[5434-5440]:Modifier[5434-5440]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[5441-5447]:SimpleType[5441-5447]"
  }, {
    "left" : "getStringValue",
    "right" : "getStringValue",
    "info" : "SimpleName[5448-5462]:SimpleName[5448-5462]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[5463-5469]:SingleVariableDeclaration[5463-5469]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5471-6445]:Block[5471-6445]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        return getStringValue(n.getDouble());\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        return arrayToString(n);\n\n      case Token.OBJECTLIT:\n        return \"[object Object]\";\n    }",
    "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        return getStringValue(n.getDouble());\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        return arrayToString(n);\n\n      case Token.OBJECTLIT:\n        return \"[object Object]\";\n    }",
    "info" : "SwitchStatement[5520-6424]:SwitchStatement[5520-6424]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[5549-5567]:SwitchCase[5549-5567]"
  }, {
    "left" : "return n.getString();",
    "right" : "return n.getString();",
    "info" : "ReturnStatement[5576-5597]:ReturnStatement[5576-5597]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[5605-5621]:SwitchCase[5605-5621]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[5630-5658]:VariableDeclarationStatement[5630-5658]"
  }, {
    "left" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
    "right" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
    "info" : "IfStatement[5667-5804]:IfStatement[5667-5804]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5770-5804]:Block[5770-5804]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[5782-5794]:ReturnStatement[5782-5794]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5813-5819]:BreakStatement[5813-5819]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[5827-5845]:SwitchCase[5827-5845]"
  }, {
    "left" : "return getStringValue(n.getDouble());",
    "right" : "return getStringValue(n.getDouble());",
    "info" : "ReturnStatement[5854-5891]:ReturnStatement[5854-5891]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[5899-5916]:SwitchCase[5899-5916]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[5923-5939]:SwitchCase[5923-5939]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[5946-5962]:SwitchCase[5946-5962]"
  }, {
    "left" : "return Node.tokenToName(n.getType());",
    "right" : "return Node.tokenToName(n.getType());",
    "info" : "ReturnStatement[5971-6008]:ReturnStatement[5971-6008]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[6016-6032]:SwitchCase[6016-6032]"
  }, {
    "left" : "return \"undefined\";",
    "right" : "return \"undefined\";",
    "info" : "ReturnStatement[6041-6060]:ReturnStatement[6041-6060]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[6068-6083]:SwitchCase[6068-6083]"
  }, {
    "left" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
    "right" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
    "info" : "VariableDeclarationStatement[6092-6152]:VariableDeclarationStatement[6092-6152]"
  }, {
    "left" : "if (child != TernaryValue.UNKNOWN)",
    "right" : "if (child != TernaryValue.UNKNOWN)",
    "info" : "IfStatement[6161-6279]:IfStatement[6161-6279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6196-6279]:Block[6196-6279]"
  }, {
    "left" : "return child.toBoolean(true) ? \"false\" : \"true\";",
    "right" : "return child.toBoolean(true) ? \"false\" : \"true\";",
    "info" : "ReturnStatement[6208-6256]:ReturnStatement[6208-6256]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6288-6294]:BreakStatement[6288-6294]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[6302-6322]:SwitchCase[6302-6322]"
  }, {
    "left" : "return arrayToString(n);",
    "right" : "return arrayToString(n);",
    "info" : "ReturnStatement[6331-6355]:ReturnStatement[6331-6355]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[6363-6384]:SwitchCase[6363-6384]"
  }, {
    "left" : "return \"[object Object]\";",
    "right" : "return \"[object Object]\";",
    "info" : "ReturnStatement[6393-6418]:ReturnStatement[6393-6418]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[6429-6441]:ReturnStatement[6429-6441]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6449-6455]:Modifier[6449-6455]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[6456-6462]:SimpleType[6456-6462]"
  }, {
    "left" : "getStringValue",
    "right" : "getStringValue",
    "info" : "SimpleName[6463-6477]:SimpleName[6463-6477]"
  }, {
    "left" : "double value",
    "right" : "double value",
    "info" : "SingleVariableDeclaration[6478-6490]:SingleVariableDeclaration[6478-6490]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6492-6693]:Block[6492-6693]"
  }, {
    "left" : "long longValue = (long) value;",
    "right" : "long longValue = (long) value;",
    "info" : "VariableDeclarationStatement[6498-6528]:VariableDeclarationStatement[6498-6528]"
  }, {
    "left" : "if (longValue == value)",
    "right" : "if (longValue == value)",
    "info" : "IfStatement[6569-6689]:IfStatement[6569-6689]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6593-6639]:Block[6593-6639]"
  }, {
    "left" : "return Long.toString(longValue);",
    "right" : "return Long.toString(longValue);",
    "info" : "ReturnStatement[6601-6633]:ReturnStatement[6601-6633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6645-6689]:Block[6645-6689]"
  }, {
    "left" : "return Double.toString(value);",
    "right" : "return Double.toString(value);",
    "info" : "ReturnStatement[6653-6683]:ReturnStatement[6653-6683]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7073-7079]:Modifier[7073-7079]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[7080-7086]:SimpleType[7080-7086]"
  }, {
    "left" : "getArrayElementStringValue",
    "right" : "getArrayElementStringValue",
    "info" : "SimpleName[7087-7113]:SimpleName[7087-7113]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[7114-7120]:SingleVariableDeclaration[7114-7120]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7122-7234]:Block[7122-7234]"
  }, {
    "left" : "return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY)\n        ? \"\" : getStringValue(n);",
    "right" : "return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY)\n        ? \"\" : getStringValue(n);",
    "info" : "ReturnStatement[7128-7230]:ReturnStatement[7128-7230]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7238-7244]:Modifier[7238-7244]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[7245-7251]:SimpleType[7245-7251]"
  }, {
    "left" : "arrayToString",
    "right" : "arrayToString",
    "info" : "SimpleName[7252-7265]:SimpleName[7252-7265]"
  }, {
    "left" : "Node literal",
    "right" : "Node literal",
    "info" : "SingleVariableDeclaration[7266-7278]:SingleVariableDeclaration[7266-7278]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7280-7744]:Block[7280-7744]"
  }, {
    "left" : "Node first = literal.getFirstChild();",
    "right" : "Node first = literal.getFirstChild();",
    "info" : "VariableDeclarationStatement[7286-7323]:VariableDeclarationStatement[7286-7323]"
  }, {
    "left" : "StringBuilder result = new StringBuilder();",
    "right" : "StringBuilder result = new StringBuilder();",
    "info" : "VariableDeclarationStatement[7328-7371]:VariableDeclarationStatement[7328-7371]"
  }, {
    "left" : "int nextSlot = 0;",
    "right" : "int nextSlot = 0;",
    "info" : "VariableDeclarationStatement[7376-7393]:VariableDeclarationStatement[7376-7393]"
  }, {
    "left" : "int nextSkipSlot = 0;",
    "right" : "int nextSkipSlot = 0;",
    "info" : "VariableDeclarationStatement[7398-7419]:VariableDeclarationStatement[7398-7419]"
  }, {
    "left" : "for (Node n = first; n != null; n = n.getNext())",
    "right" : "for (Node n = first; n != null; n = n.getNext())",
    "info" : "ForStatement[7424-7710]:ForStatement[7424-7710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7473-7710]:Block[7473-7710]"
  }, {
    "left" : "String childValue = getArrayElementStringValue(n);",
    "right" : "String childValue = getArrayElementStringValue(n);",
    "info" : "VariableDeclarationStatement[7481-7531]:VariableDeclarationStatement[7481-7531]"
  }, {
    "left" : "if (childValue == null)",
    "right" : "if (childValue == null)",
    "info" : "IfStatement[7538-7592]:IfStatement[7538-7592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7562-7592]:Block[7562-7592]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[7572-7584]:ReturnStatement[7572-7584]"
  }, {
    "left" : "if (n != first)",
    "right" : "if (n != first)",
    "info" : "IfStatement[7599-7652]:IfStatement[7599-7652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7615-7652]:Block[7615-7652]"
  }, {
    "left" : "result.append(',');",
    "right" : "result.append(',');",
    "info" : "ExpressionStatement[7625-7644]:ExpressionStatement[7625-7644]"
  }, {
    "left" : "result.append(childValue);",
    "right" : "result.append(childValue);",
    "info" : "ExpressionStatement[7659-7685]:ExpressionStatement[7659-7685]"
  }, {
    "left" : "nextSlot++;",
    "right" : "nextSlot++;",
    "info" : "ExpressionStatement[7693-7704]:ExpressionStatement[7693-7704]"
  }, {
    "left" : "return result.toString();",
    "right" : "return result.toString();",
    "info" : "ReturnStatement[7715-7740]:ReturnStatement[7715-7740]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7968-7974]:Modifier[7968-7974]"
  }, {
    "left" : "Double",
    "right" : "Double",
    "info" : "SimpleType[7975-7981]:SimpleType[7975-7981]"
  }, {
    "left" : "getNumberValue",
    "right" : "getNumberValue",
    "info" : "SimpleName[7982-7996]:SimpleName[7982-7996]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[7997-8003]:SingleVariableDeclaration[7997-8003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8005-9461]:Block[8005-9461]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        if (mayHaveSideEffects(n.getFirstChild())) {\n          return null;\n        } else {\n          return Double.NaN;\n        }\n\n      case Token.NAME:\n        // Check for known constants\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NEG:\n        if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\")) {\n          return Double.NEGATIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n        }\n        break;\n\n      case Token.STRING:\n        return getStringNumberValue(n.getString());\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        String value = getStringValue(n);\n        return value != null ? getStringNumberValue(value) : null;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        if (mayHaveSideEffects(n.getFirstChild())) {\n          return null;\n        } else {\n          return Double.NaN;\n        }\n\n      case Token.NAME:\n        // Check for known constants\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NEG:\n        if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\")) {\n          return Double.NEGATIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n        }\n        break;\n\n      case Token.STRING:\n        return getStringNumberValue(n.getString());\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        String value = getStringValue(n);\n        return value != null ? getStringNumberValue(value) : null;\n    }",
    "info" : "SwitchStatement[8011-9439]:SwitchStatement[8011-9439]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[8040-8056]:SwitchCase[8040-8056]"
  }, {
    "left" : "return 1.0;",
    "right" : "return 1.0;",
    "info" : "ReturnStatement[8065-8076]:ReturnStatement[8065-8076]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[8084-8101]:SwitchCase[8084-8101]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[8108-8124]:SwitchCase[8108-8124]"
  }, {
    "left" : "return 0.0;",
    "right" : "return 0.0;",
    "info" : "ReturnStatement[8133-8144]:ReturnStatement[8133-8144]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[8152-8170]:SwitchCase[8152-8170]"
  }, {
    "left" : "return n.getDouble();",
    "right" : "return n.getDouble();",
    "info" : "ReturnStatement[8179-8200]:ReturnStatement[8179-8200]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[8208-8224]:SwitchCase[8208-8224]"
  }, {
    "left" : "if (mayHaveSideEffects(n.getFirstChild()))",
    "right" : "if (mayHaveSideEffects(n.getFirstChild()))",
    "info" : "IfStatement[8233-8356]:IfStatement[8233-8356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8276-8310]:Block[8276-8310]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[8288-8300]:ReturnStatement[8288-8300]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8316-8356]:Block[8316-8356]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[8328-8346]:ReturnStatement[8328-8346]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[8364-8380]:SwitchCase[8364-8380]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[8426-8454]:VariableDeclarationStatement[8426-8454]"
  }, {
    "left" : "if (name.equals(\"undefined\"))",
    "right" : "if (name.equals(\"undefined\"))",
    "info" : "IfStatement[8463-8533]:IfStatement[8463-8533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8493-8533]:Block[8493-8533]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[8505-8523]:ReturnStatement[8505-8523]"
  }, {
    "left" : "if (name.equals(\"NaN\"))",
    "right" : "if (name.equals(\"NaN\"))",
    "info" : "IfStatement[8542-8606]:IfStatement[8542-8606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8566-8606]:Block[8566-8606]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[8578-8596]:ReturnStatement[8578-8596]"
  }, {
    "left" : "if (name.equals(\"Infinity\"))",
    "right" : "if (name.equals(\"Infinity\"))",
    "info" : "IfStatement[8615-8698]:IfStatement[8615-8698]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8644-8698]:Block[8644-8698]"
  }, {
    "left" : "return Double.POSITIVE_INFINITY;",
    "right" : "return Double.POSITIVE_INFINITY;",
    "info" : "ReturnStatement[8656-8688]:ReturnStatement[8656-8688]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[8707-8719]:ReturnStatement[8707-8719]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[8727-8742]:SwitchCase[8727-8742]"
  }, {
    "left" : "if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\"))",
    "right" : "if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\"))",
    "info" : "IfStatement[8751-8942]:IfStatement[8751-8942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8888-8942]:Block[8888-8942]"
  }, {
    "left" : "return Double.NEGATIVE_INFINITY;",
    "right" : "return Double.NEGATIVE_INFINITY;",
    "info" : "ReturnStatement[8900-8932]:ReturnStatement[8900-8932]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[8951-8963]:ReturnStatement[8951-8963]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[8971-8986]:SwitchCase[8971-8986]"
  }, {
    "left" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
    "right" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
    "info" : "VariableDeclarationStatement[8995-9055]:VariableDeclarationStatement[8995-9055]"
  }, {
    "left" : "if (child != TernaryValue.UNKNOWN)",
    "right" : "if (child != TernaryValue.UNKNOWN)",
    "info" : "IfStatement[9064-9175]:IfStatement[9064-9175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9099-9175]:Block[9099-9175]"
  }, {
    "left" : "return child.toBoolean(true) ? 0.0 : 1.0;",
    "right" : "return child.toBoolean(true) ? 0.0 : 1.0;",
    "info" : "ReturnStatement[9111-9152]:ReturnStatement[9111-9152]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9184-9190]:BreakStatement[9184-9190]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[9198-9216]:SwitchCase[9198-9216]"
  }, {
    "left" : "return getStringNumberValue(n.getString());",
    "right" : "return getStringNumberValue(n.getString());",
    "info" : "ReturnStatement[9225-9268]:ReturnStatement[9225-9268]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[9276-9296]:SwitchCase[9276-9296]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[9303-9324]:SwitchCase[9303-9324]"
  }, {
    "left" : "String value = getStringValue(n);",
    "right" : "String value = getStringValue(n);",
    "info" : "VariableDeclarationStatement[9333-9366]:VariableDeclarationStatement[9333-9366]"
  }, {
    "left" : "return value != null ? getStringNumberValue(value) : null;",
    "right" : "return value != null ? getStringNumberValue(value) : null;",
    "info" : "ReturnStatement[9375-9433]:ReturnStatement[9375-9433]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[9445-9457]:ReturnStatement[9445-9457]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9465-9471]:Modifier[9465-9471]"
  }, {
    "left" : "Double",
    "right" : "Double",
    "info" : "SimpleType[9472-9478]:SimpleType[9472-9478]"
  }, {
    "left" : "getStringNumberValue",
    "right" : "getStringNumberValue",
    "info" : "SimpleName[9479-9499]:SimpleName[9479-9499]"
  }, {
    "left" : "String rawJsString",
    "right" : "String rawJsString",
    "info" : "SingleVariableDeclaration[9500-9518]:SingleVariableDeclaration[9500-9518]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9520-10735]:Block[9520-10735]"
  }, {
    "left" : "if (rawJsString.contains(\"\\u000b\"))",
    "right" : "if (rawJsString.contains(\"\\u000b\"))",
    "info" : "IfStatement[9526-9635]:IfStatement[9526-9635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9562-9635]:Block[9562-9635]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[9617-9629]:ReturnStatement[9617-9629]"
  }, {
    "left" : "String s = trimJsWhiteSpace(rawJsString);",
    "right" : "String s = trimJsWhiteSpace(rawJsString);",
    "info" : "VariableDeclarationStatement[9641-9682]:VariableDeclarationStatement[9641-9682]"
  }, {
    "left" : "if (s.length() == 0)",
    "right" : "if (s.length() == 0)",
    "info" : "IfStatement[9728-9774]:IfStatement[9728-9774]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9749-9774]:Block[9749-9774]"
  }, {
    "left" : "return 0.0;",
    "right" : "return 0.0;",
    "info" : "ReturnStatement[9757-9768]:ReturnStatement[9757-9768]"
  }, {
    "left" : "if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))",
    "right" : "if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))",
    "info" : "IfStatement[9780-10090]:IfStatement[9780-10090]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9884-10090]:Block[9884-10090]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[9933-10084]:TryStatement[9933-10084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9937-10015]:Block[9937-10015]"
  }, {
    "left" : "return Double.valueOf(Integer.parseInt(s.substring(2), 16));",
    "right" : "return Double.valueOf(Integer.parseInt(s.substring(2), 16));",
    "info" : "ReturnStatement[9947-10007]:ReturnStatement[9947-10007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10048-10084]:Block[10048-10084]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[10058-10076]:ReturnStatement[10058-10076]"
  }, {
    "left" : "if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))",
    "right" : "if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))",
    "info" : "IfStatement[10096-10344]:IfStatement[10096-10344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10254-10344]:Block[10254-10344]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[10326-10338]:ReturnStatement[10326-10338]"
  }, {
    "left" : "if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\"))",
    "right" : "if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\"))",
    "info" : "IfStatement[10495-10613]:IfStatement[10495-10613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10587-10613]:Block[10587-10613]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[10595-10607]:ReturnStatement[10595-10607]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[10619-10731]:TryStatement[10619-10731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10623-10666]:Block[10623-10666]"
  }, {
    "left" : "return Double.parseDouble(s);",
    "right" : "return Double.parseDouble(s);",
    "info" : "ReturnStatement[10631-10660]:ReturnStatement[10631-10660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10699-10731]:Block[10699-10731]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[10707-10725]:ReturnStatement[10707-10725]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10739-10745]:Modifier[10739-10745]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[10746-10752]:SimpleType[10746-10752]"
  }, {
    "left" : "trimJsWhiteSpace",
    "right" : "trimJsWhiteSpace",
    "info" : "SimpleName[10753-10769]:SimpleName[10753-10769]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[10770-10778]:SingleVariableDeclaration[10770-10778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10780-11094]:Block[10780-11094]"
  }, {
    "left" : "int start = 0;",
    "right" : "int start = 0;",
    "info" : "VariableDeclarationStatement[10786-10800]:VariableDeclarationStatement[10786-10800]"
  }, {
    "left" : "int end = s.length();",
    "right" : "int end = s.length();",
    "info" : "VariableDeclarationStatement[10805-10826]:VariableDeclarationStatement[10805-10826]"
  }, {
    "left" : "while (end > 0\n        && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE)",
    "right" : "while (end > 0\n        && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE)",
    "info" : "WhileStatement[10831-10938]:WhileStatement[10831-10938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10918-10938]:Block[10918-10938]"
  }, {
    "left" : "end--;",
    "right" : "end--;",
    "info" : "ExpressionStatement[10926-10932]:ExpressionStatement[10926-10932]"
  }, {
    "left" : "while (start < end\n        && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE)",
    "right" : "while (start < end\n        && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE)",
    "info" : "WhileStatement[10943-11054]:WhileStatement[10943-11054]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11032-11054]:Block[11032-11054]"
  }, {
    "left" : "start++;",
    "right" : "start++;",
    "info" : "ExpressionStatement[11040-11048]:ExpressionStatement[11040-11048]"
  }, {
    "left" : "return s.substring(start, end);",
    "right" : "return s.substring(start, end);",
    "info" : "ReturnStatement[11059-11090]:ReturnStatement[11059-11090]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[11149-11155]:Modifier[11149-11155]"
  }, {
    "left" : "TernaryValue",
    "right" : "TernaryValue",
    "info" : "SimpleType[11156-11168]:SimpleType[11156-11168]"
  }, {
    "left" : "isStrWhiteSpaceChar",
    "right" : "isStrWhiteSpaceChar",
    "info" : "SimpleName[11169-11188]:SimpleName[11169-11188]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[11189-11194]:SingleVariableDeclaration[11189-11194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11196-11748]:Block[11196-11748]"
  }, {
    "left" : "switch (c) {\n      case '\\u000B': // <VT>\n        return TernaryValue.UNKNOWN;  // IE says \"no\", EcmaScript says \"yes\"\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return TernaryValue.TRUE;\n      default:\n        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }",
    "right" : "switch (c) {\n      case '\\u000B': // <VT>\n        return TernaryValue.UNKNOWN;  // IE says \"no\", EcmaScript says \"yes\"\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return TernaryValue.TRUE;\n      default:\n        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }",
    "info" : "SwitchStatement[11202-11744]:SwitchStatement[11202-11744]"
  }, {
    "left" : "case '\\u000B':",
    "right" : "case '\\u000B':",
    "info" : "SwitchCase[11221-11235]:SwitchCase[11221-11235]"
  }, {
    "left" : "return TernaryValue.UNKNOWN;",
    "right" : "return TernaryValue.UNKNOWN;",
    "info" : "ReturnStatement[11252-11280]:ReturnStatement[11252-11280]"
  }, {
    "left" : "case ' ':",
    "right" : "case ' ':",
    "info" : "SwitchCase[11327-11336]:SwitchCase[11327-11336]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[11351-11361]:SwitchCase[11351-11361]"
  }, {
    "left" : "case '\\r':",
    "right" : "case '\\r':",
    "info" : "SwitchCase[11376-11386]:SwitchCase[11376-11386]"
  }, {
    "left" : "case '\\t':",
    "right" : "case '\\t':",
    "info" : "SwitchCase[11401-11411]:SwitchCase[11401-11411]"
  }, {
    "left" : "case '\\u00A0':",
    "right" : "case '\\u00A0':",
    "info" : "SwitchCase[11427-11441]:SwitchCase[11427-11441]"
  }, {
    "left" : "case '\\u000C':",
    "right" : "case '\\u000C':",
    "info" : "SwitchCase[11458-11472]:SwitchCase[11458-11472]"
  }, {
    "left" : "case '\\u2028':",
    "right" : "case '\\u2028':",
    "info" : "SwitchCase[11487-11501]:SwitchCase[11487-11501]"
  }, {
    "left" : "case '\\u2029':",
    "right" : "case '\\u2029':",
    "info" : "SwitchCase[11516-11530]:SwitchCase[11516-11530]"
  }, {
    "left" : "case '\\uFEFF':",
    "right" : "case '\\uFEFF':",
    "info" : "SwitchCase[11545-11559]:SwitchCase[11545-11559]"
  }, {
    "left" : "return TernaryValue.TRUE;",
    "right" : "return TernaryValue.TRUE;",
    "info" : "ReturnStatement[11577-11602]:ReturnStatement[11577-11602]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[11609-11617]:SwitchCase[11609-11617]"
  }, {
    "left" : "return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;",
    "right" : "return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;",
    "info" : "ReturnStatement[11626-11738]:ReturnStatement[11626-11738]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12365-12371]:Modifier[12365-12371]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[12372-12378]:SimpleType[12372-12378]"
  }, {
    "left" : "getFunctionName",
    "right" : "getFunctionName",
    "info" : "SimpleName[12379-12394]:SimpleName[12379-12394]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[12395-12401]:SingleVariableDeclaration[12395-12401]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12403-12956]:Block[12403-12956]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[12409-12437]:VariableDeclarationStatement[12409-12437]"
  }, {
    "left" : "String name = n.getFirstChild().getString();",
    "right" : "String name = n.getFirstChild().getString();",
    "info" : "VariableDeclarationStatement[12442-12486]:VariableDeclarationStatement[12442-12486]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
    "info" : "SwitchStatement[12491-12952]:SwitchStatement[12491-12952]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[12525-12541]:SwitchCase[12525-12541]"
  }, {
    "left" : "return parent.getString();",
    "right" : "return parent.getString();",
    "info" : "ReturnStatement[12631-12657]:ReturnStatement[12631-12657]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[12665-12683]:SwitchCase[12665-12683]"
  }, {
    "left" : "return parent.getFirstChild().getQualifiedName();",
    "right" : "return parent.getFirstChild().getQualifiedName();",
    "info" : "ReturnStatement[12785-12834]:ReturnStatement[12785-12834]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[12842-12850]:SwitchCase[12842-12850]"
  }, {
    "left" : "return name != null && name.length() != 0 ? name : null;",
    "right" : "return name != null && name.length() != 0 ? name : null;",
    "info" : "ReturnStatement[12890-12946]:ReturnStatement[12890-12946]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13561-13567]:Modifier[13561-13567]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13568-13574]:Modifier[13568-13574]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[13575-13581]:SimpleType[13575-13581]"
  }, {
    "left" : "getNearestFunctionName",
    "right" : "getNearestFunctionName",
    "info" : "SimpleName[13582-13604]:SimpleName[13582-13604]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[13605-13611]:SingleVariableDeclaration[13605-13611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13613-14063]:Block[13613-14063]"
  }, {
    "left" : "String name = getFunctionName(n);",
    "right" : "String name = getFunctionName(n);",
    "info" : "VariableDeclarationStatement[13619-13652]:VariableDeclarationStatement[13619-13652]"
  }, {
    "left" : "if (name != null)",
    "right" : "if (name != null)",
    "info" : "IfStatement[13657-13701]:IfStatement[13657-13701]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13675-13701]:Block[13675-13701]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[13683-13695]:ReturnStatement[13683-13695]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[13758-13786]:VariableDeclarationStatement[13758-13786]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.SET:\n      case Token.GET:\n      case Token.STRING:\n        // Return the name of the literal's key.\n        return parent.getString();\n      case Token.NUMBER:\n        return getStringValue(parent);\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.SET:\n      case Token.GET:\n      case Token.STRING:\n        // Return the name of the literal's key.\n        return parent.getString();\n      case Token.NUMBER:\n        return getStringValue(parent);\n    }",
    "info" : "SwitchStatement[13791-14041]:SwitchStatement[13791-14041]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[13825-13840]:SwitchCase[13825-13840]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[13847-13862]:SwitchCase[13847-13862]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[13869-13887]:SwitchCase[13869-13887]"
  }, {
    "left" : "return parent.getString();",
    "right" : "return parent.getString();",
    "info" : "ReturnStatement[13945-13971]:ReturnStatement[13945-13971]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[13978-13996]:SwitchCase[13978-13996]"
  }, {
    "left" : "return getStringValue(parent);",
    "right" : "return getStringValue(parent);",
    "info" : "ReturnStatement[14005-14035]:ReturnStatement[14005-14035]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[14047-14059]:ReturnStatement[14047-14059]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[14129-14135]:Modifier[14129-14135]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14136-14143]:PrimitiveType[14136-14143]"
  }, {
    "left" : "isImmutableValue",
    "right" : "isImmutableValue",
    "info" : "SimpleName[14144-14160]:SimpleName[14144-14160]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14161-14167]:SingleVariableDeclaration[14161-14167]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14169-14856]:Block[14169-14856]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
    "info" : "SwitchStatement[14175-14833]:SwitchStatement[14175-14833]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[14204-14222]:SwitchCase[14204-14222]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[14229-14247]:SwitchCase[14229-14247]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[14254-14270]:SwitchCase[14254-14270]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[14277-14293]:SwitchCase[14277-14293]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[14300-14317]:SwitchCase[14300-14317]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[14326-14338]:ReturnStatement[14326-14338]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[14345-14360]:SwitchCase[14345-14360]"
  }, {
    "left" : "return isImmutableValue(n.getFirstChild());",
    "right" : "return isImmutableValue(n.getFirstChild());",
    "info" : "ReturnStatement[14369-14412]:ReturnStatement[14369-14412]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[14419-14435]:SwitchCase[14419-14435]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[14442-14457]:SwitchCase[14442-14457]"
  }, {
    "left" : "return isImmutableValue(n.getFirstChild());",
    "right" : "return isImmutableValue(n.getFirstChild());",
    "info" : "ReturnStatement[14466-14509]:ReturnStatement[14466-14509]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[14516-14532]:SwitchCase[14516-14532]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[14541-14569]:VariableDeclarationStatement[14541-14569]"
  }, {
    "left" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
    "right" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
    "info" : "ReturnStatement[14722-14827]:ReturnStatement[14722-14827]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[14839-14852]:ReturnStatement[14839-14852]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15762-15768]:Modifier[15762-15768]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15769-15776]:PrimitiveType[15769-15776]"
  }, {
    "left" : "isLiteralValue",
    "right" : "isLiteralValue",
    "info" : "SimpleName[15777-15791]:SimpleName[15777-15791]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[15792-15798]:SingleVariableDeclaration[15792-15798]"
  }, {
    "left" : "boolean includeFunctions",
    "right" : "boolean includeFunctions",
    "info" : "SingleVariableDeclaration[15800-15824]:SingleVariableDeclaration[15800-15824]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15826-16950]:Block[15826-16950]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
    "info" : "SwitchStatement[15832-16946]:SwitchStatement[15832-16946]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[15861-15881]:SwitchCase[15861-15881]"
  }, {
    "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "info" : "ForStatement[15890-16135]:ForStatement[15890-16135]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15980-16135]:Block[15980-16135]"
  }, {
    "left" : "if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions))",
    "right" : "if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions))",
    "info" : "IfStatement[15992-16125]:IfStatement[15992-16125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16086-16125]:Block[16086-16125]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[16100-16113]:ReturnStatement[16100-16113]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16144-16156]:ReturnStatement[16144-16156]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[16164-16182]:SwitchCase[16164-16182]"
  }, {
    "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "info" : "ForStatement[16246-16443]:ForStatement[16246-16443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16336-16443]:Block[16336-16443]"
  }, {
    "left" : "if (!isLiteralValue(child, includeFunctions))",
    "right" : "if (!isLiteralValue(child, includeFunctions))",
    "info" : "IfStatement[16348-16433]:IfStatement[16348-16433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16394-16433]:Block[16394-16433]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[16408-16421]:ReturnStatement[16408-16421]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16452-16464]:ReturnStatement[16452-16464]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[16472-16493]:SwitchCase[16472-16493]"
  }, {
    "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "info" : "ForStatement[16555-16768]:ForStatement[16555-16768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16645-16768]:Block[16645-16768]"
  }, {
    "left" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
    "right" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
    "info" : "IfStatement[16657-16758]:IfStatement[16657-16758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16719-16758]:Block[16719-16758]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[16733-16746]:ReturnStatement[16733-16746]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16777-16789]:ReturnStatement[16777-16789]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[16797-16817]:SwitchCase[16797-16817]"
  }, {
    "left" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
    "right" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
    "info" : "ReturnStatement[16826-16888]:ReturnStatement[16826-16888]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[16896-16904]:SwitchCase[16896-16904]"
  }, {
    "left" : "return isImmutableValue(n);",
    "right" : "return isImmutableValue(n);",
    "info" : "ReturnStatement[16913-16940]:ReturnStatement[16913-16940]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[17141-17147]:Modifier[17141-17147]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[17148-17155]:PrimitiveType[17148-17155]"
  }, {
    "left" : "isValidDefineValue",
    "right" : "isValidDefineValue",
    "info" : "SimpleName[17156-17174]:SimpleName[17156-17174]"
  }, {
    "left" : "Node val",
    "right" : "Node val",
    "info" : "SingleVariableDeclaration[17175-17183]:SingleVariableDeclaration[17175-17183]"
  }, {
    "left" : "Set<String> defines",
    "right" : "Set<String> defines",
    "info" : "SingleVariableDeclaration[17185-17204]:SingleVariableDeclaration[17185-17204]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17206-18444]:Block[17206-18444]"
  }, {
    "left" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
    "right" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
    "info" : "SwitchStatement[17212-18422]:SwitchStatement[17212-18422]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[17243-17261]:SwitchCase[17243-17261]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[17268-17286]:SwitchCase[17268-17286]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[17293-17309]:SwitchCase[17293-17309]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[17316-17333]:SwitchCase[17316-17333]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[17342-17354]:ReturnStatement[17342-17354]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[17431-17446]:SwitchCase[17431-17446]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[17453-17471]:SwitchCase[17453-17471]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[17478-17496]:SwitchCase[17478-17496]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[17503-17520]:SwitchCase[17503-17520]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[17527-17545]:SwitchCase[17527-17545]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[17552-17567]:SwitchCase[17552-17567]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[17574-17588]:SwitchCase[17574-17588]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[17595-17609]:SwitchCase[17595-17609]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[17616-17630]:SwitchCase[17616-17630]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[17637-17651]:SwitchCase[17637-17651]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[17658-17673]:SwitchCase[17658-17673]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[17680-17694]:SwitchCase[17680-17694]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[17701-17716]:SwitchCase[17701-17716]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[17723-17738]:SwitchCase[17723-17738]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[17745-17759]:SwitchCase[17745-17759]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[17766-17781]:SwitchCase[17766-17781]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[17788-17804]:SwitchCase[17788-17804]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[17811-17827]:SwitchCase[17811-17827]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[17834-17849]:SwitchCase[17834-17849]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[17856-17872]:SwitchCase[17856-17872]"
  }, {
    "left" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
    "right" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
    "info" : "ReturnStatement[17881-18000]:ReturnStatement[17881-18000]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[18067-18082]:SwitchCase[18067-18082]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[18089-18104]:SwitchCase[18089-18104]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[18111-18126]:SwitchCase[18111-18126]"
  }, {
    "left" : "return isValidDefineValue(val.getFirstChild(), defines);",
    "right" : "return isValidDefineValue(val.getFirstChild(), defines);",
    "info" : "ReturnStatement[18135-18191]:ReturnStatement[18135-18191]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[18268-18284]:SwitchCase[18268-18284]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[18291-18310]:SwitchCase[18291-18310]"
  }, {
    "left" : "if (val.isQualifiedName())",
    "right" : "if (val.isQualifiedName())",
    "info" : "IfStatement[18319-18416]:IfStatement[18319-18416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18346-18416]:Block[18346-18416]"
  }, {
    "left" : "return defines.contains(val.getQualifiedName());",
    "right" : "return defines.contains(val.getQualifiedName());",
    "info" : "ReturnStatement[18358-18406]:ReturnStatement[18358-18406]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18427-18440]:ReturnStatement[18427-18440]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[18550-18556]:Modifier[18550-18556]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18557-18564]:PrimitiveType[18557-18564]"
  }, {
    "left" : "isEmptyBlock",
    "right" : "isEmptyBlock",
    "info" : "SimpleName[18565-18577]:SimpleName[18565-18577]"
  }, {
    "left" : "Node block",
    "right" : "Node block",
    "info" : "SingleVariableDeclaration[18578-18588]:SingleVariableDeclaration[18578-18588]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18590-18828]:Block[18590-18828]"
  }, {
    "left" : "if (block.getType() != Token.BLOCK)",
    "right" : "if (block.getType() != Token.BLOCK)",
    "info" : "IfStatement[18596-18659]:IfStatement[18596-18659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18632-18659]:Block[18632-18659]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18640-18653]:ReturnStatement[18640-18653]"
  }, {
    "left" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
    "right" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
    "info" : "ForStatement[18665-18807]:ForStatement[18665-18807]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18730-18807]:Block[18730-18807]"
  }, {
    "left" : "if (n.getType() != Token.EMPTY)",
    "right" : "if (n.getType() != Token.EMPTY)",
    "info" : "IfStatement[18738-18801]:IfStatement[18738-18801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18770-18801]:Block[18770-18801]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18780-18793]:ReturnStatement[18780-18793]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[18812-18824]:ReturnStatement[18812-18824]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[18832-18838]:Modifier[18832-18838]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18839-18846]:PrimitiveType[18839-18846]"
  }, {
    "left" : "isSimpleOperator",
    "right" : "isSimpleOperator",
    "info" : "SimpleName[18847-18863]:SimpleName[18847-18863]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[18864-18870]:SingleVariableDeclaration[18864-18870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18872-18923]:Block[18872-18923]"
  }, {
    "left" : "return isSimpleOperatorType(n.getType());",
    "right" : "return isSimpleOperatorType(n.getType());",
    "info" : "ReturnStatement[18878-18919]:ReturnStatement[18878-18919]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[19101-19107]:Modifier[19101-19107]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[19108-19115]:PrimitiveType[19108-19115]"
  }, {
    "left" : "isSimpleOperatorType",
    "right" : "isSimpleOperatorType",
    "info" : "SimpleName[19116-19136]:SimpleName[19116-19136]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[19137-19145]:SingleVariableDeclaration[19137-19145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19147-19904]:Block[19147-19904]"
  }, {
    "left" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
    "right" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[19153-19900]:SwitchStatement[19153-19900]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[19175-19190]:SwitchCase[19175-19190]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[19197-19215]:SwitchCase[19197-19215]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[19222-19240]:SwitchCase[19222-19240]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[19247-19264]:SwitchCase[19247-19264]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[19271-19289]:SwitchCase[19271-19289]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[19296-19313]:SwitchCase[19296-19313]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[19320-19335]:SwitchCase[19320-19335]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[19342-19356]:SwitchCase[19342-19356]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[19363-19377]:SwitchCase[19363-19377]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[19384-19403]:SwitchCase[19384-19403]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[19410-19429]:SwitchCase[19410-19429]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[19436-19450]:SwitchCase[19436-19450]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[19457-19479]:SwitchCase[19457-19479]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[19486-19500]:SwitchCase[19486-19500]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[19507-19522]:SwitchCase[19507-19522]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[19529-19543]:SwitchCase[19529-19543]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[19550-19565]:SwitchCase[19550-19565]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[19572-19587]:SwitchCase[19572-19587]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[19594-19608]:SwitchCase[19594-19608]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[19615-19630]:SwitchCase[19615-19630]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[19637-19652]:SwitchCase[19637-19652]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[19659-19675]:SwitchCase[19659-19675]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[19682-19698]:SwitchCase[19682-19698]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[19705-19720]:SwitchCase[19705-19720]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[19727-19745]:SwitchCase[19727-19745]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[19752-19768]:SwitchCase[19752-19768]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[19775-19790]:SwitchCase[19775-19790]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[19797-19812]:SwitchCase[19797-19812]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[19819-19835]:SwitchCase[19819-19835]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[19844-19856]:ReturnStatement[19844-19856]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[19864-19872]:SwitchCase[19864-19872]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[19881-19894]:ReturnStatement[19881-19894]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20065-20071]:Modifier[20065-20071]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20072-20078]:Modifier[20072-20078]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[20079-20083]:SimpleType[20079-20083]"
  }, {
    "left" : "newExpr",
    "right" : "newExpr",
    "info" : "SimpleName[20084-20091]:SimpleName[20084-20091]"
  }, {
    "left" : "Node child",
    "right" : "Node child",
    "info" : "SingleVariableDeclaration[20092-20102]:SingleVariableDeclaration[20092-20102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20104-20214]:Block[20104-20214]"
  }, {
    "left" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
    "right" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
    "info" : "VariableDeclarationStatement[20110-20193]:VariableDeclarationStatement[20110-20193]"
  }, {
    "left" : "return expr;",
    "right" : "return expr;",
    "info" : "ReturnStatement[20198-20210]:ReturnStatement[20198-20210]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20388-20394]:Modifier[20388-20394]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20395-20402]:PrimitiveType[20395-20402]"
  }, {
    "left" : "mayEffectMutableState",
    "right" : "mayEffectMutableState",
    "info" : "SimpleName[20403-20424]:SimpleName[20403-20424]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[20425-20431]:SingleVariableDeclaration[20425-20431]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20433-20481]:Block[20433-20481]"
  }, {
    "left" : "return mayEffectMutableState(n, null);",
    "right" : "return mayEffectMutableState(n, null);",
    "info" : "ReturnStatement[20439-20477]:ReturnStatement[20439-20477]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20485-20491]:Modifier[20485-20491]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20492-20499]:PrimitiveType[20492-20499]"
  }, {
    "left" : "mayEffectMutableState",
    "right" : "mayEffectMutableState",
    "info" : "SimpleName[20500-20521]:SimpleName[20500-20521]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[20522-20528]:SingleVariableDeclaration[20522-20528]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[20530-20555]:SingleVariableDeclaration[20530-20555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20557-20619]:Block[20557-20619]"
  }, {
    "left" : "return checkForStateChangeHelper(n, true, compiler);",
    "right" : "return checkForStateChangeHelper(n, true, compiler);",
    "info" : "ReturnStatement[20563-20615]:ReturnStatement[20563-20615]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20708-20714]:Modifier[20708-20714]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20715-20722]:PrimitiveType[20715-20722]"
  }, {
    "left" : "mayHaveSideEffects",
    "right" : "mayHaveSideEffects",
    "info" : "SimpleName[20723-20741]:SimpleName[20723-20741]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[20742-20748]:SingleVariableDeclaration[20742-20748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20750-20795]:Block[20750-20795]"
  }, {
    "left" : "return mayHaveSideEffects(n, null);",
    "right" : "return mayHaveSideEffects(n, null);",
    "info" : "ReturnStatement[20756-20791]:ReturnStatement[20756-20791]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20799-20805]:Modifier[20799-20805]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20806-20813]:PrimitiveType[20806-20813]"
  }, {
    "left" : "mayHaveSideEffects",
    "right" : "mayHaveSideEffects",
    "info" : "SimpleName[20814-20832]:SimpleName[20814-20832]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[20833-20839]:SingleVariableDeclaration[20833-20839]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[20841-20866]:SingleVariableDeclaration[20841-20866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20868-20931]:Block[20868-20931]"
  }, {
    "left" : "return checkForStateChangeHelper(n, false, compiler);",
    "right" : "return checkForStateChangeHelper(n, false, compiler);",
    "info" : "ReturnStatement[20874-20927]:ReturnStatement[20874-20927]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21209-21216]:Modifier[21209-21216]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[21217-21223]:Modifier[21217-21223]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[21224-21231]:PrimitiveType[21224-21231]"
  }, {
    "left" : "checkForStateChangeHelper",
    "right" : "checkForStateChangeHelper",
    "info" : "SimpleName[21232-21257]:SimpleName[21232-21257]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[21265-21271]:SingleVariableDeclaration[21265-21271]"
  }, {
    "left" : "boolean checkForNewObjects",
    "right" : "boolean checkForNewObjects",
    "info" : "SingleVariableDeclaration[21273-21299]:SingleVariableDeclaration[21273-21299]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[21301-21326]:SingleVariableDeclaration[21301-21326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21328-25776]:Block[21328-25776]"
  }, {
    "left" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
    "right" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
    "info" : "SwitchStatement[21432-25578]:SwitchStatement[21432-25578]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[21520-21535]:SwitchCase[21520-21535]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[21542-21559]:SwitchCase[21542-21559]"
  }, {
    "left" : "case Token.EXPR_RESULT:",
    "right" : "case Token.EXPR_RESULT:",
    "info" : "SwitchCase[21566-21589]:SwitchCase[21566-21589]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[21596-21612]:SwitchCase[21596-21612]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[21619-21633]:SwitchCase[21619-21633]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[21640-21654]:SwitchCase[21640-21654]"
  }, {
    "left" : "case Token.LP:",
    "right" : "case Token.LP:",
    "info" : "SwitchCase[21661-21675]:SwitchCase[21661-21675]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[21682-21700]:SwitchCase[21682-21700]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[21707-21721]:SwitchCase[21707-21721]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[21728-21744]:SwitchCase[21728-21744]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[21751-21767]:SwitchCase[21751-21767]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[21774-21791]:SwitchCase[21774-21791]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[21798-21814]:SwitchCase[21798-21814]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[21821-21839]:SwitchCase[21821-21839]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[21846-21864]:SwitchCase[21846-21864]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[21871-21886]:SwitchCase[21871-21886]"
  }, {
    "left" : "case Token.EMPTY:",
    "right" : "case Token.EMPTY:",
    "info" : "SwitchCase[21893-21910]:SwitchCase[21893-21910]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21919-21925]:BreakStatement[21919-21925]"
  }, {
    "left" : "case Token.THROW:",
    "right" : "case Token.THROW:",
    "info" : "SwitchCase[21980-21997]:SwitchCase[21980-21997]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[22006-22018]:ReturnStatement[22006-22018]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[22026-22047]:SwitchCase[22026-22047]"
  }, {
    "left" : "if (checkForNewObjects)",
    "right" : "if (checkForNewObjects)",
    "info" : "IfStatement[22056-22114]:IfStatement[22056-22114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22080-22114]:Block[22080-22114]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[22092-22104]:ReturnStatement[22092-22104]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[22123-22343]:ForStatement[22123-22343]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22184-22343]:Block[22184-22343]"
  }, {
    "left" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
    "right" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
    "info" : "IfStatement[22196-22333]:IfStatement[22196-22333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22295-22333]:Block[22295-22333]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[22309-22321]:ReturnStatement[22309-22321]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22352-22365]:ReturnStatement[22352-22365]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[22373-22393]:SwitchCase[22373-22393]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[22400-22418]:SwitchCase[22400-22418]"
  }, {
    "left" : "if (checkForNewObjects)",
    "right" : "if (checkForNewObjects)",
    "info" : "IfStatement[22427-22485]:IfStatement[22427-22485]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22451-22485]:Block[22451-22485]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[22463-22475]:ReturnStatement[22463-22475]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22494-22500]:BreakStatement[22494-22500]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[22508-22523]:SwitchCase[22508-22523]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[22573-22589]:SwitchCase[22573-22589]"
  }, {
    "left" : "if (n.getFirstChild() != null)",
    "right" : "if (n.getFirstChild() != null)",
    "info" : "IfStatement[22622-22687]:IfStatement[22622-22687]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22653-22687]:Block[22653-22687]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[22665-22677]:ReturnStatement[22665-22677]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22696-22702]:BreakStatement[22696-22702]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[22710-22730]:SwitchCase[22710-22730]"
  }, {
    "left" : "return checkForNewObjects || !isFunctionExpression(n);",
    "right" : "return checkForNewObjects || !isFunctionExpression(n);",
    "info" : "ReturnStatement[22963-23017]:ReturnStatement[22963-23017]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[23025-23040]:SwitchCase[23025-23040]"
  }, {
    "left" : "if (checkForNewObjects)",
    "right" : "if (checkForNewObjects)",
    "info" : "IfStatement[23049-23107]:IfStatement[23049-23107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23073-23107]:Block[23073-23107]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[23085-23097]:ReturnStatement[23085-23097]"
  }, {
    "left" : "if (!constructorCallHasSideEffects(n))",
    "right" : "if (!constructorCallHasSideEffects(n))",
    "info" : "IfStatement[23117-23278]:IfStatement[23117-23278]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23156-23278]:Block[23156-23278]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23262-23268]:BreakStatement[23262-23268]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[23287-23299]:ReturnStatement[23287-23299]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[23307-23323]:SwitchCase[23307-23323]"
  }, {
    "left" : "if (!functionCallHasSideEffects(n, compiler))",
    "right" : "if (!functionCallHasSideEffects(n, compiler))",
    "info" : "IfStatement[23437-23602]:IfStatement[23437-23602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23483-23602]:Block[23483-23602]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23586-23592]:BreakStatement[23586-23592]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[23611-23623]:ReturnStatement[23611-23623]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[23631-23639]:SwitchCase[23631-23639]"
  }, {
    "left" : "if (isSimpleOperatorType(n.getType()))",
    "right" : "if (isSimpleOperatorType(n.getType()))",
    "info" : "IfStatement[23648-23715]:IfStatement[23648-23715]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23687-23715]:Block[23687-23715]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23699-23705]:BreakStatement[23699-23705]"
  }, {
    "left" : "if (isAssignmentOp(n))",
    "right" : "if (isAssignmentOp(n))",
    "info" : "IfStatement[23725-25550]:IfStatement[23725-25550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23748-25550]:Block[23748-25550]"
  }, {
    "left" : "Node assignTarget = n.getFirstChild();",
    "right" : "Node assignTarget = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[23760-23798]:VariableDeclarationStatement[23760-23798]"
  }, {
    "left" : "if (isName(assignTarget))",
    "right" : "if (isName(assignTarget))",
    "info" : "IfStatement[23809-23873]:IfStatement[23809-23873]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23835-23873]:Block[23835-23873]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[23849-23861]:ReturnStatement[23849-23861]"
  }, {
    "left" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
    "right" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
    "info" : "IfStatement[24106-24353]:IfStatement[24106-24353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24315-24353]:Block[24315-24353]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[24329-24341]:ReturnStatement[24329-24341]"
  }, {
    "left" : "if (isGet(assignTarget))",
    "right" : "if (isGet(assignTarget))",
    "info" : "IfStatement[24365-25540]:IfStatement[24365-25540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24390-25268]:Block[24390-25268]"
  }, {
    "left" : "Node current = assignTarget.getFirstChild();",
    "right" : "Node current = assignTarget.getFirstChild();",
    "info" : "VariableDeclarationStatement[24690-24734]:VariableDeclarationStatement[24690-24734]"
  }, {
    "left" : "if (evaluatesToLocalValue(current))",
    "right" : "if (evaluatesToLocalValue(current))",
    "info" : "IfStatement[24747-24826]:IfStatement[24747-24826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24783-24826]:Block[24783-24826]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[24799-24812]:ReturnStatement[24799-24812]"
  }, {
    "left" : "while (isGet(current))",
    "right" : "while (isGet(current))",
    "info" : "WhileStatement[25117-25204]:WhileStatement[25117-25204]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25140-25204]:Block[25140-25204]"
  }, {
    "left" : "current = current.getFirstChild();",
    "right" : "current = current.getFirstChild();",
    "info" : "ExpressionStatement[25156-25190]:ExpressionStatement[25156-25190]"
  }, {
    "left" : "return !isLiteralValue(current, true);",
    "right" : "return !isLiteralValue(current, true);",
    "info" : "ReturnStatement[25218-25256]:ReturnStatement[25218-25256]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25274-25540]:Block[25274-25540]"
  }, {
    "left" : "return !isLiteralValue(assignTarget, true);",
    "right" : "return !isLiteralValue(assignTarget, true);",
    "info" : "ReturnStatement[25485-25528]:ReturnStatement[25485-25528]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[25560-25572]:ReturnStatement[25560-25572]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[25584-25753]:ForStatement[25584-25753]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25645-25753]:Block[25645-25753]"
  }, {
    "left" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
    "right" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
    "info" : "IfStatement[25653-25747]:IfStatement[25653-25747]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25717-25747]:Block[25717-25747]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[25727-25739]:ReturnStatement[25727-25739]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25759-25772]:ReturnStatement[25759-25772]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25894-25900]:Modifier[25894-25900]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25901-25908]:PrimitiveType[25901-25908]"
  }, {
    "left" : "constructorCallHasSideEffects",
    "right" : "constructorCallHasSideEffects",
    "info" : "SimpleName[25909-25938]:SimpleName[25909-25938]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[25939-25952]:SingleVariableDeclaration[25939-25952]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25954-26017]:Block[25954-26017]"
  }, {
    "left" : "return constructorCallHasSideEffects(callNode, null);",
    "right" : "return constructorCallHasSideEffects(callNode, null);",
    "info" : "ReturnStatement[25960-26013]:ReturnStatement[25960-26013]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[26021-26027]:Modifier[26021-26027]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[26028-26035]:PrimitiveType[26028-26035]"
  }, {
    "left" : "constructorCallHasSideEffects",
    "right" : "constructorCallHasSideEffects",
    "info" : "SimpleName[26036-26065]:SimpleName[26036-26065]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[26073-26086]:SingleVariableDeclaration[26073-26086]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[26088-26113]:SingleVariableDeclaration[26088-26113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26115-26559]:Block[26115-26559]"
  }, {
    "left" : "if (callNode.getType() != Token.NEW)",
    "right" : "if (callNode.getType() != Token.NEW)",
    "info" : "IfStatement[26121-26275]:IfStatement[26121-26275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26158-26275]:Block[26158-26275]"
  }, {
    "left" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
    "right" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
    "info" : "ThrowStatement[26166-26269]:ThrowStatement[26166-26269]"
  }, {
    "left" : "if (callNode.isNoSideEffectsCall())",
    "right" : "if (callNode.isNoSideEffectsCall())",
    "info" : "IfStatement[26281-26344]:IfStatement[26281-26344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26317-26344]:Block[26317-26344]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26325-26338]:ReturnStatement[26325-26338]"
  }, {
    "left" : "Node nameNode = callNode.getFirstChild();",
    "right" : "Node nameNode = callNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[26350-26391]:VariableDeclarationStatement[26350-26391]"
  }, {
    "left" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
    "right" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
    "info" : "IfStatement[26396-26537]:IfStatement[26396-26537]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26510-26537]:Block[26510-26537]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26518-26531]:ReturnStatement[26518-26531]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[26543-26555]:ReturnStatement[26543-26555]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27403-27409]:Modifier[27403-27409]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27410-27417]:PrimitiveType[27410-27417]"
  }, {
    "left" : "functionCallHasSideEffects",
    "right" : "functionCallHasSideEffects",
    "info" : "SimpleName[27418-27444]:SimpleName[27418-27444]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[27445-27458]:SingleVariableDeclaration[27445-27458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27460-27520]:Block[27460-27520]"
  }, {
    "left" : "return functionCallHasSideEffects(callNode, null);",
    "right" : "return functionCallHasSideEffects(callNode, null);",
    "info" : "ReturnStatement[27466-27516]:ReturnStatement[27466-27516]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27769-27775]:Modifier[27769-27775]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27776-27783]:PrimitiveType[27776-27783]"
  }, {
    "left" : "functionCallHasSideEffects",
    "right" : "functionCallHasSideEffects",
    "info" : "SimpleName[27784-27810]:SimpleName[27784-27810]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[27818-27831]:SingleVariableDeclaration[27818-27831]"
  }, {
    "left" : "@Nullable AbstractCompiler compiler",
    "right" : "@Nullable AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[27833-27868]:SingleVariableDeclaration[27833-27868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27870-29472]:Block[27870-29689]"
  }, {
    "left" : "if (callNode.getType() != Token.CALL)",
    "right" : "if (callNode.getType() != Token.CALL)",
    "info" : "IfStatement[27876-28032]:IfStatement[27876-28032]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27914-28032]:Block[27914-28032]"
  }, {
    "left" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
    "right" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
    "info" : "ThrowStatement[27922-28026]:ThrowStatement[27922-28026]"
  }, {
    "left" : "if (callNode.isNoSideEffectsCall())",
    "right" : "if (callNode.isNoSideEffectsCall())",
    "info" : "IfStatement[28038-28101]:IfStatement[28038-28101]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28074-28101]:Block[28074-28101]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28082-28095]:ReturnStatement[28082-28095]"
  }, {
    "left" : "Node nameNode = callNode.getFirstChild();",
    "right" : "Node nameNode = callNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[28107-28148]:VariableDeclarationStatement[28107-28148]"
  }, {
    "left" : "if (nameNode.getType() == Token.NAME)",
    "right" : "if (nameNode.getType() == Token.NAME)",
    "info" : "IfStatement[28202-29450]:IfStatement[28202-29667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28240-28385]:Block[28240-28385]"
  }, {
    "left" : "String name = nameNode.getString();",
    "right" : "String name = nameNode.getString();",
    "info" : "VariableDeclarationStatement[28248-28283]:VariableDeclarationStatement[28248-28283]"
  }, {
    "left" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
    "right" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
    "info" : "IfStatement[28290-28379]:IfStatement[28290-28379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28348-28379]:Block[28348-28379]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28358-28371]:ReturnStatement[28358-28371]"
  }, {
    "left" : "if (nameNode.getType() == Token.GETPROP)",
    "right" : "if (nameNode.getType() == Token.GETPROP)",
    "info" : "IfStatement[28391-29450]:IfStatement[28391-29667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28432-29450]:Block[28432-29667]"
  }, {
    "left" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
    "right" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
    "info" : "IfStatement[28440-28610]:IfStatement[28440-28610]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28579-28610]:Block[28579-28610]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28589-28602]:ReturnStatement[28589-28602]"
  }, {
    "left" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
    "right" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
    "info" : "IfStatement[28618-28749]:IfStatement[28618-28749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28718-28749]:Block[28718-28749]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28728-28741]:ReturnStatement[28728-28741]"
  }, {
    "left" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
    "right" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
    "info" : "IfStatement[28823-29444]:IfStatement[29040-29661]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28886-29444]:Block[29103-29661]"
  }, {
    "left" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
    "right" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
    "info" : "IfStatement[28896-29436]:IfStatement[29113-29653]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29028-29063]:Block[29245-29280]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[29040-29053]:ReturnStatement[29257-29270]"
  }, {
    "left" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
    "right" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
    "info" : "IfStatement[29069-29436]:IfStatement[29286-29653]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29225-29436]:Block[29442-29653]"
  }, {
    "left" : "Node param = nameNode.getNext();",
    "right" : "Node param = nameNode.getNext();",
    "info" : "VariableDeclarationStatement[29237-29269]:VariableDeclarationStatement[29454-29486]"
  }, {
    "left" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
    "right" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
    "info" : "IfStatement[29280-29426]:IfStatement[29497-29643]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[29413-29426]:ReturnStatement[29630-29643]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[29456-29468]:ReturnStatement[29673-29685]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[29538-29544]:Modifier[29755-29761]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29545-29552]:PrimitiveType[29762-29769]"
  }, {
    "left" : "callHasLocalResult",
    "right" : "callHasLocalResult",
    "info" : "SimpleName[29553-29571]:SimpleName[29770-29788]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[29572-29578]:SingleVariableDeclaration[29789-29795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29580-29709]:Block[29797-29926]"
  }, {
    "left" : "Preconditions.checkState(n.getType() == Token.CALL);",
    "right" : "Preconditions.checkState(n.getType() == Token.CALL);",
    "info" : "ExpressionStatement[29586-29638]:ExpressionStatement[29803-29855]"
  }, {
    "left" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
    "right" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
    "info" : "ReturnStatement[29643-29705]:ReturnStatement[29860-29922]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[29774-29780]:Modifier[29991-29997]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29781-29788]:PrimitiveType[29998-30005]"
  }, {
    "left" : "newHasLocalResult",
    "right" : "newHasLocalResult",
    "info" : "SimpleName[29789-29806]:SimpleName[30006-30023]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[29807-29813]:SingleVariableDeclaration[30024-30030]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29815-29915]:Block[30032-30132]"
  }, {
    "left" : "Preconditions.checkState(n.getType() == Token.NEW);",
    "right" : "Preconditions.checkState(n.getType() == Token.NEW);",
    "info" : "ExpressionStatement[29821-29872]:ExpressionStatement[30038-30089]"
  }, {
    "left" : "return n.isOnlyModifiesThisCall();",
    "right" : "return n.isOnlyModifiesThisCall();",
    "info" : "ReturnStatement[29877-29911]:ReturnStatement[30094-30128]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30188-30194]:Modifier[30405-30411]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[30195-30202]:PrimitiveType[30412-30419]"
  }, {
    "left" : "nodeTypeMayHaveSideEffects",
    "right" : "nodeTypeMayHaveSideEffects",
    "info" : "SimpleName[30203-30229]:SimpleName[30420-30446]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[30230-30236]:SingleVariableDeclaration[30447-30453]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30238-30291]:Block[30455-30508]"
  }, {
    "left" : "return nodeTypeMayHaveSideEffects(n, null);",
    "right" : "return nodeTypeMayHaveSideEffects(n, null);",
    "info" : "ReturnStatement[30244-30287]:ReturnStatement[30461-30504]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30295-30301]:Modifier[30512-30518]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[30302-30309]:PrimitiveType[30519-30526]"
  }, {
    "left" : "nodeTypeMayHaveSideEffects",
    "right" : "nodeTypeMayHaveSideEffects",
    "info" : "SimpleName[30310-30336]:SimpleName[30527-30553]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[30337-30343]:SingleVariableDeclaration[30554-30560]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[30345-30370]:SingleVariableDeclaration[30562-30587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30372-30883]:Block[30589-31100]"
  }, {
    "left" : "if (isAssignmentOp(n))",
    "right" : "if (isAssignmentOp(n))",
    "info" : "IfStatement[30378-30427]:IfStatement[30595-30644]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30401-30427]:Block[30618-30644]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[30409-30421]:ReturnStatement[30626-30638]"
  }, {
    "left" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
    "right" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[30433-30879]:SwitchStatement[30650-31096]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[30461-30480]:SwitchCase[30678-30697]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[30487-30502]:SwitchCase[30704-30719]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[30509-30524]:SwitchCase[30726-30741]"
  }, {
    "left" : "case Token.THROW:",
    "right" : "case Token.THROW:",
    "info" : "SwitchCase[30531-30548]:SwitchCase[30748-30765]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[30557-30569]:ReturnStatement[30774-30786]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[30576-30592]:SwitchCase[30793-30809]"
  }, {
    "left" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
    "right" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
    "info" : "ReturnStatement[30601-30657]:ReturnStatement[30818-30874]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[30664-30679]:SwitchCase[30881-30896]"
  }, {
    "left" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
    "right" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
    "info" : "ReturnStatement[30688-30747]:ReturnStatement[30905-30964]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[30754-30770]:SwitchCase[30971-30987]"
  }, {
    "left" : "return n.hasChildren();",
    "right" : "return n.hasChildren();",
    "info" : "ReturnStatement[30813-30836]:ReturnStatement[31030-31053]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[30843-30851]:SwitchCase[31060-31068]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[30860-30873]:ReturnStatement[31077-31090]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30987-30993]:Modifier[31204-31210]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[30994-31001]:PrimitiveType[31211-31218]"
  }, {
    "left" : "canBeSideEffected",
    "right" : "canBeSideEffected",
    "info" : "SimpleName[31002-31019]:SimpleName[31219-31236]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[31020-31026]:SingleVariableDeclaration[31237-31243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31028-31127]:Block[31245-31344]"
  }, {
    "left" : "Set<String> emptySet = Collections.emptySet();",
    "right" : "Set<String> emptySet = Collections.emptySet();",
    "info" : "VariableDeclarationStatement[31034-31080]:VariableDeclarationStatement[31251-31297]"
  }, {
    "left" : "return canBeSideEffected(n, emptySet);",
    "right" : "return canBeSideEffected(n, emptySet);",
    "info" : "ReturnStatement[31085-31123]:ReturnStatement[31302-31340]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[31378-31384]:Modifier[31595-31601]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[31385-31392]:PrimitiveType[31602-31609]"
  }, {
    "left" : "canBeSideEffected",
    "right" : "canBeSideEffected",
    "info" : "SimpleName[31393-31410]:SimpleName[31610-31627]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[31411-31417]:SingleVariableDeclaration[31628-31634]"
  }, {
    "left" : "Set<String> knownConstants",
    "right" : "Set<String> knownConstants",
    "info" : "SingleVariableDeclaration[31419-31445]:SingleVariableDeclaration[31636-31662]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31447-32466]:Block[31664-32683]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
    "info" : "SwitchStatement[31453-32290]:SwitchStatement[31670-32507]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[31482-31498]:SwitchCase[31699-31715]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[31505-31520]:SwitchCase[31722-31737]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[31720-31732]:ReturnStatement[31937-31949]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[31739-31755]:SwitchCase[31956-31972]"
  }, {
    "left" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
    "right" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
    "info" : "ReturnStatement[31824-31905]:ReturnStatement[32041-32122]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[31979-31998]:SwitchCase[32196-32215]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[32005-32024]:SwitchCase[32222-32241]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[32033-32045]:ReturnStatement[32250-32262]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[32053-32073]:SwitchCase[32270-32290]"
  }, {
    "left" : "Preconditions.checkState(isFunctionExpression(n));",
    "right" : "Preconditions.checkState(isFunctionExpression(n));",
    "info" : "ExpressionStatement[32212-32262]:ExpressionStatement[32429-32479]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[32271-32284]:ReturnStatement[32488-32501]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[32296-32443]:ForStatement[32513-32660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32357-32443]:Block[32574-32660]"
  }, {
    "left" : "if (canBeSideEffected(c, knownConstants))",
    "right" : "if (canBeSideEffected(c, knownConstants))",
    "info" : "IfStatement[32365-32437]:IfStatement[32582-32654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32407-32437]:Block[32624-32654]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[32417-32429]:ReturnStatement[32634-32646]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[32449-32462]:ReturnStatement[32666-32679]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[32903-32909]:Modifier[33120-33126]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[32910-32913]:PrimitiveType[33127-33130]"
  }, {
    "left" : "precedence",
    "right" : "precedence",
    "info" : "SimpleName[32914-32924]:SimpleName[33131-33141]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[32925-32933]:SingleVariableDeclaration[33142-33150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32935-34919]:Block[33152-35136]"
  }, {
    "left" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.CALL:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      // Data values\n      case Token.ARRAYLIT:\n      case Token.EMPTY:  // TODO(johnlenz): remove this.\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
    "right" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.CALL:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      // Data values\n      case Token.ARRAYLIT:\n      case Token.EMPTY:  // TODO(johnlenz): remove this.\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
    "info" : "SwitchStatement[32941-34915]:SwitchStatement[33158-35132]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[32963-32980]:SwitchCase[33180-33197]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[32982-32991]:ReturnStatement[33199-33208]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[32998-33022]:SwitchCase[33215-33239]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[33029-33054]:SwitchCase[33246-33271]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[33061-33086]:SwitchCase[33278-33303]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[33093-33115]:SwitchCase[33310-33332]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[33122-33144]:SwitchCase[33339-33361]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[33151-33174]:SwitchCase[33368-33391]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[33181-33203]:SwitchCase[33398-33420]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[33210-33232]:SwitchCase[33427-33449]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[33239-33261]:SwitchCase[33456-33478]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[33268-33290]:SwitchCase[33485-33507]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[33297-33319]:SwitchCase[33514-33536]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[33326-33344]:SwitchCase[33543-33561]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[33345-33354]:ReturnStatement[33562-33571]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[33361-33377]:SwitchCase[33578-33594]"
  }, {
    "left" : "return 2;",
    "right" : "return 2;",
    "info" : "ReturnStatement[33380-33389]:ReturnStatement[33597-33606]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[33412-33426]:SwitchCase[33629-33643]"
  }, {
    "left" : "return 3;",
    "right" : "return 3;",
    "info" : "ReturnStatement[33431-33440]:ReturnStatement[33648-33657]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[33447-33462]:SwitchCase[33664-33679]"
  }, {
    "left" : "return 4;",
    "right" : "return 4;",
    "info" : "ReturnStatement[33466-33475]:ReturnStatement[33683-33692]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[33482-33499]:SwitchCase[33699-33716]"
  }, {
    "left" : "return 5;",
    "right" : "return 5;",
    "info" : "ReturnStatement[33501-33510]:ReturnStatement[33718-33727]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[33517-33535]:SwitchCase[33734-33752]"
  }, {
    "left" : "return 6;",
    "right" : "return 6;",
    "info" : "ReturnStatement[33536-33545]:ReturnStatement[33753-33762]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[33552-33570]:SwitchCase[33769-33787]"
  }, {
    "left" : "return 7;",
    "right" : "return 7;",
    "info" : "ReturnStatement[33571-33580]:ReturnStatement[33788-33797]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[33587-33601]:SwitchCase[33804-33818]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[33608-33622]:SwitchCase[33825-33839]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[33629-33645]:SwitchCase[33846-33862]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[33652-33668]:SwitchCase[33869-33885]"
  }, {
    "left" : "return 8;",
    "right" : "return 8;",
    "info" : "ReturnStatement[33671-33680]:ReturnStatement[33888-33897]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[33687-33701]:SwitchCase[33904-33918]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[33708-33722]:SwitchCase[33925-33939]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[33729-33743]:SwitchCase[33946-33960]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[33750-33764]:SwitchCase[33967-33981]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[33771-33793]:SwitchCase[33988-34010]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[33800-33814]:SwitchCase[34017-34031]"
  }, {
    "left" : "return 9;",
    "right" : "return 9;",
    "info" : "ReturnStatement[33819-33828]:ReturnStatement[34036-34045]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[33835-33850]:SwitchCase[34052-34067]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[33857-33872]:SwitchCase[34074-34089]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[33879-33895]:SwitchCase[34096-34112]"
  }, {
    "left" : "return 10;",
    "right" : "return 10;",
    "info" : "ReturnStatement[33898-33908]:ReturnStatement[34115-34125]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[33915-33930]:SwitchCase[34132-34147]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[33937-33952]:SwitchCase[34154-34169]"
  }, {
    "left" : "return 11;",
    "right" : "return 11;",
    "info" : "ReturnStatement[33956-33966]:ReturnStatement[34173-34183]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[33973-33988]:SwitchCase[34190-34205]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[33995-34010]:SwitchCase[34212-34227]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[34017-34032]:SwitchCase[34234-34249]"
  }, {
    "left" : "return 12;",
    "right" : "return 12;",
    "info" : "ReturnStatement[34036-34046]:ReturnStatement[34253-34263]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[34053-34068]:SwitchCase[34270-34285]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[34075-34090]:SwitchCase[34292-34307]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[34097-34112]:SwitchCase[34314-34329]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[34119-34138]:SwitchCase[34336-34355]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[34145-34163]:SwitchCase[34362-34380]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[34170-34186]:SwitchCase[34387-34403]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[34193-34208]:SwitchCase[34410-34425]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[34215-34233]:SwitchCase[34432-34450]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[34240-34255]:SwitchCase[34457-34472]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[34262-34277]:SwitchCase[34479-34494]"
  }, {
    "left" : "return 13;",
    "right" : "return 13;",
    "info" : "ReturnStatement[34281-34291]:ReturnStatement[34498-34508]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[34299-34315]:SwitchCase[34516-34532]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[34322-34341]:SwitchCase[34539-34558]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[34348-34367]:SwitchCase[34565-34584]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[34395-34415]:SwitchCase[34612-34632]"
  }, {
    "left" : "case Token.EMPTY:",
    "right" : "case Token.EMPTY:",
    "info" : "SwitchCase[34422-34439]:SwitchCase[34639-34656]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[34479-34496]:SwitchCase[34696-34713]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[34503-34523]:SwitchCase[34720-34740]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[34530-34546]:SwitchCase[34747-34763]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[34553-34569]:SwitchCase[34770-34786]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[34576-34594]:SwitchCase[34793-34811]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[34601-34622]:SwitchCase[34818-34839]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[34629-34647]:SwitchCase[34846-34864]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[34654-34672]:SwitchCase[34871-34889]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[34679-34695]:SwitchCase[34896-34912]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[34702-34718]:SwitchCase[34919-34935]"
  }, {
    "left" : "return 15;",
    "right" : "return 15;",
    "info" : "ReturnStatement[34727-34737]:ReturnStatement[34944-34954]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[34745-34753]:SwitchCase[34962-34970]"
  }, {
    "left" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
    "right" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
    "info" : "ThrowStatement[34754-34909]:ThrowStatement[34971-35126]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35035-35041]:Modifier[35252-35258]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[35042-35049]:PrimitiveType[35259-35266]"
  }, {
    "left" : "valueCheck",
    "right" : "valueCheck",
    "info" : "SimpleName[35050-35060]:SimpleName[35267-35277]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[35061-35067]:SingleVariableDeclaration[35278-35284]"
  }, {
    "left" : "Predicate<Node> p",
    "right" : "Predicate<Node> p",
    "info" : "SingleVariableDeclaration[35069-35086]:SingleVariableDeclaration[35286-35303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35088-35533]:Block[35305-35750]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return valueCheck(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);\n      case Token.HOOK:\n        return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return valueCheck(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);\n      case Token.HOOK:\n        return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
    "info" : "SwitchStatement[35094-35529]:SwitchStatement[35311-35746]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[35123-35141]:SwitchCase[35340-35358]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[35148-35165]:SwitchCase[35365-35382]"
  }, {
    "left" : "return valueCheck(n.getLastChild(), p);",
    "right" : "return valueCheck(n.getLastChild(), p);",
    "info" : "ReturnStatement[35174-35213]:ReturnStatement[35391-35430]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[35220-35235]:SwitchCase[35437-35452]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[35242-35256]:SwitchCase[35459-35473]"
  }, {
    "left" : "return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);",
    "right" : "return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);",
    "info" : "ReturnStatement[35265-35352]:ReturnStatement[35482-35569]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[35359-35375]:SwitchCase[35576-35592]"
  }, {
    "left" : "return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);",
    "right" : "return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);",
    "info" : "ReturnStatement[35384-35481]:ReturnStatement[35601-35698]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[35488-35496]:SwitchCase[35705-35713]"
  }, {
    "left" : "return p.apply(n);",
    "right" : "return p.apply(n);",
    "info" : "ReturnStatement[35505-35523]:ReturnStatement[35722-35740]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35537-35543]:Modifier[35754-35760]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[35544-35549]:TYPE_DECLARATION_KIND[35761-35766]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35607-35613]:Modifier[35824-35830]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[35614-35621]:PrimitiveType[35831-35838]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[35622-35627]:SimpleName[35839-35844]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[35628-35634]:SingleVariableDeclaration[35845-35851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35636-35682]:Block[35853-35899]"
  }, {
    "left" : "return isNumericResultHelper(n);",
    "right" : "return isNumericResultHelper(n);",
    "info" : "ReturnStatement[35644-35676]:ReturnStatement[35861-35893]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35877-35883]:Modifier[36094-36100]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[35884-35891]:PrimitiveType[36101-36108]"
  }, {
    "left" : "isNumericResult",
    "right" : "isNumericResult",
    "info" : "SimpleName[35892-35907]:SimpleName[36109-36124]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[35908-35914]:SingleVariableDeclaration[36125-36131]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35916-35974]:Block[36133-36191]"
  }, {
    "left" : "return valueCheck(n, NUMBERIC_RESULT_PREDICATE);",
    "right" : "return valueCheck(n, NUMBERIC_RESULT_PREDICATE);",
    "info" : "ReturnStatement[35922-35970]:ReturnStatement[36139-36187]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35978-35984]:Modifier[36195-36201]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[35985-35992]:PrimitiveType[36202-36209]"
  }, {
    "left" : "isNumericResultHelper",
    "right" : "isNumericResultHelper",
    "info" : "SimpleName[35993-36014]:SimpleName[36210-36231]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[36015-36021]:SingleVariableDeclaration[36232-36238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36023-36823]:Block[36240-37040]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.ADD:\n        return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.INC:\n      case Token.DEC:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NUMBER:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"NaN\")) {\n          return true;\n        }\n        if (name.equals(\"Infinity\")) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.ADD:\n        return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.INC:\n      case Token.DEC:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NUMBER:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"NaN\")) {\n          return true;\n        }\n        if (name.equals(\"Infinity\")) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[36029-36819]:SwitchStatement[36246-37036]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[36058-36073]:SwitchCase[36275-36290]"
  }, {
    "left" : "return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());",
    "right" : "return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());",
    "info" : "ReturnStatement[36082-36167]:ReturnStatement[36299-36384]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[36174-36192]:SwitchCase[36391-36409]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[36199-36216]:SwitchCase[36416-36433]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[36223-36241]:SwitchCase[36440-36458]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[36248-36266]:SwitchCase[36465-36483]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[36273-36288]:SwitchCase[36490-36505]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[36295-36310]:SwitchCase[36512-36527]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[36317-36333]:SwitchCase[36534-36550]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[36340-36355]:SwitchCase[36557-36572]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[36362-36377]:SwitchCase[36579-36594]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[36384-36399]:SwitchCase[36601-36616]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[36406-36421]:SwitchCase[36623-36638]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[36428-36443]:SwitchCase[36645-36660]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[36450-36465]:SwitchCase[36667-36682]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[36472-36487]:SwitchCase[36689-36704]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[36494-36509]:SwitchCase[36711-36726]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[36516-36534]:SwitchCase[36733-36751]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[36543-36555]:ReturnStatement[36760-36772]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[36562-36578]:SwitchCase[36779-36795]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[36587-36615]:VariableDeclarationStatement[36804-36832]"
  }, {
    "left" : "if (name.equals(\"NaN\"))",
    "right" : "if (name.equals(\"NaN\"))",
    "info" : "IfStatement[36624-36682]:IfStatement[36841-36899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36648-36682]:Block[36865-36899]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[36660-36672]:ReturnStatement[36877-36889]"
  }, {
    "left" : "if (name.equals(\"Infinity\"))",
    "right" : "if (name.equals(\"Infinity\"))",
    "info" : "IfStatement[36691-36754]:IfStatement[36908-36971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36720-36754]:Block[36937-36971]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[36732-36744]:ReturnStatement[36949-36961]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[36763-36776]:ReturnStatement[36980-36993]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[36783-36791]:SwitchCase[37000-37008]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[36800-36813]:ReturnStatement[37017-37030]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[36827-36833]:Modifier[37044-37050]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[36834-36839]:TYPE_DECLARATION_KIND[37051-37056]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36896-36902]:Modifier[37113-37119]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[36903-36910]:PrimitiveType[37120-37127]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[36911-36916]:SimpleName[37128-37133]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[36917-36923]:SingleVariableDeclaration[37134-37140]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36925-36971]:Block[37142-37188]"
  }, {
    "left" : "return isBooleanResultHelper(n);",
    "right" : "return isBooleanResultHelper(n);",
    "info" : "ReturnStatement[36933-36965]:ReturnStatement[37150-37182]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37164-37170]:Modifier[37381-37387]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[37171-37178]:PrimitiveType[37388-37395]"
  }, {
    "left" : "isBooleanResult",
    "right" : "isBooleanResult",
    "info" : "SimpleName[37179-37194]:SimpleName[37396-37411]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[37195-37201]:SingleVariableDeclaration[37412-37418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37203-37260]:Block[37420-37477]"
  }, {
    "left" : "return valueCheck(n, BOOLEAN_RESULT_PREDICATE);",
    "right" : "return valueCheck(n, BOOLEAN_RESULT_PREDICATE);",
    "info" : "ReturnStatement[37209-37256]:ReturnStatement[37426-37473]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37264-37270]:Modifier[37481-37487]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[37271-37278]:PrimitiveType[37488-37495]"
  }, {
    "left" : "isBooleanResultHelper",
    "right" : "isBooleanResultHelper",
    "info" : "SimpleName[37279-37300]:SimpleName[37496-37517]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[37301-37307]:SingleVariableDeclaration[37518-37524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37309-37844]:Block[37526-38061]"
  }, {
    "left" : "switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n      case Token.DELPROP:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n      case Token.DELPROP:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[37315-37840]:SwitchStatement[37532-38057]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[37364-37380]:SwitchCase[37581-37597]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[37387-37404]:SwitchCase[37604-37621]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[37432-37446]:SwitchCase[37649-37663]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[37453-37467]:SwitchCase[37670-37684]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[37474-37490]:SwitchCase[37691-37707]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[37497-37513]:SwitchCase[37714-37730]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[37520-37534]:SwitchCase[37737-37751]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[37541-37555]:SwitchCase[37758-37772]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[37562-37576]:SwitchCase[37779-37793]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[37583-37597]:SwitchCase[37800-37814]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[37622-37636]:SwitchCase[37839-37853]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[37643-37665]:SwitchCase[37860-37882]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[37691-37706]:SwitchCase[37908-37923]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[37757-37776]:SwitchCase[37974-37993]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[37785-37797]:ReturnStatement[38002-38014]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[37804-37812]:SwitchCase[38021-38029]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[37821-37834]:ReturnStatement[38038-38051]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37848-37854]:Modifier[38065-38071]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[37855-37862]:PrimitiveType[38072-38079]"
  }, {
    "left" : "isUndefined",
    "right" : "isUndefined",
    "info" : "SimpleName[37863-37874]:SimpleName[38080-38091]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[37875-37881]:SingleVariableDeclaration[38092-38098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37883-38056]:Block[38100-38273]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }",
    "right" : "switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }",
    "info" : "SwitchStatement[37889-38034]:SwitchStatement[38106-38251]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[37918-37934]:SwitchCase[38135-38151]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[37943-37955]:ReturnStatement[38160-38172]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[37962-37978]:SwitchCase[38179-38195]"
  }, {
    "left" : "return n.getString().equals(\"undefined\");",
    "right" : "return n.getString().equals(\"undefined\");",
    "info" : "ReturnStatement[37987-38028]:ReturnStatement[38204-38245]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[38039-38052]:ReturnStatement[38256-38269]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38060-38066]:Modifier[38277-38283]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38067-38074]:PrimitiveType[38284-38291]"
  }, {
    "left" : "isNull",
    "right" : "isNull",
    "info" : "SimpleName[38075-38081]:SimpleName[38292-38298]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38082-38088]:SingleVariableDeclaration[38299-38305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38090-38133]:Block[38307-38350]"
  }, {
    "left" : "return n.getType() == Token.NULL;",
    "right" : "return n.getType() == Token.NULL;",
    "info" : "ReturnStatement[38096-38129]:ReturnStatement[38313-38346]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38137-38143]:Modifier[38354-38360]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38144-38151]:PrimitiveType[38361-38368]"
  }, {
    "left" : "isNullOrUndefined",
    "right" : "isNullOrUndefined",
    "info" : "SimpleName[38152-38169]:SimpleName[38369-38386]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38170-38176]:SingleVariableDeclaration[38387-38393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38178-38223]:Block[38395-38440]"
  }, {
    "left" : "return isNull(n) || isUndefined(n);",
    "right" : "return isNull(n) || isUndefined(n);",
    "info" : "ReturnStatement[38184-38219]:ReturnStatement[38401-38436]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38227-38233]:Modifier[38444-38450]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[38234-38239]:TYPE_DECLARATION_KIND[38451-38456]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38300-38306]:Modifier[38517-38523]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38307-38314]:PrimitiveType[38524-38531]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[38315-38320]:SimpleName[38532-38537]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38321-38327]:SingleVariableDeclaration[38538-38544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38329-38371]:Block[38546-38588]"
  }, {
    "left" : "return mayBeStringHelper(n);",
    "right" : "return mayBeStringHelper(n);",
    "info" : "ReturnStatement[38337-38365]:ReturnStatement[38554-38582]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38556-38562]:Modifier[38773-38779]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38563-38570]:PrimitiveType[38780-38787]"
  }, {
    "left" : "mayBeString",
    "right" : "mayBeString",
    "info" : "SimpleName[38571-38582]:SimpleName[38788-38799]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38583-38589]:SingleVariableDeclaration[38800-38806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38591-38629]:Block[38808-38846]"
  }, {
    "left" : "return mayBeString(n, true);",
    "right" : "return mayBeString(n, true);",
    "info" : "ReturnStatement[38597-38625]:ReturnStatement[38814-38842]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38633-38639]:Modifier[38850-38856]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38640-38647]:PrimitiveType[38857-38864]"
  }, {
    "left" : "mayBeString",
    "right" : "mayBeString",
    "info" : "SimpleName[38648-38659]:SimpleName[38865-38876]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38660-38666]:SingleVariableDeclaration[38877-38883]"
  }, {
    "left" : "boolean recurse",
    "right" : "boolean recurse",
    "info" : "SingleVariableDeclaration[38668-38683]:SingleVariableDeclaration[38885-38900]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38685-38816]:Block[38902-39033]"
  }, {
    "left" : "if (recurse)",
    "right" : "if (recurse)",
    "info" : "IfStatement[38691-38812]:IfStatement[38908-39029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38704-38764]:Block[38921-38981]"
  }, {
    "left" : "return valueCheck(n, MAY_BE_STRING_PREDICATE);",
    "right" : "return valueCheck(n, MAY_BE_STRING_PREDICATE);",
    "info" : "ReturnStatement[38712-38758]:ReturnStatement[38929-38975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38770-38812]:Block[38987-39029]"
  }, {
    "left" : "return mayBeStringHelper(n);",
    "right" : "return mayBeStringHelper(n);",
    "info" : "ReturnStatement[38778-38806]:ReturnStatement[38995-39023]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38820-38826]:Modifier[39037-39043]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38827-38834]:PrimitiveType[39044-39051]"
  }, {
    "left" : "mayBeStringHelper",
    "right" : "mayBeStringHelper",
    "info" : "SimpleName[38835-38852]:SimpleName[39052-39069]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38853-38859]:SingleVariableDeclaration[39070-39076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38861-38962]:Block[39078-39179]"
  }, {
    "left" : "return !isNumericResult(n) && !isBooleanResult(n)\n        && !isUndefined(n) && !isNull(n);",
    "right" : "return !isNumericResult(n) && !isBooleanResult(n)\n        && !isUndefined(n) && !isNull(n);",
    "info" : "ReturnStatement[38867-38958]:ReturnStatement[39084-39175]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39191-39197]:Modifier[39408-39414]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[39198-39205]:PrimitiveType[39415-39422]"
  }, {
    "left" : "isAssociative",
    "right" : "isAssociative",
    "info" : "SimpleName[39206-39219]:SimpleName[39423-39436]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[39220-39228]:SingleVariableDeclaration[39437-39445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39230-39458]:Block[39447-39675]"
  }, {
    "left" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[39236-39454]:SwitchStatement[39453-39671]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[39258-39273]:SwitchCase[39475-39490]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[39280-39295]:SwitchCase[39497-39512]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[39302-39316]:SwitchCase[39519-39533]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[39323-39340]:SwitchCase[39540-39557]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[39347-39365]:SwitchCase[39564-39582]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[39372-39390]:SwitchCase[39589-39607]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[39399-39411]:ReturnStatement[39616-39628]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[39418-39426]:SwitchCase[39635-39643]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[39435-39448]:ReturnStatement[39652-39665]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39766-39772]:Modifier[39983-39989]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[39773-39780]:PrimitiveType[39990-39997]"
  }, {
    "left" : "isCommutative",
    "right" : "isCommutative",
    "info" : "SimpleName[39781-39794]:SimpleName[39998-40011]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[39795-39803]:SingleVariableDeclaration[40012-40020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39805-39990]:Block[40022-40207]"
  }, {
    "left" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[39811-39986]:SwitchStatement[40028-40203]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[39833-39848]:SwitchCase[40050-40065]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[39855-39872]:SwitchCase[40072-40089]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[39879-39897]:SwitchCase[40096-40114]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[39904-39922]:SwitchCase[40121-40139]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[39931-39943]:ReturnStatement[40148-40160]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[39950-39958]:SwitchCase[40167-40175]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[39967-39980]:ReturnStatement[40184-40197]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39994-40000]:Modifier[40211-40217]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[40001-40008]:PrimitiveType[40218-40225]"
  }, {
    "left" : "isAssignmentOp",
    "right" : "isAssignmentOp",
    "info" : "SimpleName[40009-40023]:SimpleName[40226-40240]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[40024-40030]:SingleVariableDeclaration[40241-40247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40032-40461]:Block[40249-40678]"
  }, {
    "left" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
    "right" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
    "info" : "SwitchStatement[40038-40439]:SwitchStatement[40255-40656]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[40066-40084]:SwitchCase[40283-40301]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[40091-40115]:SwitchCase[40308-40332]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[40122-40147]:SwitchCase[40339-40364]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[40154-40179]:SwitchCase[40371-40396]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[40186-40208]:SwitchCase[40403-40425]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[40215-40237]:SwitchCase[40432-40454]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[40244-40267]:SwitchCase[40461-40484]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[40274-40296]:SwitchCase[40491-40513]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[40303-40325]:SwitchCase[40520-40542]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[40332-40354]:SwitchCase[40549-40571]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[40361-40383]:SwitchCase[40578-40600]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[40390-40412]:SwitchCase[40607-40629]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[40421-40433]:ReturnStatement[40638-40650]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[40444-40457]:ReturnStatement[40661-40674]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[40465-40471]:Modifier[40682-40688]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[40472-40475]:PrimitiveType[40689-40692]"
  }, {
    "left" : "getOpFromAssignmentOp",
    "right" : "getOpFromAssignmentOp",
    "info" : "SimpleName[40476-40497]:SimpleName[40693-40714]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[40498-40504]:SingleVariableDeclaration[40715-40721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40506-41228]:Block[40723-41445]"
  }, {
    "left" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
    "right" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
    "info" : "SwitchStatement[40512-41162]:SwitchStatement[40729-41379]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[40540-40564]:SwitchCase[40757-40781]"
  }, {
    "left" : "return Token.BITOR;",
    "right" : "return Token.BITOR;",
    "info" : "ReturnStatement[40573-40592]:ReturnStatement[40790-40809]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[40599-40624]:SwitchCase[40816-40841]"
  }, {
    "left" : "return Token.BITXOR;",
    "right" : "return Token.BITXOR;",
    "info" : "ReturnStatement[40633-40653]:ReturnStatement[40850-40870]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[40660-40685]:SwitchCase[40877-40902]"
  }, {
    "left" : "return Token.BITAND;",
    "right" : "return Token.BITAND;",
    "info" : "ReturnStatement[40694-40714]:ReturnStatement[40911-40931]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[40721-40743]:SwitchCase[40938-40960]"
  }, {
    "left" : "return Token.LSH;",
    "right" : "return Token.LSH;",
    "info" : "ReturnStatement[40752-40769]:ReturnStatement[40969-40986]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[40776-40798]:SwitchCase[40993-41015]"
  }, {
    "left" : "return Token.RSH;",
    "right" : "return Token.RSH;",
    "info" : "ReturnStatement[40807-40824]:ReturnStatement[41024-41041]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[40831-40854]:SwitchCase[41048-41071]"
  }, {
    "left" : "return Token.URSH;",
    "right" : "return Token.URSH;",
    "info" : "ReturnStatement[40863-40881]:ReturnStatement[41080-41098]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[40888-40910]:SwitchCase[41105-41127]"
  }, {
    "left" : "return Token.ADD;",
    "right" : "return Token.ADD;",
    "info" : "ReturnStatement[40919-40936]:ReturnStatement[41136-41153]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[40943-40965]:SwitchCase[41160-41182]"
  }, {
    "left" : "return Token.SUB;",
    "right" : "return Token.SUB;",
    "info" : "ReturnStatement[40974-40991]:ReturnStatement[41191-41208]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[40998-41020]:SwitchCase[41215-41237]"
  }, {
    "left" : "return Token.MUL;",
    "right" : "return Token.MUL;",
    "info" : "ReturnStatement[41029-41046]:ReturnStatement[41246-41263]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[41053-41075]:SwitchCase[41270-41292]"
  }, {
    "left" : "return Token.DIV;",
    "right" : "return Token.DIV;",
    "info" : "ReturnStatement[41084-41101]:ReturnStatement[41301-41318]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[41108-41130]:SwitchCase[41325-41347]"
  }, {
    "left" : "return Token.MOD;",
    "right" : "return Token.MOD;",
    "info" : "ReturnStatement[41139-41156]:ReturnStatement[41356-41373]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Not an assiment op\");",
    "right" : "throw new IllegalArgumentException(\"Not an assiment op\");",
    "info" : "ThrowStatement[41167-41224]:ThrowStatement[41384-41441]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41232-41238]:Modifier[41449-41455]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41239-41246]:PrimitiveType[41456-41463]"
  }, {
    "left" : "isExpressionNode",
    "right" : "isExpressionNode",
    "info" : "SimpleName[41247-41263]:SimpleName[41464-41480]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41264-41270]:SingleVariableDeclaration[41481-41487]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41272-41322]:Block[41489-41539]"
  }, {
    "left" : "return n.getType() == Token.EXPR_RESULT;",
    "right" : "return n.getType() == Token.EXPR_RESULT;",
    "info" : "ReturnStatement[41278-41318]:ReturnStatement[41495-41535]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41431-41437]:Modifier[41648-41654]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41438-41445]:PrimitiveType[41655-41662]"
  }, {
    "left" : "containsFunction",
    "right" : "containsFunction",
    "info" : "SimpleName[41446-41462]:SimpleName[41663-41679]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41463-41469]:SingleVariableDeclaration[41680-41686]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41471-41520]:Block[41688-41737]"
  }, {
    "left" : "return containsType(n, Token.FUNCTION);",
    "right" : "return containsType(n, Token.FUNCTION);",
    "info" : "ReturnStatement[41477-41516]:ReturnStatement[41694-41733]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41613-41619]:Modifier[41830-41836]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41620-41627]:PrimitiveType[41837-41844]"
  }, {
    "left" : "referencesThis",
    "right" : "referencesThis",
    "info" : "SimpleName[41628-41642]:SimpleName[41845-41859]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41643-41649]:SingleVariableDeclaration[41860-41866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41651-41777]:Block[41868-41994]"
  }, {
    "left" : "Node start = (isFunction(n)) ? n.getLastChild() : n;",
    "right" : "Node start = (isFunction(n)) ? n.getLastChild() : n;",
    "info" : "VariableDeclarationStatement[41657-41709]:VariableDeclarationStatement[41874-41926]"
  }, {
    "left" : "return containsType(start, Token.THIS, MATCH_NOT_FUNCTION);",
    "right" : "return containsType(start, Token.THIS, MATCH_NOT_FUNCTION);",
    "info" : "ReturnStatement[41714-41773]:ReturnStatement[41931-41990]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41833-41839]:Modifier[42050-42056]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41840-41847]:PrimitiveType[42057-42064]"
  }, {
    "left" : "isGet",
    "right" : "isGet",
    "info" : "SimpleName[41848-41853]:SimpleName[42065-42070]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41854-41860]:SingleVariableDeclaration[42071-42077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41862-41948]:Block[42079-42165]"
  }, {
    "left" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
    "right" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
    "info" : "ReturnStatement[41868-41944]:ReturnStatement[42085-42161]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41993-41999]:Modifier[42210-42216]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42000-42007]:PrimitiveType[42217-42224]"
  }, {
    "left" : "isGetProp",
    "right" : "isGetProp",
    "info" : "SimpleName[42008-42017]:SimpleName[42225-42234]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42018-42024]:SingleVariableDeclaration[42235-42241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42026-42072]:Block[42243-42289]"
  }, {
    "left" : "return n.getType() == Token.GETPROP;",
    "right" : "return n.getType() == Token.GETPROP;",
    "info" : "ReturnStatement[42032-42068]:ReturnStatement[42249-42285]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42114-42120]:Modifier[42331-42337]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42121-42128]:PrimitiveType[42338-42345]"
  }, {
    "left" : "isName",
    "right" : "isName",
    "info" : "SimpleName[42129-42135]:SimpleName[42346-42352]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42136-42142]:SingleVariableDeclaration[42353-42359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42144-42187]:Block[42361-42404]"
  }, {
    "left" : "return n.getType() == Token.NAME;",
    "right" : "return n.getType() == Token.NAME;",
    "info" : "ReturnStatement[42150-42183]:ReturnStatement[42367-42400]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42228-42234]:Modifier[42445-42451]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42235-42242]:PrimitiveType[42452-42459]"
  }, {
    "left" : "isNew",
    "right" : "isNew",
    "info" : "SimpleName[42243-42248]:SimpleName[42460-42465]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42249-42255]:SingleVariableDeclaration[42466-42472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42257-42299]:Block[42474-42516]"
  }, {
    "left" : "return n.getType() == Token.NEW;",
    "right" : "return n.getType() == Token.NEW;",
    "info" : "ReturnStatement[42263-42295]:ReturnStatement[42480-42512]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42340-42346]:Modifier[42557-42563]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42347-42354]:PrimitiveType[42564-42571]"
  }, {
    "left" : "isVar",
    "right" : "isVar",
    "info" : "SimpleName[42355-42360]:SimpleName[42572-42577]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42361-42367]:SingleVariableDeclaration[42578-42584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42369-42411]:Block[42586-42628]"
  }, {
    "left" : "return n.getType() == Token.VAR;",
    "right" : "return n.getType() == Token.VAR;",
    "info" : "ReturnStatement[42375-42407]:ReturnStatement[42592-42624]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42577-42583]:Modifier[42794-42800]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42584-42591]:PrimitiveType[42801-42808]"
  }, {
    "left" : "isVarDeclaration",
    "right" : "isVarDeclaration",
    "info" : "SimpleName[42592-42608]:SimpleName[42809-42825]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42609-42615]:SingleVariableDeclaration[42826-42832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42617-42824]:Block[42834-43041]"
  }, {
    "left" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
    "right" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
    "info" : "ReturnStatement[42747-42820]:ReturnStatement[42964-43037]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42967-42973]:Modifier[43184-43190]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[42974-42978]:SimpleType[43191-43195]"
  }, {
    "left" : "getAssignedValue",
    "right" : "getAssignedValue",
    "info" : "SimpleName[42979-42995]:SimpleName[43196-43212]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42996-43002]:SingleVariableDeclaration[43213-43219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43004-43270]:Block[43221-43487]"
  }, {
    "left" : "Preconditions.checkState(isName(n));",
    "right" : "Preconditions.checkState(isName(n));",
    "info" : "ExpressionStatement[43010-43046]:ExpressionStatement[43227-43263]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[43051-43079]:VariableDeclarationStatement[43268-43296]"
  }, {
    "left" : "if (isVar(parent))",
    "right" : "if (isVar(parent))",
    "info" : "IfStatement[43084-43266]:IfStatement[43301-43483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43103-43142]:Block[43320-43359]"
  }, {
    "left" : "return n.getFirstChild();",
    "right" : "return n.getFirstChild();",
    "info" : "ReturnStatement[43111-43136]:ReturnStatement[43328-43353]"
  }, {
    "left" : "if (isAssign(parent) && parent.getFirstChild() == n)",
    "right" : "if (isAssign(parent) && parent.getFirstChild() == n)",
    "info" : "IfStatement[43148-43266]:IfStatement[43365-43483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43201-43234]:Block[43418-43451]"
  }, {
    "left" : "return n.getNext();",
    "right" : "return n.getNext();",
    "info" : "ReturnStatement[43209-43228]:ReturnStatement[43426-43445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43240-43266]:Block[43457-43483]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[43248-43260]:ReturnStatement[43465-43477]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[43314-43320]:Modifier[43531-43537]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[43321-43328]:PrimitiveType[43538-43545]"
  }, {
    "left" : "isString",
    "right" : "isString",
    "info" : "SimpleName[43329-43337]:SimpleName[43546-43554]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43338-43344]:SingleVariableDeclaration[43555-43561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43346-43391]:Block[43563-43608]"
  }, {
    "left" : "return n.getType() == Token.STRING;",
    "right" : "return n.getType() == Token.STRING;",
    "info" : "ReturnStatement[43352-43387]:ReturnStatement[43569-43604]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[43582-43588]:Modifier[43799-43805]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[43589-43596]:PrimitiveType[43806-43813]"
  }, {
    "left" : "isExprAssign",
    "right" : "isExprAssign",
    "info" : "SimpleName[43597-43609]:SimpleName[43814-43826]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43610-43616]:SingleVariableDeclaration[43827-43833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43618-43723]:Block[43835-43940]"
  }, {
    "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
    "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
    "info" : "ReturnStatement[43624-43719]:ReturnStatement[43841-43936]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[43768-43774]:Modifier[43985-43991]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[43775-43782]:PrimitiveType[43992-43999]"
  }, {
    "left" : "isAssign",
    "right" : "isAssign",
    "info" : "SimpleName[43783-43791]:SimpleName[44000-44008]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43792-43798]:SingleVariableDeclaration[44009-44015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43800-43845]:Block[44017-44062]"
  }, {
    "left" : "return n.getType() == Token.ASSIGN;",
    "right" : "return n.getType() == Token.ASSIGN;",
    "info" : "ReturnStatement[43806-43841]:ReturnStatement[44023-44058]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44027-44033]:Modifier[44244-44250]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44034-44041]:PrimitiveType[44251-44258]"
  }, {
    "left" : "isExprCall",
    "right" : "isExprCall",
    "info" : "SimpleName[44042-44052]:SimpleName[44259-44269]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[44053-44059]:SingleVariableDeclaration[44270-44276]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44061-44164]:Block[44278-44381]"
  }, {
    "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
    "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
    "info" : "ReturnStatement[44067-44160]:ReturnStatement[44284-44377]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44236-44242]:Modifier[44453-44459]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44243-44250]:PrimitiveType[44460-44467]"
  }, {
    "left" : "isForIn",
    "right" : "isForIn",
    "info" : "SimpleName[44251-44258]:SimpleName[44468-44475]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[44259-44265]:SingleVariableDeclaration[44476-44482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44267-44343]:Block[44484-44560]"
  }, {
    "left" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
    "right" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
    "info" : "ReturnStatement[44273-44339]:ReturnStatement[44490-44556]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44427-44433]:Modifier[44644-44650]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44434-44441]:PrimitiveType[44651-44658]"
  }, {
    "left" : "isLoopStructure",
    "right" : "isLoopStructure",
    "info" : "SimpleName[44442-44457]:SimpleName[44659-44674]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[44458-44464]:SingleVariableDeclaration[44675-44681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44466-44629]:Block[44683-44846]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[44472-44625]:SwitchStatement[44689-44842]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[44501-44516]:SwitchCase[44718-44733]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[44523-44537]:SwitchCase[44740-44754]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[44544-44561]:SwitchCase[44761-44778]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[44570-44582]:ReturnStatement[44787-44799]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[44589-44597]:SwitchCase[44806-44814]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[44606-44619]:ReturnStatement[44823-44836]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44791-44797]:Modifier[45008-45014]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[44798-44802]:SimpleType[45015-45019]"
  }, {
    "left" : "getLoopCodeBlock",
    "right" : "getLoopCodeBlock",
    "info" : "SimpleName[44803-44819]:SimpleName[45020-45036]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[44820-44826]:SingleVariableDeclaration[45037-45043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44828-45036]:Block[45045-45253]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
    "info" : "SwitchStatement[44834-45032]:SwitchStatement[45051-45249]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[44863-44878]:SwitchCase[45080-45095]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[44885-44902]:SwitchCase[45102-45119]"
  }, {
    "left" : "return n.getLastChild();",
    "right" : "return n.getLastChild();",
    "info" : "ReturnStatement[44911-44935]:ReturnStatement[45128-45152]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[44942-44956]:SwitchCase[45159-45173]"
  }, {
    "left" : "return n.getFirstChild();",
    "right" : "return n.getFirstChild();",
    "info" : "ReturnStatement[44965-44990]:ReturnStatement[45182-45207]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[44997-45005]:SwitchCase[45214-45222]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[45014-45026]:ReturnStatement[45231-45243]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[45149-45155]:Modifier[45366-45372]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[45156-45163]:PrimitiveType[45373-45380]"
  }, {
    "left" : "isWithinLoop",
    "right" : "isWithinLoop",
    "info" : "SimpleName[45164-45176]:SimpleName[45381-45393]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[45177-45183]:SingleVariableDeclaration[45394-45400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45185-45397]:Block[45402-45614]"
  }, {
    "left" : "for (Node parent : n.getAncestors())",
    "right" : "for (Node parent : n.getAncestors())",
    "info" : "EnhancedForStatement[45191-45375]:EnhancedForStatement[45408-45592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45228-45375]:Block[45445-45592]"
  }, {
    "left" : "if (NodeUtil.isLoopStructure(parent))",
    "right" : "if (NodeUtil.isLoopStructure(parent))",
    "info" : "IfStatement[45236-45304]:IfStatement[45453-45521]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45274-45304]:Block[45491-45521]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[45284-45296]:ReturnStatement[45501-45513]"
  }, {
    "left" : "if (NodeUtil.isFunction(parent))",
    "right" : "if (NodeUtil.isFunction(parent))",
    "info" : "IfStatement[45312-45369]:IfStatement[45529-45586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45345-45369]:Block[45562-45586]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[45355-45361]:BreakStatement[45572-45578]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[45380-45393]:ReturnStatement[45597-45610]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[45491-45497]:Modifier[45708-45714]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[45498-45505]:PrimitiveType[45715-45722]"
  }, {
    "left" : "isControlStructure",
    "right" : "isControlStructure",
    "info" : "SimpleName[45506-45524]:SimpleName[45723-45741]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[45525-45531]:SingleVariableDeclaration[45742-45748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45533-45884]:Block[45750-46101]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[45539-45880]:SwitchStatement[45756-46097]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[45568-45583]:SwitchCase[45785-45800]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[45590-45604]:SwitchCase[45807-45821]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[45611-45628]:SwitchCase[45828-45845]"
  }, {
    "left" : "case Token.WITH:",
    "right" : "case Token.WITH:",
    "info" : "SwitchCase[45635-45651]:SwitchCase[45852-45868]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[45658-45672]:SwitchCase[45875-45889]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[45679-45696]:SwitchCase[45896-45913]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[45703-45718]:SwitchCase[45920-45935]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[45725-45742]:SwitchCase[45942-45959]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[45749-45767]:SwitchCase[45966-45984]"
  }, {
    "left" : "case Token.CASE:",
    "right" : "case Token.CASE:",
    "info" : "SwitchCase[45774-45790]:SwitchCase[45991-46007]"
  }, {
    "left" : "case Token.DEFAULT:",
    "right" : "case Token.DEFAULT:",
    "info" : "SwitchCase[45797-45816]:SwitchCase[46014-46033]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[45825-45837]:ReturnStatement[46042-46054]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[45844-45852]:SwitchCase[46061-46069]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[45861-45874]:ReturnStatement[46078-46091]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[45995-46001]:Modifier[46212-46218]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[46002-46009]:PrimitiveType[46219-46226]"
  }, {
    "left" : "isControlStructureCodeBlock",
    "right" : "isControlStructureCodeBlock",
    "info" : "SimpleName[46010-46037]:SimpleName[46227-46254]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[46038-46049]:SingleVariableDeclaration[46255-46266]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[46051-46057]:SingleVariableDeclaration[46268-46274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46059-46769]:Block[46276-46986]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
    "info" : "SwitchStatement[46065-46765]:SwitchStatement[46282-46982]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[46099-46114]:SwitchCase[46316-46331]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[46121-46138]:SwitchCase[46338-46355]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[46145-46162]:SwitchCase[46362-46379]"
  }, {
    "left" : "case Token.WITH:",
    "right" : "case Token.WITH:",
    "info" : "SwitchCase[46169-46185]:SwitchCase[46386-46402]"
  }, {
    "left" : "return parent.getLastChild() == n;",
    "right" : "return parent.getLastChild() == n;",
    "info" : "ReturnStatement[46194-46228]:ReturnStatement[46411-46445]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[46235-46249]:SwitchCase[46452-46466]"
  }, {
    "left" : "return parent.getFirstChild() == n;",
    "right" : "return parent.getFirstChild() == n;",
    "info" : "ReturnStatement[46258-46293]:ReturnStatement[46475-46510]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[46300-46314]:SwitchCase[46517-46531]"
  }, {
    "left" : "return parent.getFirstChild() != n;",
    "right" : "return parent.getFirstChild() != n;",
    "info" : "ReturnStatement[46323-46358]:ReturnStatement[46540-46575]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[46365-46380]:SwitchCase[46582-46597]"
  }, {
    "left" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
    "right" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
    "info" : "ReturnStatement[46389-46454]:ReturnStatement[46606-46671]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[46461-46478]:SwitchCase[46678-46695]"
  }, {
    "left" : "return parent.getLastChild() == n;",
    "right" : "return parent.getLastChild() == n;",
    "info" : "ReturnStatement[46487-46521]:ReturnStatement[46704-46738]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[46528-46546]:SwitchCase[46745-46763]"
  }, {
    "left" : "case Token.CASE:",
    "right" : "case Token.CASE:",
    "info" : "SwitchCase[46553-46569]:SwitchCase[46770-46786]"
  }, {
    "left" : "return parent.getFirstChild() != n;",
    "right" : "return parent.getFirstChild() != n;",
    "info" : "ReturnStatement[46578-46613]:ReturnStatement[46795-46830]"
  }, {
    "left" : "case Token.DEFAULT:",
    "right" : "case Token.DEFAULT:",
    "info" : "SwitchCase[46620-46639]:SwitchCase[46837-46856]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[46648-46660]:ReturnStatement[46865-46877]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[46667-46675]:SwitchCase[46884-46892]"
  }, {
    "left" : "Preconditions.checkState(isControlStructure(parent));",
    "right" : "Preconditions.checkState(isControlStructure(parent));",
    "info" : "ExpressionStatement[46684-46737]:ExpressionStatement[46901-46954]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[46746-46759]:ReturnStatement[46963-46976]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[46984-46990]:Modifier[47201-47207]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[46991-46995]:SimpleType[47208-47212]"
  }, {
    "left" : "getConditionExpression",
    "right" : "getConditionExpression",
    "info" : "SimpleName[46996-47018]:SimpleName[47213-47235]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[47019-47025]:SingleVariableDeclaration[47236-47242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47027-47573]:Block[47244-47790]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
    "info" : "SwitchStatement[47033-47494]:SwitchStatement[47250-47711]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[47062-47076]:SwitchCase[47279-47293]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[47083-47100]:SwitchCase[47300-47317]"
  }, {
    "left" : "return n.getFirstChild();",
    "right" : "return n.getFirstChild();",
    "info" : "ReturnStatement[47109-47134]:ReturnStatement[47326-47351]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[47141-47155]:SwitchCase[47358-47372]"
  }, {
    "left" : "return n.getLastChild();",
    "right" : "return n.getLastChild();",
    "info" : "ReturnStatement[47164-47188]:ReturnStatement[47381-47405]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[47195-47210]:SwitchCase[47412-47427]"
  }, {
    "left" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
    "right" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
    "info" : "SwitchStatement[47219-47366]:SwitchStatement[47436-47583]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[47258-47265]:SwitchCase[47475-47482]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[47278-47290]:ReturnStatement[47495-47507]"
  }, {
    "left" : "case 4:",
    "right" : "case 4:",
    "info" : "SwitchCase[47301-47308]:SwitchCase[47518-47525]"
  }, {
    "left" : "return n.getFirstChild().getNext();",
    "right" : "return n.getFirstChild().getNext();",
    "info" : "ReturnStatement[47321-47356]:ReturnStatement[47538-47573]"
  }, {
    "left" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
    "right" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
    "info" : "ThrowStatement[47375-47444]:ThrowStatement[47592-47661]"
  }, {
    "left" : "case Token.CASE:",
    "right" : "case Token.CASE:",
    "info" : "SwitchCase[47451-47467]:SwitchCase[47668-47684]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[47476-47488]:ReturnStatement[47693-47705]"
  }, {
    "left" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
    "right" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
    "info" : "ThrowStatement[47499-47569]:ThrowStatement[47716-47786]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[47663-47669]:Modifier[47880-47886]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[47670-47677]:PrimitiveType[47887-47894]"
  }, {
    "left" : "isStatementBlock",
    "right" : "isStatementBlock",
    "info" : "SimpleName[47678-47694]:SimpleName[47895-47911]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[47695-47701]:SingleVariableDeclaration[47912-47918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47703-47778]:Block[47920-47995]"
  }, {
    "left" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
    "right" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
    "info" : "ReturnStatement[47709-47774]:ReturnStatement[47926-47991]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[47848-47854]:Modifier[48065-48071]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[47855-47862]:PrimitiveType[48072-48079]"
  }, {
    "left" : "isStatement",
    "right" : "isStatement",
    "info" : "SimpleName[47863-47874]:SimpleName[48080-48091]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[47875-47881]:SingleVariableDeclaration[48092-48098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47883-47933]:Block[48100-48150]"
  }, {
    "left" : "return isStatementParent(n.getParent());",
    "right" : "return isStatementParent(n.getParent());",
    "info" : "ReturnStatement[47889-47929]:ReturnStatement[48106-48146]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[47937-47943]:Modifier[48154-48160]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[47944-47951]:PrimitiveType[48161-48168]"
  }, {
    "left" : "isStatementParent",
    "right" : "isStatementParent",
    "info" : "SimpleName[47952-47969]:SimpleName[48169-48186]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[47970-47981]:SingleVariableDeclaration[48187-48198]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47983-48398]:Block[48200-48615]"
  }, {
    "left" : "Preconditions.checkState(parent != null);",
    "right" : "Preconditions.checkState(parent != null);",
    "info" : "ExpressionStatement[48184-48225]:ExpressionStatement[48401-48442]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[48230-48394]:SwitchStatement[48447-48611]"
  }, {
    "left" : "case Token.SCRIPT:",
    "right" : "case Token.SCRIPT:",
    "info" : "SwitchCase[48264-48282]:SwitchCase[48481-48499]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[48289-48306]:SwitchCase[48506-48523]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[48313-48330]:SwitchCase[48530-48547]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[48339-48351]:ReturnStatement[48556-48568]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[48358-48366]:SwitchCase[48575-48583]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[48375-48388]:ReturnStatement[48592-48605]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[48459-48465]:Modifier[48676-48682]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[48466-48473]:PrimitiveType[48683-48690]"
  }, {
    "left" : "isSwitchCase",
    "right" : "isSwitchCase",
    "info" : "SimpleName[48474-48486]:SimpleName[48691-48703]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[48487-48493]:SingleVariableDeclaration[48704-48710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48495-48570]:Block[48712-48787]"
  }, {
    "left" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
    "right" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
    "info" : "ReturnStatement[48501-48566]:ReturnStatement[48718-48783]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[48739-48745]:Modifier[48956-48962]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[48746-48753]:PrimitiveType[48963-48970]"
  }, {
    "left" : "isReferenceName",
    "right" : "isReferenceName",
    "info" : "SimpleName[48754-48769]:SimpleName[48971-48986]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[48770-48776]:SingleVariableDeclaration[48987-48993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48778-48833]:Block[48995-49050]"
  }, {
    "left" : "return isName(n) && !n.getString().isEmpty();",
    "right" : "return isName(n) && !n.getString().isEmpty();",
    "info" : "ReturnStatement[48784-48829]:ReturnStatement[49001-49046]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[48888-48894]:Modifier[49105-49111]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[48895-48902]:PrimitiveType[49112-49119]"
  }, {
    "left" : "isLabelName",
    "right" : "isLabelName",
    "info" : "SimpleName[48903-48914]:SimpleName[49120-49131]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[48915-48921]:SingleVariableDeclaration[49132-49138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48923-48987]:Block[49140-49204]"
  }, {
    "left" : "return (n != null && n.getType() == Token.LABEL_NAME);",
    "right" : "return (n != null && n.getType() == Token.LABEL_NAME);",
    "info" : "ReturnStatement[48929-48983]:ReturnStatement[49146-49200]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[49054-49060]:Modifier[49271-49277]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[49061-49068]:PrimitiveType[49278-49285]"
  }, {
    "left" : "isTryFinallyNode",
    "right" : "isTryFinallyNode",
    "info" : "SimpleName[49069-49085]:SimpleName[49286-49302]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[49086-49097]:SingleVariableDeclaration[49303-49314]"
  }, {
    "left" : "Node child",
    "right" : "Node child",
    "info" : "SingleVariableDeclaration[49099-49109]:SingleVariableDeclaration[49316-49326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49111-49231]:Block[49328-49448]"
  }, {
    "left" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
    "right" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
    "info" : "ReturnStatement[49117-49227]:ReturnStatement[49334-49444]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[49289-49295]:Modifier[49506-49512]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[49296-49303]:PrimitiveType[49513-49520]"
  }, {
    "left" : "isTryCatchNodeContainer",
    "right" : "isTryCatchNodeContainer",
    "info" : "SimpleName[49304-49327]:SimpleName[49521-49544]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[49328-49334]:SingleVariableDeclaration[49545-49551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49336-49465]:Block[49553-49682]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[49342-49370]:VariableDeclarationStatement[49559-49587]"
  }, {
    "left" : "return parent.getType() == Token.TRY\n        && parent.getFirstChild().getNext() == n;",
    "right" : "return parent.getType() == Token.TRY\n        && parent.getFirstChild().getNext() == n;",
    "info" : "ReturnStatement[49375-49461]:ReturnStatement[49592-49678]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[49543-49549]:Modifier[49760-49766]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[49550-49554]:PrimitiveType[49767-49771]"
  }, {
    "left" : "removeChild",
    "right" : "removeChild",
    "info" : "SimpleName[49555-49566]:SimpleName[49772-49783]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[49567-49578]:SingleVariableDeclaration[49784-49795]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[49580-49589]:SingleVariableDeclaration[49797-49806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49591-51933]:Block[49808-52150]"
  }, {
    "left" : "if (isTryFinallyNode(parent, node))",
    "right" : "if (isTryFinallyNode(parent, node))",
    "info" : "IfStatement[49597-51929]:IfStatement[49814-52146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49633-49906]:Block[49850-50123]"
  }, {
    "left" : "if (NodeUtil.hasCatchHandler(getCatchBlock(parent)))",
    "right" : "if (NodeUtil.hasCatchHandler(getCatchBlock(parent)))",
    "info" : "IfStatement[49641-49900]:IfStatement[49858-50117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49694-49799]:Block[49911-50016]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[49766-49791]:ExpressionStatement[49983-50008]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49805-49900]:Block[50022-50117]"
  }, {
    "left" : "node.detachChildren();",
    "right" : "node.detachChildren();",
    "info" : "ExpressionStatement[49870-49892]:ExpressionStatement[50087-50109]"
  }, {
    "left" : "if (node.getType() == Token.CATCH)",
    "right" : "if (node.getType() == Token.CATCH)",
    "info" : "IfStatement[49912-51929]:IfStatement[50129-52146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49947-50171]:Block[50164-50388]"
  }, {
    "left" : "Node tryNode = node.getParent().getParent();",
    "right" : "Node tryNode = node.getParent().getParent();",
    "info" : "VariableDeclarationStatement[50028-50072]:VariableDeclarationStatement[50245-50289]"
  }, {
    "left" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
    "right" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
    "info" : "ExpressionStatement[50079-50134]:ExpressionStatement[50296-50351]"
  }, {
    "left" : "node.detachFromParent();",
    "right" : "node.detachFromParent();",
    "info" : "ExpressionStatement[50141-50165]:ExpressionStatement[50358-50382]"
  }, {
    "left" : "if (isTryCatchNodeContainer(node))",
    "right" : "if (isTryCatchNodeContainer(node))",
    "info" : "IfStatement[50177-51929]:IfStatement[50394-52146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50212-50470]:Block[50429-50687]"
  }, {
    "left" : "Node tryNode = node.getParent();",
    "right" : "Node tryNode = node.getParent();",
    "info" : "VariableDeclarationStatement[50341-50373]:VariableDeclarationStatement[50558-50590]"
  }, {
    "left" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
    "right" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
    "info" : "ExpressionStatement[50380-50435]:ExpressionStatement[50597-50652]"
  }, {
    "left" : "node.detachChildren();",
    "right" : "node.detachChildren();",
    "info" : "ExpressionStatement[50442-50464]:ExpressionStatement[50659-50681]"
  }, {
    "left" : "if (node.getType() == Token.BLOCK)",
    "right" : "if (node.getType() == Token.BLOCK)",
    "info" : "IfStatement[50476-51929]:IfStatement[50693-52146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50511-50643]:Block[50728-50860]"
  }, {
    "left" : "node.detachChildren();",
    "right" : "node.detachChildren();",
    "info" : "ExpressionStatement[50615-50637]:ExpressionStatement[50832-50854]"
  }, {
    "left" : "if (isStatementBlock(parent)\n        || isSwitchCase(node))",
    "right" : "if (isStatementBlock(parent)\n        || isSwitchCase(node))",
    "info" : "IfStatement[50649-51929]:IfStatement[50866-52146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50709-50803]:Block[50926-51020]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[50772-50797]:ExpressionStatement[50989-51014]"
  }, {
    "left" : "if (parent.getType() == Token.VAR)",
    "right" : "if (parent.getType() == Token.VAR)",
    "info" : "IfStatement[50809-51929]:IfStatement[51026-52146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50844-51163]:Block[51061-51380]"
  }, {
    "left" : "if (parent.hasMoreThanOneChild())",
    "right" : "if (parent.hasMoreThanOneChild())",
    "info" : "IfStatement[50852-51157]:IfStatement[51069-51374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50886-50929]:Block[51103-51146]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[50896-50921]:ExpressionStatement[51113-51138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50935-51157]:Block[51152-51374]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[51010-51035]:ExpressionStatement[51227-51252]"
  }, {
    "left" : "removeChild(parent.getParent(), parent);",
    "right" : "removeChild(parent.getParent(), parent);",
    "info" : "ExpressionStatement[51109-51149]:ExpressionStatement[51326-51366]"
  }, {
    "left" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
    "right" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
    "info" : "IfStatement[51169-51929]:IfStatement[51386-52146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51247-51465]:Block[51464-51682]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[51318-51343]:ExpressionStatement[51535-51560]"
  }, {
    "left" : "removeChild(parent.getParent(), parent);",
    "right" : "removeChild(parent.getParent(), parent);",
    "info" : "ExpressionStatement[51419-51459]:ExpressionStatement[51636-51676]"
  }, {
    "left" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
    "right" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
    "info" : "IfStatement[51471-51929]:IfStatement[51688-52146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51545-51785]:Block[51762-52002]"
  }, {
    "left" : "parent.replaceChild(node, new Node(Token.EMPTY));",
    "right" : "parent.replaceChild(node, new Node(Token.EMPTY));",
    "info" : "ExpressionStatement[51730-51779]:ExpressionStatement[51947-51996]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51791-51929]:Block[52008-52146]"
  }, {
    "left" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
    "right" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
    "info" : "ThrowStatement[51799-51923]:ThrowStatement[52016-52140]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[51997-52003]:Modifier[52214-52220]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[52004-52008]:PrimitiveType[52221-52225]"
  }, {
    "left" : "maybeAddFinally",
    "right" : "maybeAddFinally",
    "info" : "SimpleName[52009-52024]:SimpleName[52226-52241]"
  }, {
    "left" : "Node tryNode",
    "right" : "Node tryNode",
    "info" : "SingleVariableDeclaration[52025-52037]:SingleVariableDeclaration[52242-52254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52039-52249]:Block[52256-52466]"
  }, {
    "left" : "Preconditions.checkState(tryNode.getType() == Token.TRY);",
    "right" : "Preconditions.checkState(tryNode.getType() == Token.TRY);",
    "info" : "ExpressionStatement[52045-52102]:ExpressionStatement[52262-52319]"
  }, {
    "left" : "if (!NodeUtil.hasFinally(tryNode))",
    "right" : "if (!NodeUtil.hasFinally(tryNode))",
    "info" : "IfStatement[52107-52245]:IfStatement[52324-52462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52142-52245]:Block[52359-52462]"
  }, {
    "left" : "tryNode.addChildrenToBack(new Node(Token.BLOCK)\n          .copyInformationFrom(tryNode));",
    "right" : "tryNode.addChildrenToBack(new Node(Token.BLOCK)\n          .copyInformationFrom(tryNode));",
    "info" : "ExpressionStatement[52150-52239]:ExpressionStatement[52367-52456]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[52351-52357]:Modifier[52568-52574]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[52358-52365]:PrimitiveType[52575-52582]"
  }, {
    "left" : "tryMergeBlock",
    "right" : "tryMergeBlock",
    "info" : "SimpleName[52366-52379]:SimpleName[52583-52596]"
  }, {
    "left" : "Node block",
    "right" : "Node block",
    "info" : "SingleVariableDeclaration[52380-52390]:SingleVariableDeclaration[52597-52607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52392-52942]:Block[52609-53159]"
  }, {
    "left" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
    "right" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
    "info" : "ExpressionStatement[52398-52455]:ExpressionStatement[52615-52672]"
  }, {
    "left" : "Node parent = block.getParent();",
    "right" : "Node parent = block.getParent();",
    "info" : "VariableDeclarationStatement[52460-52492]:VariableDeclarationStatement[52677-52709]"
  }, {
    "left" : "if (isStatementBlock(parent))",
    "right" : "if (isStatementBlock(parent))",
    "info" : "IfStatement[52623-52938]:IfStatement[52840-53155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52653-52905]:Block[52870-53122]"
  }, {
    "left" : "Node previous = block;",
    "right" : "Node previous = block;",
    "info" : "VariableDeclarationStatement[52661-52683]:VariableDeclarationStatement[52878-52900]"
  }, {
    "left" : "while (block.hasChildren())",
    "right" : "while (block.hasChildren())",
    "info" : "WhileStatement[52690-52847]:WhileStatement[52907-53064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52718-52847]:Block[52935-53064]"
  }, {
    "left" : "Node child = block.removeFirstChild();",
    "right" : "Node child = block.removeFirstChild();",
    "info" : "VariableDeclarationStatement[52728-52766]:VariableDeclarationStatement[52945-52983]"
  }, {
    "left" : "parent.addChildAfter(child, previous);",
    "right" : "parent.addChildAfter(child, previous);",
    "info" : "ExpressionStatement[52775-52813]:ExpressionStatement[52992-53030]"
  }, {
    "left" : "previous = child;",
    "right" : "previous = child;",
    "info" : "ExpressionStatement[52822-52839]:ExpressionStatement[53039-53056]"
  }, {
    "left" : "parent.removeChild(block);",
    "right" : "parent.removeChild(block);",
    "info" : "ExpressionStatement[52854-52880]:ExpressionStatement[53071-53097]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[52887-52899]:ReturnStatement[53104-53116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52911-52938]:Block[53128-53155]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[52919-52932]:ReturnStatement[53136-53149]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[52984-52990]:Modifier[53201-53207]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[52991-52998]:PrimitiveType[53208-53215]"
  }, {
    "left" : "isCall",
    "right" : "isCall",
    "info" : "SimpleName[52999-53005]:SimpleName[53216-53222]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[53006-53012]:SingleVariableDeclaration[53223-53229]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53014-53057]:Block[53231-53274]"
  }, {
    "left" : "return n.getType() == Token.CALL;",
    "right" : "return n.getType() == Token.CALL;",
    "info" : "ReturnStatement[53020-53053]:ReturnStatement[53237-53270]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53150-53156]:Modifier[53367-53373]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53157-53164]:PrimitiveType[53374-53381]"
  }, {
    "left" : "isCallOrNew",
    "right" : "isCallOrNew",
    "info" : "SimpleName[53165-53176]:SimpleName[53382-53393]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[53177-53186]:SingleVariableDeclaration[53394-53403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53188-53251]:Block[53405-53468]"
  }, {
    "left" : "return NodeUtil.isCall(node) || NodeUtil.isNew(node);",
    "right" : "return NodeUtil.isCall(node) || NodeUtil.isNew(node);",
    "info" : "ReturnStatement[53194-53247]:ReturnStatement[53411-53464]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53297-53303]:Modifier[53514-53520]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53304-53311]:PrimitiveType[53521-53528]"
  }, {
    "left" : "isFunction",
    "right" : "isFunction",
    "info" : "SimpleName[53312-53322]:SimpleName[53529-53539]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[53323-53329]:SingleVariableDeclaration[53540-53546]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53331-53378]:Block[53548-53595]"
  }, {
    "left" : "return n.getType() == Token.FUNCTION;",
    "right" : "return n.getType() == Token.FUNCTION;",
    "info" : "ReturnStatement[53337-53374]:ReturnStatement[53554-53591]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53448-53454]:Modifier[53665-53671]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[53455-53459]:SimpleType[53672-53676]"
  }, {
    "left" : "getFunctionBody",
    "right" : "getFunctionBody",
    "info" : "SimpleName[53460-53475]:SimpleName[53677-53692]"
  }, {
    "left" : "Node fn",
    "right" : "Node fn",
    "info" : "SingleVariableDeclaration[53476-53483]:SingleVariableDeclaration[53693-53700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53485-53569]:Block[53702-53786]"
  }, {
    "left" : "Preconditions.checkArgument(isFunction(fn));",
    "right" : "Preconditions.checkArgument(isFunction(fn));",
    "info" : "ExpressionStatement[53491-53535]:ExpressionStatement[53708-53752]"
  }, {
    "left" : "return fn.getLastChild();",
    "right" : "return fn.getLastChild();",
    "info" : "ReturnStatement[53540-53565]:ReturnStatement[53757-53782]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53611-53617]:Modifier[53828-53834]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53618-53625]:PrimitiveType[53835-53842]"
  }, {
    "left" : "isThis",
    "right" : "isThis",
    "info" : "SimpleName[53626-53632]:SimpleName[53843-53849]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[53633-53642]:SingleVariableDeclaration[53850-53859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53644-53690]:Block[53861-53907]"
  }, {
    "left" : "return node.getType() == Token.THIS;",
    "right" : "return node.getType() == Token.THIS;",
    "info" : "ReturnStatement[53650-53686]:ReturnStatement[53867-53903]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53737-53743]:Modifier[53954-53960]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53744-53751]:PrimitiveType[53961-53968]"
  }, {
    "left" : "isArrayLiteral",
    "right" : "isArrayLiteral",
    "info" : "SimpleName[53752-53766]:SimpleName[53969-53983]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[53767-53776]:SingleVariableDeclaration[53984-53993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53778-53828]:Block[53995-54045]"
  }, {
    "left" : "return node.getType() == Token.ARRAYLIT;",
    "right" : "return node.getType() == Token.ARRAYLIT;",
    "info" : "ReturnStatement[53784-53824]:ReturnStatement[54001-54041]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53893-53899]:Modifier[54110-54116]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53900-53907]:PrimitiveType[54117-54124]"
  }, {
    "left" : "containsCall",
    "right" : "containsCall",
    "info" : "SimpleName[53908-53920]:SimpleName[54125-54137]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[53921-53927]:SingleVariableDeclaration[54138-54144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53929-53974]:Block[54146-54191]"
  }, {
    "left" : "return containsType(n, Token.CALL);",
    "right" : "return containsType(n, Token.CALL);",
    "info" : "ReturnStatement[53935-53970]:ReturnStatement[54152-54187]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[54217-54223]:Modifier[54434-54440]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[54224-54231]:PrimitiveType[54441-54448]"
  }, {
    "left" : "isFunctionDeclaration",
    "right" : "isFunctionDeclaration",
    "info" : "SimpleName[54232-54253]:SimpleName[54449-54470]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[54254-54260]:SingleVariableDeclaration[54471-54477]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54262-54327]:Block[54479-54544]"
  }, {
    "left" : "return n.getType() == Token.FUNCTION && isStatement(n);",
    "right" : "return n.getType() == Token.FUNCTION && isStatement(n);",
    "info" : "ReturnStatement[54268-54323]:ReturnStatement[54485-54540]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[54517-54523]:Modifier[54734-54740]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[54524-54531]:PrimitiveType[54741-54748]"
  }, {
    "left" : "isHoistedFunctionDeclaration",
    "right" : "isHoistedFunctionDeclaration",
    "info" : "SimpleName[54532-54560]:SimpleName[54749-54777]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[54561-54567]:SingleVariableDeclaration[54778-54784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54569-54733]:Block[54786-54950]"
  }, {
    "left" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
    "right" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
    "info" : "ReturnStatement[54575-54729]:ReturnStatement[54792-54946]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[55393-55399]:Modifier[55610-55616]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[55400-55407]:PrimitiveType[55617-55624]"
  }, {
    "left" : "isFunctionExpression",
    "right" : "isFunctionExpression",
    "info" : "SimpleName[55408-55428]:SimpleName[55625-55645]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[55429-55435]:SingleVariableDeclaration[55646-55652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55437-55503]:Block[55654-55720]"
  }, {
    "left" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
    "right" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
    "info" : "ReturnStatement[55443-55499]:ReturnStatement[55660-55716]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[55698-55704]:Modifier[55915-55921]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[55705-55712]:PrimitiveType[55922-55929]"
  }, {
    "left" : "isEmptyFunctionExpression",
    "right" : "isEmptyFunctionExpression",
    "info" : "SimpleName[55713-55738]:SimpleName[55930-55955]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[55739-55748]:SingleVariableDeclaration[55956-55965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55750-55831]:Block[55967-56048]"
  }, {
    "left" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
    "right" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
    "info" : "ReturnStatement[55756-55827]:ReturnStatement[55973-56044]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[55981-55987]:Modifier[56198-56204]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[55988-55995]:PrimitiveType[56205-56212]"
  }, {
    "left" : "isVarArgsFunction",
    "right" : "isVarArgsFunction",
    "info" : "SimpleName[55996-56013]:SimpleName[56213-56230]"
  }, {
    "left" : "Node function",
    "right" : "Node function",
    "info" : "SingleVariableDeclaration[56014-56027]:SingleVariableDeclaration[56231-56244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56029-56201]:Block[56246-56418]"
  }, {
    "left" : "Preconditions.checkArgument(isFunction(function));",
    "right" : "Preconditions.checkArgument(isFunction(function));",
    "info" : "ExpressionStatement[56035-56085]:ExpressionStatement[56252-56302]"
  }, {
    "left" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        MATCH_NOT_FUNCTION);",
    "right" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        MATCH_NOT_FUNCTION);",
    "info" : "ReturnStatement[56090-56197]:ReturnStatement[56307-56414]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[56305-56311]:Modifier[56522-56528]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[56312-56319]:PrimitiveType[56529-56536]"
  }, {
    "left" : "isObjectCallMethod",
    "right" : "isObjectCallMethod",
    "info" : "SimpleName[56320-56338]:SimpleName[56537-56555]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[56339-56352]:SingleVariableDeclaration[56556-56569]"
  }, {
    "left" : "String methodName",
    "right" : "String methodName",
    "info" : "SingleVariableDeclaration[56354-56371]:SingleVariableDeclaration[56571-56588]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56373-56808]:Block[56590-57025]"
  }, {
    "left" : "if (callNode.getType() == Token.CALL)",
    "right" : "if (callNode.getType() == Token.CALL)",
    "info" : "IfStatement[56379-56786]:IfStatement[56596-57003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56417-56786]:Block[56634-57003]"
  }, {
    "left" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
    "right" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[56425-56488]:VariableDeclarationStatement[56642-56705]"
  }, {
    "left" : "if (isGet(functionIndentifyingExpression))",
    "right" : "if (isGet(functionIndentifyingExpression))",
    "info" : "IfStatement[56495-56780]:IfStatement[56712-56997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56538-56780]:Block[56755-56997]"
  }, {
    "left" : "Node last = functionIndentifyingExpression.getLastChild();",
    "right" : "Node last = functionIndentifyingExpression.getLastChild();",
    "info" : "VariableDeclarationStatement[56548-56606]:VariableDeclarationStatement[56765-56823]"
  }, {
    "left" : "if (last != null && last.getType() == Token.STRING)",
    "right" : "if (last != null && last.getType() == Token.STRING)",
    "info" : "IfStatement[56615-56772]:IfStatement[56832-56989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56667-56772]:Block[56884-56989]"
  }, {
    "left" : "String propName = last.getString();",
    "right" : "String propName = last.getString();",
    "info" : "VariableDeclarationStatement[56679-56714]:VariableDeclarationStatement[56896-56931]"
  }, {
    "left" : "return (propName.equals(methodName));",
    "right" : "return (propName.equals(methodName));",
    "info" : "ReturnStatement[56725-56762]:ReturnStatement[56942-56979]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[56791-56804]:ReturnStatement[57008-57021]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[56943-56949]:Modifier[57160-57166]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[56950-56957]:PrimitiveType[57167-57174]"
  }, {
    "left" : "isFunctionObjectCall",
    "right" : "isFunctionObjectCall",
    "info" : "SimpleName[56958-56978]:SimpleName[57175-57195]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[56979-56992]:SingleVariableDeclaration[57196-57209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56994-57048]:Block[57211-57265]"
  }, {
    "left" : "return isObjectCallMethod(callNode, \"call\");",
    "right" : "return isObjectCallMethod(callNode, \"call\");",
    "info" : "ReturnStatement[57000-57044]:ReturnStatement[57217-57261]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[57184-57190]:Modifier[57401-57407]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[57191-57198]:PrimitiveType[57408-57415]"
  }, {
    "left" : "isFunctionObjectApply",
    "right" : "isFunctionObjectApply",
    "info" : "SimpleName[57199-57220]:SimpleName[57416-57437]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[57221-57234]:SingleVariableDeclaration[57438-57451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57236-57291]:Block[57453-57508]"
  }, {
    "left" : "return isObjectCallMethod(callNode, \"apply\");",
    "right" : "return isObjectCallMethod(callNode, \"apply\");",
    "info" : "ReturnStatement[57242-57287]:ReturnStatement[57459-57504]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[57479-57485]:Modifier[57696-57702]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[57486-57493]:PrimitiveType[57703-57710]"
  }, {
    "left" : "isFunctionObjectCallOrApply",
    "right" : "isFunctionObjectCallOrApply",
    "info" : "SimpleName[57494-57521]:SimpleName[57711-57738]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[57522-57535]:SingleVariableDeclaration[57739-57752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57537-57620]:Block[57754-57837]"
  }, {
    "left" : "return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);",
    "right" : "return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);",
    "info" : "ReturnStatement[57543-57616]:ReturnStatement[57760-57833]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[57783-57789]:Modifier[58000-58006]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[57790-57797]:PrimitiveType[58007-58014]"
  }, {
    "left" : "isSimpleFunctionObjectCall",
    "right" : "isSimpleFunctionObjectCall",
    "info" : "SimpleName[57798-57824]:SimpleName[58015-58041]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[57825-57838]:SingleVariableDeclaration[58042-58055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57840-58019]:Block[58057-58236]"
  }, {
    "left" : "if (isFunctionObjectCall(callNode))",
    "right" : "if (isFunctionObjectCall(callNode))",
    "info" : "IfStatement[57846-57996]:IfStatement[58063-58213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57882-57996]:Block[58099-58213]"
  }, {
    "left" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
    "right" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
    "info" : "IfStatement[57890-57990]:IfStatement[58107-58207]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57960-57990]:Block[58177-58207]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[57970-57982]:ReturnStatement[58187-58199]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[58002-58015]:ReturnStatement[58219-58232]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[58372-58378]:Modifier[58589-58595]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[58379-58386]:PrimitiveType[58596-58603]"
  }, {
    "left" : "isVarOrSimpleAssignLhs",
    "right" : "isVarOrSimpleAssignLhs",
    "info" : "SimpleName[58387-58409]:SimpleName[58604-58626]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[58410-58416]:SingleVariableDeclaration[58627-58633]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[58418-58429]:SingleVariableDeclaration[58635-58646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58431-58558]:Block[58648-58775]"
  }, {
    "left" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
    "right" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
    "info" : "ReturnStatement[58437-58554]:ReturnStatement[58654-58771]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[59097-59103]:Modifier[59314-59320]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[59104-59111]:PrimitiveType[59321-59328]"
  }, {
    "left" : "isLValue",
    "right" : "isLValue",
    "info" : "SimpleName[59112-59120]:SimpleName[59329-59337]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[59121-59130]:SingleVariableDeclaration[59338-59347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59132-59764]:Block[59349-59981]"
  }, {
    "left" : "int nType = node.getType();",
    "right" : "int nType = node.getType();",
    "info" : "VariableDeclarationStatement[59138-59165]:VariableDeclarationStatement[59355-59382]"
  }, {
    "left" : "Preconditions.checkArgument(nType == Token.NAME || nType == Token.GETPROP ||\n        nType == Token.GETELEM);",
    "right" : "Preconditions.checkArgument(nType == Token.NAME || nType == Token.GETPROP ||\n        nType == Token.GETELEM);",
    "info" : "ExpressionStatement[59170-59279]:ExpressionStatement[59387-59496]"
  }, {
    "left" : "Node parent = node.getParent();",
    "right" : "Node parent = node.getParent();",
    "info" : "VariableDeclarationStatement[59284-59315]:VariableDeclarationStatement[59501-59532]"
  }, {
    "left" : "return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == node)\n        || (NodeUtil.isForIn(parent) && parent.getFirstChild() == node)\n        || NodeUtil.isVar(parent)\n        || (parent.getType() == Token.FUNCTION &&\n            parent.getFirstChild() == node)\n        || parent.getType() == Token.DEC\n        || parent.getType() == Token.INC\n        || parent.getType() == Token.LP\n        || parent.getType() == Token.CATCH;",
    "right" : "return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == node)\n        || (NodeUtil.isForIn(parent) && parent.getFirstChild() == node)\n        || NodeUtil.isVar(parent)\n        || (parent.getType() == Token.FUNCTION &&\n            parent.getFirstChild() == node)\n        || parent.getType() == Token.DEC\n        || parent.getType() == Token.INC\n        || parent.getType() == Token.LP\n        || parent.getType() == Token.CATCH;",
    "info" : "ReturnStatement[59320-59760]:ReturnStatement[59537-59977]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[59960-59966]:Modifier[60177-60183]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[59967-59974]:PrimitiveType[60184-60191]"
  }, {
    "left" : "isObjectLitKey",
    "right" : "isObjectLitKey",
    "info" : "SimpleName[59975-59989]:SimpleName[60192-60206]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[59990-59999]:SingleVariableDeclaration[60207-60216]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[60001-60012]:SingleVariableDeclaration[60218-60229]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60014-60215]:Block[60231-60432]"
  }, {
    "left" : "switch (node.getType()) {\n      case Token.STRING:\n        return parent.getType() == Token.OBJECTLIT;\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
    "right" : "switch (node.getType()) {\n      case Token.STRING:\n        return parent.getType() == Token.OBJECTLIT;\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
    "info" : "SwitchStatement[60020-60193]:SwitchStatement[60237-60410]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[60052-60070]:SwitchCase[60269-60287]"
  }, {
    "left" : "return parent.getType() == Token.OBJECTLIT;",
    "right" : "return parent.getType() == Token.OBJECTLIT;",
    "info" : "ReturnStatement[60079-60122]:ReturnStatement[60296-60339]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[60129-60144]:SwitchCase[60346-60361]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[60151-60166]:SwitchCase[60368-60383]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[60175-60187]:ReturnStatement[60392-60404]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[60198-60211]:ReturnStatement[60415-60428]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[60303-60309]:Modifier[60520-60526]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[60310-60316]:SimpleType[60527-60533]"
  }, {
    "left" : "getObjectLitKeyName",
    "right" : "getObjectLitKeyName",
    "info" : "SimpleName[60317-60336]:SimpleName[60534-60553]"
  }, {
    "left" : "Node key",
    "right" : "Node key",
    "info" : "SingleVariableDeclaration[60337-60345]:SingleVariableDeclaration[60554-60562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60347-60557]:Block[60564-60774]"
  }, {
    "left" : "switch (key.getType()) {\n      case Token.STRING:\n      case Token.GET:\n      case Token.SET:\n        return key.getString();\n    }",
    "right" : "switch (key.getType()) {\n      case Token.STRING:\n      case Token.GET:\n      case Token.SET:\n        return key.getString();\n    }",
    "info" : "SwitchStatement[60353-60484]:SwitchStatement[60570-60701]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[60384-60402]:SwitchCase[60601-60619]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[60409-60424]:SwitchCase[60626-60641]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[60431-60446]:SwitchCase[60648-60663]"
  }, {
    "left" : "return key.getString();",
    "right" : "return key.getString();",
    "info" : "ReturnStatement[60455-60478]:ReturnStatement[60672-60695]"
  }, {
    "left" : "throw new IllegalStateException(\"Unexpected node type: \" + key);",
    "right" : "throw new IllegalStateException(\"Unexpected node type: \" + key);",
    "info" : "ThrowStatement[60489-60553]:ThrowStatement[60706-60770]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[60662-60668]:Modifier[60879-60885]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[60669-60675]:SimpleType[60886-60892]"
  }, {
    "left" : "getObjectLitKeyTypeFromValueType",
    "right" : "getObjectLitKeyTypeFromValueType",
    "info" : "SimpleName[60676-60708]:SimpleName[60893-60925]"
  }, {
    "left" : "Node key",
    "right" : "Node key",
    "info" : "SingleVariableDeclaration[60709-60717]:SingleVariableDeclaration[60926-60934]"
  }, {
    "left" : "JSType valueType",
    "right" : "JSType valueType",
    "info" : "SingleVariableDeclaration[60719-60735]:SingleVariableDeclaration[60936-60952]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60737-61572]:Block[60954-61789]"
  }, {
    "left" : "if (valueType != null)",
    "right" : "if (valueType != null)",
    "info" : "IfStatement[60743-61546]:IfStatement[60960-61763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60766-61546]:Block[60983-61763]"
  }, {
    "left" : "switch (key.getType()) {\n        case Token.GET:\n          // GET must always return a function type.\n          if (valueType.isFunctionType()) {\n            FunctionType fntype = ((FunctionType) valueType);\n            valueType = fntype.getReturnType();\n          } else {\n            return null;\n          }\n          break;\n        case Token.SET:\n          if (valueType.isFunctionType()) {\n            // SET must always return a function type.\n            FunctionType fntype = ((FunctionType) valueType);\n            Node param = fntype.getParametersNode().getFirstChild();\n            // SET function must always have one parameter.\n            valueType = param.getJSType();\n          } else {\n            return null;\n          }\n          break;\n      }",
    "right" : "switch (key.getType()) {\n        case Token.GET:\n          // GET must always return a function type.\n          if (valueType.isFunctionType()) {\n            FunctionType fntype = ((FunctionType) valueType);\n            valueType = fntype.getReturnType();\n          } else {\n            return null;\n          }\n          break;\n        case Token.SET:\n          if (valueType.isFunctionType()) {\n            // SET must always return a function type.\n            FunctionType fntype = ((FunctionType) valueType);\n            Node param = fntype.getParametersNode().getFirstChild();\n            // SET function must always have one parameter.\n            valueType = param.getJSType();\n          } else {\n            return null;\n          }\n          break;\n      }",
    "info" : "SwitchStatement[60774-61540]:SwitchStatement[60991-61757]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[60807-60822]:SwitchCase[61024-61039]"
  }, {
    "left" : "if (valueType.isFunctionType())",
    "right" : "if (valueType.isFunctionType())",
    "info" : "IfStatement[60886-61085]:IfStatement[61103-61302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60918-61041]:Block[61135-61258]"
  }, {
    "left" : "FunctionType fntype = ((FunctionType) valueType);",
    "right" : "FunctionType fntype = ((FunctionType) valueType);",
    "info" : "VariableDeclarationStatement[60932-60981]:VariableDeclarationStatement[61149-61198]"
  }, {
    "left" : "valueType = fntype.getReturnType();",
    "right" : "valueType = fntype.getReturnType();",
    "info" : "ExpressionStatement[60994-61029]:ExpressionStatement[61211-61246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61047-61085]:Block[61264-61302]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[61061-61073]:ReturnStatement[61278-61290]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[61096-61102]:BreakStatement[61313-61319]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[61111-61126]:SwitchCase[61328-61343]"
  }, {
    "left" : "if (valueType.isFunctionType())",
    "right" : "if (valueType.isFunctionType())",
    "info" : "IfStatement[61137-61515]:IfStatement[61354-61732]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61169-61471]:Block[61386-61688]"
  }, {
    "left" : "FunctionType fntype = ((FunctionType) valueType);",
    "right" : "FunctionType fntype = ((FunctionType) valueType);",
    "info" : "VariableDeclarationStatement[61238-61287]:VariableDeclarationStatement[61455-61504]"
  }, {
    "left" : "Node param = fntype.getParametersNode().getFirstChild();",
    "right" : "Node param = fntype.getParametersNode().getFirstChild();",
    "info" : "VariableDeclarationStatement[61300-61356]:VariableDeclarationStatement[61517-61573]"
  }, {
    "left" : "valueType = param.getJSType();",
    "right" : "valueType = param.getJSType();",
    "info" : "ExpressionStatement[61429-61459]:ExpressionStatement[61646-61676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61477-61515]:Block[61694-61732]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[61491-61503]:ReturnStatement[61708-61720]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[61526-61532]:BreakStatement[61743-61749]"
  }, {
    "left" : "return valueType;",
    "right" : "return valueType;",
    "info" : "ReturnStatement[61551-61568]:ReturnStatement[61768-61785]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[61743-61749]:Modifier[61960-61966]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[61750-61757]:PrimitiveType[61967-61974]"
  }, {
    "left" : "isGetOrSetKey",
    "right" : "isGetOrSetKey",
    "info" : "SimpleName[61758-61771]:SimpleName[61975-61988]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[61772-61781]:SingleVariableDeclaration[61989-61998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61783-61907]:Block[62000-62124]"
  }, {
    "left" : "switch (node.getType()) {\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
    "right" : "switch (node.getType()) {\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
    "info" : "SwitchStatement[61789-61885]:SwitchStatement[62006-62102]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[61821-61836]:SwitchCase[62038-62053]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[61843-61858]:SwitchCase[62060-62075]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[61867-61879]:ReturnStatement[62084-62096]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[61890-61903]:ReturnStatement[62107-62120]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[62178-62184]:Modifier[62395-62401]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[62185-62191]:SimpleType[62402-62408]"
  }, {
    "left" : "opToStr",
    "right" : "opToStr",
    "info" : "SimpleName[62192-62199]:SimpleName[62409-62416]"
  }, {
    "left" : "int operator",
    "right" : "int operator",
    "info" : "SingleVariableDeclaration[62200-62212]:SingleVariableDeclaration[62417-62429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62214-63824]:Block[62431-64041]"
  }, {
    "left" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
    "right" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
    "info" : "SwitchStatement[62220-63820]:SwitchStatement[62437-64037]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[62246-62263]:SwitchCase[62463-62480]"
  }, {
    "left" : "return \"|\";",
    "right" : "return \"|\";",
    "info" : "ReturnStatement[62264-62275]:ReturnStatement[62481-62492]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[62282-62296]:SwitchCase[62499-62513]"
  }, {
    "left" : "return \"||\";",
    "right" : "return \"||\";",
    "info" : "ReturnStatement[62297-62309]:ReturnStatement[62514-62526]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[62316-62334]:SwitchCase[62533-62551]"
  }, {
    "left" : "return \"^\";",
    "right" : "return \"^\";",
    "info" : "ReturnStatement[62335-62346]:ReturnStatement[62552-62563]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[62353-62368]:SwitchCase[62570-62585]"
  }, {
    "left" : "return \"&&\";",
    "right" : "return \"&&\";",
    "info" : "ReturnStatement[62369-62381]:ReturnStatement[62586-62598]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[62388-62406]:SwitchCase[62605-62623]"
  }, {
    "left" : "return \"&\";",
    "right" : "return \"&\";",
    "info" : "ReturnStatement[62407-62418]:ReturnStatement[62624-62635]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[62425-62441]:SwitchCase[62642-62658]"
  }, {
    "left" : "return \"===\";",
    "right" : "return \"===\";",
    "info" : "ReturnStatement[62442-62455]:ReturnStatement[62659-62672]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[62462-62476]:SwitchCase[62679-62693]"
  }, {
    "left" : "return \"==\";",
    "right" : "return \"==\";",
    "info" : "ReturnStatement[62477-62489]:ReturnStatement[62694-62706]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[62496-62511]:SwitchCase[62713-62728]"
  }, {
    "left" : "return \"!\";",
    "right" : "return \"!\";",
    "info" : "ReturnStatement[62512-62523]:ReturnStatement[62729-62740]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[62530-62544]:SwitchCase[62747-62761]"
  }, {
    "left" : "return \"!=\";",
    "right" : "return \"!=\";",
    "info" : "ReturnStatement[62545-62557]:ReturnStatement[62762-62774]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[62564-62580]:SwitchCase[62781-62797]"
  }, {
    "left" : "return \"!==\";",
    "right" : "return \"!==\";",
    "info" : "ReturnStatement[62581-62594]:ReturnStatement[62798-62811]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[62601-62616]:SwitchCase[62818-62833]"
  }, {
    "left" : "return \"<<\";",
    "right" : "return \"<<\";",
    "info" : "ReturnStatement[62617-62629]:ReturnStatement[62834-62846]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[62636-62650]:SwitchCase[62853-62867]"
  }, {
    "left" : "return \"in\";",
    "right" : "return \"in\";",
    "info" : "ReturnStatement[62651-62663]:ReturnStatement[62868-62880]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[62670-62684]:SwitchCase[62887-62901]"
  }, {
    "left" : "return \"<=\";",
    "right" : "return \"<=\";",
    "info" : "ReturnStatement[62685-62697]:ReturnStatement[62902-62914]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[62704-62718]:SwitchCase[62921-62935]"
  }, {
    "left" : "return \"<\";",
    "right" : "return \"<\";",
    "info" : "ReturnStatement[62719-62730]:ReturnStatement[62936-62947]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[62737-62753]:SwitchCase[62954-62970]"
  }, {
    "left" : "return \">>>\";",
    "right" : "return \">>>\";",
    "info" : "ReturnStatement[62754-62767]:ReturnStatement[62971-62984]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[62774-62789]:SwitchCase[62991-63006]"
  }, {
    "left" : "return \">>\";",
    "right" : "return \">>\";",
    "info" : "ReturnStatement[62790-62802]:ReturnStatement[63007-63019]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[62809-62823]:SwitchCase[63026-63040]"
  }, {
    "left" : "return \">=\";",
    "right" : "return \">=\";",
    "info" : "ReturnStatement[62824-62836]:ReturnStatement[63041-63053]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[62843-62857]:SwitchCase[63060-63074]"
  }, {
    "left" : "return \">\";",
    "right" : "return \">\";",
    "info" : "ReturnStatement[62858-62869]:ReturnStatement[63075-63086]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[62876-62891]:SwitchCase[63093-63108]"
  }, {
    "left" : "return \"*\";",
    "right" : "return \"*\";",
    "info" : "ReturnStatement[62892-62903]:ReturnStatement[63109-63120]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[62910-62925]:SwitchCase[63127-63142]"
  }, {
    "left" : "return \"/\";",
    "right" : "return \"/\";",
    "info" : "ReturnStatement[62926-62937]:ReturnStatement[63143-63154]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[62944-62959]:SwitchCase[63161-63176]"
  }, {
    "left" : "return \"%\";",
    "right" : "return \"%\";",
    "info" : "ReturnStatement[62960-62971]:ReturnStatement[63177-63188]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[62978-62996]:SwitchCase[63195-63213]"
  }, {
    "left" : "return \"~\";",
    "right" : "return \"~\";",
    "info" : "ReturnStatement[62997-63008]:ReturnStatement[63214-63225]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[63015-63030]:SwitchCase[63232-63247]"
  }, {
    "left" : "return \"+\";",
    "right" : "return \"+\";",
    "info" : "ReturnStatement[63031-63042]:ReturnStatement[63248-63259]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[63049-63064]:SwitchCase[63266-63281]"
  }, {
    "left" : "return \"-\";",
    "right" : "return \"-\";",
    "info" : "ReturnStatement[63065-63076]:ReturnStatement[63282-63293]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[63083-63098]:SwitchCase[63300-63315]"
  }, {
    "left" : "return \"+\";",
    "right" : "return \"+\";",
    "info" : "ReturnStatement[63099-63110]:ReturnStatement[63316-63327]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[63117-63132]:SwitchCase[63334-63349]"
  }, {
    "left" : "return \"-\";",
    "right" : "return \"-\";",
    "info" : "ReturnStatement[63133-63144]:ReturnStatement[63350-63361]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[63151-63169]:SwitchCase[63368-63386]"
  }, {
    "left" : "return \"=\";",
    "right" : "return \"=\";",
    "info" : "ReturnStatement[63170-63181]:ReturnStatement[63387-63398]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[63188-63212]:SwitchCase[63405-63429]"
  }, {
    "left" : "return \"|=\";",
    "right" : "return \"|=\";",
    "info" : "ReturnStatement[63213-63225]:ReturnStatement[63430-63442]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[63232-63257]:SwitchCase[63449-63474]"
  }, {
    "left" : "return \"^=\";",
    "right" : "return \"^=\";",
    "info" : "ReturnStatement[63258-63270]:ReturnStatement[63475-63487]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[63277-63302]:SwitchCase[63494-63519]"
  }, {
    "left" : "return \"&=\";",
    "right" : "return \"&=\";",
    "info" : "ReturnStatement[63303-63315]:ReturnStatement[63520-63532]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[63322-63344]:SwitchCase[63539-63561]"
  }, {
    "left" : "return \"<<=\";",
    "right" : "return \"<<=\";",
    "info" : "ReturnStatement[63345-63358]:ReturnStatement[63562-63575]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[63365-63387]:SwitchCase[63582-63604]"
  }, {
    "left" : "return \">>=\";",
    "right" : "return \">>=\";",
    "info" : "ReturnStatement[63388-63401]:ReturnStatement[63605-63618]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[63408-63431]:SwitchCase[63625-63648]"
  }, {
    "left" : "return \">>>=\";",
    "right" : "return \">>>=\";",
    "info" : "ReturnStatement[63432-63446]:ReturnStatement[63649-63663]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[63453-63475]:SwitchCase[63670-63692]"
  }, {
    "left" : "return \"+=\";",
    "right" : "return \"+=\";",
    "info" : "ReturnStatement[63476-63488]:ReturnStatement[63693-63705]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[63495-63517]:SwitchCase[63712-63734]"
  }, {
    "left" : "return \"-=\";",
    "right" : "return \"-=\";",
    "info" : "ReturnStatement[63518-63530]:ReturnStatement[63735-63747]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[63537-63559]:SwitchCase[63754-63776]"
  }, {
    "left" : "return \"*=\";",
    "right" : "return \"*=\";",
    "info" : "ReturnStatement[63560-63572]:ReturnStatement[63777-63789]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[63579-63601]:SwitchCase[63796-63818]"
  }, {
    "left" : "return \"/=\";",
    "right" : "return \"/=\";",
    "info" : "ReturnStatement[63602-63614]:ReturnStatement[63819-63831]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[63621-63643]:SwitchCase[63838-63860]"
  }, {
    "left" : "return \"%=\";",
    "right" : "return \"%=\";",
    "info" : "ReturnStatement[63644-63656]:ReturnStatement[63861-63873]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[63663-63679]:SwitchCase[63880-63896]"
  }, {
    "left" : "return \"void\";",
    "right" : "return \"void\";",
    "info" : "ReturnStatement[63680-63694]:ReturnStatement[63897-63911]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[63701-63719]:SwitchCase[63918-63936]"
  }, {
    "left" : "return \"typeof\";",
    "right" : "return \"typeof\";",
    "info" : "ReturnStatement[63720-63736]:ReturnStatement[63937-63953]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[63743-63765]:SwitchCase[63960-63982]"
  }, {
    "left" : "return \"instanceof\";",
    "right" : "return \"instanceof\";",
    "info" : "ReturnStatement[63766-63786]:ReturnStatement[63983-64003]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[63793-63801]:SwitchCase[64010-64018]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[63802-63814]:ReturnStatement[64019-64031]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[64102-64108]:Modifier[64319-64325]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[64109-64115]:SimpleType[64326-64332]"
  }, {
    "left" : "opToStrNoFail",
    "right" : "opToStrNoFail",
    "info" : "SimpleName[64116-64129]:SimpleName[64333-64346]"
  }, {
    "left" : "int operator",
    "right" : "int operator",
    "info" : "SingleVariableDeclaration[64130-64142]:SingleVariableDeclaration[64347-64359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64144-64331]:Block[64361-64548]"
  }, {
    "left" : "String res = opToStr(operator);",
    "right" : "String res = opToStr(operator);",
    "info" : "VariableDeclarationStatement[64150-64181]:VariableDeclarationStatement[64367-64398]"
  }, {
    "left" : "if (res == null)",
    "right" : "if (res == null)",
    "info" : "IfStatement[64186-64311]:IfStatement[64403-64528]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64203-64311]:Block[64420-64528]"
  }, {
    "left" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
    "right" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
    "info" : "ThrowStatement[64211-64305]:ThrowStatement[64428-64522]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[64316-64327]:ReturnStatement[64533-64544]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[64419-64425]:Modifier[64636-64642]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[64426-64433]:PrimitiveType[64643-64650]"
  }, {
    "left" : "containsType",
    "right" : "containsType",
    "info" : "SimpleName[64434-64446]:SimpleName[64651-64663]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[64447-64456]:SingleVariableDeclaration[64664-64673]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[64488-64496]:SingleVariableDeclaration[64705-64713]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[64528-64564]:SingleVariableDeclaration[64745-64781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64566-64640]:Block[64783-64857]"
  }, {
    "left" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
    "right" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
    "info" : "ReturnStatement[64572-64636]:ReturnStatement[64789-64853]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[64728-64734]:Modifier[64945-64951]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[64735-64742]:PrimitiveType[64952-64959]"
  }, {
    "left" : "containsType",
    "right" : "containsType",
    "info" : "SimpleName[64743-64755]:SimpleName[64960-64972]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[64756-64765]:SingleVariableDeclaration[64973-64982]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[64767-64775]:SingleVariableDeclaration[64984-64992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64777-64850]:Block[64994-65067]"
  }, {
    "left" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
    "right" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
    "info" : "ReturnStatement[64783-64846]:ReturnStatement[65000-65063]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[65070-65076]:Modifier[65287-65293]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[65077-65081]:PrimitiveType[65294-65298]"
  }, {
    "left" : "redeclareVarsInsideBranch",
    "right" : "redeclareVarsInsideBranch",
    "info" : "SimpleName[65082-65107]:SimpleName[65299-65324]"
  }, {
    "left" : "Node branch",
    "right" : "Node branch",
    "info" : "SingleVariableDeclaration[65108-65119]:SingleVariableDeclaration[65325-65336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65121-65602]:Block[65338-65819]"
  }, {
    "left" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
    "right" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
    "info" : "VariableDeclarationStatement[65127-65183]:VariableDeclarationStatement[65344-65400]"
  }, {
    "left" : "if (vars.isEmpty())",
    "right" : "if (vars.isEmpty())",
    "info" : "IfStatement[65188-65229]:IfStatement[65405-65446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65208-65229]:Block[65425-65446]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[65216-65223]:ReturnStatement[65433-65440]"
  }, {
    "left" : "Node parent = getAddingRoot(branch);",
    "right" : "Node parent = getAddingRoot(branch);",
    "info" : "VariableDeclarationStatement[65235-65271]:VariableDeclarationStatement[65452-65488]"
  }, {
    "left" : "for (Node nameNode : vars)",
    "right" : "for (Node nameNode : vars)",
    "info" : "EnhancedForStatement[65276-65598]:EnhancedForStatement[65493-65815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65303-65598]:Block[65520-65815]"
  }, {
    "left" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
    "right" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
    "info" : "VariableDeclarationStatement[65311-65499]:VariableDeclarationStatement[65528-65716]"
  }, {
    "left" : "copyNameAnnotations(nameNode, var.getFirstChild());",
    "right" : "copyNameAnnotations(nameNode, var.getFirstChild());",
    "info" : "ExpressionStatement[65506-65557]:ExpressionStatement[65723-65774]"
  }, {
    "left" : "parent.addChildToFront(var);",
    "right" : "parent.addChildToFront(var);",
    "info" : "ExpressionStatement[65564-65592]:ExpressionStatement[65781-65809]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[65714-65720]:Modifier[65931-65937]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[65721-65725]:PrimitiveType[65938-65942]"
  }, {
    "left" : "copyNameAnnotations",
    "right" : "copyNameAnnotations",
    "info" : "SimpleName[65726-65745]:SimpleName[65943-65962]"
  }, {
    "left" : "Node source",
    "right" : "Node source",
    "info" : "SingleVariableDeclaration[65746-65757]:SingleVariableDeclaration[65963-65974]"
  }, {
    "left" : "Node destination",
    "right" : "Node destination",
    "info" : "SingleVariableDeclaration[65759-65775]:SingleVariableDeclaration[65976-65992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65777-65907]:Block[65994-66124]"
  }, {
    "left" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
    "right" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
    "info" : "IfStatement[65783-65903]:IfStatement[66000-66120]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65833-65903]:Block[66050-66120]"
  }, {
    "left" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "right" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "info" : "ExpressionStatement[65841-65897]:ExpressionStatement[66058-66114]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[66028-66035]:Modifier[66245-66252]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[66036-66042]:Modifier[66253-66259]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[66043-66047]:SimpleType[66260-66264]"
  }, {
    "left" : "getAddingRoot",
    "right" : "getAddingRoot",
    "info" : "SimpleName[66048-66061]:SimpleName[66265-66278]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[66062-66068]:SingleVariableDeclaration[66279-66285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66070-66733]:Block[66287-66950]"
  }, {
    "left" : "Node addingRoot = null;",
    "right" : "Node addingRoot = null;",
    "info" : "VariableDeclarationStatement[66076-66099]:VariableDeclarationStatement[66293-66316]"
  }, {
    "left" : "Node ancestor = n;",
    "right" : "Node ancestor = n;",
    "info" : "VariableDeclarationStatement[66104-66122]:VariableDeclarationStatement[66321-66339]"
  }, {
    "left" : "while (null != (ancestor = ancestor.getParent()))",
    "right" : "while (null != (ancestor = ancestor.getParent()))",
    "info" : "WhileStatement[66127-66413]:WhileStatement[66344-66630]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66177-66413]:Block[66394-66630]"
  }, {
    "left" : "int type = ancestor.getType();",
    "right" : "int type = ancestor.getType();",
    "info" : "VariableDeclarationStatement[66185-66215]:VariableDeclarationStatement[66402-66432]"
  }, {
    "left" : "if (type == Token.SCRIPT)",
    "right" : "if (type == Token.SCRIPT)",
    "info" : "IfStatement[66222-66407]:IfStatement[66439-66624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66248-66303]:Block[66465-66520]"
  }, {
    "left" : "addingRoot = ancestor;",
    "right" : "addingRoot = ancestor;",
    "info" : "ExpressionStatement[66258-66280]:ExpressionStatement[66475-66497]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[66289-66295]:BreakStatement[66506-66512]"
  }, {
    "left" : "if (type == Token.FUNCTION)",
    "right" : "if (type == Token.FUNCTION)",
    "info" : "IfStatement[66309-66407]:IfStatement[66526-66624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66337-66407]:Block[66554-66624]"
  }, {
    "left" : "addingRoot = ancestor.getLastChild();",
    "right" : "addingRoot = ancestor.getLastChild();",
    "info" : "ExpressionStatement[66347-66384]:ExpressionStatement[66564-66601]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[66393-66399]:BreakStatement[66610-66616]"
  }, {
    "left" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
    "right" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
    "info" : "ExpressionStatement[66466-66576]:ExpressionStatement[66683-66793]"
  }, {
    "left" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
    "right" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
    "info" : "ExpressionStatement[66581-66706]:ExpressionStatement[66798-66923]"
  }, {
    "left" : "return addingRoot;",
    "right" : "return addingRoot;",
    "info" : "ReturnStatement[66711-66729]:ReturnStatement[66928-66946]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[66803-66809]:Modifier[67020-67026]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[66810-66816]:Modifier[67027-67033]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[66817-66821]:SimpleType[67034-67038]"
  }, {
    "left" : "newFunctionNode",
    "right" : "newFunctionNode",
    "info" : "SimpleName[66822-66837]:SimpleName[67039-67054]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[66838-66849]:SingleVariableDeclaration[67055-67066]"
  }, {
    "left" : "List<Node> params",
    "right" : "List<Node> params",
    "info" : "SingleVariableDeclaration[66851-66868]:SingleVariableDeclaration[67068-67085]"
  }, {
    "left" : "Node body",
    "right" : "Node body",
    "info" : "SingleVariableDeclaration[66876-66885]:SingleVariableDeclaration[67093-67102]"
  }, {
    "left" : "int lineno",
    "right" : "int lineno",
    "info" : "SingleVariableDeclaration[66887-66897]:SingleVariableDeclaration[67104-67114]"
  }, {
    "left" : "int charno",
    "right" : "int charno",
    "info" : "SingleVariableDeclaration[66899-66909]:SingleVariableDeclaration[67116-67126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66911-67314]:Block[67128-67531]"
  }, {
    "left" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
    "right" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
    "info" : "VariableDeclarationStatement[66917-66974]:VariableDeclarationStatement[67134-67191]"
  }, {
    "left" : "for (Node param : params)",
    "right" : "for (Node param : params)",
    "info" : "EnhancedForStatement[66979-67056]:EnhancedForStatement[67196-67273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67005-67056]:Block[67222-67273]"
  }, {
    "left" : "parameterParen.addChildToBack(param);",
    "right" : "parameterParen.addChildToBack(param);",
    "info" : "ExpressionStatement[67013-67050]:ExpressionStatement[67230-67267]"
  }, {
    "left" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
    "right" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
    "info" : "VariableDeclarationStatement[67061-67118]:VariableDeclarationStatement[67278-67335]"
  }, {
    "left" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
    "right" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
    "info" : "ExpressionStatement[67123-67209]:ExpressionStatement[67340-67426]"
  }, {
    "left" : "function.addChildToBack(parameterParen);",
    "right" : "function.addChildToBack(parameterParen);",
    "info" : "ExpressionStatement[67214-67254]:ExpressionStatement[67431-67471]"
  }, {
    "left" : "function.addChildToBack(body);",
    "right" : "function.addChildToBack(body);",
    "info" : "ExpressionStatement[67259-67289]:ExpressionStatement[67476-67506]"
  }, {
    "left" : "return function;",
    "right" : "return function;",
    "info" : "ReturnStatement[67294-67310]:ReturnStatement[67511-67527]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[67600-67606]:Modifier[67817-67823]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[67607-67613]:Modifier[67824-67830]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[67614-67618]:SimpleType[67831-67835]"
  }, {
    "left" : "newQualifiedNameNode",
    "right" : "newQualifiedNameNode",
    "info" : "SimpleName[67619-67639]:SimpleName[67836-67856]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[67647-67674]:SingleVariableDeclaration[67864-67891]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[67676-67687]:SingleVariableDeclaration[67893-67904]"
  }, {
    "left" : "int lineno",
    "right" : "int lineno",
    "info" : "SingleVariableDeclaration[67689-67699]:SingleVariableDeclaration[67906-67916]"
  }, {
    "left" : "int charno",
    "right" : "int charno",
    "info" : "SingleVariableDeclaration[67701-67711]:SingleVariableDeclaration[67918-67928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67713-68473]:Block[67930-68690]"
  }, {
    "left" : "int endPos = name.indexOf('.');",
    "right" : "int endPos = name.indexOf('.');",
    "info" : "VariableDeclarationStatement[67719-67750]:VariableDeclarationStatement[67936-67967]"
  }, {
    "left" : "if (endPos == -1)",
    "right" : "if (endPos == -1)",
    "info" : "IfStatement[67755-67836]:IfStatement[67972-68053]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67773-67836]:Block[67990-68053]"
  }, {
    "left" : "return newName(convention, name, lineno, charno);",
    "right" : "return newName(convention, name, lineno, charno);",
    "info" : "ReturnStatement[67781-67830]:ReturnStatement[67998-68047]"
  }, {
    "left" : "Node node = newName(\n        convention, name.substring(0, endPos), lineno, charno);",
    "right" : "Node node = newName(\n        convention, name.substring(0, endPos), lineno, charno);",
    "info" : "VariableDeclarationStatement[67841-67925]:VariableDeclarationStatement[68058-68142]"
  }, {
    "left" : "int startPos;",
    "right" : "int startPos;",
    "info" : "VariableDeclarationStatement[67930-67943]:VariableDeclarationStatement[68147-68160]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[67948-68451]:DoStatement[68165-68668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67951-68429]:Block[68168-68646]"
  }, {
    "left" : "startPos = endPos + 1;",
    "right" : "startPos = endPos + 1;",
    "info" : "ExpressionStatement[67959-67981]:ExpressionStatement[68176-68198]"
  }, {
    "left" : "endPos = name.indexOf('.', startPos);",
    "right" : "endPos = name.indexOf('.', startPos);",
    "info" : "ExpressionStatement[67988-68025]:ExpressionStatement[68205-68242]"
  }, {
    "left" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
    "right" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
    "info" : "VariableDeclarationStatement[68032-68165]:VariableDeclarationStatement[68249-68382]"
  }, {
    "left" : "Node propNode = Node.newString(Token.STRING, part, lineno, charno);",
    "right" : "Node propNode = Node.newString(Token.STRING, part, lineno, charno);",
    "info" : "VariableDeclarationStatement[68172-68239]:VariableDeclarationStatement[68389-68456]"
  }, {
    "left" : "if (convention.isConstantKey(part))",
    "right" : "if (convention.isConstantKey(part))",
    "info" : "IfStatement[68246-68353]:IfStatement[68463-68570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68282-68353]:Block[68499-68570]"
  }, {
    "left" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "right" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "info" : "ExpressionStatement[68292-68345]:ExpressionStatement[68509-68562]"
  }, {
    "left" : "node = new Node(Token.GETPROP, node, propNode, lineno, charno);",
    "right" : "node = new Node(Token.GETPROP, node, propNode, lineno, charno);",
    "info" : "ExpressionStatement[68360-68423]:ExpressionStatement[68577-68640]"
  }, {
    "left" : "return node;",
    "right" : "return node;",
    "info" : "ReturnStatement[68457-68469]:ReturnStatement[68674-68686]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[69004-69010]:Modifier[69221-69227]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[69011-69015]:SimpleType[69228-69232]"
  }, {
    "left" : "newQualifiedNameNode",
    "right" : "newQualifiedNameNode",
    "info" : "SimpleName[69016-69036]:SimpleName[69233-69253]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[69044-69071]:SingleVariableDeclaration[69261-69288]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[69073-69084]:SingleVariableDeclaration[69290-69301]"
  }, {
    "left" : "Node basisNode",
    "right" : "Node basisNode",
    "info" : "SingleVariableDeclaration[69086-69100]:SingleVariableDeclaration[69303-69317]"
  }, {
    "left" : "String originalName",
    "right" : "String originalName",
    "info" : "SingleVariableDeclaration[69108-69127]:SingleVariableDeclaration[69325-69344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69129-69271]:Block[69346-69488]"
  }, {
    "left" : "Node node = newQualifiedNameNode(convention, name, -1, -1);",
    "right" : "Node node = newQualifiedNameNode(convention, name, -1, -1);",
    "info" : "VariableDeclarationStatement[69135-69194]:VariableDeclarationStatement[69352-69411]"
  }, {
    "left" : "setDebugInformation(node, basisNode, originalName);",
    "right" : "setDebugInformation(node, basisNode, originalName);",
    "info" : "ExpressionStatement[69199-69250]:ExpressionStatement[69416-69467]"
  }, {
    "left" : "return node;",
    "right" : "return node;",
    "info" : "ReturnStatement[69255-69267]:ReturnStatement[69472-69484]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[69361-69367]:Modifier[69578-69584]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[69368-69374]:Modifier[69585-69591]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[69375-69379]:SimpleType[69592-69596]"
  }, {
    "left" : "getRootOfQualifiedName",
    "right" : "getRootOfQualifiedName",
    "info" : "SimpleName[69380-69402]:SimpleName[69597-69619]"
  }, {
    "left" : "Node qName",
    "right" : "Node qName",
    "info" : "SingleVariableDeclaration[69403-69413]:SingleVariableDeclaration[69620-69630]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69415-69686]:Block[69632-69903]"
  }, {
    "left" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
    "right" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
    "info" : "ForStatement[69421-69682]:ForStatement[69638-69899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69498-69682]:Block[69715-69899]"
  }, {
    "left" : "int type = current.getType();",
    "right" : "int type = current.getType();",
    "info" : "VariableDeclarationStatement[69506-69535]:VariableDeclarationStatement[69723-69752]"
  }, {
    "left" : "if (type == Token.NAME || type == Token.THIS)",
    "right" : "if (type == Token.NAME || type == Token.THIS)",
    "info" : "IfStatement[69542-69621]:IfStatement[69759-69838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69588-69621]:Block[69805-69838]"
  }, {
    "left" : "return current;",
    "right" : "return current;",
    "info" : "ReturnStatement[69598-69613]:ReturnStatement[69815-69830]"
  }, {
    "left" : "Preconditions.checkState(type == Token.GETPROP);",
    "right" : "Preconditions.checkState(type == Token.GETPROP);",
    "info" : "ExpressionStatement[69628-69676]:ExpressionStatement[69845-69893]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[69998-70004]:Modifier[70215-70221]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[70005-70009]:PrimitiveType[70222-70226]"
  }, {
    "left" : "setDebugInformation",
    "right" : "setDebugInformation",
    "info" : "SimpleName[70010-70029]:SimpleName[70227-70246]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[70030-70039]:SingleVariableDeclaration[70247-70256]"
  }, {
    "left" : "Node basisNode",
    "right" : "Node basisNode",
    "info" : "SingleVariableDeclaration[70041-70055]:SingleVariableDeclaration[70258-70272]"
  }, {
    "left" : "String originalName",
    "right" : "String originalName",
    "info" : "SingleVariableDeclaration[70091-70110]:SingleVariableDeclaration[70308-70327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70112-70221]:Block[70329-70438]"
  }, {
    "left" : "node.copyInformationFromForTree(basisNode);",
    "right" : "node.copyInformationFromForTree(basisNode);",
    "info" : "ExpressionStatement[70118-70161]:ExpressionStatement[70335-70378]"
  }, {
    "left" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
    "right" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
    "info" : "ExpressionStatement[70166-70217]:ExpressionStatement[70383-70434]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[70225-70232]:Modifier[70442-70449]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[70233-70239]:Modifier[70450-70456]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[70240-70244]:SimpleType[70457-70461]"
  }, {
    "left" : "newName",
    "right" : "newName",
    "info" : "SimpleName[70245-70252]:SimpleName[70462-70469]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[70260-70287]:SingleVariableDeclaration[70477-70504]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[70289-70300]:SingleVariableDeclaration[70506-70517]"
  }, {
    "left" : "int lineno",
    "right" : "int lineno",
    "info" : "SingleVariableDeclaration[70302-70312]:SingleVariableDeclaration[70519-70529]"
  }, {
    "left" : "int charno",
    "right" : "int charno",
    "info" : "SingleVariableDeclaration[70314-70324]:SingleVariableDeclaration[70531-70541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70326-70527]:Block[70543-70744]"
  }, {
    "left" : "Node nameNode = Node.newString(Token.NAME, name, lineno, charno);",
    "right" : "Node nameNode = Node.newString(Token.NAME, name, lineno, charno);",
    "info" : "VariableDeclarationStatement[70332-70397]:VariableDeclarationStatement[70549-70614]"
  }, {
    "left" : "if (convention.isConstant(name))",
    "right" : "if (convention.isConstant(name))",
    "info" : "IfStatement[70402-70502]:IfStatement[70619-70719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70435-70502]:Block[70652-70719]"
  }, {
    "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "info" : "ExpressionStatement[70443-70496]:ExpressionStatement[70660-70713]"
  }, {
    "left" : "return nameNode;",
    "right" : "return nameNode;",
    "info" : "ReturnStatement[70507-70523]:ReturnStatement[70724-70740]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[70857-70863]:Modifier[71074-71080]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[70864-70868]:SimpleType[71081-71085]"
  }, {
    "left" : "newName",
    "right" : "newName",
    "info" : "SimpleName[70869-70876]:SimpleName[71086-71093]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[70884-70911]:SingleVariableDeclaration[71101-71128]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[70913-70924]:SingleVariableDeclaration[71130-71141]"
  }, {
    "left" : "Node basisNode",
    "right" : "Node basisNode",
    "info" : "SingleVariableDeclaration[70926-70940]:SingleVariableDeclaration[71143-71157]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70942-71175]:Block[71159-71392]"
  }, {
    "left" : "Node nameNode = Node.newString(Token.NAME, name);",
    "right" : "Node nameNode = Node.newString(Token.NAME, name);",
    "info" : "VariableDeclarationStatement[70948-70997]:VariableDeclarationStatement[71165-71214]"
  }, {
    "left" : "if (convention.isConstantKey(name))",
    "right" : "if (convention.isConstantKey(name))",
    "info" : "IfStatement[71002-71105]:IfStatement[71219-71322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71038-71105]:Block[71255-71322]"
  }, {
    "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "info" : "ExpressionStatement[71046-71099]:ExpressionStatement[71263-71316]"
  }, {
    "left" : "nameNode.copyInformationFrom(basisNode);",
    "right" : "nameNode.copyInformationFrom(basisNode);",
    "info" : "ExpressionStatement[71110-71150]:ExpressionStatement[71327-71367]"
  }, {
    "left" : "return nameNode;",
    "right" : "return nameNode;",
    "info" : "ReturnStatement[71155-71171]:ReturnStatement[71372-71388]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[71692-71698]:Modifier[71909-71915]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[71699-71703]:SimpleType[71916-71920]"
  }, {
    "left" : "newName",
    "right" : "newName",
    "info" : "SimpleName[71704-71711]:SimpleName[71921-71928]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[71719-71746]:SingleVariableDeclaration[71936-71963]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[71748-71759]:SingleVariableDeclaration[71965-71976]"
  }, {
    "left" : "Node basisNode",
    "right" : "Node basisNode",
    "info" : "SingleVariableDeclaration[71767-71781]:SingleVariableDeclaration[71984-71998]"
  }, {
    "left" : "String originalName",
    "right" : "String originalName",
    "info" : "SingleVariableDeclaration[71783-71802]:SingleVariableDeclaration[72000-72019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71804-71948]:Block[72021-72165]"
  }, {
    "left" : "Node nameNode = newName(convention, name, basisNode);",
    "right" : "Node nameNode = newName(convention, name, basisNode);",
    "info" : "VariableDeclarationStatement[71810-71863]:VariableDeclarationStatement[72027-72080]"
  }, {
    "left" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
    "right" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
    "info" : "ExpressionStatement[71868-71923]:ExpressionStatement[72085-72140]"
  }, {
    "left" : "return nameNode;",
    "right" : "return nameNode;",
    "info" : "ReturnStatement[71928-71944]:ReturnStatement[72145-72161]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[72548-72554]:Modifier[72765-72771]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[72555-72562]:PrimitiveType[72772-72779]"
  }, {
    "left" : "isLatin",
    "right" : "isLatin",
    "info" : "SimpleName[72563-72570]:SimpleName[72780-72787]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[72571-72579]:SingleVariableDeclaration[72788-72796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72581-72819]:Block[72798-73036]"
  }, {
    "left" : "char LARGEST_BASIC_LATIN = 0x7f;",
    "right" : "char LARGEST_BASIC_LATIN = 0x7f;",
    "info" : "VariableDeclarationStatement[72587-72619]:VariableDeclarationStatement[72804-72836]"
  }, {
    "left" : "int len = s.length();",
    "right" : "int len = s.length();",
    "info" : "VariableDeclarationStatement[72624-72645]:VariableDeclarationStatement[72841-72862]"
  }, {
    "left" : "for (int index = 0; index < len; index++)",
    "right" : "for (int index = 0; index < len; index++)",
    "info" : "ForStatement[72650-72798]:ForStatement[72867-73015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72692-72798]:Block[72909-73015]"
  }, {
    "left" : "char c = s.charAt(index);",
    "right" : "char c = s.charAt(index);",
    "info" : "VariableDeclarationStatement[72700-72725]:VariableDeclarationStatement[72917-72942]"
  }, {
    "left" : "if (c > LARGEST_BASIC_LATIN)",
    "right" : "if (c > LARGEST_BASIC_LATIN)",
    "info" : "IfStatement[72732-72792]:IfStatement[72949-73009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72761-72792]:Block[72978-73009]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[72771-72784]:ReturnStatement[72988-73001]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[72803-72815]:ReturnStatement[73020-73032]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[72975-72981]:Modifier[73192-73198]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[72982-72989]:PrimitiveType[73199-73206]"
  }, {
    "left" : "isValidPropertyName",
    "right" : "isValidPropertyName",
    "info" : "SimpleName[72990-73009]:SimpleName[73207-73226]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[73010-73021]:SingleVariableDeclaration[73227-73238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73023-73484]:Block[73240-73701]"
  }, {
    "left" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
    "right" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
    "info" : "ReturnStatement[73029-73480]:ReturnStatement[73246-73697]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[73488-73495]:Modifier[73705-73712]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[73496-73502]:Modifier[73713-73719]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[73503-73508]:TYPE_DECLARATION_KIND[73720-73725]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[73608-73614]:Modifier[73825-73831]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[73615-73619]:PrimitiveType[73832-73836]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[73620-73625]:SimpleName[73837-73842]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[73626-73632]:SingleVariableDeclaration[73843-73849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73634-73921]:Block[73851-74138]"
  }, {
    "left" : "if (n.getType() == Token.NAME)",
    "right" : "if (n.getType() == Token.NAME)",
    "info" : "IfStatement[73642-73915]:IfStatement[73859-74132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73673-73915]:Block[73890-74132]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[73683-73711]:VariableDeclarationStatement[73900-73928]"
  }, {
    "left" : "if (parent != null && parent.getType() == Token.VAR)",
    "right" : "if (parent != null && parent.getType() == Token.VAR)",
    "info" : "IfStatement[73720-73907]:IfStatement[73937-74124]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73773-73907]:Block[73990-74124]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[73785-73813]:VariableDeclarationStatement[74002-74030]"
  }, {
    "left" : "if (!vars.containsKey(name))",
    "right" : "if (!vars.containsKey(name))",
    "info" : "IfStatement[73824-73897]:IfStatement[74041-74114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73853-73897]:Block[74070-74114]"
  }, {
    "left" : "vars.put(name, n);",
    "right" : "vars.put(name, n);",
    "info" : "ExpressionStatement[73867-73885]:ExpressionStatement[74084-74102]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[74022-74028]:Modifier[74239-74245]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[74029-74035]:Modifier[74246-74252]"
  }, {
    "left" : "Collection<Node>",
    "right" : "Collection<Node>",
    "info" : "ParameterizedType[74036-74052]:ParameterizedType[74253-74269]"
  }, {
    "left" : "getVarsDeclaredInBranch",
    "right" : "getVarsDeclaredInBranch",
    "info" : "SimpleName[74053-74076]:SimpleName[74270-74293]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[74077-74086]:SingleVariableDeclaration[74294-74303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74088-74259]:Block[74305-74476]"
  }, {
    "left" : "VarCollector collector = new VarCollector();",
    "right" : "VarCollector collector = new VarCollector();",
    "info" : "VariableDeclarationStatement[74094-74138]:VariableDeclarationStatement[74311-74355]"
  }, {
    "left" : "visitPreOrder(\n        root,\n        collector,\n        MATCH_NOT_FUNCTION);",
    "right" : "visitPreOrder(\n        root,\n        collector,\n        MATCH_NOT_FUNCTION);",
    "info" : "ExpressionStatement[74143-74219]:ExpressionStatement[74360-74436]"
  }, {
    "left" : "return collector.vars.values();",
    "right" : "return collector.vars.values();",
    "info" : "ReturnStatement[74224-74255]:ReturnStatement[74441-74472]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[74381-74387]:Modifier[74598-74604]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[74388-74395]:PrimitiveType[74605-74612]"
  }, {
    "left" : "isPrototypePropertyDeclaration",
    "right" : "isPrototypePropertyDeclaration",
    "info" : "SimpleName[74396-74426]:SimpleName[74613-74643]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[74427-74433]:SingleVariableDeclaration[74644-74650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74435-74561]:Block[74652-74778]"
  }, {
    "left" : "if (!isExprAssign(n))",
    "right" : "if (!isExprAssign(n))",
    "info" : "IfStatement[74441-74490]:IfStatement[74658-74707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74463-74490]:Block[74680-74707]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[74471-74484]:ReturnStatement[74688-74701]"
  }, {
    "left" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
    "right" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
    "info" : "ReturnStatement[74495-74557]:ReturnStatement[74712-74774]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[74565-74571]:Modifier[74782-74788]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[74572-74579]:PrimitiveType[74789-74796]"
  }, {
    "left" : "isPrototypeProperty",
    "right" : "isPrototypeProperty",
    "info" : "SimpleName[74580-74599]:SimpleName[74797-74816]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[74600-74606]:SingleVariableDeclaration[74817-74823]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74608-74801]:Block[74825-75018]"
  }, {
    "left" : "String lhsString = n.getQualifiedName();",
    "right" : "String lhsString = n.getQualifiedName();",
    "info" : "VariableDeclarationStatement[74614-74654]:VariableDeclarationStatement[74831-74871]"
  }, {
    "left" : "if (lhsString == null)",
    "right" : "if (lhsString == null)",
    "info" : "IfStatement[74659-74709]:IfStatement[74876-74926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74682-74709]:Block[74899-74926]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[74690-74703]:ReturnStatement[74907-74920]"
  }, {
    "left" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
    "right" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
    "info" : "VariableDeclarationStatement[74714-74766]:VariableDeclarationStatement[74931-74983]"
  }, {
    "left" : "return prototypeIdx != -1;",
    "right" : "return prototypeIdx != -1;",
    "info" : "ReturnStatement[74771-74797]:ReturnStatement[74988-75014]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[74881-74887]:Modifier[75098-75104]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[74888-74892]:SimpleType[75105-75109]"
  }, {
    "left" : "getPrototypeClassName",
    "right" : "getPrototypeClassName",
    "info" : "SimpleName[74893-74914]:SimpleName[75110-75131]"
  }, {
    "left" : "Node qName",
    "right" : "Node qName",
    "info" : "SingleVariableDeclaration[74915-74925]:SingleVariableDeclaration[75132-75142]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74927-75164]:Block[75144-75381]"
  }, {
    "left" : "Node cur = qName;",
    "right" : "Node cur = qName;",
    "info" : "VariableDeclarationStatement[74933-74950]:VariableDeclarationStatement[75150-75167]"
  }, {
    "left" : "while (isGetProp(cur))",
    "right" : "while (isGetProp(cur))",
    "info" : "WhileStatement[74955-75143]:WhileStatement[75172-75360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74978-75143]:Block[75195-75360]"
  }, {
    "left" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
    "right" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
    "info" : "IfStatement[74986-75137]:IfStatement[75203-75354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75042-75087]:Block[75259-75304]"
  }, {
    "left" : "return cur.getFirstChild();",
    "right" : "return cur.getFirstChild();",
    "info" : "ReturnStatement[75052-75079]:ReturnStatement[75269-75296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75093-75137]:Block[75310-75354]"
  }, {
    "left" : "cur = cur.getFirstChild();",
    "right" : "cur = cur.getFirstChild();",
    "info" : "ExpressionStatement[75103-75129]:ExpressionStatement[75320-75346]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[75148-75160]:ReturnStatement[75365-75377]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[75254-75260]:Modifier[75471-75477]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[75261-75267]:SimpleType[75478-75484]"
  }, {
    "left" : "getPrototypePropertyName",
    "right" : "getPrototypePropertyName",
    "info" : "SimpleName[75268-75292]:SimpleName[75485-75509]"
  }, {
    "left" : "Node qName",
    "right" : "Node qName",
    "info" : "SingleVariableDeclaration[75293-75303]:SingleVariableDeclaration[75510-75520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75305-75526]:Block[75522-75743]"
  }, {
    "left" : "String qNameStr = qName.getQualifiedName();",
    "right" : "String qNameStr = qName.getQualifiedName();",
    "info" : "VariableDeclarationStatement[75311-75354]:VariableDeclarationStatement[75528-75571]"
  }, {
    "left" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
    "right" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
    "info" : "VariableDeclarationStatement[75359-75414]:VariableDeclarationStatement[75576-75631]"
  }, {
    "left" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
    "right" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
    "info" : "VariableDeclarationStatement[75419-75478]:VariableDeclarationStatement[75636-75695]"
  }, {
    "left" : "return qNameStr.substring(memberIndex);",
    "right" : "return qNameStr.substring(memberIndex);",
    "info" : "ReturnStatement[75483-75522]:ReturnStatement[75700-75739]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[75609-75615]:Modifier[75826-75832]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[75616-75620]:SimpleType[75833-75837]"
  }, {
    "left" : "newUndefinedNode",
    "right" : "newUndefinedNode",
    "info" : "SimpleName[75621-75637]:SimpleName[75838-75854]"
  }, {
    "left" : "Node srcReferenceNode",
    "right" : "Node srcReferenceNode",
    "info" : "SingleVariableDeclaration[75638-75659]:SingleVariableDeclaration[75855-75876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75661-75841]:Block[75878-76058]"
  }, {
    "left" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
    "right" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
    "info" : "VariableDeclarationStatement[75667-75719]:VariableDeclarationStatement[75884-75936]"
  }, {
    "left" : "if (srcReferenceNode != null)",
    "right" : "if (srcReferenceNode != null)",
    "info" : "IfStatement[75724-75820]:IfStatement[75941-76037]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75754-75820]:Block[75971-76037]"
  }, {
    "left" : "node.copyInformationFromForTree(srcReferenceNode);",
    "right" : "node.copyInformationFromForTree(srcReferenceNode);",
    "info" : "ExpressionStatement[75764-75814]:ExpressionStatement[75981-76031]"
  }, {
    "left" : "return node;",
    "right" : "return node;",
    "info" : "ReturnStatement[75825-75837]:ReturnStatement[76042-76054]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[75936-75942]:Modifier[76153-76159]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[75943-75947]:SimpleType[76160-76164]"
  }, {
    "left" : "newVarNode",
    "right" : "newVarNode",
    "info" : "SimpleName[75948-75958]:SimpleName[76165-76175]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[75959-75970]:SingleVariableDeclaration[76176-76187]"
  }, {
    "left" : "Node value",
    "right" : "Node value",
    "info" : "SingleVariableDeclaration[75972-75982]:SingleVariableDeclaration[76189-76199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75984-76314]:Block[76201-76531]"
  }, {
    "left" : "Node nodeName = Node.newString(Token.NAME, name);",
    "right" : "Node nodeName = Node.newString(Token.NAME, name);",
    "info" : "VariableDeclarationStatement[75990-76039]:VariableDeclarationStatement[76207-76256]"
  }, {
    "left" : "if (value != null)",
    "right" : "if (value != null)",
    "info" : "IfStatement[76044-76208]:IfStatement[76261-76425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76063-76208]:Block[76280-76425]"
  }, {
    "left" : "Preconditions.checkState(value.getNext() == null);",
    "right" : "Preconditions.checkState(value.getNext() == null);",
    "info" : "ExpressionStatement[76071-76121]:ExpressionStatement[76288-76338]"
  }, {
    "left" : "nodeName.addChildToBack(value);",
    "right" : "nodeName.addChildToBack(value);",
    "info" : "ExpressionStatement[76128-76159]:ExpressionStatement[76345-76376]"
  }, {
    "left" : "nodeName.copyInformationFrom(value);",
    "right" : "nodeName.copyInformationFrom(value);",
    "info" : "ExpressionStatement[76166-76202]:ExpressionStatement[76383-76419]"
  }, {
    "left" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
    "right" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
    "info" : "VariableDeclarationStatement[76213-76293]:VariableDeclarationStatement[76430-76510]"
  }, {
    "left" : "return var;",
    "right" : "return var;",
    "info" : "ReturnStatement[76299-76310]:ReturnStatement[76516-76527]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[76396-76403]:Modifier[76613-76620]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[76404-76410]:Modifier[76621-76627]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[76411-76416]:TYPE_DECLARATION_KIND[76628-76633]"
  }, {
    "left" : "MatchNameNode",
    "right" : "MatchNameNode",
    "info" : "SimpleName[76487-76500]:SimpleName[76704-76717]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[76501-76512]:SingleVariableDeclaration[76718-76729]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76513-76544]:Block[76730-76761]"
  }, {
    "left" : "this.name = name;",
    "right" : "this.name = name;",
    "info" : "ExpressionStatement[76521-76538]:ExpressionStatement[76738-76755]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[76550-76556]:Modifier[76767-76773]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[76557-76564]:PrimitiveType[76774-76781]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[76565-76570]:SimpleName[76782-76787]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[76571-76577]:SingleVariableDeclaration[76788-76794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76579-76666]:Block[76796-76883]"
  }, {
    "left" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
    "right" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
    "info" : "ReturnStatement[76587-76660]:ReturnStatement[76804-76877]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[76747-76753]:Modifier[76964-76970]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[76754-76759]:TYPE_DECLARATION_KIND[76971-76976]"
  }, {
    "left" : "MatchNodeType",
    "right" : "MatchNodeType",
    "info" : "SimpleName[76827-76840]:SimpleName[77044-77057]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[76841-76849]:SingleVariableDeclaration[77058-77066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76850-76881]:Block[77067-77098]"
  }, {
    "left" : "this.type = type;",
    "right" : "this.type = type;",
    "info" : "ExpressionStatement[76858-76875]:ExpressionStatement[77075-77092]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[76887-76893]:Modifier[77104-77110]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[76894-76901]:PrimitiveType[77111-77118]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[76902-76907]:SimpleName[77119-77124]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[76908-76914]:SingleVariableDeclaration[77125-77131]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76916-76957]:Block[77133-77174]"
  }, {
    "left" : "return n.getType() == type;",
    "right" : "return n.getType() == type;",
    "info" : "ReturnStatement[76924-76951]:ReturnStatement[77141-77168]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[77038-77044]:Modifier[77255-77261]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[77045-77050]:TYPE_DECLARATION_KIND[77262-77267]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[77101-77107]:Modifier[77318-77324]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[77108-77115]:PrimitiveType[77325-77332]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[77116-77121]:SimpleName[77333-77338]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[77122-77128]:SingleVariableDeclaration[77339-77345]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77130-77204]:Block[77347-77421]"
  }, {
    "left" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
    "right" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
    "info" : "ReturnStatement[77138-77198]:ReturnStatement[77355-77415]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[77286-77292]:Modifier[77503-77509]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[77293-77298]:TYPE_DECLARATION_KIND[77510-77515]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[77348-77354]:Modifier[77565-77571]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[77355-77362]:PrimitiveType[77572-77579]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[77363-77368]:SimpleName[77580-77585]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[77369-77375]:SingleVariableDeclaration[77586-77592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77377-77413]:Block[77594-77630]"
  }, {
    "left" : "return !isFunction(n);",
    "right" : "return !isFunction(n);",
    "info" : "ReturnStatement[77385-77407]:ReturnStatement[77602-77624]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[77586-77592]:Modifier[77803-77809]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[77593-77598]:TYPE_DECLARATION_KIND[77810-77815]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[77653-77659]:Modifier[77870-77876]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[77660-77667]:PrimitiveType[77877-77884]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[77668-77673]:SimpleName[77885-77890]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[77674-77680]:SingleVariableDeclaration[77891-77897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77682-77901]:Block[77899-78118]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[77690-77718]:VariableDeclarationStatement[77907-77935]"
  }, {
    "left" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
    "right" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
    "info" : "ReturnStatement[77725-77895]:ReturnStatement[77942-78112]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[77995-78001]:Modifier[78212-78218]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[78002-78005]:PrimitiveType[78219-78222]"
  }, {
    "left" : "getNodeTypeReferenceCount",
    "right" : "getNodeTypeReferenceCount",
    "info" : "SimpleName[78006-78031]:SimpleName[78223-78248]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[78039-78048]:SingleVariableDeclaration[78256-78265]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[78050-78058]:SingleVariableDeclaration[78267-78275]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[78060-78096]:SingleVariableDeclaration[78277-78313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78098-78177]:Block[78315-78394]"
  }, {
    "left" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
    "right" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
    "info" : "ReturnStatement[78104-78173]:ReturnStatement[78321-78390]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[78256-78262]:Modifier[78473-78479]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[78263-78270]:PrimitiveType[78480-78487]"
  }, {
    "left" : "isNameReferenced",
    "right" : "isNameReferenced",
    "info" : "SimpleName[78271-78287]:SimpleName[78488-78504]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[78288-78297]:SingleVariableDeclaration[78505-78514]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[78333-78344]:SingleVariableDeclaration[78550-78561]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[78380-78416]:SingleVariableDeclaration[78597-78633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78418-78492]:Block[78635-78709]"
  }, {
    "left" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
    "right" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
    "info" : "ReturnStatement[78424-78488]:ReturnStatement[78641-78705]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[78571-78577]:Modifier[78788-78794]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[78578-78585]:PrimitiveType[78795-78802]"
  }, {
    "left" : "isNameReferenced",
    "right" : "isNameReferenced",
    "info" : "SimpleName[78586-78602]:SimpleName[78803-78819]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[78603-78612]:SingleVariableDeclaration[78820-78829]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[78614-78625]:SingleVariableDeclaration[78831-78842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78627-78704]:Block[78844-78921]"
  }, {
    "left" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
    "right" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
    "info" : "ReturnStatement[78633-78700]:ReturnStatement[78850-78917]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[78801-78807]:Modifier[79018-79024]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[78808-78811]:PrimitiveType[79025-79028]"
  }, {
    "left" : "getNameReferenceCount",
    "right" : "getNameReferenceCount",
    "info" : "SimpleName[78812-78833]:SimpleName[79029-79050]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[78834-78843]:SingleVariableDeclaration[79051-79060]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[78845-78856]:SingleVariableDeclaration[79062-79073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78858-78955]:Block[79075-79172]"
  }, {
    "left" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
    "right" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
    "info" : "ReturnStatement[78864-78951]:ReturnStatement[79081-79168]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[79051-79057]:Modifier[79268-79274]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[79058-79065]:PrimitiveType[79275-79282]"
  }, {
    "left" : "has",
    "right" : "has",
    "info" : "SimpleName[79066-79069]:SimpleName[79283-79286]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[79070-79079]:SingleVariableDeclaration[79287-79296]"
  }, {
    "left" : "Predicate<Node> pred",
    "right" : "Predicate<Node> pred",
    "info" : "SingleVariableDeclaration[79102-79122]:SingleVariableDeclaration[79319-79339]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[79145-79181]:SingleVariableDeclaration[79362-79398]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79183-79486]:Block[79400-79703]"
  }, {
    "left" : "if (pred.apply(node))",
    "right" : "if (pred.apply(node))",
    "info" : "IfStatement[79189-79237]:IfStatement[79406-79454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79211-79237]:Block[79428-79454]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[79219-79231]:ReturnStatement[79436-79448]"
  }, {
    "left" : "if (!traverseChildrenPred.apply(node))",
    "right" : "if (!traverseChildrenPred.apply(node))",
    "info" : "IfStatement[79243-79309]:IfStatement[79460-79526]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79282-79309]:Block[79499-79526]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[79290-79303]:ReturnStatement[79507-79520]"
  }, {
    "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[79315-79463]:ForStatement[79532-79680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79379-79463]:Block[79596-79680]"
  }, {
    "left" : "if (has(c, pred, traverseChildrenPred))",
    "right" : "if (has(c, pred, traverseChildrenPred))",
    "info" : "IfStatement[79387-79457]:IfStatement[79604-79674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79427-79457]:Block[79644-79674]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[79437-79449]:ReturnStatement[79654-79666]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[79469-79482]:ReturnStatement[79686-79699]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[79603-79609]:Modifier[79820-79826]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[79610-79613]:PrimitiveType[79827-79830]"
  }, {
    "left" : "getCount",
    "right" : "getCount",
    "info" : "SimpleName[79614-79622]:SimpleName[79831-79839]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[79630-79636]:SingleVariableDeclaration[79847-79853]"
  }, {
    "left" : "Predicate<Node> pred",
    "right" : "Predicate<Node> pred",
    "info" : "SingleVariableDeclaration[79638-79658]:SingleVariableDeclaration[79855-79875]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[79660-79696]:SingleVariableDeclaration[79877-79913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79698-79971]:Block[79915-80188]"
  }, {
    "left" : "int total = 0;",
    "right" : "int total = 0;",
    "info" : "VariableDeclarationStatement[79704-79718]:VariableDeclarationStatement[79921-79935]"
  }, {
    "left" : "if (pred.apply(n))",
    "right" : "if (pred.apply(n))",
    "info" : "IfStatement[79724-79765]:IfStatement[79941-79982]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79743-79765]:Block[79960-79982]"
  }, {
    "left" : "total++;",
    "right" : "total++;",
    "info" : "ExpressionStatement[79751-79759]:ExpressionStatement[79968-79976]"
  }, {
    "left" : "if (traverseChildrenPred.apply(n))",
    "right" : "if (traverseChildrenPred.apply(n))",
    "info" : "IfStatement[79771-79948]:IfStatement[79988-80165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79806-79948]:Block[80023-80165]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[79814-79942]:ForStatement[80031-80159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79875-79942]:Block[80092-80159]"
  }, {
    "left" : "total += getCount(c, pred, traverseChildrenPred);",
    "right" : "total += getCount(c, pred, traverseChildrenPred);",
    "info" : "ExpressionStatement[79885-79934]:ExpressionStatement[80102-80151]"
  }, {
    "left" : "return total;",
    "right" : "return total;",
    "info" : "ReturnStatement[79954-79967]:ReturnStatement[80171-80184]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[80050-80056]:Modifier[80267-80273]"
  }, {
    "left" : "interface",
    "right" : "interface",
    "info" : "TYPE_DECLARATION_KIND[80057-80066]:TYPE_DECLARATION_KIND[80274-80283]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[80081-80085]:PrimitiveType[80298-80302]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[80086-80091]:SimpleName[80303-80308]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[80092-80101]:SingleVariableDeclaration[80309-80318]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[80216-80222]:Modifier[80433-80439]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[80223-80227]:PrimitiveType[80440-80444]"
  }, {
    "left" : "visitPreOrder",
    "right" : "visitPreOrder",
    "info" : "SimpleName[80228-80241]:SimpleName[80445-80458]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[80242-80251]:SingleVariableDeclaration[80459-80468]"
  }, {
    "left" : "Visitor vistor",
    "right" : "Visitor vistor",
    "info" : "SingleVariableDeclaration[80274-80288]:SingleVariableDeclaration[80491-80505]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[80311-80347]:SingleVariableDeclaration[80528-80564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80349-80565]:Block[80566-80782]"
  }, {
    "left" : "vistor.visit(node);",
    "right" : "vistor.visit(node);",
    "info" : "ExpressionStatement[80355-80374]:ExpressionStatement[80572-80591]"
  }, {
    "left" : "if (traverseChildrenPred.apply(node))",
    "right" : "if (traverseChildrenPred.apply(node))",
    "info" : "IfStatement[80380-80561]:IfStatement[80597-80778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80418-80561]:Block[80635-80778]"
  }, {
    "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[80426-80555]:ForStatement[80643-80772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80490-80555]:Block[80707-80772]"
  }, {
    "left" : "visitPreOrder(c, vistor, traverseChildrenPred);",
    "right" : "visitPreOrder(c, vistor, traverseChildrenPred);",
    "info" : "ExpressionStatement[80500-80547]:ExpressionStatement[80717-80764]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[80675-80681]:Modifier[80892-80898]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[80682-80686]:PrimitiveType[80899-80903]"
  }, {
    "left" : "visitPostOrder",
    "right" : "visitPostOrder",
    "info" : "SimpleName[80687-80701]:SimpleName[80904-80918]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[80702-80711]:SingleVariableDeclaration[80919-80928]"
  }, {
    "left" : "Visitor vistor",
    "right" : "Visitor vistor",
    "info" : "SingleVariableDeclaration[80734-80748]:SingleVariableDeclaration[80951-80965]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[80771-80807]:SingleVariableDeclaration[80988-81024]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80809-81026]:Block[81026-81243]"
  }, {
    "left" : "if (traverseChildrenPred.apply(node))",
    "right" : "if (traverseChildrenPred.apply(node))",
    "info" : "IfStatement[80815-80997]:IfStatement[81032-81214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80853-80997]:Block[81070-81214]"
  }, {
    "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[80861-80991]:ForStatement[81078-81208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80925-80991]:Block[81142-81208]"
  }, {
    "left" : "visitPostOrder(c, vistor, traverseChildrenPred);",
    "right" : "visitPostOrder(c, vistor, traverseChildrenPred);",
    "info" : "ExpressionStatement[80935-80983]:ExpressionStatement[81152-81200]"
  }, {
    "left" : "vistor.visit(node);",
    "right" : "vistor.visit(node);",
    "info" : "ExpressionStatement[81003-81022]:ExpressionStatement[81220-81239]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[81095-81101]:Modifier[81312-81318]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[81102-81109]:PrimitiveType[81319-81326]"
  }, {
    "left" : "hasFinally",
    "right" : "hasFinally",
    "info" : "SimpleName[81110-81120]:SimpleName[81327-81337]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[81121-81127]:SingleVariableDeclaration[81338-81344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81129-81228]:Block[81346-81445]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
    "info" : "ExpressionStatement[81135-81189]:ExpressionStatement[81352-81406]"
  }, {
    "left" : "return n.getChildCount() == 3;",
    "right" : "return n.getChildCount() == 3;",
    "info" : "ReturnStatement[81194-81224]:ReturnStatement[81411-81441]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[81322-81328]:Modifier[81539-81545]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[81329-81333]:SimpleType[81546-81550]"
  }, {
    "left" : "getCatchBlock",
    "right" : "getCatchBlock",
    "info" : "SimpleName[81334-81347]:SimpleName[81551-81564]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[81348-81354]:SingleVariableDeclaration[81565-81571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81356-81460]:Block[81573-81677]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
    "info" : "ExpressionStatement[81362-81416]:ExpressionStatement[81579-81633]"
  }, {
    "left" : "return n.getFirstChild().getNext();",
    "right" : "return n.getFirstChild().getNext();",
    "info" : "ReturnStatement[81421-81456]:ReturnStatement[81638-81673]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[81572-81578]:Modifier[81789-81795]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[81579-81586]:PrimitiveType[81796-81803]"
  }, {
    "left" : "hasCatchHandler",
    "right" : "hasCatchHandler",
    "info" : "SimpleName[81587-81602]:SimpleName[81804-81819]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[81603-81609]:SingleVariableDeclaration[81820-81826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81611-81751]:Block[81828-81968]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
    "info" : "ExpressionStatement[81617-81673]:ExpressionStatement[81834-81890]"
  }, {
    "left" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
    "right" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
    "info" : "ReturnStatement[81678-81747]:ReturnStatement[81895-81964]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[81861-81867]:Modifier[82078-82084]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[81868-81874]:Modifier[82085-82091]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[81875-81879]:SimpleType[82092-82096]"
  }, {
    "left" : "getFunctionParameters",
    "right" : "getFunctionParameters",
    "info" : "SimpleName[81880-81901]:SimpleName[82097-82118]"
  }, {
    "left" : "Node fnNode",
    "right" : "Node fnNode",
    "info" : "SingleVariableDeclaration[81902-81913]:SingleVariableDeclaration[82119-82130]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81915-82100]:Block[82132-82317]"
  }, {
    "left" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
    "right" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
    "info" : "ExpressionStatement[81987-82051]:ExpressionStatement[82204-82268]"
  }, {
    "left" : "return fnNode.getFirstChild().getNext();",
    "right" : "return fnNode.getFirstChild().getNext();",
    "info" : "ReturnStatement[82056-82096]:ReturnStatement[82273-82313]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[82806-82812]:Modifier[83023-83029]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[82813-82820]:PrimitiveType[83030-83037]"
  }, {
    "left" : "isConstantName",
    "right" : "isConstantName",
    "info" : "SimpleName[82821-82835]:SimpleName[83038-83052]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[82836-82845]:SingleVariableDeclaration[83053-83062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82847-82907]:Block[83064-83124]"
  }, {
    "left" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
    "right" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
    "info" : "ReturnStatement[82853-82903]:ReturnStatement[83070-83120]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[82977-82983]:Modifier[83194-83200]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[82984-82991]:PrimitiveType[83201-83208]"
  }, {
    "left" : "isConstantByConvention",
    "right" : "isConstantByConvention",
    "info" : "SimpleName[82992-83014]:SimpleName[83209-83231]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[83022-83049]:SingleVariableDeclaration[83239-83266]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[83051-83060]:SingleVariableDeclaration[83268-83277]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[83062-83073]:SingleVariableDeclaration[83279-83290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83075-83400]:Block[83292-83617]"
  }, {
    "left" : "String name = node.getString();",
    "right" : "String name = node.getString();",
    "info" : "VariableDeclarationStatement[83081-83112]:VariableDeclarationStatement[83298-83329]"
  }, {
    "left" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
    "right" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
    "info" : "IfStatement[83117-83396]:IfStatement[83334-83613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83197-83249]:Block[83414-83466]"
  }, {
    "left" : "return convention.isConstantKey(name);",
    "right" : "return convention.isConstantKey(name);",
    "info" : "ReturnStatement[83205-83243]:ReturnStatement[83422-83460]"
  }, {
    "left" : "if (isObjectLitKey(node, parent))",
    "right" : "if (isObjectLitKey(node, parent))",
    "info" : "IfStatement[83255-83396]:IfStatement[83472-83613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83289-83341]:Block[83506-83558]"
  }, {
    "left" : "return convention.isConstantKey(name);",
    "right" : "return convention.isConstantKey(name);",
    "info" : "ReturnStatement[83297-83335]:ReturnStatement[83514-83552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83347-83396]:Block[83564-83613]"
  }, {
    "left" : "return convention.isConstant(name);",
    "right" : "return convention.isConstant(name);",
    "info" : "ReturnStatement[83355-83390]:ReturnStatement[83572-83607]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[83494-83500]:Modifier[83711-83717]"
  }, {
    "left" : "JSDocInfo",
    "right" : "JSDocInfo",
    "info" : "SimpleType[83501-83510]:SimpleType[83718-83727]"
  }, {
    "left" : "getInfoForNameNode",
    "right" : "getInfoForNameNode",
    "info" : "SimpleName[83511-83529]:SimpleName[83728-83746]"
  }, {
    "left" : "Node nameNode",
    "right" : "Node nameNode",
    "info" : "SingleVariableDeclaration[83530-83543]:SingleVariableDeclaration[83747-83760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83545-83929]:Block[83762-84146]"
  }, {
    "left" : "JSDocInfo info = null;",
    "right" : "JSDocInfo info = null;",
    "info" : "VariableDeclarationStatement[83551-83573]:VariableDeclarationStatement[83768-83790]"
  }, {
    "left" : "Node parent = null;",
    "right" : "Node parent = null;",
    "info" : "VariableDeclarationStatement[83578-83597]:VariableDeclarationStatement[83795-83814]"
  }, {
    "left" : "if (nameNode != null)",
    "right" : "if (nameNode != null)",
    "info" : "IfStatement[83602-83706]:IfStatement[83819-83923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83624-83706]:Block[83841-83923]"
  }, {
    "left" : "info = nameNode.getJSDocInfo();",
    "right" : "info = nameNode.getJSDocInfo();",
    "info" : "ExpressionStatement[83632-83663]:ExpressionStatement[83849-83880]"
  }, {
    "left" : "parent = nameNode.getParent();",
    "right" : "parent = nameNode.getParent();",
    "info" : "ExpressionStatement[83670-83700]:ExpressionStatement[83887-83917]"
  }, {
    "left" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
    "right" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
    "info" : "IfStatement[83712-83908]:IfStatement[83929-84125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83865-83908]:Block[84082-84125]"
  }, {
    "left" : "info = parent.getJSDocInfo();",
    "right" : "info = parent.getJSDocInfo();",
    "info" : "ExpressionStatement[83873-83902]:ExpressionStatement[84090-84119]"
  }, {
    "left" : "return info;",
    "right" : "return info;",
    "info" : "ReturnStatement[83913-83925]:ReturnStatement[84130-84142]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[83984-83990]:Modifier[84201-84207]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[83991-83997]:Modifier[84208-84214]"
  }, {
    "left" : "JSDocInfo",
    "right" : "JSDocInfo",
    "info" : "SimpleType[83998-84007]:SimpleType[84215-84224]"
  }, {
    "left" : "getFunctionJSDocInfo",
    "right" : "getFunctionJSDocInfo",
    "info" : "SimpleName[84008-84028]:SimpleName[84225-84245]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[84029-84035]:SingleVariableDeclaration[84246-84252]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84037-84573]:Block[84254-84790]"
  }, {
    "left" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
    "right" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
    "info" : "ExpressionStatement[84043-84099]:ExpressionStatement[84260-84316]"
  }, {
    "left" : "JSDocInfo fnInfo = n.getJSDocInfo();",
    "right" : "JSDocInfo fnInfo = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[84104-84140]:VariableDeclarationStatement[84321-84357]"
  }, {
    "left" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
    "right" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
    "info" : "IfStatement[84145-84550]:IfStatement[84362-84767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84201-84550]:Block[84418-84767]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[84252-84280]:VariableDeclarationStatement[84469-84497]"
  }, {
    "left" : "if (parent.getType() == Token.ASSIGN)",
    "right" : "if (parent.getType() == Token.ASSIGN)",
    "info" : "IfStatement[84287-84544]:IfStatement[84504-84761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84325-84396]:Block[84542-84613]"
  }, {
    "left" : "fnInfo = parent.getJSDocInfo();",
    "right" : "fnInfo = parent.getJSDocInfo();",
    "info" : "ExpressionStatement[84357-84388]:ExpressionStatement[84574-84605]"
  }, {
    "left" : "if (parent.getType() == Token.NAME)",
    "right" : "if (parent.getType() == Token.NAME)",
    "info" : "IfStatement[84402-84544]:IfStatement[84619-84761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84438-84544]:Block[84655-84761]"
  }, {
    "left" : "fnInfo = parent.getParent().getJSDocInfo();",
    "right" : "fnInfo = parent.getParent().getJSDocInfo();",
    "info" : "ExpressionStatement[84493-84536]:ExpressionStatement[84710-84753]"
  }, {
    "left" : "return fnInfo;",
    "right" : "return fnInfo;",
    "info" : "ReturnStatement[84555-84569]:ReturnStatement[84772-84786]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[84681-84687]:Modifier[84898-84904]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[84688-84694]:Modifier[84905-84911]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[84695-84701]:SimpleType[84912-84918]"
  }, {
    "left" : "getSourceName",
    "right" : "getSourceName",
    "info" : "SimpleName[84702-84715]:SimpleName[84919-84932]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[84716-84722]:SingleVariableDeclaration[84933-84939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84724-84920]:Block[84941-85137]"
  }, {
    "left" : "String sourceName = null;",
    "right" : "String sourceName = null;",
    "info" : "VariableDeclarationStatement[84730-84755]:VariableDeclarationStatement[84947-84972]"
  }, {
    "left" : "while (sourceName == null && n != null)",
    "right" : "while (sourceName == null && n != null)",
    "info" : "WhileStatement[84760-84893]:WhileStatement[84977-85110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84800-84893]:Block[85017-85110]"
  }, {
    "left" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
    "right" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
    "info" : "ExpressionStatement[84808-84862]:ExpressionStatement[85025-85079]"
  }, {
    "left" : "n = n.getParent();",
    "right" : "n = n.getParent();",
    "info" : "ExpressionStatement[84869-84887]:ExpressionStatement[85086-85104]"
  }, {
    "left" : "return sourceName;",
    "right" : "return sourceName;",
    "info" : "ReturnStatement[84898-84916]:ReturnStatement[85115-85133]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[85004-85010]:Modifier[85221-85227]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[85011-85015]:SimpleType[85228-85232]"
  }, {
    "left" : "newCallNode",
    "right" : "newCallNode",
    "info" : "SimpleName[85016-85027]:SimpleName[85233-85244]"
  }, {
    "left" : "Node callTarget",
    "right" : "Node callTarget",
    "info" : "SingleVariableDeclaration[85028-85043]:SingleVariableDeclaration[85245-85260]"
  }, {
    "left" : "Node... parameters",
    "right" : "Node... parameters",
    "info" : "SingleVariableDeclaration[85045-85063]:SingleVariableDeclaration[85262-85280]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85065-85319]:Block[85282-85536]"
  }, {
    "left" : "boolean isFreeCall = !isGet(callTarget);",
    "right" : "boolean isFreeCall = !isGet(callTarget);",
    "info" : "VariableDeclarationStatement[85071-85111]:VariableDeclarationStatement[85288-85328]"
  }, {
    "left" : "Node call = new Node(Token.CALL, callTarget);",
    "right" : "Node call = new Node(Token.CALL, callTarget);",
    "info" : "VariableDeclarationStatement[85116-85161]:VariableDeclarationStatement[85333-85378]"
  }, {
    "left" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
    "right" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
    "info" : "ExpressionStatement[85166-85214]:ExpressionStatement[85383-85431]"
  }, {
    "left" : "for (Node parameter : parameters)",
    "right" : "for (Node parameter : parameters)",
    "info" : "EnhancedForStatement[85219-85298]:EnhancedForStatement[85436-85515]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85253-85298]:Block[85470-85515]"
  }, {
    "left" : "call.addChildToBack(parameter);",
    "right" : "call.addChildToBack(parameter);",
    "info" : "ExpressionStatement[85261-85292]:ExpressionStatement[85478-85509]"
  }, {
    "left" : "return call;",
    "right" : "return call;",
    "info" : "ReturnStatement[85303-85315]:ReturnStatement[85520-85532]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[85427-85433]:Modifier[85644-85650]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[85434-85441]:PrimitiveType[85651-85658]"
  }, {
    "left" : "evaluatesToLocalValue",
    "right" : "evaluatesToLocalValue",
    "info" : "SimpleName[85442-85463]:SimpleName[85659-85680]"
  }, {
    "left" : "Node value",
    "right" : "Node value",
    "info" : "SingleVariableDeclaration[85464-85474]:SingleVariableDeclaration[85681-85691]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85476-85554]:Block[85693-85771]"
  }, {
    "left" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
    "right" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
    "info" : "ReturnStatement[85482-85550]:ReturnStatement[85699-85767]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[85751-85757]:Modifier[85968-85974]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[85758-85765]:PrimitiveType[85975-85982]"
  }, {
    "left" : "evaluatesToLocalValue",
    "right" : "evaluatesToLocalValue",
    "info" : "SimpleName[85766-85787]:SimpleName[85983-86004]"
  }, {
    "left" : "Node value",
    "right" : "Node value",
    "info" : "SingleVariableDeclaration[85788-85798]:SingleVariableDeclaration[86005-86015]"
  }, {
    "left" : "Predicate<Node> locals",
    "right" : "Predicate<Node> locals",
    "info" : "SingleVariableDeclaration[85800-85822]:SingleVariableDeclaration[86017-86039]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85824-88247]:Block[86041-88464]"
  }, {
    "left" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
    "right" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
    "info" : "SwitchStatement[85830-88243]:SwitchStatement[86047-88460]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[85863-85881]:SwitchCase[86080-86098]"
  }, {
    "left" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
    "right" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
    "info" : "ReturnStatement[86079-86242]:ReturnStatement[86296-86459]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[86249-86266]:SwitchCase[86466-86483]"
  }, {
    "left" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
    "right" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
    "info" : "ReturnStatement[86275-86334]:ReturnStatement[86492-86551]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[86341-86356]:SwitchCase[86558-86573]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[86363-86377]:SwitchCase[86580-86594]"
  }, {
    "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
    "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
    "info" : "ReturnStatement[86386-86512]:ReturnStatement[86603-86729]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[86519-86535]:SwitchCase[86736-86752]"
  }, {
    "left" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
    "right" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
    "info" : "ReturnStatement[86544-86680]:ReturnStatement[86761-86897]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[86687-86702]:SwitchCase[86904-86919]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[86709-86724]:SwitchCase[86926-86941]"
  }, {
    "left" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
    "right" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
    "info" : "IfStatement[86733-86901]:IfStatement[86950-87118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86779-86861]:Block[86996-87078]"
  }, {
    "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
    "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
    "info" : "ReturnStatement[86791-86851]:ReturnStatement[87008-87068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86867-86901]:Block[87084-87118]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[86879-86891]:ReturnStatement[87096-87108]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[86908-86924]:SwitchCase[87125-87141]"
  }, {
    "left" : "return locals.apply(value);",
    "right" : "return locals.apply(value);",
    "info" : "ReturnStatement[86933-86960]:ReturnStatement[87150-87177]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[86967-86983]:SwitchCase[87184-87200]"
  }, {
    "left" : "return isImmutableValue(value) || locals.apply(value);",
    "right" : "return isImmutableValue(value) || locals.apply(value);",
    "info" : "ReturnStatement[86992-87046]:ReturnStatement[87209-87263]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[87053-87072]:SwitchCase[87270-87289]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[87079-87098]:SwitchCase[87296-87315]"
  }, {
    "left" : "return locals.apply(value);",
    "right" : "return locals.apply(value);",
    "info" : "ReturnStatement[87183-87210]:ReturnStatement[87400-87427]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[87217-87233]:SwitchCase[87434-87450]"
  }, {
    "left" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
    "right" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
    "info" : "ReturnStatement[87242-87353]:ReturnStatement[87459-87570]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[87360-87375]:SwitchCase[87577-87592]"
  }, {
    "left" : "return newHasLocalResult(value)\n               || locals.apply(value);",
    "right" : "return newHasLocalResult(value)\n               || locals.apply(value);",
    "info" : "ReturnStatement[87384-87454]:ReturnStatement[87601-87671]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[87461-87481]:SwitchCase[87678-87698]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[87488-87506]:SwitchCase[87705-87723]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[87513-87533]:SwitchCase[87730-87750]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[87540-87561]:SwitchCase[87757-87778]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[87637-87649]:ReturnStatement[87854-87866]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[87656-87675]:SwitchCase[87873-87892]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[87682-87696]:SwitchCase[87899-87913]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[87785-87797]:ReturnStatement[88002-88014]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[87804-87812]:SwitchCase[88021-88029]"
  }, {
    "left" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
    "right" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
    "info" : "IfStatement[87958-88097]:IfStatement[88175-88314]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88063-88097]:Block[88280-88314]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[88075-88087]:ReturnStatement[88292-88304]"
  }, {
    "left" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
    "right" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
    "info" : "ThrowStatement[88107-88237]:ThrowStatement[88324-88454]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[88441-88448]:Modifier[88658-88665]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[88449-88455]:Modifier[88666-88672]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[88456-88460]:SimpleType[88673-88677]"
  }, {
    "left" : "getNthSibling",
    "right" : "getNthSibling",
    "info" : "SimpleName[88461-88474]:SimpleName[88678-88691]"
  }, {
    "left" : "Node first",
    "right" : "Node first",
    "info" : "SingleVariableDeclaration[88475-88485]:SingleVariableDeclaration[88692-88702]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[88487-88496]:SingleVariableDeclaration[88704-88713]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88498-88649]:Block[88715-88866]"
  }, {
    "left" : "Node sibling = first;",
    "right" : "Node sibling = first;",
    "info" : "VariableDeclarationStatement[88504-88525]:VariableDeclarationStatement[88721-88742]"
  }, {
    "left" : "while (index != 0 && sibling != null)",
    "right" : "while (index != 0 && sibling != null)",
    "info" : "WhileStatement[88530-88625]:WhileStatement[88747-88842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88568-88625]:Block[88785-88842]"
  }, {
    "left" : "sibling = sibling.getNext();",
    "right" : "sibling = sibling.getNext();",
    "info" : "ExpressionStatement[88576-88604]:ExpressionStatement[88793-88821]"
  }, {
    "left" : "index--;",
    "right" : "index--;",
    "info" : "ExpressionStatement[88611-88619]:ExpressionStatement[88828-88836]"
  }, {
    "left" : "return sibling;",
    "right" : "return sibling;",
    "info" : "ReturnStatement[88630-88645]:ReturnStatement[88847-88862]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[88762-88768]:Modifier[88979-88985]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[88769-88773]:SimpleType[88986-88990]"
  }, {
    "left" : "getArgumentForFunction",
    "right" : "getArgumentForFunction",
    "info" : "SimpleName[88774-88796]:SimpleName[88991-89013]"
  }, {
    "left" : "Node function",
    "right" : "Node function",
    "info" : "SingleVariableDeclaration[88797-88810]:SingleVariableDeclaration[89014-89027]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[88812-88821]:SingleVariableDeclaration[89029-89038]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88823-88974]:Block[89040-89191]"
  }, {
    "left" : "Preconditions.checkState(isFunction(function));",
    "right" : "Preconditions.checkState(isFunction(function));",
    "info" : "ExpressionStatement[88829-88876]:ExpressionStatement[89046-89093]"
  }, {
    "left" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
    "right" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
    "info" : "ReturnStatement[88881-88970]:ReturnStatement[89098-89187]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[89101-89107]:Modifier[89318-89324]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[89108-89112]:SimpleType[89325-89329]"
  }, {
    "left" : "getArgumentForCallOrNew",
    "right" : "getArgumentForCallOrNew",
    "info" : "SimpleName[89113-89136]:SimpleName[89330-89353]"
  }, {
    "left" : "Node call",
    "right" : "Node call",
    "info" : "SingleVariableDeclaration[89137-89146]:SingleVariableDeclaration[89354-89363]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[89148-89157]:SingleVariableDeclaration[89365-89374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89159-89285]:Block[89376-89502]"
  }, {
    "left" : "Preconditions.checkState(isCallOrNew(call));",
    "right" : "Preconditions.checkState(isCallOrNew(call));",
    "info" : "ExpressionStatement[89165-89209]:ExpressionStatement[89382-89426]"
  }, {
    "left" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
    "right" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
    "info" : "ReturnStatement[89214-89281]:ReturnStatement[89431-89498]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[89289-89296]:Modifier[89506-89513]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[89297-89303]:Modifier[89514-89520]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[89304-89311]:PrimitiveType[89521-89528]"
  }, {
    "left" : "isToStringMethodCall",
    "right" : "isToStringMethodCall",
    "info" : "SimpleName[89312-89332]:SimpleName[89529-89549]"
  }, {
    "left" : "Node call",
    "right" : "Node call",
    "info" : "SingleVariableDeclaration[89333-89342]:SingleVariableDeclaration[89550-89559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89344-89562]:Block[89561-89779]"
  }, {
    "left" : "Node getNode = call.getFirstChild();",
    "right" : "Node getNode = call.getFirstChild();",
    "info" : "VariableDeclarationStatement[89350-89386]:VariableDeclarationStatement[89567-89603]"
  }, {
    "left" : "if (isGet(getNode))",
    "right" : "if (isGet(getNode))",
    "info" : "IfStatement[89391-89540]:IfStatement[89608-89757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89411-89540]:Block[89628-89757]"
  }, {
    "left" : "Node propNode = getNode.getLastChild();",
    "right" : "Node propNode = getNode.getLastChild();",
    "info" : "VariableDeclarationStatement[89419-89458]:VariableDeclarationStatement[89636-89675]"
  }, {
    "left" : "return isString(propNode) && \"toString\".equals(propNode.getString());",
    "right" : "return isString(propNode) && \"toString\".equals(propNode.getString());",
    "info" : "ReturnStatement[89465-89534]:ReturnStatement[89682-89751]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[89545-89558]:ReturnStatement[89762-89775]"
  } ]
}