{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "protected void setUpModule()",
      "right" : "protected void setUpModule()",
      "info" : "MethodDeclaration[1181-1377]:MethodDeclaration[1181-1377]"
    }, {
      "left" : "public void testCustomComponent() throws Exception",
      "right" : "public void testCustomComponent() throws Exception",
      "info" : "MethodDeclaration[1381-1475]:MethodDeclaration[1381-1475]"
    }, {
      "left" : "public void testControllerField() throws Exception",
      "right" : "public void testControllerField() throws Exception",
      "info" : "MethodDeclaration[1479-1563]:MethodDeclaration[1568-1652]"
    }, {
      "left" : "public void testControllerFieldWithRefs() throws Exception",
      "right" : "public void testControllerFieldWithRefs() throws Exception",
      "info" : "MethodDeclaration[1567-1659]:MethodDeclaration[1656-1748]"
    }, {
      "left" : "public void testHandler() throws Exception",
      "right" : "public void testHandler() throws Exception",
      "info" : "MethodDeclaration[1663-1741]:MethodDeclaration[1752-1830]"
    }, {
      "left" : "public void testCustomComponentTag() throws Exception",
      "right" : "public void testCustomComponentTag() throws Exception",
      "info" : "MethodDeclaration[1745-1829]:MethodDeclaration[1834-1918]"
    }, {
      "left" : "public void testCustomComponentPropertyTag() throws Exception",
      "right" : "public void testCustomComponentPropertyTag() throws Exception",
      "info" : "MethodDeclaration[1833-1925]:MethodDeclaration[1922-2014]"
    }, {
      "left" : "public void testFromReference() throws Exception",
      "right" : "public void testFromReference() throws Exception",
      "info" : "MethodDeclaration[1929-2211]:MethodDeclaration[2018-2300]"
    }, {
      "left" : "public void testIdWithRefs() throws Exception",
      "right" : "public void testIdWithRefs() throws Exception",
      "info" : "MethodDeclaration[2215-2650]:MethodDeclaration[2304-2739]"
    }, {
      "left" : "private void doTest(final String newName) throws Exception",
      "right" : "private void doTest(final String newName) throws Exception",
      "info" : "MethodDeclaration[2654-2746]:MethodDeclaration[2743-2835]"
    }, {
      "left" : "private void doTest(final String newName, boolean inline) throws Exception",
      "right" : "private void doTest(final String newName, boolean inline) throws Exception",
      "info" : "MethodDeclaration[2750-3392]:MethodDeclaration[2839-3481]"
    }, {
      "left" : "protected String getTestDataPath()",
      "right" : "protected String getTestDataPath()",
      "info" : "MethodDeclaration[3396-3539]:MethodDeclaration[3485-3628]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1222-1377]:Block[1222-1377]"
    }, {
      "left" : "super.setUpModule();",
      "right" : "super.setUpModule();",
      "info" : "ExpressionStatement[1228-1248]:ExpressionStatement[1228-1248]"
    }, {
      "left" : "PsiTestUtil.addLibrary(getModule(), \"javafx\", PluginPathManager.getPluginHomePath(\"javaFX\") + \"/testData\", \"jfxrt.jar\");",
      "right" : "PsiTestUtil.addLibrary(getModule(), \"javafx\", PluginPathManager.getPluginHomePath(\"javaFX\") + \"/testData\", \"jfxrt.jar\");",
      "info" : "ExpressionStatement[1253-1373]:ExpressionStatement[1253-1373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1432-1475]:Block[1432-1475]"
    }, {
      "left" : "doTest(getTestName(false) + \"1\");",
      "right" : "doTest(getTestName(false) + \"1\");",
      "info" : "ExpressionStatement[1438-1471]:ExpressionStatement[1438-1471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1530-1563]:Block[1619-1652]"
    }, {
      "left" : "doTest(\"newFieldName\");",
      "right" : "doTest(\"newFieldName\");",
      "info" : "ExpressionStatement[1536-1559]:ExpressionStatement[1625-1648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1626-1659]:Block[1715-1748]"
    }, {
      "left" : "doTest(\"newFieldName\");",
      "right" : "doTest(\"newFieldName\");",
      "info" : "ExpressionStatement[1632-1655]:ExpressionStatement[1721-1744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1706-1741]:Block[1795-1830]"
    }, {
      "left" : "doTest(\"newHandlerName\");",
      "right" : "doTest(\"newHandlerName\");",
      "info" : "ExpressionStatement[1712-1737]:ExpressionStatement[1801-1826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1799-1829]:Block[1888-1918]"
    }, {
      "left" : "doTest(\"Foo\", true);",
      "right" : "doTest(\"Foo\", true);",
      "info" : "ExpressionStatement[1805-1825]:ExpressionStatement[1894-1914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1895-1925]:Block[1984-2014]"
    }, {
      "left" : "doTest(\"Foo\", true);",
      "right" : "doTest(\"Foo\", true);",
      "info" : "ExpressionStatement[1901-1921]:ExpressionStatement[1990-2010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1978-2211]:Block[2067-2300]"
    }, {
      "left" : "final String newName = \"lbl1\";",
      "right" : "final String newName = \"lbl1\";",
      "info" : "VariableDeclarationStatement[1984-2014]:VariableDeclarationStatement[2073-2103]"
    }, {
      "left" : "doTest(newName);",
      "right" : "doTest(newName);",
      "info" : "ExpressionStatement[2019-2035]:ExpressionStatement[2108-2124]"
    }, {
      "left" : "final PsiClass controllerClass = findClass(getTestName(false));",
      "right" : "final PsiClass controllerClass = findClass(getTestName(false));",
      "info" : "VariableDeclarationStatement[2040-2103]:VariableDeclarationStatement[2129-2192]"
    }, {
      "left" : "assertNotNull(controllerClass);",
      "right" : "assertNotNull(controllerClass);",
      "info" : "ExpressionStatement[2108-2139]:ExpressionStatement[2197-2228]"
    }, {
      "left" : "assertNotNull(controllerClass.findFieldByName(newName, false));",
      "right" : "assertNotNull(controllerClass.findFieldByName(newName, false));",
      "info" : "ExpressionStatement[2144-2207]:ExpressionStatement[2233-2296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2261-2650]:Block[2350-2739]"
    }, {
      "left" : "configureByFiles(null, getTestName(true) + \".fxml\");",
      "right" : "configureByFiles(null, getTestName(true) + \".fxml\");",
      "info" : "ExpressionStatement[2267-2319]:ExpressionStatement[2356-2408]"
    }, {
      "left" : "PsiElement element = TargetElementUtil\n      .findTargetElement(myEditor, TargetElementUtil.ELEMENT_NAME_ACCEPTED | TargetElementUtil.REFERENCED_ELEMENT_ACCEPTED);",
      "right" : "PsiElement element = TargetElementUtil\n      .findTargetElement(myEditor, TargetElementUtil.ELEMENT_NAME_ACCEPTED | TargetElementUtil.REFERENCED_ELEMENT_ACCEPTED);",
      "info" : "VariableDeclarationStatement[2324-2487]:VariableDeclarationStatement[2413-2576]"
    }, {
      "left" : "assertNotNull(element);",
      "right" : "assertNotNull(element);",
      "info" : "ExpressionStatement[2492-2515]:ExpressionStatement[2581-2604]"
    }, {
      "left" : "new RenameProcessor(getProject(), element, \"lb1\", true, true).run();",
      "right" : "new RenameProcessor(getProject(), element, \"lb1\", true, true).run();",
      "info" : "ExpressionStatement[2520-2588]:ExpressionStatement[2609-2677]"
    }, {
      "left" : "checkResultByFile(getTestName(true) + \"_after.fxml\");",
      "right" : "checkResultByFile(getTestName(true) + \"_after.fxml\");",
      "info" : "ExpressionStatement[2593-2646]:ExpressionStatement[2682-2735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2713-2746]:Block[2802-2835]"
    }, {
      "left" : "doTest(newName, false);",
      "right" : "doTest(newName, false);",
      "info" : "ExpressionStatement[2719-2742]:ExpressionStatement[2808-2831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2825-3392]:Block[2914-3481]"
    }, {
      "left" : "configureByFiles(null, getTestName(true) + \".fxml\", getTestName(false) + \".java\");",
      "right" : "configureByFiles(null, getTestName(true) + \".fxml\", getTestName(false) + \".java\");",
      "info" : "ExpressionStatement[2831-2913]:ExpressionStatement[2920-3002]"
    }, {
      "left" : "PsiElement element = TargetElementUtil\n      .findTargetElement(myEditor, TargetElementUtil.ELEMENT_NAME_ACCEPTED | TargetElementUtil.REFERENCED_ELEMENT_ACCEPTED);",
      "right" : "PsiElement element = TargetElementUtil\n      .findTargetElement(myEditor, TargetElementUtil.ELEMENT_NAME_ACCEPTED | TargetElementUtil.REFERENCED_ELEMENT_ACCEPTED);",
      "info" : "VariableDeclarationStatement[2918-3081]:VariableDeclarationStatement[3007-3170]"
    }, {
      "left" : "assertNotNull(element);",
      "right" : "assertNotNull(element);",
      "info" : "ExpressionStatement[3086-3109]:ExpressionStatement[3175-3198]"
    }, {
      "left" : "if (inline)",
      "right" : "if (inline)",
      "info" : "IfStatement[3114-3330]:IfStatement[3203-3419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3126-3240]:Block[3215-3329]"
    }, {
      "left" : "CodeInsightTestUtil.doInlineRename(new MemberInplaceRenameHandler(), newName, getEditor(), element);",
      "right" : "CodeInsightTestUtil.doInlineRename(new MemberInplaceRenameHandler(), newName, getEditor(), element);",
      "info" : "ExpressionStatement[3134-3234]:ExpressionStatement[3223-3323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3246-3330]:Block[3335-3419]"
    }, {
      "left" : "new RenameProcessor(getProject(), element, newName, true, true).run();",
      "right" : "new RenameProcessor(getProject(), element, newName, true, true).run();",
      "info" : "ExpressionStatement[3254-3324]:ExpressionStatement[3343-3413]"
    }, {
      "left" : "checkResultByFile(getTestName(true) + \"_after.fxml\");",
      "right" : "checkResultByFile(getTestName(true) + \"_after.fxml\");",
      "info" : "ExpressionStatement[3335-3388]:ExpressionStatement[3424-3477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3454-3539]:Block[3543-3628]"
    }, {
      "left" : "return PluginPathManager.getPluginHomePath(\"javaFX\") + \"/testData/rename/\";",
      "right" : "return PluginPathManager.getPluginHomePath(\"javaFX\") + \"/testData/rename/\";",
      "info" : "ReturnStatement[3460-3535]:ReturnStatement[3549-3624]"
    } ]
  },
  "interFileMappings" : { }
}