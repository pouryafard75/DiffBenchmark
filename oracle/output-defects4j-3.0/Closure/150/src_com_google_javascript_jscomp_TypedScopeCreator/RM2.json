{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "TypeDeclaration[4192-55090]:TypeDeclaration[4192-54736]"
    }, {
      "left" : "static final String DELEGATE_PROXY_SUFFIX = \"(Proxy)\";",
      "right" : "static final String DELEGATE_PROXY_SUFFIX = \"(Proxy)\";",
      "info" : "FieldDeclaration[4697-4834]:FieldDeclaration[4697-4834]"
    }, {
      "left" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "right" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "info" : "FieldDeclaration[4838-5015]:FieldDeclaration[4838-5015]"
    }, {
      "left" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "right" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "info" : "FieldDeclaration[5019-5206]:FieldDeclaration[5019-5206]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "info" : "FieldDeclaration[5210-5389]:FieldDeclaration[5210-5389]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[5393-5433]:FieldDeclaration[5393-5433]"
    }, {
      "left" : "private final ErrorReporter typeParsingErrorReporter;",
      "right" : "private final ErrorReporter typeParsingErrorReporter;",
      "info" : "FieldDeclaration[5436-5489]:FieldDeclaration[5436-5489]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[5492-5530]:FieldDeclaration[5492-5530]"
    }, {
      "left" : "private final CodingConvention codingConvention;",
      "right" : "private final CodingConvention codingConvention;",
      "info" : "FieldDeclaration[5533-5581]:FieldDeclaration[5533-5581]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[5584-5626]:FieldDeclaration[5584-5626]"
    }, {
      "left" : "private List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "right" : "private List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "info" : "FieldDeclaration[5629-5701]:FieldDeclaration[5629-5701]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "TypeDeclaration[5705-6378]:TypeDeclaration[5705-6378]"
    }, {
      "left" : "final Node node;",
      "right" : "final Node node;",
      "info" : "FieldDeclaration[5884-5900]:FieldDeclaration[5884-5900]"
    }, {
      "left" : "final JSType type;",
      "right" : "final JSType type;",
      "info" : "FieldDeclaration[5905-5923]:FieldDeclaration[5905-5923]"
    }, {
      "left" : "DeferredSetType(Node node, JSType type)",
      "right" : "DeferredSetType(Node node, JSType type)",
      "info" : "MethodDeclaration[5929-6266]:MethodDeclaration[5929-6266]"
    }, {
      "left" : "void resolve(Scope scope)",
      "right" : "void resolve(Scope scope)",
      "info" : "MethodDeclaration[6272-6374]:MethodDeclaration[6272-6374]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[6382-6484]:MethodDeclaration[6382-6484]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "info" : "MethodDeclaration[6488-6826]:MethodDeclaration[6488-6826]"
    }, {
      "left" : "public Scope createScope(Node root, Scope parent)",
      "right" : "public Scope createScope(Node root, Scope parent)",
      "info" : "MethodDeclaration[6830-8692]:MethodDeclaration[6830-8692]"
    }, {
      "left" : "Scope createInitialScope(Node root)",
      "right" : "Scope createInitialScope(Node root)",
      "info" : "MethodDeclaration[8696-10440]:MethodDeclaration[8696-10440]"
    }, {
      "left" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "right" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "info" : "MethodDeclaration[10444-10748]:MethodDeclaration[10444-10748]"
    }, {
      "left" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "right" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "info" : "MethodDeclaration[10752-10912]:MethodDeclaration[10752-10912]"
    }, {
      "left" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "right" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "info" : "MethodDeclaration[10916-11035]:MethodDeclaration[10916-11035]"
    }, {
      "left" : "DiscoverEnums",
      "right" : "DiscoverEnums",
      "info" : "TypeDeclaration[11039-11902]:TypeDeclaration[11039-11902]"
    }, {
      "left" : "private final JSTypeRegistry registry;",
      "right" : "private final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[11112-11150]:FieldDeclaration[11112-11150]"
    }, {
      "left" : "DiscoverEnums(JSTypeRegistry registry)",
      "right" : "DiscoverEnums(JSTypeRegistry registry)",
      "info" : "MethodDeclaration[11156-11234]:MethodDeclaration[11156-11234]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "info" : "MethodDeclaration[11240-11898]:MethodDeclaration[11240-11898]"
    }, {
      "left" : "private static Node getPrototypePropertyOwner(Node n)",
      "right" : "private static Node getPrototypePropertyOwner(Node n)",
      "info" : "MethodDeclaration[11906-12544]:MethodDeclaration[11906-12544]"
    }, {
      "left" : "private void attachLiteralTypes(Node n)",
      "right" : "private void attachLiteralTypes(Node n)",
      "info" : "MethodDeclaration[12548-13545]:MethodDeclaration[12548-13545]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative nativeType)",
      "right" : "private JSType getNativeType(JSTypeNative nativeType)",
      "info" : "MethodDeclaration[13549-13659]:MethodDeclaration[13549-13659]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "TypeDeclaration[13663-47952]:TypeDeclaration[13663-47952]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[13754-13826]:FieldDeclaration[13754-13826]"
    }, {
      "left" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "right" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[13832-13916]:FieldDeclaration[13832-13916]"
    }, {
      "left" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "right" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "info" : "FieldDeclaration[13922-14076]:FieldDeclaration[13922-14076]"
    }, {
      "left" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "right" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[14082-14336]:FieldDeclaration[14082-14336]"
    }, {
      "left" : "private String sourceName = null;",
      "right" : "private String sourceName = null;",
      "info" : "FieldDeclaration[14342-14437]:FieldDeclaration[14342-14437]"
    }, {
      "left" : "private AbstractScopeBuilder(Scope scope)",
      "right" : "private AbstractScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[14443-14518]:MethodDeclaration[14443-14518]"
    }, {
      "left" : "void setDeferredType(Node node, JSType type)",
      "right" : "void setDeferredType(Node node, JSType type)",
      "info" : "MethodDeclaration[14524-14637]:MethodDeclaration[14524-14637]"
    }, {
      "left" : "void resolveTypes()",
      "right" : "void resolveTypes()",
      "info" : "MethodDeclaration[14643-15143]:MethodDeclaration[14643-15143]"
    }, {
      "left" : "public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent)",
      "right" : "public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent)",
      "info" : "MethodDeclaration[15149-15685]:MethodDeclaration[15149-15685]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[15691-17241]:MethodDeclaration[15691-17241]"
    }, {
      "left" : "JSType getDeclaredTypeInAnnotation(\n        NodeTraversal t, Node node, JSDocInfo info)",
      "right" : "JSType getDeclaredTypeInAnnotation(\n        NodeTraversal t, Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[17247-17645]:MethodDeclaration[17247-17645]"
    }, {
      "left" : "JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "right" : "JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[17651-19326]:MethodDeclaration[17651-19326]"
    }, {
      "left" : "void assertDefinitionNode(Node n, int type)",
      "right" : "void assertDefinitionNode(Node n, int type)",
      "info" : "MethodDeclaration[19332-19632]:MethodDeclaration[19332-19632]"
    }, {
      "left" : "void defineCatch(Node n, Node parent)",
      "right" : "void defineCatch(Node n, Node parent)",
      "info" : "MethodDeclaration[19638-19857]:MethodDeclaration[19638-19857]"
    }, {
      "left" : "void defineVar(Node n, Node parent)",
      "right" : "void defineVar(Node n, Node parent)",
      "info" : "MethodDeclaration[19863-20489]:MethodDeclaration[19863-20489]"
    }, {
      "left" : "void defineDeclaredFunction(Node n, Node parent)",
      "right" : "void defineDeclaredFunction(Node n, Node parent)",
      "info" : "MethodDeclaration[20495-21217]:MethodDeclaration[20495-21217]"
    }, {
      "left" : "void defineNamedTypeAssign(Node n, Node parent)",
      "right" : "void defineNamedTypeAssign(Node n, Node parent)",
      "info" : "MethodDeclaration[21223-22403]:MethodDeclaration[21223-22403]"
    }, {
      "left" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "right" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "info" : "MethodDeclaration[22409-24135]:MethodDeclaration[22409-24135]"
    }, {
      "left" : "private FunctionType getFunctionType(String name,\n        Node rValue, JSDocInfo info, @Nullable Node lvalueNode)",
      "right" : "private FunctionType getFunctionType(String name,\n        Node rValue, JSDocInfo info, @Nullable Node lvalueNode)",
      "info" : "MethodDeclaration[24141-27737]:MethodDeclaration[24141-27737]"
    }, {
      "left" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "right" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "info" : "MethodDeclaration[27743-28570]:MethodDeclaration[27743-28570]"
    }, {
      "left" : "private EnumType getEnumType(String name, Node parent,\n        Node value, JSType elementsType)",
      "right" : "private EnumType getEnumType(String name, Node parent,\n        Node value, JSType elementsType)",
      "info" : "MethodDeclaration[28576-30791]:MethodDeclaration[28576-30791]"
    }, {
      "left" : "private void defineSlot(Node name, Node parent, JSType type)",
      "right" : "private void defineSlot(Node name, Node parent, JSType type)",
      "info" : "MethodDeclaration[30797-31321]:MethodDeclaration[30797-31321]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "info" : "MethodDeclaration[31327-34516]:MethodDeclaration[31327-34516]"
    }, {
      "left" : "private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info,\n        Node n, Node rhsValue)",
      "right" : "private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info,\n        Node n, Node rhsValue)",
      "info" : "MethodDeclaration[34522-35391]:MethodDeclaration[34522-35391]"
    }, {
      "left" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "right" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[35397-37906]:MethodDeclaration[35397-37906]"
    }, {
      "left" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "right" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "info" : "MethodDeclaration[37912-39823]:MethodDeclaration[37912-39823]"
    }, {
      "left" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[39829-44302]:MethodDeclaration[39829-44302]"
    }, {
      "left" : "private ObjectType getObjectSlot(String slotName)",
      "right" : "private ObjectType getObjectSlot(String slotName)",
      "info" : "MethodDeclaration[44308-44856]:MethodDeclaration[44308-44856]"
    }, {
      "left" : "void resolveStubDeclarations()",
      "right" : "void resolveStubDeclarations()",
      "info" : "MethodDeclaration[44862-46182]:MethodDeclaration[44862-46182]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "TypeDeclaration[46188-47923]:TypeDeclaration[46188-47923]"
    }, {
      "left" : "private final ObjectType thisType;",
      "right" : "private final ObjectType thisType;",
      "info" : "FieldDeclaration[46400-46434]:FieldDeclaration[46400-46434]"
    }, {
      "left" : "CollectProperties(ObjectType thisType)",
      "right" : "CollectProperties(ObjectType thisType)",
      "info" : "MethodDeclaration[46442-46524]:MethodDeclaration[46442-46524]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[46532-46930]:MethodDeclaration[46532-46930]"
    }, {
      "left" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo)",
      "right" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo)",
      "info" : "MethodDeclaration[46938-47917]:MethodDeclaration[46938-47917]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "TypeDeclaration[47956-48345]:TypeDeclaration[47956-48345]"
    }, {
      "left" : "private final Node node;",
      "right" : "private final Node node;",
      "info" : "FieldDeclaration[48071-48095]:FieldDeclaration[48071-48095]"
    }, {
      "left" : "private final boolean isExtern;",
      "right" : "private final boolean isExtern;",
      "info" : "FieldDeclaration[48100-48131]:FieldDeclaration[48100-48131]"
    }, {
      "left" : "private final String ownerName;",
      "right" : "private final String ownerName;",
      "info" : "FieldDeclaration[48136-48167]:FieldDeclaration[48136-48167]"
    }, {
      "left" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "right" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "info" : "MethodDeclaration[48173-48341]:MethodDeclaration[48173-48341]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "TypeDeclaration[48349-51858]:TypeDeclaration[48349-51858]"
    }, {
      "left" : "private GlobalScopeBuilder(Scope scope)",
      "right" : "private GlobalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[48535-48602]:MethodDeclaration[48535-48602]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[48608-49341]:MethodDeclaration[48608-49341]"
    }, {
      "left" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[49347-49589]:MethodDeclaration[49347-49589]"
    }, {
      "left" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "right" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "info" : "MethodDeclaration[49595-50698]:MethodDeclaration[49595-50698]"
    }, {
      "left" : "// TODO(nicksantos): Kill this.\n    private void checkForOldStyleTypedef(NodeTraversal t, Node candidate)",
      "right" : "// TODO(nicksantos): Kill this.\n    private void checkForOldStyleTypedef(NodeTraversal t, Node candidate)",
      "info" : "MethodDeclaration[50704-51854]:MethodDeclaration[50704-51854]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "TypeDeclaration[51888-55063]:TypeDeclaration[51888-54709]"
    }, {
      "left" : "private LocalScopeBuilder(Scope scope)",
      "right" : "private LocalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[52063-52196]:MethodDeclaration[52063-52196]"
    }, {
      "left" : "void build()",
      "right" : "void build()",
      "info" : "MethodDeclaration[52202-52350]:MethodDeclaration[52202-52350]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[52356-53252]:MethodDeclaration[52356-52898]"
    }, {
      "left" : "private void handleFunctionInputs(Node fnNode)",
      "right" : "private void handleFunctionInputs(Node fnNode)",
      "info" : "MethodDeclaration[53258-54123]:MethodDeclaration[52904-53769]"
    }, {
      "left" : "private void declareArguments(Node functionNode)",
      "right" : "private void declareArguments(Node functionNode)",
      "info" : "MethodDeclaration[54129-55035]:MethodDeclaration[53775-54681]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4645-4650]:TYPE_DECLARATION_KIND[4645-4650]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[4651-4668]:SimpleName[4651-4668]"
    }, {
      "left" : "ScopeCreator",
      "right" : "ScopeCreator",
      "info" : "SimpleType[4680-4692]:SimpleType[4680-4692]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5848-5855]:Modifier[5848-5855]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5856-5861]:TYPE_DECLARATION_KIND[5856-5861]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[5862-5877]:SimpleName[5862-5877]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[5929-5944]:SimpleName[5929-5944]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[5945-5954]:SingleVariableDeclaration[5945-5954]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[5956-5967]:SingleVariableDeclaration[5956-5967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5969-6266]:Block[5969-6266]"
    }, {
      "left" : "Preconditions.checkNotNull(node);",
      "right" : "Preconditions.checkNotNull(node);",
      "info" : "ExpressionStatement[5977-6010]:ExpressionStatement[5977-6010]"
    }, {
      "left" : "Preconditions.checkNotNull(type);",
      "right" : "Preconditions.checkNotNull(type);",
      "info" : "ExpressionStatement[6017-6050]:ExpressionStatement[6017-6050]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[6057-6074]:ExpressionStatement[6057-6074]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[6081-6098]:ExpressionStatement[6081-6098]"
    }, {
      "left" : "node.setJSType(type);",
      "right" : "node.setJSType(type);",
      "info" : "ExpressionStatement[6239-6260]:ExpressionStatement[6239-6260]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6272-6276]:PrimitiveType[6272-6276]"
    }, {
      "left" : "resolve",
      "right" : "resolve",
      "info" : "SimpleName[6277-6284]:SimpleName[6277-6284]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[6285-6296]:SingleVariableDeclaration[6285-6296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6298-6374]:Block[6298-6374]"
    }, {
      "left" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "right" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "info" : "ExpressionStatement[6306-6368]:ExpressionStatement[6306-6368]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[6382-6399]:SimpleName[6382-6399]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[6400-6425]:SingleVariableDeclaration[6400-6425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6427-6484]:Block[6427-6484]"
    }, {
      "left" : "this(compiler, compiler.getCodingConvention());",
      "right" : "this(compiler, compiler.getCodingConvention());",
      "info" : "ConstructorInvocation[6433-6480]:ConstructorInvocation[6433-6480]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[6488-6505]:SimpleName[6488-6505]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[6506-6531]:SingleVariableDeclaration[6506-6531]"
    }, {
      "left" : "CodingConvention codingConvention",
      "right" : "CodingConvention codingConvention",
      "info" : "SingleVariableDeclaration[6539-6572]:SingleVariableDeclaration[6539-6572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6574-6826]:Block[6574-6826]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[6580-6605]:ExpressionStatement[6580-6605]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[6610-6655]:ExpressionStatement[6610-6655]"
    }, {
      "left" : "this.codingConvention = codingConvention;",
      "right" : "this.codingConvention = codingConvention;",
      "info" : "ExpressionStatement[6660-6701]:ExpressionStatement[6660-6701]"
    }, {
      "left" : "this.typeRegistry = compiler.getTypeRegistry();",
      "right" : "this.typeRegistry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[6706-6753]:ExpressionStatement[6706-6753]"
    }, {
      "left" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "right" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "info" : "ExpressionStatement[6758-6822]:ExpressionStatement[6758-6822]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6967-6973]:Modifier[6967-6973]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[6974-6979]:SimpleType[6974-6979]"
    }, {
      "left" : "createScope",
      "right" : "createScope",
      "info" : "SimpleName[6980-6991]:SimpleName[6980-6991]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[6992-7001]:SingleVariableDeclaration[6992-7001]"
    }, {
      "left" : "Scope parent",
      "right" : "Scope parent",
      "info" : "SingleVariableDeclaration[7003-7015]:SingleVariableDeclaration[7003-7015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7017-8692]:Block[7017-8692]"
    }, {
      "left" : "Scope newScope = null;",
      "right" : "Scope newScope = null;",
      "info" : "VariableDeclarationStatement[7212-7234]:VariableDeclarationStatement[7212-7234]"
    }, {
      "left" : "AbstractScopeBuilder scopeBuilder = null;",
      "right" : "AbstractScopeBuilder scopeBuilder = null;",
      "info" : "VariableDeclarationStatement[7239-7280]:VariableDeclarationStatement[7239-7280]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[7285-7793]:IfStatement[7285-7793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7305-7588]:Block[7305-7588]"
    }, {
      "left" : "newScope = createInitialScope(root);",
      "right" : "newScope = createInitialScope(root);",
      "info" : "ExpressionStatement[7364-7400]:ExpressionStatement[7364-7400]"
    }, {
      "left" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "right" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[7408-7481]:VariableDeclarationStatement[7408-7481]"
    }, {
      "left" : "scopeBuilder = globalScopeBuilder;",
      "right" : "scopeBuilder = globalScopeBuilder;",
      "info" : "ExpressionStatement[7488-7522]:ExpressionStatement[7488-7522]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "info" : "ExpressionStatement[7529-7582]:ExpressionStatement[7529-7582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7594-7793]:Block[7594-7793]"
    }, {
      "left" : "newScope = new Scope(parent, root);",
      "right" : "newScope = new Scope(parent, root);",
      "info" : "ExpressionStatement[7602-7637]:ExpressionStatement[7602-7637]"
    }, {
      "left" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "right" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[7644-7714]:VariableDeclarationStatement[7644-7714]"
    }, {
      "left" : "scopeBuilder = localScopeBuilder;",
      "right" : "scopeBuilder = localScopeBuilder;",
      "info" : "ExpressionStatement[7721-7754]:ExpressionStatement[7721-7754]"
    }, {
      "left" : "localScopeBuilder.build();",
      "right" : "localScopeBuilder.build();",
      "info" : "ExpressionStatement[7761-7787]:ExpressionStatement[7761-7787]"
    }, {
      "left" : "scopeBuilder.resolveStubDeclarations();",
      "right" : "scopeBuilder.resolveStubDeclarations();",
      "info" : "ExpressionStatement[7799-7838]:ExpressionStatement[7799-7838]"
    }, {
      "left" : "scopeBuilder.resolveTypes();",
      "right" : "scopeBuilder.resolveTypes();",
      "info" : "ExpressionStatement[7843-7871]:ExpressionStatement[7843-7871]"
    }, {
      "left" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "right" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "info" : "EnhancedForStatement[8039-8511]:EnhancedForStatement[8039-8511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8097-8511]:Block[8097-8511]"
    }, {
      "left" : "JSType type = functionNode.getJSType();",
      "right" : "JSType type = functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[8105-8144]:VariableDeclarationStatement[8105-8144]"
    }, {
      "left" : "if (type != null && type instanceof FunctionType)",
      "right" : "if (type != null && type instanceof FunctionType)",
      "info" : "IfStatement[8151-8505]:IfStatement[8151-8505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8201-8505]:Block[8201-8505]"
    }, {
      "left" : "FunctionType fnType = (FunctionType) type;",
      "right" : "FunctionType fnType = (FunctionType) type;",
      "info" : "VariableDeclarationStatement[8211-8253]:VariableDeclarationStatement[8211-8253]"
    }, {
      "left" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "right" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[8262-8309]:VariableDeclarationStatement[8262-8309]"
    }, {
      "left" : "if (!fnThisType.isUnknownType())",
      "right" : "if (!fnThisType.isUnknownType())",
      "info" : "IfStatement[8318-8497]:IfStatement[8318-8497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8351-8497]:Block[8351-8497]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "right" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "info" : "ExpressionStatement[8363-8487]:ExpressionStatement[8363-8487]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[8517-8667]:IfStatement[8517-8667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8537-8667]:Block[8537-8667]"
    }, {
      "left" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes);",
      "right" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes);",
      "info" : "ExpressionStatement[8545-8661]:ExpressionStatement[8545-8661]"
    }, {
      "left" : "return newScope;",
      "right" : "return newScope;",
      "info" : "ReturnStatement[8672-8688]:ReturnStatement[8672-8688]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[8824-8842]:MarkerAnnotation[8824-8842]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[8845-8850]:SimpleType[8845-8850]"
    }, {
      "left" : "createInitialScope",
      "right" : "createInitialScope",
      "info" : "SimpleName[8851-8869]:SimpleName[8851-8869]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[8870-8879]:SingleVariableDeclaration[8870-8879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8881-10440]:Block[8881-10440]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new DiscoverEnums(typeRegistry));",
      "right" : "NodeTraversal.traverse(compiler, root, new DiscoverEnums(typeRegistry));",
      "info" : "ExpressionStatement[8888-8960]:ExpressionStatement[8888-8960]"
    }, {
      "left" : "Scope s = new Scope(root, compiler);",
      "right" : "Scope s = new Scope(root, compiler);",
      "info" : "VariableDeclarationStatement[8966-9002]:VariableDeclarationStatement[8966-9002]"
    }, {
      "left" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9007-9057]:ExpressionStatement[9007-9057]"
    }, {
      "left" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9062-9121]:ExpressionStatement[9062-9121]"
    }, {
      "left" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9126-9175]:ExpressionStatement[9126-9175]"
    }, {
      "left" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9180-9230]:ExpressionStatement[9180-9230]"
    }, {
      "left" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9235-9290]:ExpressionStatement[9235-9290]"
    }, {
      "left" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9295-9348]:ExpressionStatement[9295-9348]"
    }, {
      "left" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9353-9411]:ExpressionStatement[9353-9411]"
    }, {
      "left" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9416-9467]:ExpressionStatement[9416-9467]"
    }, {
      "left" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9472-9528]:ExpressionStatement[9472-9528]"
    }, {
      "left" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9533-9593]:ExpressionStatement[9533-9593]"
    }, {
      "left" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9598-9649]:ExpressionStatement[9598-9649]"
    }, {
      "left" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9654-9712]:ExpressionStatement[9654-9712]"
    }, {
      "left" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9717-9774]:ExpressionStatement[9717-9774]"
    }, {
      "left" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9779-9834]:ExpressionStatement[9779-9834]"
    }, {
      "left" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9839-9893]:ExpressionStatement[9839-9893]"
    }, {
      "left" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "right" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "info" : "ExpressionStatement[9898-9948]:ExpressionStatement[9898-9948]"
    }, {
      "left" : "declareNativeValueType(s, \"goog.typedef\", NO_TYPE);",
      "right" : "declareNativeValueType(s, \"goog.typedef\", NO_TYPE);",
      "info" : "ExpressionStatement[10133-10184]:ExpressionStatement[10133-10184]"
    }, {
      "left" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "right" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "info" : "ExpressionStatement[10362-10421]:ExpressionStatement[10362-10421]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[10427-10436]:ReturnStatement[10427-10436]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10444-10451]:Modifier[10444-10451]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10452-10456]:PrimitiveType[10452-10456]"
    }, {
      "left" : "declareNativeFunctionType",
      "right" : "declareNativeFunctionType",
      "info" : "SimpleName[10457-10482]:SimpleName[10457-10482]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[10483-10494]:SingleVariableDeclaration[10483-10494]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[10496-10512]:SingleVariableDeclaration[10496-10512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10514-10748]:Block[10514-10748]"
    }, {
      "left" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "right" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "info" : "VariableDeclarationStatement[10520-10577]:VariableDeclarationStatement[10520-10577]"
    }, {
      "left" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "right" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "info" : "ExpressionStatement[10582-10650]:ExpressionStatement[10582-10650]"
    }, {
      "left" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "right" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "info" : "ExpressionStatement[10655-10744]:ExpressionStatement[10655-10744]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10752-10759]:Modifier[10752-10759]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10760-10764]:PrimitiveType[10760-10764]"
    }, {
      "left" : "declareNativeValueType",
      "right" : "declareNativeValueType",
      "info" : "SimpleName[10765-10787]:SimpleName[10765-10787]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[10788-10799]:SingleVariableDeclaration[10788-10799]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[10801-10812]:SingleVariableDeclaration[10801-10812]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[10820-10836]:SingleVariableDeclaration[10820-10836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10838-10912]:Block[10838-10912]"
    }, {
      "left" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "right" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "info" : "ExpressionStatement[10844-10908]:ExpressionStatement[10844-10908]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10916-10923]:Modifier[10916-10923]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10924-10928]:PrimitiveType[10924-10928]"
    }, {
      "left" : "declareNativeType",
      "right" : "declareNativeType",
      "info" : "SimpleName[10929-10946]:SimpleName[10929-10946]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[10947-10958]:SingleVariableDeclaration[10947-10958]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[10960-10971]:SingleVariableDeclaration[10960-10971]"
    }, {
      "left" : "JSType t",
      "right" : "JSType t",
      "info" : "SingleVariableDeclaration[10973-10981]:SingleVariableDeclaration[10973-10981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10983-11035]:Block[10983-11035]"
    }, {
      "left" : "scope.declare(name, null, t, null, false);",
      "right" : "scope.declare(name, null, t, null, false);",
      "info" : "ExpressionStatement[10989-11031]:ExpressionStatement[10989-11031]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11039-11046]:Modifier[11039-11046]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11047-11053]:Modifier[11047-11053]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11054-11059]:TYPE_DECLARATION_KIND[11054-11059]"
    }, {
      "left" : "DiscoverEnums",
      "right" : "DiscoverEnums",
      "info" : "SimpleName[11060-11073]:SimpleName[11060-11073]"
    }, {
      "left" : "AbstractShallowCallback",
      "right" : "AbstractShallowCallback",
      "info" : "SimpleType[11082-11105]:SimpleType[11082-11105]"
    }, {
      "left" : "DiscoverEnums",
      "right" : "DiscoverEnums",
      "info" : "SimpleName[11156-11169]:SimpleName[11156-11169]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[11170-11193]:SingleVariableDeclaration[11170-11193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11195-11234]:Block[11195-11234]"
    }, {
      "left" : "this.registry = registry;",
      "right" : "this.registry = registry;",
      "info" : "ExpressionStatement[11203-11228]:ExpressionStatement[11203-11228]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11240-11249]:MarkerAnnotation[11240-11249]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11254-11260]:Modifier[11254-11260]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11261-11265]:PrimitiveType[11261-11265]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[11266-11271]:SimpleName[11266-11271]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[11272-11287]:SingleVariableDeclaration[11272-11287]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[11289-11298]:SingleVariableDeclaration[11289-11298]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[11300-11311]:SingleVariableDeclaration[11300-11311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11313-11898]:Block[11313-11898]"
    }, {
      "left" : "Node nameNode = null;",
      "right" : "Node nameNode = null;",
      "info" : "VariableDeclarationStatement[11321-11342]:VariableDeclarationStatement[11321-11342]"
    }, {
      "left" : "switch (node.getType()) {\n        case Token.NAME:\n          nameNode = node;\n          break;\n        case Token.VAR:\n          if (node.hasOneChild()) {\n            nameNode = node.getFirstChild();\n          }\n          break;\n        case Token.ASSIGN:\n          nameNode = node.getFirstChild();\n          break;\n      }",
      "right" : "switch (node.getType()) {\n        case Token.NAME:\n          nameNode = node;\n          break;\n        case Token.VAR:\n          if (node.hasOneChild()) {\n            nameNode = node.getFirstChild();\n          }\n          break;\n        case Token.ASSIGN:\n          nameNode = node.getFirstChild();\n          break;\n      }",
      "info" : "SwitchStatement[11349-11672]:SwitchStatement[11349-11672]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[11383-11399]:SwitchCase[11383-11399]"
    }, {
      "left" : "nameNode = node;",
      "right" : "nameNode = node;",
      "info" : "ExpressionStatement[11410-11426]:ExpressionStatement[11410-11426]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11437-11443]:BreakStatement[11437-11443]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[11452-11467]:SwitchCase[11452-11467]"
    }, {
      "left" : "if (node.hasOneChild())",
      "right" : "if (node.hasOneChild())",
      "info" : "IfStatement[11478-11560]:IfStatement[11478-11560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11502-11560]:Block[11502-11560]"
    }, {
      "left" : "nameNode = node.getFirstChild();",
      "right" : "nameNode = node.getFirstChild();",
      "info" : "ExpressionStatement[11516-11548]:ExpressionStatement[11516-11548]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11571-11577]:BreakStatement[11571-11577]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[11586-11604]:SwitchCase[11586-11604]"
    }, {
      "left" : "nameNode = node.getFirstChild();",
      "right" : "nameNode = node.getFirstChild();",
      "info" : "ExpressionStatement[11615-11647]:ExpressionStatement[11615-11647]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11658-11664]:BreakStatement[11658-11664]"
    }, {
      "left" : "if (nameNode != null)",
      "right" : "if (nameNode != null)",
      "info" : "IfStatement[11680-11892]:IfStatement[11680-11892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11702-11892]:Block[11702-11892]"
    }, {
      "left" : "JSDocInfo info = node.getJSDocInfo();",
      "right" : "JSDocInfo info = node.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[11712-11749]:VariableDeclarationStatement[11712-11749]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[11758-11884]:IfStatement[11758-11884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11807-11884]:Block[11807-11884]"
    }, {
      "left" : "registry.identifyEnumName(nameNode.getQualifiedName());",
      "right" : "registry.identifyEnumName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[11819-11874]:ExpressionStatement[11819-11874]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12112-12119]:Modifier[12112-12119]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12120-12126]:Modifier[12120-12126]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[12127-12131]:SimpleType[12127-12131]"
    }, {
      "left" : "getPrototypePropertyOwner",
      "right" : "getPrototypePropertyOwner",
      "info" : "SimpleName[12132-12157]:SimpleName[12132-12157]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12158-12164]:SingleVariableDeclaration[12158-12164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12166-12544]:Block[12166-12544]"
    }, {
      "left" : "if (n.getType() == Token.GETPROP)",
      "right" : "if (n.getType() == Token.GETPROP)",
      "info" : "IfStatement[12172-12523]:IfStatement[12172-12523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12206-12523]:Block[12206-12523]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[12214-12250]:VariableDeclarationStatement[12214-12250]"
    }, {
      "left" : "if (firstChild.getType() == Token.GETPROP &&\n          firstChild.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (firstChild.getType() == Token.GETPROP &&\n          firstChild.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[12257-12517]:IfStatement[12257-12517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12371-12517]:Block[12371-12517]"
    }, {
      "left" : "Node maybeOwner = firstChild.getFirstChild();",
      "right" : "Node maybeOwner = firstChild.getFirstChild();",
      "info" : "VariableDeclarationStatement[12381-12426]:VariableDeclarationStatement[12381-12426]"
    }, {
      "left" : "if (maybeOwner.isQualifiedName())",
      "right" : "if (maybeOwner.isQualifiedName())",
      "info" : "IfStatement[12435-12509]:IfStatement[12435-12509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12469-12509]:Block[12469-12509]"
    }, {
      "left" : "return maybeOwner;",
      "right" : "return maybeOwner;",
      "info" : "ReturnStatement[12481-12499]:ReturnStatement[12481-12499]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12528-12540]:ReturnStatement[12528-12540]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12548-12555]:Modifier[12548-12555]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12556-12560]:PrimitiveType[12556-12560]"
    }, {
      "left" : "attachLiteralTypes",
      "right" : "attachLiteralTypes",
      "info" : "SimpleName[12561-12579]:SimpleName[12561-12579]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12580-12586]:SingleVariableDeclaration[12580-12586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12588-13545]:Block[12588-13545]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NULL:\n        n.setJSType(getNativeType(NULL_TYPE));\n        break;\n\n      case Token.VOID:\n        n.setJSType(getNativeType(VOID_TYPE));\n        break;\n\n      case Token.STRING:\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.NUMBER:\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.REGEXP:\n        n.setJSType(getNativeType(REGEXP_TYPE));\n        break;\n\n      case Token.REF_SPECIAL:\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n        break;\n\n      case Token.OBJECTLIT:\n        if (n.getJSType() == null) {\n          n.setJSType(typeRegistry.createAnonymousObjectType());\n        }\n        break;\n\n      // NOTE(nicksantos): If we ever support Array tuples,\n      // we will need to put ARRAYLIT here as well.\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NULL:\n        n.setJSType(getNativeType(NULL_TYPE));\n        break;\n\n      case Token.VOID:\n        n.setJSType(getNativeType(VOID_TYPE));\n        break;\n\n      case Token.STRING:\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.NUMBER:\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.REGEXP:\n        n.setJSType(getNativeType(REGEXP_TYPE));\n        break;\n\n      case Token.REF_SPECIAL:\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n        break;\n\n      case Token.OBJECTLIT:\n        if (n.getJSType() == null) {\n          n.setJSType(typeRegistry.createAnonymousObjectType());\n        }\n        break;\n\n      // NOTE(nicksantos): If we ever support Array tuples,\n      // we will need to put ARRAYLIT here as well.\n    }",
      "info" : "SwitchStatement[12594-13541]:SwitchStatement[12594-13541]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[12623-12639]:SwitchCase[12623-12639]"
    }, {
      "left" : "n.setJSType(getNativeType(NULL_TYPE));",
      "right" : "n.setJSType(getNativeType(NULL_TYPE));",
      "info" : "ExpressionStatement[12648-12686]:ExpressionStatement[12648-12686]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12695-12701]:BreakStatement[12695-12701]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[12709-12725]:SwitchCase[12709-12725]"
    }, {
      "left" : "n.setJSType(getNativeType(VOID_TYPE));",
      "right" : "n.setJSType(getNativeType(VOID_TYPE));",
      "info" : "ExpressionStatement[12734-12772]:ExpressionStatement[12734-12772]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12781-12787]:BreakStatement[12781-12787]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[12795-12813]:SwitchCase[12795-12813]"
    }, {
      "left" : "n.setJSType(getNativeType(STRING_TYPE));",
      "right" : "n.setJSType(getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[12822-12862]:ExpressionStatement[12822-12862]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12871-12877]:BreakStatement[12871-12877]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[12885-12903]:SwitchCase[12885-12903]"
    }, {
      "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "info" : "ExpressionStatement[12912-12952]:ExpressionStatement[12912-12952]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12961-12967]:BreakStatement[12961-12967]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[12975-12991]:SwitchCase[12975-12991]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[12998-13015]:SwitchCase[12998-13015]"
    }, {
      "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "info" : "ExpressionStatement[13024-13065]:ExpressionStatement[13024-13065]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13074-13080]:BreakStatement[13074-13080]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[13088-13106]:SwitchCase[13088-13106]"
    }, {
      "left" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "right" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "info" : "ExpressionStatement[13115-13155]:ExpressionStatement[13115-13155]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13164-13170]:BreakStatement[13164-13170]"
    }, {
      "left" : "case Token.REF_SPECIAL:",
      "right" : "case Token.REF_SPECIAL:",
      "info" : "SwitchCase[13178-13201]:SwitchCase[13178-13201]"
    }, {
      "left" : "n.setJSType(getNativeType(UNKNOWN_TYPE));",
      "right" : "n.setJSType(getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[13210-13251]:ExpressionStatement[13210-13251]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13260-13266]:BreakStatement[13260-13266]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[13274-13295]:SwitchCase[13274-13295]"
    }, {
      "left" : "if (n.getJSType() == null)",
      "right" : "if (n.getJSType() == null)",
      "info" : "IfStatement[13304-13407]:IfStatement[13304-13407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13331-13407]:Block[13331-13407]"
    }, {
      "left" : "n.setJSType(typeRegistry.createAnonymousObjectType());",
      "right" : "n.setJSType(typeRegistry.createAnonymousObjectType());",
      "info" : "ExpressionStatement[13343-13397]:ExpressionStatement[13343-13397]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13416-13422]:BreakStatement[13416-13422]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13549-13556]:Modifier[13549-13556]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[13557-13563]:SimpleType[13557-13563]"
    }, {
      "left" : "getNativeType",
      "right" : "getNativeType",
      "info" : "SimpleName[13564-13577]:SimpleName[13564-13577]"
    }, {
      "left" : "JSTypeNative nativeType",
      "right" : "JSTypeNative nativeType",
      "info" : "SingleVariableDeclaration[13578-13601]:SingleVariableDeclaration[13578-13601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13603-13659]:Block[13603-13659]"
    }, {
      "left" : "return typeRegistry.getNativeType(nativeType);",
      "right" : "return typeRegistry.getNativeType(nativeType);",
      "info" : "ReturnStatement[13609-13655]:ReturnStatement[13609-13655]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13663-13670]:Modifier[13663-13670]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[13671-13679]:Modifier[13671-13679]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[13680-13685]:TYPE_DECLARATION_KIND[13680-13685]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[13686-13706]:SimpleName[13686-13706]"
    }, {
      "left" : "NodeTraversal.Callback",
      "right" : "NodeTraversal.Callback",
      "info" : "SimpleType[13724-13746]:SimpleType[13724-13746]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14443-14450]:Modifier[14443-14450]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[14451-14471]:SimpleName[14451-14471]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[14472-14483]:SingleVariableDeclaration[14472-14483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14485-14518]:Block[14485-14518]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[14493-14512]:ExpressionStatement[14493-14512]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14524-14528]:PrimitiveType[14524-14528]"
    }, {
      "left" : "setDeferredType",
      "right" : "setDeferredType",
      "info" : "SimpleName[14529-14544]:SimpleName[14529-14544]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[14545-14554]:SingleVariableDeclaration[14545-14554]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[14556-14567]:SingleVariableDeclaration[14556-14567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14569-14637]:Block[14569-14637]"
    }, {
      "left" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "right" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "info" : "ExpressionStatement[14577-14631]:ExpressionStatement[14577-14631]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14643-14647]:PrimitiveType[14643-14647]"
    }, {
      "left" : "resolveTypes",
      "right" : "resolveTypes",
      "info" : "SimpleName[14648-14660]:SimpleName[14648-14660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14663-15143]:Block[14663-15143]"
    }, {
      "left" : "for (DeferredSetType deferred : deferredSetTypes)",
      "right" : "for (DeferredSetType deferred : deferredSetTypes)",
      "info" : "EnhancedForStatement[14720-14812]:EnhancedForStatement[14720-14812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14770-14812]:Block[14770-14812]"
    }, {
      "left" : "deferred.resolve(scope);",
      "right" : "deferred.resolve(scope);",
      "info" : "ExpressionStatement[14780-14804]:ExpressionStatement[14780-14804]"
    }, {
      "left" : "Iterator<Var> vars = scope.getVars();",
      "right" : "Iterator<Var> vars = scope.getVars();",
      "info" : "VariableDeclarationStatement[14875-14912]:VariableDeclarationStatement[14875-14912]"
    }, {
      "left" : "while (vars.hasNext())",
      "right" : "while (vars.hasNext())",
      "info" : "WhileStatement[14919-15010]:WhileStatement[14919-15010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14942-15010]:Block[14942-15010]"
    }, {
      "left" : "vars.next().resolveType(typeParsingErrorReporter);",
      "right" : "vars.next().resolveType(typeParsingErrorReporter);",
      "info" : "ExpressionStatement[14952-15002]:ExpressionStatement[14952-15002]"
    }, {
      "left" : "typeRegistry.resolveTypesInScope(scope);",
      "right" : "typeRegistry.resolveTypesInScope(scope);",
      "info" : "ExpressionStatement[15097-15137]:ExpressionStatement[15097-15137]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15149-15158]:MarkerAnnotation[15149-15158]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15163-15169]:Modifier[15163-15169]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[15170-15175]:Modifier[15170-15175]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15176-15183]:PrimitiveType[15176-15183]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[15184-15198]:SimpleName[15184-15198]"
    }, {
      "left" : "NodeTraversal nodeTraversal",
      "right" : "NodeTraversal nodeTraversal",
      "info" : "SingleVariableDeclaration[15199-15226]:SingleVariableDeclaration[15199-15226]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15228-15234]:SingleVariableDeclaration[15228-15234]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[15244-15255]:SingleVariableDeclaration[15244-15255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15257-15685]:Block[15257-15685]"
    }, {
      "left" : "if (n.getType() == Token.FUNCTION ||\n          n.getType() == Token.SCRIPT)",
      "right" : "if (n.getType() == Token.FUNCTION ||\n          n.getType() == Token.SCRIPT)",
      "info" : "IfStatement[15265-15413]:IfStatement[15265-15413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15341-15413]:Block[15341-15413]"
    }, {
      "left" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "right" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "info" : "ExpressionStatement[15351-15405]:ExpressionStatement[15351-15405]"
    }, {
      "left" : "return parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "right" : "return parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "info" : "ReturnStatement[15545-15679]:ReturnStatement[15545-15679]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15691-15700]:MarkerAnnotation[15691-15700]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15705-15711]:Modifier[15705-15711]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15712-15716]:PrimitiveType[15712-15716]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[15717-15722]:SimpleName[15717-15722]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[15723-15738]:SingleVariableDeclaration[15723-15738]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15740-15746]:SingleVariableDeclaration[15740-15746]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[15748-15759]:SingleVariableDeclaration[15748-15759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15761-17241]:Block[15761-17241]"
    }, {
      "left" : "attachLiteralTypes(n);",
      "right" : "attachLiteralTypes(n);",
      "info" : "ExpressionStatement[15769-15791]:ExpressionStatement[15769-15791]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // VARs and ASSIGNs are handled in different branches of this\n          // switch statement.\n          if (parent.getType() != Token.ASSIGN &&\n              parent.getType() != Token.NAME) {\n            defineDeclaredFunction(n, parent);\n          }\n\n          break;\n\n        case Token.ASSIGN:\n          // Handle constructor and enum definitions.\n          defineNamedTypeAssign(n, parent);\n\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // VARs and ASSIGNs are handled in different branches of this\n          // switch statement.\n          if (parent.getType() != Token.ASSIGN &&\n              parent.getType() != Token.NAME) {\n            defineDeclaredFunction(n, parent);\n          }\n\n          break;\n\n        case Token.ASSIGN:\n          // Handle constructor and enum definitions.\n          defineNamedTypeAssign(n, parent);\n\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "info" : "SwitchStatement[15799-17235]:SwitchStatement[15799-17235]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[15830-15846]:SwitchCase[15830-15846]"
    }, {
      "left" : "checkForClassDefiningCalls(t, n, parent);",
      "right" : "checkForClassDefiningCalls(t, n, parent);",
      "info" : "ExpressionStatement[15857-15898]:ExpressionStatement[15857-15898]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15909-15915]:BreakStatement[15909-15915]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[15925-15945]:SwitchCase[15925-15945]"
    }, {
      "left" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "right" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "info" : "IfStatement[15956-16062]:IfStatement[15956-16062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16010-16062]:Block[16010-16062]"
    }, {
      "left" : "nonExternFunctions.add(n);",
      "right" : "nonExternFunctions.add(n);",
      "info" : "ExpressionStatement[16024-16050]:ExpressionStatement[16024-16050]"
    }, {
      "left" : "if (parent.getType() != Token.ASSIGN &&\n              parent.getType() != Token.NAME)",
      "right" : "if (parent.getType() != Token.ASSIGN &&\n              parent.getType() != Token.NAME)",
      "info" : "IfStatement[16177-16323]:IfStatement[16177-16323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16263-16323]:Block[16263-16323]"
    }, {
      "left" : "defineDeclaredFunction(n, parent);",
      "right" : "defineDeclaredFunction(n, parent);",
      "info" : "ExpressionStatement[16277-16311]:ExpressionStatement[16277-16311]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16335-16341]:BreakStatement[16335-16341]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[16351-16369]:SwitchCase[16351-16369]"
    }, {
      "left" : "defineNamedTypeAssign(n, parent);",
      "right" : "defineNamedTypeAssign(n, parent);",
      "info" : "ExpressionStatement[16434-16467]:ExpressionStatement[16434-16467]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[16529-16565]:VariableDeclarationStatement[16529-16565]"
    }, {
      "left" : "if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName())",
      "right" : "if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName())",
      "info" : "IfStatement[16576-16791]:IfStatement[16576-16791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16665-16791]:Block[16665-16791]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "info" : "ExpressionStatement[16679-16779]:ExpressionStatement[16679-16779]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16802-16808]:BreakStatement[16802-16808]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[16818-16835]:SwitchCase[16818-16835]"
    }, {
      "left" : "defineCatch(n, parent);",
      "right" : "defineCatch(n, parent);",
      "info" : "ExpressionStatement[16846-16869]:ExpressionStatement[16846-16869]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16880-16886]:BreakStatement[16880-16886]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[16896-16911]:SwitchCase[16896-16911]"
    }, {
      "left" : "defineVar(n, parent);",
      "right" : "defineVar(n, parent);",
      "info" : "ExpressionStatement[16922-16943]:ExpressionStatement[16922-16943]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16954-16960]:BreakStatement[16954-16960]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[16970-16989]:SwitchCase[16970-16989]"
    }, {
      "left" : "if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName())",
      "right" : "if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName())",
      "info" : "IfStatement[17040-17210]:IfStatement[17040-17210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17120-17210]:Block[17120-17210]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "info" : "ExpressionStatement[17134-17198]:ExpressionStatement[17134-17198]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17221-17227]:BreakStatement[17221-17227]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[17477-17483]:SimpleType[17477-17483]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[17484-17511]:SimpleName[17484-17511]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[17521-17536]:SingleVariableDeclaration[17521-17536]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[17538-17547]:SingleVariableDeclaration[17538-17547]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[17549-17563]:SingleVariableDeclaration[17549-17563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17565-17645]:Block[17565-17645]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(t.getSourceName(), node, info);",
      "right" : "return getDeclaredTypeInAnnotation(t.getSourceName(), node, info);",
      "info" : "ReturnStatement[17573-17639]:ReturnStatement[17573-17639]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[17651-17657]:SimpleType[17651-17657]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[17658-17685]:SimpleName[17658-17685]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[17686-17703]:SingleVariableDeclaration[17686-17703]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[17713-17722]:SingleVariableDeclaration[17713-17722]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[17724-17738]:SingleVariableDeclaration[17724-17738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17740-19326]:Block[17740-19326]"
    }, {
      "left" : "JSType jsType = null;",
      "right" : "JSType jsType = null;",
      "info" : "VariableDeclarationStatement[17748-17769]:VariableDeclarationStatement[17748-17769]"
    }, {
      "left" : "Node objNode = node.getType() == Token.GETPROP ?\n          node.getFirstChild() : null;",
      "right" : "Node objNode = node.getType() == Token.GETPROP ?\n          node.getFirstChild() : null;",
      "info" : "VariableDeclarationStatement[17776-17863]:VariableDeclarationStatement[17776-17863]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[17870-19299]:IfStatement[17870-19299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17888-19299]:Block[17888-19299]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[17898-19291]:IfStatement[17898-19291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17918-17994]:Block[17918-17994]"
    }, {
      "left" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "right" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[17930-17984]:ExpressionStatement[17930-17984]"
    }, {
      "left" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "right" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "info" : "IfStatement[18000-19291]:IfStatement[18000-19291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18057-19291]:Block[18057-19291]"
    }, {
      "left" : "String fnName = node.getQualifiedName();",
      "right" : "String fnName = node.getQualifiedName();",
      "info" : "VariableDeclarationStatement[18069-18109]:VariableDeclarationStatement[18069-18109]"
    }, {
      "left" : "if (info.isConstructor() && typeRegistry.getType(fnName) != null)",
      "right" : "if (info.isConstructor() && typeRegistry.getType(fnName) != null)",
      "info" : "IfStatement[18177-18281]:IfStatement[18177-18281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18243-18281]:Block[18243-18281]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[18257-18269]:ReturnStatement[18257-18269]"
    }, {
      "left" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(\n                  fnName, compiler, node, sourceName, scope)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferParameterTypes(info)\n              .inferInheritance(info);",
      "right" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(\n                  fnName, compiler, node, sourceName, scope)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferParameterTypes(info)\n              .inferInheritance(info);",
      "info" : "VariableDeclarationStatement[18293-18582]:VariableDeclarationStatement[18293-18582]"
    }, {
      "left" : "boolean searchedForThisType = false;",
      "right" : "boolean searchedForThisType = false;",
      "info" : "VariableDeclarationStatement[18631-18667]:VariableDeclarationStatement[18631-18667]"
    }, {
      "left" : "if (objNode != null)",
      "right" : "if (objNode != null)",
      "info" : "IfStatement[18678-19128]:IfStatement[18678-19128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18699-19128]:Block[18699-19128]"
    }, {
      "left" : "if (objNode.getType() == Token.GETPROP &&\n                objNode.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (objNode.getType() == Token.GETPROP &&\n                objNode.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[18713-19116]:IfStatement[18713-19116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18827-18952]:Block[18827-18952]"
    }, {
      "left" : "builder.inferThisType(info, objNode.getFirstChild());",
      "right" : "builder.inferThisType(info, objNode.getFirstChild());",
      "info" : "ExpressionStatement[18843-18896]:ExpressionStatement[18843-18896]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[18911-18938]:ExpressionStatement[18911-18938]"
    }, {
      "left" : "if (objNode.getType() == Token.THIS)",
      "right" : "if (objNode.getType() == Token.THIS)",
      "info" : "IfStatement[18958-19116]:IfStatement[18958-19116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18995-19116]:Block[18995-19116]"
    }, {
      "left" : "builder.inferThisType(info, objNode.getJSType());",
      "right" : "builder.inferThisType(info, objNode.getJSType());",
      "info" : "ExpressionStatement[19011-19060]:ExpressionStatement[19011-19060]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[19075-19102]:ExpressionStatement[19075-19102]"
    }, {
      "left" : "if (!searchedForThisType)",
      "right" : "if (!searchedForThisType)",
      "info" : "IfStatement[19140-19233]:IfStatement[19140-19233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19166-19233]:Block[19166-19233]"
    }, {
      "left" : "builder.inferThisType(info, (Node) null);",
      "right" : "builder.inferThisType(info, (Node) null);",
      "info" : "ExpressionStatement[19180-19221]:ExpressionStatement[19180-19221]"
    }, {
      "left" : "jsType = builder.buildAndRegister();",
      "right" : "jsType = builder.buildAndRegister();",
      "info" : "ExpressionStatement[19245-19281]:ExpressionStatement[19245-19281]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[19306-19320]:ReturnStatement[19306-19320]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19476-19480]:PrimitiveType[19476-19480]"
    }, {
      "left" : "assertDefinitionNode",
      "right" : "assertDefinitionNode",
      "info" : "SimpleName[19481-19501]:SimpleName[19481-19501]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19502-19508]:SingleVariableDeclaration[19502-19508]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[19510-19518]:SingleVariableDeclaration[19510-19518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19520-19632]:Block[19520-19632]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[19528-19573]:ExpressionStatement[19528-19573]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == type);",
      "right" : "Preconditions.checkState(n.getType() == type);",
      "info" : "ExpressionStatement[19580-19626]:ExpressionStatement[19580-19626]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19688-19692]:PrimitiveType[19688-19692]"
    }, {
      "left" : "defineCatch",
      "right" : "defineCatch",
      "info" : "SimpleName[19693-19704]:SimpleName[19693-19704]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19705-19711]:SingleVariableDeclaration[19705-19711]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[19713-19724]:SingleVariableDeclaration[19713-19724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19726-19857]:Block[19726-19857]"
    }, {
      "left" : "assertDefinitionNode(n, Token.CATCH);",
      "right" : "assertDefinitionNode(n, Token.CATCH);",
      "info" : "ExpressionStatement[19734-19771]:ExpressionStatement[19734-19771]"
    }, {
      "left" : "Node catchName = n.getFirstChild();",
      "right" : "Node catchName = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[19778-19813]:VariableDeclarationStatement[19778-19813]"
    }, {
      "left" : "defineSlot(catchName, n, null);",
      "right" : "defineSlot(catchName, n, null);",
      "info" : "ExpressionStatement[19820-19851]:ExpressionStatement[19820-19851]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19916-19920]:PrimitiveType[19916-19920]"
    }, {
      "left" : "defineVar",
      "right" : "defineVar",
      "info" : "SimpleName[19921-19930]:SimpleName[19921-19930]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19931-19937]:SingleVariableDeclaration[19931-19937]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[19939-19950]:SingleVariableDeclaration[19939-19950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19952-20489]:Block[19952-20489]"
    }, {
      "left" : "assertDefinitionNode(n, Token.VAR);",
      "right" : "assertDefinitionNode(n, Token.VAR);",
      "info" : "ExpressionStatement[19960-19995]:ExpressionStatement[19960-19995]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[20002-20036]:VariableDeclarationStatement[20002-20036]"
    }, {
      "left" : "if (n.hasMoreThanOneChild())",
      "right" : "if (n.hasMoreThanOneChild())",
      "info" : "IfStatement[20043-20483]:IfStatement[20043-20483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20072-20335]:Block[20072-20335]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[20082-20216]:IfStatement[20082-20216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20100-20216]:Block[20100-20216]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "right" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "info" : "ExpressionStatement[20143-20206]:ExpressionStatement[20143-20206]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[20225-20327]:EnhancedForStatement[20225-20327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20256-20327]:Block[20256-20327]"
    }, {
      "left" : "defineName(name, n, parent, name.getJSDocInfo());",
      "right" : "defineName(name, n, parent, name.getJSDocInfo());",
      "info" : "ExpressionStatement[20268-20317]:ExpressionStatement[20268-20317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20341-20483]:Block[20341-20483]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[20351-20381]:VariableDeclarationStatement[20351-20381]"
    }, {
      "left" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "right" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "info" : "ExpressionStatement[20390-20475]:ExpressionStatement[20390-20475]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20547-20551]:PrimitiveType[20547-20551]"
    }, {
      "left" : "defineDeclaredFunction",
      "right" : "defineDeclaredFunction",
      "info" : "SimpleName[20552-20574]:SimpleName[20552-20574]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20575-20581]:SingleVariableDeclaration[20575-20581]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[20583-20594]:SingleVariableDeclaration[20583-20594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20596-21217]:Block[20596-21217]"
    }, {
      "left" : "assertDefinitionNode(n, Token.FUNCTION);",
      "right" : "assertDefinitionNode(n, Token.FUNCTION);",
      "info" : "ExpressionStatement[20604-20644]:ExpressionStatement[20604-20644]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[20652-20686]:VariableDeclarationStatement[20652-20686]"
    }, {
      "left" : "int parentType = parent.getType();",
      "right" : "int parentType = parent.getType();",
      "info" : "VariableDeclarationStatement[20693-20727]:VariableDeclarationStatement[20693-20727]"
    }, {
      "left" : "Preconditions.checkState(\n          (scope.isLocal() || parentType != Token.ASSIGN) &&\n          parentType != Token.NAME,\n          \"function defined as standalone function when it is being \" +\n          \"assigned\");",
      "right" : "Preconditions.checkState(\n          (scope.isLocal() || parentType != Token.ASSIGN) &&\n          parentType != Token.NAME,\n          \"function defined as standalone function when it is being \" +\n          \"assigned\");",
      "info" : "ExpressionStatement[20734-20951]:ExpressionStatement[20734-20951]"
    }, {
      "left" : "String functionName = n.getFirstChild().getString();",
      "right" : "String functionName = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[20958-21010]:VariableDeclarationStatement[20958-21010]"
    }, {
      "left" : "FunctionType functionType = getFunctionType(functionName, n, info,\n          null);",
      "right" : "FunctionType functionType = getFunctionType(functionName, n, info,\n          null);",
      "info" : "VariableDeclarationStatement[21017-21100]:VariableDeclarationStatement[21017-21100]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[21107-21211]:IfStatement[21107-21211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21146-21211]:Block[21146-21211]"
    }, {
      "left" : "defineSlot(n.getFirstChild(), n, functionType);",
      "right" : "defineSlot(n.getFirstChild(), n, functionType);",
      "info" : "ExpressionStatement[21156-21203]:ExpressionStatement[21156-21203]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21305-21309]:PrimitiveType[21305-21309]"
    }, {
      "left" : "defineNamedTypeAssign",
      "right" : "defineNamedTypeAssign",
      "info" : "SimpleName[21310-21331]:SimpleName[21310-21331]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21332-21338]:SingleVariableDeclaration[21332-21338]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[21340-21351]:SingleVariableDeclaration[21340-21351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21353-22403]:Block[21353-22403]"
    }, {
      "left" : "assertDefinitionNode(n, Token.ASSIGN);",
      "right" : "assertDefinitionNode(n, Token.ASSIGN);",
      "info" : "ExpressionStatement[21361-21399]:ExpressionStatement[21361-21399]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[21406-21440]:VariableDeclarationStatement[21406-21440]"
    }, {
      "left" : "Node rvalue = n.getLastChild();",
      "right" : "Node rvalue = n.getLastChild();",
      "info" : "VariableDeclarationStatement[21788-21819]:VariableDeclarationStatement[21788-21819]"
    }, {
      "left" : "Node lvalue = n.getFirstChild();",
      "right" : "Node lvalue = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[21826-21858]:VariableDeclarationStatement[21826-21858]"
    }, {
      "left" : "info = (info != null) ? info : rvalue.getJSDocInfo();",
      "right" : "info = (info != null) ? info : rvalue.getJSDocInfo();",
      "info" : "ExpressionStatement[21865-21918]:ExpressionStatement[21865-21918]"
    }, {
      "left" : "if (rvalue.getType() == Token.FUNCTION ||\n          info != null && info.isConstructor())",
      "right" : "if (rvalue.getType() == Token.FUNCTION ||\n          info != null && info.isConstructor())",
      "info" : "IfStatement[21925-22397]:IfStatement[21925-22397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22015-22110]:Block[22015-22110]"
    }, {
      "left" : "getFunctionType(lvalue.getQualifiedName(), rvalue, info,\n            lvalue);",
      "right" : "getFunctionType(lvalue.getQualifiedName(), rvalue, info,\n            lvalue);",
      "info" : "ExpressionStatement[22025-22102]:ExpressionStatement[22025-22102]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[22116-22397]:IfStatement[22116-22397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22165-22397]:Block[22165-22397]"
    }, {
      "left" : "JSType type = getEnumType(lvalue.getQualifiedName(), n, rvalue,\n            info.getEnumParameterType().evaluate(scope, typeRegistry));",
      "right" : "JSType type = getEnumType(lvalue.getQualifiedName(), n, rvalue,\n            info.getEnumParameterType().evaluate(scope, typeRegistry));",
      "info" : "VariableDeclarationStatement[22175-22310]:VariableDeclarationStatement[22175-22310]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[22319-22389]:IfStatement[22319-22389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22337-22389]:Block[22337-22389]"
    }, {
      "left" : "setDeferredType(lvalue, type);",
      "right" : "setDeferredType(lvalue, type);",
      "info" : "ExpressionStatement[22349-22379]:ExpressionStatement[22349-22379]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22793-22800]:Modifier[22793-22800]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22801-22805]:PrimitiveType[22801-22805]"
    }, {
      "left" : "defineName",
      "right" : "defineName",
      "info" : "SimpleName[22806-22816]:SimpleName[22806-22816]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[22817-22826]:SingleVariableDeclaration[22817-22826]"
    }, {
      "left" : "Node var",
      "right" : "Node var",
      "info" : "SingleVariableDeclaration[22828-22836]:SingleVariableDeclaration[22828-22836]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[22838-22849]:SingleVariableDeclaration[22838-22849]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[22851-22865]:SingleVariableDeclaration[22851-22865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22867-24135]:Block[22867-24135]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[22875-22909]:VariableDeclarationStatement[22875-22909]"
    }, {
      "left" : "if (value != null && value.getType() == Token.FUNCTION)",
      "right" : "if (value != null && value.getType() == Token.FUNCTION)",
      "info" : "IfStatement[22917-24129]:IfStatement[22917-24129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22973-23343]:Block[22973-23343]"
    }, {
      "left" : "String functionName = name.getString();",
      "right" : "String functionName = name.getString();",
      "info" : "VariableDeclarationStatement[23003-23042]:VariableDeclarationStatement[23003-23042]"
    }, {
      "left" : "FunctionType functionType =\n            getFunctionType(functionName, value, info, null);",
      "right" : "FunctionType functionType =\n            getFunctionType(functionName, value, info, null);",
      "info" : "VariableDeclarationStatement[23051-23140]:VariableDeclarationStatement[23051-23140]"
    }, {
      "left" : "if (functionType.isReturnTypeInferred() &&\n            scope.isLocal())",
      "right" : "if (functionType.isReturnTypeInferred() &&\n            scope.isLocal())",
      "info" : "IfStatement[23149-23335]:IfStatement[23149-23335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23221-23271]:Block[23221-23271]"
    }, {
      "left" : "defineSlot(name, var, null);",
      "right" : "defineSlot(name, var, null);",
      "info" : "ExpressionStatement[23233-23261]:ExpressionStatement[23233-23261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23277-23335]:Block[23277-23335]"
    }, {
      "left" : "defineSlot(name, var, functionType);",
      "right" : "defineSlot(name, var, functionType);",
      "info" : "ExpressionStatement[23289-23325]:ExpressionStatement[23289-23325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23349-24129]:Block[23349-24129]"
    }, {
      "left" : "JSType type = null;",
      "right" : "JSType type = null;",
      "info" : "VariableDeclarationStatement[23386-23405]:VariableDeclarationStatement[23386-23405]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[23414-24083]:IfStatement[23414-24083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23432-23699]:Block[23432-23699]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(sourceName);",
      "right" : "CompilerInput input = compiler.getInput(sourceName);",
      "info" : "VariableDeclarationStatement[23494-23546]:VariableDeclarationStatement[23494-23546]"
    }, {
      "left" : "Preconditions.checkNotNull(input, sourceName);",
      "right" : "Preconditions.checkNotNull(input, sourceName);",
      "info" : "ExpressionStatement[23557-23603]:ExpressionStatement[23557-23603]"
    }, {
      "left" : "type = input.isExtern() ?\n              getNativeType(UNKNOWN_TYPE) : null;",
      "right" : "type = input.isExtern() ?\n              getNativeType(UNKNOWN_TYPE) : null;",
      "info" : "ExpressionStatement[23614-23689]:ExpressionStatement[23614-23689]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[23705-24083]:IfStatement[23705-24083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23738-23882]:Block[23738-23882]"
    }, {
      "left" : "type = getEnumType(name.getString(), var, value,\n              info.getEnumParameterType().evaluate(scope, typeRegistry));",
      "right" : "type = getEnumType(name.getString(), var, value,\n              info.getEnumParameterType().evaluate(scope, typeRegistry));",
      "info" : "ExpressionStatement[23750-23872]:ExpressionStatement[23750-23872]"
    }, {
      "left" : "if (info.isConstructor())",
      "right" : "if (info.isConstructor())",
      "info" : "IfStatement[23888-24083]:IfStatement[23888-24083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23914-23996]:Block[23914-23996]"
    }, {
      "left" : "type = getFunctionType(name.getString(), value, info, name);",
      "right" : "type = getFunctionType(name.getString(), value, info, name);",
      "info" : "ExpressionStatement[23926-23986]:ExpressionStatement[23926-23986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24002-24083]:Block[24002-24083]"
    }, {
      "left" : "type = getDeclaredTypeInAnnotation(sourceName, name, info);",
      "right" : "type = getDeclaredTypeInAnnotation(sourceName, name, info);",
      "info" : "ExpressionStatement[24014-24073]:ExpressionStatement[24014-24073]"
    }, {
      "left" : "defineSlot(name, var, type);",
      "right" : "defineSlot(name, var, type);",
      "info" : "ExpressionStatement[24093-24121]:ExpressionStatement[24093-24121]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24746-24753]:Modifier[24746-24753]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[24754-24766]:SimpleType[24754-24766]"
    }, {
      "left" : "getFunctionType",
      "right" : "getFunctionType",
      "info" : "SimpleName[24767-24782]:SimpleName[24767-24782]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[24783-24794]:SingleVariableDeclaration[24783-24794]"
    }, {
      "left" : "Node rValue",
      "right" : "Node rValue",
      "info" : "SingleVariableDeclaration[24804-24815]:SingleVariableDeclaration[24804-24815]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[24817-24831]:SingleVariableDeclaration[24817-24831]"
    }, {
      "left" : "@Nullable Node lvalueNode",
      "right" : "@Nullable Node lvalueNode",
      "info" : "SingleVariableDeclaration[24833-24858]:SingleVariableDeclaration[24833-24858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24860-27737]:Block[24860-27737]"
    }, {
      "left" : "FunctionType functionType = null;",
      "right" : "FunctionType functionType = null;",
      "info" : "VariableDeclarationStatement[24868-24901]:VariableDeclarationStatement[24868-24901]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "right" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "info" : "IfStatement[24987-25443]:IfStatement[24987-25443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25055-25443]:Block[25055-25443]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[25065-25115]:VariableDeclarationStatement[25065-25115]"
    }, {
      "left" : "if (var != null && var.getType() instanceof FunctionType)",
      "right" : "if (var != null && var.getType() instanceof FunctionType)",
      "info" : "IfStatement[25124-25406]:IfStatement[25124-25406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25182-25406]:Block[25182-25406]"
    }, {
      "left" : "functionType = (FunctionType) var.getType();",
      "right" : "functionType = (FunctionType) var.getType();",
      "info" : "ExpressionStatement[25194-25238]:ExpressionStatement[25194-25238]"
    }, {
      "left" : "if (functionType != null && functionType.isConstructor())",
      "right" : "if (functionType != null && functionType.isConstructor())",
      "info" : "IfStatement[25249-25396]:IfStatement[25249-25396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25307-25396]:Block[25307-25396]"
    }, {
      "left" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "right" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "info" : "ExpressionStatement[25321-25384]:ExpressionStatement[25321-25384]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[25415-25435]:ReturnStatement[25415-25435]"
    }, {
      "left" : "Node owner = null;",
      "right" : "Node owner = null;",
      "info" : "VariableDeclarationStatement[25451-25469]:VariableDeclarationStatement[25451-25469]"
    }, {
      "left" : "if (lvalueNode != null)",
      "right" : "if (lvalueNode != null)",
      "info" : "IfStatement[25476-25564]:IfStatement[25476-25564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25500-25564]:Block[25500-25564]"
    }, {
      "left" : "owner = getPrototypePropertyOwner(lvalueNode);",
      "right" : "owner = getPrototypePropertyOwner(lvalueNode);",
      "info" : "ExpressionStatement[25510-25556]:ExpressionStatement[25510-25556]"
    }, {
      "left" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "right" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "info" : "VariableDeclarationStatement[25572-25626]:VariableDeclarationStatement[25572-25626]"
    }, {
      "left" : "boolean isFnLiteral =\n          rValue != null && rValue.getType() == Token.FUNCTION;",
      "right" : "boolean isFnLiteral =\n          rValue != null && rValue.getType() == Token.FUNCTION;",
      "info" : "VariableDeclarationStatement[25633-25718]:VariableDeclarationStatement[25633-25718]"
    }, {
      "left" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "right" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "info" : "VariableDeclarationStatement[25725-25767]:VariableDeclarationStatement[25725-25767]"
    }, {
      "left" : "Node parametersNode = isFnLiteral ?\n          rValue.getFirstChild().getNext() : null;",
      "right" : "Node parametersNode = isFnLiteral ?\n          rValue.getFirstChild().getNext() : null;",
      "info" : "VariableDeclarationStatement[25774-25860]:VariableDeclarationStatement[25774-25860]"
    }, {
      "left" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "right" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "info" : "VariableDeclarationStatement[25867-25928]:VariableDeclarationStatement[25867-25928]"
    }, {
      "left" : "if (functionType == null && info != null && info.hasType())",
      "right" : "if (functionType == null && info != null && info.hasType())",
      "info" : "IfStatement[25936-26334]:IfStatement[25936-26334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25996-26334]:Block[25996-26334]"
    }, {
      "left" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "right" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[26006-26065]:VariableDeclarationStatement[26006-26065]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[26147-26190]:ExpressionStatement[26147-26190]"
    }, {
      "left" : "if (type.isFunctionType())",
      "right" : "if (type.isFunctionType())",
      "info" : "IfStatement[26199-26326]:IfStatement[26199-26326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26226-26326]:Block[26226-26326]"
    }, {
      "left" : "functionType = (FunctionType) type;",
      "right" : "functionType = (FunctionType) type;",
      "info" : "ExpressionStatement[26238-26273]:ExpressionStatement[26238-26273]"
    }, {
      "left" : "functionType.setJSDocInfo(info);",
      "right" : "functionType.setJSDocInfo(info);",
      "info" : "ExpressionStatement[26284-26316]:ExpressionStatement[26284-26316]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[26342-27543]:IfStatement[26342-27543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26368-27543]:Block[26368-27543]"
    }, {
      "left" : "FunctionType overriddenPropType = null;",
      "right" : "FunctionType overriddenPropType = null;",
      "info" : "VariableDeclarationStatement[26431-26470]:VariableDeclarationStatement[26431-26470]"
    }, {
      "left" : "if (lvalueNode != null && lvalueNode.getType() == Token.GETPROP &&\n            lvalueNode.isQualifiedName())",
      "right" : "if (lvalueNode != null && lvalueNode.getType() == Token.GETPROP &&\n            lvalueNode.isQualifiedName())",
      "info" : "IfStatement[26479-27005]:IfStatement[26479-27005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26588-27005]:Block[26588-27005]"
    }, {
      "left" : "Var var = scope.getVar(\n              lvalueNode.getFirstChild().getQualifiedName());",
      "right" : "Var var = scope.getVar(\n              lvalueNode.getFirstChild().getQualifiedName());",
      "info" : "VariableDeclarationStatement[26600-26685]:VariableDeclarationStatement[26600-26685]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[26696-26995]:IfStatement[26696-26995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26713-26995]:Block[26713-26995]"
    }, {
      "left" : "ObjectType ownerType = ObjectType.cast(var.getType());",
      "right" : "ObjectType ownerType = ObjectType.cast(var.getType());",
      "info" : "VariableDeclarationStatement[26727-26781]:VariableDeclarationStatement[26727-26781]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[26794-26983]:IfStatement[26794-26983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26817-26983]:Block[26817-26983]"
    }, {
      "left" : "String propName = lvalueNode.getLastChild().getString();",
      "right" : "String propName = lvalueNode.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[26833-26889]:VariableDeclarationStatement[26833-26889]"
    }, {
      "left" : "overriddenPropType = findOverriddenFunction(ownerType, propName);",
      "right" : "overriddenPropType = findOverriddenFunction(ownerType, propName);",
      "info" : "ExpressionStatement[26904-26969]:ExpressionStatement[26904-26969]"
    }, {
      "left" : "functionType =\n            new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                scope)\n            .setSourceNode(fnRoot)\n            .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n            .inferTemplateTypeName(info)\n            .inferReturnType(info)\n            .inferInheritance(info)\n            .inferThisType(info, owner)\n            .inferParameterTypes(parametersNode, info)\n            .inferReturnStatementsAsLastResort(fnBlock)\n            .buildAndRegister();",
      "right" : "functionType =\n            new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                scope)\n            .setSourceNode(fnRoot)\n            .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n            .inferTemplateTypeName(info)\n            .inferReturnType(info)\n            .inferInheritance(info)\n            .inferThisType(info, owner)\n            .inferParameterTypes(parametersNode, info)\n            .inferReturnStatementsAsLastResort(fnBlock)\n            .buildAndRegister();",
      "info" : "ExpressionStatement[27015-27535]:ExpressionStatement[27015-27535]"
    }, {
      "left" : "if (rValue != null)",
      "right" : "if (rValue != null)",
      "info" : "IfStatement[27609-27685]:IfStatement[27609-27685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27629-27685]:Block[27629-27685]"
    }, {
      "left" : "setDeferredType(rValue, functionType);",
      "right" : "setDeferredType(rValue, functionType);",
      "info" : "ExpressionStatement[27639-27677]:ExpressionStatement[27639-27677]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[27711-27731]:ReturnStatement[27711-27731]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27830-27837]:Modifier[27830-27837]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[27838-27850]:SimpleType[27838-27850]"
    }, {
      "left" : "findOverriddenFunction",
      "right" : "findOverriddenFunction",
      "info" : "SimpleName[27851-27873]:SimpleName[27851-27873]"
    }, {
      "left" : "ObjectType ownerType",
      "right" : "ObjectType ownerType",
      "info" : "SingleVariableDeclaration[27883-27903]:SingleVariableDeclaration[27883-27903]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[27905-27920]:SingleVariableDeclaration[27905-27920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27922-28570]:Block[27922-28570]"
    }, {
      "left" : "JSType propType = ownerType.getPropertyType(propName);",
      "right" : "JSType propType = ownerType.getPropertyType(propName);",
      "info" : "VariableDeclarationStatement[28016-28070]:VariableDeclarationStatement[28016-28070]"
    }, {
      "left" : "if (propType instanceof FunctionType)",
      "right" : "if (propType instanceof FunctionType)",
      "info" : "IfStatement[28077-28544]:IfStatement[28077-28544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28115-28164]:Block[28115-28164]"
    }, {
      "left" : "return (FunctionType) propType;",
      "right" : "return (FunctionType) propType;",
      "info" : "ReturnStatement[28125-28156]:ReturnStatement[28125-28156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28170-28544]:Block[28170-28544]"
    }, {
      "left" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "right" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "info" : "EnhancedForStatement[28282-28536]:EnhancedForStatement[28282-28536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28365-28536]:Block[28365-28536]"
    }, {
      "left" : "propType = iface.getPropertyType(propName);",
      "right" : "propType = iface.getPropertyType(propName);",
      "info" : "ExpressionStatement[28377-28420]:ExpressionStatement[28377-28420]"
    }, {
      "left" : "if (propType instanceof FunctionType)",
      "right" : "if (propType instanceof FunctionType)",
      "info" : "IfStatement[28431-28526]:IfStatement[28431-28526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28469-28526]:Block[28469-28526]"
    }, {
      "left" : "return (FunctionType) propType;",
      "right" : "return (FunctionType) propType;",
      "info" : "ReturnStatement[28483-28514]:ReturnStatement[28483-28514]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28552-28564]:ReturnStatement[28552-28564]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29222-29229]:Modifier[29222-29229]"
    }, {
      "left" : "EnumType",
      "right" : "EnumType",
      "info" : "SimpleType[29230-29238]:SimpleType[29230-29238]"
    }, {
      "left" : "getEnumType",
      "right" : "getEnumType",
      "info" : "SimpleName[29239-29250]:SimpleName[29239-29250]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[29251-29262]:SingleVariableDeclaration[29251-29262]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[29264-29275]:SingleVariableDeclaration[29264-29275]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[29285-29295]:SingleVariableDeclaration[29285-29295]"
    }, {
      "left" : "JSType elementsType",
      "right" : "JSType elementsType",
      "info" : "SingleVariableDeclaration[29297-29316]:SingleVariableDeclaration[29297-29316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29318-30791]:Block[29318-30791]"
    }, {
      "left" : "EnumType enumType = null;",
      "right" : "EnumType enumType = null;",
      "info" : "VariableDeclarationStatement[29326-29351]:VariableDeclarationStatement[29326-29351]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[29388-30481]:IfStatement[29388-30481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29407-30481]:Block[29407-30481]"
    }, {
      "left" : "if (value.getType() == Token.OBJECTLIT)",
      "right" : "if (value.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[29417-30473]:IfStatement[29417-30473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29457-30240]:Block[29457-30240]"
    }, {
      "left" : "enumType = typeRegistry.createEnumType(name, elementsType);",
      "right" : "enumType = typeRegistry.createEnumType(name, elementsType);",
      "info" : "ExpressionStatement[29504-29563]:ExpressionStatement[29504-29563]"
    }, {
      "left" : "Node key = value.getFirstChild();",
      "right" : "Node key = value.getFirstChild();",
      "info" : "VariableDeclarationStatement[29612-29645]:VariableDeclarationStatement[29612-29645]"
    }, {
      "left" : "while (key != null)",
      "right" : "while (key != null)",
      "info" : "WhileStatement[29656-30230]:WhileStatement[29656-30230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29676-30230]:Block[29676-30230]"
    }, {
      "left" : "String keyName = NodeUtil.getStringValue(key);",
      "right" : "String keyName = NodeUtil.getStringValue(key);",
      "info" : "VariableDeclarationStatement[29690-29736]:VariableDeclarationStatement[29690-29736]"
    }, {
      "left" : "if (enumType.hasOwnProperty(keyName))",
      "right" : "if (enumType.hasOwnProperty(keyName))",
      "info" : "IfStatement[29750-30129]:IfStatement[29750-30129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29788-29884]:Block[29788-29884]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, key, ENUM_DUP, keyName));",
      "right" : "compiler.report(JSError.make(sourceName, key, ENUM_DUP, keyName));",
      "info" : "ExpressionStatement[29804-29870]:ExpressionStatement[29804-29870]"
    }, {
      "left" : "if (!codingConvention.isValidEnumKey(keyName))",
      "right" : "if (!codingConvention.isValidEnumKey(keyName))",
      "info" : "IfStatement[29890-30129]:IfStatement[29890-30129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29937-30061]:Block[29937-30061]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[29953-30047]:ExpressionStatement[29953-30047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30067-30129]:Block[30067-30129]"
    }, {
      "left" : "enumType.defineElement(keyName);",
      "right" : "enumType.defineElement(keyName);",
      "info" : "ExpressionStatement[30083-30115]:ExpressionStatement[30083-30115]"
    }, {
      "left" : "key = key.getNext();",
      "right" : "key = key.getNext();",
      "info" : "ExpressionStatement[30142-30162]:ExpressionStatement[30142-30162]"
    }, {
      "left" : "key = (key == null) ? null : key.getNext();",
      "right" : "key = (key == null) ? null : key.getNext();",
      "info" : "ExpressionStatement[30175-30218]:ExpressionStatement[30175-30218]"
    }, {
      "left" : "if (value.isQualifiedName())",
      "right" : "if (value.isQualifiedName())",
      "info" : "IfStatement[30246-30473]:IfStatement[30246-30473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30275-30473]:Block[30275-30473]"
    }, {
      "left" : "Var var = scope.getVar(value.getQualifiedName());",
      "right" : "Var var = scope.getVar(value.getQualifiedName());",
      "info" : "VariableDeclarationStatement[30287-30336]:VariableDeclarationStatement[30287-30336]"
    }, {
      "left" : "if (var != null && var.getType() instanceof EnumType)",
      "right" : "if (var != null && var.getType() instanceof EnumType)",
      "info" : "IfStatement[30347-30463]:IfStatement[30347-30463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30401-30463]:Block[30401-30463]"
    }, {
      "left" : "enumType = (EnumType) var.getType();",
      "right" : "enumType = (EnumType) var.getType();",
      "info" : "ExpressionStatement[30415-30451]:ExpressionStatement[30415-30451]"
    }, {
      "left" : "if (enumType == null)",
      "right" : "if (enumType == null)",
      "info" : "IfStatement[30489-30761]:IfStatement[30489-30761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30511-30597]:Block[30511-30597]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, parent, ENUM_INITIALIZER));",
      "right" : "compiler.report(JSError.make(sourceName, parent, ENUM_INITIALIZER));",
      "info" : "ExpressionStatement[30521-30589]:ExpressionStatement[30521-30589]"
    }, {
      "left" : "if (scope.isGlobal())",
      "right" : "if (scope.isGlobal())",
      "info" : "IfStatement[30603-30761]:IfStatement[30603-30761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30625-30761]:Block[30625-30761]"
    }, {
      "left" : "if (name != null && !name.isEmpty())",
      "right" : "if (name != null && !name.isEmpty())",
      "info" : "IfStatement[30635-30753]:IfStatement[30635-30753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30672-30753]:Block[30672-30753]"
    }, {
      "left" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "right" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "info" : "ExpressionStatement[30684-30743]:ExpressionStatement[30684-30743]"
    }, {
      "left" : "return enumType;",
      "right" : "return enumType;",
      "info" : "ReturnStatement[30769-30785]:ReturnStatement[30769-30785]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31201-31208]:Modifier[31201-31208]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31209-31213]:PrimitiveType[31209-31213]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[31214-31224]:SimpleName[31214-31224]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[31225-31234]:SingleVariableDeclaration[31225-31234]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[31236-31247]:SingleVariableDeclaration[31236-31247]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[31249-31260]:SingleVariableDeclaration[31249-31260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31262-31321]:Block[31262-31321]"
    }, {
      "left" : "defineSlot(name, parent, type, type == null);",
      "right" : "defineSlot(name, parent, type, type == null);",
      "info" : "ExpressionStatement[31270-31315]:ExpressionStatement[31270-31315]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31810-31814]:PrimitiveType[31810-31814]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[31815-31825]:SimpleName[31815-31825]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31826-31832]:SingleVariableDeclaration[31826-31832]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[31834-31845]:SingleVariableDeclaration[31834-31845]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[31847-31858]:SingleVariableDeclaration[31847-31858]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[31860-31876]:SingleVariableDeclaration[31860-31876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31878-34516]:Block[31878-34516]"
    }, {
      "left" : "Preconditions.checkArgument(inferred || type != null);",
      "right" : "Preconditions.checkArgument(inferred || type != null);",
      "info" : "ExpressionStatement[31886-31940]:ExpressionStatement[31886-31940]"
    }, {
      "left" : "boolean shouldDeclareOnGlobalThis = false;",
      "right" : "boolean shouldDeclareOnGlobalThis = false;",
      "info" : "VariableDeclarationStatement[32010-32052]:VariableDeclarationStatement[32010-32052]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[32059-32672]:IfStatement[32059-32672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32090-32473]:Block[32090-32473]"
    }, {
      "left" : "Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);",
      "right" : "Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);",
      "info" : "ExpressionStatement[32100-32313]:ExpressionStatement[32100-32313]"
    }, {
      "left" : "shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);",
      "right" : "shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[32322-32465]:ExpressionStatement[32322-32465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32479-32672]:Block[32479-32672]"
    }, {
      "left" : "Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));",
      "right" : "Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));",
      "info" : "ExpressionStatement[32489-32664]:ExpressionStatement[32489-32664]"
    }, {
      "left" : "String variableName = n.getQualifiedName();",
      "right" : "String variableName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[32679-32722]:VariableDeclarationStatement[32679-32722]"
    }, {
      "left" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "right" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "info" : "ExpressionStatement[32729-32782]:ExpressionStatement[32729-32782]"
    }, {
      "left" : "if (scope.isDeclared(variableName, false))",
      "right" : "if (scope.isDeclared(variableName, false))",
      "info" : "IfStatement[32826-34510]:IfStatement[32826-34510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32869-33035]:Block[32869-33035]"
    }, {
      "left" : "Var oldVar = scope.getVar(variableName);",
      "right" : "Var oldVar = scope.getVar(variableName);",
      "info" : "VariableDeclarationStatement[32879-32919]:VariableDeclarationStatement[32879-32919]"
    }, {
      "left" : "validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);",
      "right" : "validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);",
      "info" : "ExpressionStatement[32928-33027]:ExpressionStatement[32928-33027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33041-34510]:Block[33041-34510]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[33051-33113]:IfStatement[33051-33113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33066-33113]:Block[33066-33113]"
    }, {
      "left" : "setDeferredType(n, type);",
      "right" : "setDeferredType(n, type);",
      "info" : "ExpressionStatement[33078-33103]:ExpressionStatement[33078-33103]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(sourceName);",
      "right" : "CompilerInput input = compiler.getInput(sourceName);",
      "info" : "VariableDeclarationStatement[33122-33174]:VariableDeclarationStatement[33122-33174]"
    }, {
      "left" : "scope.declare(variableName, n, type, input, inferred);",
      "right" : "scope.declare(variableName, n, type, input, inferred);",
      "info" : "ExpressionStatement[33183-33237]:ExpressionStatement[33183-33237]"
    }, {
      "left" : "if (shouldDeclareOnGlobalThis)",
      "right" : "if (shouldDeclareOnGlobalThis)",
      "info" : "IfStatement[33247-33780]:IfStatement[33247-33780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33278-33780]:Block[33278-33780]"
    }, {
      "left" : "ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);",
      "right" : "ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);",
      "info" : "VariableDeclarationStatement[33290-33387]:VariableDeclarationStatement[33290-33387]"
    }, {
      "left" : "boolean isExtern = input.isExtern();",
      "right" : "boolean isExtern = input.isExtern();",
      "info" : "VariableDeclarationStatement[33398-33434]:VariableDeclarationStatement[33398-33434]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[33445-33770]:IfStatement[33445-33770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33459-33674]:Block[33459-33674]"
    }, {
      "left" : "globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);",
      "right" : "globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);",
      "info" : "ExpressionStatement[33473-33662]:ExpressionStatement[33473-33662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33680-33770]:Block[33680-33770]"
    }, {
      "left" : "globalThis.defineDeclaredProperty(variableName, type, isExtern);",
      "right" : "globalThis.defineDeclaredProperty(variableName, type, isExtern);",
      "info" : "ExpressionStatement[33694-33758]:ExpressionStatement[33694-33758]"
    }, {
      "left" : "if (scope.isGlobal() && type instanceof FunctionType)",
      "right" : "if (scope.isGlobal() && type instanceof FunctionType)",
      "info" : "IfStatement[33889-34502]:IfStatement[33889-34502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33943-34502]:Block[33943-34502]"
    }, {
      "left" : "FunctionType fnType = (FunctionType) type;",
      "right" : "FunctionType fnType = (FunctionType) type;",
      "info" : "VariableDeclarationStatement[33955-33997]:VariableDeclarationStatement[33955-33997]"
    }, {
      "left" : "if (fnType.isConstructor() || fnType.isInterface())",
      "right" : "if (fnType.isConstructor() || fnType.isInterface())",
      "info" : "IfStatement[34008-34492]:IfStatement[34008-34492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34060-34492]:Block[34060-34492]"
    }, {
      "left" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "right" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[34074-34138]:VariableDeclarationStatement[34074-34138]"
    }, {
      "left" : "scope.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));",
      "right" : "scope.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));",
      "info" : "ExpressionStatement[34151-34480]:ExpressionStatement[34151-34480]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34885-34892]:Modifier[34885-34892]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[34893-34899]:SimpleType[34893-34899]"
    }, {
      "left" : "getDeclaredGetPropType",
      "right" : "getDeclaredGetPropType",
      "info" : "SimpleName[34900-34922]:SimpleName[34900-34922]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[34923-34938]:SingleVariableDeclaration[34923-34938]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[34940-34954]:SingleVariableDeclaration[34940-34954]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34964-34970]:SingleVariableDeclaration[34964-34970]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[34972-34985]:SingleVariableDeclaration[34972-34985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34987-35391]:Block[34987-35391]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[34995-35385]:IfStatement[34995-35385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35031-35096]:Block[35031-35096]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "right" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "info" : "ReturnStatement[35041-35088]:ReturnStatement[35041-35088]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[35102-35385]:IfStatement[35102-35385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35151-35190]:Block[35151-35190]"
    }, {
      "left" : "return n.getJSType();",
      "right" : "return n.getJSType();",
      "info" : "ReturnStatement[35161-35182]:ReturnStatement[35161-35182]"
    }, {
      "left" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.FUNCTION)",
      "right" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.FUNCTION)",
      "info" : "IfStatement[35196-35385]:IfStatement[35196-35385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35268-35314]:Block[35268-35314]"
    }, {
      "left" : "return rhsValue.getJSType();",
      "right" : "return rhsValue.getJSType();",
      "info" : "ReturnStatement[35278-35306]:ReturnStatement[35278-35306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35320-35385]:Block[35320-35385]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "right" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "info" : "ReturnStatement[35330-35377]:ReturnStatement[35330-35377]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35594-35601]:Modifier[35594-35601]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35602-35606]:PrimitiveType[35602-35606]"
    }, {
      "left" : "checkForClassDefiningCalls",
      "right" : "checkForClassDefiningCalls",
      "info" : "SimpleName[35607-35633]:SimpleName[35607-35633]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[35643-35658]:SingleVariableDeclaration[35643-35658]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[35660-35666]:SingleVariableDeclaration[35660-35666]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[35668-35679]:SingleVariableDeclaration[35668-35679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35681-37906]:Block[35681-37906]"
    }, {
      "left" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "right" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "info" : "VariableDeclarationStatement[35689-35779]:VariableDeclarationStatement[35689-35779]"
    }, {
      "left" : "if (relationship != null)",
      "right" : "if (relationship != null)",
      "info" : "IfStatement[35786-36550]:IfStatement[35786-36550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35812-36550]:Block[35812-36550]"
    }, {
      "left" : "ObjectType superClass = ObjectType.cast(\n            typeRegistry.getType(relationship.superclassName));",
      "right" : "ObjectType superClass = ObjectType.cast(\n            typeRegistry.getType(relationship.superclassName));",
      "info" : "VariableDeclarationStatement[35822-35926]:VariableDeclarationStatement[35822-35926]"
    }, {
      "left" : "ObjectType subClass = ObjectType.cast(\n            typeRegistry.getType(relationship.subclassName));",
      "right" : "ObjectType subClass = ObjectType.cast(\n            typeRegistry.getType(relationship.subclassName));",
      "info" : "VariableDeclarationStatement[35935-36035]:VariableDeclarationStatement[35935-36035]"
    }, {
      "left" : "if (superClass != null && subClass != null)",
      "right" : "if (superClass != null && subClass != null)",
      "info" : "IfStatement[36044-36542]:IfStatement[36044-36542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36088-36542]:Block[36088-36542]"
    }, {
      "left" : "FunctionType superCtor = superClass.getConstructor();",
      "right" : "FunctionType superCtor = superClass.getConstructor();",
      "info" : "VariableDeclarationStatement[36100-36153]:VariableDeclarationStatement[36100-36153]"
    }, {
      "left" : "FunctionType subCtor = subClass.getConstructor();",
      "right" : "FunctionType subCtor = subClass.getConstructor();",
      "info" : "VariableDeclarationStatement[36164-36213]:VariableDeclarationStatement[36164-36213]"
    }, {
      "left" : "if (relationship.type == SubclassType.INHERITS)",
      "right" : "if (relationship.type == SubclassType.INHERITS)",
      "info" : "IfStatement[36225-36353]:IfStatement[36225-36353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36273-36353]:Block[36273-36353]"
    }, {
      "left" : "validator.expectSuperType(t, n, superClass, subClass);",
      "right" : "validator.expectSuperType(t, n, superClass, subClass);",
      "info" : "ExpressionStatement[36287-36341]:ExpressionStatement[36287-36341]"
    }, {
      "left" : "if (superCtor != null && subCtor != null)",
      "right" : "if (superCtor != null && subCtor != null)",
      "info" : "IfStatement[36365-36532]:IfStatement[36365-36532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36407-36532]:Block[36407-36532]"
    }, {
      "left" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "right" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "info" : "ExpressionStatement[36421-36520]:ExpressionStatement[36421-36520]"
    }, {
      "left" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "right" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "info" : "VariableDeclarationStatement[36558-36650]:VariableDeclarationStatement[36558-36650]"
    }, {
      "left" : "if (singletonGetterClassName != null)",
      "right" : "if (singletonGetterClassName != null)",
      "info" : "IfStatement[36657-37180]:IfStatement[36657-37180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36695-37180]:Block[36695-37180]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "right" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "info" : "VariableDeclarationStatement[36705-36806]:VariableDeclarationStatement[36705-36806]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[36815-37172]:IfStatement[36815-37172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36839-37172]:Block[36839-37172]"
    }, {
      "left" : "FunctionType functionType = objectType.getConstructor();",
      "right" : "FunctionType functionType = objectType.getConstructor();",
      "info" : "VariableDeclarationStatement[36851-36907]:VariableDeclarationStatement[36851-36907]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[36919-37162]:IfStatement[36919-37162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36945-37162]:Block[36945-37162]"
    }, {
      "left" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "right" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "info" : "VariableDeclarationStatement[36959-37045]:VariableDeclarationStatement[36959-37045]"
    }, {
      "left" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "right" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "info" : "ExpressionStatement[37058-37150]:ExpressionStatement[37058-37150]"
    }, {
      "left" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "right" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "info" : "VariableDeclarationStatement[37188-37286]:VariableDeclarationStatement[37188-37286]"
    }, {
      "left" : "if (delegateRelationship != null)",
      "right" : "if (delegateRelationship != null)",
      "info" : "IfStatement[37293-37393]:IfStatement[37293-37393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37327-37393]:Block[37327-37393]"
    }, {
      "left" : "applyDelegateRelationship(delegateRelationship);",
      "right" : "applyDelegateRelationship(delegateRelationship);",
      "info" : "ExpressionStatement[37337-37385]:ExpressionStatement[37337-37385]"
    }, {
      "left" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(t, n);",
      "right" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(t, n);",
      "info" : "VariableDeclarationStatement[37401-37493]:VariableDeclarationStatement[37401-37493]"
    }, {
      "left" : "if (objectLiteralCast != null)",
      "right" : "if (objectLiteralCast != null)",
      "info" : "IfStatement[37500-37900]:IfStatement[37500-37900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37531-37900]:Block[37531-37900]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n            typeRegistry.getType(objectLiteralCast.typeName));",
      "right" : "ObjectType type = ObjectType.cast(\n            typeRegistry.getType(objectLiteralCast.typeName));",
      "info" : "VariableDeclarationStatement[37541-37638]:VariableDeclarationStatement[37541-37638]"
    }, {
      "left" : "if (type != null && type.getConstructor() != null)",
      "right" : "if (type != null && type.getConstructor() != null)",
      "info" : "IfStatement[37647-37892]:IfStatement[37647-37892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37698-37772]:Block[37698-37772]"
    }, {
      "left" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "right" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "info" : "ExpressionStatement[37710-37762]:ExpressionStatement[37710-37762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37778-37892]:Block[37778-37892]"
    }, {
      "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  CONSTRUCTOR_EXPECTED));",
      "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  CONSTRUCTOR_EXPECTED));",
      "info" : "ExpressionStatement[37790-37882]:ExpressionStatement[37790-37882]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37990-37997]:Modifier[37990-37997]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37998-38002]:PrimitiveType[37998-38002]"
    }, {
      "left" : "applyDelegateRelationship",
      "right" : "applyDelegateRelationship",
      "info" : "SimpleName[38003-38028]:SimpleName[38003-38028]"
    }, {
      "left" : "DelegateRelationship delegateRelationship",
      "right" : "DelegateRelationship delegateRelationship",
      "info" : "SingleVariableDeclaration[38038-38079]:SingleVariableDeclaration[38038-38079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38081-39823]:Block[38081-39823]"
    }, {
      "left" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "right" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "info" : "VariableDeclarationStatement[38089-38199]:VariableDeclarationStatement[38089-38199]"
    }, {
      "left" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "right" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "info" : "VariableDeclarationStatement[38206-38322]:VariableDeclarationStatement[38206-38322]"
    }, {
      "left" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "right" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "info" : "VariableDeclarationStatement[38329-38457]:VariableDeclarationStatement[38329-38457]"
    }, {
      "left" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "right" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "info" : "IfStatement[38464-39817]:IfStatement[38464-39817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38574-39817]:Block[38574-39817]"
    }, {
      "left" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "right" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "info" : "VariableDeclarationStatement[38584-38646]:VariableDeclarationStatement[38584-38646]"
    }, {
      "left" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "right" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "info" : "VariableDeclarationStatement[38655-38723]:VariableDeclarationStatement[38655-38723]"
    }, {
      "left" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "right" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "info" : "VariableDeclarationStatement[38732-38802]:VariableDeclarationStatement[38732-38802]"
    }, {
      "left" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "right" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "info" : "IfStatement[38812-39809]:IfStatement[38812-39809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38908-39809]:Block[38908-39809]"
    }, {
      "left" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[38920-39017]:VariableDeclarationStatement[38920-39017]"
    }, {
      "left" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "right" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "info" : "ExpressionStatement[39028-39119]:ExpressionStatement[39028-39119]"
    }, {
      "left" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "right" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "info" : "VariableDeclarationStatement[39130-39308]:VariableDeclarationStatement[39130-39308]"
    }, {
      "left" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "right" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "info" : "VariableDeclarationStatement[39320-39494]:VariableDeclarationStatement[39320-39494]"
    }, {
      "left" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "right" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "info" : "ExpressionStatement[39505-39559]:ExpressionStatement[39505-39559]"
    }, {
      "left" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "right" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "info" : "ExpressionStatement[39571-39730]:ExpressionStatement[39571-39730]"
    }, {
      "left" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "right" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "info" : "ExpressionStatement[39741-39799]:ExpressionStatement[39741-39799]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40252-40256]:PrimitiveType[40252-40256]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[40257-40282]:SimpleName[40257-40282]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[40283-40298]:SingleVariableDeclaration[40283-40298]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[40300-40314]:SingleVariableDeclaration[40300-40314]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[40324-40330]:SingleVariableDeclaration[40324-40330]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[40332-40343]:SingleVariableDeclaration[40332-40343]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[40345-40358]:SingleVariableDeclaration[40345-40358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40360-44302]:Block[40360-44302]"
    }, {
      "left" : "Node ownerNode = n.getFirstChild();",
      "right" : "Node ownerNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[40368-40403]:VariableDeclarationStatement[40368-40403]"
    }, {
      "left" : "String ownerName = ownerNode.getQualifiedName();",
      "right" : "String ownerName = ownerNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[40410-40458]:VariableDeclarationStatement[40410-40458]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[40465-40501]:VariableDeclarationStatement[40465-40501]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[40508-40555]:VariableDeclarationStatement[40508-40555]"
    }, {
      "left" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "right" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "info" : "ExpressionStatement[40562-40626]:ExpressionStatement[40562-40626]"
    }, {
      "left" : "if (\"prototype\".equals(propName))",
      "right" : "if (\"prototype\".equals(propName))",
      "info" : "IfStatement[40869-41154]:IfStatement[40869-41154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40903-41154]:Block[40903-41154]"
    }, {
      "left" : "Var qVar = scope.getVar(qName);",
      "right" : "Var qVar = scope.getVar(qName);",
      "info" : "VariableDeclarationStatement[40913-40944]:VariableDeclarationStatement[40913-40944]"
    }, {
      "left" : "if (qVar != null)",
      "right" : "if (qVar != null)",
      "info" : "IfStatement[40953-41146]:IfStatement[40953-41146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40971-41146]:Block[40971-41146]"
    }, {
      "left" : "if (!qVar.isTypeInferred())",
      "right" : "if (!qVar.isTypeInferred())",
      "info" : "IfStatement[40983-41103]:IfStatement[40983-41103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41011-41103]:Block[41011-41103]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[41084-41091]:ReturnStatement[41084-41091]"
    }, {
      "left" : "scope.undeclare(qVar);",
      "right" : "scope.undeclare(qVar);",
      "info" : "ExpressionStatement[41114-41136]:ExpressionStatement[41114-41136]"
    }, {
      "left" : "JSType valueType = getDeclaredGetPropType(t, info, n, rhsValue);",
      "right" : "JSType valueType = getDeclaredGetPropType(t, info, n, rhsValue);",
      "info" : "VariableDeclarationStatement[41743-41807]:VariableDeclarationStatement[41743-41807]"
    }, {
      "left" : "if (valueType == null && rhsValue != null)",
      "right" : "if (valueType == null && rhsValue != null)",
      "info" : "IfStatement[41814-41943]:IfStatement[41814-41943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41857-41943]:Block[41857-41943]"
    }, {
      "left" : "valueType = rhsValue.getJSType();",
      "right" : "valueType = rhsValue.getJSType();",
      "info" : "ExpressionStatement[41902-41935]:ExpressionStatement[41902-41935]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[41951-42222]:IfStatement[41951-42222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41974-42222]:Block[41974-42222]"
    }, {
      "left" : "if (parent.getType() == Token.EXPR_RESULT)",
      "right" : "if (parent.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[41984-42197]:IfStatement[41984-42197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42027-42197]:Block[42027-42197]"
    }, {
      "left" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "right" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "info" : "ExpressionStatement[42039-42187]:ExpressionStatement[42039-42187]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[42207-42214]:ReturnStatement[42207-42214]"
    }, {
      "left" : "boolean inferred = true;",
      "right" : "boolean inferred = true;",
      "info" : "VariableDeclarationStatement[42230-42254]:VariableDeclarationStatement[42230-42254]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[42261-42471]:IfStatement[42261-42471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42279-42471]:Block[42279-42471]"
    }, {
      "left" : "inferred = !(info.hasType() || info.hasEnumParameterType() ||\n            FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "right" : "inferred = !(info.hasType() || info.hasEnumParameterType() ||\n            FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "info" : "ExpressionStatement[42336-42463]:ExpressionStatement[42336-42463]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[42479-42683]:IfStatement[42479-42683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42493-42683]:Block[42493-42683]"
    }, {
      "left" : "inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            !scope.isDeclared(qName, false));",
      "right" : "inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            !scope.isDeclared(qName, false));",
      "info" : "ExpressionStatement[42545-42675]:ExpressionStatement[42545-42675]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[42691-44296]:IfStatement[42691-44296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42706-43569]:Block[42706-43569]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[42716-42764]:VariableDeclarationStatement[42716-42764]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[42773-43376]:IfStatement[42773-43376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42796-43376]:Block[42796-43376]"
    }, {
      "left" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "right" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "info" : "VariableDeclarationStatement[42909-42976]:VariableDeclarationStatement[42909-42976]"
    }, {
      "left" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "right" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "info" : "IfStatement[42987-43366]:IfStatement[42987-43366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43202-43366]:Block[43202-43366]"
    }, {
      "left" : "ownerType.defineDeclaredProperty(propName, valueType, isExtern);",
      "right" : "ownerType.defineDeclaredProperty(propName, valueType, isExtern);",
      "info" : "ExpressionStatement[43290-43354]:ExpressionStatement[43290-43354]"
    }, {
      "left" : "defineSlot(n, parent, valueType, inferred);",
      "right" : "defineSlot(n, parent, valueType, inferred);",
      "info" : "ExpressionStatement[43518-43561]:ExpressionStatement[43518-43561]"
    }, {
      "left" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.TRUE)",
      "right" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.TRUE)",
      "info" : "IfStatement[43575-44296]:IfStatement[43575-44296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43643-44296]:Block[43643-44296]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[43719-43767]:VariableDeclarationStatement[43719-43767]"
    }, {
      "left" : "if (ownerType instanceof FunctionType)",
      "right" : "if (ownerType instanceof FunctionType)",
      "info" : "IfStatement[43776-44288]:IfStatement[43776-44288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43815-44288]:Block[43815-44288]"
    }, {
      "left" : "JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();",
      "right" : "JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();",
      "info" : "VariableDeclarationStatement[43827-43895]:VariableDeclarationStatement[43827-43895]"
    }, {
      "left" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "right" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "info" : "VariableDeclarationStatement[43906-43973]:VariableDeclarationStatement[43906-43973]"
    }, {
      "left" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "right" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "info" : "VariableDeclarationStatement[43984-44085]:VariableDeclarationStatement[43984-44085]"
    }, {
      "left" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "right" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "info" : "IfStatement[44096-44278]:IfStatement[44096-44278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44179-44278]:Block[44179-44278]"
    }, {
      "left" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE),\n                true);",
      "right" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE),\n                true);",
      "info" : "ExpressionStatement[44193-44266]:ExpressionStatement[44193-44266]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44528-44535]:Modifier[44528-44535]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[44536-44546]:SimpleType[44536-44546]"
    }, {
      "left" : "getObjectSlot",
      "right" : "getObjectSlot",
      "info" : "SimpleName[44547-44560]:SimpleName[44547-44560]"
    }, {
      "left" : "String slotName",
      "right" : "String slotName",
      "info" : "SingleVariableDeclaration[44561-44576]:SingleVariableDeclaration[44561-44576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44578-44856]:Block[44578-44856]"
    }, {
      "left" : "Var ownerVar = scope.getVar(slotName);",
      "right" : "Var ownerVar = scope.getVar(slotName);",
      "info" : "VariableDeclarationStatement[44586-44624]:VariableDeclarationStatement[44586-44624]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[44631-44831]:IfStatement[44631-44831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44653-44831]:Block[44653-44831]"
    }, {
      "left" : "JSType ownerVarType = ownerVar.getType();",
      "right" : "JSType ownerVarType = ownerVar.getType();",
      "info" : "VariableDeclarationStatement[44663-44704]:VariableDeclarationStatement[44663-44704]"
    }, {
      "left" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "right" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "info" : "ReturnStatement[44713-44823]:ReturnStatement[44713-44823]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44838-44850]:ReturnStatement[44838-44850]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44993-44997]:PrimitiveType[44993-44997]"
    }, {
      "left" : "resolveStubDeclarations",
      "right" : "resolveStubDeclarations",
      "info" : "SimpleName[44998-45021]:SimpleName[44998-45021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45024-46182]:Block[45024-46182]"
    }, {
      "left" : "for (StubDeclaration stub : stubDeclarations)",
      "right" : "for (StubDeclaration stub : stubDeclarations)",
      "info" : "EnhancedForStatement[45032-46176]:EnhancedForStatement[45032-46176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45078-46176]:Block[45078-46176]"
    }, {
      "left" : "Node n = stub.node;",
      "right" : "Node n = stub.node;",
      "info" : "VariableDeclarationStatement[45088-45107]:VariableDeclarationStatement[45088-45107]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[45116-45144]:VariableDeclarationStatement[45116-45144]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[45153-45189]:VariableDeclarationStatement[45153-45189]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[45198-45245]:VariableDeclarationStatement[45198-45245]"
    }, {
      "left" : "String ownerName = stub.ownerName;",
      "right" : "String ownerName = stub.ownerName;",
      "info" : "VariableDeclarationStatement[45254-45288]:VariableDeclarationStatement[45254-45288]"
    }, {
      "left" : "boolean isExtern = stub.isExtern;",
      "right" : "boolean isExtern = stub.isExtern;",
      "info" : "VariableDeclarationStatement[45297-45330]:VariableDeclarationStatement[45297-45330]"
    }, {
      "left" : "if (scope.isDeclared(qName, false))",
      "right" : "if (scope.isDeclared(qName, false))",
      "info" : "IfStatement[45340-45407]:IfStatement[45340-45407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45376-45407]:Block[45376-45407]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[45388-45397]:ContinueStatement[45388-45397]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[45524-45572]:VariableDeclarationStatement[45524-45572]"
    }, {
      "left" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "right" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[45581-45653]:VariableDeclarationStatement[45581-45653]"
    }, {
      "left" : "defineSlot(n, parent, unknownType, true);",
      "right" : "defineSlot(n, parent, unknownType, true);",
      "info" : "ExpressionStatement[45662-45703]:ExpressionStatement[45662-45703]"
    }, {
      "left" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "right" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "info" : "IfStatement[45713-46168]:IfStatement[45713-46168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45801-46034]:Block[45801-46034]"
    }, {
      "left" : "ownerType.defineInferredProperty(\n              propName, unknownType, isExtern);",
      "right" : "ownerType.defineInferredProperty(\n              propName, unknownType, isExtern);",
      "info" : "ExpressionStatement[45943-46024]:ExpressionStatement[45943-46024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46040-46168]:Block[46040-46168]"
    }, {
      "left" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "right" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "info" : "ExpressionStatement[46052-46158]:ExpressionStatement[46052-46158]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46314-46321]:Modifier[46314-46321]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[46322-46327]:Modifier[46322-46327]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[46328-46333]:TYPE_DECLARATION_KIND[46328-46333]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[46334-46351]:SimpleName[46334-46351]"
    }, {
      "left" : "AbstractShallowCallback",
      "right" : "AbstractShallowCallback",
      "info" : "SimpleType[46368-46391]:SimpleType[46368-46391]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[46442-46459]:SimpleName[46442-46459]"
    }, {
      "left" : "ObjectType thisType",
      "right" : "ObjectType thisType",
      "info" : "SingleVariableDeclaration[46460-46479]:SingleVariableDeclaration[46460-46479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46481-46524]:Block[46481-46524]"
    }, {
      "left" : "this.thisType = thisType;",
      "right" : "this.thisType = thisType;",
      "info" : "ExpressionStatement[46491-46516]:ExpressionStatement[46491-46516]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46532-46538]:Modifier[46532-46538]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46539-46543]:PrimitiveType[46539-46543]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[46544-46549]:SimpleName[46544-46549]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[46550-46565]:SingleVariableDeclaration[46550-46565]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46567-46573]:SingleVariableDeclaration[46567-46573]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[46575-46586]:SingleVariableDeclaration[46575-46586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46588-46930]:Block[46588-46930]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.EXPR_RESULT)",
      "right" : "if (parent != null && parent.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[46598-46922]:IfStatement[46598-46922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46659-46922]:Block[46659-46922]"
    }, {
      "left" : "switch (n.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, n.getFirstChild(), n);\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, n, n);\n              break;\n          }",
      "right" : "switch (n.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, n.getFirstChild(), n);\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, n, n);\n              break;\n          }",
      "info" : "SwitchStatement[46671-46912]:SwitchStatement[46671-46912]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[46706-46724]:SwitchCase[46706-46724]"
    }, {
      "left" : "maybeCollectMember(t, n.getFirstChild(), n);",
      "right" : "maybeCollectMember(t, n.getFirstChild(), n);",
      "info" : "ExpressionStatement[46739-46783]:ExpressionStatement[46739-46783]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46798-46804]:BreakStatement[46798-46804]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[46817-46836]:SwitchCase[46817-46836]"
    }, {
      "left" : "maybeCollectMember(t, n, n);",
      "right" : "maybeCollectMember(t, n, n);",
      "info" : "ExpressionStatement[46851-46879]:ExpressionStatement[46851-46879]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46894-46900]:BreakStatement[46894-46900]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46938-46945]:Modifier[46938-46945]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46946-46950]:PrimitiveType[46946-46950]"
    }, {
      "left" : "maybeCollectMember",
      "right" : "maybeCollectMember",
      "info" : "SimpleName[46951-46969]:SimpleName[46951-46969]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[46970-46985]:SingleVariableDeclaration[46970-46985]"
    }, {
      "left" : "Node member",
      "right" : "Node member",
      "info" : "SingleVariableDeclaration[46997-47008]:SingleVariableDeclaration[46997-47008]"
    }, {
      "left" : "Node nodeWithJsDocInfo",
      "right" : "Node nodeWithJsDocInfo",
      "info" : "SingleVariableDeclaration[47010-47032]:SingleVariableDeclaration[47010-47032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47034-47917]:Block[47034-47917]"
    }, {
      "left" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "right" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[47044-47094]:VariableDeclarationStatement[47044-47094]"
    }, {
      "left" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
      "right" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
      "info" : "IfStatement[47290-47448]:IfStatement[47290-47448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47419-47448]:Block[47419-47448]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[47431-47438]:ReturnStatement[47431-47438]"
    }, {
      "left" : "member.getFirstChild().setJSType(thisType);",
      "right" : "member.getFirstChild().setJSType(thisType);",
      "info" : "ExpressionStatement[47458-47501]:ExpressionStatement[47458-47501]"
    }, {
      "left" : "JSType jsType = getDeclaredTypeInAnnotation(t, member, info);",
      "right" : "JSType jsType = getDeclaredTypeInAnnotation(t, member, info);",
      "info" : "VariableDeclarationStatement[47510-47571]:VariableDeclarationStatement[47510-47571]"
    }, {
      "left" : "Node name = member.getLastChild();",
      "right" : "Node name = member.getLastChild();",
      "info" : "VariableDeclarationStatement[47580-47614]:VariableDeclarationStatement[47580-47614]"
    }, {
      "left" : "if (jsType != null &&\n            (name.getType() == Token.NAME || name.getType() == Token.STRING))",
      "right" : "if (jsType != null &&\n            (name.getType() == Token.NAME || name.getType() == Token.STRING))",
      "info" : "IfStatement[47623-47909]:IfStatement[47623-47909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47723-47909]:Block[47723-47909]"
    }, {
      "left" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              false /* functions with implementations are not in externs */);",
      "right" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              false /* functions with implementations are not in externs */);",
      "info" : "ExpressionStatement[47735-47899]:ExpressionStatement[47735-47899]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48022-48029]:Modifier[48022-48029]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48030-48036]:Modifier[48030-48036]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[48037-48042]:Modifier[48037-48042]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[48043-48048]:TYPE_DECLARATION_KIND[48043-48048]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[48049-48064]:SimpleName[48049-48064]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48173-48180]:Modifier[48173-48180]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[48181-48196]:SimpleName[48181-48196]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[48197-48206]:SingleVariableDeclaration[48197-48206]"
    }, {
      "left" : "boolean isExtern",
      "right" : "boolean isExtern",
      "info" : "SingleVariableDeclaration[48208-48224]:SingleVariableDeclaration[48208-48224]"
    }, {
      "left" : "String ownerName",
      "right" : "String ownerName",
      "info" : "SingleVariableDeclaration[48226-48242]:SingleVariableDeclaration[48226-48242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48244-48341]:Block[48244-48341]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[48252-48269]:ExpressionStatement[48252-48269]"
    }, {
      "left" : "this.isExtern = isExtern;",
      "right" : "this.isExtern = isExtern;",
      "info" : "ExpressionStatement[48276-48301]:ExpressionStatement[48276-48301]"
    }, {
      "left" : "this.ownerName = ownerName;",
      "right" : "this.ownerName = ownerName;",
      "info" : "ExpressionStatement[48308-48335]:ExpressionStatement[48308-48335]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48460-48467]:Modifier[48460-48467]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[48468-48473]:Modifier[48468-48473]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[48474-48479]:TYPE_DECLARATION_KIND[48474-48479]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[48480-48498]:SimpleName[48480-48498]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[48507-48527]:SimpleType[48507-48527]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48535-48542]:Modifier[48535-48542]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[48543-48561]:SimpleName[48543-48561]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[48562-48573]:SingleVariableDeclaration[48562-48573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48575-48602]:Block[48575-48602]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[48583-48596]:SuperConstructorInvocation[48583-48596]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48852-48861]:MarkerAnnotation[48852-48861]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48862-48868]:Modifier[48862-48868]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48869-48873]:PrimitiveType[48869-48873]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[48874-48879]:SimpleName[48874-48879]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[48880-48895]:SingleVariableDeclaration[48880-48895]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48897-48903]:SingleVariableDeclaration[48897-48903]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[48905-48916]:SingleVariableDeclaration[48905-48916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48918-49341]:Block[48918-49341]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[48926-48952]:ExpressionStatement[48926-48952]"
    }, {
      "left" : "switch (n.getType()) {\n\n        case Token.ASSIGN:\n          // Handle typedefs.\n          checkForOldStyleTypedef(t, n);\n          break;\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForOldStyleTypedef(t, n);\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n\n        case Token.ASSIGN:\n          // Handle typedefs.\n          checkForOldStyleTypedef(t, n);\n          break;\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForOldStyleTypedef(t, n);\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[48960-49335]:SwitchStatement[48960-49335]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[48992-49010]:SwitchCase[48992-49010]"
    }, {
      "left" : "checkForOldStyleTypedef(t, n);",
      "right" : "checkForOldStyleTypedef(t, n);",
      "info" : "ExpressionStatement[49051-49081]:ExpressionStatement[49051-49081]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49092-49098]:BreakStatement[49092-49098]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[49108-49123]:SwitchCase[49108-49123]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[49164-49310]:IfStatement[49164-49310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49185-49310]:Block[49185-49310]"
    }, {
      "left" : "checkForOldStyleTypedef(t, n);",
      "right" : "checkForOldStyleTypedef(t, n);",
      "info" : "ExpressionStatement[49199-49229]:ExpressionStatement[49199-49229]"
    }, {
      "left" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "right" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "info" : "ExpressionStatement[49242-49298]:ExpressionStatement[49242-49298]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49321-49327]:BreakStatement[49321-49327]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49347-49356]:MarkerAnnotation[49347-49356]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49361-49365]:PrimitiveType[49361-49365]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[49366-49391]:SimpleName[49366-49391]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[49401-49416]:SingleVariableDeclaration[49401-49416]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[49418-49432]:SingleVariableDeclaration[49418-49432]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49442-49448]:SingleVariableDeclaration[49442-49448]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[49450-49461]:SingleVariableDeclaration[49450-49461]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[49463-49476]:SingleVariableDeclaration[49463-49476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49478-49589]:Block[49478-49589]"
    }, {
      "left" : "checkForTypedef(t, n, info);",
      "right" : "checkForTypedef(t, n, info);",
      "info" : "ExpressionStatement[49486-49514]:ExpressionStatement[49486-49514]"
    }, {
      "left" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "right" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "info" : "ExpressionStatement[49521-49583]:ExpressionStatement[49521-49583]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49756-49763]:Modifier[49756-49763]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49764-49768]:PrimitiveType[49764-49768]"
    }, {
      "left" : "checkForTypedef",
      "right" : "checkForTypedef",
      "info" : "SimpleName[49769-49784]:SimpleName[49769-49784]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[49794-49809]:SingleVariableDeclaration[49794-49809]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[49811-49825]:SingleVariableDeclaration[49811-49825]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[49827-49841]:SingleVariableDeclaration[49827-49841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49843-50698]:Block[49843-50698]"
    }, {
      "left" : "if (info == null || !info.hasTypedefType())",
      "right" : "if (info == null || !info.hasTypedefType())",
      "info" : "IfStatement[49851-49920]:IfStatement[49851-49920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49895-49920]:Block[49895-49920]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[49905-49912]:ReturnStatement[49905-49912]"
    }, {
      "left" : "String typedef = candidate.getQualifiedName();",
      "right" : "String typedef = candidate.getQualifiedName();",
      "info" : "VariableDeclarationStatement[49928-49974]:VariableDeclarationStatement[49928-49974]"
    }, {
      "left" : "if (typedef == null)",
      "right" : "if (typedef == null)",
      "info" : "IfStatement[49981-50027]:IfStatement[49981-50027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50002-50027]:Block[50002-50027]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[50012-50019]:ReturnStatement[50012-50019]"
    }, {
      "left" : "typeRegistry.forwardDeclareType(typedef);",
      "right" : "typeRegistry.forwardDeclareType(typedef);",
      "info" : "ExpressionStatement[50201-50242]:ExpressionStatement[50201-50242]"
    }, {
      "left" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "right" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[50250-50320]:VariableDeclarationStatement[50250-50320]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[50327-50485]:IfStatement[50327-50485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50349-50485]:Block[50349-50485]"
    }, {
      "left" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[50359-50477]:ExpressionStatement[50359-50477]"
    }, {
      "left" : "typeRegistry.declareType(typedef, realType);",
      "right" : "typeRegistry.declareType(typedef, realType);",
      "info" : "ExpressionStatement[50493-50537]:ExpressionStatement[50493-50537]"
    }, {
      "left" : "if (candidate.getType() == Token.GETPROP)",
      "right" : "if (candidate.getType() == Token.GETPROP)",
      "info" : "IfStatement[50544-50692]:IfStatement[50544-50692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50586-50692]:Block[50586-50692]"
    }, {
      "left" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "right" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "info" : "ExpressionStatement[50596-50684]:ExpressionStatement[50596-50684]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50866-50873]:Modifier[50866-50873]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50874-50878]:PrimitiveType[50874-50878]"
    }, {
      "left" : "checkForOldStyleTypedef",
      "right" : "checkForOldStyleTypedef",
      "info" : "SimpleName[50879-50902]:SimpleName[50879-50902]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[50903-50918]:SingleVariableDeclaration[50903-50918]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[50920-50934]:SingleVariableDeclaration[50920-50934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50936-51854]:Block[50936-51854]"
    }, {
      "left" : "String typedef = codingConvention.identifyTypeDefAssign(candidate);",
      "right" : "String typedef = codingConvention.identifyTypeDefAssign(candidate);",
      "info" : "VariableDeclarationStatement[50972-51039]:VariableDeclarationStatement[50972-51039]"
    }, {
      "left" : "if (typedef != null)",
      "right" : "if (typedef != null)",
      "info" : "IfStatement[51046-51848]:IfStatement[51046-51848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51067-51848]:Block[51067-51848]"
    }, {
      "left" : "typeRegistry.forwardDeclareType(typedef);",
      "right" : "typeRegistry.forwardDeclareType(typedef);",
      "info" : "ExpressionStatement[51249-51290]:ExpressionStatement[51249-51290]"
    }, {
      "left" : "JSDocInfo info = candidate.getJSDocInfo();",
      "right" : "JSDocInfo info = candidate.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[51300-51342]:VariableDeclarationStatement[51300-51342]"
    }, {
      "left" : "JSType realType = null;",
      "right" : "JSType realType = null;",
      "info" : "VariableDeclarationStatement[51351-51374]:VariableDeclarationStatement[51351-51374]"
    }, {
      "left" : "if (info != null && info.getType() != null)",
      "right" : "if (info != null && info.getType() != null)",
      "info" : "IfStatement[51383-51505]:IfStatement[51383-51505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51427-51505]:Block[51427-51505]"
    }, {
      "left" : "realType = info.getType().evaluate(scope, typeRegistry);",
      "right" : "realType = info.getType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[51439-51495]:ExpressionStatement[51439-51495]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[51515-51681]:IfStatement[51515-51681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51537-51681]:Block[51537-51681]"
    }, {
      "left" : "compiler.report(\n              JSError.make(\n                  t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n              JSError.make(\n                  t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[51549-51671]:ExpressionStatement[51549-51671]"
    }, {
      "left" : "typeRegistry.declareType(typedef, realType);",
      "right" : "typeRegistry.declareType(typedef, realType);",
      "info" : "ExpressionStatement[51691-51735]:ExpressionStatement[51691-51735]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51990-51997]:Modifier[51990-51997]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[52004-52009]:TYPE_DECLARATION_KIND[52004-52009]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[52010-52027]:SimpleName[52010-52027]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[52036-52056]:SimpleType[52036-52056]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52130-52137]:Modifier[52130-52137]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[52138-52155]:SimpleName[52138-52155]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[52156-52167]:SingleVariableDeclaration[52156-52167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52169-52196]:Block[52169-52196]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[52177-52190]:SuperConstructorInvocation[52177-52190]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52263-52267]:PrimitiveType[52263-52267]"
    }, {
      "left" : "build",
      "right" : "build",
      "info" : "SimpleName[52268-52273]:SimpleName[52268-52273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52276-52350]:Block[52276-52350]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "right" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "info" : "ExpressionStatement[52284-52344]:ExpressionStatement[52284-52344]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52624-52630]:Modifier[52624-52630]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52631-52635]:PrimitiveType[52631-52635]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[52636-52641]:SimpleName[52636-52641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52680-53252]:Block[52680-52898]"
    }, {
      "left" : "if (n == scope.getRootNode())",
      "right" : "if (n == scope.getRootNode())",
      "info" : "IfStatement[52688-52725]:IfStatement[52688-52725]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[52718-52725]:ReturnStatement[52718-52725]"
    }, {
      "left" : "if (n.getType() == Token.LP && parent == scope.getRootNode())",
      "right" : "if (n.getType() == Token.LP && parent == scope.getRootNode())",
      "info" : "IfStatement[52733-52858]:IfStatement[52733-52858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52795-52858]:Block[52795-52858]"
    }, {
      "left" : "handleFunctionInputs(parent);",
      "right" : "handleFunctionInputs(parent);",
      "info" : "ExpressionStatement[52805-52834]:ExpressionStatement[52805-52834]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[52843-52850]:ReturnStatement[52843-52850]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53320-53327]:Modifier[52966-52973]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53328-53332]:PrimitiveType[52974-52978]"
    }, {
      "left" : "handleFunctionInputs",
      "right" : "handleFunctionInputs",
      "info" : "SimpleName[53333-53353]:SimpleName[52979-52999]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[53354-53365]:SingleVariableDeclaration[53000-53011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53367-54123]:Block[53013-53769]"
    }, {
      "left" : "Node fnNameNode = fnNode.getFirstChild();",
      "right" : "Node fnNameNode = fnNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[53411-53452]:VariableDeclarationStatement[53057-53098]"
    }, {
      "left" : "String fnName = fnNameNode.getString();",
      "right" : "String fnName = fnNameNode.getString();",
      "info" : "VariableDeclarationStatement[53459-53498]:VariableDeclarationStatement[53105-53144]"
    }, {
      "left" : "if (!fnName.isEmpty())",
      "right" : "if (!fnName.isEmpty())",
      "info" : "IfStatement[53505-54084]:IfStatement[53151-53730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53528-54084]:Block[53174-53730]"
    }, {
      "left" : "Scope.Var fnVar = scope.getVar(fnName);",
      "right" : "Scope.Var fnVar = scope.getVar(fnName);",
      "info" : "VariableDeclarationStatement[53538-53577]:VariableDeclarationStatement[53184-53223]"
    }, {
      "left" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "right" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "info" : "IfStatement[53586-54076]:IfStatement[53232-53722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53996-54076]:Block[53642-53722]"
    }, {
      "left" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "right" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "info" : "ExpressionStatement[54008-54066]:ExpressionStatement[53654-53712]"
    }, {
      "left" : "declareArguments(fnNode);",
      "right" : "declareArguments(fnNode);",
      "info" : "ExpressionStatement[54092-54117]:ExpressionStatement[53738-53763]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54192-54199]:Modifier[53838-53845]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54200-54204]:PrimitiveType[53846-53850]"
    }, {
      "left" : "declareArguments",
      "right" : "declareArguments",
      "info" : "SimpleName[54205-54221]:SimpleName[53851-53867]"
    }, {
      "left" : "Node functionNode",
      "right" : "Node functionNode",
      "info" : "SingleVariableDeclaration[54222-54239]:SingleVariableDeclaration[53868-53885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54241-55035]:Block[53887-54681]"
    }, {
      "left" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "right" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[54249-54309]:VariableDeclarationStatement[53895-53955]"
    }, {
      "left" : "Node body = astParameters.getNext();",
      "right" : "Node body = astParameters.getNext();",
      "info" : "VariableDeclarationStatement[54316-54352]:VariableDeclarationStatement[53962-53998]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) functionNode.getJSType();",
      "right" : "FunctionType functionType = (FunctionType) functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[54359-54427]:VariableDeclarationStatement[54005-54073]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[54434-55029]:IfStatement[54080-54675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54460-55029]:Block[54106-54675]"
    }, {
      "left" : "Node jsDocParameters = functionType.getParametersNode();",
      "right" : "Node jsDocParameters = functionType.getParametersNode();",
      "info" : "VariableDeclarationStatement[54470-54526]:VariableDeclarationStatement[54116-54172]"
    }, {
      "left" : "if (jsDocParameters != null)",
      "right" : "if (jsDocParameters != null)",
      "info" : "IfStatement[54535-55021]:IfStatement[54181-54667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54564-55021]:Block[54210-54667]"
    }, {
      "left" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "right" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[54576-54630]:VariableDeclarationStatement[54222-54276]"
    }, {
      "left" : "for (Node astParameter : astParameters.children())",
      "right" : "for (Node astParameter : astParameters.children())",
      "info" : "EnhancedForStatement[54641-55011]:EnhancedForStatement[54287-54657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54692-55011]:Block[54338-54657]"
    }, {
      "left" : "if (jsDocParameter != null)",
      "right" : "if (jsDocParameter != null)",
      "info" : "IfStatement[54706-54999]:IfStatement[54352-54645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54734-54912]:Block[54380-54558]"
    }, {
      "left" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);",
      "right" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);",
      "info" : "ExpressionStatement[54750-54841]:ExpressionStatement[54396-54487]"
    }, {
      "left" : "jsDocParameter = jsDocParameter.getNext();",
      "right" : "jsDocParameter = jsDocParameter.getNext();",
      "info" : "ExpressionStatement[54856-54898]:ExpressionStatement[54502-54544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54918-54999]:Block[54564-54645]"
    }, {
      "left" : "defineSlot(astParameter, functionNode, null, true);",
      "right" : "defineSlot(astParameter, functionNode, null, true);",
      "info" : "ExpressionStatement[54934-54985]:ExpressionStatement[54580-54631]"
    } ]
  },
  "interFileMappings" : { }
}