{
  "matchedElements" : [
 {
    "left" : "class : FoldConstants",
    "right" : "class : FoldConstants",
    "info" : "TypeDeclaration[1054-63246]:TypeDeclaration[1054-63254]"
  }, {
    "left" : "DIVIDE_BY_0_ERROR",
    "right" : "DIVIDE_BY_0_ERROR",
    "info" : "FieldDeclaration[1245-1367]:FieldDeclaration[1245-1367]"
  }, {
    "left" : "INVALID_GETELEM_INDEX_ERROR",
    "right" : "INVALID_GETELEM_INDEX_ERROR",
    "info" : "FieldDeclaration[1371-1544]:FieldDeclaration[1371-1544]"
  }, {
    "left" : "INDEX_OUT_OF_BOUNDS_ERROR",
    "right" : "INDEX_OUT_OF_BOUNDS_ERROR",
    "info" : "FieldDeclaration[1548-1719]:FieldDeclaration[1548-1719]"
  }, {
    "left" : "NEGATING_A_NON_NUMBER_ERROR",
    "right" : "NEGATING_A_NON_NUMBER_ERROR",
    "info" : "FieldDeclaration[1723-1903]:FieldDeclaration[1723-1903]"
  }, {
    "left" : "INVALID_REGULAR_EXPRESSION_FLAGS",
    "right" : "INVALID_REGULAR_EXPRESSION_FLAGS",
    "info" : "FieldDeclaration[1907-2102]:FieldDeclaration[1907-2102]"
  }, {
    "left" : "BITWISE_OPERAND_OUT_OF_RANGE",
    "right" : "BITWISE_OPERAND_OUT_OF_RANGE",
    "info" : "FieldDeclaration[2106-2319]:FieldDeclaration[2106-2319]"
  }, {
    "left" : "SHIFT_AMOUNT_OUT_OF_BOUNDS",
    "right" : "SHIFT_AMOUNT_OUT_OF_BOUNDS",
    "info" : "FieldDeclaration[2323-2483]:FieldDeclaration[2323-2483]"
  }, {
    "left" : "FRACTIONAL_BITWISE_OPERAND",
    "right" : "FRACTIONAL_BITWISE_OPERAND",
    "info" : "FieldDeclaration[2487-2647]:FieldDeclaration[2487-2647]"
  }, {
    "left" : "AND_PRECEDENCE",
    "right" : "AND_PRECEDENCE",
    "info" : "FieldDeclaration[2651-2724]:FieldDeclaration[2651-2724]"
  }, {
    "left" : "OR_PRECEDENCE",
    "right" : "OR_PRECEDENCE",
    "info" : "FieldDeclaration[2727-2798]:FieldDeclaration[2727-2798]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[2802-2842]:FieldDeclaration[2802-2842]"
  }, {
    "left" : "package FoldConstants(compiler )",
    "right" : "package FoldConstants(compiler )",
    "info" : "MethodDeclaration[2846-2922]:MethodDeclaration[2846-2922]"
  }, {
    "left" : "public process(externs , jsRoot ) : void",
    "right" : "public process(externs , jsRoot ) : void",
    "info" : "MethodDeclaration[2926-3030]:MethodDeclaration[2926-3030]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[3034-11487]:MethodDeclaration[3034-11487]"
  }, {
    "left" : "private error(t , diagnostic , n ) : void",
    "right" : "private error(t , diagnostic , n ) : void",
    "info" : "MethodDeclaration[11491-11641]:MethodDeclaration[11491-11641]"
  }, {
    "left" : "private consumesDanglingElse(n ) : boolean",
    "right" : "private consumesDanglingElse(n ) : boolean",
    "info" : "MethodDeclaration[11645-12312]:MethodDeclaration[11645-12312]"
  }, {
    "left" : "private tryFoldAssign(t , n , left , right ) : void",
    "right" : "private tryFoldAssign(t , n , left , right ) : void",
    "info" : "MethodDeclaration[12316-13935]:MethodDeclaration[12316-13935]"
  }, {
    "left" : "package tryFoldBlock(t , n , parent ) : void",
    "right" : "package tryFoldBlock(t , n , parent ) : void",
    "info" : "MethodDeclaration[13939-14586]:MethodDeclaration[13939-14586]"
  }, {
    "left" : "package tryFoldHookIf(t , n , parent ) : boolean",
    "right" : "package tryFoldHookIf(t , n , parent ) : boolean",
    "info" : "MethodDeclaration[14590-18976]:MethodDeclaration[14590-18976]"
  }, {
    "left" : "private tryMinimizeNot(t , n , parent ) : boolean",
    "right" : "private tryMinimizeNot(t , n , parent ) : boolean",
    "info" : "MethodDeclaration[18980-19899]:MethodDeclaration[18980-19899]"
  }, {
    "left" : "package tryMinimizeIf(t , n , parent ) : void",
    "right" : "package tryMinimizeIf(t , n , parent ) : void",
    "info" : "MethodDeclaration[19903-26745]:MethodDeclaration[19903-26745]"
  }, {
    "left" : "private tryRemoveRepeatedStatements(t , n ) : void",
    "right" : "private tryRemoveRepeatedStatements(t , n ) : void",
    "info" : "MethodDeclaration[26749-28050]:MethodDeclaration[26749-28050]"
  }, {
    "left" : "private tryReduceReturn(t , n ) : void",
    "right" : "private tryReduceReturn(t , n ) : void",
    "info" : "MethodDeclaration[28054-28770]:MethodDeclaration[28054-28770]"
  }, {
    "left" : "private isPropertyAssignmentInExpression(t , n ) : boolean",
    "right" : "private isPropertyAssignmentInExpression(t , n ) : boolean",
    "info" : "MethodDeclaration[28774-29253]:MethodDeclaration[28774-29253]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[29034-29208]:MethodDeclaration[29034-29208]"
  }, {
    "left" : "private isLowerPrecedenceInExpression(t , n , precedence int) : boolean",
    "right" : "private isLowerPrecedenceInExpression(t , n , precedence int) : boolean",
    "info" : "MethodDeclaration[29257-29754]:MethodDeclaration[29257-29754]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[29577-29709]:MethodDeclaration[29577-29709]"
  }, {
    "left" : "package tryFoldAndOr(t , n , left , right , parent ) : void",
    "right" : "package tryFoldAndOr(t , n , left , right , parent ) : void",
    "info" : "MethodDeclaration[29758-31930]:MethodDeclaration[29758-31930]"
  }, {
    "left" : "package tryFoldLeftChildAdd(t , n , left , right , parent ) : void",
    "right" : "package tryFoldLeftChildAdd(t , n , left , right , parent ) : void",
    "info" : "MethodDeclaration[31934-33454]:MethodDeclaration[31934-33454]"
  }, {
    "left" : "package tryFoldAdd(t , n , left , right , parent ) : void",
    "right" : "package tryFoldAdd(t , n , left , right , parent ) : void",
    "info" : "MethodDeclaration[33458-34102]:MethodDeclaration[33458-34102]"
  }, {
    "left" : "package tryFoldArithmetic(t , n , left , right , parent ) : void",
    "right" : "package tryFoldArithmetic(t , n , left , right , parent ) : void",
    "info" : "MethodDeclaration[34106-35285]:MethodDeclaration[34106-35285]"
  }, {
    "left" : "package tryFoldBitAndOr(t , n , left , right , parent ) : void",
    "right" : "package tryFoldBitAndOr(t , n , left , right , parent ) : void",
    "info" : "MethodDeclaration[35289-36571]:MethodDeclaration[35289-36571]"
  }, {
    "left" : "package tryFoldShift(t , n , left , right , parent ) : void",
    "right" : "package tryFoldShift(t , n , left , right , parent ) : void",
    "info" : "MethodDeclaration[36575-38268]:MethodDeclaration[36575-38268]"
  }, {
    "left" : "package tryFoldComparison(t , n , left , right , parent ) : void",
    "right" : "package tryFoldComparison(t , n , left , right , parent ) : void",
    "info" : "MethodDeclaration[38272-43814]:MethodDeclaration[38272-43814]"
  }, {
    "left" : "package tryFoldStringIndexOf(t , n , left , right , parent ) : void",
    "right" : "package tryFoldStringIndexOf(t , n , left , right , parent ) : void",
    "info" : "MethodDeclaration[43818-45418]:MethodDeclaration[43818-45418]"
  }, {
    "left" : "package tryFoldStringJoin(t , n , left , right , parent ) : void",
    "right" : "package tryFoldStringJoin(t , n , left , right , parent ) : void",
    "info" : "MethodDeclaration[45423-48360]:MethodDeclaration[45423-48368]"
  }, {
    "left" : "package tryFoldGetElem(t , n , left , right , parent ) : void",
    "right" : "package tryFoldGetElem(t , n , left , right , parent ) : void",
    "info" : "MethodDeclaration[48364-49673]:MethodDeclaration[48372-49681]"
  }, {
    "left" : "package tryFoldGetProp(t , n , left , right , parent ) : void",
    "right" : "package tryFoldGetProp(t , n , left , right , parent ) : void",
    "info" : "MethodDeclaration[49677-50651]:MethodDeclaration[49685-50659]"
  }, {
    "left" : "package tryFoldRegularExpressionConstructor(t , n , parent ) : void",
    "right" : "package tryFoldRegularExpressionConstructor(t , n , parent ) : void",
    "info" : "MethodDeclaration[50655-52618]:MethodDeclaration[50663-52626]"
  }, {
    "left" : "REGEXP_FLAGS_RE",
    "right" : "REGEXP_FLAGS_RE",
    "info" : "FieldDeclaration[52622-52697]:FieldDeclaration[52630-52705]"
  }, {
    "left" : "private areValidRegexpFlags(flags ...) : boolean",
    "right" : "private areValidRegexpFlags(flags ...) : boolean",
    "info" : "MethodDeclaration[52701-53185]:MethodDeclaration[52709-53193]"
  }, {
    "left" : "private areSafeFlagsToFold(flags ...) : boolean",
    "right" : "private areSafeFlagsToFold(flags ...) : boolean",
    "info" : "MethodDeclaration[53189-53684]:MethodDeclaration[53197-53692]"
  }, {
    "left" : "private makeForwardSlashBracketSafe(n ) : ",
    "right" : "private makeForwardSlashBracketSafe(n ) : ",
    "info" : "MethodDeclaration[53688-54511]:MethodDeclaration[53696-54519]"
  }, {
    "left" : "package tryFoldLiteralConstructor(t , n , parent , className , type int) : void",
    "right" : "package tryFoldLiteralConstructor(t , n , parent , className , type int) : void",
    "info" : "MethodDeclaration[54515-55256]:MethodDeclaration[54523-55264]"
  }, {
    "left" : "package containsUnicodeEscape(s ...) : boolean",
    "right" : "package containsUnicodeEscape(s ...) : boolean",
    "info" : "MethodDeclaration[55260-55866]:MethodDeclaration[55268-55874]"
  }, {
    "left" : "package tryFoldWhile(t , n , parent ) : void",
    "right" : "package tryFoldWhile(t , n , parent ) : void",
    "info" : "MethodDeclaration[55870-56323]:MethodDeclaration[55878-56331]"
  }, {
    "left" : "package tryFoldFor(t , n , parent ) : void",
    "right" : "package tryFoldFor(t , n , parent ) : void",
    "info" : "MethodDeclaration[56327-56942]:MethodDeclaration[56335-56950]"
  }, {
    "left" : "package tryFoldDo(t , n , parent ) : void",
    "right" : "package tryFoldDo(t , n , parent ) : void",
    "info" : "MethodDeclaration[56946-57798]:MethodDeclaration[56954-57806]"
  }, {
    "left" : "package hasBreakOrContinue(n ) : boolean",
    "right" : "package hasBreakOrContinue(n ) : boolean",
    "info" : "MethodDeclaration[57802-58319]:MethodDeclaration[57810-58327]"
  }, {
    "left" : "package tryMinimizeCondition(t , n , parent ) : void",
    "right" : "package tryMinimizeCondition(t , n , parent ) : void",
    "info" : "MethodDeclaration[58323-60848]:MethodDeclaration[58331-60856]"
  }, {
    "left" : "private tryFoldForCondition(n , parent ) : void",
    "right" : "private tryFoldForCondition(n , parent ) : void",
    "info" : "MethodDeclaration[60852-61180]:MethodDeclaration[60860-61188]"
  }, {
    "left" : "private maybeReplaceChildWithNumber(t , n , parent , num int) : void",
    "right" : "private maybeReplaceChildWithNumber(t , n , parent , num int) : void",
    "info" : "MethodDeclaration[61186-61568]:MethodDeclaration[61194-61576]"
  }, {
    "left" : "private isExpressBlock(n ) : boolean",
    "right" : "private isExpressBlock(n ) : boolean",
    "info" : "MethodDeclaration[61572-61886]:MethodDeclaration[61580-61894]"
  }, {
    "left" : "private getBlockExpression(n ) : ",
    "right" : "private getBlockExpression(n ) : ",
    "info" : "MethodDeclaration[61890-62060]:MethodDeclaration[61898-62068]"
  }, {
    "left" : "private isReturnExpressBlock(n ) : boolean",
    "right" : "private isReturnExpressBlock(n ) : boolean",
    "info" : "MethodDeclaration[62064-62454]:MethodDeclaration[62072-62462]"
  }, {
    "left" : "private getBlockReturnExpression(n ) : ",
    "right" : "private getBlockReturnExpression(n ) : ",
    "info" : "MethodDeclaration[62458-62678]:MethodDeclaration[62466-62686]"
  }, {
    "left" : "private isVarBlock(n ) : boolean",
    "right" : "private isVarBlock(n ) : boolean",
    "info" : "MethodDeclaration[62682-63088]:MethodDeclaration[62690-63096]"
  }, {
    "left" : "private getBlockVar(n ) : ",
    "right" : "private getBlockVar(n ) : ",
    "info" : "MethodDeclaration[63092-63244]:MethodDeclaration[63100-63252]"
  } ],
  "mappings" : [
 {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1158-1163]:TYPE_DECLARATION_KIND[1158-1163]"
  }, {
    "left" : "FoldConstants",
    "right" : "FoldConstants",
    "info" : "SimpleName[2846-2859]:SimpleName[2846-2859]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[2860-2885]:SingleVariableDeclaration[2860-2885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2887-2922]:Block[2887-2922]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[2893-2918]:ExpressionStatement[2893-2918]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2926-2932]:Modifier[2926-2932]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2933-2937]:PrimitiveType[2933-2937]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[2938-2945]:SimpleName[2938-2945]"
  }, {
    "left" : "Node externs",
    "right" : "Node externs",
    "info" : "SingleVariableDeclaration[2946-2958]:SingleVariableDeclaration[2946-2958]"
  }, {
    "left" : "Node jsRoot",
    "right" : "Node jsRoot",
    "info" : "SingleVariableDeclaration[2960-2971]:SingleVariableDeclaration[2960-2971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2973-3030]:Block[2973-3030]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, jsRoot, this);",
    "right" : "NodeTraversal.traverse(compiler, jsRoot, this);",
    "info" : "ExpressionStatement[2979-3026]:ExpressionStatement[2979-3026]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3034-3040]:Modifier[3034-3040]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3041-3045]:PrimitiveType[3041-3045]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[3046-3051]:SimpleName[3046-3051]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[3052-3067]:SingleVariableDeclaration[3052-3067]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[3069-3075]:SingleVariableDeclaration[3069-3075]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[3077-3088]:SingleVariableDeclaration[3077-3088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3090-11487]:Block[3090-11487]"
  }, {
    "left" : "int type = n.getType();",
    "right" : "int type = n.getType();",
    "info" : "VariableDeclarationStatement[3096-3119]:VariableDeclarationStatement[3096-3119]"
  }, {
    "left" : "if (type == Token.BLOCK)",
    "right" : "if (type == Token.BLOCK)",
    "info" : "IfStatement[3125-3205]:IfStatement[3125-3205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3150-3205]:Block[3150-3205]"
  }, {
    "left" : "tryFoldBlock(t, n, parent);",
    "right" : "tryFoldBlock(t, n, parent);",
    "info" : "ExpressionStatement[3158-3185]:ExpressionStatement[3158-3185]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[3192-3199]:ReturnStatement[3192-3199]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[3211-3241]:VariableDeclarationStatement[3211-3241]"
  }, {
    "left" : "if (left == null)",
    "right" : "if (left == null)",
    "info" : "IfStatement[3246-3285]:IfStatement[3246-3285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3264-3285]:Block[3264-3285]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[3272-3279]:ReturnStatement[3272-3279]"
  }, {
    "left" : "if (type == Token.TYPEOF && NodeUtil.isLiteralValue(left))",
    "right" : "if (type == Token.TYPEOF && NodeUtil.isLiteralValue(left))",
    "info" : "IfStatement[3291-4258]:IfStatement[3291-4258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3350-4258]:Block[3350-4258]"
  }, {
    "left" : "String newValue = null;",
    "right" : "String newValue = null;",
    "info" : "VariableDeclarationStatement[3358-3381]:VariableDeclarationStatement[3358-3381]"
  }, {
    "left" : "switch (left.getType()) {\n        case Token.STRING:\n          newValue = \"string\";\n          break;\n        case Token.NUMBER:\n          newValue = \"number\";\n          break;\n        case Token.TRUE:\n        case Token.FALSE:\n          newValue = \"boolean\";\n          break;\n        case Token.NULL:\n        case Token.OBJECTLIT:\n        case Token.ARRAYLIT:\n          newValue = \"object\";\n          break;\n        case Token.NAME:\n          // We assume here that programs don't change the value of the\n          // keyword undefined to something other than the value undefined.\n          if (\"undefined\".equals(left.getString())) {\n            newValue = \"undefined\";\n          }\n          break;\n      }",
    "right" : "switch (left.getType()) {\n        case Token.STRING:\n          newValue = \"string\";\n          break;\n        case Token.NUMBER:\n          newValue = \"number\";\n          break;\n        case Token.TRUE:\n        case Token.FALSE:\n          newValue = \"boolean\";\n          break;\n        case Token.NULL:\n        case Token.OBJECTLIT:\n        case Token.ARRAYLIT:\n          newValue = \"object\";\n          break;\n        case Token.NAME:\n          // We assume here that programs don't change the value of the\n          // keyword undefined to something other than the value undefined.\n          if (\"undefined\".equals(left.getString())) {\n            newValue = \"undefined\";\n          }\n          break;\n      }",
    "info" : "SwitchStatement[3389-4096]:SwitchStatement[3389-4096]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[3423-3441]:SwitchCase[3423-3441]"
  }, {
    "left" : "newValue = \"string\";",
    "right" : "newValue = \"string\";",
    "info" : "ExpressionStatement[3452-3472]:ExpressionStatement[3452-3472]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[3483-3489]:BreakStatement[3483-3489]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[3498-3516]:SwitchCase[3498-3516]"
  }, {
    "left" : "newValue = \"number\";",
    "right" : "newValue = \"number\";",
    "info" : "ExpressionStatement[3527-3547]:ExpressionStatement[3527-3547]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[3558-3564]:BreakStatement[3558-3564]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[3573-3589]:SwitchCase[3573-3589]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[3598-3615]:SwitchCase[3598-3615]"
  }, {
    "left" : "newValue = \"boolean\";",
    "right" : "newValue = \"boolean\";",
    "info" : "ExpressionStatement[3626-3647]:ExpressionStatement[3626-3647]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[3658-3664]:BreakStatement[3658-3664]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[3673-3689]:SwitchCase[3673-3689]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[3698-3719]:SwitchCase[3698-3719]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[3728-3748]:SwitchCase[3728-3748]"
  }, {
    "left" : "newValue = \"object\";",
    "right" : "newValue = \"object\";",
    "info" : "ExpressionStatement[3759-3779]:ExpressionStatement[3759-3779]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[3790-3796]:BreakStatement[3790-3796]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[3805-3821]:SwitchCase[3805-3821]"
  }, {
    "left" : "if (\"undefined\".equals(left.getString()))",
    "right" : "if (\"undefined\".equals(left.getString()))",
    "info" : "IfStatement[3980-4071]:IfStatement[3980-4071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4022-4071]:Block[4022-4071]"
  }, {
    "left" : "newValue = \"undefined\";",
    "right" : "newValue = \"undefined\";",
    "info" : "ExpressionStatement[4036-4059]:ExpressionStatement[4036-4059]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4082-4088]:BreakStatement[4082-4088]"
  }, {
    "left" : "if (newValue != null)",
    "right" : "if (newValue != null)",
    "info" : "IfStatement[4104-4237]:IfStatement[4104-4237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4126-4237]:Block[4126-4237]"
  }, {
    "left" : "parent.replaceChild(n, Node.newString(newValue));",
    "right" : "parent.replaceChild(n, Node.newString(newValue));",
    "info" : "ExpressionStatement[4136-4185]:ExpressionStatement[4136-4185]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[4194-4229]:ExpressionStatement[4194-4229]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[4245-4252]:ReturnStatement[4245-4252]"
  }, {
    "left" : "if (type == Token.NOT ||\n        type == Token.NEG ||\n        type == Token.BITNOT)",
    "right" : "if (type == Token.NOT ||\n        type == Token.NEG ||\n        type == Token.BITNOT)",
    "info" : "IfStatement[4264-7675]:IfStatement[4264-7675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4348-7085]:Block[4348-7085]"
  }, {
    "left" : "Preconditions.checkState(n.hasOneChild());",
    "right" : "Preconditions.checkState(n.hasOneChild());",
    "info" : "ExpressionStatement[4358-4400]:ExpressionStatement[4358-4400]"
  }, {
    "left" : "if (NodeUtil.isExpressionNode(parent))",
    "right" : "if (NodeUtil.isExpressionNode(parent))",
    "info" : "IfStatement[4410-4676]:IfStatement[4410-4676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4449-4676]:Block[4449-4676]"
  }, {
    "left" : "parent.replaceChild(n, n.removeFirstChild());",
    "right" : "parent.replaceChild(n, n.removeFirstChild());",
    "info" : "ExpressionStatement[4557-4602]:ExpressionStatement[4557-4602]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[4613-4648]:ExpressionStatement[4613-4648]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[4659-4666]:ReturnStatement[4659-4666]"
  }, {
    "left" : "if (type == Token.NOT && tryMinimizeNot(t, n, parent))",
    "right" : "if (type == Token.NOT && tryMinimizeNot(t, n, parent))",
    "info" : "IfStatement[4748-4832]:IfStatement[4748-4832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4803-4832]:Block[4803-4832]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[4815-4822]:ReturnStatement[4815-4822]"
  }, {
    "left" : "if (!NodeUtil.isLiteralValue(left))",
    "right" : "if (!NodeUtil.isLiteralValue(left))",
    "info" : "IfStatement[4842-4907]:IfStatement[4842-4907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4878-4907]:Block[4878-4907]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[4890-4897]:ReturnStatement[4890-4897]"
  }, {
    "left" : "switch (type) {\n          case Token.NOT:\n            int result = NodeUtil.getBooleanValue(left) ? Token.FALSE :\n                         Token.TRUE;\n            parent.replaceChild(n, new Node(result));\n            t.getCompiler().reportCodeChange();\n            break;\n\n          case Token.NEG:\n            try {\n              if (left.getType() == Token.NAME) {\n                if (left.getString().equals(\"Infinity\")) {\n                  // \"-Infinity\" is valid and a literal, don't modify it.\n                  return;\n                } else if (left.getString().equals(\"NaN\")) {\n                  // \"-NaN\" is \"NaN\".\n                  n.removeChild(left);\n                  parent.replaceChild(n, left);\n                  t.getCompiler().reportCodeChange();\n                  return;\n                }\n              }\n\n              double negNum = -left.getDouble();\n              parent.replaceChild(n, Node.newNumber(negNum));\n              t.getCompiler().reportCodeChange();\n            } catch (UnsupportedOperationException ex) {\n              // left is not a number node, so do not replace, but warn the\n              // user because they can't be doing anything good\n              error(t, NEGATING_A_NON_NUMBER_ERROR, left);\n            }\n            break;\n\n          case Token.BITNOT:\n            try {\n              double val = left.getDouble();\n              if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n                int intVal = (int) val;\n                if (intVal == val) {\n                  parent.replaceChild(n, Node.newNumber(~intVal));\n                  t.getCompiler().reportCodeChange();\n                } else {\n                  error(t, FRACTIONAL_BITWISE_OPERAND, left);\n                }\n              } else {\n                error(t, BITWISE_OPERAND_OUT_OF_RANGE, left);\n              }\n            } catch (UnsupportedOperationException ex) {\n              // left is not a number node, so do not replace, but warn the\n              // user because they can't be doing anything good\n              error(t, NEGATING_A_NON_NUMBER_ERROR, left);\n            }\n            break;\n        }",
    "right" : "switch (type) {\n          case Token.NOT:\n            int result = NodeUtil.getBooleanValue(left) ? Token.FALSE :\n                         Token.TRUE;\n            parent.replaceChild(n, new Node(result));\n            t.getCompiler().reportCodeChange();\n            break;\n\n          case Token.NEG:\n            try {\n              if (left.getType() == Token.NAME) {\n                if (left.getString().equals(\"Infinity\")) {\n                  // \"-Infinity\" is valid and a literal, don't modify it.\n                  return;\n                } else if (left.getString().equals(\"NaN\")) {\n                  // \"-NaN\" is \"NaN\".\n                  n.removeChild(left);\n                  parent.replaceChild(n, left);\n                  t.getCompiler().reportCodeChange();\n                  return;\n                }\n              }\n\n              double negNum = -left.getDouble();\n              parent.replaceChild(n, Node.newNumber(negNum));\n              t.getCompiler().reportCodeChange();\n            } catch (UnsupportedOperationException ex) {\n              // left is not a number node, so do not replace, but warn the\n              // user because they can't be doing anything good\n              error(t, NEGATING_A_NON_NUMBER_ERROR, left);\n            }\n            break;\n\n          case Token.BITNOT:\n            try {\n              double val = left.getDouble();\n              if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n                int intVal = (int) val;\n                if (intVal == val) {\n                  parent.replaceChild(n, Node.newNumber(~intVal));\n                  t.getCompiler().reportCodeChange();\n                } else {\n                  error(t, FRACTIONAL_BITWISE_OPERAND, left);\n                }\n              } else {\n                error(t, BITWISE_OPERAND_OUT_OF_RANGE, left);\n              }\n            } catch (UnsupportedOperationException ex) {\n              // left is not a number node, so do not replace, but warn the\n              // user because they can't be doing anything good\n              error(t, NEGATING_A_NON_NUMBER_ERROR, left);\n            }\n            break;\n        }",
    "info" : "SwitchStatement[4917-7063]:SwitchStatement[4917-7063]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[4943-4958]:SwitchCase[4943-4958]"
  }, {
    "left" : "int result = NodeUtil.getBooleanValue(left) ? Token.FALSE :\n                         Token.TRUE;",
    "right" : "int result = NodeUtil.getBooleanValue(left) ? Token.FALSE :\n                         Token.TRUE;",
    "info" : "VariableDeclarationStatement[4971-5067]:VariableDeclarationStatement[4971-5067]"
  }, {
    "left" : "parent.replaceChild(n, new Node(result));",
    "right" : "parent.replaceChild(n, new Node(result));",
    "info" : "ExpressionStatement[5080-5121]:ExpressionStatement[5080-5121]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[5134-5169]:ExpressionStatement[5134-5169]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5182-5188]:BreakStatement[5182-5188]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[5200-5215]:SwitchCase[5200-5215]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[5228-6174]:TryStatement[5228-6174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5232-5918]:Block[5232-5918]"
  }, {
    "left" : "if (left.getType() == Token.NAME)",
    "right" : "if (left.getType() == Token.NAME)",
    "info" : "IfStatement[5248-5742]:IfStatement[5248-5742]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5282-5742]:Block[5282-5742]"
  }, {
    "left" : "if (left.getString().equals(\"Infinity\"))",
    "right" : "if (left.getString().equals(\"Infinity\"))",
    "info" : "IfStatement[5300-5726]:IfStatement[5300-5726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5341-5460]:Block[5341-5460]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[5435-5442]:ReturnStatement[5435-5442]"
  }, {
    "left" : "if (left.getString().equals(\"NaN\"))",
    "right" : "if (left.getString().equals(\"NaN\"))",
    "info" : "IfStatement[5466-5726]:IfStatement[5466-5726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5502-5726]:Block[5502-5726]"
  }, {
    "left" : "n.removeChild(left);",
    "right" : "n.removeChild(left);",
    "info" : "ExpressionStatement[5560-5580]:ExpressionStatement[5560-5580]"
  }, {
    "left" : "parent.replaceChild(n, left);",
    "right" : "parent.replaceChild(n, left);",
    "info" : "ExpressionStatement[5599-5628]:ExpressionStatement[5599-5628]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[5647-5682]:ExpressionStatement[5647-5682]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[5701-5708]:ReturnStatement[5701-5708]"
  }, {
    "left" : "double negNum = -left.getDouble();",
    "right" : "double negNum = -left.getDouble();",
    "info" : "VariableDeclarationStatement[5758-5792]:VariableDeclarationStatement[5758-5792]"
  }, {
    "left" : "parent.replaceChild(n, Node.newNumber(negNum));",
    "right" : "parent.replaceChild(n, Node.newNumber(negNum));",
    "info" : "ExpressionStatement[5807-5854]:ExpressionStatement[5807-5854]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[5869-5904]:ExpressionStatement[5869-5904]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5960-6174]:Block[5960-6174]"
  }, {
    "left" : "error(t, NEGATING_A_NON_NUMBER_ERROR, left);",
    "right" : "error(t, NEGATING_A_NON_NUMBER_ERROR, left);",
    "info" : "ExpressionStatement[6116-6160]:ExpressionStatement[6116-6160]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6187-6193]:BreakStatement[6187-6193]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[6205-6223]:SwitchCase[6205-6223]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[6236-7034]:TryStatement[6236-7034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6240-6778]:Block[6240-6778]"
  }, {
    "left" : "double val = left.getDouble();",
    "right" : "double val = left.getDouble();",
    "info" : "VariableDeclarationStatement[6256-6286]:VariableDeclarationStatement[6256-6286]"
  }, {
    "left" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
    "right" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
    "info" : "IfStatement[6301-6764]:IfStatement[6301-6764]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6359-6679]:Block[6359-6679]"
  }, {
    "left" : "int intVal = (int) val;",
    "right" : "int intVal = (int) val;",
    "info" : "VariableDeclarationStatement[6377-6400]:VariableDeclarationStatement[6377-6400]"
  }, {
    "left" : "if (intVal == val)",
    "right" : "if (intVal == val)",
    "info" : "IfStatement[6417-6663]:IfStatement[6417-6663]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6436-6576]:Block[6436-6576]"
  }, {
    "left" : "parent.replaceChild(n, Node.newNumber(~intVal));",
    "right" : "parent.replaceChild(n, Node.newNumber(~intVal));",
    "info" : "ExpressionStatement[6456-6504]:ExpressionStatement[6456-6504]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[6523-6558]:ExpressionStatement[6523-6558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6582-6663]:Block[6582-6663]"
  }, {
    "left" : "error(t, FRACTIONAL_BITWISE_OPERAND, left);",
    "right" : "error(t, FRACTIONAL_BITWISE_OPERAND, left);",
    "info" : "ExpressionStatement[6602-6645]:ExpressionStatement[6602-6645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6685-6764]:Block[6685-6764]"
  }, {
    "left" : "error(t, BITWISE_OPERAND_OUT_OF_RANGE, left);",
    "right" : "error(t, BITWISE_OPERAND_OUT_OF_RANGE, left);",
    "info" : "ExpressionStatement[6703-6748]:ExpressionStatement[6703-6748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6820-7034]:Block[6820-7034]"
  }, {
    "left" : "error(t, NEGATING_A_NON_NUMBER_ERROR, left);",
    "right" : "error(t, NEGATING_A_NON_NUMBER_ERROR, left);",
    "info" : "ExpressionStatement[6976-7020]:ExpressionStatement[6976-7020]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7047-7053]:BreakStatement[7047-7053]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[7072-7079]:ReturnStatement[7072-7079]"
  }, {
    "left" : "if (type == Token.NEW)",
    "right" : "if (type == Token.NEW)",
    "info" : "IfStatement[7091-7675]:IfStatement[7091-7675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7114-7675]:Block[7114-7675]"
  }, {
    "left" : "if (Token.NAME == left.getType())",
    "right" : "if (Token.NAME == left.getType())",
    "info" : "IfStatement[7122-7669]:IfStatement[7122-7669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7156-7669]:Block[7156-7669]"
  }, {
    "left" : "String className = left.getString();",
    "right" : "String className = left.getString();",
    "info" : "VariableDeclarationStatement[7166-7202]:VariableDeclarationStatement[7166-7202]"
  }, {
    "left" : "if (\"RegExp\".equals(className))",
    "right" : "if (\"RegExp\".equals(className))",
    "info" : "IfStatement[7211-7661]:IfStatement[7211-7661]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7243-7315]:Block[7243-7315]"
  }, {
    "left" : "tryFoldRegularExpressionConstructor(t, n, parent);",
    "right" : "tryFoldRegularExpressionConstructor(t, n, parent);",
    "info" : "ExpressionStatement[7255-7305]:ExpressionStatement[7255-7305]"
  }, {
    "left" : "if (left.getNext() == null)",
    "right" : "if (left.getNext() == null)",
    "info" : "IfStatement[7321-7661]:IfStatement[7321-7661]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7349-7661]:Block[7349-7661]"
  }, {
    "left" : "if (\"Array\".equals(className))",
    "right" : "if (\"Array\".equals(className))",
    "info" : "IfStatement[7361-7651]:IfStatement[7361-7651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7392-7502]:Block[7392-7502]"
  }, {
    "left" : "tryFoldLiteralConstructor(\n                t, n, parent, className, Token.ARRAYLIT);",
    "right" : "tryFoldLiteralConstructor(\n                t, n, parent, className, Token.ARRAYLIT);",
    "info" : "ExpressionStatement[7406-7490]:ExpressionStatement[7406-7490]"
  }, {
    "left" : "if (\"Object\".equals(className))",
    "right" : "if (\"Object\".equals(className))",
    "info" : "IfStatement[7508-7651]:IfStatement[7508-7651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7540-7651]:Block[7540-7651]"
  }, {
    "left" : "tryFoldLiteralConstructor(\n                t, n, parent, className, Token.OBJECTLIT);",
    "right" : "tryFoldLiteralConstructor(\n                t, n, parent, className, Token.OBJECTLIT);",
    "info" : "ExpressionStatement[7554-7639]:ExpressionStatement[7554-7639]"
  }, {
    "left" : "if (type == Token.EXPR_RESULT)",
    "right" : "if (type == Token.EXPR_RESULT)",
    "info" : "IfStatement[7681-7773]:IfStatement[7681-7773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7712-7773]:Block[7712-7773]"
  }, {
    "left" : "tryMinimizeCondition(t, left, n);",
    "right" : "tryMinimizeCondition(t, left, n);",
    "info" : "ExpressionStatement[7720-7753]:ExpressionStatement[7720-7753]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[7760-7767]:ReturnStatement[7760-7767]"
  }, {
    "left" : "if (type == Token.RETURN)",
    "right" : "if (type == Token.RETURN)",
    "info" : "IfStatement[7779-7855]:IfStatement[7779-7855]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7805-7855]:Block[7805-7855]"
  }, {
    "left" : "tryReduceReturn(t, n);",
    "right" : "tryReduceReturn(t, n);",
    "info" : "ExpressionStatement[7813-7835]:ExpressionStatement[7813-7835]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[7842-7849]:ReturnStatement[7842-7849]"
  }, {
    "left" : "Node right = left.getNext();",
    "right" : "Node right = left.getNext();",
    "info" : "VariableDeclarationStatement[7861-7889]:VariableDeclarationStatement[7861-7889]"
  }, {
    "left" : "if (right == null)",
    "right" : "if (right == null)",
    "info" : "IfStatement[7894-7934]:IfStatement[7894-7934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7913-7934]:Block[7913-7934]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[7921-7928]:ReturnStatement[7921-7928]"
  }, {
    "left" : "if (type == Token.INSTANCEOF\n        && NodeUtil.isLiteralValue(left)\n        && !NodeUtil.mayHaveSideEffects(right))",
    "right" : "if (type == Token.INSTANCEOF\n        && NodeUtil.isLiteralValue(left)\n        && !NodeUtil.mayHaveSideEffects(right))",
    "info" : "IfStatement[8023-8579]:IfStatement[8023-8579]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8141-8579]:Block[8141-8579]"
  }, {
    "left" : "if (NodeUtil.isImmutableValue(left))",
    "right" : "if (NodeUtil.isImmutableValue(left))",
    "info" : "IfStatement[8149-8359]:IfStatement[8149-8359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8186-8359]:Block[8186-8359]"
  }, {
    "left" : "parent.replaceChild(n, new Node(Token.FALSE));",
    "right" : "parent.replaceChild(n, new Node(Token.FALSE));",
    "info" : "ExpressionStatement[8245-8291]:ExpressionStatement[8245-8291]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[8300-8335]:ExpressionStatement[8300-8335]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[8344-8351]:ReturnStatement[8344-8351]"
  }, {
    "left" : "if (right.getType() == Token.NAME\n          && \"Object\".equals(right.getString()))",
    "right" : "if (right.getType() == Token.NAME\n          && \"Object\".equals(right.getString()))",
    "info" : "IfStatement[8367-8573]:IfStatement[8367-8573]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8450-8573]:Block[8450-8573]"
  }, {
    "left" : "parent.replaceChild(n, new Node(Token.TRUE));",
    "right" : "parent.replaceChild(n, new Node(Token.TRUE));",
    "info" : "ExpressionStatement[8460-8505]:ExpressionStatement[8460-8505]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[8514-8549]:ExpressionStatement[8514-8549]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[8558-8565]:ReturnStatement[8558-8565]"
  }, {
    "left" : "if (type == Token.IF || type == Token.HOOK)",
    "right" : "if (type == Token.IF || type == Token.HOOK)",
    "info" : "IfStatement[8585-8944]:IfStatement[8585-8944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8629-8944]:Block[8629-8944]"
  }, {
    "left" : "tryMinimizeCondition(t, n.getFirstChild(), n);",
    "right" : "tryMinimizeCondition(t, n.getFirstChild(), n);",
    "info" : "ExpressionStatement[8637-8683]:ExpressionStatement[8637-8683]"
  }, {
    "left" : "boolean changes = tryFoldHookIf(t, n, parent);",
    "right" : "boolean changes = tryFoldHookIf(t, n, parent);",
    "info" : "VariableDeclarationStatement[8690-8736]:VariableDeclarationStatement[8690-8736]"
  }, {
    "left" : "if (type == Token.IF && !changes)",
    "right" : "if (type == Token.IF && !changes)",
    "info" : "IfStatement[8844-8924]:IfStatement[8844-8924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8878-8924]:Block[8878-8924]"
  }, {
    "left" : "tryMinimizeIf(t, n, parent);",
    "right" : "tryMinimizeIf(t, n, parent);",
    "info" : "ExpressionStatement[8888-8916]:ExpressionStatement[8888-8916]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[8931-8938]:ReturnStatement[8931-8938]"
  }, {
    "left" : "if (type == Token.DO)",
    "right" : "if (type == Token.DO)",
    "info" : "IfStatement[8950-9094]:IfStatement[8950-9094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8972-9094]:Block[8972-9094]"
  }, {
    "left" : "tryMinimizeCondition(t, NodeUtil.getConditionExpression(n), n);",
    "right" : "tryMinimizeCondition(t, NodeUtil.getConditionExpression(n), n);",
    "info" : "ExpressionStatement[8980-9043]:ExpressionStatement[8980-9043]"
  }, {
    "left" : "tryFoldDo(t, n, parent);",
    "right" : "tryFoldDo(t, n, parent);",
    "info" : "ExpressionStatement[9050-9074]:ExpressionStatement[9050-9074]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[9081-9088]:ReturnStatement[9081-9088]"
  }, {
    "left" : "if (type == Token.WHILE)",
    "right" : "if (type == Token.WHILE)",
    "info" : "IfStatement[9100-9250]:IfStatement[9100-9250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9125-9250]:Block[9125-9250]"
  }, {
    "left" : "tryMinimizeCondition(t, NodeUtil.getConditionExpression(n), n);",
    "right" : "tryMinimizeCondition(t, NodeUtil.getConditionExpression(n), n);",
    "info" : "ExpressionStatement[9133-9196]:ExpressionStatement[9133-9196]"
  }, {
    "left" : "tryFoldWhile(t, n, parent);",
    "right" : "tryFoldWhile(t, n, parent);",
    "info" : "ExpressionStatement[9203-9230]:ExpressionStatement[9203-9230]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[9237-9244]:ReturnStatement[9237-9244]"
  }, {
    "left" : "if (type == Token.FOR)",
    "right" : "if (type == Token.FOR)",
    "info" : "IfStatement[9256-9659]:IfStatement[9256-9659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9279-9659]:Block[9279-9659]"
  }, {
    "left" : "Node condition = NodeUtil.getConditionExpression(n);",
    "right" : "Node condition = NodeUtil.getConditionExpression(n);",
    "info" : "VariableDeclarationStatement[9287-9339]:VariableDeclarationStatement[9287-9339]"
  }, {
    "left" : "if (condition != null)",
    "right" : "if (condition != null)",
    "info" : "IfStatement[9346-9598]:IfStatement[9346-9598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9369-9598]:Block[9369-9598]"
  }, {
    "left" : "tryMinimizeCondition(t, condition, n);",
    "right" : "tryMinimizeCondition(t, condition, n);",
    "info" : "ExpressionStatement[9379-9417]:ExpressionStatement[9379-9417]"
  }, {
    "left" : "condition = NodeUtil.getConditionExpression(n);",
    "right" : "condition = NodeUtil.getConditionExpression(n);",
    "info" : "ExpressionStatement[9495-9542]:ExpressionStatement[9495-9542]"
  }, {
    "left" : "this.tryFoldForCondition(condition, n);",
    "right" : "this.tryFoldForCondition(condition, n);",
    "info" : "ExpressionStatement[9551-9590]:ExpressionStatement[9551-9590]"
  }, {
    "left" : "tryFoldFor(t, n, parent);",
    "right" : "tryFoldFor(t, n, parent);",
    "info" : "ExpressionStatement[9614-9639]:ExpressionStatement[9614-9639]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[9646-9653]:ReturnStatement[9646-9653]"
  }, {
    "left" : "if (type == Token.AND ||\n        type == Token.OR)",
    "right" : "if (type == Token.AND ||\n        type == Token.OR)",
    "info" : "IfStatement[9665-9784]:IfStatement[9665-9784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9716-9784]:Block[9716-9784]"
  }, {
    "left" : "tryFoldAndOr(t, n, left, right, parent);",
    "right" : "tryFoldAndOr(t, n, left, right, parent);",
    "info" : "ExpressionStatement[9724-9764]:ExpressionStatement[9724-9764]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[9771-9778]:ReturnStatement[9771-9778]"
  }, {
    "left" : "if (type == Token.BITOR ||\n        type == Token.BITAND)",
    "right" : "if (type == Token.BITOR ||\n        type == Token.BITAND)",
    "info" : "IfStatement[9790-9918]:IfStatement[9790-9918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9847-9918]:Block[9847-9918]"
  }, {
    "left" : "tryFoldBitAndOr(t, n, left, right, parent);",
    "right" : "tryFoldBitAndOr(t, n, left, right, parent);",
    "info" : "ExpressionStatement[9855-9898]:ExpressionStatement[9855-9898]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[9905-9912]:ReturnStatement[9905-9912]"
  }, {
    "left" : "if (type == Token.LSH ||\n        type == Token.RSH ||\n        type == Token.URSH)",
    "right" : "if (type == Token.LSH ||\n        type == Token.RSH ||\n        type == Token.URSH)",
    "info" : "IfStatement[9924-10074]:IfStatement[9924-10074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10006-10074]:Block[10006-10074]"
  }, {
    "left" : "tryFoldShift(t, n, left, right, parent);",
    "right" : "tryFoldShift(t, n, left, right, parent);",
    "info" : "ExpressionStatement[10014-10054]:ExpressionStatement[10014-10054]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[10061-10068]:ReturnStatement[10061-10068]"
  }, {
    "left" : "if (type == Token.GETPROP)",
    "right" : "if (type == Token.GETPROP)",
    "info" : "IfStatement[10080-10177]:IfStatement[10080-10177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10107-10177]:Block[10107-10177]"
  }, {
    "left" : "tryFoldGetProp(t, n, left, right, parent);",
    "right" : "tryFoldGetProp(t, n, left, right, parent);",
    "info" : "ExpressionStatement[10115-10157]:ExpressionStatement[10115-10157]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[10164-10171]:ReturnStatement[10164-10171]"
  }, {
    "left" : "if (type == Token.CALL)",
    "right" : "if (type == Token.CALL)",
    "info" : "IfStatement[10183-10335]:IfStatement[10183-10335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10207-10335]:Block[10207-10335]"
  }, {
    "left" : "tryFoldStringJoin(t, n, left, right, parent);",
    "right" : "tryFoldStringJoin(t, n, left, right, parent);",
    "info" : "ExpressionStatement[10215-10260]:ExpressionStatement[10215-10260]"
  }, {
    "left" : "tryFoldStringIndexOf(t, n, left, right, parent);",
    "right" : "tryFoldStringIndexOf(t, n, left, right, parent);",
    "info" : "ExpressionStatement[10267-10315]:ExpressionStatement[10267-10315]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[10322-10329]:ReturnStatement[10322-10329]"
  }, {
    "left" : "if (type == Token.ASSIGN)",
    "right" : "if (type == Token.ASSIGN)",
    "info" : "IfStatement[10341-10414]:IfStatement[10341-10414]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10367-10414]:Block[10367-10414]"
  }, {
    "left" : "tryFoldAssign(t, n, left, right);",
    "right" : "tryFoldAssign(t, n, left, right);",
    "info" : "ExpressionStatement[10375-10408]:ExpressionStatement[10375-10408]"
  }, {
    "left" : "if (!NodeUtil.isLiteralValue(left) ||\n        !NodeUtil.isLiteralValue(right))",
    "right" : "if (!NodeUtil.isLiteralValue(left) ||\n        !NodeUtil.isLiteralValue(right))",
    "info" : "IfStatement[10420-10790]:IfStatement[10420-10790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10499-10790]:Block[10499-10790]"
  }, {
    "left" : "if (type == Token.ADD)",
    "right" : "if (type == Token.ADD)",
    "info" : "IfStatement[10508-10586]:IfStatement[10508-10586]"
  }, {
    "left" : "tryFoldLeftChildAdd(t, n, left, right, parent);",
    "right" : "tryFoldLeftChildAdd(t, n, left, right, parent);",
    "info" : "ExpressionStatement[10539-10586]:ExpressionStatement[10539-10586]"
  }, {
    "left" : "if (type == Token.LT ||\n          type == Token.GT)",
    "right" : "if (type == Token.LT ||\n          type == Token.GT)",
    "info" : "IfStatement[10594-10709]:IfStatement[10594-10709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10646-10709]:Block[10646-10709]"
  }, {
    "left" : "tryFoldComparison(t, n, left, right, parent);",
    "right" : "tryFoldComparison(t, n, left, right, parent);",
    "info" : "ExpressionStatement[10656-10701]:ExpressionStatement[10656-10701]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[10717-10724]:ReturnStatement[10717-10724]"
  }, {
    "left" : "if (type == Token.ADD)",
    "right" : "if (type == Token.ADD)",
    "info" : "IfStatement[10796-10885]:IfStatement[10796-10885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10819-10885]:Block[10819-10885]"
  }, {
    "left" : "tryFoldAdd(t, n, left, right, parent);",
    "right" : "tryFoldAdd(t, n, left, right, parent);",
    "info" : "ExpressionStatement[10827-10865]:ExpressionStatement[10827-10865]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[10872-10879]:ReturnStatement[10872-10879]"
  }, {
    "left" : "if (type == Token.SUB ||\n        type == Token.MUL ||\n        type == Token.DIV)",
    "right" : "if (type == Token.SUB ||\n        type == Token.MUL ||\n        type == Token.DIV)",
    "info" : "IfStatement[10890-11044]:IfStatement[10890-11044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10971-11044]:Block[10971-11044]"
  }, {
    "left" : "tryFoldArithmetic(t, n, left, right, parent);",
    "right" : "tryFoldArithmetic(t, n, left, right, parent);",
    "info" : "ExpressionStatement[10979-11024]:ExpressionStatement[10979-11024]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[11031-11038]:ReturnStatement[11031-11038]"
  }, {
    "left" : "if (type == Token.LT ||\n        type == Token.GT ||\n        type == Token.LE ||\n        type == Token.GE ||\n        type == Token.EQ ||\n        type == Token.NE ||\n        type == Token.SHEQ ||\n        type == Token.SHNE)",
    "right" : "if (type == Token.LT ||\n        type == Token.GT ||\n        type == Token.LE ||\n        type == Token.GE ||\n        type == Token.EQ ||\n        type == Token.NE ||\n        type == Token.SHEQ ||\n        type == Token.SHNE)",
    "info" : "IfStatement[11050-11345]:IfStatement[11050-11345]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11272-11345]:Block[11272-11345]"
  }, {
    "left" : "tryFoldComparison(t, n, left, right, parent);",
    "right" : "tryFoldComparison(t, n, left, right, parent);",
    "info" : "ExpressionStatement[11280-11325]:ExpressionStatement[11280-11325]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[11332-11339]:ReturnStatement[11332-11339]"
  }, {
    "left" : "if (type == Token.GETELEM)",
    "right" : "if (type == Token.GETELEM)",
    "info" : "IfStatement[11351-11448]:IfStatement[11351-11448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11378-11448]:Block[11378-11448]"
  }, {
    "left" : "tryFoldGetElem(t, n, left, right, parent);",
    "right" : "tryFoldGetElem(t, n, left, right, parent);",
    "info" : "ExpressionStatement[11386-11428]:ExpressionStatement[11386-11428]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[11435-11442]:ReturnStatement[11435-11442]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11491-11498]:Modifier[11491-11498]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11499-11503]:PrimitiveType[11499-11503]"
  }, {
    "left" : "error",
    "right" : "error",
    "info" : "SimpleName[11504-11509]:SimpleName[11504-11509]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[11510-11525]:SingleVariableDeclaration[11510-11525]"
  }, {
    "left" : "DiagnosticType diagnostic",
    "right" : "DiagnosticType diagnostic",
    "info" : "SingleVariableDeclaration[11527-11552]:SingleVariableDeclaration[11527-11552]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[11554-11560]:SingleVariableDeclaration[11554-11560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11562-11641]:Block[11562-11641]"
  }, {
    "left" : "t.getCompiler().report(JSError.make(t, n, diagnostic, n.toString()));",
    "right" : "t.getCompiler().report(JSError.make(t, n, diagnostic, n.toString()));",
    "info" : "ExpressionStatement[11568-11637]:ExpressionStatement[11568-11637]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11861-11868]:Modifier[11861-11868]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11869-11876]:PrimitiveType[11869-11876]"
  }, {
    "left" : "consumesDanglingElse",
    "right" : "consumesDanglingElse",
    "info" : "SimpleName[11877-11897]:SimpleName[11877-11897]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[11898-11904]:SingleVariableDeclaration[11898-11904]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11906-12312]:Block[11906-12312]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[11912-12308]:WhileStatement[11912-12308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11925-12308]:Block[11925-12308]"
  }, {
    "left" : "switch (n.getType()) {\n        case Token.IF:\n          if (n.getChildCount() < 3) return true;\n          // This IF node has no else clause.\n          n = n.getLastChild();\n          continue;\n        case Token.WITH:\n        case Token.WHILE:\n        case Token.FOR:\n          n = n.getLastChild();\n          continue;\n        default:\n          return false;\n      }",
    "right" : "switch (n.getType()) {\n        case Token.IF:\n          if (n.getChildCount() < 3) return true;\n          // This IF node has no else clause.\n          n = n.getLastChild();\n          continue;\n        case Token.WITH:\n        case Token.WHILE:\n        case Token.FOR:\n          n = n.getLastChild();\n          continue;\n        default:\n          return false;\n      }",
    "info" : "SwitchStatement[11933-12302]:SwitchStatement[11933-12302]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[11964-11978]:SwitchCase[11964-11978]"
  }, {
    "left" : "if (n.getChildCount() < 3)",
    "right" : "if (n.getChildCount() < 3)",
    "info" : "IfStatement[11989-12028]:IfStatement[11989-12028]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[12016-12028]:ReturnStatement[12016-12028]"
  }, {
    "left" : "n = n.getLastChild();",
    "right" : "n = n.getLastChild();",
    "info" : "ExpressionStatement[12085-12106]:ExpressionStatement[12085-12106]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[12117-12126]:ContinueStatement[12117-12126]"
  }, {
    "left" : "case Token.WITH:",
    "right" : "case Token.WITH:",
    "info" : "SwitchCase[12135-12151]:SwitchCase[12135-12151]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[12160-12177]:SwitchCase[12160-12177]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[12186-12201]:SwitchCase[12186-12201]"
  }, {
    "left" : "n = n.getLastChild();",
    "right" : "n = n.getLastChild();",
    "info" : "ExpressionStatement[12212-12233]:ExpressionStatement[12212-12233]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[12244-12253]:ContinueStatement[12244-12253]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[12262-12270]:SwitchCase[12262-12270]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12281-12294]:ReturnStatement[12281-12294]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12316-12323]:Modifier[12316-12323]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12324-12328]:PrimitiveType[12324-12328]"
  }, {
    "left" : "tryFoldAssign",
    "right" : "tryFoldAssign",
    "info" : "SimpleName[12329-12342]:SimpleName[12329-12342]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[12343-12358]:SingleVariableDeclaration[12343-12358]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[12360-12366]:SingleVariableDeclaration[12360-12366]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[12368-12377]:SingleVariableDeclaration[12368-12377]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[12379-12389]:SingleVariableDeclaration[12379-12389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12391-13935]:Block[12391-13935]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.ASSIGN);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.ASSIGN);",
    "info" : "ExpressionStatement[12397-12454]:ExpressionStatement[12397-12454]"
  }, {
    "left" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
    "right" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
    "info" : "IfStatement[12505-12656]:IfStatement[12505-12656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12598-12656]:Block[12598-12656]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[12643-12650]:ReturnStatement[12643-12650]"
  }, {
    "left" : "if (NodeUtil.mayHaveSideEffects(left))",
    "right" : "if (NodeUtil.mayHaveSideEffects(left))",
    "info" : "IfStatement[12662-12722]:IfStatement[12662-12722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12701-12722]:Block[12701-12722]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[12709-12716]:ReturnStatement[12709-12716]"
  }, {
    "left" : "Node leftChild = right.getFirstChild();",
    "right" : "Node leftChild = right.getFirstChild();",
    "info" : "VariableDeclarationStatement[12728-12767]:VariableDeclarationStatement[12728-12767]"
  }, {
    "left" : "if (!compiler.areNodesEqualForInlining(left, leftChild))",
    "right" : "if (!compiler.areNodesEqualForInlining(left, leftChild))",
    "info" : "IfStatement[12772-12850]:IfStatement[12772-12850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12829-12850]:Block[12829-12850]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[12837-12844]:ReturnStatement[12837-12844]"
  }, {
    "left" : "int newType = -1;",
    "right" : "int newType = -1;",
    "info" : "VariableDeclarationStatement[12856-12873]:VariableDeclarationStatement[12856-12873]"
  }, {
    "left" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return;\n    }",
    "right" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return;\n    }",
    "info" : "SwitchStatement[12878-13762]:SwitchStatement[12878-13762]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[12911-12926]:SwitchCase[12911-12926]"
  }, {
    "left" : "newType = Token.ASSIGN_ADD;",
    "right" : "newType = Token.ASSIGN_ADD;",
    "info" : "ExpressionStatement[12935-12962]:ExpressionStatement[12935-12962]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12971-12977]:BreakStatement[12971-12977]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[12984-13002]:SwitchCase[12984-13002]"
  }, {
    "left" : "newType = Token.ASSIGN_BITAND;",
    "right" : "newType = Token.ASSIGN_BITAND;",
    "info" : "ExpressionStatement[13011-13041]:ExpressionStatement[13011-13041]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13050-13056]:BreakStatement[13050-13056]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[13063-13080]:SwitchCase[13063-13080]"
  }, {
    "left" : "newType = Token.ASSIGN_BITOR;",
    "right" : "newType = Token.ASSIGN_BITOR;",
    "info" : "ExpressionStatement[13089-13118]:ExpressionStatement[13089-13118]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13127-13133]:BreakStatement[13127-13133]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[13140-13158]:SwitchCase[13140-13158]"
  }, {
    "left" : "newType = Token.ASSIGN_BITXOR;",
    "right" : "newType = Token.ASSIGN_BITXOR;",
    "info" : "ExpressionStatement[13167-13197]:ExpressionStatement[13167-13197]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13206-13212]:BreakStatement[13206-13212]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[13219-13234]:SwitchCase[13219-13234]"
  }, {
    "left" : "newType = Token.ASSIGN_DIV;",
    "right" : "newType = Token.ASSIGN_DIV;",
    "info" : "ExpressionStatement[13243-13270]:ExpressionStatement[13243-13270]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13279-13285]:BreakStatement[13279-13285]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[13292-13307]:SwitchCase[13292-13307]"
  }, {
    "left" : "newType = Token.ASSIGN_LSH;",
    "right" : "newType = Token.ASSIGN_LSH;",
    "info" : "ExpressionStatement[13316-13343]:ExpressionStatement[13316-13343]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13352-13358]:BreakStatement[13352-13358]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[13365-13380]:SwitchCase[13365-13380]"
  }, {
    "left" : "newType = Token.ASSIGN_MOD;",
    "right" : "newType = Token.ASSIGN_MOD;",
    "info" : "ExpressionStatement[13389-13416]:ExpressionStatement[13389-13416]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13425-13431]:BreakStatement[13425-13431]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[13438-13453]:SwitchCase[13438-13453]"
  }, {
    "left" : "newType = Token.ASSIGN_MUL;",
    "right" : "newType = Token.ASSIGN_MUL;",
    "info" : "ExpressionStatement[13462-13489]:ExpressionStatement[13462-13489]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13498-13504]:BreakStatement[13498-13504]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[13511-13526]:SwitchCase[13511-13526]"
  }, {
    "left" : "newType = Token.ASSIGN_RSH;",
    "right" : "newType = Token.ASSIGN_RSH;",
    "info" : "ExpressionStatement[13535-13562]:ExpressionStatement[13535-13562]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13571-13577]:BreakStatement[13571-13577]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[13584-13599]:SwitchCase[13584-13599]"
  }, {
    "left" : "newType = Token.ASSIGN_SUB;",
    "right" : "newType = Token.ASSIGN_SUB;",
    "info" : "ExpressionStatement[13608-13635]:ExpressionStatement[13608-13635]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13644-13650]:BreakStatement[13644-13650]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[13657-13673]:SwitchCase[13657-13673]"
  }, {
    "left" : "newType = Token.ASSIGN_URSH;",
    "right" : "newType = Token.ASSIGN_URSH;",
    "info" : "ExpressionStatement[13682-13710]:ExpressionStatement[13682-13710]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13719-13725]:BreakStatement[13719-13725]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[13732-13740]:SwitchCase[13732-13740]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[13749-13756]:ReturnStatement[13749-13756]"
  }, {
    "left" : "n.getParent().replaceChild(n, new Node(newType,\n        left.detachFromParent(), right.getLastChild().detachFromParent()));",
    "right" : "n.getParent().replaceChild(n, new Node(newType,\n        left.detachFromParent(), right.getLastChild().detachFromParent()));",
    "info" : "ExpressionStatement[13768-13891]:ExpressionStatement[13768-13891]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[13896-13931]:ExpressionStatement[13896-13931]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14017-14021]:PrimitiveType[14017-14021]"
  }, {
    "left" : "tryFoldBlock",
    "right" : "tryFoldBlock",
    "info" : "SimpleName[14022-14034]:SimpleName[14022-14034]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[14035-14050]:SingleVariableDeclaration[14035-14050]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14052-14058]:SingleVariableDeclaration[14052-14058]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[14060-14071]:SingleVariableDeclaration[14060-14071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14073-14586]:Block[14073-14586]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null)",
    "right" : "for (Node c = n.getFirstChild(); c != null)",
    "info" : "ForStatement[14114-14393]:ForStatement[14114-14393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14160-14393]:Block[14160-14393]"
  }, {
    "left" : "Node next = c.getNext();",
    "right" : "Node next = c.getNext();",
    "info" : "VariableDeclarationStatement[14168-14192]:VariableDeclarationStatement[14168-14192]"
  }, {
    "left" : "if (!NodeUtil.mayHaveSideEffects(c))",
    "right" : "if (!NodeUtil.mayHaveSideEffects(c))",
    "info" : "IfStatement[14241-14371]:IfStatement[14241-14371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14278-14371]:Block[14278-14371]"
  }, {
    "left" : "n.removeChild(c);",
    "right" : "n.removeChild(c);",
    "info" : "ExpressionStatement[14288-14305]:ExpressionStatement[14288-14305]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[14328-14363]:ExpressionStatement[14328-14363]"
  }, {
    "left" : "c = next;",
    "right" : "c = next;",
    "info" : "ExpressionStatement[14378-14387]:ExpressionStatement[14378-14387]"
  }, {
    "left" : "if (n.isSyntheticBlock() || parent == null)",
    "right" : "if (n.isSyntheticBlock() || parent == null)",
    "info" : "IfStatement[14399-14464]:IfStatement[14399-14464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14443-14464]:Block[14443-14464]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[14451-14458]:ReturnStatement[14451-14458]"
  }, {
    "left" : "if (NodeUtil.tryMergeBlock(n))",
    "right" : "if (NodeUtil.tryMergeBlock(n))",
    "info" : "IfStatement[14502-14582]:IfStatement[14502-14582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14533-14582]:Block[14533-14582]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[14541-14576]:ExpressionStatement[14541-14576]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14710-14717]:PrimitiveType[14710-14717]"
  }, {
    "left" : "tryFoldHookIf",
    "right" : "tryFoldHookIf",
    "info" : "SimpleName[14718-14731]:SimpleName[14718-14731]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[14732-14747]:SingleVariableDeclaration[14732-14747]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14749-14755]:SingleVariableDeclaration[14749-14755]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[14757-14768]:SingleVariableDeclaration[14757-14768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14770-18976]:Block[14770-18976]"
  }, {
    "left" : "int type = n.getType();",
    "right" : "int type = n.getType();",
    "info" : "VariableDeclarationStatement[14776-14799]:VariableDeclarationStatement[14776-14799]"
  }, {
    "left" : "Node cond = n.getFirstChild();",
    "right" : "Node cond = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[14804-14834]:VariableDeclarationStatement[14804-14834]"
  }, {
    "left" : "Node thenBody = cond.getNext();",
    "right" : "Node thenBody = cond.getNext();",
    "info" : "VariableDeclarationStatement[14839-14870]:VariableDeclarationStatement[14839-14870]"
  }, {
    "left" : "Node elseBody = thenBody.getNext();",
    "right" : "Node elseBody = thenBody.getNext();",
    "info" : "VariableDeclarationStatement[14875-14910]:VariableDeclarationStatement[14875-14910]"
  }, {
    "left" : "boolean changes = false;",
    "right" : "boolean changes = false;",
    "info" : "VariableDeclarationStatement[14916-14940]:VariableDeclarationStatement[14916-14940]"
  }, {
    "left" : "if (type == Token.IF)",
    "right" : "if (type == Token.IF)",
    "info" : "IfStatement[14946-17680]:IfStatement[14946-17680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14968-16286]:Block[14968-16286]"
  }, {
    "left" : "if (elseBody != null && !NodeUtil.mayHaveSideEffects(elseBody))",
    "right" : "if (elseBody != null && !NodeUtil.mayHaveSideEffects(elseBody))",
    "info" : "IfStatement[15027-15226]:IfStatement[15027-15226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15091-15226]:Block[15091-15226]"
  }, {
    "left" : "n.removeChild(elseBody);",
    "right" : "n.removeChild(elseBody);",
    "info" : "ExpressionStatement[15101-15125]:ExpressionStatement[15101-15125]"
  }, {
    "left" : "elseBody = null;",
    "right" : "elseBody = null;",
    "info" : "ExpressionStatement[15134-15150]:ExpressionStatement[15134-15150]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[15159-15194]:ExpressionStatement[15159-15194]"
  }, {
    "left" : "changes = true;",
    "right" : "changes = true;",
    "info" : "ExpressionStatement[15203-15218]:ExpressionStatement[15203-15218]"
  }, {
    "left" : "if (!NodeUtil.mayHaveSideEffects(thenBody) && elseBody != null)",
    "right" : "if (!NodeUtil.mayHaveSideEffects(thenBody) && elseBody != null)",
    "info" : "IfStatement[15287-15711]:IfStatement[15287-15711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15351-15711]:Block[15351-15711]"
  }, {
    "left" : "n.removeChild(elseBody);",
    "right" : "n.removeChild(elseBody);",
    "info" : "ExpressionStatement[15361-15385]:ExpressionStatement[15361-15385]"
  }, {
    "left" : "n.replaceChild(thenBody, elseBody);",
    "right" : "n.replaceChild(thenBody, elseBody);",
    "info" : "ExpressionStatement[15394-15429]:ExpressionStatement[15394-15429]"
  }, {
    "left" : "Node notCond = new Node(Token.NOT);",
    "right" : "Node notCond = new Node(Token.NOT);",
    "info" : "VariableDeclarationStatement[15438-15473]:VariableDeclarationStatement[15438-15473]"
  }, {
    "left" : "n.replaceChild(cond, notCond);",
    "right" : "n.replaceChild(cond, notCond);",
    "info" : "ExpressionStatement[15482-15512]:ExpressionStatement[15482-15512]"
  }, {
    "left" : "notCond.addChildToFront(cond);",
    "right" : "notCond.addChildToFront(cond);",
    "info" : "ExpressionStatement[15521-15551]:ExpressionStatement[15521-15551]"
  }, {
    "left" : "cond = notCond;",
    "right" : "cond = notCond;",
    "info" : "ExpressionStatement[15560-15575]:ExpressionStatement[15560-15575]"
  }, {
    "left" : "thenBody = cond.getNext();",
    "right" : "thenBody = cond.getNext();",
    "info" : "ExpressionStatement[15584-15610]:ExpressionStatement[15584-15610]"
  }, {
    "left" : "elseBody = null;",
    "right" : "elseBody = null;",
    "info" : "ExpressionStatement[15619-15635]:ExpressionStatement[15619-15635]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[15644-15679]:ExpressionStatement[15644-15679]"
  }, {
    "left" : "changes = true;",
    "right" : "changes = true;",
    "info" : "ExpressionStatement[15688-15703]:ExpressionStatement[15688-15703]"
  }, {
    "left" : "if (!NodeUtil.mayHaveSideEffects(thenBody) && elseBody == null)",
    "right" : "if (!NodeUtil.mayHaveSideEffects(thenBody) && elseBody == null)",
    "info" : "IfStatement[15741-16280]:IfStatement[15741-16280]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15805-16280]:Block[15805-16280]"
  }, {
    "left" : "if (NodeUtil.mayHaveSideEffects(cond))",
    "right" : "if (NodeUtil.mayHaveSideEffects(cond))",
    "info" : "IfStatement[15815-16155]:IfStatement[15815-16155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15854-16026]:Block[15854-16026]"
  }, {
    "left" : "n.removeChild(cond);",
    "right" : "n.removeChild(cond);",
    "info" : "ExpressionStatement[15938-15958]:ExpressionStatement[15938-15958]"
  }, {
    "left" : "parent.replaceChild(n, NodeUtil.newExpr(cond));",
    "right" : "parent.replaceChild(n, NodeUtil.newExpr(cond));",
    "info" : "ExpressionStatement[15969-16016]:ExpressionStatement[15969-16016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16032-16155]:Block[16032-16155]"
  }, {
    "left" : "NodeUtil.removeChild(parent, n);",
    "right" : "NodeUtil.removeChild(parent, n);",
    "info" : "ExpressionStatement[16113-16145]:ExpressionStatement[16113-16145]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[16164-16199]:ExpressionStatement[16164-16199]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16208-16220]:ReturnStatement[16208-16220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16292-17680]:Block[16292-17680]"
  }, {
    "left" : "Preconditions.checkState(type == Token.HOOK);",
    "right" : "Preconditions.checkState(type == Token.HOOK);",
    "info" : "ExpressionStatement[16300-16345]:ExpressionStatement[16300-16345]"
  }, {
    "left" : "if (NodeUtil.isExpressionNode(parent))",
    "right" : "if (NodeUtil.isExpressionNode(parent))",
    "info" : "IfStatement[16352-17674]:IfStatement[16352-17674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16391-17674]:Block[16391-17674]"
  }, {
    "left" : "if (!NodeUtil.mayHaveSideEffects(thenBody))",
    "right" : "if (!NodeUtil.mayHaveSideEffects(thenBody))",
    "info" : "IfStatement[16441-17666]:IfStatement[16441-17666]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16485-17193]:Block[16485-17193]"
  }, {
    "left" : "Node ifNode = new Node(Token.IF);",
    "right" : "Node ifNode = new Node(Token.IF);",
    "info" : "VariableDeclarationStatement[16533-16566]:VariableDeclarationStatement[16533-16566]"
  }, {
    "left" : "if (cond.getType() == Token.NOT)",
    "right" : "if (cond.getType() == Token.NOT)",
    "info" : "IfStatement[16577-16920]:IfStatement[16577-16920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16610-16746]:Block[16610-16746]"
  }, {
    "left" : "Node expr = cond.getFirstChild();",
    "right" : "Node expr = cond.getFirstChild();",
    "info" : "VariableDeclarationStatement[16624-16657]:VariableDeclarationStatement[16624-16657]"
  }, {
    "left" : "cond.removeChild(expr);",
    "right" : "cond.removeChild(expr);",
    "info" : "ExpressionStatement[16670-16693]:ExpressionStatement[16670-16693]"
  }, {
    "left" : "ifNode.addChildToBack(expr);",
    "right" : "ifNode.addChildToBack(expr);",
    "info" : "ExpressionStatement[16706-16734]:ExpressionStatement[16706-16734]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16752-16920]:Block[16752-16920]"
  }, {
    "left" : "Node not = new Node(Token.NOT);",
    "right" : "Node not = new Node(Token.NOT);",
    "info" : "VariableDeclarationStatement[16766-16797]:VariableDeclarationStatement[16766-16797]"
  }, {
    "left" : "n.removeChild(cond);",
    "right" : "n.removeChild(cond);",
    "info" : "ExpressionStatement[16810-16830]:ExpressionStatement[16810-16830]"
  }, {
    "left" : "not.addChildToBack(cond);",
    "right" : "not.addChildToBack(cond);",
    "info" : "ExpressionStatement[16843-16868]:ExpressionStatement[16843-16868]"
  }, {
    "left" : "ifNode.addChildToBack(not);",
    "right" : "ifNode.addChildToBack(not);",
    "info" : "ExpressionStatement[16881-16908]:ExpressionStatement[16881-16908]"
  }, {
    "left" : "n.removeChild(elseBody);",
    "right" : "n.removeChild(elseBody);",
    "info" : "ExpressionStatement[16932-16956]:ExpressionStatement[16932-16956]"
  }, {
    "left" : "ifNode.addChildToBack(\n              new Node(Token.BLOCK, NodeUtil.newExpr(elseBody)));",
    "right" : "ifNode.addChildToBack(\n              new Node(Token.BLOCK, NodeUtil.newExpr(elseBody)));",
    "info" : "ExpressionStatement[16967-17055]:ExpressionStatement[16967-17055]"
  }, {
    "left" : "parent.getParent().replaceChild(parent, ifNode);",
    "right" : "parent.getParent().replaceChild(parent, ifNode);",
    "info" : "ExpressionStatement[17066-17114]:ExpressionStatement[17066-17114]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[17125-17160]:ExpressionStatement[17125-17160]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[17171-17183]:ReturnStatement[17171-17183]"
  }, {
    "left" : "if (!NodeUtil.mayHaveSideEffects(elseBody))",
    "right" : "if (!NodeUtil.mayHaveSideEffects(elseBody))",
    "info" : "IfStatement[17199-17666]:IfStatement[17199-17666]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17243-17666]:Block[17243-17666]"
  }, {
    "left" : "Node ifNode = new Node(Token.IF);",
    "right" : "Node ifNode = new Node(Token.IF);",
    "info" : "VariableDeclarationStatement[17290-17323]:VariableDeclarationStatement[17290-17323]"
  }, {
    "left" : "n.removeChild(cond);",
    "right" : "n.removeChild(cond);",
    "info" : "ExpressionStatement[17334-17354]:ExpressionStatement[17334-17354]"
  }, {
    "left" : "ifNode.addChildToBack(cond);",
    "right" : "ifNode.addChildToBack(cond);",
    "info" : "ExpressionStatement[17365-17393]:ExpressionStatement[17365-17393]"
  }, {
    "left" : "n.removeChild(thenBody);",
    "right" : "n.removeChild(thenBody);",
    "info" : "ExpressionStatement[17404-17428]:ExpressionStatement[17404-17428]"
  }, {
    "left" : "ifNode.addChildToBack(\n              new Node(Token.BLOCK, NodeUtil.newExpr(thenBody)));",
    "right" : "ifNode.addChildToBack(\n              new Node(Token.BLOCK, NodeUtil.newExpr(thenBody)));",
    "info" : "ExpressionStatement[17440-17528]:ExpressionStatement[17440-17528]"
  }, {
    "left" : "parent.getParent().replaceChild(parent, ifNode);",
    "right" : "parent.getParent().replaceChild(parent, ifNode);",
    "info" : "ExpressionStatement[17539-17587]:ExpressionStatement[17539-17587]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[17598-17633]:ExpressionStatement[17598-17633]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[17644-17656]:ReturnStatement[17644-17656]"
  }, {
    "left" : "if (!NodeUtil.isLiteralValue(cond))",
    "right" : "if (!NodeUtil.isLiteralValue(cond))",
    "info" : "IfStatement[17740-17845]:IfStatement[17740-17845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17776-17845]:Block[17776-17845]"
  }, {
    "left" : "return changes;",
    "right" : "return changes;",
    "info" : "ReturnStatement[17784-17799]:ReturnStatement[17784-17799]"
  }, {
    "left" : "boolean condTrue = NodeUtil.getBooleanValue(cond);",
    "right" : "boolean condTrue = NodeUtil.getBooleanValue(cond);",
    "info" : "VariableDeclarationStatement[17851-17901]:VariableDeclarationStatement[17851-17901]"
  }, {
    "left" : "if (n.getChildCount() == 2)",
    "right" : "if (n.getChildCount() == 2)",
    "info" : "IfStatement[17907-18955]:IfStatement[17907-18955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17935-18444]:Block[17935-18444]"
  }, {
    "left" : "Preconditions.checkState(type == Token.IF);",
    "right" : "Preconditions.checkState(type == Token.IF);",
    "info" : "ExpressionStatement[17943-17986]:ExpressionStatement[17943-17986]"
  }, {
    "left" : "if (condTrue)",
    "right" : "if (condTrue)",
    "info" : "IfStatement[17994-18438]:IfStatement[17994-18438]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18008-18236]:Block[18008-18236]"
  }, {
    "left" : "Node thenStmt = n.getFirstChild().getNext();",
    "right" : "Node thenStmt = n.getFirstChild().getNext();",
    "info" : "VariableDeclarationStatement[18065-18109]:VariableDeclarationStatement[18065-18109]"
  }, {
    "left" : "n.removeChild(thenStmt);",
    "right" : "n.removeChild(thenStmt);",
    "info" : "ExpressionStatement[18118-18142]:ExpressionStatement[18118-18142]"
  }, {
    "left" : "parent.replaceChild(n, thenStmt);",
    "right" : "parent.replaceChild(n, thenStmt);",
    "info" : "ExpressionStatement[18151-18184]:ExpressionStatement[18151-18184]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[18193-18228]:ExpressionStatement[18193-18228]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18242-18438]:Block[18242-18438]"
  }, {
    "left" : "NodeUtil.redeclareVarsInsideBranch(n);",
    "right" : "NodeUtil.redeclareVarsInsideBranch(n);",
    "info" : "ExpressionStatement[18307-18345]:ExpressionStatement[18307-18345]"
  }, {
    "left" : "NodeUtil.removeChild(parent, n);",
    "right" : "NodeUtil.removeChild(parent, n);",
    "info" : "ExpressionStatement[18354-18386]:ExpressionStatement[18354-18386]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[18395-18430]:ExpressionStatement[18395-18430]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18450-18955]:Block[18450-18955]"
  }, {
    "left" : "Node firstBranch = n.getFirstChild().getNext();",
    "right" : "Node firstBranch = n.getFirstChild().getNext();",
    "info" : "VariableDeclarationStatement[18570-18617]:VariableDeclarationStatement[18570-18617]"
  }, {
    "left" : "Node secondBranch = firstBranch.getNext();",
    "right" : "Node secondBranch = firstBranch.getNext();",
    "info" : "VariableDeclarationStatement[18624-18666]:VariableDeclarationStatement[18624-18666]"
  }, {
    "left" : "Node branch = condTrue ? firstBranch : secondBranch;",
    "right" : "Node branch = condTrue ? firstBranch : secondBranch;",
    "info" : "VariableDeclarationStatement[18673-18725]:VariableDeclarationStatement[18673-18725]"
  }, {
    "left" : "Node notBranch = condTrue ? secondBranch : firstBranch;",
    "right" : "Node notBranch = condTrue ? secondBranch : firstBranch;",
    "info" : "VariableDeclarationStatement[18732-18787]:VariableDeclarationStatement[18732-18787]"
  }, {
    "left" : "NodeUtil.redeclareVarsInsideBranch(notBranch);",
    "right" : "NodeUtil.redeclareVarsInsideBranch(notBranch);",
    "info" : "ExpressionStatement[18794-18840]:ExpressionStatement[18794-18840]"
  }, {
    "left" : "n.removeChild(branch);",
    "right" : "n.removeChild(branch);",
    "info" : "ExpressionStatement[18847-18869]:ExpressionStatement[18847-18869]"
  }, {
    "left" : "parent.replaceChild(n, branch);",
    "right" : "parent.replaceChild(n, branch);",
    "info" : "ExpressionStatement[18876-18907]:ExpressionStatement[18876-18907]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[18914-18949]:ExpressionStatement[18914-18949]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[18960-18972]:ReturnStatement[18960-18972]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19040-19047]:Modifier[19040-19047]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[19048-19055]:PrimitiveType[19048-19055]"
  }, {
    "left" : "tryMinimizeNot",
    "right" : "tryMinimizeNot",
    "info" : "SimpleName[19056-19070]:SimpleName[19056-19070]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[19071-19086]:SingleVariableDeclaration[19071-19086]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[19088-19094]:SingleVariableDeclaration[19088-19094]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[19096-19107]:SingleVariableDeclaration[19096-19107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19109-19899]:Block[19109-19899]"
  }, {
    "left" : "Node notChild = n.getFirstChild();",
    "right" : "Node notChild = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[19115-19149]:VariableDeclarationStatement[19115-19149]"
  }, {
    "left" : "int complementOperator;",
    "right" : "int complementOperator;",
    "info" : "VariableDeclarationStatement[19223-19246]:VariableDeclarationStatement[19223-19246]"
  }, {
    "left" : "switch (notChild.getType()) {\n      case Token.EQ:\n        complementOperator = Token.NE;\n        break;\n      case Token.NE:\n        complementOperator = Token.EQ;\n        break;\n      case Token.SHEQ:\n        complementOperator = Token.SHNE;\n        break;\n      case Token.SHNE:\n        complementOperator = Token.SHEQ;\n        break;\n      // GT, GE, LT, LE are not handled in this because !(x<NaN) != x>=NaN.\n      default:\n        return false;\n    }",
    "right" : "switch (notChild.getType()) {\n      case Token.EQ:\n        complementOperator = Token.NE;\n        break;\n      case Token.NE:\n        complementOperator = Token.EQ;\n        break;\n      case Token.SHEQ:\n        complementOperator = Token.SHNE;\n        break;\n      case Token.SHNE:\n        complementOperator = Token.SHEQ;\n        break;\n      // GT, GE, LT, LE are not handled in this because !(x<NaN) != x>=NaN.\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[19251-19707]:SwitchStatement[19251-19707]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[19287-19301]:SwitchCase[19287-19301]"
  }, {
    "left" : "complementOperator = Token.NE;",
    "right" : "complementOperator = Token.NE;",
    "info" : "ExpressionStatement[19310-19340]:ExpressionStatement[19310-19340]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19349-19355]:BreakStatement[19349-19355]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[19362-19376]:SwitchCase[19362-19376]"
  }, {
    "left" : "complementOperator = Token.EQ;",
    "right" : "complementOperator = Token.EQ;",
    "info" : "ExpressionStatement[19385-19415]:ExpressionStatement[19385-19415]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19424-19430]:BreakStatement[19424-19430]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[19437-19453]:SwitchCase[19437-19453]"
  }, {
    "left" : "complementOperator = Token.SHNE;",
    "right" : "complementOperator = Token.SHNE;",
    "info" : "ExpressionStatement[19462-19494]:ExpressionStatement[19462-19494]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19503-19509]:BreakStatement[19503-19509]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[19516-19532]:SwitchCase[19516-19532]"
  }, {
    "left" : "complementOperator = Token.SHEQ;",
    "right" : "complementOperator = Token.SHEQ;",
    "info" : "ExpressionStatement[19541-19573]:ExpressionStatement[19541-19573]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19582-19588]:BreakStatement[19582-19588]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[19671-19679]:SwitchCase[19671-19679]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[19688-19701]:ReturnStatement[19688-19701]"
  }, {
    "left" : "Node newOperator = n.removeFirstChild();",
    "right" : "Node newOperator = n.removeFirstChild();",
    "info" : "VariableDeclarationStatement[19712-19752]:VariableDeclarationStatement[19712-19752]"
  }, {
    "left" : "newOperator.setType(complementOperator);",
    "right" : "newOperator.setType(complementOperator);",
    "info" : "ExpressionStatement[19757-19797]:ExpressionStatement[19757-19797]"
  }, {
    "left" : "parent.replaceChild(n, newOperator);",
    "right" : "parent.replaceChild(n, newOperator);",
    "info" : "ExpressionStatement[19802-19838]:ExpressionStatement[19802-19838]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[19843-19878]:ExpressionStatement[19843-19878]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[19883-19895]:ReturnStatement[19883-19895]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19960-19964]:PrimitiveType[19960-19964]"
  }, {
    "left" : "tryMinimizeIf",
    "right" : "tryMinimizeIf",
    "info" : "SimpleName[19965-19978]:SimpleName[19965-19978]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[19979-19994]:SingleVariableDeclaration[19979-19994]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[19996-20002]:SingleVariableDeclaration[19996-20002]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[20004-20015]:SingleVariableDeclaration[20004-20015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20017-26745]:Block[20017-26745]"
  }, {
    "left" : "Node cond = n.getFirstChild();",
    "right" : "Node cond = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[20023-20053]:VariableDeclarationStatement[20023-20053]"
  }, {
    "left" : "Node thenBranch = cond.getNext();",
    "right" : "Node thenBranch = cond.getNext();",
    "info" : "VariableDeclarationStatement[20058-20091]:VariableDeclarationStatement[20058-20091]"
  }, {
    "left" : "Node elseBranch = thenBranch.getNext();",
    "right" : "Node elseBranch = thenBranch.getNext();",
    "info" : "VariableDeclarationStatement[20096-20135]:VariableDeclarationStatement[20096-20135]"
  }, {
    "left" : "if (elseBranch == null)",
    "right" : "if (elseBranch == null)",
    "info" : "IfStatement[20141-21661]:IfStatement[20141-21661]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20165-21661]:Block[20165-21661]"
  }, {
    "left" : "if (isExpressBlock(thenBranch))",
    "right" : "if (isExpressBlock(thenBranch))",
    "info" : "IfStatement[20173-21640]:IfStatement[20173-21640]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20205-21640]:Block[20205-21640]"
  }, {
    "left" : "Node expr = getBlockExpression(thenBranch);",
    "right" : "Node expr = getBlockExpression(thenBranch);",
    "info" : "VariableDeclarationStatement[20215-20258]:VariableDeclarationStatement[20215-20258]"
  }, {
    "left" : "if (isPropertyAssignmentInExpression(t, expr))",
    "right" : "if (isPropertyAssignmentInExpression(t, expr))",
    "info" : "IfStatement[20267-20478]:IfStatement[20267-20478]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20314-20478]:Block[20314-20478]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[20461-20468]:ReturnStatement[20461-20468]"
  }, {
    "left" : "if (cond.getType() == Token.NOT)",
    "right" : "if (cond.getType() == Token.NOT)",
    "info" : "IfStatement[20488-21100]:IfStatement[20488-21100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20521-21100]:Block[20521-21100]"
  }, {
    "left" : "if (isLowerPrecedenceInExpression(t, cond, OR_PRECEDENCE) &&\n              isLowerPrecedenceInExpression(t, expr.getFirstChild(),\n                  OR_PRECEDENCE))",
    "right" : "if (isLowerPrecedenceInExpression(t, cond, OR_PRECEDENCE) &&\n              isLowerPrecedenceInExpression(t, expr.getFirstChild(),\n                  OR_PRECEDENCE))",
    "info" : "IfStatement[20572-20830]:IfStatement[20572-20830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20736-20830]:Block[20736-20830]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[20811-20818]:ReturnStatement[20811-20818]"
  }, {
    "left" : "Node or = new Node(Token.OR, cond.removeFirstChild(),\n              expr.removeFirstChild());",
    "right" : "Node or = new Node(Token.OR, cond.removeFirstChild(),\n              expr.removeFirstChild());",
    "info" : "VariableDeclarationStatement[20842-20935]:VariableDeclarationStatement[20842-20935]"
  }, {
    "left" : "Node newExpr = NodeUtil.newExpr(or);",
    "right" : "Node newExpr = NodeUtil.newExpr(or);",
    "info" : "VariableDeclarationStatement[20946-20982]:VariableDeclarationStatement[20946-20982]"
  }, {
    "left" : "parent.replaceChild(n, newExpr);",
    "right" : "parent.replaceChild(n, newExpr);",
    "info" : "ExpressionStatement[20993-21025]:ExpressionStatement[20993-21025]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[21036-21071]:ExpressionStatement[21036-21071]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[21083-21090]:ReturnStatement[21083-21090]"
  }, {
    "left" : "if (isLowerPrecedenceInExpression(t, cond, AND_PRECEDENCE) ||\n            isLowerPrecedenceInExpression(t, expr.getFirstChild(),\n                AND_PRECEDENCE))",
    "right" : "if (isLowerPrecedenceInExpression(t, cond, AND_PRECEDENCE) ||\n            isLowerPrecedenceInExpression(t, expr.getFirstChild(),\n                AND_PRECEDENCE))",
    "info" : "IfStatement[21146-21400]:IfStatement[21146-21400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21308-21400]:Block[21308-21400]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[21383-21390]:ReturnStatement[21383-21390]"
  }, {
    "left" : "n.removeChild(cond);",
    "right" : "n.removeChild(cond);",
    "info" : "ExpressionStatement[21410-21430]:ExpressionStatement[21410-21430]"
  }, {
    "left" : "Node and = new Node(Token.AND, cond, expr.removeFirstChild());",
    "right" : "Node and = new Node(Token.AND, cond, expr.removeFirstChild());",
    "info" : "VariableDeclarationStatement[21439-21501]:VariableDeclarationStatement[21439-21501]"
  }, {
    "left" : "Node newExpr = NodeUtil.newExpr(and);",
    "right" : "Node newExpr = NodeUtil.newExpr(and);",
    "info" : "VariableDeclarationStatement[21510-21547]:VariableDeclarationStatement[21510-21547]"
  }, {
    "left" : "parent.replaceChild(n, newExpr);",
    "right" : "parent.replaceChild(n, newExpr);",
    "info" : "ExpressionStatement[21556-21588]:ExpressionStatement[21556-21588]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[21597-21632]:ExpressionStatement[21597-21632]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[21648-21655]:ReturnStatement[21648-21655]"
  }, {
    "left" : "tryRemoveRepeatedStatements(t, n);",
    "right" : "tryRemoveRepeatedStatements(t, n);",
    "info" : "ExpressionStatement[21667-21701]:ExpressionStatement[21667-21701]"
  }, {
    "left" : "if (cond.getType() == Token.NOT && !consumesDanglingElse(elseBranch))",
    "right" : "if (cond.getType() == Token.NOT && !consumesDanglingElse(elseBranch))",
    "info" : "IfStatement[21821-22076]:IfStatement[21821-22076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21891-22076]:Block[21891-22076]"
  }, {
    "left" : "n.replaceChild(cond, cond.removeFirstChild());",
    "right" : "n.replaceChild(cond, cond.removeFirstChild());",
    "info" : "ExpressionStatement[21899-21945]:ExpressionStatement[21899-21945]"
  }, {
    "left" : "n.removeChild(thenBranch);",
    "right" : "n.removeChild(thenBranch);",
    "info" : "ExpressionStatement[21952-21978]:ExpressionStatement[21952-21978]"
  }, {
    "left" : "n.addChildToBack(thenBranch);",
    "right" : "n.addChildToBack(thenBranch);",
    "info" : "ExpressionStatement[21985-22014]:ExpressionStatement[21985-22014]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[22021-22056]:ExpressionStatement[22021-22056]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[22063-22070]:ReturnStatement[22063-22070]"
  }, {
    "left" : "if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch))",
    "right" : "if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch))",
    "info" : "IfStatement[22135-22838]:IfStatement[22135-22838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22209-22838]:Block[22209-22838]"
  }, {
    "left" : "Node thenExpr = getBlockReturnExpression(thenBranch);",
    "right" : "Node thenExpr = getBlockReturnExpression(thenBranch);",
    "info" : "VariableDeclarationStatement[22217-22270]:VariableDeclarationStatement[22217-22270]"
  }, {
    "left" : "Node elseExpr = getBlockReturnExpression(elseBranch);",
    "right" : "Node elseExpr = getBlockReturnExpression(elseBranch);",
    "info" : "VariableDeclarationStatement[22277-22330]:VariableDeclarationStatement[22277-22330]"
  }, {
    "left" : "n.removeChild(cond);",
    "right" : "n.removeChild(cond);",
    "info" : "ExpressionStatement[22337-22357]:ExpressionStatement[22337-22357]"
  }, {
    "left" : "thenExpr.detachFromParent();",
    "right" : "thenExpr.detachFromParent();",
    "info" : "ExpressionStatement[22364-22392]:ExpressionStatement[22364-22392]"
  }, {
    "left" : "elseExpr.detachFromParent();",
    "right" : "elseExpr.detachFromParent();",
    "info" : "ExpressionStatement[22399-22427]:ExpressionStatement[22399-22427]"
  }, {
    "left" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr);",
    "right" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr);",
    "info" : "VariableDeclarationStatement[22613-22676]:VariableDeclarationStatement[22613-22676]"
  }, {
    "left" : "Node returnNode = new Node(Token.RETURN, hookNode);",
    "right" : "Node returnNode = new Node(Token.RETURN, hookNode);",
    "info" : "VariableDeclarationStatement[22683-22734]:VariableDeclarationStatement[22683-22734]"
  }, {
    "left" : "parent.replaceChild(n, returnNode);",
    "right" : "parent.replaceChild(n, returnNode);",
    "info" : "ExpressionStatement[22741-22776]:ExpressionStatement[22741-22776]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[22783-22818]:ExpressionStatement[22783-22818]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[22825-22832]:ReturnStatement[22825-22832]"
  }, {
    "left" : "boolean thenBranchIsExpressionBlock = isExpressBlock(thenBranch);",
    "right" : "boolean thenBranchIsExpressionBlock = isExpressBlock(thenBranch);",
    "info" : "VariableDeclarationStatement[22844-22909]:VariableDeclarationStatement[22844-22909]"
  }, {
    "left" : "boolean elseBranchIsExpressionBlock = isExpressBlock(elseBranch);",
    "right" : "boolean elseBranchIsExpressionBlock = isExpressBlock(elseBranch);",
    "info" : "VariableDeclarationStatement[22914-22979]:VariableDeclarationStatement[22914-22979]"
  }, {
    "left" : "if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock)",
    "right" : "if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock)",
    "info" : "IfStatement[22985-24777]:IfStatement[22985-24777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23049-24777]:Block[23049-24777]"
  }, {
    "left" : "Node thenOp = getBlockExpression(thenBranch).getFirstChild();",
    "right" : "Node thenOp = getBlockExpression(thenBranch).getFirstChild();",
    "info" : "VariableDeclarationStatement[23057-23118]:VariableDeclarationStatement[23057-23118]"
  }, {
    "left" : "Node elseOp = getBlockExpression(elseBranch).getFirstChild();",
    "right" : "Node elseOp = getBlockExpression(elseBranch).getFirstChild();",
    "info" : "VariableDeclarationStatement[23125-23186]:VariableDeclarationStatement[23125-23186]"
  }, {
    "left" : "if (thenOp.getType() == elseOp.getType())",
    "right" : "if (thenOp.getType() == elseOp.getType())",
    "info" : "IfStatement[23193-24757]:IfStatement[23193-24757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23235-24757]:Block[23235-24757]"
  }, {
    "left" : "if (NodeUtil.isAssignmentOp(thenOp))",
    "right" : "if (NodeUtil.isAssignmentOp(thenOp))",
    "info" : "IfStatement[23287-24749]:IfStatement[23287-24749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23324-24339]:Block[23324-24339]"
  }, {
    "left" : "Node lhs = thenOp.getFirstChild();",
    "right" : "Node lhs = thenOp.getFirstChild();",
    "info" : "VariableDeclarationStatement[23336-23370]:VariableDeclarationStatement[23336-23370]"
  }, {
    "left" : "if (compiler.areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              !NodeUtil.mayEffectMutableState(lhs))",
    "right" : "if (compiler.areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              !NodeUtil.mayEffectMutableState(lhs))",
    "info" : "IfStatement[23381-24329]:IfStatement[23381-24329]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23752-24329]:Block[23752-24329]"
  }, {
    "left" : "n.removeChild(cond);",
    "right" : "n.removeChild(cond);",
    "info" : "ExpressionStatement[23767-23787]:ExpressionStatement[23767-23787]"
  }, {
    "left" : "Node assignName = thenOp.removeFirstChild();",
    "right" : "Node assignName = thenOp.removeFirstChild();",
    "info" : "VariableDeclarationStatement[23800-23844]:VariableDeclarationStatement[23800-23844]"
  }, {
    "left" : "Node thenExpr = thenOp.removeFirstChild();",
    "right" : "Node thenExpr = thenOp.removeFirstChild();",
    "info" : "VariableDeclarationStatement[23857-23899]:VariableDeclarationStatement[23857-23899]"
  }, {
    "left" : "Node elseExpr = elseOp.getLastChild();",
    "right" : "Node elseExpr = elseOp.getLastChild();",
    "info" : "VariableDeclarationStatement[23912-23950]:VariableDeclarationStatement[23912-23950]"
  }, {
    "left" : "elseOp.removeChild(elseExpr);",
    "right" : "elseOp.removeChild(elseExpr);",
    "info" : "ExpressionStatement[23963-23992]:ExpressionStatement[23963-23992]"
  }, {
    "left" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr,\n                elseExpr);",
    "right" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr,\n                elseExpr);",
    "info" : "VariableDeclarationStatement[24006-24085]:VariableDeclarationStatement[24006-24085]"
  }, {
    "left" : "Node assign = new Node(thenOp.getType(), assignName,\n                hookNode);",
    "right" : "Node assign = new Node(thenOp.getType(), assignName,\n                hookNode);",
    "info" : "VariableDeclarationStatement[24098-24177]:VariableDeclarationStatement[24098-24177]"
  }, {
    "left" : "Node expr = NodeUtil.newExpr(assign);",
    "right" : "Node expr = NodeUtil.newExpr(assign);",
    "info" : "VariableDeclarationStatement[24190-24227]:VariableDeclarationStatement[24190-24227]"
  }, {
    "left" : "parent.replaceChild(n, expr);",
    "right" : "parent.replaceChild(n, expr);",
    "info" : "ExpressionStatement[24240-24269]:ExpressionStatement[24240-24269]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[24282-24317]:ExpressionStatement[24282-24317]"
  }, {
    "left" : "if (NodeUtil.isCall(thenOp))",
    "right" : "if (NodeUtil.isCall(thenOp))",
    "info" : "IfStatement[24345-24749]:IfStatement[24345-24749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24374-24749]:Block[24374-24749]"
  }, {
    "left" : "n.removeChild(cond);",
    "right" : "n.removeChild(cond);",
    "info" : "ExpressionStatement[24439-24459]:ExpressionStatement[24439-24459]"
  }, {
    "left" : "thenOp.detachFromParent();",
    "right" : "thenOp.detachFromParent();",
    "info" : "ExpressionStatement[24470-24496]:ExpressionStatement[24470-24496]"
  }, {
    "left" : "elseOp.detachFromParent();",
    "right" : "elseOp.detachFromParent();",
    "info" : "ExpressionStatement[24507-24533]:ExpressionStatement[24507-24533]"
  }, {
    "left" : "Node hookNode = new Node(Token.HOOK, cond, thenOp, elseOp);",
    "right" : "Node hookNode = new Node(Token.HOOK, cond, thenOp, elseOp);",
    "info" : "VariableDeclarationStatement[24544-24603]:VariableDeclarationStatement[24544-24603]"
  }, {
    "left" : "Node expr = NodeUtil.newExpr(hookNode);",
    "right" : "Node expr = NodeUtil.newExpr(hookNode);",
    "info" : "VariableDeclarationStatement[24614-24653]:VariableDeclarationStatement[24614-24653]"
  }, {
    "left" : "parent.replaceChild(n, expr);",
    "right" : "parent.replaceChild(n, expr);",
    "info" : "ExpressionStatement[24664-24693]:ExpressionStatement[24664-24693]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[24704-24739]:ExpressionStatement[24704-24739]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[24764-24771]:ReturnStatement[24764-24771]"
  }, {
    "left" : "boolean thenBranchIsVar = isVarBlock(thenBranch);",
    "right" : "boolean thenBranchIsVar = isVarBlock(thenBranch);",
    "info" : "VariableDeclarationStatement[24783-24832]:VariableDeclarationStatement[24783-24832]"
  }, {
    "left" : "boolean elseBranchIsVar = isVarBlock(elseBranch);",
    "right" : "boolean elseBranchIsVar = isVarBlock(elseBranch);",
    "info" : "VariableDeclarationStatement[24837-24886]:VariableDeclarationStatement[24837-24886]"
  }, {
    "left" : "if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n        NodeUtil.isAssign(getBlockExpression(elseBranch).getFirstChild()))",
    "right" : "if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n        NodeUtil.isAssign(getBlockExpression(elseBranch).getFirstChild()))",
    "info" : "IfStatement[24938-26741]:IfStatement[24938-26741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25067-25860]:Block[25067-25860]"
  }, {
    "left" : "Node var = getBlockVar(thenBranch);",
    "right" : "Node var = getBlockVar(thenBranch);",
    "info" : "VariableDeclarationStatement[25076-25111]:VariableDeclarationStatement[25076-25111]"
  }, {
    "left" : "Node elseAssign = getBlockExpression(elseBranch).getFirstChild();",
    "right" : "Node elseAssign = getBlockExpression(elseBranch).getFirstChild();",
    "info" : "VariableDeclarationStatement[25118-25183]:VariableDeclarationStatement[25118-25183]"
  }, {
    "left" : "Node name1 = var.getFirstChild();",
    "right" : "Node name1 = var.getFirstChild();",
    "info" : "VariableDeclarationStatement[25191-25224]:VariableDeclarationStatement[25191-25224]"
  }, {
    "left" : "Node maybeName2 = elseAssign.getFirstChild();",
    "right" : "Node maybeName2 = elseAssign.getFirstChild();",
    "info" : "VariableDeclarationStatement[25231-25276]:VariableDeclarationStatement[25231-25276]"
  }, {
    "left" : "if (name1.hasChildren()\n          && maybeName2.getType() == Token.NAME\n          && name1.getString().equals(maybeName2.getString()))",
    "right" : "if (name1.hasChildren()\n          && maybeName2.getType() == Token.NAME\n          && name1.getString().equals(maybeName2.getString()))",
    "info" : "IfStatement[25284-25807]:IfStatement[25284-25807]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25419-25807]:Block[25419-25807]"
  }, {
    "left" : "Node thenExpr = name1.removeChildren();",
    "right" : "Node thenExpr = name1.removeChildren();",
    "info" : "VariableDeclarationStatement[25429-25468]:VariableDeclarationStatement[25429-25468]"
  }, {
    "left" : "Node elseExpr = elseAssign.getLastChild().detachFromParent();",
    "right" : "Node elseExpr = elseAssign.getLastChild().detachFromParent();",
    "info" : "VariableDeclarationStatement[25477-25538]:VariableDeclarationStatement[25477-25538]"
  }, {
    "left" : "cond.detachFromParent();",
    "right" : "cond.detachFromParent();",
    "info" : "ExpressionStatement[25547-25571]:ExpressionStatement[25547-25571]"
  }, {
    "left" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr);",
    "right" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr);",
    "info" : "VariableDeclarationStatement[25580-25643]:VariableDeclarationStatement[25580-25643]"
  }, {
    "left" : "var.detachFromParent();",
    "right" : "var.detachFromParent();",
    "info" : "ExpressionStatement[25652-25675]:ExpressionStatement[25652-25675]"
  }, {
    "left" : "name1.addChildrenToBack(hookNode);",
    "right" : "name1.addChildrenToBack(hookNode);",
    "info" : "ExpressionStatement[25684-25718]:ExpressionStatement[25684-25718]"
  }, {
    "left" : "parent.replaceChild(n, var);",
    "right" : "parent.replaceChild(n, var);",
    "info" : "ExpressionStatement[25727-25755]:ExpressionStatement[25727-25755]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[25764-25799]:ExpressionStatement[25764-25799]"
  }, {
    "left" : "if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n        NodeUtil.isAssign(getBlockExpression(thenBranch).getFirstChild()))",
    "right" : "if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n        NodeUtil.isAssign(getBlockExpression(thenBranch).getFirstChild()))",
    "info" : "IfStatement[25866-26741]:IfStatement[25866-26741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25995-26741]:Block[25995-26741]"
  }, {
    "left" : "Node var = getBlockVar(elseBranch);",
    "right" : "Node var = getBlockVar(elseBranch);",
    "info" : "VariableDeclarationStatement[26004-26039]:VariableDeclarationStatement[26004-26039]"
  }, {
    "left" : "Node thenAssign = getBlockExpression(thenBranch).getFirstChild();",
    "right" : "Node thenAssign = getBlockExpression(thenBranch).getFirstChild();",
    "info" : "VariableDeclarationStatement[26046-26111]:VariableDeclarationStatement[26046-26111]"
  }, {
    "left" : "Node maybeName1 = thenAssign.getFirstChild();",
    "right" : "Node maybeName1 = thenAssign.getFirstChild();",
    "info" : "VariableDeclarationStatement[26119-26164]:VariableDeclarationStatement[26119-26164]"
  }, {
    "left" : "Node name2 = var.getFirstChild();",
    "right" : "Node name2 = var.getFirstChild();",
    "info" : "VariableDeclarationStatement[26171-26204]:VariableDeclarationStatement[26171-26204]"
  }, {
    "left" : "if (name2.hasChildren()\n          && maybeName1.getType() == Token.NAME\n          && maybeName1.getString().equals(name2.getString()))",
    "right" : "if (name2.hasChildren()\n          && maybeName1.getType() == Token.NAME\n          && maybeName1.getString().equals(name2.getString()))",
    "info" : "IfStatement[26212-26735]:IfStatement[26212-26735]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26347-26735]:Block[26347-26735]"
  }, {
    "left" : "Node thenExpr = thenAssign.getLastChild().detachFromParent();",
    "right" : "Node thenExpr = thenAssign.getLastChild().detachFromParent();",
    "info" : "VariableDeclarationStatement[26357-26418]:VariableDeclarationStatement[26357-26418]"
  }, {
    "left" : "Node elseExpr = name2.removeChildren();",
    "right" : "Node elseExpr = name2.removeChildren();",
    "info" : "VariableDeclarationStatement[26427-26466]:VariableDeclarationStatement[26427-26466]"
  }, {
    "left" : "cond.detachFromParent();",
    "right" : "cond.detachFromParent();",
    "info" : "ExpressionStatement[26475-26499]:ExpressionStatement[26475-26499]"
  }, {
    "left" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr);",
    "right" : "Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr);",
    "info" : "VariableDeclarationStatement[26508-26571]:VariableDeclarationStatement[26508-26571]"
  }, {
    "left" : "var.detachFromParent();",
    "right" : "var.detachFromParent();",
    "info" : "ExpressionStatement[26580-26603]:ExpressionStatement[26580-26603]"
  }, {
    "left" : "name2.addChildrenToBack(hookNode);",
    "right" : "name2.addChildrenToBack(hookNode);",
    "info" : "ExpressionStatement[26612-26646]:ExpressionStatement[26612-26646]"
  }, {
    "left" : "parent.replaceChild(n, var);",
    "right" : "parent.replaceChild(n, var);",
    "info" : "ExpressionStatement[26655-26683]:ExpressionStatement[26655-26683]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[26692-26727]:ExpressionStatement[26692-26727]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27086-27093]:Modifier[27086-27093]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27094-27098]:PrimitiveType[27094-27098]"
  }, {
    "left" : "tryRemoveRepeatedStatements",
    "right" : "tryRemoveRepeatedStatements",
    "info" : "SimpleName[27099-27126]:SimpleName[27099-27126]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[27127-27142]:SingleVariableDeclaration[27127-27142]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[27144-27150]:SingleVariableDeclaration[27144-27150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27152-28050]:Block[27152-28050]"
  }, {
    "left" : "Preconditions.checkState(n.getType() == Token.IF);",
    "right" : "Preconditions.checkState(n.getType() == Token.IF);",
    "info" : "ExpressionStatement[27158-27208]:ExpressionStatement[27158-27208]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[27214-27242]:VariableDeclarationStatement[27214-27242]"
  }, {
    "left" : "if (!NodeUtil.isStatementBlock(parent))",
    "right" : "if (!NodeUtil.isStatementBlock(parent))",
    "info" : "IfStatement[27247-27415]:IfStatement[27247-27415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27287-27415]:Block[27287-27415]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[27402-27409]:ReturnStatement[27402-27409]"
  }, {
    "left" : "Node cond = n.getFirstChild();",
    "right" : "Node cond = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[27421-27451]:VariableDeclarationStatement[27421-27451]"
  }, {
    "left" : "Node trueBranch = cond.getNext();",
    "right" : "Node trueBranch = cond.getNext();",
    "info" : "VariableDeclarationStatement[27456-27489]:VariableDeclarationStatement[27456-27489]"
  }, {
    "left" : "Node falseBranch = trueBranch.getNext();",
    "right" : "Node falseBranch = trueBranch.getNext();",
    "info" : "VariableDeclarationStatement[27494-27534]:VariableDeclarationStatement[27494-27534]"
  }, {
    "left" : "Preconditions.checkNotNull(trueBranch);",
    "right" : "Preconditions.checkNotNull(trueBranch);",
    "info" : "ExpressionStatement[27539-27578]:ExpressionStatement[27539-27578]"
  }, {
    "left" : "Preconditions.checkNotNull(falseBranch);",
    "right" : "Preconditions.checkNotNull(falseBranch);",
    "info" : "ExpressionStatement[27583-27623]:ExpressionStatement[27583-27623]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[27629-28046]:WhileStatement[27629-28046]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27642-28046]:Block[27642-28046]"
  }, {
    "left" : "Node lastTrue = trueBranch.getLastChild();",
    "right" : "Node lastTrue = trueBranch.getLastChild();",
    "info" : "VariableDeclarationStatement[27650-27692]:VariableDeclarationStatement[27650-27692]"
  }, {
    "left" : "Node lastFalse = falseBranch.getLastChild();",
    "right" : "Node lastFalse = falseBranch.getLastChild();",
    "info" : "VariableDeclarationStatement[27699-27743]:VariableDeclarationStatement[27699-27743]"
  }, {
    "left" : "if (lastTrue == null || lastFalse == null\n          || !compiler.areNodesEqualForInlining(lastTrue, lastFalse))",
    "right" : "if (lastTrue == null || lastFalse == null\n          || !compiler.areNodesEqualForInlining(lastTrue, lastFalse))",
    "info" : "IfStatement[27750-27886]:IfStatement[27750-27886]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27862-27886]:Block[27862-27886]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[27872-27878]:BreakStatement[27872-27878]"
  }, {
    "left" : "lastTrue.detachFromParent();",
    "right" : "lastTrue.detachFromParent();",
    "info" : "ExpressionStatement[27893-27921]:ExpressionStatement[27893-27921]"
  }, {
    "left" : "lastFalse.detachFromParent();",
    "right" : "lastFalse.detachFromParent();",
    "info" : "ExpressionStatement[27928-27957]:ExpressionStatement[27928-27957]"
  }, {
    "left" : "parent.addChildAfter(lastTrue, n);",
    "right" : "parent.addChildAfter(lastTrue, n);",
    "info" : "ExpressionStatement[27964-27998]:ExpressionStatement[27964-27998]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[28005-28040]:ExpressionStatement[28005-28040]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[28136-28143]:Modifier[28136-28143]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28144-28148]:PrimitiveType[28144-28148]"
  }, {
    "left" : "tryReduceReturn",
    "right" : "tryReduceReturn",
    "info" : "SimpleName[28149-28164]:SimpleName[28149-28164]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[28165-28180]:SingleVariableDeclaration[28165-28180]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[28182-28188]:SingleVariableDeclaration[28182-28188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28190-28770]:Block[28190-28770]"
  }, {
    "left" : "Node result = n.getFirstChild();",
    "right" : "Node result = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[28196-28228]:VariableDeclarationStatement[28196-28228]"
  }, {
    "left" : "if (result != null)",
    "right" : "if (result != null)",
    "info" : "IfStatement[28233-28766]:IfStatement[28233-28766]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28253-28766]:Block[28253-28766]"
  }, {
    "left" : "switch (result.getType()) {\n        case Token.VOID:\n          Node operand = result.getFirstChild();\n          if (!NodeUtil.mayHaveSideEffects(operand)) {\n            n.removeFirstChild();\n            t.getCompiler().reportCodeChange();\n          }\n          return;\n        case Token.NAME:\n          String name = result.getString();\n          if (name.equals(\"undefined\")) {\n            n.removeFirstChild();\n            t.getCompiler().reportCodeChange();\n          }\n          return;\n      }",
    "right" : "switch (result.getType()) {\n        case Token.VOID:\n          Node operand = result.getFirstChild();\n          if (!NodeUtil.mayHaveSideEffects(operand)) {\n            n.removeFirstChild();\n            t.getCompiler().reportCodeChange();\n          }\n          return;\n        case Token.NAME:\n          String name = result.getString();\n          if (name.equals(\"undefined\")) {\n            n.removeFirstChild();\n            t.getCompiler().reportCodeChange();\n          }\n          return;\n      }",
    "info" : "SwitchStatement[28261-28760]:SwitchStatement[28261-28760]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[28297-28313]:SwitchCase[28297-28313]"
  }, {
    "left" : "Node operand = result.getFirstChild();",
    "right" : "Node operand = result.getFirstChild();",
    "info" : "VariableDeclarationStatement[28324-28362]:VariableDeclarationStatement[28324-28362]"
  }, {
    "left" : "if (!NodeUtil.mayHaveSideEffects(operand))",
    "right" : "if (!NodeUtil.mayHaveSideEffects(operand))",
    "info" : "IfStatement[28373-28511]:IfStatement[28373-28511]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28416-28511]:Block[28416-28511]"
  }, {
    "left" : "n.removeFirstChild();",
    "right" : "n.removeFirstChild();",
    "info" : "ExpressionStatement[28430-28451]:ExpressionStatement[28430-28451]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[28464-28499]:ExpressionStatement[28464-28499]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[28522-28529]:ReturnStatement[28522-28529]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[28538-28554]:SwitchCase[28538-28554]"
  }, {
    "left" : "String name = result.getString();",
    "right" : "String name = result.getString();",
    "info" : "VariableDeclarationStatement[28565-28598]:VariableDeclarationStatement[28565-28598]"
  }, {
    "left" : "if (name.equals(\"undefined\"))",
    "right" : "if (name.equals(\"undefined\"))",
    "info" : "IfStatement[28609-28734]:IfStatement[28609-28734]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28639-28734]:Block[28639-28734]"
  }, {
    "left" : "n.removeFirstChild();",
    "right" : "n.removeFirstChild();",
    "info" : "ExpressionStatement[28653-28674]:ExpressionStatement[28653-28674]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[28687-28722]:ExpressionStatement[28687-28722]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[28745-28752]:ReturnStatement[28745-28752]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[28842-28849]:Modifier[28842-28849]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[28850-28857]:PrimitiveType[28850-28857]"
  }, {
    "left" : "isPropertyAssignmentInExpression",
    "right" : "isPropertyAssignmentInExpression",
    "info" : "SimpleName[28858-28890]:SimpleName[28858-28890]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[28891-28906]:SingleVariableDeclaration[28891-28906]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[28908-28914]:SingleVariableDeclaration[28908-28914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28916-29253]:Block[28916-29253]"
  }, {
    "left" : "final boolean[] found = { false };",
    "right" : "final boolean[] found = { false };",
    "info" : "VariableDeclarationStatement[28922-28956]:VariableDeclarationStatement[28922-28956]"
  }, {
    "left" : "new NodeTraversal(t.getCompiler(), new AbstractShallowCallback() {\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        found[0] |= (n.getType() == Token.GETPROP &&\n                     parent.getType() == Token.ASSIGN);\n      }\n    }).traverse(n);",
    "right" : "new NodeTraversal(t.getCompiler(), new AbstractShallowCallback() {\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        found[0] |= (n.getType() == Token.GETPROP &&\n                     parent.getType() == Token.ASSIGN);\n      }\n    }).traverse(n);",
    "info" : "ExpressionStatement[28961-29228]:ExpressionStatement[28961-29228]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29034-29040]:Modifier[29034-29040]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29041-29045]:PrimitiveType[29041-29045]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[29046-29051]:SimpleName[29046-29051]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[29052-29067]:SingleVariableDeclaration[29052-29067]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[29069-29075]:SingleVariableDeclaration[29069-29075]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[29077-29088]:SingleVariableDeclaration[29077-29088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29090-29208]:Block[29090-29208]"
  }, {
    "left" : "found[0] |= (n.getType() == Token.GETPROP &&\n                     parent.getType() == Token.ASSIGN);",
    "right" : "found[0] |= (n.getType() == Token.GETPROP &&\n                     parent.getType() == Token.ASSIGN);",
    "info" : "ExpressionStatement[29100-29200]:ExpressionStatement[29100-29200]"
  }, {
    "left" : "return found[0];",
    "right" : "return found[0];",
    "info" : "ReturnStatement[29233-29249]:ReturnStatement[29233-29249]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29360-29367]:Modifier[29360-29367]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29368-29375]:PrimitiveType[29368-29375]"
  }, {
    "left" : "isLowerPrecedenceInExpression",
    "right" : "isLowerPrecedenceInExpression",
    "info" : "SimpleName[29376-29405]:SimpleName[29376-29405]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[29406-29421]:SingleVariableDeclaration[29406-29421]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[29423-29429]:SingleVariableDeclaration[29423-29429]"
  }, {
    "left" : "final int precedence",
    "right" : "final int precedence",
    "info" : "SingleVariableDeclaration[29437-29457]:SingleVariableDeclaration[29437-29457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29459-29754]:Block[29459-29754]"
  }, {
    "left" : "final boolean[] lower = { false };",
    "right" : "final boolean[] lower = { false };",
    "info" : "VariableDeclarationStatement[29465-29499]:VariableDeclarationStatement[29465-29499]"
  }, {
    "left" : "new NodeTraversal(t.getCompiler(), new AbstractShallowCallback() {\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        lower[0] |= NodeUtil.precedence(n.getType()) < precedence;\n      }\n    }).traverse(n);",
    "right" : "new NodeTraversal(t.getCompiler(), new AbstractShallowCallback() {\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        lower[0] |= NodeUtil.precedence(n.getType()) < precedence;\n      }\n    }).traverse(n);",
    "info" : "ExpressionStatement[29504-29729]:ExpressionStatement[29504-29729]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29577-29583]:Modifier[29577-29583]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29584-29588]:PrimitiveType[29584-29588]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[29589-29594]:SimpleName[29589-29594]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[29595-29610]:SingleVariableDeclaration[29595-29610]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[29612-29618]:SingleVariableDeclaration[29612-29618]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[29620-29631]:SingleVariableDeclaration[29620-29631]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29633-29709]:Block[29633-29709]"
  }, {
    "left" : "lower[0] |= NodeUtil.precedence(n.getType()) < precedence;",
    "right" : "lower[0] |= NodeUtil.precedence(n.getType()) < precedence;",
    "info" : "ExpressionStatement[29643-29701]:ExpressionStatement[29643-29701]"
  }, {
    "left" : "return lower[0];",
    "right" : "return lower[0];",
    "info" : "ReturnStatement[29734-29750]:ReturnStatement[29734-29750]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29802-29806]:PrimitiveType[29802-29806]"
  }, {
    "left" : "tryFoldAndOr",
    "right" : "tryFoldAndOr",
    "info" : "SimpleName[29807-29819]:SimpleName[29807-29819]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[29820-29835]:SingleVariableDeclaration[29820-29835]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[29837-29843]:SingleVariableDeclaration[29837-29843]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[29845-29854]:SingleVariableDeclaration[29845-29854]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[29856-29866]:SingleVariableDeclaration[29856-29866]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[29888-29899]:SingleVariableDeclaration[29888-29899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29901-31930]:Block[29901-31930]"
  }, {
    "left" : "Node result = null;",
    "right" : "Node result = null;",
    "info" : "VariableDeclarationStatement[29907-29926]:VariableDeclarationStatement[29907-29926]"
  }, {
    "left" : "int type = n.getType();",
    "right" : "int type = n.getType();",
    "info" : "VariableDeclarationStatement[29932-29955]:VariableDeclarationStatement[29932-29955]"
  }, {
    "left" : "if (NodeUtil.isLiteralValue(left))",
    "right" : "if (NodeUtil.isLiteralValue(left))",
    "info" : "IfStatement[29960-31601]:IfStatement[29960-31601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29995-30344]:Block[29995-30344]"
  }, {
    "left" : "boolean lval = NodeUtil.getBooleanValue(left);",
    "right" : "boolean lval = NodeUtil.getBooleanValue(left);",
    "info" : "VariableDeclarationStatement[30003-30049]:VariableDeclarationStatement[30003-30049]"
  }, {
    "left" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
    "right" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
    "info" : "IfStatement[30139-30338]:IfStatement[30139-30338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30209-30242]:Block[30209-30242]"
  }, {
    "left" : "result = left;",
    "right" : "result = left;",
    "info" : "ExpressionStatement[30219-30233]:ExpressionStatement[30219-30233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30248-30338]:Block[30248-30338]"
  }, {
    "left" : "result = right;",
    "right" : "result = right;",
    "info" : "ExpressionStatement[30315-30330]:ExpressionStatement[30315-30330]"
  }, {
    "left" : "if (NodeUtil.isLiteralValue(right))",
    "right" : "if (NodeUtil.isLiteralValue(right))",
    "info" : "IfStatement[30350-31601]:IfStatement[30350-31601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30386-31601]:Block[30386-31601]"
  }, {
    "left" : "int pt = parent.getType();",
    "right" : "int pt = parent.getType();",
    "info" : "VariableDeclarationStatement[30901-30927]:VariableDeclarationStatement[30901-30927]"
  }, {
    "left" : "if (pt == Token.IF || pt == Token.WHILE || pt == Token.DO ||\n          (pt == Token.FOR && NodeUtil.getConditionExpression(parent) == n) ||\n          (pt == Token.HOOK && parent.getFirstChild() == n))",
    "right" : "if (pt == Token.IF || pt == Token.WHILE || pt == Token.DO ||\n          (pt == Token.FOR && NodeUtil.getConditionExpression(parent) == n) ||\n          (pt == Token.HOOK && parent.getFirstChild() == n))",
    "info" : "IfStatement[30934-31595]:IfStatement[30934-31595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31135-31595]:Block[31135-31595]"
  }, {
    "left" : "boolean rval = NodeUtil.getBooleanValue(right);",
    "right" : "boolean rval = NodeUtil.getBooleanValue(right);",
    "info" : "VariableDeclarationStatement[31145-31192]:VariableDeclarationStatement[31145-31192]"
  }, {
    "left" : "if (type == Token.OR && !rval ||\n            type == Token.AND && rval)",
    "right" : "if (type == Token.OR && !rval ||\n            type == Token.AND && rval)",
    "info" : "IfStatement[31259-31587]:IfStatement[31259-31587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31331-31367]:Block[31331-31367]"
  }, {
    "left" : "result = left;",
    "right" : "result = left;",
    "info" : "ExpressionStatement[31343-31357]:ExpressionStatement[31343-31357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31373-31587]:Block[31373-31587]"
  }, {
    "left" : "if (!NodeUtil.mayHaveSideEffects(left))",
    "right" : "if (!NodeUtil.mayHaveSideEffects(left))",
    "info" : "IfStatement[31496-31577]:IfStatement[31496-31577]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31536-31577]:Block[31536-31577]"
  }, {
    "left" : "result = right;",
    "right" : "result = right;",
    "info" : "ExpressionStatement[31550-31565]:ExpressionStatement[31550-31565]"
  }, {
    "left" : "if (result != null)",
    "right" : "if (result != null)",
    "info" : "IfStatement[31772-31926]:IfStatement[31772-31926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31792-31926]:Block[31792-31926]"
  }, {
    "left" : "n.removeChild(result);",
    "right" : "n.removeChild(result);",
    "info" : "ExpressionStatement[31818-31840]:ExpressionStatement[31818-31840]"
  }, {
    "left" : "parent.replaceChild(n, result);",
    "right" : "parent.replaceChild(n, result);",
    "info" : "ExpressionStatement[31847-31878]:ExpressionStatement[31847-31878]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[31885-31920]:ExpressionStatement[31885-31920]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[32468-32472]:PrimitiveType[32468-32472]"
  }, {
    "left" : "tryFoldLeftChildAdd",
    "right" : "tryFoldLeftChildAdd",
    "info" : "SimpleName[32473-32492]:SimpleName[32473-32492]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[32493-32508]:SingleVariableDeclaration[32493-32508]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[32510-32516]:SingleVariableDeclaration[32510-32516]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[32518-32527]:SingleVariableDeclaration[32518-32527]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[32529-32539]:SingleVariableDeclaration[32529-32539]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[32568-32579]:SingleVariableDeclaration[32568-32579]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32581-33454]:Block[32581-33454]"
  }, {
    "left" : "if (NodeUtil.isLiteralValue(right) &&\n        left.getType() == Token.ADD &&\n        left.getChildCount() == 2)",
    "right" : "if (NodeUtil.isLiteralValue(right) &&\n        left.getType() == Token.ADD &&\n        left.getChildCount() == 2)",
    "info" : "IfStatement[32588-33450]:IfStatement[32588-33450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32700-33450]:Block[32700-33450]"
  }, {
    "left" : "Node ll = left.getFirstChild();",
    "right" : "Node ll = left.getFirstChild();",
    "info" : "VariableDeclarationStatement[32709-32740]:VariableDeclarationStatement[32709-32740]"
  }, {
    "left" : "Node lr = ll.getNext();",
    "right" : "Node lr = ll.getNext();",
    "info" : "VariableDeclarationStatement[32747-32770]:VariableDeclarationStatement[32747-32770]"
  }, {
    "left" : "if (lr.getType() != Token.STRING)",
    "right" : "if (lr.getType() != Token.STRING)",
    "info" : "IfStatement[33004-33053]:IfStatement[33004-33053]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[33046-33053]:ReturnStatement[33046-33053]"
  }, {
    "left" : "String leftString = NodeUtil.getStringValue(lr);",
    "right" : "String leftString = NodeUtil.getStringValue(lr);",
    "info" : "VariableDeclarationStatement[33061-33109]:VariableDeclarationStatement[33061-33109]"
  }, {
    "left" : "String rightString = NodeUtil.getStringValue(right);",
    "right" : "String rightString = NodeUtil.getStringValue(right);",
    "info" : "VariableDeclarationStatement[33116-33168]:VariableDeclarationStatement[33116-33168]"
  }, {
    "left" : "if (leftString != null && rightString != null)",
    "right" : "if (leftString != null && rightString != null)",
    "info" : "IfStatement[33175-33444]:IfStatement[33175-33444]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33222-33444]:Block[33222-33444]"
  }, {
    "left" : "left.removeChild(ll);",
    "right" : "left.removeChild(ll);",
    "info" : "ExpressionStatement[33232-33253]:ExpressionStatement[33232-33253]"
  }, {
    "left" : "String result = leftString + rightString;",
    "right" : "String result = leftString + rightString;",
    "info" : "VariableDeclarationStatement[33262-33303]:VariableDeclarationStatement[33262-33303]"
  }, {
    "left" : "n.replaceChild(left, ll);",
    "right" : "n.replaceChild(left, ll);",
    "info" : "ExpressionStatement[33312-33337]:ExpressionStatement[33312-33337]"
  }, {
    "left" : "n.replaceChild(right, Node.newString(result));",
    "right" : "n.replaceChild(right, Node.newString(result));",
    "info" : "ExpressionStatement[33346-33392]:ExpressionStatement[33346-33392]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[33401-33436]:ExpressionStatement[33401-33436]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[33498-33502]:PrimitiveType[33498-33502]"
  }, {
    "left" : "tryFoldAdd",
    "right" : "tryFoldAdd",
    "info" : "SimpleName[33503-33513]:SimpleName[33503-33513]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[33514-33529]:SingleVariableDeclaration[33514-33529]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[33531-33537]:SingleVariableDeclaration[33531-33537]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[33539-33548]:SingleVariableDeclaration[33539-33548]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[33550-33560]:SingleVariableDeclaration[33550-33560]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[33580-33591]:SingleVariableDeclaration[33580-33591]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33593-34102]:Block[33593-34102]"
  }, {
    "left" : "if (left.getType() == Token.STRING ||\n        right.getType() == Token.STRING)",
    "right" : "if (left.getType() == Token.STRING ||\n        right.getType() == Token.STRING)",
    "info" : "IfStatement[33599-34098]:IfStatement[33599-34098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33678-34005]:Block[33678-34005]"
  }, {
    "left" : "String leftString = NodeUtil.getStringValue(left);",
    "right" : "String leftString = NodeUtil.getStringValue(left);",
    "info" : "VariableDeclarationStatement[33709-33759]:VariableDeclarationStatement[33709-33759]"
  }, {
    "left" : "String rightString = NodeUtil.getStringValue(right);",
    "right" : "String rightString = NodeUtil.getStringValue(right);",
    "info" : "VariableDeclarationStatement[33766-33818]:VariableDeclarationStatement[33766-33818]"
  }, {
    "left" : "if (leftString != null && rightString != null)",
    "right" : "if (leftString != null && rightString != null)",
    "info" : "IfStatement[33825-33999]:IfStatement[33825-33999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33872-33999]:Block[33872-33999]"
  }, {
    "left" : "parent.replaceChild(n, Node.newString(leftString + rightString));",
    "right" : "parent.replaceChild(n, Node.newString(leftString + rightString));",
    "info" : "ExpressionStatement[33882-33947]:ExpressionStatement[33882-33947]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[33956-33991]:ExpressionStatement[33956-33991]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34011-34098]:Block[34011-34098]"
  }, {
    "left" : "tryFoldArithmetic(t, n, left, right, parent);",
    "right" : "tryFoldArithmetic(t, n, left, right, parent);",
    "info" : "ExpressionStatement[34047-34092]:ExpressionStatement[34047-34092]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[34163-34167]:PrimitiveType[34163-34167]"
  }, {
    "left" : "tryFoldArithmetic",
    "right" : "tryFoldArithmetic",
    "info" : "SimpleName[34168-34185]:SimpleName[34168-34185]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[34186-34201]:SingleVariableDeclaration[34186-34201]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[34203-34209]:SingleVariableDeclaration[34203-34209]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[34211-34220]:SingleVariableDeclaration[34211-34220]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[34222-34232]:SingleVariableDeclaration[34222-34232]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[34259-34270]:SingleVariableDeclaration[34259-34270]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34272-35285]:Block[34272-35285]"
  }, {
    "left" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
    "right" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
    "info" : "IfStatement[34279-35281]:IfStatement[34279-35281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34358-35281]:Block[34358-35281]"
  }, {
    "left" : "double result;",
    "right" : "double result;",
    "info" : "VariableDeclarationStatement[34366-34380]:VariableDeclarationStatement[34366-34380]"
  }, {
    "left" : "double lval = left.getDouble();",
    "right" : "double lval = left.getDouble();",
    "info" : "VariableDeclarationStatement[34387-34418]:VariableDeclarationStatement[34387-34418]"
  }, {
    "left" : "double rval = right.getDouble();",
    "right" : "double rval = right.getDouble();",
    "info" : "VariableDeclarationStatement[34425-34457]:VariableDeclarationStatement[34425-34457]"
  }, {
    "left" : "switch (n.getType()) {\n        case Token.ADD:\n          result = lval + rval;\n          break;\n        case Token.SUB:\n          result = lval - rval;\n          break;\n        case Token.MUL:\n          result = lval * rval;\n          break;\n        case Token.DIV:\n          if (rval == 0) {\n            error(t, DIVIDE_BY_0_ERROR, right);\n            return;\n          }\n          result = lval / rval;\n          break;\n        default:\n          throw new Error(\"Unknown arithmetic operator\");\n      }",
    "right" : "switch (n.getType()) {\n        case Token.ADD:\n          result = lval + rval;\n          break;\n        case Token.SUB:\n          result = lval - rval;\n          break;\n        case Token.MUL:\n          result = lval * rval;\n          break;\n        case Token.DIV:\n          if (rval == 0) {\n            error(t, DIVIDE_BY_0_ERROR, right);\n            return;\n          }\n          result = lval / rval;\n          break;\n        default:\n          throw new Error(\"Unknown arithmetic operator\");\n      }",
    "info" : "SwitchStatement[34465-34969]:SwitchStatement[34465-34969]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[34496-34511]:SwitchCase[34496-34511]"
  }, {
    "left" : "result = lval + rval;",
    "right" : "result = lval + rval;",
    "info" : "ExpressionStatement[34522-34543]:ExpressionStatement[34522-34543]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34554-34560]:BreakStatement[34554-34560]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[34569-34584]:SwitchCase[34569-34584]"
  }, {
    "left" : "result = lval - rval;",
    "right" : "result = lval - rval;",
    "info" : "ExpressionStatement[34595-34616]:ExpressionStatement[34595-34616]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34627-34633]:BreakStatement[34627-34633]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[34642-34657]:SwitchCase[34642-34657]"
  }, {
    "left" : "result = lval * rval;",
    "right" : "result = lval * rval;",
    "info" : "ExpressionStatement[34668-34689]:ExpressionStatement[34668-34689]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34700-34706]:BreakStatement[34700-34706]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[34715-34730]:SwitchCase[34715-34730]"
  }, {
    "left" : "if (rval == 0)",
    "right" : "if (rval == 0)",
    "info" : "IfStatement[34741-34837]:IfStatement[34741-34837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34756-34837]:Block[34756-34837]"
  }, {
    "left" : "error(t, DIVIDE_BY_0_ERROR, right);",
    "right" : "error(t, DIVIDE_BY_0_ERROR, right);",
    "info" : "ExpressionStatement[34770-34805]:ExpressionStatement[34770-34805]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[34818-34825]:ReturnStatement[34818-34825]"
  }, {
    "left" : "result = lval / rval;",
    "right" : "result = lval / rval;",
    "info" : "ExpressionStatement[34848-34869]:ExpressionStatement[34848-34869]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34880-34886]:BreakStatement[34880-34886]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[34895-34903]:SwitchCase[34895-34903]"
  }, {
    "left" : "throw new Error(\"Unknown arithmetic operator\");",
    "right" : "throw new Error(\"Unknown arithmetic operator\");",
    "info" : "ThrowStatement[34914-34961]:ThrowStatement[34914-34961]"
  }, {
    "left" : "if (String.valueOf(result).length() <=\n          String.valueOf(lval).length() + String.valueOf(rval).length() + 1)",
    "right" : "if (String.valueOf(result).length() <=\n          String.valueOf(lval).length() + String.valueOf(rval).length() + 1)",
    "info" : "IfStatement[35051-35276]:IfStatement[35051-35276]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35167-35276]:Block[35167-35276]"
  }, {
    "left" : "parent.replaceChild(n, Node.newNumber(result));",
    "right" : "parent.replaceChild(n, Node.newNumber(result));",
    "info" : "ExpressionStatement[35177-35224]:ExpressionStatement[35177-35224]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[35233-35268]:ExpressionStatement[35233-35268]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[35346-35350]:PrimitiveType[35346-35350]"
  }, {
    "left" : "tryFoldBitAndOr",
    "right" : "tryFoldBitAndOr",
    "info" : "SimpleName[35351-35366]:SimpleName[35351-35366]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[35367-35382]:SingleVariableDeclaration[35367-35382]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[35384-35390]:SingleVariableDeclaration[35384-35390]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[35392-35401]:SingleVariableDeclaration[35392-35401]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[35403-35413]:SingleVariableDeclaration[35403-35413]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[35438-35449]:SingleVariableDeclaration[35438-35449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35451-36571]:Block[35451-36571]"
  }, {
    "left" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
    "right" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
    "info" : "IfStatement[35458-36567]:IfStatement[35458-36567]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35537-36567]:Block[35537-36567]"
  }, {
    "left" : "double result;",
    "right" : "double result;",
    "info" : "VariableDeclarationStatement[35545-35559]:VariableDeclarationStatement[35545-35559]"
  }, {
    "left" : "double lval = left.getDouble();",
    "right" : "double lval = left.getDouble();",
    "info" : "VariableDeclarationStatement[35566-35597]:VariableDeclarationStatement[35566-35597]"
  }, {
    "left" : "double rval = right.getDouble();",
    "right" : "double rval = right.getDouble();",
    "info" : "VariableDeclarationStatement[35604-35636]:VariableDeclarationStatement[35604-35636]"
  }, {
    "left" : "if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE ||\n          rval < Integer.MIN_VALUE || rval > Integer.MAX_VALUE)",
    "right" : "if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE ||\n          rval < Integer.MIN_VALUE || rval > Integer.MAX_VALUE)",
    "info" : "IfStatement[35759-35983]:IfStatement[35759-35983]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35883-35983]:Block[35883-35983]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[35968-35975]:ReturnStatement[35968-35975]"
  }, {
    "left" : "int lvalInt = (int) lval;",
    "right" : "int lvalInt = (int) lval;",
    "info" : "VariableDeclarationStatement[36028-36053]:VariableDeclarationStatement[36028-36053]"
  }, {
    "left" : "if (lvalInt != lval)",
    "right" : "if (lvalInt != lval)",
    "info" : "IfStatement[36060-36106]:IfStatement[36060-36106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36081-36106]:Block[36081-36106]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[36091-36098]:ReturnStatement[36091-36098]"
  }, {
    "left" : "int rvalInt = (int) rval;",
    "right" : "int rvalInt = (int) rval;",
    "info" : "VariableDeclarationStatement[36114-36139]:VariableDeclarationStatement[36114-36139]"
  }, {
    "left" : "if (rvalInt != rval)",
    "right" : "if (rvalInt != rval)",
    "info" : "IfStatement[36146-36192]:IfStatement[36146-36192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36167-36192]:Block[36167-36192]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[36177-36184]:ReturnStatement[36177-36184]"
  }, {
    "left" : "switch (n.getType()) {\n        case Token.BITAND:\n          result = lvalInt & rvalInt;\n          break;\n        case Token.BITOR:\n          result = lvalInt | rvalInt;\n          break;\n        default:\n          throw new Error(\"Unknown bitwise operator\");\n      }",
    "right" : "switch (n.getType()) {\n        case Token.BITAND:\n          result = lvalInt & rvalInt;\n          break;\n        case Token.BITOR:\n          result = lvalInt | rvalInt;\n          break;\n        default:\n          throw new Error(\"Unknown bitwise operator\");\n      }",
    "info" : "SwitchStatement[36200-36465]:SwitchStatement[36200-36465]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[36231-36249]:SwitchCase[36231-36249]"
  }, {
    "left" : "result = lvalInt & rvalInt;",
    "right" : "result = lvalInt & rvalInt;",
    "info" : "ExpressionStatement[36260-36287]:ExpressionStatement[36260-36287]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[36298-36304]:BreakStatement[36298-36304]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[36313-36330]:SwitchCase[36313-36330]"
  }, {
    "left" : "result = lvalInt | rvalInt;",
    "right" : "result = lvalInt | rvalInt;",
    "info" : "ExpressionStatement[36341-36368]:ExpressionStatement[36341-36368]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[36379-36385]:BreakStatement[36379-36385]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[36394-36402]:SwitchCase[36394-36402]"
  }, {
    "left" : "throw new Error(\"Unknown bitwise operator\");",
    "right" : "throw new Error(\"Unknown bitwise operator\");",
    "info" : "ThrowStatement[36413-36457]:ThrowStatement[36413-36457]"
  }, {
    "left" : "parent.replaceChild(n, Node.newNumber(result));",
    "right" : "parent.replaceChild(n, Node.newNumber(result));",
    "info" : "ExpressionStatement[36472-36519]:ExpressionStatement[36472-36519]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[36526-36561]:ExpressionStatement[36526-36561]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36621-36625]:PrimitiveType[36621-36625]"
  }, {
    "left" : "tryFoldShift",
    "right" : "tryFoldShift",
    "info" : "SimpleName[36626-36638]:SimpleName[36626-36638]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[36639-36654]:SingleVariableDeclaration[36639-36654]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[36656-36662]:SingleVariableDeclaration[36656-36662]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[36664-36673]:SingleVariableDeclaration[36664-36673]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[36675-36685]:SingleVariableDeclaration[36675-36685]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[36707-36718]:SingleVariableDeclaration[36707-36718]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36720-38268]:Block[36720-38268]"
  }, {
    "left" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
    "right" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
    "info" : "IfStatement[36727-38264]:IfStatement[36727-38264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36806-38264]:Block[36806-38264]"
  }, {
    "left" : "double result;",
    "right" : "double result;",
    "info" : "VariableDeclarationStatement[36815-36829]:VariableDeclarationStatement[36815-36829]"
  }, {
    "left" : "double lval = left.getDouble();",
    "right" : "double lval = left.getDouble();",
    "info" : "VariableDeclarationStatement[36836-36867]:VariableDeclarationStatement[36836-36867]"
  }, {
    "left" : "double rval = right.getDouble();",
    "right" : "double rval = right.getDouble();",
    "info" : "VariableDeclarationStatement[36874-36906]:VariableDeclarationStatement[36874-36906]"
  }, {
    "left" : "if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))",
    "right" : "if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))",
    "info" : "IfStatement[37059-37201]:IfStatement[37059-37201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37122-37201]:Block[37122-37201]"
  }, {
    "left" : "error(t, BITWISE_OPERAND_OUT_OF_RANGE, left);",
    "right" : "error(t, BITWISE_OPERAND_OUT_OF_RANGE, left);",
    "info" : "ExpressionStatement[37132-37177]:ExpressionStatement[37132-37177]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[37186-37193]:ReturnStatement[37186-37193]"
  }, {
    "left" : "if (!(rval >= 0 && rval < 32))",
    "right" : "if (!(rval >= 0 && rval < 32))",
    "info" : "IfStatement[37332-37441]:IfStatement[37332-37441]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37363-37441]:Block[37363-37441]"
  }, {
    "left" : "error(t, SHIFT_AMOUNT_OUT_OF_BOUNDS, right);",
    "right" : "error(t, SHIFT_AMOUNT_OUT_OF_BOUNDS, right);",
    "info" : "ExpressionStatement[37373-37417]:ExpressionStatement[37373-37417]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[37426-37433]:ReturnStatement[37426-37433]"
  }, {
    "left" : "int lvalInt = (int) lval;",
    "right" : "int lvalInt = (int) lval;",
    "info" : "VariableDeclarationStatement[37486-37511]:VariableDeclarationStatement[37486-37511]"
  }, {
    "left" : "if (lvalInt != lval)",
    "right" : "if (lvalInt != lval)",
    "info" : "IfStatement[37518-37616]:IfStatement[37518-37616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37539-37616]:Block[37539-37616]"
  }, {
    "left" : "error(t, FRACTIONAL_BITWISE_OPERAND, left);",
    "right" : "error(t, FRACTIONAL_BITWISE_OPERAND, left);",
    "info" : "ExpressionStatement[37549-37592]:ExpressionStatement[37549-37592]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[37601-37608]:ReturnStatement[37601-37608]"
  }, {
    "left" : "int rvalInt = (int) rval;",
    "right" : "int rvalInt = (int) rval;",
    "info" : "VariableDeclarationStatement[37624-37649]:VariableDeclarationStatement[37624-37649]"
  }, {
    "left" : "if (rvalInt != rval)",
    "right" : "if (rvalInt != rval)",
    "info" : "IfStatement[37656-37755]:IfStatement[37656-37755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37677-37755]:Block[37677-37755]"
  }, {
    "left" : "error(t, FRACTIONAL_BITWISE_OPERAND, right);",
    "right" : "error(t, FRACTIONAL_BITWISE_OPERAND, right);",
    "info" : "ExpressionStatement[37687-37731]:ExpressionStatement[37687-37731]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[37740-37747]:ReturnStatement[37740-37747]"
  }, {
    "left" : "switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          result = lvalInt >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }",
    "right" : "switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          result = lvalInt >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }",
    "info" : "SwitchStatement[37763-38162]:SwitchStatement[37763-38162]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[37794-37809]:SwitchCase[37794-37809]"
  }, {
    "left" : "result = lvalInt << rvalInt;",
    "right" : "result = lvalInt << rvalInt;",
    "info" : "ExpressionStatement[37820-37848]:ExpressionStatement[37820-37848]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[37859-37865]:BreakStatement[37859-37865]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[37874-37889]:SwitchCase[37874-37889]"
  }, {
    "left" : "result = lvalInt >> rvalInt;",
    "right" : "result = lvalInt >> rvalInt;",
    "info" : "ExpressionStatement[37900-37928]:ExpressionStatement[37900-37928]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[37939-37945]:BreakStatement[37939-37945]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[37954-37970]:SwitchCase[37954-37970]"
  }, {
    "left" : "result = lvalInt >>> rvalInt;",
    "right" : "result = lvalInt >>> rvalInt;",
    "info" : "ExpressionStatement[37981-38010]:ExpressionStatement[37981-38010]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[38021-38027]:BreakStatement[38021-38027]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[38036-38044]:SwitchCase[38036-38044]"
  }, {
    "left" : "throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));",
    "right" : "throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));",
    "info" : "ThrowStatement[38055-38154]:ThrowStatement[38055-38154]"
  }, {
    "left" : "parent.replaceChild(n, Node.newNumber(result));",
    "right" : "parent.replaceChild(n, Node.newNumber(result));",
    "info" : "ExpressionStatement[38169-38216]:ExpressionStatement[38169-38216]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[38223-38258]:ExpressionStatement[38223-38258]"
  }, {
    "left" : "@SuppressWarnings(\"fallthrough\")",
    "right" : "@SuppressWarnings(\"fallthrough\")",
    "info" : "SingleMemberAnnotation[38326-38358]:SingleMemberAnnotation[38326-38358]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[38361-38365]:PrimitiveType[38361-38365]"
  }, {
    "left" : "tryFoldComparison",
    "right" : "tryFoldComparison",
    "info" : "SimpleName[38366-38383]:SimpleName[38366-38383]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[38384-38399]:SingleVariableDeclaration[38384-38399]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38401-38407]:SingleVariableDeclaration[38401-38407]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[38409-38418]:SingleVariableDeclaration[38409-38418]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[38420-38430]:SingleVariableDeclaration[38420-38430]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[38457-38468]:SingleVariableDeclaration[38457-38468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38470-43814]:Block[38470-43814]"
  }, {
    "left" : "int op = n.getType();",
    "right" : "int op = n.getType();",
    "info" : "VariableDeclarationStatement[38477-38498]:VariableDeclarationStatement[38477-38498]"
  }, {
    "left" : "boolean result;",
    "right" : "boolean result;",
    "info" : "VariableDeclarationStatement[38503-38518]:VariableDeclarationStatement[38503-38518]"
  }, {
    "left" : "boolean rightLiteral = NodeUtil.isLiteralValue(right);",
    "right" : "boolean rightLiteral = NodeUtil.isLiteralValue(right);",
    "info" : "VariableDeclarationStatement[38600-38654]:VariableDeclarationStatement[38600-38654]"
  }, {
    "left" : "boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild())));",
    "right" : "boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild())));",
    "info" : "VariableDeclarationStatement[38659-38878]:VariableDeclarationStatement[38659-38878]"
  }, {
    "left" : "switch (left.getType()) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n          return;\n        } else if (!rightLiteral) {\n          return;\n        } else {\n          boolean nullRight = (Token.NULL == right.getType());\n          boolean equivalent = undefinedRight || nullRight;\n          switch (op) {\n            case Token.EQ:\n              // undefined is only equal to\n              result = equivalent;\n              break;\n            case Token.NE:\n              result = !equivalent;\n              break;\n            case Token.SHEQ:\n              result = undefinedRight;\n              break;\n            case Token.SHNE:\n              result = !undefinedRight;\n              break;\n            case Token.LT:\n            case Token.GT:\n            case Token.LE:\n            case Token.GE:\n              result = false;\n              break;\n            default:\n              return;\n          }\n        }\n        break;\n\n      case Token.NULL:\n        if (undefinedRight) {\n          result = (op == Token.EQ);\n          break;\n        }\n        // fall through\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        // fall through\n      case Token.THIS:\n        int tt = right.getType();\n        if (tt != Token.THIS &&\n            tt != Token.TRUE &&\n            tt != Token.FALSE &&\n            tt != Token.NULL)\n          return;\n        switch (op) {\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          default:\n            return;  // we only handle == and != here\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return;  // Only eval if they are the same type\n        }\n        double lv = left.getDouble();\n        double rv = right.getDouble();\n\n        switch (op) {\n          case Token.EQ: result = lv == rv; break;\n          case Token.NE: result = lv != rv; break;\n          case Token.LE: result = lv <= rv; break;\n          case Token.LT: result = lv <  rv; break;\n          case Token.GE: result = lv >= rv; break;\n          case Token.GT: result = lv >  rv; break;\n          default:\n            return;  // don't handle that op\n        }\n        break;\n\n      case Token.NAME:\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            boolean nullRight = (Token.NULL == right.getType());\n            boolean equivalent = undefinedRight || nullRight;\n            switch (op) {\n              case Token.EQ:\n                // undefined is only equal to\n                result = equivalent;\n                break;\n              case Token.NE:\n                result = !equivalent;\n                break;\n              case Token.SHEQ:\n                result = undefinedRight;\n                break;\n              case Token.SHNE:\n                result = !undefinedRight;\n                break;\n              case Token.LT:\n              case Token.GT:\n              case Token.LE:\n              case Token.GE:\n                result = false;\n                break;\n              default:\n                return;\n            }\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return;\n    }",
    "right" : "switch (left.getType()) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n          return;\n        } else if (!rightLiteral) {\n          return;\n        } else {\n          boolean nullRight = (Token.NULL == right.getType());\n          boolean equivalent = undefinedRight || nullRight;\n          switch (op) {\n            case Token.EQ:\n              // undefined is only equal to\n              result = equivalent;\n              break;\n            case Token.NE:\n              result = !equivalent;\n              break;\n            case Token.SHEQ:\n              result = undefinedRight;\n              break;\n            case Token.SHNE:\n              result = !undefinedRight;\n              break;\n            case Token.LT:\n            case Token.GT:\n            case Token.LE:\n            case Token.GE:\n              result = false;\n              break;\n            default:\n              return;\n          }\n        }\n        break;\n\n      case Token.NULL:\n        if (undefinedRight) {\n          result = (op == Token.EQ);\n          break;\n        }\n        // fall through\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        // fall through\n      case Token.THIS:\n        int tt = right.getType();\n        if (tt != Token.THIS &&\n            tt != Token.TRUE &&\n            tt != Token.FALSE &&\n            tt != Token.NULL)\n          return;\n        switch (op) {\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          default:\n            return;  // we only handle == and != here\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return;  // Only eval if they are the same type\n        }\n        double lv = left.getDouble();\n        double rv = right.getDouble();\n\n        switch (op) {\n          case Token.EQ: result = lv == rv; break;\n          case Token.NE: result = lv != rv; break;\n          case Token.LE: result = lv <= rv; break;\n          case Token.LT: result = lv <  rv; break;\n          case Token.GE: result = lv >= rv; break;\n          case Token.GT: result = lv >  rv; break;\n          default:\n            return;  // don't handle that op\n        }\n        break;\n\n      case Token.NAME:\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            boolean nullRight = (Token.NULL == right.getType());\n            boolean equivalent = undefinedRight || nullRight;\n            switch (op) {\n              case Token.EQ:\n                // undefined is only equal to\n                result = equivalent;\n                break;\n              case Token.NE:\n                result = !equivalent;\n                break;\n              case Token.SHEQ:\n                result = undefinedRight;\n                break;\n              case Token.SHNE:\n                result = !undefinedRight;\n                break;\n              case Token.LT:\n              case Token.GT:\n              case Token.LE:\n              case Token.GE:\n                result = false;\n                break;\n              default:\n                return;\n            }\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return;\n    }",
    "info" : "SwitchStatement[38884-43660]:SwitchStatement[38884-43660]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[38916-38932]:SwitchCase[38916-38932]"
  }, {
    "left" : "if (!NodeUtil.isLiteralValue(left.getFirstChild()))",
    "right" : "if (!NodeUtil.isLiteralValue(left.getFirstChild()))",
    "info" : "IfStatement[38941-39844]:IfStatement[38941-39844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38993-39022]:Block[38993-39022]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[39005-39012]:ReturnStatement[39005-39012]"
  }, {
    "left" : "if (!rightLiteral)",
    "right" : "if (!rightLiteral)",
    "info" : "IfStatement[39028-39844]:IfStatement[39028-39844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39047-39076]:Block[39047-39076]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[39059-39066]:ReturnStatement[39059-39066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39082-39844]:Block[39082-39844]"
  }, {
    "left" : "boolean nullRight = (Token.NULL == right.getType());",
    "right" : "boolean nullRight = (Token.NULL == right.getType());",
    "info" : "VariableDeclarationStatement[39094-39146]:VariableDeclarationStatement[39094-39146]"
  }, {
    "left" : "boolean equivalent = undefinedRight || nullRight;",
    "right" : "boolean equivalent = undefinedRight || nullRight;",
    "info" : "VariableDeclarationStatement[39157-39206]:VariableDeclarationStatement[39157-39206]"
  }, {
    "left" : "switch (op) {\n            case Token.EQ:\n              // undefined is only equal to\n              result = equivalent;\n              break;\n            case Token.NE:\n              result = !equivalent;\n              break;\n            case Token.SHEQ:\n              result = undefinedRight;\n              break;\n            case Token.SHNE:\n              result = !undefinedRight;\n              break;\n            case Token.LT:\n            case Token.GT:\n            case Token.LE:\n            case Token.GE:\n              result = false;\n              break;\n            default:\n              return;\n          }",
    "right" : "switch (op) {\n            case Token.EQ:\n              // undefined is only equal to\n              result = equivalent;\n              break;\n            case Token.NE:\n              result = !equivalent;\n              break;\n            case Token.SHEQ:\n              result = undefinedRight;\n              break;\n            case Token.SHNE:\n              result = !undefinedRight;\n              break;\n            case Token.LT:\n            case Token.GT:\n            case Token.LE:\n            case Token.GE:\n              result = false;\n              break;\n            default:\n              return;\n          }",
    "info" : "SwitchStatement[39217-39834]:SwitchStatement[39217-39834]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[39243-39257]:SwitchCase[39243-39257]"
  }, {
    "left" : "result = equivalent;",
    "right" : "result = equivalent;",
    "info" : "ExpressionStatement[39316-39336]:ExpressionStatement[39316-39336]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39351-39357]:BreakStatement[39351-39357]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[39370-39384]:SwitchCase[39370-39384]"
  }, {
    "left" : "result = !equivalent;",
    "right" : "result = !equivalent;",
    "info" : "ExpressionStatement[39399-39420]:ExpressionStatement[39399-39420]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39435-39441]:BreakStatement[39435-39441]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[39454-39470]:SwitchCase[39454-39470]"
  }, {
    "left" : "result = undefinedRight;",
    "right" : "result = undefinedRight;",
    "info" : "ExpressionStatement[39485-39509]:ExpressionStatement[39485-39509]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39524-39530]:BreakStatement[39524-39530]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[39543-39559]:SwitchCase[39543-39559]"
  }, {
    "left" : "result = !undefinedRight;",
    "right" : "result = !undefinedRight;",
    "info" : "ExpressionStatement[39574-39599]:ExpressionStatement[39574-39599]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39614-39620]:BreakStatement[39614-39620]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[39633-39647]:SwitchCase[39633-39647]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[39660-39674]:SwitchCase[39660-39674]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[39687-39701]:SwitchCase[39687-39701]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[39714-39728]:SwitchCase[39714-39728]"
  }, {
    "left" : "result = false;",
    "right" : "result = false;",
    "info" : "ExpressionStatement[39743-39758]:ExpressionStatement[39743-39758]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39773-39779]:BreakStatement[39773-39779]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[39792-39800]:SwitchCase[39792-39800]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[39815-39822]:ReturnStatement[39815-39822]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39853-39859]:BreakStatement[39853-39859]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[39867-39883]:SwitchCase[39867-39883]"
  }, {
    "left" : "if (undefinedRight)",
    "right" : "if (undefinedRight)",
    "info" : "IfStatement[39892-39977]:IfStatement[39892-39977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39912-39977]:Block[39912-39977]"
  }, {
    "left" : "result = (op == Token.EQ);",
    "right" : "result = (op == Token.EQ);",
    "info" : "ExpressionStatement[39924-39950]:ExpressionStatement[39924-39950]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39961-39967]:BreakStatement[39961-39967]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[40008-40024]:SwitchCase[40008-40024]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[40031-40048]:SwitchCase[40031-40048]"
  }, {
    "left" : "if (undefinedRight)",
    "right" : "if (undefinedRight)",
    "info" : "IfStatement[40057-40131]:IfStatement[40057-40131]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40077-40131]:Block[40077-40131]"
  }, {
    "left" : "result = false;",
    "right" : "result = false;",
    "info" : "ExpressionStatement[40089-40104]:ExpressionStatement[40089-40104]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[40115-40121]:BreakStatement[40115-40121]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[40162-40178]:SwitchCase[40162-40178]"
  }, {
    "left" : "int tt = right.getType();",
    "right" : "int tt = right.getType();",
    "info" : "VariableDeclarationStatement[40187-40212]:VariableDeclarationStatement[40187-40212]"
  }, {
    "left" : "if (tt != Token.THIS &&\n            tt != Token.TRUE &&\n            tt != Token.FALSE &&\n            tt != Token.NULL)",
    "right" : "if (tt != Token.THIS &&\n            tt != Token.TRUE &&\n            tt != Token.FALSE &&\n            tt != Token.NULL)",
    "info" : "IfStatement[40221-40357]:IfStatement[40221-40357]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[40350-40357]:ReturnStatement[40350-40357]"
  }, {
    "left" : "switch (op) {\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          default:\n            return;  // we only handle == and != here\n        }",
    "right" : "switch (op) {\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          default:\n            return;  // we only handle == and != here\n        }",
    "info" : "SwitchStatement[40366-40664]:SwitchStatement[40366-40664]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[40390-40404]:SwitchCase[40390-40404]"
  }, {
    "left" : "result = left.getType() == right.getType();",
    "right" : "result = left.getType() == right.getType();",
    "info" : "ExpressionStatement[40417-40460]:ExpressionStatement[40417-40460]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[40473-40479]:BreakStatement[40473-40479]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[40491-40505]:SwitchCase[40491-40505]"
  }, {
    "left" : "result = left.getType() != right.getType();",
    "right" : "result = left.getType() != right.getType();",
    "info" : "ExpressionStatement[40518-40561]:ExpressionStatement[40518-40561]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[40574-40580]:BreakStatement[40574-40580]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[40592-40600]:SwitchCase[40592-40600]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[40613-40620]:ReturnStatement[40613-40620]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[40673-40679]:BreakStatement[40673-40679]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[40687-40705]:SwitchCase[40687-40705]"
  }, {
    "left" : "if (undefinedRight)",
    "right" : "if (undefinedRight)",
    "info" : "IfStatement[40714-40788]:IfStatement[40714-40788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40734-40788]:Block[40734-40788]"
  }, {
    "left" : "result = false;",
    "right" : "result = false;",
    "info" : "ExpressionStatement[40746-40761]:ExpressionStatement[40746-40761]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[40772-40778]:BreakStatement[40772-40778]"
  }, {
    "left" : "if (Token.STRING != right.getType())",
    "right" : "if (Token.STRING != right.getType())",
    "info" : "IfStatement[40797-40903]:IfStatement[40797-40903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40834-40903]:Block[40834-40903]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[40846-40853]:ReturnStatement[40846-40853]"
  }, {
    "left" : "switch (op) {\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return;  // we only handle == and != here\n        }",
    "right" : "switch (op) {\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return;  // we only handle == and != here\n        }",
    "info" : "SwitchStatement[40912-41229]:SwitchStatement[40912-41229]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[40936-40950]:SwitchCase[40936-40950]"
  }, {
    "left" : "result = left.getString().equals(right.getString());",
    "right" : "result = left.getString().equals(right.getString());",
    "info" : "ExpressionStatement[40963-41015]:ExpressionStatement[40963-41015]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[41028-41034]:BreakStatement[41028-41034]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[41046-41060]:SwitchCase[41046-41060]"
  }, {
    "left" : "result = !left.getString().equals(right.getString());",
    "right" : "result = !left.getString().equals(right.getString());",
    "info" : "ExpressionStatement[41073-41126]:ExpressionStatement[41073-41126]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[41139-41145]:BreakStatement[41139-41145]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[41157-41165]:SwitchCase[41157-41165]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[41178-41185]:ReturnStatement[41178-41185]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[41238-41244]:BreakStatement[41238-41244]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[41252-41270]:SwitchCase[41252-41270]"
  }, {
    "left" : "if (undefinedRight)",
    "right" : "if (undefinedRight)",
    "info" : "IfStatement[41279-41353]:IfStatement[41279-41353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41299-41353]:Block[41299-41353]"
  }, {
    "left" : "result = false;",
    "right" : "result = false;",
    "info" : "ExpressionStatement[41311-41326]:ExpressionStatement[41311-41326]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[41337-41343]:BreakStatement[41337-41343]"
  }, {
    "left" : "if (Token.NUMBER != right.getType())",
    "right" : "if (Token.NUMBER != right.getType())",
    "info" : "IfStatement[41362-41468]:IfStatement[41362-41468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41399-41468]:Block[41399-41468]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[41411-41418]:ReturnStatement[41411-41418]"
  }, {
    "left" : "double lv = left.getDouble();",
    "right" : "double lv = left.getDouble();",
    "info" : "VariableDeclarationStatement[41477-41506]:VariableDeclarationStatement[41477-41506]"
  }, {
    "left" : "double rv = right.getDouble();",
    "right" : "double rv = right.getDouble();",
    "info" : "VariableDeclarationStatement[41515-41545]:VariableDeclarationStatement[41515-41545]"
  }, {
    "left" : "switch (op) {\n          case Token.EQ: result = lv == rv; break;\n          case Token.NE: result = lv != rv; break;\n          case Token.LE: result = lv <= rv; break;\n          case Token.LT: result = lv <  rv; break;\n          case Token.GE: result = lv >= rv; break;\n          case Token.GT: result = lv >  rv; break;\n          default:\n            return;  // don't handle that op\n        }",
    "right" : "switch (op) {\n          case Token.EQ: result = lv == rv; break;\n          case Token.NE: result = lv != rv; break;\n          case Token.LE: result = lv <= rv; break;\n          case Token.LT: result = lv <  rv; break;\n          case Token.GE: result = lv >= rv; break;\n          case Token.GT: result = lv >  rv; break;\n          default:\n            return;  // don't handle that op\n        }",
    "info" : "SwitchStatement[41555-41948]:SwitchStatement[41555-41948]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[41579-41593]:SwitchCase[41579-41593]"
  }, {
    "left" : "result = lv == rv;",
    "right" : "result = lv == rv;",
    "info" : "ExpressionStatement[41594-41612]:ExpressionStatement[41594-41612]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[41613-41619]:BreakStatement[41613-41619]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[41630-41644]:SwitchCase[41630-41644]"
  }, {
    "left" : "result = lv != rv;",
    "right" : "result = lv != rv;",
    "info" : "ExpressionStatement[41645-41663]:ExpressionStatement[41645-41663]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[41664-41670]:BreakStatement[41664-41670]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[41681-41695]:SwitchCase[41681-41695]"
  }, {
    "left" : "result = lv <= rv;",
    "right" : "result = lv <= rv;",
    "info" : "ExpressionStatement[41696-41714]:ExpressionStatement[41696-41714]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[41715-41721]:BreakStatement[41715-41721]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[41732-41746]:SwitchCase[41732-41746]"
  }, {
    "left" : "result = lv <  rv;",
    "right" : "result = lv <  rv;",
    "info" : "ExpressionStatement[41747-41765]:ExpressionStatement[41747-41765]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[41766-41772]:BreakStatement[41766-41772]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[41783-41797]:SwitchCase[41783-41797]"
  }, {
    "left" : "result = lv >= rv;",
    "right" : "result = lv >= rv;",
    "info" : "ExpressionStatement[41798-41816]:ExpressionStatement[41798-41816]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[41817-41823]:BreakStatement[41817-41823]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[41834-41848]:SwitchCase[41834-41848]"
  }, {
    "left" : "result = lv >  rv;",
    "right" : "result = lv >  rv;",
    "info" : "ExpressionStatement[41849-41867]:ExpressionStatement[41849-41867]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[41868-41874]:BreakStatement[41868-41874]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[41885-41893]:SwitchCase[41885-41893]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[41906-41913]:ReturnStatement[41906-41913]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[41957-41963]:BreakStatement[41957-41963]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[41971-41987]:SwitchCase[41971-41987]"
  }, {
    "left" : "if (rightLiteral)",
    "right" : "if (rightLiteral)",
    "info" : "IfStatement[41996-42962]:IfStatement[41996-42962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42014-42962]:Block[42014-42962]"
  }, {
    "left" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
    "right" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
    "info" : "VariableDeclarationStatement[42026-42089]:VariableDeclarationStatement[42026-42089]"
  }, {
    "left" : "if (undefinedLeft)",
    "right" : "if (undefinedLeft)",
    "info" : "IfStatement[42100-42952]:IfStatement[42100-42952]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42119-42952]:Block[42119-42952]"
  }, {
    "left" : "boolean nullRight = (Token.NULL == right.getType());",
    "right" : "boolean nullRight = (Token.NULL == right.getType());",
    "info" : "VariableDeclarationStatement[42133-42185]:VariableDeclarationStatement[42133-42185]"
  }, {
    "left" : "boolean equivalent = undefinedRight || nullRight;",
    "right" : "boolean equivalent = undefinedRight || nullRight;",
    "info" : "VariableDeclarationStatement[42198-42247]:VariableDeclarationStatement[42198-42247]"
  }, {
    "left" : "switch (op) {\n              case Token.EQ:\n                // undefined is only equal to\n                result = equivalent;\n                break;\n              case Token.NE:\n                result = !equivalent;\n                break;\n              case Token.SHEQ:\n                result = undefinedRight;\n                break;\n              case Token.SHNE:\n                result = !undefinedRight;\n                break;\n              case Token.LT:\n              case Token.GT:\n              case Token.LE:\n              case Token.GE:\n                result = false;\n                break;\n              default:\n                return;\n            }",
    "right" : "switch (op) {\n              case Token.EQ:\n                // undefined is only equal to\n                result = equivalent;\n                break;\n              case Token.NE:\n                result = !equivalent;\n                break;\n              case Token.SHEQ:\n                result = undefinedRight;\n                break;\n              case Token.SHNE:\n                result = !undefinedRight;\n                break;\n              case Token.LT:\n              case Token.GT:\n              case Token.LE:\n              case Token.GE:\n                result = false;\n                break;\n              default:\n                return;\n            }",
    "info" : "SwitchStatement[42260-42921]:SwitchStatement[42260-42921]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[42288-42302]:SwitchCase[42288-42302]"
  }, {
    "left" : "result = equivalent;",
    "right" : "result = equivalent;",
    "info" : "ExpressionStatement[42365-42385]:ExpressionStatement[42365-42385]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[42402-42408]:BreakStatement[42402-42408]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[42423-42437]:SwitchCase[42423-42437]"
  }, {
    "left" : "result = !equivalent;",
    "right" : "result = !equivalent;",
    "info" : "ExpressionStatement[42454-42475]:ExpressionStatement[42454-42475]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[42492-42498]:BreakStatement[42492-42498]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[42513-42529]:SwitchCase[42513-42529]"
  }, {
    "left" : "result = undefinedRight;",
    "right" : "result = undefinedRight;",
    "info" : "ExpressionStatement[42546-42570]:ExpressionStatement[42546-42570]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[42587-42593]:BreakStatement[42587-42593]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[42608-42624]:SwitchCase[42608-42624]"
  }, {
    "left" : "result = !undefinedRight;",
    "right" : "result = !undefinedRight;",
    "info" : "ExpressionStatement[42641-42666]:ExpressionStatement[42641-42666]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[42683-42689]:BreakStatement[42683-42689]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[42704-42718]:SwitchCase[42704-42718]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[42733-42747]:SwitchCase[42733-42747]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[42762-42776]:SwitchCase[42762-42776]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[42791-42805]:SwitchCase[42791-42805]"
  }, {
    "left" : "result = false;",
    "right" : "result = false;",
    "info" : "ExpressionStatement[42822-42837]:ExpressionStatement[42822-42837]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[42854-42860]:BreakStatement[42854-42860]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[42875-42883]:SwitchCase[42875-42883]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[42900-42907]:ReturnStatement[42900-42907]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[42934-42940]:BreakStatement[42934-42940]"
  }, {
    "left" : "if (Token.NAME != right.getType())",
    "right" : "if (Token.NAME != right.getType())",
    "info" : "IfStatement[42972-43076]:IfStatement[42972-43076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43007-43076]:Block[43007-43076]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[43019-43026]:ReturnStatement[43019-43026]"
  }, {
    "left" : "String ln = left.getString();",
    "right" : "String ln = left.getString();",
    "info" : "VariableDeclarationStatement[43085-43114]:VariableDeclarationStatement[43085-43114]"
  }, {
    "left" : "String rn = right.getString();",
    "right" : "String rn = right.getString();",
    "info" : "VariableDeclarationStatement[43123-43153]:VariableDeclarationStatement[43123-43153]"
  }, {
    "left" : "if (!ln.equals(rn))",
    "right" : "if (!ln.equals(rn))",
    "info" : "IfStatement[43162-43240]:IfStatement[43162-43240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43182-43240]:Block[43182-43240]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[43194-43201]:ReturnStatement[43194-43201]"
  }, {
    "left" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return;  // don't handle that op\n        }",
    "right" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return;  // don't handle that op\n        }",
    "info" : "SwitchStatement[43250-43559]:SwitchStatement[43250-43559]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[43399-43413]:SwitchCase[43399-43413]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[43424-43438]:SwitchCase[43424-43438]"
  }, {
    "left" : "result = false;",
    "right" : "result = false;",
    "info" : "ExpressionStatement[43451-43466]:ExpressionStatement[43451-43466]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[43479-43485]:BreakStatement[43479-43485]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[43496-43504]:SwitchCase[43496-43504]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[43517-43524]:ReturnStatement[43517-43524]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[43568-43574]:BreakStatement[43568-43574]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[43582-43590]:SwitchCase[43582-43590]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[43647-43654]:ReturnStatement[43647-43654]"
  }, {
    "left" : "parent.replaceChild(n, new Node(result ? Token.TRUE :\n                                    Token.FALSE));",
    "right" : "parent.replaceChild(n, new Node(result ? Token.TRUE :\n                                    Token.FALSE));",
    "info" : "ExpressionStatement[43666-43770]:ExpressionStatement[43666-43770]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[43775-43810]:ExpressionStatement[43775-43810]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[43958-43962]:PrimitiveType[43958-43962]"
  }, {
    "left" : "tryFoldStringIndexOf",
    "right" : "tryFoldStringIndexOf",
    "info" : "SimpleName[43963-43983]:SimpleName[43963-43983]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[43984-43999]:SingleVariableDeclaration[43984-43999]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[44001-44007]:SingleVariableDeclaration[44001-44007]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[44009-44018]:SingleVariableDeclaration[44009-44018]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[44020-44030]:SingleVariableDeclaration[44020-44030]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[44060-44071]:SingleVariableDeclaration[44060-44071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44073-45418]:Block[44073-45418]"
  }, {
    "left" : "if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right))",
    "right" : "if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right))",
    "info" : "IfStatement[44079-44168]:IfStatement[44079-44168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44147-44168]:Block[44147-44168]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[44155-44162]:ReturnStatement[44155-44162]"
  }, {
    "left" : "Node lstringNode = left.getFirstChild();",
    "right" : "Node lstringNode = left.getFirstChild();",
    "info" : "VariableDeclarationStatement[44174-44214]:VariableDeclarationStatement[44174-44214]"
  }, {
    "left" : "Node functionName = lstringNode.getNext();",
    "right" : "Node functionName = lstringNode.getNext();",
    "info" : "VariableDeclarationStatement[44219-44261]:VariableDeclarationStatement[44219-44261]"
  }, {
    "left" : "if ((lstringNode.getType() != Token.STRING) ||\n        (!functionName.getString().equals(\"indexOf\") &&\n        !functionName.getString().equals(\"lastIndexOf\")))",
    "right" : "if ((lstringNode.getType() != Token.STRING) ||\n        (!functionName.getString().equals(\"indexOf\") &&\n        !functionName.getString().equals(\"lastIndexOf\")))",
    "info" : "IfStatement[44267-44449]:IfStatement[44267-44449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44428-44449]:Block[44428-44449]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[44436-44443]:ReturnStatement[44436-44443]"
  }, {
    "left" : "String lstring = NodeUtil.getStringValue(lstringNode);",
    "right" : "String lstring = NodeUtil.getStringValue(lstringNode);",
    "info" : "VariableDeclarationStatement[44455-44509]:VariableDeclarationStatement[44455-44509]"
  }, {
    "left" : "boolean isIndexOf = functionName.getString().equals(\"indexOf\");",
    "right" : "boolean isIndexOf = functionName.getString().equals(\"indexOf\");",
    "info" : "VariableDeclarationStatement[44514-44577]:VariableDeclarationStatement[44514-44577]"
  }, {
    "left" : "Node firstArg = right;",
    "right" : "Node firstArg = right;",
    "info" : "VariableDeclarationStatement[44582-44604]:VariableDeclarationStatement[44582-44604]"
  }, {
    "left" : "Node secondArg = right.getNext();",
    "right" : "Node secondArg = right.getNext();",
    "info" : "VariableDeclarationStatement[44609-44642]:VariableDeclarationStatement[44609-44642]"
  }, {
    "left" : "String searchValue = NodeUtil.getStringValue(firstArg);",
    "right" : "String searchValue = NodeUtil.getStringValue(firstArg);",
    "info" : "VariableDeclarationStatement[44647-44702]:VariableDeclarationStatement[44647-44702]"
  }, {
    "left" : "if (searchValue == null)",
    "right" : "if (searchValue == null)",
    "info" : "IfStatement[44750-44796]:IfStatement[44750-44796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44775-44796]:Block[44775-44796]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[44783-44790]:ReturnStatement[44783-44790]"
  }, {
    "left" : "int fromIndex = isIndexOf ? 0 : lstring.length();",
    "right" : "int fromIndex = isIndexOf ? 0 : lstring.length();",
    "info" : "VariableDeclarationStatement[44801-44850]:VariableDeclarationStatement[44801-44850]"
  }, {
    "left" : "if (secondArg != null)",
    "right" : "if (secondArg != null)",
    "info" : "IfStatement[44855-45144]:IfStatement[44855-45144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44878-45144]:Block[44878-45144]"
  }, {
    "left" : "if ((secondArg.getNext() != null) ||\n          (secondArg.getType() != Token.NUMBER))",
    "right" : "if ((secondArg.getNext() != null) ||\n          (secondArg.getType() != Token.NUMBER))",
    "info" : "IfStatement[44963-45138]:IfStatement[44963-45138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45049-45074]:Block[45049-45074]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[45059-45066]:ReturnStatement[45059-45066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45080-45138]:Block[45080-45138]"
  }, {
    "left" : "fromIndex = (int) secondArg.getDouble();",
    "right" : "fromIndex = (int) secondArg.getDouble();",
    "info" : "ExpressionStatement[45090-45130]:ExpressionStatement[45090-45130]"
  }, {
    "left" : "int indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)\n                             : lstring.lastIndexOf(searchValue, fromIndex);",
    "right" : "int indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)\n                             : lstring.lastIndexOf(searchValue, fromIndex);",
    "info" : "VariableDeclarationStatement[45149-45291]:VariableDeclarationStatement[45149-45291]"
  }, {
    "left" : "Node newNode = Node.newNumber(indexVal);",
    "right" : "Node newNode = Node.newNumber(indexVal);",
    "info" : "VariableDeclarationStatement[45296-45336]:VariableDeclarationStatement[45296-45336]"
  }, {
    "left" : "parent.replaceChild(n, newNode);",
    "right" : "parent.replaceChild(n, newNode);",
    "info" : "ExpressionStatement[45341-45373]:ExpressionStatement[45341-45373]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[45379-45414]:ExpressionStatement[45379-45414]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45502-45506]:PrimitiveType[45502-45506]"
  }, {
    "left" : "tryFoldStringJoin",
    "right" : "tryFoldStringJoin",
    "info" : "SimpleName[45507-45524]:SimpleName[45507-45524]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[45525-45540]:SingleVariableDeclaration[45525-45540]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[45542-45548]:SingleVariableDeclaration[45542-45548]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[45550-45559]:SingleVariableDeclaration[45550-45559]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[45561-45571]:SingleVariableDeclaration[45561-45571]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[45598-45609]:SingleVariableDeclaration[45598-45609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45611-48360]:Block[45611-48368]"
  }, {
    "left" : "if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right))",
    "right" : "if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right))",
    "info" : "IfStatement[45617-45706]:IfStatement[45617-45706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45685-45706]:Block[45685-45706]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[45693-45700]:ReturnStatement[45693-45700]"
  }, {
    "left" : "Node arrayNode = left.getFirstChild();",
    "right" : "Node arrayNode = left.getFirstChild();",
    "info" : "VariableDeclarationStatement[45712-45750]:VariableDeclarationStatement[45712-45750]"
  }, {
    "left" : "Node functionName = arrayNode.getNext();",
    "right" : "Node functionName = arrayNode.getNext();",
    "info" : "VariableDeclarationStatement[45755-45795]:VariableDeclarationStatement[45755-45795]"
  }, {
    "left" : "if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\"))",
    "right" : "if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\"))",
    "info" : "IfStatement[45801-45919]:IfStatement[45801-45919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45898-45919]:Block[45898-45919]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[45906-45913]:ReturnStatement[45906-45913]"
  }, {
    "left" : "String joinString = NodeUtil.getStringValue(right);",
    "right" : "String joinString = NodeUtil.getStringValue(right);",
    "info" : "VariableDeclarationStatement[45925-45976]:VariableDeclarationStatement[45925-45976]"
  }, {
    "left" : "List<Node> arrayFoldedChildren = Lists.newLinkedList();",
    "right" : "List<Node> arrayFoldedChildren = Lists.newLinkedList();",
    "info" : "VariableDeclarationStatement[45981-46036]:VariableDeclarationStatement[45981-46036]"
  }, {
    "left" : "int foldedSize = 0;",
    "right" : "int foldedSize = 0;",
    "info" : "VariableDeclarationStatement[46085-46104]:VariableDeclarationStatement[46070-46089]"
  }, {
    "left" : "Node elem = arrayNode.getFirstChild();",
    "right" : "Node elem = arrayNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[46109-46147]:VariableDeclarationStatement[46094-46132]"
  }, {
    "left" : "while (elem != null)",
    "right" : "while (elem != null)",
    "info" : "WhileStatement[46189-46751]:WhileStatement[46174-46764]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46210-46751]:Block[46195-46764]"
  }, {
    "left" : "if (NodeUtil.isImmutableValue(elem))",
    "right" : "if (NodeUtil.isImmutableValue(elem))",
    "info" : "IfStatement[46218-46716]:IfStatement[46203-46729]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46255-46388]:Block[46240-46421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46286-46330]:Block[46319-46363]"
  }, {
    "left" : "sb.append(joinString);",
    "right" : "sb.append(joinString);",
    "info" : "ExpressionStatement[46298-46320]:ExpressionStatement[46331-46353]"
  }, {
    "left" : "sb.append(NodeUtil.getStringValue(elem));",
    "right" : "sb.append(NodeUtil.getStringValue(elem));",
    "info" : "ExpressionStatement[46339-46380]:ExpressionStatement[46372-46413]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46394-46716]:Block[46427-46729]"
  }, {
    "left" : "if (sb.length() > 0)",
    "right" : "if (sb != null)",
    "info" : "IfStatement[46404-46612]:IfStatement[46437-46625]"
  }, {
    "left" : "sb",
    "right" : "sb",
    "info" : "SimpleName[46408-46410]:SimpleName[46441-46443]"
  }, {
    "left" : ">",
    "right" : "!=",
    "info" : "INFIX_EXPRESSION_OPERATOR[46420-46421]:INFIX_EXPRESSION_OPERATOR[46444-46446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46425-46612]:Block[46453-46625]"
  }, {
    "left" : "foldedSize += sb.length() + 2;",
    "right" : "foldedSize += sb.length() + 2;",
    "info" : "ExpressionStatement[46470-46500]:ExpressionStatement[46498-46528]"
  }, {
    "left" : "arrayFoldedChildren.add(Node.newString(sb.toString()));",
    "right" : "arrayFoldedChildren.add(Node.newString(sb.toString()));",
    "info" : "ExpressionStatement[46511-46566]:ExpressionStatement[46539-46594]"
  }, {
    "left" : "sb = new StringBuilder();",
    "right" : "sb = new StringBuilder();",
    "info" : "ExpressionStatement[46577-46602]:ExpressionStatement[46278-46303]"
  }, {
    "left" : "foldedSize += InlineCostEstimator.getCost(elem);",
    "right" : "foldedSize += InlineCostEstimator.getCost(elem);",
    "info" : "ExpressionStatement[46621-46669]:ExpressionStatement[46634-46682]"
  }, {
    "left" : "arrayFoldedChildren.add(elem);",
    "right" : "arrayFoldedChildren.add(elem);",
    "info" : "ExpressionStatement[46678-46708]:ExpressionStatement[46691-46721]"
  }, {
    "left" : "elem = elem.getNext();",
    "right" : "elem = elem.getNext();",
    "info" : "ExpressionStatement[46723-46745]:ExpressionStatement[46736-46758]"
  }, {
    "left" : "if (sb.length() > 0)",
    "right" : "if (sb != null)",
    "info" : "IfStatement[46757-46913]:IfStatement[46770-46921]"
  }, {
    "left" : "sb",
    "right" : "sb",
    "info" : "SimpleName[46761-46763]:SimpleName[46774-46776]"
  }, {
    "left" : ">",
    "right" : "!=",
    "info" : "INFIX_EXPRESSION_OPERATOR[46773-46774]:INFIX_EXPRESSION_OPERATOR[46777-46779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46778-46913]:Block[46786-46921]"
  }, {
    "left" : "foldedSize += sb.length() + 2;",
    "right" : "foldedSize += sb.length() + 2;",
    "info" : "ExpressionStatement[46815-46845]:ExpressionStatement[46823-46853]"
  }, {
    "left" : "arrayFoldedChildren.add(Node.newString(sb.toString()));",
    "right" : "arrayFoldedChildren.add(Node.newString(sb.toString()));",
    "info" : "ExpressionStatement[46852-46907]:ExpressionStatement[46860-46915]"
  }, {
    "left" : "foldedSize += arrayFoldedChildren.size() - 1;",
    "right" : "foldedSize += arrayFoldedChildren.size() - 1;",
    "info" : "ExpressionStatement[46945-46990]:ExpressionStatement[46953-46998]"
  }, {
    "left" : "int originalSize = InlineCostEstimator.getCost(n);",
    "right" : "int originalSize = InlineCostEstimator.getCost(n);",
    "info" : "VariableDeclarationStatement[46996-47046]:VariableDeclarationStatement[47004-47054]"
  }, {
    "left" : "switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        break;\n    }",
    "right" : "switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        break;\n    }",
    "info" : "SwitchStatement[47051-48316]:SwitchStatement[47059-48324]"
  }, {
    "left" : "case 0:",
    "right" : "case 0:",
    "info" : "SwitchCase[47095-47102]:SwitchCase[47103-47110]"
  }, {
    "left" : "Node emptyStringNode = Node.newString(\"\");",
    "right" : "Node emptyStringNode = Node.newString(\"\");",
    "info" : "VariableDeclarationStatement[47111-47153]:VariableDeclarationStatement[47119-47161]"
  }, {
    "left" : "parent.replaceChild(n, emptyStringNode);",
    "right" : "parent.replaceChild(n, emptyStringNode);",
    "info" : "ExpressionStatement[47162-47202]:ExpressionStatement[47170-47210]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[47211-47217]:BreakStatement[47219-47225]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[47225-47232]:SwitchCase[47233-47240]"
  }, {
    "left" : "Node foldedStringNode = arrayFoldedChildren.remove(0);",
    "right" : "Node foldedStringNode = arrayFoldedChildren.remove(0);",
    "info" : "VariableDeclarationStatement[47241-47295]:VariableDeclarationStatement[47249-47303]"
  }, {
    "left" : "if (foldedSize > originalSize)",
    "right" : "if (foldedSize > originalSize)",
    "info" : "IfStatement[47304-47364]:IfStatement[47312-47372]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47335-47364]:Block[47343-47372]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[47347-47354]:ReturnStatement[47355-47362]"
  }, {
    "left" : "arrayNode.detachChildren();",
    "right" : "arrayNode.detachChildren();",
    "info" : "ExpressionStatement[47373-47400]:ExpressionStatement[47381-47408]"
  }, {
    "left" : "if (foldedStringNode.getType() != Token.STRING)",
    "right" : "if (foldedStringNode.getType() != Token.STRING)",
    "info" : "IfStatement[47409-47714]:IfStatement[47417-47722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47457-47714]:Block[47465-47722]"
  }, {
    "left" : "Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);",
    "right" : "Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);",
    "info" : "VariableDeclarationStatement[47571-47662]:VariableDeclarationStatement[47579-47670]"
  }, {
    "left" : "foldedStringNode = replacement;",
    "right" : "foldedStringNode = replacement;",
    "info" : "ExpressionStatement[47673-47704]:ExpressionStatement[47681-47712]"
  }, {
    "left" : "parent.replaceChild(n, foldedStringNode);",
    "right" : "parent.replaceChild(n, foldedStringNode);",
    "info" : "ExpressionStatement[47723-47764]:ExpressionStatement[47731-47772]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[47773-47779]:BreakStatement[47781-47787]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[47787-47795]:SwitchCase[47795-47803]"
  }, {
    "left" : "if (arrayFoldedChildren.size() == arrayNode.getChildCount())",
    "right" : "if (arrayFoldedChildren.size() == arrayNode.getChildCount())",
    "info" : "IfStatement[47855-47945]:IfStatement[47863-47953]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47916-47945]:Block[47924-47953]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[47928-47935]:ReturnStatement[47936-47943]"
  }, {
    "left" : "int kJoinOverhead = \"[].join()\".length();",
    "right" : "int kJoinOverhead = \"[].join()\".length();",
    "info" : "VariableDeclarationStatement[47954-47995]:VariableDeclarationStatement[47962-48003]"
  }, {
    "left" : "foldedSize += kJoinOverhead;",
    "right" : "foldedSize += kJoinOverhead;",
    "info" : "ExpressionStatement[48004-48032]:ExpressionStatement[48012-48040]"
  }, {
    "left" : "foldedSize += InlineCostEstimator.getCost(right);",
    "right" : "foldedSize += InlineCostEstimator.getCost(right);",
    "info" : "ExpressionStatement[48041-48090]:ExpressionStatement[48049-48098]"
  }, {
    "left" : "if (foldedSize > originalSize)",
    "right" : "if (foldedSize > originalSize)",
    "info" : "IfStatement[48099-48159]:IfStatement[48107-48167]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48130-48159]:Block[48138-48167]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[48142-48149]:ReturnStatement[48150-48157]"
  }, {
    "left" : "arrayNode.detachChildren();",
    "right" : "arrayNode.detachChildren();",
    "info" : "ExpressionStatement[48168-48195]:ExpressionStatement[48176-48203]"
  }, {
    "left" : "for (Node node : arrayFoldedChildren)",
    "right" : "for (Node node : arrayFoldedChildren)",
    "info" : "EnhancedForStatement[48204-48295]:EnhancedForStatement[48212-48303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48242-48295]:Block[48250-48303]"
  }, {
    "left" : "arrayNode.addChildToBack(node);",
    "right" : "arrayNode.addChildToBack(node);",
    "info" : "ExpressionStatement[48254-48285]:ExpressionStatement[48262-48293]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[48304-48310]:BreakStatement[48312-48318]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[48321-48356]:ExpressionStatement[48329-48364]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[48427-48431]:PrimitiveType[48435-48439]"
  }, {
    "left" : "tryFoldGetElem",
    "right" : "tryFoldGetElem",
    "info" : "SimpleName[48432-48446]:SimpleName[48440-48454]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[48447-48462]:SingleVariableDeclaration[48455-48470]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[48464-48470]:SingleVariableDeclaration[48472-48478]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[48472-48481]:SingleVariableDeclaration[48480-48489]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[48483-48493]:SingleVariableDeclaration[48491-48501]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[48517-48528]:SingleVariableDeclaration[48525-48536]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48530-49673]:Block[48538-49681]"
  }, {
    "left" : "if (left.getType() == Token.ARRAYLIT)",
    "right" : "if (left.getType() == Token.ARRAYLIT)",
    "info" : "IfStatement[48536-49669]:IfStatement[48544-49677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48574-49669]:Block[48582-49677]"
  }, {
    "left" : "if (right.getType() != Token.NUMBER)",
    "right" : "if (right.getType() != Token.NUMBER)",
    "info" : "IfStatement[48583-48778]:IfStatement[48591-48786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48620-48778]:Block[48628-48786]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[48763-48770]:ReturnStatement[48771-48778]"
  }, {
    "left" : "double index = right.getDouble();",
    "right" : "double index = right.getDouble();",
    "info" : "VariableDeclarationStatement[48786-48819]:VariableDeclarationStatement[48794-48827]"
  }, {
    "left" : "int intIndex = (int) index;",
    "right" : "int intIndex = (int) index;",
    "info" : "VariableDeclarationStatement[48826-48853]:VariableDeclarationStatement[48834-48861]"
  }, {
    "left" : "if (intIndex != index)",
    "right" : "if (intIndex != index)",
    "info" : "IfStatement[48860-49028]:IfStatement[48868-49036]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48883-49028]:Block[48891-49036]"
  }, {
    "left" : "t.getCompiler().report(JSError.make(t, right,\n            INVALID_GETELEM_INDEX_ERROR, String.valueOf(index)));",
    "right" : "t.getCompiler().report(JSError.make(t, right,\n            INVALID_GETELEM_INDEX_ERROR, String.valueOf(index)));",
    "info" : "ExpressionStatement[48893-49004]:ExpressionStatement[48901-49012]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[49013-49020]:ReturnStatement[49021-49028]"
  }, {
    "left" : "if (intIndex < 0)",
    "right" : "if (intIndex < 0)",
    "info" : "IfStatement[49036-49196]:IfStatement[49044-49204]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49054-49196]:Block[49062-49204]"
  }, {
    "left" : "t.getCompiler().report(JSError.make(t, n, INDEX_OUT_OF_BOUNDS_ERROR,\n            String.valueOf(intIndex)));",
    "right" : "t.getCompiler().report(JSError.make(t, n, INDEX_OUT_OF_BOUNDS_ERROR,\n            String.valueOf(intIndex)));",
    "info" : "ExpressionStatement[49064-49172]:ExpressionStatement[49072-49180]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[49181-49188]:ReturnStatement[49189-49196]"
  }, {
    "left" : "Node elem = left.getFirstChild();",
    "right" : "Node elem = left.getFirstChild();",
    "info" : "VariableDeclarationStatement[49204-49237]:VariableDeclarationStatement[49212-49245]"
  }, {
    "left" : "for (int i = 0; elem != null && i < intIndex; i++)",
    "right" : "for (int i = 0; elem != null && i < intIndex; i++)",
    "info" : "ForStatement[49244-49335]:ForStatement[49252-49343]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49295-49335]:Block[49303-49343]"
  }, {
    "left" : "elem = elem.getNext();",
    "right" : "elem = elem.getNext();",
    "info" : "ExpressionStatement[49305-49327]:ExpressionStatement[49313-49335]"
  }, {
    "left" : "if (elem == null)",
    "right" : "if (elem == null)",
    "info" : "IfStatement[49343-49503]:IfStatement[49351-49511]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49361-49503]:Block[49369-49511]"
  }, {
    "left" : "t.getCompiler().report(JSError.make(t, n, INDEX_OUT_OF_BOUNDS_ERROR,\n            String.valueOf(intIndex)));",
    "right" : "t.getCompiler().report(JSError.make(t, n, INDEX_OUT_OF_BOUNDS_ERROR,\n            String.valueOf(intIndex)));",
    "info" : "ExpressionStatement[49371-49479]:ExpressionStatement[49379-49487]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[49488-49495]:ReturnStatement[49496-49503]"
  }, {
    "left" : "left.removeChild(elem);",
    "right" : "left.removeChild(elem);",
    "info" : "ExpressionStatement[49562-49585]:ExpressionStatement[49570-49593]"
  }, {
    "left" : "parent.replaceChild(n, elem);",
    "right" : "parent.replaceChild(n, elem);",
    "info" : "ExpressionStatement[49592-49621]:ExpressionStatement[49600-49629]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[49628-49663]:ExpressionStatement[49636-49671]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[49768-49772]:PrimitiveType[49776-49780]"
  }, {
    "left" : "tryFoldGetProp",
    "right" : "tryFoldGetProp",
    "info" : "SimpleName[49773-49787]:SimpleName[49781-49795]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[49788-49803]:SingleVariableDeclaration[49796-49811]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[49805-49811]:SingleVariableDeclaration[49813-49819]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[49813-49822]:SingleVariableDeclaration[49821-49830]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[49824-49834]:SingleVariableDeclaration[49832-49842]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[49858-49869]:SingleVariableDeclaration[49866-49877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49871-50651]:Block[49879-50659]"
  }, {
    "left" : "if (right.getType() == Token.STRING &&\n        right.getString().equals(\"length\"))",
    "right" : "if (right.getType() == Token.STRING &&\n        right.getString().equals(\"length\"))",
    "info" : "IfStatement[49877-50647]:IfStatement[49885-50655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49960-50647]:Block[49968-50655]"
  }, {
    "left" : "int knownLength = -1;",
    "right" : "int knownLength = -1;",
    "info" : "VariableDeclarationStatement[49968-49989]:VariableDeclarationStatement[49976-49997]"
  }, {
    "left" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (NodeUtil.mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return;\n      }",
    "right" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (NodeUtil.mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return;\n      }",
    "info" : "SwitchStatement[49996-50452]:SwitchStatement[50004-50460]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[50030-50050]:SwitchCase[50038-50058]"
  }, {
    "left" : "if (NodeUtil.mayHaveSideEffects(left))",
    "right" : "if (NodeUtil.mayHaveSideEffects(left))",
    "info" : "IfStatement[50061-50206]:IfStatement[50069-50214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50100-50206]:Block[50108-50214]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[50187-50194]:ReturnStatement[50195-50202]"
  }, {
    "left" : "knownLength = left.getChildCount();",
    "right" : "knownLength = left.getChildCount();",
    "info" : "ExpressionStatement[50217-50252]:ExpressionStatement[50225-50260]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[50263-50269]:BreakStatement[50271-50277]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[50278-50296]:SwitchCase[50286-50304]"
  }, {
    "left" : "knownLength = left.getString().length();",
    "right" : "knownLength = left.getString().length();",
    "info" : "ExpressionStatement[50307-50347]:ExpressionStatement[50315-50355]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[50358-50364]:BreakStatement[50366-50372]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[50373-50381]:SwitchCase[50381-50389]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[50437-50444]:ReturnStatement[50445-50452]"
  }, {
    "left" : "Preconditions.checkState(knownLength != -1);",
    "right" : "Preconditions.checkState(knownLength != -1);",
    "info" : "ExpressionStatement[50460-50504]:ExpressionStatement[50468-50512]"
  }, {
    "left" : "Node lengthNode = Node.newNumber(knownLength);",
    "right" : "Node lengthNode = Node.newNumber(knownLength);",
    "info" : "VariableDeclarationStatement[50511-50557]:VariableDeclarationStatement[50519-50565]"
  }, {
    "left" : "parent.replaceChild(n, lengthNode);",
    "right" : "parent.replaceChild(n, lengthNode);",
    "info" : "ExpressionStatement[50564-50599]:ExpressionStatement[50572-50607]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[50606-50641]:ExpressionStatement[50614-50649]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[50738-50742]:PrimitiveType[50746-50750]"
  }, {
    "left" : "tryFoldRegularExpressionConstructor",
    "right" : "tryFoldRegularExpressionConstructor",
    "info" : "SimpleName[50743-50778]:SimpleName[50751-50786]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[50786-50801]:SingleVariableDeclaration[50794-50809]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[50803-50809]:SingleVariableDeclaration[50811-50817]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[50811-50822]:SingleVariableDeclaration[50819-50830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50824-52618]:Block[50832-52626]"
  }, {
    "left" : "Node constructor = n.getFirstChild();",
    "right" : "Node constructor = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[50830-50867]:VariableDeclarationStatement[50838-50875]"
  }, {
    "left" : "Node pattern = constructor.getNext();",
    "right" : "Node pattern = constructor.getNext();",
    "info" : "VariableDeclarationStatement[50872-50909]:VariableDeclarationStatement[50880-50917]"
  }, {
    "left" : "Node flags = null != pattern ? pattern.getNext() : null;",
    "right" : "Node flags = null != pattern ? pattern.getNext() : null;",
    "info" : "VariableDeclarationStatement[50933-50989]:VariableDeclarationStatement[50941-50997]"
  }, {
    "left" : "if (null == pattern || (null != flags && null != flags.getNext()))",
    "right" : "if (null == pattern || (null != flags && null != flags.getNext()))",
    "info" : "IfStatement[51007-51134]:IfStatement[51015-51142]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51074-51134]:Block[51082-51142]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[51121-51128]:ReturnStatement[51129-51136]"
  }, {
    "left" : "if (// is pattern folded\n        pattern.getType() == Token.STRING\n        // make sure empty pattern doesn't fold to //\n        && !\"\".equals(pattern.getString())\n\n        // NOTE(nicksantos): Make sure that the regexp isn't longer than\n        // 100 chars, or it blows up the regexp parser in Opera 9.2.\n        && pattern.getString().length() < 100\n\n        && (null == flags || flags.getType() == Token.STRING)\n        // don't escape patterns with unicode escapes since Safari behaves badly\n        // (read can't parse or crashes) on regex literals with unicode escapes\n        && !containsUnicodeEscape(pattern.getString()))",
    "right" : "if (// is pattern folded\n        pattern.getType() == Token.STRING\n        // make sure empty pattern doesn't fold to //\n        && !\"\".equals(pattern.getString())\n\n        // NOTE(nicksantos): Make sure that the regexp isn't longer than\n        // 100 chars, or it blows up the regexp parser in Opera 9.2.\n        && pattern.getString().length() < 100\n\n        && (null == flags || flags.getType() == Token.STRING)\n        // don't escape patterns with unicode escapes since Safari behaves badly\n        // (read can't parse or crashes) on regex literals with unicode escapes\n        && !containsUnicodeEscape(pattern.getString()))",
    "info" : "IfStatement[51140-52614]:IfStatement[51148-52622]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51773-52614]:Block[51781-52622]"
  }, {
    "left" : "pattern = makeForwardSlashBracketSafe(pattern);",
    "right" : "pattern = makeForwardSlashBracketSafe(pattern);",
    "info" : "ExpressionStatement[51933-51980]:ExpressionStatement[51941-51988]"
  }, {
    "left" : "Node regexLiteral;",
    "right" : "Node regexLiteral;",
    "info" : "VariableDeclarationStatement[51988-52006]:VariableDeclarationStatement[51996-52014]"
  }, {
    "left" : "if (null == flags || \"\".equals(flags.getString()))",
    "right" : "if (null == flags || \"\".equals(flags.getString()))",
    "info" : "IfStatement[52013-52521]:IfStatement[52021-52529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52064-52157]:Block[52072-52165]"
  }, {
    "left" : "regexLiteral = new Node(Token.REGEXP, pattern);",
    "right" : "regexLiteral = new Node(Token.REGEXP, pattern);",
    "info" : "ExpressionStatement[52102-52149]:ExpressionStatement[52110-52157]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52163-52521]:Block[52171-52529]"
  }, {
    "left" : "if (!areValidRegexpFlags(flags.getString()))",
    "right" : "if (!areValidRegexpFlags(flags.getString()))",
    "info" : "IfStatement[52203-52338]:IfStatement[52211-52346]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52248-52338]:Block[52256-52346]"
  }, {
    "left" : "error(t, INVALID_REGULAR_EXPRESSION_FLAGS, flags);",
    "right" : "error(t, INVALID_REGULAR_EXPRESSION_FLAGS, flags);",
    "info" : "ExpressionStatement[52260-52310]:ExpressionStatement[52268-52318]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[52321-52328]:ReturnStatement[52329-52336]"
  }, {
    "left" : "if (!areSafeFlagsToFold(flags.getString()))",
    "right" : "if (!areSafeFlagsToFold(flags.getString()))",
    "info" : "IfStatement[52347-52420]:IfStatement[52355-52428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52391-52420]:Block[52399-52428]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[52403-52410]:ReturnStatement[52411-52418]"
  }, {
    "left" : "n.removeChild(flags);",
    "right" : "n.removeChild(flags);",
    "info" : "ExpressionStatement[52429-52450]:ExpressionStatement[52437-52458]"
  }, {
    "left" : "regexLiteral = new Node(Token.REGEXP, pattern, flags);",
    "right" : "regexLiteral = new Node(Token.REGEXP, pattern, flags);",
    "info" : "ExpressionStatement[52459-52513]:ExpressionStatement[52467-52521]"
  }, {
    "left" : "parent.replaceChild(n, regexLiteral);",
    "right" : "parent.replaceChild(n, regexLiteral);",
    "info" : "ExpressionStatement[52529-52566]:ExpressionStatement[52537-52574]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[52573-52608]:ExpressionStatement[52581-52616]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53070-53077]:Modifier[53078-53085]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53078-53084]:Modifier[53086-53092]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53085-53092]:PrimitiveType[53093-53100]"
  }, {
    "left" : "areValidRegexpFlags",
    "right" : "areValidRegexpFlags",
    "info" : "SimpleName[53093-53112]:SimpleName[53101-53120]"
  }, {
    "left" : "String flags",
    "right" : "String flags",
    "info" : "SingleVariableDeclaration[53113-53125]:SingleVariableDeclaration[53121-53133]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53127-53185]:Block[53135-53193]"
  }, {
    "left" : "return REGEXP_FLAGS_RE.matcher(flags).matches();",
    "right" : "return REGEXP_FLAGS_RE.matcher(flags).matches();",
    "info" : "ReturnStatement[53133-53181]:ReturnStatement[53141-53189]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53588-53595]:Modifier[53596-53603]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53596-53602]:Modifier[53604-53610]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53603-53610]:PrimitiveType[53611-53618]"
  }, {
    "left" : "areSafeFlagsToFold",
    "right" : "areSafeFlagsToFold",
    "info" : "SimpleName[53611-53629]:SimpleName[53619-53637]"
  }, {
    "left" : "String flags",
    "right" : "String flags",
    "info" : "SingleVariableDeclaration[53630-53642]:SingleVariableDeclaration[53638-53650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53644-53684]:Block[53652-53692]"
  }, {
    "left" : "return flags.indexOf('g') < 0;",
    "right" : "return flags.indexOf('g') < 0;",
    "info" : "ReturnStatement[53650-53680]:ReturnStatement[53658-53688]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53774-53781]:Modifier[53782-53789]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53782-53788]:Modifier[53790-53796]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[53789-53793]:SimpleType[53797-53801]"
  }, {
    "left" : "makeForwardSlashBracketSafe",
    "right" : "makeForwardSlashBracketSafe",
    "info" : "SimpleName[53794-53821]:SimpleName[53802-53829]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[53822-53828]:SingleVariableDeclaration[53830-53836]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53830-54511]:Block[53838-54519]"
  }, {
    "left" : "String s = n.getString();",
    "right" : "String s = n.getString();",
    "info" : "VariableDeclarationStatement[53836-53861]:VariableDeclarationStatement[53844-53869]"
  }, {
    "left" : "StringBuilder sb = null;",
    "right" : "StringBuilder sb = null;",
    "info" : "VariableDeclarationStatement[53908-53932]:VariableDeclarationStatement[53916-53940]"
  }, {
    "left" : "int pos = 0;",
    "right" : "int pos = 0;",
    "info" : "VariableDeclarationStatement[53937-53949]:VariableDeclarationStatement[53945-53957]"
  }, {
    "left" : "for (int i = 0; i < s.length(); ++i)",
    "right" : "for (int i = 0; i < s.length(); ++i)",
    "info" : "ForStatement[53954-54312]:ForStatement[53962-54320]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53991-54312]:Block[53999-54320]"
  }, {
    "left" : "switch (s.charAt(i)) {\n        case '\\\\':  // skip over the next char after a '\\\\'.\n          ++i;\n          break;\n        case '/':  // escape it\n          if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n          sb.append(s, pos, i).append('\\\\');\n          pos = i;\n          break;\n      }",
    "right" : "switch (s.charAt(i)) {\n        case '\\\\':  // skip over the next char after a '\\\\'.\n          ++i;\n          break;\n        case '/':  // escape it\n          if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n          sb.append(s, pos, i).append('\\\\');\n          pos = i;\n          break;\n      }",
    "info" : "SwitchStatement[53999-54306]:SwitchStatement[54007-54314]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[54030-54040]:SwitchCase[54038-54048]"
  }, {
    "left" : "++i;",
    "right" : "++i;",
    "info" : "ExpressionStatement[54093-54097]:ExpressionStatement[54101-54105]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[54108-54114]:BreakStatement[54116-54122]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[54123-54132]:SwitchCase[54131-54140]"
  }, {
    "left" : "if (null == sb)",
    "right" : "if (null == sb)",
    "info" : "IfStatement[54157-54217]:IfStatement[54165-54225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54173-54217]:Block[54181-54225]"
  }, {
    "left" : "sb = new StringBuilder(s.length() + 16);",
    "right" : "sb = new StringBuilder(s.length() + 16);",
    "info" : "ExpressionStatement[54175-54215]:ExpressionStatement[54183-54223]"
  }, {
    "left" : "sb.append(s, pos, i).append('\\\\');",
    "right" : "sb.append(s, pos, i).append('\\\\');",
    "info" : "ExpressionStatement[54228-54262]:ExpressionStatement[54236-54270]"
  }, {
    "left" : "pos = i;",
    "right" : "pos = i;",
    "info" : "ExpressionStatement[54273-54281]:ExpressionStatement[54281-54289]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[54292-54298]:BreakStatement[54300-54306]"
  }, {
    "left" : "if (null == sb)",
    "right" : "if (null == sb)",
    "info" : "IfStatement[54388-54429]:IfStatement[54396-54437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54404-54429]:Block[54412-54437]"
  }, {
    "left" : "return n.cloneTree();",
    "right" : "return n.cloneTree();",
    "info" : "ReturnStatement[54406-54427]:ReturnStatement[54414-54435]"
  }, {
    "left" : "sb.append(s, pos, s.length());",
    "right" : "sb.append(s, pos, s.length());",
    "info" : "ExpressionStatement[54435-54465]:ExpressionStatement[54443-54473]"
  }, {
    "left" : "return Node.newString(sb.toString());",
    "right" : "return Node.newString(sb.toString());",
    "info" : "ReturnStatement[54470-54507]:ReturnStatement[54478-54515]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[54855-54859]:PrimitiveType[54863-54867]"
  }, {
    "left" : "tryFoldLiteralConstructor",
    "right" : "tryFoldLiteralConstructor",
    "info" : "SimpleName[54860-54885]:SimpleName[54868-54893]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[54893-54908]:SingleVariableDeclaration[54901-54916]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[54910-54916]:SingleVariableDeclaration[54918-54924]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[54918-54929]:SingleVariableDeclaration[54926-54937]"
  }, {
    "left" : "String className",
    "right" : "String className",
    "info" : "SingleVariableDeclaration[54931-54947]:SingleVariableDeclaration[54939-54955]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[54949-54957]:SingleVariableDeclaration[54957-54965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54959-55256]:Block[54967-55264]"
  }, {
    "left" : "Scope.Var var = t.getScope().getVar(className);",
    "right" : "Scope.Var var = t.getScope().getVar(className);",
    "info" : "VariableDeclarationStatement[55024-55071]:VariableDeclarationStatement[55032-55079]"
  }, {
    "left" : "if (var != null && var.isLocal())",
    "right" : "if (var != null && var.isLocal())",
    "info" : "IfStatement[55076-55131]:IfStatement[55084-55139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55110-55131]:Block[55118-55139]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[55118-55125]:ReturnStatement[55126-55133]"
  }, {
    "left" : "Node literalNode = new Node(type);",
    "right" : "Node literalNode = new Node(type);",
    "info" : "VariableDeclarationStatement[55137-55171]:VariableDeclarationStatement[55145-55179]"
  }, {
    "left" : "parent.replaceChild(n, literalNode);",
    "right" : "parent.replaceChild(n, literalNode);",
    "info" : "ExpressionStatement[55176-55212]:ExpressionStatement[55184-55220]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[55217-55252]:ExpressionStatement[55225-55260]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[55405-55411]:Modifier[55413-55419]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[55412-55419]:PrimitiveType[55420-55427]"
  }, {
    "left" : "containsUnicodeEscape",
    "right" : "containsUnicodeEscape",
    "info" : "SimpleName[55420-55441]:SimpleName[55428-55449]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[55442-55450]:SingleVariableDeclaration[55450-55458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55452-55866]:Block[55460-55874]"
  }, {
    "left" : "String esc = CodeGenerator.regexpEscape(s);",
    "right" : "String esc = CodeGenerator.regexpEscape(s);",
    "info" : "VariableDeclarationStatement[55458-55501]:VariableDeclarationStatement[55466-55509]"
  }, {
    "left" : "for (int i = -1; (i = esc.indexOf(\"\\\\u\", i + 1)) >= 0)",
    "right" : "for (int i = -1; (i = esc.indexOf(\"\\\\u\", i + 1)) >= 0)",
    "info" : "ForStatement[55506-55844]:ForStatement[55514-55852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55562-55844]:Block[55570-55852]"
  }, {
    "left" : "int nSlashes = 0;",
    "right" : "int nSlashes = 0;",
    "info" : "VariableDeclarationStatement[55570-55587]:VariableDeclarationStatement[55578-55595]"
  }, {
    "left" : "while (i - nSlashes > 0 && '\\\\' == esc.charAt(i - nSlashes - 1))",
    "right" : "while (i - nSlashes > 0 && '\\\\' == esc.charAt(i - nSlashes - 1))",
    "info" : "WhileStatement[55594-55688]:WhileStatement[55602-55696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55659-55688]:Block[55667-55696]"
  }, {
    "left" : "++nSlashes;",
    "right" : "++nSlashes;",
    "info" : "ExpressionStatement[55669-55680]:ExpressionStatement[55677-55688]"
  }, {
    "left" : "if (0 == (nSlashes & 1))",
    "right" : "if (0 == (nSlashes & 1))",
    "info" : "IfStatement[55797-55838]:IfStatement[55805-55846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55822-55838]:Block[55830-55846]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[55824-55836]:ReturnStatement[55832-55844]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[55849-55862]:ReturnStatement[55857-55870]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[55933-55937]:PrimitiveType[55941-55945]"
  }, {
    "left" : "tryFoldWhile",
    "right" : "tryFoldWhile",
    "info" : "SimpleName[55938-55950]:SimpleName[55946-55958]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[55951-55966]:SingleVariableDeclaration[55959-55974]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[55968-55974]:SingleVariableDeclaration[55976-55982]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[55976-55987]:SingleVariableDeclaration[55984-55995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55989-56323]:Block[55997-56331]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.WHILE);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.WHILE);",
    "info" : "ExpressionStatement[55995-56051]:ExpressionStatement[56003-56059]"
  }, {
    "left" : "Node cond = NodeUtil.getConditionExpression(n);",
    "right" : "Node cond = NodeUtil.getConditionExpression(n);",
    "info" : "VariableDeclarationStatement[56056-56103]:VariableDeclarationStatement[56064-56111]"
  }, {
    "left" : "if (!NodeUtil.isLiteralValue(cond) || NodeUtil.getBooleanValue(cond))",
    "right" : "if (!NodeUtil.isLiteralValue(cond) || NodeUtil.getBooleanValue(cond))",
    "info" : "IfStatement[56108-56199]:IfStatement[56116-56207]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56178-56199]:Block[56186-56207]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[56186-56193]:ReturnStatement[56194-56201]"
  }, {
    "left" : "NodeUtil.redeclareVarsInsideBranch(n);",
    "right" : "NodeUtil.redeclareVarsInsideBranch(n);",
    "info" : "ExpressionStatement[56204-56242]:ExpressionStatement[56212-56250]"
  }, {
    "left" : "NodeUtil.removeChild(parent, n);",
    "right" : "NodeUtil.removeChild(parent, n);",
    "info" : "ExpressionStatement[56247-56279]:ExpressionStatement[56255-56287]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[56284-56319]:ExpressionStatement[56292-56327]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[56388-56392]:PrimitiveType[56396-56400]"
  }, {
    "left" : "tryFoldFor",
    "right" : "tryFoldFor",
    "info" : "SimpleName[56393-56403]:SimpleName[56401-56411]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[56404-56419]:SingleVariableDeclaration[56412-56427]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[56421-56427]:SingleVariableDeclaration[56429-56435]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[56429-56440]:SingleVariableDeclaration[56437-56448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56442-56942]:Block[56450-56950]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.FOR);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.FOR);",
    "info" : "ExpressionStatement[56448-56502]:ExpressionStatement[56456-56510]"
  }, {
    "left" : "if (n.getChildCount() != 4)",
    "right" : "if (n.getChildCount() != 4)",
    "info" : "IfStatement[56540-56575]:IfStatement[56548-56583]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[56568-56575]:ReturnStatement[56576-56583]"
  }, {
    "left" : "if (n.getFirstChild().getType() != Token.EMPTY)",
    "right" : "if (n.getFirstChild().getType() != Token.EMPTY)",
    "info" : "IfStatement[56614-56669]:IfStatement[56622-56677]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[56662-56669]:ReturnStatement[56670-56677]"
  }, {
    "left" : "Node cond = NodeUtil.getConditionExpression(n);",
    "right" : "Node cond = NodeUtil.getConditionExpression(n);",
    "info" : "VariableDeclarationStatement[56675-56722]:VariableDeclarationStatement[56683-56730]"
  }, {
    "left" : "if (!NodeUtil.isLiteralValue(cond) || NodeUtil.getBooleanValue(cond))",
    "right" : "if (!NodeUtil.isLiteralValue(cond) || NodeUtil.getBooleanValue(cond))",
    "info" : "IfStatement[56727-56818]:IfStatement[56735-56826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56797-56818]:Block[56805-56826]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[56805-56812]:ReturnStatement[56813-56820]"
  }, {
    "left" : "NodeUtil.redeclareVarsInsideBranch(n);",
    "right" : "NodeUtil.redeclareVarsInsideBranch(n);",
    "info" : "ExpressionStatement[56823-56861]:ExpressionStatement[56831-56869]"
  }, {
    "left" : "NodeUtil.removeChild(parent, n);",
    "right" : "NodeUtil.removeChild(parent, n);",
    "info" : "ExpressionStatement[56866-56898]:ExpressionStatement[56874-56906]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[56903-56938]:ExpressionStatement[56911-56946]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[57138-57142]:PrimitiveType[57146-57150]"
  }, {
    "left" : "tryFoldDo",
    "right" : "tryFoldDo",
    "info" : "SimpleName[57143-57152]:SimpleName[57151-57160]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[57153-57168]:SingleVariableDeclaration[57161-57176]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[57170-57176]:SingleVariableDeclaration[57178-57184]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[57178-57189]:SingleVariableDeclaration[57186-57197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57191-57798]:Block[57199-57806]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.DO);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.DO);",
    "info" : "ExpressionStatement[57197-57250]:ExpressionStatement[57205-57258]"
  }, {
    "left" : "Node cond = NodeUtil.getConditionExpression(n);",
    "right" : "Node cond = NodeUtil.getConditionExpression(n);",
    "info" : "VariableDeclarationStatement[57256-57303]:VariableDeclarationStatement[57264-57311]"
  }, {
    "left" : "if (!NodeUtil.isLiteralValue(cond) || NodeUtil.getBooleanValue(cond))",
    "right" : "if (!NodeUtil.isLiteralValue(cond) || NodeUtil.getBooleanValue(cond))",
    "info" : "IfStatement[57308-57399]:IfStatement[57316-57407]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57378-57399]:Block[57386-57407]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[57386-57393]:ReturnStatement[57394-57401]"
  }, {
    "left" : "if (hasBreakOrContinue(n))",
    "right" : "if (hasBreakOrContinue(n))",
    "info" : "IfStatement[57531-57579]:IfStatement[57539-57587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57558-57579]:Block[57566-57587]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[57566-57573]:ReturnStatement[57574-57581]"
  }, {
    "left" : "Preconditions.checkState(\n        NodeUtil.isControlStructureCodeBlock(n, n.getFirstChild()));",
    "right" : "Preconditions.checkState(\n        NodeUtil.isControlStructureCodeBlock(n, n.getFirstChild()));",
    "info" : "ExpressionStatement[57585-57679]:ExpressionStatement[57593-57687]"
  }, {
    "left" : "Node block = n.removeFirstChild();",
    "right" : "Node block = n.removeFirstChild();",
    "info" : "VariableDeclarationStatement[57684-57718]:VariableDeclarationStatement[57692-57726]"
  }, {
    "left" : "parent.replaceChild(n, block);",
    "right" : "parent.replaceChild(n, block);",
    "info" : "ExpressionStatement[57724-57754]:ExpressionStatement[57732-57762]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[57759-57794]:ExpressionStatement[57767-57802]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[57819-57826]:PrimitiveType[57827-57834]"
  }, {
    "left" : "hasBreakOrContinue",
    "right" : "hasBreakOrContinue",
    "info" : "SimpleName[57827-57845]:SimpleName[57835-57853]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[57846-57852]:SingleVariableDeclaration[57854-57860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57854-58319]:Block[57862-58327]"
  }, {
    "left" : "return NodeUtil.has(\n        n,\n        Predicates.<Node>or(\n            new NodeUtil.MatchNodeType(Token.BREAK),\n            new NodeUtil.MatchNodeType(Token.CONTINUE)),\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
    "right" : "return NodeUtil.has(\n        n,\n        Predicates.<Node>or(\n            new NodeUtil.MatchNodeType(Token.BREAK),\n            new NodeUtil.MatchNodeType(Token.CONTINUE)),\n        Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));",
    "info" : "ReturnStatement[58070-58315]:ReturnStatement[58078-58323]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[58680-58684]:PrimitiveType[58688-58692]"
  }, {
    "left" : "tryMinimizeCondition",
    "right" : "tryMinimizeCondition",
    "info" : "SimpleName[58685-58705]:SimpleName[58693-58713]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[58706-58721]:SingleVariableDeclaration[58714-58729]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[58723-58729]:SingleVariableDeclaration[58731-58737]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[58731-58742]:SingleVariableDeclaration[58739-58750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58744-60848]:Block[58752-60856]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.NOT:\n        Node first = n.getFirstChild();\n        switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              n = newRoot; // continue from here.\n              t.getCompiler().reportCodeChange();\n\n              // The child has moved up, to minimize it recurse.\n              tryMinimizeCondition(t, n, parent);\n              return;\n            }\n          case Token.AND:\n          case Token.OR: {\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              if (leftParent.getType() != Token.NOT\n                  || rightParent.getType() != Token.NOT) {\n                // No NOTs to elminate.\n                break;\n              }\n              Node left = leftParent.removeFirstChild();\n              Node right = rightParent.removeFirstChild();\n\n              int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              n = newRoot; // continue from here.\n              t.getCompiler().reportCodeChange();\n\n              // Unlike the NOT case above, we know that AND and OR are\n              // valid root to check minimize so just break out and check\n              // the children.\n            }\n            break;\n        }\n        break;\n\n      case Token.OR:\n      case Token.AND:\n        // check the children.\n        break;\n\n      default:\n        // if(true) --> if(1)\n        if (NodeUtil.isLiteralValue(n)) {\n          boolean result = NodeUtil.getBooleanValue(n);\n          int equivalentResult = result ? 1 : 0;\n          maybeReplaceChildWithNumber(t, n, parent, equivalentResult);\n        }\n        // We can't do anything else currently.\n        return;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.NOT:\n        Node first = n.getFirstChild();\n        switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              n = newRoot; // continue from here.\n              t.getCompiler().reportCodeChange();\n\n              // The child has moved up, to minimize it recurse.\n              tryMinimizeCondition(t, n, parent);\n              return;\n            }\n          case Token.AND:\n          case Token.OR: {\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              if (leftParent.getType() != Token.NOT\n                  || rightParent.getType() != Token.NOT) {\n                // No NOTs to elminate.\n                break;\n              }\n              Node left = leftParent.removeFirstChild();\n              Node right = rightParent.removeFirstChild();\n\n              int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              n = newRoot; // continue from here.\n              t.getCompiler().reportCodeChange();\n\n              // Unlike the NOT case above, we know that AND and OR are\n              // valid root to check minimize so just break out and check\n              // the children.\n            }\n            break;\n        }\n        break;\n\n      case Token.OR:\n      case Token.AND:\n        // check the children.\n        break;\n\n      default:\n        // if(true) --> if(1)\n        if (NodeUtil.isLiteralValue(n)) {\n          boolean result = NodeUtil.getBooleanValue(n);\n          int equivalentResult = result ? 1 : 0;\n          maybeReplaceChildWithNumber(t, n, parent, equivalentResult);\n        }\n        // We can't do anything else currently.\n        return;\n    }",
    "info" : "SwitchStatement[58751-60679]:SwitchStatement[58759-60687]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[58780-58795]:SwitchCase[58788-58803]"
  }, {
    "left" : "Node first = n.getFirstChild();",
    "right" : "Node first = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[58804-58835]:VariableDeclarationStatement[58812-58843]"
  }, {
    "left" : "switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              n = newRoot; // continue from here.\n              t.getCompiler().reportCodeChange();\n\n              // The child has moved up, to minimize it recurse.\n              tryMinimizeCondition(t, n, parent);\n              return;\n            }\n          case Token.AND:\n          case Token.OR: {\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              if (leftParent.getType() != Token.NOT\n                  || rightParent.getType() != Token.NOT) {\n                // No NOTs to elminate.\n                break;\n              }\n              Node left = leftParent.removeFirstChild();\n              Node right = rightParent.removeFirstChild();\n\n              int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              n = newRoot; // continue from here.\n              t.getCompiler().reportCodeChange();\n\n              // Unlike the NOT case above, we know that AND and OR are\n              // valid root to check minimize so just break out and check\n              // the children.\n            }\n            break;\n        }",
    "right" : "switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              n = newRoot; // continue from here.\n              t.getCompiler().reportCodeChange();\n\n              // The child has moved up, to minimize it recurse.\n              tryMinimizeCondition(t, n, parent);\n              return;\n            }\n          case Token.AND:\n          case Token.OR: {\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              if (leftParent.getType() != Token.NOT\n                  || rightParent.getType() != Token.NOT) {\n                // No NOTs to elminate.\n                break;\n              }\n              Node left = leftParent.removeFirstChild();\n              Node right = rightParent.removeFirstChild();\n\n              int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              n = newRoot; // continue from here.\n              t.getCompiler().reportCodeChange();\n\n              // Unlike the NOT case above, we know that AND and OR are\n              // valid root to check minimize so just break out and check\n              // the children.\n            }\n            break;\n        }",
    "info" : "SwitchStatement[58844-60230]:SwitchStatement[58852-60238]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[58881-58896]:SwitchCase[58889-58904]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58897-59252]:Block[58905-59260]"
  }, {
    "left" : "Node newRoot = first.removeFirstChild();",
    "right" : "Node newRoot = first.removeFirstChild();",
    "info" : "VariableDeclarationStatement[58913-58953]:VariableDeclarationStatement[58921-58961]"
  }, {
    "left" : "parent.replaceChild(n, newRoot);",
    "right" : "parent.replaceChild(n, newRoot);",
    "info" : "ExpressionStatement[58968-59000]:ExpressionStatement[58976-59008]"
  }, {
    "left" : "n = newRoot;",
    "right" : "n = newRoot;",
    "info" : "ExpressionStatement[59015-59027]:ExpressionStatement[59023-59035]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[59065-59100]:ExpressionStatement[59073-59108]"
  }, {
    "left" : "tryMinimizeCondition(t, n, parent);",
    "right" : "tryMinimizeCondition(t, n, parent);",
    "info" : "ExpressionStatement[59181-59216]:ExpressionStatement[59189-59224]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[59231-59238]:ReturnStatement[59239-59246]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[59263-59278]:SwitchCase[59271-59286]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[59289-59303]:SwitchCase[59297-59311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59304-60201]:Block[59312-60209]"
  }, {
    "left" : "Node leftParent = first.getFirstChild();",
    "right" : "Node leftParent = first.getFirstChild();",
    "info" : "VariableDeclarationStatement[59320-59360]:VariableDeclarationStatement[59328-59368]"
  }, {
    "left" : "Node rightParent = first.getLastChild();",
    "right" : "Node rightParent = first.getLastChild();",
    "info" : "VariableDeclarationStatement[59375-59415]:VariableDeclarationStatement[59383-59423]"
  }, {
    "left" : "if (leftParent.getType() != Token.NOT\n                  || rightParent.getType() != Token.NOT)",
    "right" : "if (leftParent.getType() != Token.NOT\n                  || rightParent.getType() != Token.NOT)",
    "info" : "IfStatement[59430-59605]:IfStatement[59438-59613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59525-59605]:Block[59533-59613]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59583-59589]:BreakStatement[59591-59597]"
  }, {
    "left" : "Node left = leftParent.removeFirstChild();",
    "right" : "Node left = leftParent.removeFirstChild();",
    "info" : "VariableDeclarationStatement[59620-59662]:VariableDeclarationStatement[59628-59670]"
  }, {
    "left" : "Node right = rightParent.removeFirstChild();",
    "right" : "Node right = rightParent.removeFirstChild();",
    "info" : "VariableDeclarationStatement[59677-59721]:VariableDeclarationStatement[59685-59729]"
  }, {
    "left" : "int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;",
    "right" : "int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;",
    "info" : "VariableDeclarationStatement[59737-59803]:VariableDeclarationStatement[59745-59811]"
  }, {
    "left" : "Node newRoot = new Node(newOp, left, right);",
    "right" : "Node newRoot = new Node(newOp, left, right);",
    "info" : "VariableDeclarationStatement[59818-59862]:VariableDeclarationStatement[59826-59870]"
  }, {
    "left" : "parent.replaceChild(n, newRoot);",
    "right" : "parent.replaceChild(n, newRoot);",
    "info" : "ExpressionStatement[59877-59909]:ExpressionStatement[59885-59917]"
  }, {
    "left" : "n = newRoot;",
    "right" : "n = newRoot;",
    "info" : "ExpressionStatement[59924-59936]:ExpressionStatement[59932-59944]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[59974-60009]:ExpressionStatement[59982-60017]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[60214-60220]:BreakStatement[60222-60228]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[60239-60245]:BreakStatement[60247-60253]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[60253-60267]:SwitchCase[60261-60275]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[60274-60289]:SwitchCase[60282-60297]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[60329-60335]:BreakStatement[60337-60343]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[60343-60351]:SwitchCase[60351-60359]"
  }, {
    "left" : "if (NodeUtil.isLiteralValue(n))",
    "right" : "if (NodeUtil.isLiteralValue(n))",
    "info" : "IfStatement[60390-60609]:IfStatement[60398-60617]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60422-60609]:Block[60430-60617]"
  }, {
    "left" : "boolean result = NodeUtil.getBooleanValue(n);",
    "right" : "boolean result = NodeUtil.getBooleanValue(n);",
    "info" : "VariableDeclarationStatement[60434-60479]:VariableDeclarationStatement[60442-60487]"
  }, {
    "left" : "int equivalentResult = result ? 1 : 0;",
    "right" : "int equivalentResult = result ? 1 : 0;",
    "info" : "VariableDeclarationStatement[60490-60528]:VariableDeclarationStatement[60498-60536]"
  }, {
    "left" : "maybeReplaceChildWithNumber(t, n, parent, equivalentResult);",
    "right" : "maybeReplaceChildWithNumber(t, n, parent, equivalentResult);",
    "info" : "ExpressionStatement[60539-60599]:ExpressionStatement[60547-60607]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[60666-60673]:ReturnStatement[60674-60681]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null)",
    "right" : "for (Node c = n.getFirstChild(); c != null)",
    "info" : "ForStatement[60685-60844]:ForStatement[60693-60852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60731-60844]:Block[60739-60852]"
  }, {
    "left" : "Node next = c.getNext();",
    "right" : "Node next = c.getNext();",
    "info" : "VariableDeclarationStatement[60739-60763]:VariableDeclarationStatement[60747-60771]"
  }, {
    "left" : "tryMinimizeCondition(t, c, n);",
    "right" : "tryMinimizeCondition(t, c, n);",
    "info" : "ExpressionStatement[60792-60822]:ExpressionStatement[60800-60830]"
  }, {
    "left" : "c = next;",
    "right" : "c = next;",
    "info" : "ExpressionStatement[60829-60838]:ExpressionStatement[60837-60846]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[60905-60912]:Modifier[60913-60920]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[60913-60917]:PrimitiveType[60921-60925]"
  }, {
    "left" : "tryFoldForCondition",
    "right" : "tryFoldForCondition",
    "info" : "SimpleName[60918-60937]:SimpleName[60926-60945]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[60938-60944]:SingleVariableDeclaration[60946-60952]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[60946-60957]:SingleVariableDeclaration[60954-60965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60959-61180]:Block[60967-61188]"
  }, {
    "left" : "if (NodeUtil.isLiteralValue(n))",
    "right" : "if (NodeUtil.isLiteralValue(n))",
    "info" : "IfStatement[60965-61176]:IfStatement[60973-61184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60997-61176]:Block[61005-61184]"
  }, {
    "left" : "boolean result = NodeUtil.getBooleanValue(n);",
    "right" : "boolean result = NodeUtil.getBooleanValue(n);",
    "info" : "VariableDeclarationStatement[61005-61050]:VariableDeclarationStatement[61013-61058]"
  }, {
    "left" : "if (result)",
    "right" : "if (result)",
    "info" : "IfStatement[61057-61170]:IfStatement[61065-61178]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61069-61170]:Block[61077-61178]"
  }, {
    "left" : "parent.replaceChild(n, new Node(Token.EMPTY));",
    "right" : "parent.replaceChild(n, new Node(Token.EMPTY));",
    "info" : "ExpressionStatement[61079-61125]:ExpressionStatement[61087-61133]"
  }, {
    "left" : "compiler.reportCodeChange();",
    "right" : "compiler.reportCodeChange();",
    "info" : "ExpressionStatement[61134-61162]:ExpressionStatement[61142-61170]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61305-61312]:Modifier[61313-61320]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[61313-61317]:PrimitiveType[61321-61325]"
  }, {
    "left" : "maybeReplaceChildWithNumber",
    "right" : "maybeReplaceChildWithNumber",
    "info" : "SimpleName[61318-61345]:SimpleName[61326-61353]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[61346-61361]:SingleVariableDeclaration[61354-61369]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[61363-61369]:SingleVariableDeclaration[61371-61377]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[61371-61382]:SingleVariableDeclaration[61379-61390]"
  }, {
    "left" : "int num",
    "right" : "int num",
    "info" : "SingleVariableDeclaration[61390-61397]:SingleVariableDeclaration[61398-61405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61399-61568]:Block[61407-61576]"
  }, {
    "left" : "Node newNode = Node.newNumber(num);",
    "right" : "Node newNode = Node.newNumber(num);",
    "info" : "VariableDeclarationStatement[61405-61440]:VariableDeclarationStatement[61413-61448]"
  }, {
    "left" : "if(!newNode.isEquivalentTo(n))",
    "right" : "if(!newNode.isEquivalentTo(n))",
    "info" : "IfStatement[61445-61564]:IfStatement[61453-61572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61476-61564]:Block[61484-61572]"
  }, {
    "left" : "parent.replaceChild(n, newNode);",
    "right" : "parent.replaceChild(n, newNode);",
    "info" : "ExpressionStatement[61484-61516]:ExpressionStatement[61492-61524]"
  }, {
    "left" : "t.getCompiler().reportCodeChange();",
    "right" : "t.getCompiler().reportCodeChange();",
    "info" : "ExpressionStatement[61523-61558]:ExpressionStatement[61531-61566]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61681-61688]:Modifier[61689-61696]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[61689-61696]:PrimitiveType[61697-61704]"
  }, {
    "left" : "isExpressBlock",
    "right" : "isExpressBlock",
    "info" : "SimpleName[61697-61711]:SimpleName[61705-61719]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[61712-61718]:SingleVariableDeclaration[61720-61726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61720-61886]:Block[61728-61894]"
  }, {
    "left" : "if (n.getType() == Token.BLOCK)",
    "right" : "if (n.getType() == Token.BLOCK)",
    "info" : "IfStatement[61726-61863]:IfStatement[61734-61871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61758-61863]:Block[61766-61871]"
  }, {
    "left" : "if (n.hasOneChild())",
    "right" : "if (n.hasOneChild())",
    "info" : "IfStatement[61766-61857]:IfStatement[61774-61865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61787-61857]:Block[61795-61865]"
  }, {
    "left" : "return NodeUtil.isExpressionNode(n.getFirstChild());",
    "right" : "return NodeUtil.isExpressionNode(n.getFirstChild());",
    "info" : "ReturnStatement[61797-61849]:ReturnStatement[61805-61857]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[61869-61882]:ReturnStatement[61877-61890]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61936-61943]:Modifier[61944-61951]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[61944-61948]:SimpleType[61952-61956]"
  }, {
    "left" : "getBlockExpression",
    "right" : "getBlockExpression",
    "info" : "SimpleName[61949-61967]:SimpleName[61957-61975]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[61968-61974]:SingleVariableDeclaration[61976-61982]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61976-62060]:Block[61984-62068]"
  }, {
    "left" : "Preconditions.checkState(isExpressBlock(n));",
    "right" : "Preconditions.checkState(isExpressBlock(n));",
    "info" : "ExpressionStatement[61982-62026]:ExpressionStatement[61990-62034]"
  }, {
    "left" : "return n.getFirstChild();",
    "right" : "return n.getFirstChild();",
    "info" : "ReturnStatement[62031-62056]:ReturnStatement[62039-62064]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[62169-62176]:Modifier[62177-62184]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[62177-62184]:PrimitiveType[62185-62192]"
  }, {
    "left" : "isReturnExpressBlock",
    "right" : "isReturnExpressBlock",
    "info" : "SimpleName[62185-62205]:SimpleName[62193-62213]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[62206-62212]:SingleVariableDeclaration[62214-62220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62214-62454]:Block[62222-62462]"
  }, {
    "left" : "if (n.getType() == Token.BLOCK)",
    "right" : "if (n.getType() == Token.BLOCK)",
    "info" : "IfStatement[62220-62431]:IfStatement[62228-62439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62252-62431]:Block[62260-62439]"
  }, {
    "left" : "if (n.hasOneChild())",
    "right" : "if (n.hasOneChild())",
    "info" : "IfStatement[62260-62425]:IfStatement[62268-62433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62281-62425]:Block[62289-62433]"
  }, {
    "left" : "Node first = n.getFirstChild();",
    "right" : "Node first = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[62291-62322]:VariableDeclarationStatement[62299-62330]"
  }, {
    "left" : "if (first.getType() == Token.RETURN)",
    "right" : "if (first.getType() == Token.RETURN)",
    "info" : "IfStatement[62331-62417]:IfStatement[62339-62425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62368-62417]:Block[62376-62425]"
  }, {
    "left" : "return first.hasOneChild();",
    "right" : "return first.hasOneChild();",
    "info" : "ReturnStatement[62380-62407]:ReturnStatement[62388-62415]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[62437-62450]:ReturnStatement[62445-62458]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[62526-62533]:Modifier[62534-62541]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[62534-62538]:SimpleType[62542-62546]"
  }, {
    "left" : "getBlockReturnExpression",
    "right" : "getBlockReturnExpression",
    "info" : "SimpleName[62539-62563]:SimpleName[62547-62571]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[62564-62570]:SingleVariableDeclaration[62572-62578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62572-62678]:Block[62580-62686]"
  }, {
    "left" : "Preconditions.checkState(isReturnExpressBlock(n));",
    "right" : "Preconditions.checkState(isReturnExpressBlock(n));",
    "info" : "ExpressionStatement[62578-62628]:ExpressionStatement[62586-62636]"
  }, {
    "left" : "return n.getFirstChild().getFirstChild();",
    "right" : "return n.getFirstChild().getFirstChild();",
    "info" : "ReturnStatement[62633-62674]:ReturnStatement[62641-62682]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[62816-62823]:Modifier[62824-62831]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[62824-62831]:PrimitiveType[62832-62839]"
  }, {
    "left" : "isVarBlock",
    "right" : "isVarBlock",
    "info" : "SimpleName[62832-62842]:SimpleName[62840-62850]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[62843-62849]:SingleVariableDeclaration[62851-62857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62851-63088]:Block[62859-63096]"
  }, {
    "left" : "if (n.getType() == Token.BLOCK)",
    "right" : "if (n.getType() == Token.BLOCK)",
    "info" : "IfStatement[62857-63065]:IfStatement[62865-63073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62889-63065]:Block[62897-63073]"
  }, {
    "left" : "if (n.hasOneChild())",
    "right" : "if (n.hasOneChild())",
    "info" : "IfStatement[62897-63059]:IfStatement[62905-63067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62918-63059]:Block[62926-63067]"
  }, {
    "left" : "Node first = n.getFirstChild();",
    "right" : "Node first = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[62928-62959]:VariableDeclarationStatement[62936-62967]"
  }, {
    "left" : "if (first.getType() == Token.VAR)",
    "right" : "if (first.getType() == Token.VAR)",
    "info" : "IfStatement[62968-63051]:IfStatement[62976-63059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63002-63051]:Block[63010-63059]"
  }, {
    "left" : "return first.hasOneChild();",
    "right" : "return first.hasOneChild();",
    "info" : "ReturnStatement[63014-63041]:ReturnStatement[63022-63049]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[63071-63084]:ReturnStatement[63079-63092]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[63131-63138]:Modifier[63139-63146]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[63139-63143]:SimpleType[63147-63151]"
  }, {
    "left" : "getBlockVar",
    "right" : "getBlockVar",
    "info" : "SimpleName[63144-63155]:SimpleName[63152-63163]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[63156-63162]:SingleVariableDeclaration[63164-63170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63164-63244]:Block[63172-63252]"
  }, {
    "left" : "Preconditions.checkState(isVarBlock(n));",
    "right" : "Preconditions.checkState(isVarBlock(n));",
    "info" : "ExpressionStatement[63170-63210]:ExpressionStatement[63178-63218]"
  }, {
    "left" : "return n.getFirstChild();",
    "right" : "return n.getFirstChild();",
    "info" : "ReturnStatement[63215-63240]:ReturnStatement[63223-63248]"
  } ]
}