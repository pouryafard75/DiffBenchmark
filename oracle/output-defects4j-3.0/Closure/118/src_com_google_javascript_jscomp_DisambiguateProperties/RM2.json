{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DisambiguateProperties",
      "right" : "DisambiguateProperties",
      "info" : "TypeDeclaration[2224-39863]:TypeDeclaration[2224-39931]"
    }, {
      "left" : "private static final int MAX_INVALDIATION_WARNINGS_PER_PROPERTY = 10;",
      "right" : "private static final int MAX_INVALDIATION_WARNINGS_PER_PROPERTY = 10;",
      "info" : "FieldDeclaration[3035-3104]:FieldDeclaration[3035-3104]"
    }, {
      "left" : "private static final Logger logger = Logger.getLogger(\n      DisambiguateProperties.class.getName());",
      "right" : "private static final Logger logger = Logger.getLogger(\n      DisambiguateProperties.class.getName());",
      "info" : "FieldDeclaration[3108-3209]:FieldDeclaration[3108-3209]"
    }, {
      "left" : "Warnings",
      "right" : "Warnings",
      "info" : "TypeDeclaration[3213-3746]:TypeDeclaration[3213-3746]"
    }, {
      "left" : "static final DiagnosticType INVALIDATION = DiagnosticType.disabled(\n        \"JSC_INVALIDATION\",\n        \"Property disambiguator skipping all instances of property {0} \"\n        + \"because of type {1} node {2}. {3}\");",
      "right" : "static final DiagnosticType INVALIDATION = DiagnosticType.disabled(\n        \"JSC_INVALIDATION\",\n        \"Property disambiguator skipping all instances of property {0} \"\n        + \"because of type {1} node {2}. {3}\");",
      "info" : "FieldDeclaration[3312-3528]:FieldDeclaration[3312-3528]"
    }, {
      "left" : "static final DiagnosticType INVALIDATION_ON_TYPE = DiagnosticType.disabled(\n        \"JSC_INVALIDATION_TYPE\",\n        \"Property disambiguator skipping instances of property {0} \"\n        + \"on type {1}. {2}\");",
      "right" : "static final DiagnosticType INVALIDATION_ON_TYPE = DiagnosticType.disabled(\n        \"JSC_INVALIDATION_TYPE\",\n        \"Property disambiguator skipping instances of property {0} \"\n        + \"on type {1}. {2}\");",
      "info" : "FieldDeclaration[3534-3742]:FieldDeclaration[3534-3742]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[3750-3790]:FieldDeclaration[3750-3790]"
    }, {
      "left" : "private final TypeSystem<T> typeSystem;",
      "right" : "private final TypeSystem<T> typeSystem;",
      "info" : "FieldDeclaration[3793-3832]:FieldDeclaration[3793-3832]"
    }, {
      "left" : "private Multimap<Object, JSError> invalidationMap;",
      "right" : "private Multimap<Object, JSError> invalidationMap;",
      "info" : "FieldDeclaration[3836-4060]:FieldDeclaration[3836-4060]"
    }, {
      "left" : "private final Map<String, CheckLevel> propertiesToErrorFor;",
      "right" : "private final Map<String, CheckLevel> propertiesToErrorFor;",
      "info" : "FieldDeclaration[4064-4566]:FieldDeclaration[4064-4566]"
    }, {
      "left" : "Property",
      "right" : "Property",
      "info" : "TypeDeclaration[4570-9687]:TypeDeclaration[4570-9687]"
    }, {
      "left" : "final String name;",
      "right" : "final String name;",
      "info" : "FieldDeclaration[4599-4654]:FieldDeclaration[4599-4654]"
    }, {
      "left" : "private UnionFind<T> types;",
      "right" : "private UnionFind<T> types;",
      "info" : "FieldDeclaration[4660-4764]:FieldDeclaration[4660-4764]"
    }, {
      "left" : "Set<T> typesToSkip = Sets.newHashSet();",
      "right" : "Set<T> typesToSkip = Sets.newHashSet();",
      "info" : "FieldDeclaration[4770-4968]:FieldDeclaration[4770-4968]"
    }, {
      "left" : "boolean skipRenaming;",
      "right" : "boolean skipRenaming;",
      "info" : "FieldDeclaration[4974-5124]:FieldDeclaration[4974-5124]"
    }, {
      "left" : "Set<Node> renameNodes = Sets.newHashSet();",
      "right" : "Set<Node> renameNodes = Sets.newHashSet();",
      "info" : "FieldDeclaration[5130-5231]:FieldDeclaration[5130-5231]"
    }, {
      "left" : "final Map<Node, T> rootTypes = Maps.newHashMap();",
      "right" : "final Map<Node, T> rootTypes = Maps.newHashMap();",
      "info" : "FieldDeclaration[5237-5503]:FieldDeclaration[5237-5503]"
    }, {
      "left" : "Property(String name)",
      "right" : "Property(String name)",
      "info" : "MethodDeclaration[5509-5562]:MethodDeclaration[5509-5562]"
    }, {
      "left" : "UnionFind<T> getTypes()",
      "right" : "UnionFind<T> getTypes()",
      "info" : "MethodDeclaration[5568-5762]:MethodDeclaration[5568-5762]"
    }, {
      "left" : "boolean addType(T type, T top, T relatedType)",
      "right" : "boolean addType(T type, T top, T relatedType)",
      "info" : "MethodDeclaration[5768-6531]:MethodDeclaration[5768-6531]"
    }, {
      "left" : "void addTypeToSkip(T type)",
      "right" : "void addTypeToSkip(T type)",
      "info" : "MethodDeclaration[6537-6790]:MethodDeclaration[6537-6790]"
    }, {
      "left" : "void expandTypesToSkip()",
      "right" : "void expandTypesToSkip()",
      "info" : "MethodDeclaration[6796-8229]:MethodDeclaration[6796-8229]"
    }, {
      "left" : "boolean shouldRename()",
      "right" : "boolean shouldRename()",
      "info" : "MethodDeclaration[8235-8440]:MethodDeclaration[8235-8440]"
    }, {
      "left" : "boolean shouldRename(T type)",
      "right" : "boolean shouldRename(T type)",
      "info" : "MethodDeclaration[8446-8742]:MethodDeclaration[8446-8742]"
    }, {
      "left" : "boolean invalidate()",
      "right" : "boolean invalidate()",
      "info" : "MethodDeclaration[8748-9008]:MethodDeclaration[8748-9008]"
    }, {
      "left" : "boolean scheduleRenaming(Node node, T type)",
      "right" : "boolean scheduleRenaming(Node node, T type)",
      "info" : "MethodDeclaration[9014-9683]:MethodDeclaration[9014-9683]"
    }, {
      "left" : "private Map<String, Property> properties = Maps.newHashMap();",
      "right" : "private Map<String, Property> properties = Maps.newHashMap();",
      "info" : "FieldDeclaration[9691-9752]:FieldDeclaration[9691-9752]"
    }, {
      "left" : "static DisambiguateProperties<JSType> forJSTypeSystem(\n      AbstractCompiler compiler,\n      Map<String, CheckLevel> propertiesToErrorFor)",
      "right" : "static DisambiguateProperties<JSType> forJSTypeSystem(\n      AbstractCompiler compiler,\n      Map<String, CheckLevel> propertiesToErrorFor)",
      "info" : "MethodDeclaration[9756-10017]:MethodDeclaration[9756-10017]"
    }, {
      "left" : "static DisambiguateProperties<ConcreteType> forConcreteTypeSystem(\n      AbstractCompiler compiler, TightenTypes tt,\n      Map<String, CheckLevel> propertiesToErrorFor)",
      "right" : "static DisambiguateProperties<ConcreteType> forConcreteTypeSystem(\n      AbstractCompiler compiler, TightenTypes tt,\n      Map<String, CheckLevel> propertiesToErrorFor)",
      "info" : "MethodDeclaration[10021-10361]:MethodDeclaration[10021-10361]"
    }, {
      "left" : "private DisambiguateProperties(AbstractCompiler compiler,\n      TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor)",
      "right" : "private DisambiguateProperties(AbstractCompiler compiler,\n      TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor)",
      "info" : "MethodDeclaration[10365-10941]:MethodDeclaration[10365-10941]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[10945-11456]:MethodDeclaration[10945-11456]"
    }, {
      "left" : "private void recordInvalidationError(JSType t, JSError error)",
      "right" : "private void recordInvalidationError(JSType t, JSError error)",
      "info" : "MethodDeclaration[11460-11650]:MethodDeclaration[11460-11650]"
    }, {
      "left" : "private void addInvalidatingType(JSType type, JSError error)",
      "right" : "private void addInvalidatingType(JSType type, JSError error)",
      "info" : "MethodDeclaration[11654-12522]:MethodDeclaration[11654-12522]"
    }, {
      "left" : "protected Property getProperty(String name)",
      "right" : "protected Property getProperty(String name)",
      "info" : "MethodDeclaration[12527-12780]:MethodDeclaration[12527-12780]"
    }, {
      "left" : "T getTypeWithProperty(String field, T type)",
      "right" : "T getTypeWithProperty(String field, T type)",
      "info" : "MethodDeclaration[12784-12918]:MethodDeclaration[12784-12918]"
    }, {
      "left" : "AbstractScopingCallback",
      "right" : "AbstractScopingCallback",
      "info" : "TypeDeclaration[12922-13730]:TypeDeclaration[12922-13730]"
    }, {
      "left" : "protected final Stack<StaticScope<T>> scopes =\n        new Stack<StaticScope<T>>();",
      "right" : "protected final Stack<StaticScope<T>> scopes =\n        new Stack<StaticScope<T>>();",
      "info" : "FieldDeclaration[13065-13148]:FieldDeclaration[13065-13148]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[13154-13262]:MethodDeclaration[13154-13262]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[13268-13499]:MethodDeclaration[13268-13499]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[13505-13585]:MethodDeclaration[13505-13585]"
    }, {
      "left" : "protected StaticScope<T> getScope()",
      "right" : "protected StaticScope<T> getScope()",
      "info" : "MethodDeclaration[13591-13726]:MethodDeclaration[13591-13726]"
    }, {
      "left" : "FindExternProperties",
      "right" : "FindExternProperties",
      "info" : "TypeDeclaration[13734-14856]:TypeDeclaration[13734-14856]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[13960-14852]:MethodDeclaration[13960-14852]"
    }, {
      "left" : "FindRenameableProperties",
      "right" : "FindRenameableProperties",
      "info" : "TypeDeclaration[14860-19795]:TypeDeclaration[14860-19863]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[15056-15264]:MethodDeclaration[15056-15264]"
    }, {
      "left" : "private void handleGetProp(NodeTraversal t, Node n)",
      "right" : "private void handleGetProp(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[15270-16910]:MethodDeclaration[15270-16910]"
    }, {
      "left" : "private void handleObjectLit(NodeTraversal t, Node n)",
      "right" : "private void handleObjectLit(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[16916-17920]:MethodDeclaration[16916-17988]"
    }, {
      "left" : "private void printErrorLocations(List<String> errors, JSType t)",
      "right" : "private void printErrorLocations(List<String> errors, JSType t)",
      "info" : "MethodDeclaration[17926-18500]:MethodDeclaration[17994-18568]"
    }, {
      "left" : "private T processProperty(\n        NodeTraversal t, Property prop, T type, T relatedType)",
      "right" : "private T processProperty(\n        NodeTraversal t, Property prop, T type, T relatedType)",
      "info" : "MethodDeclaration[18506-19791]:MethodDeclaration[18574-19859]"
    }, {
      "left" : "void renameProperties()",
      "right" : "void renameProperties()",
      "info" : "MethodDeclaration[19799-21746]:MethodDeclaration[19867-21814]"
    }, {
      "left" : "private Map<T, String> buildPropNames(UnionFind<T> types, String name)",
      "right" : "private Map<T, String> buildPropNames(UnionFind<T> types, String name)",
      "info" : "MethodDeclaration[21750-22543]:MethodDeclaration[21818-22611]"
    }, {
      "left" : "Multimap<String, Collection<T>> getRenamedTypesForTesting()",
      "right" : "Multimap<String, Collection<T>> getRenamedTypesForTesting()",
      "info" : "MethodDeclaration[22547-23144]:MethodDeclaration[22615-23212]"
    }, {
      "left" : "TypeSystem",
      "right" : "TypeSystem",
      "info" : "TypeDeclaration[23148-26005]:TypeDeclaration[23216-26073]"
    }, {
      "left" : "StaticScope<T> getRootScope();",
      "right" : "StaticScope<T> getRootScope();",
      "info" : "MethodDeclaration[23387-23489]:MethodDeclaration[23455-23557]"
    }, {
      "left" : "StaticScope<T> getFunctionScope(Node node);",
      "right" : "StaticScope<T> getFunctionScope(Node node);",
      "info" : "MethodDeclaration[23495-23607]:MethodDeclaration[23563-23675]"
    }, {
      "left" : "T getType(StaticScope<T> scope, Node node, String prop);",
      "right" : "T getType(StaticScope<T> scope, Node node, String prop);",
      "info" : "MethodDeclaration[23613-24064]:MethodDeclaration[23681-24132]"
    }, {
      "left" : "boolean isInvalidatingType(T type);",
      "right" : "boolean isInvalidatingType(T type);",
      "info" : "MethodDeclaration[24070-24388]:MethodDeclaration[24138-24456]"
    }, {
      "left" : "void addInvalidatingType(JSType type);",
      "right" : "void addInvalidatingType(JSType type);",
      "info" : "MethodDeclaration[24394-24571]:MethodDeclaration[24462-24639]"
    }, {
      "left" : "ImmutableSet<T> getTypesToSkipForType(T type);",
      "right" : "ImmutableSet<T> getTypesToSkipForType(T type);",
      "info" : "MethodDeclaration[24577-24827]:MethodDeclaration[24645-24895]"
    }, {
      "left" : "boolean isTypeToSkip(T type);",
      "right" : "boolean isTypeToSkip(T type);",
      "info" : "MethodDeclaration[24833-24989]:MethodDeclaration[24901-25057]"
    }, {
      "left" : "T restrictByNotNullOrUndefined(T type);",
      "right" : "T restrictByNotNullOrUndefined(T type);",
      "info" : "MethodDeclaration[24995-25107]:MethodDeclaration[25063-25175]"
    }, {
      "left" : "Iterable<T> getTypeAlternatives(T type);",
      "right" : "Iterable<T> getTypeAlternatives(T type);",
      "info" : "MethodDeclaration[25113-25348]:MethodDeclaration[25181-25416]"
    }, {
      "left" : "T getTypeWithProperty(String field, T type);",
      "right" : "T getTypeWithProperty(String field, T type);",
      "info" : "MethodDeclaration[25354-25545]:MethodDeclaration[25422-25613]"
    }, {
      "left" : "T getInstanceFromPrototype(T type);",
      "right" : "T getInstanceFromPrototype(T type);",
      "info" : "MethodDeclaration[25551-25725]:MethodDeclaration[25619-25793]"
    }, {
      "left" : "void recordInterfaces(T type, T relatedType,\n                          DisambiguateProperties<T>.Property p);",
      "right" : "void recordInterfaces(T type, T relatedType,\n                          DisambiguateProperties<T>.Property p);",
      "info" : "MethodDeclaration[25731-26001]:MethodDeclaration[25799-26069]"
    }, {
      "left" : "JSTypeSystem",
      "right" : "JSTypeSystem",
      "info" : "TypeDeclaration[26009-33596]:TypeDeclaration[26077-33664]"
    }, {
      "left" : "private final Set<JSType> invalidatingTypes;",
      "right" : "private final Set<JSType> invalidatingTypes;",
      "info" : "FieldDeclaration[26132-26176]:FieldDeclaration[26200-26244]"
    }, {
      "left" : "private JSTypeRegistry registry;",
      "right" : "private JSTypeRegistry registry;",
      "info" : "FieldDeclaration[26181-26213]:FieldDeclaration[26249-26281]"
    }, {
      "left" : "public JSTypeSystem(AbstractCompiler compiler)",
      "right" : "public JSTypeSystem(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[26219-26871]:MethodDeclaration[26287-26939]"
    }, {
      "left" : "public void addInvalidatingType(JSType type)",
      "right" : "public void addInvalidatingType(JSType type)",
      "info" : "MethodDeclaration[26877-27013]:MethodDeclaration[26945-27081]"
    }, {
      "left" : "public StaticScope<JSType> getRootScope()",
      "right" : "public StaticScope<JSType> getRootScope()",
      "info" : "MethodDeclaration[27019-27087]:MethodDeclaration[27087-27155]"
    }, {
      "left" : "public StaticScope<JSType> getFunctionScope(Node node)",
      "right" : "public StaticScope<JSType> getFunctionScope(Node node)",
      "info" : "MethodDeclaration[27093-27184]:MethodDeclaration[27161-27252]"
    }, {
      "left" : "public JSType getType(\n        StaticScope<JSType> scope, Node node, String prop)",
      "right" : "public JSType getType(\n        StaticScope<JSType> scope, Node node, String prop)",
      "info" : "MethodDeclaration[27190-27432]:MethodDeclaration[27258-27500]"
    }, {
      "left" : "public boolean isInvalidatingType(JSType type)",
      "right" : "public boolean isInvalidatingType(JSType type)",
      "info" : "MethodDeclaration[27438-27762]:MethodDeclaration[27506-27830]"
    }, {
      "left" : "public ImmutableSet<JSType> getTypesToSkipForType(JSType type)",
      "right" : "public ImmutableSet<JSType> getTypesToSkipForType(JSType type)",
      "info" : "MethodDeclaration[27768-28388]:MethodDeclaration[27836-28456]"
    }, {
      "left" : "private Set<JSType> getTypesToSkipForTypeNonUnion(JSType type)",
      "right" : "private Set<JSType> getTypesToSkipForTypeNonUnion(JSType type)",
      "info" : "MethodDeclaration[28394-28824]:MethodDeclaration[28462-28892]"
    }, {
      "left" : "public boolean isTypeToSkip(JSType type)",
      "right" : "public boolean isTypeToSkip(JSType type)",
      "info" : "MethodDeclaration[28830-28952]:MethodDeclaration[28898-29020]"
    }, {
      "left" : "public JSType restrictByNotNullOrUndefined(JSType type)",
      "right" : "public JSType restrictByNotNullOrUndefined(JSType type)",
      "info" : "MethodDeclaration[28958-29081]:MethodDeclaration[29026-29149]"
    }, {
      "left" : "public Iterable<JSType> getTypeAlternatives(JSType type)",
      "right" : "public Iterable<JSType> getTypeAlternatives(JSType type)",
      "info" : "MethodDeclaration[29087-29735]:MethodDeclaration[29155-29803]"
    }, {
      "left" : "public ObjectType getTypeWithProperty(String field, JSType type)",
      "right" : "public ObjectType getTypeWithProperty(String field, JSType type)",
      "info" : "MethodDeclaration[29741-31922]:MethodDeclaration[29809-31990]"
    }, {
      "left" : "public JSType getInstanceFromPrototype(JSType type)",
      "right" : "public JSType getInstanceFromPrototype(JSType type)",
      "info" : "MethodDeclaration[31928-32312]:MethodDeclaration[31996-32380]"
    }, {
      "left" : "public void recordInterfaces(JSType type, JSType relatedType,\n                                 DisambiguateProperties<JSType>.Property p)",
      "right" : "public void recordInterfaces(JSType type, JSType relatedType,\n                                 DisambiguateProperties<JSType>.Property p)",
      "info" : "MethodDeclaration[32318-33592]:MethodDeclaration[32386-33660]"
    }, {
      "left" : "ConcreteTypeSystem",
      "right" : "ConcreteTypeSystem",
      "info" : "TypeDeclaration[33600-39861]:TypeDeclaration[33668-39929]"
    }, {
      "left" : "private final TightenTypes tt;",
      "right" : "private final TightenTypes tt;",
      "info" : "FieldDeclaration[33742-33772]:FieldDeclaration[33810-33840]"
    }, {
      "left" : "private int nextUniqueId;",
      "right" : "private int nextUniqueId;",
      "info" : "FieldDeclaration[33777-33802]:FieldDeclaration[33845-33870]"
    }, {
      "left" : "private CodingConvention codingConvention;",
      "right" : "private CodingConvention codingConvention;",
      "info" : "FieldDeclaration[33807-33849]:FieldDeclaration[33875-33917]"
    }, {
      "left" : "private final Set<JSType> invalidatingTypes = Sets.newHashSet();",
      "right" : "private final Set<JSType> invalidatingTypes = Sets.newHashSet();",
      "info" : "FieldDeclaration[33854-33918]:FieldDeclaration[33922-33986]"
    }, {
      "left" : "private static final JSTypeNative [] nativeTypes = new JSTypeNative[] {\n        JSTypeNative.BOOLEAN_OBJECT_TYPE,\n        JSTypeNative.NUMBER_OBJECT_TYPE,\n        JSTypeNative.STRING_OBJECT_TYPE\n    };",
      "right" : "private static final JSTypeNative [] nativeTypes = new JSTypeNative[] {\n        JSTypeNative.BOOLEAN_OBJECT_TYPE,\n        JSTypeNative.NUMBER_OBJECT_TYPE,\n        JSTypeNative.STRING_OBJECT_TYPE\n    };",
      "info" : "FieldDeclaration[34068-34269]:FieldDeclaration[34136-34337]"
    }, {
      "left" : "public ConcreteTypeSystem(TightenTypes tt, CodingConvention convention)",
      "right" : "public ConcreteTypeSystem(TightenTypes tt, CodingConvention convention)",
      "info" : "MethodDeclaration[34275-34416]:MethodDeclaration[34343-34484]"
    }, {
      "left" : "public void addInvalidatingType(JSType type)",
      "right" : "public void addInvalidatingType(JSType type)",
      "info" : "MethodDeclaration[34422-34558]:MethodDeclaration[34490-34626]"
    }, {
      "left" : "public StaticScope<ConcreteType> getRootScope()",
      "right" : "public StaticScope<ConcreteType> getRootScope()",
      "info" : "MethodDeclaration[34564-34660]:MethodDeclaration[34632-34728]"
    }, {
      "left" : "public StaticScope<ConcreteType> getFunctionScope(Node decl)",
      "right" : "public StaticScope<ConcreteType> getFunctionScope(Node decl)",
      "info" : "MethodDeclaration[34666-34900]:MethodDeclaration[34734-34968]"
    }, {
      "left" : "public ConcreteType getType(\n        StaticScope<ConcreteType> scope, Node node, String prop)",
      "right" : "public ConcreteType getType(\n        StaticScope<ConcreteType> scope, Node node, String prop)",
      "info" : "MethodDeclaration[34906-35243]:MethodDeclaration[34974-35311]"
    }, {
      "left" : "private ConcreteType maybeAddAutoboxes(\n        ConcreteType cType, Node node, String prop)",
      "right" : "private ConcreteType maybeAddAutoboxes(\n        ConcreteType cType, Node node, String prop)",
      "info" : "MethodDeclaration[35249-36111]:MethodDeclaration[35317-36179]"
    }, {
      "left" : "private ConcreteType maybeAddAutoboxes(\n        ConcreteType cType, JSType jsType, String prop)",
      "right" : "private ConcreteType maybeAddAutoboxes(\n        ConcreteType cType, JSType jsType, String prop)",
      "info" : "MethodDeclaration[36117-36958]:MethodDeclaration[36185-37026]"
    }, {
      "left" : "public boolean isInvalidatingType(ConcreteType type)",
      "right" : "public boolean isInvalidatingType(ConcreteType type)",
      "info" : "MethodDeclaration[36964-37348]:MethodDeclaration[37032-37416]"
    }, {
      "left" : "public ImmutableSet<ConcreteType> getTypesToSkipForType(ConcreteType type)",
      "right" : "public ImmutableSet<ConcreteType> getTypesToSkipForType(ConcreteType type)",
      "info" : "MethodDeclaration[37354-37486]:MethodDeclaration[37422-37554]"
    }, {
      "left" : "public boolean isTypeToSkip(ConcreteType type)",
      "right" : "public boolean isTypeToSkip(ConcreteType type)",
      "info" : "MethodDeclaration[37492-37762]:MethodDeclaration[37560-37830]"
    }, {
      "left" : "public ConcreteType restrictByNotNullOrUndefined(ConcreteType type)",
      "right" : "public ConcreteType restrictByNotNullOrUndefined(ConcreteType type)",
      "info" : "MethodDeclaration[37768-37930]:MethodDeclaration[37836-37998]"
    }, {
      "left" : "public Iterable<ConcreteType> getTypeAlternatives(ConcreteType type)",
      "right" : "public Iterable<ConcreteType> getTypeAlternatives(ConcreteType type)",
      "info" : "MethodDeclaration[37936-38159]:MethodDeclaration[38004-38227]"
    }, {
      "left" : "public ConcreteType getTypeWithProperty(String field,\n                                                      ConcreteType type)",
      "right" : "public ConcreteType getTypeWithProperty(String field,\n                                                      ConcreteType type)",
      "info" : "MethodDeclaration[38165-39286]:MethodDeclaration[38233-39354]"
    }, {
      "left" : "public ConcreteType getInstanceFromPrototype(ConcreteType type)",
      "right" : "public ConcreteType getInstanceFromPrototype(ConcreteType type)",
      "info" : "MethodDeclaration[39292-39634]:MethodDeclaration[39360-39702]"
    }, {
      "left" : "public void recordInterfaces(ConcreteType type, ConcreteType relatedType,\n        DisambiguateProperties<ConcreteType>.Property p)",
      "right" : "public void recordInterfaces(ConcreteType type, ConcreteType relatedType,\n        DisambiguateProperties<ConcreteType>.Property p)",
      "info" : "MethodDeclaration[39640-39857]:MethodDeclaration[39708-39925]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2855-2860]:TYPE_DECLARATION_KIND[2855-2860]"
    }, {
      "left" : "DisambiguateProperties",
      "right" : "DisambiguateProperties",
      "info" : "SimpleName[2861-2883]:SimpleName[2861-2883]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3213-3219]:Modifier[3213-3219]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3220-3225]:TYPE_DECLARATION_KIND[3220-3225]"
    }, {
      "left" : "Warnings",
      "right" : "Warnings",
      "info" : "SimpleName[3226-3234]:SimpleName[3226-3234]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4570-4577]:Modifier[4570-4577]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4578-4583]:TYPE_DECLARATION_KIND[4578-4583]"
    }, {
      "left" : "Property",
      "right" : "Property",
      "info" : "SimpleName[4584-4592]:SimpleName[4584-4592]"
    }, {
      "left" : "Property",
      "right" : "Property",
      "info" : "SimpleName[5509-5517]:SimpleName[5509-5517]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[5518-5529]:SingleVariableDeclaration[5518-5529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5531-5562]:Block[5531-5562]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[5539-5556]:ExpressionStatement[5539-5556]"
    }, {
      "left" : "UnionFind<T>",
      "right" : "UnionFind<T>",
      "info" : "ParameterizedType[5632-5644]:ParameterizedType[5632-5644]"
    }, {
      "left" : "getTypes",
      "right" : "getTypes",
      "info" : "SimpleName[5645-5653]:SimpleName[5645-5653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5656-5762]:Block[5656-5762]"
    }, {
      "left" : "if (types == null)",
      "right" : "if (types == null)",
      "info" : "IfStatement[5664-5736]:IfStatement[5664-5736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5683-5736]:Block[5683-5736]"
    }, {
      "left" : "types = new StandardUnionFind<T>();",
      "right" : "types = new StandardUnionFind<T>();",
      "info" : "ExpressionStatement[5693-5728]:ExpressionStatement[5693-5728]"
    }, {
      "left" : "return types;",
      "right" : "return types;",
      "info" : "ReturnStatement[5743-5756]:ReturnStatement[5743-5756]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5983-5990]:PrimitiveType[5983-5990]"
    }, {
      "left" : "addType",
      "right" : "addType",
      "info" : "SimpleName[5991-5998]:SimpleName[5991-5998]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[5999-6005]:SingleVariableDeclaration[5999-6005]"
    }, {
      "left" : "T top",
      "right" : "T top",
      "info" : "SingleVariableDeclaration[6007-6012]:SingleVariableDeclaration[6007-6012]"
    }, {
      "left" : "T relatedType",
      "right" : "T relatedType",
      "info" : "SingleVariableDeclaration[6014-6027]:SingleVariableDeclaration[6014-6027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6029-6531]:Block[6029-6531]"
    }, {
      "left" : "checkState(!skipRenaming, \"Attempt to record skipped property: %s\", name);",
      "right" : "checkState(!skipRenaming, \"Attempt to record skipped property: %s\", name);",
      "info" : "ExpressionStatement[6037-6111]:ExpressionStatement[6037-6111]"
    }, {
      "left" : "if (typeSystem.isInvalidatingType(top))",
      "right" : "if (typeSystem.isInvalidatingType(top))",
      "info" : "IfStatement[6118-6525]:IfStatement[6118-6525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6158-6211]:Block[6158-6211]"
    }, {
      "left" : "invalidate();",
      "right" : "invalidate();",
      "info" : "ExpressionStatement[6168-6181]:ExpressionStatement[6168-6181]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6190-6203]:ReturnStatement[6190-6203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6217-6525]:Block[6217-6525]"
    }, {
      "left" : "if (typeSystem.isTypeToSkip(top))",
      "right" : "if (typeSystem.isTypeToSkip(top))",
      "info" : "IfStatement[6227-6302]:IfStatement[6227-6302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6261-6302]:Block[6261-6302]"
    }, {
      "left" : "addTypeToSkip(top);",
      "right" : "addTypeToSkip(top);",
      "info" : "ExpressionStatement[6273-6292]:ExpressionStatement[6273-6292]"
    }, {
      "left" : "if (relatedType == null)",
      "right" : "if (relatedType == null)",
      "info" : "IfStatement[6312-6442]:IfStatement[6312-6442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6337-6379]:Block[6337-6379]"
    }, {
      "left" : "getTypes().add(top);",
      "right" : "getTypes().add(top);",
      "info" : "ExpressionStatement[6349-6369]:ExpressionStatement[6349-6369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6385-6442]:Block[6385-6442]"
    }, {
      "left" : "getTypes().union(top, relatedType);",
      "right" : "getTypes().union(top, relatedType);",
      "info" : "ExpressionStatement[6397-6432]:ExpressionStatement[6397-6432]"
    }, {
      "left" : "typeSystem.recordInterfaces(type, top, this);",
      "right" : "typeSystem.recordInterfaces(type, top, this);",
      "info" : "ExpressionStatement[6451-6496]:ExpressionStatement[6451-6496]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6505-6517]:ReturnStatement[6505-6517]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6605-6609]:PrimitiveType[6605-6609]"
    }, {
      "left" : "addTypeToSkip",
      "right" : "addTypeToSkip",
      "info" : "SimpleName[6610-6623]:SimpleName[6610-6623]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[6624-6630]:SingleVariableDeclaration[6624-6630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6632-6790]:Block[6632-6790]"
    }, {
      "left" : "for (T skipType : typeSystem.getTypesToSkipForType(type))",
      "right" : "for (T skipType : typeSystem.getTypesToSkipForType(type))",
      "info" : "EnhancedForStatement[6640-6784]:EnhancedForStatement[6640-6784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6698-6784]:Block[6698-6784]"
    }, {
      "left" : "typesToSkip.add(skipType);",
      "right" : "typesToSkip.add(skipType);",
      "info" : "ExpressionStatement[6708-6734]:ExpressionStatement[6708-6734]"
    }, {
      "left" : "getTypes().union(skipType, type);",
      "right" : "getTypes().union(skipType, type);",
      "info" : "ExpressionStatement[6743-6776]:ExpressionStatement[6743-6776]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6855-6859]:PrimitiveType[6855-6859]"
    }, {
      "left" : "expandTypesToSkip",
      "right" : "expandTypesToSkip",
      "info" : "SimpleName[6860-6877]:SimpleName[6860-6877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6880-8229]:Block[6880-8229]"
    }, {
      "left" : "if (shouldRename())",
      "right" : "if (shouldRename())",
      "info" : "IfStatement[7034-8223]:IfStatement[7034-8223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7054-8223]:Block[7054-8223]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[7064-7078]:VariableDeclarationStatement[7064-7078]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[7087-8215]:WhileStatement[7087-8215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7100-8215]:Block[7100-8215]"
    }, {
      "left" : "checkState(++count < 10, \"Stuck in loop expanding types to skip.\");",
      "right" : "checkState(++count < 10, \"Stuck in loop expanding types to skip.\");",
      "info" : "ExpressionStatement[7185-7252]:ExpressionStatement[7185-7252]"
    }, {
      "left" : "Set<T> rootTypesToSkip = Sets.newHashSet();",
      "right" : "Set<T> rootTypesToSkip = Sets.newHashSet();",
      "info" : "VariableDeclarationStatement[7379-7422]:VariableDeclarationStatement[7379-7422]"
    }, {
      "left" : "for (T subType : typesToSkip)",
      "right" : "for (T subType : typesToSkip)",
      "info" : "EnhancedForStatement[7433-7530]:EnhancedForStatement[7433-7530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7463-7530]:Block[7463-7530]"
    }, {
      "left" : "rootTypesToSkip.add(types.find(subType));",
      "right" : "rootTypesToSkip.add(types.find(subType));",
      "info" : "ExpressionStatement[7477-7518]:ExpressionStatement[7477-7518]"
    }, {
      "left" : "typesToSkip.addAll(rootTypesToSkip);",
      "right" : "typesToSkip.addAll(rootTypesToSkip);",
      "info" : "ExpressionStatement[7541-7577]:ExpressionStatement[7541-7577]"
    }, {
      "left" : "Set<T> newTypesToSkip = Sets.newHashSet();",
      "right" : "Set<T> newTypesToSkip = Sets.newHashSet();",
      "info" : "VariableDeclarationStatement[7589-7631]:VariableDeclarationStatement[7589-7631]"
    }, {
      "left" : "Set<T> allTypes = types.elements();",
      "right" : "Set<T> allTypes = types.elements();",
      "info" : "VariableDeclarationStatement[7642-7677]:VariableDeclarationStatement[7642-7677]"
    }, {
      "left" : "int originalTypesSize = allTypes.size();",
      "right" : "int originalTypesSize = allTypes.size();",
      "info" : "VariableDeclarationStatement[7688-7728]:VariableDeclarationStatement[7688-7728]"
    }, {
      "left" : "for (T subType : allTypes)",
      "right" : "for (T subType : allTypes)",
      "info" : "EnhancedForStatement[7739-7947]:EnhancedForStatement[7739-7947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7766-7947]:Block[7766-7947]"
    }, {
      "left" : "if (!typesToSkip.contains(subType)\n                && typesToSkip.contains(types.find(subType)))",
      "right" : "if (!typesToSkip.contains(subType)\n                && typesToSkip.contains(types.find(subType)))",
      "info" : "IfStatement[7780-7935]:IfStatement[7780-7935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7877-7935]:Block[7877-7935]"
    }, {
      "left" : "newTypesToSkip.add(subType);",
      "right" : "newTypesToSkip.add(subType);",
      "info" : "ExpressionStatement[7893-7921]:ExpressionStatement[7893-7921]"
    }, {
      "left" : "for (T newType : newTypesToSkip)",
      "right" : "for (T newType : newTypesToSkip)",
      "info" : "EnhancedForStatement[7959-8041]:EnhancedForStatement[7959-8041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7992-8041]:Block[7992-8041]"
    }, {
      "left" : "addTypeToSkip(newType);",
      "right" : "addTypeToSkip(newType);",
      "info" : "ExpressionStatement[8006-8029]:ExpressionStatement[8006-8029]"
    }, {
      "left" : "if (types.elements().size() == originalTypesSize)",
      "right" : "if (types.elements().size() == originalTypesSize)",
      "info" : "IfStatement[8123-8205]:IfStatement[8123-8205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8173-8205]:Block[8173-8205]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8187-8193]:BreakStatement[8187-8193]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8311-8318]:PrimitiveType[8311-8318]"
    }, {
      "left" : "shouldRename",
      "right" : "shouldRename",
      "info" : "SimpleName[8319-8331]:SimpleName[8319-8331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8334-8440]:Block[8334-8440]"
    }, {
      "left" : "return !skipRenaming && types != null\n          && types.allEquivalenceClasses().size() > 1;",
      "right" : "return !skipRenaming && types != null\n          && types.allEquivalenceClasses().size() > 1;",
      "info" : "ReturnStatement[8342-8434]:ReturnStatement[8342-8434]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8647-8654]:PrimitiveType[8647-8654]"
    }, {
      "left" : "shouldRename",
      "right" : "shouldRename",
      "info" : "SimpleName[8655-8667]:SimpleName[8655-8667]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[8668-8674]:SingleVariableDeclaration[8668-8674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8676-8742]:Block[8676-8742]"
    }, {
      "left" : "return !skipRenaming && !typesToSkip.contains(type);",
      "right" : "return !skipRenaming && !typesToSkip.contains(type);",
      "info" : "ReturnStatement[8684-8736]:ReturnStatement[8684-8736]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8872-8879]:PrimitiveType[8872-8879]"
    }, {
      "left" : "invalidate",
      "right" : "invalidate",
      "info" : "SimpleName[8880-8890]:SimpleName[8880-8890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8893-9008]:Block[8893-9008]"
    }, {
      "left" : "boolean changed = !skipRenaming;",
      "right" : "boolean changed = !skipRenaming;",
      "info" : "VariableDeclarationStatement[8901-8933]:VariableDeclarationStatement[8901-8933]"
    }, {
      "left" : "skipRenaming = true;",
      "right" : "skipRenaming = true;",
      "info" : "ExpressionStatement[8940-8960]:ExpressionStatement[8940-8960]"
    }, {
      "left" : "types = null;",
      "right" : "types = null;",
      "info" : "ExpressionStatement[8967-8980]:ExpressionStatement[8967-8980]"
    }, {
      "left" : "return changed;",
      "right" : "return changed;",
      "info" : "ReturnStatement[8987-9002]:ReturnStatement[8987-9002]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9403-9410]:PrimitiveType[9403-9410]"
    }, {
      "left" : "scheduleRenaming",
      "right" : "scheduleRenaming",
      "info" : "SimpleName[9411-9427]:SimpleName[9411-9427]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[9428-9437]:SingleVariableDeclaration[9428-9437]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[9439-9445]:SingleVariableDeclaration[9439-9445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9447-9683]:Block[9447-9683]"
    }, {
      "left" : "if (!skipRenaming)",
      "right" : "if (!skipRenaming)",
      "info" : "IfStatement[9455-9658]:IfStatement[9455-9658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9474-9658]:Block[9474-9658]"
    }, {
      "left" : "if (typeSystem.isInvalidatingType(type))",
      "right" : "if (typeSystem.isInvalidatingType(type))",
      "info" : "IfStatement[9484-9584]:IfStatement[9484-9584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9525-9584]:Block[9525-9584]"
    }, {
      "left" : "invalidate();",
      "right" : "invalidate();",
      "info" : "ExpressionStatement[9537-9550]:ExpressionStatement[9537-9550]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9561-9574]:ReturnStatement[9561-9574]"
    }, {
      "left" : "renameNodes.add(node);",
      "right" : "renameNodes.add(node);",
      "info" : "ExpressionStatement[9593-9615]:ExpressionStatement[9593-9615]"
    }, {
      "left" : "rootTypes.put(node, type);",
      "right" : "rootTypes.put(node, type);",
      "info" : "ExpressionStatement[9624-9650]:ExpressionStatement[9624-9650]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9665-9677]:ReturnStatement[9665-9677]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9756-9762]:Modifier[9756-9762]"
    }, {
      "left" : "DisambiguateProperties<JSType>",
      "right" : "DisambiguateProperties<JSType>",
      "info" : "ParameterizedType[9763-9793]:ParameterizedType[9763-9793]"
    }, {
      "left" : "forJSTypeSystem",
      "right" : "forJSTypeSystem",
      "info" : "SimpleName[9794-9809]:SimpleName[9794-9809]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[9817-9842]:SingleVariableDeclaration[9817-9842]"
    }, {
      "left" : "Map<String, CheckLevel> propertiesToErrorFor",
      "right" : "Map<String, CheckLevel> propertiesToErrorFor",
      "info" : "SingleVariableDeclaration[9850-9894]:SingleVariableDeclaration[9850-9894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9896-10017]:Block[9896-10017]"
    }, {
      "left" : "return new DisambiguateProperties<JSType>(\n        compiler, new JSTypeSystem(compiler), propertiesToErrorFor);",
      "right" : "return new DisambiguateProperties<JSType>(\n        compiler, new JSTypeSystem(compiler), propertiesToErrorFor);",
      "info" : "ReturnStatement[9902-10013]:ReturnStatement[9902-10013]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10021-10027]:Modifier[10021-10027]"
    }, {
      "left" : "DisambiguateProperties<ConcreteType>",
      "right" : "DisambiguateProperties<ConcreteType>",
      "info" : "ParameterizedType[10028-10064]:ParameterizedType[10028-10064]"
    }, {
      "left" : "forConcreteTypeSystem",
      "right" : "forConcreteTypeSystem",
      "info" : "SimpleName[10065-10086]:SimpleName[10065-10086]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[10094-10119]:SingleVariableDeclaration[10094-10119]"
    }, {
      "left" : "TightenTypes tt",
      "right" : "TightenTypes tt",
      "info" : "SingleVariableDeclaration[10121-10136]:SingleVariableDeclaration[10121-10136]"
    }, {
      "left" : "Map<String, CheckLevel> propertiesToErrorFor",
      "right" : "Map<String, CheckLevel> propertiesToErrorFor",
      "info" : "SingleVariableDeclaration[10144-10188]:SingleVariableDeclaration[10144-10188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10190-10361]:Block[10190-10361]"
    }, {
      "left" : "return new DisambiguateProperties<ConcreteType>(\n        compiler, new ConcreteTypeSystem(tt, compiler.getCodingConvention()),\n            propertiesToErrorFor);",
      "right" : "return new DisambiguateProperties<ConcreteType>(\n        compiler, new ConcreteTypeSystem(tt, compiler.getCodingConvention()),\n            propertiesToErrorFor);",
      "info" : "ReturnStatement[10196-10357]:ReturnStatement[10196-10357]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10522-10529]:Modifier[10522-10529]"
    }, {
      "left" : "DisambiguateProperties",
      "right" : "DisambiguateProperties",
      "info" : "SimpleName[10530-10552]:SimpleName[10530-10552]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[10553-10578]:SingleVariableDeclaration[10553-10578]"
    }, {
      "left" : "TypeSystem<T> typeSystem",
      "right" : "TypeSystem<T> typeSystem",
      "info" : "SingleVariableDeclaration[10586-10610]:SingleVariableDeclaration[10586-10610]"
    }, {
      "left" : "Map<String, CheckLevel> propertiesToErrorFor",
      "right" : "Map<String, CheckLevel> propertiesToErrorFor",
      "info" : "SingleVariableDeclaration[10612-10656]:SingleVariableDeclaration[10612-10656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10658-10941]:Block[10658-10941]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[10664-10689]:ExpressionStatement[10664-10689]"
    }, {
      "left" : "this.typeSystem = typeSystem;",
      "right" : "this.typeSystem = typeSystem;",
      "info" : "ExpressionStatement[10694-10723]:ExpressionStatement[10694-10723]"
    }, {
      "left" : "this.propertiesToErrorFor = propertiesToErrorFor;",
      "right" : "this.propertiesToErrorFor = propertiesToErrorFor;",
      "info" : "ExpressionStatement[10728-10777]:ExpressionStatement[10728-10777]"
    }, {
      "left" : "if (!this.propertiesToErrorFor.isEmpty())",
      "right" : "if (!this.propertiesToErrorFor.isEmpty())",
      "info" : "IfStatement[10782-10937]:IfStatement[10782-10937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10824-10889]:Block[10824-10889]"
    }, {
      "left" : "this.invalidationMap = LinkedHashMultimap.create();",
      "right" : "this.invalidationMap = LinkedHashMultimap.create();",
      "info" : "ExpressionStatement[10832-10883]:ExpressionStatement[10832-10883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10895-10937]:Block[10895-10937]"
    }, {
      "left" : "this.invalidationMap = null;",
      "right" : "this.invalidationMap = null;",
      "info" : "ExpressionStatement[10903-10931]:ExpressionStatement[10903-10931]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10945-10954]:MarkerAnnotation[10945-10954]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10957-10963]:Modifier[10957-10963]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10964-10968]:PrimitiveType[10964-10968]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[10969-10976]:SimpleName[10969-10976]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[10977-10989]:SingleVariableDeclaration[10977-10989]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[10991-11000]:SingleVariableDeclaration[10991-11000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11002-11456]:Block[11002-11456]"
    }, {
      "left" : "Preconditions.checkState(\n        compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED);",
      "right" : "Preconditions.checkState(\n        compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED);",
      "info" : "ExpressionStatement[11008-11101]:ExpressionStatement[11008-11101]"
    }, {
      "left" : "for (TypeMismatch mis : compiler.getTypeValidator().getMismatches())",
      "right" : "for (TypeMismatch mis : compiler.getTypeValidator().getMismatches())",
      "info" : "EnhancedForStatement[11106-11276]:EnhancedForStatement[11106-11276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11175-11276]:Block[11175-11276]"
    }, {
      "left" : "addInvalidatingType(mis.typeA, mis.src);",
      "right" : "addInvalidatingType(mis.typeA, mis.src);",
      "info" : "ExpressionStatement[11183-11223]:ExpressionStatement[11183-11223]"
    }, {
      "left" : "addInvalidatingType(mis.typeB, mis.src);",
      "right" : "addInvalidatingType(mis.typeB, mis.src);",
      "info" : "ExpressionStatement[11230-11270]:ExpressionStatement[11230-11270]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, externs, new FindExternProperties());",
      "right" : "NodeTraversal.traverse(compiler, externs, new FindExternProperties());",
      "info" : "ExpressionStatement[11282-11352]:ExpressionStatement[11282-11352]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new FindRenameableProperties());",
      "right" : "NodeTraversal.traverse(compiler, root, new FindRenameableProperties());",
      "info" : "ExpressionStatement[11357-11428]:ExpressionStatement[11357-11428]"
    }, {
      "left" : "renameProperties();",
      "right" : "renameProperties();",
      "info" : "ExpressionStatement[11433-11452]:ExpressionStatement[11433-11452]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11460-11467]:Modifier[11460-11467]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11468-11472]:PrimitiveType[11468-11472]"
    }, {
      "left" : "recordInvalidationError",
      "right" : "recordInvalidationError",
      "info" : "SimpleName[11473-11496]:SimpleName[11473-11496]"
    }, {
      "left" : "JSType t",
      "right" : "JSType t",
      "info" : "SingleVariableDeclaration[11497-11505]:SingleVariableDeclaration[11497-11505]"
    }, {
      "left" : "JSError error",
      "right" : "JSError error",
      "info" : "SingleVariableDeclaration[11507-11520]:SingleVariableDeclaration[11507-11520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11522-11650]:Block[11522-11650]"
    }, {
      "left" : "if (!t.isObject())",
      "right" : "if (!t.isObject())",
      "info" : "IfStatement[11528-11568]:IfStatement[11528-11568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11547-11568]:Block[11547-11568]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11555-11562]:ReturnStatement[11555-11562]"
    }, {
      "left" : "if (invalidationMap != null)",
      "right" : "if (invalidationMap != null)",
      "info" : "IfStatement[11573-11646]:IfStatement[11573-11646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11602-11646]:Block[11602-11646]"
    }, {
      "left" : "invalidationMap.put(t, error);",
      "right" : "invalidationMap.put(t, error);",
      "info" : "ExpressionStatement[11610-11640]:ExpressionStatement[11610-11640]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11744-11751]:Modifier[11744-11751]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11752-11756]:PrimitiveType[11752-11756]"
    }, {
      "left" : "addInvalidatingType",
      "right" : "addInvalidatingType",
      "info" : "SimpleName[11757-11776]:SimpleName[11757-11776]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[11777-11788]:SingleVariableDeclaration[11777-11788]"
    }, {
      "left" : "JSError error",
      "right" : "JSError error",
      "info" : "SingleVariableDeclaration[11790-11803]:SingleVariableDeclaration[11790-11803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11805-12522]:Block[11805-12522]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[11811-11854]:ExpressionStatement[11811-11854]"
    }, {
      "left" : "if (type.isUnionType())",
      "right" : "if (type.isUnionType())",
      "info" : "IfStatement[11859-12518]:IfStatement[11859-12518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11883-12006]:Block[11883-12006]"
    }, {
      "left" : "for (JSType alt : type.toMaybeUnionType().getAlternates())",
      "right" : "for (JSType alt : type.toMaybeUnionType().getAlternates())",
      "info" : "EnhancedForStatement[11891-12000]:EnhancedForStatement[11891-12000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11950-12000]:Block[11950-12000]"
    }, {
      "left" : "addInvalidatingType(alt, error);",
      "right" : "addInvalidatingType(alt, error);",
      "info" : "ExpressionStatement[11960-11992]:ExpressionStatement[11960-11992]"
    }, {
      "left" : "if (type.isEnumElementType())",
      "right" : "if (type.isEnumElementType())",
      "info" : "IfStatement[12012-12518]:IfStatement[12012-12518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12042-12144]:Block[12042-12144]"
    }, {
      "left" : "addInvalidatingType(\n          type.toMaybeEnumElementType().getPrimitiveType(), error);",
      "right" : "addInvalidatingType(\n          type.toMaybeEnumElementType().getPrimitiveType(), error);",
      "info" : "ExpressionStatement[12050-12138]:ExpressionStatement[12050-12138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12150-12518]:Block[12150-12518]"
    }, {
      "left" : "typeSystem.addInvalidatingType(type);",
      "right" : "typeSystem.addInvalidatingType(type);",
      "info" : "ExpressionStatement[12158-12195]:ExpressionStatement[12158-12195]"
    }, {
      "left" : "recordInvalidationError(type, error);",
      "right" : "recordInvalidationError(type, error);",
      "info" : "ExpressionStatement[12202-12239]:ExpressionStatement[12202-12239]"
    }, {
      "left" : "ObjectType objType = ObjectType.cast(type);",
      "right" : "ObjectType objType = ObjectType.cast(type);",
      "info" : "VariableDeclarationStatement[12246-12289]:VariableDeclarationStatement[12246-12289]"
    }, {
      "left" : "if (objType != null && objType.getImplicitPrototype() != null)",
      "right" : "if (objType != null && objType.getImplicitPrototype() != null)",
      "info" : "IfStatement[12296-12512]:IfStatement[12296-12512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12359-12512]:Block[12359-12512]"
    }, {
      "left" : "typeSystem.addInvalidatingType(objType.getImplicitPrototype());",
      "right" : "typeSystem.addInvalidatingType(objType.getImplicitPrototype());",
      "info" : "ExpressionStatement[12369-12432]:ExpressionStatement[12369-12432]"
    }, {
      "left" : "recordInvalidationError(objType.getImplicitPrototype(), error);",
      "right" : "recordInvalidationError(objType.getImplicitPrototype(), error);",
      "info" : "ExpressionStatement[12441-12504]:ExpressionStatement[12441-12504]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[12603-12612]:Modifier[12603-12612]"
    }, {
      "left" : "Property",
      "right" : "Property",
      "info" : "SimpleType[12613-12621]:SimpleType[12613-12621]"
    }, {
      "left" : "getProperty",
      "right" : "getProperty",
      "info" : "SimpleName[12622-12633]:SimpleName[12622-12633]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[12634-12645]:SingleVariableDeclaration[12634-12645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12647-12780]:Block[12647-12780]"
    }, {
      "left" : "if (!properties.containsKey(name))",
      "right" : "if (!properties.containsKey(name))",
      "info" : "IfStatement[12653-12743]:IfStatement[12653-12743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12688-12743]:Block[12688-12743]"
    }, {
      "left" : "properties.put(name, new Property(name));",
      "right" : "properties.put(name, new Property(name));",
      "info" : "ExpressionStatement[12696-12737]:ExpressionStatement[12696-12737]"
    }, {
      "left" : "return properties.get(name);",
      "right" : "return properties.get(name);",
      "info" : "ReturnStatement[12748-12776]:ReturnStatement[12748-12776]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[12813-12814]:SimpleType[12813-12814]"
    }, {
      "left" : "getTypeWithProperty",
      "right" : "getTypeWithProperty",
      "info" : "SimpleName[12815-12834]:SimpleName[12815-12834]"
    }, {
      "left" : "String field",
      "right" : "String field",
      "info" : "SingleVariableDeclaration[12835-12847]:SingleVariableDeclaration[12835-12847]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[12849-12855]:SingleVariableDeclaration[12849-12855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12857-12918]:Block[12857-12918]"
    }, {
      "left" : "return typeSystem.getTypeWithProperty(field, type);",
      "right" : "return typeSystem.getTypeWithProperty(field, type);",
      "info" : "ReturnStatement[12863-12914]:ReturnStatement[12863-12914]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12986-12993]:Modifier[12986-12993]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[12994-13002]:Modifier[12994-13002]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[13003-13008]:TYPE_DECLARATION_KIND[13003-13008]"
    }, {
      "left" : "AbstractScopingCallback",
      "right" : "AbstractScopingCallback",
      "info" : "SimpleName[13009-13032]:SimpleName[13009-13032]"
    }, {
      "left" : "ScopedCallback",
      "right" : "ScopedCallback",
      "info" : "SimpleType[13044-13058]:SimpleType[13044-13058]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13154-13163]:MarkerAnnotation[13154-13163]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13168-13174]:Modifier[13168-13174]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13175-13182]:PrimitiveType[13175-13182]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[13183-13197]:SimpleName[13183-13197]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[13198-13213]:SingleVariableDeclaration[13198-13213]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13215-13221]:SingleVariableDeclaration[13215-13221]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[13223-13234]:SingleVariableDeclaration[13223-13234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13236-13262]:Block[13236-13262]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13244-13256]:ReturnStatement[13244-13256]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13268-13277]:MarkerAnnotation[13268-13277]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13282-13288]:Modifier[13282-13288]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13289-13293]:PrimitiveType[13289-13293]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[13294-13304]:SimpleName[13294-13304]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[13305-13320]:SingleVariableDeclaration[13305-13320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13322-13499]:Block[13322-13499]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[13330-13493]:IfStatement[13330-13493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13353-13410]:Block[13353-13410]"
    }, {
      "left" : "scopes.push(typeSystem.getRootScope());",
      "right" : "scopes.push(typeSystem.getRootScope());",
      "info" : "ExpressionStatement[13363-13402]:ExpressionStatement[13363-13402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13416-13493]:Block[13416-13493]"
    }, {
      "left" : "scopes.push(typeSystem.getFunctionScope(t.getScopeRoot()));",
      "right" : "scopes.push(typeSystem.getFunctionScope(t.getScopeRoot()));",
      "info" : "ExpressionStatement[13426-13485]:ExpressionStatement[13426-13485]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13505-13514]:MarkerAnnotation[13505-13514]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13519-13525]:Modifier[13519-13525]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13526-13530]:PrimitiveType[13526-13530]"
    }, {
      "left" : "exitScope",
      "right" : "exitScope",
      "info" : "SimpleName[13531-13540]:SimpleName[13531-13540]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[13541-13556]:SingleVariableDeclaration[13541-13556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13558-13585]:Block[13558-13585]"
    }, {
      "left" : "scopes.pop();",
      "right" : "scopes.pop();",
      "info" : "ExpressionStatement[13566-13579]:ExpressionStatement[13566-13579]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[13655-13664]:Modifier[13655-13664]"
    }, {
      "left" : "StaticScope<T>",
      "right" : "StaticScope<T>",
      "info" : "ParameterizedType[13665-13679]:ParameterizedType[13665-13679]"
    }, {
      "left" : "getScope",
      "right" : "getScope",
      "info" : "SimpleName[13680-13688]:SimpleName[13680-13688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13691-13726]:Block[13691-13726]"
    }, {
      "left" : "return scopes.peek();",
      "right" : "return scopes.peek();",
      "info" : "ReturnStatement[13699-13720]:ReturnStatement[13699-13720]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13887-13894]:Modifier[13887-13894]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[13895-13900]:TYPE_DECLARATION_KIND[13895-13900]"
    }, {
      "left" : "FindExternProperties",
      "right" : "FindExternProperties",
      "info" : "SimpleName[13901-13921]:SimpleName[13901-13921]"
    }, {
      "left" : "AbstractScopingCallback",
      "right" : "AbstractScopingCallback",
      "info" : "SimpleType[13930-13953]:SimpleType[13930-13953]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13960-13969]:MarkerAnnotation[13960-13969]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13970-13976]:Modifier[13970-13976]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13977-13981]:PrimitiveType[13977-13981]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[13982-13987]:SimpleName[13982-13987]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[13988-14003]:SingleVariableDeclaration[13988-14003]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14005-14011]:SingleVariableDeclaration[14005-14011]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14013-14024]:SingleVariableDeclaration[14013-14024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14026-14852]:Block[14026-14852]"
    }, {
      "left" : "if (n.isGetProp())",
      "right" : "if (n.isGetProp())",
      "info" : "IfStatement[14104-14846]:IfStatement[14104-14846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14123-14846]:Block[14123-14846]"
    }, {
      "left" : "String field = n.getLastChild().getString();",
      "right" : "String field = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[14133-14177]:VariableDeclarationStatement[14133-14177]"
    }, {
      "left" : "T type = typeSystem.getType(getScope(), n.getFirstChild(), field);",
      "right" : "T type = typeSystem.getType(getScope(), n.getFirstChild(), field);",
      "info" : "VariableDeclarationStatement[14186-14252]:VariableDeclarationStatement[14186-14252]"
    }, {
      "left" : "Property prop = getProperty(field);",
      "right" : "Property prop = getProperty(field);",
      "info" : "VariableDeclarationStatement[14261-14296]:VariableDeclarationStatement[14261-14296]"
    }, {
      "left" : "if (typeSystem.isInvalidatingType(type))",
      "right" : "if (typeSystem.isInvalidatingType(type))",
      "info" : "IfStatement[14305-14838]:IfStatement[14305-14838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14346-14386]:Block[14346-14386]"
    }, {
      "left" : "prop.invalidate();",
      "right" : "prop.invalidate();",
      "info" : "ExpressionStatement[14358-14376]:ExpressionStatement[14358-14376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14392-14838]:Block[14392-14838]"
    }, {
      "left" : "prop.addTypeToSkip(type);",
      "right" : "prop.addTypeToSkip(type);",
      "info" : "ExpressionStatement[14404-14429]:ExpressionStatement[14404-14429]"
    }, {
      "left" : "if ((type = typeSystem.getInstanceFromPrototype(type)) != null)",
      "right" : "if ((type = typeSystem.getInstanceFromPrototype(type)) != null)",
      "info" : "IfStatement[14672-14828]:IfStatement[14672-14828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14736-14828]:Block[14736-14828]"
    }, {
      "left" : "prop.getTypes().add(type);",
      "right" : "prop.getTypes().add(type);",
      "info" : "ExpressionStatement[14750-14776]:ExpressionStatement[14750-14776]"
    }, {
      "left" : "prop.typesToSkip.add(type);",
      "right" : "prop.typesToSkip.add(type);",
      "info" : "ExpressionStatement[14789-14816]:ExpressionStatement[14789-14816]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14979-14986]:Modifier[14979-14986]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14987-14992]:TYPE_DECLARATION_KIND[14987-14992]"
    }, {
      "left" : "FindRenameableProperties",
      "right" : "FindRenameableProperties",
      "info" : "SimpleName[14993-15017]:SimpleName[14993-15017]"
    }, {
      "left" : "AbstractScopingCallback",
      "right" : "AbstractScopingCallback",
      "info" : "SimpleType[15026-15049]:SimpleType[15026-15049]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15056-15065]:MarkerAnnotation[15056-15065]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15070-15076]:Modifier[15070-15076]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15077-15081]:PrimitiveType[15077-15081]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[15082-15087]:SimpleName[15082-15087]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[15088-15103]:SingleVariableDeclaration[15088-15103]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15105-15111]:SingleVariableDeclaration[15105-15111]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[15113-15124]:SingleVariableDeclaration[15113-15124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15126-15264]:Block[15126-15264]"
    }, {
      "left" : "if (n.isGetProp())",
      "right" : "if (n.isGetProp())",
      "info" : "IfStatement[15134-15258]:IfStatement[15134-15258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15153-15191]:Block[15153-15191]"
    }, {
      "left" : "handleGetProp(t, n);",
      "right" : "handleGetProp(t, n);",
      "info" : "ExpressionStatement[15163-15183]:ExpressionStatement[15163-15183]"
    }, {
      "left" : "if (n.isObjectLit())",
      "right" : "if (n.isObjectLit())",
      "info" : "IfStatement[15197-15258]:IfStatement[15197-15258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15218-15258]:Block[15218-15258]"
    }, {
      "left" : "handleObjectLit(t, n);",
      "right" : "handleObjectLit(t, n);",
      "info" : "ExpressionStatement[15228-15250]:ExpressionStatement[15228-15250]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15319-15326]:Modifier[15319-15326]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15327-15331]:PrimitiveType[15327-15331]"
    }, {
      "left" : "handleGetProp",
      "right" : "handleGetProp",
      "info" : "SimpleName[15332-15345]:SimpleName[15332-15345]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[15346-15361]:SingleVariableDeclaration[15346-15361]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15363-15369]:SingleVariableDeclaration[15363-15369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15371-16910]:Block[15371-16910]"
    }, {
      "left" : "String name = n.getLastChild().getString();",
      "right" : "String name = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[15379-15422]:VariableDeclarationStatement[15379-15422]"
    }, {
      "left" : "T type = typeSystem.getType(getScope(), n.getFirstChild(), name);",
      "right" : "T type = typeSystem.getType(getScope(), n.getFirstChild(), name);",
      "info" : "VariableDeclarationStatement[15429-15494]:VariableDeclarationStatement[15429-15494]"
    }, {
      "left" : "Property prop = getProperty(name);",
      "right" : "Property prop = getProperty(name);",
      "info" : "VariableDeclarationStatement[15502-15536]:VariableDeclarationStatement[15502-15536]"
    }, {
      "left" : "if (!prop.scheduleRenaming(n.getLastChild(),\n                                 processProperty(t, prop, type, null)))",
      "right" : "if (!prop.scheduleRenaming(n.getLastChild(),\n                                 processProperty(t, prop, type, null)))",
      "info" : "IfStatement[15543-16904]:IfStatement[15543-16904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15660-16904]:Block[15660-16904]"
    }, {
      "left" : "if (propertiesToErrorFor.containsKey(name))",
      "right" : "if (propertiesToErrorFor.containsKey(name))",
      "info" : "IfStatement[15670-16896]:IfStatement[15670-16896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15714-16896]:Block[15714-16896]"
    }, {
      "left" : "String suggestion = \"\";",
      "right" : "String suggestion = \"\";",
      "info" : "VariableDeclarationStatement[15726-15749]:VariableDeclarationStatement[15726-15749]"
    }, {
      "left" : "if (type instanceof JSType)",
      "right" : "if (type instanceof JSType)",
      "info" : "IfStatement[15760-16636]:IfStatement[15760-16636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15788-16636]:Block[15788-16636]"
    }, {
      "left" : "JSType jsType = (JSType) type;",
      "right" : "JSType jsType = (JSType) type;",
      "info" : "VariableDeclarationStatement[15802-15832]:VariableDeclarationStatement[15802-15832]"
    }, {
      "left" : "if (jsType.isAllType() || jsType.isUnknownType())",
      "right" : "if (jsType.isAllType() || jsType.isUnknownType())",
      "info" : "IfStatement[15845-16624]:IfStatement[15845-16624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15895-16297]:Block[15895-16297]"
    }, {
      "left" : "if (n.getFirstChild().isThis())",
      "right" : "if (n.getFirstChild().isThis())",
      "info" : "IfStatement[15911-16283]:IfStatement[15911-16283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15943-16085]:Block[15943-16085]"
    }, {
      "left" : "suggestion = \"The \\\"this\\\" object is unknown in the function,\" +\n                    \"consider using @this\";",
      "right" : "suggestion = \"The \\\"this\\\" object is unknown in the function,\" +\n                    \"consider using @this\";",
      "info" : "ExpressionStatement[15961-16069]:ExpressionStatement[15961-16069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16091-16283]:Block[16091-16283]"
    }, {
      "left" : "String qName = n.getFirstChild().getQualifiedName();",
      "right" : "String qName = n.getFirstChild().getQualifiedName();",
      "info" : "VariableDeclarationStatement[16109-16161]:VariableDeclarationStatement[16109-16161]"
    }, {
      "left" : "suggestion = \"Consider casting \" + qName +\n                    \" if you know it's type.\";",
      "right" : "suggestion = \"Consider casting \" + qName +\n                    \" if you know it's type.\";",
      "info" : "ExpressionStatement[16178-16267]:ExpressionStatement[16178-16267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16303-16624]:Block[16303-16624]"
    }, {
      "left" : "List<String> errors = Lists.newArrayList();",
      "right" : "List<String> errors = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[16319-16362]:VariableDeclarationStatement[16319-16362]"
    }, {
      "left" : "printErrorLocations(errors, jsType);",
      "right" : "printErrorLocations(errors, jsType);",
      "info" : "ExpressionStatement[16377-16413]:ExpressionStatement[16377-16413]"
    }, {
      "left" : "if (!errors.isEmpty())",
      "right" : "if (!errors.isEmpty())",
      "info" : "IfStatement[16428-16610]:IfStatement[16428-16610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16451-16610]:Block[16451-16610]"
    }, {
      "left" : "suggestion = \"Consider fixing errors for the following types:\\n\";",
      "right" : "suggestion = \"Consider fixing errors for the following types:\\n\";",
      "info" : "ExpressionStatement[16469-16534]:ExpressionStatement[16469-16534]"
    }, {
      "left" : "suggestion += Joiner.on(\"\\n\").join(errors);",
      "right" : "suggestion += Joiner.on(\"\\n\").join(errors);",
      "info" : "ExpressionStatement[16551-16594]:ExpressionStatement[16551-16594]"
    }, {
      "left" : "compiler.report(JSError.make(\n              t.getSourceName(), n, propertiesToErrorFor.get(name),\n              Warnings.INVALIDATION, name,\n              (type == null ? \"null\" : type.toString()),\n              n.toString(), suggestion));",
      "right" : "compiler.report(JSError.make(\n              t.getSourceName(), n, propertiesToErrorFor.get(name),\n              Warnings.INVALIDATION, name,\n              (type == null ? \"null\" : type.toString()),\n              n.toString(), suggestion));",
      "info" : "ExpressionStatement[16647-16886]:ExpressionStatement[16647-16886]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16967-16974]:Modifier[16967-16974]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16975-16979]:PrimitiveType[16975-16979]"
    }, {
      "left" : "handleObjectLit",
      "right" : "handleObjectLit",
      "info" : "SimpleName[16980-16995]:SimpleName[16980-16995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17021-17920]:Block[17021-17988]"
    }, {
      "left" : "for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext())",
      "info" : "ForStatement[17029-17914]:ForStatement[17029-17982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17126-17914]:Block[17126-17982]"
    }, {
      "left" : "String name = child.getString();",
      "right" : "String name = child.getString();",
      "info" : "VariableDeclarationStatement[17232-17264]:VariableDeclarationStatement[17300-17332]"
    }, {
      "left" : "T type = typeSystem.getType(getScope(), n, name);",
      "right" : "T type = typeSystem.getType(getScope(), n, name);",
      "info" : "VariableDeclarationStatement[17273-17322]:VariableDeclarationStatement[17341-17390]"
    }, {
      "left" : "Property prop = getProperty(name);",
      "right" : "Property prop = getProperty(name);",
      "info" : "VariableDeclarationStatement[17332-17366]:VariableDeclarationStatement[17400-17434]"
    }, {
      "left" : "if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null)))",
      "right" : "if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null)))",
      "info" : "IfStatement[17375-17906]:IfStatement[17443-17974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17483-17906]:Block[17551-17974]"
    }, {
      "left" : "if (propertiesToErrorFor.containsKey(name))",
      "right" : "if (propertiesToErrorFor.containsKey(name))",
      "info" : "IfStatement[17599-17896]:IfStatement[17667-17964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17643-17896]:Block[17711-17964]"
    }, {
      "left" : "compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));",
      "right" : "compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));",
      "info" : "ExpressionStatement[17657-17884]:ExpressionStatement[17725-17952]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17926-17933]:Modifier[17994-18001]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17934-17938]:PrimitiveType[18002-18006]"
    }, {
      "left" : "printErrorLocations",
      "right" : "printErrorLocations",
      "info" : "SimpleName[17939-17958]:SimpleName[18007-18026]"
    }, {
      "left" : "List<String> errors",
      "right" : "List<String> errors",
      "info" : "SingleVariableDeclaration[17959-17978]:SingleVariableDeclaration[18027-18046]"
    }, {
      "left" : "JSType t",
      "right" : "JSType t",
      "info" : "SingleVariableDeclaration[17980-17988]:SingleVariableDeclaration[18048-18056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17990-18500]:Block[18058-18568]"
    }, {
      "left" : "if (!t.isObject() || t.isAllType())",
      "right" : "if (!t.isObject() || t.isAllType())",
      "info" : "IfStatement[17998-18059]:IfStatement[18066-18127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18034-18059]:Block[18102-18127]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18044-18051]:ReturnStatement[18112-18119]"
    }, {
      "left" : "if (t.isUnionType())",
      "right" : "if (t.isUnionType())",
      "info" : "IfStatement[18067-18233]:IfStatement[18135-18301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18088-18233]:Block[18156-18301]"
    }, {
      "left" : "for (JSType alt : t.toMaybeUnionType().getAlternates())",
      "right" : "for (JSType alt : t.toMaybeUnionType().getAlternates())",
      "info" : "EnhancedForStatement[18098-18209]:EnhancedForStatement[18166-18277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18154-18209]:Block[18222-18277]"
    }, {
      "left" : "printErrorLocations(errors, alt);",
      "right" : "printErrorLocations(errors, alt);",
      "info" : "ExpressionStatement[18166-18199]:ExpressionStatement[18234-18267]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18218-18225]:ReturnStatement[18286-18293]"
    }, {
      "left" : "for (JSError error : invalidationMap.get(t))",
      "right" : "for (JSError error : invalidationMap.get(t))",
      "info" : "EnhancedForStatement[18241-18494]:EnhancedForStatement[18309-18562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18286-18494]:Block[18354-18562]"
    }, {
      "left" : "if (errors.size() > MAX_INVALDIATION_WARNINGS_PER_PROPERTY)",
      "right" : "if (errors.size() > MAX_INVALDIATION_WARNINGS_PER_PROPERTY)",
      "info" : "IfStatement[18296-18385]:IfStatement[18364-18453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18356-18385]:Block[18424-18453]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18368-18375]:ReturnStatement[18436-18443]"
    }, {
      "left" : "errors.add(\n            t.toString() + \" at \" + error.sourceName + \":\" + error.lineNumber);",
      "right" : "errors.add(\n            t.toString() + \" at \" + error.sourceName + \":\" + error.lineNumber);",
      "info" : "ExpressionStatement[18395-18486]:ExpressionStatement[18463-18554]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18883-18890]:Modifier[18951-18958]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[18891-18892]:SimpleType[18959-18960]"
    }, {
      "left" : "processProperty",
      "right" : "processProperty",
      "info" : "SimpleName[18893-18908]:SimpleName[18961-18976]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[18918-18933]:SingleVariableDeclaration[18986-19001]"
    }, {
      "left" : "Property prop",
      "right" : "Property prop",
      "info" : "SingleVariableDeclaration[18935-18948]:SingleVariableDeclaration[19003-19016]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[18950-18956]:SingleVariableDeclaration[19018-19024]"
    }, {
      "left" : "T relatedType",
      "right" : "T relatedType",
      "info" : "SingleVariableDeclaration[18958-18971]:SingleVariableDeclaration[19026-19039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18973-19791]:Block[19041-19859]"
    }, {
      "left" : "type = typeSystem.restrictByNotNullOrUndefined(type);",
      "right" : "type = typeSystem.restrictByNotNullOrUndefined(type);",
      "info" : "ExpressionStatement[18981-19034]:ExpressionStatement[19049-19102]"
    }, {
      "left" : "if (prop.skipRenaming || typeSystem.isInvalidatingType(type))",
      "right" : "if (prop.skipRenaming || typeSystem.isInvalidatingType(type))",
      "info" : "IfStatement[19041-19133]:IfStatement[19109-19201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19103-19133]:Block[19171-19201]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19113-19125]:ReturnStatement[19181-19193]"
    }, {
      "left" : "Iterable<T> alternatives = typeSystem.getTypeAlternatives(type);",
      "right" : "Iterable<T> alternatives = typeSystem.getTypeAlternatives(type);",
      "info" : "VariableDeclarationStatement[19141-19205]:VariableDeclarationStatement[19209-19273]"
    }, {
      "left" : "if (alternatives != null)",
      "right" : "if (alternatives != null)",
      "info" : "IfStatement[19212-19785]:IfStatement[19280-19853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19238-19540]:Block[19306-19608]"
    }, {
      "left" : "T firstType = relatedType;",
      "right" : "T firstType = relatedType;",
      "info" : "VariableDeclarationStatement[19248-19274]:VariableDeclarationStatement[19316-19342]"
    }, {
      "left" : "for (T subType : alternatives)",
      "right" : "for (T subType : alternatives)",
      "info" : "EnhancedForStatement[19283-19506]:EnhancedForStatement[19351-19574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19314-19506]:Block[19382-19574]"
    }, {
      "left" : "T lastType = processProperty(t, prop, subType, firstType);",
      "right" : "T lastType = processProperty(t, prop, subType, firstType);",
      "info" : "VariableDeclarationStatement[19326-19384]:VariableDeclarationStatement[19394-19452]"
    }, {
      "left" : "if (lastType != null)",
      "right" : "if (lastType != null)",
      "info" : "IfStatement[19395-19496]:IfStatement[19463-19564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19417-19496]:Block[19485-19564]"
    }, {
      "left" : "firstType = firstType == null ? lastType : firstType;",
      "right" : "firstType = firstType == null ? lastType : firstType;",
      "info" : "ExpressionStatement[19431-19484]:ExpressionStatement[19499-19552]"
    }, {
      "left" : "return firstType;",
      "right" : "return firstType;",
      "info" : "ReturnStatement[19515-19532]:ReturnStatement[19583-19600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19546-19785]:Block[19614-19853]"
    }, {
      "left" : "T topType = typeSystem.getTypeWithProperty(prop.name, type);",
      "right" : "T topType = typeSystem.getTypeWithProperty(prop.name, type);",
      "info" : "VariableDeclarationStatement[19556-19616]:VariableDeclarationStatement[19624-19684]"
    }, {
      "left" : "if (typeSystem.isInvalidatingType(topType))",
      "right" : "if (typeSystem.isInvalidatingType(topType))",
      "info" : "IfStatement[19625-19703]:IfStatement[19693-19771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19669-19703]:Block[19737-19771]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19681-19693]:ReturnStatement[19749-19761]"
    }, {
      "left" : "prop.addType(type, topType, relatedType);",
      "right" : "prop.addType(type, topType, relatedType);",
      "info" : "ExpressionStatement[19712-19753]:ExpressionStatement[19780-19821]"
    }, {
      "left" : "return topType;",
      "right" : "return topType;",
      "info" : "ReturnStatement[19762-19777]:ReturnStatement[19830-19845]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19870-19874]:PrimitiveType[19938-19942]"
    }, {
      "left" : "renameProperties",
      "right" : "renameProperties",
      "info" : "SimpleName[19875-19891]:SimpleName[19943-19959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19894-21746]:Block[19962-21814]"
    }, {
      "left" : "int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0,\n        instancesSkipped = 0, singleTypeProps = 0;",
      "right" : "int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0,\n        instancesSkipped = 0, singleTypeProps = 0;",
      "info" : "VariableDeclarationStatement[19900-20012]:VariableDeclarationStatement[19968-20080]"
    }, {
      "left" : "Set<String> reported = Sets.newHashSet();",
      "right" : "Set<String> reported = Sets.newHashSet();",
      "info" : "VariableDeclarationStatement[20018-20059]:VariableDeclarationStatement[20086-20127]"
    }, {
      "left" : "for (Property prop : properties.values())",
      "right" : "for (Property prop : properties.values())",
      "info" : "EnhancedForStatement[20064-21321]:EnhancedForStatement[20132-21389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20106-21321]:Block[20174-21389]"
    }, {
      "left" : "if (prop.shouldRename())",
      "right" : "if (prop.shouldRename())",
      "info" : "IfStatement[20114-21315]:IfStatement[20182-21383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20139-21185]:Block[20207-21253]"
    }, {
      "left" : "Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name);",
      "right" : "Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name);",
      "info" : "VariableDeclarationStatement[20149-20219]:VariableDeclarationStatement[20217-20287]"
    }, {
      "left" : "++propsRenamed;",
      "right" : "++propsRenamed;",
      "info" : "ExpressionStatement[20229-20244]:ExpressionStatement[20297-20312]"
    }, {
      "left" : "prop.expandTypesToSkip();",
      "right" : "prop.expandTypesToSkip();",
      "info" : "ExpressionStatement[20253-20278]:ExpressionStatement[20321-20346]"
    }, {
      "left" : "for (Node node : prop.renameNodes)",
      "right" : "for (Node node : prop.renameNodes)",
      "info" : "EnhancedForStatement[20287-21177]:EnhancedForStatement[20355-21245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20322-21177]:Block[20390-21245]"
    }, {
      "left" : "T rootType = prop.rootTypes.get(node);",
      "right" : "T rootType = prop.rootTypes.get(node);",
      "info" : "VariableDeclarationStatement[20334-20372]:VariableDeclarationStatement[20402-20440]"
    }, {
      "left" : "if (prop.shouldRename(rootType))",
      "right" : "if (prop.shouldRename(rootType))",
      "info" : "IfStatement[20383-21167]:IfStatement[20451-21235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20416-20593]:Block[20484-20661]"
    }, {
      "left" : "String newName = propNames.get(rootType);",
      "right" : "String newName = propNames.get(rootType);",
      "info" : "VariableDeclarationStatement[20430-20471]:VariableDeclarationStatement[20498-20539]"
    }, {
      "left" : "node.setString(newName);",
      "right" : "node.setString(newName);",
      "info" : "ExpressionStatement[20484-20508]:ExpressionStatement[20552-20576]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[20521-20549]:ExpressionStatement[20589-20617]"
    }, {
      "left" : "++instancesRenamed;",
      "right" : "++instancesRenamed;",
      "info" : "ExpressionStatement[20562-20581]:ExpressionStatement[20630-20649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20599-21167]:Block[20667-21235]"
    }, {
      "left" : "++instancesSkipped;",
      "right" : "++instancesSkipped;",
      "info" : "ExpressionStatement[20613-20632]:ExpressionStatement[20681-20700]"
    }, {
      "left" : "CheckLevel checkLevelForProp = propertiesToErrorFor.get(prop.name);",
      "right" : "CheckLevel checkLevelForProp = propertiesToErrorFor.get(prop.name);",
      "info" : "VariableDeclarationStatement[20646-20713]:VariableDeclarationStatement[20714-20781]"
    }, {
      "left" : "if (checkLevelForProp != null &&\n                checkLevelForProp != CheckLevel.OFF &&\n                !reported.contains(prop.name))",
      "right" : "if (checkLevelForProp != null &&\n                checkLevelForProp != CheckLevel.OFF &&\n                !reported.contains(prop.name))",
      "info" : "IfStatement[20726-21155]:IfStatement[20794-21223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20861-21155]:Block[20929-21223]"
    }, {
      "left" : "reported.add(prop.name);",
      "right" : "reported.add(prop.name);",
      "info" : "ExpressionStatement[20877-20901]:ExpressionStatement[20945-20969]"
    }, {
      "left" : "compiler.report(JSError.make(\n                  NodeUtil.getSourceName(node), node,\n                  checkLevelForProp,\n                  Warnings.INVALIDATION_ON_TYPE, prop.name,\n                  rootType.toString(), \"\"));",
      "right" : "compiler.report(JSError.make(\n                  NodeUtil.getSourceName(node), node,\n                  checkLevelForProp,\n                  Warnings.INVALIDATION_ON_TYPE, prop.name,\n                  rootType.toString(), \"\"));",
      "info" : "ExpressionStatement[20916-21141]:ExpressionStatement[20984-21209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21191-21315]:Block[21259-21383]"
    }, {
      "left" : "if (prop.skipRenaming)",
      "right" : "if (prop.skipRenaming)",
      "info" : "IfStatement[21201-21307]:IfStatement[21269-21375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21224-21261]:Block[21292-21329]"
    }, {
      "left" : "++propsSkipped;",
      "right" : "++propsSkipped;",
      "info" : "ExpressionStatement[21236-21251]:ExpressionStatement[21304-21319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21267-21307]:Block[21335-21375]"
    }, {
      "left" : "++singleTypeProps;",
      "right" : "++singleTypeProps;",
      "info" : "ExpressionStatement[21279-21297]:ExpressionStatement[21347-21365]"
    }, {
      "left" : "logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"\n                + propsRenamed + \" properties.\");",
      "right" : "logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"\n                + propsRenamed + \" properties.\");",
      "info" : "ExpressionStatement[21326-21436]:ExpressionStatement[21394-21504]"
    }, {
      "left" : "logger.fine(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n                + \"properties, \" + propsSkipped + \" instances of properties \"\n                + \"that were skipped for specific types and \" + singleTypeProps\n                + \" properties that were referenced from only one type.\");",
      "right" : "logger.fine(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n                + \"properties, \" + propsSkipped + \" instances of properties \"\n                + \"that were skipped for specific types and \" + singleTypeProps\n                + \" properties that were referenced from only one type.\");",
      "info" : "ExpressionStatement[21441-21742]:ExpressionStatement[21509-21810]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21873-21880]:Modifier[21941-21948]"
    }, {
      "left" : "Map<T, String>",
      "right" : "Map<T, String>",
      "info" : "ParameterizedType[21881-21895]:ParameterizedType[21949-21963]"
    }, {
      "left" : "buildPropNames",
      "right" : "buildPropNames",
      "info" : "SimpleName[21896-21910]:SimpleName[21964-21978]"
    }, {
      "left" : "UnionFind<T> types",
      "right" : "UnionFind<T> types",
      "info" : "SingleVariableDeclaration[21911-21929]:SingleVariableDeclaration[21979-21997]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[21931-21942]:SingleVariableDeclaration[21999-22010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21944-22543]:Block[22012-22611]"
    }, {
      "left" : "Map<T, String> names = Maps.newHashMap();",
      "right" : "Map<T, String> names = Maps.newHashMap();",
      "info" : "VariableDeclarationStatement[21950-21991]:VariableDeclarationStatement[22018-22059]"
    }, {
      "left" : "for (Set<T> set : types.allEquivalenceClasses())",
      "right" : "for (Set<T> set : types.allEquivalenceClasses())",
      "info" : "EnhancedForStatement[21996-22521]:EnhancedForStatement[22064-22589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22045-22521]:Block[22113-22589]"
    }, {
      "left" : "checkState(!set.isEmpty());",
      "right" : "checkState(!set.isEmpty());",
      "info" : "ExpressionStatement[22053-22080]:ExpressionStatement[22121-22148]"
    }, {
      "left" : "String typeName = null;",
      "right" : "String typeName = null;",
      "info" : "VariableDeclarationStatement[22088-22111]:VariableDeclarationStatement[22156-22179]"
    }, {
      "left" : "for (T type : set)",
      "right" : "for (T type : set)",
      "info" : "EnhancedForStatement[22118-22269]:EnhancedForStatement[22186-22337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22137-22269]:Block[22205-22337]"
    }, {
      "left" : "if (typeName == null || type.toString().compareTo(typeName) < 0)",
      "right" : "if (typeName == null || type.toString().compareTo(typeName) < 0)",
      "info" : "IfStatement[22147-22261]:IfStatement[22215-22329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22212-22261]:Block[22280-22329]"
    }, {
      "left" : "typeName = type.toString();",
      "right" : "typeName = type.toString();",
      "info" : "ExpressionStatement[22224-22251]:ExpressionStatement[22292-22319]"
    }, {
      "left" : "String newName;",
      "right" : "String newName;",
      "info" : "VariableDeclarationStatement[22277-22292]:VariableDeclarationStatement[22345-22360]"
    }, {
      "left" : "if (\"{...}\".equals(typeName))",
      "right" : "if (\"{...}\".equals(typeName))",
      "info" : "IfStatement[22299-22445]:IfStatement[22367-22513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22329-22362]:Block[22397-22430]"
    }, {
      "left" : "newName = name;",
      "right" : "newName = name;",
      "info" : "ExpressionStatement[22339-22354]:ExpressionStatement[22407-22422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22368-22445]:Block[22436-22513]"
    }, {
      "left" : "newName = typeName.replaceAll(\"[^\\\\w$]\", \"_\") + \"$\" + name;",
      "right" : "newName = typeName.replaceAll(\"[^\\\\w$]\", \"_\") + \"$\" + name;",
      "info" : "ExpressionStatement[22378-22437]:ExpressionStatement[22446-22505]"
    }, {
      "left" : "for (T type : set)",
      "right" : "for (T type : set)",
      "info" : "EnhancedForStatement[22453-22515]:EnhancedForStatement[22521-22583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22472-22515]:Block[22540-22583]"
    }, {
      "left" : "names.put(type, newName);",
      "right" : "names.put(type, newName);",
      "info" : "ExpressionStatement[22482-22507]:ExpressionStatement[22550-22575]"
    }, {
      "left" : "return names;",
      "right" : "return names;",
      "info" : "ReturnStatement[22526-22539]:ReturnStatement[22594-22607]"
    }, {
      "left" : "Multimap<String, Collection<T>>",
      "right" : "Multimap<String, Collection<T>>",
      "info" : "ParameterizedType[22625-22656]:ParameterizedType[22693-22724]"
    }, {
      "left" : "getRenamedTypesForTesting",
      "right" : "getRenamedTypesForTesting",
      "info" : "SimpleName[22657-22682]:SimpleName[22725-22750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22685-23144]:Block[22753-23212]"
    }, {
      "left" : "Multimap<String, Collection<T>> ret = HashMultimap.create();",
      "right" : "Multimap<String, Collection<T>> ret = HashMultimap.create();",
      "info" : "VariableDeclarationStatement[22691-22751]:VariableDeclarationStatement[22759-22819]"
    }, {
      "left" : "for (Map.Entry<String, Property> entry : properties.entrySet())",
      "right" : "for (Map.Entry<String, Property> entry : properties.entrySet())",
      "info" : "EnhancedForStatement[22756-23124]:EnhancedForStatement[22824-23192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22820-23124]:Block[22888-23192]"
    }, {
      "left" : "Property prop = entry.getValue();",
      "right" : "Property prop = entry.getValue();",
      "info" : "VariableDeclarationStatement[22828-22861]:VariableDeclarationStatement[22896-22929]"
    }, {
      "left" : "if (!prop.skipRenaming)",
      "right" : "if (!prop.skipRenaming)",
      "info" : "IfStatement[22868-23118]:IfStatement[22936-23186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22892-23118]:Block[22960-23186]"
    }, {
      "left" : "for (Collection<T> c : prop.getTypes().allEquivalenceClasses())",
      "right" : "for (Collection<T> c : prop.getTypes().allEquivalenceClasses())",
      "info" : "EnhancedForStatement[22902-23110]:EnhancedForStatement[22970-23178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22966-23110]:Block[23034-23178]"
    }, {
      "left" : "if (!c.isEmpty() && !prop.typesToSkip.contains(c.iterator().next()))",
      "right" : "if (!c.isEmpty() && !prop.typesToSkip.contains(c.iterator().next()))",
      "info" : "IfStatement[22978-23100]:IfStatement[23046-23168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23047-23100]:Block[23115-23168]"
    }, {
      "left" : "ret.put(entry.getKey(), c);",
      "right" : "ret.put(entry.getKey(), c);",
      "info" : "ExpressionStatement[23061-23088]:ExpressionStatement[23129-23156]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[23129-23140]:ReturnStatement[23197-23208]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23223-23230]:Modifier[23291-23298]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[23231-23240]:TYPE_DECLARATION_KIND[23299-23308]"
    }, {
      "left" : "TypeSystem",
      "right" : "TypeSystem",
      "info" : "SimpleName[23241-23251]:SimpleName[23309-23319]"
    }, {
      "left" : "StaticScope<T>",
      "right" : "StaticScope<T>",
      "info" : "ParameterizedType[23459-23473]:ParameterizedType[23527-23541]"
    }, {
      "left" : "getRootScope",
      "right" : "getRootScope",
      "info" : "SimpleName[23474-23486]:SimpleName[23542-23554]"
    }, {
      "left" : "StaticScope<T>",
      "right" : "StaticScope<T>",
      "info" : "ParameterizedType[23564-23578]:ParameterizedType[23632-23646]"
    }, {
      "left" : "getFunctionScope",
      "right" : "getFunctionScope",
      "info" : "SimpleName[23579-23595]:SimpleName[23647-23663]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[23596-23605]:SingleVariableDeclaration[23664-23673]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[24008-24009]:SimpleType[24076-24077]"
    }, {
      "left" : "getType",
      "right" : "getType",
      "info" : "SimpleName[24010-24017]:SimpleName[24078-24085]"
    }, {
      "left" : "StaticScope<T> scope",
      "right" : "StaticScope<T> scope",
      "info" : "SingleVariableDeclaration[24018-24038]:SingleVariableDeclaration[24086-24106]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[24040-24049]:SingleVariableDeclaration[24108-24117]"
    }, {
      "left" : "String prop",
      "right" : "String prop",
      "info" : "SingleVariableDeclaration[24051-24062]:SingleVariableDeclaration[24119-24130]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24353-24360]:PrimitiveType[24421-24428]"
    }, {
      "left" : "isInvalidatingType",
      "right" : "isInvalidatingType",
      "info" : "SimpleName[24361-24379]:SimpleName[24429-24447]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[24380-24386]:SingleVariableDeclaration[24448-24454]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24533-24537]:PrimitiveType[24601-24605]"
    }, {
      "left" : "addInvalidatingType",
      "right" : "addInvalidatingType",
      "info" : "SimpleName[24538-24557]:SimpleName[24606-24625]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[24558-24569]:SingleVariableDeclaration[24626-24637]"
    }, {
      "left" : "ImmutableSet<T>",
      "right" : "ImmutableSet<T>",
      "info" : "ParameterizedType[24781-24796]:ParameterizedType[24849-24864]"
    }, {
      "left" : "getTypesToSkipForType",
      "right" : "getTypesToSkipForType",
      "info" : "SimpleName[24797-24818]:SimpleName[24865-24886]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[24819-24825]:SingleVariableDeclaration[24887-24893]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24960-24967]:PrimitiveType[25028-25035]"
    }, {
      "left" : "isTypeToSkip",
      "right" : "isTypeToSkip",
      "info" : "SimpleName[24968-24980]:SimpleName[25036-25048]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[24981-24987]:SingleVariableDeclaration[25049-25055]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[25068-25069]:SimpleType[25136-25137]"
    }, {
      "left" : "restrictByNotNullOrUndefined",
      "right" : "restrictByNotNullOrUndefined",
      "info" : "SimpleName[25070-25098]:SimpleName[25138-25166]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[25099-25105]:SingleVariableDeclaration[25167-25173]"
    }, {
      "left" : "Iterable<T>",
      "right" : "Iterable<T>",
      "info" : "ParameterizedType[25308-25319]:ParameterizedType[25376-25387]"
    }, {
      "left" : "getTypeAlternatives",
      "right" : "getTypeAlternatives",
      "info" : "SimpleName[25320-25339]:SimpleName[25388-25407]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[25340-25346]:SingleVariableDeclaration[25408-25414]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[25501-25502]:SimpleType[25569-25570]"
    }, {
      "left" : "getTypeWithProperty",
      "right" : "getTypeWithProperty",
      "info" : "SimpleName[25503-25522]:SimpleName[25571-25590]"
    }, {
      "left" : "String field",
      "right" : "String field",
      "info" : "SingleVariableDeclaration[25523-25535]:SingleVariableDeclaration[25591-25603]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[25537-25543]:SingleVariableDeclaration[25605-25611]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[25690-25691]:SimpleType[25758-25759]"
    }, {
      "left" : "getInstanceFromPrototype",
      "right" : "getInstanceFromPrototype",
      "info" : "SimpleName[25692-25716]:SimpleName[25760-25784]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[25717-25723]:SingleVariableDeclaration[25785-25791]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25892-25896]:PrimitiveType[25960-25964]"
    }, {
      "left" : "recordInterfaces",
      "right" : "recordInterfaces",
      "info" : "SimpleName[25897-25913]:SimpleName[25965-25981]"
    }, {
      "left" : "T type",
      "right" : "T type",
      "info" : "SingleVariableDeclaration[25914-25920]:SingleVariableDeclaration[25982-25988]"
    }, {
      "left" : "T relatedType",
      "right" : "T relatedType",
      "info" : "SingleVariableDeclaration[25922-25935]:SingleVariableDeclaration[25990-26003]"
    }, {
      "left" : "DisambiguateProperties<T>.Property p",
      "right" : "DisambiguateProperties<T>.Property p",
      "info" : "SingleVariableDeclaration[25963-25999]:SingleVariableDeclaration[26031-26067]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26062-26069]:Modifier[26130-26137]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26070-26076]:Modifier[26138-26144]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[26077-26082]:TYPE_DECLARATION_KIND[26145-26150]"
    }, {
      "left" : "JSTypeSystem",
      "right" : "JSTypeSystem",
      "info" : "SimpleName[26083-26095]:SimpleName[26151-26163]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26219-26225]:Modifier[26287-26293]"
    }, {
      "left" : "JSTypeSystem",
      "right" : "JSTypeSystem",
      "info" : "SimpleName[26226-26238]:SimpleName[26294-26306]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[26239-26264]:SingleVariableDeclaration[26307-26332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26266-26871]:Block[26334-26939]"
    }, {
      "left" : "registry = compiler.getTypeRegistry();",
      "right" : "registry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[26274-26312]:ExpressionStatement[26342-26380]"
    }, {
      "left" : "invalidatingTypes = Sets.newHashSet(\n          registry.getNativeType(JSTypeNative.ALL_TYPE),\n          registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n          registry.getNativeType(JSTypeNative.NO_TYPE),\n          registry.getNativeType(JSTypeNative.FUNCTION_PROTOTYPE),\n          registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n          registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),\n          registry.getNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE),\n          registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));",
      "right" : "invalidatingTypes = Sets.newHashSet(\n          registry.getNativeType(JSTypeNative.ALL_TYPE),\n          registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n          registry.getNativeType(JSTypeNative.NO_TYPE),\n          registry.getNativeType(JSTypeNative.FUNCTION_PROTOTYPE),\n          registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n          registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),\n          registry.getNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE),\n          registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[26319-26864]:ExpressionStatement[26387-26932]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26877-26886]:MarkerAnnotation[26945-26954]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26887-26893]:Modifier[26955-26961]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26894-26898]:PrimitiveType[26962-26966]"
    }, {
      "left" : "addInvalidatingType",
      "right" : "addInvalidatingType",
      "info" : "SimpleName[26899-26918]:SimpleName[26967-26986]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[26919-26930]:SingleVariableDeclaration[26987-26998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26932-27013]:Block[27000-27081]"
    }, {
      "left" : "checkState(!type.isUnionType());",
      "right" : "checkState(!type.isUnionType());",
      "info" : "ExpressionStatement[26940-26972]:ExpressionStatement[27008-27040]"
    }, {
      "left" : "invalidatingTypes.add(type);",
      "right" : "invalidatingTypes.add(type);",
      "info" : "ExpressionStatement[26979-27007]:ExpressionStatement[27047-27075]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27019-27028]:MarkerAnnotation[27087-27096]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27029-27035]:Modifier[27097-27103]"
    }, {
      "left" : "StaticScope<JSType>",
      "right" : "StaticScope<JSType>",
      "info" : "ParameterizedType[27036-27055]:ParameterizedType[27104-27123]"
    }, {
      "left" : "getRootScope",
      "right" : "getRootScope",
      "info" : "SimpleName[27056-27068]:SimpleName[27124-27136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27071-27087]:Block[27139-27155]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27073-27085]:ReturnStatement[27141-27153]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27093-27102]:MarkerAnnotation[27161-27170]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27103-27109]:Modifier[27171-27177]"
    }, {
      "left" : "StaticScope<JSType>",
      "right" : "StaticScope<JSType>",
      "info" : "ParameterizedType[27110-27129]:ParameterizedType[27178-27197]"
    }, {
      "left" : "getFunctionScope",
      "right" : "getFunctionScope",
      "info" : "SimpleName[27130-27146]:SimpleName[27198-27214]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[27147-27156]:SingleVariableDeclaration[27215-27224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27158-27184]:Block[27226-27252]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27166-27178]:ReturnStatement[27234-27246]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27190-27199]:MarkerAnnotation[27258-27267]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27200-27206]:Modifier[27268-27274]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[27207-27213]:SimpleType[27275-27281]"
    }, {
      "left" : "getType",
      "right" : "getType",
      "info" : "SimpleName[27214-27221]:SimpleName[27282-27289]"
    }, {
      "left" : "StaticScope<JSType> scope",
      "right" : "StaticScope<JSType> scope",
      "info" : "SingleVariableDeclaration[27231-27256]:SingleVariableDeclaration[27299-27324]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[27258-27267]:SingleVariableDeclaration[27326-27335]"
    }, {
      "left" : "String prop",
      "right" : "String prop",
      "info" : "SingleVariableDeclaration[27269-27280]:SingleVariableDeclaration[27337-27348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27282-27432]:Block[27350-27500]"
    }, {
      "left" : "if (node.getJSType() == null)",
      "right" : "if (node.getJSType() == null)",
      "info" : "IfStatement[27290-27395]:IfStatement[27358-27463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27320-27395]:Block[27388-27463]"
    }, {
      "left" : "return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "ReturnStatement[27330-27387]:ReturnStatement[27398-27455]"
    }, {
      "left" : "return node.getJSType();",
      "right" : "return node.getJSType();",
      "info" : "ReturnStatement[27402-27426]:ReturnStatement[27470-27494]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27438-27447]:MarkerAnnotation[27506-27515]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27448-27454]:Modifier[27516-27522]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27455-27462]:PrimitiveType[27523-27530]"
    }, {
      "left" : "isInvalidatingType",
      "right" : "isInvalidatingType",
      "info" : "SimpleName[27463-27481]:SimpleName[27531-27549]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[27482-27493]:SingleVariableDeclaration[27550-27561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27495-27762]:Block[27563-27830]"
    }, {
      "left" : "if (type == null || invalidatingTypes.contains(type) ||\n          type.isUnknownType())",
      "right" : "if (type == null || invalidatingTypes.contains(type) ||\n          type.isUnknownType())",
      "info" : "IfStatement[27503-27644]:IfStatement[27571-27712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27614-27644]:Block[27682-27712]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27624-27636]:ReturnStatement[27692-27704]"
    }, {
      "left" : "ObjectType objType = ObjectType.cast(type);",
      "right" : "ObjectType objType = ObjectType.cast(type);",
      "info" : "VariableDeclarationStatement[27652-27695]:VariableDeclarationStatement[27720-27763]"
    }, {
      "left" : "return objType != null && !objType.hasReferenceName();",
      "right" : "return objType != null && !objType.hasReferenceName();",
      "info" : "ReturnStatement[27702-27756]:ReturnStatement[27770-27824]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27768-27777]:MarkerAnnotation[27836-27845]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27778-27784]:Modifier[27846-27852]"
    }, {
      "left" : "ImmutableSet<JSType>",
      "right" : "ImmutableSet<JSType>",
      "info" : "ParameterizedType[27785-27805]:ParameterizedType[27853-27873]"
    }, {
      "left" : "getTypesToSkipForType",
      "right" : "getTypesToSkipForType",
      "info" : "SimpleName[27806-27827]:SimpleName[27874-27895]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[27828-27839]:SingleVariableDeclaration[27896-27907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27841-28388]:Block[27909-28456]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[27849-27892]:ExpressionStatement[27917-27960]"
    }, {
      "left" : "if (type.isUnionType())",
      "right" : "if (type.isUnionType())",
      "info" : "IfStatement[27899-28311]:IfStatement[27967-28379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27923-28165]:Block[27991-28233]"
    }, {
      "left" : "Set<JSType> types = Sets.newHashSet(type);",
      "right" : "Set<JSType> types = Sets.newHashSet(type);",
      "info" : "VariableDeclarationStatement[27933-27975]:VariableDeclarationStatement[28001-28043]"
    }, {
      "left" : "for (JSType alt : type.toMaybeUnionType().getAlternates())",
      "right" : "for (JSType alt : type.toMaybeUnionType().getAlternates())",
      "info" : "EnhancedForStatement[27984-28114]:EnhancedForStatement[28052-28182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28043-28114]:Block[28111-28182]"
    }, {
      "left" : "types.addAll(getTypesToSkipForTypeNonUnion(alt));",
      "right" : "types.addAll(getTypesToSkipForTypeNonUnion(alt));",
      "info" : "ExpressionStatement[28055-28104]:ExpressionStatement[28123-28172]"
    }, {
      "left" : "return ImmutableSet.copyOf(types);",
      "right" : "return ImmutableSet.copyOf(types);",
      "info" : "ReturnStatement[28123-28157]:ReturnStatement[28191-28225]"
    }, {
      "left" : "if (type.isEnumElementType())",
      "right" : "if (type.isEnumElementType())",
      "info" : "IfStatement[28171-28311]:IfStatement[28239-28379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28201-28311]:Block[28269-28379]"
    }, {
      "left" : "return getTypesToSkipForType(\n            type.toMaybeEnumElementType().getPrimitiveType());",
      "right" : "return getTypesToSkipForType(\n            type.toMaybeEnumElementType().getPrimitiveType());",
      "info" : "ReturnStatement[28211-28303]:ReturnStatement[28279-28371]"
    }, {
      "left" : "return ImmutableSet.copyOf(getTypesToSkipForTypeNonUnion(type));",
      "right" : "return ImmutableSet.copyOf(getTypesToSkipForTypeNonUnion(type));",
      "info" : "ReturnStatement[28318-28382]:ReturnStatement[28386-28450]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28394-28401]:Modifier[28462-28469]"
    }, {
      "left" : "Set<JSType>",
      "right" : "Set<JSType>",
      "info" : "ParameterizedType[28402-28413]:ParameterizedType[28470-28481]"
    }, {
      "left" : "getTypesToSkipForTypeNonUnion",
      "right" : "getTypesToSkipForTypeNonUnion",
      "info" : "SimpleName[28414-28443]:SimpleName[28482-28511]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[28444-28455]:SingleVariableDeclaration[28512-28523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28457-28824]:Block[28525-28892]"
    }, {
      "left" : "Set<JSType> types = Sets.newHashSet();",
      "right" : "Set<JSType> types = Sets.newHashSet();",
      "info" : "VariableDeclarationStatement[28465-28503]:VariableDeclarationStatement[28533-28571]"
    }, {
      "left" : "JSType skipType = type;",
      "right" : "JSType skipType = type;",
      "info" : "VariableDeclarationStatement[28510-28533]:VariableDeclarationStatement[28578-28601]"
    }, {
      "left" : "while (skipType != null)",
      "right" : "while (skipType != null)",
      "info" : "WhileStatement[28540-28798]:WhileStatement[28608-28866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28565-28798]:Block[28633-28866]"
    }, {
      "left" : "types.add(skipType);",
      "right" : "types.add(skipType);",
      "info" : "ExpressionStatement[28575-28595]:ExpressionStatement[28643-28663]"
    }, {
      "left" : "ObjectType objSkipType = skipType.toObjectType();",
      "right" : "ObjectType objSkipType = skipType.toObjectType();",
      "info" : "VariableDeclarationStatement[28605-28654]:VariableDeclarationStatement[28673-28722]"
    }, {
      "left" : "if (objSkipType != null)",
      "right" : "if (objSkipType != null)",
      "info" : "IfStatement[28663-28790]:IfStatement[28731-28858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28688-28756]:Block[28756-28824]"
    }, {
      "left" : "skipType = objSkipType.getImplicitPrototype();",
      "right" : "skipType = objSkipType.getImplicitPrototype();",
      "info" : "ExpressionStatement[28700-28746]:ExpressionStatement[28768-28814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28762-28790]:Block[28830-28858]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28774-28780]:BreakStatement[28842-28848]"
    }, {
      "left" : "return types;",
      "right" : "return types;",
      "info" : "ReturnStatement[28805-28818]:ReturnStatement[28873-28886]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28830-28839]:MarkerAnnotation[28898-28907]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28840-28846]:Modifier[28908-28914]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28847-28854]:PrimitiveType[28915-28922]"
    }, {
      "left" : "isTypeToSkip",
      "right" : "isTypeToSkip",
      "info" : "SimpleName[28855-28867]:SimpleName[28923-28935]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[28868-28879]:SingleVariableDeclaration[28936-28947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28881-28952]:Block[28949-29020]"
    }, {
      "left" : "return type.isEnumType() || (type.autoboxesTo() != null);",
      "right" : "return type.isEnumType() || (type.autoboxesTo() != null);",
      "info" : "ReturnStatement[28889-28946]:ReturnStatement[28957-29014]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28958-28967]:MarkerAnnotation[29026-29035]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28968-28974]:Modifier[29036-29042]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[28975-28981]:SimpleType[29043-29049]"
    }, {
      "left" : "restrictByNotNullOrUndefined",
      "right" : "restrictByNotNullOrUndefined",
      "info" : "SimpleName[28982-29010]:SimpleName[29050-29078]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[29011-29022]:SingleVariableDeclaration[29079-29090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29024-29081]:Block[29092-29149]"
    }, {
      "left" : "return type.restrictByNotNullOrUndefined();",
      "right" : "return type.restrictByNotNullOrUndefined();",
      "info" : "ReturnStatement[29032-29075]:ReturnStatement[29100-29143]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29087-29096]:MarkerAnnotation[29155-29164]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29097-29103]:Modifier[29165-29171]"
    }, {
      "left" : "Iterable<JSType>",
      "right" : "Iterable<JSType>",
      "info" : "ParameterizedType[29104-29120]:ParameterizedType[29172-29188]"
    }, {
      "left" : "getTypeAlternatives",
      "right" : "getTypeAlternatives",
      "info" : "SimpleName[29121-29140]:SimpleName[29189-29208]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[29141-29152]:SingleVariableDeclaration[29209-29220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29154-29735]:Block[29222-29803]"
    }, {
      "left" : "if (type.isUnionType())",
      "right" : "if (type.isUnionType())",
      "info" : "IfStatement[29162-29729]:IfStatement[29230-29797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29186-29251]:Block[29254-29319]"
    }, {
      "left" : "return type.toMaybeUnionType().getAlternates();",
      "right" : "return type.toMaybeUnionType().getAlternates();",
      "info" : "ReturnStatement[29196-29243]:ReturnStatement[29264-29311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29257-29729]:Block[29325-29797]"
    }, {
      "left" : "ObjectType objType = type.toObjectType();",
      "right" : "ObjectType objType = type.toObjectType();",
      "info" : "VariableDeclarationStatement[29267-29308]:VariableDeclarationStatement[29335-29376]"
    }, {
      "left" : "if (objType != null &&\n            objType.getConstructor() != null &&\n            objType.getConstructor().isInterface())",
      "right" : "if (objType != null &&\n            objType.getConstructor() != null &&\n            objType.getConstructor().isInterface())",
      "info" : "IfStatement[29317-29721]:IfStatement[29385-29789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29440-29681]:Block[29508-29749]"
    }, {
      "left" : "List<JSType> list = Lists.newArrayList();",
      "right" : "List<JSType> list = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[29452-29493]:VariableDeclarationStatement[29520-29561]"
    }, {
      "left" : "for (FunctionType impl\n                   : registry.getDirectImplementors(objType))",
      "right" : "for (FunctionType impl\n                   : registry.getDirectImplementors(objType))",
      "info" : "EnhancedForStatement[29504-29648]:EnhancedForStatement[29572-29716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29589-29648]:Block[29657-29716]"
    }, {
      "left" : "list.add(impl.getInstanceType());",
      "right" : "list.add(impl.getInstanceType());",
      "info" : "ExpressionStatement[29603-29636]:ExpressionStatement[29671-29704]"
    }, {
      "left" : "return list;",
      "right" : "return list;",
      "info" : "ReturnStatement[29659-29671]:ReturnStatement[29727-29739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29687-29721]:Block[29755-29789]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29699-29711]:ReturnStatement[29767-29779]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29741-29750]:MarkerAnnotation[29809-29818]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29751-29757]:Modifier[29819-29825]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[29758-29768]:SimpleType[29826-29836]"
    }, {
      "left" : "getTypeWithProperty",
      "right" : "getTypeWithProperty",
      "info" : "SimpleName[29769-29788]:SimpleName[29837-29856]"
    }, {
      "left" : "String field",
      "right" : "String field",
      "info" : "SingleVariableDeclaration[29789-29801]:SingleVariableDeclaration[29857-29869]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[29803-29814]:SingleVariableDeclaration[29871-29882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29816-31922]:Block[29884-31990]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[29824-29872]:IfStatement[29892-29940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29842-29872]:Block[29910-29940]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29852-29864]:ReturnStatement[29920-29932]"
    }, {
      "left" : "if (type.isEnumElementType())",
      "right" : "if (type.isEnumElementType())",
      "info" : "IfStatement[29880-30025]:IfStatement[29948-30093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29910-30025]:Block[29978-30093]"
    }, {
      "left" : "return getTypeWithProperty(\n            field, type.toMaybeEnumElementType().getPrimitiveType());",
      "right" : "return getTypeWithProperty(\n            field, type.toMaybeEnumElementType().getPrimitiveType());",
      "info" : "ReturnStatement[29920-30017]:ReturnStatement[29988-30085]"
    }, {
      "left" : "if (!(type instanceof ObjectType))",
      "right" : "if (!(type instanceof ObjectType))",
      "info" : "IfStatement[30033-30206]:IfStatement[30101-30274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30068-30206]:Block[30136-30274]"
    }, {
      "left" : "if (type.autoboxesTo() != null)",
      "right" : "if (type.autoboxesTo() != null)",
      "info" : "IfStatement[30078-30198]:IfStatement[30146-30266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30110-30158]:Block[30178-30226]"
    }, {
      "left" : "type = type.autoboxesTo();",
      "right" : "type = type.autoboxesTo();",
      "info" : "ExpressionStatement[30122-30148]:ExpressionStatement[30190-30216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30164-30198]:Block[30232-30266]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30176-30188]:ReturnStatement[30244-30256]"
    }, {
      "left" : "if (\"prototype\".equals(field))",
      "right" : "if (\"prototype\".equals(field))",
      "info" : "IfStatement[30265-30326]:IfStatement[30333-30394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30296-30326]:Block[30364-30394]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30306-30318]:ReturnStatement[30374-30386]"
    }, {
      "left" : "ObjectType foundType = null;",
      "right" : "ObjectType foundType = null;",
      "info" : "VariableDeclarationStatement[30571-30599]:VariableDeclarationStatement[30639-30667]"
    }, {
      "left" : "ObjectType objType = ObjectType.cast(type);",
      "right" : "ObjectType objType = ObjectType.cast(type);",
      "info" : "VariableDeclarationStatement[30606-30649]:VariableDeclarationStatement[30674-30717]"
    }, {
      "left" : "if (objType != null && objType.getConstructor() != null\n          && objType.getConstructor().isInterface())",
      "right" : "if (objType != null && objType.getConstructor() != null\n          && objType.getConstructor().isInterface())",
      "info" : "IfStatement[30656-31278]:IfStatement[30724-31346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30765-31030]:Block[30833-31098]"
    }, {
      "left" : "ObjectType topInterface = FunctionType.getTopDefiningInterface(\n            objType, field);",
      "right" : "ObjectType topInterface = FunctionType.getTopDefiningInterface(\n            objType, field);",
      "info" : "VariableDeclarationStatement[30775-30867]:VariableDeclarationStatement[30843-30935]"
    }, {
      "left" : "if (topInterface != null && topInterface.getConstructor() != null)",
      "right" : "if (topInterface != null && topInterface.getConstructor() != null)",
      "info" : "IfStatement[30876-31022]:IfStatement[30944-31090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30943-31022]:Block[31011-31090]"
    }, {
      "left" : "foundType = topInterface.getConstructor().getPrototype();",
      "right" : "foundType = topInterface.getConstructor().getPrototype();",
      "info" : "ExpressionStatement[30955-31012]:ExpressionStatement[31023-31080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31036-31278]:Block[31104-31346]"
    }, {
      "left" : "while (objType != null && objType.getImplicitPrototype() != objType)",
      "right" : "while (objType != null && objType.getImplicitPrototype() != objType)",
      "info" : "WhileStatement[31046-31270]:WhileStatement[31114-31338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31115-31270]:Block[31183-31338]"
    }, {
      "left" : "if (objType.hasOwnProperty(field))",
      "right" : "if (objType.hasOwnProperty(field))",
      "info" : "IfStatement[31127-31208]:IfStatement[31195-31276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31162-31208]:Block[31230-31276]"
    }, {
      "left" : "foundType = objType;",
      "right" : "foundType = objType;",
      "info" : "ExpressionStatement[31176-31196]:ExpressionStatement[31244-31264]"
    }, {
      "left" : "objType = objType.getImplicitPrototype();",
      "right" : "objType = objType.getImplicitPrototype();",
      "info" : "ExpressionStatement[31219-31260]:ExpressionStatement[31287-31328]"
    }, {
      "left" : "if (foundType == null)",
      "right" : "if (foundType == null)",
      "info" : "IfStatement[31436-31892]:IfStatement[31504-31960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31459-31892]:Block[31527-31960]"
    }, {
      "left" : "ObjectType maybeType = ObjectType.cast(\n            registry.getGreatestSubtypeWithProperty(type, field));",
      "right" : "ObjectType maybeType = ObjectType.cast(\n            registry.getGreatestSubtypeWithProperty(type, field));",
      "info" : "VariableDeclarationStatement[31469-31575]:VariableDeclarationStatement[31537-31643]"
    }, {
      "left" : "if (maybeType != null && maybeType.hasOwnProperty(field))",
      "right" : "if (maybeType != null && maybeType.hasOwnProperty(field))",
      "info" : "IfStatement[31782-31884]:IfStatement[31850-31952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31840-31884]:Block[31908-31952]"
    }, {
      "left" : "foundType = maybeType;",
      "right" : "foundType = maybeType;",
      "info" : "ExpressionStatement[31852-31874]:ExpressionStatement[31920-31942]"
    }, {
      "left" : "return foundType;",
      "right" : "return foundType;",
      "info" : "ReturnStatement[31899-31916]:ReturnStatement[31967-31984]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31928-31937]:MarkerAnnotation[31996-32005]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31938-31944]:Modifier[32006-32012]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[31945-31951]:SimpleType[32013-32019]"
    }, {
      "left" : "getInstanceFromPrototype",
      "right" : "getInstanceFromPrototype",
      "info" : "SimpleName[31952-31976]:SimpleName[32020-32044]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[31977-31988]:SingleVariableDeclaration[32045-32056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31990-32312]:Block[32058-32380]"
    }, {
      "left" : "if (type.isFunctionPrototypeType())",
      "right" : "if (type.isFunctionPrototypeType())",
      "info" : "IfStatement[31998-32287]:IfStatement[32066-32355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32034-32287]:Block[32102-32355]"
    }, {
      "left" : "ObjectType prototype = (ObjectType) type;",
      "right" : "ObjectType prototype = (ObjectType) type;",
      "info" : "VariableDeclarationStatement[32044-32085]:VariableDeclarationStatement[32112-32153]"
    }, {
      "left" : "FunctionType owner = prototype.getOwnerFunction();",
      "right" : "FunctionType owner = prototype.getOwnerFunction();",
      "info" : "VariableDeclarationStatement[32094-32144]:VariableDeclarationStatement[32162-32212]"
    }, {
      "left" : "if (owner.isConstructor() || owner.isInterface())",
      "right" : "if (owner.isConstructor() || owner.isInterface())",
      "info" : "IfStatement[32153-32279]:IfStatement[32221-32347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32203-32279]:Block[32271-32347]"
    }, {
      "left" : "return prototype.getOwnerFunction().getInstanceType();",
      "right" : "return prototype.getOwnerFunction().getInstanceType();",
      "info" : "ReturnStatement[32215-32269]:ReturnStatement[32283-32337]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32294-32306]:ReturnStatement[32362-32374]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32318-32327]:MarkerAnnotation[32386-32395]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32332-32338]:Modifier[32400-32406]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32339-32343]:PrimitiveType[32407-32411]"
    }, {
      "left" : "recordInterfaces",
      "right" : "recordInterfaces",
      "info" : "SimpleName[32344-32360]:SimpleName[32412-32428]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[32361-32372]:SingleVariableDeclaration[32429-32440]"
    }, {
      "left" : "JSType relatedType",
      "right" : "JSType relatedType",
      "info" : "SingleVariableDeclaration[32374-32392]:SingleVariableDeclaration[32442-32460]"
    }, {
      "left" : "DisambiguateProperties<JSType>.Property p",
      "right" : "DisambiguateProperties<JSType>.Property p",
      "info" : "SingleVariableDeclaration[32427-32468]:SingleVariableDeclaration[32495-32536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32470-33592]:Block[32538-33660]"
    }, {
      "left" : "ObjectType objType = ObjectType.cast(type);",
      "right" : "ObjectType objType = ObjectType.cast(type);",
      "info" : "VariableDeclarationStatement[32478-32521]:VariableDeclarationStatement[32546-32589]"
    }, {
      "left" : "if (objType != null)",
      "right" : "if (objType != null)",
      "info" : "IfStatement[32528-33586]:IfStatement[32596-33654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32549-33586]:Block[32617-33654]"
    }, {
      "left" : "FunctionType constructor;",
      "right" : "FunctionType constructor;",
      "info" : "VariableDeclarationStatement[32559-32584]:VariableDeclarationStatement[32627-32652]"
    }, {
      "left" : "if (objType.isFunctionType())",
      "right" : "if (objType.isFunctionType())",
      "info" : "IfStatement[32593-32864]:IfStatement[32661-32932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32623-32689]:Block[32691-32757]"
    }, {
      "left" : "constructor = objType.toMaybeFunctionType();",
      "right" : "constructor = objType.toMaybeFunctionType();",
      "info" : "ExpressionStatement[32635-32679]:ExpressionStatement[32703-32747]"
    }, {
      "left" : "if (objType.isFunctionPrototypeType())",
      "right" : "if (objType.isFunctionPrototypeType())",
      "info" : "IfStatement[32695-32864]:IfStatement[32763-32932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32734-32797]:Block[32802-32865]"
    }, {
      "left" : "constructor = objType.getOwnerFunction();",
      "right" : "constructor = objType.getOwnerFunction();",
      "info" : "ExpressionStatement[32746-32787]:ExpressionStatement[32814-32855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32803-32864]:Block[32871-32932]"
    }, {
      "left" : "constructor = objType.getConstructor();",
      "right" : "constructor = objType.getConstructor();",
      "info" : "ExpressionStatement[32815-32854]:ExpressionStatement[32883-32922]"
    }, {
      "left" : "while (constructor != null)",
      "right" : "while (constructor != null)",
      "info" : "WhileStatement[32873-33578]:WhileStatement[32941-33646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32901-33578]:Block[32969-33646]"
    }, {
      "left" : "for (ObjectType itype : constructor.getImplementedInterfaces())",
      "right" : "for (ObjectType itype : constructor.getImplementedInterfaces())",
      "info" : "EnhancedForStatement[32913-33365]:EnhancedForStatement[32981-33433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32977-33365]:Block[33045-33433]"
    }, {
      "left" : "JSType top = getTypeWithProperty(p.name, itype);",
      "right" : "JSType top = getTypeWithProperty(p.name, itype);",
      "info" : "VariableDeclarationStatement[32991-33039]:VariableDeclarationStatement[33059-33107]"
    }, {
      "left" : "if (top != null)",
      "right" : "if (top != null)",
      "info" : "IfStatement[33052-33210]:IfStatement[33120-33278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33069-33134]:Block[33137-33202]"
    }, {
      "left" : "p.addType(itype, top, relatedType);",
      "right" : "p.addType(itype, top, relatedType);",
      "info" : "ExpressionStatement[33085-33120]:ExpressionStatement[33153-33188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33140-33210]:Block[33208-33278]"
    }, {
      "left" : "recordInterfaces(itype, relatedType, p);",
      "right" : "recordInterfaces(itype, relatedType, p);",
      "info" : "ExpressionStatement[33156-33196]:ExpressionStatement[33224-33264]"
    }, {
      "left" : "if (p.skipRenaming)",
      "right" : "if (p.skipRenaming)",
      "info" : "IfStatement[33296-33353]:IfStatement[33364-33421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33316-33353]:Block[33384-33421]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33332-33339]:ReturnStatement[33400-33407]"
    }, {
      "left" : "if (constructor.isInterface() || constructor.isConstructor())",
      "right" : "if (constructor.isInterface() || constructor.isConstructor())",
      "info" : "IfStatement[33376-33568]:IfStatement[33444-33636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33438-33517]:Block[33506-33585]"
    }, {
      "left" : "constructor = constructor.getSuperClassConstructor();",
      "right" : "constructor = constructor.getSuperClassConstructor();",
      "info" : "ExpressionStatement[33452-33505]:ExpressionStatement[33520-33573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33523-33568]:Block[33591-33636]"
    }, {
      "left" : "constructor = null;",
      "right" : "constructor = null;",
      "info" : "ExpressionStatement[33537-33556]:ExpressionStatement[33605-33624]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33660-33667]:Modifier[33728-33735]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33668-33674]:Modifier[33736-33742]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[33675-33680]:TYPE_DECLARATION_KIND[33743-33748]"
    }, {
      "left" : "ConcreteTypeSystem",
      "right" : "ConcreteTypeSystem",
      "info" : "SimpleName[33681-33699]:SimpleName[33749-33767]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34275-34281]:Modifier[34343-34349]"
    }, {
      "left" : "ConcreteTypeSystem",
      "right" : "ConcreteTypeSystem",
      "info" : "SimpleName[34282-34300]:SimpleName[34350-34368]"
    }, {
      "left" : "TightenTypes tt",
      "right" : "TightenTypes tt",
      "info" : "SingleVariableDeclaration[34301-34316]:SingleVariableDeclaration[34369-34384]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[34318-34345]:SingleVariableDeclaration[34386-34413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34347-34416]:Block[34415-34484]"
    }, {
      "left" : "this.tt = tt;",
      "right" : "this.tt = tt;",
      "info" : "ExpressionStatement[34355-34368]:ExpressionStatement[34423-34436]"
    }, {
      "left" : "this.codingConvention = convention;",
      "right" : "this.codingConvention = convention;",
      "info" : "ExpressionStatement[34375-34410]:ExpressionStatement[34443-34478]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34422-34431]:MarkerAnnotation[34490-34499]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34432-34438]:Modifier[34500-34506]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34439-34443]:PrimitiveType[34507-34511]"
    }, {
      "left" : "addInvalidatingType",
      "right" : "addInvalidatingType",
      "info" : "SimpleName[34444-34463]:SimpleName[34512-34531]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[34464-34475]:SingleVariableDeclaration[34532-34543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34477-34558]:Block[34545-34626]"
    }, {
      "left" : "checkState(!type.isUnionType());",
      "right" : "checkState(!type.isUnionType());",
      "info" : "ExpressionStatement[34485-34517]:ExpressionStatement[34553-34585]"
    }, {
      "left" : "invalidatingTypes.add(type);",
      "right" : "invalidatingTypes.add(type);",
      "info" : "ExpressionStatement[34524-34552]:ExpressionStatement[34592-34620]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34564-34573]:MarkerAnnotation[34632-34641]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34574-34580]:Modifier[34642-34648]"
    }, {
      "left" : "StaticScope<ConcreteType>",
      "right" : "StaticScope<ConcreteType>",
      "info" : "ParameterizedType[34581-34606]:ParameterizedType[34649-34674]"
    }, {
      "left" : "getRootScope",
      "right" : "getRootScope",
      "info" : "SimpleName[34607-34619]:SimpleName[34675-34687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34622-34660]:Block[34690-34728]"
    }, {
      "left" : "return tt.getTopScope();",
      "right" : "return tt.getTopScope();",
      "info" : "ReturnStatement[34630-34654]:ReturnStatement[34698-34722]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34666-34675]:MarkerAnnotation[34734-34743]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34676-34682]:Modifier[34744-34750]"
    }, {
      "left" : "StaticScope<ConcreteType>",
      "right" : "StaticScope<ConcreteType>",
      "info" : "ParameterizedType[34683-34708]:ParameterizedType[34751-34776]"
    }, {
      "left" : "getFunctionScope",
      "right" : "getFunctionScope",
      "info" : "SimpleName[34709-34725]:SimpleName[34777-34793]"
    }, {
      "left" : "Node decl",
      "right" : "Node decl",
      "info" : "SingleVariableDeclaration[34726-34735]:SingleVariableDeclaration[34794-34803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34737-34900]:Block[34805-34968]"
    }, {
      "left" : "ConcreteFunctionType func = tt.getConcreteFunction(decl);",
      "right" : "ConcreteFunctionType func = tt.getConcreteFunction(decl);",
      "info" : "VariableDeclarationStatement[34745-34802]:VariableDeclarationStatement[34813-34870]"
    }, {
      "left" : "return (func != null) ?\n          func.getScope() : (StaticScope<ConcreteType>) null;",
      "right" : "return (func != null) ?\n          func.getScope() : (StaticScope<ConcreteType>) null;",
      "info" : "ReturnStatement[34809-34894]:ReturnStatement[34877-34962]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34906-34915]:MarkerAnnotation[34974-34983]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34920-34926]:Modifier[34988-34994]"
    }, {
      "left" : "ConcreteType",
      "right" : "ConcreteType",
      "info" : "SimpleType[34927-34939]:SimpleType[34995-35007]"
    }, {
      "left" : "getType",
      "right" : "getType",
      "info" : "SimpleName[34940-34947]:SimpleName[35008-35015]"
    }, {
      "left" : "StaticScope<ConcreteType> scope",
      "right" : "StaticScope<ConcreteType> scope",
      "info" : "SingleVariableDeclaration[34957-34988]:SingleVariableDeclaration[35025-35056]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[34990-34999]:SingleVariableDeclaration[35058-35067]"
    }, {
      "left" : "String prop",
      "right" : "String prop",
      "info" : "SingleVariableDeclaration[35001-35012]:SingleVariableDeclaration[35069-35080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35014-35243]:Block[35082-35311]"
    }, {
      "left" : "if (scope != null)",
      "right" : "if (scope != null)",
      "info" : "IfStatement[35022-35237]:IfStatement[35090-35305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35041-35201]:Block[35109-35269]"
    }, {
      "left" : "ConcreteType c = tt.inferConcreteType(\n            (TightenTypes.ConcreteScope) scope, node);",
      "right" : "ConcreteType c = tt.inferConcreteType(\n            (TightenTypes.ConcreteScope) scope, node);",
      "info" : "VariableDeclarationStatement[35051-35144]:VariableDeclarationStatement[35119-35212]"
    }, {
      "left" : "return maybeAddAutoboxes(c, node, prop);",
      "right" : "return maybeAddAutoboxes(c, node, prop);",
      "info" : "ReturnStatement[35153-35193]:ReturnStatement[35221-35261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35207-35237]:Block[35275-35305]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[35217-35229]:ReturnStatement[35285-35297]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35467-35474]:Modifier[35535-35542]"
    }, {
      "left" : "ConcreteType",
      "right" : "ConcreteType",
      "info" : "SimpleType[35475-35487]:SimpleType[35543-35555]"
    }, {
      "left" : "maybeAddAutoboxes",
      "right" : "maybeAddAutoboxes",
      "info" : "SimpleName[35488-35505]:SimpleName[35556-35573]"
    }, {
      "left" : "ConcreteType cType",
      "right" : "ConcreteType cType",
      "info" : "SingleVariableDeclaration[35515-35533]:SingleVariableDeclaration[35583-35601]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[35535-35544]:SingleVariableDeclaration[35603-35612]"
    }, {
      "left" : "String prop",
      "right" : "String prop",
      "info" : "SingleVariableDeclaration[35546-35557]:SingleVariableDeclaration[35614-35625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35559-36111]:Block[35627-36179]"
    }, {
      "left" : "JSType jsType = node.getJSType();",
      "right" : "JSType jsType = node.getJSType();",
      "info" : "VariableDeclarationStatement[35567-35600]:VariableDeclarationStatement[35635-35668]"
    }, {
      "left" : "if (jsType == null)",
      "right" : "if (jsType == null)",
      "info" : "IfStatement[35607-36051]:IfStatement[35675-36119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35627-35658]:Block[35695-35726]"
    }, {
      "left" : "return cType;",
      "right" : "return cType;",
      "info" : "ReturnStatement[35637-35650]:ReturnStatement[35705-35718]"
    }, {
      "left" : "if (jsType.isUnknownType())",
      "right" : "if (jsType.isUnknownType())",
      "info" : "IfStatement[35664-36051]:IfStatement[35732-36119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35692-36051]:Block[35760-36119]"
    }, {
      "left" : "for (JSTypeNative nativeType : nativeTypes)",
      "right" : "for (JSTypeNative nativeType : nativeTypes)",
      "info" : "EnhancedForStatement[35702-36021]:EnhancedForStatement[35770-36089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35746-36021]:Block[35814-36089]"
    }, {
      "left" : "ConcreteType concrete = tt.getConcreteInstance(\n              tt.getTypeRegistry().getNativeObjectType(nativeType));",
      "right" : "ConcreteType concrete = tt.getConcreteInstance(\n              tt.getTypeRegistry().getNativeObjectType(nativeType));",
      "info" : "VariableDeclarationStatement[35758-35874]:VariableDeclarationStatement[35826-35942]"
    }, {
      "left" : "if (concrete != null && !concrete.getPropertyType(prop).isNone())",
      "right" : "if (concrete != null && !concrete.getPropertyType(prop).isNone())",
      "info" : "IfStatement[35885-36011]:IfStatement[35953-36079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35951-36011]:Block[36019-36079]"
    }, {
      "left" : "cType = cType.unionWith(concrete);",
      "right" : "cType = cType.unionWith(concrete);",
      "info" : "ExpressionStatement[35965-35999]:ExpressionStatement[36033-36067]"
    }, {
      "left" : "return cType;",
      "right" : "return cType;",
      "info" : "ReturnStatement[36030-36043]:ReturnStatement[36098-36111]"
    }, {
      "left" : "return maybeAddAutoboxes(cType, jsType, prop);",
      "right" : "return maybeAddAutoboxes(cType, jsType, prop);",
      "info" : "ReturnStatement[36059-36105]:ReturnStatement[36127-36173]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36117-36124]:Modifier[36185-36192]"
    }, {
      "left" : "ConcreteType",
      "right" : "ConcreteType",
      "info" : "SimpleType[36125-36137]:SimpleType[36193-36205]"
    }, {
      "left" : "maybeAddAutoboxes",
      "right" : "maybeAddAutoboxes",
      "info" : "SimpleName[36138-36155]:SimpleName[36206-36223]"
    }, {
      "left" : "ConcreteType cType",
      "right" : "ConcreteType cType",
      "info" : "SingleVariableDeclaration[36165-36183]:SingleVariableDeclaration[36233-36251]"
    }, {
      "left" : "JSType jsType",
      "right" : "JSType jsType",
      "info" : "SingleVariableDeclaration[36185-36198]:SingleVariableDeclaration[36253-36266]"
    }, {
      "left" : "String prop",
      "right" : "String prop",
      "info" : "SingleVariableDeclaration[36200-36211]:SingleVariableDeclaration[36268-36279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36213-36958]:Block[36281-37026]"
    }, {
      "left" : "jsType = jsType.restrictByNotNullOrUndefined();",
      "right" : "jsType = jsType.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[36221-36268]:ExpressionStatement[36289-36336]"
    }, {
      "left" : "if (jsType.isUnionType())",
      "right" : "if (jsType.isUnionType())",
      "info" : "IfStatement[36275-36627]:IfStatement[36343-36695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36301-36468]:Block[36369-36536]"
    }, {
      "left" : "for (JSType alt : jsType.toMaybeUnionType().getAlternates())",
      "right" : "for (JSType alt : jsType.toMaybeUnionType().getAlternates())",
      "info" : "EnhancedForStatement[36311-36438]:EnhancedForStatement[36379-36506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36372-36438]:Block[36440-36506]"
    }, {
      "left" : "cType = maybeAddAutoboxes(cType, alt, prop);",
      "right" : "cType = maybeAddAutoboxes(cType, alt, prop);",
      "info" : "ExpressionStatement[36384-36428]:ExpressionStatement[36452-36496]"
    }, {
      "left" : "return cType;",
      "right" : "return cType;",
      "info" : "ReturnStatement[36447-36460]:ReturnStatement[36515-36528]"
    }, {
      "left" : "if (jsType.isEnumElementType())",
      "right" : "if (jsType.isEnumElementType())",
      "info" : "IfStatement[36474-36627]:IfStatement[36542-36695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36506-36627]:Block[36574-36695]"
    }, {
      "left" : "return maybeAddAutoboxes(\n            cType, jsType.toMaybeEnumElementType().getPrimitiveType(), prop);",
      "right" : "return maybeAddAutoboxes(\n            cType, jsType.toMaybeEnumElementType().getPrimitiveType(), prop);",
      "info" : "ReturnStatement[36516-36619]:ReturnStatement[36584-36687]"
    }, {
      "left" : "if (jsType.autoboxesTo() != null)",
      "right" : "if (jsType.autoboxesTo() != null)",
      "info" : "IfStatement[36635-36931]:IfStatement[36703-36999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36669-36807]:Block[36737-36875]"
    }, {
      "left" : "JSType autoboxed = jsType.autoboxesTo();",
      "right" : "JSType autoboxed = jsType.autoboxesTo();",
      "info" : "VariableDeclarationStatement[36679-36719]:VariableDeclarationStatement[36747-36787]"
    }, {
      "left" : "return cType.unionWith(tt.getConcreteInstance((ObjectType) autoboxed));",
      "right" : "return cType.unionWith(tt.getConcreteInstance((ObjectType) autoboxed));",
      "info" : "ReturnStatement[36728-36799]:ReturnStatement[36796-36867]"
    }, {
      "left" : "if (jsType.unboxesTo() != null)",
      "right" : "if (jsType.unboxesTo() != null)",
      "info" : "IfStatement[36813-36931]:IfStatement[36881-36999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36845-36931]:Block[36913-36999]"
    }, {
      "left" : "return cType.unionWith(tt.getConcreteInstance((ObjectType) jsType));",
      "right" : "return cType.unionWith(tt.getConcreteInstance((ObjectType) jsType));",
      "info" : "ReturnStatement[36855-36923]:ReturnStatement[36923-36991]"
    }, {
      "left" : "return cType;",
      "right" : "return cType;",
      "info" : "ReturnStatement[36939-36952]:ReturnStatement[37007-37020]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36964-36973]:MarkerAnnotation[37032-37041]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36974-36980]:Modifier[37042-37048]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36981-36988]:PrimitiveType[37049-37056]"
    }, {
      "left" : "isInvalidatingType",
      "right" : "isInvalidatingType",
      "info" : "SimpleName[36989-37007]:SimpleName[37057-37075]"
    }, {
      "left" : "ConcreteType type",
      "right" : "ConcreteType type",
      "info" : "SingleVariableDeclaration[37008-37025]:SingleVariableDeclaration[37076-37093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37027-37348]:Block[37095-37416]"
    }, {
      "left" : "return (type == null) || type.isAll() || type.isFunction()\n        || (type.isInstance()\n            && invalidatingTypes.contains(type.toInstance().instanceType));",
      "right" : "return (type == null) || type.isAll() || type.isFunction()\n        || (type.isInstance()\n            && invalidatingTypes.contains(type.toInstance().instanceType));",
      "info" : "ReturnStatement[37178-37342]:ReturnStatement[37246-37410]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37354-37363]:MarkerAnnotation[37422-37431]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37368-37374]:Modifier[37436-37442]"
    }, {
      "left" : "ImmutableSet<ConcreteType>",
      "right" : "ImmutableSet<ConcreteType>",
      "info" : "ParameterizedType[37375-37401]:ParameterizedType[37443-37469]"
    }, {
      "left" : "getTypesToSkipForType",
      "right" : "getTypesToSkipForType",
      "info" : "SimpleName[37402-37423]:SimpleName[37470-37491]"
    }, {
      "left" : "ConcreteType type",
      "right" : "ConcreteType type",
      "info" : "SingleVariableDeclaration[37424-37441]:SingleVariableDeclaration[37492-37509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37443-37486]:Block[37511-37554]"
    }, {
      "left" : "return ImmutableSet.of(type);",
      "right" : "return ImmutableSet.of(type);",
      "info" : "ReturnStatement[37451-37480]:ReturnStatement[37519-37548]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37492-37501]:MarkerAnnotation[37560-37569]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37502-37508]:Modifier[37570-37576]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[37509-37516]:PrimitiveType[37577-37584]"
    }, {
      "left" : "isTypeToSkip",
      "right" : "isTypeToSkip",
      "info" : "SimpleName[37517-37529]:SimpleName[37585-37597]"
    }, {
      "left" : "ConcreteType type",
      "right" : "ConcreteType type",
      "info" : "SingleVariableDeclaration[37530-37547]:SingleVariableDeclaration[37598-37615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37549-37762]:Block[37617-37830]"
    }, {
      "left" : "return type.isInstance()\n        && !(type.toInstance().isFunctionPrototype()\n             || type.toInstance().instanceType.isInstanceType());",
      "right" : "return type.isInstance()\n        && !(type.toInstance().isFunctionPrototype()\n             || type.toInstance().instanceType.isInstanceType());",
      "info" : "ReturnStatement[37613-37756]:ReturnStatement[37681-37824]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37768-37777]:MarkerAnnotation[37836-37845]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37782-37788]:Modifier[37850-37856]"
    }, {
      "left" : "ConcreteType",
      "right" : "ConcreteType",
      "info" : "SimpleType[37789-37801]:SimpleType[37857-37869]"
    }, {
      "left" : "restrictByNotNullOrUndefined",
      "right" : "restrictByNotNullOrUndefined",
      "info" : "SimpleName[37802-37830]:SimpleName[37870-37898]"
    }, {
      "left" : "ConcreteType type",
      "right" : "ConcreteType type",
      "info" : "SingleVariableDeclaration[37831-37848]:SingleVariableDeclaration[37899-37916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37850-37930]:Block[37918-37998]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[37912-37924]:ReturnStatement[37980-37992]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37936-37945]:MarkerAnnotation[38004-38013]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37950-37956]:Modifier[38018-38024]"
    }, {
      "left" : "Iterable<ConcreteType>",
      "right" : "Iterable<ConcreteType>",
      "info" : "ParameterizedType[37957-37979]:ParameterizedType[38025-38047]"
    }, {
      "left" : "getTypeAlternatives",
      "right" : "getTypeAlternatives",
      "info" : "SimpleName[37980-37999]:SimpleName[38048-38067]"
    }, {
      "left" : "ConcreteType type",
      "right" : "ConcreteType type",
      "info" : "SingleVariableDeclaration[38000-38017]:SingleVariableDeclaration[38068-38085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38019-38159]:Block[38087-38227]"
    }, {
      "left" : "if (type.isUnion())",
      "right" : "if (type.isUnion())",
      "info" : "IfStatement[38027-38153]:IfStatement[38095-38221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38047-38117]:Block[38115-38185]"
    }, {
      "left" : "return ((ConcreteUnionType) type).getAlternatives();",
      "right" : "return ((ConcreteUnionType) type).getAlternatives();",
      "info" : "ReturnStatement[38057-38109]:ReturnStatement[38125-38177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38123-38153]:Block[38191-38221]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[38133-38145]:ReturnStatement[38201-38213]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38165-38174]:MarkerAnnotation[38233-38242]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38175-38181]:Modifier[38243-38249]"
    }, {
      "left" : "ConcreteType",
      "right" : "ConcreteType",
      "info" : "SimpleType[38182-38194]:SimpleType[38250-38262]"
    }, {
      "left" : "getTypeWithProperty",
      "right" : "getTypeWithProperty",
      "info" : "SimpleName[38195-38214]:SimpleName[38263-38282]"
    }, {
      "left" : "String field",
      "right" : "String field",
      "info" : "SingleVariableDeclaration[38215-38227]:SingleVariableDeclaration[38283-38295]"
    }, {
      "left" : "ConcreteType type",
      "right" : "ConcreteType type",
      "info" : "SingleVariableDeclaration[38283-38300]:SingleVariableDeclaration[38351-38368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38302-39286]:Block[38370-39354]"
    }, {
      "left" : "if (type.isInstance())",
      "right" : "if (type.isInstance())",
      "info" : "IfStatement[38310-39261]:IfStatement[38378-39329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38333-38479]:Block[38401-38547]"
    }, {
      "left" : "ConcreteInstanceType instanceType = (ConcreteInstanceType) type;",
      "right" : "ConcreteInstanceType instanceType = (ConcreteInstanceType) type;",
      "info" : "VariableDeclarationStatement[38343-38407]:VariableDeclarationStatement[38411-38475]"
    }, {
      "left" : "return instanceType.getInstanceTypeWithProperty(field);",
      "right" : "return instanceType.getInstanceTypeWithProperty(field);",
      "info" : "ReturnStatement[38416-38471]:ReturnStatement[38484-38539]"
    }, {
      "left" : "if (type.isFunction())",
      "right" : "if (type.isFunction())",
      "info" : "IfStatement[38485-39261]:IfStatement[38553-39329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38508-38652]:Block[38576-38720]"
    }, {
      "left" : "if (\"prototype\".equals(field)\n            || codingConvention.isSuperClassReference(field))",
      "right" : "if (\"prototype\".equals(field)\n            || codingConvention.isSuperClassReference(field))",
      "info" : "IfStatement[38518-38644]:IfStatement[38586-38712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38610-38644]:Block[38678-38712]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[38622-38634]:ReturnStatement[38690-38702]"
    }, {
      "left" : "if (type.isNone())",
      "right" : "if (type.isNone())",
      "info" : "IfStatement[38658-39261]:IfStatement[38726-39329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38677-38959]:Block[38745-39027]"
    }, {
      "left" : "return new ConcreteUniqueType(++nextUniqueId);",
      "right" : "return new ConcreteUniqueType(++nextUniqueId);",
      "info" : "ReturnStatement[38905-38951]:ReturnStatement[38973-39019]"
    }, {
      "left" : "if (type.isUnion())",
      "right" : "if (type.isUnion())",
      "info" : "IfStatement[38965-39261]:IfStatement[39033-39329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38985-39261]:Block[39053-39329]"
    }, {
      "left" : "for (ConcreteType t : ((ConcreteUnionType) type).getAlternatives())",
      "right" : "for (ConcreteType t : ((ConcreteUnionType) type).getAlternatives())",
      "info" : "EnhancedForStatement[39049-39253]:EnhancedForStatement[39117-39321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39117-39253]:Block[39185-39321]"
    }, {
      "left" : "ConcreteType ret = getTypeWithProperty(field, t);",
      "right" : "ConcreteType ret = getTypeWithProperty(field, t);",
      "info" : "VariableDeclarationStatement[39129-39178]:VariableDeclarationStatement[39197-39246]"
    }, {
      "left" : "if (ret != null)",
      "right" : "if (ret != null)",
      "info" : "IfStatement[39189-39243]:IfStatement[39257-39311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39206-39243]:Block[39274-39311]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[39220-39231]:ReturnStatement[39288-39299]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39268-39280]:ReturnStatement[39336-39348]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[39292-39301]:MarkerAnnotation[39360-39369]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39302-39308]:Modifier[39370-39376]"
    }, {
      "left" : "ConcreteType",
      "right" : "ConcreteType",
      "info" : "SimpleType[39309-39321]:SimpleType[39377-39389]"
    }, {
      "left" : "getInstanceFromPrototype",
      "right" : "getInstanceFromPrototype",
      "info" : "SimpleName[39322-39346]:SimpleName[39390-39414]"
    }, {
      "left" : "ConcreteType type",
      "right" : "ConcreteType type",
      "info" : "SingleVariableDeclaration[39347-39364]:SingleVariableDeclaration[39415-39432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39366-39634]:Block[39434-39702]"
    }, {
      "left" : "if (type.isInstance())",
      "right" : "if (type.isInstance())",
      "info" : "IfStatement[39374-39609]:IfStatement[39442-39677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39397-39609]:Block[39465-39677]"
    }, {
      "left" : "ConcreteInstanceType instanceType = (ConcreteInstanceType) type;",
      "right" : "ConcreteInstanceType instanceType = (ConcreteInstanceType) type;",
      "info" : "VariableDeclarationStatement[39407-39471]:VariableDeclarationStatement[39475-39539]"
    }, {
      "left" : "if (instanceType.isFunctionPrototype())",
      "right" : "if (instanceType.isFunctionPrototype())",
      "info" : "IfStatement[39480-39601]:IfStatement[39548-39669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39520-39601]:Block[39588-39669]"
    }, {
      "left" : "return instanceType.getConstructorType().getInstanceType();",
      "right" : "return instanceType.getConstructorType().getInstanceType();",
      "info" : "ReturnStatement[39532-39591]:ReturnStatement[39600-39659]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39616-39628]:ReturnStatement[39684-39696]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[39640-39649]:MarkerAnnotation[39708-39717]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39654-39660]:Modifier[39722-39728]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39661-39665]:PrimitiveType[39729-39733]"
    }, {
      "left" : "recordInterfaces",
      "right" : "recordInterfaces",
      "info" : "SimpleName[39666-39682]:SimpleName[39734-39750]"
    }, {
      "left" : "ConcreteType type",
      "right" : "ConcreteType type",
      "info" : "SingleVariableDeclaration[39683-39700]:SingleVariableDeclaration[39751-39768]"
    }, {
      "left" : "ConcreteType relatedType",
      "right" : "ConcreteType relatedType",
      "info" : "SingleVariableDeclaration[39702-39726]:SingleVariableDeclaration[39770-39794]"
    }, {
      "left" : "DisambiguateProperties<ConcreteType>.Property p",
      "right" : "DisambiguateProperties<ConcreteType>.Property p",
      "info" : "SingleVariableDeclaration[39736-39783]:SingleVariableDeclaration[39804-39851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39785-39857]:Block[39853-39925]"
    } ]
  },
  "interFileMappings" : { }
}