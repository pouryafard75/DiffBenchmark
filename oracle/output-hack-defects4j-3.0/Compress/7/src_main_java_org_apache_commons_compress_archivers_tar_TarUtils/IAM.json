{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TarUtils",
      "right" : "TarUtils",
      "info" : "TypeDeclaration[858-9318]:TypeDeclaration[858-9388]"
    }, {
      "left" : "private static final int BYTE_MASK = 255;",
      "right" : "private static final int BYTE_MASK = 255;",
      "info" : "FieldDeclaration[1041-1082]:FieldDeclaration[1041-1082]"
    }, {
      "left" : "private TarUtils(",
      "right" : "private TarUtils(",
      "info" : "MethodDeclaration[1088-1196]:MethodDeclaration[1088-1196]"
    }, {
      "left" : "public static long parseOctal(byte[] buffer, final int offset, final int length)",
      "right" : "public static long parseOctal(byte[] buffer, final int offset, final int length)",
      "info" : "MethodDeclaration[1202-2921]:MethodDeclaration[1202-2921]"
    }, {
      "left" : "public static String parseName(byte[] buffer, final int offset, final int length)",
      "right" : "public static String parseName(byte[] buffer, final int offset, final int length)",
      "info" : "MethodDeclaration[2927-3681]:MethodDeclaration[2927-3751]"
    }, {
      "left" : "public static int formatNameBytes(String name, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatNameBytes(String name, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[3687-4797]:MethodDeclaration[3757-4867]"
    }, {
      "left" : "public static void formatUnsignedOctalString(final long value, byte[] buffer,\n            final int offset, final int length)",
      "right" : "public static void formatUnsignedOctalString(final long value, byte[] buffer,\n            final int offset, final int length)",
      "info" : "MethodDeclaration[4803-6125]:MethodDeclaration[4873-6195]"
    }, {
      "left" : "public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[6131-7092]:MethodDeclaration[6201-7162]"
    }, {
      "left" : "public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[7098-7978]:MethodDeclaration[7168-8048]"
    }, {
      "left" : "public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[7984-8949]:MethodDeclaration[8054-9019]"
    }, {
      "left" : "public static long computeCheckSum(final byte[] buf)",
      "right" : "public static long computeCheckSum(final byte[] buf)",
      "info" : "MethodDeclaration[8955-9316]:MethodDeclaration[9025-9386]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1012-1018]:Modifier[1012-1018]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1019-1024]:TYPE_DECLARATION_KIND[1019-1024]"
    }, {
      "left" : "TarUtils",
      "right" : "TarUtils",
      "info" : "SimpleName[1025-1033]:SimpleName[1025-1033]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1167-1174]:Modifier[1167-1174]"
    }, {
      "left" : "TarUtils",
      "right" : "TarUtils",
      "info" : "SimpleName[1175-1183]:SimpleName[1175-1183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1185-1196]:Block[1185-1196]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1709-1715]:Modifier[1709-1715]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1716-1722]:Modifier[1716-1722]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[1723-1727]:PrimitiveType[1723-1727]"
    }, {
      "left" : "parseOctal",
      "right" : "parseOctal",
      "info" : "SimpleName[1728-1738]:SimpleName[1728-1738]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[1739-1752]:SingleVariableDeclaration[1739-1752]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[1754-1770]:SingleVariableDeclaration[1754-1770]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[1772-1788]:SingleVariableDeclaration[1772-1788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1790-2921]:Block[1790-2921]"
    }, {
      "left" : "long    result = 0;",
      "right" : "long    result = 0;",
      "info" : "VariableDeclarationStatement[1800-1819]:VariableDeclarationStatement[1800-1819]"
    }, {
      "left" : "boolean stillPadding = true;",
      "right" : "boolean stillPadding = true;",
      "info" : "VariableDeclarationStatement[1828-1856]:VariableDeclarationStatement[1828-1856]"
    }, {
      "left" : "int     end = offset + length;",
      "right" : "int     end = offset + length;",
      "info" : "VariableDeclarationStatement[1865-1895]:VariableDeclarationStatement[1865-1895]"
    }, {
      "left" : "for (int i = offset; i < end; ++i)",
      "right" : "for (int i = offset; i < end; ++i)",
      "info" : "ForStatement[1905-2891]:ForStatement[1905-2891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1940-2891]:Block[1940-2891]"
    }, {
      "left" : "final byte currentByte = buffer[i];",
      "right" : "final byte currentByte = buffer[i];",
      "info" : "VariableDeclarationStatement[1954-1989]:VariableDeclarationStatement[1954-1989]"
    }, {
      "left" : "if (currentByte == 0)",
      "right" : "if (currentByte == 0)",
      "info" : "IfStatement[2002-2085]:IfStatement[2002-2085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2024-2085]:Block[2024-2085]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2065-2071]:BreakStatement[2065-2071]"
    }, {
      "left" : "if (currentByte == (byte) ' ' || currentByte == '0')",
      "right" : "if (currentByte == (byte) ' ' || currentByte == '0')",
      "info" : "IfStatement[2164-2435]:IfStatement[2164-2435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2217-2435]:Block[2217-2435]"
    }, {
      "left" : "if (stillPadding)",
      "right" : "if (stillPadding)",
      "info" : "IfStatement[2235-2302]:IfStatement[2235-2302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2253-2302]:Block[2253-2302]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[2275-2284]:ContinueStatement[2275-2284]"
    }, {
      "left" : "if (currentByte == (byte) ' ')",
      "right" : "if (currentByte == (byte) ' ')",
      "info" : "IfStatement[2320-2421]:IfStatement[2320-2421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2351-2421]:Block[2351-2421]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2397-2403]:BreakStatement[2397-2403]"
    }, {
      "left" : "stillPadding = false;",
      "right" : "stillPadding = false;",
      "info" : "ExpressionStatement[2449-2470]:ExpressionStatement[2449-2470]"
    }, {
      "left" : "if (currentByte < '0' || currentByte > '7')",
      "right" : "if (currentByte < '0' || currentByte > '7')",
      "info" : "IfStatement[2525-2745]:IfStatement[2525-2745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2568-2745]:Block[2568-2745]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                        \"Invalid octal digit at position \"+i+\" in '\"+new String(buffer, offset, length)+\"'\");",
      "right" : "throw new IllegalArgumentException(\n                        \"Invalid octal digit at position \"+i+\" in '\"+new String(buffer, offset, length)+\"'\");",
      "info" : "ThrowStatement[2586-2731]:ThrowStatement[2586-2731]"
    }, {
      "left" : "result = (result << 3) + (currentByte - '0');",
      "right" : "result = (result << 3) + (currentByte - '0');",
      "info" : "ExpressionStatement[2758-2803]:ExpressionStatement[2758-2803]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[2901-2915]:ReturnStatement[2901-2915]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3285-3291]:Modifier[3285-3291]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3292-3298]:Modifier[3292-3298]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3299-3305]:SimpleType[3299-3305]"
    }, {
      "left" : "parseName",
      "right" : "parseName",
      "info" : "SimpleName[3306-3315]:SimpleName[3306-3315]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[3316-3329]:SingleVariableDeclaration[3316-3329]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[3331-3347]:SingleVariableDeclaration[3331-3347]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[3349-3365]:SingleVariableDeclaration[3349-3365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3367-3681]:Block[3367-3751]"
    }, {
      "left" : "StringBuffer result = new StringBuffer(length);",
      "right" : "StringBuffer result = new StringBuffer(length);",
      "info" : "VariableDeclarationStatement[3377-3424]:VariableDeclarationStatement[3377-3424]"
    }, {
      "left" : "int          end = offset + length;",
      "right" : "int          end = offset + length;",
      "info" : "VariableDeclarationStatement[3433-3468]:VariableDeclarationStatement[3433-3468]"
    }, {
      "left" : "for (int i = offset; i < end; ++i)",
      "right" : "for (int i = offset; i < end; ++i)",
      "info" : "ForStatement[3478-3640]:ForStatement[3478-3710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3513-3640]:Block[3513-3710]"
    }, {
      "left" : "if (buffer[i] == 0)",
      "right" : "if (b == 0)",
      "info" : "IfStatement[3527-3585]:IfStatement[3559-3626]"
    }, {
      "left" : "buffer",
      "right" : "buffer",
      "info" : "SimpleName[3531-3537]:SimpleName[3536-3542]"
    }, {
      "left" : "buffer[i]",
      "right" : "b",
      "info" : "ArrayAccess[3531-3540]:SimpleName[3563-3564]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[3538-3539]:SimpleName[3543-3544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3547-3585]:Block[3571-3626]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3565-3571]:BreakStatement[3606-3612]"
    }, {
      "left" : "result.append((char) buffer[i]);",
      "right" : "result.append((char) (b & 0xFF));",
      "info" : "ExpressionStatement[3598-3630]:ExpressionStatement[3639-3672]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[3650-3675]:ReturnStatement[3720-3745]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4337-4343]:Modifier[4407-4413]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4344-4350]:Modifier[4414-4420]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4351-4354]:PrimitiveType[4421-4424]"
    }, {
      "left" : "formatNameBytes",
      "right" : "formatNameBytes",
      "info" : "SimpleName[4355-4370]:SimpleName[4425-4440]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[4371-4382]:SingleVariableDeclaration[4441-4452]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[4384-4394]:SingleVariableDeclaration[4454-4464]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[4396-4412]:SingleVariableDeclaration[4466-4482]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[4414-4430]:SingleVariableDeclaration[4484-4500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4432-4797]:Block[4502-4867]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[4442-4448]:VariableDeclarationStatement[4512-4518]"
    }, {
      "left" : "for (i = 0; i < length && i < name.length(); ++i)",
      "right" : "for (i = 0; i < length && i < name.length(); ++i)",
      "info" : "ForStatement[4515-4629]:ForStatement[4585-4699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4565-4629]:Block[4635-4699]"
    }, {
      "left" : "buf[offset + i] = (byte) name.charAt(i);",
      "right" : "buf[offset + i] = (byte) name.charAt(i);",
      "info" : "ExpressionStatement[4579-4619]:ExpressionStatement[4649-4689]"
    }, {
      "left" : "for (; i < length; ++i)",
      "right" : "for (; i < length; ++i)",
      "info" : "ForStatement[4690-4758]:ForStatement[4760-4828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4714-4758]:Block[4784-4828]"
    }, {
      "left" : "buf[offset + i] = 0;",
      "right" : "buf[offset + i] = 0;",
      "info" : "ExpressionStatement[4728-4748]:ExpressionStatement[4798-4818]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[4768-4791]:ReturnStatement[4838-4861]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5184-5190]:Modifier[5254-5260]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5191-5197]:Modifier[5261-5267]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5198-5202]:PrimitiveType[5268-5272]"
    }, {
      "left" : "formatUnsignedOctalString",
      "right" : "formatUnsignedOctalString",
      "info" : "SimpleName[5203-5228]:SimpleName[5273-5298]"
    }, {
      "left" : "final long value",
      "right" : "final long value",
      "info" : "SingleVariableDeclaration[5229-5245]:SingleVariableDeclaration[5299-5315]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[5247-5260]:SingleVariableDeclaration[5317-5330]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[5274-5290]:SingleVariableDeclaration[5344-5360]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[5292-5308]:SingleVariableDeclaration[5362-5378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5310-6125]:Block[5380-6195]"
    }, {
      "left" : "int remaining = length;",
      "right" : "int remaining = length;",
      "info" : "VariableDeclarationStatement[5320-5343]:VariableDeclarationStatement[5390-5413]"
    }, {
      "left" : "remaining--;",
      "right" : "remaining--;",
      "info" : "ExpressionStatement[5352-5364]:ExpressionStatement[5422-5434]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[5373-5992]:IfStatement[5443-6062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5389-5455]:Block[5459-5525]"
    }, {
      "left" : "buffer[offset + remaining--] = (byte) '0';",
      "right" : "buffer[offset + remaining--] = (byte) '0';",
      "info" : "ExpressionStatement[5403-5445]:ExpressionStatement[5473-5515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5461-5992]:Block[5531-6062]"
    }, {
      "left" : "long val = value;",
      "right" : "long val = value;",
      "info" : "VariableDeclarationStatement[5475-5492]:VariableDeclarationStatement[5545-5562]"
    }, {
      "left" : "for (; remaining >= 0 && val != 0; --remaining)",
      "right" : "for (; remaining >= 0 && val != 0; --remaining)",
      "info" : "ForStatement[5505-5777]:ForStatement[5575-5847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5553-5777]:Block[5623-5847]"
    }, {
      "left" : "buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));",
      "right" : "buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));",
      "info" : "ExpressionStatement[5617-5685]:ExpressionStatement[5687-5755]"
    }, {
      "left" : "val = val >>> 3;",
      "right" : "val = val >>> 3;",
      "info" : "ExpressionStatement[5702-5718]:ExpressionStatement[5772-5788]"
    }, {
      "left" : "if (val != 0)",
      "right" : "if (val != 0)",
      "info" : "IfStatement[5790-5982]:IfStatement[5860-6052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5803-5982]:Block[5873-6052]"
    }, {
      "left" : "throw new IllegalArgumentException\n                (value+\"=\"+Long.toOctalString(value)+ \" will not fit in octal number buffer of length \"+length);",
      "right" : "throw new IllegalArgumentException\n                (value+\"=\"+Long.toOctalString(value)+ \" will not fit in octal number buffer of length \"+length);",
      "info" : "ThrowStatement[5821-5968]:ThrowStatement[5891-6038]"
    }, {
      "left" : "for (; remaining >= 0; --remaining)",
      "right" : "for (; remaining >= 0; --remaining)",
      "info" : "ForStatement[6002-6119]:ForStatement[6072-6189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6038-6119]:Block[6108-6189]"
    }, {
      "left" : "buffer[offset + remaining] = (byte) '0';",
      "right" : "buffer[offset + remaining] = (byte) '0';",
      "info" : "ExpressionStatement[6069-6109]:ExpressionStatement[6139-6179]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6722-6728]:Modifier[6792-6798]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6729-6735]:Modifier[6799-6805]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[6736-6739]:PrimitiveType[6806-6809]"
    }, {
      "left" : "formatOctalBytes",
      "right" : "formatOctalBytes",
      "info" : "SimpleName[6740-6756]:SimpleName[6810-6826]"
    }, {
      "left" : "final long value",
      "right" : "final long value",
      "info" : "SingleVariableDeclaration[6757-6773]:SingleVariableDeclaration[6827-6843]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[6775-6785]:SingleVariableDeclaration[6845-6855]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[6787-6803]:SingleVariableDeclaration[6857-6873]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[6805-6821]:SingleVariableDeclaration[6875-6891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6823-7092]:Block[6893-7162]"
    }, {
      "left" : "int idx=length-2;",
      "right" : "int idx=length-2;",
      "info" : "VariableDeclarationStatement[6834-6851]:VariableDeclarationStatement[6904-6921]"
    }, {
      "left" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "right" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "info" : "ExpressionStatement[6891-6942]:ExpressionStatement[6961-7012]"
    }, {
      "left" : "buf[offset + idx++] = (byte) ' ';",
      "right" : "buf[offset + idx++] = (byte) ' ';",
      "info" : "ExpressionStatement[6952-6985]:ExpressionStatement[7022-7055]"
    }, {
      "left" : "buf[offset + idx]   = 0;",
      "right" : "buf[offset + idx]   = 0;",
      "info" : "ExpressionStatement[7012-7036]:ExpressionStatement[7082-7106]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[7063-7086]:ReturnStatement[7133-7156]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7666-7672]:Modifier[7736-7742]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7673-7679]:Modifier[7743-7749]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[7680-7683]:PrimitiveType[7750-7753]"
    }, {
      "left" : "formatLongOctalBytes",
      "right" : "formatLongOctalBytes",
      "info" : "SimpleName[7684-7704]:SimpleName[7754-7774]"
    }, {
      "left" : "final long value",
      "right" : "final long value",
      "info" : "SingleVariableDeclaration[7705-7721]:SingleVariableDeclaration[7775-7791]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[7723-7733]:SingleVariableDeclaration[7793-7803]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[7735-7751]:SingleVariableDeclaration[7805-7821]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[7753-7769]:SingleVariableDeclaration[7823-7839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7771-7978]:Block[7841-8048]"
    }, {
      "left" : "int idx=length-1;",
      "right" : "int idx=length-1;",
      "info" : "VariableDeclarationStatement[7782-7799]:VariableDeclarationStatement[7852-7869]"
    }, {
      "left" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "right" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "info" : "ExpressionStatement[7830-7881]:ExpressionStatement[7900-7951]"
    }, {
      "left" : "buf[offset + idx] = (byte) ' ';",
      "right" : "buf[offset + idx] = (byte) ' ';",
      "info" : "ExpressionStatement[7890-7921]:ExpressionStatement[7960-7991]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[7949-7972]:ReturnStatement[8019-8042]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8577-8583]:Modifier[8647-8653]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8584-8590]:Modifier[8654-8660]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[8591-8594]:PrimitiveType[8661-8664]"
    }, {
      "left" : "formatCheckSumOctalBytes",
      "right" : "formatCheckSumOctalBytes",
      "info" : "SimpleName[8595-8619]:SimpleName[8665-8689]"
    }, {
      "left" : "final long value",
      "right" : "final long value",
      "info" : "SingleVariableDeclaration[8620-8636]:SingleVariableDeclaration[8690-8706]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[8638-8648]:SingleVariableDeclaration[8708-8718]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[8650-8666]:SingleVariableDeclaration[8720-8736]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[8668-8684]:SingleVariableDeclaration[8738-8754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8686-8949]:Block[8756-9019]"
    }, {
      "left" : "int idx=length-2;",
      "right" : "int idx=length-2;",
      "info" : "VariableDeclarationStatement[8697-8714]:VariableDeclarationStatement[8767-8784]"
    }, {
      "left" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "right" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "info" : "ExpressionStatement[8744-8795]:ExpressionStatement[8814-8865]"
    }, {
      "left" : "buf[offset + idx++]   = 0;",
      "right" : "buf[offset + idx++]   = 0;",
      "info" : "ExpressionStatement[8805-8831]:ExpressionStatement[8875-8901]"
    }, {
      "left" : "buf[offset + idx]     = (byte) ' ';",
      "right" : "buf[offset + idx]     = (byte) ' ';",
      "info" : "ExpressionStatement[8857-8892]:ExpressionStatement[8927-8962]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[8920-8943]:ReturnStatement[8990-9013]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9116-9122]:Modifier[9186-9192]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9123-9129]:Modifier[9193-9199]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[9130-9134]:PrimitiveType[9200-9204]"
    }, {
      "left" : "computeCheckSum",
      "right" : "computeCheckSum",
      "info" : "SimpleName[9135-9150]:SimpleName[9205-9220]"
    }, {
      "left" : "final byte[] buf",
      "right" : "final byte[] buf",
      "info" : "SingleVariableDeclaration[9151-9167]:SingleVariableDeclaration[9221-9237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9169-9316]:Block[9239-9386]"
    }, {
      "left" : "long sum = 0;",
      "right" : "long sum = 0;",
      "info" : "VariableDeclarationStatement[9179-9192]:VariableDeclarationStatement[9249-9262]"
    }, {
      "left" : "for (int i = 0; i < buf.length; ++i)",
      "right" : "for (int i = 0; i < buf.length; ++i)",
      "info" : "ForStatement[9202-9289]:ForStatement[9272-9359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9239-9289]:Block[9309-9359]"
    }, {
      "left" : "sum += BYTE_MASK & buf[i];",
      "right" : "sum += BYTE_MASK & buf[i];",
      "info" : "ExpressionStatement[9253-9279]:ExpressionStatement[9323-9349]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[9299-9310]:ReturnStatement[9369-9380]"
    } ]
  },
  "interFileMappings" : { }
}