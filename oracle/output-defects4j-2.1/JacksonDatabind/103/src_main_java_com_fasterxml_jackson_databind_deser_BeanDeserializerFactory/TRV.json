{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1;",
      "right" : "private static final long serialVersionUID = 1;",
      "info" : "FieldDeclaration[1446-1493]:FieldDeclaration[1446-1493]"
    }, {
      "left" : "private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class };",
      "right" : "private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class };",
      "info" : "FieldDeclaration[1499-1657]:FieldDeclaration[1499-1657]"
    }, {
      "left" : "public final static BeanDeserializerFactory instance = new BeanDeserializerFactory(\n            new DeserializerFactoryConfig());",
      "right" : "public final static BeanDeserializerFactory instance = new BeanDeserializerFactory(\n            new DeserializerFactoryConfig());",
      "info" : "FieldDeclaration[1829-2084]:FieldDeclaration[1829-2084]"
    }, {
      "left" : "public BeanDeserializerFactory(DeserializerFactoryConfig config)",
      "right" : "public BeanDeserializerFactory(DeserializerFactoryConfig config)",
      "info" : "MethodDeclaration[2090-2185]:MethodDeclaration[2090-2185]"
    }, {
      "left" : "public DeserializerFactory withConfig(DeserializerFactoryConfig config)",
      "right" : "public DeserializerFactory withConfig(DeserializerFactoryConfig config)",
      "info" : "MethodDeclaration[2195-3158]:MethodDeclaration[2195-3158]"
    }, {
      "left" : "public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[3358-5818]:MethodDeclaration[3358-5818]"
    }, {
      "left" : "public JsonDeserializer<Object> createBuilderBasedDeserializer(DeserializationContext ctxt,\n            JavaType valueType, BeanDescription beanDesc, Class<?> builderClass)\n                    throws JsonMappingException",
      "right" : "public JsonDeserializer<Object> createBuilderBasedDeserializer(DeserializationContext ctxt,\n            JavaType valueType, BeanDescription beanDesc, Class<?> builderClass)\n                    throws JsonMappingException",
      "info" : "MethodDeclaration[5824-6360]:MethodDeclaration[5824-6360]"
    }, {
      "left" : "protected JsonDeserializer<?> findStdDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> findStdDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[6366-7281]:MethodDeclaration[6366-7281]"
    }, {
      "left" : "protected JavaType materializeAbstractType(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "protected JavaType materializeAbstractType(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[7291-7832]:MethodDeclaration[7291-7832]"
    }, {
      "left" : "protected void addObjectIdReader(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException",
      "right" : "protected void addObjectIdReader(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[14548-16397]:MethodDeclaration[14578-16427]"
    }, {
      "left" : "public JsonDeserializer<Object> buildThrowableDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<Object> buildThrowableDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[16407-19468]:MethodDeclaration[16437-19498]"
    }, {
      "left" : "protected BeanDeserializerBuilder constructBeanDeserializerBuilder(DeserializationContext ctxt,\n            BeanDescription beanDesc)",
      "right" : "protected BeanDeserializerBuilder constructBeanDeserializerBuilder(DeserializationContext ctxt,\n            BeanDescription beanDesc)",
      "info" : "MethodDeclaration[19710-20097]:MethodDeclaration[19740-20127]"
    }, {
      "left" : "protected void addBeanProps(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException",
      "right" : "protected void addBeanProps(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[20107-28002]:MethodDeclaration[20137-28032]"
    }, {
      "left" : "private boolean _isSetterlessType(Class<?> rawType)",
      "right" : "private boolean _isSetterlessType(Class<?> rawType)",
      "info" : "MethodDeclaration[28008-28358]:MethodDeclaration[28038-28388]"
    }, {
      "left" : "protected List<BeanPropertyDefinition> filterBeanProps(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder,\n            List<BeanPropertyDefinition> propDefsIn,\n            Set<String> ignored)\n        throws JsonMappingException",
      "right" : "protected List<BeanPropertyDefinition> filterBeanProps(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder,\n            List<BeanPropertyDefinition> propDefsIn,\n            Set<String> ignored)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[28364-30079]:MethodDeclaration[28394-30109]"
    }, {
      "left" : "protected void addBackReferenceProperties(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException",
      "right" : "protected void addBackReferenceProperties(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[30085-31781]:MethodDeclaration[30115-31811]"
    }, {
      "left" : "// since 2.9 (rename)\n    protected void addReferenceProperties(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException",
      "right" : "// since 2.9 (rename)\n    protected void addReferenceProperties(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[31787-32071]:MethodDeclaration[31817-32101]"
    }, {
      "left" : "protected void addInjectables(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException",
      "right" : "protected void addInjectables(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[32077-32906]:MethodDeclaration[32107-32936]"
    }, {
      "left" : "protected SettableAnyProperty constructAnySetter(DeserializationContext ctxt,\n            BeanDescription beanDesc, AnnotatedMember mutator)\n        throws JsonMappingException",
      "right" : "protected SettableAnyProperty constructAnySetter(DeserializationContext ctxt,\n            BeanDescription beanDesc, AnnotatedMember mutator)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[32912-36196]:MethodDeclaration[32942-36226]"
    }, {
      "left" : "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanPropertyDefinition propDef,\n            JavaType propType0)\n        throws JsonMappingException",
      "right" : "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanPropertyDefinition propDef,\n            JavaType propType0)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[36202-38684]:MethodDeclaration[36232-38714]"
    }, {
      "left" : "protected SettableBeanProperty constructSetterlessProperty(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanPropertyDefinition propDef)\n        throws JsonMappingException",
      "right" : "protected SettableBeanProperty constructSetterlessProperty(DeserializationContext ctxt,\n            BeanDescription beanDesc, BeanPropertyDefinition propDef)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[38690-39720]:MethodDeclaration[38720-39750]"
    }, {
      "left" : "protected boolean isPotentialBeanType(Class<?> type)",
      "right" : "protected boolean isPotentialBeanType(Class<?> type)",
      "info" : "MethodDeclaration[39921-41095]:MethodDeclaration[39951-41125]"
    }, {
      "left" : "protected boolean isIgnorableType(DeserializationConfig config, BeanPropertyDefinition propDef,\n            Class<?> type, Map<Class<?>,Boolean> ignoredTypes)",
      "right" : "protected boolean isIgnorableType(DeserializationConfig config, BeanPropertyDefinition propDef,\n            Class<?> type, Map<Class<?>,Boolean> ignoredTypes)",
      "info" : "MethodDeclaration[41101-42364]:MethodDeclaration[41131-42394]"
    }, {
      "left" : "protected void _validateSubType(DeserializationContext ctxt, JavaType type,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "protected void _validateSubType(DeserializationContext ctxt, JavaType type,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[42370-42643]:MethodDeclaration[42400-42673]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2155-2185]:Block[2155-2185]"
    }, {
      "left" : "super(config);",
      "right" : "super(config);",
      "info" : "SuperConstructorInvocation[2165-2179]:SuperConstructorInvocation[2165-2179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2456-3158]:Block[2456-3158]"
    }, {
      "left" : "if (_factoryConfig == config)",
      "right" : "if (_factoryConfig == config)",
      "info" : "IfStatement[2466-2532]:IfStatement[2466-2532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2496-2532]:Block[2496-2532]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[2510-2522]:ReturnStatement[2510-2522]"
    }, {
      "left" : "ClassUtil.verifyMustOverride(BeanDeserializerFactory.class, this, \"withConfig\");",
      "right" : "ClassUtil.verifyMustOverride(BeanDeserializerFactory.class, this, \"withConfig\");",
      "info" : "ExpressionStatement[3020-3100]:ExpressionStatement[3020-3100]"
    }, {
      "left" : "return new BeanDeserializerFactory(config);",
      "right" : "return new BeanDeserializerFactory(config);",
      "info" : "ReturnStatement[3109-3152]:ReturnStatement[3109-3152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3717-5818]:Block[3717-5818]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[3727-3781]:VariableDeclarationStatement[3727-3781]"
    }, {
      "left" : "JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);",
      "right" : "JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);",
      "info" : "VariableDeclarationStatement[3836-3922]:VariableDeclarationStatement[3836-3922]"
    }, {
      "left" : "if (custom != null)",
      "right" : "if (custom != null)",
      "info" : "IfStatement[3931-3989]:IfStatement[3931-3989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3951-3989]:Block[3951-3989]"
    }, {
      "left" : "return custom;",
      "right" : "return custom;",
      "info" : "ReturnStatement[3965-3979]:ReturnStatement[3965-3979]"
    }, {
      "left" : "if (type.isThrowable())",
      "right" : "if (type.isThrowable())",
      "info" : "IfStatement[4170-4274]:IfStatement[4170-4274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4194-4274]:Block[4194-4274]"
    }, {
      "left" : "return buildThrowableDeserializer(ctxt, type, beanDesc);",
      "right" : "return buildThrowableDeserializer(ctxt, type, beanDesc);",
      "info" : "ReturnStatement[4208-4264]:ReturnStatement[4208-4264]"
    }, {
      "left" : "if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType())",
      "right" : "if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType())",
      "info" : "IfStatement[4544-5132]:IfStatement[4544-5132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4612-5132]:Block[4612-5132]"
    }, {
      "left" : "JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);",
      "right" : "JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);",
      "info" : "VariableDeclarationStatement[4695-4765]:VariableDeclarationStatement[4695-4765]"
    }, {
      "left" : "if (concreteType != null)",
      "right" : "if (concreteType != null)",
      "info" : "IfStatement[4778-5122]:IfStatement[4778-5122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4804-5122]:Block[4804-5122]"
    }, {
      "left" : "beanDesc = config.introspect(concreteType);",
      "right" : "beanDesc = config.introspect(concreteType);",
      "info" : "ExpressionStatement[4989-5032]:ExpressionStatement[4989-5032]"
    }, {
      "left" : "return buildBeanDeserializer(ctxt, concreteType, beanDesc);",
      "right" : "return buildBeanDeserializer(ctxt, concreteType, beanDesc);",
      "info" : "ReturnStatement[5049-5108]:ReturnStatement[5049-5108]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);",
      "right" : "@SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc);",
      "info" : "VariableDeclarationStatement[5227-5368]:VariableDeclarationStatement[5227-5368]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[5377-5433]:IfStatement[5377-5433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5396-5433]:Block[5396-5433]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[5410-5423]:ReturnStatement[5410-5423]"
    }, {
      "left" : "if (!isPotentialBeanType(type.getRawClass()))",
      "right" : "if (!isPotentialBeanType(type.getRawClass()))",
      "info" : "IfStatement[5515-5597]:IfStatement[5515-5597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5561-5597]:Block[5561-5597]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5575-5587]:ReturnStatement[5575-5587]"
    }, {
      "left" : "_validateSubType(ctxt, type, beanDesc);",
      "right" : "_validateSubType(ctxt, type, beanDesc);",
      "info" : "ExpressionStatement[5649-5688]:ExpressionStatement[5649-5688]"
    }, {
      "left" : "return buildBeanDeserializer(ctxt, type, beanDesc);",
      "right" : "return buildBeanDeserializer(ctxt, type, beanDesc);",
      "info" : "ReturnStatement[5761-5812]:ReturnStatement[5761-5812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6063-6360]:Block[6063-6360]"
    }, {
      "left" : "JavaType builderType = ctxt.constructType(builderClass);",
      "right" : "JavaType builderType = ctxt.constructType(builderClass);",
      "info" : "VariableDeclarationStatement[6132-6188]:VariableDeclarationStatement[6132-6188]"
    }, {
      "left" : "BeanDescription builderDesc = ctxt.getConfig().introspectForBuilder(builderType);",
      "right" : "BeanDescription builderDesc = ctxt.getConfig().introspectForBuilder(builderType);",
      "info" : "VariableDeclarationStatement[6197-6278]:VariableDeclarationStatement[6197-6278]"
    }, {
      "left" : "return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc);",
      "right" : "return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc);",
      "info" : "ReturnStatement[6287-6354]:ReturnStatement[6287-6354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6693-7281]:Block[6693-7281]"
    }, {
      "left" : "JsonDeserializer<?> deser = findDefaultDeserializer(ctxt, type, beanDesc);",
      "right" : "JsonDeserializer<?> deser = findDefaultDeserializer(ctxt, type, beanDesc);",
      "info" : "VariableDeclarationStatement[6807-6881]:VariableDeclarationStatement[6807-6881]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[6949-7253]:IfStatement[6949-7253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6968-7253]:Block[6968-7253]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[6982-7243]:IfStatement[6982-7243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7029-7243]:Block[7029-7243]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[7047-7229]:EnhancedForStatement[7047-7229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7123-7229]:Block[7123-7229]"
    }, {
      "left" : "deser = mod.modifyDeserializer(ctxt.getConfig(), beanDesc, deser);",
      "right" : "deser = mod.modifyDeserializer(ctxt.getConfig(), beanDesc, deser);",
      "info" : "ExpressionStatement[7145-7211]:ExpressionStatement[7145-7211]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[7262-7275]:ReturnStatement[7262-7275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7456-7832]:Block[7456-7832]"
    }, {
      "left" : "for (AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers())",
      "right" : "for (AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers())",
      "info" : "EnhancedForStatement[7558-7805]:EnhancedForStatement[7558-7805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7628-7805]:Block[7628-7805]"
    }, {
      "left" : "JavaType concrete = r.resolveAbstractType(ctxt.getConfig(), beanDesc);",
      "right" : "JavaType concrete = r.resolveAbstractType(ctxt.getConfig(), beanDesc);",
      "info" : "VariableDeclarationStatement[7642-7712]:VariableDeclarationStatement[7642-7712]"
    }, {
      "left" : "if (concrete != null)",
      "right" : "if (concrete != null)",
      "info" : "IfStatement[7725-7795]:IfStatement[7725-7795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7747-7795]:Block[7747-7795]"
    }, {
      "left" : "return concrete;",
      "right" : "return concrete;",
      "info" : "ReturnStatement[7765-7781]:ReturnStatement[7765-7781]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7814-7826]:ReturnStatement[7814-7826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14721-16397]:Block[14751-16427]"
    }, {
      "left" : "ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo();",
      "right" : "ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo();",
      "info" : "VariableDeclarationStatement[14731-14786]:VariableDeclarationStatement[14761-14816]"
    }, {
      "left" : "if (objectIdInfo == null)",
      "right" : "if (objectIdInfo == null)",
      "info" : "IfStatement[14795-14852]:IfStatement[14825-14882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14821-14852]:Block[14851-14882]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14835-14842]:ReturnStatement[14865-14872]"
    }, {
      "left" : "Class<?> implClass = objectIdInfo.getGeneratorType();",
      "right" : "Class<?> implClass = objectIdInfo.getGeneratorType();",
      "info" : "VariableDeclarationStatement[14861-14914]:VariableDeclarationStatement[14891-14944]"
    }, {
      "left" : "JavaType idType;",
      "right" : "JavaType idType;",
      "info" : "VariableDeclarationStatement[14923-14939]:VariableDeclarationStatement[14953-14969]"
    }, {
      "left" : "SettableBeanProperty idProp;",
      "right" : "SettableBeanProperty idProp;",
      "info" : "VariableDeclarationStatement[14948-14976]:VariableDeclarationStatement[14978-15006]"
    }, {
      "left" : "ObjectIdGenerator<?> gen;",
      "right" : "ObjectIdGenerator<?> gen;",
      "info" : "VariableDeclarationStatement[14985-15010]:VariableDeclarationStatement[15015-15040]"
    }, {
      "left" : "ObjectIdResolver resolver = ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo);",
      "right" : "ObjectIdResolver resolver = ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo);",
      "info" : "VariableDeclarationStatement[15020-15117]:VariableDeclarationStatement[15050-15147]"
    }, {
      "left" : "if (implClass == ObjectIdGenerators.PropertyGenerator.class)",
      "right" : "if (implClass == ObjectIdGenerators.PropertyGenerator.class)",
      "info" : "IfStatement[15198-16082]:IfStatement[15228-16112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15259-15793]:Block[15289-15823]"
    }, {
      "left" : "PropertyName propName = objectIdInfo.getPropertyName();",
      "right" : "PropertyName propName = objectIdInfo.getPropertyName();",
      "info" : "VariableDeclarationStatement[15311-15366]:VariableDeclarationStatement[15341-15396]"
    }, {
      "left" : "idProp = builder.findProperty(propName);",
      "right" : "idProp = builder.findProperty(propName);",
      "info" : "ExpressionStatement[15379-15419]:ExpressionStatement[15409-15449]"
    }, {
      "left" : "if (idProp == null)",
      "right" : "if (idProp == null)",
      "info" : "IfStatement[15432-15665]:IfStatement[15462-15695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15452-15665]:Block[15482-15695]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid Object Id definition for \"\n                        +beanDesc.getBeanClass().getName()+\": cannot find property with name '\"+propName+\"'\");",
      "right" : "throw new IllegalArgumentException(\"Invalid Object Id definition for \"\n                        +beanDesc.getBeanClass().getName()+\": cannot find property with name '\"+propName+\"'\");",
      "info" : "ThrowStatement[15470-15651]:ThrowStatement[15500-15681]"
    }, {
      "left" : "idType = idProp.getType();",
      "right" : "idType = idProp.getType();",
      "info" : "ExpressionStatement[15678-15704]:ExpressionStatement[15708-15734]"
    }, {
      "left" : "gen = new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());",
      "right" : "gen = new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());",
      "info" : "ExpressionStatement[15717-15783]:ExpressionStatement[15747-15813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15799-16082]:Block[15829-16112]"
    }, {
      "left" : "JavaType type = ctxt.constructType(implClass);",
      "right" : "JavaType type = ctxt.constructType(implClass);",
      "info" : "VariableDeclarationStatement[15813-15859]:VariableDeclarationStatement[15843-15889]"
    }, {
      "left" : "idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];",
      "right" : "idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];",
      "info" : "ExpressionStatement[15872-15956]:ExpressionStatement[15902-15986]"
    }, {
      "left" : "idProp = null;",
      "right" : "idProp = null;",
      "info" : "ExpressionStatement[15969-15983]:ExpressionStatement[15999-16013]"
    }, {
      "left" : "gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);",
      "right" : "gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);",
      "info" : "ExpressionStatement[15996-16072]:ExpressionStatement[16026-16102]"
    }, {
      "left" : "JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType);",
      "right" : "JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType);",
      "info" : "VariableDeclarationStatement[16177-16244]:VariableDeclarationStatement[16207-16274]"
    }, {
      "left" : "builder.setObjectIdReader(ObjectIdReader.construct(idType,\n                objectIdInfo.getPropertyName(), gen, deser, idProp, resolver));",
      "right" : "builder.setObjectIdReader(ObjectIdReader.construct(idType,\n                objectIdInfo.getPropertyName(), gen, deser, idProp, resolver));",
      "info" : "ExpressionStatement[16253-16391]:ExpressionStatement[16283-16421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16623-19468]:Block[16653-19498]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[16633-16687]:VariableDeclarationStatement[16663-16717]"
    }, {
      "left" : "BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc);",
      "right" : "BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc);",
      "info" : "VariableDeclarationStatement[16760-16843]:VariableDeclarationStatement[16790-16873]"
    }, {
      "left" : "builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc));",
      "right" : "builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc));",
      "info" : "ExpressionStatement[16852-16920]:ExpressionStatement[16882-16950]"
    }, {
      "left" : "addBeanProps(ctxt, beanDesc, builder);",
      "right" : "addBeanProps(ctxt, beanDesc, builder);",
      "info" : "ExpressionStatement[16930-16968]:ExpressionStatement[16960-16998]"
    }, {
      "left" : "AnnotatedMethod am = beanDesc.findMethod(\"initCause\", INIT_CAUSE_PARAMS);",
      "right" : "AnnotatedMethod am = beanDesc.findMethod(\"initCause\", INIT_CAUSE_PARAMS);",
      "info" : "VariableDeclarationStatement[17173-17246]:VariableDeclarationStatement[17203-17276]"
    }, {
      "left" : "if (am != null)",
      "right" : "if (am != null)",
      "info" : "IfStatement[17255-17893]:IfStatement[17285-17923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17271-17893]:Block[17301-17923]"
    }, {
      "left" : "SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am,\n                    new PropertyName(\"cause\"));",
      "right" : "SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am,\n                    new PropertyName(\"cause\"));",
      "info" : "VariableDeclarationStatement[17309-17456]:VariableDeclarationStatement[17339-17486]"
    }, {
      "left" : "SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, propDef,\n                    am.getParameterType(0));",
      "right" : "SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, propDef,\n                    am.getParameterType(0));",
      "info" : "VariableDeclarationStatement[17469-17592]:VariableDeclarationStatement[17499-17622]"
    }, {
      "left" : "if (prop != null)",
      "right" : "if (prop != null)",
      "info" : "IfStatement[17605-17883]:IfStatement[17635-17913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17623-17883]:Block[17653-17913]"
    }, {
      "left" : "builder.addOrReplaceProperty(prop, true);",
      "right" : "builder.addOrReplaceProperty(prop, true);",
      "info" : "ExpressionStatement[17828-17869]:ExpressionStatement[17858-17899]"
    }, {
      "left" : "builder.addIgnorable(\"localizedMessage\");",
      "right" : "builder.addIgnorable(\"localizedMessage\");",
      "info" : "ExpressionStatement[17957-17998]:ExpressionStatement[17987-18028]"
    }, {
      "left" : "builder.addIgnorable(\"suppressed\");",
      "right" : "builder.addIgnorable(\"suppressed\");",
      "info" : "ExpressionStatement[18080-18115]:ExpressionStatement[18110-18145]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[18438-18672]:IfStatement[18468-18702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18485-18672]:Block[18515-18702]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[18499-18662]:EnhancedForStatement[18529-18692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18575-18662]:Block[18605-18692]"
    }, {
      "left" : "builder = mod.updateBuilder(config, beanDesc, builder);",
      "right" : "builder = mod.updateBuilder(config, beanDesc, builder);",
      "info" : "ExpressionStatement[18593-18648]:ExpressionStatement[18623-18678]"
    }, {
      "left" : "JsonDeserializer<?> deserializer = builder.build();",
      "right" : "JsonDeserializer<?> deserializer = builder.build();",
      "info" : "VariableDeclarationStatement[18681-18732]:VariableDeclarationStatement[18711-18762]"
    }, {
      "left" : "if (deserializer instanceof BeanDeserializer)",
      "right" : "if (deserializer instanceof BeanDeserializer)",
      "info" : "IfStatement[18913-19057]:IfStatement[18943-19087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18959-19057]:Block[18989-19087]"
    }, {
      "left" : "deserializer = new ThrowableDeserializer((BeanDeserializer) deserializer);",
      "right" : "deserializer = new ThrowableDeserializer((BeanDeserializer) deserializer);",
      "info" : "ExpressionStatement[18973-19047]:ExpressionStatement[19003-19077]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[19157-19406]:IfStatement[19187-19436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19204-19406]:Block[19234-19436]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[19218-19396]:EnhancedForStatement[19248-19426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19294-19396]:Block[19324-19426]"
    }, {
      "left" : "deserializer = mod.modifyDeserializer(config, beanDesc, deserializer);",
      "right" : "deserializer = mod.modifyDeserializer(config, beanDesc, deserializer);",
      "info" : "ExpressionStatement[19312-19382]:ExpressionStatement[19342-19412]"
    }, {
      "left" : "return (JsonDeserializer<Object>) deserializer;",
      "right" : "return (JsonDeserializer<Object>) deserializer;",
      "info" : "ReturnStatement[19415-19462]:ReturnStatement[19445-19492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20030-20097]:Block[20060-20127]"
    }, {
      "left" : "return new BeanDeserializerBuilder(beanDesc, ctxt);",
      "right" : "return new BeanDeserializerBuilder(beanDesc, ctxt);",
      "info" : "ReturnStatement[20040-20091]:ReturnStatement[20070-20121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20508-28002]:Block[20538-28032]"
    }, {
      "left" : "final boolean isConcrete = !beanDesc.getType().isAbstract();",
      "right" : "final boolean isConcrete = !beanDesc.getType().isAbstract();",
      "info" : "VariableDeclarationStatement[20518-20578]:VariableDeclarationStatement[20548-20608]"
    }, {
      "left" : "final SettableBeanProperty[] creatorProps = isConcrete\n                ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n                : null;",
      "right" : "final SettableBeanProperty[] creatorProps = isConcrete\n                ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n                : null;",
      "info" : "VariableDeclarationStatement[20587-20755]:VariableDeclarationStatement[20617-20785]"
    }, {
      "left" : "final boolean hasCreatorProps = (creatorProps != null);",
      "right" : "final boolean hasCreatorProps = (creatorProps != null);",
      "info" : "VariableDeclarationStatement[20764-20819]:VariableDeclarationStatement[20794-20849]"
    }, {
      "left" : "JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n                .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                        beanDesc.getClassInfo());",
      "right" : "JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n                .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                        beanDesc.getClassInfo());",
      "info" : "VariableDeclarationStatement[21094-21267]:VariableDeclarationStatement[21124-21297]"
    }, {
      "left" : "Set<String> ignored;",
      "right" : "Set<String> ignored;",
      "info" : "VariableDeclarationStatement[21276-21296]:VariableDeclarationStatement[21306-21326]"
    }, {
      "left" : "if (ignorals != null)",
      "right" : "if (ignorals != null)",
      "info" : "IfStatement[21305-21742]:IfStatement[21335-21772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21327-21679]:Block[21357-21709]"
    }, {
      "left" : "boolean ignoreAny = ignorals.getIgnoreUnknown();",
      "right" : "boolean ignoreAny = ignorals.getIgnoreUnknown();",
      "info" : "VariableDeclarationStatement[21341-21389]:VariableDeclarationStatement[21371-21419]"
    }, {
      "left" : "builder.setIgnoreUnknownProperties(ignoreAny);",
      "right" : "builder.setIgnoreUnknownProperties(ignoreAny);",
      "info" : "ExpressionStatement[21402-21448]:ExpressionStatement[21432-21478]"
    }, {
      "left" : "ignored = ignorals.findIgnoredForDeserialization();",
      "right" : "ignored = ignorals.findIgnoredForDeserialization();",
      "info" : "ExpressionStatement[21510-21561]:ExpressionStatement[21540-21591]"
    }, {
      "left" : "for (String propName : ignored)",
      "right" : "for (String propName : ignored)",
      "info" : "EnhancedForStatement[21574-21669]:EnhancedForStatement[21604-21699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21606-21669]:Block[21636-21699]"
    }, {
      "left" : "builder.addIgnorable(propName);",
      "right" : "builder.addIgnorable(propName);",
      "info" : "ExpressionStatement[21624-21655]:ExpressionStatement[21654-21685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21685-21742]:Block[21715-21772]"
    }, {
      "left" : "ignored = Collections.emptySet();",
      "right" : "ignored = Collections.emptySet();",
      "info" : "ExpressionStatement[21699-21732]:ExpressionStatement[21729-21762]"
    }, {
      "left" : "AnnotatedMember anySetter = beanDesc.findAnySetterAccessor();",
      "right" : "AnnotatedMember anySetter = beanDesc.findAnySetterAccessor();",
      "info" : "VariableDeclarationStatement[21805-21866]:VariableDeclarationStatement[21835-21896]"
    }, {
      "left" : "if (anySetter != null)",
      "right" : "if (anySetter != null)",
      "info" : "IfStatement[21875-22591]:IfStatement[21905-22621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21898-21990]:Block[21928-22020]"
    }, {
      "left" : "builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));",
      "right" : "builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));",
      "info" : "ExpressionStatement[21912-21980]:ExpressionStatement[21942-22010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21996-22591]:Block[22026-22621]"
    }, {
      "left" : "Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();",
      "right" : "Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();",
      "info" : "VariableDeclarationStatement[22190-22255]:VariableDeclarationStatement[22220-22285]"
    }, {
      "left" : "if (ignored2 != null)",
      "right" : "if (ignored2 != null)",
      "info" : "IfStatement[22268-22581]:IfStatement[22298-22611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22290-22581]:Block[22320-22611]"
    }, {
      "left" : "for (String propName : ignored2)",
      "right" : "for (String propName : ignored2)",
      "info" : "EnhancedForStatement[22308-22567]:EnhancedForStatement[22338-22597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22341-22567]:Block[22371-22597]"
    }, {
      "left" : "builder.addIgnorable(propName);",
      "right" : "builder.addIgnorable(propName);",
      "info" : "ExpressionStatement[22518-22549]:ExpressionStatement[22548-22579]"
    }, {
      "left" : "final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n                && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);",
      "right" : "final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n                && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);",
      "info" : "VariableDeclarationStatement[22600-22758]:VariableDeclarationStatement[22630-22788]"
    }, {
      "left" : "List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n                beanDesc, builder, beanDesc.findProperties(), ignored);",
      "right" : "List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n                beanDesc, builder, beanDesc.findProperties(), ignored);",
      "info" : "VariableDeclarationStatement[22826-22959]:VariableDeclarationStatement[22856-22989]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[23029-23278]:IfStatement[23059-23308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23076-23278]:Block[23106-23308]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[23090-23268]:EnhancedForStatement[23120-23298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23166-23268]:Block[23196-23298]"
    }, {
      "left" : "propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);",
      "right" : "propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);",
      "info" : "ExpressionStatement[23184-23254]:ExpressionStatement[23214-23284]"
    }, {
      "left" : "for (BeanPropertyDefinition propDef : propDefs)",
      "right" : "for (BeanPropertyDefinition propDef : propDefs)",
      "info" : "EnhancedForStatement[23376-27996]:EnhancedForStatement[23406-28026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23424-27996]:Block[23454-28026]"
    }, {
      "left" : "SettableBeanProperty prop = null;",
      "right" : "SettableBeanProperty prop = null;",
      "info" : "VariableDeclarationStatement[23438-23471]:VariableDeclarationStatement[23468-23501]"
    }, {
      "left" : "if (propDef.hasSetter())",
      "right" : "if (propDef.hasSetter())",
      "info" : "IfStatement[23760-25667]:IfStatement[23790-25697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23785-24019]:Block[23815-24049]"
    }, {
      "left" : "AnnotatedMethod setter = propDef.getSetter();",
      "right" : "AnnotatedMethod setter = propDef.getSetter();",
      "info" : "VariableDeclarationStatement[23803-23848]:VariableDeclarationStatement[23833-23878]"
    }, {
      "left" : "JavaType propertyType = setter.getParameterType(0);",
      "right" : "JavaType propertyType = setter.getParameterType(0);",
      "info" : "VariableDeclarationStatement[23865-23916]:VariableDeclarationStatement[23895-23946]"
    }, {
      "left" : "prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);",
      "right" : "prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);",
      "info" : "ExpressionStatement[23933-24005]:ExpressionStatement[23963-24035]"
    }, {
      "left" : "if (propDef.hasField())",
      "right" : "if (propDef.hasField())",
      "info" : "IfStatement[24025-25667]:IfStatement[24055-25697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24049-24269]:Block[24079-24299]"
    }, {
      "left" : "AnnotatedField field = propDef.getField();",
      "right" : "AnnotatedField field = propDef.getField();",
      "info" : "VariableDeclarationStatement[24067-24109]:VariableDeclarationStatement[24097-24139]"
    }, {
      "left" : "JavaType propertyType = field.getType();",
      "right" : "JavaType propertyType = field.getType();",
      "info" : "VariableDeclarationStatement[24126-24166]:VariableDeclarationStatement[24156-24196]"
    }, {
      "left" : "prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);",
      "right" : "prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);",
      "info" : "ExpressionStatement[24183-24255]:ExpressionStatement[24213-24285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24275-25667]:Block[24305-25697]"
    }, {
      "left" : "AnnotatedMethod getter = propDef.getGetter();",
      "right" : "AnnotatedMethod getter = propDef.getGetter();",
      "info" : "VariableDeclarationStatement[24377-24422]:VariableDeclarationStatement[24407-24452]"
    }, {
      "left" : "if (getter != null)",
      "right" : "if (getter != null)",
      "info" : "IfStatement[24439-25653]:IfStatement[24469-25683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24459-25653]:Block[24489-25683]"
    }, {
      "left" : "if (useGettersAsSetters && _isSetterlessType(getter.getRawType()))",
      "right" : "if (useGettersAsSetters && _isSetterlessType(getter.getRawType()))",
      "info" : "IfStatement[24481-25635]:IfStatement[24511-25665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24548-25009]:Block[24578-25039]"
    }, {
      "left" : "if (builder.hasIgnorable(propDef.getName()))",
      "right" : "if (builder.hasIgnorable(propDef.getName()))",
      "info" : "IfStatement[24763-24987]:IfStatement[24793-25017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24808-24865]:Block[24838-24895]"
    }, {
      "left" : ";",
      "right" : ";",
      "info" : "EmptyStatement[24838-24839]:EmptyStatement[24868-24869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24871-24987]:Block[24901-25017]"
    }, {
      "left" : "prop = constructSetterlessProperty(ctxt, beanDesc, propDef);",
      "right" : "prop = constructSetterlessProperty(ctxt, beanDesc, propDef);",
      "info" : "ExpressionStatement[24901-24961]:ExpressionStatement[24931-24991]"
    }, {
      "left" : "if (!propDef.hasConstructorParameter())",
      "right" : "if (!propDef.hasConstructorParameter())",
      "info" : "IfStatement[25015-25635]:IfStatement[25045-25665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25055-25635]:Block[25085-25665]"
    }, {
      "left" : "PropertyMetadata md = propDef.getMetadata();",
      "right" : "PropertyMetadata md = propDef.getMetadata();",
      "info" : "VariableDeclarationStatement[25081-25125]:VariableDeclarationStatement[25111-25155]"
    }, {
      "left" : "if (md.getMergeInfo() != null)",
      "right" : "if (md.getMergeInfo() != null)",
      "info" : "IfStatement[25466-25613]:IfStatement[25496-25643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25497-25613]:Block[25527-25643]"
    }, {
      "left" : "prop = constructSetterlessProperty(ctxt, beanDesc, propDef);",
      "right" : "prop = constructSetterlessProperty(ctxt, beanDesc, propDef);",
      "info" : "ExpressionStatement[25527-25587]:ExpressionStatement[25557-25617]"
    }, {
      "left" : "if (hasCreatorProps && propDef.hasConstructorParameter())",
      "right" : "if (hasCreatorProps && propDef.hasConstructorParameter())",
      "info" : "IfStatement[25829-27613]:IfStatement[25859-27643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25887-27613]:Block[25917-27643]"
    }, {
      "left" : "final String name = propDef.getName();",
      "right" : "final String name = propDef.getName();",
      "info" : "VariableDeclarationStatement[26270-26308]:VariableDeclarationStatement[26300-26338]"
    }, {
      "left" : "CreatorProperty cprop = null;",
      "right" : "CreatorProperty cprop = null;",
      "info" : "VariableDeclarationStatement[26325-26354]:VariableDeclarationStatement[26355-26384]"
    }, {
      "left" : "if (creatorProps != null)",
      "right" : "if (creatorProps != null)",
      "info" : "IfStatement[26371-26716]:IfStatement[26401-26746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26397-26716]:Block[26427-26746]"
    }, {
      "left" : "for (SettableBeanProperty cp : creatorProps)",
      "right" : "for (SettableBeanProperty cp : creatorProps)",
      "info" : "EnhancedForStatement[26419-26698]:EnhancedForStatement[26449-26728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26464-26698]:Block[26494-26728]"
    }, {
      "left" : "if (name.equals(cp.getName()) && (cp instanceof CreatorProperty))",
      "right" : "if (name.equals(cp.getName()) && (cp instanceof CreatorProperty))",
      "info" : "IfStatement[26490-26676]:IfStatement[26520-26706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26556-26676]:Block[26586-26706]"
    }, {
      "left" : "cprop = (CreatorProperty) cp;",
      "right" : "cprop = (CreatorProperty) cp;",
      "info" : "ExpressionStatement[26586-26615]:ExpressionStatement[26616-26645]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26644-26650]:BreakStatement[26674-26680]"
    }, {
      "left" : "if (cprop == null)",
      "right" : "if (cprop == null)",
      "info" : "IfStatement[26733-27210]:IfStatement[26763-27240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26752-27210]:Block[26782-27240]"
    }, {
      "left" : "List<String> n = new ArrayList<>();",
      "right" : "List<String> n = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[26774-26809]:VariableDeclarationStatement[26804-26839]"
    }, {
      "left" : "for (SettableBeanProperty cp : creatorProps)",
      "right" : "for (SettableBeanProperty cp : creatorProps)",
      "info" : "EnhancedForStatement[26830-26943]:EnhancedForStatement[26860-26973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26875-26943]:Block[26905-26973]"
    }, {
      "left" : "n.add(cp.getName());",
      "right" : "n.add(cp.getName());",
      "info" : "ExpressionStatement[26901-26921]:ExpressionStatement[26931-26951]"
    }, {
      "left" : "ctxt.reportBadPropertyDefinition(beanDesc, propDef,\n                            \"Could not find creator property with name '%s' (known Creator properties: %s)\",\n                            name, n);",
      "right" : "ctxt.reportBadPropertyDefinition(beanDesc, propDef,\n                            \"Could not find creator property with name '%s' (known Creator properties: %s)\",\n                            name, n);",
      "info" : "ExpressionStatement[26964-27162]:ExpressionStatement[26994-27192]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[27183-27192]:ContinueStatement[27213-27222]"
    }, {
      "left" : "if (prop != null)",
      "right" : "if (prop != null)",
      "info" : "IfStatement[27227-27315]:IfStatement[27257-27345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27245-27315]:Block[27275-27345]"
    }, {
      "left" : "cprop.setFallbackSetter(prop);",
      "right" : "cprop.setFallbackSetter(prop);",
      "info" : "ExpressionStatement[27267-27297]:ExpressionStatement[27297-27327]"
    }, {
      "left" : "Class<?>[] views = propDef.findViews();",
      "right" : "Class<?>[] views = propDef.findViews();",
      "info" : "VariableDeclarationStatement[27332-27371]:VariableDeclarationStatement[27362-27401]"
    }, {
      "left" : "if (views == null)",
      "right" : "if (views == null)",
      "info" : "IfStatement[27388-27483]:IfStatement[27418-27513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27407-27483]:Block[27437-27513]"
    }, {
      "left" : "views = beanDesc.findDefaultViews();",
      "right" : "views = beanDesc.findDefaultViews();",
      "info" : "ExpressionStatement[27429-27465]:ExpressionStatement[27459-27495]"
    }, {
      "left" : "cprop.setViews(views);",
      "right" : "cprop.setViews(views);",
      "info" : "ExpressionStatement[27500-27522]:ExpressionStatement[27530-27552]"
    }, {
      "left" : "builder.addCreatorProperty(cprop);",
      "right" : "builder.addCreatorProperty(cprop);",
      "info" : "ExpressionStatement[27539-27573]:ExpressionStatement[27569-27603]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[27590-27599]:ContinueStatement[27620-27629]"
    }, {
      "left" : "if (prop != null)",
      "right" : "if (prop != null)",
      "info" : "IfStatement[27626-27986]:IfStatement[27656-28016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27644-27986]:Block[27674-28016]"
    }, {
      "left" : "Class<?>[] views = propDef.findViews();",
      "right" : "Class<?>[] views = propDef.findViews();",
      "info" : "VariableDeclarationStatement[27740-27779]:VariableDeclarationStatement[27770-27809]"
    }, {
      "left" : "if (views == null)",
      "right" : "if (views == null)",
      "info" : "IfStatement[27796-27891]:IfStatement[27826-27921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27815-27891]:Block[27845-27921]"
    }, {
      "left" : "views = beanDesc.findDefaultViews();",
      "right" : "views = beanDesc.findDefaultViews();",
      "info" : "ExpressionStatement[27837-27873]:ExpressionStatement[27867-27903]"
    }, {
      "left" : "prop.setViews(views);",
      "right" : "prop.setViews(views);",
      "info" : "ExpressionStatement[27908-27929]:ExpressionStatement[27938-27959]"
    }, {
      "left" : "builder.addProperty(prop);",
      "right" : "builder.addProperty(prop);",
      "info" : "ExpressionStatement[27946-27972]:ExpressionStatement[27976-28002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28060-28358]:Block[28090-28388]"
    }, {
      "left" : "return Collection.class.isAssignableFrom(rawType)\n                || Map.class.isAssignableFrom(rawType);",
      "right" : "return Collection.class.isAssignableFrom(rawType)\n                || Map.class.isAssignableFrom(rawType);",
      "info" : "ReturnStatement[28247-28352]:ReturnStatement[28277-28382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28868-30079]:Block[28898-30109]"
    }, {
      "left" : "ArrayList<BeanPropertyDefinition> result = new ArrayList<BeanPropertyDefinition>(\n                Math.max(4, propDefsIn.size()));",
      "right" : "ArrayList<BeanPropertyDefinition> result = new ArrayList<BeanPropertyDefinition>(\n                Math.max(4, propDefsIn.size()));",
      "info" : "VariableDeclarationStatement[28878-29008]:VariableDeclarationStatement[28908-29038]"
    }, {
      "left" : "HashMap<Class<?>,Boolean> ignoredTypes = new HashMap<Class<?>,Boolean>();",
      "right" : "HashMap<Class<?>,Boolean> ignoredTypes = new HashMap<Class<?>,Boolean>();",
      "info" : "VariableDeclarationStatement[29017-29090]:VariableDeclarationStatement[29047-29120]"
    }, {
      "left" : "for (BeanPropertyDefinition property : propDefsIn)",
      "right" : "for (BeanPropertyDefinition property : propDefsIn)",
      "info" : "EnhancedForStatement[29177-30050]:EnhancedForStatement[29207-30080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29228-30050]:Block[29258-30080]"
    }, {
      "left" : "String name = property.getName();",
      "right" : "String name = property.getName();",
      "info" : "VariableDeclarationStatement[29242-29275]:VariableDeclarationStatement[29272-29305]"
    }, {
      "left" : "if (ignored.contains(name))",
      "right" : "if (ignored.contains(name))",
      "info" : "IfStatement[29288-29428]:IfStatement[29318-29458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29316-29428]:Block[29346-29458]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[29405-29414]:ContinueStatement[29435-29444]"
    }, {
      "left" : "if (!property.hasConstructorParameter())",
      "right" : "if (!property.hasConstructorParameter())",
      "info" : "IfStatement[29441-30006]:IfStatement[29471-30036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29482-30006]:Block[29512-30036]"
    }, {
      "left" : "Class<?> rawPropertyType = property.getRawPrimaryType();",
      "right" : "Class<?> rawPropertyType = property.getRawPrimaryType();",
      "info" : "VariableDeclarationStatement[29533-29589]:VariableDeclarationStatement[29563-29619]"
    }, {
      "left" : "if ((rawPropertyType != null)\n                        && isIgnorableType(ctxt.getConfig(), property, rawPropertyType, ignoredTypes))",
      "right" : "if ((rawPropertyType != null)\n                        && isIgnorableType(ctxt.getConfig(), property, rawPropertyType, ignoredTypes))",
      "info" : "IfStatement[29670-29992]:IfStatement[29700-30022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29803-29992]:Block[29833-30022]"
    }, {
      "left" : "builder.addIgnorable(name);",
      "right" : "builder.addIgnorable(name);",
      "info" : "ExpressionStatement[29917-29944]:ExpressionStatement[29947-29974]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[29965-29974]:ContinueStatement[29995-30004]"
    }, {
      "left" : "result.add(property);",
      "right" : "result.add(property);",
      "info" : "ExpressionStatement[30019-30040]:ExpressionStatement[30049-30070]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[30059-30073]:ReturnStatement[30089-30103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30465-31781]:Block[30495-31811]"
    }, {
      "left" : "List<BeanPropertyDefinition> refProps = beanDesc.findBackReferences();",
      "right" : "List<BeanPropertyDefinition> refProps = beanDesc.findBackReferences();",
      "info" : "VariableDeclarationStatement[30556-30626]:VariableDeclarationStatement[30586-30656]"
    }, {
      "left" : "if (refProps != null)",
      "right" : "if (refProps != null)",
      "info" : "IfStatement[30635-31775]:IfStatement[30665-31805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30657-31775]:Block[30687-31805]"
    }, {
      "left" : "for (BeanPropertyDefinition refProp : refProps)",
      "right" : "for (BeanPropertyDefinition refProp : refProps)",
      "info" : "EnhancedForStatement[30671-31765]:EnhancedForStatement[30701-31795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30719-31765]:Block[30749-31795]"
    }, {
      "left" : "String refName = refProp.findReferenceName();",
      "right" : "String refName = refProp.findReferenceName();",
      "info" : "VariableDeclarationStatement[31545-31590]:VariableDeclarationStatement[31575-31620]"
    }, {
      "left" : "builder.addBackReferenceProperty(refName, constructSettableProperty(ctxt,\n                        beanDesc, refProp, refProp.getPrimaryType()));",
      "right" : "builder.addBackReferenceProperty(refName, constructSettableProperty(ctxt,\n                        beanDesc, refProp, refProp.getPrimaryType()));",
      "info" : "ExpressionStatement[31607-31751]:ExpressionStatement[31637-31781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32003-32071]:Block[32033-32101]"
    }, {
      "left" : "addBackReferenceProperties(ctxt, beanDesc, builder);",
      "right" : "addBackReferenceProperties(ctxt, beanDesc, builder);",
      "info" : "ExpressionStatement[32013-32065]:ExpressionStatement[32043-32095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32457-32906]:Block[32487-32936]"
    }, {
      "left" : "Map<Object, AnnotatedMember> raw = beanDesc.findInjectables();",
      "right" : "Map<Object, AnnotatedMember> raw = beanDesc.findInjectables();",
      "info" : "VariableDeclarationStatement[32467-32529]:VariableDeclarationStatement[32497-32559]"
    }, {
      "left" : "if (raw != null)",
      "right" : "if (raw != null)",
      "info" : "IfStatement[32538-32900]:IfStatement[32568-32930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32555-32900]:Block[32585-32930]"
    }, {
      "left" : "for (Map.Entry<Object, AnnotatedMember> entry : raw.entrySet())",
      "right" : "for (Map.Entry<Object, AnnotatedMember> entry : raw.entrySet())",
      "info" : "EnhancedForStatement[32569-32890]:EnhancedForStatement[32599-32920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32633-32890]:Block[32663-32920]"
    }, {
      "left" : "AnnotatedMember m = entry.getValue();",
      "right" : "AnnotatedMember m = entry.getValue();",
      "info" : "VariableDeclarationStatement[32651-32688]:VariableDeclarationStatement[32681-32718]"
    }, {
      "left" : "builder.addInjectable(PropertyName.construct(m.getName()),\n                        m.getType(),\n                        beanDesc.getClassAnnotations(), m, entry.getKey());",
      "right" : "builder.addInjectable(PropertyName.construct(m.getName()),\n                        m.getType(),\n                        beanDesc.getClassAnnotations(), m, entry.getKey());",
      "info" : "ExpressionStatement[32705-32876]:ExpressionStatement[32735-32906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33497-36196]:Block[33527-36226]"
    }, {
      "left" : "BeanProperty prop;",
      "right" : "BeanProperty prop;",
      "info" : "VariableDeclarationStatement[33590-33608]:VariableDeclarationStatement[33620-33638]"
    }, {
      "left" : "JavaType keyType;",
      "right" : "JavaType keyType;",
      "info" : "VariableDeclarationStatement[33617-33634]:VariableDeclarationStatement[33647-33664]"
    }, {
      "left" : "JavaType valueType;",
      "right" : "JavaType valueType;",
      "info" : "VariableDeclarationStatement[33643-33662]:VariableDeclarationStatement[33673-33692]"
    }, {
      "left" : "if (mutator instanceof AnnotatedMethod)",
      "right" : "if (mutator instanceof AnnotatedMethod)",
      "info" : "IfStatement[33672-34955]:IfStatement[33702-34985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33712-34210]:Block[33742-34240]"
    }, {
      "left" : "AnnotatedMethod am = (AnnotatedMethod) mutator;",
      "right" : "AnnotatedMethod am = (AnnotatedMethod) mutator;",
      "info" : "VariableDeclarationStatement[33794-33841]:VariableDeclarationStatement[33824-33871]"
    }, {
      "left" : "keyType = am.getParameterType(0);",
      "right" : "keyType = am.getParameterType(0);",
      "info" : "ExpressionStatement[33854-33887]:ExpressionStatement[33884-33917]"
    }, {
      "left" : "valueType = am.getParameterType(1);",
      "right" : "valueType = am.getParameterType(1);",
      "info" : "ExpressionStatement[33900-33935]:ExpressionStatement[33930-33965]"
    }, {
      "left" : "valueType = resolveMemberAndTypeAnnotations(ctxt, mutator, valueType);",
      "right" : "valueType = resolveMemberAndTypeAnnotations(ctxt, mutator, valueType);",
      "info" : "ExpressionStatement[33948-34018]:ExpressionStatement[33978-34048]"
    }, {
      "left" : "prop = new BeanProperty.Std(PropertyName.construct(mutator.getName()),\n                    valueType, null, mutator,\n                    PropertyMetadata.STD_OPTIONAL);",
      "right" : "prop = new BeanProperty.Std(PropertyName.construct(mutator.getName()),\n                    valueType, null, mutator,\n                    PropertyMetadata.STD_OPTIONAL);",
      "info" : "ExpressionStatement[34031-34199]:ExpressionStatement[34061-34229]"
    }, {
      "left" : "if (mutator instanceof AnnotatedField)",
      "right" : "if (mutator instanceof AnnotatedField)",
      "info" : "IfStatement[34216-34955]:IfStatement[34246-34985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34255-34769]:Block[34285-34799]"
    }, {
      "left" : "AnnotatedField af = (AnnotatedField) mutator;",
      "right" : "AnnotatedField af = (AnnotatedField) mutator;",
      "info" : "VariableDeclarationStatement[34269-34314]:VariableDeclarationStatement[34299-34344]"
    }, {
      "left" : "JavaType mapType = af.getType();",
      "right" : "JavaType mapType = af.getType();",
      "info" : "VariableDeclarationStatement[34395-34427]:VariableDeclarationStatement[34425-34457]"
    }, {
      "left" : "mapType = resolveMemberAndTypeAnnotations(ctxt, mutator, mapType);",
      "right" : "mapType = resolveMemberAndTypeAnnotations(ctxt, mutator, mapType);",
      "info" : "ExpressionStatement[34440-34506]:ExpressionStatement[34470-34536]"
    }, {
      "left" : "keyType = mapType.getKeyType();",
      "right" : "keyType = mapType.getKeyType();",
      "info" : "ExpressionStatement[34519-34550]:ExpressionStatement[34549-34580]"
    }, {
      "left" : "valueType = mapType.getContentType();",
      "right" : "valueType = mapType.getContentType();",
      "info" : "ExpressionStatement[34563-34600]:ExpressionStatement[34593-34630]"
    }, {
      "left" : "prop = new BeanProperty.Std(PropertyName.construct(mutator.getName()),\n                    mapType, null, mutator, PropertyMetadata.STD_OPTIONAL);",
      "right" : "prop = new BeanProperty.Std(PropertyName.construct(mutator.getName()),\n                    mapType, null, mutator, PropertyMetadata.STD_OPTIONAL);",
      "info" : "ExpressionStatement[34613-34759]:ExpressionStatement[34643-34789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34775-34955]:Block[34805-34985]"
    }, {
      "left" : "return ctxt.reportBadDefinition(beanDesc.getType(), String.format(\n                    \"Unrecognized mutator type for any setter: %s\", mutator.getClass()));",
      "right" : "return ctxt.reportBadDefinition(beanDesc.getType(), String.format(\n                    \"Unrecognized mutator type for any setter: %s\", mutator.getClass()));",
      "info" : "ReturnStatement[34789-34945]:ReturnStatement[34819-34975]"
    }, {
      "left" : "KeyDeserializer keyDeser = findKeyDeserializerFromAnnotation(ctxt, mutator);",
      "right" : "KeyDeserializer keyDeser = findKeyDeserializerFromAnnotation(ctxt, mutator);",
      "info" : "VariableDeclarationStatement[35091-35167]:VariableDeclarationStatement[35121-35197]"
    }, {
      "left" : "if (keyDeser == null)",
      "right" : "if (keyDeser == null)",
      "info" : "IfStatement[35176-35259]:IfStatement[35206-35289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35198-35259]:Block[35228-35289]"
    }, {
      "left" : "keyDeser = keyType.getValueHandler();",
      "right" : "keyDeser = keyType.getValueHandler();",
      "info" : "ExpressionStatement[35212-35249]:ExpressionStatement[35242-35279]"
    }, {
      "left" : "if (keyDeser == null)",
      "right" : "if (keyDeser == null)",
      "info" : "IfStatement[35268-35582]:IfStatement[35298-35612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35290-35365]:Block[35320-35395]"
    }, {
      "left" : "keyDeser = ctxt.findKeyDeserializer(keyType, prop);",
      "right" : "keyDeser = ctxt.findKeyDeserializer(keyType, prop);",
      "info" : "ExpressionStatement[35304-35355]:ExpressionStatement[35334-35385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35371-35582]:Block[35401-35612]"
    }, {
      "left" : "if (keyDeser instanceof ContextualKeyDeserializer)",
      "right" : "if (keyDeser instanceof ContextualKeyDeserializer)",
      "info" : "IfStatement[35385-35572]:IfStatement[35415-35602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35436-35572]:Block[35466-35602]"
    }, {
      "left" : "keyDeser = ((ContextualKeyDeserializer) keyDeser)\n                        .createContextual(ctxt, prop);",
      "right" : "keyDeser = ((ContextualKeyDeserializer) keyDeser)\n                        .createContextual(ctxt, prop);",
      "info" : "ExpressionStatement[35454-35558]:ExpressionStatement[35484-35588]"
    }, {
      "left" : "JsonDeserializer<Object> deser = findContentDeserializerFromAnnotation(ctxt, mutator);",
      "right" : "JsonDeserializer<Object> deser = findContentDeserializerFromAnnotation(ctxt, mutator);",
      "info" : "VariableDeclarationStatement[35591-35677]:VariableDeclarationStatement[35621-35707]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[35686-35765]:IfStatement[35716-35795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35705-35765]:Block[35735-35795]"
    }, {
      "left" : "deser = valueType.getValueHandler();",
      "right" : "deser = valueType.getValueHandler();",
      "info" : "ExpressionStatement[35719-35755]:ExpressionStatement[35749-35785]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[35774-36015]:IfStatement[35804-36045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35793-36015]:Block[35823-36045]"
    }, {
      "left" : "deser = (JsonDeserializer<Object>) ctxt.handlePrimaryContextualization(deser, prop, valueType);",
      "right" : "deser = (JsonDeserializer<Object>) ctxt.handlePrimaryContextualization(deser, prop, valueType);",
      "info" : "ExpressionStatement[35910-36005]:ExpressionStatement[35940-36035]"
    }, {
      "left" : "TypeDeserializer typeDeser = valueType.getTypeHandler();",
      "right" : "TypeDeserializer typeDeser = valueType.getTypeHandler();",
      "info" : "VariableDeclarationStatement[36024-36080]:VariableDeclarationStatement[36054-36110]"
    }, {
      "left" : "return new SettableAnyProperty(prop, mutator, valueType,\n                keyDeser, deser, typeDeser);",
      "right" : "return new SettableAnyProperty(prop, mutator, valueType,\n                keyDeser, deser, typeDeser);",
      "info" : "ReturnStatement[36089-36190]:ReturnStatement[36119-36220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36691-38684]:Block[36721-38714]"
    }, {
      "left" : "AnnotatedMember mutator = propDef.getNonConstructorMutator();",
      "right" : "AnnotatedMember mutator = propDef.getNonConstructorMutator();",
      "info" : "VariableDeclarationStatement[36763-36824]:VariableDeclarationStatement[36793-36854]"
    }, {
      "left" : "if (mutator == null)",
      "right" : "if (mutator == null)",
      "info" : "IfStatement[37042-37179]:IfStatement[37072-37209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37063-37179]:Block[37093-37209]"
    }, {
      "left" : "ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"No non-constructor mutator available\");",
      "right" : "ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"No non-constructor mutator available\");",
      "info" : "ExpressionStatement[37077-37169]:ExpressionStatement[37107-37199]"
    }, {
      "left" : "JavaType type = resolveMemberAndTypeAnnotations(ctxt, mutator, propType0);",
      "right" : "JavaType type = resolveMemberAndTypeAnnotations(ctxt, mutator, propType0);",
      "info" : "VariableDeclarationStatement[37188-37262]:VariableDeclarationStatement[37218-37292]"
    }, {
      "left" : "TypeDeserializer typeDeser = type.getTypeHandler();",
      "right" : "TypeDeserializer typeDeser = type.getTypeHandler();",
      "info" : "VariableDeclarationStatement[37352-37403]:VariableDeclarationStatement[37382-37433]"
    }, {
      "left" : "SettableBeanProperty prop;",
      "right" : "SettableBeanProperty prop;",
      "info" : "VariableDeclarationStatement[37412-37438]:VariableDeclarationStatement[37442-37468]"
    }, {
      "left" : "if (mutator instanceof AnnotatedMethod)",
      "right" : "if (mutator instanceof AnnotatedMethod)",
      "info" : "IfStatement[37447-37897]:IfStatement[37477-37927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37487-37642]:Block[37517-37672]"
    }, {
      "left" : "prop = new MethodProperty(propDef, type, typeDeser,\n                    beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);",
      "right" : "prop = new MethodProperty(propDef, type, typeDeser,\n                    beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);",
      "info" : "ExpressionStatement[37501-37632]:ExpressionStatement[37531-37662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37648-37897]:Block[37678-37927]"
    }, {
      "left" : "prop = new FieldProperty(propDef, type, typeDeser,\n                    beanDesc.getClassAnnotations(), (AnnotatedField) mutator);",
      "right" : "prop = new FieldProperty(propDef, type, typeDeser,\n                    beanDesc.getClassAnnotations(), (AnnotatedField) mutator);",
      "info" : "ExpressionStatement[37758-37887]:ExpressionStatement[37788-37917]"
    }, {
      "left" : "JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, mutator);",
      "right" : "JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, mutator);",
      "info" : "VariableDeclarationStatement[37906-37980]:VariableDeclarationStatement[37936-38010]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[37989-38063]:IfStatement[38019-38093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38008-38063]:Block[38038-38093]"
    }, {
      "left" : "deser = type.getValueHandler();",
      "right" : "deser = type.getValueHandler();",
      "info" : "ExpressionStatement[38022-38053]:ExpressionStatement[38052-38083]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[38072-38232]:IfStatement[38102-38262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38091-38232]:Block[38121-38262]"
    }, {
      "left" : "deser = ctxt.handlePrimaryContextualization(deser, prop, type);",
      "right" : "deser = ctxt.handlePrimaryContextualization(deser, prop, type);",
      "info" : "ExpressionStatement[38105-38168]:ExpressionStatement[38135-38198]"
    }, {
      "left" : "prop = prop.withValueDeserializer(deser);",
      "right" : "prop = prop.withValueDeserializer(deser);",
      "info" : "ExpressionStatement[38181-38222]:ExpressionStatement[38211-38252]"
    }, {
      "left" : "AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();",
      "right" : "AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();",
      "info" : "VariableDeclarationStatement[38303-38378]:VariableDeclarationStatement[38333-38408]"
    }, {
      "left" : "if (ref != null && ref.isManagedReference())",
      "right" : "if (ref != null && ref.isManagedReference())",
      "info" : "IfStatement[38387-38500]:IfStatement[38417-38530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38432-38500]:Block[38462-38530]"
    }, {
      "left" : "prop.setManagedReferenceName(ref.getName());",
      "right" : "prop.setManagedReferenceName(ref.getName());",
      "info" : "ExpressionStatement[38446-38490]:ExpressionStatement[38476-38520]"
    }, {
      "left" : "ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();",
      "right" : "ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();",
      "info" : "VariableDeclarationStatement[38509-38564]:VariableDeclarationStatement[38539-38594]"
    }, {
      "left" : "if (objectIdInfo != null)",
      "right" : "if (objectIdInfo != null)",
      "info" : "IfStatement[38573-38657]:IfStatement[38603-38687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38598-38657]:Block[38628-38687]"
    }, {
      "left" : "prop.setObjectIdInfo(objectIdInfo);",
      "right" : "prop.setObjectIdInfo(objectIdInfo);",
      "info" : "ExpressionStatement[38612-38647]:ExpressionStatement[38642-38677]"
    }, {
      "left" : "return prop;",
      "right" : "return prop;",
      "info" : "ReturnStatement[38666-38678]:ReturnStatement[38696-38708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39007-39720]:Block[39037-39750]"
    }, {
      "left" : "final AnnotatedMethod getter = propDef.getGetter();",
      "right" : "final AnnotatedMethod getter = propDef.getGetter();",
      "info" : "VariableDeclarationStatement[39017-39068]:VariableDeclarationStatement[39047-39098]"
    }, {
      "left" : "JavaType type = resolveMemberAndTypeAnnotations(ctxt, getter, getter.getType());",
      "right" : "JavaType type = resolveMemberAndTypeAnnotations(ctxt, getter, getter.getType());",
      "info" : "VariableDeclarationStatement[39077-39157]:VariableDeclarationStatement[39107-39187]"
    }, {
      "left" : "TypeDeserializer typeDeser = type.getTypeHandler();",
      "right" : "TypeDeserializer typeDeser = type.getTypeHandler();",
      "info" : "VariableDeclarationStatement[39166-39217]:VariableDeclarationStatement[39196-39247]"
    }, {
      "left" : "SettableBeanProperty prop = new SetterlessProperty(propDef, type, typeDeser,\n                beanDesc.getClassAnnotations(), getter);",
      "right" : "SettableBeanProperty prop = new SetterlessProperty(propDef, type, typeDeser,\n                beanDesc.getClassAnnotations(), getter);",
      "info" : "VariableDeclarationStatement[39226-39359]:VariableDeclarationStatement[39256-39389]"
    }, {
      "left" : "JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, getter);",
      "right" : "JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, getter);",
      "info" : "VariableDeclarationStatement[39368-39441]:VariableDeclarationStatement[39398-39471]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[39450-39524]:IfStatement[39480-39554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39469-39524]:Block[39499-39554]"
    }, {
      "left" : "deser = type.getValueHandler();",
      "right" : "deser = type.getValueHandler();",
      "info" : "ExpressionStatement[39483-39514]:ExpressionStatement[39513-39544]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[39533-39693]:IfStatement[39563-39723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39552-39693]:Block[39582-39723]"
    }, {
      "left" : "deser = ctxt.handlePrimaryContextualization(deser, prop, type);",
      "right" : "deser = ctxt.handlePrimaryContextualization(deser, prop, type);",
      "info" : "ExpressionStatement[39566-39629]:ExpressionStatement[39596-39659]"
    }, {
      "left" : "prop = prop.withValueDeserializer(deser);",
      "right" : "prop = prop.withValueDeserializer(deser);",
      "info" : "ExpressionStatement[39642-39683]:ExpressionStatement[39672-39713]"
    }, {
      "left" : "return prop;",
      "right" : "return prop;",
      "info" : "ReturnStatement[39702-39714]:ReturnStatement[39732-39744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40311-41095]:Block[40341-41125]"
    }, {
      "left" : "String typeStr = ClassUtil.canBeABeanType(type);",
      "right" : "String typeStr = ClassUtil.canBeABeanType(type);",
      "info" : "VariableDeclarationStatement[40321-40369]:VariableDeclarationStatement[40351-40399]"
    }, {
      "left" : "if (typeStr != null)",
      "right" : "if (typeStr != null)",
      "info" : "IfStatement[40378-40537]:IfStatement[40408-40567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40399-40537]:Block[40429-40567]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Cannot deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\");",
      "right" : "throw new IllegalArgumentException(\"Cannot deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\");",
      "info" : "ThrowStatement[40413-40527]:ThrowStatement[40443-40557]"
    }, {
      "left" : "if (ClassUtil.isProxyType(type))",
      "right" : "if (ClassUtil.isProxyType(type))",
      "info" : "IfStatement[40546-40701]:IfStatement[40576-40731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40579-40701]:Block[40609-40731]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Cannot deserialize Proxy class \"+type.getName()+\" as a Bean\");",
      "right" : "throw new IllegalArgumentException(\"Cannot deserialize Proxy class \"+type.getName()+\" as a Bean\");",
      "info" : "ThrowStatement[40593-40691]:ThrowStatement[40623-40721]"
    }, {
      "left" : "typeStr = ClassUtil.isLocalType(type, true);",
      "right" : "typeStr = ClassUtil.isLocalType(type, true);",
      "info" : "ExpressionStatement[40856-40900]:ExpressionStatement[40886-40930]"
    }, {
      "left" : "if (typeStr != null)",
      "right" : "if (typeStr != null)",
      "info" : "IfStatement[40909-41068]:IfStatement[40939-41098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40930-41068]:Block[40960-41098]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Cannot deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\");",
      "right" : "throw new IllegalArgumentException(\"Cannot deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\");",
      "info" : "ThrowStatement[40944-41058]:ThrowStatement[40974-41088]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[41077-41089]:ReturnStatement[41107-41119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41424-42364]:Block[41454-42394]"
    }, {
      "left" : "Boolean status = ignoredTypes.get(type);",
      "right" : "Boolean status = ignoredTypes.get(type);",
      "info" : "VariableDeclarationStatement[41434-41474]:VariableDeclarationStatement[41464-41504]"
    }, {
      "left" : "if (status != null)",
      "right" : "if (status != null)",
      "info" : "IfStatement[41483-41556]:IfStatement[41513-41586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41503-41556]:Block[41533-41586]"
    }, {
      "left" : "return status.booleanValue();",
      "right" : "return status.booleanValue();",
      "info" : "ReturnStatement[41517-41546]:ReturnStatement[41547-41576]"
    }, {
      "left" : "if ((type == String.class) || type.isPrimitive())",
      "right" : "if ((type == String.class) || type.isPrimitive())",
      "info" : "IfStatement[41635-42280]:IfStatement[41665-42310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41685-41732]:Block[41715-41762]"
    }, {
      "left" : "status = Boolean.FALSE;",
      "right" : "status = Boolean.FALSE;",
      "info" : "ExpressionStatement[41699-41722]:ExpressionStatement[41729-41752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41738-42280]:Block[41768-42310]"
    }, {
      "left" : "status = config.getConfigOverride(type).getIsIgnoredType();",
      "right" : "status = config.getConfigOverride(type).getIsIgnoredType();",
      "info" : "ExpressionStatement[41824-41883]:ExpressionStatement[41854-41913]"
    }, {
      "left" : "if (status == null)",
      "right" : "if (status == null)",
      "info" : "IfStatement[41896-42270]:IfStatement[41926-42300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41916-42270]:Block[41946-42300]"
    }, {
      "left" : "BeanDescription desc = config.introspectClassAnnotations(type);",
      "right" : "BeanDescription desc = config.introspectClassAnnotations(type);",
      "info" : "VariableDeclarationStatement[41934-41997]:VariableDeclarationStatement[41964-42027]"
    }, {
      "left" : "status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());",
      "right" : "status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());",
      "info" : "ExpressionStatement[42014-42095]:ExpressionStatement[42044-42125]"
    }, {
      "left" : "if (status == null)",
      "right" : "if (status == null)",
      "info" : "IfStatement[42173-42256]:IfStatement[42203-42286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42193-42256]:Block[42223-42286]"
    }, {
      "left" : "status = Boolean.FALSE;",
      "right" : "status = Boolean.FALSE;",
      "info" : "ExpressionStatement[42215-42238]:ExpressionStatement[42245-42268]"
    }, {
      "left" : "ignoredTypes.put(type, status);",
      "right" : "ignoredTypes.put(type, status);",
      "info" : "ExpressionStatement[42289-42320]:ExpressionStatement[42319-42350]"
    }, {
      "left" : "return status.booleanValue();",
      "right" : "return status.booleanValue();",
      "info" : "ReturnStatement[42329-42358]:ReturnStatement[42359-42388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42561-42643]:Block[42591-42673]"
    }, {
      "left" : "SubTypeValidator.instance().validateSubType(ctxt, type, beanDesc);",
      "right" : "SubTypeValidator.instance().validateSubType(ctxt, type, beanDesc);",
      "info" : "ExpressionStatement[42571-42637]:ExpressionStatement[42601-42667]"
    } ]
  },
  "interFileMappings" : { }
}