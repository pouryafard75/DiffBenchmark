{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "TypeDeclaration[1610-26776]:TypeDeclaration[1610-26892]"
    }, {
      "left" : "private static final int SMALL_BUFFER_SIZE = 256;",
      "right" : "private static final int SMALL_BUFFER_SIZE = 256;",
      "info" : "FieldDeclaration[1917-1966]:FieldDeclaration[1917-1966]"
    }, {
      "left" : "private final byte[] SMALL_BUF = new byte[SMALL_BUFFER_SIZE];",
      "right" : "private final byte[] SMALL_BUF = new byte[SMALL_BUFFER_SIZE];",
      "info" : "FieldDeclaration[1972-2033]:FieldDeclaration[1972-2033]"
    }, {
      "left" : "private final int recordSize;",
      "right" : "private final int recordSize;",
      "info" : "FieldDeclaration[2039-2103]:FieldDeclaration[2039-2103]"
    }, {
      "left" : "private final int blockSize;",
      "right" : "private final int blockSize;",
      "info" : "FieldDeclaration[2109-2168]:FieldDeclaration[2109-2168]"
    }, {
      "left" : "private boolean hasHitEOF;",
      "right" : "private boolean hasHitEOF;",
      "info" : "FieldDeclaration[2174-2236]:FieldDeclaration[2174-2236]"
    }, {
      "left" : "private long entrySize;",
      "right" : "private long entrySize;",
      "info" : "FieldDeclaration[2242-2302]:FieldDeclaration[2242-2302]"
    }, {
      "left" : "private long entryOffset;",
      "right" : "private long entryOffset;",
      "info" : "FieldDeclaration[2308-2384]:FieldDeclaration[2308-2384]"
    }, {
      "left" : "private final InputStream is;",
      "right" : "private final InputStream is;",
      "info" : "FieldDeclaration[2390-2459]:FieldDeclaration[2390-2459]"
    }, {
      "left" : "private TarArchiveEntry currEntry;",
      "right" : "private TarArchiveEntry currEntry;",
      "info" : "FieldDeclaration[2465-2548]:FieldDeclaration[2465-2548]"
    }, {
      "left" : "private final ZipEncoding zipEncoding;",
      "right" : "private final ZipEncoding zipEncoding;",
      "info" : "FieldDeclaration[2554-2628]:FieldDeclaration[2554-2628]"
    }, {
      "left" : "final String encoding;",
      "right" : "final String encoding;",
      "info" : "FieldDeclaration[2680-2702]:FieldDeclaration[2680-2702]"
    }, {
      "left" : "private Map<String, String> globalPaxHeaders = new HashMap<String, String>();",
      "right" : "private Map<String, String> globalPaxHeaders = new HashMap<String, String>();",
      "info" : "FieldDeclaration[2737-2814]:FieldDeclaration[2737-2814]"
    }, {
      "left" : "public TarArchiveInputStream(final InputStream is)",
      "right" : "public TarArchiveInputStream(final InputStream is)",
      "info" : "MethodDeclaration[2820-3052]:MethodDeclaration[2820-3052]"
    }, {
      "left" : "public TarArchiveInputStream(final InputStream is, final String encoding)",
      "right" : "public TarArchiveInputStream(final InputStream is, final String encoding)",
      "info" : "MethodDeclaration[3058-3420]:MethodDeclaration[3058-3420]"
    }, {
      "left" : "public TarArchiveInputStream(final InputStream is, final int blockSize)",
      "right" : "public TarArchiveInputStream(final InputStream is, final int blockSize)",
      "info" : "MethodDeclaration[3426-3706]:MethodDeclaration[3426-3706]"
    }, {
      "left" : "public TarArchiveInputStream(final InputStream is, final int blockSize,\n                                 final String encoding)",
      "right" : "public TarArchiveInputStream(final InputStream is, final int blockSize,\n                                 final String encoding)",
      "info" : "MethodDeclaration[3712-4142]:MethodDeclaration[3712-4142]"
    }, {
      "left" : "public TarArchiveInputStream(final InputStream is, final int blockSize, final int recordSize)",
      "right" : "public TarArchiveInputStream(final InputStream is, final int blockSize, final int recordSize)",
      "info" : "MethodDeclaration[4148-4492]:MethodDeclaration[4148-4492]"
    }, {
      "left" : "public TarArchiveInputStream(final InputStream is, final int blockSize, final int recordSize,\n                                 final String encoding)",
      "right" : "public TarArchiveInputStream(final InputStream is, final int blockSize, final int recordSize,\n                                 final String encoding)",
      "info" : "MethodDeclaration[4498-5162]:MethodDeclaration[4498-5162]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[5168-5365]:MethodDeclaration[5168-5365]"
    }, {
      "left" : "public int getRecordSize()",
      "right" : "public int getRecordSize()",
      "info" : "MethodDeclaration[5371-5560]:MethodDeclaration[5371-5560]"
    }, {
      "left" : "public int available() throws IOException",
      "right" : "public int available() throws IOException",
      "info" : "MethodDeclaration[5566-6438]:MethodDeclaration[5566-6438]"
    }, {
      "left" : "public long skip(final long n) throws IOException",
      "right" : "public long skip(final long n) throws IOException",
      "info" : "MethodDeclaration[6449-7554]:MethodDeclaration[6449-7554]"
    }, {
      "left" : "public boolean markSupported()",
      "right" : "public boolean markSupported()",
      "info" : "MethodDeclaration[7560-7745]:MethodDeclaration[7560-7745]"
    }, {
      "left" : "public void mark(final int markLimit)",
      "right" : "public void mark(final int markLimit)",
      "info" : "MethodDeclaration[7751-7940]:MethodDeclaration[7751-7940]"
    }, {
      "left" : "public synchronized void reset()",
      "right" : "public synchronized void reset()",
      "info" : "MethodDeclaration[7946-8080]:MethodDeclaration[7946-8080]"
    }, {
      "left" : "public TarArchiveEntry getNextTarEntry() throws IOException",
      "right" : "public TarArchiveEntry getNextTarEntry() throws IOException",
      "info" : "MethodDeclaration[8086-11034]:MethodDeclaration[8086-11034]"
    }, {
      "left" : "private void skipRecordPadding() throws IOException",
      "right" : "private void skipRecordPadding() throws IOException",
      "info" : "MethodDeclaration[11044-11606]:MethodDeclaration[11044-11606]"
    }, {
      "left" : "protected byte[] getLongNameData() throws IOException",
      "right" : "protected byte[] getLongNameData() throws IOException",
      "info" : "MethodDeclaration[11612-12757]:MethodDeclaration[11612-12757]"
    }, {
      "left" : "private byte[] getRecord() throws IOException",
      "right" : "private byte[] getRecord() throws IOException",
      "info" : "MethodDeclaration[12763-13656]:MethodDeclaration[12763-13656]"
    }, {
      "left" : "protected boolean isEOFRecord(final byte[] record)",
      "right" : "protected boolean isEOFRecord(final byte[] record)",
      "info" : "MethodDeclaration[13662-14077]:MethodDeclaration[13662-14077]"
    }, {
      "left" : "protected byte[] readRecord() throws IOException",
      "right" : "protected byte[] readRecord() throws IOException",
      "info" : "MethodDeclaration[14087-14559]:MethodDeclaration[14087-14559]"
    }, {
      "left" : "private void readGlobalPaxHeaders() throws IOException",
      "right" : "private void readGlobalPaxHeaders() throws IOException",
      "info" : "MethodDeclaration[14565-14730]:MethodDeclaration[14565-14730]"
    }, {
      "left" : "private void paxHeaders() throws IOExceptio",
      "right" : "private void paxHeaders() throws IOExceptio",
      "info" : "MethodDeclaration[14736-14955]:MethodDeclaration[14736-14955]"
    }, {
      "left" : "Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException",
      "right" : "Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException",
      "info" : "MethodDeclaration[15160-17495]:MethodDeclaration[15160-17611]"
    }, {
      "left" : "private void applyPaxHeadersToCurrentEntry(final Map<String, String> headers)",
      "right" : "private void applyPaxHeadersToCurrentEntry(final Map<String, String> headers)",
      "info" : "MethodDeclaration[17501-19820]:MethodDeclaration[17617-19936]"
    }, {
      "left" : "private void readOldGNUSparse() throws IOException",
      "right" : "private void readOldGNUSparse() throws IOException",
      "info" : "MethodDeclaration[19826-20824]:MethodDeclaration[19942-20940]"
    }, {
      "left" : "private boolean isDirectory()",
      "right" : "private boolean isDirectory()",
      "info" : "MethodDeclaration[20830-20928]:MethodDeclaration[20946-21044]"
    }, {
      "left" : "public ArchiveEntry getNextEntry() throws IOException",
      "right" : "public ArchiveEntry getNextEntry() throws IOException",
      "info" : "MethodDeclaration[20934-21274]:MethodDeclaration[21050-21390]"
    }, {
      "left" : "private void tryToConsumeSecondEOFRecord() throws IOException",
      "right" : "private void tryToConsumeSecondEOFRecord() throws IOException",
      "info" : "MethodDeclaration[21284-22208]:MethodDeclaration[21400-22324]"
    }, {
      "left" : "public int read(final byte[] buf, final int offset, int numToRead) throws IOException",
      "right" : "public int read(final byte[] buf, final int offset, int numToRead) throws IOException",
      "info" : "MethodDeclaration[22214-23499]:MethodDeclaration[22330-23615]"
    }, {
      "left" : "public boolean canReadEntryData(final ArchiveEntry ae)",
      "right" : "public boolean canReadEntryData(final ArchiveEntry ae)",
      "info" : "MethodDeclaration[23505-23906]:MethodDeclaration[23621-24022]"
    }, {
      "left" : "public TarArchiveEntry getCurrentEntry()",
      "right" : "public TarArchiveEntry getCurrentEntry()",
      "info" : "MethodDeclaration[23912-24129]:MethodDeclaration[24028-24245]"
    }, {
      "left" : "protected final void setCurrentEntry(final TarArchiveEntry e)",
      "right" : "protected final void setCurrentEntry(final TarArchiveEntry e)",
      "info" : "MethodDeclaration[24135-24227]:MethodDeclaration[24251-24343]"
    }, {
      "left" : "protected final boolean isAtEOF()",
      "right" : "protected final boolean isAtEOF()",
      "info" : "MethodDeclaration[24233-24300]:MethodDeclaration[24349-24416]"
    }, {
      "left" : "protected final void setAtEOF(final boolean b)",
      "right" : "protected final void setAtEOF(final boolean b)",
      "info" : "MethodDeclaration[24306-24383]:MethodDeclaration[24422-24499]"
    }, {
      "left" : "private void consumeRemainderOfLastBlock() throws IOException",
      "right" : "private void consumeRemainderOfLastBlock() throws IOException",
      "info" : "MethodDeclaration[24389-24911]:MethodDeclaration[24505-25027]"
    }, {
      "left" : "public static boolean matches(final byte[] signature, final int length)",
      "right" : "public static boolean matches(final byte[] signature, final int length)",
      "info" : "MethodDeclaration[24917-26773]:MethodDeclaration[25033-26889]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1848-1854]:Modifier[1848-1854]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1855-1860]:TYPE_DECLARATION_KIND[1855-1860]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[1861-1882]:SimpleName[1861-1882]"
    }, {
      "left" : "ArchiveInputStream",
      "right" : "ArchiveInputStream",
      "info" : "SimpleType[1891-1909]:SimpleType[1891-1909]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2916-2922]:Modifier[2916-2922]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[2923-2944]:SimpleName[2923-2944]"
    }, {
      "left" : "final InputStream is",
      "right" : "final InputStream is",
      "info" : "SingleVariableDeclaration[2945-2965]:SingleVariableDeclaration[2945-2965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2967-3052]:Block[2967-3052]"
    }, {
      "left" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);",
      "right" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[2977-3046]:ConstructorInvocation[2977-3046]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3238-3244]:Modifier[3238-3244]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[3245-3266]:SimpleName[3245-3266]"
    }, {
      "left" : "final InputStream is",
      "right" : "final InputStream is",
      "info" : "SingleVariableDeclaration[3267-3287]:SingleVariableDeclaration[3267-3287]"
    }, {
      "left" : "final String encoding",
      "right" : "final String encoding",
      "info" : "SingleVariableDeclaration[3289-3310]:SingleVariableDeclaration[3289-3310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3312-3420]:Block[3312-3420]"
    }, {
      "left" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,\n             encoding);",
      "right" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,\n             encoding);",
      "info" : "ConstructorInvocation[3322-3414]:ConstructorInvocation[3322-3414]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3568-3574]:Modifier[3568-3574]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[3575-3596]:SimpleName[3575-3596]"
    }, {
      "left" : "final InputStream is",
      "right" : "final InputStream is",
      "info" : "SingleVariableDeclaration[3597-3617]:SingleVariableDeclaration[3597-3617]"
    }, {
      "left" : "final int blockSize",
      "right" : "final int blockSize",
      "info" : "SingleVariableDeclaration[3619-3638]:SingleVariableDeclaration[3619-3638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3640-3706]:Block[3640-3706]"
    }, {
      "left" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE);",
      "right" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[3650-3700]:ConstructorInvocation[3650-3700]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3938-3944]:Modifier[3938-3944]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[3945-3966]:SimpleName[3945-3966]"
    }, {
      "left" : "final InputStream is",
      "right" : "final InputStream is",
      "info" : "SingleVariableDeclaration[3967-3987]:SingleVariableDeclaration[3967-3987]"
    }, {
      "left" : "final int blockSize",
      "right" : "final int blockSize",
      "info" : "SingleVariableDeclaration[3989-4008]:SingleVariableDeclaration[3989-4008]"
    }, {
      "left" : "final String encoding",
      "right" : "final String encoding",
      "info" : "SingleVariableDeclaration[4043-4064]:SingleVariableDeclaration[4043-4064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4066-4142]:Block[4066-4142]"
    }, {
      "left" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);",
      "right" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);",
      "info" : "ConstructorInvocation[4076-4136]:ConstructorInvocation[4076-4136]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4338-4344]:Modifier[4338-4344]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[4345-4366]:SimpleName[4345-4366]"
    }, {
      "left" : "final InputStream is",
      "right" : "final InputStream is",
      "info" : "SingleVariableDeclaration[4367-4387]:SingleVariableDeclaration[4367-4387]"
    }, {
      "left" : "final int blockSize",
      "right" : "final int blockSize",
      "info" : "SingleVariableDeclaration[4389-4408]:SingleVariableDeclaration[4389-4408]"
    }, {
      "left" : "final int recordSize",
      "right" : "final int recordSize",
      "info" : "SingleVariableDeclaration[4410-4430]:SingleVariableDeclaration[4410-4430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4432-4492]:Block[4432-4492]"
    }, {
      "left" : "this(is, blockSize, recordSize, null);",
      "right" : "this(is, blockSize, recordSize, null);",
      "info" : "ConstructorInvocation[4442-4480]:ConstructorInvocation[4442-4480]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4772-4778]:Modifier[4772-4778]"
    }, {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "SimpleName[4779-4800]:SimpleName[4779-4800]"
    }, {
      "left" : "final InputStream is",
      "right" : "final InputStream is",
      "info" : "SingleVariableDeclaration[4801-4821]:SingleVariableDeclaration[4801-4821]"
    }, {
      "left" : "final int blockSize",
      "right" : "final int blockSize",
      "info" : "SingleVariableDeclaration[4823-4842]:SingleVariableDeclaration[4823-4842]"
    }, {
      "left" : "final int recordSize",
      "right" : "final int recordSize",
      "info" : "SingleVariableDeclaration[4844-4864]:SingleVariableDeclaration[4844-4864]"
    }, {
      "left" : "final String encoding",
      "right" : "final String encoding",
      "info" : "SingleVariableDeclaration[4899-4920]:SingleVariableDeclaration[4899-4920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4922-5162]:Block[4922-5162]"
    }, {
      "left" : "this.is = is;",
      "right" : "this.is = is;",
      "info" : "ExpressionStatement[4932-4945]:ExpressionStatement[4932-4945]"
    }, {
      "left" : "this.hasHitEOF = false;",
      "right" : "this.hasHitEOF = false;",
      "info" : "ExpressionStatement[4954-4977]:ExpressionStatement[4954-4977]"
    }, {
      "left" : "this.encoding = encoding;",
      "right" : "this.encoding = encoding;",
      "info" : "ExpressionStatement[4986-5011]:ExpressionStatement[4986-5011]"
    }, {
      "left" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "right" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "info" : "ExpressionStatement[5020-5082]:ExpressionStatement[5020-5082]"
    }, {
      "left" : "this.recordSize = recordSize;",
      "right" : "this.recordSize = recordSize;",
      "info" : "ExpressionStatement[5091-5120]:ExpressionStatement[5091-5120]"
    }, {
      "left" : "this.blockSize = blockSize;",
      "right" : "this.blockSize = blockSize;",
      "info" : "ExpressionStatement[5129-5156]:ExpressionStatement[5129-5156]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5285-5294]:MarkerAnnotation[5285-5294]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5299-5305]:Modifier[5299-5305]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5306-5310]:PrimitiveType[5306-5310]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[5311-5316]:SimpleName[5311-5316]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5326-5337]:SimpleType[5326-5337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5338-5365]:Block[5338-5365]"
    }, {
      "left" : "is.close();",
      "right" : "is.close();",
      "info" : "ExpressionStatement[5348-5359]:ExpressionStatement[5348-5359]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5499-5505]:Modifier[5499-5505]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5506-5509]:PrimitiveType[5506-5509]"
    }, {
      "left" : "getRecordSize",
      "right" : "getRecordSize",
      "info" : "SimpleName[5510-5523]:SimpleName[5510-5523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5526-5560]:Block[5526-5560]"
    }, {
      "left" : "return recordSize;",
      "right" : "return recordSize;",
      "info" : "ReturnStatement[5536-5554]:ReturnStatement[5536-5554]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6159-6168]:MarkerAnnotation[6159-6168]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6173-6179]:Modifier[6173-6179]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[6180-6183]:PrimitiveType[6180-6183]"
    }, {
      "left" : "available",
      "right" : "available",
      "info" : "SimpleName[6184-6193]:SimpleName[6184-6193]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6203-6214]:SimpleType[6203-6214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6215-6438]:Block[6215-6438]"
    }, {
      "left" : "if (isDirectory())",
      "right" : "if (isDirectory())",
      "info" : "IfStatement[6225-6277]:IfStatement[6225-6277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6244-6277]:Block[6244-6277]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[6258-6267]:ReturnStatement[6258-6267]"
    }, {
      "left" : "if (entrySize - entryOffset > Integer.MAX_VALUE)",
      "right" : "if (entrySize - entryOffset > Integer.MAX_VALUE)",
      "info" : "IfStatement[6286-6384]:IfStatement[6286-6384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6335-6384]:Block[6335-6384]"
    }, {
      "left" : "return Integer.MAX_VALUE;",
      "right" : "return Integer.MAX_VALUE;",
      "info" : "ReturnStatement[6349-6374]:ReturnStatement[6349-6374]"
    }, {
      "left" : "return (int) (entrySize - entryOffset);",
      "right" : "return (int) (entrySize - entryOffset);",
      "info" : "ReturnStatement[6393-6432]:ReturnStatement[6393-6432]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7212-7221]:MarkerAnnotation[7212-7221]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7226-7232]:Modifier[7226-7232]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[7233-7237]:PrimitiveType[7233-7237]"
    }, {
      "left" : "skip",
      "right" : "skip",
      "info" : "SimpleName[7238-7242]:SimpleName[7238-7242]"
    }, {
      "left" : "final long n",
      "right" : "final long n",
      "info" : "SingleVariableDeclaration[7243-7255]:SingleVariableDeclaration[7243-7255]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7264-7275]:SimpleType[7264-7275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7276-7554]:Block[7276-7554]"
    }, {
      "left" : "if (n <= 0 || isDirectory())",
      "right" : "if (n <= 0 || isDirectory())",
      "info" : "IfStatement[7286-7348]:IfStatement[7286-7348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7315-7348]:Block[7315-7348]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[7329-7338]:ReturnStatement[7329-7338]"
    }, {
      "left" : "final long available = entrySize - entryOffset;",
      "right" : "final long available = entrySize - entryOffset;",
      "info" : "VariableDeclarationStatement[7358-7405]:VariableDeclarationStatement[7358-7405]"
    }, {
      "left" : "final long skipped = is.skip(Math.min(n, available));",
      "right" : "final long skipped = is.skip(Math.min(n, available));",
      "info" : "VariableDeclarationStatement[7414-7467]:VariableDeclarationStatement[7414-7467]"
    }, {
      "left" : "count(skipped);",
      "right" : "count(skipped);",
      "info" : "ExpressionStatement[7477-7492]:ExpressionStatement[7477-7492]"
    }, {
      "left" : "entryOffset += skipped;",
      "right" : "entryOffset += skipped;",
      "info" : "ExpressionStatement[7501-7524]:ExpressionStatement[7501-7524]"
    }, {
      "left" : "return skipped;",
      "right" : "return skipped;",
      "info" : "ReturnStatement[7533-7548]:ReturnStatement[7533-7548]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7671-7680]:MarkerAnnotation[7671-7680]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7685-7691]:Modifier[7685-7691]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7692-7699]:PrimitiveType[7692-7699]"
    }, {
      "left" : "markSupported",
      "right" : "markSupported",
      "info" : "SimpleName[7700-7713]:SimpleName[7700-7713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7716-7745]:Block[7716-7745]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7726-7739]:ReturnStatement[7726-7739]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7881-7890]:MarkerAnnotation[7881-7890]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7895-7901]:Modifier[7895-7901]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7902-7906]:PrimitiveType[7902-7906]"
    }, {
      "left" : "mark",
      "right" : "mark",
      "info" : "SimpleName[7907-7911]:SimpleName[7907-7911]"
    }, {
      "left" : "final int markLimit",
      "right" : "final int markLimit",
      "info" : "SingleVariableDeclaration[7912-7931]:SingleVariableDeclaration[7912-7931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7933-7940]:Block[7933-7940]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8026-8035]:MarkerAnnotation[8026-8035]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8040-8046]:Modifier[8040-8046]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[8047-8059]:Modifier[8047-8059]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8060-8064]:PrimitiveType[8060-8064]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[8065-8070]:SimpleName[8065-8070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8073-8080]:Block[8073-8080]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8658-8664]:Modifier[8658-8664]"
    }, {
      "left" : "TarArchiveEntry",
      "right" : "TarArchiveEntry",
      "info" : "SimpleType[8665-8680]:SimpleType[8665-8680]"
    }, {
      "left" : "getNextTarEntry",
      "right" : "getNextTarEntry",
      "info" : "SimpleName[8681-8696]:SimpleName[8681-8696]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8706-8717]:SimpleType[8706-8717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8718-11034]:Block[8718-11034]"
    }, {
      "left" : "if (hasHitEOF)",
      "right" : "if (hasHitEOF)",
      "info" : "IfStatement[8728-8779]:IfStatement[8728-8779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8743-8779]:Block[8743-8779]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8757-8769]:ReturnStatement[8757-8769]"
    }, {
      "left" : "if (currEntry != null)",
      "right" : "if (currEntry != null)",
      "info" : "IfStatement[8789-9026]:IfStatement[8789-9026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8812-9026]:Block[8812-9026]"
    }, {
      "left" : "IOUtils.skip(this, Long.MAX_VALUE);",
      "right" : "IOUtils.skip(this, Long.MAX_VALUE);",
      "info" : "ExpressionStatement[8894-8929]:ExpressionStatement[8894-8929]"
    }, {
      "left" : "skipRecordPadding();",
      "right" : "skipRecordPadding();",
      "info" : "ExpressionStatement[8996-9016]:ExpressionStatement[8996-9016]"
    }, {
      "left" : "final byte[] headerBuf = getRecord();",
      "right" : "final byte[] headerBuf = getRecord();",
      "info" : "VariableDeclarationStatement[9036-9073]:VariableDeclarationStatement[9036-9073]"
    }, {
      "left" : "if (headerBuf == null)",
      "right" : "if (headerBuf == null)",
      "info" : "IfStatement[9083-9198]:IfStatement[9083-9198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9106-9198]:Block[9106-9198]"
    }, {
      "left" : "currEntry = null;",
      "right" : "currEntry = null;",
      "info" : "ExpressionStatement[9146-9163]:ExpressionStatement[9146-9163]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9176-9188]:ReturnStatement[9176-9188]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9208-9420]:TryStatement[9208-9420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9212-9292]:Block[9212-9292]"
    }, {
      "left" : "currEntry = new TarArchiveEntry(headerBuf, zipEncoding);",
      "right" : "currEntry = new TarArchiveEntry(headerBuf, zipEncoding);",
      "info" : "ExpressionStatement[9226-9282]:ExpressionStatement[9226-9282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9334-9420]:Block[9334-9420]"
    }, {
      "left" : "throw new IOException(\"Error detected parsing the header\", e);",
      "right" : "throw new IOException(\"Error detected parsing the header\", e);",
      "info" : "ThrowStatement[9348-9410]:ThrowStatement[9348-9410]"
    }, {
      "left" : "entryOffset = 0;",
      "right" : "entryOffset = 0;",
      "info" : "ExpressionStatement[9430-9446]:ExpressionStatement[9430-9446]"
    }, {
      "left" : "entrySize = currEntry.getSize();",
      "right" : "entrySize = currEntry.getSize();",
      "info" : "ExpressionStatement[9455-9487]:ExpressionStatement[9455-9487]"
    }, {
      "left" : "if (currEntry.isGNULongLinkEntry())",
      "right" : "if (currEntry.isGNULongLinkEntry())",
      "info" : "IfStatement[9497-9892]:IfStatement[9497-9892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9533-9892]:Block[9533-9892]"
    }, {
      "left" : "final byte[] longLinkData = getLongNameData();",
      "right" : "final byte[] longLinkData = getLongNameData();",
      "info" : "VariableDeclarationStatement[9547-9593]:VariableDeclarationStatement[9547-9593]"
    }, {
      "left" : "if (longLinkData == null)",
      "right" : "if (longLinkData == null)",
      "info" : "IfStatement[9606-9813]:IfStatement[9606-9813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9632-9813]:Block[9632-9813]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9787-9799]:ReturnStatement[9787-9799]"
    }, {
      "left" : "currEntry.setLinkName(zipEncoding.decode(longLinkData));",
      "right" : "currEntry.setLinkName(zipEncoding.decode(longLinkData));",
      "info" : "ExpressionStatement[9826-9882]:ExpressionStatement[9826-9882]"
    }, {
      "left" : "if (currEntry.isGNULongNameEntry())",
      "right" : "if (currEntry.isGNULongNameEntry())",
      "info" : "IfStatement[9902-10288]:IfStatement[9902-10288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9938-10288]:Block[9938-10288]"
    }, {
      "left" : "final byte[] longNameData = getLongNameData();",
      "right" : "final byte[] longNameData = getLongNameData();",
      "info" : "VariableDeclarationStatement[9952-9998]:VariableDeclarationStatement[9952-9998]"
    }, {
      "left" : "if (longNameData == null)",
      "right" : "if (longNameData == null)",
      "info" : "IfStatement[10011-10213]:IfStatement[10011-10213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10037-10213]:Block[10037-10213]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10187-10199]:ReturnStatement[10187-10199]"
    }, {
      "left" : "currEntry.setName(zipEncoding.decode(longNameData));",
      "right" : "currEntry.setName(zipEncoding.decode(longNameData));",
      "info" : "ExpressionStatement[10226-10278]:ExpressionStatement[10226-10278]"
    }, {
      "left" : "if (currEntry.isGlobalPaxHeader())",
      "right" : "if (currEntry.isGlobalPaxHeader())",
      "info" : "IfStatement[10298-10409]:IfStatement[10298-10409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10332-10409]:Block[10332-10409]"
    }, {
      "left" : "readGlobalPaxHeaders();",
      "right" : "readGlobalPaxHeaders();",
      "info" : "ExpressionStatement[10376-10399]:ExpressionStatement[10376-10399]"
    }, {
      "left" : "if (currEntry.isPaxHeader())",
      "right" : "if (currEntry.isPaxHeader())",
      "info" : "IfStatement[10419-10618]:IfStatement[10419-10618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10447-10507]:Block[10447-10507]"
    }, {
      "left" : "paxHeaders();",
      "right" : "paxHeaders();",
      "info" : "ExpressionStatement[10484-10497]:ExpressionStatement[10484-10497]"
    }, {
      "left" : "if (!globalPaxHeaders.isEmpty())",
      "right" : "if (!globalPaxHeaders.isEmpty())",
      "info" : "IfStatement[10513-10618]:IfStatement[10513-10618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10546-10618]:Block[10546-10618]"
    }, {
      "left" : "applyPaxHeadersToCurrentEntry(globalPaxHeaders);",
      "right" : "applyPaxHeadersToCurrentEntry(globalPaxHeaders);",
      "info" : "ExpressionStatement[10560-10608]:ExpressionStatement[10560-10608]"
    }, {
      "left" : "if (currEntry.isOldGNUSparse())",
      "right" : "if (currEntry.isOldGNUSparse())",
      "info" : "IfStatement[10628-10726]:IfStatement[10628-10726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10659-10726]:Block[10659-10726]"
    }, {
      "left" : "readOldGNUSparse();",
      "right" : "readOldGNUSparse();",
      "info" : "ExpressionStatement[10697-10716]:ExpressionStatement[10697-10716]"
    }, {
      "left" : "entrySize = currEntry.getSize();",
      "right" : "entrySize = currEntry.getSize();",
      "info" : "ExpressionStatement[10969-11001]:ExpressionStatement[10969-11001]"
    }, {
      "left" : "return currEntry;",
      "right" : "return currEntry;",
      "info" : "ReturnStatement[11011-11028]:ReturnStatement[11011-11028]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11198-11205]:Modifier[11198-11205]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11206-11210]:PrimitiveType[11206-11210]"
    }, {
      "left" : "skipRecordPadding",
      "right" : "skipRecordPadding",
      "info" : "SimpleName[11211-11228]:SimpleName[11211-11228]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11238-11249]:SimpleType[11238-11249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11250-11606]:Block[11250-11606]"
    }, {
      "left" : "if (!isDirectory() && this.entrySize > 0 && this.entrySize % this.recordSize != 0)",
      "right" : "if (!isDirectory() && this.entrySize > 0 && this.entrySize % this.recordSize != 0)",
      "info" : "IfStatement[11260-11600]:IfStatement[11260-11600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11343-11600]:Block[11343-11600]"
    }, {
      "left" : "final long numRecords = (this.entrySize / this.recordSize) + 1;",
      "right" : "final long numRecords = (this.entrySize / this.recordSize) + 1;",
      "info" : "VariableDeclarationStatement[11357-11420]:VariableDeclarationStatement[11357-11420]"
    }, {
      "left" : "final long padding = (numRecords * this.recordSize) - this.entrySize;",
      "right" : "final long padding = (numRecords * this.recordSize) - this.entrySize;",
      "info" : "VariableDeclarationStatement[11433-11502]:VariableDeclarationStatement[11433-11502]"
    }, {
      "left" : "final long skipped = IOUtils.skip(is, padding);",
      "right" : "final long skipped = IOUtils.skip(is, padding);",
      "info" : "VariableDeclarationStatement[11515-11562]:VariableDeclarationStatement[11515-11562]"
    }, {
      "left" : "count(skipped);",
      "right" : "count(skipped);",
      "info" : "ExpressionStatement[11575-11590]:ExpressionStatement[11575-11590]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[11807-11816]:Modifier[11807-11816]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[11817-11823]:ArrayType[11817-11823]"
    }, {
      "left" : "getLongNameData",
      "right" : "getLongNameData",
      "info" : "SimpleName[11824-11839]:SimpleName[11824-11839]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11849-11860]:SimpleType[11849-11860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11861-12757]:Block[11861-12757]"
    }, {
      "left" : "final ByteArrayOutputStream longName = new ByteArrayOutputStream();",
      "right" : "final ByteArrayOutputStream longName = new ByteArrayOutputStream();",
      "info" : "VariableDeclarationStatement[11899-11966]:VariableDeclarationStatement[11899-11966]"
    }, {
      "left" : "int length = 0;",
      "right" : "int length = 0;",
      "info" : "VariableDeclarationStatement[11975-11990]:VariableDeclarationStatement[11975-11990]"
    }, {
      "left" : "while ((length = read(SMALL_BUF)) >= 0)",
      "right" : "while ((length = read(SMALL_BUF)) >= 0)",
      "info" : "WhileStatement[11999-12100]:WhileStatement[11999-12100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12039-12100]:Block[12039-12100]"
    }, {
      "left" : "longName.write(SMALL_BUF, 0, length);",
      "right" : "longName.write(SMALL_BUF, 0, length);",
      "info" : "ExpressionStatement[12053-12090]:ExpressionStatement[12053-12090]"
    }, {
      "left" : "getNextEntry();",
      "right" : "getNextEntry();",
      "info" : "ExpressionStatement[12109-12124]:ExpressionStatement[12109-12124]"
    }, {
      "left" : "if (currEntry == null)",
      "right" : "if (currEntry == null)",
      "info" : "IfStatement[12133-12297]:IfStatement[12133-12297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12156-12297]:Block[12156-12297]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12275-12287]:ReturnStatement[12275-12287]"
    }, {
      "left" : "byte[] longNameData = longName.toByteArray();",
      "right" : "byte[] longNameData = longName.toByteArray();",
      "info" : "VariableDeclarationStatement[12306-12351]:VariableDeclarationStatement[12306-12351]"
    }, {
      "left" : "length = longNameData.length;",
      "right" : "length = longNameData.length;",
      "info" : "ExpressionStatement[12406-12435]:ExpressionStatement[12406-12435]"
    }, {
      "left" : "while (length > 0 && longNameData[length - 1] == 0)",
      "right" : "while (length > 0 && longNameData[length - 1] == 0)",
      "info" : "WhileStatement[12444-12529]:WhileStatement[12444-12529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12496-12529]:Block[12496-12529]"
    }, {
      "left" : "--length;",
      "right" : "--length;",
      "info" : "ExpressionStatement[12510-12519]:ExpressionStatement[12510-12519]"
    }, {
      "left" : "if (length != longNameData.length)",
      "right" : "if (length != longNameData.length)",
      "info" : "IfStatement[12538-12722]:IfStatement[12538-12722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12573-12722]:Block[12573-12722]"
    }, {
      "left" : "final byte[] l = new byte[length];",
      "right" : "final byte[] l = new byte[length];",
      "info" : "VariableDeclarationStatement[12587-12621]:VariableDeclarationStatement[12587-12621]"
    }, {
      "left" : "System.arraycopy(longNameData, 0, l, 0, length);",
      "right" : "System.arraycopy(longNameData, 0, l, 0, length);",
      "info" : "ExpressionStatement[12634-12682]:ExpressionStatement[12634-12682]"
    }, {
      "left" : "longNameData = l;",
      "right" : "longNameData = l;",
      "info" : "ExpressionStatement[12695-12712]:ExpressionStatement[12695-12712]"
    }, {
      "left" : "return longNameData;",
      "right" : "return longNameData;",
      "info" : "ReturnStatement[12731-12751]:ReturnStatement[12731-12751]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13320-13327]:Modifier[13320-13327]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[13328-13334]:ArrayType[13328-13334]"
    }, {
      "left" : "getRecord",
      "right" : "getRecord",
      "info" : "SimpleName[13335-13344]:SimpleName[13335-13344]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13354-13365]:SimpleType[13354-13365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13366-13656]:Block[13366-13656]"
    }, {
      "left" : "byte[] headerBuf = readRecord();",
      "right" : "byte[] headerBuf = readRecord();",
      "info" : "VariableDeclarationStatement[13376-13408]:VariableDeclarationStatement[13376-13408]"
    }, {
      "left" : "hasHitEOF = isEOFRecord(headerBuf);",
      "right" : "hasHitEOF = isEOFRecord(headerBuf);",
      "info" : "ExpressionStatement[13417-13452]:ExpressionStatement[13417-13452]"
    }, {
      "left" : "if (hasHitEOF && headerBuf != null)",
      "right" : "if (hasHitEOF && headerBuf != null)",
      "info" : "IfStatement[13461-13624]:IfStatement[13461-13624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13497-13624]:Block[13497-13624]"
    }, {
      "left" : "tryToConsumeSecondEOFRecord();",
      "right" : "tryToConsumeSecondEOFRecord();",
      "info" : "ExpressionStatement[13511-13541]:ExpressionStatement[13511-13541]"
    }, {
      "left" : "consumeRemainderOfLastBlock();",
      "right" : "consumeRemainderOfLastBlock();",
      "info" : "ExpressionStatement[13554-13584]:ExpressionStatement[13554-13584]"
    }, {
      "left" : "headerBuf = null;",
      "right" : "headerBuf = null;",
      "info" : "ExpressionStatement[13597-13614]:ExpressionStatement[13597-13614]"
    }, {
      "left" : "return headerBuf;",
      "right" : "return headerBuf;",
      "info" : "ReturnStatement[13633-13650]:ReturnStatement[13633-13650]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[13940-13949]:Modifier[13940-13949]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13950-13957]:PrimitiveType[13950-13957]"
    }, {
      "left" : "isEOFRecord",
      "right" : "isEOFRecord",
      "info" : "SimpleName[13958-13969]:SimpleName[13958-13969]"
    }, {
      "left" : "final byte[] record",
      "right" : "final byte[] record",
      "info" : "SingleVariableDeclaration[13970-13989]:SingleVariableDeclaration[13970-13989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13991-14077]:Block[13991-14077]"
    }, {
      "left" : "return record == null || ArchiveUtils.isArrayZero(record, recordSize);",
      "right" : "return record == null || ArchiveUtils.isArrayZero(record, recordSize);",
      "info" : "ReturnStatement[14001-14071]:ReturnStatement[14001-14071]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14270-14279]:Modifier[14270-14279]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[14280-14286]:ArrayType[14280-14286]"
    }, {
      "left" : "readRecord",
      "right" : "readRecord",
      "info" : "SimpleName[14287-14297]:SimpleName[14287-14297]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14307-14318]:SimpleType[14307-14318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14319-14559]:Block[14319-14559]"
    }, {
      "left" : "final byte[] record = new byte[recordSize];",
      "right" : "final byte[] record = new byte[recordSize];",
      "info" : "VariableDeclarationStatement[14330-14373]:VariableDeclarationStatement[14330-14373]"
    }, {
      "left" : "final int readNow = IOUtils.readFully(is, record);",
      "right" : "final int readNow = IOUtils.readFully(is, record);",
      "info" : "VariableDeclarationStatement[14383-14433]:VariableDeclarationStatement[14383-14433]"
    }, {
      "left" : "count(readNow);",
      "right" : "count(readNow);",
      "info" : "ExpressionStatement[14442-14457]:ExpressionStatement[14442-14457]"
    }, {
      "left" : "if (readNow != recordSize)",
      "right" : "if (readNow != recordSize)",
      "info" : "IfStatement[14466-14529]:IfStatement[14466-14529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14493-14529]:Block[14493-14529]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14507-14519]:ReturnStatement[14507-14519]"
    }, {
      "left" : "return record;",
      "right" : "return record;",
      "info" : "ReturnStatement[14539-14553]:ReturnStatement[14539-14553]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14565-14572]:Modifier[14565-14572]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14573-14577]:PrimitiveType[14573-14577]"
    }, {
      "left" : "readGlobalPaxHeaders",
      "right" : "readGlobalPaxHeaders",
      "info" : "SimpleName[14578-14598]:SimpleName[14578-14598]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14608-14619]:SimpleType[14608-14619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14620-14730]:Block[14620-14730]"
    }, {
      "left" : "globalPaxHeaders = parsePaxHeaders(this);",
      "right" : "globalPaxHeaders = parsePaxHeaders(this);",
      "info" : "ExpressionStatement[14630-14671]:ExpressionStatement[14630-14671]"
    }, {
      "left" : "getNextEntry();",
      "right" : "getNextEntry();",
      "info" : "ExpressionStatement[14680-14695]:ExpressionStatement[14680-14695]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14736-14743]:Modifier[14736-14743]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14744-14748]:PrimitiveType[14744-14748]"
    }, {
      "left" : "paxHeaders",
      "right" : "paxHeaders",
      "info" : "SimpleName[14749-14759]:SimpleName[14749-14759]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14769-14780]:SimpleType[14769-14780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14780-14955]:Block[14780-14955]"
    }, {
      "left" : "final Map<String, String> headers = parsePaxHeaders(this);",
      "right" : "final Map<String, String> headers = parsePaxHeaders(this);",
      "info" : "VariableDeclarationStatement[14790-14848]:VariableDeclarationStatement[14790-14848]"
    }, {
      "left" : "getNextEntry();",
      "right" : "getNextEntry();",
      "info" : "ExpressionStatement[14857-14872]:ExpressionStatement[14857-14872]"
    }, {
      "left" : "applyPaxHeadersToCurrentEntry(headers);",
      "right" : "applyPaxHeadersToCurrentEntry(headers);",
      "info" : "ExpressionStatement[14910-14949]:ExpressionStatement[14910-14949]"
    }, {
      "left" : "parsePaxHeaders",
      "right" : "parsePaxHeaders",
      "info" : "SimpleName[15180-15195]:SimpleName[15180-15195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15244-17495]:Block[15244-17611]"
    }, {
      "left" : "final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);",
      "right" : "final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);",
      "info" : "VariableDeclarationStatement[15254-15336]:VariableDeclarationStatement[15254-15336]"
    }, {
      "left" : "while(true)",
      "right" : "while(true)",
      "info" : "WhileStatement[15392-17465]:WhileStatement[15392-17581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15403-17465]:Block[15403-17581]"
    }, {
      "left" : "int ch;",
      "right" : "int ch;",
      "info" : "VariableDeclarationStatement[15431-15438]:VariableDeclarationStatement[15431-15438]"
    }, {
      "left" : "int len = 0;",
      "right" : "int len = 0;",
      "info" : "VariableDeclarationStatement[15451-15463]:VariableDeclarationStatement[15451-15463]"
    }, {
      "left" : "int read = 0;",
      "right" : "int read = 0;",
      "info" : "VariableDeclarationStatement[15476-15489]:VariableDeclarationStatement[15476-15489]"
    }, {
      "left" : "while((ch = i.read()) != -1)",
      "right" : "while((ch = i.read()) != -1)",
      "info" : "WhileStatement[15502-17384]:WhileStatement[15502-17500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15531-17384]:Block[15531-17500]"
    }, {
      "left" : "read++;",
      "right" : "read++;",
      "info" : "ExpressionStatement[15549-15556]:ExpressionStatement[15549-15556]"
    }, {
      "left" : "if (ch == ' ')",
      "right" : "if (ch == ' ')",
      "info" : "IfStatement[15573-17310]:IfStatement[15665-17426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15587-17310]:Block[15589-15659]"
    }, {
      "left" : "final ByteArrayOutputStream coll = new ByteArrayOutputStream();",
      "right" : "final ByteArrayOutputStream coll = new ByteArrayOutputStream();",
      "info" : "VariableDeclarationStatement[15644-15707]:VariableDeclarationStatement[15760-15823]"
    }, {
      "left" : "while((ch = i.read()) != -1)",
      "right" : "while((ch = i.read()) != -1)",
      "info" : "WhileStatement[15728-17238]:WhileStatement[15844-17354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15757-17238]:Block[15873-17354]"
    }, {
      "left" : "read++;",
      "right" : "read++;",
      "info" : "ExpressionStatement[15783-15790]:ExpressionStatement[15899-15906]"
    }, {
      "left" : "if (ch == '=')",
      "right" : "if (ch == '=')",
      "info" : "IfStatement[15815-17169]:IfStatement[15931-17285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15829-17169]:Block[15945-17285]"
    }, {
      "left" : "final String keyword = coll.toString(CharsetNames.UTF_8);",
      "right" : "final String keyword = coll.toString(CharsetNames.UTF_8);",
      "info" : "VariableDeclarationStatement[15877-15934]:VariableDeclarationStatement[15993-16050]"
    }, {
      "left" : "final int restLen = len - read;",
      "right" : "final int restLen = len - read;",
      "info" : "VariableDeclarationStatement[16012-16043]:VariableDeclarationStatement[16128-16159]"
    }, {
      "left" : "if (restLen == 1)",
      "right" : "if (restLen == 1)",
      "info" : "IfStatement[16072-17108]:IfStatement[16188-17224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16090-16189]:Block[16206-16305]"
    }, {
      "left" : "headers.remove(keyword);",
      "right" : "headers.remove(keyword);",
      "info" : "ExpressionStatement[16135-16159]:ExpressionStatement[16251-16275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16195-17108]:Block[16311-17224]"
    }, {
      "left" : "final byte[] rest = new byte[restLen];",
      "right" : "final byte[] rest = new byte[restLen];",
      "info" : "VariableDeclarationStatement[16229-16267]:VariableDeclarationStatement[16345-16383]"
    }, {
      "left" : "final int got = IOUtils.readFully(i, rest);",
      "right" : "final int got = IOUtils.readFully(i, rest);",
      "info" : "VariableDeclarationStatement[16300-16343]:VariableDeclarationStatement[16416-16459]"
    }, {
      "left" : "if (got != restLen)",
      "right" : "if (got != restLen)",
      "info" : "IfStatement[16376-16800]:IfStatement[16492-16916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16396-16800]:Block[16512-16916]"
    }, {
      "left" : "throw new IOException(\"Failed to read \"\n                                                          + \"Paxheader. Expected \"\n                                                          + restLen\n                                                          + \" bytes, read \"\n                                                          + got);",
      "right" : "throw new IOException(\"Failed to read \"\n                                                          + \"Paxheader. Expected \"\n                                                          + restLen\n                                                          + \" bytes, read \"\n                                                          + got);",
      "info" : "ThrowStatement[16434-16766]:ThrowStatement[16550-16882]"
    }, {
      "left" : "final String value = new String(rest, 0,\n                                                          restLen - 1, CharsetNames.UTF_8);",
      "right" : "final String value = new String(rest, 0,\n                                                          restLen - 1, CharsetNames.UTF_8);",
      "info" : "VariableDeclarationStatement[16885-17017]:VariableDeclarationStatement[17001-17133]"
    }, {
      "left" : "headers.put(keyword, value);",
      "right" : "headers.put(keyword, value);",
      "info" : "ExpressionStatement[17050-17078]:ExpressionStatement[17166-17194]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17137-17143]:BreakStatement[17253-17259]"
    }, {
      "left" : "coll.write((byte) ch);",
      "right" : "coll.write((byte) ch);",
      "info" : "ExpressionStatement[17194-17216]:ExpressionStatement[17310-17332]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17259-17265]:BreakStatement[15635-15641]"
    }, {
      "left" : "len *= 10;",
      "right" : "len *= 10;",
      "info" : "ExpressionStatement[17327-17337]:ExpressionStatement[17443-17453]"
    }, {
      "left" : "len += ch - '0';",
      "right" : "len += ch - '0';",
      "info" : "ExpressionStatement[17354-17370]:ExpressionStatement[17470-17486]"
    }, {
      "left" : "if (ch == -1)",
      "right" : "if (ch == -1)",
      "info" : "IfStatement[17397-17455]:IfStatement[17513-17571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17410-17455]:Block[17526-17571]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17435-17441]:BreakStatement[17551-17557]"
    }, {
      "left" : "return headers;",
      "right" : "return headers;",
      "info" : "ReturnStatement[17474-17489]:ReturnStatement[17590-17605]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17501-17508]:Modifier[17617-17624]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17509-17513]:PrimitiveType[17625-17629]"
    }, {
      "left" : "applyPaxHeadersToCurrentEntry",
      "right" : "applyPaxHeadersToCurrentEntry",
      "info" : "SimpleName[17514-17543]:SimpleName[17630-17659]"
    }, {
      "left" : "final Map<String, String> headers",
      "right" : "final Map<String, String> headers",
      "info" : "SingleVariableDeclaration[17544-17577]:SingleVariableDeclaration[17660-17693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17579-19820]:Block[17695-19936]"
    }, {
      "left" : "for (final Entry<String, String> ent : headers.entrySet())",
      "right" : "for (final Entry<String, String> ent : headers.entrySet())",
      "info" : "EnhancedForStatement[18267-19814]:EnhancedForStatement[18383-19930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18325-19814]:Block[18441-19930]"
    }, {
      "left" : "final String key = ent.getKey();",
      "right" : "final String key = ent.getKey();",
      "info" : "VariableDeclarationStatement[18339-18371]:VariableDeclarationStatement[18455-18487]"
    }, {
      "left" : "final String val = ent.getValue();",
      "right" : "final String val = ent.getValue();",
      "info" : "VariableDeclarationStatement[18384-18418]:VariableDeclarationStatement[18500-18534]"
    }, {
      "left" : "if (\"path\".equals(key))",
      "right" : "if (\"path\".equals(key))",
      "info" : "IfStatement[18431-19804]:IfStatement[18547-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18454-18509]:Block[18570-18625]"
    }, {
      "left" : "currEntry.setName(val);",
      "right" : "currEntry.setName(val);",
      "info" : "ExpressionStatement[18472-18495]:ExpressionStatement[18588-18611]"
    }, {
      "left" : "if (\"linkpath\".equals(key))",
      "right" : "if (\"linkpath\".equals(key))",
      "info" : "IfStatement[18515-19804]:IfStatement[18631-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18542-18601]:Block[18658-18717]"
    }, {
      "left" : "currEntry.setLinkName(val);",
      "right" : "currEntry.setLinkName(val);",
      "info" : "ExpressionStatement[18560-18587]:ExpressionStatement[18676-18703]"
    }, {
      "left" : "if (\"gid\".equals(key))",
      "right" : "if (\"gid\".equals(key))",
      "info" : "IfStatement[18607-19804]:IfStatement[18723-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18629-18703]:Block[18745-18819]"
    }, {
      "left" : "currEntry.setGroupId(Long.parseLong(val));",
      "right" : "currEntry.setGroupId(Long.parseLong(val));",
      "info" : "ExpressionStatement[18647-18689]:ExpressionStatement[18763-18805]"
    }, {
      "left" : "if (\"gname\".equals(key))",
      "right" : "if (\"gname\".equals(key))",
      "info" : "IfStatement[18709-19804]:IfStatement[18825-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18733-18793]:Block[18849-18909]"
    }, {
      "left" : "currEntry.setGroupName(val);",
      "right" : "currEntry.setGroupName(val);",
      "info" : "ExpressionStatement[18751-18779]:ExpressionStatement[18867-18895]"
    }, {
      "left" : "if (\"uid\".equals(key))",
      "right" : "if (\"uid\".equals(key))",
      "info" : "IfStatement[18799-19804]:IfStatement[18915-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18821-18894]:Block[18937-19010]"
    }, {
      "left" : "currEntry.setUserId(Long.parseLong(val));",
      "right" : "currEntry.setUserId(Long.parseLong(val));",
      "info" : "ExpressionStatement[18839-18880]:ExpressionStatement[18955-18996]"
    }, {
      "left" : "if (\"uname\".equals(key))",
      "right" : "if (\"uname\".equals(key))",
      "info" : "IfStatement[18900-19804]:IfStatement[19016-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18924-18983]:Block[19040-19099]"
    }, {
      "left" : "currEntry.setUserName(val);",
      "right" : "currEntry.setUserName(val);",
      "info" : "ExpressionStatement[18942-18969]:ExpressionStatement[19058-19085]"
    }, {
      "left" : "if (\"size\".equals(key))",
      "right" : "if (\"size\".equals(key))",
      "info" : "IfStatement[18989-19804]:IfStatement[19105-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19012-19083]:Block[19128-19199]"
    }, {
      "left" : "currEntry.setSize(Long.parseLong(val));",
      "right" : "currEntry.setSize(Long.parseLong(val));",
      "info" : "ExpressionStatement[19030-19069]:ExpressionStatement[19146-19185]"
    }, {
      "left" : "if (\"mtime\".equals(key))",
      "right" : "if (\"mtime\".equals(key))",
      "info" : "IfStatement[19089-19804]:IfStatement[19205-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19113-19207]:Block[19229-19323]"
    }, {
      "left" : "currEntry.setModTime((long) (Double.parseDouble(val) * 1000));",
      "right" : "currEntry.setModTime((long) (Double.parseDouble(val) * 1000));",
      "info" : "ExpressionStatement[19131-19193]:ExpressionStatement[19247-19309]"
    }, {
      "left" : "if (\"SCHILY.devminor\".equals(key))",
      "right" : "if (\"SCHILY.devminor\".equals(key))",
      "info" : "IfStatement[19213-19804]:IfStatement[19329-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19247-19324]:Block[19363-19440]"
    }, {
      "left" : "currEntry.setDevMinor(Integer.parseInt(val));",
      "right" : "currEntry.setDevMinor(Integer.parseInt(val));",
      "info" : "ExpressionStatement[19265-19310]:ExpressionStatement[19381-19426]"
    }, {
      "left" : "if (\"SCHILY.devmajor\".equals(key))",
      "right" : "if (\"SCHILY.devmajor\".equals(key))",
      "info" : "IfStatement[19330-19804]:IfStatement[19446-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19364-19441]:Block[19480-19557]"
    }, {
      "left" : "currEntry.setDevMajor(Integer.parseInt(val));",
      "right" : "currEntry.setDevMajor(Integer.parseInt(val));",
      "info" : "ExpressionStatement[19382-19427]:ExpressionStatement[19498-19543]"
    }, {
      "left" : "if (\"GNU.sparse.size\".equals(key))",
      "right" : "if (\"GNU.sparse.size\".equals(key))",
      "info" : "IfStatement[19447-19804]:IfStatement[19563-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19482-19553]:Block[19598-19669]"
    }, {
      "left" : "currEntry.fillGNUSparse0xData(headers);",
      "right" : "currEntry.fillGNUSparse0xData(headers);",
      "info" : "ExpressionStatement[19500-19539]:ExpressionStatement[19616-19655]"
    }, {
      "left" : "if (\"GNU.sparse.realsize\".equals(key))",
      "right" : "if (\"GNU.sparse.realsize\".equals(key))",
      "info" : "IfStatement[19559-19804]:IfStatement[19675-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19598-19669]:Block[19714-19785]"
    }, {
      "left" : "currEntry.fillGNUSparse1xData(headers);",
      "right" : "currEntry.fillGNUSparse1xData(headers);",
      "info" : "ExpressionStatement[19616-19655]:ExpressionStatement[19732-19771]"
    }, {
      "left" : "if (\"SCHILY.filetype\".equals(key) && \"sparse\".equals(val))",
      "right" : "if (\"SCHILY.filetype\".equals(key) && \"sparse\".equals(val))",
      "info" : "IfStatement[19675-19804]:IfStatement[19791-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19734-19804]:Block[19850-19920]"
    }, {
      "left" : "currEntry.fillStarSparseData(headers);",
      "right" : "currEntry.fillStarSparseData(headers);",
      "info" : "ExpressionStatement[19752-19790]:ExpressionStatement[19868-19906]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20099-20106]:Modifier[20215-20222]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20107-20111]:PrimitiveType[20223-20227]"
    }, {
      "left" : "readOldGNUSparse",
      "right" : "readOldGNUSparse",
      "info" : "SimpleName[20112-20128]:SimpleName[20228-20244]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20138-20149]:SimpleType[20254-20265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20150-20824]:Block[20266-20940]"
    }, {
      "left" : "if (currEntry.isExtended())",
      "right" : "if (currEntry.isExtended())",
      "info" : "IfStatement[20307-20818]:IfStatement[20423-20934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20335-20818]:Block[20451-20934]"
    }, {
      "left" : "TarArchiveSparseEntry entry;",
      "right" : "TarArchiveSparseEntry entry;",
      "info" : "VariableDeclarationStatement[20349-20377]:VariableDeclarationStatement[20465-20493]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[20390-20808]:DoStatement[20506-20924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20393-20780]:Block[20509-20896]"
    }, {
      "left" : "final byte[] headerBuf = getRecord();",
      "right" : "final byte[] headerBuf = getRecord();",
      "info" : "VariableDeclarationStatement[20411-20448]:VariableDeclarationStatement[20527-20564]"
    }, {
      "left" : "if (headerBuf == null)",
      "right" : "if (headerBuf == null)",
      "info" : "IfStatement[20465-20572]:IfStatement[20581-20688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20488-20572]:Block[20604-20688]"
    }, {
      "left" : "currEntry = null;",
      "right" : "currEntry = null;",
      "info" : "ExpressionStatement[20510-20527]:ExpressionStatement[20626-20643]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20548-20554]:BreakStatement[20664-20670]"
    }, {
      "left" : "entry = new TarArchiveSparseEntry(headerBuf);",
      "right" : "entry = new TarArchiveSparseEntry(headerBuf);",
      "info" : "ExpressionStatement[20589-20634]:ExpressionStatement[20705-20750]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20830-20837]:Modifier[20946-20953]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20838-20845]:PrimitiveType[20954-20961]"
    }, {
      "left" : "isDirectory",
      "right" : "isDirectory",
      "info" : "SimpleName[20846-20857]:SimpleName[20962-20973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20860-20928]:Block[20976-21044]"
    }, {
      "left" : "return currEntry != null && currEntry.isDirectory();",
      "right" : "return currEntry != null && currEntry.isDirectory();",
      "info" : "ReturnStatement[20870-20922]:ReturnStatement[20986-21038]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21165-21174]:MarkerAnnotation[21281-21290]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21179-21185]:Modifier[21295-21301]"
    }, {
      "left" : "ArchiveEntry",
      "right" : "ArchiveEntry",
      "info" : "SimpleType[21186-21198]:SimpleType[21302-21314]"
    }, {
      "left" : "getNextEntry",
      "right" : "getNextEntry",
      "info" : "SimpleName[21199-21211]:SimpleName[21315-21327]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21221-21232]:SimpleType[21337-21348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21233-21274]:Block[21349-21390]"
    }, {
      "left" : "return getNextTarEntry();",
      "right" : "return getNextTarEntry();",
      "info" : "ReturnStatement[21243-21268]:ReturnStatement[21359-21384]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21764-21771]:Modifier[21880-21887]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21772-21776]:PrimitiveType[21888-21892]"
    }, {
      "left" : "tryToConsumeSecondEOFRecord",
      "right" : "tryToConsumeSecondEOFRecord",
      "info" : "SimpleName[21777-21804]:SimpleName[21893-21920]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21814-21825]:SimpleType[21930-21941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21826-22208]:Block[21942-22324]"
    }, {
      "left" : "boolean shouldReset = true;",
      "right" : "boolean shouldReset = true;",
      "info" : "VariableDeclarationStatement[21836-21863]:VariableDeclarationStatement[21952-21979]"
    }, {
      "left" : "final boolean marked = is.markSupported();",
      "right" : "final boolean marked = is.markSupported();",
      "info" : "VariableDeclarationStatement[21872-21914]:VariableDeclarationStatement[21988-22030]"
    }, {
      "left" : "if (marked)",
      "right" : "if (marked)",
      "info" : "IfStatement[21923-21979]:IfStatement[22039-22095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21935-21979]:Block[22051-22095]"
    }, {
      "left" : "is.mark(recordSize);",
      "right" : "is.mark(recordSize);",
      "info" : "ExpressionStatement[21949-21969]:ExpressionStatement[22065-22085]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21988-22202]:TryStatement[22104-22318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21992-22057]:Block[22108-22173]"
    }, {
      "left" : "shouldReset = !isEOFRecord(readRecord());",
      "right" : "shouldReset = !isEOFRecord(readRecord());",
      "info" : "ExpressionStatement[22006-22047]:ExpressionStatement[22122-22163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22066-22202]:Block[22182-22318]"
    }, {
      "left" : "if (shouldReset && marked)",
      "right" : "if (shouldReset && marked)",
      "info" : "IfStatement[22080-22192]:IfStatement[22196-22308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22107-22192]:Block[22223-22308]"
    }, {
      "left" : "pushedBackBytes(recordSize);",
      "right" : "pushedBackBytes(recordSize);",
      "info" : "ExpressionStatement[22125-22153]:ExpressionStatement[22241-22269]"
    }, {
      "left" : "is.reset();",
      "right" : "is.reset();",
      "info" : "ExpressionStatement[22167-22178]:ExpressionStatement[22283-22294]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22731-22740]:MarkerAnnotation[22847-22856]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22745-22751]:Modifier[22861-22867]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[22752-22755]:PrimitiveType[22868-22871]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[22756-22760]:SimpleName[22872-22876]"
    }, {
      "left" : "final byte[] buf",
      "right" : "final byte[] buf",
      "info" : "SingleVariableDeclaration[22761-22777]:SingleVariableDeclaration[22877-22893]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[22779-22795]:SingleVariableDeclaration[22895-22911]"
    }, {
      "left" : "int numToRead",
      "right" : "int numToRead",
      "info" : "SingleVariableDeclaration[22797-22810]:SingleVariableDeclaration[22913-22926]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22819-22830]:SimpleType[22935-22946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22831-23499]:Block[22947-23615]"
    }, {
      "left" : "int totalRead = 0;",
      "right" : "int totalRead = 0;",
      "info" : "VariableDeclarationStatement[22838-22856]:VariableDeclarationStatement[22954-22972]"
    }, {
      "left" : "if (hasHitEOF || isDirectory() || entryOffset >= entrySize)",
      "right" : "if (hasHitEOF || isDirectory() || entryOffset >= entrySize)",
      "info" : "IfStatement[22866-22960]:IfStatement[22982-23076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22926-22960]:Block[23042-23076]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[22940-22950]:ReturnStatement[23056-23066]"
    }, {
      "left" : "if (currEntry == null)",
      "right" : "if (currEntry == null)",
      "info" : "IfStatement[22970-23073]:IfStatement[23086-23189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22993-23073]:Block[23109-23189]"
    }, {
      "left" : "throw new IllegalStateException(\"No current tar entry\");",
      "right" : "throw new IllegalStateException(\"No current tar entry\");",
      "info" : "ThrowStatement[23007-23063]:ThrowStatement[23123-23179]"
    }, {
      "left" : "numToRead = Math.min(numToRead, available());",
      "right" : "numToRead = Math.min(numToRead, available());",
      "info" : "ExpressionStatement[23083-23128]:ExpressionStatement[23199-23244]"
    }, {
      "left" : "totalRead = is.read(buf, offset, numToRead);",
      "right" : "totalRead = is.read(buf, offset, numToRead);",
      "info" : "ExpressionStatement[23146-23190]:ExpressionStatement[23262-23306]"
    }, {
      "left" : "if (totalRead == -1)",
      "right" : "if (totalRead == -1)",
      "info" : "IfStatement[23208-23466]:IfStatement[23324-23582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23229-23381]:Block[23345-23497]"
    }, {
      "left" : "if (numToRead > 0)",
      "right" : "if (numToRead > 0)",
      "info" : "IfStatement[23243-23341]:IfStatement[23359-23457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23262-23341]:Block[23378-23457]"
    }, {
      "left" : "throw new IOException(\"Truncated TAR archive\");",
      "right" : "throw new IOException(\"Truncated TAR archive\");",
      "info" : "ThrowStatement[23280-23327]:ThrowStatement[23396-23443]"
    }, {
      "left" : "hasHitEOF = true;",
      "right" : "hasHitEOF = true;",
      "info" : "ExpressionStatement[23354-23371]:ExpressionStatement[23470-23487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23387-23466]:Block[23503-23582]"
    }, {
      "left" : "count(totalRead);",
      "right" : "count(totalRead);",
      "info" : "ExpressionStatement[23401-23418]:ExpressionStatement[23517-23534]"
    }, {
      "left" : "entryOffset += totalRead;",
      "right" : "entryOffset += totalRead;",
      "info" : "ExpressionStatement[23431-23456]:ExpressionStatement[23547-23572]"
    }, {
      "left" : "return totalRead;",
      "right" : "return totalRead;",
      "info" : "ReturnStatement[23476-23493]:ReturnStatement[23592-23609]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23657-23666]:MarkerAnnotation[23773-23782]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23671-23677]:Modifier[23787-23793]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23678-23685]:PrimitiveType[23794-23801]"
    }, {
      "left" : "canReadEntryData",
      "right" : "canReadEntryData",
      "info" : "SimpleName[23686-23702]:SimpleName[23802-23818]"
    }, {
      "left" : "final ArchiveEntry ae",
      "right" : "final ArchiveEntry ae",
      "info" : "SingleVariableDeclaration[23703-23724]:SingleVariableDeclaration[23819-23840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23726-23906]:Block[23842-24022]"
    }, {
      "left" : "if (ae instanceof TarArchiveEntry)",
      "right" : "if (ae instanceof TarArchiveEntry)",
      "info" : "IfStatement[23736-23878]:IfStatement[23852-23994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23771-23878]:Block[23887-23994]"
    }, {
      "left" : "final TarArchiveEntry te = (TarArchiveEntry) ae;",
      "right" : "final TarArchiveEntry te = (TarArchiveEntry) ae;",
      "info" : "VariableDeclarationStatement[23785-23833]:VariableDeclarationStatement[23901-23949]"
    }, {
      "left" : "return !te.isSparse();",
      "right" : "return !te.isSparse();",
      "info" : "ReturnStatement[23846-23868]:ReturnStatement[23962-23984]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23887-23900]:ReturnStatement[24003-24016]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24055-24061]:Modifier[24171-24177]"
    }, {
      "left" : "TarArchiveEntry",
      "right" : "TarArchiveEntry",
      "info" : "SimpleType[24062-24077]:SimpleType[24178-24193]"
    }, {
      "left" : "getCurrentEntry",
      "right" : "getCurrentEntry",
      "info" : "SimpleName[24078-24093]:SimpleName[24194-24209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24096-24129]:Block[24212-24245]"
    }, {
      "left" : "return currEntry;",
      "right" : "return currEntry;",
      "info" : "ReturnStatement[24106-24123]:ReturnStatement[24222-24239]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[24135-24144]:Modifier[24251-24260]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[24145-24150]:Modifier[24261-24266]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24151-24155]:PrimitiveType[24267-24271]"
    }, {
      "left" : "setCurrentEntry",
      "right" : "setCurrentEntry",
      "info" : "SimpleName[24156-24171]:SimpleName[24272-24287]"
    }, {
      "left" : "final TarArchiveEntry e",
      "right" : "final TarArchiveEntry e",
      "info" : "SingleVariableDeclaration[24172-24195]:SingleVariableDeclaration[24288-24311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24197-24227]:Block[24313-24343]"
    }, {
      "left" : "currEntry = e;",
      "right" : "currEntry = e;",
      "info" : "ExpressionStatement[24207-24221]:ExpressionStatement[24323-24337]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[24233-24242]:Modifier[24349-24358]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[24243-24248]:Modifier[24359-24364]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24249-24256]:PrimitiveType[24365-24372]"
    }, {
      "left" : "isAtEOF",
      "right" : "isAtEOF",
      "info" : "SimpleName[24257-24264]:SimpleName[24373-24380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24267-24300]:Block[24383-24416]"
    }, {
      "left" : "return hasHitEOF;",
      "right" : "return hasHitEOF;",
      "info" : "ReturnStatement[24277-24294]:ReturnStatement[24393-24410]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[24306-24315]:Modifier[24422-24431]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[24316-24321]:Modifier[24432-24437]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24322-24326]:PrimitiveType[24438-24442]"
    }, {
      "left" : "setAtEOF",
      "right" : "setAtEOF",
      "info" : "SimpleName[24327-24335]:SimpleName[24443-24451]"
    }, {
      "left" : "final boolean b",
      "right" : "final boolean b",
      "info" : "SingleVariableDeclaration[24336-24351]:SingleVariableDeclaration[24452-24467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24353-24383]:Block[24469-24499]"
    }, {
      "left" : "hasHitEOF = b;",
      "right" : "hasHitEOF = b;",
      "info" : "ExpressionStatement[24363-24377]:ExpressionStatement[24479-24493]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24609-24616]:Modifier[24725-24732]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24617-24621]:PrimitiveType[24733-24737]"
    }, {
      "left" : "consumeRemainderOfLastBlock",
      "right" : "consumeRemainderOfLastBlock",
      "info" : "SimpleName[24622-24649]:SimpleName[24738-24765]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24659-24670]:SimpleType[24775-24786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24671-24911]:Block[24787-25027]"
    }, {
      "left" : "final long bytesReadOfLastBlock = getBytesRead() % blockSize;",
      "right" : "final long bytesReadOfLastBlock = getBytesRead() % blockSize;",
      "info" : "VariableDeclarationStatement[24681-24742]:VariableDeclarationStatement[24797-24858]"
    }, {
      "left" : "if (bytesReadOfLastBlock > 0)",
      "right" : "if (bytesReadOfLastBlock > 0)",
      "info" : "IfStatement[24751-24905]:IfStatement[24867-25021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24781-24905]:Block[24897-25021]"
    }, {
      "left" : "final long skipped = IOUtils.skip(is, blockSize - bytesReadOfLastBlock);",
      "right" : "final long skipped = IOUtils.skip(is, blockSize - bytesReadOfLastBlock);",
      "info" : "VariableDeclarationStatement[24795-24867]:VariableDeclarationStatement[24911-24983]"
    }, {
      "left" : "count(skipped);",
      "right" : "count(skipped);",
      "info" : "ExpressionStatement[24880-24895]:ExpressionStatement[24996-25011]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25218-25224]:Modifier[25334-25340]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25225-25231]:Modifier[25341-25347]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25232-25239]:PrimitiveType[25348-25355]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[25240-25247]:SimpleName[25356-25363]"
    }, {
      "left" : "final byte[] signature",
      "right" : "final byte[] signature",
      "info" : "SingleVariableDeclaration[25248-25270]:SingleVariableDeclaration[25364-25386]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[25272-25288]:SingleVariableDeclaration[25388-25404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25290-26773]:Block[25406-26889]"
    }, {
      "left" : "if (length < TarConstants.VERSION_OFFSET+TarConstants.VERSIONLEN)",
      "right" : "if (length < TarConstants.VERSION_OFFSET+TarConstants.VERSIONLEN)",
      "info" : "IfStatement[25300-25403]:IfStatement[25416-25519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25366-25403]:Block[25482-25519]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25380-25393]:ReturnStatement[25496-25509]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_POSIX,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_POSIX,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_POSIX,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_POSIX,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "info" : "IfStatement[25413-25769]:IfStatement[25529-25885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25733-25769]:Block[25849-25885]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25747-25759]:ReturnStatement[25863-25875]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_GNU,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            (\n             ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ||\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_GNU,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            (\n             ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ||\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ))",
      "info" : "IfStatement[25778-26334]:IfStatement[25894-26450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26298-26334]:Block[26414-26450]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26312-26324]:ReturnStatement[26428-26440]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_ANT,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_ANT,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_ANT,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_ANT,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "info" : "IfStatement[26393-26745]:IfStatement[26509-26861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26709-26745]:Block[26825-26861]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26723-26735]:ReturnStatement[26839-26851]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26754-26767]:ReturnStatement[26870-26883]"
    } ]
  },
  "interFileMappings" : { }
}