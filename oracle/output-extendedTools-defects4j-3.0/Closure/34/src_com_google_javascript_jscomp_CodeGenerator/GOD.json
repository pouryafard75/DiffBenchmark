{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "TypeDeclaration[1033-37763]:TypeDeclaration[1033-37734]"
    }, {
      "left" : "private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();",
      "right" : "private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();",
      "info" : "FieldDeclaration[1219-1292]:FieldDeclaration[1219-1292]"
    }, {
      "left" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "right" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "info" : "FieldDeclaration[1296-1435]:FieldDeclaration[1296-1435]"
    }, {
      "left" : "private final CodeConsumer cc;",
      "right" : "private final CodeConsumer cc;",
      "info" : "FieldDeclaration[1439-1469]:FieldDeclaration[1439-1469]"
    }, {
      "left" : "private final CharsetEncoder outputCharsetEncoder;",
      "right" : "private final CharsetEncoder outputCharsetEncoder;",
      "info" : "FieldDeclaration[1473-1523]:FieldDeclaration[1473-1523]"
    }, {
      "left" : "CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset)",
      "right" : "CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset)",
      "info" : "MethodDeclaration[1527-2087]:MethodDeclaration[1527-2087]"
    }, {
      "left" : "CodeGenerator(CodeConsumer consumer)",
      "right" : "CodeGenerator(CodeConsumer consumer)",
      "info" : "MethodDeclaration[2091-2159]:MethodDeclaration[2091-2159]"
    }, {
      "left" : "public void tagAsStrict()",
      "right" : "public void tagAsStrict()",
      "info" : "MethodDeclaration[2163-2278]:MethodDeclaration[2163-2278]"
    }, {
      "left" : "void add(String str)",
      "right" : "void add(String str)",
      "info" : "MethodDeclaration[2282-2325]:MethodDeclaration[2282-2325]"
    }, {
      "left" : "private void addIdentifier(String identifier)",
      "right" : "private void addIdentifier(String identifier)",
      "info" : "MethodDeclaration[2329-2432]:MethodDeclaration[2329-2432]"
    }, {
      "left" : "void add(Node n)",
      "right" : "void add(Node n)",
      "info" : "MethodDeclaration[2436-2485]:MethodDeclaration[2436-2485]"
    }, {
      "left" : "void add(Node n, Context context)",
      "right" : "void add(Node n, Context context)",
      "info" : "MethodDeclaration[2489-21725]:MethodDeclaration[2489-21693]"
    }, {
      "left" : "private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence)",
      "right" : "private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence)",
      "info" : "MethodDeclaration[21729-22563]:MethodDeclaration[21697-22534]"
    }, {
      "left" : "static boolean isSimpleNumber(String s)",
      "right" : "static boolean isSimpleNumber(String s)",
      "info" : "MethodDeclaration[22567-22828]:MethodDeclaration[22538-22799]"
    }, {
      "left" : "static double getSimpleNumber(String s)",
      "right" : "static double getSimpleNumber(String s)",
      "info" : "MethodDeclaration[22832-23185]:MethodDeclaration[22803-23156]"
    }, {
      "left" : "private boolean isIndirectEval(Node n)",
      "right" : "private boolean isIndirectEval(Node n)",
      "info" : "MethodDeclaration[23189-23398]:MethodDeclaration[23160-23369]"
    }, {
      "left" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "right" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "info" : "MethodDeclaration[23402-25499]:MethodDeclaration[23373-25470]"
    }, {
      "left" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "right" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "info" : "MethodDeclaration[25503-26359]:MethodDeclaration[25474-26330]"
    }, {
      "left" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "right" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "info" : "MethodDeclaration[26363-26695]:MethodDeclaration[26334-26666]"
    }, {
      "left" : "void addList(Node firstInList)",
      "right" : "void addList(Node firstInList)",
      "info" : "MethodDeclaration[26699-26782]:MethodDeclaration[26670-26753]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "info" : "MethodDeclaration[26786-26925]:MethodDeclaration[26757-26896]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "info" : "MethodDeclaration[26929-27353]:MethodDeclaration[26900-27324]"
    }, {
      "left" : "void addArrayList(Node firstInList)",
      "right" : "void addArrayList(Node firstInList)",
      "info" : "MethodDeclaration[27357-28043]:MethodDeclaration[27328-28014]"
    }, {
      "left" : "void addCaseBody(Node caseBody)",
      "right" : "void addCaseBody(Node caseBody)",
      "info" : "MethodDeclaration[28047-28149]:MethodDeclaration[28018-28120]"
    }, {
      "left" : "void addAllSiblings(Node n)",
      "right" : "void addAllSiblings(Node n)",
      "info" : "MethodDeclaration[28153-28257]:MethodDeclaration[28124-28228]"
    }, {
      "left" : "private void addJsString(Node n)",
      "right" : "private void addJsString(Node n)",
      "info" : "MethodDeclaration[28261-28752]:MethodDeclaration[28232-28723]"
    }, {
      "left" : "private String jsString(String s, boolean useSlashV)",
      "right" : "private String jsString(String s, boolean useSlashV)",
      "info" : "MethodDeclaration[28756-29539]:MethodDeclaration[28727-29510]"
    }, {
      "left" : "static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "right" : "static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[29543-29734]:MethodDeclaration[29514-29705]"
    }, {
      "left" : "static String escapeToDoubleQuotedJsString(String s)",
      "right" : "static String escapeToDoubleQuotedJsString(String s)",
      "info" : "MethodDeclaration[29738-29950]:MethodDeclaration[29709-29921]"
    }, {
      "left" : "static String regexpEscape(String s)",
      "right" : "static String regexpEscape(String s)",
      "info" : "MethodDeclaration[30079-30155]:MethodDeclaration[30050-30126]"
    }, {
      "left" : "private static String strEscape(\n      String s, char quote,\n      String doublequoteEscape,\n      String singlequoteEscape,\n      String backslashEscape,\n      CharsetEncoder outputCharsetEncoder,\n      boolean useSlashV)",
      "right" : "private static String strEscape(\n      String s, char quote,\n      String doublequoteEscape,\n      String singlequoteEscape,\n      String backslashEscape,\n      CharsetEncoder outputCharsetEncoder,\n      boolean useSlashV)",
      "info" : "MethodDeclaration[30159-33145]:MethodDeclaration[30130-33116]"
    }, {
      "left" : "static String identifierEscape(String s)",
      "right" : "static String identifierEscape(String s)",
      "info" : "MethodDeclaration[33149-33839]:MethodDeclaration[33120-33810]"
    }, {
      "left" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "right" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "info" : "MethodDeclaration[33842-34330]:MethodDeclaration[33813-34301]"
    }, {
      "left" : "private static Node getFirstNonEmptyChild(Node n)",
      "right" : "private static Node getFirstNonEmptyChild(Node n)",
      "info" : "MethodDeclaration[34334-34735]:MethodDeclaration[34305-34706]"
    }, {
      "left" : "enum : Context",
      "right" : "enum : Context",
      "info" : "EnumDeclaration[34940-35342]:EnumDeclaration[34911-35313]"
    }, {
      "left" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "right" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "info" : "MethodDeclaration[35346-35537]:MethodDeclaration[35317-35508]"
    }, {
      "left" : "private  Context getContextForNoInOperator(Context context)",
      "right" : "private  Context getContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[35541-35876]:MethodDeclaration[35512-35847]"
    }, {
      "left" : "private  Context clearContextForNoInOperator(Context context)",
      "right" : "private  Context clearContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[35880-36317]:MethodDeclaration[35851-36288]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "info" : "MethodDeclaration[36321-36671]:MethodDeclaration[36292-36642]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "info" : "MethodDeclaration[36675-37761]:MethodDeclaration[36646-37732]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1141-1146]:TYPE_DECLARATION_KIND[1141-1146]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1147-1160]:SimpleName[1147-1160]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1527-1540]:SimpleName[1527-1540]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[1548-1569]:SingleVariableDeclaration[1548-1569]"
    }, {
      "left" : "Charset outputCharset",
      "right" : "Charset outputCharset",
      "info" : "SingleVariableDeclaration[1571-1592]:SingleVariableDeclaration[1571-1592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1594-2087]:Block[1594-2087]"
    }, {
      "left" : "cc = consumer;",
      "right" : "cc = consumer;",
      "info" : "ExpressionStatement[1600-1614]:ExpressionStatement[1600-1614]"
    }, {
      "left" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "right" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "info" : "IfStatement[1619-2083]:IfStatement[1619-2083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1684-2008]:Block[1684-2008]"
    }, {
      "left" : "this.outputCharsetEncoder = null;",
      "right" : "this.outputCharsetEncoder = null;",
      "info" : "ExpressionStatement[1969-2002]:ExpressionStatement[1969-2002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2014-2083]:Block[2014-2083]"
    }, {
      "left" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "right" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "info" : "ExpressionStatement[2022-2077]:ExpressionStatement[2022-2077]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[2091-2104]:SimpleName[2091-2104]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[2105-2126]:SingleVariableDeclaration[2105-2126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2128-2159]:Block[2128-2159]"
    }, {
      "left" : "this(consumer, null);",
      "right" : "this(consumer, null);",
      "info" : "ConstructorInvocation[2134-2155]:ConstructorInvocation[2134-2155]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2221-2227]:Modifier[2221-2227]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2228-2232]:PrimitiveType[2228-2232]"
    }, {
      "left" : "tagAsStrict",
      "right" : "tagAsStrict",
      "info" : "SimpleName[2233-2244]:SimpleName[2233-2244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2247-2278]:Block[2247-2278]"
    }, {
      "left" : "add(\"'use strict';\");",
      "right" : "add(\"'use strict';\");",
      "info" : "ExpressionStatement[2253-2274]:ExpressionStatement[2253-2274]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2282-2286]:PrimitiveType[2282-2286]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2287-2290]:SimpleName[2287-2290]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[2291-2301]:SingleVariableDeclaration[2291-2301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2303-2325]:Block[2303-2325]"
    }, {
      "left" : "cc.add(str);",
      "right" : "cc.add(str);",
      "info" : "ExpressionStatement[2309-2321]:ExpressionStatement[2309-2321]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2329-2336]:Modifier[2329-2336]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2337-2341]:PrimitiveType[2337-2341]"
    }, {
      "left" : "addIdentifier",
      "right" : "addIdentifier",
      "info" : "SimpleName[2342-2355]:SimpleName[2342-2355]"
    }, {
      "left" : "String identifier",
      "right" : "String identifier",
      "info" : "SingleVariableDeclaration[2356-2373]:SingleVariableDeclaration[2356-2373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2375-2432]:Block[2375-2432]"
    }, {
      "left" : "cc.addIdentifier(identifierEscape(identifier));",
      "right" : "cc.addIdentifier(identifierEscape(identifier));",
      "info" : "ExpressionStatement[2381-2428]:ExpressionStatement[2381-2428]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2436-2440]:PrimitiveType[2436-2440]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2441-2444]:SimpleName[2441-2444]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2445-2451]:SingleVariableDeclaration[2445-2451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2453-2485]:Block[2453-2485]"
    }, {
      "left" : "add(n, Context.OTHER);",
      "right" : "add(n, Context.OTHER);",
      "info" : "ExpressionStatement[2459-2481]:ExpressionStatement[2459-2481]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2489-2493]:PrimitiveType[2489-2493]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2494-2497]:SimpleName[2494-2497]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2498-2504]:SingleVariableDeclaration[2498-2504]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[2506-2521]:SingleVariableDeclaration[2506-2521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2523-21725]:Block[2523-21693]"
    }, {
      "left" : "if (!cc.continueProcessing())",
      "right" : "if (!cc.continueProcessing())",
      "info" : "IfStatement[2529-2580]:IfStatement[2529-2580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2559-2580]:Block[2559-2580]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[2567-2574]:ReturnStatement[2567-2574]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[2586-2609]:VariableDeclarationStatement[2586-2609]"
    }, {
      "left" : "String opstr = NodeUtil.opToStr(type);",
      "right" : "String opstr = NodeUtil.opToStr(type);",
      "info" : "VariableDeclarationStatement[2614-2652]:VariableDeclarationStatement[2614-2652]"
    }, {
      "left" : "int childCount = n.getChildCount();",
      "right" : "int childCount = n.getChildCount();",
      "info" : "VariableDeclarationStatement[2657-2692]:VariableDeclarationStatement[2657-2692]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[2697-2728]:VariableDeclarationStatement[2697-2728]"
    }, {
      "left" : "Node last = n.getLastChild();",
      "right" : "Node last = n.getLastChild();",
      "info" : "VariableDeclarationStatement[2733-2762]:VariableDeclarationStatement[2733-2762]"
    }, {
      "left" : "if (opstr != null && first != last)",
      "right" : "if (opstr != null && first != last)",
      "info" : "IfStatement[2803-3928]:IfStatement[2803-3896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2839-3928]:Block[2839-3896]"
    }, {
      "left" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
      "right" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
      "info" : "ExpressionStatement[2847-3002]:ExpressionStatement[2847-3002]"
    }, {
      "left" : "int p = NodeUtil.precedence(type);",
      "right" : "int p = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[3009-3043]:VariableDeclarationStatement[3009-3043]"
    }, {
      "left" : "Context rhsContext = getContextForNoInOperator(context);",
      "right" : "Context rhsContext = getContextForNoInOperator(context);",
      "info" : "VariableDeclarationStatement[3158-3214]:VariableDeclarationStatement[3158-3214]"
    }, {
      "left" : "if (last.getType() == type &&\n          NodeUtil.isAssociative(type))",
      "right" : "if (last.getType() == type &&\n          NodeUtil.isAssociative(type))",
      "info" : "IfStatement[3344-3908]:IfStatement[3344-3876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3414-3528]:Block[3414-3528]"
    }, {
      "left" : "addExpr(first, p, context);",
      "right" : "addExpr(first, p, context);",
      "info" : "ExpressionStatement[3424-3451]:ExpressionStatement[3424-3451]"
    }, {
      "left" : "cc.addOp(opstr, true);",
      "right" : "cc.addOp(opstr, true);",
      "info" : "ExpressionStatement[3460-3482]:ExpressionStatement[3460-3482]"
    }, {
      "left" : "addExpr(last, p, rhsContext);",
      "right" : "addExpr(last, p, rhsContext);",
      "info" : "ExpressionStatement[3491-3520]:ExpressionStatement[3491-3520]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
      "right" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
      "info" : "IfStatement[3534-3908]:IfStatement[3534-3876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3599-3784]:Block[3599-3784]"
    }, {
      "left" : "addExpr(first, p, context);",
      "right" : "addExpr(first, p, context);",
      "info" : "ExpressionStatement[3680-3707]:ExpressionStatement[3680-3707]"
    }, {
      "left" : "cc.addOp(opstr, true);",
      "right" : "cc.addOp(opstr, true);",
      "info" : "ExpressionStatement[3716-3738]:ExpressionStatement[3716-3738]"
    }, {
      "left" : "addExpr(last, p, rhsContext);",
      "right" : "addExpr(last, p, rhsContext);",
      "info" : "ExpressionStatement[3747-3776]:ExpressionStatement[3747-3776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3790-3908]:Block[3790-3876]"
    }, {
      "left" : "cc.addOp(opstr, true);",
      "right" : "cc.addOp(opStr, true);",
      "info" : "ExpressionStatement[3836-3858]:ExpressionStatement[22401-22423]"
    }, {
      "left" : "opstr",
      "right" : "opStr",
      "info" : "SimpleName[3845-3850]:SimpleName[22410-22415]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3915-3922]:ReturnStatement[3883-3890]"
    }, {
      "left" : "cc.startSourceMapping(n);",
      "right" : "cc.startSourceMapping(n);",
      "info" : "ExpressionStatement[3934-3959]:ExpressionStatement[3902-3927]"
    }, {
      "left" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, Context.OTHER);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, Context.OTHER);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        add(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        add(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().isObjectLit()) ? 1 : 0)) {\n          throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());\n        }\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isString());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
      "right" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, Context.OTHER);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, Context.OTHER);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        add(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        add(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().isObjectLit()) ? 1 : 0)) {\n          throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());\n        }\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isString());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
      "info" : "SwitchStatement[3965-21692]:SwitchStatement[3933-21660]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[3987-4002]:SwitchCase[3955-3970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4003-4626]:Block[3971-4594]"
    }, {
      "left" : "Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());",
      "right" : "Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());",
      "info" : "ExpressionStatement[4013-4123]:ExpressionStatement[3981-4091]"
    }, {
      "left" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
      "right" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
      "info" : "ExpressionStatement[4132-4193]:ExpressionStatement[4100-4161]"
    }, {
      "left" : "add(\"try\");",
      "right" : "add(\"try\");",
      "info" : "ExpressionStatement[4203-4214]:ExpressionStatement[4171-4182]"
    }, {
      "left" : "add(first, Context.PRESERVE_BLOCK);",
      "right" : "add(first, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[4223-4258]:ExpressionStatement[4191-4226]"
    }, {
      "left" : "Node catchblock = first.getNext().getFirstChild();",
      "right" : "Node catchblock = first.getNext().getFirstChild();",
      "info" : "VariableDeclarationStatement[4369-4419]:VariableDeclarationStatement[4337-4387]"
    }, {
      "left" : "if (catchblock != null)",
      "right" : "if (catchblock != null)",
      "info" : "IfStatement[4428-4490]:IfStatement[4396-4458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4452-4490]:Block[4420-4458]"
    }, {
      "left" : "add(catchblock);",
      "right" : "add(catchblock);",
      "info" : "ExpressionStatement[4464-4480]:ExpressionStatement[4432-4448]"
    }, {
      "left" : "if (childCount == 3)",
      "right" : "if (childCount == 3)",
      "info" : "IfStatement[4500-4603]:IfStatement[4468-4571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4521-4603]:Block[4489-4571]"
    }, {
      "left" : "add(\"finally\");",
      "right" : "add(\"finally\");",
      "info" : "ExpressionStatement[4533-4548]:ExpressionStatement[4501-4516]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[4559-4593]:ExpressionStatement[4527-4561]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4612-4618]:BreakStatement[4580-4586]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[4634-4651]:SwitchCase[4602-4619]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[4660-4702]:ExpressionStatement[4628-4670]"
    }, {
      "left" : "add(\"catch(\");",
      "right" : "add(\"catch(\");",
      "info" : "ExpressionStatement[4711-4725]:ExpressionStatement[4679-4693]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[4734-4745]:ExpressionStatement[4702-4713]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[4754-4763]:ExpressionStatement[4722-4731]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[4772-4806]:ExpressionStatement[4740-4774]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4815-4821]:BreakStatement[4783-4789]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[4829-4846]:SwitchCase[4797-4814]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[4855-4897]:ExpressionStatement[4823-4865]"
    }, {
      "left" : "add(\"throw\");",
      "right" : "add(\"throw\");",
      "info" : "ExpressionStatement[4906-4919]:ExpressionStatement[4874-4887]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[4928-4939]:ExpressionStatement[4896-4907]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[5047-5069]:ExpressionStatement[5015-5037]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5078-5084]:BreakStatement[5046-5052]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[5092-5110]:SwitchCase[5060-5078]"
    }, {
      "left" : "add(\"return\");",
      "right" : "add(\"return\");",
      "info" : "ExpressionStatement[5119-5133]:ExpressionStatement[5087-5101]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[5142-5266]:IfStatement[5110-5234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5163-5196]:Block[5131-5164]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[5175-5186]:ExpressionStatement[5143-5154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5202-5266]:Block[5170-5234]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[5214-5256]:ExpressionStatement[5182-5224]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[5275-5293]:ExpressionStatement[5243-5261]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5302-5308]:BreakStatement[5270-5276]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[5316-5331]:SwitchCase[5284-5299]"
    }, {
      "left" : "if (first != null)",
      "right" : "if (first != null)",
      "info" : "IfStatement[5340-5462]:IfStatement[5308-5430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5359-5462]:Block[5327-5430]"
    }, {
      "left" : "add(\"var \");",
      "right" : "add(\"var \");",
      "info" : "ExpressionStatement[5371-5383]:ExpressionStatement[5339-5351]"
    }, {
      "left" : "addList(first, false, getContextForNoInOperator(context));",
      "right" : "addList(first, false, getContextForNoInOperator(context));",
      "info" : "ExpressionStatement[5394-5452]:ExpressionStatement[5362-5420]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5471-5477]:BreakStatement[5439-5445]"
    }, {
      "left" : "case Token.LABEL_NAME:",
      "right" : "case Token.LABEL_NAME:",
      "info" : "SwitchCase[5485-5507]:SwitchCase[5453-5475]"
    }, {
      "left" : "Preconditions.checkState(!n.getString().isEmpty());",
      "right" : "Preconditions.checkState(!n.getString().isEmpty());",
      "info" : "ExpressionStatement[5516-5567]:ExpressionStatement[5484-5535]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[5576-5605]:ExpressionStatement[5544-5573]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5614-5620]:BreakStatement[5582-5588]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[5628-5644]:SwitchCase[5596-5612]"
    }, {
      "left" : "if (first == null || first.isEmpty())",
      "right" : "if (first == null || first.isEmpty())",
      "info" : "IfStatement[5653-6190]:IfStatement[5621-6158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5691-5742]:Block[5659-5710]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[5703-5732]:ExpressionStatement[5671-5700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5748-6190]:Block[5716-6158]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[5760-5802]:ExpressionStatement[5728-5770]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[5813-5842]:ExpressionStatement[5781-5810]"
    }, {
      "left" : "cc.addOp(\"=\", true);",
      "right" : "cc.addOp(\"=\", true);",
      "info" : "ExpressionStatement[5853-5873]:ExpressionStatement[5821-5841]"
    }, {
      "left" : "if (first.isComma())",
      "right" : "if (first.isComma())",
      "info" : "IfStatement[5884-6180]:IfStatement[5852-6148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5905-5996]:Block[5873-5964]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);",
      "right" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);",
      "info" : "ExpressionStatement[5919-5984]:ExpressionStatement[5887-5952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6002-6180]:Block[5970-6148]"
    }, {
      "left" : "addExpr(first, 0, getContextForNoInOperator(context));",
      "right" : "addExpr(first, 0, getContextForNoInOperator(context));",
      "info" : "ExpressionStatement[6114-6168]:ExpressionStatement[6082-6136]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6199-6205]:BreakStatement[6167-6173]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[6213-6233]:SwitchCase[6181-6201]"
    }, {
      "left" : "add(\"[\");",
      "right" : "add(\"[\");",
      "info" : "ExpressionStatement[6242-6251]:ExpressionStatement[6210-6219]"
    }, {
      "left" : "addArrayList(first);",
      "right" : "addArrayList(first);",
      "info" : "ExpressionStatement[6260-6280]:ExpressionStatement[6228-6248]"
    }, {
      "left" : "add(\"]\");",
      "right" : "add(\"]\");",
      "info" : "ExpressionStatement[6289-6298]:ExpressionStatement[6257-6266]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6307-6313]:BreakStatement[6275-6281]"
    }, {
      "left" : "case Token.PARAM_LIST:",
      "right" : "case Token.PARAM_LIST:",
      "info" : "SwitchCase[6321-6343]:SwitchCase[6289-6311]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[6352-6361]:ExpressionStatement[6320-6329]"
    }, {
      "left" : "addList(first);",
      "right" : "addList(first);",
      "info" : "ExpressionStatement[6370-6385]:ExpressionStatement[6338-6353]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[6394-6403]:ExpressionStatement[6362-6371]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6412-6418]:BreakStatement[6380-6386]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[6426-6443]:SwitchCase[6394-6411]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[6452-6494]:ExpressionStatement[6420-6462]"
    }, {
      "left" : "unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);",
      "right" : "unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);",
      "info" : "ExpressionStatement[6503-6575]:ExpressionStatement[6471-6543]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6584-6590]:BreakStatement[6552-6558]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[6598-6616]:SwitchCase[6566-6584]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[6625-6667]:ExpressionStatement[6593-6635]"
    }, {
      "left" : "cc.addNumber(n.getDouble());",
      "right" : "cc.addNumber(n.getDouble());",
      "info" : "ExpressionStatement[6676-6704]:ExpressionStatement[6644-6672]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6713-6719]:BreakStatement[6681-6687]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[6727-6745]:SwitchCase[6695-6713]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[6752-6768]:SwitchCase[6720-6736]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[6775-6790]:SwitchCase[6743-6758]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[6797-6815]:SwitchCase[6765-6783]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[6822-6837]:SwitchCase[6790-6805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6838-7096]:Block[6806-7064]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[6910-6952]:ExpressionStatement[6878-6920]"
    }, {
      "left" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "right" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "info" : "ExpressionStatement[6961-7007]:ExpressionStatement[6929-6975]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
      "right" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
      "info" : "ExpressionStatement[7016-7073]:ExpressionStatement[6984-7041]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7082-7088]:BreakStatement[7050-7056]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[7104-7119]:SwitchCase[7072-7087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7120-7647]:Block[7088-7615]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[7130-7172]:ExpressionStatement[7098-7140]"
    }, {
      "left" : "if (n.getFirstChild().isNumber())",
      "right" : "if (n.getFirstChild().isNumber())",
      "info" : "IfStatement[7380-7623]:IfStatement[7348-7591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7414-7481]:Block[7382-7449]"
    }, {
      "left" : "cc.addNumber(-n.getFirstChild().getDouble());",
      "right" : "cc.addNumber(-n.getFirstChild().getDouble());",
      "info" : "ExpressionStatement[7426-7471]:ExpressionStatement[7394-7439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7487-7623]:Block[7455-7591]"
    }, {
      "left" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "right" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "info" : "ExpressionStatement[7499-7545]:ExpressionStatement[7467-7513]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
      "right" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
      "info" : "ExpressionStatement[7556-7613]:ExpressionStatement[7524-7581]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7633-7639]:BreakStatement[7601-7607]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[7655-7671]:SwitchCase[7623-7639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7672-7981]:Block[7640-7949]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[7682-7724]:ExpressionStatement[7650-7692]"
    }, {
      "left" : "int p = NodeUtil.precedence(type);",
      "right" : "int p = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[7733-7767]:VariableDeclarationStatement[7701-7735]"
    }, {
      "left" : "addExpr(first, p + 1, context);",
      "right" : "addExpr(first, p + 1, context);",
      "info" : "ExpressionStatement[7776-7807]:ExpressionStatement[7744-7775]"
    }, {
      "left" : "cc.addOp(\"?\", true);",
      "right" : "cc.addOp(\"?\", true);",
      "info" : "ExpressionStatement[7816-7836]:ExpressionStatement[7784-7804]"
    }, {
      "left" : "addExpr(first.getNext(), 1, Context.OTHER);",
      "right" : "addExpr(first.getNext(), 1, Context.OTHER);",
      "info" : "ExpressionStatement[7845-7888]:ExpressionStatement[7813-7856]"
    }, {
      "left" : "cc.addOp(\":\", true);",
      "right" : "cc.addOp(\":\", true);",
      "info" : "ExpressionStatement[7897-7917]:ExpressionStatement[7865-7885]"
    }, {
      "left" : "addExpr(last, 1, Context.OTHER);",
      "right" : "addExpr(last, 1, Context.OTHER);",
      "info" : "ExpressionStatement[7926-7958]:ExpressionStatement[7894-7926]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7967-7973]:BreakStatement[7935-7941]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[7989-8007]:SwitchCase[7957-7975]"
    }, {
      "left" : "if (!first.isString() ||\n            !last.isString())",
      "right" : "if (!first.isString() ||\n            !last.isString())",
      "info" : "IfStatement[8016-8144]:IfStatement[7984-8112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8071-8144]:Block[8039-8112]"
    }, {
      "left" : "throw new Error(\"Expected children to be strings\");",
      "right" : "throw new Error(\"Expected children to be strings\");",
      "info" : "ThrowStatement[8083-8134]:ThrowStatement[8051-8102]"
    }, {
      "left" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
      "right" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
      "info" : "VariableDeclarationStatement[8154-8224]:VariableDeclarationStatement[8122-8192]"
    }, {
      "left" : "if (childCount == 2)",
      "right" : "if (childCount == 2)",
      "info" : "IfStatement[8292-8459]:IfStatement[8260-8427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8313-8366]:Block[8281-8334]"
    }, {
      "left" : "add(regexp + last.getString());",
      "right" : "add(regexp + last.getString());",
      "info" : "ExpressionStatement[8325-8356]:ExpressionStatement[8293-8324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8372-8459]:Block[8340-8427]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[8384-8426]:ExpressionStatement[8352-8394]"
    }, {
      "left" : "add(regexp);",
      "right" : "add(regexp);",
      "info" : "ExpressionStatement[8437-8449]:ExpressionStatement[8405-8417]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8468-8474]:BreakStatement[8436-8442]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[8482-8502]:SwitchCase[8450-8470]"
    }, {
      "left" : "if (n.getClass() != Node.class)",
      "right" : "if (n.getClass() != Node.class)",
      "info" : "IfStatement[8511-8610]:IfStatement[8479-8578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8543-8610]:Block[8511-8578]"
    }, {
      "left" : "throw new Error(\"Unexpected Node subclass.\");",
      "right" : "throw new Error(\"Unexpected Node subclass.\");",
      "info" : "ThrowStatement[8555-8600]:ThrowStatement[8523-8568]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[8619-8661]:ExpressionStatement[8587-8629]"
    }, {
      "left" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
      "right" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
      "info" : "VariableDeclarationStatement[8670-8731]:VariableDeclarationStatement[8638-8699]"
    }, {
      "left" : "if (funcNeedsParens)",
      "right" : "if (funcNeedsParens)",
      "info" : "IfStatement[8740-8792]:IfStatement[8708-8760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8761-8792]:Block[8729-8760]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[8773-8782]:ExpressionStatement[8741-8750]"
    }, {
      "left" : "add(\"function\");",
      "right" : "add(\"function\");",
      "info" : "ExpressionStatement[8802-8818]:ExpressionStatement[8770-8786]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[8827-8838]:ExpressionStatement[8795-8806]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[8848-8869]:ExpressionStatement[8816-8837]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[8878-8912]:ExpressionStatement[8846-8880]"
    }, {
      "left" : "cc.endFunction(context == Context.STATEMENT);",
      "right" : "cc.endFunction(context == Context.STATEMENT);",
      "info" : "ExpressionStatement[8921-8966]:ExpressionStatement[8889-8934]"
    }, {
      "left" : "if (funcNeedsParens)",
      "right" : "if (funcNeedsParens)",
      "info" : "IfStatement[8976-9028]:IfStatement[8944-8996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8997-9028]:Block[8965-8996]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[9009-9018]:ExpressionStatement[8977-8986]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9037-9043]:BreakStatement[9005-9011]"
    }, {
      "left" : "case Token.GETTER_DEF:",
      "right" : "case Token.GETTER_DEF:",
      "info" : "SwitchCase[9051-9073]:SwitchCase[9019-9041]"
    }, {
      "left" : "case Token.SETTER_DEF:",
      "right" : "case Token.SETTER_DEF:",
      "info" : "SwitchCase[9080-9102]:SwitchCase[9048-9070]"
    }, {
      "left" : "Preconditions.checkState(n.getParent().isObjectLit());",
      "right" : "Preconditions.checkState(n.getParent().isObjectLit());",
      "info" : "ExpressionStatement[9111-9165]:ExpressionStatement[9079-9133]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[9174-9216]:ExpressionStatement[9142-9184]"
    }, {
      "left" : "Preconditions.checkState(first.isFunction());",
      "right" : "Preconditions.checkState(first.isFunction());",
      "info" : "ExpressionStatement[9225-9270]:ExpressionStatement[9193-9238]"
    }, {
      "left" : "Preconditions.checkState(first.getFirstChild().getString().isEmpty());",
      "right" : "Preconditions.checkState(first.getFirstChild().getString().isEmpty());",
      "info" : "ExpressionStatement[9315-9385]:ExpressionStatement[9283-9353]"
    }, {
      "left" : "if (type == Token.GETTER_DEF)",
      "right" : "if (type == Token.GETTER_DEF)",
      "info" : "IfStatement[9394-9741]:IfStatement[9362-9709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9424-9580]:Block[9392-9548]"
    }, {
      "left" : "Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());",
      "right" : "Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());",
      "info" : "ExpressionStatement[9481-9547]:ExpressionStatement[9449-9515]"
    }, {
      "left" : "add(\"get \");",
      "right" : "add(\"get \");",
      "info" : "ExpressionStatement[9558-9570]:ExpressionStatement[9526-9538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9586-9741]:Block[9554-9709]"
    }, {
      "left" : "Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());",
      "right" : "Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());",
      "info" : "ExpressionStatement[9643-9708]:ExpressionStatement[9611-9676]"
    }, {
      "left" : "add(\"set \");",
      "right" : "add(\"set \");",
      "info" : "ExpressionStatement[9719-9731]:ExpressionStatement[9687-9699]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[9798-9826]:VariableDeclarationStatement[9766-9794]"
    }, {
      "left" : "Node fn = first;",
      "right" : "Node fn = first;",
      "info" : "VariableDeclarationStatement[9835-9851]:VariableDeclarationStatement[9803-9819]"
    }, {
      "left" : "Node parameters = fn.getChildAtIndex(1);",
      "right" : "Node parameters = fn.getChildAtIndex(1);",
      "info" : "VariableDeclarationStatement[9860-9900]:VariableDeclarationStatement[9828-9868]"
    }, {
      "left" : "Node body = fn.getLastChild();",
      "right" : "Node body = fn.getLastChild();",
      "info" : "VariableDeclarationStatement[9909-9939]:VariableDeclarationStatement[9877-9907]"
    }, {
      "left" : "if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name))",
      "right" : "if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name))",
      "info" : "IfStatement[9983-10474]:IfStatement[9951-10442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10202-10234]:Block[10170-10202]"
    }, {
      "left" : "add(name);",
      "right" : "add(name);",
      "info" : "ExpressionStatement[10214-10224]:ExpressionStatement[10182-10192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10240-10474]:Block[10208-10442]"
    }, {
      "left" : "double d = getSimpleNumber(name);",
      "right" : "double d = getSimpleNumber(name);",
      "info" : "VariableDeclarationStatement[10309-10342]:VariableDeclarationStatement[10277-10310]"
    }, {
      "left" : "if (!Double.isNaN(d))",
      "right" : "if (!Double.isNaN(d))",
      "info" : "IfStatement[10353-10464]:IfStatement[10321-10432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10375-10417]:Block[10343-10385]"
    }, {
      "left" : "cc.addNumber(d);",
      "right" : "cc.addNumber(d);",
      "info" : "ExpressionStatement[10389-10405]:ExpressionStatement[10357-10373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10423-10464]:Block[10391-10432]"
    }, {
      "left" : "addJsString(n);",
      "right" : "addJsString(n);",
      "info" : "ExpressionStatement[10437-10452]:ExpressionStatement[10405-10420]"
    }, {
      "left" : "add(parameters);",
      "right" : "add(parameters);",
      "info" : "ExpressionStatement[10484-10500]:ExpressionStatement[10452-10468]"
    }, {
      "left" : "add(body, Context.PRESERVE_BLOCK);",
      "right" : "add(body, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[10509-10543]:ExpressionStatement[10477-10511]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10552-10558]:BreakStatement[10520-10526]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[10566-10584]:SwitchCase[10534-10552]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[10591-10608]:SwitchCase[10559-10576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10609-11763]:Block[10577-11731]"
    }, {
      "left" : "if (n.getClass() != Node.class)",
      "right" : "if (n.getClass() != Node.class)",
      "info" : "IfStatement[10619-10718]:IfStatement[10587-10686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10651-10718]:Block[10619-10686]"
    }, {
      "left" : "throw new Error(\"Unexpected Node subclass.\");",
      "right" : "throw new Error(\"Unexpected Node subclass.\");",
      "info" : "ThrowStatement[10663-10708]:ThrowStatement[10631-10676]"
    }, {
      "left" : "boolean preserveBlock = context == Context.PRESERVE_BLOCK;",
      "right" : "boolean preserveBlock = context == Context.PRESERVE_BLOCK;",
      "info" : "VariableDeclarationStatement[10727-10785]:VariableDeclarationStatement[10695-10753]"
    }, {
      "left" : "if (preserveBlock)",
      "right" : "if (preserveBlock)",
      "info" : "IfStatement[10794-10851]:IfStatement[10762-10819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10813-10851]:Block[10781-10819]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[10825-10841]:ExpressionStatement[10793-10809]"
    }, {
      "left" : "boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());",
      "right" : "boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());",
      "info" : "VariableDeclarationStatement[10861-11077]:VariableDeclarationStatement[10829-11045]"
    }, {
      "left" : "for (Node c = first; c != null; c = c.getNext())",
      "right" : "for (Node c = first; c != null; c = c.getNext())",
      "info" : "ForStatement[11086-11622]:ForStatement[11054-11590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11135-11622]:Block[11103-11590]"
    }, {
      "left" : "add(c, Context.STATEMENT);",
      "right" : "add(c, Context.STATEMENT);",
      "info" : "ExpressionStatement[11147-11173]:ExpressionStatement[11115-11141]"
    }, {
      "left" : "if (c.isVar())",
      "right" : "if (c.isVar())",
      "info" : "IfStatement[11256-11315]:IfStatement[11224-11283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11271-11315]:Block[11239-11283]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[11285-11303]:ExpressionStatement[11253-11271]"
    }, {
      "left" : "if (c.isFunction())",
      "right" : "if (c.isFunction())",
      "info" : "IfStatement[11327-11393]:IfStatement[11295-11361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11347-11393]:Block[11315-11361]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[11361-11381]:ExpressionStatement[11329-11349]"
    }, {
      "left" : "if (preferLineBreaks)",
      "right" : "if (preferLineBreaks)",
      "info" : "IfStatement[11536-11612]:IfStatement[11504-11580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11558-11612]:Block[11526-11580]"
    }, {
      "left" : "cc.notePreferredLineBreak();",
      "right" : "cc.notePreferredLineBreak();",
      "info" : "ExpressionStatement[11572-11600]:ExpressionStatement[11540-11568]"
    }, {
      "left" : "if (preserveBlock)",
      "right" : "if (preserveBlock)",
      "info" : "IfStatement[11631-11740]:IfStatement[11599-11708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11650-11740]:Block[11618-11708]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[11662-11730]:ExpressionStatement[11630-11698]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11749-11755]:BreakStatement[11717-11723]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[11771-11786]:SwitchCase[11739-11754]"
    }, {
      "left" : "if (childCount == 4)",
      "right" : "if (childCount == 4)",
      "info" : "IfStatement[11795-12549]:IfStatement[11763-12517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11816-12259]:Block[11784-12227]"
    }, {
      "left" : "add(\"for(\");",
      "right" : "add(\"for(\");",
      "info" : "ExpressionStatement[11828-11840]:ExpressionStatement[11796-11808]"
    }, {
      "left" : "if (first.isVar())",
      "right" : "if (first.isVar())",
      "info" : "IfStatement[11851-12013]:IfStatement[11819-11981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11870-11935]:Block[11838-11903]"
    }, {
      "left" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
      "right" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
      "info" : "ExpressionStatement[11884-11923]:ExpressionStatement[11852-11891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11941-12013]:Block[11909-11981]"
    }, {
      "left" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
      "right" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
      "info" : "ExpressionStatement[11955-12001]:ExpressionStatement[11923-11969]"
    }, {
      "left" : "add(\";\");",
      "right" : "add(\";\");",
      "info" : "ExpressionStatement[12024-12033]:ExpressionStatement[11992-12001]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[12044-12065]:ExpressionStatement[12012-12033]"
    }, {
      "left" : "add(\";\");",
      "right" : "add(\";\");",
      "info" : "ExpressionStatement[12076-12085]:ExpressionStatement[12044-12053]"
    }, {
      "left" : "add(first.getNext().getNext());",
      "right" : "add(first.getNext().getNext());",
      "info" : "ExpressionStatement[12096-12127]:ExpressionStatement[12064-12095]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12138-12147]:ExpressionStatement[12106-12115]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[12158-12249]:ExpressionStatement[12126-12217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12265-12549]:Block[12233-12517]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[12277-12319]:ExpressionStatement[12245-12287]"
    }, {
      "left" : "add(\"for(\");",
      "right" : "add(\"for(\");",
      "info" : "ExpressionStatement[12330-12342]:ExpressionStatement[12298-12310]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[12353-12364]:ExpressionStatement[12321-12332]"
    }, {
      "left" : "add(\"in\");",
      "right" : "add(\"in\");",
      "info" : "ExpressionStatement[12375-12385]:ExpressionStatement[12343-12353]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[12396-12417]:ExpressionStatement[12364-12385]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12428-12437]:ExpressionStatement[12396-12405]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[12448-12539]:ExpressionStatement[12416-12507]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12558-12564]:BreakStatement[12526-12532]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[12572-12586]:SwitchCase[12540-12554]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[12595-12637]:ExpressionStatement[12563-12605]"
    }, {
      "left" : "add(\"do\");",
      "right" : "add(\"do\");",
      "info" : "ExpressionStatement[12646-12656]:ExpressionStatement[12614-12624]"
    }, {
      "left" : "addNonEmptyStatement(first, Context.OTHER, false);",
      "right" : "addNonEmptyStatement(first, Context.OTHER, false);",
      "info" : "ExpressionStatement[12665-12715]:ExpressionStatement[12633-12683]"
    }, {
      "left" : "add(\"while(\");",
      "right" : "add(\"while(\");",
      "info" : "ExpressionStatement[12724-12738]:ExpressionStatement[12692-12706]"
    }, {
      "left" : "add(last);",
      "right" : "add(last);",
      "info" : "ExpressionStatement[12747-12757]:ExpressionStatement[12715-12725]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12766-12775]:ExpressionStatement[12734-12743]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[12784-12802]:ExpressionStatement[12752-12770]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12811-12817]:BreakStatement[12779-12785]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[12825-12842]:SwitchCase[12793-12810]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[12851-12893]:ExpressionStatement[12819-12861]"
    }, {
      "left" : "add(\"while(\");",
      "right" : "add(\"while(\");",
      "info" : "ExpressionStatement[12902-12916]:ExpressionStatement[12870-12884]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[12925-12936]:ExpressionStatement[12893-12904]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12945-12954]:ExpressionStatement[12913-12922]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[12963-13052]:ExpressionStatement[12931-13020]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13061-13067]:BreakStatement[13029-13035]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[13075-13092]:SwitchCase[13043-13060]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[13101-13143]:ExpressionStatement[13069-13111]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13152-13158]:BreakStatement[13120-13126]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[13166-13185]:SwitchCase[13134-13153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13186-13742]:Block[13154-13710]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
      "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
      "info" : "ExpressionStatement[13196-13323]:ExpressionStatement[13164-13291]"
    }, {
      "left" : "Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");",
      "right" : "Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");",
      "info" : "ExpressionStatement[13332-13436]:ExpressionStatement[13300-13404]"
    }, {
      "left" : "boolean needsParens = (first.isNumber());",
      "right" : "boolean needsParens = (first.isNumber());",
      "info" : "VariableDeclarationStatement[13445-13486]:VariableDeclarationStatement[13413-13454]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[13495-13543]:IfStatement[13463-13511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13512-13543]:Block[13480-13511]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[13524-13533]:ExpressionStatement[13492-13501]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[13552-13603]:ExpressionStatement[13520-13571]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[13612-13660]:IfStatement[13580-13628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13629-13660]:Block[13597-13628]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[13641-13650]:ExpressionStatement[13609-13618]"
    }, {
      "left" : "add(\".\");",
      "right" : "add(\".\");",
      "info" : "ExpressionStatement[13669-13678]:ExpressionStatement[13637-13646]"
    }, {
      "left" : "addIdentifier(last.getString());",
      "right" : "addIdentifier(last.getString());",
      "info" : "ExpressionStatement[13687-13719]:ExpressionStatement[13655-13687]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13728-13734]:BreakStatement[13696-13702]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[13750-13769]:SwitchCase[13718-13737]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
      "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
      "info" : "ExpressionStatement[13778-13904]:ExpressionStatement[13746-13872]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[13913-13964]:ExpressionStatement[13881-13932]"
    }, {
      "left" : "add(\"[\");",
      "right" : "add(\"[\");",
      "info" : "ExpressionStatement[13973-13982]:ExpressionStatement[13941-13950]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[13991-14012]:ExpressionStatement[13959-13980]"
    }, {
      "left" : "add(\"]\");",
      "right" : "add(\"]\");",
      "info" : "ExpressionStatement[14021-14030]:ExpressionStatement[13989-13998]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14039-14045]:BreakStatement[14007-14013]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[14053-14069]:SwitchCase[14021-14037]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[14078-14120]:ExpressionStatement[14046-14088]"
    }, {
      "left" : "add(\"with(\");",
      "right" : "add(\"with(\");",
      "info" : "ExpressionStatement[14129-14142]:ExpressionStatement[14097-14110]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[14151-14162]:ExpressionStatement[14119-14130]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[14171-14180]:ExpressionStatement[14139-14148]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[14189-14278]:ExpressionStatement[14157-14246]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14287-14293]:BreakStatement[14255-14261]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[14301-14316]:SwitchCase[14269-14284]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[14323-14338]:SwitchCase[14291-14306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14339-14832]:Block[14307-14800]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[14349-14391]:ExpressionStatement[14317-14359]"
    }, {
      "left" : "String o = type == Token.INC ? \"++\" : \"--\";",
      "right" : "String o = type == Token.INC ? \"++\" : \"--\";",
      "info" : "VariableDeclarationStatement[14400-14443]:VariableDeclarationStatement[14368-14411]"
    }, {
      "left" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
      "right" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
      "info" : "VariableDeclarationStatement[14452-14500]:VariableDeclarationStatement[14420-14468]"
    }, {
      "left" : "if (postProp != 0)",
      "right" : "if (postProp != 0)",
      "info" : "IfStatement[14618-14809]:IfStatement[14586-14777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14637-14740]:Block[14605-14708]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[14649-14700]:ExpressionStatement[14617-14668]"
    }, {
      "left" : "cc.addOp(o, false);",
      "right" : "cc.addOp(o, false);",
      "info" : "ExpressionStatement[14711-14730]:ExpressionStatement[14679-14698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14746-14809]:Block[14714-14777]"
    }, {
      "left" : "cc.addOp(o, false);",
      "right" : "cc.addOp(o, false);",
      "info" : "ExpressionStatement[14758-14777]:ExpressionStatement[14726-14745]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[14788-14799]:ExpressionStatement[14756-14767]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14818-14824]:BreakStatement[14786-14792]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[14840-14856]:SwitchCase[14808-14824]"
    }, {
      "left" : "if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first))",
      "right" : "if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first))",
      "info" : "IfStatement[15441-15748]:IfStatement[15409-15716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15541-15669]:Block[15509-15637]"
    }, {
      "left" : "add(\"(0,\");",
      "right" : "add(\"(0,\");",
      "info" : "ExpressionStatement[15553-15564]:ExpressionStatement[15521-15532]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);",
      "right" : "addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);",
      "info" : "ExpressionStatement[15575-15639]:ExpressionStatement[15543-15607]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[15650-15659]:ExpressionStatement[15618-15627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15675-15748]:Block[15643-15716]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[15687-15738]:ExpressionStatement[15655-15706]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[15757-15766]:ExpressionStatement[15725-15734]"
    }, {
      "left" : "addList(first.getNext());",
      "right" : "addList(first.getNext());",
      "info" : "ExpressionStatement[15775-15800]:ExpressionStatement[15743-15768]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[15809-15818]:ExpressionStatement[15777-15786]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15827-15833]:BreakStatement[15795-15801]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[15841-15855]:SwitchCase[15809-15823]"
    }, {
      "left" : "boolean hasElse = childCount == 3;",
      "right" : "boolean hasElse = childCount == 3;",
      "info" : "VariableDeclarationStatement[15864-15898]:VariableDeclarationStatement[15832-15866]"
    }, {
      "left" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
      "right" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
      "info" : "VariableDeclarationStatement[15907-16001]:VariableDeclarationStatement[15875-15969]"
    }, {
      "left" : "if (ambiguousElseClause)",
      "right" : "if (ambiguousElseClause)",
      "info" : "IfStatement[16010-16073]:IfStatement[15978-16041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16035-16073]:Block[16003-16041]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[16047-16063]:ExpressionStatement[16015-16031]"
    }, {
      "left" : "add(\"if(\");",
      "right" : "add(\"if(\");",
      "info" : "ExpressionStatement[16083-16094]:ExpressionStatement[16051-16062]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[16103-16114]:ExpressionStatement[16071-16082]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[16123-16132]:ExpressionStatement[16091-16100]"
    }, {
      "left" : "if (hasElse)",
      "right" : "if (hasElse)",
      "info" : "IfStatement[16142-16533]:IfStatement[16110-16501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16155-16392]:Block[16123-16360]"
    }, {
      "left" : "addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
      "right" : "addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
      "info" : "ExpressionStatement[16167-16257]:ExpressionStatement[16135-16225]"
    }, {
      "left" : "add(\"else\");",
      "right" : "add(\"else\");",
      "info" : "ExpressionStatement[16268-16280]:ExpressionStatement[16236-16248]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[16291-16382]:ExpressionStatement[16259-16350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16398-16533]:Block[16366-16501]"
    }, {
      "left" : "addNonEmptyStatement(first.getNext(), Context.OTHER, false);",
      "right" : "addNonEmptyStatement(first.getNext(), Context.OTHER, false);",
      "info" : "ExpressionStatement[16410-16470]:ExpressionStatement[16378-16438]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[16481-16523]:ExpressionStatement[16449-16491]"
    }, {
      "left" : "if (ambiguousElseClause)",
      "right" : "if (ambiguousElseClause)",
      "info" : "IfStatement[16543-16604]:IfStatement[16511-16572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16568-16604]:Block[16536-16572]"
    }, {
      "left" : "cc.endBlock();",
      "right" : "cc.endBlock();",
      "info" : "ExpressionStatement[16580-16594]:ExpressionStatement[16548-16562]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16613-16619]:BreakStatement[16581-16587]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[16627-16643]:SwitchCase[16595-16611]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[16652-16694]:ExpressionStatement[16620-16662]"
    }, {
      "left" : "add(\"null\");",
      "right" : "add(\"null\");",
      "info" : "ExpressionStatement[16703-16715]:ExpressionStatement[16671-16683]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16724-16730]:BreakStatement[16692-16698]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[16738-16754]:SwitchCase[16706-16722]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[16763-16805]:ExpressionStatement[16731-16773]"
    }, {
      "left" : "add(\"this\");",
      "right" : "add(\"this\");",
      "info" : "ExpressionStatement[16814-16826]:ExpressionStatement[16782-16794]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16835-16841]:BreakStatement[16803-16809]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[16849-16866]:SwitchCase[16817-16834]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[16875-16917]:ExpressionStatement[16843-16885]"
    }, {
      "left" : "add(\"false\");",
      "right" : "add(\"false\");",
      "info" : "ExpressionStatement[16926-16939]:ExpressionStatement[16894-16907]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16948-16954]:BreakStatement[16916-16922]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[16962-16978]:SwitchCase[16930-16946]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[16987-17029]:ExpressionStatement[16955-16997]"
    }, {
      "left" : "add(\"true\");",
      "right" : "add(\"true\");",
      "info" : "ExpressionStatement[17038-17050]:ExpressionStatement[17006-17018]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17059-17065]:BreakStatement[17027-17033]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[17073-17093]:SwitchCase[17041-17061]"
    }, {
      "left" : "Preconditions.checkState(childCount <= 1);",
      "right" : "Preconditions.checkState(childCount <= 1);",
      "info" : "ExpressionStatement[17102-17144]:ExpressionStatement[17070-17112]"
    }, {
      "left" : "add(\"continue\");",
      "right" : "add(\"continue\");",
      "info" : "ExpressionStatement[17153-17169]:ExpressionStatement[17121-17137]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[17178-17379]:IfStatement[17146-17347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17199-17379]:Block[17167-17347]"
    }, {
      "left" : "if (!first.isLabelName())",
      "right" : "if (!first.isLabelName())",
      "info" : "IfStatement[17211-17327]:IfStatement[17179-17295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17237-17327]:Block[17205-17295]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[17251-17315]:ThrowStatement[17219-17283]"
    }, {
      "left" : "add(\" \");",
      "right" : "add(\" \");",
      "info" : "ExpressionStatement[17338-17347]:ExpressionStatement[17306-17315]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[17358-17369]:ExpressionStatement[17326-17337]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[17388-17406]:ExpressionStatement[17356-17374]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17415-17421]:BreakStatement[17383-17389]"
    }, {
      "left" : "case Token.DEBUGGER:",
      "right" : "case Token.DEBUGGER:",
      "info" : "SwitchCase[17429-17449]:SwitchCase[17397-17417]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[17458-17500]:ExpressionStatement[17426-17468]"
    }, {
      "left" : "add(\"debugger\");",
      "right" : "add(\"debugger\");",
      "info" : "ExpressionStatement[17509-17525]:ExpressionStatement[17477-17493]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[17534-17552]:ExpressionStatement[17502-17520]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17561-17567]:BreakStatement[17529-17535]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[17575-17592]:SwitchCase[17543-17560]"
    }, {
      "left" : "Preconditions.checkState(childCount <= 1);",
      "right" : "Preconditions.checkState(childCount <= 1);",
      "info" : "ExpressionStatement[17601-17643]:ExpressionStatement[17569-17611]"
    }, {
      "left" : "add(\"break\");",
      "right" : "add(\"break\");",
      "info" : "ExpressionStatement[17652-17665]:ExpressionStatement[17620-17633]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[17674-17875]:IfStatement[17642-17843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17695-17875]:Block[17663-17843]"
    }, {
      "left" : "if (!first.isLabelName())",
      "right" : "if (!first.isLabelName())",
      "info" : "IfStatement[17707-17823]:IfStatement[17675-17791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17733-17823]:Block[17701-17791]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[17747-17811]:ThrowStatement[17715-17779]"
    }, {
      "left" : "add(\" \");",
      "right" : "add(\" \");",
      "info" : "ExpressionStatement[17834-17843]:ExpressionStatement[17802-17811]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[17854-17865]:ExpressionStatement[17822-17833]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[17884-17902]:ExpressionStatement[17852-17870]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17911-17917]:BreakStatement[17879-17885]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[17925-17948]:SwitchCase[17893-17916]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[17957-17999]:ExpressionStatement[17925-17967]"
    }, {
      "left" : "add(first, Context.START_OF_EXPR);",
      "right" : "add(first, Context.START_OF_EXPR);",
      "info" : "ExpressionStatement[18008-18042]:ExpressionStatement[17976-18010]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[18051-18069]:ExpressionStatement[18019-18037]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18078-18084]:BreakStatement[18046-18052]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[18092-18107]:SwitchCase[18060-18075]"
    }, {
      "left" : "add(\"new \");",
      "right" : "add(\"new \");",
      "info" : "ExpressionStatement[18116-18128]:ExpressionStatement[18084-18096]"
    }, {
      "left" : "int precedence = NodeUtil.precedence(type);",
      "right" : "int precedence = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[18137-18180]:VariableDeclarationStatement[18105-18148]"
    }, {
      "left" : "if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION))",
      "right" : "if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION))",
      "info" : "IfStatement[18413-18577]:IfStatement[18381-18545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18501-18577]:Block[18469-18545]"
    }, {
      "left" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
      "right" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
      "info" : "ExpressionStatement[18513-18567]:ExpressionStatement[18481-18535]"
    }, {
      "left" : "addExpr(first, precedence, Context.OTHER);",
      "right" : "addExpr(first, precedence, Context.OTHER);",
      "info" : "ExpressionStatement[18586-18628]:ExpressionStatement[18554-18596]"
    }, {
      "left" : "Node next = first.getNext();",
      "right" : "Node next = first.getNext();",
      "info" : "VariableDeclarationStatement[18696-18724]:VariableDeclarationStatement[18664-18692]"
    }, {
      "left" : "if (next != null)",
      "right" : "if (next != null)",
      "info" : "IfStatement[18733-18827]:IfStatement[18701-18795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18751-18827]:Block[18719-18795]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[18763-18772]:ExpressionStatement[18731-18740]"
    }, {
      "left" : "addList(next);",
      "right" : "addList(next);",
      "info" : "ExpressionStatement[18783-18797]:ExpressionStatement[18751-18765]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[18808-18817]:ExpressionStatement[18776-18785]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18836-18842]:BreakStatement[18804-18810]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[18850-18868]:SwitchCase[18818-18836]"
    }, {
      "left" : "if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().isObjectLit()) ? 1 : 0))",
      "right" : "if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().isObjectLit()) ? 1 : 0))",
      "info" : "IfStatement[18877-19119]:IfStatement[18845-19087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18987-19119]:Block[18955-19087]"
    }, {
      "left" : "throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());",
      "right" : "throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());",
      "info" : "ThrowStatement[18999-19109]:ThrowStatement[18967-19077]"
    }, {
      "left" : "addJsString(n);",
      "right" : "addJsString(n);",
      "info" : "ExpressionStatement[19128-19143]:ExpressionStatement[19096-19111]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19152-19158]:BreakStatement[19120-19126]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[19166-19185]:SwitchCase[19134-19153]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[19194-19236]:ExpressionStatement[19162-19204]"
    }, {
      "left" : "add(\"delete \");",
      "right" : "add(\"delete \");",
      "info" : "ExpressionStatement[19245-19260]:ExpressionStatement[19213-19228]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[19269-19280]:ExpressionStatement[19237-19248]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19289-19295]:BreakStatement[19257-19263]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[19303-19324]:SwitchCase[19271-19292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19325-20719]:Block[19293-20687]"
    }, {
      "left" : "boolean needsParens = (context == Context.START_OF_EXPR);",
      "right" : "boolean needsParens = (context == Context.START_OF_EXPR);",
      "info" : "VariableDeclarationStatement[19335-19392]:VariableDeclarationStatement[19303-19360]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[19401-19449]:IfStatement[19369-19417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19418-19449]:Block[19386-19417]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[19430-19439]:ExpressionStatement[19398-19407]"
    }, {
      "left" : "add(\"{\");",
      "right" : "add(\"{\");",
      "info" : "ExpressionStatement[19458-19467]:ExpressionStatement[19426-19435]"
    }, {
      "left" : "for (Node c = first; c != null; c = c.getNext())",
      "right" : "for (Node c = first; c != null; c = c.getNext())",
      "info" : "ForStatement[19476-20621]:ForStatement[19444-20589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19525-20621]:Block[19493-20589]"
    }, {
      "left" : "if (c != first)",
      "right" : "if (c != first)",
      "info" : "IfStatement[19537-19598]:IfStatement[19505-19566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19553-19598]:Block[19521-19566]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[19567-19586]:ExpressionStatement[19535-19554]"
    }, {
      "left" : "if (c.isGetterDef() || c.isSetterDef())",
      "right" : "if (c.isGetterDef() || c.isSetterDef())",
      "info" : "IfStatement[19610-20611]:IfStatement[19578-20579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19650-19683]:Block[19618-19651]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[19664-19671]:ExpressionStatement[19632-19639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19689-20611]:Block[19657-20579]"
    }, {
      "left" : "Preconditions.checkState(c.isString());",
      "right" : "Preconditions.checkState(c.isString());",
      "info" : "ExpressionStatement[19703-19742]:ExpressionStatement[19671-19710]"
    }, {
      "left" : "String key = c.getString();",
      "right" : "String key = c.getString();",
      "info" : "VariableDeclarationStatement[19755-19782]:VariableDeclarationStatement[19723-19750]"
    }, {
      "left" : "if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key))",
      "right" : "if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key))",
      "info" : "IfStatement[19915-20519]:IfStatement[19883-20487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20195-20234]:Block[20163-20202]"
    }, {
      "left" : "add(key);",
      "right" : "add(key);",
      "info" : "ExpressionStatement[20211-20220]:ExpressionStatement[20179-20188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20240-20519]:Block[20208-20487]"
    }, {
      "left" : "double d = getSimpleNumber(key);",
      "right" : "double d = getSimpleNumber(key);",
      "info" : "VariableDeclarationStatement[20317-20349]:VariableDeclarationStatement[20285-20317]"
    }, {
      "left" : "if (!Double.isNaN(d))",
      "right" : "if (!Double.isNaN(d))",
      "info" : "IfStatement[20364-20505]:IfStatement[20332-20473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20386-20436]:Block[20354-20404]"
    }, {
      "left" : "cc.addNumber(d);",
      "right" : "cc.addNumber(d);",
      "info" : "ExpressionStatement[20404-20420]:ExpressionStatement[20372-20388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20442-20505]:Block[20410-20473]"
    }, {
      "left" : "addExpr(c, 1, Context.OTHER);",
      "right" : "addExpr(c, 1, Context.OTHER);",
      "info" : "ExpressionStatement[20460-20489]:ExpressionStatement[20428-20457]"
    }, {
      "left" : "add(\":\");",
      "right" : "add(\":\");",
      "info" : "ExpressionStatement[20532-20541]:ExpressionStatement[20500-20509]"
    }, {
      "left" : "addExpr(c.getFirstChild(), 1, Context.OTHER);",
      "right" : "addExpr(c.getFirstChild(), 1, Context.OTHER);",
      "info" : "ExpressionStatement[20554-20599]:ExpressionStatement[20522-20567]"
    }, {
      "left" : "add(\"}\");",
      "right" : "add(\"}\");",
      "info" : "ExpressionStatement[20630-20639]:ExpressionStatement[20598-20607]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[20648-20696]:IfStatement[20616-20664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20665-20696]:Block[20633-20664]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[20677-20686]:ExpressionStatement[20645-20654]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20705-20711]:BreakStatement[20673-20679]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[20727-20745]:SwitchCase[20695-20713]"
    }, {
      "left" : "add(\"switch(\");",
      "right" : "add(\"switch(\");",
      "info" : "ExpressionStatement[20754-20769]:ExpressionStatement[20722-20737]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[20778-20789]:ExpressionStatement[20746-20757]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[20798-20807]:ExpressionStatement[20766-20775]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[20816-20832]:ExpressionStatement[20784-20800]"
    }, {
      "left" : "addAllSiblings(first.getNext());",
      "right" : "addAllSiblings(first.getNext());",
      "info" : "ExpressionStatement[20841-20873]:ExpressionStatement[20809-20841]"
    }, {
      "left" : "cc.endBlock(context == Context.STATEMENT);",
      "right" : "cc.endBlock(context == Context.STATEMENT);",
      "info" : "ExpressionStatement[20882-20924]:ExpressionStatement[20850-20892]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20933-20939]:BreakStatement[20901-20907]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[20947-20963]:SwitchCase[20915-20931]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[20972-21014]:ExpressionStatement[20940-20982]"
    }, {
      "left" : "add(\"case \");",
      "right" : "add(\"case \");",
      "info" : "ExpressionStatement[21023-21036]:ExpressionStatement[20991-21004]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[21045-21056]:ExpressionStatement[21013-21024]"
    }, {
      "left" : "addCaseBody(last);",
      "right" : "addCaseBody(last);",
      "info" : "ExpressionStatement[21065-21083]:ExpressionStatement[21033-21051]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21092-21098]:BreakStatement[21060-21066]"
    }, {
      "left" : "case Token.DEFAULT_CASE:",
      "right" : "case Token.DEFAULT_CASE:",
      "info" : "SwitchCase[21106-21130]:SwitchCase[21074-21098]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[21139-21181]:ExpressionStatement[21107-21149]"
    }, {
      "left" : "add(\"default\");",
      "right" : "add(\"default\");",
      "info" : "ExpressionStatement[21190-21205]:ExpressionStatement[21158-21173]"
    }, {
      "left" : "addCaseBody(first);",
      "right" : "addCaseBody(first);",
      "info" : "ExpressionStatement[21214-21233]:ExpressionStatement[21182-21201]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21242-21248]:BreakStatement[21210-21216]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[21256-21273]:SwitchCase[21224-21241]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[21282-21324]:ExpressionStatement[21250-21292]"
    }, {
      "left" : "if (!first.isLabelName())",
      "right" : "if (!first.isLabelName())",
      "info" : "IfStatement[21333-21445]:IfStatement[21301-21413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21359-21445]:Block[21327-21413]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[21371-21435]:ThrowStatement[21339-21403]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[21454-21465]:ExpressionStatement[21422-21433]"
    }, {
      "left" : "add(\":\");",
      "right" : "add(\":\");",
      "info" : "ExpressionStatement[21474-21483]:ExpressionStatement[21442-21451]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);",
      "info" : "ExpressionStatement[21492-21580]:ExpressionStatement[21460-21548]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21589-21595]:BreakStatement[21557-21563]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[21603-21611]:SwitchCase[21571-21579]"
    }, {
      "left" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
      "right" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
      "info" : "ThrowStatement[21620-21686]:ThrowStatement[21588-21654]"
    }, {
      "left" : "cc.endSourceMapping(n);",
      "right" : "cc.endSourceMapping(n);",
      "info" : "ExpressionStatement[21698-21721]:ExpressionStatement[21666-21689]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21970-21977]:Modifier[21938-21945]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21978-21982]:PrimitiveType[21946-21950]"
    }, {
      "left" : "unrollBinaryOperator",
      "right" : "unrollBinaryOperator",
      "info" : "SimpleName[21983-22003]:SimpleName[21951-21971]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22011-22017]:SingleVariableDeclaration[21979-21985]"
    }, {
      "left" : "int op",
      "right" : "int op",
      "info" : "SingleVariableDeclaration[22019-22025]:SingleVariableDeclaration[21987-21993]"
    }, {
      "left" : "String opStr",
      "right" : "String opStr",
      "info" : "SingleVariableDeclaration[22027-22039]:SingleVariableDeclaration[21995-22007]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[22041-22056]:SingleVariableDeclaration[22009-22024]"
    }, {
      "left" : "Context rhsContext",
      "right" : "Context rhsContext",
      "info" : "SingleVariableDeclaration[22064-22082]:SingleVariableDeclaration[22032-22050]"
    }, {
      "left" : "int leftPrecedence",
      "right" : "int leftPrecedence",
      "info" : "SingleVariableDeclaration[22084-22102]:SingleVariableDeclaration[22052-22070]"
    }, {
      "left" : "int rightPrecedence",
      "right" : "int rightPrecedence",
      "info" : "SingleVariableDeclaration[22104-22123]:SingleVariableDeclaration[22072-22091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22125-22563]:Block[22093-22534]"
    }, {
      "left" : "Node firstNonOperator = n.getFirstChild();",
      "right" : "Node firstNonOperator = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[22131-22173]:VariableDeclarationStatement[22099-22141]"
    }, {
      "left" : "while (firstNonOperator.getType() == op)",
      "right" : "while (firstNonOperator.getType() == op)",
      "info" : "WhileStatement[22178-22285]:WhileStatement[22146-22253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22219-22285]:Block[22187-22253]"
    }, {
      "left" : "firstNonOperator = firstNonOperator.getFirstChild();",
      "right" : "firstNonOperator = firstNonOperator.getFirstChild();",
      "info" : "ExpressionStatement[22227-22279]:ExpressionStatement[22195-22247]"
    }, {
      "left" : "addExpr(firstNonOperator, leftPrecedence, context);",
      "right" : "addExpr(firstNonOperator, leftPrecedence, context);",
      "info" : "ExpressionStatement[22291-22342]:ExpressionStatement[22259-22310]"
    }, {
      "left" : "Node current = firstNonOperator;",
      "right" : "Node current = firstNonOperator;",
      "info" : "VariableDeclarationStatement[22348-22380]:VariableDeclarationStatement[22316-22348]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[22385-22559]:DoStatement[22353-22530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22388-22537]:Block[22356-22508]"
    }, {
      "left" : "current = current.getParent();",
      "right" : "current = current.getParent();",
      "info" : "ExpressionStatement[22396-22426]:ExpressionStatement[22364-22394]"
    }, {
      "left" : "addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);",
      "right" : "addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);",
      "info" : "ExpressionStatement[22459-22531]:ExpressionStatement[22430-22502]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22567-22573]:Modifier[22538-22544]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22574-22581]:PrimitiveType[22545-22552]"
    }, {
      "left" : "isSimpleNumber",
      "right" : "isSimpleNumber",
      "info" : "SimpleName[22582-22596]:SimpleName[22553-22567]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[22597-22605]:SingleVariableDeclaration[22568-22576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22607-22828]:Block[22578-22799]"
    }, {
      "left" : "int len = s.length();",
      "right" : "int len = s.length();",
      "info" : "VariableDeclarationStatement[22613-22634]:VariableDeclarationStatement[22584-22605]"
    }, {
      "left" : "for (int index = 0; index < len; index++)",
      "right" : "for (int index = 0; index < len; index++)",
      "info" : "ForStatement[22639-22782]:ForStatement[22610-22753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22681-22782]:Block[22652-22753]"
    }, {
      "left" : "char c = s.charAt(index);",
      "right" : "char c = s.charAt(index);",
      "info" : "VariableDeclarationStatement[22689-22714]:VariableDeclarationStatement[22660-22685]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[22721-22776]:IfStatement[22692-22747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22745-22776]:Block[22716-22747]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22755-22768]:ReturnStatement[22726-22739]"
    }, {
      "left" : "return len > 0 && s.charAt(0) != '0';",
      "right" : "return len > 0 && s.charAt(0) != '0';",
      "info" : "ReturnStatement[22787-22824]:ReturnStatement[22758-22795]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22832-22838]:Modifier[22803-22809]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[22839-22845]:PrimitiveType[22810-22816]"
    }, {
      "left" : "getSimpleNumber",
      "right" : "getSimpleNumber",
      "info" : "SimpleName[22846-22861]:SimpleName[22817-22832]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[22862-22870]:SingleVariableDeclaration[22833-22841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22872-23185]:Block[22843-23156]"
    }, {
      "left" : "if (isSimpleNumber(s))",
      "right" : "if (isSimpleNumber(s))",
      "info" : "IfStatement[22878-23158]:IfStatement[22849-23129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22901-23158]:Block[22872-23129]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[22909-23152]:TryStatement[22880-23123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22913-23044]:Block[22884-23015]"
    }, {
      "left" : "long l = Long.parseLong(s);",
      "right" : "long l = Long.parseLong(s);",
      "info" : "VariableDeclarationStatement[22923-22950]:VariableDeclarationStatement[22894-22921]"
    }, {
      "left" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
      "right" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
      "info" : "IfStatement[22959-23036]:IfStatement[22930-23007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23005-23036]:Block[22976-23007]"
    }, {
      "left" : "return l;",
      "right" : "return l;",
      "info" : "ReturnStatement[23017-23026]:ReturnStatement[22988-22997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23077-23152]:Block[23048-23123]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[23163-23181]:ReturnStatement[23134-23152]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23252-23259]:Modifier[23223-23230]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23260-23267]:PrimitiveType[23231-23238]"
    }, {
      "left" : "isIndirectEval",
      "right" : "isIndirectEval",
      "info" : "SimpleName[23268-23282]:SimpleName[23239-23253]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23283-23289]:SingleVariableDeclaration[23254-23260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23291-23398]:Block[23262-23369]"
    }, {
      "left" : "return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "right" : "return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "info" : "ReturnStatement[23297-23394]:ReturnStatement[23268-23365]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23675-23682]:Modifier[23646-23653]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23683-23687]:PrimitiveType[23654-23658]"
    }, {
      "left" : "addNonEmptyStatement",
      "right" : "addNonEmptyStatement",
      "info" : "SimpleName[23688-23708]:SimpleName[23659-23679]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23716-23722]:SingleVariableDeclaration[23687-23693]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[23724-23739]:SingleVariableDeclaration[23695-23710]"
    }, {
      "left" : "boolean allowNonBlockChild",
      "right" : "boolean allowNonBlockChild",
      "info" : "SingleVariableDeclaration[23741-23767]:SingleVariableDeclaration[23712-23738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23769-25499]:Block[23740-25470]"
    }, {
      "left" : "Node nodeToProcess = n;",
      "right" : "Node nodeToProcess = n;",
      "info" : "VariableDeclarationStatement[23775-23798]:VariableDeclarationStatement[23746-23769]"
    }, {
      "left" : "if (!allowNonBlockChild && !n.isBlock())",
      "right" : "if (!allowNonBlockChild && !n.isBlock())",
      "info" : "IfStatement[23804-23899]:IfStatement[23775-23870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23845-23899]:Block[23816-23870]"
    }, {
      "left" : "throw new Error(\"Missing BLOCK child.\");",
      "right" : "throw new Error(\"Missing BLOCK child.\");",
      "info" : "ThrowStatement[23853-23893]:ThrowStatement[23824-23864]"
    }, {
      "left" : "if (n.isBlock())",
      "right" : "if (n.isBlock())",
      "info" : "IfStatement[24030-25156]:IfStatement[24001-25127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24047-25156]:Block[24018-25127]"
    }, {
      "left" : "int count = getNonEmptyChildCount(n, 2);",
      "right" : "int count = getNonEmptyChildCount(n, 2);",
      "info" : "VariableDeclarationStatement[24055-24095]:VariableDeclarationStatement[24026-24066]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[24102-24355]:IfStatement[24073-24326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24118-24355]:Block[24089-24326]"
    }, {
      "left" : "if (cc.shouldPreserveExtraBlocks())",
      "right" : "if (cc.shouldPreserveExtraBlocks())",
      "info" : "IfStatement[24128-24331]:IfStatement[24099-24302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24164-24281]:Block[24135-24252]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[24176-24192]:ExpressionStatement[24147-24163]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[24203-24271]:ExpressionStatement[24174-24242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24287-24331]:Block[24258-24302]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[24299-24321]:ExpressionStatement[24270-24292]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24340-24347]:ReturnStatement[24311-24318]"
    }, {
      "left" : "if (count == 1)",
      "right" : "if (count == 1)",
      "info" : "IfStatement[24363-25076]:IfStatement[24334-25047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24379-25076]:Block[24350-25047]"
    }, {
      "left" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "right" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "info" : "VariableDeclarationStatement[24547-24597]:VariableDeclarationStatement[24518-24568]"
    }, {
      "left" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "right" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "info" : "VariableDeclarationStatement[24606-24665]:VariableDeclarationStatement[24577-24636]"
    }, {
      "left" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "right" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "info" : "IfStatement[24674-25068]:IfStatement[24645-25039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24744-24963]:Block[24715-24934]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[24756-24772]:ExpressionStatement[24727-24743]"
    }, {
      "left" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "right" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "info" : "ExpressionStatement[24783-24825]:ExpressionStatement[24754-24796]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[24836-24856]:ExpressionStatement[24807-24827]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[24867-24935]:ExpressionStatement[24838-24906]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24946-24953]:ReturnStatement[24917-24924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24969-25068]:Block[24940-25039]"
    }, {
      "left" : "nodeToProcess = firstAndOnlyChild;",
      "right" : "nodeToProcess = firstAndOnlyChild;",
      "info" : "ExpressionStatement[25024-25058]:ExpressionStatement[24995-25029]"
    }, {
      "left" : "if (count > 1)",
      "right" : "if (count > 1)",
      "info" : "IfStatement[25084-25150]:IfStatement[25055-25121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25099-25150]:Block[25070-25121]"
    }, {
      "left" : "context = Context.PRESERVE_BLOCK;",
      "right" : "context = Context.PRESERVE_BLOCK;",
      "info" : "ExpressionStatement[25109-25142]:ExpressionStatement[25080-25113]"
    }, {
      "left" : "if (nodeToProcess.isEmpty())",
      "right" : "if (nodeToProcess.isEmpty())",
      "info" : "IfStatement[25162-25495]:IfStatement[25133-25466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25191-25227]:Block[25162-25198]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[25199-25221]:ExpressionStatement[25170-25192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25233-25495]:Block[25204-25466]"
    }, {
      "left" : "add(nodeToProcess, context);",
      "right" : "add(nodeToProcess, context);",
      "info" : "ExpressionStatement[25241-25269]:ExpressionStatement[25212-25240]"
    }, {
      "left" : "if (nodeToProcess.isVar())",
      "right" : "if (nodeToProcess.isVar())",
      "info" : "IfStatement[25426-25489]:IfStatement[25397-25460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25453-25489]:Block[25424-25460]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[25463-25481]:ExpressionStatement[25434-25452]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25596-25603]:Modifier[25567-25574]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25604-25611]:PrimitiveType[25575-25582]"
    }, {
      "left" : "isOneExactlyFunctionOrDo",
      "right" : "isOneExactlyFunctionOrDo",
      "info" : "SimpleName[25612-25636]:SimpleName[25583-25607]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25637-25643]:SingleVariableDeclaration[25608-25614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25645-26359]:Block[25616-26330]"
    }, {
      "left" : "if (n.isLabel())",
      "right" : "if (n.isLabel())",
      "info" : "IfStatement[25651-26355]:IfStatement[25622-26326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25668-26299]:Block[25639-26270]"
    }, {
      "left" : "Node labeledStatement = n.getLastChild();",
      "right" : "Node labeledStatement = n.getLastChild();",
      "info" : "VariableDeclarationStatement[25676-25717]:VariableDeclarationStatement[25647-25688]"
    }, {
      "left" : "if (!labeledStatement.isBlock())",
      "right" : "if (!labeledStatement.isBlock())",
      "info" : "IfStatement[25724-26293]:IfStatement[25695-26264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25757-25825]:Block[25728-25796]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "right" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "info" : "ReturnStatement[25767-25817]:ReturnStatement[25738-25788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25831-26293]:Block[25802-26264]"
    }, {
      "left" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "right" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "info" : "IfStatement[26006-26285]:IfStatement[25977-26256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26044-26124]:Block[26015-26095]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "right" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "info" : "ReturnStatement[26056-26114]:ReturnStatement[26027-26085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26130-26285]:Block[26101-26256]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26262-26275]:ReturnStatement[26233-26246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26305-26355]:Block[26276-26326]"
    }, {
      "left" : "return (n.isFunction() || n.isDo());",
      "right" : "return (n.isFunction() || n.isDo());",
      "info" : "ReturnStatement[26313-26349]:ReturnStatement[26284-26320]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26363-26370]:Modifier[26334-26341]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26371-26375]:PrimitiveType[26342-26346]"
    }, {
      "left" : "addExpr",
      "right" : "addExpr",
      "info" : "SimpleName[26376-26383]:SimpleName[26347-26354]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26384-26390]:SingleVariableDeclaration[26355-26361]"
    }, {
      "left" : "int minPrecedence",
      "right" : "int minPrecedence",
      "info" : "SingleVariableDeclaration[26392-26409]:SingleVariableDeclaration[26363-26380]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[26411-26426]:SingleVariableDeclaration[26382-26397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26428-26695]:Block[26399-26666]"
    }, {
      "left" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.isIn())))",
      "right" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.isIn())))",
      "info" : "IfStatement[26434-26691]:IfStatement[26405-26662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26564-26655]:Block[26535-26626]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[26572-26581]:ExpressionStatement[26543-26552]"
    }, {
      "left" : "add(n, clearContextForNoInOperator(context));",
      "right" : "add(n, clearContextForNoInOperator(context));",
      "info" : "ExpressionStatement[26588-26633]:ExpressionStatement[26559-26604]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[26640-26649]:ExpressionStatement[26611-26620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26661-26691]:Block[26632-26662]"
    }, {
      "left" : "add(n, context);",
      "right" : "add(n, context);",
      "info" : "ExpressionStatement[26669-26685]:ExpressionStatement[26640-26656]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26699-26703]:PrimitiveType[26670-26674]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[26704-26711]:SimpleName[26675-26682]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[26712-26728]:SingleVariableDeclaration[26683-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26730-26782]:Block[26701-26753]"
    }, {
      "left" : "addList(firstInList, true, Context.OTHER);",
      "right" : "addList(firstInList, true, Context.OTHER);",
      "info" : "ExpressionStatement[26736-26778]:ExpressionStatement[26707-26749]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26786-26790]:PrimitiveType[26757-26761]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[26791-26798]:SimpleName[26762-26769]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[26799-26815]:SingleVariableDeclaration[26770-26786]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[26817-26850]:SingleVariableDeclaration[26788-26821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26852-26925]:Block[26823-26896]"
    }, {
      "left" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "right" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "info" : "ExpressionStatement[26858-26921]:ExpressionStatement[26829-26892]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26929-26933]:PrimitiveType[26900-26904]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[26934-26941]:SimpleName[26905-26912]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[26942-26958]:SingleVariableDeclaration[26913-26929]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[26960-26993]:SingleVariableDeclaration[26931-26964]"
    }, {
      "left" : "Context lhsContext",
      "right" : "Context lhsContext",
      "info" : "SingleVariableDeclaration[27010-27028]:SingleVariableDeclaration[26981-26999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27030-27353]:Block[27001-27324]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[27036-27349]:ForStatement[27007-27320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27091-27349]:Block[27062-27320]"
    }, {
      "left" : "boolean isFirst = n == firstInList;",
      "right" : "boolean isFirst = n == firstInList;",
      "info" : "VariableDeclarationStatement[27099-27134]:VariableDeclarationStatement[27070-27105]"
    }, {
      "left" : "if (isFirst)",
      "right" : "if (isFirst)",
      "info" : "IfStatement[27141-27343]:IfStatement[27112-27314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27154-27230]:Block[27125-27201]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "info" : "ExpressionStatement[27164-27222]:ExpressionStatement[27135-27193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27236-27343]:Block[27207-27314]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[27246-27265]:ExpressionStatement[27217-27236]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, Context.OTHER);",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, Context.OTHER);",
      "info" : "ExpressionStatement[27274-27335]:ExpressionStatement[27245-27306]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27708-27712]:PrimitiveType[27679-27683]"
    }, {
      "left" : "addArrayList",
      "right" : "addArrayList",
      "info" : "SimpleName[27713-27725]:SimpleName[27684-27696]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[27726-27742]:SingleVariableDeclaration[27697-27713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27744-28043]:Block[27715-28014]"
    }, {
      "left" : "boolean lastWasEmpty = false;",
      "right" : "boolean lastWasEmpty = false;",
      "info" : "VariableDeclarationStatement[27750-27779]:VariableDeclarationStatement[27721-27750]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[27784-27982]:ForStatement[27755-27953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27839-27982]:Block[27810-27953]"
    }, {
      "left" : "if (n != firstInList)",
      "right" : "if (n != firstInList)",
      "info" : "IfStatement[27847-27906]:IfStatement[27818-27877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27869-27906]:Block[27840-27877]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[27879-27898]:ExpressionStatement[27850-27869]"
    }, {
      "left" : "addExpr(n, 1, Context.OTHER);",
      "right" : "addExpr(n, 1, Context.OTHER);",
      "info" : "ExpressionStatement[27913-27942]:ExpressionStatement[27884-27913]"
    }, {
      "left" : "lastWasEmpty = n.isEmpty();",
      "right" : "lastWasEmpty = n.isEmpty();",
      "info" : "ExpressionStatement[27949-27976]:ExpressionStatement[27920-27947]"
    }, {
      "left" : "if (lastWasEmpty)",
      "right" : "if (lastWasEmpty)",
      "info" : "IfStatement[27988-28039]:IfStatement[27959-28010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28006-28039]:Block[27977-28010]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[28014-28033]:ExpressionStatement[27985-28004]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28047-28051]:PrimitiveType[28018-28022]"
    }, {
      "left" : "addCaseBody",
      "right" : "addCaseBody",
      "info" : "SimpleName[28052-28063]:SimpleName[28023-28034]"
    }, {
      "left" : "Node caseBody",
      "right" : "Node caseBody",
      "info" : "SingleVariableDeclaration[28064-28077]:SingleVariableDeclaration[28035-28048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28079-28149]:Block[28050-28120]"
    }, {
      "left" : "cc.beginCaseBody();",
      "right" : "cc.beginCaseBody();",
      "info" : "ExpressionStatement[28085-28104]:ExpressionStatement[28056-28075]"
    }, {
      "left" : "add(caseBody);",
      "right" : "add(caseBody);",
      "info" : "ExpressionStatement[28109-28123]:ExpressionStatement[28080-28094]"
    }, {
      "left" : "cc.endCaseBody();",
      "right" : "cc.endCaseBody();",
      "info" : "ExpressionStatement[28128-28145]:ExpressionStatement[28099-28116]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28153-28157]:PrimitiveType[28124-28128]"
    }, {
      "left" : "addAllSiblings",
      "right" : "addAllSiblings",
      "info" : "SimpleName[28158-28172]:SimpleName[28129-28143]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28173-28179]:SingleVariableDeclaration[28144-28150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28181-28257]:Block[28152-28228]"
    }, {
      "left" : "for (Node c = n; c != null; c = c.getNext())",
      "right" : "for (Node c = n; c != null; c = c.getNext())",
      "info" : "ForStatement[28187-28253]:ForStatement[28158-28224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28232-28253]:Block[28203-28224]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[28240-28247]:ExpressionStatement[28211-28218]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28341-28348]:Modifier[28312-28319]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28349-28353]:PrimitiveType[28320-28324]"
    }, {
      "left" : "addJsString",
      "right" : "addJsString",
      "info" : "SimpleName[28354-28365]:SimpleName[28325-28336]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28366-28372]:SingleVariableDeclaration[28337-28343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28374-28752]:Block[28345-28723]"
    }, {
      "left" : "String s = n.getString();",
      "right" : "String s = n.getString();",
      "info" : "VariableDeclarationStatement[28380-28405]:VariableDeclarationStatement[28351-28376]"
    }, {
      "left" : "boolean useSlashV = n.getBooleanProp(Node.SLASH_V);",
      "right" : "boolean useSlashV = n.getBooleanProp(Node.SLASH_V);",
      "info" : "VariableDeclarationStatement[28410-28461]:VariableDeclarationStatement[28381-28432]"
    }, {
      "left" : "if (useSlashV)",
      "right" : "if (useSlashV)",
      "info" : "IfStatement[28466-28748]:IfStatement[28437-28719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28481-28535]:Block[28452-28506]"
    }, {
      "left" : "add(jsString(n.getString(), useSlashV));",
      "right" : "add(jsString(n.getString(), useSlashV));",
      "info" : "ExpressionStatement[28489-28529]:ExpressionStatement[28460-28500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28541-28748]:Block[28512-28719]"
    }, {
      "left" : "String cached = ESCAPED_JS_STRINGS.get(s);",
      "right" : "String cached = ESCAPED_JS_STRINGS.get(s);",
      "info" : "VariableDeclarationStatement[28549-28591]:VariableDeclarationStatement[28520-28562]"
    }, {
      "left" : "if (cached == null)",
      "right" : "if (cached == null)",
      "info" : "IfStatement[28598-28723]:IfStatement[28569-28694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28618-28723]:Block[28589-28694]"
    }, {
      "left" : "cached = jsString(n.getString(), useSlashV);",
      "right" : "cached = jsString(n.getString(), useSlashV);",
      "info" : "ExpressionStatement[28628-28672]:ExpressionStatement[28599-28643]"
    }, {
      "left" : "ESCAPED_JS_STRINGS.put(s, cached);",
      "right" : "ESCAPED_JS_STRINGS.put(s, cached);",
      "info" : "ExpressionStatement[28681-28715]:ExpressionStatement[28652-28686]"
    }, {
      "left" : "add(cached);",
      "right" : "add(cached);",
      "info" : "ExpressionStatement[28730-28742]:ExpressionStatement[28701-28713]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28756-28763]:Modifier[28727-28734]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[28764-28770]:SimpleType[28735-28741]"
    }, {
      "left" : "jsString",
      "right" : "jsString",
      "info" : "SimpleName[28771-28779]:SimpleName[28742-28750]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[28780-28788]:SingleVariableDeclaration[28751-28759]"
    }, {
      "left" : "boolean useSlashV",
      "right" : "boolean useSlashV",
      "info" : "SingleVariableDeclaration[28790-28807]:SingleVariableDeclaration[28761-28778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28809-29539]:Block[28780-29510]"
    }, {
      "left" : "int singleq = 0, doubleq = 0;",
      "right" : "int singleq = 0, doubleq = 0;",
      "info" : "VariableDeclarationStatement[28815-28844]:VariableDeclarationStatement[28786-28815]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[28917-29071]:ForStatement[28888-29042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28954-29071]:Block[28925-29042]"
    }, {
      "left" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "right" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "info" : "SwitchStatement[28962-29065]:SwitchStatement[28933-29036]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[28993-29002]:SwitchCase[28964-28973]"
    }, {
      "left" : "doubleq++;",
      "right" : "doubleq++;",
      "info" : "ExpressionStatement[29003-29013]:ExpressionStatement[28974-28984]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29014-29020]:BreakStatement[28985-28991]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[29029-29039]:SwitchCase[29000-29010]"
    }, {
      "left" : "singleq++;",
      "right" : "singleq++;",
      "info" : "ExpressionStatement[29040-29050]:ExpressionStatement[29011-29021]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29051-29057]:BreakStatement[29022-29028]"
    }, {
      "left" : "String doublequote, singlequote;",
      "right" : "String doublequote, singlequote;",
      "info" : "VariableDeclarationStatement[29077-29109]:VariableDeclarationStatement[29048-29080]"
    }, {
      "left" : "char quote;",
      "right" : "char quote;",
      "info" : "VariableDeclarationStatement[29114-29125]:VariableDeclarationStatement[29085-29096]"
    }, {
      "left" : "if (singleq < doubleq)",
      "right" : "if (singleq < doubleq)",
      "info" : "IfStatement[29130-29427]:IfStatement[29101-29398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29153-29290]:Block[29124-29261]"
    }, {
      "left" : "quote = '\\'';",
      "right" : "quote = '\\'';",
      "info" : "ExpressionStatement[29217-29230]:ExpressionStatement[29188-29201]"
    }, {
      "left" : "doublequote = \"\\\"\";",
      "right" : "doublequote = \"\\\"\";",
      "info" : "ExpressionStatement[29237-29256]:ExpressionStatement[29208-29227]"
    }, {
      "left" : "singlequote = \"\\\\\\'\";",
      "right" : "singlequote = \"\\\\\\'\";",
      "info" : "ExpressionStatement[29263-29284]:ExpressionStatement[29234-29255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29296-29427]:Block[29267-29398]"
    }, {
      "left" : "quote = '\\\"';",
      "right" : "quote = '\\\"';",
      "info" : "ExpressionStatement[29354-29367]:ExpressionStatement[29325-29338]"
    }, {
      "left" : "doublequote = \"\\\\\\\"\";",
      "right" : "doublequote = \"\\\\\\\"\";",
      "info" : "ExpressionStatement[29374-29395]:ExpressionStatement[29345-29366]"
    }, {
      "left" : "singlequote = \"\\'\";",
      "right" : "singlequote = \"\\'\";",
      "info" : "ExpressionStatement[29402-29421]:ExpressionStatement[29373-29392]"
    }, {
      "left" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV);",
      "right" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV);",
      "info" : "ReturnStatement[29433-29535]:ReturnStatement[29404-29506]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29579-29585]:Modifier[29550-29556]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29586-29592]:SimpleType[29557-29563]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[29593-29605]:SimpleName[29564-29576]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[29606-29614]:SingleVariableDeclaration[29577-29585]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[29616-29651]:SingleVariableDeclaration[29587-29622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29653-29734]:Block[29624-29705]"
    }, {
      "left" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder, false);",
      "right" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder, false);",
      "info" : "ReturnStatement[29659-29730]:ReturnStatement[29630-29701]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29826-29832]:Modifier[29797-29803]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29833-29839]:SimpleType[29804-29810]"
    }, {
      "left" : "escapeToDoubleQuotedJsString",
      "right" : "escapeToDoubleQuotedJsString",
      "info" : "SimpleName[29840-29868]:SimpleName[29811-29839]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[29869-29877]:SingleVariableDeclaration[29840-29848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29879-29950]:Block[29850-29921]"
    }, {
      "left" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null, false);",
      "right" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null, false);",
      "info" : "ReturnStatement[29885-29946]:ReturnStatement[29856-29917]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30079-30085]:Modifier[30050-30056]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30086-30092]:SimpleType[30057-30063]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[30093-30105]:SimpleName[30064-30076]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[30106-30114]:SingleVariableDeclaration[30077-30085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30116-30155]:Block[30087-30126]"
    }, {
      "left" : "return regexpEscape(s, null);",
      "right" : "return regexpEscape(s, null);",
      "info" : "ReturnStatement[30122-30151]:ReturnStatement[30093-30122]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30233-30240]:Modifier[30204-30211]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30241-30247]:Modifier[30212-30218]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30248-30254]:SimpleType[30219-30225]"
    }, {
      "left" : "strEscape",
      "right" : "strEscape",
      "info" : "SimpleName[30255-30264]:SimpleName[30226-30235]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[30272-30280]:SingleVariableDeclaration[30243-30251]"
    }, {
      "left" : "char quote",
      "right" : "char quote",
      "info" : "SingleVariableDeclaration[30282-30292]:SingleVariableDeclaration[30253-30263]"
    }, {
      "left" : "String doublequoteEscape",
      "right" : "String doublequoteEscape",
      "info" : "SingleVariableDeclaration[30300-30324]:SingleVariableDeclaration[30271-30295]"
    }, {
      "left" : "String singlequoteEscape",
      "right" : "String singlequoteEscape",
      "info" : "SingleVariableDeclaration[30332-30356]:SingleVariableDeclaration[30303-30327]"
    }, {
      "left" : "String backslashEscape",
      "right" : "String backslashEscape",
      "info" : "SingleVariableDeclaration[30364-30386]:SingleVariableDeclaration[30335-30357]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[30394-30429]:SingleVariableDeclaration[30365-30400]"
    }, {
      "left" : "boolean useSlashV",
      "right" : "boolean useSlashV",
      "info" : "SingleVariableDeclaration[30437-30454]:SingleVariableDeclaration[30408-30425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30456-33145]:Block[30427-33116]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "right" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "info" : "VariableDeclarationStatement[30462-30515]:VariableDeclarationStatement[30433-30486]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[30520-30537]:ExpressionStatement[30491-30508]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[30542-33093]:ForStatement[30513-33064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30579-33093]:Block[30550-33064]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[30587-30608]:VariableDeclarationStatement[30558-30579]"
    }, {
      "left" : "switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "right" : "switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "info" : "SwitchStatement[30615-33087]:SwitchStatement[30586-33058]"
    }, {
      "left" : "case '\\0':",
      "right" : "case '\\0':",
      "info" : "SwitchCase[30636-30646]:SwitchCase[30607-30617]"
    }, {
      "left" : "sb.append(\"\\\\x00\");",
      "right" : "sb.append(\"\\\\x00\");",
      "info" : "ExpressionStatement[30647-30666]:ExpressionStatement[30618-30637]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30667-30673]:BreakStatement[30638-30644]"
    }, {
      "left" : "case '\\u000B':",
      "right" : "case '\\u000B':",
      "info" : "SwitchCase[30682-30696]:SwitchCase[30653-30667]"
    }, {
      "left" : "if (useSlashV)",
      "right" : "if (useSlashV)",
      "info" : "IfStatement[30707-30816]:IfStatement[30678-30787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30722-30765]:Block[30693-30736]"
    }, {
      "left" : "sb.append(\"\\\\v\");",
      "right" : "sb.append(\"\\\\v\");",
      "info" : "ExpressionStatement[30736-30753]:ExpressionStatement[30707-30724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30771-30816]:Block[30742-30787]"
    }, {
      "left" : "sb.append(\"\\\\x0B\");",
      "right" : "sb.append(\"\\\\x0B\");",
      "info" : "ExpressionStatement[30785-30804]:ExpressionStatement[30756-30775]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30827-30833]:BreakStatement[30798-30804]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[30842-30852]:SwitchCase[30813-30823]"
    }, {
      "left" : "sb.append(\"\\\\n\");",
      "right" : "sb.append(\"\\\\n\");",
      "info" : "ExpressionStatement[30853-30870]:ExpressionStatement[30824-30841]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30871-30877]:BreakStatement[30842-30848]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[30886-30896]:SwitchCase[30857-30867]"
    }, {
      "left" : "sb.append(\"\\\\r\");",
      "right" : "sb.append(\"\\\\r\");",
      "info" : "ExpressionStatement[30897-30914]:ExpressionStatement[30868-30885]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30915-30921]:BreakStatement[30886-30892]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[30930-30940]:SwitchCase[30901-30911]"
    }, {
      "left" : "sb.append(\"\\\\t\");",
      "right" : "sb.append(\"\\\\t\");",
      "info" : "ExpressionStatement[30941-30958]:ExpressionStatement[30912-30929]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30959-30965]:BreakStatement[30930-30936]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[30974-30984]:SwitchCase[30945-30955]"
    }, {
      "left" : "sb.append(backslashEscape);",
      "right" : "sb.append(backslashEscape);",
      "info" : "ExpressionStatement[30985-31012]:ExpressionStatement[30956-30983]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31013-31019]:BreakStatement[30984-30990]"
    }, {
      "left" : "case '\\\"':",
      "right" : "case '\\\"':",
      "info" : "SwitchCase[31028-31038]:SwitchCase[30999-31009]"
    }, {
      "left" : "sb.append(doublequoteEscape);",
      "right" : "sb.append(doublequoteEscape);",
      "info" : "ExpressionStatement[31039-31068]:ExpressionStatement[31010-31039]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31069-31075]:BreakStatement[31040-31046]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[31084-31094]:SwitchCase[31055-31065]"
    }, {
      "left" : "sb.append(singlequoteEscape);",
      "right" : "sb.append(singlequoteEscape);",
      "info" : "ExpressionStatement[31095-31124]:ExpressionStatement[31066-31095]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31125-31131]:BreakStatement[31096-31102]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[31140-31149]:SwitchCase[31111-31120]"
    }, {
      "left" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "right" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "info" : "IfStatement[31222-31461]:IfStatement[31193-31432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31373-31416]:Block[31344-31387]"
    }, {
      "left" : "sb.append(\"\\\\>\");",
      "right" : "sb.append(\"\\\\>\");",
      "info" : "ExpressionStatement[31387-31404]:ExpressionStatement[31358-31375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31422-31461]:Block[31393-31432]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[31436-31449]:ExpressionStatement[31407-31420]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31472-31478]:BreakStatement[31443-31449]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[31487-31496]:SwitchCase[31458-31467]"
    }, {
      "left" : "final String END_SCRIPT = \"/script\";",
      "right" : "final String END_SCRIPT = \"/script\";",
      "info" : "VariableDeclarationStatement[31550-31586]:VariableDeclarationStatement[31521-31557]"
    }, {
      "left" : "final String START_COMMENT = \"!--\";",
      "right" : "final String START_COMMENT = \"!--\";",
      "info" : "VariableDeclarationStatement[31633-31668]:VariableDeclarationStatement[31604-31639]"
    }, {
      "left" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length()))",
      "right" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length()))",
      "info" : "IfStatement[31680-32031]:IfStatement[31651-32002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31780-31823]:Block[31751-31794]"
    }, {
      "left" : "sb.append(\"<\\\\\");",
      "right" : "sb.append(\"<\\\\\");",
      "info" : "ExpressionStatement[31794-31811]:ExpressionStatement[31765-31782]"
    }, {
      "left" : "if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length()))",
      "right" : "if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length()))",
      "info" : "IfStatement[31829-32031]:IfStatement[31800-32002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31943-31986]:Block[31914-31957]"
    }, {
      "left" : "sb.append(\"<\\\\\");",
      "right" : "sb.append(\"<\\\\\");",
      "info" : "ExpressionStatement[31957-31974]:ExpressionStatement[31928-31945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31992-32031]:Block[31963-32002]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32006-32019]:ExpressionStatement[31977-31990]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32042-32048]:BreakStatement[32013-32019]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[32057-32065]:SwitchCase[32028-32036]"
    }, {
      "left" : "if (outputCharsetEncoder != null)",
      "right" : "if (outputCharsetEncoder != null)",
      "info" : "IfStatement[32213-33079]:IfStatement[32184-33050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32247-32479]:Block[32218-32450]"
    }, {
      "left" : "if (outputCharsetEncoder.canEncode(c))",
      "right" : "if (outputCharsetEncoder.canEncode(c))",
      "info" : "IfStatement[32261-32467]:IfStatement[32232-32438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32300-32343]:Block[32271-32314]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32316-32329]:ExpressionStatement[32287-32300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32349-32467]:Block[32320-32438]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[32412-32453]:ExpressionStatement[32383-32424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32485-33079]:Block[32456-33050]"
    }, {
      "left" : "if (c > 0x1f && c < 0x7f)",
      "right" : "if (c > 0x1f && c < 0x7f)",
      "info" : "IfStatement[32722-33067]:IfStatement[32693-33038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32748-32791]:Block[32719-32762]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32764-32777]:ExpressionStatement[32735-32748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32797-33067]:Block[32768-33038]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[33012-33053]:ExpressionStatement[32983-33024]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[33098-33115]:ExpressionStatement[33069-33086]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[33120-33141]:ReturnStatement[33091-33112]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33149-33155]:Modifier[33120-33126]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[33156-33162]:SimpleType[33127-33133]"
    }, {
      "left" : "identifierEscape",
      "right" : "identifierEscape",
      "info" : "SimpleName[33163-33179]:SimpleName[33134-33150]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[33180-33188]:SingleVariableDeclaration[33151-33159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33190-33839]:Block[33161-33810]"
    }, {
      "left" : "if (NodeUtil.isLatin(s))",
      "right" : "if (NodeUtil.isLatin(s))",
      "info" : "IfStatement[33271-33319]:IfStatement[33242-33290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33296-33319]:Block[33267-33290]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[33304-33313]:ReturnStatement[33275-33284]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[33403-33442]:VariableDeclarationStatement[33374-33413]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[33447-33809]:ForStatement[33418-33780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33484-33809]:Block[33455-33780]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[33492-33513]:VariableDeclarationStatement[33463-33484]"
    }, {
      "left" : "if (c > 0x1F && c < 0x7F)",
      "right" : "if (c > 0x1F && c < 0x7F)",
      "info" : "IfStatement[33681-33803]:IfStatement[33652-33774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33707-33738]:Block[33678-33709]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[33717-33730]:ExpressionStatement[33688-33701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33744-33803]:Block[33715-33774]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[33754-33795]:ExpressionStatement[33725-33766]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[33814-33835]:ReturnStatement[33785-33806]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34008-34015]:Modifier[33979-33986]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34016-34022]:Modifier[33987-33993]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[34023-34026]:PrimitiveType[33994-33997]"
    }, {
      "left" : "getNonEmptyChildCount",
      "right" : "getNonEmptyChildCount",
      "info" : "SimpleName[34027-34048]:SimpleName[33998-34019]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34049-34055]:SingleVariableDeclaration[34020-34026]"
    }, {
      "left" : "int maxCount",
      "right" : "int maxCount",
      "info" : "SingleVariableDeclaration[34057-34069]:SingleVariableDeclaration[34028-34040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34071-34330]:Block[34042-34301]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[34077-34087]:VariableDeclarationStatement[34048-34058]"
    }, {
      "left" : "Node c = n.getFirstChild();",
      "right" : "Node c = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[34092-34119]:VariableDeclarationStatement[34063-34090]"
    }, {
      "left" : "for (; c != null && i < maxCount; c = c.getNext())",
      "right" : "for (; c != null && i < maxCount; c = c.getNext())",
      "info" : "ForStatement[34124-34312]:ForStatement[34095-34283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34175-34312]:Block[34146-34283]"
    }, {
      "left" : "if (c.isBlock())",
      "right" : "if (c.isBlock())",
      "info" : "IfStatement[34183-34306]:IfStatement[34154-34277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34200-34260]:Block[34171-34231]"
    }, {
      "left" : "i += getNonEmptyChildCount(c, maxCount-i);",
      "right" : "i += getNonEmptyChildCount(c, maxCount-i);",
      "info" : "ExpressionStatement[34210-34252]:ExpressionStatement[34181-34223]"
    }, {
      "left" : "if (!c.isEmpty())",
      "right" : "if (!c.isEmpty())",
      "info" : "IfStatement[34266-34306]:IfStatement[34237-34277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34284-34306]:Block[34255-34277]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[34294-34298]:ExpressionStatement[34265-34269]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[34317-34326]:ReturnStatement[34288-34297]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34393-34400]:Modifier[34364-34371]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34401-34407]:Modifier[34372-34378]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[34408-34412]:SimpleType[34379-34383]"
    }, {
      "left" : "getFirstNonEmptyChild",
      "right" : "getFirstNonEmptyChild",
      "info" : "SimpleName[34413-34434]:SimpleName[34384-34405]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34435-34441]:SingleVariableDeclaration[34406-34412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34443-34735]:Block[34414-34706]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[34449-34714]:ForStatement[34420-34685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34510-34714]:Block[34481-34685]"
    }, {
      "left" : "if (c.isBlock())",
      "right" : "if (c.isBlock())",
      "info" : "IfStatement[34518-34708]:IfStatement[34489-34679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34535-34657]:Block[34506-34628]"
    }, {
      "left" : "Node result = getFirstNonEmptyChild(c);",
      "right" : "Node result = getFirstNonEmptyChild(c);",
      "info" : "VariableDeclarationStatement[34545-34584]:VariableDeclarationStatement[34516-34555]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[34593-34649]:IfStatement[34564-34620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34613-34649]:Block[34584-34620]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[34625-34639]:ReturnStatement[34596-34610]"
    }, {
      "left" : "if (!c.isEmpty())",
      "right" : "if (!c.isEmpty())",
      "info" : "IfStatement[34663-34708]:IfStatement[34634-34679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34681-34708]:Block[34652-34679]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[34691-34700]:ReturnStatement[34662-34671]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34719-34731]:ReturnStatement[34690-34702]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35346-35353]:Modifier[35317-35324]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[35354-35361]:SimpleType[35325-35332]"
    }, {
      "left" : "getContextForNonEmptyExpression",
      "right" : "getContextForNonEmptyExpression",
      "info" : "SimpleName[35362-35393]:SimpleName[35333-35364]"
    }, {
      "left" : "Context currentContext",
      "right" : "Context currentContext",
      "info" : "SingleVariableDeclaration[35394-35416]:SingleVariableDeclaration[35365-35387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35418-35537]:Block[35389-35508]"
    }, {
      "left" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "right" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "info" : "ReturnStatement[35424-35533]:ReturnStatement[35395-35504]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35706-35713]:Modifier[35677-35684]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[35715-35722]:SimpleType[35686-35693]"
    }, {
      "left" : "getContextForNoInOperator",
      "right" : "getContextForNoInOperator",
      "info" : "SimpleName[35723-35748]:SimpleName[35694-35719]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[35749-35764]:SingleVariableDeclaration[35720-35735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35766-35876]:Block[35737-35847]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "info" : "ReturnStatement[35772-35872]:ReturnStatement[35743-35843]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36164-36171]:Modifier[36135-36142]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[36173-36180]:SimpleType[36144-36151]"
    }, {
      "left" : "clearContextForNoInOperator",
      "right" : "clearContextForNoInOperator",
      "info" : "SimpleName[36181-36208]:SimpleName[36152-36179]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[36209-36224]:SingleVariableDeclaration[36180-36195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36226-36317]:Block[36197-36288]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);",
      "info" : "ReturnStatement[36232-36313]:ReturnStatement[36203-36284]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36395-36402]:Modifier[36366-36373]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36403-36409]:Modifier[36374-36380]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36410-36414]:PrimitiveType[36381-36385]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[36415-36448]:SimpleName[36386-36419]"
    }, {
      "left" : "StringBuilder sb",
      "right" : "StringBuilder sb",
      "info" : "SingleVariableDeclaration[36456-36472]:SingleVariableDeclaration[36427-36443]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[36474-36480]:SingleVariableDeclaration[36445-36451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36482-36671]:Block[36453-36642]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36488-36667]:TryStatement[36459-36638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36492-36547]:Block[36463-36518]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(c, sb);",
      "right" : "appendHexJavaScriptRepresentation(c, sb);",
      "info" : "ExpressionStatement[36500-36541]:ExpressionStatement[36471-36512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36571-36667]:Block[36542-36638]"
    }, {
      "left" : "throw new RuntimeException(ex);",
      "right" : "throw new RuntimeException(ex);",
      "info" : "ThrowStatement[36630-36661]:ThrowStatement[36601-36632]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36906-36913]:Modifier[36877-36884]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36914-36920]:Modifier[36885-36891]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36921-36925]:PrimitiveType[36892-36896]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[36926-36959]:SimpleName[36897-36930]"
    }, {
      "left" : "int codePoint",
      "right" : "int codePoint",
      "info" : "SingleVariableDeclaration[36967-36980]:SingleVariableDeclaration[36938-36951]"
    }, {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[36982-36996]:SingleVariableDeclaration[36953-36967]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[37011-37022]:SimpleType[36982-36993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37023-37761]:Block[36994-37732]"
    }, {
      "left" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "right" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "info" : "IfStatement[37029-37533]:IfStatement[37000-37504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37080-37533]:Block[37051-37504]"
    }, {
      "left" : "char[] surrogates = Character.toChars(codePoint);",
      "right" : "char[] surrogates = Character.toChars(codePoint);",
      "info" : "VariableDeclarationStatement[37342-37391]:VariableDeclarationStatement[37313-37362]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "info" : "ExpressionStatement[37398-37452]:ExpressionStatement[37369-37423]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "info" : "ExpressionStatement[37459-37513]:ExpressionStatement[37430-37484]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37520-37527]:ReturnStatement[37491-37498]"
    }, {
      "left" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "right" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "info" : "ExpressionStatement[37538-37757]:ExpressionStatement[37509-37728]"
    } ]
  },
  "interFileMappings" : { }
}