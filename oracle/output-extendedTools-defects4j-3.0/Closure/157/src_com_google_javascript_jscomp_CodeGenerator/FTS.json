{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "TypeDeclaration[1035-36517]:TypeDeclaration[1035-37333]"
    }, {
      "left" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "right" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "info" : "FieldDeclaration[1168-1307]:FieldDeclaration[1168-1307]"
    }, {
      "left" : "private final CodeConsumer cc;",
      "right" : "private final CodeConsumer cc;",
      "info" : "FieldDeclaration[1311-1341]:FieldDeclaration[1311-1341]"
    }, {
      "left" : "private final CharsetEncoder outputCharsetEncoder;",
      "right" : "private final CharsetEncoder outputCharsetEncoder;",
      "info" : "FieldDeclaration[1345-1395]:FieldDeclaration[1345-1395]"
    }, {
      "left" : "CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset)",
      "right" : "CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset)",
      "info" : "MethodDeclaration[1399-1959]:MethodDeclaration[1399-1959]"
    }, {
      "left" : "CodeGenerator(CodeConsumer consumer)",
      "right" : "CodeGenerator(CodeConsumer consumer)",
      "info" : "MethodDeclaration[1963-2031]:MethodDeclaration[1963-2031]"
    }, {
      "left" : "public void tagAsStrict()",
      "right" : "public void tagAsStrict()",
      "info" : "MethodDeclaration[2035-2150]:MethodDeclaration[2035-2150]"
    }, {
      "left" : "void add(String str)",
      "right" : "void add(String str)",
      "info" : "MethodDeclaration[2154-2197]:MethodDeclaration[2154-2197]"
    }, {
      "left" : "private void addIdentifier(String identifier)",
      "right" : "private void addIdentifier(String identifier)",
      "info" : "MethodDeclaration[2201-2304]:MethodDeclaration[2201-2304]"
    }, {
      "left" : "void add(Node n)",
      "right" : "void add(Node n)",
      "info" : "MethodDeclaration[2308-2357]:MethodDeclaration[2308-2357]"
    }, {
      "left" : "void add(Node n, Context context)",
      "right" : "void add(Node n, Context context)",
      "info" : "MethodDeclaration[2361-21647]:MethodDeclaration[2361-22001]"
    }, {
      "left" : "private boolean isIndirectEval(Node n)",
      "right" : "private boolean isIndirectEval(Node n)",
      "info" : "MethodDeclaration[21653-21877]:MethodDeclaration[22469-22693]"
    }, {
      "left" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "right" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "info" : "MethodDeclaration[21881-24037]:MethodDeclaration[22697-24853]"
    }, {
      "left" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "right" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "info" : "MethodDeclaration[24041-24956]:MethodDeclaration[24857-25772]"
    }, {
      "left" : "void addLeftExpr(Node n, int minPrecedence, Context context)",
      "right" : "void addLeftExpr(Node n, int minPrecedence, Context context)",
      "info" : "MethodDeclaration[24960-25500]:MethodDeclaration[25776-26316]"
    }, {
      "left" : "void addExpr(Node n, int minPrecedence)",
      "right" : "void addExpr(Node n, int minPrecedence)",
      "info" : "MethodDeclaration[25504-25595]:MethodDeclaration[26320-26411]"
    }, {
      "left" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "right" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "info" : "MethodDeclaration[25599-25946]:MethodDeclaration[26415-26762]"
    }, {
      "left" : "void addList(Node firstInList)",
      "right" : "void addList(Node firstInList)",
      "info" : "MethodDeclaration[25950-26033]:MethodDeclaration[26766-26849]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "info" : "MethodDeclaration[26037-26176]:MethodDeclaration[26853-26992]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "info" : "MethodDeclaration[26180-26593]:MethodDeclaration[26996-27409]"
    }, {
      "left" : "void addArrayList(Node firstInList)",
      "right" : "void addArrayList(Node firstInList)",
      "info" : "MethodDeclaration[26597-27283]:MethodDeclaration[27413-28099]"
    }, {
      "left" : "void addCaseBody(Node caseBody)",
      "right" : "void addCaseBody(Node caseBody)",
      "info" : "MethodDeclaration[27287-27389]:MethodDeclaration[28103-28205]"
    }, {
      "left" : "void addAllSiblings(Node n)",
      "right" : "void addAllSiblings(Node n)",
      "info" : "MethodDeclaration[27393-27497]:MethodDeclaration[28209-28313]"
    }, {
      "left" : "static String jsString(String s, CharsetEncoder outputCharsetEncoder)",
      "right" : "static String jsString(String s, CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[27501-28370]:MethodDeclaration[28317-29186]"
    }, {
      "left" : "static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "right" : "static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[28374-28558]:MethodDeclaration[29190-29374]"
    }, {
      "left" : "static String escapeToDoubleQuotedJsString(String s)",
      "right" : "static String escapeToDoubleQuotedJsString(String s)",
      "info" : "MethodDeclaration[28562-28767]:MethodDeclaration[29378-29583]"
    }, {
      "left" : "static String regexpEscape(String s)",
      "right" : "static String regexpEscape(String s)",
      "info" : "MethodDeclaration[28896-28972]:MethodDeclaration[29712-29788]"
    }, {
      "left" : "static String strEscape(String s, char quote,\n                          String doublequoteEscape,\n                          String singlequoteEscape,\n                          String backslashEscape,\n                          CharsetEncoder outputCharsetEncoder)",
      "right" : "static String strEscape(String s, char quote,\n                          String doublequoteEscape,\n                          String singlequoteEscape,\n                          String backslashEscape,\n                          CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[28976-31841]:MethodDeclaration[29792-32657]"
    }, {
      "left" : "static String identifierEscape(String s)",
      "right" : "static String identifierEscape(String s)",
      "info" : "MethodDeclaration[31845-32535]:MethodDeclaration[32661-33351]"
    }, {
      "left" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "right" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "info" : "MethodDeclaration[32538-33055]:MethodDeclaration[33354-33871]"
    }, {
      "left" : "private static Node getFirstNonEmptyChild(Node n)",
      "right" : "private static Node getFirstNonEmptyChild(Node n)",
      "info" : "MethodDeclaration[33059-33489]:MethodDeclaration[33875-34305]"
    }, {
      "left" : "enum : Context",
      "right" : "enum : Context",
      "info" : "EnumDeclaration[33694-34096]:EnumDeclaration[34510-34912]"
    }, {
      "left" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "right" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "info" : "MethodDeclaration[34100-34291]:MethodDeclaration[34916-35107]"
    }, {
      "left" : "private  Context getContextForNoInOperator(Context context)",
      "right" : "private  Context getContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[34295-34630]:MethodDeclaration[35111-35446]"
    }, {
      "left" : "private  Context clearContextForNoInOperator(Context context)",
      "right" : "private  Context clearContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[34634-35071]:MethodDeclaration[35450-35887]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "info" : "MethodDeclaration[35075-35425]:MethodDeclaration[35891-36241]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "info" : "MethodDeclaration[35429-36515]:MethodDeclaration[36245-37331]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1143-1148]:TYPE_DECLARATION_KIND[1143-1148]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1149-1162]:SimpleName[1149-1162]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1399-1412]:SimpleName[1399-1412]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[1420-1441]:SingleVariableDeclaration[1420-1441]"
    }, {
      "left" : "Charset outputCharset",
      "right" : "Charset outputCharset",
      "info" : "SingleVariableDeclaration[1443-1464]:SingleVariableDeclaration[1443-1464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1466-1959]:Block[1466-1959]"
    }, {
      "left" : "cc = consumer;",
      "right" : "cc = consumer;",
      "info" : "ExpressionStatement[1472-1486]:ExpressionStatement[1472-1486]"
    }, {
      "left" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "right" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "info" : "IfStatement[1491-1955]:IfStatement[1491-1955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1556-1880]:Block[1556-1880]"
    }, {
      "left" : "this.outputCharsetEncoder = null;",
      "right" : "this.outputCharsetEncoder = null;",
      "info" : "ExpressionStatement[1841-1874]:ExpressionStatement[1841-1874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1886-1955]:Block[1886-1955]"
    }, {
      "left" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "right" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "info" : "ExpressionStatement[1894-1949]:ExpressionStatement[1894-1949]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1963-1976]:SimpleName[1963-1976]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[1977-1998]:SingleVariableDeclaration[1977-1998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2000-2031]:Block[2000-2031]"
    }, {
      "left" : "this(consumer, null);",
      "right" : "this(consumer, null);",
      "info" : "ConstructorInvocation[2006-2027]:ConstructorInvocation[2006-2027]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2093-2099]:Modifier[2093-2099]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2100-2104]:PrimitiveType[2100-2104]"
    }, {
      "left" : "tagAsStrict",
      "right" : "tagAsStrict",
      "info" : "SimpleName[2105-2116]:SimpleName[2105-2116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2119-2150]:Block[2119-2150]"
    }, {
      "left" : "add(\"'use strict';\");",
      "right" : "add(\"'use strict';\");",
      "info" : "ExpressionStatement[2125-2146]:ExpressionStatement[2125-2146]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2154-2158]:PrimitiveType[2154-2158]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2159-2162]:SimpleName[2159-2162]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[2163-2173]:SingleVariableDeclaration[2163-2173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2175-2197]:Block[2175-2197]"
    }, {
      "left" : "cc.add(str);",
      "right" : "cc.add(str);",
      "info" : "ExpressionStatement[2181-2193]:ExpressionStatement[2181-2193]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2201-2208]:Modifier[2201-2208]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2209-2213]:PrimitiveType[2209-2213]"
    }, {
      "left" : "addIdentifier",
      "right" : "addIdentifier",
      "info" : "SimpleName[2214-2227]:SimpleName[2214-2227]"
    }, {
      "left" : "String identifier",
      "right" : "String identifier",
      "info" : "SingleVariableDeclaration[2228-2245]:SingleVariableDeclaration[2228-2245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2247-2304]:Block[2247-2304]"
    }, {
      "left" : "cc.addIdentifier(identifierEscape(identifier));",
      "right" : "cc.addIdentifier(identifierEscape(identifier));",
      "info" : "ExpressionStatement[2253-2300]:ExpressionStatement[2253-2300]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2308-2312]:PrimitiveType[2308-2312]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2313-2316]:SimpleName[2313-2316]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2317-2323]:SingleVariableDeclaration[2317-2323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2325-2357]:Block[2325-2357]"
    }, {
      "left" : "add(n, Context.OTHER);",
      "right" : "add(n, Context.OTHER);",
      "info" : "ExpressionStatement[2331-2353]:ExpressionStatement[2331-2353]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2361-2365]:PrimitiveType[2361-2365]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2366-2369]:SimpleName[2366-2369]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2370-2376]:SingleVariableDeclaration[2370-2376]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[2378-2393]:SingleVariableDeclaration[2378-2393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2395-21647]:Block[2395-22001]"
    }, {
      "left" : "if (!cc.continueProcessing())",
      "right" : "if (!cc.continueProcessing())",
      "info" : "IfStatement[2401-2452]:IfStatement[2401-2452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2431-2452]:Block[2431-2452]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[2439-2446]:ReturnStatement[2439-2446]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[2458-2481]:VariableDeclarationStatement[2458-2481]"
    }, {
      "left" : "String opstr = NodeUtil.opToStr(type);",
      "right" : "String opstr = NodeUtil.opToStr(type);",
      "info" : "VariableDeclarationStatement[2486-2524]:VariableDeclarationStatement[2486-2524]"
    }, {
      "left" : "int childCount = n.getChildCount();",
      "right" : "int childCount = n.getChildCount();",
      "info" : "VariableDeclarationStatement[2529-2564]:VariableDeclarationStatement[2529-2564]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[2569-2600]:VariableDeclarationStatement[2569-2600]"
    }, {
      "left" : "Node last = n.getLastChild();",
      "right" : "Node last = n.getLastChild();",
      "info" : "VariableDeclarationStatement[2605-2634]:VariableDeclarationStatement[2605-2634]"
    }, {
      "left" : "if (opstr != null && first != last)",
      "right" : "if (opstr != null && first != last)",
      "info" : "IfStatement[2675-3666]:IfStatement[2675-3666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2711-3666]:Block[2711-3666]"
    }, {
      "left" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
      "right" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
      "info" : "ExpressionStatement[2719-2874]:ExpressionStatement[2719-2874]"
    }, {
      "left" : "int p = NodeUtil.precedence(type);",
      "right" : "int p = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[2881-2915]:VariableDeclarationStatement[2881-2915]"
    }, {
      "left" : "addLeftExpr(first, p, context);",
      "right" : "addLeftExpr(first, p, context);",
      "info" : "ExpressionStatement[2922-2953]:ExpressionStatement[2922-2953]"
    }, {
      "left" : "cc.addOp(opstr, true);",
      "right" : "cc.addOp(opstr, true);",
      "info" : "ExpressionStatement[2960-2982]:ExpressionStatement[2960-2982]"
    }, {
      "left" : "Context rhsContext = getContextForNoInOperator(context);",
      "right" : "Context rhsContext = getContextForNoInOperator(context);",
      "info" : "VariableDeclarationStatement[3097-3153]:VariableDeclarationStatement[3097-3153]"
    }, {
      "left" : "if (last.getType() == type &&\n          NodeUtil.isAssociative(type))",
      "right" : "if (last.getType() == type &&\n          NodeUtil.isAssociative(type))",
      "info" : "IfStatement[3283-3646]:IfStatement[3283-3646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3353-3400]:Block[3353-3400]"
    }, {
      "left" : "addExpr(last, p, rhsContext);",
      "right" : "addExpr(last, p, rhsContext);",
      "info" : "ExpressionStatement[3363-3392]:ExpressionStatement[3363-3392]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
      "right" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
      "info" : "IfStatement[3406-3646]:IfStatement[3406-3646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3471-3589]:Block[3471-3589]"
    }, {
      "left" : "addExpr(last, p, rhsContext);",
      "right" : "addExpr(last, p, rhsContext);",
      "info" : "ExpressionStatement[3552-3581]:ExpressionStatement[3552-3581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3595-3646]:Block[3595-3646]"
    }, {
      "left" : "addExpr(last, p + 1, rhsContext);",
      "right" : "addExpr(last, p + 1, rhsContext);",
      "info" : "ExpressionStatement[3605-3638]:ExpressionStatement[3605-3638]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3653-3660]:ReturnStatement[3653-3660]"
    }, {
      "left" : "cc.startSourceMapping(n);",
      "right" : "cc.startSourceMapping(n);",
      "info" : "ExpressionStatement[3672-3697]:ExpressionStatement[3672-3697]"
    }, {
      "left" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.getType() == Token.EMPTY) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.getType() == Token.COMMA) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN));\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.LP:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        addList(first, false, context);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(\n            childCount ==\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0));\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type));\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().getType() == Token.NUMBER) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type));\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addLeftExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1);\n        cc.addOp(\":\", true);\n        addExpr(last, 1);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.GET_REF:\n        add(first);\n        break;\n\n      case Token.REF_SPECIAL:\n        Preconditions.checkState(childCount == 1);\n        add(first);\n        add(\".\");\n        add((String) n.getProp(Node.NAME_PROP));\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GET:\n      case Token.SET:\n        Preconditions.checkState(n.getParent().getType() == Token.OBJECTLIT);\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.getType() == Token.FUNCTION);\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GET) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          add(jsString(n.getString(), outputCharsetEncoder));\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().getType() == Token.SCRIPT);\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.getType() == Token.VAR) {\n            cc.endStatement();\n          }\n\n          if (c.getType() == Token.FUNCTION) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.getType() == Token.VAR) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.getType() == Token.NUMBER);\n        if (needsParens) {\n          add(\"(\");\n        }\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA));\n          add(\")\");\n        } else {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n      case Token.THIS:\n      case Token.FALSE:\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(Node.tokenToName(type));\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_VOID:\n        throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(first, Token.CALL, new MatchNotFunction())) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) {\n          throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());\n        }\n        add(jsString(n.getString(), outputCharsetEncoder));\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.getType() == Token.GET || c.getType() == Token.SET) {\n            add(c);\n          } else {\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (c.getType() == Token.STRING &&\n                !c.isQuotedString() &&\n                !TokenStream.isKeyword(c.getString()) &&\n                TokenStream.isJSIdentifier(c.getString()) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(c.getString())) {\n              add(c.getString());\n            } else {\n              // Determine if the string is a simple number.\n              addExpr(c, 1);\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (first.getType() != Token.LABEL_NAME) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      // This node is auto generated in anonymous functions and should just get\n      // ignored for our purposes.\n      case Token.SETNAME:\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
      "right" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.getType() == Token.EMPTY) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.getType() == Token.COMMA) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN));\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.LP:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        addList(first, false, context);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(\n            childCount ==\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0));\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type));\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().getType() == Token.NUMBER) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type));\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addLeftExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1);\n        cc.addOp(\":\", true);\n        addExpr(last, 1);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.GET_REF:\n        add(first);\n        break;\n\n      case Token.REF_SPECIAL:\n        Preconditions.checkState(childCount == 1);\n        add(first);\n        add(\".\");\n        add((String) n.getProp(Node.NAME_PROP));\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GET:\n      case Token.SET:\n        Preconditions.checkState(n.getParent().getType() == Token.OBJECTLIT);\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.getType() == Token.FUNCTION);\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GET) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            add(jsString(n.getString(), outputCharsetEncoder));\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().getType() == Token.SCRIPT);\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.getType() == Token.VAR) {\n            cc.endStatement();\n          }\n\n          if (c.getType() == Token.FUNCTION) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.getType() == Token.VAR) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.getType() == Token.NUMBER);\n        if (needsParens) {\n          add(\"(\");\n        }\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA));\n          add(\")\");\n        } else {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n      case Token.THIS:\n      case Token.FALSE:\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(Node.tokenToName(type));\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_VOID:\n        throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(first, Token.CALL, new MatchNotFunction())) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) {\n          throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());\n        }\n        add(jsString(n.getString(), outputCharsetEncoder));\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.getType() == Token.GET || c.getType() == Token.SET) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.getType() == Token.STRING);\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (first.getType() != Token.LABEL_NAME) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      // This node is auto generated in anonymous functions and should just get\n      // ignored for our purposes.\n      case Token.SETNAME:\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
      "info" : "SwitchStatement[3703-21614]:SwitchStatement[3703-21968]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[3725-3740]:SwitchCase[3725-3740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3741-4379]:Block[3741-4379]"
    }, {
      "left" : "Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                !first.getNext().hasMoreThanOneChild());",
      "right" : "Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                !first.getNext().hasMoreThanOneChild());",
      "info" : "ExpressionStatement[3751-3876]:ExpressionStatement[3751-3876]"
    }, {
      "left" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
      "right" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
      "info" : "ExpressionStatement[3885-3946]:ExpressionStatement[3885-3946]"
    }, {
      "left" : "add(\"try\");",
      "right" : "add(\"try\");",
      "info" : "ExpressionStatement[3956-3967]:ExpressionStatement[3956-3967]"
    }, {
      "left" : "add(first, Context.PRESERVE_BLOCK);",
      "right" : "add(first, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[3976-4011]:ExpressionStatement[3976-4011]"
    }, {
      "left" : "Node catchblock = first.getNext().getFirstChild();",
      "right" : "Node catchblock = first.getNext().getFirstChild();",
      "info" : "VariableDeclarationStatement[4122-4172]:VariableDeclarationStatement[4122-4172]"
    }, {
      "left" : "if (catchblock != null)",
      "right" : "if (catchblock != null)",
      "info" : "IfStatement[4181-4243]:IfStatement[4181-4243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4205-4243]:Block[4205-4243]"
    }, {
      "left" : "add(catchblock);",
      "right" : "add(catchblock);",
      "info" : "ExpressionStatement[4217-4233]:ExpressionStatement[4217-4233]"
    }, {
      "left" : "if (childCount == 3)",
      "right" : "if (childCount == 3)",
      "info" : "IfStatement[4253-4356]:IfStatement[4253-4356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4274-4356]:Block[4274-4356]"
    }, {
      "left" : "add(\"finally\");",
      "right" : "add(\"finally\");",
      "info" : "ExpressionStatement[4286-4301]:ExpressionStatement[4286-4301]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[4312-4346]:ExpressionStatement[4312-4346]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4365-4371]:BreakStatement[4365-4371]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[4387-4404]:SwitchCase[4387-4404]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[4413-4455]:ExpressionStatement[4413-4455]"
    }, {
      "left" : "add(\"catch(\");",
      "right" : "add(\"catch(\");",
      "info" : "ExpressionStatement[4464-4478]:ExpressionStatement[4464-4478]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[4487-4498]:ExpressionStatement[4487-4498]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[4507-4516]:ExpressionStatement[4507-4516]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[4525-4559]:ExpressionStatement[4525-4559]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4568-4574]:BreakStatement[4568-4574]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[4582-4599]:SwitchCase[4582-4599]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[4608-4650]:ExpressionStatement[4608-4650]"
    }, {
      "left" : "add(\"throw\");",
      "right" : "add(\"throw\");",
      "info" : "ExpressionStatement[4659-4672]:ExpressionStatement[4659-4672]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[4681-4692]:ExpressionStatement[4681-4692]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[4800-4822]:ExpressionStatement[4800-4822]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4831-4837]:BreakStatement[4831-4837]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[4845-4863]:SwitchCase[4845-4863]"
    }, {
      "left" : "add(\"return\");",
      "right" : "add(\"return\");",
      "info" : "ExpressionStatement[4872-4886]:ExpressionStatement[4872-4886]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[4895-5019]:IfStatement[4895-5019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4916-4949]:Block[4916-4949]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[4928-4939]:ExpressionStatement[4928-4939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4955-5019]:Block[4955-5019]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[4967-5009]:ExpressionStatement[4967-5009]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[5028-5046]:ExpressionStatement[5028-5046]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5055-5061]:BreakStatement[5055-5061]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[5069-5084]:SwitchCase[5069-5084]"
    }, {
      "left" : "if (first != null)",
      "right" : "if (first != null)",
      "info" : "IfStatement[5093-5215]:IfStatement[5093-5215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5112-5215]:Block[5112-5215]"
    }, {
      "left" : "add(\"var \");",
      "right" : "add(\"var \");",
      "info" : "ExpressionStatement[5124-5136]:ExpressionStatement[5124-5136]"
    }, {
      "left" : "addList(first, false, getContextForNoInOperator(context));",
      "right" : "addList(first, false, getContextForNoInOperator(context));",
      "info" : "ExpressionStatement[5147-5205]:ExpressionStatement[5147-5205]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5224-5230]:BreakStatement[5224-5230]"
    }, {
      "left" : "case Token.LABEL_NAME:",
      "right" : "case Token.LABEL_NAME:",
      "info" : "SwitchCase[5238-5260]:SwitchCase[5238-5260]"
    }, {
      "left" : "Preconditions.checkState(!n.getString().isEmpty());",
      "right" : "Preconditions.checkState(!n.getString().isEmpty());",
      "info" : "ExpressionStatement[5269-5320]:ExpressionStatement[5269-5320]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[5329-5358]:ExpressionStatement[5329-5358]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5367-5373]:BreakStatement[5367-5373]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[5381-5397]:SwitchCase[5381-5397]"
    }, {
      "left" : "if (first == null || first.getType() == Token.EMPTY)",
      "right" : "if (first == null || first.getType() == Token.EMPTY)",
      "info" : "IfStatement[5406-5958]:IfStatement[5406-5958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5459-5510]:Block[5459-5510]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[5471-5500]:ExpressionStatement[5471-5500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5516-5958]:Block[5516-5958]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[5528-5570]:ExpressionStatement[5528-5570]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[5581-5610]:ExpressionStatement[5581-5610]"
    }, {
      "left" : "cc.addOp(\"=\", true);",
      "right" : "cc.addOp(\"=\", true);",
      "info" : "ExpressionStatement[5621-5641]:ExpressionStatement[5621-5641]"
    }, {
      "left" : "if (first.getType() == Token.COMMA)",
      "right" : "if (first.getType() == Token.COMMA)",
      "info" : "IfStatement[5652-5948]:IfStatement[5652-5948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5688-5764]:Block[5688-5764]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN));",
      "right" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN));",
      "info" : "ExpressionStatement[5702-5752]:ExpressionStatement[5702-5752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5770-5948]:Block[5770-5948]"
    }, {
      "left" : "addExpr(first, 0, getContextForNoInOperator(context));",
      "right" : "addExpr(first, 0, getContextForNoInOperator(context));",
      "info" : "ExpressionStatement[5882-5936]:ExpressionStatement[5882-5936]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5967-5973]:BreakStatement[5967-5973]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[5981-6001]:SwitchCase[5981-6001]"
    }, {
      "left" : "add(\"[\");",
      "right" : "add(\"[\");",
      "info" : "ExpressionStatement[6010-6019]:ExpressionStatement[6010-6019]"
    }, {
      "left" : "addArrayList(first);",
      "right" : "addArrayList(first);",
      "info" : "ExpressionStatement[6028-6048]:ExpressionStatement[6028-6048]"
    }, {
      "left" : "add(\"]\");",
      "right" : "add(\"]\");",
      "info" : "ExpressionStatement[6057-6066]:ExpressionStatement[6057-6066]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6075-6081]:BreakStatement[6075-6081]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[6089-6103]:SwitchCase[6089-6103]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[6112-6121]:ExpressionStatement[6112-6121]"
    }, {
      "left" : "addList(first);",
      "right" : "addList(first);",
      "info" : "ExpressionStatement[6130-6145]:ExpressionStatement[6130-6145]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[6154-6163]:ExpressionStatement[6154-6163]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6172-6178]:BreakStatement[6172-6178]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[6186-6203]:SwitchCase[6186-6203]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[6212-6254]:ExpressionStatement[6212-6254]"
    }, {
      "left" : "addList(first, false, context);",
      "right" : "addList(first, false, context);",
      "info" : "ExpressionStatement[6263-6294]:ExpressionStatement[6263-6294]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6303-6309]:BreakStatement[6303-6309]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[6317-6335]:SwitchCase[6317-6335]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount ==\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0));",
      "right" : "Preconditions.checkState(\n            childCount ==\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0));",
      "info" : "ExpressionStatement[6344-6503]:ExpressionStatement[6344-6503]"
    }, {
      "left" : "cc.addNumber(n.getDouble());",
      "right" : "cc.addNumber(n.getDouble());",
      "info" : "ExpressionStatement[6512-6540]:ExpressionStatement[6512-6540]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6549-6555]:BreakStatement[6549-6555]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[6563-6581]:SwitchCase[6563-6581]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[6588-6604]:SwitchCase[6588-6604]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[6611-6626]:SwitchCase[6611-6626]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[6633-6651]:SwitchCase[6633-6651]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[6658-6673]:SwitchCase[6658-6673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6674-6917]:Block[6674-6917]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[6746-6788]:ExpressionStatement[6746-6788]"
    }, {
      "left" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "right" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "info" : "ExpressionStatement[6797-6843]:ExpressionStatement[6797-6843]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type));",
      "right" : "addExpr(first, NodeUtil.precedence(type));",
      "info" : "ExpressionStatement[6852-6894]:ExpressionStatement[6852-6894]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6903-6909]:BreakStatement[6903-6909]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[6925-6940]:SwitchCase[6925-6940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6941-7468]:Block[6941-7468]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[6951-6993]:ExpressionStatement[6951-6993]"
    }, {
      "left" : "if (n.getFirstChild().getType() == Token.NUMBER)",
      "right" : "if (n.getFirstChild().getType() == Token.NUMBER)",
      "info" : "IfStatement[7201-7444]:IfStatement[7201-7444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7250-7317]:Block[7250-7317]"
    }, {
      "left" : "cc.addNumber(-n.getFirstChild().getDouble());",
      "right" : "cc.addNumber(-n.getFirstChild().getDouble());",
      "info" : "ExpressionStatement[7262-7307]:ExpressionStatement[7262-7307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7323-7444]:Block[7323-7444]"
    }, {
      "left" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "right" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "info" : "ExpressionStatement[7335-7381]:ExpressionStatement[7335-7381]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type));",
      "right" : "addExpr(first, NodeUtil.precedence(type));",
      "info" : "ExpressionStatement[7392-7434]:ExpressionStatement[7392-7434]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7454-7460]:BreakStatement[7454-7460]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[7476-7492]:SwitchCase[7476-7492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7493-7776]:Block[7493-7776]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[7503-7545]:ExpressionStatement[7503-7545]"
    }, {
      "left" : "int p = NodeUtil.precedence(type);",
      "right" : "int p = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[7554-7588]:VariableDeclarationStatement[7554-7588]"
    }, {
      "left" : "addLeftExpr(first, p + 1, context);",
      "right" : "addLeftExpr(first, p + 1, context);",
      "info" : "ExpressionStatement[7597-7632]:ExpressionStatement[7597-7632]"
    }, {
      "left" : "cc.addOp(\"?\", true);",
      "right" : "cc.addOp(\"?\", true);",
      "info" : "ExpressionStatement[7641-7661]:ExpressionStatement[7641-7661]"
    }, {
      "left" : "addExpr(first.getNext(), 1);",
      "right" : "addExpr(first.getNext(), 1);",
      "info" : "ExpressionStatement[7670-7698]:ExpressionStatement[7670-7698]"
    }, {
      "left" : "cc.addOp(\":\", true);",
      "right" : "cc.addOp(\":\", true);",
      "info" : "ExpressionStatement[7707-7727]:ExpressionStatement[7707-7727]"
    }, {
      "left" : "addExpr(last, 1);",
      "right" : "addExpr(last, 1);",
      "info" : "ExpressionStatement[7736-7753]:ExpressionStatement[7736-7753]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7762-7768]:BreakStatement[7762-7768]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[7784-7802]:SwitchCase[7784-7802]"
    }, {
      "left" : "if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING)",
      "right" : "if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING)",
      "info" : "IfStatement[7811-7967]:IfStatement[7811-7967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7894-7967]:Block[7894-7967]"
    }, {
      "left" : "throw new Error(\"Expected children to be strings\");",
      "right" : "throw new Error(\"Expected children to be strings\");",
      "info" : "ThrowStatement[7906-7957]:ThrowStatement[7906-7957]"
    }, {
      "left" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
      "right" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
      "info" : "VariableDeclarationStatement[7977-8047]:VariableDeclarationStatement[7977-8047]"
    }, {
      "left" : "if (childCount == 2)",
      "right" : "if (childCount == 2)",
      "info" : "IfStatement[8115-8282]:IfStatement[8115-8282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8136-8189]:Block[8136-8189]"
    }, {
      "left" : "add(regexp + last.getString());",
      "right" : "add(regexp + last.getString());",
      "info" : "ExpressionStatement[8148-8179]:ExpressionStatement[8148-8179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8195-8282]:Block[8195-8282]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[8207-8249]:ExpressionStatement[8207-8249]"
    }, {
      "left" : "add(regexp);",
      "right" : "add(regexp);",
      "info" : "ExpressionStatement[8260-8272]:ExpressionStatement[8260-8272]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8291-8297]:BreakStatement[8291-8297]"
    }, {
      "left" : "case Token.GET_REF:",
      "right" : "case Token.GET_REF:",
      "info" : "SwitchCase[8305-8324]:SwitchCase[8305-8324]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[8333-8344]:ExpressionStatement[8333-8344]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8353-8359]:BreakStatement[8353-8359]"
    }, {
      "left" : "case Token.REF_SPECIAL:",
      "right" : "case Token.REF_SPECIAL:",
      "info" : "SwitchCase[8367-8390]:SwitchCase[8367-8390]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[8399-8441]:ExpressionStatement[8399-8441]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[8450-8461]:ExpressionStatement[8450-8461]"
    }, {
      "left" : "add(\".\");",
      "right" : "add(\".\");",
      "info" : "ExpressionStatement[8470-8479]:ExpressionStatement[8470-8479]"
    }, {
      "left" : "add((String) n.getProp(Node.NAME_PROP));",
      "right" : "add((String) n.getProp(Node.NAME_PROP));",
      "info" : "ExpressionStatement[8488-8528]:ExpressionStatement[8488-8528]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8537-8543]:BreakStatement[8537-8543]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[8551-8571]:SwitchCase[8551-8571]"
    }, {
      "left" : "if (n.getClass() != Node.class)",
      "right" : "if (n.getClass() != Node.class)",
      "info" : "IfStatement[8580-8679]:IfStatement[8580-8679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8612-8679]:Block[8612-8679]"
    }, {
      "left" : "throw new Error(\"Unexpected Node subclass.\");",
      "right" : "throw new Error(\"Unexpected Node subclass.\");",
      "info" : "ThrowStatement[8624-8669]:ThrowStatement[8624-8669]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[8688-8730]:ExpressionStatement[8688-8730]"
    }, {
      "left" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
      "right" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
      "info" : "VariableDeclarationStatement[8739-8800]:VariableDeclarationStatement[8739-8800]"
    }, {
      "left" : "if (funcNeedsParens)",
      "right" : "if (funcNeedsParens)",
      "info" : "IfStatement[8809-8861]:IfStatement[8809-8861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8830-8861]:Block[8830-8861]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[8842-8851]:ExpressionStatement[8842-8851]"
    }, {
      "left" : "add(\"function\");",
      "right" : "add(\"function\");",
      "info" : "ExpressionStatement[8871-8887]:ExpressionStatement[8871-8887]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[8896-8907]:ExpressionStatement[8896-8907]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[8917-8938]:ExpressionStatement[8917-8938]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[8947-8981]:ExpressionStatement[8947-8981]"
    }, {
      "left" : "cc.endFunction(context == Context.STATEMENT);",
      "right" : "cc.endFunction(context == Context.STATEMENT);",
      "info" : "ExpressionStatement[8990-9035]:ExpressionStatement[8990-9035]"
    }, {
      "left" : "if (funcNeedsParens)",
      "right" : "if (funcNeedsParens)",
      "info" : "IfStatement[9045-9097]:IfStatement[9045-9097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9066-9097]:Block[9066-9097]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[9078-9087]:ExpressionStatement[9078-9087]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9106-9112]:BreakStatement[9106-9112]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[9120-9135]:SwitchCase[9120-9135]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[9142-9157]:SwitchCase[9142-9157]"
    }, {
      "left" : "Preconditions.checkState(n.getParent().getType() == Token.OBJECTLIT);",
      "right" : "Preconditions.checkState(n.getParent().getType() == Token.OBJECTLIT);",
      "info" : "ExpressionStatement[9166-9235]:ExpressionStatement[9166-9235]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[9244-9286]:ExpressionStatement[9244-9286]"
    }, {
      "left" : "Preconditions.checkState(first.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(first.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[9295-9355]:ExpressionStatement[9295-9355]"
    }, {
      "left" : "Preconditions.checkState(first.getFirstChild().getString().isEmpty());",
      "right" : "Preconditions.checkState(first.getFirstChild().getString().isEmpty());",
      "info" : "ExpressionStatement[9400-9470]:ExpressionStatement[9400-9470]"
    }, {
      "left" : "if (type == Token.GET)",
      "right" : "if (type == Token.GET)",
      "info" : "IfStatement[9479-9819]:IfStatement[9479-9819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9502-9658]:Block[9502-9658]"
    }, {
      "left" : "Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());",
      "right" : "Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());",
      "info" : "ExpressionStatement[9559-9625]:ExpressionStatement[9559-9625]"
    }, {
      "left" : "add(\"get \");",
      "right" : "add(\"get \");",
      "info" : "ExpressionStatement[9636-9648]:ExpressionStatement[9636-9648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9664-9819]:Block[9664-9819]"
    }, {
      "left" : "Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());",
      "right" : "Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());",
      "info" : "ExpressionStatement[9721-9786]:ExpressionStatement[9721-9786]"
    }, {
      "left" : "add(\"set \");",
      "right" : "add(\"set \");",
      "info" : "ExpressionStatement[9797-9809]:ExpressionStatement[9797-9809]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[9876-9904]:VariableDeclarationStatement[9876-9904]"
    }, {
      "left" : "Node fn = first;",
      "right" : "Node fn = first;",
      "info" : "VariableDeclarationStatement[9913-9929]:VariableDeclarationStatement[9913-9929]"
    }, {
      "left" : "Node parameters = fn.getChildAtIndex(1);",
      "right" : "Node parameters = fn.getChildAtIndex(1);",
      "info" : "VariableDeclarationStatement[9938-9978]:VariableDeclarationStatement[9938-9978]"
    }, {
      "left" : "Node body = fn.getLastChild();",
      "right" : "Node body = fn.getLastChild();",
      "info" : "VariableDeclarationStatement[9987-10017]:VariableDeclarationStatement[9987-10017]"
    }, {
      "left" : "if (TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name))",
      "right" : "if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name))",
      "info" : "IfStatement[10061-10413]:IfStatement[10061-10588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10245-10277]:Block[10280-10312]"
    }, {
      "left" : "add(name);",
      "right" : "add(name);",
      "info" : "ExpressionStatement[10257-10267]:ExpressionStatement[10292-10302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10283-10413]:Block[10501-10578]"
    }, {
      "left" : "add(jsString(n.getString(), outputCharsetEncoder));",
      "right" : "add(jsString(n.getString(), outputCharsetEncoder));",
      "info" : "ExpressionStatement[10352-10403]:ExpressionStatement[10515-10566]"
    }, {
      "left" : "add(parameters);",
      "right" : "add(parameters);",
      "info" : "ExpressionStatement[10423-10439]:ExpressionStatement[10598-10614]"
    }, {
      "left" : "add(body, Context.PRESERVE_BLOCK);",
      "right" : "add(body, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[10448-10482]:ExpressionStatement[10623-10657]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10491-10497]:BreakStatement[10666-10672]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[10505-10523]:SwitchCase[10680-10698]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[10530-10547]:SwitchCase[10705-10722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10548-11747]:Block[10723-11922]"
    }, {
      "left" : "if (n.getClass() != Node.class)",
      "right" : "if (n.getClass() != Node.class)",
      "info" : "IfStatement[10558-10657]:IfStatement[10733-10832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10590-10657]:Block[10765-10832]"
    }, {
      "left" : "throw new Error(\"Unexpected Node subclass.\");",
      "right" : "throw new Error(\"Unexpected Node subclass.\");",
      "info" : "ThrowStatement[10602-10647]:ThrowStatement[10777-10822]"
    }, {
      "left" : "boolean preserveBlock = context == Context.PRESERVE_BLOCK;",
      "right" : "boolean preserveBlock = context == Context.PRESERVE_BLOCK;",
      "info" : "VariableDeclarationStatement[10666-10724]:VariableDeclarationStatement[10841-10899]"
    }, {
      "left" : "if (preserveBlock)",
      "right" : "if (preserveBlock)",
      "info" : "IfStatement[10733-10790]:IfStatement[10908-10965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10752-10790]:Block[10927-10965]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[10764-10780]:ExpressionStatement[10939-10955]"
    }, {
      "left" : "boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().getType() == Token.SCRIPT);",
      "right" : "boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().getType() == Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[10800-11031]:VariableDeclarationStatement[10975-11206]"
    }, {
      "left" : "for (Node c = first; c != null; c = c.getNext())",
      "right" : "for (Node c = first; c != null; c = c.getNext())",
      "info" : "ForStatement[11040-11606]:ForStatement[11215-11781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11089-11606]:Block[11264-11781]"
    }, {
      "left" : "add(c, Context.STATEMENT);",
      "right" : "add(c, Context.STATEMENT);",
      "info" : "ExpressionStatement[11101-11127]:ExpressionStatement[11276-11302]"
    }, {
      "left" : "if (c.getType() == Token.VAR)",
      "right" : "if (c.getType() == Token.VAR)",
      "info" : "IfStatement[11210-11284]:IfStatement[11385-11459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11240-11284]:Block[11415-11459]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[11254-11272]:ExpressionStatement[11429-11447]"
    }, {
      "left" : "if (c.getType() == Token.FUNCTION)",
      "right" : "if (c.getType() == Token.FUNCTION)",
      "info" : "IfStatement[11296-11377]:IfStatement[11471-11552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11331-11377]:Block[11506-11552]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[11345-11365]:ExpressionStatement[11520-11540]"
    }, {
      "left" : "if (preferLineBreaks)",
      "right" : "if (preferLineBreaks)",
      "info" : "IfStatement[11520-11596]:IfStatement[11695-11771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11542-11596]:Block[11717-11771]"
    }, {
      "left" : "cc.notePreferredLineBreak();",
      "right" : "cc.notePreferredLineBreak();",
      "info" : "ExpressionStatement[11556-11584]:ExpressionStatement[11731-11759]"
    }, {
      "left" : "if (preserveBlock)",
      "right" : "if (preserveBlock)",
      "info" : "IfStatement[11615-11724]:IfStatement[11790-11899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11634-11724]:Block[11809-11899]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[11646-11714]:ExpressionStatement[11821-11889]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11733-11739]:BreakStatement[11908-11914]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[11755-11770]:SwitchCase[11930-11945]"
    }, {
      "left" : "if (childCount == 4)",
      "right" : "if (childCount == 4)",
      "info" : "IfStatement[11779-12548]:IfStatement[11954-12723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11800-12258]:Block[11975-12433]"
    }, {
      "left" : "add(\"for(\");",
      "right" : "add(\"for(\");",
      "info" : "ExpressionStatement[11812-11824]:ExpressionStatement[11987-11999]"
    }, {
      "left" : "if (first.getType() == Token.VAR)",
      "right" : "if (first.getType() == Token.VAR)",
      "info" : "IfStatement[11835-12012]:IfStatement[12010-12187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11869-11934]:Block[12044-12109]"
    }, {
      "left" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
      "right" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
      "info" : "ExpressionStatement[11883-11922]:ExpressionStatement[12058-12097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11940-12012]:Block[12115-12187]"
    }, {
      "left" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
      "right" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
      "info" : "ExpressionStatement[11954-12000]:ExpressionStatement[12129-12175]"
    }, {
      "left" : "add(\";\");",
      "right" : "add(\";\");",
      "info" : "ExpressionStatement[12023-12032]:ExpressionStatement[12198-12207]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[12043-12064]:ExpressionStatement[12218-12239]"
    }, {
      "left" : "add(\";\");",
      "right" : "add(\";\");",
      "info" : "ExpressionStatement[12075-12084]:ExpressionStatement[12250-12259]"
    }, {
      "left" : "add(first.getNext().getNext());",
      "right" : "add(first.getNext().getNext());",
      "info" : "ExpressionStatement[12095-12126]:ExpressionStatement[12270-12301]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12137-12146]:ExpressionStatement[12312-12321]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[12157-12248]:ExpressionStatement[12332-12423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12264-12548]:Block[12439-12723]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[12276-12318]:ExpressionStatement[12451-12493]"
    }, {
      "left" : "add(\"for(\");",
      "right" : "add(\"for(\");",
      "info" : "ExpressionStatement[12329-12341]:ExpressionStatement[12504-12516]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[12352-12363]:ExpressionStatement[12527-12538]"
    }, {
      "left" : "add(\"in\");",
      "right" : "add(\"in\");",
      "info" : "ExpressionStatement[12374-12384]:ExpressionStatement[12549-12559]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[12395-12416]:ExpressionStatement[12570-12591]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12427-12436]:ExpressionStatement[12602-12611]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[12447-12538]:ExpressionStatement[12622-12713]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12557-12563]:BreakStatement[12732-12738]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[12571-12585]:SwitchCase[12746-12760]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[12594-12636]:ExpressionStatement[12769-12811]"
    }, {
      "left" : "add(\"do\");",
      "right" : "add(\"do\");",
      "info" : "ExpressionStatement[12645-12655]:ExpressionStatement[12820-12830]"
    }, {
      "left" : "addNonEmptyStatement(first, Context.OTHER, false);",
      "right" : "addNonEmptyStatement(first, Context.OTHER, false);",
      "info" : "ExpressionStatement[12664-12714]:ExpressionStatement[12839-12889]"
    }, {
      "left" : "add(\"while(\");",
      "right" : "add(\"while(\");",
      "info" : "ExpressionStatement[12723-12737]:ExpressionStatement[12898-12912]"
    }, {
      "left" : "add(last);",
      "right" : "add(last);",
      "info" : "ExpressionStatement[12746-12756]:ExpressionStatement[12921-12931]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12765-12774]:ExpressionStatement[12940-12949]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[12783-12801]:ExpressionStatement[12958-12976]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12810-12816]:BreakStatement[12985-12991]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[12824-12841]:SwitchCase[12999-13016]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[12850-12892]:ExpressionStatement[13025-13067]"
    }, {
      "left" : "add(\"while(\");",
      "right" : "add(\"while(\");",
      "info" : "ExpressionStatement[12901-12915]:ExpressionStatement[13076-13090]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[12924-12935]:ExpressionStatement[13099-13110]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12944-12953]:ExpressionStatement[13119-13128]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[12962-13051]:ExpressionStatement[13137-13226]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13060-13066]:BreakStatement[13235-13241]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[13074-13091]:SwitchCase[13249-13266]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[13100-13142]:ExpressionStatement[13275-13317]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13151-13157]:BreakStatement[13326-13332]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[13165-13184]:SwitchCase[13340-13359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13185-13775]:Block[13360-13950]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
      "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
      "info" : "ExpressionStatement[13195-13322]:ExpressionStatement[13370-13497]"
    }, {
      "left" : "Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");",
      "right" : "Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");",
      "info" : "ExpressionStatement[13331-13450]:ExpressionStatement[13506-13625]"
    }, {
      "left" : "boolean needsParens = (first.getType() == Token.NUMBER);",
      "right" : "boolean needsParens = (first.getType() == Token.NUMBER);",
      "info" : "VariableDeclarationStatement[13459-13515]:VariableDeclarationStatement[13634-13690]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[13524-13572]:IfStatement[13699-13747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13541-13572]:Block[13716-13747]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[13553-13562]:ExpressionStatement[13728-13737]"
    }, {
      "left" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[13581-13636]:ExpressionStatement[13756-13811]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[13645-13693]:IfStatement[13820-13868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13662-13693]:Block[13837-13868]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[13674-13683]:ExpressionStatement[13849-13858]"
    }, {
      "left" : "add(\".\");",
      "right" : "add(\".\");",
      "info" : "ExpressionStatement[13702-13711]:ExpressionStatement[13877-13886]"
    }, {
      "left" : "addIdentifier(last.getString());",
      "right" : "addIdentifier(last.getString());",
      "info" : "ExpressionStatement[13720-13752]:ExpressionStatement[13895-13927]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13761-13767]:BreakStatement[13936-13942]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[13783-13802]:SwitchCase[13958-13977]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
      "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
      "info" : "ExpressionStatement[13811-13937]:ExpressionStatement[13986-14112]"
    }, {
      "left" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[13946-14001]:ExpressionStatement[14121-14176]"
    }, {
      "left" : "add(\"[\");",
      "right" : "add(\"[\");",
      "info" : "ExpressionStatement[14010-14019]:ExpressionStatement[14185-14194]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[14028-14049]:ExpressionStatement[14203-14224]"
    }, {
      "left" : "add(\"]\");",
      "right" : "add(\"]\");",
      "info" : "ExpressionStatement[14058-14067]:ExpressionStatement[14233-14242]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14076-14082]:BreakStatement[14251-14257]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[14090-14106]:SwitchCase[14265-14281]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[14115-14157]:ExpressionStatement[14290-14332]"
    }, {
      "left" : "add(\"with(\");",
      "right" : "add(\"with(\");",
      "info" : "ExpressionStatement[14166-14179]:ExpressionStatement[14341-14354]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[14188-14199]:ExpressionStatement[14363-14374]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[14208-14217]:ExpressionStatement[14383-14392]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[14226-14315]:ExpressionStatement[14401-14490]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14324-14330]:BreakStatement[14499-14505]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[14338-14353]:SwitchCase[14513-14528]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[14360-14375]:SwitchCase[14535-14550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14376-14873]:Block[14551-15048]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[14386-14428]:ExpressionStatement[14561-14603]"
    }, {
      "left" : "String o = type == Token.INC ? \"++\" : \"--\";",
      "right" : "String o = type == Token.INC ? \"++\" : \"--\";",
      "info" : "VariableDeclarationStatement[14437-14480]:VariableDeclarationStatement[14612-14655]"
    }, {
      "left" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
      "right" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
      "info" : "VariableDeclarationStatement[14489-14537]:VariableDeclarationStatement[14664-14712]"
    }, {
      "left" : "if (postProp != 0)",
      "right" : "if (postProp != 0)",
      "info" : "IfStatement[14655-14850]:IfStatement[14830-15025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14674-14781]:Block[14849-14956]"
    }, {
      "left" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[14686-14741]:ExpressionStatement[14861-14916]"
    }, {
      "left" : "cc.addOp(o, false);",
      "right" : "cc.addOp(o, false);",
      "info" : "ExpressionStatement[14752-14771]:ExpressionStatement[14927-14946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14787-14850]:Block[14962-15025]"
    }, {
      "left" : "cc.addOp(o, false);",
      "right" : "cc.addOp(o, false);",
      "info" : "ExpressionStatement[14799-14818]:ExpressionStatement[14974-14993]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[14829-14840]:ExpressionStatement[15004-15015]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14859-14865]:BreakStatement[15034-15040]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[14881-14897]:SwitchCase[15056-15072]"
    }, {
      "left" : "if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first))",
      "right" : "if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first))",
      "info" : "IfStatement[15482-15778]:IfStatement[15657-15953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15582-15695]:Block[15757-15870]"
    }, {
      "left" : "add(\"(0,\");",
      "right" : "add(\"(0,\");",
      "info" : "ExpressionStatement[15594-15605]:ExpressionStatement[15769-15780]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(Token.COMMA));",
      "right" : "addExpr(first, NodeUtil.precedence(Token.COMMA));",
      "info" : "ExpressionStatement[15616-15665]:ExpressionStatement[15791-15840]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[15676-15685]:ExpressionStatement[15851-15860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15701-15778]:Block[15876-15953]"
    }, {
      "left" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[15713-15768]:ExpressionStatement[15888-15943]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[15787-15796]:ExpressionStatement[15962-15971]"
    }, {
      "left" : "addList(first.getNext());",
      "right" : "addList(first.getNext());",
      "info" : "ExpressionStatement[15805-15830]:ExpressionStatement[15980-16005]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[15839-15848]:ExpressionStatement[16014-16023]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15857-15863]:BreakStatement[16032-16038]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[15871-15885]:SwitchCase[16046-16060]"
    }, {
      "left" : "boolean hasElse = childCount == 3;",
      "right" : "boolean hasElse = childCount == 3;",
      "info" : "VariableDeclarationStatement[15894-15928]:VariableDeclarationStatement[16069-16103]"
    }, {
      "left" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
      "right" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
      "info" : "VariableDeclarationStatement[15937-16031]:VariableDeclarationStatement[16112-16206]"
    }, {
      "left" : "if (ambiguousElseClause)",
      "right" : "if (ambiguousElseClause)",
      "info" : "IfStatement[16040-16103]:IfStatement[16215-16278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16065-16103]:Block[16240-16278]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[16077-16093]:ExpressionStatement[16252-16268]"
    }, {
      "left" : "add(\"if(\");",
      "right" : "add(\"if(\");",
      "info" : "ExpressionStatement[16113-16124]:ExpressionStatement[16288-16299]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[16133-16144]:ExpressionStatement[16308-16319]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[16153-16162]:ExpressionStatement[16328-16337]"
    }, {
      "left" : "if (hasElse)",
      "right" : "if (hasElse)",
      "info" : "IfStatement[16172-16563]:IfStatement[16347-16738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16185-16422]:Block[16360-16597]"
    }, {
      "left" : "addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
      "right" : "addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
      "info" : "ExpressionStatement[16197-16287]:ExpressionStatement[16372-16462]"
    }, {
      "left" : "add(\"else\");",
      "right" : "add(\"else\");",
      "info" : "ExpressionStatement[16298-16310]:ExpressionStatement[16473-16485]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[16321-16412]:ExpressionStatement[16496-16587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16428-16563]:Block[16603-16738]"
    }, {
      "left" : "addNonEmptyStatement(first.getNext(), Context.OTHER, false);",
      "right" : "addNonEmptyStatement(first.getNext(), Context.OTHER, false);",
      "info" : "ExpressionStatement[16440-16500]:ExpressionStatement[16615-16675]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[16511-16553]:ExpressionStatement[16686-16728]"
    }, {
      "left" : "if (ambiguousElseClause)",
      "right" : "if (ambiguousElseClause)",
      "info" : "IfStatement[16573-16634]:IfStatement[16748-16809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16598-16634]:Block[16773-16809]"
    }, {
      "left" : "cc.endBlock();",
      "right" : "cc.endBlock();",
      "info" : "ExpressionStatement[16610-16624]:ExpressionStatement[16785-16799]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16643-16649]:BreakStatement[16818-16824]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[16657-16673]:SwitchCase[16832-16848]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[16680-16696]:SwitchCase[16855-16871]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[16703-16720]:SwitchCase[16878-16895]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[16727-16743]:SwitchCase[16902-16918]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[16752-16794]:ExpressionStatement[16927-16969]"
    }, {
      "left" : "add(Node.tokenToName(type));",
      "right" : "add(Node.tokenToName(type));",
      "info" : "ExpressionStatement[16803-16831]:ExpressionStatement[16978-17006]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16840-16846]:BreakStatement[17015-17021]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[16854-16874]:SwitchCase[17029-17049]"
    }, {
      "left" : "Preconditions.checkState(childCount <= 1);",
      "right" : "Preconditions.checkState(childCount <= 1);",
      "info" : "ExpressionStatement[16883-16925]:ExpressionStatement[17058-17100]"
    }, {
      "left" : "add(\"continue\");",
      "right" : "add(\"continue\");",
      "info" : "ExpressionStatement[16934-16950]:ExpressionStatement[17109-17125]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[16959-17175]:IfStatement[17134-17350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16980-17175]:Block[17155-17350]"
    }, {
      "left" : "if (first.getType() != Token.LABEL_NAME)",
      "right" : "if (first.getType() != Token.LABEL_NAME)",
      "info" : "IfStatement[16992-17123]:IfStatement[17167-17298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17033-17123]:Block[17208-17298]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[17047-17111]:ThrowStatement[17222-17286]"
    }, {
      "left" : "add(\" \");",
      "right" : "add(\" \");",
      "info" : "ExpressionStatement[17134-17143]:ExpressionStatement[17309-17318]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[17154-17165]:ExpressionStatement[17329-17340]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[17184-17202]:ExpressionStatement[17359-17377]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17211-17217]:BreakStatement[17386-17392]"
    }, {
      "left" : "case Token.DEBUGGER:",
      "right" : "case Token.DEBUGGER:",
      "info" : "SwitchCase[17225-17245]:SwitchCase[17400-17420]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[17254-17296]:ExpressionStatement[17429-17471]"
    }, {
      "left" : "add(\"debugger\");",
      "right" : "add(\"debugger\");",
      "info" : "ExpressionStatement[17305-17321]:ExpressionStatement[17480-17496]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[17330-17348]:ExpressionStatement[17505-17523]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17357-17363]:BreakStatement[17532-17538]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[17371-17388]:SwitchCase[17546-17563]"
    }, {
      "left" : "Preconditions.checkState(childCount <= 1);",
      "right" : "Preconditions.checkState(childCount <= 1);",
      "info" : "ExpressionStatement[17397-17439]:ExpressionStatement[17572-17614]"
    }, {
      "left" : "add(\"break\");",
      "right" : "add(\"break\");",
      "info" : "ExpressionStatement[17448-17461]:ExpressionStatement[17623-17636]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[17470-17686]:IfStatement[17645-17861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17491-17686]:Block[17666-17861]"
    }, {
      "left" : "if (first.getType() != Token.LABEL_NAME)",
      "right" : "if (first.getType() != Token.LABEL_NAME)",
      "info" : "IfStatement[17503-17634]:IfStatement[17678-17809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17544-17634]:Block[17719-17809]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[17558-17622]:ThrowStatement[17733-17797]"
    }, {
      "left" : "add(\" \");",
      "right" : "add(\" \");",
      "info" : "ExpressionStatement[17645-17654]:ExpressionStatement[17820-17829]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[17665-17676]:ExpressionStatement[17840-17851]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[17695-17713]:ExpressionStatement[17870-17888]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17722-17728]:BreakStatement[17897-17903]"
    }, {
      "left" : "case Token.EXPR_VOID:",
      "right" : "case Token.EXPR_VOID:",
      "info" : "SwitchCase[17736-17757]:SwitchCase[17911-17932]"
    }, {
      "left" : "throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");",
      "right" : "throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");",
      "info" : "ThrowStatement[17766-17830]:ThrowStatement[17941-18005]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[17838-17861]:SwitchCase[18013-18036]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[17870-17912]:ExpressionStatement[18045-18087]"
    }, {
      "left" : "add(first, Context.START_OF_EXPR);",
      "right" : "add(first, Context.START_OF_EXPR);",
      "info" : "ExpressionStatement[17921-17955]:ExpressionStatement[18096-18130]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[17964-17982]:ExpressionStatement[18139-18157]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17991-17997]:BreakStatement[18166-18172]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[18005-18020]:SwitchCase[18180-18195]"
    }, {
      "left" : "add(\"new \");",
      "right" : "add(\"new \");",
      "info" : "ExpressionStatement[18029-18041]:ExpressionStatement[18204-18216]"
    }, {
      "left" : "int precedence = NodeUtil.precedence(type);",
      "right" : "int precedence = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[18050-18093]:VariableDeclarationStatement[18225-18268]"
    }, {
      "left" : "if (NodeUtil.containsType(first, Token.CALL, new MatchNotFunction()))",
      "right" : "if (NodeUtil.containsType(first, Token.CALL, new MatchNotFunction()))",
      "info" : "IfStatement[18326-18472]:IfStatement[18501-18647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18396-18472]:Block[18571-18647]"
    }, {
      "left" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
      "right" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
      "info" : "ExpressionStatement[18408-18462]:ExpressionStatement[18583-18637]"
    }, {
      "left" : "addExpr(first, precedence);",
      "right" : "addExpr(first, precedence);",
      "info" : "ExpressionStatement[18481-18508]:ExpressionStatement[18656-18683]"
    }, {
      "left" : "Node next = first.getNext();",
      "right" : "Node next = first.getNext();",
      "info" : "VariableDeclarationStatement[18576-18604]:VariableDeclarationStatement[18751-18779]"
    }, {
      "left" : "if (next != null)",
      "right" : "if (next != null)",
      "info" : "IfStatement[18613-18707]:IfStatement[18788-18882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18631-18707]:Block[18806-18882]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[18643-18652]:ExpressionStatement[18818-18827]"
    }, {
      "left" : "addList(next);",
      "right" : "addList(next);",
      "info" : "ExpressionStatement[18663-18677]:ExpressionStatement[18838-18852]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[18688-18697]:ExpressionStatement[18863-18872]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18716-18722]:BreakStatement[18891-18897]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[18730-18748]:SwitchCase[18905-18923]"
    }, {
      "left" : "if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0))",
      "right" : "if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0))",
      "info" : "IfStatement[18757-19014]:IfStatement[18932-19189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18882-19014]:Block[19057-19189]"
    }, {
      "left" : "throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());",
      "right" : "throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());",
      "info" : "ThrowStatement[18894-19004]:ThrowStatement[19069-19179]"
    }, {
      "left" : "add(jsString(n.getString(), outputCharsetEncoder));",
      "right" : "add(jsString(n.getString(), outputCharsetEncoder));",
      "info" : "ExpressionStatement[19023-19074]:ExpressionStatement[19198-19249]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19083-19089]:BreakStatement[19258-19264]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[19097-19116]:SwitchCase[19272-19291]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[19125-19167]:ExpressionStatement[19300-19342]"
    }, {
      "left" : "add(\"delete \");",
      "right" : "add(\"delete \");",
      "info" : "ExpressionStatement[19176-19191]:ExpressionStatement[19351-19366]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[19200-19211]:ExpressionStatement[19375-19386]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19220-19226]:BreakStatement[19395-19401]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[19234-19255]:SwitchCase[19409-19430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19256-20474]:Block[19431-20828]"
    }, {
      "left" : "boolean needsParens = (context == Context.START_OF_EXPR);",
      "right" : "boolean needsParens = (context == Context.START_OF_EXPR);",
      "info" : "VariableDeclarationStatement[19266-19323]:VariableDeclarationStatement[19441-19498]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[19332-19380]:IfStatement[19507-19555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19349-19380]:Block[19524-19555]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[19361-19370]:ExpressionStatement[19536-19545]"
    }, {
      "left" : "add(\"{\");",
      "right" : "add(\"{\");",
      "info" : "ExpressionStatement[19389-19398]:ExpressionStatement[19564-19573]"
    }, {
      "left" : "for (Node c = first; c != null; c = c.getNext())",
      "right" : "for (Node c = first; c != null; c = c.getNext())",
      "info" : "ForStatement[19407-20376]:ForStatement[19582-20730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19456-20376]:Block[19631-20730]"
    }, {
      "left" : "if (c != first)",
      "right" : "if (c != first)",
      "info" : "IfStatement[19468-19529]:IfStatement[19643-19704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19484-19529]:Block[19659-19704]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[19498-19517]:ExpressionStatement[19673-19692]"
    }, {
      "left" : "if (c.getType() == Token.GET || c.getType() == Token.SET)",
      "right" : "if (c.getType() == Token.GET || c.getType() == Token.SET)",
      "info" : "IfStatement[19541-20366]:IfStatement[19716-20720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19599-19632]:Block[19774-19807]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[19613-19620]:ExpressionStatement[19788-19795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19638-20366]:Block[19813-20720]"
    }, {
      "left" : "if (c.getType() == Token.STRING &&\n                !c.isQuotedString() &&\n                !TokenStream.isKeyword(c.getString()) &&\n                TokenStream.isJSIdentifier(c.getString()) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(c.getString()))",
      "right" : "if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key))",
      "info" : "IfStatement[19772-20289]:IfStatement[20054-20643]"
    }, {
      "left" : "c.getType() == Token.STRING",
      "right" : "c.getType() == Token.STRING",
      "info" : "InfixExpression[19776-19803]:InfixExpression[19852-19879]"
    }, {
      "left" : "c.getType() == Token.STRING &&\n                !c.isQuotedString()",
      "right" : "!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)",
      "info" : "InfixExpression[19776-19842]:InfixExpression[20058-20332]"
    }, {
      "left" : "TokenStream",
      "right" : "TokenStream",
      "info" : "METHOD_INVOCATION_RECEIVER[19863-19874]:METHOD_INVOCATION_RECEIVER[20098-20109]"
    }, {
      "left" : "TokenStream",
      "right" : "TokenStream",
      "info" : "METHOD_INVOCATION_RECEIVER[19919-19930]:METHOD_INVOCATION_RECEIVER[20144-20155]"
    }, {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[20096-20104]:METHOD_INVOCATION_RECEIVER[20311-20319]"
    }, {
      "left" : "c.getString()",
      "right" : "c.getString()",
      "info" : "MethodInvocation[20113-20126]:MethodInvocation[19907-19920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20184-20289]:Block[20581-20629]"
    }, {
      "left" : "addExpr(c, 1);",
      "right" : "addExpr(c, 1);",
      "info" : "ExpressionStatement[20261-20275]:ExpressionStatement[20599-20613]"
    }, {
      "left" : "add(\":\");",
      "right" : "add(\":\");",
      "info" : "ExpressionStatement[20302-20311]:ExpressionStatement[20656-20665]"
    }, {
      "left" : "addExpr(c.getFirstChild(), 1);",
      "right" : "addExpr(c.getFirstChild(), 1);",
      "info" : "ExpressionStatement[20324-20354]:ExpressionStatement[20678-20708]"
    }, {
      "left" : "add(\"}\");",
      "right" : "add(\"}\");",
      "info" : "ExpressionStatement[20385-20394]:ExpressionStatement[20739-20748]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[20403-20451]:IfStatement[20757-20805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20420-20451]:Block[20774-20805]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[20432-20441]:ExpressionStatement[20786-20795]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20460-20466]:BreakStatement[20814-20820]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[20482-20500]:SwitchCase[20836-20854]"
    }, {
      "left" : "add(\"switch(\");",
      "right" : "add(\"switch(\");",
      "info" : "ExpressionStatement[20509-20524]:ExpressionStatement[20863-20878]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[20533-20544]:ExpressionStatement[20887-20898]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[20553-20562]:ExpressionStatement[20907-20916]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[20571-20587]:ExpressionStatement[20925-20941]"
    }, {
      "left" : "addAllSiblings(first.getNext());",
      "right" : "addAllSiblings(first.getNext());",
      "info" : "ExpressionStatement[20596-20628]:ExpressionStatement[20950-20982]"
    }, {
      "left" : "cc.endBlock(context == Context.STATEMENT);",
      "right" : "cc.endBlock(context == Context.STATEMENT);",
      "info" : "ExpressionStatement[20637-20679]:ExpressionStatement[20991-21033]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20688-20694]:BreakStatement[21042-21048]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[20702-20718]:SwitchCase[21056-21072]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[20727-20769]:ExpressionStatement[21081-21123]"
    }, {
      "left" : "add(\"case \");",
      "right" : "add(\"case \");",
      "info" : "ExpressionStatement[20778-20791]:ExpressionStatement[21132-21145]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[20800-20811]:ExpressionStatement[21154-21165]"
    }, {
      "left" : "addCaseBody(last);",
      "right" : "addCaseBody(last);",
      "info" : "ExpressionStatement[20820-20838]:ExpressionStatement[21174-21192]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20847-20853]:BreakStatement[21201-21207]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[20861-20880]:SwitchCase[21215-21234]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[20889-20931]:ExpressionStatement[21243-21285]"
    }, {
      "left" : "add(\"default\");",
      "right" : "add(\"default\");",
      "info" : "ExpressionStatement[20940-20955]:ExpressionStatement[21294-21309]"
    }, {
      "left" : "addCaseBody(first);",
      "right" : "addCaseBody(first);",
      "info" : "ExpressionStatement[20964-20983]:ExpressionStatement[21318-21337]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20992-20998]:BreakStatement[21346-21352]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[21006-21023]:SwitchCase[21360-21377]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[21032-21074]:ExpressionStatement[21386-21428]"
    }, {
      "left" : "if (first.getType() != Token.LABEL_NAME)",
      "right" : "if (first.getType() != Token.LABEL_NAME)",
      "info" : "IfStatement[21083-21210]:IfStatement[21437-21564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21124-21210]:Block[21478-21564]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[21136-21200]:ThrowStatement[21490-21554]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[21219-21230]:ExpressionStatement[21573-21584]"
    }, {
      "left" : "add(\":\");",
      "right" : "add(\":\");",
      "info" : "ExpressionStatement[21239-21248]:ExpressionStatement[21593-21602]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);",
      "info" : "ExpressionStatement[21257-21345]:ExpressionStatement[21611-21699]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21354-21360]:BreakStatement[21708-21714]"
    }, {
      "left" : "case Token.SETNAME:",
      "right" : "case Token.SETNAME:",
      "info" : "SwitchCase[21483-21502]:SwitchCase[21837-21856]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21511-21517]:BreakStatement[21865-21871]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[21525-21533]:SwitchCase[21879-21887]"
    }, {
      "left" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
      "right" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
      "info" : "ThrowStatement[21542-21608]:ThrowStatement[21896-21962]"
    }, {
      "left" : "cc.endSourceMapping(n);",
      "right" : "cc.endSourceMapping(n);",
      "info" : "ExpressionStatement[21620-21643]:ExpressionStatement[21974-21997]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21716-21723]:Modifier[22532-22539]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21724-21731]:PrimitiveType[22540-22547]"
    }, {
      "left" : "isIndirectEval",
      "right" : "isIndirectEval",
      "info" : "SimpleName[21732-21746]:SimpleName[22548-22562]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21747-21753]:SingleVariableDeclaration[22563-22569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21755-21877]:Block[22571-22693]"
    }, {
      "left" : "return n.getType() == Token.NAME && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "right" : "return n.getType() == Token.NAME && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "info" : "ReturnStatement[21761-21873]:ReturnStatement[22577-22689]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22154-22161]:Modifier[22970-22977]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22162-22166]:PrimitiveType[22978-22982]"
    }, {
      "left" : "addNonEmptyStatement",
      "right" : "addNonEmptyStatement",
      "info" : "SimpleName[22167-22187]:SimpleName[22983-23003]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22195-22201]:SingleVariableDeclaration[23011-23017]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[22203-22218]:SingleVariableDeclaration[23019-23034]"
    }, {
      "left" : "boolean allowNonBlockChild",
      "right" : "boolean allowNonBlockChild",
      "info" : "SingleVariableDeclaration[22220-22246]:SingleVariableDeclaration[23036-23062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22248-24037]:Block[23064-24853]"
    }, {
      "left" : "Node nodeToProcess = n;",
      "right" : "Node nodeToProcess = n;",
      "info" : "VariableDeclarationStatement[22254-22277]:VariableDeclarationStatement[23070-23093]"
    }, {
      "left" : "if (!allowNonBlockChild && n.getType() != Token.BLOCK)",
      "right" : "if (!allowNonBlockChild && n.getType() != Token.BLOCK)",
      "info" : "IfStatement[22283-22392]:IfStatement[23099-23208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22338-22392]:Block[23154-23208]"
    }, {
      "left" : "throw new Error(\"Missing BLOCK child.\");",
      "right" : "throw new Error(\"Missing BLOCK child.\");",
      "info" : "ThrowStatement[22346-22386]:ThrowStatement[23162-23202]"
    }, {
      "left" : "if (n.getType() == Token.BLOCK)",
      "right" : "if (n.getType() == Token.BLOCK)",
      "info" : "IfStatement[22523-23664]:IfStatement[23339-24480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22555-23664]:Block[23371-24480]"
    }, {
      "left" : "int count = getNonEmptyChildCount(n, 2);",
      "right" : "int count = getNonEmptyChildCount(n, 2);",
      "info" : "VariableDeclarationStatement[22563-22603]:VariableDeclarationStatement[23379-23419]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[22610-22863]:IfStatement[23426-23679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22626-22863]:Block[23442-23679]"
    }, {
      "left" : "if (cc.shouldPreserveExtraBlocks())",
      "right" : "if (cc.shouldPreserveExtraBlocks())",
      "info" : "IfStatement[22636-22839]:IfStatement[23452-23655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22672-22789]:Block[23488-23605]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[22684-22700]:ExpressionStatement[23500-23516]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[22711-22779]:ExpressionStatement[23527-23595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22795-22839]:Block[23611-23655]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[22807-22829]:ExpressionStatement[23623-23645]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22848-22855]:ReturnStatement[23664-23671]"
    }, {
      "left" : "if (count == 1)",
      "right" : "if (count == 1)",
      "info" : "IfStatement[22871-23584]:IfStatement[23687-24400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22887-23584]:Block[23703-24400]"
    }, {
      "left" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "right" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "info" : "VariableDeclarationStatement[23055-23105]:VariableDeclarationStatement[23871-23921]"
    }, {
      "left" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "right" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "info" : "VariableDeclarationStatement[23114-23173]:VariableDeclarationStatement[23930-23989]"
    }, {
      "left" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "right" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "info" : "IfStatement[23182-23576]:IfStatement[23998-24392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23252-23471]:Block[24068-24287]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[23264-23280]:ExpressionStatement[24080-24096]"
    }, {
      "left" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "right" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "info" : "ExpressionStatement[23291-23333]:ExpressionStatement[24107-24149]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[23344-23364]:ExpressionStatement[24160-24180]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[23375-23443]:ExpressionStatement[24191-24259]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[23454-23461]:ReturnStatement[24270-24277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23477-23576]:Block[24293-24392]"
    }, {
      "left" : "nodeToProcess = firstAndOnlyChild;",
      "right" : "nodeToProcess = firstAndOnlyChild;",
      "info" : "ExpressionStatement[23532-23566]:ExpressionStatement[24348-24382]"
    }, {
      "left" : "if (count > 1)",
      "right" : "if (count > 1)",
      "info" : "IfStatement[23592-23658]:IfStatement[24408-24474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23607-23658]:Block[24423-24474]"
    }, {
      "left" : "context = Context.PRESERVE_BLOCK;",
      "right" : "context = Context.PRESERVE_BLOCK;",
      "info" : "ExpressionStatement[23617-23650]:ExpressionStatement[24433-24466]"
    }, {
      "left" : "if (nodeToProcess.getType() == Token.EMPTY)",
      "right" : "if (nodeToProcess.getType() == Token.EMPTY)",
      "info" : "IfStatement[23670-24033]:IfStatement[24486-24849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23714-23750]:Block[24530-24566]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[23722-23744]:ExpressionStatement[24538-24560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23756-24033]:Block[24572-24849]"
    }, {
      "left" : "add(nodeToProcess, context);",
      "right" : "add(nodeToProcess, context);",
      "info" : "ExpressionStatement[23764-23792]:ExpressionStatement[24580-24608]"
    }, {
      "left" : "if (nodeToProcess.getType() == Token.VAR)",
      "right" : "if (nodeToProcess.getType() == Token.VAR)",
      "info" : "IfStatement[23949-24027]:IfStatement[24765-24843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23991-24027]:Block[24807-24843]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[24001-24019]:ExpressionStatement[24817-24835]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24134-24141]:Modifier[24950-24957]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24142-24149]:PrimitiveType[24958-24965]"
    }, {
      "left" : "isOneExactlyFunctionOrDo",
      "right" : "isOneExactlyFunctionOrDo",
      "info" : "SimpleName[24150-24174]:SimpleName[24966-24990]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24175-24181]:SingleVariableDeclaration[24991-24997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24183-24956]:Block[24999-25772]"
    }, {
      "left" : "if (n.getType() == Token.LABEL)",
      "right" : "if (n.getType() == Token.LABEL)",
      "info" : "IfStatement[24189-24952]:IfStatement[25005-25768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24221-24866]:Block[25037-25682]"
    }, {
      "left" : "Node labeledStatement = n.getLastChild();",
      "right" : "Node labeledStatement = n.getLastChild();",
      "info" : "VariableDeclarationStatement[24229-24270]:VariableDeclarationStatement[25045-25086]"
    }, {
      "left" : "if (labeledStatement.getType() != Token.BLOCK)",
      "right" : "if (labeledStatement.getType() != Token.BLOCK)",
      "info" : "IfStatement[24277-24860]:IfStatement[25093-25676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24324-24392]:Block[25140-25208]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "right" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "info" : "ReturnStatement[24334-24384]:ReturnStatement[25150-25200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24398-24860]:Block[25214-25676]"
    }, {
      "left" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "right" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "info" : "IfStatement[24573-24852]:IfStatement[25389-25668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24611-24691]:Block[25427-25507]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "right" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "info" : "ReturnStatement[24623-24681]:ReturnStatement[25439-25497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24697-24852]:Block[25513-25668]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24829-24842]:ReturnStatement[25645-25658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24872-24952]:Block[25688-25768]"
    }, {
      "left" : "return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);",
      "right" : "return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);",
      "info" : "ReturnStatement[24880-24946]:ReturnStatement[25696-25762]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25394-25398]:PrimitiveType[26210-26214]"
    }, {
      "left" : "addLeftExpr",
      "right" : "addLeftExpr",
      "info" : "SimpleName[25399-25410]:SimpleName[26215-26226]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25411-25417]:SingleVariableDeclaration[26227-26233]"
    }, {
      "left" : "int minPrecedence",
      "right" : "int minPrecedence",
      "info" : "SingleVariableDeclaration[25419-25436]:SingleVariableDeclaration[26235-26252]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[25438-25453]:SingleVariableDeclaration[26254-26269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25455-25500]:Block[26271-26316]"
    }, {
      "left" : "addExpr(n, minPrecedence, context);",
      "right" : "addExpr(n, minPrecedence, context);",
      "info" : "ExpressionStatement[25461-25496]:ExpressionStatement[26277-26312]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25504-25508]:PrimitiveType[26320-26324]"
    }, {
      "left" : "addExpr",
      "right" : "addExpr",
      "info" : "SimpleName[25509-25516]:SimpleName[26325-26332]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25517-25523]:SingleVariableDeclaration[26333-26339]"
    }, {
      "left" : "int minPrecedence",
      "right" : "int minPrecedence",
      "info" : "SingleVariableDeclaration[25525-25542]:SingleVariableDeclaration[26341-26358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25544-25595]:Block[26360-26411]"
    }, {
      "left" : "addExpr(n, minPrecedence, Context.OTHER);",
      "right" : "addExpr(n, minPrecedence, Context.OTHER);",
      "info" : "ExpressionStatement[25550-25591]:ExpressionStatement[26366-26407]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25599-25606]:Modifier[26415-26422]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25607-25611]:PrimitiveType[26423-26427]"
    }, {
      "left" : "addExpr",
      "right" : "addExpr",
      "info" : "SimpleName[25612-25619]:SimpleName[26428-26435]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25620-25626]:SingleVariableDeclaration[26436-26442]"
    }, {
      "left" : "int minPrecedence",
      "right" : "int minPrecedence",
      "info" : "SingleVariableDeclaration[25628-25645]:SingleVariableDeclaration[26444-26461]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[25647-25662]:SingleVariableDeclaration[26463-26478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25664-25946]:Block[26480-26762]"
    }, {
      "left" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.getType() == Token.IN)))",
      "right" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.getType() == Token.IN)))",
      "info" : "IfStatement[25670-25942]:IfStatement[26486-26758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25815-25906]:Block[26631-26722]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[25823-25832]:ExpressionStatement[26639-26648]"
    }, {
      "left" : "add(n, clearContextForNoInOperator(context));",
      "right" : "add(n, clearContextForNoInOperator(context));",
      "info" : "ExpressionStatement[25839-25884]:ExpressionStatement[26655-26700]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[25891-25900]:ExpressionStatement[26707-26716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25912-25942]:Block[26728-26758]"
    }, {
      "left" : "add(n, context);",
      "right" : "add(n, context);",
      "info" : "ExpressionStatement[25920-25936]:ExpressionStatement[26736-26752]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25950-25954]:PrimitiveType[26766-26770]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[25955-25962]:SimpleName[26771-26778]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[25963-25979]:SingleVariableDeclaration[26779-26795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25981-26033]:Block[26797-26849]"
    }, {
      "left" : "addList(firstInList, true, Context.OTHER);",
      "right" : "addList(firstInList, true, Context.OTHER);",
      "info" : "ExpressionStatement[25987-26029]:ExpressionStatement[26803-26845]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26037-26041]:PrimitiveType[26853-26857]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[26042-26049]:SimpleName[26858-26865]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[26050-26066]:SingleVariableDeclaration[26866-26882]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[26068-26101]:SingleVariableDeclaration[26884-26917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26103-26176]:Block[26919-26992]"
    }, {
      "left" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "right" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "info" : "ExpressionStatement[26109-26172]:ExpressionStatement[26925-26988]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26180-26184]:PrimitiveType[26996-27000]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[26185-26192]:SimpleName[27001-27008]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[26193-26209]:SingleVariableDeclaration[27009-27025]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[26211-26244]:SingleVariableDeclaration[27027-27060]"
    }, {
      "left" : "Context lhsContext",
      "right" : "Context lhsContext",
      "info" : "SingleVariableDeclaration[26261-26279]:SingleVariableDeclaration[27077-27095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26281-26593]:Block[27097-27409]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[26287-26589]:ForStatement[27103-27405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26342-26589]:Block[27158-27405]"
    }, {
      "left" : "boolean isFirst = n == firstInList;",
      "right" : "boolean isFirst = n == firstInList;",
      "info" : "VariableDeclarationStatement[26350-26385]:VariableDeclarationStatement[27166-27201]"
    }, {
      "left" : "if (isFirst)",
      "right" : "if (isFirst)",
      "info" : "IfStatement[26392-26583]:IfStatement[27208-27399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26405-26485]:Block[27221-27301]"
    }, {
      "left" : "addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "right" : "addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "info" : "ExpressionStatement[26415-26477]:ExpressionStatement[27231-27293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26491-26583]:Block[27307-27399]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[26501-26520]:ExpressionStatement[27317-27336]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0);",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0);",
      "info" : "ExpressionStatement[26529-26575]:ExpressionStatement[27345-27391]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26948-26952]:PrimitiveType[27764-27768]"
    }, {
      "left" : "addArrayList",
      "right" : "addArrayList",
      "info" : "SimpleName[26953-26965]:SimpleName[27769-27781]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[26966-26982]:SingleVariableDeclaration[27782-27798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26984-27283]:Block[27800-28099]"
    }, {
      "left" : "boolean lastWasEmpty = false;",
      "right" : "boolean lastWasEmpty = false;",
      "info" : "VariableDeclarationStatement[26990-27019]:VariableDeclarationStatement[27806-27835]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[27024-27222]:ForStatement[27840-28038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27079-27222]:Block[27895-28038]"
    }, {
      "left" : "if (n != firstInList)",
      "right" : "if (n != firstInList)",
      "info" : "IfStatement[27087-27146]:IfStatement[27903-27962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27109-27146]:Block[27925-27962]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[27119-27138]:ExpressionStatement[27935-27954]"
    }, {
      "left" : "addExpr(n, 1);",
      "right" : "addExpr(n, 1);",
      "info" : "ExpressionStatement[27153-27167]:ExpressionStatement[27969-27983]"
    }, {
      "left" : "lastWasEmpty = n.getType() == Token.EMPTY;",
      "right" : "lastWasEmpty = n.getType() == Token.EMPTY;",
      "info" : "ExpressionStatement[27174-27216]:ExpressionStatement[27990-28032]"
    }, {
      "left" : "if (lastWasEmpty)",
      "right" : "if (lastWasEmpty)",
      "info" : "IfStatement[27228-27279]:IfStatement[28044-28095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27246-27279]:Block[28062-28095]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[27254-27273]:ExpressionStatement[28070-28089]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27287-27291]:PrimitiveType[28103-28107]"
    }, {
      "left" : "addCaseBody",
      "right" : "addCaseBody",
      "info" : "SimpleName[27292-27303]:SimpleName[28108-28119]"
    }, {
      "left" : "Node caseBody",
      "right" : "Node caseBody",
      "info" : "SingleVariableDeclaration[27304-27317]:SingleVariableDeclaration[28120-28133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27319-27389]:Block[28135-28205]"
    }, {
      "left" : "cc.beginCaseBody();",
      "right" : "cc.beginCaseBody();",
      "info" : "ExpressionStatement[27325-27344]:ExpressionStatement[28141-28160]"
    }, {
      "left" : "add(caseBody);",
      "right" : "add(caseBody);",
      "info" : "ExpressionStatement[27349-27363]:ExpressionStatement[28165-28179]"
    }, {
      "left" : "cc.endCaseBody();",
      "right" : "cc.endCaseBody();",
      "info" : "ExpressionStatement[27368-27385]:ExpressionStatement[28184-28201]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27393-27397]:PrimitiveType[28209-28213]"
    }, {
      "left" : "addAllSiblings",
      "right" : "addAllSiblings",
      "info" : "SimpleName[27398-27412]:SimpleName[28214-28228]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27413-27419]:SingleVariableDeclaration[28229-28235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27421-27497]:Block[28237-28313]"
    }, {
      "left" : "for (Node c = n; c != null; c = c.getNext())",
      "right" : "for (Node c = n; c != null; c = c.getNext())",
      "info" : "ForStatement[27427-27493]:ForStatement[28243-28309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27472-27493]:Block[28288-28309]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[27480-27487]:ExpressionStatement[28296-28303]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27581-27587]:Modifier[28397-28403]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[27588-27594]:SimpleType[28404-28410]"
    }, {
      "left" : "jsString",
      "right" : "jsString",
      "info" : "SimpleName[27595-27603]:SimpleName[28411-28419]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[27604-27612]:SingleVariableDeclaration[28420-28428]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[27614-27649]:SingleVariableDeclaration[28430-28465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27651-28370]:Block[28467-29186]"
    }, {
      "left" : "int singleq = 0, doubleq = 0;",
      "right" : "int singleq = 0, doubleq = 0;",
      "info" : "VariableDeclarationStatement[27657-27686]:VariableDeclarationStatement[28473-28502]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[27759-27913]:ForStatement[28575-28729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27796-27913]:Block[28612-28729]"
    }, {
      "left" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "right" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "info" : "SwitchStatement[27804-27907]:SwitchStatement[28620-28723]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[27835-27844]:SwitchCase[28651-28660]"
    }, {
      "left" : "doubleq++;",
      "right" : "doubleq++;",
      "info" : "ExpressionStatement[27845-27855]:ExpressionStatement[28661-28671]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27856-27862]:BreakStatement[28672-28678]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[27871-27881]:SwitchCase[28687-28697]"
    }, {
      "left" : "singleq++;",
      "right" : "singleq++;",
      "info" : "ExpressionStatement[27882-27892]:ExpressionStatement[28698-28708]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27893-27899]:BreakStatement[28709-28715]"
    }, {
      "left" : "String doublequote, singlequote;",
      "right" : "String doublequote, singlequote;",
      "info" : "VariableDeclarationStatement[27919-27951]:VariableDeclarationStatement[28735-28767]"
    }, {
      "left" : "char quote;",
      "right" : "char quote;",
      "info" : "VariableDeclarationStatement[27956-27967]:VariableDeclarationStatement[28772-28783]"
    }, {
      "left" : "if (singleq < doubleq)",
      "right" : "if (singleq < doubleq)",
      "info" : "IfStatement[27972-28269]:IfStatement[28788-29085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27995-28132]:Block[28811-28948]"
    }, {
      "left" : "quote = '\\'';",
      "right" : "quote = '\\'';",
      "info" : "ExpressionStatement[28059-28072]:ExpressionStatement[28875-28888]"
    }, {
      "left" : "doublequote = \"\\\"\";",
      "right" : "doublequote = \"\\\"\";",
      "info" : "ExpressionStatement[28079-28098]:ExpressionStatement[28895-28914]"
    }, {
      "left" : "singlequote = \"\\\\\\'\";",
      "right" : "singlequote = \"\\\\\\'\";",
      "info" : "ExpressionStatement[28105-28126]:ExpressionStatement[28921-28942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28138-28269]:Block[28954-29085]"
    }, {
      "left" : "quote = '\\\"';",
      "right" : "quote = '\\\"';",
      "info" : "ExpressionStatement[28196-28209]:ExpressionStatement[29012-29025]"
    }, {
      "left" : "doublequote = \"\\\\\\\"\";",
      "right" : "doublequote = \"\\\\\\\"\";",
      "info" : "ExpressionStatement[28216-28237]:ExpressionStatement[29032-29053]"
    }, {
      "left" : "singlequote = \"\\'\";",
      "right" : "singlequote = \"\\'\";",
      "info" : "ExpressionStatement[28244-28263]:ExpressionStatement[29060-29079]"
    }, {
      "left" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder);",
      "right" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder);",
      "info" : "ReturnStatement[28275-28366]:ReturnStatement[29091-29182]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28410-28416]:Modifier[29226-29232]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[28417-28423]:SimpleType[29233-29239]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[28424-28436]:SimpleName[29240-29252]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[28437-28445]:SingleVariableDeclaration[29253-29261]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[28447-28482]:SingleVariableDeclaration[29263-29298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28484-28558]:Block[29300-29374]"
    }, {
      "left" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder);",
      "right" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder);",
      "info" : "ReturnStatement[28490-28554]:ReturnStatement[29306-29370]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28650-28656]:Modifier[29466-29472]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[28657-28663]:SimpleType[29473-29479]"
    }, {
      "left" : "escapeToDoubleQuotedJsString",
      "right" : "escapeToDoubleQuotedJsString",
      "info" : "SimpleName[28664-28692]:SimpleName[29480-29508]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[28693-28701]:SingleVariableDeclaration[29509-29517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28703-28767]:Block[29519-29583]"
    }, {
      "left" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null);",
      "right" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null);",
      "info" : "ReturnStatement[28709-28763]:ReturnStatement[29525-29579]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28896-28902]:Modifier[29712-29718]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[28903-28909]:SimpleType[29719-29725]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[28910-28922]:SimpleName[29726-29738]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[28923-28931]:SingleVariableDeclaration[29739-29747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28933-28972]:Block[29749-29788]"
    }, {
      "left" : "return regexpEscape(s, null);",
      "right" : "return regexpEscape(s, null);",
      "info" : "ReturnStatement[28939-28968]:ReturnStatement[29755-29784]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29050-29056]:Modifier[29866-29872]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29057-29063]:SimpleType[29873-29879]"
    }, {
      "left" : "strEscape",
      "right" : "strEscape",
      "info" : "SimpleName[29064-29073]:SimpleName[29880-29889]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[29074-29082]:SingleVariableDeclaration[29890-29898]"
    }, {
      "left" : "char quote",
      "right" : "char quote",
      "info" : "SingleVariableDeclaration[29084-29094]:SingleVariableDeclaration[29900-29910]"
    }, {
      "left" : "String doublequoteEscape",
      "right" : "String doublequoteEscape",
      "info" : "SingleVariableDeclaration[29122-29146]:SingleVariableDeclaration[29938-29962]"
    }, {
      "left" : "String singlequoteEscape",
      "right" : "String singlequoteEscape",
      "info" : "SingleVariableDeclaration[29174-29198]:SingleVariableDeclaration[29990-30014]"
    }, {
      "left" : "String backslashEscape",
      "right" : "String backslashEscape",
      "info" : "SingleVariableDeclaration[29226-29248]:SingleVariableDeclaration[30042-30064]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[29276-29311]:SingleVariableDeclaration[30092-30127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29313-31841]:Block[30129-32657]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "right" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "info" : "VariableDeclarationStatement[29319-29372]:VariableDeclarationStatement[30135-30188]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[29377-29394]:ExpressionStatement[30193-30210]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[29399-31789]:ForStatement[30215-32605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29436-31789]:Block[30252-32605]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[29444-29465]:VariableDeclarationStatement[30260-30281]"
    }, {
      "left" : "switch (c) {\n        case '\\0': sb.append(\"\\\\0\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c <= 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "right" : "switch (c) {\n        case '\\0': sb.append(\"\\\\0\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c <= 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "info" : "SwitchStatement[29472-31783]:SwitchStatement[30288-32599]"
    }, {
      "left" : "case '\\0':",
      "right" : "case '\\0':",
      "info" : "SwitchCase[29493-29503]:SwitchCase[30309-30319]"
    }, {
      "left" : "sb.append(\"\\\\0\");",
      "right" : "sb.append(\"\\\\0\");",
      "info" : "ExpressionStatement[29504-29521]:ExpressionStatement[30320-30337]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29522-29528]:BreakStatement[30338-30344]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[29537-29547]:SwitchCase[30353-30363]"
    }, {
      "left" : "sb.append(\"\\\\n\");",
      "right" : "sb.append(\"\\\\n\");",
      "info" : "ExpressionStatement[29548-29565]:ExpressionStatement[30364-30381]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29566-29572]:BreakStatement[30382-30388]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[29581-29591]:SwitchCase[30397-30407]"
    }, {
      "left" : "sb.append(\"\\\\r\");",
      "right" : "sb.append(\"\\\\r\");",
      "info" : "ExpressionStatement[29592-29609]:ExpressionStatement[30408-30425]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29610-29616]:BreakStatement[30426-30432]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[29625-29635]:SwitchCase[30441-30451]"
    }, {
      "left" : "sb.append(\"\\\\t\");",
      "right" : "sb.append(\"\\\\t\");",
      "info" : "ExpressionStatement[29636-29653]:ExpressionStatement[30452-30469]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29654-29660]:BreakStatement[30470-30476]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[29669-29679]:SwitchCase[30485-30495]"
    }, {
      "left" : "sb.append(backslashEscape);",
      "right" : "sb.append(backslashEscape);",
      "info" : "ExpressionStatement[29680-29707]:ExpressionStatement[30496-30523]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29708-29714]:BreakStatement[30524-30530]"
    }, {
      "left" : "case '\\\"':",
      "right" : "case '\\\"':",
      "info" : "SwitchCase[29723-29733]:SwitchCase[30539-30549]"
    }, {
      "left" : "sb.append(doublequoteEscape);",
      "right" : "sb.append(doublequoteEscape);",
      "info" : "ExpressionStatement[29734-29763]:ExpressionStatement[30550-30579]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29764-29770]:BreakStatement[30580-30586]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[29779-29789]:SwitchCase[30595-30605]"
    }, {
      "left" : "sb.append(singlequoteEscape);",
      "right" : "sb.append(singlequoteEscape);",
      "info" : "ExpressionStatement[29790-29819]:ExpressionStatement[30606-30635]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29820-29826]:BreakStatement[30636-30642]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[29835-29844]:SwitchCase[30651-30660]"
    }, {
      "left" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "right" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "info" : "IfStatement[29917-30156]:IfStatement[30733-30972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30068-30111]:Block[30884-30927]"
    }, {
      "left" : "sb.append(\"\\\\>\");",
      "right" : "sb.append(\"\\\\>\");",
      "info" : "ExpressionStatement[30082-30099]:ExpressionStatement[30898-30915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30117-30156]:Block[30933-30972]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[30131-30144]:ExpressionStatement[30947-30960]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30167-30173]:BreakStatement[30983-30989]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[30182-30191]:SwitchCase[30998-31007]"
    }, {
      "left" : "final String END_SCRIPT = \"/script\";",
      "right" : "final String END_SCRIPT = \"/script\";",
      "info" : "VariableDeclarationStatement[30245-30281]:VariableDeclarationStatement[31061-31097]"
    }, {
      "left" : "final String START_COMMENT = \"!--\";",
      "right" : "final String START_COMMENT = \"!--\";",
      "info" : "VariableDeclarationStatement[30328-30363]:VariableDeclarationStatement[31144-31179]"
    }, {
      "left" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length()))",
      "right" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length()))",
      "info" : "IfStatement[30375-30726]:IfStatement[31191-31542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30475-30518]:Block[31291-31334]"
    }, {
      "left" : "sb.append(\"<\\\\\");",
      "right" : "sb.append(\"<\\\\\");",
      "info" : "ExpressionStatement[30489-30506]:ExpressionStatement[31305-31322]"
    }, {
      "left" : "if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length()))",
      "right" : "if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length()))",
      "info" : "IfStatement[30524-30726]:IfStatement[31340-31542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30638-30681]:Block[31454-31497]"
    }, {
      "left" : "sb.append(\"<\\\\\");",
      "right" : "sb.append(\"<\\\\\");",
      "info" : "ExpressionStatement[30652-30669]:ExpressionStatement[31468-31485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30687-30726]:Block[31503-31542]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[30701-30714]:ExpressionStatement[31517-31530]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30737-30743]:BreakStatement[31553-31559]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[30752-30760]:SwitchCase[31568-31576]"
    }, {
      "left" : "if (outputCharsetEncoder != null)",
      "right" : "if (outputCharsetEncoder != null)",
      "info" : "IfStatement[30908-31775]:IfStatement[31724-32591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30942-31174]:Block[31758-31990]"
    }, {
      "left" : "if (outputCharsetEncoder.canEncode(c))",
      "right" : "if (outputCharsetEncoder.canEncode(c))",
      "info" : "IfStatement[30956-31162]:IfStatement[31772-31978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30995-31038]:Block[31811-31854]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[31011-31024]:ExpressionStatement[31827-31840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31044-31162]:Block[31860-31978]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[31107-31148]:ExpressionStatement[31923-31964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31180-31775]:Block[31996-32591]"
    }, {
      "left" : "if (c > 0x1f && c <= 0x7f)",
      "right" : "if (c > 0x1f && c <= 0x7f)",
      "info" : "IfStatement[31417-31763]:IfStatement[32233-32579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31444-31487]:Block[32260-32303]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[31460-31473]:ExpressionStatement[32276-32289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31493-31763]:Block[32309-32579]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[31708-31749]:ExpressionStatement[32524-32565]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[31794-31811]:ExpressionStatement[32610-32627]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[31816-31837]:ReturnStatement[32632-32653]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31845-31851]:Modifier[32661-32667]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[31852-31858]:SimpleType[32668-32674]"
    }, {
      "left" : "identifierEscape",
      "right" : "identifierEscape",
      "info" : "SimpleName[31859-31875]:SimpleName[32675-32691]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[31876-31884]:SingleVariableDeclaration[32692-32700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31886-32535]:Block[32702-33351]"
    }, {
      "left" : "if (NodeUtil.isLatin(s))",
      "right" : "if (NodeUtil.isLatin(s))",
      "info" : "IfStatement[31967-32015]:IfStatement[32783-32831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31992-32015]:Block[32808-32831]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[32000-32009]:ReturnStatement[32816-32825]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[32099-32138]:VariableDeclarationStatement[32915-32954]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[32143-32505]:ForStatement[32959-33321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32180-32505]:Block[32996-33321]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[32188-32209]:VariableDeclarationStatement[33004-33025]"
    }, {
      "left" : "if (c > 0x1F && c < 0x7F)",
      "right" : "if (c > 0x1F && c < 0x7F)",
      "info" : "IfStatement[32377-32499]:IfStatement[33193-33315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32403-32434]:Block[33219-33250]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32413-32426]:ExpressionStatement[33229-33242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32440-32499]:Block[33256-33315]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[32450-32491]:ExpressionStatement[33266-33307]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[32510-32531]:ReturnStatement[33326-33347]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32704-32711]:Modifier[33520-33527]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32712-32718]:Modifier[33528-33534]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[32719-32722]:PrimitiveType[33535-33538]"
    }, {
      "left" : "getNonEmptyChildCount",
      "right" : "getNonEmptyChildCount",
      "info" : "SimpleName[32723-32744]:SimpleName[33539-33560]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32745-32751]:SingleVariableDeclaration[33561-33567]"
    }, {
      "left" : "int maxCount",
      "right" : "int maxCount",
      "info" : "SingleVariableDeclaration[32753-32765]:SingleVariableDeclaration[33569-33581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32767-33055]:Block[33583-33871]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[32773-32783]:VariableDeclarationStatement[33589-33599]"
    }, {
      "left" : "Node c = n.getFirstChild();",
      "right" : "Node c = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[32788-32815]:VariableDeclarationStatement[33604-33631]"
    }, {
      "left" : "for (; c != null && i < maxCount; c = c.getNext())",
      "right" : "for (; c != null && i < maxCount; c = c.getNext())",
      "info" : "ForStatement[32820-33037]:ForStatement[33636-33853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32871-33037]:Block[33687-33853]"
    }, {
      "left" : "if (c.getType() == Token.BLOCK)",
      "right" : "if (c.getType() == Token.BLOCK)",
      "info" : "IfStatement[32879-33031]:IfStatement[33695-33847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32911-32971]:Block[33727-33787]"
    }, {
      "left" : "i += getNonEmptyChildCount(c, maxCount-i);",
      "right" : "i += getNonEmptyChildCount(c, maxCount-i);",
      "info" : "ExpressionStatement[32921-32963]:ExpressionStatement[33737-33779]"
    }, {
      "left" : "if (c.getType() != Token.EMPTY)",
      "right" : "if (c.getType() != Token.EMPTY)",
      "info" : "IfStatement[32977-33031]:IfStatement[33793-33847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33009-33031]:Block[33825-33847]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[33019-33023]:ExpressionStatement[33835-33839]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[33042-33051]:ReturnStatement[33858-33867]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33118-33125]:Modifier[33934-33941]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33126-33132]:Modifier[33942-33948]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[33133-33137]:SimpleType[33949-33953]"
    }, {
      "left" : "getFirstNonEmptyChild",
      "right" : "getFirstNonEmptyChild",
      "info" : "SimpleName[33138-33159]:SimpleName[33954-33975]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33160-33166]:SingleVariableDeclaration[33976-33982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33168-33489]:Block[33984-34305]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[33174-33468]:ForStatement[33990-34284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33235-33468]:Block[34051-34284]"
    }, {
      "left" : "if (c.getType() == Token.BLOCK)",
      "right" : "if (c.getType() == Token.BLOCK)",
      "info" : "IfStatement[33243-33462]:IfStatement[34059-34278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33275-33397]:Block[34091-34213]"
    }, {
      "left" : "Node result = getFirstNonEmptyChild(c);",
      "right" : "Node result = getFirstNonEmptyChild(c);",
      "info" : "VariableDeclarationStatement[33285-33324]:VariableDeclarationStatement[34101-34140]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[33333-33389]:IfStatement[34149-34205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33353-33389]:Block[34169-34205]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[33365-33379]:ReturnStatement[34181-34195]"
    }, {
      "left" : "if (c.getType() != Token.EMPTY)",
      "right" : "if (c.getType() != Token.EMPTY)",
      "info" : "IfStatement[33403-33462]:IfStatement[34219-34278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33435-33462]:Block[34251-34278]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[33445-33454]:ReturnStatement[34261-34270]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33473-33485]:ReturnStatement[34289-34301]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34100-34107]:Modifier[34916-34923]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[34108-34115]:SimpleType[34924-34931]"
    }, {
      "left" : "getContextForNonEmptyExpression",
      "right" : "getContextForNonEmptyExpression",
      "info" : "SimpleName[34116-34147]:SimpleName[34932-34963]"
    }, {
      "left" : "Context currentContext",
      "right" : "Context currentContext",
      "info" : "SingleVariableDeclaration[34148-34170]:SingleVariableDeclaration[34964-34986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34172-34291]:Block[34988-35107]"
    }, {
      "left" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "right" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "info" : "ReturnStatement[34178-34287]:ReturnStatement[34994-35103]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34460-34467]:Modifier[35276-35283]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[34469-34476]:SimpleType[35285-35292]"
    }, {
      "left" : "getContextForNoInOperator",
      "right" : "getContextForNoInOperator",
      "info" : "SimpleName[34477-34502]:SimpleName[35293-35318]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[34503-34518]:SingleVariableDeclaration[35319-35334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34520-34630]:Block[35336-35446]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "info" : "ReturnStatement[34526-34626]:ReturnStatement[35342-35442]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34918-34925]:Modifier[35734-35741]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[34927-34934]:SimpleType[35743-35750]"
    }, {
      "left" : "clearContextForNoInOperator",
      "right" : "clearContextForNoInOperator",
      "info" : "SimpleName[34935-34962]:SimpleName[35751-35778]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[34963-34978]:SingleVariableDeclaration[35779-35794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34980-35071]:Block[35796-35887]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);",
      "info" : "ReturnStatement[34986-35067]:ReturnStatement[35802-35883]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35149-35156]:Modifier[35965-35972]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35157-35163]:Modifier[35973-35979]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35164-35168]:PrimitiveType[35980-35984]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[35169-35202]:SimpleName[35985-36018]"
    }, {
      "left" : "StringBuilder sb",
      "right" : "StringBuilder sb",
      "info" : "SingleVariableDeclaration[35210-35226]:SingleVariableDeclaration[36026-36042]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[35228-35234]:SingleVariableDeclaration[36044-36050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35236-35425]:Block[36052-36241]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[35242-35421]:TryStatement[36058-36237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35246-35301]:Block[36062-36117]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(c, sb);",
      "right" : "appendHexJavaScriptRepresentation(c, sb);",
      "info" : "ExpressionStatement[35254-35295]:ExpressionStatement[36070-36111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35325-35421]:Block[36141-36237]"
    }, {
      "left" : "throw new RuntimeException(ex);",
      "right" : "throw new RuntimeException(ex);",
      "info" : "ThrowStatement[35384-35415]:ThrowStatement[36200-36231]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35660-35667]:Modifier[36476-36483]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35668-35674]:Modifier[36484-36490]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35675-35679]:PrimitiveType[36491-36495]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[35680-35713]:SimpleName[36496-36529]"
    }, {
      "left" : "int codePoint",
      "right" : "int codePoint",
      "info" : "SingleVariableDeclaration[35721-35734]:SingleVariableDeclaration[36537-36550]"
    }, {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[35736-35750]:SingleVariableDeclaration[36552-36566]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35765-35776]:SimpleType[36581-36592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35777-36515]:Block[36593-37331]"
    }, {
      "left" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "right" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "info" : "IfStatement[35783-36287]:IfStatement[36599-37103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35834-36287]:Block[36650-37103]"
    }, {
      "left" : "char[] surrogates = Character.toChars(codePoint);",
      "right" : "char[] surrogates = Character.toChars(codePoint);",
      "info" : "VariableDeclarationStatement[36096-36145]:VariableDeclarationStatement[36912-36961]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "info" : "ExpressionStatement[36152-36206]:ExpressionStatement[36968-37022]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "info" : "ExpressionStatement[36213-36267]:ExpressionStatement[37029-37083]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36274-36281]:ReturnStatement[37090-37097]"
    }, {
      "left" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "right" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "info" : "ExpressionStatement[36292-36511]:ExpressionStatement[37108-37327]"
    } ]
  },
  "interFileMappings" : { }
}