{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "OrcStorage",
      "right" : "OrcStorage",
      "info" : "TypeDeclaration[4367-28633]:TypeDeclaration[4407-29548]"
    }, {
      "left" : "private static final String SARG_PUSHDOWN = \"sarg.pushdown\";",
      "right" : "private static final String SARG_PUSHDOWN = \"sarg.pushdown\";",
      "info" : "FieldDeclaration[5419-5479]:FieldDeclaration[5459-5519]"
    }, {
      "left" : "protected RecordReader in = null;",
      "right" : "protected RecordReader in = null;",
      "info" : "FieldDeclaration[5485-5518]:FieldDeclaration[5525-5558]"
    }, {
      "left" : "protected RecordWriter writer = null;",
      "right" : "protected RecordWriter writer = null;",
      "info" : "FieldDeclaration[5523-5560]:FieldDeclaration[5563-5600]"
    }, {
      "left" : "private TypeInfo typeInfo = null;",
      "right" : "private TypeInfo typeInfo = null;",
      "info" : "FieldDeclaration[5565-5598]:FieldDeclaration[5605-5638]"
    }, {
      "left" : "private ObjectInspector oi = null;",
      "right" : "private ObjectInspector oi = null;",
      "info" : "FieldDeclaration[5603-5637]:FieldDeclaration[5643-5677]"
    }, {
      "left" : "private OrcSerde serde = new OrcSerde();",
      "right" : "private OrcSerde serde = new OrcSerde();",
      "info" : "FieldDeclaration[5642-5682]:FieldDeclaration[5682-5722]"
    }, {
      "left" : "private String signature;",
      "right" : "private String signature;",
      "info" : "FieldDeclaration[5687-5712]:FieldDeclaration[5727-5752]"
    }, {
      "left" : "private Long stripeSize;",
      "right" : "private Long stripeSize;",
      "info" : "FieldDeclaration[5718-5742]:FieldDeclaration[5758-5782]"
    }, {
      "left" : "private Integer rowIndexStride;",
      "right" : "private Integer rowIndexStride;",
      "info" : "FieldDeclaration[5747-5778]:FieldDeclaration[5787-5818]"
    }, {
      "left" : "private Integer bufferSize;",
      "right" : "private Integer bufferSize;",
      "info" : "FieldDeclaration[5783-5810]:FieldDeclaration[5823-5850]"
    }, {
      "left" : "private Boolean blockPadding;",
      "right" : "private Boolean blockPadding;",
      "info" : "FieldDeclaration[5815-5844]:FieldDeclaration[5855-5884]"
    }, {
      "left" : "private CompressionKind compress;",
      "right" : "private CompressionKind compress;",
      "info" : "FieldDeclaration[5849-5882]:FieldDeclaration[5889-5922]"
    }, {
      "left" : "private Version version;",
      "right" : "private Version version;",
      "info" : "FieldDeclaration[5887-5911]:FieldDeclaration[5927-5951]"
    }, {
      "left" : "private static final Options validOptions;",
      "right" : "private static final Options validOptions;",
      "info" : "FieldDeclaration[5917-5959]:FieldDeclaration[5957-5999]"
    }, {
      "left" : "private final CommandLineParser parser = new GnuParser();",
      "right" : "private final CommandLineParser parser = new GnuParser();",
      "info" : "FieldDeclaration[5964-6021]:FieldDeclaration[6004-6061]"
    }, {
      "left" : "protected final static Log log = LogFactory.getLog(OrcStorage.class);",
      "right" : "protected final static Log log = LogFactory.getLog(OrcStorage.class);",
      "info" : "FieldDeclaration[6026-6095]:FieldDeclaration[6066-6135]"
    }, {
      "left" : "protected boolean[] mRequiredColumns = null;",
      "right" : "protected boolean[] mRequiredColumns = null;",
      "info" : "FieldDeclaration[6100-6144]:FieldDeclaration[6140-6184]"
    }, {
      "left" : "private static final String SchemaSignatureSuffix = \"_schema\";",
      "right" : "private static final String SchemaSignatureSuffix = \"_schema\";",
      "info" : "FieldDeclaration[6150-6212]:FieldDeclaration[6190-6252]"
    }, {
      "left" : "private static final String RequiredColumnsSuffix = \"_columns\";",
      "right" : "private static final String RequiredColumnsSuffix = \"_columns\";",
      "info" : "FieldDeclaration[6217-6280]:FieldDeclaration[6257-6320]"
    }, {
      "left" : "private static final String SearchArgsSuffix = \"_sarg\";",
      "right" : "private static final String SearchArgsSuffix = \"_sarg\";",
      "info" : "FieldDeclaration[6285-6340]:FieldDeclaration[6325-6380]"
    }, {
      "left" : "public OrcStorage()",
      "right" : "public OrcStorage()",
      "info" : "MethodDeclaration[7251-7278]:MethodDeclaration[7291-7318]"
    }, {
      "left" : "public OrcStorage(String options)",
      "right" : "public OrcStorage(String options)",
      "info" : "MethodDeclaration[7284-8717]:MethodDeclaration[7324-8757]"
    }, {
      "left" : "public String relToAbsPathForStoreLocation(String location, Path curDir)\n            throws IOException",
      "right" : "public String relToAbsPathForStoreLocation(String location, Path curDir)\n            throws IOException",
      "info" : "MethodDeclaration[8722-8906]:MethodDeclaration[8762-8946]"
    }, {
      "left" : "public OutputFormat getOutputFormat() throws IOException",
      "right" : "public OutputFormat getOutputFormat() throws IOException",
      "info" : "MethodDeclaration[8912-9031]:MethodDeclaration[8952-9071]"
    }, {
      "left" : "public void setStoreLocation(String location, Job job) throws IOException",
      "right" : "public void setStoreLocation(String location, Job job) throws IOException",
      "info" : "MethodDeclaration[9037-10752]:MethodDeclaration[9077-10792]"
    }, {
      "left" : "public void checkSchema(ResourceSchema rs) throws IOException",
      "right" : "public void checkSchema(ResourceSchema rs) throws IOException",
      "info" : "MethodDeclaration[10758-11190]:MethodDeclaration[10798-11230]"
    }, {
      "left" : "public void prepareToWrite(RecordWriter writer) throws IOException",
      "right" : "public void prepareToWrite(RecordWriter writer) throws IOException",
      "info" : "MethodDeclaration[11196-11314]:MethodDeclaration[11236-11354]"
    }, {
      "left" : "public void putNext(Tuple t) throws IOException",
      "right" : "public void putNext(Tuple t) throws IOException",
      "info" : "MethodDeclaration[11320-11550]:MethodDeclaration[11360-11590]"
    }, {
      "left" : "public void setStoreFuncUDFContextSignature(String signature)",
      "right" : "public void setStoreFuncUDFContextSignature(String signature)",
      "info" : "MethodDeclaration[11556-11675]:MethodDeclaration[11596-11715]"
    }, {
      "left" : "public void setUDFContextSignature(String signature)",
      "right" : "public void setUDFContextSignature(String signature)",
      "info" : "MethodDeclaration[11681-11791]:MethodDeclaration[11721-11831]"
    }, {
      "left" : "public void cleanupOnFailure(String location, Job job) throws IOException",
      "right" : "public void cleanupOnFailure(String location, Job job) throws IOException",
      "info" : "MethodDeclaration[11797-11947]:MethodDeclaration[11837-11987]"
    }, {
      "left" : "public void cleanupOnSuccess(String location, Job job) throws IOException",
      "right" : "public void cleanupOnSuccess(String location, Job job) throws IOException",
      "info" : "MethodDeclaration[11953-12048]:MethodDeclaration[11993-12088]"
    }, {
      "left" : "public void setLocation(String location, Job job) throws IOException",
      "right" : "public void setLocation(String location, Job job) throws IOException",
      "info" : "MethodDeclaration[12054-14175]:MethodDeclaration[12094-14215]"
    }, {
      "left" : "private String getReqiredColumnIdString(boolean[] requiredColumns)",
      "right" : "private String getReqiredColumnIdString(boolean[] requiredColumns)",
      "info" : "MethodDeclaration[14181-14601]:MethodDeclaration[14221-14641]"
    }, {
      "left" : "private String getReqiredColumnNamesString(ResourceSchema schema)",
      "right" : "private String getReqiredColumnNamesString(ResourceSchema schema)",
      "info" : "MethodDeclaration[14607-14986]:MethodDeclaration[14647-15026]"
    }, {
      "left" : "private String getReqiredColumnNamesString(ResourceSchema schema, boolean[] requiredColumns)",
      "right" : "private String getReqiredColumnNamesString(ResourceSchema schema, boolean[] requiredColumns)",
      "info" : "MethodDeclaration[14992-15504]:MethodDeclaration[15032-15544]"
    }, {
      "left" : "public InputFormat getInputFormat() throws IOException",
      "right" : "public InputFormat getInputFormat() throws IOException",
      "info" : "MethodDeclaration[15510-15626]:MethodDeclaration[15550-15666]"
    }, {
      "left" : "public void prepareToRead(RecordReader reader, PigSplit split)\n            throws IOException",
      "right" : "public void prepareToRead(RecordReader reader, PigSplit split)\n            throws IOException",
      "info" : "MethodDeclaration[15632-15768]:MethodDeclaration[15672-15808]"
    }, {
      "left" : "public Tuple getNext() throws IOException",
      "right" : "public Tuple getNext() throws IOException",
      "info" : "MethodDeclaration[15774-16381]:MethodDeclaration[15814-16421]"
    }, {
      "left" : "public List<String> getShipFiles()",
      "right" : "public List<String> getShipFiles()",
      "info" : "MethodDeclaration[16387-17278]:MethodDeclaration[16427-17318]"
    }, {
      "left" : "private static Path getFirstFile(String location, FileSystem fs) throws IOException",
      "right" : "private static Path getFirstFile(String location, FileSystem fs, PathFilter filter) throws IOException",
      "info" : "MethodDeclaration[17284-18133]:MethodDeclaration[17324-18200]"
    }, {
      "left" : "public ResourceSchema getSchema(String location, Job job)\n            throws IOException",
      "right" : "public ResourceSchema getSchema(String location, Job job)\n            throws IOException",
      "info" : "MethodDeclaration[18139-18590]:MethodDeclaration[18206-18657]"
    }, {
      "left" : "private TypeInfo getTypeInfo(String location, Job job) throws IOException",
      "right" : "private TypeInfo getTypeInfo(String location, Job job) throws IOException",
      "info" : "MethodDeclaration[18596-19153]:MethodDeclaration[18663-19220]"
    }, {
      "left" : "private TypeInfo getTypeInfoFromLocation(String location, Job job) throws IOException",
      "right" : "private TypeInfo getTypeInfoFromLocation(String location, Job job) throws IOException",
      "info" : "MethodDeclaration[19159-19759]:MethodDeclaration[19226-19857]"
    }, {
      "left" : "public ResourceStatistics getStatistics(String location, Job job)\n            throws IOException",
      "right" : "public ResourceStatistics getStatistics(String location, Job job)\n            throws IOException",
      "info" : "MethodDeclaration[19765-19904]:MethodDeclaration[20680-20819]"
    }, {
      "left" : "public String[] getPartitionKeys(String location, Job job)\n            throws IOException",
      "right" : "public String[] getPartitionKeys(String location, Job job)\n            throws IOException",
      "info" : "MethodDeclaration[19910-20042]:MethodDeclaration[20825-20957]"
    }, {
      "left" : "public void setPartitionFilter(Expression partitionFilter)\n            throws IOException",
      "right" : "public void setPartitionFilter(Expression partitionFilter)\n            throws IOException",
      "info" : "MethodDeclaration[20048-20159]:MethodDeclaration[20963-21074]"
    }, {
      "left" : "public List<OperatorSet> getFeatures()",
      "right" : "public List<OperatorSet> getFeatures()",
      "info" : "MethodDeclaration[20165-20292]:MethodDeclaration[21080-21207]"
    }, {
      "left" : "public RequiredFieldResponse pushProjection(\n            RequiredFieldList requiredFieldList) throws FrontendException",
      "right" : "public RequiredFieldResponse pushProjection(\n            RequiredFieldList requiredFieldList) throws FrontendException",
      "info" : "MethodDeclaration[20298-21313]:MethodDeclaration[21213-22228]"
    }, {
      "left" : "public List<String> getPredicateFields(String location, Job job) throws IOException",
      "right" : "public List<String> getPredicateFields(String location, Job job) throws IOException",
      "info" : "MethodDeclaration[21319-22232]:MethodDeclaration[22234-23147]"
    }, {
      "left" : "public List<OpType> getSupportedExpressionTypes()",
      "right" : "public List<OpType> getSupportedExpressionTypes()",
      "info" : "MethodDeclaration[22238-22790]:MethodDeclaration[23153-23705]"
    }, {
      "left" : "public void setPushdownPredicate(Expression expr) throws IOException",
      "right" : "public void setPushdownPredicate(Expression expr) throws IOException",
      "info" : "MethodDeclaration[22796-23433]:MethodDeclaration[23711-24348]"
    }, {
      "left" : "SearchArgument getSearchArgument(Expression expr)",
      "right" : "SearchArgument getSearchArgument(Expression expr)",
      "info" : "MethodDeclaration[23439-24048]:MethodDeclaration[24354-24963]"
    }, {
      "left" : "private void buildSearchArgument(Expression expr, Builder builder)",
      "right" : "private void buildSearchArgument(Expression expr, Builder builder)",
      "info" : "MethodDeclaration[24054-27070]:MethodDeclaration[24969-27985]"
    }, {
      "left" : "private String getColumnName(Expression expr)",
      "right" : "private String getColumnName(Expression expr)",
      "info" : "MethodDeclaration[27076-27390]:MethodDeclaration[27991-28305]"
    }, {
      "left" : "private Object getExpressionValue(Expression expr)",
      "right" : "private Object getExpressionValue(Expression expr)",
      "info" : "MethodDeclaration[27396-27786]:MethodDeclaration[28311-28701]"
    }, {
      "left" : "private List<Object> getSearchArgObjValues(List<Object> values)",
      "right" : "private List<Object> getSearchArgObjValues(List<Object> values)",
      "info" : "MethodDeclaration[27792-28228]:MethodDeclaration[28707-29143]"
    }, {
      "left" : "private Object getSearchArgObjValue(Object value)",
      "right" : "private Object getSearchArgObjValue(Object value)",
      "info" : "MethodDeclaration[28234-28630]:MethodDeclaration[29149-29545]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5221-5227]:Modifier[5261-5267]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5228-5233]:TYPE_DECLARATION_KIND[5268-5273]"
    }, {
      "left" : "OrcStorage",
      "right" : "OrcStorage",
      "info" : "SimpleName[5234-5244]:SimpleName[5274-5284]"
    }, {
      "left" : "LoadFunc",
      "right" : "LoadFunc",
      "info" : "SimpleType[5253-5261]:SimpleType[5293-5301]"
    }, {
      "left" : "StoreFuncInterface",
      "right" : "StoreFuncInterface",
      "info" : "SimpleType[5273-5291]:SimpleType[5313-5331]"
    }, {
      "left" : "LoadMetadata",
      "right" : "LoadMetadata",
      "info" : "SimpleType[5293-5305]:SimpleType[5333-5345]"
    }, {
      "left" : "LoadPushDown",
      "right" : "LoadPushDown",
      "info" : "SimpleType[5307-5319]:SimpleType[5347-5359]"
    }, {
      "left" : "LoadPredicatePushdown",
      "right" : "LoadPredicatePushdown",
      "info" : "SimpleType[5321-5342]:SimpleType[5361-5382]"
    }, {
      "left" : "StoreResources",
      "right" : "StoreResources",
      "info" : "SimpleType[5344-5358]:SimpleType[5384-5398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6353-7245]:Block[6393-7285]"
    }, {
      "left" : "validOptions = new Options();",
      "right" : "validOptions = new Options();",
      "info" : "ExpressionStatement[6363-6392]:ExpressionStatement[6403-6432]"
    }, {
      "left" : "validOptions.addOption(\"s\", \"stripeSize\", true,\n                \"Set the stripe size for the file\");",
      "right" : "validOptions.addOption(\"s\", \"stripeSize\", true,\n                \"Set the stripe size for the file\");",
      "info" : "ExpressionStatement[6401-6501]:ExpressionStatement[6441-6541]"
    }, {
      "left" : "validOptions.addOption(\"r\", \"rowIndexStride\", true,\n                \"Set the distance between entries in the row index\");",
      "right" : "validOptions.addOption(\"r\", \"rowIndexStride\", true,\n                \"Set the distance between entries in the row index\");",
      "info" : "ExpressionStatement[6510-6631]:ExpressionStatement[6550-6671]"
    }, {
      "left" : "validOptions.addOption(\"b\", \"bufferSize\", true,\n                \"The size of the memory buffers used for compressing and storing the \" +\n                \"stripe in memory\");",
      "right" : "validOptions.addOption(\"b\", \"bufferSize\", true,\n                \"The size of the memory buffers used for compressing and storing the \" +\n                \"stripe in memory\");",
      "info" : "ExpressionStatement[6640-6813]:ExpressionStatement[6680-6853]"
    }, {
      "left" : "validOptions.addOption(\"p\", \"blockPadding\", false, \"Sets whether the HDFS blocks \" +\n                \"are padded to prevent stripes from straddling blocks\");",
      "right" : "validOptions.addOption(\"p\", \"blockPadding\", false, \"Sets whether the HDFS blocks \" +\n                \"are padded to prevent stripes from straddling blocks\");",
      "info" : "ExpressionStatement[6822-6979]:ExpressionStatement[6862-7019]"
    }, {
      "left" : "validOptions.addOption(\"c\", \"compress\", true,\n                \"Sets the generic compression that is used to compress the data\");",
      "right" : "validOptions.addOption(\"c\", \"compress\", true,\n                \"Sets the generic compression that is used to compress the data\");",
      "info" : "ExpressionStatement[6988-7116]:ExpressionStatement[7028-7156]"
    }, {
      "left" : "validOptions.addOption(\"v\", \"version\", true,\n                \"Sets the version of the file that will be written\");",
      "right" : "validOptions.addOption(\"v\", \"version\", true,\n                \"Sets the version of the file that will be written\");",
      "info" : "ExpressionStatement[7125-7239]:ExpressionStatement[7165-7279]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7251-7257]:Modifier[7291-7297]"
    }, {
      "left" : "OrcStorage",
      "right" : "OrcStorage",
      "info" : "SimpleName[7258-7268]:SimpleName[7298-7308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7271-7278]:Block[7311-7318]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7284-7290]:Modifier[7324-7330]"
    }, {
      "left" : "OrcStorage",
      "right" : "OrcStorage",
      "info" : "SimpleName[7291-7301]:SimpleName[7331-7341]"
    }, {
      "left" : "String options",
      "right" : "String options",
      "info" : "SingleVariableDeclaration[7302-7316]:SingleVariableDeclaration[7342-7356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7318-8717]:Block[7358-8757]"
    }, {
      "left" : "String[] optsArr = options.split(\" \");",
      "right" : "String[] optsArr = options.split(\" \");",
      "info" : "VariableDeclarationStatement[7328-7366]:VariableDeclarationStatement[7368-7406]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7375-8711]:TryStatement[7415-8751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7379-8294]:Block[7419-8334]"
    }, {
      "left" : "CommandLine configuredOptions = parser.parse(validOptions, optsArr);",
      "right" : "CommandLine configuredOptions = parser.parse(validOptions, optsArr);",
      "info" : "VariableDeclarationStatement[7393-7461]:VariableDeclarationStatement[7433-7501]"
    }, {
      "left" : "if (configuredOptions.hasOption('s'))",
      "right" : "if (configuredOptions.hasOption('s'))",
      "info" : "IfStatement[7474-7611]:IfStatement[7514-7651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7512-7611]:Block[7552-7651]"
    }, {
      "left" : "stripeSize = Long.parseLong(configuredOptions.getOptionValue('s'));",
      "right" : "stripeSize = Long.parseLong(configuredOptions.getOptionValue('s'));",
      "info" : "ExpressionStatement[7530-7597]:ExpressionStatement[7570-7637]"
    }, {
      "left" : "if (configuredOptions.hasOption('r'))",
      "right" : "if (configuredOptions.hasOption('r'))",
      "info" : "IfStatement[7624-7767]:IfStatement[7664-7807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7662-7767]:Block[7702-7807]"
    }, {
      "left" : "rowIndexStride = Integer.parseInt(configuredOptions.getOptionValue('r'));",
      "right" : "rowIndexStride = Integer.parseInt(configuredOptions.getOptionValue('r'));",
      "info" : "ExpressionStatement[7680-7753]:ExpressionStatement[7720-7793]"
    }, {
      "left" : "if (configuredOptions.hasOption('b'))",
      "right" : "if (configuredOptions.hasOption('b'))",
      "info" : "IfStatement[7780-7919]:IfStatement[7820-7959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7818-7919]:Block[7858-7959]"
    }, {
      "left" : "bufferSize = Integer.parseInt(configuredOptions.getOptionValue('b'));",
      "right" : "bufferSize = Integer.parseInt(configuredOptions.getOptionValue('b'));",
      "info" : "ExpressionStatement[7836-7905]:ExpressionStatement[7876-7945]"
    }, {
      "left" : "blockPadding = configuredOptions.hasOption('p');",
      "right" : "blockPadding = configuredOptions.hasOption('p');",
      "info" : "ExpressionStatement[7932-7980]:ExpressionStatement[7972-8020]"
    }, {
      "left" : "if (configuredOptions.hasOption('c'))",
      "right" : "if (configuredOptions.hasOption('c'))",
      "info" : "IfStatement[7993-8137]:IfStatement[8033-8177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8031-8137]:Block[8071-8177]"
    }, {
      "left" : "compress = CompressionKind.valueOf(configuredOptions.getOptionValue('c'));",
      "right" : "compress = CompressionKind.valueOf(configuredOptions.getOptionValue('c'));",
      "info" : "ExpressionStatement[8049-8123]:ExpressionStatement[8089-8163]"
    }, {
      "left" : "if (configuredOptions.hasOption('v'))",
      "right" : "if (configuredOptions.hasOption('v'))",
      "info" : "IfStatement[8150-8284]:IfStatement[8190-8324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8188-8284]:Block[8228-8324]"
    }, {
      "left" : "version = Version.byName(configuredOptions.getOptionValue('v'));",
      "right" : "version = Version.byName(configuredOptions.getOptionValue('v'));",
      "info" : "ExpressionStatement[8206-8270]:ExpressionStatement[8246-8310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8320-8711]:Block[8360-8751]"
    }, {
      "left" : "log.error(\"Exception in OrcStorage\", e);",
      "right" : "log.error(\"Exception in OrcStorage\", e);",
      "info" : "ExpressionStatement[8334-8374]:ExpressionStatement[8374-8414]"
    }, {
      "left" : "log.error(\"OrcStorage called with arguments \" + options);",
      "right" : "log.error(\"OrcStorage called with arguments \" + options);",
      "info" : "ExpressionStatement[8387-8444]:ExpressionStatement[8427-8484]"
    }, {
      "left" : "warn(\"ParseException in OrcStorage\", PigWarning.UDF_WARNING_1);",
      "right" : "warn(\"ParseException in OrcStorage\", PigWarning.UDF_WARNING_1);",
      "info" : "ExpressionStatement[8457-8520]:ExpressionStatement[8497-8560]"
    }, {
      "left" : "HelpFormatter formatter = new HelpFormatter();",
      "right" : "HelpFormatter formatter = new HelpFormatter();",
      "info" : "VariableDeclarationStatement[8533-8579]:VariableDeclarationStatement[8573-8619]"
    }, {
      "left" : "formatter.printHelp(\"OrcStorage(',', '[options]')\", validOptions);",
      "right" : "formatter.printHelp(\"OrcStorage(',', '[options]')\", validOptions);",
      "info" : "ExpressionStatement[8592-8658]:ExpressionStatement[8632-8698]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[8671-8701]:ThrowStatement[8711-8741]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8722-8731]:MarkerAnnotation[8762-8771]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8736-8742]:Modifier[8776-8782]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8743-8749]:SimpleType[8783-8789]"
    }, {
      "left" : "relToAbsPathForStoreLocation",
      "right" : "relToAbsPathForStoreLocation",
      "info" : "SimpleName[8750-8778]:SimpleName[8790-8818]"
    }, {
      "left" : "String location",
      "right" : "String location",
      "info" : "SingleVariableDeclaration[8779-8794]:SingleVariableDeclaration[8819-8834]"
    }, {
      "left" : "Path curDir",
      "right" : "Path curDir",
      "info" : "SingleVariableDeclaration[8796-8807]:SingleVariableDeclaration[8836-8847]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8828-8839]:SimpleType[8868-8879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8840-8906]:Block[8880-8946]"
    }, {
      "left" : "return LoadFunc.getAbsolutePath(location, curDir);",
      "right" : "return LoadFunc.getAbsolutePath(location, curDir);",
      "info" : "ReturnStatement[8850-8900]:ReturnStatement[8890-8940]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8912-8921]:MarkerAnnotation[8952-8961]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8926-8932]:Modifier[8966-8972]"
    }, {
      "left" : "OutputFormat",
      "right" : "OutputFormat",
      "info" : "SimpleType[8933-8945]:SimpleType[8973-8985]"
    }, {
      "left" : "getOutputFormat",
      "right" : "getOutputFormat",
      "info" : "SimpleName[8946-8961]:SimpleName[8986-9001]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8971-8982]:SimpleType[9011-9022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8983-9031]:Block[9023-9071]"
    }, {
      "left" : "return new OrcNewOutputFormat();",
      "right" : "return new OrcNewOutputFormat();",
      "info" : "ReturnStatement[8993-9025]:ReturnStatement[9033-9065]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9037-9046]:MarkerAnnotation[9077-9086]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9051-9057]:Modifier[9091-9097]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9058-9062]:PrimitiveType[9098-9102]"
    }, {
      "left" : "setStoreLocation",
      "right" : "setStoreLocation",
      "info" : "SimpleName[9063-9079]:SimpleName[9103-9119]"
    }, {
      "left" : "String location",
      "right" : "String location",
      "info" : "SingleVariableDeclaration[9080-9095]:SingleVariableDeclaration[9120-9135]"
    }, {
      "left" : "Job job",
      "right" : "Job job",
      "info" : "SingleVariableDeclaration[9097-9104]:SingleVariableDeclaration[9137-9144]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9113-9124]:SimpleType[9153-9164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9125-10752]:Block[9165-10792]"
    }, {
      "left" : "if (!UDFContext.getUDFContext().isFrontend())",
      "right" : "if (!UDFContext.getUDFContext().isFrontend())",
      "info" : "IfStatement[9135-10345]:IfStatement[9175-10385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9181-10345]:Block[9221-10385]"
    }, {
      "left" : "if (stripeSize!=null)",
      "right" : "if (stripeSize!=null)",
      "info" : "IfStatement[9195-9372]:IfStatement[9235-9412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9217-9372]:Block[9257-9412]"
    }, {
      "left" : "job.getConfiguration().setLong(HiveConf.ConfVars.HIVE_ORC_DEFAULT_STRIPE_SIZE.varname,\n                        stripeSize);",
      "right" : "job.getConfiguration().setLong(HiveConf.ConfVars.HIVE_ORC_DEFAULT_STRIPE_SIZE.varname,\n                        stripeSize);",
      "info" : "ExpressionStatement[9235-9358]:ExpressionStatement[9275-9398]"
    }, {
      "left" : "if (rowIndexStride!=null)",
      "right" : "if (rowIndexStride!=null)",
      "info" : "IfStatement[9385-9574]:IfStatement[9425-9614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9411-9574]:Block[9451-9614]"
    }, {
      "left" : "job.getConfiguration().setInt(HiveConf.ConfVars.HIVE_ORC_DEFAULT_ROW_INDEX_STRIDE.varname,\n                        rowIndexStride);",
      "right" : "job.getConfiguration().setInt(HiveConf.ConfVars.HIVE_ORC_DEFAULT_ROW_INDEX_STRIDE.varname,\n                        rowIndexStride);",
      "info" : "ExpressionStatement[9429-9560]:ExpressionStatement[9469-9600]"
    }, {
      "left" : "if (bufferSize!=null)",
      "right" : "if (bufferSize!=null)",
      "info" : "IfStatement[9587-9763]:IfStatement[9627-9803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9609-9763]:Block[9649-9803]"
    }, {
      "left" : "job.getConfiguration().setInt(HiveConf.ConfVars.HIVE_ORC_DEFAULT_BUFFER_SIZE.varname,\n                        bufferSize);",
      "right" : "job.getConfiguration().setInt(HiveConf.ConfVars.HIVE_ORC_DEFAULT_BUFFER_SIZE.varname,\n                        bufferSize);",
      "info" : "ExpressionStatement[9627-9749]:ExpressionStatement[9667-9789]"
    }, {
      "left" : "if (blockPadding!=null)",
      "right" : "if (blockPadding!=null)",
      "info" : "IfStatement[9776-9962]:IfStatement[9816-10002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9800-9962]:Block[9840-10002]"
    }, {
      "left" : "job.getConfiguration().setBoolean(HiveConf.ConfVars.HIVE_ORC_DEFAULT_BLOCK_PADDING.varname,\n                        blockPadding);",
      "right" : "job.getConfiguration().setBoolean(HiveConf.ConfVars.HIVE_ORC_DEFAULT_BLOCK_PADDING.varname,\n                        blockPadding);",
      "info" : "ExpressionStatement[9818-9948]:ExpressionStatement[9858-9988]"
    }, {
      "left" : "if (compress!=null)",
      "right" : "if (compress!=null)",
      "info" : "IfStatement[9975-10152]:IfStatement[10015-10192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9995-10152]:Block[10035-10192]"
    }, {
      "left" : "job.getConfiguration().set(HiveConf.ConfVars.HIVE_ORC_DEFAULT_COMPRESS.varname,\n                        compress.toString());",
      "right" : "job.getConfiguration().set(HiveConf.ConfVars.HIVE_ORC_DEFAULT_COMPRESS.varname,\n                        compress.toString());",
      "info" : "ExpressionStatement[10013-10138]:ExpressionStatement[10053-10178]"
    }, {
      "left" : "if (version!=null)",
      "right" : "if (version!=null)",
      "info" : "IfStatement[10165-10335]:IfStatement[10205-10375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10184-10335]:Block[10224-10375]"
    }, {
      "left" : "job.getConfiguration().set(HiveConf.ConfVars.HIVE_ORC_WRITE_FORMAT.varname,\n                        version.getName());",
      "right" : "job.getConfiguration().set(HiveConf.ConfVars.HIVE_ORC_WRITE_FORMAT.varname,\n                        version.getName());",
      "info" : "ExpressionStatement[10202-10321]:ExpressionStatement[10242-10361]"
    }, {
      "left" : "FileOutputFormat.setOutputPath(job, new Path(location));",
      "right" : "FileOutputFormat.setOutputPath(job, new Path(location));",
      "info" : "ExpressionStatement[10354-10410]:ExpressionStatement[10394-10450]"
    }, {
      "left" : "if (typeInfo==null)",
      "right" : "if (typeInfo==null)",
      "info" : "IfStatement[10419-10652]:IfStatement[10459-10692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10439-10652]:Block[10479-10692]"
    }, {
      "left" : "Properties p = UDFContext.getUDFContext().getUDFProperties(this.getClass());",
      "right" : "Properties p = UDFContext.getUDFContext().getUDFProperties(this.getClass());",
      "info" : "VariableDeclarationStatement[10453-10529]:VariableDeclarationStatement[10493-10569]"
    }, {
      "left" : "typeInfo = (TypeInfo)ObjectSerializer.deserialize(p.getProperty(signature + SchemaSignatureSuffix));",
      "right" : "typeInfo = (TypeInfo)ObjectSerializer.deserialize(p.getProperty(signature + SchemaSignatureSuffix));",
      "info" : "ExpressionStatement[10542-10642]:ExpressionStatement[10582-10682]"
    }, {
      "left" : "if (oi==null)",
      "right" : "if (oi==null)",
      "info" : "IfStatement[10661-10746]:IfStatement[10701-10786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10675-10746]:Block[10715-10786]"
    }, {
      "left" : "oi = HiveUtils.createObjectInspector(typeInfo);",
      "right" : "oi = HiveUtils.createObjectInspector(typeInfo);",
      "info" : "ExpressionStatement[10689-10736]:ExpressionStatement[10729-10776]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10758-10767]:MarkerAnnotation[10798-10807]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10772-10778]:Modifier[10812-10818]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10779-10783]:PrimitiveType[10819-10823]"
    }, {
      "left" : "checkSchema",
      "right" : "checkSchema",
      "info" : "SimpleName[10784-10795]:SimpleName[10824-10835]"
    }, {
      "left" : "ResourceSchema rs",
      "right" : "ResourceSchema rs",
      "info" : "SingleVariableDeclaration[10796-10813]:SingleVariableDeclaration[10836-10853]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10822-10833]:SimpleType[10862-10873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10834-11190]:Block[10874-11230]"
    }, {
      "left" : "ResourceFieldSchema fs = new ResourceFieldSchema();",
      "right" : "ResourceFieldSchema fs = new ResourceFieldSchema();",
      "info" : "VariableDeclarationStatement[10844-10895]:VariableDeclarationStatement[10884-10935]"
    }, {
      "left" : "fs.setType(DataType.TUPLE);",
      "right" : "fs.setType(DataType.TUPLE);",
      "info" : "ExpressionStatement[10904-10931]:ExpressionStatement[10944-10971]"
    }, {
      "left" : "fs.setSchema(rs);",
      "right" : "fs.setSchema(rs);",
      "info" : "ExpressionStatement[10940-10957]:ExpressionStatement[10980-10997]"
    }, {
      "left" : "typeInfo = HiveUtils.getTypeInfo(fs);",
      "right" : "typeInfo = HiveUtils.getTypeInfo(fs);",
      "info" : "ExpressionStatement[10966-11003]:ExpressionStatement[11006-11043]"
    }, {
      "left" : "Properties p = UDFContext.getUDFContext().getUDFProperties(this.getClass());",
      "right" : "Properties p = UDFContext.getUDFContext().getUDFProperties(this.getClass());",
      "info" : "VariableDeclarationStatement[11012-11088]:VariableDeclarationStatement[11052-11128]"
    }, {
      "left" : "p.setProperty(signature + SchemaSignatureSuffix, ObjectSerializer.serialize(typeInfo));",
      "right" : "p.setProperty(signature + SchemaSignatureSuffix, ObjectSerializer.serialize(typeInfo));",
      "info" : "ExpressionStatement[11097-11184]:ExpressionStatement[11137-11224]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11196-11205]:MarkerAnnotation[11236-11245]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11210-11216]:Modifier[11250-11256]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11217-11221]:PrimitiveType[11257-11261]"
    }, {
      "left" : "prepareToWrite",
      "right" : "prepareToWrite",
      "info" : "SimpleName[11222-11236]:SimpleName[11262-11276]"
    }, {
      "left" : "RecordWriter writer",
      "right" : "RecordWriter writer",
      "info" : "SingleVariableDeclaration[11237-11256]:SingleVariableDeclaration[11277-11296]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11265-11276]:SimpleType[11305-11316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11277-11314]:Block[11317-11354]"
    }, {
      "left" : "this.writer = writer;",
      "right" : "this.writer = writer;",
      "info" : "ExpressionStatement[11287-11308]:ExpressionStatement[11327-11348]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11320-11329]:MarkerAnnotation[11360-11369]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11334-11340]:Modifier[11374-11380]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11341-11345]:PrimitiveType[11381-11385]"
    }, {
      "left" : "putNext",
      "right" : "putNext",
      "info" : "SimpleName[11346-11353]:SimpleName[11386-11393]"
    }, {
      "left" : "Tuple t",
      "right" : "Tuple t",
      "info" : "SingleVariableDeclaration[11354-11361]:SingleVariableDeclaration[11394-11401]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11370-11381]:SimpleType[11410-11421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11382-11550]:Block[11422-11590]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11392-11544]:TryStatement[11432-11584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11396-11463]:Block[11436-11503]"
    }, {
      "left" : "writer.write(null, serde.serialize(t, oi));",
      "right" : "writer.write(null, serde.serialize(t, oi));",
      "info" : "ExpressionStatement[11410-11453]:ExpressionStatement[11450-11493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11495-11544]:Block[11535-11584]"
    }, {
      "left" : "throw new IOException(e);",
      "right" : "throw new IOException(e);",
      "info" : "ThrowStatement[11509-11534]:ThrowStatement[11549-11574]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11556-11565]:MarkerAnnotation[11596-11605]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11570-11576]:Modifier[11610-11616]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11577-11581]:PrimitiveType[11617-11621]"
    }, {
      "left" : "setStoreFuncUDFContextSignature",
      "right" : "setStoreFuncUDFContextSignature",
      "info" : "SimpleName[11582-11613]:SimpleName[11622-11653]"
    }, {
      "left" : "String signature",
      "right" : "String signature",
      "info" : "SingleVariableDeclaration[11614-11630]:SingleVariableDeclaration[11654-11670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11632-11675]:Block[11672-11715]"
    }, {
      "left" : "this.signature = signature;",
      "right" : "this.signature = signature;",
      "info" : "ExpressionStatement[11642-11669]:ExpressionStatement[11682-11709]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11681-11690]:MarkerAnnotation[11721-11730]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11695-11701]:Modifier[11735-11741]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11702-11706]:PrimitiveType[11742-11746]"
    }, {
      "left" : "setUDFContextSignature",
      "right" : "setUDFContextSignature",
      "info" : "SimpleName[11707-11729]:SimpleName[11747-11769]"
    }, {
      "left" : "String signature",
      "right" : "String signature",
      "info" : "SingleVariableDeclaration[11730-11746]:SingleVariableDeclaration[11770-11786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11748-11791]:Block[11788-11831]"
    }, {
      "left" : "this.signature = signature;",
      "right" : "this.signature = signature;",
      "info" : "ExpressionStatement[11758-11785]:ExpressionStatement[11798-11825]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11797-11806]:MarkerAnnotation[11837-11846]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11811-11817]:Modifier[11851-11857]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11818-11822]:PrimitiveType[11858-11862]"
    }, {
      "left" : "cleanupOnFailure",
      "right" : "cleanupOnFailure",
      "info" : "SimpleName[11823-11839]:SimpleName[11863-11879]"
    }, {
      "left" : "String location",
      "right" : "String location",
      "info" : "SingleVariableDeclaration[11840-11855]:SingleVariableDeclaration[11880-11895]"
    }, {
      "left" : "Job job",
      "right" : "Job job",
      "info" : "SingleVariableDeclaration[11857-11864]:SingleVariableDeclaration[11897-11904]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11873-11884]:SimpleType[11913-11924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11885-11947]:Block[11925-11987]"
    }, {
      "left" : "StoreFunc.cleanupOnFailureImpl(location, job);",
      "right" : "StoreFunc.cleanupOnFailureImpl(location, job);",
      "info" : "ExpressionStatement[11895-11941]:ExpressionStatement[11935-11981]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11953-11962]:MarkerAnnotation[11993-12002]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11967-11973]:Modifier[12007-12013]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11974-11978]:PrimitiveType[12014-12018]"
    }, {
      "left" : "cleanupOnSuccess",
      "right" : "cleanupOnSuccess",
      "info" : "SimpleName[11979-11995]:SimpleName[12019-12035]"
    }, {
      "left" : "String location",
      "right" : "String location",
      "info" : "SingleVariableDeclaration[11996-12011]:SingleVariableDeclaration[12036-12051]"
    }, {
      "left" : "Job job",
      "right" : "Job job",
      "info" : "SingleVariableDeclaration[12013-12020]:SingleVariableDeclaration[12053-12060]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12029-12040]:SimpleType[12069-12080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12041-12048]:Block[12081-12088]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12054-12063]:MarkerAnnotation[12094-12103]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12068-12074]:Modifier[12108-12114]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12075-12079]:PrimitiveType[12115-12119]"
    }, {
      "left" : "setLocation",
      "right" : "setLocation",
      "info" : "SimpleName[12080-12091]:SimpleName[12120-12131]"
    }, {
      "left" : "String location",
      "right" : "String location",
      "info" : "SingleVariableDeclaration[12092-12107]:SingleVariableDeclaration[12132-12147]"
    }, {
      "left" : "Job job",
      "right" : "Job job",
      "info" : "SingleVariableDeclaration[12109-12116]:SingleVariableDeclaration[12149-12156]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12125-12136]:SimpleType[12165-12176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12137-14175]:Block[12177-14215]"
    }, {
      "left" : "Properties p = UDFContext.getUDFContext().getUDFProperties(this.getClass());",
      "right" : "Properties p = UDFContext.getUDFContext().getUDFProperties(this.getClass());",
      "info" : "VariableDeclarationStatement[12147-12223]:VariableDeclarationStatement[12187-12263]"
    }, {
      "left" : "if (!UDFContext.getUDFContext().isFrontend())",
      "right" : "if (!UDFContext.getUDFContext().isFrontend())",
      "info" : "IfStatement[12232-12492]:IfStatement[12272-12532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12278-12402]:Block[12318-12442]"
    }, {
      "left" : "typeInfo = (TypeInfo)ObjectSerializer.deserialize(p.getProperty(signature + SchemaSignatureSuffix));",
      "right" : "typeInfo = (TypeInfo)ObjectSerializer.deserialize(p.getProperty(signature + SchemaSignatureSuffix));",
      "info" : "ExpressionStatement[12292-12392]:ExpressionStatement[12332-12432]"
    }, {
      "left" : "if (typeInfo == null)",
      "right" : "if (typeInfo == null)",
      "info" : "IfStatement[12408-12492]:IfStatement[12448-12532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12430-12492]:Block[12470-12532]"
    }, {
      "left" : "typeInfo = getTypeInfo(location, job);",
      "right" : "typeInfo = getTypeInfo(location, job);",
      "info" : "ExpressionStatement[12444-12482]:ExpressionStatement[12484-12522]"
    }, {
      "left" : "if (typeInfo != null && oi == null)",
      "right" : "if (typeInfo != null && oi == null)",
      "info" : "IfStatement[12501-12608]:IfStatement[12541-12648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12537-12608]:Block[12577-12648]"
    }, {
      "left" : "oi = OrcStruct.createObjectInspector(typeInfo);",
      "right" : "oi = OrcStruct.createObjectInspector(typeInfo);",
      "info" : "ExpressionStatement[12551-12598]:ExpressionStatement[12591-12638]"
    }, {
      "left" : "if (!UDFContext.getUDFContext().isFrontend())",
      "right" : "if (!UDFContext.getUDFContext().isFrontend())",
      "info" : "IfStatement[12617-14115]:IfStatement[12657-14155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12663-14115]:Block[12703-14155]"
    }, {
      "left" : "if (p.getProperty(signature + RequiredColumnsSuffix) != null)",
      "right" : "if (p.getProperty(signature + RequiredColumnsSuffix) != null)",
      "info" : "IfStatement[12677-13915]:IfStatement[12717-13955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12739-13562]:Block[12779-13602]"
    }, {
      "left" : "mRequiredColumns = (boolean[]) ObjectSerializer.deserialize(p\n                        .getProperty(signature + RequiredColumnsSuffix));",
      "right" : "mRequiredColumns = (boolean[]) ObjectSerializer.deserialize(p\n                        .getProperty(signature + RequiredColumnsSuffix));",
      "info" : "ExpressionStatement[12757-12892]:ExpressionStatement[12797-12932]"
    }, {
      "left" : "job.getConfiguration().setBoolean(ColumnProjectionUtils.READ_ALL_COLUMNS, false);",
      "right" : "job.getConfiguration().setBoolean(ColumnProjectionUtils.READ_ALL_COLUMNS, false);",
      "info" : "ExpressionStatement[12909-12990]:ExpressionStatement[12949-13030]"
    }, {
      "left" : "job.getConfiguration().set(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR,\n                        getReqiredColumnIdString(mRequiredColumns));",
      "right" : "job.getConfiguration().set(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR,\n                        getReqiredColumnIdString(mRequiredColumns));",
      "info" : "ExpressionStatement[13007-13150]:ExpressionStatement[13047-13190]"
    }, {
      "left" : "if (p.getProperty(signature + SearchArgsSuffix) != null)",
      "right" : "if (p.getProperty(signature + SearchArgsSuffix) != null)",
      "info" : "IfStatement[13167-13548]:IfStatement[13207-13588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13224-13548]:Block[13264-13588]"
    }, {
      "left" : "job.getConfiguration().set(ColumnProjectionUtils.READ_COLUMN_NAMES_CONF_STR,\n                            getReqiredColumnNamesString(getSchema(location, job), mRequiredColumns));",
      "right" : "job.getConfiguration().set(ColumnProjectionUtils.READ_COLUMN_NAMES_CONF_STR,\n                            getReqiredColumnNamesString(getSchema(location, job), mRequiredColumns));",
      "info" : "ExpressionStatement[13352-13530]:ExpressionStatement[13392-13570]"
    }, {
      "left" : "if (p.getProperty(signature + SearchArgsSuffix) != null)",
      "right" : "if (p.getProperty(signature + SearchArgsSuffix) != null)",
      "info" : "IfStatement[13568-13915]:IfStatement[13608-13955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13625-13915]:Block[13665-13955]"
    }, {
      "left" : "job.getConfiguration().set(ColumnProjectionUtils.READ_COLUMN_NAMES_CONF_STR,\n                        getReqiredColumnNamesString(getSchema(location, job)));",
      "right" : "job.getConfiguration().set(ColumnProjectionUtils.READ_COLUMN_NAMES_CONF_STR,\n                        getReqiredColumnNamesString(getSchema(location, job)));",
      "info" : "ExpressionStatement[13745-13901]:ExpressionStatement[13785-13941]"
    }, {
      "left" : "if (p.getProperty(signature + SearchArgsSuffix) != null)",
      "right" : "if (p.getProperty(signature + SearchArgsSuffix) != null)",
      "info" : "IfStatement[13928-14104]:IfStatement[13968-14144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13985-14104]:Block[14025-14144]"
    }, {
      "left" : "job.getConfiguration().set(SARG_PUSHDOWN, p.getProperty(signature + SearchArgsSuffix));",
      "right" : "job.getConfiguration().set(SARG_PUSHDOWN, p.getProperty(signature + SearchArgsSuffix));",
      "info" : "ExpressionStatement[14003-14090]:ExpressionStatement[14043-14130]"
    }, {
      "left" : "FileInputFormat.setInputPaths(job, location);",
      "right" : "FileInputFormat.setInputPaths(job, location);",
      "info" : "ExpressionStatement[14124-14169]:ExpressionStatement[14164-14209]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14181-14188]:Modifier[14221-14228]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[14189-14195]:SimpleType[14229-14235]"
    }, {
      "left" : "getReqiredColumnIdString",
      "right" : "getReqiredColumnIdString",
      "info" : "SimpleName[14196-14220]:SimpleName[14236-14260]"
    }, {
      "left" : "boolean[] requiredColumns",
      "right" : "boolean[] requiredColumns",
      "info" : "SingleVariableDeclaration[14221-14246]:SingleVariableDeclaration[14261-14286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14248-14601]:Block[14288-14641]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[14258-14297]:VariableDeclarationStatement[14298-14337]"
    }, {
      "left" : "for (int i = 0; i < requiredColumns.length; i++)",
      "right" : "for (int i = 0; i < requiredColumns.length; i++)",
      "info" : "ForStatement[14306-14460]:ForStatement[14346-14500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14355-14460]:Block[14395-14500]"
    }, {
      "left" : "if (requiredColumns[i])",
      "right" : "if (requiredColumns[i])",
      "info" : "IfStatement[14369-14450]:IfStatement[14409-14490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14393-14450]:Block[14433-14490]"
    }, {
      "left" : "sb.append(i).append(\",\");",
      "right" : "sb.append(i).append(\",\");",
      "info" : "ExpressionStatement[14411-14436]:ExpressionStatement[14451-14476]"
    }, {
      "left" : "if (sb.charAt(sb.length() - 1) == ',')",
      "right" : "if (sb.charAt(sb.length() - 1) == ',')",
      "info" : "IfStatement[14469-14565]:IfStatement[14509-14605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14508-14565]:Block[14548-14605]"
    }, {
      "left" : "sb.deleteCharAt(sb.length() - 1);",
      "right" : "sb.deleteCharAt(sb.length() - 1);",
      "info" : "ExpressionStatement[14522-14555]:ExpressionStatement[14562-14595]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[14574-14595]:ReturnStatement[14614-14635]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14607-14614]:Modifier[14647-14654]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[14615-14621]:SimpleType[14655-14661]"
    }, {
      "left" : "getReqiredColumnNamesString",
      "right" : "getReqiredColumnNamesString",
      "info" : "SimpleName[14622-14649]:SimpleName[14662-14689]"
    }, {
      "left" : "ResourceSchema schema",
      "right" : "ResourceSchema schema",
      "info" : "SingleVariableDeclaration[14650-14671]:SingleVariableDeclaration[14690-14711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14673-14986]:Block[14713-15026]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[14683-14722]:VariableDeclarationStatement[14723-14762]"
    }, {
      "left" : "for (ResourceFieldSchema field : schema.getFields())",
      "right" : "for (ResourceFieldSchema field : schema.getFields())",
      "info" : "EnhancedForStatement[14731-14847]:EnhancedForStatement[14771-14887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14784-14847]:Block[14824-14887]"
    }, {
      "left" : "sb.append(field.getName()).append(\",\");",
      "right" : "sb.append(field.getName()).append(\",\");",
      "info" : "ExpressionStatement[14798-14837]:ExpressionStatement[14838-14877]"
    }, {
      "left" : "if(sb.charAt(sb.length() -1) == ',')",
      "right" : "if(sb.charAt(sb.length() -1) == ',')",
      "info" : "IfStatement[14856-14950]:IfStatement[14896-14990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14893-14950]:Block[14933-14990]"
    }, {
      "left" : "sb.deleteCharAt(sb.length() - 1);",
      "right" : "sb.deleteCharAt(sb.length() - 1);",
      "info" : "ExpressionStatement[14907-14940]:ExpressionStatement[14947-14980]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[14959-14980]:ReturnStatement[14999-15020]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14992-14999]:Modifier[15032-15039]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[15000-15006]:SimpleType[15040-15046]"
    }, {
      "left" : "getReqiredColumnNamesString",
      "right" : "getReqiredColumnNamesString",
      "info" : "SimpleName[15007-15034]:SimpleName[15047-15074]"
    }, {
      "left" : "ResourceSchema schema",
      "right" : "ResourceSchema schema",
      "info" : "SingleVariableDeclaration[15035-15056]:SingleVariableDeclaration[15075-15096]"
    }, {
      "left" : "boolean[] requiredColumns",
      "right" : "boolean[] requiredColumns",
      "info" : "SingleVariableDeclaration[15058-15083]:SingleVariableDeclaration[15098-15123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15085-15504]:Block[15125-15544]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[15095-15134]:VariableDeclarationStatement[15135-15174]"
    }, {
      "left" : "ResourceFieldSchema[] fields = schema.getFields();",
      "right" : "ResourceFieldSchema[] fields = schema.getFields();",
      "info" : "VariableDeclarationStatement[15143-15193]:VariableDeclarationStatement[15183-15233]"
    }, {
      "left" : "for (int i = 0; i < requiredColumns.length; i++)",
      "right" : "for (int i = 0; i < requiredColumns.length; i++)",
      "info" : "ForStatement[15202-15364]:ForStatement[15242-15404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15251-15364]:Block[15291-15404]"
    }, {
      "left" : "if (requiredColumns[i])",
      "right" : "if (requiredColumns[i])",
      "info" : "IfStatement[15265-15354]:IfStatement[15305-15394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15289-15354]:Block[15329-15394]"
    }, {
      "left" : "sb.append(fields[i]).append(\",\");",
      "right" : "sb.append(fields[i]).append(\",\");",
      "info" : "ExpressionStatement[15307-15340]:ExpressionStatement[15347-15380]"
    }, {
      "left" : "if(sb.charAt(sb.length() - 1) == ',')",
      "right" : "if(sb.charAt(sb.length() - 1) == ',')",
      "info" : "IfStatement[15373-15468]:IfStatement[15413-15508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15411-15468]:Block[15451-15508]"
    }, {
      "left" : "sb.deleteCharAt(sb.length() - 1);",
      "right" : "sb.deleteCharAt(sb.length() - 1);",
      "info" : "ExpressionStatement[15425-15458]:ExpressionStatement[15465-15498]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[15477-15498]:ReturnStatement[15517-15538]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15510-15519]:MarkerAnnotation[15550-15559]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15524-15530]:Modifier[15564-15570]"
    }, {
      "left" : "InputFormat",
      "right" : "InputFormat",
      "info" : "SimpleType[15531-15542]:SimpleType[15571-15582]"
    }, {
      "left" : "getInputFormat",
      "right" : "getInputFormat",
      "info" : "SimpleName[15543-15557]:SimpleName[15583-15597]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15567-15578]:SimpleType[15607-15618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15579-15626]:Block[15619-15666]"
    }, {
      "left" : "return new OrcNewInputFormat();",
      "right" : "return new OrcNewInputFormat();",
      "info" : "ReturnStatement[15589-15620]:ReturnStatement[15629-15660]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15632-15641]:MarkerAnnotation[15672-15681]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15646-15652]:Modifier[15686-15692]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15653-15657]:PrimitiveType[15693-15697]"
    }, {
      "left" : "prepareToRead",
      "right" : "prepareToRead",
      "info" : "SimpleName[15658-15671]:SimpleName[15698-15711]"
    }, {
      "left" : "RecordReader reader",
      "right" : "RecordReader reader",
      "info" : "SingleVariableDeclaration[15672-15691]:SingleVariableDeclaration[15712-15731]"
    }, {
      "left" : "PigSplit split",
      "right" : "PigSplit split",
      "info" : "SingleVariableDeclaration[15693-15707]:SingleVariableDeclaration[15733-15747]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15728-15739]:SimpleType[15768-15779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15740-15768]:Block[15780-15808]"
    }, {
      "left" : "in = reader;",
      "right" : "in = reader;",
      "info" : "ExpressionStatement[15750-15762]:ExpressionStatement[15790-15802]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15774-15783]:MarkerAnnotation[15814-15823]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15788-15794]:Modifier[15828-15834]"
    }, {
      "left" : "Tuple",
      "right" : "Tuple",
      "info" : "SimpleType[15795-15800]:SimpleType[15835-15840]"
    }, {
      "left" : "getNext",
      "right" : "getNext",
      "info" : "SimpleName[15801-15808]:SimpleName[15841-15848]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15818-15829]:SimpleType[15858-15869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15830-16381]:Block[15870-16421]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15840-16375]:TryStatement[15880-16415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15844-16133]:Block[15884-16173]"
    }, {
      "left" : "boolean notDone = in.nextKeyValue();",
      "right" : "boolean notDone = in.nextKeyValue();",
      "info" : "VariableDeclarationStatement[15858-15894]:VariableDeclarationStatement[15898-15934]"
    }, {
      "left" : "if (!notDone)",
      "right" : "if (!notDone)",
      "info" : "IfStatement[15907-15965]:IfStatement[15947-16005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15921-15965]:Block[15961-16005]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15939-15951]:ReturnStatement[15979-15991]"
    }, {
      "left" : "Object value = in.getCurrentValue();",
      "right" : "Object value = in.getCurrentValue();",
      "info" : "VariableDeclarationStatement[15978-16014]:VariableDeclarationStatement[16018-16054]"
    }, {
      "left" : "Tuple t = (Tuple)HiveUtils.convertHiveToPig(value, oi, mRequiredColumns);",
      "right" : "Tuple t = (Tuple)HiveUtils.convertHiveToPig(value, oi, mRequiredColumns);",
      "info" : "VariableDeclarationStatement[16028-16101]:VariableDeclarationStatement[16068-16141]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[16114-16123]:ReturnStatement[16154-16163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16165-16375]:Block[16205-16415]"
    }, {
      "left" : "int errCode = 6018;",
      "right" : "int errCode = 6018;",
      "info" : "VariableDeclarationStatement[16179-16198]:VariableDeclarationStatement[16219-16238]"
    }, {
      "left" : "String errMsg = \"Error while reading input\";",
      "right" : "String errMsg = \"Error while reading input\";",
      "info" : "VariableDeclarationStatement[16211-16255]:VariableDeclarationStatement[16251-16295]"
    }, {
      "left" : "throw new ExecException(errMsg, errCode,\n                    PigException.REMOTE_ENVIRONMENT, e);",
      "right" : "throw new ExecException(errMsg, errCode,\n                    PigException.REMOTE_ENVIRONMENT, e);",
      "info" : "ThrowStatement[16268-16365]:ThrowStatement[16308-16405]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16387-16396]:MarkerAnnotation[16427-16436]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16401-16407]:Modifier[16441-16447]"
    }, {
      "left" : "List<String>",
      "right" : "List<String>",
      "info" : "ParameterizedType[16408-16420]:ParameterizedType[16448-16460]"
    }, {
      "left" : "getShipFiles",
      "right" : "getShipFiles",
      "info" : "SimpleName[16421-16433]:SimpleName[16461-16473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16436-17278]:Block[16476-17318]"
    }, {
      "left" : "List<String> cacheFiles = new ArrayList<String>();",
      "right" : "List<String> cacheFiles = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[16446-16496]:VariableDeclarationStatement[16486-16536]"
    }, {
      "left" : "String hadoopVersion = \"20S\";",
      "right" : "String hadoopVersion = \"20S\";",
      "info" : "VariableDeclarationStatement[16505-16534]:VariableDeclarationStatement[16545-16574]"
    }, {
      "left" : "if (Utils.isHadoop23() || Utils.isHadoop2())",
      "right" : "if (Utils.isHadoop23() || Utils.isHadoop2())",
      "info" : "IfStatement[16543-16633]:IfStatement[16583-16673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16588-16633]:Block[16628-16673]"
    }, {
      "left" : "hadoopVersion = \"23\";",
      "right" : "hadoopVersion = \"23\";",
      "info" : "ExpressionStatement[16602-16623]:ExpressionStatement[16642-16663]"
    }, {
      "left" : "Class hadoopVersionShimsClass;",
      "right" : "Class hadoopVersionShimsClass;",
      "info" : "VariableDeclarationStatement[16642-16672]:VariableDeclarationStatement[16682-16712]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16681-16985]:TryStatement[16721-17025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16685-16834]:Block[16725-16874]"
    }, {
      "left" : "hadoopVersionShimsClass = Class.forName(\"org.apache.hadoop.hive.shims.Hadoop\" +\n                    hadoopVersion + \"Shims\");",
      "right" : "hadoopVersionShimsClass = Class.forName(\"org.apache.hadoop.hive.shims.Hadoop\" +\n                    hadoopVersion + \"Shims\");",
      "info" : "ExpressionStatement[16699-16824]:ExpressionStatement[16739-16864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16868-16985]:Block[16908-17025]"
    }, {
      "left" : "throw new RuntimeException(\"Cannot find Hadoop\" + hadoopVersion + \"ShimsClass in classpath\");",
      "right" : "throw new RuntimeException(\"Cannot find Hadoop\" + hadoopVersion + \"ShimsClass in classpath\");",
      "info" : "ThrowStatement[16882-16975]:ThrowStatement[16922-17015]"
    }, {
      "left" : "Class[] classList = new Class[] {OrcFile.class, HiveConf.class, AbstractSerDe.class,\n                org.apache.hadoop.hive.shims.HadoopShims.class, HadoopShimsSecure.class, hadoopVersionShimsClass,\n                Input.class};",
      "right" : "Class[] classList = new Class[] {OrcFile.class, HiveConf.class, AbstractSerDe.class,\n                org.apache.hadoop.hive.shims.HadoopShims.class, HadoopShimsSecure.class, hadoopVersionShimsClass,\n                Input.class};",
      "info" : "VariableDeclarationStatement[16994-17222]:VariableDeclarationStatement[17034-17262]"
    }, {
      "left" : "return FuncUtils.getShipFiles(classList);",
      "right" : "return FuncUtils.getShipFiles(classList);",
      "info" : "ReturnStatement[17231-17272]:ReturnStatement[17271-17312]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17284-17291]:Modifier[17324-17331]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17292-17298]:Modifier[17332-17338]"
    }, {
      "left" : "Path",
      "right" : "Path",
      "info" : "SimpleType[17299-17303]:SimpleType[17339-17343]"
    }, {
      "left" : "getFirstFile",
      "right" : "getFirstFile",
      "info" : "SimpleName[17304-17316]:SimpleName[17344-17356]"
    }, {
      "left" : "String location",
      "right" : "String location",
      "info" : "SingleVariableDeclaration[17317-17332]:SingleVariableDeclaration[17357-17372]"
    }, {
      "left" : "FileSystem fs",
      "right" : "FileSystem fs",
      "info" : "SingleVariableDeclaration[17334-17347]:SingleVariableDeclaration[17374-17387]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17356-17367]:SimpleType[17415-17426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17368-18133]:Block[17427-18200]"
    }, {
      "left" : "String[] locations = getPathStrings(location);",
      "right" : "String[] locations = getPathStrings(location);",
      "info" : "VariableDeclarationStatement[17378-17424]:VariableDeclarationStatement[17437-17483]"
    }, {
      "left" : "Path[] paths = new Path[locations.length];",
      "right" : "Path[] paths = new Path[locations.length];",
      "info" : "VariableDeclarationStatement[17433-17475]:VariableDeclarationStatement[17492-17534]"
    }, {
      "left" : "for (int i = 0; i < paths.length; ++i)",
      "right" : "for (int i = 0; i < paths.length; ++i)",
      "info" : "ForStatement[17484-17581]:ForStatement[17543-17640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17523-17581]:Block[17582-17640]"
    }, {
      "left" : "paths[i] = new Path(locations[i]);",
      "right" : "paths[i] = new Path(locations[i]);",
      "info" : "ExpressionStatement[17537-17571]:ExpressionStatement[17596-17630]"
    }, {
      "left" : "List<FileStatus> statusList = new ArrayList<FileStatus>();",
      "right" : "List<FileStatus> statusList = new ArrayList<FileStatus>();",
      "info" : "VariableDeclarationStatement[17590-17648]:VariableDeclarationStatement[17649-17707]"
    }, {
      "left" : "for (int i = 0; i < paths.length; ++i)",
      "right" : "for (int i = 0; i < paths.length; ++i)",
      "info" : "ForStatement[17657-17922]:ForStatement[17716-17981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17696-17922]:Block[17755-17981]"
    }, {
      "left" : "FileStatus[] files = fs.globStatus(paths[i]);",
      "right" : "FileStatus[] files = fs.globStatus(paths[i]);",
      "info" : "VariableDeclarationStatement[17710-17755]:VariableDeclarationStatement[17769-17814]"
    }, {
      "left" : "if (files != null)",
      "right" : "if (files != null)",
      "info" : "IfStatement[17768-17912]:IfStatement[17827-17971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17787-17912]:Block[17846-17971]"
    }, {
      "left" : "for (FileStatus tempf : files)",
      "right" : "for (FileStatus tempf : files)",
      "info" : "EnhancedForStatement[17805-17898]:EnhancedForStatement[17864-17957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17836-17898]:Block[17895-17957]"
    }, {
      "left" : "statusList.add(tempf);",
      "right" : "statusList.add(tempf);",
      "info" : "ExpressionStatement[17858-17880]:ExpressionStatement[17917-17939]"
    }, {
      "left" : "FileStatus[] statusArray = (FileStatus[]) statusList\n                .toArray(new FileStatus[statusList.size()]);",
      "right" : "FileStatus[] statusArray = (FileStatus[]) statusList\n                .toArray(new FileStatus[statusList.size()]);",
      "info" : "VariableDeclarationStatement[17931-18044]:VariableDeclarationStatement[17990-18103]"
    }, {
      "left" : "Path p = Utils.depthFirstSearchForFile(statusArray, fs);",
      "right" : "Path p = Utils.depthFirstSearchForFile(statusArray, fs, filter);",
      "info" : "VariableDeclarationStatement[18053-18109]:VariableDeclarationStatement[18112-18176]"
    }, {
      "left" : "statusArray",
      "right" : "statusArray",
      "info" : "SimpleName[18092-18103]:SimpleName[18151-18162]"
    }, {
      "left" : "fs",
      "right" : "fs",
      "info" : "SimpleName[18105-18107]:SimpleName[18164-18166]"
    }, {
      "left" : "return p;",
      "right" : "return p;",
      "info" : "ReturnStatement[18118-18127]:ReturnStatement[18185-18194]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18139-18148]:MarkerAnnotation[18206-18215]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18153-18159]:Modifier[18220-18226]"
    }, {
      "left" : "ResourceSchema",
      "right" : "ResourceSchema",
      "info" : "SimpleType[18160-18174]:SimpleType[18227-18241]"
    }, {
      "left" : "getSchema",
      "right" : "getSchema",
      "info" : "SimpleName[18175-18184]:SimpleName[18242-18251]"
    }, {
      "left" : "String location",
      "right" : "String location",
      "info" : "SingleVariableDeclaration[18185-18200]:SingleVariableDeclaration[18252-18267]"
    }, {
      "left" : "Job job",
      "right" : "Job job",
      "info" : "SingleVariableDeclaration[18202-18209]:SingleVariableDeclaration[18269-18276]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18230-18241]:SimpleType[18297-18308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18242-18590]:Block[18309-18657]"
    }, {
      "left" : "if (typeInfo == null)",
      "right" : "if (typeInfo == null)",
      "info" : "IfStatement[18252-18475]:IfStatement[18319-18542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18274-18475]:Block[18341-18542]"
    }, {
      "left" : "typeInfo = getTypeInfo(location, job);",
      "right" : "typeInfo = getTypeInfo(location, job);",
      "info" : "ExpressionStatement[18288-18326]:ExpressionStatement[18355-18393]"
    }, {
      "left" : "if (typeInfo == null)",
      "right" : "if (typeInfo == null)",
      "info" : "IfStatement[18399-18465]:IfStatement[18466-18532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18421-18465]:Block[18488-18532]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[18439-18451]:ReturnStatement[18506-18518]"
    }, {
      "left" : "ResourceFieldSchema fs = HiveUtils.getResourceFieldSchema(typeInfo);",
      "right" : "ResourceFieldSchema fs = HiveUtils.getResourceFieldSchema(typeInfo);",
      "info" : "VariableDeclarationStatement[18485-18553]:VariableDeclarationStatement[18552-18620]"
    }, {
      "left" : "return fs.getSchema();",
      "right" : "return fs.getSchema();",
      "info" : "ReturnStatement[18562-18584]:ReturnStatement[18629-18651]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18596-18603]:Modifier[18663-18670]"
    }, {
      "left" : "TypeInfo",
      "right" : "TypeInfo",
      "info" : "SimpleType[18604-18612]:SimpleType[18671-18679]"
    }, {
      "left" : "getTypeInfo",
      "right" : "getTypeInfo",
      "info" : "SimpleName[18613-18624]:SimpleName[18680-18691]"
    }, {
      "left" : "String location",
      "right" : "String location",
      "info" : "SingleVariableDeclaration[18625-18640]:SingleVariableDeclaration[18692-18707]"
    }, {
      "left" : "Job job",
      "right" : "Job job",
      "info" : "SingleVariableDeclaration[18642-18649]:SingleVariableDeclaration[18709-18716]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18658-18669]:SimpleType[18725-18736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18670-19153]:Block[18737-19220]"
    }, {
      "left" : "Properties p = UDFContext.getUDFContext().getUDFProperties(this.getClass());",
      "right" : "Properties p = UDFContext.getUDFContext().getUDFProperties(this.getClass());",
      "info" : "VariableDeclarationStatement[18680-18756]:VariableDeclarationStatement[18747-18823]"
    }, {
      "left" : "TypeInfo typeInfo = (TypeInfo) ObjectSerializer.deserialize(p.getProperty(signature + SchemaSignatureSuffix));",
      "right" : "TypeInfo typeInfo = (TypeInfo) ObjectSerializer.deserialize(p.getProperty(signature + SchemaSignatureSuffix));",
      "info" : "VariableDeclarationStatement[18765-18875]:VariableDeclarationStatement[18832-18942]"
    }, {
      "left" : "if (typeInfo == null)",
      "right" : "if (typeInfo == null)",
      "info" : "IfStatement[18884-18980]:IfStatement[18951-19047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18906-18980]:Block[18973-19047]"
    }, {
      "left" : "typeInfo = getTypeInfoFromLocation(location, job);",
      "right" : "typeInfo = getTypeInfoFromLocation(location, job);",
      "info" : "ExpressionStatement[18920-18970]:ExpressionStatement[18987-19037]"
    }, {
      "left" : "if (typeInfo != null)",
      "right" : "if (typeInfo != null)",
      "info" : "IfStatement[18989-19122]:IfStatement[19056-19189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19011-19122]:Block[19078-19189]"
    }, {
      "left" : "p.setProperty(signature + SchemaSignatureSuffix, ObjectSerializer.serialize(typeInfo));",
      "right" : "p.setProperty(signature + SchemaSignatureSuffix, ObjectSerializer.serialize(typeInfo));",
      "info" : "ExpressionStatement[19025-19112]:ExpressionStatement[19092-19179]"
    }, {
      "left" : "return typeInfo;",
      "right" : "return typeInfo;",
      "info" : "ReturnStatement[19131-19147]:ReturnStatement[19198-19214]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19159-19166]:Modifier[19226-19233]"
    }, {
      "left" : "TypeInfo",
      "right" : "TypeInfo",
      "info" : "SimpleType[19167-19175]:SimpleType[19234-19242]"
    }, {
      "left" : "getTypeInfoFromLocation",
      "right" : "getTypeInfoFromLocation",
      "info" : "SimpleName[19176-19199]:SimpleName[19243-19266]"
    }, {
      "left" : "String location",
      "right" : "String location",
      "info" : "SingleVariableDeclaration[19200-19215]:SingleVariableDeclaration[19267-19282]"
    }, {
      "left" : "Job job",
      "right" : "Job job",
      "info" : "SingleVariableDeclaration[19217-19224]:SingleVariableDeclaration[19284-19291]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19233-19244]:SimpleType[19300-19311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19245-19759]:Block[19312-19857]"
    }, {
      "left" : "FileSystem fs = FileSystem.get(job.getConfiguration());",
      "right" : "FileSystem fs = FileSystem.get(job.getConfiguration());",
      "info" : "VariableDeclarationStatement[19255-19310]:VariableDeclarationStatement[19322-19377]"
    }, {
      "left" : "Path path = getFirstFile(location, fs);",
      "right" : "Path path = getFirstFile(location, fs, new NonEmptyOrcFileFilter(fs));",
      "info" : "VariableDeclarationStatement[19319-19358]:VariableDeclarationStatement[19386-19456]"
    }, {
      "left" : "location",
      "right" : "location",
      "info" : "SimpleName[19344-19352]:SimpleName[19411-19419]"
    }, {
      "left" : "fs",
      "right" : "fs",
      "info" : "SimpleName[19354-19356]:SimpleName[19421-19423]"
    }, {
      "left" : "if (path == null)",
      "right" : "if (path == null)",
      "info" : "IfStatement[19367-19555]:IfStatement[19465-19653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19385-19555]:Block[19483-19653]"
    }, {
      "left" : "log.info(\"Cannot find any ORC files from \" + location +\n                    \". Probably multiple load store in script.\");",
      "right" : "log.info(\"Cannot find any ORC files from \" + location +\n                    \". Probably multiple load store in script.\");",
      "info" : "ExpressionStatement[19399-19520]:ExpressionStatement[19497-19618]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19533-19545]:ReturnStatement[19631-19643]"
    }, {
      "left" : "Reader reader = OrcFile.createReader(fs, path);",
      "right" : "Reader reader = OrcFile.createReader(fs, path);",
      "info" : "VariableDeclarationStatement[19564-19611]:VariableDeclarationStatement[19662-19709]"
    }, {
      "left" : "ObjectInspector oip = (ObjectInspector)reader.getObjectInspector();",
      "right" : "ObjectInspector oip = (ObjectInspector)reader.getObjectInspector();",
      "info" : "VariableDeclarationStatement[19620-19687]:VariableDeclarationStatement[19718-19785]"
    }, {
      "left" : "return TypeInfoUtils.getTypeInfoFromObjectInspector(oip);",
      "right" : "return TypeInfoUtils.getTypeInfoFromObjectInspector(oip);",
      "info" : "ReturnStatement[19696-19753]:ReturnStatement[19794-19851]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19765-19774]:MarkerAnnotation[20680-20689]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19779-19785]:Modifier[20694-20700]"
    }, {
      "left" : "ResourceStatistics",
      "right" : "ResourceStatistics",
      "info" : "SimpleType[19786-19804]:SimpleType[20701-20719]"
    }, {
      "left" : "getStatistics",
      "right" : "getStatistics",
      "info" : "SimpleName[19805-19818]:SimpleName[20720-20733]"
    }, {
      "left" : "String location",
      "right" : "String location",
      "info" : "SingleVariableDeclaration[19819-19834]:SingleVariableDeclaration[20734-20749]"
    }, {
      "left" : "Job job",
      "right" : "Job job",
      "info" : "SingleVariableDeclaration[19836-19843]:SingleVariableDeclaration[20751-20758]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19864-19875]:SimpleType[20779-20790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19876-19904]:Block[20791-20819]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19886-19898]:ReturnStatement[20801-20813]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19910-19919]:MarkerAnnotation[20825-20834]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19924-19930]:Modifier[20839-20845]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[19931-19939]:ArrayType[20846-20854]"
    }, {
      "left" : "getPartitionKeys",
      "right" : "getPartitionKeys",
      "info" : "SimpleName[19940-19956]:SimpleName[20855-20871]"
    }, {
      "left" : "String location",
      "right" : "String location",
      "info" : "SingleVariableDeclaration[19957-19972]:SingleVariableDeclaration[20872-20887]"
    }, {
      "left" : "Job job",
      "right" : "Job job",
      "info" : "SingleVariableDeclaration[19974-19981]:SingleVariableDeclaration[20889-20896]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20002-20013]:SimpleType[20917-20928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20014-20042]:Block[20929-20957]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20024-20036]:ReturnStatement[20939-20951]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20048-20057]:MarkerAnnotation[20963-20972]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20062-20068]:Modifier[20977-20983]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20069-20073]:PrimitiveType[20984-20988]"
    }, {
      "left" : "setPartitionFilter",
      "right" : "setPartitionFilter",
      "info" : "SimpleName[20074-20092]:SimpleName[20989-21007]"
    }, {
      "left" : "Expression partitionFilter",
      "right" : "Expression partitionFilter",
      "info" : "SingleVariableDeclaration[20093-20119]:SingleVariableDeclaration[21008-21034]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20140-20151]:SimpleType[21055-21066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20152-20159]:Block[21067-21074]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20165-20174]:MarkerAnnotation[21080-21089]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20179-20185]:Modifier[21094-21100]"
    }, {
      "left" : "List<OperatorSet>",
      "right" : "List<OperatorSet>",
      "info" : "ParameterizedType[20186-20203]:ParameterizedType[21101-21118]"
    }, {
      "left" : "getFeatures",
      "right" : "getFeatures",
      "info" : "SimpleName[20204-20215]:SimpleName[21119-21130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20218-20292]:Block[21133-21207]"
    }, {
      "left" : "return Arrays.asList(LoadPushDown.OperatorSet.PROJECTION);",
      "right" : "return Arrays.asList(LoadPushDown.OperatorSet.PROJECTION);",
      "info" : "ReturnStatement[20228-20286]:ReturnStatement[21143-21201]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20298-20307]:MarkerAnnotation[21213-21222]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20312-20318]:Modifier[21227-21233]"
    }, {
      "left" : "RequiredFieldResponse",
      "right" : "RequiredFieldResponse",
      "info" : "SimpleType[20319-20340]:SimpleType[21234-21255]"
    }, {
      "left" : "pushProjection",
      "right" : "pushProjection",
      "info" : "SimpleName[20341-20355]:SimpleName[21256-21270]"
    }, {
      "left" : "RequiredFieldList requiredFieldList",
      "right" : "RequiredFieldList requiredFieldList",
      "info" : "SingleVariableDeclaration[20369-20404]:SingleVariableDeclaration[21284-21319]"
    }, {
      "left" : "FrontendException",
      "right" : "FrontendException",
      "info" : "SimpleType[20413-20430]:SimpleType[21328-21345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20431-21313]:Block[21346-22228]"
    }, {
      "left" : "if (requiredFieldList == null)",
      "right" : "if (requiredFieldList == null)",
      "info" : "IfStatement[20441-20496]:IfStatement[21356-21411]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20484-20496]:ReturnStatement[21399-21411]"
    }, {
      "left" : "if (requiredFieldList.getFields() != null)",
      "right" : "if (requiredFieldList.getFields() != null)",
      "info" : "IfStatement[20505-21259]:IfStatement[21420-22174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20556-21259]:Block[21471-22174]"
    }, {
      "left" : "int schemaSize = ((StructTypeInfo)typeInfo).getAllStructFieldTypeInfos().size();",
      "right" : "int schemaSize = ((StructTypeInfo)typeInfo).getAllStructFieldTypeInfos().size();",
      "info" : "VariableDeclarationStatement[20570-20650]:VariableDeclarationStatement[21485-21565]"
    }, {
      "left" : "mRequiredColumns = new boolean[schemaSize];",
      "right" : "mRequiredColumns = new boolean[schemaSize];",
      "info" : "ExpressionStatement[20663-20706]:ExpressionStatement[21578-21621]"
    }, {
      "left" : "for (RequiredField rf: requiredFieldList.getFields())",
      "right" : "for (RequiredField rf: requiredFieldList.getFields())",
      "info" : "EnhancedForStatement[20719-20899]:EnhancedForStatement[21634-21814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20785-20899]:Block[21700-21814]"
    }, {
      "left" : "if (rf.getIndex()!=-1)",
      "right" : "if (rf.getIndex()!=-1)",
      "info" : "IfStatement[20803-20885]:IfStatement[21718-21800]"
    }, {
      "left" : "mRequiredColumns[rf.getIndex()] = true;",
      "right" : "mRequiredColumns[rf.getIndex()] = true;",
      "info" : "ExpressionStatement[20846-20885]:ExpressionStatement[21761-21800]"
    }, {
      "left" : "Properties p = UDFContext.getUDFContext().getUDFProperties(this.getClass());",
      "right" : "Properties p = UDFContext.getUDFContext().getUDFProperties(this.getClass());",
      "info" : "VariableDeclarationStatement[20912-20988]:VariableDeclarationStatement[21827-21903]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21001-21249]:TryStatement[21916-22164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21005-21132]:Block[21920-22047]"
    }, {
      "left" : "p.setProperty(signature + RequiredColumnsSuffix, ObjectSerializer.serialize(mRequiredColumns));",
      "right" : "p.setProperty(signature + RequiredColumnsSuffix, ObjectSerializer.serialize(mRequiredColumns));",
      "info" : "ExpressionStatement[21023-21118]:ExpressionStatement[21938-22033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21153-21249]:Block[22068-22164]"
    }, {
      "left" : "throw new RuntimeException(\"Cannot serialize mRequiredColumns\");",
      "right" : "throw new RuntimeException(\"Cannot serialize mRequiredColumns\");",
      "info" : "ThrowStatement[21171-21235]:ThrowStatement[22086-22150]"
    }, {
      "left" : "return new RequiredFieldResponse(true);",
      "right" : "return new RequiredFieldResponse(true);",
      "info" : "ReturnStatement[21268-21307]:ReturnStatement[22183-22222]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21319-21328]:MarkerAnnotation[22234-22243]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21333-21339]:Modifier[22248-22254]"
    }, {
      "left" : "List<String>",
      "right" : "List<String>",
      "info" : "ParameterizedType[21340-21352]:ParameterizedType[22255-22267]"
    }, {
      "left" : "getPredicateFields",
      "right" : "getPredicateFields",
      "info" : "SimpleName[21353-21371]:SimpleName[22268-22286]"
    }, {
      "left" : "String location",
      "right" : "String location",
      "info" : "SingleVariableDeclaration[21372-21387]:SingleVariableDeclaration[22287-22302]"
    }, {
      "left" : "Job job",
      "right" : "Job job",
      "info" : "SingleVariableDeclaration[21389-21396]:SingleVariableDeclaration[22304-22311]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21405-21416]:SimpleType[22320-22331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21417-22232]:Block[22332-23147]"
    }, {
      "left" : "ResourceSchema schema = getSchema(location, job);",
      "right" : "ResourceSchema schema = getSchema(location, job);",
      "info" : "VariableDeclarationStatement[21427-21476]:VariableDeclarationStatement[22342-22391]"
    }, {
      "left" : "List<String> predicateFields = new ArrayList<String>();",
      "right" : "List<String> predicateFields = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[21485-21540]:VariableDeclarationStatement[22400-22455]"
    }, {
      "left" : "for (ResourceFieldSchema field : schema.getFields())",
      "right" : "for (ResourceFieldSchema field : schema.getFields())",
      "info" : "EnhancedForStatement[21549-22194]:EnhancedForStatement[22464-23109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21602-22194]:Block[22517-23109]"
    }, {
      "left" : "switch(field.getType()) {\n            case DataType.BOOLEAN:\n            case DataType.INTEGER:\n            case DataType.LONG:\n            case DataType.FLOAT:\n            case DataType.DOUBLE:\n            case DataType.DATETIME:\n            case DataType.CHARARRAY:\n            case DataType.BIGINTEGER:\n            case DataType.BIGDECIMAL:\n                predicateFields.add(field.getName());\n                break;\n            default:\n                // Skip DataType.BYTEARRAY, DataType.TUPLE, DataType.MAP and DataType.BAG\n                break;\n            }",
      "right" : "switch(field.getType()) {\n            case DataType.BOOLEAN:\n            case DataType.INTEGER:\n            case DataType.LONG:\n            case DataType.FLOAT:\n            case DataType.DOUBLE:\n            case DataType.DATETIME:\n            case DataType.CHARARRAY:\n            case DataType.BIGINTEGER:\n            case DataType.BIGDECIMAL:\n                predicateFields.add(field.getName());\n                break;\n            default:\n                // Skip DataType.BYTEARRAY, DataType.TUPLE, DataType.MAP and DataType.BAG\n                break;\n            }",
      "info" : "SwitchStatement[21616-22184]:SwitchStatement[22531-23099]"
    }, {
      "left" : "case DataType.BOOLEAN:",
      "right" : "case DataType.BOOLEAN:",
      "info" : "SwitchCase[21654-21676]:SwitchCase[22569-22591]"
    }, {
      "left" : "case DataType.INTEGER:",
      "right" : "case DataType.INTEGER:",
      "info" : "SwitchCase[21689-21711]:SwitchCase[22604-22626]"
    }, {
      "left" : "case DataType.LONG:",
      "right" : "case DataType.LONG:",
      "info" : "SwitchCase[21724-21743]:SwitchCase[22639-22658]"
    }, {
      "left" : "case DataType.FLOAT:",
      "right" : "case DataType.FLOAT:",
      "info" : "SwitchCase[21756-21776]:SwitchCase[22671-22691]"
    }, {
      "left" : "case DataType.DOUBLE:",
      "right" : "case DataType.DOUBLE:",
      "info" : "SwitchCase[21789-21810]:SwitchCase[22704-22725]"
    }, {
      "left" : "case DataType.DATETIME:",
      "right" : "case DataType.DATETIME:",
      "info" : "SwitchCase[21823-21846]:SwitchCase[22738-22761]"
    }, {
      "left" : "case DataType.CHARARRAY:",
      "right" : "case DataType.CHARARRAY:",
      "info" : "SwitchCase[21859-21883]:SwitchCase[22774-22798]"
    }, {
      "left" : "case DataType.BIGINTEGER:",
      "right" : "case DataType.BIGINTEGER:",
      "info" : "SwitchCase[21896-21921]:SwitchCase[22811-22836]"
    }, {
      "left" : "case DataType.BIGDECIMAL:",
      "right" : "case DataType.BIGDECIMAL:",
      "info" : "SwitchCase[21934-21959]:SwitchCase[22849-22874]"
    }, {
      "left" : "predicateFields.add(field.getName());",
      "right" : "predicateFields.add(field.getName());",
      "info" : "ExpressionStatement[21976-22013]:ExpressionStatement[22891-22928]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22030-22036]:BreakStatement[22945-22951]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22049-22057]:SwitchCase[22964-22972]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22164-22170]:BreakStatement[23079-23085]"
    }, {
      "left" : "return predicateFields;",
      "right" : "return predicateFields;",
      "info" : "ReturnStatement[22203-22226]:ReturnStatement[23118-23141]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22238-22247]:MarkerAnnotation[23153-23162]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22252-22258]:Modifier[23167-23173]"
    }, {
      "left" : "List<OpType>",
      "right" : "List<OpType>",
      "info" : "ParameterizedType[22259-22271]:ParameterizedType[23174-23186]"
    }, {
      "left" : "getSupportedExpressionTypes",
      "right" : "getSupportedExpressionTypes",
      "info" : "SimpleName[22272-22299]:SimpleName[23187-23214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22302-22790]:Block[23217-23705]"
    }, {
      "left" : "List<OpType> types = new ArrayList<OpType>();",
      "right" : "List<OpType> types = new ArrayList<OpType>();",
      "info" : "VariableDeclarationStatement[22312-22357]:VariableDeclarationStatement[23227-23272]"
    }, {
      "left" : "types.add(OpType.OP_EQ);",
      "right" : "types.add(OpType.OP_EQ);",
      "info" : "ExpressionStatement[22366-22390]:ExpressionStatement[23281-23305]"
    }, {
      "left" : "types.add(OpType.OP_NE);",
      "right" : "types.add(OpType.OP_NE);",
      "info" : "ExpressionStatement[22399-22423]:ExpressionStatement[23314-23338]"
    }, {
      "left" : "types.add(OpType.OP_GT);",
      "right" : "types.add(OpType.OP_GT);",
      "info" : "ExpressionStatement[22432-22456]:ExpressionStatement[23347-23371]"
    }, {
      "left" : "types.add(OpType.OP_GE);",
      "right" : "types.add(OpType.OP_GE);",
      "info" : "ExpressionStatement[22465-22489]:ExpressionStatement[23380-23404]"
    }, {
      "left" : "types.add(OpType.OP_LT);",
      "right" : "types.add(OpType.OP_LT);",
      "info" : "ExpressionStatement[22498-22522]:ExpressionStatement[23413-23437]"
    }, {
      "left" : "types.add(OpType.OP_LE);",
      "right" : "types.add(OpType.OP_LE);",
      "info" : "ExpressionStatement[22531-22555]:ExpressionStatement[23446-23470]"
    }, {
      "left" : "types.add(OpType.OP_IN);",
      "right" : "types.add(OpType.OP_IN);",
      "info" : "ExpressionStatement[22564-22588]:ExpressionStatement[23479-23503]"
    }, {
      "left" : "types.add(OpType.OP_BETWEEN);",
      "right" : "types.add(OpType.OP_BETWEEN);",
      "info" : "ExpressionStatement[22597-22626]:ExpressionStatement[23512-23541]"
    }, {
      "left" : "types.add(OpType.OP_NULL);",
      "right" : "types.add(OpType.OP_NULL);",
      "info" : "ExpressionStatement[22635-22661]:ExpressionStatement[23550-23576]"
    }, {
      "left" : "types.add(OpType.OP_NOT);",
      "right" : "types.add(OpType.OP_NOT);",
      "info" : "ExpressionStatement[22670-22695]:ExpressionStatement[23585-23610]"
    }, {
      "left" : "types.add(OpType.OP_AND);",
      "right" : "types.add(OpType.OP_AND);",
      "info" : "ExpressionStatement[22704-22729]:ExpressionStatement[23619-23644]"
    }, {
      "left" : "types.add(OpType.OP_OR);",
      "right" : "types.add(OpType.OP_OR);",
      "info" : "ExpressionStatement[22738-22762]:ExpressionStatement[23653-23677]"
    }, {
      "left" : "return types;",
      "right" : "return types;",
      "info" : "ReturnStatement[22771-22784]:ReturnStatement[23686-23699]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22796-22805]:MarkerAnnotation[23711-23720]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22810-22816]:Modifier[23725-23731]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22817-22821]:PrimitiveType[23732-23736]"
    }, {
      "left" : "setPushdownPredicate",
      "right" : "setPushdownPredicate",
      "info" : "SimpleName[22822-22842]:SimpleName[23737-23757]"
    }, {
      "left" : "Expression expr",
      "right" : "Expression expr",
      "info" : "SingleVariableDeclaration[22843-22858]:SingleVariableDeclaration[23758-23773]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22867-22878]:SimpleType[23782-23793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22879-23433]:Block[23794-24348]"
    }, {
      "left" : "SearchArgument sArg = getSearchArgument(expr);",
      "right" : "SearchArgument sArg = getSearchArgument(expr);",
      "info" : "VariableDeclarationStatement[22889-22935]:VariableDeclarationStatement[23804-23850]"
    }, {
      "left" : "if (sArg != null)",
      "right" : "if (sArg != null)",
      "info" : "IfStatement[22944-23427]:IfStatement[23859-24342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22962-23427]:Block[23877-24342]"
    }, {
      "left" : "log.info(\"Pushdown predicate expression is \" + expr);",
      "right" : "log.info(\"Pushdown predicate expression is \" + expr);",
      "info" : "ExpressionStatement[22976-23029]:ExpressionStatement[23891-23944]"
    }, {
      "left" : "log.info(\"Pushdown predicate SearchArgument is:\\n\" + sArg);",
      "right" : "log.info(\"Pushdown predicate SearchArgument is:\\n\" + sArg);",
      "info" : "ExpressionStatement[23042-23101]:ExpressionStatement[23957-24016]"
    }, {
      "left" : "Properties p = UDFContext.getUDFContext().getUDFProperties(this.getClass());",
      "right" : "Properties p = UDFContext.getUDFContext().getUDFProperties(this.getClass());",
      "info" : "VariableDeclarationStatement[23114-23190]:VariableDeclarationStatement[24029-24105]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23203-23417]:TryStatement[24118-24332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23207-23298]:Block[24122-24213]"
    }, {
      "left" : "p.setProperty(signature + SearchArgsSuffix, sArg.toKryo());",
      "right" : "p.setProperty(signature + SearchArgsSuffix, sArg.toKryo());",
      "info" : "ExpressionStatement[23225-23284]:ExpressionStatement[24140-24199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23319-23417]:Block[24234-24332]"
    }, {
      "left" : "throw new IOException(\"Cannot serialize SearchArgument: \" + sArg);",
      "right" : "throw new IOException(\"Cannot serialize SearchArgument: \" + sArg);",
      "info" : "ThrowStatement[23337-23403]:ThrowStatement[24252-24318]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[23439-23457]:MarkerAnnotation[24354-24372]"
    }, {
      "left" : "SearchArgument",
      "right" : "SearchArgument",
      "info" : "SimpleType[23462-23476]:SimpleType[24377-24391]"
    }, {
      "left" : "getSearchArgument",
      "right" : "getSearchArgument",
      "info" : "SimpleName[23477-23494]:SimpleName[24392-24409]"
    }, {
      "left" : "Expression expr",
      "right" : "Expression expr",
      "info" : "SingleVariableDeclaration[23495-23510]:SingleVariableDeclaration[24410-24425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23512-24048]:Block[24427-24963]"
    }, {
      "left" : "if (expr == null)",
      "right" : "if (expr == null)",
      "info" : "IfStatement[23522-23576]:IfStatement[24437-24491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23540-23576]:Block[24455-24491]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23554-23566]:ReturnStatement[24469-24481]"
    }, {
      "left" : "Builder builder = SearchArgumentFactory.newBuilder();",
      "right" : "Builder builder = SearchArgumentFactory.newBuilder();",
      "info" : "VariableDeclarationStatement[23585-23638]:VariableDeclarationStatement[24500-24553]"
    }, {
      "left" : "boolean beginWithAnd = !(expr.getOpType().equals(OpType.OP_AND) || expr.getOpType().equals(OpType.OP_OR) || expr.getOpType().equals(OpType.OP_NOT));",
      "right" : "boolean beginWithAnd = !(expr.getOpType().equals(OpType.OP_AND) || expr.getOpType().equals(OpType.OP_OR) || expr.getOpType().equals(OpType.OP_NOT));",
      "info" : "VariableDeclarationStatement[23647-23795]:VariableDeclarationStatement[24562-24710]"
    }, {
      "left" : "if (beginWithAnd)",
      "right" : "if (beginWithAnd)",
      "info" : "IfStatement[23804-23865]:IfStatement[24719-24780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23822-23865]:Block[24737-24780]"
    }, {
      "left" : "builder.startAnd();",
      "right" : "builder.startAnd();",
      "info" : "ExpressionStatement[23836-23855]:ExpressionStatement[24751-24770]"
    }, {
      "left" : "buildSearchArgument(expr, builder);",
      "right" : "buildSearchArgument(expr, builder);",
      "info" : "ExpressionStatement[23874-23909]:ExpressionStatement[24789-24824]"
    }, {
      "left" : "if (beginWithAnd)",
      "right" : "if (beginWithAnd)",
      "info" : "IfStatement[23918-23974]:IfStatement[24833-24889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23936-23974]:Block[24851-24889]"
    }, {
      "left" : "builder.end();",
      "right" : "builder.end();",
      "info" : "ExpressionStatement[23950-23964]:ExpressionStatement[24865-24879]"
    }, {
      "left" : "SearchArgument sArg = builder.build();",
      "right" : "SearchArgument sArg = builder.build();",
      "info" : "VariableDeclarationStatement[23983-24021]:VariableDeclarationStatement[24898-24936]"
    }, {
      "left" : "return sArg;",
      "right" : "return sArg;",
      "info" : "ReturnStatement[24030-24042]:ReturnStatement[24945-24957]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24054-24061]:Modifier[24969-24976]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24062-24066]:PrimitiveType[24977-24981]"
    }, {
      "left" : "buildSearchArgument",
      "right" : "buildSearchArgument",
      "info" : "SimpleName[24067-24086]:SimpleName[24982-25001]"
    }, {
      "left" : "Expression expr",
      "right" : "Expression expr",
      "info" : "SingleVariableDeclaration[24087-24102]:SingleVariableDeclaration[25002-25017]"
    }, {
      "left" : "Builder builder",
      "right" : "Builder builder",
      "info" : "SingleVariableDeclaration[24104-24119]:SingleVariableDeclaration[25019-25034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24121-27070]:Block[25036-27985]"
    }, {
      "left" : "if (expr instanceof BinaryExpression)",
      "right" : "if (expr instanceof BinaryExpression)",
      "info" : "IfStatement[24131-27064]:IfStatement[25046-27979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24169-26312]:Block[25084-27227]"
    }, {
      "left" : "Expression lhs = ((BinaryExpression) expr).getLhs();",
      "right" : "Expression lhs = ((BinaryExpression) expr).getLhs();",
      "info" : "VariableDeclarationStatement[24183-24235]:VariableDeclarationStatement[25098-25150]"
    }, {
      "left" : "Expression rhs = ((BinaryExpression) expr).getRhs();",
      "right" : "Expression rhs = ((BinaryExpression) expr).getRhs();",
      "info" : "VariableDeclarationStatement[24248-24300]:VariableDeclarationStatement[25163-25215]"
    }, {
      "left" : "switch (expr.getOpType()) {\n            case OP_AND:\n                builder.startAnd();\n                buildSearchArgument(lhs, builder);\n                buildSearchArgument(rhs, builder);\n                builder.end();\n                break;\n            case OP_OR:\n                builder.startOr();\n                buildSearchArgument(lhs, builder);\n                buildSearchArgument(rhs, builder);\n                builder.end();\n                break;\n            case OP_EQ:\n                builder.equals(getColumnName(lhs), getExpressionValue(rhs));\n                break;\n            case OP_NE:\n                builder.startNot();\n                builder.equals(getColumnName(lhs), getExpressionValue(rhs));\n                builder.end();\n                break;\n            case OP_LT:\n                builder.lessThan(getColumnName(lhs), getExpressionValue(rhs));\n                break;\n            case OP_LE:\n                builder.lessThanEquals(getColumnName(lhs), getExpressionValue(rhs));\n                break;\n            case OP_GT:\n                builder.startNot();\n                builder.lessThanEquals(getColumnName(lhs), getExpressionValue(rhs));\n                builder.end();\n                break;\n            case OP_GE:\n                builder.startNot();\n                builder.lessThan(getColumnName(lhs), getExpressionValue(rhs));\n                builder.end();\n                break;\n            case OP_BETWEEN:\n                BetweenExpression between = (BetweenExpression) rhs;\n                builder.between(getColumnName(lhs), getSearchArgObjValue(between.getLower()),  getSearchArgObjValue(between.getUpper()));\n            case OP_IN:\n                InExpression in = (InExpression) rhs;\n                builder.in(getColumnName(lhs), getSearchArgObjValues(in.getValues()).toArray());\n            default:\n                throw new RuntimeException(\"Unsupported binary expression type: \" + expr.getOpType() + \" in \" + expr);\n            }",
      "right" : "switch (expr.getOpType()) {\n            case OP_AND:\n                builder.startAnd();\n                buildSearchArgument(lhs, builder);\n                buildSearchArgument(rhs, builder);\n                builder.end();\n                break;\n            case OP_OR:\n                builder.startOr();\n                buildSearchArgument(lhs, builder);\n                buildSearchArgument(rhs, builder);\n                builder.end();\n                break;\n            case OP_EQ:\n                builder.equals(getColumnName(lhs), getExpressionValue(rhs));\n                break;\n            case OP_NE:\n                builder.startNot();\n                builder.equals(getColumnName(lhs), getExpressionValue(rhs));\n                builder.end();\n                break;\n            case OP_LT:\n                builder.lessThan(getColumnName(lhs), getExpressionValue(rhs));\n                break;\n            case OP_LE:\n                builder.lessThanEquals(getColumnName(lhs), getExpressionValue(rhs));\n                break;\n            case OP_GT:\n                builder.startNot();\n                builder.lessThanEquals(getColumnName(lhs), getExpressionValue(rhs));\n                builder.end();\n                break;\n            case OP_GE:\n                builder.startNot();\n                builder.lessThan(getColumnName(lhs), getExpressionValue(rhs));\n                builder.end();\n                break;\n            case OP_BETWEEN:\n                BetweenExpression between = (BetweenExpression) rhs;\n                builder.between(getColumnName(lhs), getSearchArgObjValue(between.getLower()),  getSearchArgObjValue(between.getUpper()));\n            case OP_IN:\n                InExpression in = (InExpression) rhs;\n                builder.in(getColumnName(lhs), getSearchArgObjValues(in.getValues()).toArray());\n            default:\n                throw new RuntimeException(\"Unsupported binary expression type: \" + expr.getOpType() + \" in \" + expr);\n            }",
      "info" : "SwitchStatement[24313-26302]:SwitchStatement[25228-27217]"
    }, {
      "left" : "case OP_AND:",
      "right" : "case OP_AND:",
      "info" : "SwitchCase[24353-24365]:SwitchCase[25268-25280]"
    }, {
      "left" : "builder.startAnd();",
      "right" : "builder.startAnd();",
      "info" : "ExpressionStatement[24382-24401]:ExpressionStatement[25297-25316]"
    }, {
      "left" : "buildSearchArgument(lhs, builder);",
      "right" : "buildSearchArgument(lhs, builder);",
      "info" : "ExpressionStatement[24418-24452]:ExpressionStatement[25333-25367]"
    }, {
      "left" : "buildSearchArgument(rhs, builder);",
      "right" : "buildSearchArgument(rhs, builder);",
      "info" : "ExpressionStatement[24469-24503]:ExpressionStatement[25384-25418]"
    }, {
      "left" : "builder.end();",
      "right" : "builder.end();",
      "info" : "ExpressionStatement[24520-24534]:ExpressionStatement[25435-25449]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24551-24557]:BreakStatement[25466-25472]"
    }, {
      "left" : "case OP_OR:",
      "right" : "case OP_OR:",
      "info" : "SwitchCase[24570-24581]:SwitchCase[25485-25496]"
    }, {
      "left" : "builder.startOr();",
      "right" : "builder.startOr();",
      "info" : "ExpressionStatement[24598-24616]:ExpressionStatement[25513-25531]"
    }, {
      "left" : "buildSearchArgument(lhs, builder);",
      "right" : "buildSearchArgument(lhs, builder);",
      "info" : "ExpressionStatement[24633-24667]:ExpressionStatement[25548-25582]"
    }, {
      "left" : "buildSearchArgument(rhs, builder);",
      "right" : "buildSearchArgument(rhs, builder);",
      "info" : "ExpressionStatement[24684-24718]:ExpressionStatement[25599-25633]"
    }, {
      "left" : "builder.end();",
      "right" : "builder.end();",
      "info" : "ExpressionStatement[24735-24749]:ExpressionStatement[25650-25664]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24766-24772]:BreakStatement[25681-25687]"
    }, {
      "left" : "case OP_EQ:",
      "right" : "case OP_EQ:",
      "info" : "SwitchCase[24785-24796]:SwitchCase[25700-25711]"
    }, {
      "left" : "builder.equals(getColumnName(lhs), getExpressionValue(rhs));",
      "right" : "builder.equals(getColumnName(lhs), getExpressionValue(rhs));",
      "info" : "ExpressionStatement[24813-24873]:ExpressionStatement[25728-25788]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24890-24896]:BreakStatement[25805-25811]"
    }, {
      "left" : "case OP_NE:",
      "right" : "case OP_NE:",
      "info" : "SwitchCase[24909-24920]:SwitchCase[25824-25835]"
    }, {
      "left" : "builder.startNot();",
      "right" : "builder.startNot();",
      "info" : "ExpressionStatement[24937-24956]:ExpressionStatement[25852-25871]"
    }, {
      "left" : "builder.equals(getColumnName(lhs), getExpressionValue(rhs));",
      "right" : "builder.equals(getColumnName(lhs), getExpressionValue(rhs));",
      "info" : "ExpressionStatement[24973-25033]:ExpressionStatement[25888-25948]"
    }, {
      "left" : "builder.end();",
      "right" : "builder.end();",
      "info" : "ExpressionStatement[25050-25064]:ExpressionStatement[25965-25979]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25081-25087]:BreakStatement[25996-26002]"
    }, {
      "left" : "case OP_LT:",
      "right" : "case OP_LT:",
      "info" : "SwitchCase[25100-25111]:SwitchCase[26015-26026]"
    }, {
      "left" : "builder.lessThan(getColumnName(lhs), getExpressionValue(rhs));",
      "right" : "builder.lessThan(getColumnName(lhs), getExpressionValue(rhs));",
      "info" : "ExpressionStatement[25128-25190]:ExpressionStatement[26043-26105]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25207-25213]:BreakStatement[26122-26128]"
    }, {
      "left" : "case OP_LE:",
      "right" : "case OP_LE:",
      "info" : "SwitchCase[25226-25237]:SwitchCase[26141-26152]"
    }, {
      "left" : "builder.lessThanEquals(getColumnName(lhs), getExpressionValue(rhs));",
      "right" : "builder.lessThanEquals(getColumnName(lhs), getExpressionValue(rhs));",
      "info" : "ExpressionStatement[25254-25322]:ExpressionStatement[26169-26237]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25339-25345]:BreakStatement[26254-26260]"
    }, {
      "left" : "case OP_GT:",
      "right" : "case OP_GT:",
      "info" : "SwitchCase[25358-25369]:SwitchCase[26273-26284]"
    }, {
      "left" : "builder.startNot();",
      "right" : "builder.startNot();",
      "info" : "ExpressionStatement[25386-25405]:ExpressionStatement[26301-26320]"
    }, {
      "left" : "builder.lessThanEquals(getColumnName(lhs), getExpressionValue(rhs));",
      "right" : "builder.lessThanEquals(getColumnName(lhs), getExpressionValue(rhs));",
      "info" : "ExpressionStatement[25422-25490]:ExpressionStatement[26337-26405]"
    }, {
      "left" : "builder.end();",
      "right" : "builder.end();",
      "info" : "ExpressionStatement[25507-25521]:ExpressionStatement[26422-26436]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25538-25544]:BreakStatement[26453-26459]"
    }, {
      "left" : "case OP_GE:",
      "right" : "case OP_GE:",
      "info" : "SwitchCase[25557-25568]:SwitchCase[26472-26483]"
    }, {
      "left" : "builder.startNot();",
      "right" : "builder.startNot();",
      "info" : "ExpressionStatement[25585-25604]:ExpressionStatement[26500-26519]"
    }, {
      "left" : "builder.lessThan(getColumnName(lhs), getExpressionValue(rhs));",
      "right" : "builder.lessThan(getColumnName(lhs), getExpressionValue(rhs));",
      "info" : "ExpressionStatement[25621-25683]:ExpressionStatement[26536-26598]"
    }, {
      "left" : "builder.end();",
      "right" : "builder.end();",
      "info" : "ExpressionStatement[25700-25714]:ExpressionStatement[26615-26629]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25731-25737]:BreakStatement[26646-26652]"
    }, {
      "left" : "case OP_BETWEEN:",
      "right" : "case OP_BETWEEN:",
      "info" : "SwitchCase[25750-25766]:SwitchCase[26665-26681]"
    }, {
      "left" : "BetweenExpression between = (BetweenExpression) rhs;",
      "right" : "BetweenExpression between = (BetweenExpression) rhs;",
      "info" : "VariableDeclarationStatement[25783-25835]:VariableDeclarationStatement[26698-26750]"
    }, {
      "left" : "builder.between(getColumnName(lhs), getSearchArgObjValue(between.getLower()),  getSearchArgObjValue(between.getUpper()));",
      "right" : "builder.between(getColumnName(lhs), getSearchArgObjValue(between.getLower()),  getSearchArgObjValue(between.getUpper()));",
      "info" : "ExpressionStatement[25852-25973]:ExpressionStatement[26767-26888]"
    }, {
      "left" : "case OP_IN:",
      "right" : "case OP_IN:",
      "info" : "SwitchCase[25986-25997]:SwitchCase[26901-26912]"
    }, {
      "left" : "InExpression in = (InExpression) rhs;",
      "right" : "InExpression in = (InExpression) rhs;",
      "info" : "VariableDeclarationStatement[26014-26051]:VariableDeclarationStatement[26929-26966]"
    }, {
      "left" : "builder.in(getColumnName(lhs), getSearchArgObjValues(in.getValues()).toArray());",
      "right" : "builder.in(getColumnName(lhs), getSearchArgObjValues(in.getValues()).toArray());",
      "info" : "ExpressionStatement[26068-26148]:ExpressionStatement[26983-27063]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26161-26169]:SwitchCase[27076-27084]"
    }, {
      "left" : "throw new RuntimeException(\"Unsupported binary expression type: \" + expr.getOpType() + \" in \" + expr);",
      "right" : "throw new RuntimeException(\"Unsupported binary expression type: \" + expr.getOpType() + \" in \" + expr);",
      "info" : "ThrowStatement[26186-26288]:ThrowStatement[27101-27203]"
    }, {
      "left" : "if (expr instanceof UnaryExpression)",
      "right" : "if (expr instanceof UnaryExpression)",
      "info" : "IfStatement[26318-27064]:IfStatement[27233-27979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26355-26939]:Block[27270-27854]"
    }, {
      "left" : "Expression unaryExpr = ((UnaryExpression) expr).getExpression();",
      "right" : "Expression unaryExpr = ((UnaryExpression) expr).getExpression();",
      "info" : "VariableDeclarationStatement[26369-26433]:VariableDeclarationStatement[27284-27348]"
    }, {
      "left" : "switch (expr.getOpType()) {\n            case OP_NULL:\n                builder.isNull(getColumnName(unaryExpr));\n                break;\n            case OP_NOT:\n                builder.startNot();\n                buildSearchArgument(unaryExpr, builder);\n                builder.end();\n                break;\n            default:\n                throw new RuntimeException(\"Unsupported unary expression type: \" +\n                        expr.getOpType() + \" in \" + expr);\n            }",
      "right" : "switch (expr.getOpType()) {\n            case OP_NULL:\n                builder.isNull(getColumnName(unaryExpr));\n                break;\n            case OP_NOT:\n                builder.startNot();\n                buildSearchArgument(unaryExpr, builder);\n                builder.end();\n                break;\n            default:\n                throw new RuntimeException(\"Unsupported unary expression type: \" +\n                        expr.getOpType() + \" in \" + expr);\n            }",
      "info" : "SwitchStatement[26446-26929]:SwitchStatement[27361-27844]"
    }, {
      "left" : "case OP_NULL:",
      "right" : "case OP_NULL:",
      "info" : "SwitchCase[26486-26499]:SwitchCase[27401-27414]"
    }, {
      "left" : "builder.isNull(getColumnName(unaryExpr));",
      "right" : "builder.isNull(getColumnName(unaryExpr));",
      "info" : "ExpressionStatement[26516-26557]:ExpressionStatement[27431-27472]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26574-26580]:BreakStatement[27489-27495]"
    }, {
      "left" : "case OP_NOT:",
      "right" : "case OP_NOT:",
      "info" : "SwitchCase[26593-26605]:SwitchCase[27508-27520]"
    }, {
      "left" : "builder.startNot();",
      "right" : "builder.startNot();",
      "info" : "ExpressionStatement[26622-26641]:ExpressionStatement[27537-27556]"
    }, {
      "left" : "buildSearchArgument(unaryExpr, builder);",
      "right" : "buildSearchArgument(unaryExpr, builder);",
      "info" : "ExpressionStatement[26658-26698]:ExpressionStatement[27573-27613]"
    }, {
      "left" : "builder.end();",
      "right" : "builder.end();",
      "info" : "ExpressionStatement[26715-26729]:ExpressionStatement[27630-27644]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26746-26752]:BreakStatement[27661-27667]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26765-26773]:SwitchCase[27680-27688]"
    }, {
      "left" : "throw new RuntimeException(\"Unsupported unary expression type: \" +\n                        expr.getOpType() + \" in \" + expr);",
      "right" : "throw new RuntimeException(\"Unsupported unary expression type: \" +\n                        expr.getOpType() + \" in \" + expr);",
      "info" : "ThrowStatement[26790-26915]:ThrowStatement[27705-27830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26945-27064]:Block[27860-27979]"
    }, {
      "left" : "throw new RuntimeException(\"Unsupported expression type: \" + expr.getOpType() + \" in \" + expr);",
      "right" : "throw new RuntimeException(\"Unsupported expression type: \" + expr.getOpType() + \" in \" + expr);",
      "info" : "ThrowStatement[26959-27054]:ThrowStatement[27874-27969]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27076-27083]:Modifier[27991-27998]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[27084-27090]:SimpleType[27999-28005]"
    }, {
      "left" : "getColumnName",
      "right" : "getColumnName",
      "info" : "SimpleName[27091-27104]:SimpleName[28006-28019]"
    }, {
      "left" : "Expression expr",
      "right" : "Expression expr",
      "info" : "SingleVariableDeclaration[27105-27120]:SingleVariableDeclaration[28020-28035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27122-27390]:Block[28037-28305]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27132-27384]:TryStatement[28047-28299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27136-27193]:Block[28051-28108]"
    }, {
      "left" : "return ((Column) expr).getName();",
      "right" : "return ((Column) expr).getName();",
      "info" : "ReturnStatement[27150-27183]:ReturnStatement[28065-28098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27223-27384]:Block[28138-28299]"
    }, {
      "left" : "throw new RuntimeException(\"Expected a Column but found \" + expr.getClass().getName() +\n                    \" in expression \" + expr, e);",
      "right" : "throw new RuntimeException(\"Expected a Column but found \" + expr.getClass().getName() +\n                    \" in expression \" + expr, e);",
      "info" : "ThrowStatement[27237-27374]:ThrowStatement[28152-28289]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27396-27403]:Modifier[28311-28318]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[27404-27410]:SimpleType[28319-28325]"
    }, {
      "left" : "getExpressionValue",
      "right" : "getExpressionValue",
      "info" : "SimpleName[27411-27429]:SimpleName[28326-28344]"
    }, {
      "left" : "Expression expr",
      "right" : "Expression expr",
      "info" : "SingleVariableDeclaration[27430-27445]:SingleVariableDeclaration[28345-28360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27447-27786]:Block[28362-28701]"
    }, {
      "left" : "switch(expr.getOpType()) {\n        case TERM_COL:\n            return ((Column) expr).getName();\n        case TERM_CONST:\n            return getSearchArgObjValue(((Const) expr).getValue());\n        default:\n            throw new RuntimeException(\"Unsupported expression type: \" + expr.getOpType() + \" in \" + expr);\n        }",
      "right" : "switch(expr.getOpType()) {\n        case TERM_COL:\n            return ((Column) expr).getName();\n        case TERM_CONST:\n            return getSearchArgObjValue(((Const) expr).getValue());\n        default:\n            throw new RuntimeException(\"Unsupported expression type: \" + expr.getOpType() + \" in \" + expr);\n        }",
      "info" : "SwitchStatement[27457-27780]:SwitchStatement[28372-28695]"
    }, {
      "left" : "case TERM_COL:",
      "right" : "case TERM_COL:",
      "info" : "SwitchCase[27492-27506]:SwitchCase[28407-28421]"
    }, {
      "left" : "return ((Column) expr).getName();",
      "right" : "return ((Column) expr).getName();",
      "info" : "ReturnStatement[27519-27552]:ReturnStatement[28434-28467]"
    }, {
      "left" : "case TERM_CONST:",
      "right" : "case TERM_CONST:",
      "info" : "SwitchCase[27561-27577]:SwitchCase[28476-28492]"
    }, {
      "left" : "return getSearchArgObjValue(((Const) expr).getValue());",
      "right" : "return getSearchArgObjValue(((Const) expr).getValue());",
      "info" : "ReturnStatement[27590-27645]:ReturnStatement[28505-28560]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[27654-27662]:SwitchCase[28569-28577]"
    }, {
      "left" : "throw new RuntimeException(\"Unsupported expression type: \" + expr.getOpType() + \" in \" + expr);",
      "right" : "throw new RuntimeException(\"Unsupported expression type: \" + expr.getOpType() + \" in \" + expr);",
      "info" : "ThrowStatement[27675-27770]:ThrowStatement[28590-28685]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27792-27799]:Modifier[28707-28714]"
    }, {
      "left" : "List<Object>",
      "right" : "List<Object>",
      "info" : "ParameterizedType[27800-27812]:ParameterizedType[28715-28727]"
    }, {
      "left" : "getSearchArgObjValues",
      "right" : "getSearchArgObjValues",
      "info" : "SimpleName[27813-27834]:SimpleName[28728-28749]"
    }, {
      "left" : "List<Object> values",
      "right" : "List<Object> values",
      "info" : "SingleVariableDeclaration[27835-27854]:SingleVariableDeclaration[28750-28769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27856-28228]:Block[28771-29143]"
    }, {
      "left" : "if (!(values.get(0) instanceof BigInteger || values.get(0) instanceof BigDecimal || values.get(0) instanceof DateTime))",
      "right" : "if (!(values.get(0) instanceof BigInteger || values.get(0) instanceof BigDecimal || values.get(0) instanceof DateTime))",
      "info" : "IfStatement[27866-28024]:IfStatement[28781-28939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27986-28024]:Block[28901-28939]"
    }, {
      "left" : "return values;",
      "right" : "return values;",
      "info" : "ReturnStatement[28000-28014]:ReturnStatement[28915-28929]"
    }, {
      "left" : "List<Object> newValues = new ArrayList<Object>(values.size());",
      "right" : "List<Object> newValues = new ArrayList<Object>(values.size());",
      "info" : "VariableDeclarationStatement[28033-28095]:VariableDeclarationStatement[28948-29010]"
    }, {
      "left" : "for (Object value : values)",
      "right" : "for (Object value : values)",
      "info" : "EnhancedForStatement[28104-28199]:EnhancedForStatement[29019-29114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28132-28199]:Block[29047-29114]"
    }, {
      "left" : "newValues.add(getSearchArgObjValue(value));",
      "right" : "newValues.add(getSearchArgObjValue(value));",
      "info" : "ExpressionStatement[28146-28189]:ExpressionStatement[29061-29104]"
    }, {
      "left" : "return values;",
      "right" : "return values;",
      "info" : "ReturnStatement[28208-28222]:ReturnStatement[29123-29137]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28234-28241]:Modifier[29149-29156]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[28242-28248]:SimpleType[29157-29163]"
    }, {
      "left" : "getSearchArgObjValue",
      "right" : "getSearchArgObjValue",
      "info" : "SimpleName[28249-28269]:SimpleName[29164-29184]"
    }, {
      "left" : "Object value",
      "right" : "Object value",
      "info" : "SingleVariableDeclaration[28270-28282]:SingleVariableDeclaration[29185-29197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28284-28630]:Block[29199-29545]"
    }, {
      "left" : "if (value instanceof BigInteger)",
      "right" : "if (value instanceof BigInteger)",
      "info" : "IfStatement[28294-28624]:IfStatement[29209-29539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28327-28392]:Block[29242-29307]"
    }, {
      "left" : "return new BigDecimal((BigInteger)value);",
      "right" : "return new BigDecimal((BigInteger)value);",
      "info" : "ReturnStatement[28341-28382]:ReturnStatement[29256-29297]"
    }, {
      "left" : "if (value instanceof BigDecimal)",
      "right" : "if (value instanceof BigDecimal)",
      "info" : "IfStatement[28398-28624]:IfStatement[29313-29539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28431-28468]:Block[29346-29383]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[28445-28458]:ReturnStatement[29360-29373]"
    }, {
      "left" : "if (value instanceof DateTime)",
      "right" : "if (value instanceof DateTime)",
      "info" : "IfStatement[28474-28624]:IfStatement[29389-29539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28505-28581]:Block[29420-29496]"
    }, {
      "left" : "return new Timestamp(((DateTime)value).getMillis());",
      "right" : "return new Timestamp(((DateTime)value).getMillis());",
      "info" : "ReturnStatement[28519-28571]:ReturnStatement[29434-29486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28587-28624]:Block[29502-29539]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[28601-28614]:ReturnStatement[29516-29529]"
    } ]
  },
  "interFileMappings" : { }
}