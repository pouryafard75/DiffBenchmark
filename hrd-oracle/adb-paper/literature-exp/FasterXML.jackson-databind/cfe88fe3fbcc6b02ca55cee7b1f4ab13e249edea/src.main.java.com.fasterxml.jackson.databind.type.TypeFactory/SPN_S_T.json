{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "TypeDeclaration[413-50531]:TypeDeclaration[413-51651]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[1338-1386]:FieldDeclaration[1338-1386]"
    }, {
      "left" : "private final static JavaType[] NO_TYPES = new JavaType[0];",
      "right" : "private final static JavaType[] NO_TYPES = new JavaType[0];",
      "info" : "FieldDeclaration[1392-1451]:FieldDeclaration[1392-1451]"
    }, {
      "left" : "protected final static TypeFactory instance = new TypeFactory();",
      "right" : "protected final static TypeFactory instance = new TypeFactory();",
      "info" : "FieldDeclaration[1457-1754]:FieldDeclaration[1457-1754]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_STRING = new SimpleType(String.class);",
      "right" : "protected final static SimpleType CORE_TYPE_STRING = new SimpleType(String.class);",
      "info" : "FieldDeclaration[2108-2190]:FieldDeclaration[2108-2190]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_BOOL = new SimpleType(Boolean.TYPE);",
      "right" : "protected final static SimpleType CORE_TYPE_BOOL = new SimpleType(Boolean.TYPE);",
      "info" : "FieldDeclaration[2195-2275]:FieldDeclaration[2195-2275]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_INT = new SimpleType(Integer.TYPE);",
      "right" : "protected final static SimpleType CORE_TYPE_INT = new SimpleType(Integer.TYPE);",
      "info" : "FieldDeclaration[2280-2359]:FieldDeclaration[2280-2359]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_LONG = new SimpleType(Long.TYPE);",
      "right" : "protected final static SimpleType CORE_TYPE_LONG = new SimpleType(Long.TYPE);",
      "info" : "FieldDeclaration[2364-2441]:FieldDeclaration[2364-2441]"
    }, {
      "left" : "protected final LRUMap<ClassKey, JavaType> _typeCache = new LRUMap<ClassKey, JavaType>(16, 100);",
      "right" : "protected final LRUMap<ClassKey, JavaType> _typeCache = new LRUMap<ClassKey, JavaType>(16, 100);",
      "info" : "FieldDeclaration[2447-2740]:FieldDeclaration[2447-2740]"
    }, {
      "left" : "protected transient HierarchicType _cachedHashMapType;",
      "right" : "protected transient HierarchicType _cachedHashMapType;",
      "info" : "FieldDeclaration[2947-3123]:FieldDeclaration[2947-3123]"
    }, {
      "left" : "protected transient HierarchicType _cachedArrayListType;",
      "right" : "protected transient HierarchicType _cachedArrayListType;",
      "info" : "FieldDeclaration[3129-3309]:FieldDeclaration[3129-3309]"
    }, {
      "left" : "protected final TypeModifier[] _modifiers;",
      "right" : "protected final TypeModifier[] _modifiers;",
      "info" : "FieldDeclaration[3488-3676]:FieldDeclaration[3488-3676]"
    }, {
      "left" : "protected final TypeParser _parser;",
      "right" : "protected final TypeParser _parser;",
      "info" : "FieldDeclaration[3686-3721]:FieldDeclaration[3686-3721]"
    }, {
      "left" : "private TypeFactory()",
      "right" : "private TypeFactory()",
      "info" : "MethodDeclaration[3889-3985]:MethodDeclaration[4055-4214]"
    }, {
      "left" : "protected TypeFactory(TypeParser p, TypeModifier[] mods)",
      "right" : "protected TypeFactory(TypeParser p, TypeModifier[] mods, ClassLoader classLoader)",
      "info" : "MethodDeclaration[3991-4103]:MethodDeclaration[4320-4528]"
    }, {
      "left" : "public TypeFactory withModifier(TypeModifier mod)",
      "right" : "public TypeFactory withModifier(TypeModifier mod)",
      "info" : "MethodDeclaration[4109-4498]:MethodDeclaration[4534-4956]"
    }, {
      "left" : "public static TypeFactory defaultInstance()",
      "right" : "public static TypeFactory defaultInstance()",
      "info" : "MethodDeclaration[4504-4771]:MethodDeclaration[5104-5371]"
    }, {
      "left" : "public void clearCache()",
      "right" : "public void clearCache()",
      "info" : "MethodDeclaration[4777-5286]:MethodDeclaration[5377-5886]"
    }, {
      "left" : "public static JavaType unknownType()",
      "right" : "public static JavaType unknownType()",
      "info" : "MethodDeclaration[5506-5795]:MethodDeclaration[6215-6504]"
    }, {
      "left" : "public static Class<?> rawClass(Type t)",
      "right" : "public static Class<?> rawClass(Type t)",
      "info" : "MethodDeclaration[5801-6347]:MethodDeclaration[6510-7056]"
    }, {
      "left" : "public Class<?> findClass(String className) throws ClassNotFoundException",
      "right" : "public Class<?> findClass(String className) throws ClassNotFoundException",
      "info" : "MethodDeclaration[6529-7794]:MethodDeclaration[7238-8575]"
    }, {
      "left" : "protected Class<?> _findPrimitive(String className)",
      "right" : "protected Class<?> _findPrimitive(String className)",
      "info" : "MethodDeclaration[7800-8409]:MethodDeclaration[8920-9529]"
    }, {
      "left" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
      "right" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
      "info" : "MethodDeclaration[8623-10552]:MethodDeclaration[9743-11672]"
    }, {
      "left" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
      "right" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
      "info" : "MethodDeclaration[10558-11114]:MethodDeclaration[11678-12234]"
    }, {
      "left" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
      "right" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
      "info" : "MethodDeclaration[11124-13035]:MethodDeclaration[12244-14155]"
    }, {
      "left" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType)",
      "right" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType)",
      "info" : "MethodDeclaration[13041-13195]:MethodDeclaration[14161-14315]"
    }, {
      "left" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
      "right" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
      "info" : "MethodDeclaration[13201-14758]:MethodDeclaration[14321-15878]"
    }, {
      "left" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
      "right" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
      "info" : "MethodDeclaration[14764-15634]:MethodDeclaration[15884-16754]"
    }, {
      "left" : "public JavaType constructType(Type type)",
      "right" : "public JavaType constructType(Type type)",
      "info" : "MethodDeclaration[15818-15909]:MethodDeclaration[16938-17029]"
    }, {
      "left" : "public JavaType constructType(Type type, TypeBindings bindings)",
      "right" : "public JavaType constructType(Type type, TypeBindings bindings)",
      "info" : "MethodDeclaration[15915-16033]:MethodDeclaration[17035-17153]"
    }, {
      "left" : "public JavaType constructType(TypeReference<?> typeRef)",
      "right" : "public JavaType constructType(TypeReference<?> typeRef)",
      "info" : "MethodDeclaration[16043-16162]:MethodDeclaration[17163-17282]"
    }, {
      "left" : "public JavaType constructType(Type type, Class<?> context)",
      "right" : "public JavaType constructType(Type type, Class<?> context)",
      "info" : "MethodDeclaration[16172-16363]:MethodDeclaration[17292-17483]"
    }, {
      "left" : "public JavaType constructType(Type type, JavaType context)",
      "right" : "public JavaType constructType(Type type, JavaType context)",
      "info" : "MethodDeclaration[16369-16560]:MethodDeclaration[17489-17680]"
    }, {
      "left" : "protected JavaType _constructType(Type type, TypeBindings context)",
      "right" : "protected JavaType _constructType(Type type, TypeBindings context)",
      "info" : "MethodDeclaration[16570-18359]:MethodDeclaration[17690-19479]"
    }, {
      "left" : "public ArrayType constructArrayType(Class<?> elementType)",
      "right" : "public ArrayType constructArrayType(Class<?> elementType)",
      "info" : "MethodDeclaration[18539-18898]:MethodDeclaration[19659-20018]"
    }, {
      "left" : "public ArrayType constructArrayType(JavaType elementType)",
      "right" : "public ArrayType constructArrayType(JavaType elementType)",
      "info" : "MethodDeclaration[18908-19221]:MethodDeclaration[20028-20341]"
    }, {
      "left" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)",
      "right" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)",
      "info" : "MethodDeclaration[19227-19631]:MethodDeclaration[20347-20751]"
    }, {
      "left" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)",
      "right" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)",
      "info" : "MethodDeclaration[19641-20028]:MethodDeclaration[20761-21148]"
    }, {
      "left" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)",
      "right" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)",
      "info" : "MethodDeclaration[20034-20436]:MethodDeclaration[21154-21556]"
    }, {
      "left" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)",
      "right" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)",
      "info" : "MethodDeclaration[20446-20831]:MethodDeclaration[21566-21951]"
    }, {
      "left" : "public MapType constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)",
      "right" : "public MapType constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)",
      "info" : "MethodDeclaration[20841-21211]:MethodDeclaration[21961-22331]"
    }, {
      "left" : "public MapType constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "right" : "public MapType constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "info" : "MethodDeclaration[21217-21621]:MethodDeclaration[22337-22741]"
    }, {
      "left" : "public MapLikeType constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)",
      "right" : "public MapLikeType constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)",
      "info" : "MethodDeclaration[21627-22001]:MethodDeclaration[22747-23121]"
    }, {
      "left" : "public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "right" : "public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "info" : "MethodDeclaration[22011-22415]:MethodDeclaration[23131-23535]"
    }, {
      "left" : "public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)",
      "right" : "public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)",
      "info" : "MethodDeclaration[22425-22774]:MethodDeclaration[23545-23894]"
    }, {
      "left" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget,\n            JavaType[] parameterTypes)",
      "right" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget,\n            JavaType[] parameterTypes)",
      "info" : "MethodDeclaration[22780-23755]:MethodDeclaration[23900-24875]"
    }, {
      "left" : "public JavaType constructReferenceType(Class<?> rawType, JavaType refType)",
      "right" : "public JavaType constructReferenceType(Class<?> rawType, JavaType refType)",
      "info" : "MethodDeclaration[23762-23953]:MethodDeclaration[24882-25073]"
    }, {
      "left" : "public JavaType uncheckedSimpleType(Class<?> cls)",
      "right" : "public JavaType uncheckedSimpleType(Class<?> cls)",
      "info" : "MethodDeclaration[23959-24349]:MethodDeclaration[25079-25469]"
    }, {
      "left" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            Class<?>... parameterClasses)",
      "right" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            Class<?>... parameterClasses)",
      "info" : "MethodDeclaration[24359-26199]:MethodDeclaration[25479-27319]"
    }, {
      "left" : "public JavaType constructParametricType(Class<?> parametrized, Class<?>... parameterClasses)",
      "right" : "public JavaType constructParametricType(Class<?> parametrized, Class<?>... parameterClasses)",
      "info" : "MethodDeclaration[26205-26503]:MethodDeclaration[27325-27623]"
    }, {
      "left" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            JavaType... parameterTypes)",
      "right" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            JavaType... parameterTypes)",
      "info" : "MethodDeclaration[26509-29432]:MethodDeclaration[27629-30552]"
    }, {
      "left" : "public JavaType constructParametricType(Class<?> parametrized, JavaType... parameterTypes)",
      "right" : "public JavaType constructParametricType(Class<?> parametrized, JavaType... parameterTypes)",
      "info" : "MethodDeclaration[29438-29732]:MethodDeclaration[30558-30852]"
    }, {
      "left" : "public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)",
      "right" : "public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)",
      "info" : "MethodDeclaration[29981-30614]:MethodDeclaration[31101-31734]"
    }, {
      "left" : "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)",
      "right" : "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)",
      "info" : "MethodDeclaration[30620-31255]:MethodDeclaration[31740-32375]"
    }, {
      "left" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
      "right" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
      "info" : "MethodDeclaration[31261-31880]:MethodDeclaration[32381-33000]"
    }, {
      "left" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
      "right" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
      "info" : "MethodDeclaration[31886-32514]:MethodDeclaration[33006-33634]"
    }, {
      "left" : "protected JavaType _fromClass(Class<?> clz, TypeBindings context)",
      "right" : "protected JavaType _fromClass(Class<?> clz, TypeBindings context)",
      "info" : "MethodDeclaration[32694-35533]:MethodDeclaration[33814-36653]"
    }, {
      "left" : "protected JavaType _fromParameterizedClass(Class<?> clz, List<JavaType> paramTypes)",
      "right" : "protected JavaType _fromParameterizedClass(Class<?> clz, List<JavaType> paramTypes)",
      "info" : "MethodDeclaration[35543-36993]:MethodDeclaration[36663-38113]"
    }, {
      "left" : "protected JavaType _fromParamType(ParameterizedType type, TypeBindings context)",
      "right" : "protected JavaType _fromParamType(ParameterizedType type, TypeBindings context)",
      "info" : "MethodDeclaration[37003-40709]:MethodDeclaration[38123-41829]"
    }, {
      "left" : "protected JavaType _fromArrayType(GenericArrayType type, TypeBindings context)",
      "right" : "protected JavaType _fromArrayType(GenericArrayType type, TypeBindings context)",
      "info" : "MethodDeclaration[40715-40948]:MethodDeclaration[41835-42068]"
    }, {
      "left" : "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)",
      "right" : "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)",
      "info" : "MethodDeclaration[40954-42911]:MethodDeclaration[42074-44031]"
    }, {
      "left" : "protected JavaType _fromWildcard(WildcardType type, TypeBindings context)",
      "right" : "protected JavaType _fromWildcard(WildcardType type, TypeBindings context)",
      "info" : "MethodDeclaration[42917-43427]:MethodDeclaration[44037-44547]"
    }, {
      "left" : "private JavaType _mapType(Class<?> rawClass)",
      "right" : "private JavaType _mapType(Class<?> rawClass)",
      "info" : "MethodDeclaration[43433-44231]:MethodDeclaration[44553-45351]"
    }, {
      "left" : "private JavaType _collectionType(Class<?> rawClass)",
      "right" : "private JavaType _collectionType(Class<?> rawClass)",
      "info" : "MethodDeclaration[44237-44825]:MethodDeclaration[45357-45945]"
    }, {
      "left" : "protected JavaType _resolveVariableViaSubTypes(HierarchicType leafType, String variableName, TypeBindings bindings)",
      "right" : "protected JavaType _resolveVariableViaSubTypes(HierarchicType leafType, String variableName, TypeBindings bindings)",
      "info" : "MethodDeclaration[44835-45948]:MethodDeclaration[45955-47068]"
    }, {
      "left" : "protected JavaType _unknownType()",
      "right" : "protected JavaType _unknownType()",
      "info" : "MethodDeclaration[45958-46044]:MethodDeclaration[47078-47164]"
    }, {
      "left" : "protected HierarchicType  _findSuperTypeChain(Class<?> subtype, Class<?> supertype)",
      "right" : "protected HierarchicType  _findSuperTypeChain(Class<?> subtype, Class<?> supertype)",
      "info" : "MethodDeclaration[46216-46847]:MethodDeclaration[47336-47967]"
    }, {
      "left" : "protected HierarchicType _findSuperClassChain(Type currentType, Class<?> target)",
      "right" : "protected HierarchicType _findSuperClassChain(Type currentType, Class<?> target)",
      "info" : "MethodDeclaration[46853-47524]:MethodDeclaration[47973-48644]"
    }, {
      "left" : "protected HierarchicType _findSuperInterfaceChain(Type currentType, Class<?> target)",
      "right" : "protected HierarchicType _findSuperInterfaceChain(Type currentType, Class<?> target)",
      "info" : "MethodDeclaration[47530-48448]:MethodDeclaration[48650-49568]"
    }, {
      "left" : "protected HierarchicType _doFindSuperInterfaceChain(HierarchicType current, Class<?> target)",
      "right" : "protected HierarchicType _doFindSuperInterfaceChain(HierarchicType current, Class<?> target)",
      "info" : "MethodDeclaration[48458-49520]:MethodDeclaration[49578-50640]"
    }, {
      "left" : "protected synchronized HierarchicType _hashMapSuperInterfaceChain(HierarchicType current)",
      "right" : "protected synchronized HierarchicType _hashMapSuperInterfaceChain(HierarchicType current)",
      "info" : "MethodDeclaration[49526-50020]:MethodDeclaration[50646-51140]"
    }, {
      "left" : "protected synchronized HierarchicType _arrayListSuperInterfaceChain(HierarchicType current)",
      "right" : "protected synchronized HierarchicType _arrayListSuperInterfaceChain(HierarchicType current)",
      "info" : "MethodDeclaration[50026-50529]:MethodDeclaration[51146-51649]"
    } ],
    "mappings" : [
 {
      "left" : "@SuppressWarnings({\"rawtypes\", \"unchecked\"})",
      "right" : "@SuppressWarnings({\"rawtypes\", \"unchecked\"})",
      "info" : "SingleMemberAnnotation[1220-1264]:SingleMemberAnnotation[1220-1264]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1265-1271]:Modifier[1265-1271]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[1272-1277]:Modifier[1272-1277]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1278-1283]:TYPE_DECLARATION_KIND[1278-1283]"
    }, {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "SimpleName[1284-1295]:SimpleName[1284-1295]"
    }, {
      "left" : "java.io.Serializable",
      "right" : "java.io.Serializable",
      "info" : "SimpleType[1311-1331]:SimpleType[1311-1331]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3889-3896]:Modifier[4055-4062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3911-3985]:Block[4077-4214]"
    }, {
      "left" : "_parser = new TypeParser(this);",
      "right" : "_parser = new TypeParser(this);",
      "info" : "ExpressionStatement[3921-3952]:ExpressionStatement[4087-4118]"
    }, {
      "left" : "_modifiers = null;",
      "right" : "_modifiers = null;",
      "info" : "ExpressionStatement[3961-3979]:ExpressionStatement[4127-4145]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3991-4000]:Modifier[4320-4329]"
    }, {
      "left" : "TypeParser p",
      "right" : "TypeParser p",
      "info" : "SingleVariableDeclaration[4013-4025]:SingleVariableDeclaration[4342-4354]"
    }, {
      "left" : "TypeModifier[] mods",
      "right" : "TypeModifier[] mods",
      "info" : "SingleVariableDeclaration[4027-4046]:SingleVariableDeclaration[4356-4375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4048-4103]:Block[4402-4528]"
    }, {
      "left" : "_parser = p;",
      "right" : "_parser = p;",
      "info" : "ExpressionStatement[4058-4070]:ExpressionStatement[4412-4424]"
    }, {
      "left" : "_modifiers = mods;",
      "right" : "_modifiers = mods;",
      "info" : "ExpressionStatement[4079-4097]:ExpressionStatement[4433-4451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4109-4115]:Modifier[4534-4540]"
    }, {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "SimpleType[4116-4127]:SimpleType[4541-4552]"
    }, {
      "left" : "withModifier",
      "right" : "withModifier",
      "info" : "SimpleName[4128-4140]:SimpleName[4553-4565]"
    }, {
      "left" : "TypeModifier mod",
      "right" : "TypeModifier mod",
      "info" : "SingleVariableDeclaration[4141-4157]:SingleVariableDeclaration[4566-4582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4164-4498]:Block[4589-4956]"
    }, {
      "left" : "if (mod == null)",
      "right" : "if (mod == null)",
      "info" : "IfStatement[4174-4284]:IfStatement[4598-4719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4191-4284]:Block[4615-4719]"
    }, {
      "left" : "return new TypeFactory(_parser, _modifiers);",
      "right" : "return new TypeFactory(_parser, _modifiers, _classLoader);",
      "info" : "ReturnStatement[4230-4274]:ReturnStatement[4652-4710]"
    }, {
      "left" : "if (_modifiers == null)",
      "right" : "if (_modifiers == null)",
      "info" : "IfStatement[4293-4401]:IfStatement[4727-4846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4317-4401]:Block[4751-4846]"
    }, {
      "left" : "return new TypeFactory(_parser, new TypeModifier[] { mod });",
      "right" : "return new TypeFactory(_parser, new TypeModifier[] { mod }, _classLoader);",
      "info" : "ReturnStatement[4331-4391]:ReturnStatement[4763-4837]"
    }, {
      "left" : "return new TypeFactory(_parser, ArrayBuilders.insertInListNoDup(_modifiers, mod));",
      "right" : "return new TypeFactory(_parser, ArrayBuilders.insertInListNoDup(_modifiers, mod), _classLoader);",
      "info" : "ReturnStatement[4410-4492]:ReturnStatement[4854-4950]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4707-4713]:Modifier[5307-5313]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4714-4720]:Modifier[5314-5320]"
    }, {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "SimpleType[4721-4732]:SimpleType[5321-5332]"
    }, {
      "left" : "defaultInstance",
      "right" : "defaultInstance",
      "info" : "SimpleName[4733-4748]:SimpleName[5333-5348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4751-4771]:Block[5351-5371]"
    }, {
      "left" : "return instance;",
      "right" : "return instance;",
      "info" : "ReturnStatement[4753-4769]:ReturnStatement[5353-5369]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5226-5232]:Modifier[5826-5832]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5233-5237]:PrimitiveType[5833-5837]"
    }, {
      "left" : "clearCache",
      "right" : "clearCache",
      "info" : "SimpleName[5238-5248]:SimpleName[5838-5848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5251-5286]:Block[5851-5886]"
    }, {
      "left" : "_typeCache.clear();",
      "right" : "_typeCache.clear();",
      "info" : "ExpressionStatement[5261-5280]:ExpressionStatement[5861-5880]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5702-5708]:Modifier[6411-6417]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5709-5715]:Modifier[6418-6424]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[5716-5724]:SimpleType[6425-6433]"
    }, {
      "left" : "unknownType",
      "right" : "unknownType",
      "info" : "SimpleName[5725-5736]:SimpleName[6434-6445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5739-5795]:Block[6448-6504]"
    }, {
      "left" : "return defaultInstance()._unknownType();",
      "right" : "return defaultInstance()._unknownType();",
      "info" : "ReturnStatement[5749-5789]:ReturnStatement[6458-6498]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6096-6102]:Modifier[6805-6811]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6103-6109]:Modifier[6812-6818]"
    }, {
      "left" : "Class<?>",
      "right" : "Class<?>",
      "info" : "ParameterizedType[6110-6118]:ParameterizedType[6819-6827]"
    }, {
      "left" : "rawClass",
      "right" : "rawClass",
      "info" : "SimpleName[6119-6127]:SimpleName[6828-6836]"
    }, {
      "left" : "Type t",
      "right" : "Type t",
      "info" : "SingleVariableDeclaration[6128-6134]:SingleVariableDeclaration[6837-6843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6136-6347]:Block[6845-7056]"
    }, {
      "left" : "if (t instanceof Class<?>)",
      "right" : "if (t instanceof Class<?>)",
      "info" : "IfStatement[6146-6217]:IfStatement[6855-6926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6173-6217]:Block[6882-6926]"
    }, {
      "left" : "return (Class<?>) t;",
      "right" : "return (Class<?>) t;",
      "info" : "ReturnStatement[6187-6207]:ReturnStatement[6896-6916]"
    }, {
      "left" : "return defaultInstance().constructType(t).getRawClass();",
      "right" : "return defaultInstance().constructType(t).getRawClass();",
      "info" : "ReturnStatement[6285-6341]:ReturnStatement[6994-7050]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6749-6755]:Modifier[7458-7464]"
    }, {
      "left" : "Class<?>",
      "right" : "Class<?>",
      "info" : "ParameterizedType[6756-6764]:ParameterizedType[7465-7473]"
    }, {
      "left" : "findClass",
      "right" : "findClass",
      "info" : "SimpleName[6765-6774]:SimpleName[7474-7483]"
    }, {
      "left" : "String className",
      "right" : "String className",
      "info" : "SingleVariableDeclaration[6775-6791]:SingleVariableDeclaration[7484-7500]"
    }, {
      "left" : "ClassNotFoundException",
      "right" : "ClassNotFoundException",
      "info" : "SimpleType[6800-6822]:SimpleType[7509-7531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6827-7794]:Block[7536-8575]"
    }, {
      "left" : "if (className.indexOf('.') < 0)",
      "right" : "if (className.indexOf('.') < 0)",
      "info" : "IfStatement[6837-7010]:IfStatement[7546-7719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6869-7010]:Block[7578-7719]"
    }, {
      "left" : "Class<?> prim = _findPrimitive(className);",
      "right" : "Class<?> prim = _findPrimitive(className);",
      "info" : "VariableDeclarationStatement[6883-6925]:VariableDeclarationStatement[7592-7634]"
    }, {
      "left" : "if (prim != null)",
      "right" : "if (prim != null)",
      "info" : "IfStatement[6938-7000]:IfStatement[7647-7709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6956-7000]:Block[7665-7709]"
    }, {
      "left" : "return prim;",
      "right" : "return prim;",
      "info" : "ReturnStatement[6974-6986]:ReturnStatement[7683-7695]"
    }, {
      "left" : "Throwable prob = null;",
      "right" : "Throwable prob = null;",
      "info" : "VariableDeclarationStatement[7094-7116]:VariableDeclarationStatement[7803-7825]"
    }, {
      "left" : "ClassLoader loader = Thread.currentThread().getContextClassLoader();",
      "right" : "ClassLoader loader = this.getClassLoader();",
      "info" : "VariableDeclarationStatement[7125-7193]:VariableDeclarationStatement[7834-7877]"
    }, {
      "left" : "Thread.currentThread().getContextClassLoader()",
      "right" : "Thread.currentThread().getContextClassLoader()",
      "info" : "MethodInvocation[7146-7192]:MethodInvocation[7928-7974]"
    }, {
      "left" : "if (loader != null)",
      "right" : "if (loader != null)",
      "info" : "IfStatement[7211-7423]:IfStatement[7994-8205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7231-7423]:Block[8014-8205]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7245-7413]:TryStatement[8028-8195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7249-7327]:Block[8032-8109]"
    }, {
      "left" : "return Class.forName(className, true, loader);",
      "right" : "return classForName(className, true, loader);",
      "info" : "ReturnStatement[7267-7313]:ReturnStatement[8050-8095]"
    }, {
      "left" : "forName",
      "right" : "classForName",
      "info" : "SimpleName[7280-7287]:SimpleName[8057-8069]"
    }, {
      "left" : "className",
      "right" : "className",
      "info" : "SimpleName[7288-7297]:SimpleName[8070-8079]"
    }, {
      "left" : "true",
      "right" : "true",
      "info" : "BooleanLiteral[7299-7303]:BooleanLiteral[8081-8085]"
    }, {
      "left" : "loader",
      "right" : "loader",
      "info" : "SimpleName[7305-7311]:SimpleName[8087-8093]"
    }, {
      "left" : "Exception e",
      "right" : "Exception e",
      "info" : "SingleVariableDeclaration[7335-7346]:SingleVariableDeclaration[8117-8128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7348-7413]:Block[8130-8195]"
    }, {
      "left" : "prob = ClassUtil.getRootCause(e);",
      "right" : "prob = ClassUtil.getRootCause(e);",
      "info" : "ExpressionStatement[7366-7399]:ExpressionStatement[8148-8181]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7432-7620]:TryStatement[8214-8401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7436-7492]:Block[8218-8273]"
    }, {
      "left" : "return Class.forName(className);",
      "right" : "return classForName(className);",
      "info" : "ReturnStatement[7450-7482]:ReturnStatement[8232-8263]"
    }, {
      "left" : "forName",
      "right" : "classForName",
      "info" : "SimpleName[7463-7470]:SimpleName[8239-8251]"
    }, {
      "left" : "Exception e",
      "right" : "Exception e",
      "info" : "SingleVariableDeclaration[7500-7511]:SingleVariableDeclaration[8281-8292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7513-7620]:Block[8294-8401]"
    }, {
      "left" : "if (prob == null)",
      "right" : "if (prob == null)",
      "info" : "IfStatement[7527-7610]:IfStatement[8308-8391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7545-7610]:Block[8326-8391]"
    }, {
      "left" : "prob = ClassUtil.getRootCause(e);",
      "right" : "prob = ClassUtil.getRootCause(e);",
      "info" : "ExpressionStatement[7563-7596]:ExpressionStatement[8344-8377]"
    }, {
      "left" : "if (prob instanceof RuntimeException)",
      "right" : "if (prob instanceof RuntimeException)",
      "info" : "IfStatement[7629-7721]:IfStatement[8410-8502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7667-7721]:Block[8448-8502]"
    }, {
      "left" : "throw (RuntimeException) prob;",
      "right" : "throw (RuntimeException) prob;",
      "info" : "ThrowStatement[7681-7711]:ThrowStatement[8462-8492]"
    }, {
      "left" : "throw new ClassNotFoundException(prob.getMessage(), prob);",
      "right" : "throw new ClassNotFoundException(prob.getMessage(), prob);",
      "info" : "ThrowStatement[7730-7788]:ThrowStatement[8511-8569]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7800-7809]:Modifier[8920-8929]"
    }, {
      "left" : "Class<?>",
      "right" : "Class<?>",
      "info" : "ParameterizedType[7810-7818]:ParameterizedType[8930-8938]"
    }, {
      "left" : "_findPrimitive",
      "right" : "_findPrimitive",
      "info" : "SimpleName[7819-7833]:SimpleName[8939-8953]"
    }, {
      "left" : "String className",
      "right" : "String className",
      "info" : "SingleVariableDeclaration[7834-7850]:SingleVariableDeclaration[8954-8970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7856-8409]:Block[8976-9529]"
    }, {
      "left" : "if (\"int\".equals(className))",
      "right" : "if (\"int\".equals(className))",
      "info" : "IfStatement[7866-7915]:IfStatement[8986-9035]"
    }, {
      "left" : "return Integer.TYPE;",
      "right" : "return Integer.TYPE;",
      "info" : "ReturnStatement[7895-7915]:ReturnStatement[9015-9035]"
    }, {
      "left" : "if (\"long\".equals(className))",
      "right" : "if (\"long\".equals(className))",
      "info" : "IfStatement[7924-7971]:IfStatement[9044-9091]"
    }, {
      "left" : "return Long.TYPE;",
      "right" : "return Long.TYPE;",
      "info" : "ReturnStatement[7954-7971]:ReturnStatement[9074-9091]"
    }, {
      "left" : "if (\"float\".equals(className))",
      "right" : "if (\"float\".equals(className))",
      "info" : "IfStatement[7980-8029]:IfStatement[9100-9149]"
    }, {
      "left" : "return Float.TYPE;",
      "right" : "return Float.TYPE;",
      "info" : "ReturnStatement[8011-8029]:ReturnStatement[9131-9149]"
    }, {
      "left" : "if (\"double\".equals(className))",
      "right" : "if (\"double\".equals(className))",
      "info" : "IfStatement[8038-8089]:IfStatement[9158-9209]"
    }, {
      "left" : "return Double.TYPE;",
      "right" : "return Double.TYPE;",
      "info" : "ReturnStatement[8070-8089]:ReturnStatement[9190-9209]"
    }, {
      "left" : "if (\"boolean\".equals(className))",
      "right" : "if (\"boolean\".equals(className))",
      "info" : "IfStatement[8098-8151]:IfStatement[9218-9271]"
    }, {
      "left" : "return Boolean.TYPE;",
      "right" : "return Boolean.TYPE;",
      "info" : "ReturnStatement[8131-8151]:ReturnStatement[9251-9271]"
    }, {
      "left" : "if (\"byte\".equals(className))",
      "right" : "if (\"byte\".equals(className))",
      "info" : "IfStatement[8160-8207]:IfStatement[9280-9327]"
    }, {
      "left" : "return Byte.TYPE;",
      "right" : "return Byte.TYPE;",
      "info" : "ReturnStatement[8190-8207]:ReturnStatement[9310-9327]"
    }, {
      "left" : "if (\"char\".equals(className))",
      "right" : "if (\"char\".equals(className))",
      "info" : "IfStatement[8216-8268]:IfStatement[9336-9388]"
    }, {
      "left" : "return Character.TYPE;",
      "right" : "return Character.TYPE;",
      "info" : "ReturnStatement[8246-8268]:ReturnStatement[9366-9388]"
    }, {
      "left" : "if (\"short\".equals(className))",
      "right" : "if (\"short\".equals(className))",
      "info" : "IfStatement[8277-8326]:IfStatement[9397-9446]"
    }, {
      "left" : "return Short.TYPE;",
      "right" : "return Short.TYPE;",
      "info" : "ReturnStatement[8308-8326]:ReturnStatement[9428-9446]"
    }, {
      "left" : "if (\"void\".equals(className))",
      "right" : "if (\"void\".equals(className))",
      "info" : "IfStatement[8335-8382]:IfStatement[9455-9502]"
    }, {
      "left" : "return Void.TYPE;",
      "right" : "return Void.TYPE;",
      "info" : "ReturnStatement[8365-8382]:ReturnStatement[9485-9502]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8391-8403]:ReturnStatement[9511-9523]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8975-8981]:Modifier[10095-10101]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[8982-8990]:SimpleType[10102-10110]"
    }, {
      "left" : "constructSpecializedType",
      "right" : "constructSpecializedType",
      "info" : "SimpleName[8991-9015]:SimpleName[10111-10135]"
    }, {
      "left" : "JavaType baseType",
      "right" : "JavaType baseType",
      "info" : "SingleVariableDeclaration[9016-9033]:SingleVariableDeclaration[10136-10153]"
    }, {
      "left" : "Class<?> subclass",
      "right" : "Class<?> subclass",
      "info" : "SingleVariableDeclaration[9035-9052]:SingleVariableDeclaration[10155-10172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9058-10552]:Block[10178-11672]"
    }, {
      "left" : "if (baseType.getRawClass() == subclass)",
      "right" : "if (baseType.getRawClass() == subclass)",
      "info" : "IfStatement[9165-9245]:IfStatement[10285-10365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9205-9245]:Block[10325-10365]"
    }, {
      "left" : "return baseType;",
      "right" : "return baseType;",
      "info" : "ReturnStatement[9219-9235]:ReturnStatement[10339-10355]"
    }, {
      "left" : "if (baseType instanceof SimpleType)",
      "right" : "if (baseType instanceof SimpleType)",
      "info" : "IfStatement[9327-10441]:IfStatement[10447-11561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9363-10441]:Block[10483-11561]"
    }, {
      "left" : "if (subclass.isArray()\n                || Map.class.isAssignableFrom(subclass)\n                || Collection.class.isAssignableFrom(subclass))",
      "right" : "if (subclass.isArray()\n                || Map.class.isAssignableFrom(subclass)\n                || Collection.class.isAssignableFrom(subclass))",
      "info" : "IfStatement[9444-10431]:IfStatement[10564-11551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9587-10431]:Block[10707-11551]"
    }, {
      "left" : "if (!baseType.getRawClass().isAssignableFrom(subclass))",
      "right" : "if (!baseType.getRawClass().isAssignableFrom(subclass))",
      "info" : "IfStatement[9661-9860]:IfStatement[10781-10980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9717-9860]:Block[10837-10980]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Class \"+subclass.getClass().getName()+\" not subtype of \"+baseType);",
      "right" : "throw new IllegalArgumentException(\"Class \"+subclass.getClass().getName()+\" not subtype of \"+baseType);",
      "info" : "ThrowStatement[9739-9842]:ThrowStatement[10859-10962]"
    }, {
      "left" : "JavaType subtype = _fromClass(subclass, new TypeBindings(this, baseType.getRawClass()));",
      "right" : "JavaType subtype = _fromClass(subclass, new TypeBindings(this, baseType.getRawClass()));",
      "info" : "VariableDeclarationStatement[9923-10011]:VariableDeclarationStatement[11043-11131]"
    }, {
      "left" : "Object h = baseType.getValueHandler();",
      "right" : "Object h = baseType.getValueHandler();",
      "info" : "VariableDeclarationStatement[10081-10119]:VariableDeclarationStatement[11201-11239]"
    }, {
      "left" : "if (h != null)",
      "right" : "if (h != null)",
      "info" : "IfStatement[10136-10229]:IfStatement[11256-11349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10151-10229]:Block[11271-11349]"
    }, {
      "left" : "subtype = subtype.withValueHandler(h);",
      "right" : "subtype = subtype.withValueHandler(h);",
      "info" : "ExpressionStatement[10173-10211]:ExpressionStatement[11293-11331]"
    }, {
      "left" : "h = baseType.getTypeHandler();",
      "right" : "h = baseType.getTypeHandler();",
      "info" : "ExpressionStatement[10246-10276]:ExpressionStatement[11366-11396]"
    }, {
      "left" : "if (h != null)",
      "right" : "if (h != null)",
      "info" : "IfStatement[10293-10385]:IfStatement[11413-11505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10308-10385]:Block[11428-11505]"
    }, {
      "left" : "subtype = subtype.withTypeHandler(h);",
      "right" : "subtype = subtype.withTypeHandler(h);",
      "info" : "ExpressionStatement[10330-10367]:ExpressionStatement[11450-11487]"
    }, {
      "left" : "return subtype;",
      "right" : "return subtype;",
      "info" : "ReturnStatement[10402-10417]:ReturnStatement[11522-11537]"
    }, {
      "left" : "return baseType.narrowBy(subclass);",
      "right" : "return baseType.narrowBy(subclass);",
      "info" : "ReturnStatement[10511-10546]:ReturnStatement[11631-11666]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10973-10979]:Modifier[12093-12099]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[10980-10988]:SimpleType[12100-12108]"
    }, {
      "left" : "constructFromCanonical",
      "right" : "constructFromCanonical",
      "info" : "SimpleName[10989-11011]:SimpleName[12109-12131]"
    }, {
      "left" : "String canonical",
      "right" : "String canonical",
      "info" : "SingleVariableDeclaration[11012-11028]:SingleVariableDeclaration[12132-12148]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[11037-11061]:SimpleType[12157-12181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11066-11114]:Block[12186-12234]"
    }, {
      "left" : "return _parser.parse(canonical);",
      "right" : "return _parser.parse(canonical);",
      "info" : "ReturnStatement[11076-11108]:ReturnStatement[12196-12228]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11495-11501]:Modifier[12615-12621]"
    }, {
      "left" : "JavaType[]",
      "right" : "JavaType[]",
      "info" : "ArrayType[11502-11512]:ArrayType[12622-12632]"
    }, {
      "left" : "findTypeParameters",
      "right" : "findTypeParameters",
      "info" : "SimpleName[11513-11531]:SimpleName[12633-12651]"
    }, {
      "left" : "JavaType type",
      "right" : "JavaType type",
      "info" : "SingleVariableDeclaration[11532-11545]:SingleVariableDeclaration[12652-12665]"
    }, {
      "left" : "Class<?> expType",
      "right" : "Class<?> expType",
      "info" : "SingleVariableDeclaration[11547-11563]:SingleVariableDeclaration[12667-12683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11569-13035]:Block[12689-14155]"
    }, {
      "left" : "if (expType == type.getParameterSource())",
      "right" : "if (expType == type.getParameterSource())",
      "info" : "IfStatement[12137-12540]:IfStatement[13257-13660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12179-12540]:Block[13299-13660]"
    }, {
      "left" : "int count = type.containedTypeCount();",
      "right" : "int count = type.containedTypeCount();",
      "info" : "VariableDeclarationStatement[12260-12298]:VariableDeclarationStatement[13380-13418]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[12311-12339]:IfStatement[13431-13459]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12327-12339]:ReturnStatement[13447-13459]"
    }, {
      "left" : "JavaType[] result = new JavaType[count];",
      "right" : "JavaType[] result = new JavaType[count];",
      "info" : "VariableDeclarationStatement[12352-12392]:VariableDeclarationStatement[13472-13512]"
    }, {
      "left" : "for (int i = 0; i < count; ++i)",
      "right" : "for (int i = 0; i < count; ++i)",
      "info" : "ForStatement[12405-12503]:ForStatement[13525-13623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12437-12503]:Block[13557-13623]"
    }, {
      "left" : "result[i] = type.containedType(i);",
      "right" : "result[i] = type.containedType(i);",
      "info" : "ExpressionStatement[12455-12489]:ExpressionStatement[13575-13609]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[12516-12530]:ReturnStatement[13636-13650]"
    }, {
      "left" : "Class<?> raw = type.getRawClass();",
      "right" : "Class<?> raw = type.getRawClass();",
      "info" : "VariableDeclarationStatement[12916-12950]:VariableDeclarationStatement[14036-14070]"
    }, {
      "left" : "return findTypeParameters(raw, expType, new TypeBindings(this, type));",
      "right" : "return findTypeParameters(raw, expType, new TypeBindings(this, type));",
      "info" : "ReturnStatement[12959-13029]:ReturnStatement[14079-14149]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13041-13047]:Modifier[14161-14167]"
    }, {
      "left" : "JavaType[]",
      "right" : "JavaType[]",
      "info" : "ArrayType[13048-13058]:ArrayType[14168-14178]"
    }, {
      "left" : "findTypeParameters",
      "right" : "findTypeParameters",
      "info" : "SimpleName[13059-13077]:SimpleName[14179-14197]"
    }, {
      "left" : "Class<?> clz",
      "right" : "Class<?> clz",
      "info" : "SingleVariableDeclaration[13078-13090]:SingleVariableDeclaration[14198-14210]"
    }, {
      "left" : "Class<?> expType",
      "right" : "Class<?> expType",
      "info" : "SingleVariableDeclaration[13092-13108]:SingleVariableDeclaration[14212-14228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13110-13195]:Block[14230-14315]"
    }, {
      "left" : "return findTypeParameters(clz, expType, new TypeBindings(this, clz));",
      "right" : "return findTypeParameters(clz, expType, new TypeBindings(this, clz));",
      "info" : "ReturnStatement[13120-13189]:ReturnStatement[14240-14309]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13201-13207]:Modifier[14321-14327]"
    }, {
      "left" : "JavaType[]",
      "right" : "JavaType[]",
      "info" : "ArrayType[13208-13218]:ArrayType[14328-14338]"
    }, {
      "left" : "findTypeParameters",
      "right" : "findTypeParameters",
      "info" : "SimpleName[13219-13237]:SimpleName[14339-14357]"
    }, {
      "left" : "Class<?> clz",
      "right" : "Class<?> clz",
      "info" : "SingleVariableDeclaration[13238-13250]:SingleVariableDeclaration[14358-14370]"
    }, {
      "left" : "Class<?> expType",
      "right" : "Class<?> expType",
      "info" : "SingleVariableDeclaration[13252-13268]:SingleVariableDeclaration[14372-14388]"
    }, {
      "left" : "TypeBindings bindings",
      "right" : "TypeBindings bindings",
      "info" : "SingleVariableDeclaration[13270-13291]:SingleVariableDeclaration[14390-14411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13297-14758]:Block[14417-15878]"
    }, {
      "left" : "HierarchicType subType = _findSuperTypeChain(clz, expType);",
      "right" : "HierarchicType subType = _findSuperTypeChain(clz, expType);",
      "info" : "VariableDeclarationStatement[13353-13412]:VariableDeclarationStatement[14473-14532]"
    }, {
      "left" : "if (subType == null)",
      "right" : "if (subType == null)",
      "info" : "IfStatement[13485-13631]:IfStatement[14605-14751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13506-13631]:Block[14626-14751]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Class \"+clz.getName()+\" is not a subtype of \"+expType.getName());",
      "right" : "throw new IllegalArgumentException(\"Class \"+clz.getName()+\" is not a subtype of \"+expType.getName());",
      "info" : "ThrowStatement[13520-13621]:ThrowStatement[14640-14741]"
    }, {
      "left" : "HierarchicType superType = subType;",
      "right" : "HierarchicType superType = subType;",
      "info" : "VariableDeclarationStatement[13694-13729]:VariableDeclarationStatement[14814-14849]"
    }, {
      "left" : "while (superType.getSuperType() != null)",
      "right" : "while (superType.getSuperType() != null)",
      "info" : "WhileStatement[13738-14577]:WhileStatement[14858-15697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13779-14577]:Block[14899-15697]"
    }, {
      "left" : "superType = superType.getSuperType();",
      "right" : "superType = superType.getSuperType();",
      "info" : "ExpressionStatement[13793-13830]:ExpressionStatement[14913-14950]"
    }, {
      "left" : "Class<?> raw = superType.getRawClass();",
      "right" : "Class<?> raw = superType.getRawClass();",
      "info" : "VariableDeclarationStatement[13843-13882]:VariableDeclarationStatement[14963-15002]"
    }, {
      "left" : "TypeBindings newBindings = new TypeBindings(this, raw);",
      "right" : "TypeBindings newBindings = new TypeBindings(this, raw);",
      "info" : "VariableDeclarationStatement[13895-13950]:VariableDeclarationStatement[15015-15070]"
    }, {
      "left" : "if (superType.isGeneric())",
      "right" : "if (superType.isGeneric())",
      "info" : "IfStatement[13963-14531]:IfStatement[15083-15651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13990-14531]:Block[15110-15651]"
    }, {
      "left" : "ParameterizedType pt = superType.asGeneric();",
      "right" : "ParameterizedType pt = superType.asGeneric();",
      "info" : "VariableDeclarationStatement[14041-14086]:VariableDeclarationStatement[15161-15206]"
    }, {
      "left" : "Type[] actualTypes = pt.getActualTypeArguments();",
      "right" : "Type[] actualTypes = pt.getActualTypeArguments();",
      "info" : "VariableDeclarationStatement[14103-14152]:VariableDeclarationStatement[15223-15272]"
    }, {
      "left" : "TypeVariable<?>[] vars = raw.getTypeParameters();",
      "right" : "TypeVariable<?>[] vars = raw.getTypeParameters();",
      "info" : "VariableDeclarationStatement[14169-14218]:VariableDeclarationStatement[15289-15338]"
    }, {
      "left" : "int len = actualTypes.length;",
      "right" : "int len = actualTypes.length;",
      "info" : "VariableDeclarationStatement[14235-14264]:VariableDeclarationStatement[15355-15384]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[14281-14517]:ForStatement[15401-15637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14311-14517]:Block[15431-15637]"
    }, {
      "left" : "String name = vars[i].getName();",
      "right" : "String name = vars[i].getName();",
      "info" : "VariableDeclarationStatement[14333-14365]:VariableDeclarationStatement[15453-15485]"
    }, {
      "left" : "JavaType type = _constructType(actualTypes[i], bindings);",
      "right" : "JavaType type = _constructType(actualTypes[i], bindings);",
      "info" : "VariableDeclarationStatement[14386-14443]:VariableDeclarationStatement[15506-15563]"
    }, {
      "left" : "newBindings.addBinding(name, type);",
      "right" : "newBindings.addBinding(name, type);",
      "info" : "ExpressionStatement[14464-14499]:ExpressionStatement[15584-15619]"
    }, {
      "left" : "bindings = newBindings;",
      "right" : "bindings = newBindings;",
      "info" : "ExpressionStatement[14544-14567]:ExpressionStatement[15664-15687]"
    }, {
      "left" : "if (!superType.isGeneric())",
      "right" : "if (!superType.isGeneric())",
      "info" : "IfStatement[14648-14712]:IfStatement[15768-15832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14676-14712]:Block[15796-15832]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14690-14702]:ReturnStatement[15810-15822]"
    }, {
      "left" : "return bindings.typesAsArray();",
      "right" : "return bindings.typesAsArray();",
      "info" : "ReturnStatement[14721-14752]:ReturnStatement[15841-15872]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15107-15113]:Modifier[16227-16233]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[15114-15122]:SimpleType[16234-16242]"
    }, {
      "left" : "moreSpecificType",
      "right" : "moreSpecificType",
      "info" : "SimpleName[15123-15139]:SimpleName[16243-16259]"
    }, {
      "left" : "JavaType type1",
      "right" : "JavaType type1",
      "info" : "SingleVariableDeclaration[15140-15154]:SingleVariableDeclaration[16260-16274]"
    }, {
      "left" : "JavaType type2",
      "right" : "JavaType type2",
      "info" : "SingleVariableDeclaration[15156-15170]:SingleVariableDeclaration[16276-16290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15176-15634]:Block[16296-16754]"
    }, {
      "left" : "if (type1 == null)",
      "right" : "if (type1 == null)",
      "info" : "IfStatement[15186-15242]:IfStatement[16306-16362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15205-15242]:Block[16325-16362]"
    }, {
      "left" : "return type2;",
      "right" : "return type2;",
      "info" : "ReturnStatement[15219-15232]:ReturnStatement[16339-16352]"
    }, {
      "left" : "if (type2 == null)",
      "right" : "if (type2 == null)",
      "info" : "IfStatement[15251-15307]:IfStatement[16371-16427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15270-15307]:Block[16390-16427]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[15284-15297]:ReturnStatement[16404-16417]"
    }, {
      "left" : "Class<?> raw1 = type1.getRawClass();",
      "right" : "Class<?> raw1 = type1.getRawClass();",
      "info" : "VariableDeclarationStatement[15316-15352]:VariableDeclarationStatement[16436-16472]"
    }, {
      "left" : "Class<?> raw2 = type2.getRawClass();",
      "right" : "Class<?> raw2 = type2.getRawClass();",
      "info" : "VariableDeclarationStatement[15361-15397]:VariableDeclarationStatement[16481-16517]"
    }, {
      "left" : "if (raw1 == raw2)",
      "right" : "if (raw1 == raw2)",
      "info" : "IfStatement[15406-15461]:IfStatement[16526-16581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15424-15461]:Block[16544-16581]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[15438-15451]:ReturnStatement[16558-16571]"
    }, {
      "left" : "if (raw1.isAssignableFrom(raw2))",
      "right" : "if (raw1.isAssignableFrom(raw2))",
      "info" : "IfStatement[15536-15606]:IfStatement[16656-16726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15569-15606]:Block[16689-16726]"
    }, {
      "left" : "return type2;",
      "right" : "return type2;",
      "info" : "ReturnStatement[15583-15596]:ReturnStatement[16703-16716]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[15615-15628]:ReturnStatement[16735-16748]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15818-15824]:Modifier[16938-16944]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[15825-15833]:SimpleType[16945-16953]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[15834-15847]:SimpleName[16954-16967]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[15848-15857]:SingleVariableDeclaration[16968-16977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15859-15909]:Block[16979-17029]"
    }, {
      "left" : "return _constructType(type, null);",
      "right" : "return _constructType(type, null);",
      "info" : "ReturnStatement[15869-15903]:ReturnStatement[16989-17023]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15915-15921]:Modifier[17035-17041]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[15922-15930]:SimpleType[17042-17050]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[15931-15944]:SimpleName[17051-17064]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[15945-15954]:SingleVariableDeclaration[17065-17074]"
    }, {
      "left" : "TypeBindings bindings",
      "right" : "TypeBindings bindings",
      "info" : "SingleVariableDeclaration[15956-15977]:SingleVariableDeclaration[17076-17097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15979-16033]:Block[17099-17153]"
    }, {
      "left" : "return _constructType(type, bindings);",
      "right" : "return _constructType(type, bindings);",
      "info" : "ReturnStatement[15989-16027]:ReturnStatement[17109-17147]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16043-16049]:Modifier[17163-17169]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[16050-16058]:SimpleType[17170-17178]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[16059-16072]:SimpleName[17179-17192]"
    }, {
      "left" : "TypeReference<?> typeRef",
      "right" : "TypeReference<?> typeRef",
      "info" : "SingleVariableDeclaration[16073-16097]:SingleVariableDeclaration[17193-17217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16099-16162]:Block[17219-17282]"
    }, {
      "left" : "return _constructType(typeRef.getType(), null);",
      "right" : "return _constructType(typeRef.getType(), null);",
      "info" : "ReturnStatement[16109-16156]:ReturnStatement[17229-17276]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16172-16178]:Modifier[17292-17298]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[16179-16187]:SimpleType[17299-17307]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[16188-16201]:SimpleName[17308-17321]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[16202-16211]:SingleVariableDeclaration[17322-17331]"
    }, {
      "left" : "Class<?> context",
      "right" : "Class<?> context",
      "info" : "SingleVariableDeclaration[16213-16229]:SingleVariableDeclaration[17333-17349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16231-16363]:Block[17351-17483]"
    }, {
      "left" : "TypeBindings b = (context == null) ? null : new TypeBindings(this, context);",
      "right" : "TypeBindings b = (context == null) ? null : new TypeBindings(this, context);",
      "info" : "VariableDeclarationStatement[16241-16317]:VariableDeclarationStatement[17361-17437]"
    }, {
      "left" : "return _constructType(type, b);",
      "right" : "return _constructType(type, b);",
      "info" : "ReturnStatement[16326-16357]:ReturnStatement[17446-17477]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16369-16375]:Modifier[17489-17495]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[16376-16384]:SimpleType[17496-17504]"
    }, {
      "left" : "constructType",
      "right" : "constructType",
      "info" : "SimpleName[16385-16398]:SimpleName[17505-17518]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[16399-16408]:SingleVariableDeclaration[17519-17528]"
    }, {
      "left" : "JavaType context",
      "right" : "JavaType context",
      "info" : "SingleVariableDeclaration[16410-16426]:SingleVariableDeclaration[17530-17546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16428-16560]:Block[17548-17680]"
    }, {
      "left" : "TypeBindings b = (context == null) ? null : new TypeBindings(this, context);",
      "right" : "TypeBindings b = (context == null) ? null : new TypeBindings(this, context);",
      "info" : "VariableDeclarationStatement[16438-16514]:VariableDeclarationStatement[17558-17634]"
    }, {
      "left" : "return _constructType(type, b);",
      "right" : "return _constructType(type, b);",
      "info" : "ReturnStatement[16523-16554]:ReturnStatement[17643-17674]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16774-16783]:Modifier[17894-17903]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[16784-16792]:SimpleType[17904-17912]"
    }, {
      "left" : "_constructType",
      "right" : "_constructType",
      "info" : "SimpleName[16793-16807]:SimpleName[17913-17927]"
    }, {
      "left" : "Type type",
      "right" : "Type type",
      "info" : "SingleVariableDeclaration[16808-16817]:SingleVariableDeclaration[17928-17937]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[16819-16839]:SingleVariableDeclaration[17939-17959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16845-18359]:Block[17965-19479]"
    }, {
      "left" : "JavaType resultType;",
      "right" : "JavaType resultType;",
      "info" : "VariableDeclarationStatement[16855-16875]:VariableDeclarationStatement[17975-17995]"
    }, {
      "left" : "if (type instanceof Class<?>)",
      "right" : "if (type instanceof Class<?>)",
      "info" : "IfStatement[16910-17872]:IfStatement[18030-18992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16940-17014]:Block[18060-18134]"
    }, {
      "left" : "resultType = _fromClass((Class<?>) type, context);",
      "right" : "resultType = _fromClass((Class<?>) type, context);",
      "info" : "ExpressionStatement[16954-17004]:ExpressionStatement[18074-18124]"
    }, {
      "left" : "if (type instanceof ParameterizedType)",
      "right" : "if (type instanceof ParameterizedType)",
      "info" : "IfStatement[17076-17872]:IfStatement[18196-18992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17115-17202]:Block[18235-18322]"
    }, {
      "left" : "resultType = _fromParamType((ParameterizedType) type, context);",
      "right" : "resultType = _fromParamType((ParameterizedType) type, context);",
      "info" : "ExpressionStatement[17129-17192]:ExpressionStatement[18249-18312]"
    }, {
      "left" : "if (type instanceof JavaType)",
      "right" : "if (type instanceof JavaType)",
      "info" : "IfStatement[17216-17872]:IfStatement[18336-18992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17246-17308]:Block[18366-18428]"
    }, {
      "left" : "return (JavaType) type;",
      "right" : "return (JavaType) type;",
      "info" : "ReturnStatement[17275-17298]:ReturnStatement[18395-18418]"
    }, {
      "left" : "if (type instanceof GenericArrayType)",
      "right" : "if (type instanceof GenericArrayType)",
      "info" : "IfStatement[17322-17872]:IfStatement[18442-18992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17360-17446]:Block[18480-18566]"
    }, {
      "left" : "resultType = _fromArrayType((GenericArrayType) type, context);",
      "right" : "resultType = _fromArrayType((GenericArrayType) type, context);",
      "info" : "ExpressionStatement[17374-17436]:ExpressionStatement[18494-18556]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[17460-17872]:IfStatement[18580-18992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17497-17581]:Block[18617-18701]"
    }, {
      "left" : "resultType = _fromVariable((TypeVariable<?>) type, context);",
      "right" : "resultType = _fromVariable((TypeVariable<?>) type, context);",
      "info" : "ExpressionStatement[17511-17571]:ExpressionStatement[18631-18691]"
    }, {
      "left" : "if (type instanceof WildcardType)",
      "right" : "if (type instanceof WildcardType)",
      "info" : "IfStatement[17595-17872]:IfStatement[18715-18992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17629-17710]:Block[18749-18830]"
    }, {
      "left" : "resultType = _fromWildcard((WildcardType) type, context);",
      "right" : "resultType = _fromWildcard((WildcardType) type, context);",
      "info" : "ExpressionStatement[17643-17700]:ExpressionStatement[18763-18820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17716-17872]:Block[18836-18992]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unrecognized Type: \"+((type == null) ? \"[null]\" : type.toString()));",
      "right" : "throw new IllegalArgumentException(\"Unrecognized Type: \"+((type == null) ? \"[null]\" : type.toString()));",
      "info" : "ThrowStatement[17758-17862]:ThrowStatement[18878-18982]"
    }, {
      "left" : "if (_modifiers != null && !resultType.isContainerType())",
      "right" : "if (_modifiers != null && !resultType.isContainerType())",
      "info" : "IfStatement[18116-18326]:IfStatement[19236-19446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18173-18326]:Block[19293-19446]"
    }, {
      "left" : "for (TypeModifier mod : _modifiers)",
      "right" : "for (TypeModifier mod : _modifiers)",
      "info" : "EnhancedForStatement[18187-18316]:EnhancedForStatement[19307-19436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18223-18316]:Block[19343-19436]"
    }, {
      "left" : "resultType = mod.modifyType(resultType, type, context, this);",
      "right" : "resultType = mod.modifyType(resultType, type, context, this);",
      "info" : "ExpressionStatement[18241-18302]:ExpressionStatement[19361-19422]"
    }, {
      "left" : "return resultType;",
      "right" : "return resultType;",
      "info" : "ReturnStatement[18335-18353]:ReturnStatement[19455-19473]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18750-18756]:Modifier[19870-19876]"
    }, {
      "left" : "ArrayType",
      "right" : "ArrayType",
      "info" : "SimpleType[18757-18766]:SimpleType[19877-19886]"
    }, {
      "left" : "constructArrayType",
      "right" : "constructArrayType",
      "info" : "SimpleName[18767-18785]:SimpleName[19887-19905]"
    }, {
      "left" : "Class<?> elementType",
      "right" : "Class<?> elementType",
      "info" : "SingleVariableDeclaration[18786-18806]:SingleVariableDeclaration[19906-19926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18808-18898]:Block[19928-20018]"
    }, {
      "left" : "return ArrayType.construct(_constructType(elementType, null), null, null);",
      "right" : "return ArrayType.construct(_constructType(elementType, null), null, null);",
      "info" : "ReturnStatement[18818-18892]:ReturnStatement[19938-20012]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19095-19101]:Modifier[20215-20221]"
    }, {
      "left" : "ArrayType",
      "right" : "ArrayType",
      "info" : "SimpleType[19102-19111]:SimpleType[20222-20231]"
    }, {
      "left" : "constructArrayType",
      "right" : "constructArrayType",
      "info" : "SimpleName[19112-19130]:SimpleName[20232-20250]"
    }, {
      "left" : "JavaType elementType",
      "right" : "JavaType elementType",
      "info" : "SingleVariableDeclaration[19131-19151]:SingleVariableDeclaration[20251-20271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19153-19221]:Block[20273-20341]"
    }, {
      "left" : "return ArrayType.construct(elementType, null, null);",
      "right" : "return ArrayType.construct(elementType, null, null);",
      "info" : "ReturnStatement[19163-19215]:ReturnStatement[20283-20335]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19423-19429]:Modifier[20543-20549]"
    }, {
      "left" : "CollectionType",
      "right" : "CollectionType",
      "info" : "SimpleType[19430-19444]:SimpleType[20550-20564]"
    }, {
      "left" : "constructCollectionType",
      "right" : "constructCollectionType",
      "info" : "SimpleName[19445-19468]:SimpleName[20565-20588]"
    }, {
      "left" : "Class<? extends Collection> collectionClass",
      "right" : "Class<? extends Collection> collectionClass",
      "info" : "SingleVariableDeclaration[19469-19512]:SingleVariableDeclaration[20589-20632]"
    }, {
      "left" : "Class<?> elementClass",
      "right" : "Class<?> elementClass",
      "info" : "SingleVariableDeclaration[19514-19535]:SingleVariableDeclaration[20634-20655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19537-19631]:Block[20657-20751]"
    }, {
      "left" : "return CollectionType.construct(collectionClass, constructType(elementClass));",
      "right" : "return CollectionType.construct(collectionClass, constructType(elementClass));",
      "info" : "ReturnStatement[19547-19625]:ReturnStatement[20667-20745]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19837-19843]:Modifier[20957-20963]"
    }, {
      "left" : "CollectionType",
      "right" : "CollectionType",
      "info" : "SimpleType[19844-19858]:SimpleType[20964-20978]"
    }, {
      "left" : "constructCollectionType",
      "right" : "constructCollectionType",
      "info" : "SimpleName[19859-19882]:SimpleName[20979-21002]"
    }, {
      "left" : "Class<? extends Collection> collectionClass",
      "right" : "Class<? extends Collection> collectionClass",
      "info" : "SingleVariableDeclaration[19883-19926]:SingleVariableDeclaration[21003-21046]"
    }, {
      "left" : "JavaType elementType",
      "right" : "JavaType elementType",
      "info" : "SingleVariableDeclaration[19928-19948]:SingleVariableDeclaration[21048-21068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19950-20028]:Block[21070-21148]"
    }, {
      "left" : "return CollectionType.construct(collectionClass, elementType);",
      "right" : "return CollectionType.construct(collectionClass, elementType);",
      "info" : "ReturnStatement[19960-20022]:ReturnStatement[21080-21142]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20235-20241]:Modifier[21355-21361]"
    }, {
      "left" : "CollectionLikeType",
      "right" : "CollectionLikeType",
      "info" : "SimpleType[20242-20260]:SimpleType[21362-21380]"
    }, {
      "left" : "constructCollectionLikeType",
      "right" : "constructCollectionLikeType",
      "info" : "SimpleName[20261-20288]:SimpleName[21381-21408]"
    }, {
      "left" : "Class<?> collectionClass",
      "right" : "Class<?> collectionClass",
      "info" : "SingleVariableDeclaration[20289-20313]:SingleVariableDeclaration[21409-21433]"
    }, {
      "left" : "Class<?> elementClass",
      "right" : "Class<?> elementClass",
      "info" : "SingleVariableDeclaration[20315-20336]:SingleVariableDeclaration[21435-21456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20338-20436]:Block[21458-21556]"
    }, {
      "left" : "return CollectionLikeType.construct(collectionClass, constructType(elementClass));",
      "right" : "return CollectionLikeType.construct(collectionClass, constructType(elementClass));",
      "info" : "ReturnStatement[20348-20430]:ReturnStatement[21468-21550]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20647-20653]:Modifier[21767-21773]"
    }, {
      "left" : "CollectionLikeType",
      "right" : "CollectionLikeType",
      "info" : "SimpleType[20654-20672]:SimpleType[21774-21792]"
    }, {
      "left" : "constructCollectionLikeType",
      "right" : "constructCollectionLikeType",
      "info" : "SimpleName[20673-20700]:SimpleName[21793-21820]"
    }, {
      "left" : "Class<?> collectionClass",
      "right" : "Class<?> collectionClass",
      "info" : "SingleVariableDeclaration[20701-20725]:SingleVariableDeclaration[21821-21845]"
    }, {
      "left" : "JavaType elementType",
      "right" : "JavaType elementType",
      "info" : "SingleVariableDeclaration[20727-20747]:SingleVariableDeclaration[21847-21867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20749-20831]:Block[21869-21951]"
    }, {
      "left" : "return CollectionLikeType.construct(collectionClass, elementType);",
      "right" : "return CollectionLikeType.construct(collectionClass, elementType);",
      "info" : "ReturnStatement[20759-20825]:ReturnStatement[21879-21945]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21039-21045]:Modifier[22159-22165]"
    }, {
      "left" : "MapType",
      "right" : "MapType",
      "info" : "SimpleType[21046-21053]:SimpleType[22166-22173]"
    }, {
      "left" : "constructMapType",
      "right" : "constructMapType",
      "info" : "SimpleName[21054-21070]:SimpleName[22174-22190]"
    }, {
      "left" : "Class<? extends Map> mapClass",
      "right" : "Class<? extends Map> mapClass",
      "info" : "SingleVariableDeclaration[21071-21100]:SingleVariableDeclaration[22191-22220]"
    }, {
      "left" : "JavaType keyType",
      "right" : "JavaType keyType",
      "info" : "SingleVariableDeclaration[21102-21118]:SingleVariableDeclaration[22222-22238]"
    }, {
      "left" : "JavaType valueType",
      "right" : "JavaType valueType",
      "info" : "SingleVariableDeclaration[21120-21138]:SingleVariableDeclaration[22240-22258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21140-21211]:Block[22260-22331]"
    }, {
      "left" : "return MapType.construct(mapClass, keyType, valueType);",
      "right" : "return MapType.construct(mapClass, keyType, valueType);",
      "info" : "ReturnStatement[21150-21205]:ReturnStatement[22270-22325]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21415-21421]:Modifier[22535-22541]"
    }, {
      "left" : "MapType",
      "right" : "MapType",
      "info" : "SimpleType[21422-21429]:SimpleType[22542-22549]"
    }, {
      "left" : "constructMapType",
      "right" : "constructMapType",
      "info" : "SimpleName[21430-21446]:SimpleName[22550-22566]"
    }, {
      "left" : "Class<? extends Map> mapClass",
      "right" : "Class<? extends Map> mapClass",
      "info" : "SingleVariableDeclaration[21447-21476]:SingleVariableDeclaration[22567-22596]"
    }, {
      "left" : "Class<?> keyClass",
      "right" : "Class<?> keyClass",
      "info" : "SingleVariableDeclaration[21478-21495]:SingleVariableDeclaration[22598-22615]"
    }, {
      "left" : "Class<?> valueClass",
      "right" : "Class<?> valueClass",
      "info" : "SingleVariableDeclaration[21497-21516]:SingleVariableDeclaration[22617-22636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21518-21621]:Block[22638-22741]"
    }, {
      "left" : "return MapType.construct(mapClass, constructType(keyClass), constructType(valueClass));",
      "right" : "return MapType.construct(mapClass, constructType(keyClass), constructType(valueClass));",
      "info" : "ReturnStatement[21528-21615]:ReturnStatement[22648-22735]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21829-21835]:Modifier[22949-22955]"
    }, {
      "left" : "MapLikeType",
      "right" : "MapLikeType",
      "info" : "SimpleType[21836-21847]:SimpleType[22956-22967]"
    }, {
      "left" : "constructMapLikeType",
      "right" : "constructMapLikeType",
      "info" : "SimpleName[21848-21868]:SimpleName[22968-22988]"
    }, {
      "left" : "Class<?> mapClass",
      "right" : "Class<?> mapClass",
      "info" : "SingleVariableDeclaration[21869-21886]:SingleVariableDeclaration[22989-23006]"
    }, {
      "left" : "JavaType keyType",
      "right" : "JavaType keyType",
      "info" : "SingleVariableDeclaration[21888-21904]:SingleVariableDeclaration[23008-23024]"
    }, {
      "left" : "JavaType valueType",
      "right" : "JavaType valueType",
      "info" : "SingleVariableDeclaration[21906-21924]:SingleVariableDeclaration[23026-23044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21926-22001]:Block[23046-23121]"
    }, {
      "left" : "return MapLikeType.construct(mapClass, keyType, valueType);",
      "right" : "return MapLikeType.construct(mapClass, keyType, valueType);",
      "info" : "ReturnStatement[21936-21995]:ReturnStatement[23056-23115]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22213-22219]:Modifier[23333-23339]"
    }, {
      "left" : "MapLikeType",
      "right" : "MapLikeType",
      "info" : "SimpleType[22220-22231]:SimpleType[23340-23351]"
    }, {
      "left" : "constructMapLikeType",
      "right" : "constructMapLikeType",
      "info" : "SimpleName[22232-22252]:SimpleName[23352-23372]"
    }, {
      "left" : "Class<?> mapClass",
      "right" : "Class<?> mapClass",
      "info" : "SingleVariableDeclaration[22253-22270]:SingleVariableDeclaration[23373-23390]"
    }, {
      "left" : "Class<?> keyClass",
      "right" : "Class<?> keyClass",
      "info" : "SingleVariableDeclaration[22272-22289]:SingleVariableDeclaration[23392-23409]"
    }, {
      "left" : "Class<?> valueClass",
      "right" : "Class<?> valueClass",
      "info" : "SingleVariableDeclaration[22291-22310]:SingleVariableDeclaration[23411-23430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22312-22415]:Block[23432-23535]"
    }, {
      "left" : "return MapType.construct(mapClass, constructType(keyClass), constructType(valueClass));",
      "right" : "return MapType.construct(mapClass, constructType(keyClass), constructType(valueClass));",
      "info" : "ReturnStatement[22322-22409]:ReturnStatement[23442-23529]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[22600-22611]:MarkerAnnotation[23720-23731]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22616-22622]:Modifier[23736-23742]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[22623-22631]:SimpleType[23743-23751]"
    }, {
      "left" : "constructSimpleType",
      "right" : "constructSimpleType",
      "info" : "SimpleName[22632-22651]:SimpleName[23752-23771]"
    }, {
      "left" : "Class<?> rawType",
      "right" : "Class<?> rawType",
      "info" : "SingleVariableDeclaration[22652-22668]:SingleVariableDeclaration[23772-23788]"
    }, {
      "left" : "JavaType[] parameterTypes",
      "right" : "JavaType[] parameterTypes",
      "info" : "SingleVariableDeclaration[22670-22695]:SingleVariableDeclaration[23790-23815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22697-22774]:Block[23817-23894]"
    }, {
      "left" : "return constructSimpleType(rawType, rawType, parameterTypes);",
      "right" : "return constructSimpleType(rawType, rawType, parameterTypes);",
      "info" : "ReturnStatement[22707-22768]:ReturnStatement[23827-23888]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22876-22882]:Modifier[23996-24002]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[22883-22891]:SimpleType[24003-24011]"
    }, {
      "left" : "constructSimpleType",
      "right" : "constructSimpleType",
      "info" : "SimpleName[22892-22911]:SimpleName[24012-24031]"
    }, {
      "left" : "Class<?> rawType",
      "right" : "Class<?> rawType",
      "info" : "SingleVariableDeclaration[22912-22928]:SingleVariableDeclaration[24032-24048]"
    }, {
      "left" : "Class<?> parameterTarget",
      "right" : "Class<?> parameterTarget",
      "info" : "SingleVariableDeclaration[22930-22954]:SingleVariableDeclaration[24050-24074]"
    }, {
      "left" : "JavaType[] parameterTypes",
      "right" : "JavaType[] parameterTypes",
      "info" : "SingleVariableDeclaration[22968-22993]:SingleVariableDeclaration[24088-24113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22999-23755]:Block[24119-24875]"
    }, {
      "left" : "TypeVariable<?>[] typeVars = parameterTarget.getTypeParameters();",
      "right" : "TypeVariable<?>[] typeVars = parameterTarget.getTypeParameters();",
      "info" : "VariableDeclarationStatement[23085-23150]:VariableDeclarationStatement[24205-24270]"
    }, {
      "left" : "if (typeVars.length != parameterTypes.length)",
      "right" : "if (typeVars.length != parameterTypes.length)",
      "info" : "IfStatement[23159-23477]:IfStatement[24279-24597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23205-23477]:Block[24325-24597]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Parameter type mismatch for \"+rawType.getName()\n                    +\" (and target \"+parameterTarget.getName()+\"): expected \"+typeVars.length\n                    +\" parameters, was given \"+parameterTypes.length);",
      "right" : "throw new IllegalArgumentException(\"Parameter type mismatch for \"+rawType.getName()\n                    +\" (and target \"+parameterTarget.getName()+\"): expected \"+typeVars.length\n                    +\" parameters, was given \"+parameterTypes.length);",
      "info" : "ThrowStatement[23219-23467]:ThrowStatement[24339-24587]"
    }, {
      "left" : "String[] names = new String[typeVars.length];",
      "right" : "String[] names = new String[typeVars.length];",
      "info" : "VariableDeclarationStatement[23486-23531]:VariableDeclarationStatement[24606-24651]"
    }, {
      "left" : "for (int i = 0, len = typeVars.length; i < len; ++i)",
      "right" : "for (int i = 0, len = typeVars.length; i < len; ++i)",
      "info" : "ForStatement[23540-23650]:ForStatement[24660-24770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23593-23650]:Block[24713-24770]"
    }, {
      "left" : "names[i] = typeVars[i].getName();",
      "right" : "names[i] = typeVars[i].getName();",
      "info" : "ExpressionStatement[23607-23640]:ExpressionStatement[24727-24760]"
    }, {
      "left" : "return new SimpleType(rawType, names, parameterTypes, null, null, false, parameterTarget);",
      "right" : "return new SimpleType(rawType, names, parameterTypes, null, null, false, parameterTarget);",
      "info" : "ReturnStatement[23659-23749]:ReturnStatement[24779-24869]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23796-23802]:Modifier[24916-24922]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[23803-23811]:SimpleType[24923-24931]"
    }, {
      "left" : "constructReferenceType",
      "right" : "constructReferenceType",
      "info" : "SimpleName[23812-23834]:SimpleName[24932-24954]"
    }, {
      "left" : "Class<?> rawType",
      "right" : "Class<?> rawType",
      "info" : "SingleVariableDeclaration[23835-23851]:SingleVariableDeclaration[24955-24971]"
    }, {
      "left" : "JavaType refType",
      "right" : "JavaType refType",
      "info" : "SingleVariableDeclaration[23853-23869]:SingleVariableDeclaration[24973-24989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23875-23953]:Block[24995-25073]"
    }, {
      "left" : "return new ReferenceType(rawType, refType, null, null, false);",
      "right" : "return new ReferenceType(rawType, refType, null, null, false);",
      "info" : "ReturnStatement[23885-23947]:ReturnStatement[25005-25067]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24256-24262]:Modifier[25376-25382]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[24263-24271]:SimpleType[25383-25391]"
    }, {
      "left" : "uncheckedSimpleType",
      "right" : "uncheckedSimpleType",
      "info" : "SimpleName[24272-24291]:SimpleName[25392-25411]"
    }, {
      "left" : "Class<?> cls",
      "right" : "Class<?> cls",
      "info" : "SingleVariableDeclaration[24292-24304]:SingleVariableDeclaration[25412-25424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24306-24349]:Block[25426-25469]"
    }, {
      "left" : "return new SimpleType(cls);",
      "right" : "return new SimpleType(cls);",
      "info" : "ReturnStatement[24316-24343]:ReturnStatement[25436-25463]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25787-25793]:Modifier[26907-26913]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[25794-25802]:SimpleType[26914-26922]"
    }, {
      "left" : "constructParametrizedType",
      "right" : "constructParametrizedType",
      "info" : "SimpleName[25803-25828]:SimpleName[26923-26948]"
    }, {
      "left" : "Class<?> parametrized",
      "right" : "Class<?> parametrized",
      "info" : "SingleVariableDeclaration[25829-25850]:SingleVariableDeclaration[26949-26970]"
    }, {
      "left" : "Class<?> parametersFor",
      "right" : "Class<?> parametersFor",
      "info" : "SingleVariableDeclaration[25852-25874]:SingleVariableDeclaration[26972-26994]"
    }, {
      "left" : "Class<?>... parameterClasses",
      "right" : "Class<?>... parameterClasses",
      "info" : "SingleVariableDeclaration[25888-25916]:SingleVariableDeclaration[27008-27036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25922-26199]:Block[27042-27319]"
    }, {
      "left" : "int len = parameterClasses.length;",
      "right" : "int len = parameterClasses.length;",
      "info" : "VariableDeclarationStatement[25932-25966]:VariableDeclarationStatement[27052-27086]"
    }, {
      "left" : "JavaType[] pt = new JavaType[len];",
      "right" : "JavaType[] pt = new JavaType[len];",
      "info" : "VariableDeclarationStatement[25975-26009]:VariableDeclarationStatement[27095-27129]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[26018-26118]:ForStatement[27138-27238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26048-26118]:Block[27168-27238]"
    }, {
      "left" : "pt[i] = _fromClass(parameterClasses[i], null);",
      "right" : "pt[i] = _fromClass(parameterClasses[i], null);",
      "info" : "ExpressionStatement[26062-26108]:ExpressionStatement[27182-27228]"
    }, {
      "left" : "return constructParametrizedType(parametrized, parametersFor, pt);",
      "right" : "return constructParametrizedType(parametrized, parametersFor, pt);",
      "info" : "ReturnStatement[26127-26193]:ReturnStatement[27247-27313]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[26299-26310]:MarkerAnnotation[27419-27430]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26315-26321]:Modifier[27435-27441]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[26322-26330]:SimpleType[27442-27450]"
    }, {
      "left" : "constructParametricType",
      "right" : "constructParametricType",
      "info" : "SimpleName[26331-26354]:SimpleName[27451-27474]"
    }, {
      "left" : "Class<?> parametrized",
      "right" : "Class<?> parametrized",
      "info" : "SingleVariableDeclaration[26355-26376]:SingleVariableDeclaration[27475-27496]"
    }, {
      "left" : "Class<?>... parameterClasses",
      "right" : "Class<?>... parameterClasses",
      "info" : "SingleVariableDeclaration[26378-26406]:SingleVariableDeclaration[27498-27526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26408-26503]:Block[27528-27623]"
    }, {
      "left" : "return constructParametrizedType(parametrized, parametrized, parameterClasses);",
      "right" : "return constructParametrizedType(parametrized, parametrized, parameterClasses);",
      "info" : "ReturnStatement[26418-26497]:ReturnStatement[27538-27617]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27922-27928]:Modifier[29042-29048]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[27929-27937]:SimpleType[29049-29057]"
    }, {
      "left" : "constructParametrizedType",
      "right" : "constructParametrizedType",
      "info" : "SimpleName[27938-27963]:SimpleName[29058-29083]"
    }, {
      "left" : "Class<?> parametrized",
      "right" : "Class<?> parametrized",
      "info" : "SingleVariableDeclaration[27964-27985]:SingleVariableDeclaration[29084-29105]"
    }, {
      "left" : "Class<?> parametersFor",
      "right" : "Class<?> parametersFor",
      "info" : "SingleVariableDeclaration[27987-28009]:SingleVariableDeclaration[29107-29129]"
    }, {
      "left" : "JavaType... parameterTypes",
      "right" : "JavaType... parameterTypes",
      "info" : "SingleVariableDeclaration[28023-28049]:SingleVariableDeclaration[29143-29169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28055-29432]:Block[29175-30552]"
    }, {
      "left" : "JavaType resultType;",
      "right" : "JavaType resultType;",
      "info" : "VariableDeclarationStatement[28065-28085]:VariableDeclarationStatement[29185-29205]"
    }, {
      "left" : "if (parametrized.isArray())",
      "right" : "if (parametrized.isArray())",
      "info" : "IfStatement[28165-29399]:IfStatement[29285-30519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28193-28541]:Block[29313-29661]"
    }, {
      "left" : "if (parameterTypes.length != 1)",
      "right" : "if (parameterTypes.length != 1)",
      "info" : "IfStatement[28295-28467]:IfStatement[29415-29587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28327-28467]:Block[29447-29587]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Need exactly 1 parameter type for arrays (\"+parametrized.getName()+\")\");",
      "right" : "throw new IllegalArgumentException(\"Need exactly 1 parameter type for arrays (\"+parametrized.getName()+\")\");",
      "info" : "ThrowStatement[28345-28453]:ThrowStatement[29465-29573]"
    }, {
      "left" : "resultType = constructArrayType(parameterTypes[0]);",
      "right" : "resultType = constructArrayType(parameterTypes[0]);",
      "info" : "ExpressionStatement[28480-28531]:ExpressionStatement[29600-29651]"
    }, {
      "left" : "if (Map.class.isAssignableFrom(parametrized))",
      "right" : "if (Map.class.isAssignableFrom(parametrized))",
      "info" : "IfStatement[28555-29399]:IfStatement[29675-30519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28601-28913]:Block[29721-30033]"
    }, {
      "left" : "if (parameterTypes.length != 2)",
      "right" : "if (parameterTypes.length != 2)",
      "info" : "IfStatement[28615-28791]:IfStatement[29735-29911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28647-28791]:Block[29767-29911]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Need exactly 2 parameter types for Map types (\"+parametrized.getName()+\")\");",
      "right" : "throw new IllegalArgumentException(\"Need exactly 2 parameter types for Map types (\"+parametrized.getName()+\")\");",
      "info" : "ThrowStatement[28665-28777]:ThrowStatement[29785-29897]"
    }, {
      "left" : "resultType = constructMapType((Class<Map<?,?>>)parametrized, parameterTypes[0], parameterTypes[1]);",
      "right" : "resultType = constructMapType((Class<Map<?,?>>)parametrized, parameterTypes[0], parameterTypes[1]);",
      "info" : "ExpressionStatement[28804-28903]:ExpressionStatement[29924-30023]"
    }, {
      "left" : "if (Collection.class.isAssignableFrom(parametrized))",
      "right" : "if (Collection.class.isAssignableFrom(parametrized))",
      "info" : "IfStatement[28927-29399]:IfStatement[30047-30519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28980-29291]:Block[30100-30411]"
    }, {
      "left" : "if (parameterTypes.length != 1)",
      "right" : "if (parameterTypes.length != 1)",
      "info" : "IfStatement[28994-29176]:IfStatement[30114-30296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29026-29176]:Block[30146-30296]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Need exactly 1 parameter type for Collection types (\"+parametrized.getName()+\")\");",
      "right" : "throw new IllegalArgumentException(\"Need exactly 1 parameter type for Collection types (\"+parametrized.getName()+\")\");",
      "info" : "ThrowStatement[29044-29162]:ThrowStatement[30164-30282]"
    }, {
      "left" : "resultType = constructCollectionType((Class<Collection<?>>)parametrized, parameterTypes[0]);",
      "right" : "resultType = constructCollectionType((Class<Collection<?>>)parametrized, parameterTypes[0]);",
      "info" : "ExpressionStatement[29189-29281]:ExpressionStatement[30309-30401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29297-29399]:Block[30417-30519]"
    }, {
      "left" : "resultType = constructSimpleType(parametrized, parametersFor, parameterTypes);",
      "right" : "resultType = constructSimpleType(parametrized, parametersFor, parameterTypes);",
      "info" : "ExpressionStatement[29311-29389]:ExpressionStatement[30431-30509]"
    }, {
      "left" : "return resultType;",
      "right" : "return resultType;",
      "info" : "ReturnStatement[29408-29426]:ReturnStatement[30528-30546]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[29532-29543]:MarkerAnnotation[30652-30663]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29548-29554]:Modifier[30668-30674]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[29555-29563]:SimpleType[30675-30683]"
    }, {
      "left" : "constructParametricType",
      "right" : "constructParametricType",
      "info" : "SimpleName[29564-29587]:SimpleName[30684-30707]"
    }, {
      "left" : "Class<?> parametrized",
      "right" : "Class<?> parametrized",
      "info" : "SingleVariableDeclaration[29588-29609]:SingleVariableDeclaration[30708-30729]"
    }, {
      "left" : "JavaType... parameterTypes",
      "right" : "JavaType... parameterTypes",
      "info" : "SingleVariableDeclaration[29611-29637]:SingleVariableDeclaration[30731-30757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29639-29732]:Block[30759-30852]"
    }, {
      "left" : "return constructParametrizedType(parametrized, parametrized, parameterTypes);",
      "right" : "return constructParametrizedType(parametrized, parametrized, parameterTypes);",
      "info" : "ReturnStatement[29649-29726]:ReturnStatement[30769-30846]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30440-30446]:Modifier[31560-31566]"
    }, {
      "left" : "CollectionType",
      "right" : "CollectionType",
      "info" : "SimpleType[30447-30461]:SimpleType[31567-31581]"
    }, {
      "left" : "constructRawCollectionType",
      "right" : "constructRawCollectionType",
      "info" : "SimpleName[30462-30488]:SimpleName[31582-31608]"
    }, {
      "left" : "Class<? extends Collection> collectionClass",
      "right" : "Class<? extends Collection> collectionClass",
      "info" : "SingleVariableDeclaration[30489-30532]:SingleVariableDeclaration[31609-31652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30534-30614]:Block[31654-31734]"
    }, {
      "left" : "return CollectionType.construct(collectionClass, unknownType());",
      "right" : "return CollectionType.construct(collectionClass, unknownType());",
      "info" : "ReturnStatement[30544-30608]:ReturnStatement[31664-31728]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31088-31094]:Modifier[32208-32214]"
    }, {
      "left" : "CollectionLikeType",
      "right" : "CollectionLikeType",
      "info" : "SimpleType[31095-31113]:SimpleType[32215-32233]"
    }, {
      "left" : "constructRawCollectionLikeType",
      "right" : "constructRawCollectionLikeType",
      "info" : "SimpleName[31114-31144]:SimpleName[32234-32264]"
    }, {
      "left" : "Class<?> collectionClass",
      "right" : "Class<?> collectionClass",
      "info" : "SingleVariableDeclaration[31145-31169]:SingleVariableDeclaration[32265-32289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31171-31255]:Block[32291-32375]"
    }, {
      "left" : "return CollectionLikeType.construct(collectionClass, unknownType());",
      "right" : "return CollectionLikeType.construct(collectionClass, unknownType());",
      "info" : "ReturnStatement[31181-31249]:ReturnStatement[32301-32369]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31733-31739]:Modifier[32853-32859]"
    }, {
      "left" : "MapType",
      "right" : "MapType",
      "info" : "SimpleType[31740-31747]:SimpleType[32860-32867]"
    }, {
      "left" : "constructRawMapType",
      "right" : "constructRawMapType",
      "info" : "SimpleName[31748-31767]:SimpleName[32868-32887]"
    }, {
      "left" : "Class<? extends Map> mapClass",
      "right" : "Class<? extends Map> mapClass",
      "info" : "SingleVariableDeclaration[31768-31797]:SingleVariableDeclaration[32888-32917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31799-31880]:Block[32919-33000]"
    }, {
      "left" : "return MapType.construct(mapClass, unknownType(), unknownType());",
      "right" : "return MapType.construct(mapClass, unknownType(), unknownType());",
      "info" : "ReturnStatement[31809-31874]:ReturnStatement[32929-32994]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32367-32373]:Modifier[33487-33493]"
    }, {
      "left" : "MapLikeType",
      "right" : "MapLikeType",
      "info" : "SimpleType[32374-32385]:SimpleType[33494-33505]"
    }, {
      "left" : "constructRawMapLikeType",
      "right" : "constructRawMapLikeType",
      "info" : "SimpleName[32386-32409]:SimpleName[33506-33529]"
    }, {
      "left" : "Class<?> mapClass",
      "right" : "Class<?> mapClass",
      "info" : "SingleVariableDeclaration[32410-32427]:SingleVariableDeclaration[33530-33547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32429-32514]:Block[33549-33634]"
    }, {
      "left" : "return MapLikeType.construct(mapClass, unknownType(), unknownType());",
      "right" : "return MapLikeType.construct(mapClass, unknownType(), unknownType());",
      "info" : "ReturnStatement[32439-32508]:ReturnStatement[33559-33628]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[32820-32829]:Modifier[33940-33949]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[32830-32838]:SimpleType[33950-33958]"
    }, {
      "left" : "_fromClass",
      "right" : "_fromClass",
      "info" : "SimpleName[32839-32849]:SimpleName[33959-33969]"
    }, {
      "left" : "Class<?> clz",
      "right" : "Class<?> clz",
      "info" : "SingleVariableDeclaration[32850-32862]:SingleVariableDeclaration[33970-33982]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[32864-32884]:SingleVariableDeclaration[33984-34004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32890-35533]:Block[34010-36653]"
    }, {
      "left" : "if (clz == String.class)",
      "right" : "if (clz == String.class)",
      "info" : "IfStatement[32967-33016]:IfStatement[34087-34136]"
    }, {
      "left" : "return CORE_TYPE_STRING;",
      "right" : "return CORE_TYPE_STRING;",
      "info" : "ReturnStatement[32992-33016]:ReturnStatement[34112-34136]"
    }, {
      "left" : "if (clz == Boolean.TYPE)",
      "right" : "if (clz == Boolean.TYPE)",
      "info" : "IfStatement[33025-33072]:IfStatement[34145-34192]"
    }, {
      "left" : "return CORE_TYPE_BOOL;",
      "right" : "return CORE_TYPE_BOOL;",
      "info" : "ReturnStatement[33050-33072]:ReturnStatement[34170-34192]"
    }, {
      "left" : "if (clz == Integer.TYPE)",
      "right" : "if (clz == Integer.TYPE)",
      "info" : "IfStatement[33081-33127]:IfStatement[34201-34247]"
    }, {
      "left" : "return CORE_TYPE_INT;",
      "right" : "return CORE_TYPE_INT;",
      "info" : "ReturnStatement[33106-33127]:ReturnStatement[34226-34247]"
    }, {
      "left" : "if (clz == Long.TYPE)",
      "right" : "if (clz == Long.TYPE)",
      "info" : "IfStatement[33136-33180]:IfStatement[34256-34300]"
    }, {
      "left" : "return CORE_TYPE_LONG;",
      "right" : "return CORE_TYPE_LONG;",
      "info" : "ReturnStatement[33158-33180]:ReturnStatement[34278-34300]"
    }, {
      "left" : "ClassKey key = new ClassKey(clz);",
      "right" : "ClassKey key = new ClassKey(clz);",
      "info" : "VariableDeclarationStatement[33269-33302]:VariableDeclarationStatement[34389-34422]"
    }, {
      "left" : "JavaType result = _typeCache.get(key);",
      "right" : "JavaType result = _typeCache.get(key);",
      "info" : "VariableDeclarationStatement[33311-33349]:VariableDeclarationStatement[34431-34469]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[33388-33446]:IfStatement[34508-34566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33408-33446]:Block[34528-34566]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[33422-33436]:ReturnStatement[34542-34556]"
    }, {
      "left" : "if (clz.isArray())",
      "right" : "if (clz.isArray())",
      "info" : "IfStatement[33658-35445]:IfStatement[34778-36565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33677-33941]:Block[34797-35061]"
    }, {
      "left" : "result = ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);",
      "right" : "result = ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);",
      "info" : "ExpressionStatement[33691-33778]:ExpressionStatement[34811-34898]"
    }, {
      "left" : "if (clz.isEnum())",
      "right" : "if (clz.isEnum())",
      "info" : "IfStatement[33947-35445]:IfStatement[35067-36565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33965-34214]:Block[35085-35334]"
    }, {
      "left" : "result = new SimpleType(clz);",
      "right" : "result = new SimpleType(clz);",
      "info" : "ExpressionStatement[33979-34008]:ExpressionStatement[35099-35128]"
    }, {
      "left" : "if (Map.class.isAssignableFrom(clz))",
      "right" : "if (Map.class.isAssignableFrom(clz))",
      "info" : "IfStatement[34220-35445]:IfStatement[35340-36565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34257-34304]:Block[35377-35424]"
    }, {
      "left" : "result = _mapType(clz);",
      "right" : "result = _mapType(clz);",
      "info" : "ExpressionStatement[34271-34294]:ExpressionStatement[35391-35414]"
    }, {
      "left" : "if (Collection.class.isAssignableFrom(clz))",
      "right" : "if (Collection.class.isAssignableFrom(clz))",
      "info" : "IfStatement[34310-35445]:IfStatement[35430-36565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34354-34409]:Block[35474-35529]"
    }, {
      "left" : "result =  _collectionType(clz);",
      "right" : "result =  _collectionType(clz);",
      "info" : "ExpressionStatement[34368-34399]:ExpressionStatement[35488-35519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34415-35445]:Block[35535-36565]"
    }, {
      "left" : "if (AtomicReference.class.isAssignableFrom(clz))",
      "right" : "if (AtomicReference.class.isAssignableFrom(clz))",
      "info" : "IfStatement[34498-35435]:IfStatement[35618-36555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34547-34893]:Block[35667-36013]"
    }, {
      "left" : "JavaType[] pts = findTypeParameters(clz, AtomicReference.class);",
      "right" : "JavaType[] pts = findTypeParameters(clz, AtomicReference.class);",
      "info" : "VariableDeclarationStatement[34582-34646]:VariableDeclarationStatement[35702-35766]"
    }, {
      "left" : "JavaType rt = (pts == null || pts.length != 1) ? unknownType() : pts[0];",
      "right" : "JavaType rt = (pts == null || pts.length != 1) ? unknownType() : pts[0];",
      "info" : "VariableDeclarationStatement[34663-34735]:VariableDeclarationStatement[35783-35855]"
    }, {
      "left" : "result = constructReferenceType(clz, rt);",
      "right" : "result = constructReferenceType(clz, rt);",
      "info" : "ExpressionStatement[34752-34793]:ExpressionStatement[35872-35913]"
    }, {
      "left" : "if (Map.Entry.class.isAssignableFrom(clz))",
      "right" : "if (Map.Entry.class.isAssignableFrom(clz))",
      "info" : "IfStatement[34899-35435]:IfStatement[36019-36555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34942-35368]:Block[36062-36488]"
    }, {
      "left" : "JavaType[] pts = findTypeParameters(clz, Map.Entry.class);",
      "right" : "JavaType[] pts = findTypeParameters(clz, Map.Entry.class);",
      "info" : "VariableDeclarationStatement[34960-35018]:VariableDeclarationStatement[36080-36138]"
    }, {
      "left" : "JavaType kt, vt;",
      "right" : "JavaType kt, vt;",
      "info" : "VariableDeclarationStatement[35035-35051]:VariableDeclarationStatement[36155-36171]"
    }, {
      "left" : "if (pts == null || pts.length != 2)",
      "right" : "if (pts == null || pts.length != 2)",
      "info" : "IfStatement[35068-35259]:IfStatement[36188-36379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35104-35168]:Block[36224-36288]"
    }, {
      "left" : "kt = vt = unknownType();",
      "right" : "kt = vt = unknownType();",
      "info" : "ExpressionStatement[35126-35150]:ExpressionStatement[36246-36270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35174-35259]:Block[36294-36379]"
    }, {
      "left" : "kt = pts[0];",
      "right" : "kt = pts[0];",
      "info" : "ExpressionStatement[35196-35208]:ExpressionStatement[36316-36328]"
    }, {
      "left" : "vt = pts[1];",
      "right" : "vt = pts[1];",
      "info" : "ExpressionStatement[35229-35241]:ExpressionStatement[36349-36361]"
    }, {
      "left" : "result = constructSimpleType(clz, Map.Entry.class, new JavaType[] { kt, vt });",
      "right" : "result = constructSimpleType(clz, Map.Entry.class, new JavaType[] { kt, vt });",
      "info" : "ExpressionStatement[35276-35354]:ExpressionStatement[36396-36474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35374-35435]:Block[36494-36555]"
    }, {
      "left" : "result = new SimpleType(clz);",
      "right" : "result = new SimpleType(clz);",
      "info" : "ExpressionStatement[35392-35421]:ExpressionStatement[36512-36541]"
    }, {
      "left" : "_typeCache.put(key, result);",
      "right" : "_typeCache.put(key, result);",
      "info" : "ExpressionStatement[35454-35482]:ExpressionStatement[36574-36602]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[35513-35527]:ReturnStatement[36633-36647]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[35651-35660]:Modifier[36771-36780]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[35661-35669]:SimpleType[36781-36789]"
    }, {
      "left" : "_fromParameterizedClass",
      "right" : "_fromParameterizedClass",
      "info" : "SimpleName[35670-35693]:SimpleName[36790-36813]"
    }, {
      "left" : "Class<?> clz",
      "right" : "Class<?> clz",
      "info" : "SingleVariableDeclaration[35694-35706]:SingleVariableDeclaration[36814-36826]"
    }, {
      "left" : "List<JavaType> paramTypes",
      "right" : "List<JavaType> paramTypes",
      "info" : "SingleVariableDeclaration[35708-35733]:SingleVariableDeclaration[36828-36853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35739-36993]:Block[36859-38113]"
    }, {
      "left" : "if (clz.isArray())",
      "right" : "if (clz.isArray())",
      "info" : "IfStatement[35749-35920]:IfStatement[36869-37040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35768-35920]:Block[36888-37040]"
    }, {
      "left" : "return ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);",
      "right" : "return ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);",
      "info" : "ReturnStatement[35825-35910]:ReturnStatement[36945-37030]"
    }, {
      "left" : "if (clz.isEnum())",
      "right" : "if (clz.isEnum())",
      "info" : "IfStatement[35929-36017]:IfStatement[37049-37137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35947-36017]:Block[37067-37137]"
    }, {
      "left" : "return new SimpleType(clz);",
      "right" : "return new SimpleType(clz);",
      "info" : "ReturnStatement[35980-36007]:ReturnStatement[37100-37127]"
    }, {
      "left" : "if (Map.class.isAssignableFrom(clz))",
      "right" : "if (Map.class.isAssignableFrom(clz))",
      "info" : "IfStatement[36026-36495]:IfStatement[37146-37615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36063-36495]:Block[37183-37615]"
    }, {
      "left" : "JavaType keyType, contentType;",
      "right" : "JavaType keyType, contentType;",
      "info" : "VariableDeclarationStatement[36135-36165]:VariableDeclarationStatement[37255-37285]"
    }, {
      "left" : "if (paramTypes.size() > 0)",
      "right" : "if (paramTypes.size() > 0)",
      "info" : "IfStatement[36178-36451]:IfStatement[37298-37571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36205-36451]:Block[37325-37571]"
    }, {
      "left" : "keyType = paramTypes.get(0);",
      "right" : "keyType = paramTypes.get(0);",
      "info" : "ExpressionStatement[36223-36251]:ExpressionStatement[37343-37371]"
    }, {
      "left" : "contentType = (paramTypes.size() >= 2) ?\n                        paramTypes.get(1) : _unknownType();",
      "right" : "contentType = (paramTypes.size() >= 2) ?\n                        paramTypes.get(1) : _unknownType();",
      "info" : "ExpressionStatement[36268-36368]:ExpressionStatement[37388-37488]"
    }, {
      "left" : "return MapType.construct(clz, keyType, contentType);",
      "right" : "return MapType.construct(clz, keyType, contentType);",
      "info" : "ReturnStatement[36385-36437]:ReturnStatement[37505-37557]"
    }, {
      "left" : "return _mapType(clz);",
      "right" : "return _mapType(clz);",
      "info" : "ReturnStatement[36464-36485]:ReturnStatement[37584-37605]"
    }, {
      "left" : "if (Collection.class.isAssignableFrom(clz))",
      "right" : "if (Collection.class.isAssignableFrom(clz))",
      "info" : "IfStatement[36504-36729]:IfStatement[37624-37849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36548-36729]:Block[37668-37849]"
    }, {
      "left" : "if (paramTypes.size() >= 1)",
      "right" : "if (paramTypes.size() >= 1)",
      "info" : "IfStatement[36562-36678]:IfStatement[37682-37798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36590-36678]:Block[37710-37798]"
    }, {
      "left" : "return CollectionType.construct(clz, paramTypes.get(0));",
      "right" : "return CollectionType.construct(clz, paramTypes.get(0));",
      "info" : "ReturnStatement[36608-36664]:ReturnStatement[37728-37784]"
    }, {
      "left" : "return _collectionType(clz);",
      "right" : "return _collectionType(clz);",
      "info" : "ReturnStatement[36691-36719]:ReturnStatement[37811-37839]"
    }, {
      "left" : "if (paramTypes.size() == 0)",
      "right" : "if (paramTypes.size() == 0)",
      "info" : "IfStatement[36738-36817]:IfStatement[37858-37937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36766-36817]:Block[37886-37937]"
    }, {
      "left" : "return new SimpleType(clz);",
      "right" : "return new SimpleType(clz);",
      "info" : "ReturnStatement[36780-36807]:ReturnStatement[37900-37927]"
    }, {
      "left" : "JavaType[] pt = paramTypes.toArray(new JavaType[paramTypes.size()]);",
      "right" : "JavaType[] pt = paramTypes.toArray(new JavaType[paramTypes.size()]);",
      "info" : "VariableDeclarationStatement[36869-36937]:VariableDeclarationStatement[37989-38057]"
    }, {
      "left" : "return constructSimpleType(clz, clz, pt);",
      "right" : "return constructSimpleType(clz, clz, pt);",
      "info" : "ReturnStatement[36946-36987]:ReturnStatement[38066-38107]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[37115-37124]:Modifier[38235-38244]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[37125-37133]:SimpleType[38245-38253]"
    }, {
      "left" : "_fromParamType",
      "right" : "_fromParamType",
      "info" : "SimpleName[37134-37148]:SimpleName[38254-38268]"
    }, {
      "left" : "ParameterizedType type",
      "right" : "ParameterizedType type",
      "info" : "SingleVariableDeclaration[37149-37171]:SingleVariableDeclaration[38269-38291]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[37173-37193]:SingleVariableDeclaration[38293-38313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37199-40709]:Block[38319-41829]"
    }, {
      "left" : "Class<?> rawType = (Class<?>) type.getRawType();",
      "right" : "Class<?> rawType = (Class<?>) type.getRawType();",
      "info" : "VariableDeclarationStatement[37495-37543]:VariableDeclarationStatement[38615-38663]"
    }, {
      "left" : "Type[] args = type.getActualTypeArguments();",
      "right" : "Type[] args = type.getActualTypeArguments();",
      "info" : "VariableDeclarationStatement[37552-37596]:VariableDeclarationStatement[38672-38716]"
    }, {
      "left" : "int paramCount = (args == null) ? 0 : args.length;",
      "right" : "int paramCount = (args == null) ? 0 : args.length;",
      "info" : "VariableDeclarationStatement[37605-37655]:VariableDeclarationStatement[38725-38775]"
    }, {
      "left" : "JavaType[] pt;",
      "right" : "JavaType[] pt;",
      "info" : "VariableDeclarationStatement[37665-37679]:VariableDeclarationStatement[38785-38799]"
    }, {
      "left" : "if (paramCount == 0)",
      "right" : "if (paramCount == 0)",
      "info" : "IfStatement[37697-37939]:IfStatement[38817-39059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37718-37756]:Block[38838-38876]"
    }, {
      "left" : "pt = NO_TYPES;",
      "right" : "pt = NO_TYPES;",
      "info" : "ExpressionStatement[37732-37746]:ExpressionStatement[38852-38866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37762-37939]:Block[38882-39059]"
    }, {
      "left" : "pt = new JavaType[paramCount];",
      "right" : "pt = new JavaType[paramCount];",
      "info" : "ExpressionStatement[37776-37806]:ExpressionStatement[38896-38926]"
    }, {
      "left" : "for (int i = 0; i < paramCount; ++i)",
      "right" : "for (int i = 0; i < paramCount; ++i)",
      "info" : "ForStatement[37819-37929]:ForStatement[38939-39049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37856-37929]:Block[38976-39049]"
    }, {
      "left" : "pt[i] = _constructType(args[i], context);",
      "right" : "pt[i] = _constructType(args[i], context);",
      "info" : "ExpressionStatement[37874-37915]:ExpressionStatement[38994-39035]"
    }, {
      "left" : "if (Map.class.isAssignableFrom(rawType))",
      "right" : "if (Map.class.isAssignableFrom(rawType))",
      "info" : "IfStatement[37983-38565]:IfStatement[39103-39685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38024-38565]:Block[39144-39685]"
    }, {
      "left" : "JavaType subtype = constructSimpleType(rawType, rawType, pt);",
      "right" : "JavaType subtype = constructSimpleType(rawType, rawType, pt);",
      "info" : "VariableDeclarationStatement[38136-38197]:VariableDeclarationStatement[39256-39317]"
    }, {
      "left" : "JavaType[] mapParams = findTypeParameters(subtype, Map.class);",
      "right" : "JavaType[] mapParams = findTypeParameters(subtype, Map.class);",
      "info" : "VariableDeclarationStatement[38210-38272]:VariableDeclarationStatement[39330-39392]"
    }, {
      "left" : "if (mapParams.length != 2)",
      "right" : "if (mapParams.length != 2)",
      "info" : "IfStatement[38285-38480]:IfStatement[39405-39600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38312-38480]:Block[39432-39600]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Could not find 2 type parameters for Map class \"+rawType.getName()+\" (found \"+mapParams.length+\")\");",
      "right" : "throw new IllegalArgumentException(\"Could not find 2 type parameters for Map class \"+rawType.getName()+\" (found \"+mapParams.length+\")\");",
      "info" : "ThrowStatement[38330-38466]:ThrowStatement[39450-39586]"
    }, {
      "left" : "return MapType.construct(rawType, mapParams[0], mapParams[1]);",
      "right" : "return MapType.construct(rawType, mapParams[0], mapParams[1]);",
      "info" : "ReturnStatement[38493-38555]:ReturnStatement[39613-39675]"
    }, {
      "left" : "if (Collection.class.isAssignableFrom(rawType))",
      "right" : "if (Collection.class.isAssignableFrom(rawType))",
      "info" : "IfStatement[38574-39204]:IfStatement[39694-40324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38622-39204]:Block[39742-40324]"
    }, {
      "left" : "JavaType subtype = constructSimpleType(rawType, rawType, pt);",
      "right" : "JavaType subtype = constructSimpleType(rawType, rawType, pt);",
      "info" : "VariableDeclarationStatement[38741-38802]:VariableDeclarationStatement[39861-39922]"
    }, {
      "left" : "JavaType[] collectionParams = findTypeParameters(subtype, Collection.class);",
      "right" : "JavaType[] collectionParams = findTypeParameters(subtype, Collection.class);",
      "info" : "VariableDeclarationStatement[38815-38891]:VariableDeclarationStatement[39935-40011]"
    }, {
      "left" : "if (collectionParams.length != 1)",
      "right" : "if (collectionParams.length != 1)",
      "info" : "IfStatement[38904-39119]:IfStatement[40024-40239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38938-39119]:Block[40058-40239]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Could not find 1 type parameter for Collection class \"+rawType.getName()+\" (found \"+collectionParams.length+\")\");",
      "right" : "throw new IllegalArgumentException(\"Could not find 1 type parameter for Collection class \"+rawType.getName()+\" (found \"+collectionParams.length+\")\");",
      "info" : "ThrowStatement[38956-39105]:ThrowStatement[40076-40225]"
    }, {
      "left" : "return CollectionType.construct(rawType, collectionParams[0]);",
      "right" : "return CollectionType.construct(rawType, collectionParams[0]);",
      "info" : "ReturnStatement[39132-39194]:ReturnStatement[40252-40314]"
    }, {
      "left" : "if (AtomicReference.class.isAssignableFrom(rawType))",
      "right" : "if (AtomicReference.class.isAssignableFrom(rawType))",
      "info" : "IfStatement[39278-39828]:IfStatement[40398-40948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39331-39828]:Block[40451-40948]"
    }, {
      "left" : "JavaType rt = null;",
      "right" : "JavaType rt = null;",
      "info" : "VariableDeclarationStatement[39345-39364]:VariableDeclarationStatement[40465-40484]"
    }, {
      "left" : "if (rawType == AtomicReference.class)",
      "right" : "if (rawType == AtomicReference.class)",
      "info" : "IfStatement[39378-39731]:IfStatement[40498-40851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39416-39520]:Block[40536-40640]"
    }, {
      "left" : "if (paramCount == 1)",
      "right" : "if (paramCount == 1)",
      "info" : "IfStatement[39434-39506]:IfStatement[40554-40626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39455-39506]:Block[40575-40626]"
    }, {
      "left" : "rt = pt[0];",
      "right" : "rt = pt[0];",
      "info" : "ExpressionStatement[39477-39488]:ExpressionStatement[40597-40608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39526-39731]:Block[40646-40851]"
    }, {
      "left" : "JavaType[] pts = findTypeParameters(rawType, AtomicReference.class);",
      "right" : "JavaType[] pts = findTypeParameters(rawType, AtomicReference.class);",
      "info" : "VariableDeclarationStatement[39544-39612]:VariableDeclarationStatement[40664-40732]"
    }, {
      "left" : "if (pts != null && pts.length != 1)",
      "right" : "if (pts != null && pts.length != 1)",
      "info" : "IfStatement[39629-39717]:IfStatement[40749-40837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39665-39717]:Block[40785-40837]"
    }, {
      "left" : "rt = pts[0];",
      "right" : "rt = pts[0];",
      "info" : "ExpressionStatement[39687-39699]:ExpressionStatement[40807-40819]"
    }, {
      "left" : "return constructReferenceType(rawType, (rt == null) ? unknownType() : rt);",
      "right" : "return constructReferenceType(rawType, (rt == null) ? unknownType() : rt);",
      "info" : "ReturnStatement[39744-39818]:ReturnStatement[40864-40938]"
    }, {
      "left" : "if (Map.Entry.class.isAssignableFrom(rawType))",
      "right" : "if (Map.Entry.class.isAssignableFrom(rawType))",
      "info" : "IfStatement[39837-40545]:IfStatement[40957-41665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39884-40545]:Block[41004-41665]"
    }, {
      "left" : "JavaType kt = null, vt = null;",
      "right" : "JavaType kt = null, vt = null;",
      "info" : "VariableDeclarationStatement[39898-39928]:VariableDeclarationStatement[41018-41048]"
    }, {
      "left" : "if (rawType == Map.Entry.class)",
      "right" : "if (rawType == Map.Entry.class)",
      "info" : "IfStatement[39942-40348]:IfStatement[41062-41468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39974-40110]:Block[41094-41230]"
    }, {
      "left" : "if (paramCount == 2)",
      "right" : "if (paramCount == 2)",
      "info" : "IfStatement[39992-40096]:IfStatement[41112-41216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40013-40096]:Block[41133-41216]"
    }, {
      "left" : "kt = pt[0];",
      "right" : "kt = pt[0];",
      "info" : "ExpressionStatement[40035-40046]:ExpressionStatement[41155-41166]"
    }, {
      "left" : "vt = pt[1];",
      "right" : "vt = pt[1];",
      "info" : "ExpressionStatement[40067-40078]:ExpressionStatement[41187-41198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40116-40348]:Block[41236-41468]"
    }, {
      "left" : "JavaType[] pts = findTypeParameters(rawType, Map.Entry.class);",
      "right" : "JavaType[] pts = findTypeParameters(rawType, Map.Entry.class);",
      "info" : "VariableDeclarationStatement[40134-40196]:VariableDeclarationStatement[41254-41316]"
    }, {
      "left" : "if (pts != null && pts.length != 2)",
      "right" : "if (pts != null && pts.length != 2)",
      "info" : "IfStatement[40213-40334]:IfStatement[41333-41454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40249-40334]:Block[41369-41454]"
    }, {
      "left" : "kt = pts[0];",
      "right" : "kt = pts[0];",
      "info" : "ExpressionStatement[40271-40283]:ExpressionStatement[41391-41403]"
    }, {
      "left" : "vt = pts[1];",
      "right" : "vt = pts[1];",
      "info" : "ExpressionStatement[40304-40316]:ExpressionStatement[41424-41436]"
    }, {
      "left" : "return constructSimpleType(rawType, Map.Entry.class, new JavaType[] {\n                (kt == null) ? unknownType() : kt,\n                (vt == null) ? unknownType() : vt });",
      "right" : "return constructSimpleType(rawType, Map.Entry.class, new JavaType[] {\n                (kt == null) ? unknownType() : kt,\n                (vt == null) ? unknownType() : vt });",
      "info" : "ReturnStatement[40361-40535]:ReturnStatement[41481-41655]"
    }, {
      "left" : "if (paramCount == 0)",
      "right" : "if (paramCount == 0)",
      "info" : "IfStatement[40563-40654]:IfStatement[41683-41774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40584-40654]:Block[41704-41774]"
    }, {
      "left" : "return new SimpleType(rawType);",
      "right" : "return new SimpleType(rawType);",
      "info" : "ReturnStatement[40613-40644]:ReturnStatement[41733-41764]"
    }, {
      "left" : "return constructSimpleType(rawType, pt);",
      "right" : "return constructSimpleType(rawType, pt);",
      "info" : "ReturnStatement[40663-40703]:ReturnStatement[41783-41823]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[40715-40724]:Modifier[41835-41844]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[40725-40733]:SimpleType[41845-41853]"
    }, {
      "left" : "_fromArrayType",
      "right" : "_fromArrayType",
      "info" : "SimpleName[40734-40748]:SimpleName[41854-41868]"
    }, {
      "left" : "GenericArrayType type",
      "right" : "GenericArrayType type",
      "info" : "SingleVariableDeclaration[40749-40770]:SingleVariableDeclaration[41869-41890]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[40772-40792]:SingleVariableDeclaration[41892-41912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40798-40948]:Block[41918-42068]"
    }, {
      "left" : "JavaType compType = _constructType(type.getGenericComponentType(), context);",
      "right" : "JavaType compType = _constructType(type.getGenericComponentType(), context);",
      "info" : "VariableDeclarationStatement[40808-40884]:VariableDeclarationStatement[41928-42004]"
    }, {
      "left" : "return ArrayType.construct(compType, null, null);",
      "right" : "return ArrayType.construct(compType, null, null);",
      "info" : "ReturnStatement[40893-40942]:ReturnStatement[42013-42062]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[40954-40963]:Modifier[42074-42083]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[40964-40972]:SimpleType[42084-42092]"
    }, {
      "left" : "_fromVariable",
      "right" : "_fromVariable",
      "info" : "SimpleName[40973-40986]:SimpleName[42093-42106]"
    }, {
      "left" : "TypeVariable<?> type",
      "right" : "TypeVariable<?> type",
      "info" : "SingleVariableDeclaration[40987-41007]:SingleVariableDeclaration[42107-42127]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[41009-41029]:SingleVariableDeclaration[42129-42149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41035-42911]:Block[42155-44031]"
    }, {
      "left" : "final String name = type.getName();",
      "right" : "final String name = type.getName();",
      "info" : "VariableDeclarationStatement[41045-41080]:VariableDeclarationStatement[42165-42200]"
    }, {
      "left" : "if (context == null)",
      "right" : "if (context == null)",
      "info" : "IfStatement[41159-41787]:IfStatement[42279-42907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41180-41315]:Block[42300-42435]"
    }, {
      "left" : "context = new TypeBindings(this, (Class<?>) null);",
      "right" : "context = new TypeBindings(this, (Class<?>) null);",
      "info" : "ExpressionStatement[41255-41305]:ExpressionStatement[42375-42425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41321-41787]:Block[42441-42907]"
    }, {
      "left" : "JavaType actualType = context.findType(name, false);",
      "right" : "JavaType actualType = context.findType(name, false);",
      "info" : "VariableDeclarationStatement[41638-41690]:VariableDeclarationStatement[42758-42810]"
    }, {
      "left" : "if (actualType != null)",
      "right" : "if (actualType != null)",
      "info" : "IfStatement[41703-41777]:IfStatement[42823-42897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41727-41777]:Block[42847-42897]"
    }, {
      "left" : "return actualType;",
      "right" : "return actualType;",
      "info" : "ReturnStatement[41745-41763]:ReturnStatement[42865-42883]"
    }, {
      "left" : "Type[] bounds = type.getBounds();",
      "right" : "Type[] bounds = type.getBounds();",
      "info" : "VariableDeclarationStatement[42102-42135]:VariableDeclarationStatement[43222-43255]"
    }, {
      "left" : "context._addPlaceholder(name);",
      "right" : "context._addPlaceholder(name);",
      "info" : "ExpressionStatement[42824-42854]:ExpressionStatement[43944-43974]"
    }, {
      "left" : "return _constructType(bounds[0], context);",
      "right" : "return _constructType(bounds[0], context);",
      "info" : "ReturnStatement[42863-42905]:ReturnStatement[43983-44025]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[42917-42926]:Modifier[44037-44046]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[42927-42935]:SimpleType[44047-44055]"
    }, {
      "left" : "_fromWildcard",
      "right" : "_fromWildcard",
      "info" : "SimpleName[42936-42949]:SimpleName[44056-44069]"
    }, {
      "left" : "WildcardType type",
      "right" : "WildcardType type",
      "info" : "SingleVariableDeclaration[42950-42967]:SingleVariableDeclaration[44070-44087]"
    }, {
      "left" : "TypeBindings context",
      "right" : "TypeBindings context",
      "info" : "SingleVariableDeclaration[42969-42989]:SingleVariableDeclaration[44089-44109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42995-43427]:Block[44115-44547]"
    }, {
      "left" : "return _constructType(type.getUpperBounds()[0], context);",
      "right" : "return _constructType(type.getUpperBounds()[0], context);",
      "info" : "ReturnStatement[43364-43421]:ReturnStatement[44484-44541]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43433-43440]:Modifier[44553-44560]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[43441-43449]:SimpleType[44561-44569]"
    }, {
      "left" : "_mapType",
      "right" : "_mapType",
      "info" : "SimpleName[43450-43458]:SimpleName[44570-44578]"
    }, {
      "left" : "Class<?> rawClass",
      "right" : "Class<?> rawClass",
      "info" : "SingleVariableDeclaration[43459-43476]:SingleVariableDeclaration[44579-44596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43482-44231]:Block[44602-45351]"
    }, {
      "left" : "if (rawClass == Properties.class)",
      "right" : "if (rawClass == Properties.class)",
      "info" : "IfStatement[43568-43697]:IfStatement[44688-44817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43602-43697]:Block[44722-44817]"
    }, {
      "left" : "return MapType.construct(rawClass, CORE_TYPE_STRING, CORE_TYPE_STRING);",
      "right" : "return MapType.construct(rawClass, CORE_TYPE_STRING, CORE_TYPE_STRING);",
      "info" : "ReturnStatement[43616-43687]:ReturnStatement[44736-44807]"
    }, {
      "left" : "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);",
      "right" : "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);",
      "info" : "VariableDeclarationStatement[43706-43770]:VariableDeclarationStatement[44826-44890]"
    }, {
      "left" : "if (typeParams == null)",
      "right" : "if (typeParams == null)",
      "info" : "IfStatement[43818-43933]:IfStatement[44938-45053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43842-43933]:Block[44962-45053]"
    }, {
      "left" : "return MapType.construct(rawClass, _unknownType(), _unknownType());",
      "right" : "return MapType.construct(rawClass, _unknownType(), _unknownType());",
      "info" : "ReturnStatement[43856-43923]:ReturnStatement[44976-45043]"
    }, {
      "left" : "if (typeParams.length != 2)",
      "right" : "if (typeParams.length != 2)",
      "info" : "IfStatement[43986-44151]:IfStatement[45106-45271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44014-44151]:Block[45134-45271]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[44028-44141]:ThrowStatement[45148-45261]"
    }, {
      "left" : "return MapType.construct(rawClass, typeParams[0], typeParams[1]);",
      "right" : "return MapType.construct(rawClass, typeParams[0], typeParams[1]);",
      "info" : "ReturnStatement[44160-44225]:ReturnStatement[45280-45345]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44237-44244]:Modifier[45357-45364]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[44245-44253]:SimpleType[45365-45373]"
    }, {
      "left" : "_collectionType",
      "right" : "_collectionType",
      "info" : "SimpleName[44254-44269]:SimpleName[45374-45389]"
    }, {
      "left" : "Class<?> rawClass",
      "right" : "Class<?> rawClass",
      "info" : "SingleVariableDeclaration[44270-44287]:SingleVariableDeclaration[45390-45407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44293-44825]:Block[45413-45945]"
    }, {
      "left" : "JavaType[] typeParams = findTypeParameters(rawClass, Collection.class);",
      "right" : "JavaType[] typeParams = findTypeParameters(rawClass, Collection.class);",
      "info" : "VariableDeclarationStatement[44303-44374]:VariableDeclarationStatement[45423-45494]"
    }, {
      "left" : "if (typeParams == null)",
      "right" : "if (typeParams == null)",
      "info" : "IfStatement[44422-44528]:IfStatement[45542-45648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44446-44528]:Block[45566-45648]"
    }, {
      "left" : "return CollectionType.construct(rawClass, _unknownType());",
      "right" : "return CollectionType.construct(rawClass, _unknownType());",
      "info" : "ReturnStatement[44460-44518]:ReturnStatement[45580-45638]"
    }, {
      "left" : "if (typeParams.length != 1)",
      "right" : "if (typeParams.length != 1)",
      "info" : "IfStatement[44581-44753]:IfStatement[45701-45873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44609-44753]:Block[45729-45873]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[44623-44743]:ThrowStatement[45743-45863]"
    }, {
      "left" : "return CollectionType.construct(rawClass, typeParams[0]);",
      "right" : "return CollectionType.construct(rawClass, typeParams[0]);",
      "info" : "ReturnStatement[44762-44819]:ReturnStatement[45882-45939]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[44835-44844]:Modifier[45955-45964]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[44845-44853]:SimpleType[45965-45973]"
    }, {
      "left" : "_resolveVariableViaSubTypes",
      "right" : "_resolveVariableViaSubTypes",
      "info" : "SimpleName[44854-44881]:SimpleName[45974-46001]"
    }, {
      "left" : "HierarchicType leafType",
      "right" : "HierarchicType leafType",
      "info" : "SingleVariableDeclaration[44882-44905]:SingleVariableDeclaration[46002-46025]"
    }, {
      "left" : "String variableName",
      "right" : "String variableName",
      "info" : "SingleVariableDeclaration[44907-44926]:SingleVariableDeclaration[46027-46046]"
    }, {
      "left" : "TypeBindings bindings",
      "right" : "TypeBindings bindings",
      "info" : "SingleVariableDeclaration[44928-44949]:SingleVariableDeclaration[46048-46069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44955-45948]:Block[46075-47068]"
    }, {
      "left" : "if (leafType != null && leafType.isGeneric())",
      "right" : "if (leafType != null && leafType.isGeneric())",
      "info" : "IfStatement[45047-45911]:IfStatement[46167-47031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45093-45911]:Block[46213-47031]"
    }, {
      "left" : "TypeVariable<?>[] typeVariables = leafType.getRawClass().getTypeParameters();",
      "right" : "TypeVariable<?>[] typeVariables = leafType.getRawClass().getTypeParameters();",
      "info" : "VariableDeclarationStatement[45107-45184]:VariableDeclarationStatement[46227-46304]"
    }, {
      "left" : "for (int i = 0, len = typeVariables.length; i < len; ++i)",
      "right" : "for (int i = 0, len = typeVariables.length; i < len; ++i)",
      "info" : "ForStatement[45197-45901]:ForStatement[46317-47021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45255-45901]:Block[46375-47021]"
    }, {
      "left" : "TypeVariable<?> tv = typeVariables[i];",
      "right" : "TypeVariable<?> tv = typeVariables[i];",
      "info" : "VariableDeclarationStatement[45273-45311]:VariableDeclarationStatement[46393-46431]"
    }, {
      "left" : "if (variableName.equals(tv.getName()))",
      "right" : "if (variableName.equals(tv.getName()))",
      "info" : "IfStatement[45328-45887]:IfStatement[46448-47007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45367-45887]:Block[46487-47007]"
    }, {
      "left" : "Type type = leafType.asGeneric().getActualTypeArguments()[i];",
      "right" : "Type type = leafType.asGeneric().getActualTypeArguments()[i];",
      "info" : "VariableDeclarationStatement[45439-45500]:VariableDeclarationStatement[46559-46620]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[45521-45710]:IfStatement[46641-46830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45558-45710]:Block[46678-46830]"
    }, {
      "left" : "return _resolveVariableViaSubTypes(leafType.getSubType(), ((TypeVariable<?>) type).getName(), bindings);",
      "right" : "return _resolveVariableViaSubTypes(leafType.getSubType(), ((TypeVariable<?>) type).getName(), bindings);",
      "info" : "ReturnStatement[45584-45688]:ReturnStatement[46704-46808]"
    }, {
      "left" : "return _constructType(type, bindings);",
      "right" : "return _constructType(type, bindings);",
      "info" : "ReturnStatement[45831-45869]:ReturnStatement[46951-46989]"
    }, {
      "left" : "return _unknownType();",
      "right" : "return _unknownType();",
      "info" : "ReturnStatement[45920-45942]:ReturnStatement[47040-47062]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[45958-45967]:Modifier[47078-47087]"
    }, {
      "left" : "JavaType",
      "right" : "JavaType",
      "info" : "SimpleType[45968-45976]:SimpleType[47088-47096]"
    }, {
      "left" : "_unknownType",
      "right" : "_unknownType",
      "info" : "SimpleName[45977-45989]:SimpleName[47097-47109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45992-46044]:Block[47112-47164]"
    }, {
      "left" : "return new SimpleType(Object.class);",
      "right" : "return new SimpleType(Object.class);",
      "info" : "ReturnStatement[46002-46038]:ReturnStatement[47122-47158]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[46516-46525]:Modifier[47636-47645]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[46526-46540]:SimpleType[47646-47660]"
    }, {
      "left" : "_findSuperTypeChain",
      "right" : "_findSuperTypeChain",
      "info" : "SimpleName[46542-46561]:SimpleName[47662-47681]"
    }, {
      "left" : "Class<?> subtype",
      "right" : "Class<?> subtype",
      "info" : "SingleVariableDeclaration[46562-46578]:SingleVariableDeclaration[47682-47698]"
    }, {
      "left" : "Class<?> supertype",
      "right" : "Class<?> supertype",
      "info" : "SingleVariableDeclaration[46580-46598]:SingleVariableDeclaration[47700-47718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46604-46847]:Block[47724-47967]"
    }, {
      "left" : "if (supertype.isInterface())",
      "right" : "if (supertype.isInterface())",
      "info" : "IfStatement[46679-46784]:IfStatement[47799-47904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46708-46784]:Block[47828-47904]"
    }, {
      "left" : "return _findSuperInterfaceChain(subtype, supertype);",
      "right" : "return _findSuperInterfaceChain(subtype, supertype);",
      "info" : "ReturnStatement[46722-46774]:ReturnStatement[47842-47894]"
    }, {
      "left" : "return _findSuperClassChain(subtype, supertype);",
      "right" : "return _findSuperClassChain(subtype, supertype);",
      "info" : "ReturnStatement[46793-46841]:ReturnStatement[47913-47961]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[46853-46862]:Modifier[47973-47982]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[46863-46877]:SimpleType[47983-47997]"
    }, {
      "left" : "_findSuperClassChain",
      "right" : "_findSuperClassChain",
      "info" : "SimpleName[46878-46898]:SimpleName[47998-48018]"
    }, {
      "left" : "Type currentType",
      "right" : "Type currentType",
      "info" : "SingleVariableDeclaration[46899-46915]:SingleVariableDeclaration[48019-48035]"
    }, {
      "left" : "Class<?> target",
      "right" : "Class<?> target",
      "info" : "SingleVariableDeclaration[46917-46932]:SingleVariableDeclaration[48037-48052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46938-47524]:Block[48058-48644]"
    }, {
      "left" : "HierarchicType current = new HierarchicType(currentType);",
      "right" : "HierarchicType current = new HierarchicType(currentType);",
      "info" : "VariableDeclarationStatement[46948-47005]:VariableDeclarationStatement[48068-48125]"
    }, {
      "left" : "Class<?> raw = current.getRawClass();",
      "right" : "Class<?> raw = current.getRawClass();",
      "info" : "VariableDeclarationStatement[47014-47051]:VariableDeclarationStatement[48134-48171]"
    }, {
      "left" : "if (raw == target)",
      "right" : "if (raw == target)",
      "info" : "IfStatement[47060-47118]:IfStatement[48180-48238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47079-47118]:Block[48199-48238]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[47093-47108]:ReturnStatement[48213-48228]"
    }, {
      "left" : "Type parent = raw.getGenericSuperclass();",
      "right" : "Type parent = raw.getGenericSuperclass();",
      "info" : "VariableDeclarationStatement[47184-47225]:VariableDeclarationStatement[48304-48345]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[47234-47497]:IfStatement[48354-48617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47254-47497]:Block[48374-48617]"
    }, {
      "left" : "HierarchicType sup = _findSuperClassChain(parent, target);",
      "right" : "HierarchicType sup = _findSuperClassChain(parent, target);",
      "info" : "VariableDeclarationStatement[47268-47326]:VariableDeclarationStatement[48388-48446]"
    }, {
      "left" : "if (sup != null)",
      "right" : "if (sup != null)",
      "info" : "IfStatement[47339-47487]:IfStatement[48459-48607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47356-47487]:Block[48476-48607]"
    }, {
      "left" : "sup.setSubType(current);",
      "right" : "sup.setSubType(current);",
      "info" : "ExpressionStatement[47374-47398]:ExpressionStatement[48494-48518]"
    }, {
      "left" : "current.setSuperType(sup);",
      "right" : "current.setSuperType(sup);",
      "info" : "ExpressionStatement[47415-47441]:ExpressionStatement[48535-48561]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[47458-47473]:ReturnStatement[48578-48593]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[47506-47518]:ReturnStatement[48626-48638]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[47530-47539]:Modifier[48650-48659]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[47540-47554]:SimpleType[48660-48674]"
    }, {
      "left" : "_findSuperInterfaceChain",
      "right" : "_findSuperInterfaceChain",
      "info" : "SimpleName[47555-47579]:SimpleName[48675-48699]"
    }, {
      "left" : "Type currentType",
      "right" : "Type currentType",
      "info" : "SingleVariableDeclaration[47580-47596]:SingleVariableDeclaration[48700-48716]"
    }, {
      "left" : "Class<?> target",
      "right" : "Class<?> target",
      "info" : "SingleVariableDeclaration[47598-47613]:SingleVariableDeclaration[48718-48733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47619-48448]:Block[48739-49568]"
    }, {
      "left" : "HierarchicType current = new HierarchicType(currentType);",
      "right" : "HierarchicType current = new HierarchicType(currentType);",
      "info" : "VariableDeclarationStatement[47629-47686]:VariableDeclarationStatement[48749-48806]"
    }, {
      "left" : "Class<?> raw = current.getRawClass();",
      "right" : "Class<?> raw = current.getRawClass();",
      "info" : "VariableDeclarationStatement[47695-47732]:VariableDeclarationStatement[48815-48852]"
    }, {
      "left" : "if (raw == target)",
      "right" : "if (raw == target)",
      "info" : "IfStatement[47741-47823]:IfStatement[48861-48943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47760-47823]:Block[48880-48943]"
    }, {
      "left" : "return new HierarchicType(currentType);",
      "right" : "return new HierarchicType(currentType);",
      "info" : "ReturnStatement[47774-47813]:ReturnStatement[48894-48933]"
    }, {
      "left" : "if (raw == HashMap.class)",
      "right" : "if (raw == HashMap.class)",
      "info" : "IfStatement[48066-48217]:IfStatement[49186-49337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48092-48217]:Block[49212-49337]"
    }, {
      "left" : "if (target == Map.class)",
      "right" : "if (target == Map.class)",
      "info" : "IfStatement[48106-48207]:IfStatement[49226-49327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48131-48207]:Block[49251-49327]"
    }, {
      "left" : "return _hashMapSuperInterfaceChain(current);",
      "right" : "return _hashMapSuperInterfaceChain(current);",
      "info" : "ReturnStatement[48149-48193]:ReturnStatement[49269-49313]"
    }, {
      "left" : "if (raw == ArrayList.class)",
      "right" : "if (raw == ArrayList.class)",
      "info" : "IfStatement[48226-48382]:IfStatement[49346-49502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48254-48382]:Block[49374-49502]"
    }, {
      "left" : "if (target == List.class)",
      "right" : "if (target == List.class)",
      "info" : "IfStatement[48268-48372]:IfStatement[49388-49492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48294-48372]:Block[49414-49492]"
    }, {
      "left" : "return _arrayListSuperInterfaceChain(current);",
      "right" : "return _arrayListSuperInterfaceChain(current);",
      "info" : "ReturnStatement[48312-48358]:ReturnStatement[49432-49478]"
    }, {
      "left" : "return _doFindSuperInterfaceChain(current, target);",
      "right" : "return _doFindSuperInterfaceChain(current, target);",
      "info" : "ReturnStatement[48391-48442]:ReturnStatement[49511-49562]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[48458-48467]:Modifier[49578-49587]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[48468-48482]:SimpleType[49588-49602]"
    }, {
      "left" : "_doFindSuperInterfaceChain",
      "right" : "_doFindSuperInterfaceChain",
      "info" : "SimpleName[48483-48509]:SimpleName[49603-49629]"
    }, {
      "left" : "HierarchicType current",
      "right" : "HierarchicType current",
      "info" : "SingleVariableDeclaration[48510-48532]:SingleVariableDeclaration[49630-49652]"
    }, {
      "left" : "Class<?> target",
      "right" : "Class<?> target",
      "info" : "SingleVariableDeclaration[48534-48549]:SingleVariableDeclaration[49654-49669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48555-49520]:Block[49675-50640]"
    }, {
      "left" : "Class<?> raw = current.getRawClass();",
      "right" : "Class<?> raw = current.getRawClass();",
      "info" : "VariableDeclarationStatement[48565-48602]:VariableDeclarationStatement[49685-49722]"
    }, {
      "left" : "Type[] parents = raw.getGenericInterfaces();",
      "right" : "Type[] parents = raw.getGenericInterfaces();",
      "info" : "VariableDeclarationStatement[48611-48655]:VariableDeclarationStatement[49731-49775]"
    }, {
      "left" : "if (parents != null)",
      "right" : "if (parents != null)",
      "info" : "IfStatement[48780-49128]:IfStatement[49900-50248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48801-49128]:Block[49921-50248]"
    }, {
      "left" : "for (Type parent : parents)",
      "right" : "for (Type parent : parents)",
      "info" : "EnhancedForStatement[48815-49118]:EnhancedForStatement[49935-50238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48843-49118]:Block[49963-50238]"
    }, {
      "left" : "HierarchicType sup = _findSuperInterfaceChain(parent, target);",
      "right" : "HierarchicType sup = _findSuperInterfaceChain(parent, target);",
      "info" : "VariableDeclarationStatement[48861-48923]:VariableDeclarationStatement[49981-50043]"
    }, {
      "left" : "if (sup != null)",
      "right" : "if (sup != null)",
      "info" : "IfStatement[48940-49104]:IfStatement[50060-50224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48957-49104]:Block[50077-50224]"
    }, {
      "left" : "sup.setSubType(current);",
      "right" : "sup.setSubType(current);",
      "info" : "ExpressionStatement[48979-49003]:ExpressionStatement[50099-50123]"
    }, {
      "left" : "current.setSuperType(sup);",
      "right" : "current.setSuperType(sup);",
      "info" : "ExpressionStatement[49024-49050]:ExpressionStatement[50144-50170]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[49071-49086]:ReturnStatement[50191-50206]"
    }, {
      "left" : "Type parent = raw.getGenericSuperclass();",
      "right" : "Type parent = raw.getGenericSuperclass();",
      "info" : "VariableDeclarationStatement[49176-49217]:VariableDeclarationStatement[50296-50337]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[49226-49493]:IfStatement[50346-50613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49246-49493]:Block[50366-50613]"
    }, {
      "left" : "HierarchicType sup = _findSuperInterfaceChain(parent, target);",
      "right" : "HierarchicType sup = _findSuperInterfaceChain(parent, target);",
      "info" : "VariableDeclarationStatement[49260-49322]:VariableDeclarationStatement[50380-50442]"
    }, {
      "left" : "if (sup != null)",
      "right" : "if (sup != null)",
      "info" : "IfStatement[49335-49483]:IfStatement[50455-50603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49352-49483]:Block[50472-50603]"
    }, {
      "left" : "sup.setSubType(current);",
      "right" : "sup.setSubType(current);",
      "info" : "ExpressionStatement[49370-49394]:ExpressionStatement[50490-50514]"
    }, {
      "left" : "current.setSuperType(sup);",
      "right" : "current.setSuperType(sup);",
      "info" : "ExpressionStatement[49411-49437]:ExpressionStatement[50531-50557]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[49454-49469]:ReturnStatement[50574-50589]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[49502-49514]:ReturnStatement[50622-50634]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[49526-49535]:Modifier[50646-50655]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[49536-49548]:Modifier[50656-50668]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[49549-49563]:SimpleType[50669-50683]"
    }, {
      "left" : "_hashMapSuperInterfaceChain",
      "right" : "_hashMapSuperInterfaceChain",
      "info" : "SimpleName[49564-49591]:SimpleName[50684-50711]"
    }, {
      "left" : "HierarchicType current",
      "right" : "HierarchicType current",
      "info" : "SingleVariableDeclaration[49592-49614]:SingleVariableDeclaration[50712-50734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49620-50020]:Block[50740-51140]"
    }, {
      "left" : "if (_cachedHashMapType == null)",
      "right" : "if (_cachedHashMapType == null)",
      "info" : "IfStatement[49630-49853]:IfStatement[50750-50973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49662-49853]:Block[50782-50973]"
    }, {
      "left" : "HierarchicType base = current.deepCloneWithoutSubtype();",
      "right" : "HierarchicType base = current.deepCloneWithoutSubtype();",
      "info" : "VariableDeclarationStatement[49676-49732]:VariableDeclarationStatement[50796-50852]"
    }, {
      "left" : "_doFindSuperInterfaceChain(base, Map.class);",
      "right" : "_doFindSuperInterfaceChain(base, Map.class);",
      "info" : "ExpressionStatement[49745-49789]:ExpressionStatement[50865-50909]"
    }, {
      "left" : "_cachedHashMapType = base.getSuperType();",
      "right" : "_cachedHashMapType = base.getSuperType();",
      "info" : "ExpressionStatement[49802-49843]:ExpressionStatement[50922-50963]"
    }, {
      "left" : "HierarchicType t = _cachedHashMapType.deepCloneWithoutSubtype();",
      "right" : "HierarchicType t = _cachedHashMapType.deepCloneWithoutSubtype();",
      "info" : "VariableDeclarationStatement[49862-49926]:VariableDeclarationStatement[50982-51046]"
    }, {
      "left" : "current.setSuperType(t);",
      "right" : "current.setSuperType(t);",
      "info" : "ExpressionStatement[49935-49959]:ExpressionStatement[51055-51079]"
    }, {
      "left" : "t.setSubType(current);",
      "right" : "t.setSubType(current);",
      "info" : "ExpressionStatement[49968-49990]:ExpressionStatement[51088-51110]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[49999-50014]:ReturnStatement[51119-51134]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[50026-50035]:Modifier[51146-51155]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[50036-50048]:Modifier[51156-51168]"
    }, {
      "left" : "HierarchicType",
      "right" : "HierarchicType",
      "info" : "SimpleType[50049-50063]:SimpleType[51169-51183]"
    }, {
      "left" : "_arrayListSuperInterfaceChain",
      "right" : "_arrayListSuperInterfaceChain",
      "info" : "SimpleName[50064-50093]:SimpleName[51184-51213]"
    }, {
      "left" : "HierarchicType current",
      "right" : "HierarchicType current",
      "info" : "SingleVariableDeclaration[50094-50116]:SingleVariableDeclaration[51214-51236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50122-50529]:Block[51242-51649]"
    }, {
      "left" : "if (_cachedArrayListType == null)",
      "right" : "if (_cachedArrayListType == null)",
      "info" : "IfStatement[50132-50360]:IfStatement[51252-51480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50166-50360]:Block[51286-51480]"
    }, {
      "left" : "HierarchicType base = current.deepCloneWithoutSubtype();",
      "right" : "HierarchicType base = current.deepCloneWithoutSubtype();",
      "info" : "VariableDeclarationStatement[50180-50236]:VariableDeclarationStatement[51300-51356]"
    }, {
      "left" : "_doFindSuperInterfaceChain(base, List.class);",
      "right" : "_doFindSuperInterfaceChain(base, List.class);",
      "info" : "ExpressionStatement[50249-50294]:ExpressionStatement[51369-51414]"
    }, {
      "left" : "_cachedArrayListType = base.getSuperType();",
      "right" : "_cachedArrayListType = base.getSuperType();",
      "info" : "ExpressionStatement[50307-50350]:ExpressionStatement[51427-51470]"
    }, {
      "left" : "HierarchicType t = _cachedArrayListType.deepCloneWithoutSubtype();",
      "right" : "HierarchicType t = _cachedArrayListType.deepCloneWithoutSubtype();",
      "info" : "VariableDeclarationStatement[50369-50435]:VariableDeclarationStatement[51489-51555]"
    }, {
      "left" : "current.setSuperType(t);",
      "right" : "current.setSuperType(t);",
      "info" : "ExpressionStatement[50444-50468]:ExpressionStatement[51564-51588]"
    }, {
      "left" : "t.setSubType(current);",
      "right" : "t.setSubType(current);",
      "info" : "ExpressionStatement[50477-50499]:ExpressionStatement[51597-51619]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[50508-50523]:ReturnStatement[51628-51643]"
    } ]
  },
  "interFileMappings" : { }
}