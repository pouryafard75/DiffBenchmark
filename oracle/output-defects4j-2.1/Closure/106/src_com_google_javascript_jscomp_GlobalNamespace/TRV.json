{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private AbstractCompiler compiler;",
      "right" : "private AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1324-1358]:FieldDeclaration[1324-1358]"
    }, {
      "left" : "private final Node root;",
      "right" : "private final Node root;",
      "info" : "FieldDeclaration[1361-1385]:FieldDeclaration[1361-1385]"
    }, {
      "left" : "private final Node externsRoot;",
      "right" : "private final Node externsRoot;",
      "info" : "FieldDeclaration[1388-1419]:FieldDeclaration[1388-1419]"
    }, {
      "left" : "private boolean inExterns;",
      "right" : "private boolean inExterns;",
      "info" : "FieldDeclaration[1422-1448]:FieldDeclaration[1422-1448]"
    }, {
      "left" : "private Scope externsScope;",
      "right" : "private Scope externsScope;",
      "info" : "FieldDeclaration[1451-1478]:FieldDeclaration[1451-1478]"
    }, {
      "left" : "private boolean generated = false;",
      "right" : "private boolean generated = false;",
      "info" : "FieldDeclaration[1481-1515]:FieldDeclaration[1481-1515]"
    }, {
      "left" : "private List<Name> globalNames = new ArrayList<Name>();",
      "right" : "private List<Name> globalNames = new ArrayList<Name>();",
      "info" : "FieldDeclaration[1519-1605]:FieldDeclaration[1519-1605]"
    }, {
      "left" : "private Map<String, Name> nameMap = new HashMap<String, Name>();",
      "right" : "private Map<String, Name> nameMap = new HashMap<String, Name>();",
      "info" : "FieldDeclaration[1609-1746]:FieldDeclaration[1609-1746]"
    }, {
      "left" : "GlobalNamespace(AbstractCompiler compiler, Node root)",
      "right" : "GlobalNamespace(AbstractCompiler compiler, Node root)",
      "info" : "MethodDeclaration[1750-2081]:MethodDeclaration[1750-2081]"
    }, {
      "left" : "GlobalNamespace(AbstractCompiler compiler, Node externsRoot, Node root)",
      "right" : "GlobalNamespace(AbstractCompiler compiler, Node externsRoot, Node root)",
      "info" : "MethodDeclaration[2085-2830]:MethodDeclaration[2085-2830]"
    }, {
      "left" : "List<Name> getNameForest()",
      "right" : "List<Name> getNameForest()",
      "info" : "MethodDeclaration[2834-3058]:MethodDeclaration[2834-3058]"
    }, {
      "left" : "Map<String, Name> getNameIndex()",
      "right" : "Map<String, Name> getNameIndex()",
      "info" : "MethodDeclaration[3062-3285]:MethodDeclaration[3062-3285]"
    }, {
      "left" : "void scanNewNodes(Scope scope, Set<Node> newNodes)",
      "right" : "void scanNewNodes(Scope scope, Set<Node> newNodes)",
      "info" : "MethodDeclaration[3289-3712]:MethodDeclaration[3289-3712]"
    }, {
      "left" : "NodeFilter",
      "right" : "NodeFilter",
      "info" : "TypeDeclaration[3716-4410]:TypeDeclaration[3716-4410]"
    }, {
      "left" : "private final Set<Node> newNodes;",
      "right" : "private final Set<Node> newNodes;",
      "info" : "FieldDeclaration[3891-3924]:FieldDeclaration[3891-3924]"
    }, {
      "left" : "NodeFilter(Set<Node> newNodes)",
      "right" : "NodeFilter(Set<Node> newNodes)",
      "info" : "MethodDeclaration[3930-4000]:MethodDeclaration[3930-4000]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[4006-4406]:MethodDeclaration[4006-4406]"
    }, {
      "left" : "private void process()",
      "right" : "private void process()",
      "info" : "MethodDeclaration[4414-4748]:MethodDeclaration[4414-4748]"
    }, {
      "left" : "private boolean isGlobalNameReference(String name, Scope s)",
      "right" : "private boolean isGlobalNameReference(String name, Scope s)",
      "info" : "MethodDeclaration[4752-5215]:MethodDeclaration[4752-5215]"
    }, {
      "left" : "private String getTopVarName(String name)",
      "right" : "private String getTopVarName(String name)",
      "info" : "MethodDeclaration[5219-5590]:MethodDeclaration[5219-5590]"
    }, {
      "left" : "private boolean isGlobalVarReference(String name, Scope s)",
      "right" : "private boolean isGlobalVarReference(String name, Scope s)",
      "info" : "MethodDeclaration[5594-6115]:MethodDeclaration[5594-6115]"
    }, {
      "left" : "private boolean isGlobalScope(Scope s)",
      "right" : "private boolean isGlobalScope(Scope s)",
      "info" : "MethodDeclaration[6119-6334]:MethodDeclaration[6119-6334]"
    }, {
      "left" : "BuildGlobalNamespace",
      "right" : "BuildGlobalNamespace",
      "info" : "TypeDeclaration[6418-24498]:TypeDeclaration[6418-24498]"
    }, {
      "left" : "private final Predicate<Node> nodeFilter;",
      "right" : "private final Predicate<Node> nodeFilter;",
      "info" : "FieldDeclaration[6583-6624]:FieldDeclaration[6583-6624]"
    }, {
      "left" : "BuildGlobalNamespace()",
      "right" : "BuildGlobalNamespace()",
      "info" : "MethodDeclaration[6630-6678]:MethodDeclaration[6630-6678]"
    }, {
      "left" : "BuildGlobalNamespace(Predicate<Node> nodeFilter)",
      "right" : "BuildGlobalNamespace(Predicate<Node> nodeFilter)",
      "info" : "MethodDeclaration[6684-6884]:MethodDeclaration[6684-6884]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[6890-9849]:MethodDeclaration[6890-9849]"
    }, {
      "left" : "String getNameForObjLitKey(Node n)",
      "right" : "String getNameForObjLitKey(Node n)",
      "info" : "MethodDeclaration[9855-12269]:MethodDeclaration[9855-12269]"
    }, {
      "left" : "Name.Type getValueType(Node n)",
      "right" : "Name.Type getValueType(Node n)",
      "info" : "MethodDeclaration[12275-13471]:MethodDeclaration[12275-13471]"
    }, {
      "left" : "void handleSetFromGlobal(NodeTraversal t, Node n, Node parent, String name,\n                             boolean isPropAssign, Name.Type type)",
      "right" : "void handleSetFromGlobal(NodeTraversal t, Node n, Node parent, String name,\n                             boolean isPropAssign, Name.Type type)",
      "info" : "MethodDeclaration[13477-14792]:MethodDeclaration[13477-14792]"
    }, {
      "left" : "private boolean isConstructorOrEnumDeclaration(Node n, Node parent)",
      "right" : "private boolean isConstructorOrEnumDeclaration(Node n, Node parent)",
      "info" : "MethodDeclaration[14798-16139]:MethodDeclaration[14798-16139]"
    }, {
      "left" : "void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name)",
      "right" : "void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name)",
      "info" : "MethodDeclaration[16145-17004]:MethodDeclaration[16145-17004]"
    }, {
      "left" : "void handleGet(NodeTraversal t, Node n, Node parent, String name)",
      "right" : "void handleGet(NodeTraversal t, Node n, Node parent, String name)",
      "info" : "MethodDeclaration[17010-19067]:MethodDeclaration[17010-19067]"
    }, {
      "left" : "Ref.Type determineGetTypeForHookOrBooleanExpr(\n        NodeTraversal t, Node parent, String name)",
      "right" : "Ref.Type determineGetTypeForHookOrBooleanExpr(\n        NodeTraversal t, Node parent, String name)",
      "info" : "MethodDeclaration[19073-20935]:MethodDeclaration[19073-20935]"
    }, {
      "left" : "void handleGet(NodeTraversal t, Node n, Node parent,\n        String name, Ref.Type type)",
      "right" : "void handleGet(NodeTraversal t, Node n, Node parent,\n        String name, Ref.Type type)",
      "info" : "MethodDeclaration[20941-21549]:MethodDeclaration[20941-21549]"
    }, {
      "left" : "boolean maybeHandlePrototypePrefix(NodeTraversal t, Node n, Node parent,\n        String name)",
      "right" : "boolean maybeHandlePrototypePrefix(NodeTraversal t, Node n, Node parent,\n        String name)",
      "info" : "MethodDeclaration[21555-23237]:MethodDeclaration[21555-23237]"
    }, {
      "left" : "boolean isNestedAssign(Node parent)",
      "right" : "boolean isNestedAssign(Node parent)",
      "info" : "MethodDeclaration[23243-23683]:MethodDeclaration[23243-23683]"
    }, {
      "left" : "Name getOrCreateName(String name)",
      "right" : "Name getOrCreateName(String name)",
      "info" : "MethodDeclaration[23689-24494]:MethodDeclaration[23689-24494]"
    }, {
      "left" : "enum : Type",
      "right" : "enum : Type",
      "info" : "EnumDeclaration[24863-24926]:EnumDeclaration[24863-24926]"
    }, {
      "left" : "final String name;",
      "right" : "final String name;",
      "info" : "FieldDeclaration[24932-24950]:FieldDeclaration[24932-24950]"
    }, {
      "left" : "final Name parent;",
      "right" : "final Name parent;",
      "info" : "FieldDeclaration[24955-24973]:FieldDeclaration[24955-24973]"
    }, {
      "left" : "List<Name> props;",
      "right" : "List<Name> props;",
      "info" : "FieldDeclaration[24978-24995]:FieldDeclaration[24978-24995]"
    }, {
      "left" : "Ref declaration;",
      "right" : "Ref declaration;",
      "info" : "FieldDeclaration[25000-25016]:FieldDeclaration[25000-25016]"
    }, {
      "left" : "List<Ref> refs;",
      "right" : "List<Ref> refs;",
      "info" : "FieldDeclaration[25021-25036]:FieldDeclaration[25021-25036]"
    }, {
      "left" : "Type type;",
      "right" : "Type type;",
      "info" : "FieldDeclaration[25041-25051]:FieldDeclaration[25041-25051]"
    }, {
      "left" : "private boolean isClassOrEnum = false;",
      "right" : "private boolean isClassOrEnum = false;",
      "info" : "FieldDeclaration[25056-25094]:FieldDeclaration[25056-25094]"
    }, {
      "left" : "private boolean hasClassOrEnumDescendant = false;",
      "right" : "private boolean hasClassOrEnumDescendant = false;",
      "info" : "FieldDeclaration[25099-25148]:FieldDeclaration[25099-25148]"
    }, {
      "left" : "int globalSets = 0;",
      "right" : "int globalSets = 0;",
      "info" : "FieldDeclaration[25153-25172]:FieldDeclaration[25153-25172]"
    }, {
      "left" : "int localSets = 0;",
      "right" : "int localSets = 0;",
      "info" : "FieldDeclaration[25177-25195]:FieldDeclaration[25177-25195]"
    }, {
      "left" : "int aliasingGets = 0;",
      "right" : "int aliasingGets = 0;",
      "info" : "FieldDeclaration[25200-25221]:FieldDeclaration[25200-25221]"
    }, {
      "left" : "int totalGets = 0;",
      "right" : "int totalGets = 0;",
      "info" : "FieldDeclaration[25226-25244]:FieldDeclaration[25226-25244]"
    }, {
      "left" : "int callGets = 0;",
      "right" : "int callGets = 0;",
      "info" : "FieldDeclaration[25249-25266]:FieldDeclaration[25249-25266]"
    }, {
      "left" : "boolean inExterns;",
      "right" : "boolean inExterns;",
      "info" : "FieldDeclaration[25271-25289]:FieldDeclaration[25271-25289]"
    }, {
      "left" : "JSDocInfo docInfo = null;",
      "right" : "JSDocInfo docInfo = null;",
      "info" : "FieldDeclaration[25295-25320]:FieldDeclaration[25295-25320]"
    }, {
      "left" : "Name(String name, Name parent, boolean inExterns)",
      "right" : "Name(String name, Name parent, boolean inExterns)",
      "info" : "MethodDeclaration[25326-25499]:MethodDeclaration[25326-25499]"
    }, {
      "left" : "Name addProperty(String name, boolean inExterns)",
      "right" : "Name addProperty(String name, boolean inExterns)",
      "info" : "MethodDeclaration[25505-25728]:MethodDeclaration[25505-25728]"
    }, {
      "left" : "void addRef(Ref ref)",
      "right" : "void addRef(Ref ref)",
      "info" : "MethodDeclaration[25734-26578]:MethodDeclaration[25734-26578]"
    }, {
      "left" : "void removeRef(Ref ref)",
      "right" : "void removeRef(Ref ref)",
      "info" : "MethodDeclaration[26584-27621]:MethodDeclaration[26584-27621]"
    }, {
      "left" : "void addRefInternal(Ref ref)",
      "right" : "void addRefInternal(Ref ref)",
      "info" : "MethodDeclaration[27627-27756]:MethodDeclaration[27627-27756]"
    }, {
      "left" : "boolean canEliminate()",
      "right" : "boolean canEliminate()",
      "info" : "MethodDeclaration[27762-28056]:MethodDeclaration[27762-28056]"
    }, {
      "left" : "boolean canCollapse()",
      "right" : "boolean canCollapse()",
      "info" : "MethodDeclaration[28062-28257]:MethodDeclaration[28062-28257]"
    }, {
      "left" : "boolean needsToBeStubbed()",
      "right" : "boolean needsToBeStubbed()",
      "info" : "MethodDeclaration[28805-28886]:MethodDeclaration[28925-29006]"
    }, {
      "left" : "void setIsClassOrEnum()",
      "right" : "void setIsClassOrEnum()",
      "info" : "MethodDeclaration[28892-29103]:MethodDeclaration[29012-29223]"
    }, {
      "left" : "boolean isNamespace()",
      "right" : "boolean isNamespace()",
      "info" : "MethodDeclaration[29109-29567]:MethodDeclaration[29229-29687]"
    }, {
      "left" : "boolean isSimpleName()",
      "right" : "boolean isSimpleName()",
      "info" : "MethodDeclaration[29573-29737]:MethodDeclaration[29693-29857]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[29743-30021]:MethodDeclaration[29863-30141]"
    }, {
      "left" : "String fullName()",
      "right" : "String fullName()",
      "info" : "MethodDeclaration[30027-30121]:MethodDeclaration[30147-30241]"
    }, {
      "left" : "private static JSDocInfo getDocInfoForDeclaration(Ref ref)",
      "right" : "private static JSDocInfo getDocInfoForDeclaration(Ref ref)",
      "info" : "MethodDeclaration[30127-30683]:MethodDeclaration[30247-30803]"
    }, {
      "left" : "Ref",
      "right" : "Ref",
      "info" : "TypeDeclaration[30771-33064]:TypeDeclaration[30891-33184]"
    }, {
      "left" : "enum : Type",
      "right" : "enum : Type",
      "info" : "EnumDeclaration[30933-31246]:EnumDeclaration[31053-31366]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "FieldDeclaration[31252-31262]:FieldDeclaration[31372-31382]"
    }, {
      "left" : "final Type type;",
      "right" : "final Type type;",
      "info" : "FieldDeclaration[31267-31283]:FieldDeclaration[31387-31403]"
    }, {
      "left" : "final String sourceName;",
      "right" : "final String sourceName;",
      "info" : "FieldDeclaration[31288-31312]:FieldDeclaration[31408-31432]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[31317-31335]:FieldDeclaration[31437-31455]"
    }, {
      "left" : "final JSModule module;",
      "right" : "final JSModule module;",
      "info" : "FieldDeclaration[31340-31362]:FieldDeclaration[31460-31482]"
    }, {
      "left" : "private Ref twin = null;",
      "right" : "private Ref twin = null;",
      "info" : "FieldDeclaration[31368-31646]:FieldDeclaration[31488-31766]"
    }, {
      "left" : "Ref(NodeTraversal t, Node name, Type type)",
      "right" : "Ref(NodeTraversal t, Node name, Type type)",
      "info" : "MethodDeclaration[31652-31925]:MethodDeclaration[31772-32045]"
    }, {
      "left" : "private Ref(Ref original, Type type)",
      "right" : "private Ref(Ref original, Type type)",
      "info" : "MethodDeclaration[31931-32149]:MethodDeclaration[32051-32269]"
    }, {
      "left" : "private Ref(Type type)",
      "right" : "private Ref(Type type)",
      "info" : "MethodDeclaration[32155-32294]:MethodDeclaration[32275-32414]"
    }, {
      "left" : "Ref getTwin()",
      "right" : "Ref getTwin()",
      "info" : "MethodDeclaration[32300-32340]:MethodDeclaration[32420-32460]"
    }, {
      "left" : "boolean isSet()",
      "right" : "boolean isSet()",
      "info" : "MethodDeclaration[32346-32443]:MethodDeclaration[32466-32563]"
    }, {
      "left" : "static void markTwins(Ref a, Ref b)",
      "right" : "static void markTwins(Ref a, Ref b)",
      "info" : "MethodDeclaration[32449-32793]:MethodDeclaration[32569-32913]"
    }, {
      "left" : "Ref cloneAndReclassify(Type type)",
      "right" : "Ref cloneAndReclassify(Type type)",
      "info" : "MethodDeclaration[32799-32977]:MethodDeclaration[32919-33097]"
    }, {
      "left" : "static Ref createRefForTesting(Type type)",
      "right" : "static Ref createRefForTesting(Type type)",
      "info" : "MethodDeclaration[32983-33060]:MethodDeclaration[33103-33180]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2044-2081]:Block[2044-2081]"
    }, {
      "left" : "this(compiler, null, root);",
      "right" : "this(compiler, null, root);",
      "info" : "ConstructorInvocation[2050-2077]:ConstructorInvocation[2050-2077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2737-2830]:Block[2737-2830]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2743-2768]:ExpressionStatement[2743-2768]"
    }, {
      "left" : "this.externsRoot = externsRoot;",
      "right" : "this.externsRoot = externsRoot;",
      "info" : "ExpressionStatement[2773-2804]:ExpressionStatement[2773-2804]"
    }, {
      "left" : "this.root = root;",
      "right" : "this.root = root;",
      "info" : "ExpressionStatement[2809-2826]:ExpressionStatement[2809-2826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2984-3058]:Block[2984-3058]"
    }, {
      "left" : "if (!generated)",
      "right" : "if (!generated)",
      "info" : "IfStatement[2990-3030]:IfStatement[2990-3030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3006-3030]:Block[3006-3030]"
    }, {
      "left" : "process();",
      "right" : "process();",
      "info" : "ExpressionStatement[3014-3024]:ExpressionStatement[3014-3024]"
    }, {
      "left" : "return globalNames;",
      "right" : "return globalNames;",
      "info" : "ReturnStatement[3035-3054]:ReturnStatement[3035-3054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3215-3285]:Block[3215-3285]"
    }, {
      "left" : "if (!generated)",
      "right" : "if (!generated)",
      "info" : "IfStatement[3221-3261]:IfStatement[3221-3261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3237-3261]:Block[3237-3261]"
    }, {
      "left" : "process();",
      "right" : "process();",
      "info" : "ExpressionStatement[3245-3255]:ExpressionStatement[3245-3255]"
    }, {
      "left" : "return nameMap;",
      "right" : "return nameMap;",
      "info" : "ReturnStatement[3266-3281]:ReturnStatement[3266-3281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3566-3712]:Block[3566-3712]"
    }, {
      "left" : "NodeTraversal t = new NodeTraversal(compiler,\n        new BuildGlobalNamespace(new NodeFilter(newNodes)));",
      "right" : "NodeTraversal t = new NodeTraversal(compiler,\n        new BuildGlobalNamespace(new NodeFilter(newNodes)));",
      "info" : "VariableDeclarationStatement[3572-3678]:VariableDeclarationStatement[3572-3678]"
    }, {
      "left" : "t.traverseAtScope(scope);",
      "right" : "t.traverseAtScope(scope);",
      "info" : "ExpressionStatement[3683-3708]:ExpressionStatement[3683-3708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3961-4000]:Block[3961-4000]"
    }, {
      "left" : "this.newNodes = newNodes;",
      "right" : "this.newNodes = newNodes;",
      "info" : "ExpressionStatement[3969-3994]:ExpressionStatement[3969-3994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4035-4406]:Block[4035-4406]"
    }, {
      "left" : "if (!n.isQualifiedName())",
      "right" : "if (!n.isQualifiedName())",
      "info" : "IfStatement[4043-4100]:IfStatement[4043-4100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4069-4100]:Block[4069-4100]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4079-4092]:ReturnStatement[4079-4092]"
    }, {
      "left" : "Node current;",
      "right" : "Node current;",
      "info" : "VariableDeclarationStatement[4108-4121]:VariableDeclarationStatement[4108-4121]"
    }, {
      "left" : "for (current = n;\n           current.getType() == Token.GETPROP;\n           current = current.getFirstChild())",
      "right" : "for (current = n;\n           current.getType() == Token.GETPROP;\n           current = current.getFirstChild())",
      "info" : "ForStatement[4128-4323]:ForStatement[4128-4323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4239-4323]:Block[4239-4323]"
    }, {
      "left" : "if (newNodes.contains(current))",
      "right" : "if (newNodes.contains(current))",
      "info" : "IfStatement[4249-4315]:IfStatement[4249-4315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4281-4315]:Block[4281-4315]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4293-4305]:ReturnStatement[4293-4305]"
    }, {
      "left" : "return current.getType() == Token.NAME && newNodes.contains(current);",
      "right" : "return current.getType() == Token.NAME && newNodes.contains(current);",
      "info" : "ReturnStatement[4331-4400]:ReturnStatement[4331-4400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4483-4748]:Block[4483-4748]"
    }, {
      "left" : "if (externsRoot != null)",
      "right" : "if (externsRoot != null)",
      "info" : "IfStatement[4489-4626]:IfStatement[4489-4626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4514-4626]:Block[4514-4626]"
    }, {
      "left" : "inExterns = true;",
      "right" : "inExterns = true;",
      "info" : "ExpressionStatement[4522-4539]:ExpressionStatement[4522-4539]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, externsRoot, new BuildGlobalNamespace());",
      "right" : "NodeTraversal.traverse(compiler, externsRoot, new BuildGlobalNamespace());",
      "info" : "ExpressionStatement[4546-4620]:ExpressionStatement[4546-4620]"
    }, {
      "left" : "inExterns = false;",
      "right" : "inExterns = false;",
      "info" : "ExpressionStatement[4631-4649]:ExpressionStatement[4631-4649]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new BuildGlobalNamespace());",
      "right" : "NodeTraversal.traverse(compiler, root, new BuildGlobalNamespace());",
      "info" : "ExpressionStatement[4655-4722]:ExpressionStatement[4655-4722]"
    }, {
      "left" : "generated = true;",
      "right" : "generated = true;",
      "info" : "ExpressionStatement[4727-4744]:ExpressionStatement[4727-4744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5117-5215]:Block[5117-5215]"
    }, {
      "left" : "String topVarName = getTopVarName(name);",
      "right" : "String topVarName = getTopVarName(name);",
      "info" : "VariableDeclarationStatement[5123-5163]:VariableDeclarationStatement[5123-5163]"
    }, {
      "left" : "return isGlobalVarReference(topVarName, s);",
      "right" : "return isGlobalVarReference(topVarName, s);",
      "info" : "ReturnStatement[5168-5211]:ReturnStatement[5168-5211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5468-5590]:Block[5468-5590]"
    }, {
      "left" : "int firstDotIndex = name.indexOf('.');",
      "right" : "int firstDotIndex = name.indexOf('.');",
      "info" : "VariableDeclarationStatement[5474-5512]:VariableDeclarationStatement[5474-5512]"
    }, {
      "left" : "return firstDotIndex == -1 ? name : name.substring(0, firstDotIndex);",
      "right" : "return firstDotIndex == -1 ? name : name.substring(0, firstDotIndex);",
      "info" : "ReturnStatement[5517-5586]:ReturnStatement[5517-5586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5950-6115]:Block[5950-6115]"
    }, {
      "left" : "Scope.Var v = s.getVar(name);",
      "right" : "Scope.Var v = s.getVar(name);",
      "info" : "VariableDeclarationStatement[5956-5985]:VariableDeclarationStatement[5956-5985]"
    }, {
      "left" : "if (v == null && externsScope != null)",
      "right" : "if (v == null && externsScope != null)",
      "info" : "IfStatement[5990-6073]:IfStatement[5990-6073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6029-6073]:Block[6029-6073]"
    }, {
      "left" : "v = externsScope.getVar(name);",
      "right" : "v = externsScope.getVar(name);",
      "info" : "ExpressionStatement[6037-6067]:ExpressionStatement[6037-6067]"
    }, {
      "left" : "return v != null && !v.isLocal();",
      "right" : "return v != null && !v.isLocal();",
      "info" : "ReturnStatement[6078-6111]:ReturnStatement[6078-6111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6295-6334]:Block[6295-6334]"
    }, {
      "left" : "return s.getParent() == null;",
      "right" : "return s.getParent() == null;",
      "info" : "ReturnStatement[6301-6330]:ReturnStatement[6301-6330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6653-6678]:Block[6653-6678]"
    }, {
      "left" : "this(null);",
      "right" : "this(null);",
      "info" : "ConstructorInvocation[6661-6672]:ConstructorInvocation[6661-6672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6841-6884]:Block[6841-6884]"
    }, {
      "left" : "this.nodeFilter = nodeFilter;",
      "right" : "this.nodeFilter = nodeFilter;",
      "info" : "ExpressionStatement[6849-6878]:ExpressionStatement[6849-6878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6971-9849]:Block[6971-9849]"
    }, {
      "left" : "if (nodeFilter != null && !nodeFilter.apply(n))",
      "right" : "if (nodeFilter != null && !nodeFilter.apply(n))",
      "info" : "IfStatement[6979-7052]:IfStatement[6979-7052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7027-7052]:Block[7027-7052]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7037-7044]:ReturnStatement[7037-7044]"
    }, {
      "left" : "if (externsRoot != null && n == externsRoot)",
      "right" : "if (externsRoot != null && n == externsRoot)",
      "info" : "IfStatement[7206-7297]:IfStatement[7206-7297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7251-7297]:Block[7251-7297]"
    }, {
      "left" : "externsScope = t.getScope();",
      "right" : "externsScope = t.getScope();",
      "info" : "ExpressionStatement[7261-7289]:ExpressionStatement[7261-7289]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "VariableDeclarationStatement[7305-7317]:VariableDeclarationStatement[7305-7317]"
    }, {
      "left" : "boolean isSet = false;",
      "right" : "boolean isSet = false;",
      "info" : "VariableDeclarationStatement[7324-7346]:VariableDeclarationStatement[7324-7346]"
    }, {
      "left" : "Name.Type type = Name.Type.OTHER;",
      "right" : "Name.Type type = Name.Type.OTHER;",
      "info" : "VariableDeclarationStatement[7353-7386]:VariableDeclarationStatement[7353-7386]"
    }, {
      "left" : "boolean isPropAssign = false;",
      "right" : "boolean isPropAssign = false;",
      "info" : "VariableDeclarationStatement[7393-7422]:VariableDeclarationStatement[7393-7422]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.STRING:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.getType() == Token.OBJECTLIT) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) return;\n          isSet = true;\n          type = getValueType(n.getNext());\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null ||\n                    NodeUtil.isFunctionAnonymous(parent)) return;\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.GETPROP:\n                return;\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) return;\n          break;\n        default:\n          return;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.STRING:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.getType() == Token.OBJECTLIT) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) return;\n          isSet = true;\n          type = getValueType(n.getNext());\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null ||\n                    NodeUtil.isFunctionAnonymous(parent)) return;\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.GETPROP:\n                return;\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) return;\n          break;\n        default:\n          return;\n      }",
      "info" : "SwitchStatement[7430-9420]:SwitchStatement[7430-9420]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[7461-7479]:SwitchCase[7461-7479]"
    }, {
      "left" : "name = null;",
      "right" : "name = null;",
      "info" : "ExpressionStatement[7555-7567]:ExpressionStatement[7555-7567]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.OBJECTLIT)",
      "right" : "if (parent != null && parent.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[7578-7693]:IfStatement[7578-7693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7637-7693]:Block[7637-7693]"
    }, {
      "left" : "name = getNameForObjLitKey(n);",
      "right" : "name = getNameForObjLitKey(n);",
      "info" : "ExpressionStatement[7651-7681]:ExpressionStatement[7651-7681]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[7704-7729]:IfStatement[7704-7729]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7722-7729]:ReturnStatement[7722-7729]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[7740-7753]:ExpressionStatement[7740-7753]"
    }, {
      "left" : "type = getValueType(n.getNext());",
      "right" : "type = getValueType(n.getNext());",
      "info" : "ExpressionStatement[7764-7797]:ExpressionStatement[7764-7797]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7808-7814]:BreakStatement[7808-7814]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[7823-7839]:SwitchCase[7823-7839]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[7898-8749]:IfStatement[7898-8749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7918-8749]:Block[7918-8749]"
    }, {
      "left" : "switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null ||\n                    NodeUtil.isFunctionAnonymous(parent)) return;\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n            }",
      "right" : "switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null ||\n                    NodeUtil.isFunctionAnonymous(parent)) return;\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n            }",
      "info" : "SwitchStatement[7932-8737]:SwitchStatement[7932-8737]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[7974-7989]:SwitchCase[7974-7989]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[8006-8019]:ExpressionStatement[8006-8019]"
    }, {
      "left" : "Node rvalue = n.getFirstChild();",
      "right" : "Node rvalue = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[8036-8068]:VariableDeclarationStatement[8036-8068]"
    }, {
      "left" : "type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);",
      "right" : "type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);",
      "info" : "ExpressionStatement[8085-8148]:ExpressionStatement[8085-8148]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8165-8171]:BreakStatement[8165-8171]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[8186-8204]:SwitchCase[8186-8204]"
    }, {
      "left" : "if (parent.getFirstChild() == n)",
      "right" : "if (parent.getFirstChild() == n)",
      "info" : "IfStatement[8221-8357]:IfStatement[8221-8357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8254-8357]:Block[8254-8357]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[8274-8287]:ExpressionStatement[8274-8287]"
    }, {
      "left" : "type = getValueType(n.getNext());",
      "right" : "type = getValueType(n.getNext());",
      "info" : "ExpressionStatement[8306-8339]:ExpressionStatement[8306-8339]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8374-8380]:BreakStatement[8374-8380]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[8395-8414]:SwitchCase[8395-8414]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8431-8438]:ReturnStatement[8431-8438]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[8453-8473]:SwitchCase[8453-8473]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[8490-8523]:VariableDeclarationStatement[8490-8523]"
    }, {
      "left" : "if (gramps == null ||\n                    NodeUtil.isFunctionAnonymous(parent))",
      "right" : "if (gramps == null ||\n                    NodeUtil.isFunctionAnonymous(parent))",
      "info" : "IfStatement[8540-8627]:IfStatement[8540-8627]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8620-8627]:ReturnStatement[8620-8627]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[8644-8657]:ExpressionStatement[8644-8657]"
    }, {
      "left" : "type = Name.Type.FUNCTION;",
      "right" : "type = Name.Type.FUNCTION;",
      "info" : "ExpressionStatement[8674-8700]:ExpressionStatement[8674-8700]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8717-8723]:BreakStatement[8717-8723]"
    }, {
      "left" : "name = n.getString();",
      "right" : "name = n.getString();",
      "info" : "ExpressionStatement[8760-8781]:ExpressionStatement[8760-8781]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8792-8798]:BreakStatement[8792-8798]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[8807-8826]:SwitchCase[8807-8826]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[8892-9285]:IfStatement[8892-9285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8912-9285]:Block[8912-9285]"
    }, {
      "left" : "switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.GETPROP:\n                return;\n            }",
      "right" : "switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.GETPROP:\n                return;\n            }",
      "info" : "SwitchStatement[8926-9273]:SwitchStatement[8926-9273]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[8968-8986]:SwitchCase[8968-8986]"
    }, {
      "left" : "if (parent.getFirstChild() == n)",
      "right" : "if (parent.getFirstChild() == n)",
      "info" : "IfStatement[9003-9178]:IfStatement[9003-9178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9036-9178]:Block[9036-9178]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[9056-9069]:ExpressionStatement[9056-9069]"
    }, {
      "left" : "type = getValueType(n.getNext());",
      "right" : "type = getValueType(n.getNext());",
      "info" : "ExpressionStatement[9088-9121]:ExpressionStatement[9088-9121]"
    }, {
      "left" : "isPropAssign = true;",
      "right" : "isPropAssign = true;",
      "info" : "ExpressionStatement[9140-9160]:ExpressionStatement[9140-9160]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9195-9201]:BreakStatement[9195-9201]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[9216-9235]:SwitchCase[9216-9235]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9252-9259]:ReturnStatement[9252-9259]"
    }, {
      "left" : "name = n.getQualifiedName();",
      "right" : "name = n.getQualifiedName();",
      "info" : "ExpressionStatement[9296-9324]:ExpressionStatement[9296-9324]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[9335-9360]:IfStatement[9335-9360]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9353-9360]:ReturnStatement[9353-9360]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9371-9377]:BreakStatement[9371-9377]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9386-9394]:SwitchCase[9386-9394]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9405-9412]:ReturnStatement[9405-9412]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[9477-9504]:VariableDeclarationStatement[9477-9504]"
    }, {
      "left" : "if (!isGlobalNameReference(name, scope))",
      "right" : "if (!isGlobalNameReference(name, scope))",
      "info" : "IfStatement[9511-9577]:IfStatement[9511-9577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9552-9577]:Block[9552-9577]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9562-9569]:ReturnStatement[9562-9569]"
    }, {
      "left" : "if (isSet)",
      "right" : "if (isSet)",
      "info" : "IfStatement[9585-9843]:IfStatement[9585-9843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9596-9789]:Block[9596-9789]"
    }, {
      "left" : "if (isGlobalScope(scope))",
      "right" : "if (isGlobalScope(scope))",
      "info" : "IfStatement[9606-9781]:IfStatement[9606-9781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9632-9714]:Block[9632-9714]"
    }, {
      "left" : "handleSetFromGlobal(t, n, parent, name, isPropAssign, type);",
      "right" : "handleSetFromGlobal(t, n, parent, name, isPropAssign, type);",
      "info" : "ExpressionStatement[9644-9704]:ExpressionStatement[9644-9704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9720-9781]:Block[9720-9781]"
    }, {
      "left" : "handleSetFromLocal(t, n, parent, name);",
      "right" : "handleSetFromLocal(t, n, parent, name);",
      "info" : "ExpressionStatement[9732-9771]:ExpressionStatement[9732-9771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9795-9843]:Block[9795-9843]"
    }, {
      "left" : "handleGet(t, n, parent, name);",
      "right" : "handleGet(t, n, parent, name);",
      "info" : "ExpressionStatement[9805-9835]:ExpressionStatement[9805-9835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10614-12269]:Block[10614-12269]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[10700-10728]:VariableDeclarationStatement[10700-10728]"
    }, {
      "left" : "for (Node walker = parent.getFirstChild(); walker != n;\n           walker = walker.getNext().getNext())",
      "right" : "for (Node walker = parent.getFirstChild(); walker != n;\n           walker = walker.getNext().getNext())",
      "info" : "ForStatement[10735-10911]:ForStatement[10735-10911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10839-10911]:Block[10839-10911]"
    }, {
      "left" : "if (walker == null)",
      "right" : "if (walker == null)",
      "info" : "IfStatement[10849-10903]:IfStatement[10849-10903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10869-10903]:Block[10869-10903]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10881-10893]:ReturnStatement[10881-10893]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[10918-10951]:VariableDeclarationStatement[10918-10951]"
    }, {
      "left" : "if (gramps == null)",
      "right" : "if (gramps == null)",
      "info" : "IfStatement[10958-11008]:IfStatement[10958-11008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10978-11008]:Block[10978-11008]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10988-11000]:ReturnStatement[10988-11000]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "VariableDeclarationStatement[11016-11028]:VariableDeclarationStatement[11016-11028]"
    }, {
      "left" : "switch (gramps.getType()) {\n        case Token.NAME:\n          // VAR\n          //   NAME (gramps)\n          //     OBJLIT (parent)\n          //       STRING (n)\n          Node greatGramps = gramps.getParent();\n          if (greatGramps == null ||\n              greatGramps.getType() != Token.VAR) {\n            return null;\n          }\n          name = gramps.getString();\n          break;\n        case Token.ASSIGN:\n          // ASSIGN (gramps)\n          //   NAME|GETPROP\n          //   OBJLIT (parent)\n          //     STRING (n)\n          Node lvalue = gramps.getFirstChild();\n          name = lvalue.getQualifiedName();\n          break;\n        case Token.OBJECTLIT:\n          // OBJLIT (gramps)\n          //   STRING\n          //   OBJLIT (parent)\n          //     STRING (n)\n          Node key = gramps.getChildBefore(parent);\n          if (key.getType() == Token.STRING) {\n            name = getNameForObjLitKey(key);\n          } else {\n            return null;\n          }\n          break;\n        default:\n          return null;\n      }",
      "right" : "switch (gramps.getType()) {\n        case Token.NAME:\n          // VAR\n          //   NAME (gramps)\n          //     OBJLIT (parent)\n          //       STRING (n)\n          Node greatGramps = gramps.getParent();\n          if (greatGramps == null ||\n              greatGramps.getType() != Token.VAR) {\n            return null;\n          }\n          name = gramps.getString();\n          break;\n        case Token.ASSIGN:\n          // ASSIGN (gramps)\n          //   NAME|GETPROP\n          //   OBJLIT (parent)\n          //     STRING (n)\n          Node lvalue = gramps.getFirstChild();\n          name = lvalue.getQualifiedName();\n          break;\n        case Token.OBJECTLIT:\n          // OBJLIT (gramps)\n          //   STRING\n          //   OBJLIT (parent)\n          //     STRING (n)\n          Node key = gramps.getChildBefore(parent);\n          if (key.getType() == Token.STRING) {\n            name = getNameForObjLitKey(key);\n          } else {\n            return null;\n          }\n          break;\n        default:\n          return null;\n      }",
      "info" : "SwitchStatement[11035-12082]:SwitchStatement[11035-12082]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[11071-11087]:SwitchCase[11071-11087]"
    }, {
      "left" : "Node greatGramps = gramps.getParent();",
      "right" : "Node greatGramps = gramps.getParent();",
      "info" : "VariableDeclarationStatement[11207-11245]:VariableDeclarationStatement[11207-11245]"
    }, {
      "left" : "if (greatGramps == null ||\n              greatGramps.getType() != Token.VAR)",
      "right" : "if (greatGramps == null ||\n              greatGramps.getType() != Token.VAR)",
      "info" : "IfStatement[11256-11371]:IfStatement[11256-11371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11333-11371]:Block[11333-11371]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11347-11359]:ReturnStatement[11347-11359]"
    }, {
      "left" : "name = gramps.getString();",
      "right" : "name = gramps.getString();",
      "info" : "ExpressionStatement[11382-11408]:ExpressionStatement[11382-11408]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11419-11425]:BreakStatement[11419-11425]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[11434-11452]:SwitchCase[11434-11452]"
    }, {
      "left" : "Node lvalue = gramps.getFirstChild();",
      "right" : "Node lvalue = gramps.getFirstChild();",
      "info" : "VariableDeclarationStatement[11579-11616]:VariableDeclarationStatement[11579-11616]"
    }, {
      "left" : "name = lvalue.getQualifiedName();",
      "right" : "name = lvalue.getQualifiedName();",
      "info" : "ExpressionStatement[11627-11660]:ExpressionStatement[11627-11660]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11671-11677]:BreakStatement[11671-11677]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[11686-11707]:SwitchCase[11686-11707]"
    }, {
      "left" : "Node key = gramps.getChildBefore(parent);",
      "right" : "Node key = gramps.getChildBefore(parent);",
      "info" : "VariableDeclarationStatement[11828-11869]:VariableDeclarationStatement[11828-11869]"
    }, {
      "left" : "if (key.getType() == Token.STRING)",
      "right" : "if (key.getType() == Token.STRING)",
      "info" : "IfStatement[11880-12017]:IfStatement[11880-12017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11915-11973]:Block[11915-11973]"
    }, {
      "left" : "name = getNameForObjLitKey(key);",
      "right" : "name = getNameForObjLitKey(key);",
      "info" : "ExpressionStatement[11929-11961]:ExpressionStatement[11929-11961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11979-12017]:Block[11979-12017]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11993-12005]:ReturnStatement[11993-12005]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12028-12034]:BreakStatement[12028-12034]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12043-12051]:SwitchCase[12043-12051]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12062-12074]:ReturnStatement[12062-12074]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[12089-12244]:IfStatement[12089-12244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12107-12244]:Block[12107-12244]"
    }, {
      "left" : "String key = n.getString();",
      "right" : "String key = n.getString();",
      "info" : "VariableDeclarationStatement[12117-12144]:VariableDeclarationStatement[12117-12144]"
    }, {
      "left" : "if (TokenStream.isJSIdentifier(key))",
      "right" : "if (TokenStream.isJSIdentifier(key))",
      "info" : "IfStatement[12153-12236]:IfStatement[12153-12236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12190-12236]:Block[12190-12236]"
    }, {
      "left" : "return name + '.' + key;",
      "right" : "return name + '.' + key;",
      "info" : "ReturnStatement[12202-12226]:ReturnStatement[12202-12226]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12251-12263]:ReturnStatement[12251-12263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12496-13471]:Block[12496-13471]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.OBJECTLIT:\n          return Name.Type.OBJECTLIT;\n        case Token.FUNCTION:\n          return Name.Type.FUNCTION;\n        case Token.OR:\n          // Recurse on the second value. If the first value were an object\n          // literal or function, then the OR would be meaningless and the\n          // second value would be dead code. Assume that if the second value\n          // is an object literal or function, then the first value will also\n          // evaluate to one when it doesn't evaluate to false.\n          return getValueType(n.getLastChild());\n        case Token.HOOK:\n          // The same line of reasoning used for the OR case applies here.\n          Node second = n.getFirstChild().getNext();\n          Name.Type t = getValueType(second);\n          if (t != Name.Type.OTHER) return t;\n          Node third = second.getNext();\n          return getValueType(third);\n      }",
      "right" : "switch (n.getType()) {\n        case Token.OBJECTLIT:\n          return Name.Type.OBJECTLIT;\n        case Token.FUNCTION:\n          return Name.Type.FUNCTION;\n        case Token.OR:\n          // Recurse on the second value. If the first value were an object\n          // literal or function, then the OR would be meaningless and the\n          // second value would be dead code. Assume that if the second value\n          // is an object literal or function, then the first value will also\n          // evaluate to one when it doesn't evaluate to false.\n          return getValueType(n.getLastChild());\n        case Token.HOOK:\n          // The same line of reasoning used for the OR case applies here.\n          Node second = n.getFirstChild().getNext();\n          Name.Type t = getValueType(second);\n          if (t != Name.Type.OTHER) return t;\n          Node third = second.getNext();\n          return getValueType(third);\n      }",
      "info" : "SwitchStatement[12504-13435]:SwitchStatement[12504-13435]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[12535-12556]:SwitchCase[12535-12556]"
    }, {
      "left" : "return Name.Type.OBJECTLIT;",
      "right" : "return Name.Type.OBJECTLIT;",
      "info" : "ReturnStatement[12567-12594]:ReturnStatement[12567-12594]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[12603-12623]:SwitchCase[12603-12623]"
    }, {
      "left" : "return Name.Type.FUNCTION;",
      "right" : "return Name.Type.FUNCTION;",
      "info" : "ReturnStatement[12634-12660]:ReturnStatement[12634-12660]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[12669-12683]:SwitchCase[12669-12683]"
    }, {
      "left" : "return getValueType(n.getLastChild());",
      "right" : "return getValueType(n.getLastChild());",
      "info" : "ReturnStatement[13065-13103]:ReturnStatement[13065-13103]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[13112-13128]:SwitchCase[13112-13128]"
    }, {
      "left" : "Node second = n.getFirstChild().getNext();",
      "right" : "Node second = n.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[13214-13256]:VariableDeclarationStatement[13214-13256]"
    }, {
      "left" : "Name.Type t = getValueType(second);",
      "right" : "Name.Type t = getValueType(second);",
      "info" : "VariableDeclarationStatement[13267-13302]:VariableDeclarationStatement[13267-13302]"
    }, {
      "left" : "if (t != Name.Type.OTHER)",
      "right" : "if (t != Name.Type.OTHER)",
      "info" : "IfStatement[13313-13348]:IfStatement[13313-13348]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[13339-13348]:ReturnStatement[13339-13348]"
    }, {
      "left" : "Node third = second.getNext();",
      "right" : "Node third = second.getNext();",
      "info" : "VariableDeclarationStatement[13359-13389]:VariableDeclarationStatement[13359-13389]"
    }, {
      "left" : "return getValueType(third);",
      "right" : "return getValueType(third);",
      "info" : "ReturnStatement[13400-13427]:ReturnStatement[13400-13427]"
    }, {
      "left" : "return Name.Type.OTHER;",
      "right" : "return Name.Type.OTHER;",
      "info" : "ReturnStatement[13442-13465]:ReturnStatement[13442-13465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14149-14792]:Block[14149-14792]"
    }, {
      "left" : "if (maybeHandlePrototypePrefix(t, n, parent, name))",
      "right" : "if (maybeHandlePrototypePrefix(t, n, parent, name))",
      "info" : "IfStatement[14157-14216]:IfStatement[14157-14216]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14209-14216]:ReturnStatement[14209-14216]"
    }, {
      "left" : "Name nameObj = getOrCreateName(name);",
      "right" : "Name nameObj = getOrCreateName(name);",
      "info" : "VariableDeclarationStatement[14224-14261]:VariableDeclarationStatement[14224-14261]"
    }, {
      "left" : "nameObj.type = type;",
      "right" : "nameObj.type = type;",
      "info" : "ExpressionStatement[14268-14288]:ExpressionStatement[14268-14288]"
    }, {
      "left" : "Ref set = new Ref(t, n, Ref.Type.SET_FROM_GLOBAL);",
      "right" : "Ref set = new Ref(t, n, Ref.Type.SET_FROM_GLOBAL);",
      "info" : "VariableDeclarationStatement[14296-14346]:VariableDeclarationStatement[14296-14346]"
    }, {
      "left" : "nameObj.addRef(set);",
      "right" : "nameObj.addRef(set);",
      "info" : "ExpressionStatement[14353-14373]:ExpressionStatement[14353-14373]"
    }, {
      "left" : "if (isNestedAssign(parent))",
      "right" : "if (isNestedAssign(parent))",
      "info" : "IfStatement[14381-14786]:IfStatement[14381-14786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14409-14610]:Block[14409-14610]"
    }, {
      "left" : "Ref get = new Ref(t, n, Ref.Type.ALIASING_GET);",
      "right" : "Ref get = new Ref(t, n, Ref.Type.ALIASING_GET);",
      "info" : "VariableDeclarationStatement[14493-14540]:VariableDeclarationStatement[14493-14540]"
    }, {
      "left" : "nameObj.addRef(get);",
      "right" : "nameObj.addRef(get);",
      "info" : "ExpressionStatement[14549-14569]:ExpressionStatement[14549-14569]"
    }, {
      "left" : "Ref.markTwins(set, get);",
      "right" : "Ref.markTwins(set, get);",
      "info" : "ExpressionStatement[14578-14602]:ExpressionStatement[14578-14602]"
    }, {
      "left" : "if (isConstructorOrEnumDeclaration(n, parent))",
      "right" : "if (isConstructorOrEnumDeclaration(n, parent))",
      "info" : "IfStatement[14616-14786]:IfStatement[14616-14786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14663-14786]:Block[14663-14786]"
    }, {
      "left" : "nameObj.setIsClassOrEnum();",
      "right" : "nameObj.setIsClassOrEnum();",
      "info" : "ExpressionStatement[14751-14778]:ExpressionStatement[14751-14778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15340-16139]:Block[15340-16139]"
    }, {
      "left" : "JSDocInfo info;",
      "right" : "JSDocInfo info;",
      "info" : "VariableDeclarationStatement[15348-15363]:VariableDeclarationStatement[15348-15363]"
    }, {
      "left" : "int valueNodeType;",
      "right" : "int valueNodeType;",
      "info" : "VariableDeclarationStatement[15370-15388]:VariableDeclarationStatement[15370-15388]"
    }, {
      "left" : "switch (parent.getType()) {\n        case Token.ASSIGN:\n          info = parent.getJSDocInfo();\n          valueNodeType = n.getNext().getType();\n          break;\n        case Token.VAR:\n          info = n.getJSDocInfo();\n          if (info == null) {\n            info = parent.getJSDocInfo();\n          }\n          Node valueNode = n.getFirstChild();\n          valueNodeType = valueNode != null ? valueNode.getType() : Token.VOID;\n          break;\n        default:\n          return false;\n      }",
      "right" : "switch (parent.getType()) {\n        case Token.ASSIGN:\n          info = parent.getJSDocInfo();\n          valueNodeType = n.getNext().getType();\n          break;\n        case Token.VAR:\n          info = n.getJSDocInfo();\n          if (info == null) {\n            info = parent.getJSDocInfo();\n          }\n          Node valueNode = n.getFirstChild();\n          valueNodeType = valueNode != null ? valueNode.getType() : Token.VOID;\n          break;\n        default:\n          return false;\n      }",
      "info" : "SwitchStatement[15395-15890]:SwitchStatement[15395-15890]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[15431-15449]:SwitchCase[15431-15449]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[15460-15489]:ExpressionStatement[15460-15489]"
    }, {
      "left" : "valueNodeType = n.getNext().getType();",
      "right" : "valueNodeType = n.getNext().getType();",
      "info" : "ExpressionStatement[15500-15538]:ExpressionStatement[15500-15538]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15549-15555]:BreakStatement[15549-15555]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[15564-15579]:SwitchCase[15564-15579]"
    }, {
      "left" : "info = n.getJSDocInfo();",
      "right" : "info = n.getJSDocInfo();",
      "info" : "ExpressionStatement[15590-15614]:ExpressionStatement[15590-15614]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[15625-15698]:IfStatement[15625-15698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15643-15698]:Block[15643-15698]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[15657-15686]:ExpressionStatement[15657-15686]"
    }, {
      "left" : "Node valueNode = n.getFirstChild();",
      "right" : "Node valueNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[15709-15744]:VariableDeclarationStatement[15709-15744]"
    }, {
      "left" : "valueNodeType = valueNode != null ? valueNode.getType() : Token.VOID;",
      "right" : "valueNodeType = valueNode != null ? valueNode.getType() : Token.VOID;",
      "info" : "ExpressionStatement[15755-15824]:ExpressionStatement[15755-15824]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15835-15841]:BreakStatement[15835-15841]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[15850-15858]:SwitchCase[15850-15858]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15869-15882]:ReturnStatement[15869-15882]"
    }, {
      "left" : "return info != null &&\n             (info.isConstructor() && valueNodeType == Token.FUNCTION ||\n              info.hasEnumParameterType() && valueNodeType == Token.OBJECTLIT);",
      "right" : "return info != null &&\n             (info.isConstructor() && valueNodeType == Token.FUNCTION ||\n              info.hasEnumParameterType() && valueNodeType == Token.OBJECTLIT);",
      "info" : "ReturnStatement[15958-16133]:ReturnStatement[15958-16133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16575-17004]:Block[16575-17004]"
    }, {
      "left" : "if (maybeHandlePrototypePrefix(t, n, parent, name))",
      "right" : "if (maybeHandlePrototypePrefix(t, n, parent, name))",
      "info" : "IfStatement[16583-16642]:IfStatement[16583-16642]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16635-16642]:ReturnStatement[16635-16642]"
    }, {
      "left" : "Name node = getOrCreateName(name);",
      "right" : "Name node = getOrCreateName(name);",
      "info" : "VariableDeclarationStatement[16650-16684]:VariableDeclarationStatement[16650-16684]"
    }, {
      "left" : "Ref set = new Ref(t, n, Ref.Type.SET_FROM_LOCAL);",
      "right" : "Ref set = new Ref(t, n, Ref.Type.SET_FROM_LOCAL);",
      "info" : "VariableDeclarationStatement[16691-16740]:VariableDeclarationStatement[16691-16740]"
    }, {
      "left" : "node.addRef(set);",
      "right" : "node.addRef(set);",
      "info" : "ExpressionStatement[16747-16764]:ExpressionStatement[16747-16764]"
    }, {
      "left" : "if (isNestedAssign(parent))",
      "right" : "if (isNestedAssign(parent))",
      "info" : "IfStatement[16772-16998]:IfStatement[16772-16998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16800-16998]:Block[16800-16998]"
    }, {
      "left" : "Ref get = new Ref(t, n, Ref.Type.ALIASING_GET);",
      "right" : "Ref get = new Ref(t, n, Ref.Type.ALIASING_GET);",
      "info" : "VariableDeclarationStatement[16884-16931]:VariableDeclarationStatement[16884-16931]"
    }, {
      "left" : "node.addRef(get);",
      "right" : "node.addRef(get);",
      "info" : "ExpressionStatement[16940-16957]:ExpressionStatement[16940-16957]"
    }, {
      "left" : "Ref.markTwins(set, get);",
      "right" : "Ref.markTwins(set, get);",
      "info" : "ExpressionStatement[16966-16990]:ExpressionStatement[16966-16990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17379-19067]:Block[17379-19067]"
    }, {
      "left" : "if (maybeHandlePrototypePrefix(t, n, parent, name))",
      "right" : "if (maybeHandlePrototypePrefix(t, n, parent, name))",
      "info" : "IfStatement[17387-17446]:IfStatement[17387-17446]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17439-17446]:ReturnStatement[17439-17446]"
    }, {
      "left" : "Ref.Type type = Ref.Type.DIRECT_GET;",
      "right" : "Ref.Type type = Ref.Type.DIRECT_GET;",
      "info" : "VariableDeclarationStatement[17454-17490]:VariableDeclarationStatement[17454-17490]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[17497-19017]:IfStatement[17497-19017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17517-19017]:Block[17517-19017]"
    }, {
      "left" : "switch (parent.getType()) {\n          case Token.IF:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            break;\n          case Token.CALL:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.CALL_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.NEW:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.OR:\n          case Token.AND:\n            // This node is x or y in (x||y) or (x&&y). We only know that an\n            // alias is not getting created for this name if the result is used\n            // in a boolean context or assigned to the same name\n            // (e.g. var a = a || {}).\n            type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            break;\n          case Token.HOOK:\n            if (n != parent.getFirstChild()) {\n              // This node is y or z in (x?y:z). We only know that an alias is\n              // not getting created for this name if the result is assigned to\n              // the same name (e.g. var a = a ? a : {}).\n              type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            }\n            break;\n          default:\n            type = Ref.Type.ALIASING_GET;\n            break;\n        }",
      "right" : "switch (parent.getType()) {\n          case Token.IF:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            break;\n          case Token.CALL:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.CALL_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.NEW:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.OR:\n          case Token.AND:\n            // This node is x or y in (x||y) or (x&&y). We only know that an\n            // alias is not getting created for this name if the result is used\n            // in a boolean context or assigned to the same name\n            // (e.g. var a = a || {}).\n            type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            break;\n          case Token.HOOK:\n            if (n != parent.getFirstChild()) {\n              // This node is y or z in (x?y:z). We only know that an alias is\n              // not getting created for this name if the result is assigned to\n              // the same name (e.g. var a = a ? a : {}).\n              type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            }\n            break;\n          default:\n            type = Ref.Type.ALIASING_GET;\n            break;\n        }",
      "info" : "SwitchStatement[17527-19009]:SwitchStatement[17527-19009]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[17565-17579]:SwitchCase[17565-17579]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[17590-17608]:SwitchCase[17590-17608]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[17619-17635]:SwitchCase[17619-17635]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[17646-17661]:SwitchCase[17646-17661]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[17672-17690]:SwitchCase[17672-17690]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[17701-17716]:SwitchCase[17701-17716]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[17727-17742]:SwitchCase[17727-17742]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17755-17761]:BreakStatement[17755-17761]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[17772-17788]:SwitchCase[17772-17788]"
    }, {
      "left" : "type = n == parent.getFirstChild()\n                   ? Ref.Type.CALL_GET\n                   : Ref.Type.ALIASING_GET;",
      "right" : "type = n == parent.getFirstChild()\n                   ? Ref.Type.CALL_GET\n                   : Ref.Type.ALIASING_GET;",
      "info" : "ExpressionStatement[17801-17918]:ExpressionStatement[17801-17918]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17931-17937]:BreakStatement[17931-17937]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[17948-17963]:SwitchCase[17948-17963]"
    }, {
      "left" : "type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;",
      "right" : "type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;",
      "info" : "ExpressionStatement[17976-18095]:ExpressionStatement[17976-18095]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18108-18114]:BreakStatement[18108-18114]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[18125-18139]:SwitchCase[18125-18139]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[18150-18165]:SwitchCase[18150-18165]"
    }, {
      "left" : "type = determineGetTypeForHookOrBooleanExpr(t, parent, name);",
      "right" : "type = determineGetTypeForHookOrBooleanExpr(t, parent, name);",
      "info" : "ExpressionStatement[18439-18500]:ExpressionStatement[18439-18500]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18513-18519]:BreakStatement[18513-18519]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[18530-18546]:SwitchCase[18530-18546]"
    }, {
      "left" : "if (n != parent.getFirstChild())",
      "right" : "if (n != parent.getFirstChild())",
      "info" : "IfStatement[18559-18900]:IfStatement[18559-18900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18592-18900]:Block[18592-18900]"
    }, {
      "left" : "type = determineGetTypeForHookOrBooleanExpr(t, parent, name);",
      "right" : "type = determineGetTypeForHookOrBooleanExpr(t, parent, name);",
      "info" : "ExpressionStatement[18825-18886]:ExpressionStatement[18825-18886]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18913-18919]:BreakStatement[18913-18919]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18930-18938]:SwitchCase[18930-18938]"
    }, {
      "left" : "type = Ref.Type.ALIASING_GET;",
      "right" : "type = Ref.Type.ALIASING_GET;",
      "info" : "ExpressionStatement[18951-18980]:ExpressionStatement[18951-18980]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18993-18999]:BreakStatement[18993-18999]"
    }, {
      "left" : "handleGet(t, n, parent, name, type);",
      "right" : "handleGet(t, n, parent, name, type);",
      "info" : "ExpressionStatement[19025-19061]:ExpressionStatement[19025-19061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19748-20935]:Block[19748-20935]"
    }, {
      "left" : "Node prev = parent;",
      "right" : "Node prev = parent;",
      "info" : "VariableDeclarationStatement[19756-19775]:VariableDeclarationStatement[19756-19775]"
    }, {
      "left" : "for (Node anc : parent.getAncestors())",
      "right" : "for (Node anc : parent.getAncestors())",
      "info" : "EnhancedForStatement[19782-20893]:EnhancedForStatement[19782-20893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19821-20893]:Block[19821-20893]"
    }, {
      "left" : "switch (anc.getType()) {\n          case Token.EXPR_RESULT:\n          case Token.VAR:\n          case Token.IF:\n          case Token.WHILE:\n          case Token.FOR:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            return Ref.Type.DIRECT_GET;\n          case Token.HOOK:\n            if (anc.getFirstChild() == prev) {\n              return Ref.Type.DIRECT_GET;\n            }\n            break;\n          case Token.ASSIGN:\n            if (!name.equals(anc.getFirstChild().getQualifiedName())) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.NAME:  // a variable declaration\n            if (!name.equals(anc.getString())) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.CALL:\n            if (anc.getFirstChild() != prev) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n        }",
      "right" : "switch (anc.getType()) {\n          case Token.EXPR_RESULT:\n          case Token.VAR:\n          case Token.IF:\n          case Token.WHILE:\n          case Token.FOR:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            return Ref.Type.DIRECT_GET;\n          case Token.HOOK:\n            if (anc.getFirstChild() == prev) {\n              return Ref.Type.DIRECT_GET;\n            }\n            break;\n          case Token.ASSIGN:\n            if (!name.equals(anc.getFirstChild().getQualifiedName())) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.NAME:  // a variable declaration\n            if (!name.equals(anc.getString())) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.CALL:\n            if (anc.getFirstChild() != prev) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n        }",
      "info" : "SwitchStatement[19831-20865]:SwitchStatement[19831-20865]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[19866-19889]:SwitchCase[19866-19889]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[19900-19915]:SwitchCase[19900-19915]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[19926-19940]:SwitchCase[19926-19940]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[19951-19968]:SwitchCase[19951-19968]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[19979-19994]:SwitchCase[19979-19994]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[20005-20023]:SwitchCase[20005-20023]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[20034-20050]:SwitchCase[20034-20050]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[20061-20076]:SwitchCase[20061-20076]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[20087-20105]:SwitchCase[20087-20105]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[20116-20131]:SwitchCase[20116-20131]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[20142-20157]:SwitchCase[20142-20157]"
    }, {
      "left" : "return Ref.Type.DIRECT_GET;",
      "right" : "return Ref.Type.DIRECT_GET;",
      "info" : "ReturnStatement[20170-20197]:ReturnStatement[20170-20197]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[20208-20224]:SwitchCase[20208-20224]"
    }, {
      "left" : "if (anc.getFirstChild() == prev)",
      "right" : "if (anc.getFirstChild() == prev)",
      "info" : "IfStatement[20237-20327]:IfStatement[20237-20327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20270-20327]:Block[20270-20327]"
    }, {
      "left" : "return Ref.Type.DIRECT_GET;",
      "right" : "return Ref.Type.DIRECT_GET;",
      "info" : "ReturnStatement[20286-20313]:ReturnStatement[20286-20313]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20340-20346]:BreakStatement[20340-20346]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[20357-20375]:SwitchCase[20357-20375]"
    }, {
      "left" : "if (!name.equals(anc.getFirstChild().getQualifiedName()))",
      "right" : "if (!name.equals(anc.getFirstChild().getQualifiedName()))",
      "info" : "IfStatement[20388-20505]:IfStatement[20388-20505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20446-20505]:Block[20446-20505]"
    }, {
      "left" : "return Ref.Type.ALIASING_GET;",
      "right" : "return Ref.Type.ALIASING_GET;",
      "info" : "ReturnStatement[20462-20491]:ReturnStatement[20462-20491]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20518-20524]:BreakStatement[20518-20524]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[20535-20551]:SwitchCase[20535-20551]"
    }, {
      "left" : "if (!name.equals(anc.getString()))",
      "right" : "if (!name.equals(anc.getString()))",
      "info" : "IfStatement[20591-20685]:IfStatement[20591-20685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20626-20685]:Block[20626-20685]"
    }, {
      "left" : "return Ref.Type.ALIASING_GET;",
      "right" : "return Ref.Type.ALIASING_GET;",
      "info" : "ReturnStatement[20642-20671]:ReturnStatement[20642-20671]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20698-20704]:BreakStatement[20698-20704]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[20715-20731]:SwitchCase[20715-20731]"
    }, {
      "left" : "if (anc.getFirstChild() != prev)",
      "right" : "if (anc.getFirstChild() != prev)",
      "info" : "IfStatement[20744-20836]:IfStatement[20744-20836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20777-20836]:Block[20777-20836]"
    }, {
      "left" : "return Ref.Type.ALIASING_GET;",
      "right" : "return Ref.Type.ALIASING_GET;",
      "info" : "ReturnStatement[20793-20822]:ReturnStatement[20793-20822]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20849-20855]:BreakStatement[20849-20855]"
    }, {
      "left" : "prev = anc;",
      "right" : "prev = anc;",
      "info" : "ExpressionStatement[20874-20885]:ExpressionStatement[20874-20885]"
    }, {
      "left" : "return Ref.Type.ALIASING_GET;",
      "right" : "return Ref.Type.ALIASING_GET;",
      "info" : "ReturnStatement[20900-20929]:ReturnStatement[20900-20929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21384-21549]:Block[21384-21549]"
    }, {
      "left" : "Name node = getOrCreateName(name);",
      "right" : "Name node = getOrCreateName(name);",
      "info" : "VariableDeclarationStatement[21392-21426]:VariableDeclarationStatement[21392-21426]"
    }, {
      "left" : "node.addRef(new Ref(t, n, type));",
      "right" : "node.addRef(new Ref(t, n, type));",
      "info" : "ExpressionStatement[21510-21543]:ExpressionStatement[21510-21543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22135-23237]:Block[22135-23237]"
    }, {
      "left" : "int numLevelsToRemove;",
      "right" : "int numLevelsToRemove;",
      "info" : "VariableDeclarationStatement[22321-22343]:VariableDeclarationStatement[22321-22343]"
    }, {
      "left" : "String prefix;",
      "right" : "String prefix;",
      "info" : "VariableDeclarationStatement[22350-22364]:VariableDeclarationStatement[22350-22364]"
    }, {
      "left" : "if (name.endsWith(\".prototype\"))",
      "right" : "if (name.endsWith(\".prototype\"))",
      "info" : "IfStatement[22371-22832]:IfStatement[22371-22832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22404-22500]:Block[22404-22500]"
    }, {
      "left" : "numLevelsToRemove = 1;",
      "right" : "numLevelsToRemove = 1;",
      "info" : "ExpressionStatement[22414-22436]:ExpressionStatement[22414-22436]"
    }, {
      "left" : "prefix = name.substring(0, name.length() - 10);",
      "right" : "prefix = name.substring(0, name.length() - 10);",
      "info" : "ExpressionStatement[22445-22492]:ExpressionStatement[22445-22492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22506-22832]:Block[22506-22832]"
    }, {
      "left" : "int i = name.indexOf(\".prototype.\");",
      "right" : "int i = name.indexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[22516-22552]:VariableDeclarationStatement[22516-22552]"
    }, {
      "left" : "if (i == -1)",
      "right" : "if (i == -1)",
      "info" : "IfStatement[22561-22609]:IfStatement[22561-22609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22574-22609]:Block[22574-22609]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22586-22599]:ReturnStatement[22586-22599]"
    }, {
      "left" : "prefix = name.substring(0, i);",
      "right" : "prefix = name.substring(0, i);",
      "info" : "ExpressionStatement[22618-22648]:ExpressionStatement[22618-22648]"
    }, {
      "left" : "numLevelsToRemove = 2;",
      "right" : "numLevelsToRemove = 2;",
      "info" : "ExpressionStatement[22657-22679]:ExpressionStatement[22657-22679]"
    }, {
      "left" : "i = name.indexOf('.', i + 11);",
      "right" : "i = name.indexOf('.', i + 11);",
      "info" : "ExpressionStatement[22688-22718]:ExpressionStatement[22688-22718]"
    }, {
      "left" : "while (i >= 0)",
      "right" : "while (i >= 0)",
      "info" : "WhileStatement[22727-22824]:WhileStatement[22727-22824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22742-22824]:Block[22742-22824]"
    }, {
      "left" : "numLevelsToRemove++;",
      "right" : "numLevelsToRemove++;",
      "info" : "ExpressionStatement[22754-22774]:ExpressionStatement[22754-22774]"
    }, {
      "left" : "i = name.indexOf('.', i + 1);",
      "right" : "i = name.indexOf('.', i + 1);",
      "info" : "ExpressionStatement[22785-22814]:ExpressionStatement[22785-22814]"
    }, {
      "left" : "if (parent != null && NodeUtil.isObjectLitKey(n, parent))",
      "right" : "if (parent != null && NodeUtil.isObjectLitKey(n, parent))",
      "info" : "IfStatement[22840-23036]:IfStatement[22840-23036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22898-23036]:Block[22898-23036]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23016-23028]:ReturnStatement[23016-23028]"
    }, {
      "left" : "for (int i = 0; i < numLevelsToRemove; i++)",
      "right" : "for (int i = 0; i < numLevelsToRemove; i++)",
      "info" : "ForStatement[23044-23148]:ForStatement[23044-23148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23088-23148]:Block[23088-23148]"
    }, {
      "left" : "parent = n;",
      "right" : "parent = n;",
      "info" : "ExpressionStatement[23098-23109]:ExpressionStatement[23098-23109]"
    }, {
      "left" : "n = n.getFirstChild();",
      "right" : "n = n.getFirstChild();",
      "info" : "ExpressionStatement[23118-23140]:ExpressionStatement[23118-23140]"
    }, {
      "left" : "handleGet(t, n, parent, prefix, Ref.Type.PROTOTYPE_GET);",
      "right" : "handleGet(t, n, parent, prefix, Ref.Type.PROTOTYPE_GET);",
      "info" : "ExpressionStatement[23156-23212]:ExpressionStatement[23156-23212]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23219-23231]:ReturnStatement[23219-23231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23566-23683]:Block[23566-23683]"
    }, {
      "left" : "return parent.getType() == Token.ASSIGN &&\n             !NodeUtil.isExpressionNode(parent.getParent());",
      "right" : "return parent.getType() == Token.ASSIGN &&\n             !NodeUtil.isExpressionNode(parent.getParent());",
      "info" : "ReturnStatement[23574-23677]:ReturnStatement[23574-23677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24017-24494]:Block[24017-24494]"
    }, {
      "left" : "Name node = nameMap.get(name);",
      "right" : "Name node = nameMap.get(name);",
      "info" : "VariableDeclarationStatement[24025-24055]:VariableDeclarationStatement[24025-24055]"
    }, {
      "left" : "if (node == null)",
      "right" : "if (node == null)",
      "info" : "IfStatement[24062-24469]:IfStatement[24062-24469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24080-24469]:Block[24080-24469]"
    }, {
      "left" : "int i = name.lastIndexOf('.');",
      "right" : "int i = name.lastIndexOf('.');",
      "info" : "VariableDeclarationStatement[24090-24120]:VariableDeclarationStatement[24090-24120]"
    }, {
      "left" : "if (i >= 0)",
      "right" : "if (i >= 0)",
      "info" : "IfStatement[24129-24428]:IfStatement[24129-24428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24141-24328]:Block[24141-24328]"
    }, {
      "left" : "String parentName = name.substring(0, i);",
      "right" : "String parentName = name.substring(0, i);",
      "info" : "VariableDeclarationStatement[24153-24194]:VariableDeclarationStatement[24153-24194]"
    }, {
      "left" : "Name parent = getOrCreateName(parentName);",
      "right" : "Name parent = getOrCreateName(parentName);",
      "info" : "VariableDeclarationStatement[24205-24247]:VariableDeclarationStatement[24205-24247]"
    }, {
      "left" : "node = parent.addProperty(name.substring(i + 1), inExterns);",
      "right" : "node = parent.addProperty(name.substring(i + 1), inExterns);",
      "info" : "ExpressionStatement[24258-24318]:ExpressionStatement[24258-24318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24334-24428]:Block[24334-24428]"
    }, {
      "left" : "node = new Name(name, null, inExterns);",
      "right" : "node = new Name(name, null, inExterns);",
      "info" : "ExpressionStatement[24346-24385]:ExpressionStatement[24346-24385]"
    }, {
      "left" : "globalNames.add(node);",
      "right" : "globalNames.add(node);",
      "info" : "ExpressionStatement[24396-24418]:ExpressionStatement[24396-24418]"
    }, {
      "left" : "nameMap.put(name, node);",
      "right" : "nameMap.put(name, node);",
      "info" : "ExpressionStatement[24437-24461]:ExpressionStatement[24437-24461]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[24476-24488]:ReturnStatement[24476-24488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25376-25499]:Block[25376-25499]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[25384-25401]:ExpressionStatement[25384-25401]"
    }, {
      "left" : "this.parent = parent;",
      "right" : "this.parent = parent;",
      "info" : "ExpressionStatement[25408-25429]:ExpressionStatement[25408-25429]"
    }, {
      "left" : "this.type = Type.OTHER;",
      "right" : "this.type = Type.OTHER;",
      "info" : "ExpressionStatement[25436-25459]:ExpressionStatement[25436-25459]"
    }, {
      "left" : "this.inExterns = inExterns;",
      "right" : "this.inExterns = inExterns;",
      "info" : "ExpressionStatement[25466-25493]:ExpressionStatement[25466-25493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25554-25728]:Block[25554-25728]"
    }, {
      "left" : "if (props == null)",
      "right" : "if (props == null)",
      "info" : "IfStatement[25562-25629]:IfStatement[25562-25629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25581-25629]:Block[25581-25629]"
    }, {
      "left" : "props = new ArrayList<Name>();",
      "right" : "props = new ArrayList<Name>();",
      "info" : "ExpressionStatement[25591-25621]:ExpressionStatement[25591-25621]"
    }, {
      "left" : "Name node = new Name(name, this, inExterns);",
      "right" : "Name node = new Name(name, this, inExterns);",
      "info" : "VariableDeclarationStatement[25636-25680]:VariableDeclarationStatement[25636-25680]"
    }, {
      "left" : "props.add(node);",
      "right" : "props.add(node);",
      "info" : "ExpressionStatement[25687-25703]:ExpressionStatement[25687-25703]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[25710-25722]:ReturnStatement[25710-25722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25755-26578]:Block[25755-26578]"
    }, {
      "left" : "switch (ref.type) {\n        case SET_FROM_GLOBAL:\n          if (declaration == null) {\n            declaration = ref;\n            docInfo = getDocInfoForDeclaration(ref);\n          } else {\n            addRefInternal(ref);\n          }\n          globalSets++;\n          break;\n        case SET_FROM_LOCAL:\n          addRefInternal(ref);\n          localSets++;\n          break;\n        case PROTOTYPE_GET:\n        case DIRECT_GET:\n          addRefInternal(ref);\n          totalGets++;\n          break;\n        case ALIASING_GET:\n          addRefInternal(ref);\n          aliasingGets++;\n          totalGets++;\n          break;\n        case CALL_GET:\n          addRefInternal(ref);\n          callGets++;\n          totalGets++;\n          break;\n        default:\n          throw new IllegalStateException();\n      }",
      "right" : "switch (ref.type) {\n        case SET_FROM_GLOBAL:\n          if (declaration == null) {\n            declaration = ref;\n            docInfo = getDocInfoForDeclaration(ref);\n          } else {\n            addRefInternal(ref);\n          }\n          globalSets++;\n          break;\n        case SET_FROM_LOCAL:\n          addRefInternal(ref);\n          localSets++;\n          break;\n        case PROTOTYPE_GET:\n        case DIRECT_GET:\n          addRefInternal(ref);\n          totalGets++;\n          break;\n        case ALIASING_GET:\n          addRefInternal(ref);\n          aliasingGets++;\n          totalGets++;\n          break;\n        case CALL_GET:\n          addRefInternal(ref);\n          callGets++;\n          totalGets++;\n          break;\n        default:\n          throw new IllegalStateException();\n      }",
      "info" : "SwitchStatement[25763-26572]:SwitchStatement[25763-26572]"
    }, {
      "left" : "case SET_FROM_GLOBAL:",
      "right" : "case SET_FROM_GLOBAL:",
      "info" : "SwitchCase[25791-25812]:SwitchCase[25791-25812]"
    }, {
      "left" : "if (declaration == null)",
      "right" : "if (declaration == null)",
      "info" : "IfStatement[25823-25997]:IfStatement[25823-25997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25848-25945]:Block[25848-25945]"
    }, {
      "left" : "declaration = ref;",
      "right" : "declaration = ref;",
      "info" : "ExpressionStatement[25862-25880]:ExpressionStatement[25862-25880]"
    }, {
      "left" : "docInfo = getDocInfoForDeclaration(ref);",
      "right" : "docInfo = getDocInfoForDeclaration(ref);",
      "info" : "ExpressionStatement[25893-25933]:ExpressionStatement[25893-25933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25951-25997]:Block[25951-25997]"
    }, {
      "left" : "addRefInternal(ref);",
      "right" : "addRefInternal(ref);",
      "info" : "ExpressionStatement[25965-25985]:ExpressionStatement[25965-25985]"
    }, {
      "left" : "globalSets++;",
      "right" : "globalSets++;",
      "info" : "ExpressionStatement[26008-26021]:ExpressionStatement[26008-26021]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26032-26038]:BreakStatement[26032-26038]"
    }, {
      "left" : "case SET_FROM_LOCAL:",
      "right" : "case SET_FROM_LOCAL:",
      "info" : "SwitchCase[26047-26067]:SwitchCase[26047-26067]"
    }, {
      "left" : "addRefInternal(ref);",
      "right" : "addRefInternal(ref);",
      "info" : "ExpressionStatement[26078-26098]:ExpressionStatement[26078-26098]"
    }, {
      "left" : "localSets++;",
      "right" : "localSets++;",
      "info" : "ExpressionStatement[26109-26121]:ExpressionStatement[26109-26121]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26132-26138]:BreakStatement[26132-26138]"
    }, {
      "left" : "case PROTOTYPE_GET:",
      "right" : "case PROTOTYPE_GET:",
      "info" : "SwitchCase[26147-26166]:SwitchCase[26147-26166]"
    }, {
      "left" : "case DIRECT_GET:",
      "right" : "case DIRECT_GET:",
      "info" : "SwitchCase[26175-26191]:SwitchCase[26175-26191]"
    }, {
      "left" : "addRefInternal(ref);",
      "right" : "addRefInternal(ref);",
      "info" : "ExpressionStatement[26202-26222]:ExpressionStatement[26202-26222]"
    }, {
      "left" : "totalGets++;",
      "right" : "totalGets++;",
      "info" : "ExpressionStatement[26233-26245]:ExpressionStatement[26233-26245]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26256-26262]:BreakStatement[26256-26262]"
    }, {
      "left" : "case ALIASING_GET:",
      "right" : "case ALIASING_GET:",
      "info" : "SwitchCase[26271-26289]:SwitchCase[26271-26289]"
    }, {
      "left" : "addRefInternal(ref);",
      "right" : "addRefInternal(ref);",
      "info" : "ExpressionStatement[26300-26320]:ExpressionStatement[26300-26320]"
    }, {
      "left" : "aliasingGets++;",
      "right" : "aliasingGets++;",
      "info" : "ExpressionStatement[26331-26346]:ExpressionStatement[26331-26346]"
    }, {
      "left" : "totalGets++;",
      "right" : "totalGets++;",
      "info" : "ExpressionStatement[26357-26369]:ExpressionStatement[26357-26369]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26380-26386]:BreakStatement[26380-26386]"
    }, {
      "left" : "case CALL_GET:",
      "right" : "case CALL_GET:",
      "info" : "SwitchCase[26395-26409]:SwitchCase[26395-26409]"
    }, {
      "left" : "addRefInternal(ref);",
      "right" : "addRefInternal(ref);",
      "info" : "ExpressionStatement[26420-26440]:ExpressionStatement[26420-26440]"
    }, {
      "left" : "callGets++;",
      "right" : "callGets++;",
      "info" : "ExpressionStatement[26451-26462]:ExpressionStatement[26451-26462]"
    }, {
      "left" : "totalGets++;",
      "right" : "totalGets++;",
      "info" : "ExpressionStatement[26473-26485]:ExpressionStatement[26473-26485]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26496-26502]:BreakStatement[26496-26502]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26511-26519]:SwitchCase[26511-26519]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[26530-26564]:ThrowStatement[26530-26564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26608-27621]:Block[26608-27621]"
    }, {
      "left" : "if (ref == declaration ||\n          (refs != null && refs.remove(ref)))",
      "right" : "if (ref == declaration ||\n          (refs != null && refs.remove(ref)))",
      "info" : "IfStatement[26616-27615]:IfStatement[26616-27615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26688-27615]:Block[26688-27615]"
    }, {
      "left" : "if (ref == declaration)",
      "right" : "if (ref == declaration)",
      "info" : "IfStatement[26698-27055]:IfStatement[26698-27055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26722-27055]:Block[26722-27055]"
    }, {
      "left" : "declaration = null;",
      "right" : "declaration = null;",
      "info" : "ExpressionStatement[26734-26753]:ExpressionStatement[26734-26753]"
    }, {
      "left" : "if (refs != null)",
      "right" : "if (refs != null)",
      "info" : "IfStatement[26764-27045]:IfStatement[26764-27045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26782-27045]:Block[26782-27045]"
    }, {
      "left" : "for (Ref maybeNewDecl : refs)",
      "right" : "for (Ref maybeNewDecl : refs)",
      "info" : "EnhancedForStatement[26796-27033]:EnhancedForStatement[26796-27033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26826-27033]:Block[26826-27033]"
    }, {
      "left" : "if (maybeNewDecl.type == Ref.Type.SET_FROM_GLOBAL)",
      "right" : "if (maybeNewDecl.type == Ref.Type.SET_FROM_GLOBAL)",
      "info" : "IfStatement[26842-27019]:IfStatement[26842-27019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26893-27019]:Block[26893-27019]"
    }, {
      "left" : "declaration = maybeNewDecl;",
      "right" : "declaration = maybeNewDecl;",
      "info" : "ExpressionStatement[26911-26938]:ExpressionStatement[26911-26938]"
    }, {
      "left" : "refs.remove(declaration);",
      "right" : "refs.remove(declaration);",
      "info" : "ExpressionStatement[26955-26980]:ExpressionStatement[26955-26980]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26997-27003]:BreakStatement[26997-27003]"
    }, {
      "left" : "switch (ref.type) {\n          case SET_FROM_GLOBAL:\n            globalSets--;\n            break;\n          case SET_FROM_LOCAL:\n            localSets--;\n            break;\n          case PROTOTYPE_GET:\n          case DIRECT_GET:\n            totalGets--;\n            break;\n          case ALIASING_GET:\n            aliasingGets--;\n            totalGets--;\n            break;\n          case CALL_GET:\n            callGets--;\n            totalGets--;\n            break;\n          default:\n            throw new IllegalStateException();\n        }",
      "right" : "switch (ref.type) {\n          case SET_FROM_GLOBAL:\n            globalSets--;\n            break;\n          case SET_FROM_LOCAL:\n            localSets--;\n            break;\n          case PROTOTYPE_GET:\n          case DIRECT_GET:\n            totalGets--;\n            break;\n          case ALIASING_GET:\n            aliasingGets--;\n            totalGets--;\n            break;\n          case CALL_GET:\n            callGets--;\n            totalGets--;\n            break;\n          default:\n            throw new IllegalStateException();\n        }",
      "info" : "SwitchStatement[27065-27607]:SwitchStatement[27065-27607]"
    }, {
      "left" : "case SET_FROM_GLOBAL:",
      "right" : "case SET_FROM_GLOBAL:",
      "info" : "SwitchCase[27095-27116]:SwitchCase[27095-27116]"
    }, {
      "left" : "globalSets--;",
      "right" : "globalSets--;",
      "info" : "ExpressionStatement[27129-27142]:ExpressionStatement[27129-27142]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27155-27161]:BreakStatement[27155-27161]"
    }, {
      "left" : "case SET_FROM_LOCAL:",
      "right" : "case SET_FROM_LOCAL:",
      "info" : "SwitchCase[27172-27192]:SwitchCase[27172-27192]"
    }, {
      "left" : "localSets--;",
      "right" : "localSets--;",
      "info" : "ExpressionStatement[27205-27217]:ExpressionStatement[27205-27217]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27230-27236]:BreakStatement[27230-27236]"
    }, {
      "left" : "case PROTOTYPE_GET:",
      "right" : "case PROTOTYPE_GET:",
      "info" : "SwitchCase[27247-27266]:SwitchCase[27247-27266]"
    }, {
      "left" : "case DIRECT_GET:",
      "right" : "case DIRECT_GET:",
      "info" : "SwitchCase[27277-27293]:SwitchCase[27277-27293]"
    }, {
      "left" : "totalGets--;",
      "right" : "totalGets--;",
      "info" : "ExpressionStatement[27306-27318]:ExpressionStatement[27306-27318]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27331-27337]:BreakStatement[27331-27337]"
    }, {
      "left" : "case ALIASING_GET:",
      "right" : "case ALIASING_GET:",
      "info" : "SwitchCase[27348-27366]:SwitchCase[27348-27366]"
    }, {
      "left" : "aliasingGets--;",
      "right" : "aliasingGets--;",
      "info" : "ExpressionStatement[27379-27394]:ExpressionStatement[27379-27394]"
    }, {
      "left" : "totalGets--;",
      "right" : "totalGets--;",
      "info" : "ExpressionStatement[27407-27419]:ExpressionStatement[27407-27419]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27432-27438]:BreakStatement[27432-27438]"
    }, {
      "left" : "case CALL_GET:",
      "right" : "case CALL_GET:",
      "info" : "SwitchCase[27449-27463]:SwitchCase[27449-27463]"
    }, {
      "left" : "callGets--;",
      "right" : "callGets--;",
      "info" : "ExpressionStatement[27476-27487]:ExpressionStatement[27476-27487]"
    }, {
      "left" : "totalGets--;",
      "right" : "totalGets--;",
      "info" : "ExpressionStatement[27500-27512]:ExpressionStatement[27500-27512]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27525-27531]:BreakStatement[27525-27531]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[27542-27550]:SwitchCase[27542-27550]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[27563-27597]:ThrowStatement[27563-27597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27656-27756]:Block[27656-27756]"
    }, {
      "left" : "if (refs == null)",
      "right" : "if (refs == null)",
      "info" : "IfStatement[27664-27729]:IfStatement[27664-27729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27682-27729]:Block[27682-27729]"
    }, {
      "left" : "refs = new LinkedList<Ref>();",
      "right" : "refs = new LinkedList<Ref>();",
      "info" : "ExpressionStatement[27692-27721]:ExpressionStatement[27692-27721]"
    }, {
      "left" : "refs.add(ref);",
      "right" : "refs.add(ref);",
      "info" : "ExpressionStatement[27736-27750]:ExpressionStatement[27736-27750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27785-28056]:Block[27785-28056]"
    }, {
      "left" : "if (!canCollapseUnannotatedChildNames() || totalGets > 0)",
      "right" : "if (!canCollapseUnannotatedChildNames() || totalGets > 0)",
      "info" : "IfStatement[27793-27882]:IfStatement[27793-27882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27851-27882]:Block[27851-27882]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27861-27874]:ReturnStatement[27861-27874]"
    }, {
      "left" : "if (props != null)",
      "right" : "if (props != null)",
      "info" : "IfStatement[27890-28031]:IfStatement[27890-28031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27909-28031]:Block[27909-28031]"
    }, {
      "left" : "for (Name n : props)",
      "right" : "for (Name n : props)",
      "info" : "EnhancedForStatement[27919-28023]:EnhancedForStatement[27919-28023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27940-28023]:Block[27940-28023]"
    }, {
      "left" : "if (!n.canCollapse())",
      "right" : "if (!n.canCollapse())",
      "info" : "IfStatement[27952-28013]:IfStatement[27952-28013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27974-28013]:Block[27974-28013]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27988-28001]:ReturnStatement[27988-28001]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28038-28050]:ReturnStatement[28038-28050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28084-28257]:Block[28084-28257]"
    }, {
      "left" : "return !inExterns && (isClassOrEnum ||\n          (parent == null || parent.canCollapseUnannotatedChildNames()) &&\n          (globalSets > 0 || localSets > 0));",
      "right" : "return !inExterns && (isClassOrEnum ||\n          (parent == null || parent.canCollapseUnannotatedChildNames()) &&\n          (globalSets > 0 || localSets > 0));",
      "info" : "ReturnStatement[28092-28251]:ReturnStatement[28092-28251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28832-28886]:Block[28952-29006]"
    }, {
      "left" : "return globalSets == 0 && localSets > 0;",
      "right" : "return globalSets == 0 && localSets > 0;",
      "info" : "ReturnStatement[28840-28880]:ReturnStatement[28960-29000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28916-29103]:Block[29036-29223]"
    }, {
      "left" : "isClassOrEnum = true;",
      "right" : "isClassOrEnum = true;",
      "info" : "ExpressionStatement[28924-28945]:ExpressionStatement[29044-29065]"
    }, {
      "left" : "for (Name ancestor = parent; ancestor != null;\n           ancestor = ancestor.parent)",
      "right" : "for (Name ancestor = parent; ancestor != null;\n           ancestor = ancestor.parent)",
      "info" : "ForStatement[28952-29097]:ForStatement[29072-29217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29038-29097]:Block[29158-29217]"
    }, {
      "left" : "ancestor.hasClassOrEnumDescendant = true;",
      "right" : "ancestor.hasClassOrEnumDescendant = true;",
      "info" : "ExpressionStatement[29048-29089]:ExpressionStatement[29168-29209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29495-29567]:Block[29615-29687]"
    }, {
      "left" : "return hasClassOrEnumDescendant && type == Type.OBJECTLIT;",
      "right" : "return hasClassOrEnumDescendant && type == Type.OBJECTLIT;",
      "info" : "ReturnStatement[29503-29561]:ReturnStatement[29623-29681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29701-29737]:Block[29821-29857]"
    }, {
      "left" : "return parent == null;",
      "right" : "return parent == null;",
      "info" : "ReturnStatement[29709-29731]:ReturnStatement[29829-29851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29803-30021]:Block[29923-30141]"
    }, {
      "left" : "return fullName() + \" (\" + type + \"): globalSets=\" + globalSets +\n          \", localSets=\" + localSets + \", totalGets=\" + totalGets +\n          \", aliasingGets=\" + aliasingGets + \", callGets=\" + callGets;",
      "right" : "return fullName() + \" (\" + type + \"): globalSets=\" + globalSets +\n          \", localSets=\" + localSets + \", totalGets=\" + totalGets +\n          \", aliasingGets=\" + aliasingGets + \", callGets=\" + callGets;",
      "info" : "ReturnStatement[29811-30015]:ReturnStatement[29931-30135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30045-30121]:Block[30165-30241]"
    }, {
      "left" : "return parent == null ? name : parent.fullName() + '.' + name;",
      "right" : "return parent == null ? name : parent.fullName() + '.' + name;",
      "info" : "ReturnStatement[30053-30115]:ReturnStatement[30173-30235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30264-30683]:Block[30384-30803]"
    }, {
      "left" : "if (ref.node != null)",
      "right" : "if (ref.node != null)",
      "info" : "IfStatement[30272-30657]:IfStatement[30392-30777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30294-30657]:Block[30414-30777]"
    }, {
      "left" : "Node refParent = ref.node.getParent();",
      "right" : "Node refParent = ref.node.getParent();",
      "info" : "VariableDeclarationStatement[30304-30342]:VariableDeclarationStatement[30424-30462]"
    }, {
      "left" : "switch (refParent.getType()) {\n          case Token.FUNCTION:\n          case Token.ASSIGN:\n            return refParent.getJSDocInfo();\n          case Token.VAR:\n            return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();\n        }",
      "right" : "switch (refParent.getType()) {\n          case Token.FUNCTION:\n          case Token.ASSIGN:\n            return refParent.getJSDocInfo();\n          case Token.VAR:\n            return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();\n        }",
      "info" : "SwitchStatement[30351-30649]:SwitchStatement[30471-30769]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[30392-30412]:SwitchCase[30512-30532]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[30423-30441]:SwitchCase[30543-30561]"
    }, {
      "left" : "return refParent.getJSDocInfo();",
      "right" : "return refParent.getJSDocInfo();",
      "info" : "ReturnStatement[30454-30486]:ReturnStatement[30574-30606]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[30497-30512]:SwitchCase[30617-30632]"
    }, {
      "left" : "return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();",
      "right" : "return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();",
      "info" : "ReturnStatement[30525-30639]:ReturnStatement[30645-30759]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30665-30677]:ReturnStatement[30785-30797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31759-31925]:Block[31879-32045]"
    }, {
      "left" : "this.node = name;",
      "right" : "this.node = name;",
      "info" : "ExpressionStatement[31767-31784]:ExpressionStatement[31887-31904]"
    }, {
      "left" : "this.sourceName = t.getSourceName();",
      "right" : "this.sourceName = t.getSourceName();",
      "info" : "ExpressionStatement[31791-31827]:ExpressionStatement[31911-31947]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[31834-31851]:ExpressionStatement[31954-31971]"
    }, {
      "left" : "this.scope = t.getScope();",
      "right" : "this.scope = t.getScope();",
      "info" : "ExpressionStatement[31858-31884]:ExpressionStatement[31978-32004]"
    }, {
      "left" : "this.module = t.getModule();",
      "right" : "this.module = t.getModule();",
      "info" : "ExpressionStatement[31891-31919]:ExpressionStatement[32011-32039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31968-32149]:Block[32088-32269]"
    }, {
      "left" : "this.node = original.node;",
      "right" : "this.node = original.node;",
      "info" : "ExpressionStatement[31976-32002]:ExpressionStatement[32096-32122]"
    }, {
      "left" : "this.sourceName = original.sourceName;",
      "right" : "this.sourceName = original.sourceName;",
      "info" : "ExpressionStatement[32009-32047]:ExpressionStatement[32129-32167]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[32054-32071]:ExpressionStatement[32174-32191]"
    }, {
      "left" : "this.scope = original.scope;",
      "right" : "this.scope = original.scope;",
      "info" : "ExpressionStatement[32078-32106]:ExpressionStatement[32198-32226]"
    }, {
      "left" : "this.module = original.module;",
      "right" : "this.module = original.module;",
      "info" : "ExpressionStatement[32113-32143]:ExpressionStatement[32233-32263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32178-32294]:Block[32298-32414]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[32186-32203]:ExpressionStatement[32306-32323]"
    }, {
      "left" : "this.sourceName = \"source\";",
      "right" : "this.sourceName = \"source\";",
      "info" : "ExpressionStatement[32210-32237]:ExpressionStatement[32330-32357]"
    }, {
      "left" : "this.scope = null;",
      "right" : "this.scope = null;",
      "info" : "ExpressionStatement[32244-32262]:ExpressionStatement[32364-32382]"
    }, {
      "left" : "this.module = null;",
      "right" : "this.module = null;",
      "info" : "ExpressionStatement[32269-32288]:ExpressionStatement[32389-32408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32314-32340]:Block[32434-32460]"
    }, {
      "left" : "return twin;",
      "right" : "return twin;",
      "info" : "ReturnStatement[32322-32334]:ReturnStatement[32442-32454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32362-32443]:Block[32482-32563]"
    }, {
      "left" : "return type == Type.SET_FROM_GLOBAL || type == Type.SET_FROM_LOCAL;",
      "right" : "return type == Type.SET_FROM_GLOBAL || type == Type.SET_FROM_LOCAL;",
      "info" : "ReturnStatement[32370-32437]:ReturnStatement[32490-32557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32485-32793]:Block[32605-32913]"
    }, {
      "left" : "Preconditions.checkArgument(\n          (a.type == Type.ALIASING_GET || b.type == Type.ALIASING_GET) &&\n          (a.type == Type.SET_FROM_GLOBAL || a.type == Type.SET_FROM_LOCAL ||\n           b.type == Type.SET_FROM_GLOBAL || b.type == Type.SET_FROM_LOCAL));",
      "right" : "Preconditions.checkArgument(\n          (a.type == Type.ALIASING_GET || b.type == Type.ALIASING_GET) &&\n          (a.type == Type.SET_FROM_GLOBAL || a.type == Type.SET_FROM_LOCAL ||\n           b.type == Type.SET_FROM_GLOBAL || b.type == Type.SET_FROM_LOCAL));",
      "info" : "ExpressionStatement[32493-32751]:ExpressionStatement[32613-32871]"
    }, {
      "left" : "a.twin = b;",
      "right" : "a.twin = b;",
      "info" : "ExpressionStatement[32758-32769]:ExpressionStatement[32878-32889]"
    }, {
      "left" : "b.twin = a;",
      "right" : "b.twin = a;",
      "info" : "ExpressionStatement[32776-32787]:ExpressionStatement[32896-32907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32936-32977]:Block[33056-33097]"
    }, {
      "left" : "return new Ref(this, type);",
      "right" : "return new Ref(this, type);",
      "info" : "ReturnStatement[32944-32971]:ReturnStatement[33064-33091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33025-33060]:Block[33145-33180]"
    }, {
      "left" : "return new Ref(type);",
      "right" : "return new Ref(type);",
      "info" : "ReturnStatement[33033-33054]:ReturnStatement[33153-33174]"
    } ]
  },
  "interFileMappings" : { }
}