{
  "matchedElements" : [
 {
    "left" : "class : TypeCheck",
    "right" : "class : TypeCheck",
    "info" : "TypeDeclaration[2174-62086]:TypeDeclaration[2174-61219]"
  }, {
    "left" : "UNEXPECTED_TOKEN",
    "right" : "UNEXPECTED_TOKEN",
    "info" : "FieldDeclaration[2379-2547]:FieldDeclaration[2379-2547]"
  }, {
    "left" : "BAD_DELETE",
    "right" : "BAD_DELETE",
    "info" : "FieldDeclaration[2579-2781]:FieldDeclaration[2579-2781]"
  }, {
    "left" : "OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",
    "right" : "OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",
    "info" : "FieldDeclaration[2816-2930]:FieldDeclaration[2816-2930]"
  }, {
    "left" : "DETERMINISTIC_TEST",
    "right" : "DETERMINISTIC_TEST",
    "info" : "FieldDeclaration[3064-3280]:FieldDeclaration[3064-3280]"
  }, {
    "left" : "DETERMINISTIC_TEST_NO_RESULT",
    "right" : "DETERMINISTIC_TEST_NO_RESULT",
    "info" : "FieldDeclaration[3284-3531]:FieldDeclaration[3284-3531]"
  }, {
    "left" : "INEXISTENT_ENUM_ELEMENT",
    "right" : "INEXISTENT_ENUM_ELEMENT",
    "info" : "FieldDeclaration[3535-3713]:FieldDeclaration[3535-3713]"
  }, {
    "left" : "INEXISTENT_PROPERTY",
    "right" : "INEXISTENT_PROPERTY",
    "info" : "FieldDeclaration[3810-3975]:FieldDeclaration[3810-3975]"
  }, {
    "left" : "NOT_A_CONSTRUCTOR",
    "right" : "NOT_A_CONSTRUCTOR",
    "info" : "FieldDeclaration[3979-4150]:FieldDeclaration[3979-4150]"
  }, {
    "left" : "BIT_OPERATION",
    "right" : "BIT_OPERATION",
    "info" : "FieldDeclaration[4154-4323]:FieldDeclaration[4154-4323]"
  }, {
    "left" : "NOT_CALLABLE",
    "right" : "NOT_CALLABLE",
    "info" : "FieldDeclaration[4327-4481]:FieldDeclaration[4327-4481]"
  }, {
    "left" : "CONSTRUCTOR_NOT_CALLABLE",
    "right" : "CONSTRUCTOR_NOT_CALLABLE",
    "info" : "FieldDeclaration[4485-4683]:FieldDeclaration[4485-4683]"
  }, {
    "left" : "FUNCTION_MASKS_VARIABLE",
    "right" : "FUNCTION_MASKS_VARIABLE",
    "info" : "FieldDeclaration[4687-4862]:FieldDeclaration[4687-4862]"
  }, {
    "left" : "MULTIPLE_VAR_DEF",
    "right" : "MULTIPLE_VAR_DEF",
    "info" : "FieldDeclaration[4866-5039]:FieldDeclaration[4866-5039]"
  }, {
    "left" : "ENUM_DUP",
    "right" : "ENUM_DUP",
    "info" : "FieldDeclaration[5043-5161]:FieldDeclaration[5043-5161]"
  }, {
    "left" : "ENUM_NOT_CONSTANT",
    "right" : "ENUM_NOT_CONSTANT",
    "info" : "FieldDeclaration[5165-5322]:FieldDeclaration[5165-5322]"
  }, {
    "left" : "INVALID_INTERFACE_MEMBER_DECLARATION",
    "right" : "INVALID_INTERFACE_MEMBER_DECLARATION",
    "info" : "FieldDeclaration[5326-5583]:FieldDeclaration[5326-5583]"
  }, {
    "left" : "INTERFACE_FUNCTION_NOT_EMPTY",
    "right" : "INTERFACE_FUNCTION_NOT_EMPTY",
    "info" : "FieldDeclaration[5587-5786]:FieldDeclaration[5587-5786]"
  }, {
    "left" : "CONFLICTING_EXTENDED_TYPE",
    "right" : "CONFLICTING_EXTENDED_TYPE",
    "info" : "FieldDeclaration[5790-6073]:FieldDeclaration[5790-6073]"
  }, {
    "left" : "BAD_IMPLEMENTED_TYPE",
    "right" : "BAD_IMPLEMENTED_TYPE",
    "info" : "FieldDeclaration[6077-6243]:FieldDeclaration[6077-6243]"
  }, {
    "left" : "HIDDEN_SUPERCLASS_PROPERTY",
    "right" : "HIDDEN_SUPERCLASS_PROPERTY",
    "info" : "FieldDeclaration[6247-6483]:FieldDeclaration[6247-6483]"
  }, {
    "left" : "HIDDEN_INTERFACE_PROPERTY",
    "right" : "HIDDEN_INTERFACE_PROPERTY",
    "info" : "FieldDeclaration[6487-6720]:FieldDeclaration[6487-6720]"
  }, {
    "left" : "HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",
    "right" : "HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",
    "info" : "FieldDeclaration[6724-7046]:FieldDeclaration[6724-7046]"
  }, {
    "left" : "UNKNOWN_OVERRIDE",
    "right" : "UNKNOWN_OVERRIDE",
    "info" : "FieldDeclaration[7383-7557]:FieldDeclaration[7050-7224]"
  }, {
    "left" : "INTERFACE_METHOD_OVERRIDE",
    "right" : "INTERFACE_METHOD_OVERRIDE",
    "info" : "FieldDeclaration[7561-7765]:FieldDeclaration[7228-7432]"
  }, {
    "left" : "UNKNOWN_EXPR_TYPE",
    "right" : "UNKNOWN_EXPR_TYPE",
    "info" : "FieldDeclaration[7769-7932]:FieldDeclaration[7436-7599]"
  }, {
    "left" : "UNRESOLVED_TYPE",
    "right" : "UNRESOLVED_TYPE",
    "info" : "FieldDeclaration[7936-8088]:FieldDeclaration[7603-7755]"
  }, {
    "left" : "WRONG_ARGUMENT_COUNT",
    "right" : "WRONG_ARGUMENT_COUNT",
    "info" : "FieldDeclaration[8092-8329]:FieldDeclaration[7759-7996]"
  }, {
    "left" : "ILLEGAL_IMPLICIT_CAST",
    "right" : "ILLEGAL_IMPLICIT_CAST",
    "info" : "FieldDeclaration[8333-8552]:FieldDeclaration[8000-8219]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[9614-9654]:FieldDeclaration[9239-9279]"
  }, {
    "left" : "validator",
    "right" : "validator",
    "info" : "FieldDeclaration[9657-9695]:FieldDeclaration[9282-9320]"
  }, {
    "left" : "reverseInterpreter",
    "right" : "reverseInterpreter",
    "info" : "FieldDeclaration[9699-9759]:FieldDeclaration[9324-9384]"
  }, {
    "left" : "typeRegistry",
    "right" : "typeRegistry",
    "info" : "FieldDeclaration[9763-9805]:FieldDeclaration[9388-9430]"
  }, {
    "left" : "topScope",
    "right" : "topScope",
    "info" : "FieldDeclaration[9808-9831]:FieldDeclaration[9433-9456]"
  }, {
    "left" : "scopeCreator",
    "right" : "scopeCreator",
    "info" : "FieldDeclaration[9835-9869]:FieldDeclaration[9460-9494]"
  }, {
    "left" : "reportMissingOverride",
    "right" : "reportMissingOverride",
    "info" : "FieldDeclaration[9873-9920]:FieldDeclaration[9498-9545]"
  }, {
    "left" : "reportUnknownTypes",
    "right" : "reportUnknownTypes",
    "info" : "FieldDeclaration[9923-9967]:FieldDeclaration[9548-9592]"
  }, {
    "left" : "reportMissingProperties",
    "right" : "reportMissingProperties",
    "info" : "FieldDeclaration[10067-10114]:FieldDeclaration[9692-9739]"
  }, {
    "left" : "inferJSDocInfo",
    "right" : "inferJSDocInfo",
    "info" : "FieldDeclaration[10118-10163]:FieldDeclaration[9743-9788]"
  }, {
    "left" : "typedCount",
    "right" : "typedCount",
    "info" : "FieldDeclaration[10244-10271]:FieldDeclaration[9869-9896]"
  }, {
    "left" : "nullCount",
    "right" : "nullCount",
    "info" : "FieldDeclaration[10274-10300]:FieldDeclaration[9899-9925]"
  }, {
    "left" : "unknownCount",
    "right" : "unknownCount",
    "info" : "FieldDeclaration[10303-10332]:FieldDeclaration[9928-9957]"
  }, {
    "left" : "inExterns",
    "right" : "inExterns",
    "info" : "FieldDeclaration[10335-10361]:FieldDeclaration[9960-9986]"
  }, {
    "left" : "noTypeCheckSection",
    "right" : "noTypeCheckSection",
    "info" : "FieldDeclaration[10452-10487]:FieldDeclaration[10077-10112]"
  }, {
    "left" : "public TypeCheck(compiler , reverseInterpreter , typeRegistry , topScope , scopeCreator , reportMissingOverride , reportUnknownTypes ...)",
    "right" : "public TypeCheck(compiler , reverseInterpreter , typeRegistry , topScope , scopeCreator , reportMissingOverride , reportUnknownTypes ...)",
    "info" : "MethodDeclaration[10491-11158]:MethodDeclaration[10116-10783]"
  }, {
    "left" : "public TypeCheck(compiler , reverseInterpreter , typeRegistry , reportMissingOverride , reportUnknownTypes ...)",
    "right" : "public TypeCheck(compiler , reverseInterpreter , typeRegistry , reportMissingOverride , reportUnknownTypes ...)",
    "info" : "MethodDeclaration[11162-11493]:MethodDeclaration[10787-11118]"
  }, {
    "left" : "package TypeCheck(compiler , reverseInterpreter , typeRegistry )",
    "right" : "package TypeCheck(compiler , reverseInterpreter , typeRegistry )",
    "info" : "MethodDeclaration[11497-11738]:MethodDeclaration[11122-11363]"
  }, {
    "left" : "package reportMissingProperties(report boolean) : ",
    "right" : "package reportMissingProperties(report boolean) : ",
    "info" : "MethodDeclaration[11742-11929]:MethodDeclaration[11367-11554]"
  }, {
    "left" : "public process(externsRoot , jsRoot ) : void",
    "right" : "public process(externsRoot , jsRoot ) : void",
    "info" : "MethodDeclaration[11933-12617]:MethodDeclaration[11558-12242]"
  }, {
    "left" : "public processForTesting(externsRoot , jsRoot ) : ",
    "right" : "public processForTesting(externsRoot , jsRoot ) : ",
    "info" : "MethodDeclaration[12621-13318]:MethodDeclaration[12246-12943]"
  }, {
    "left" : "public check(node , externs boolean) : void",
    "right" : "public check(node , externs boolean) : void",
    "info" : "MethodDeclaration[13323-13672]:MethodDeclaration[12948-13297]"
  }, {
    "left" : "private checkNoTypeCheckSection(n , enterSection boolean) : void",
    "right" : "private checkNoTypeCheckSection(n , enterSection boolean) : void",
    "info" : "MethodDeclaration[13677-14214]:MethodDeclaration[13302-13839]"
  }, {
    "left" : "private report(t , n , diagnosticType , ) : void",
    "right" : "private report(t , n , diagnosticType , ) : void",
    "info" : "MethodDeclaration[14218-14413]:MethodDeclaration[13843-14038]"
  }, {
    "left" : "public shouldTraverse(t , n , parent ) : boolean",
    "right" : "public shouldTraverse(t , n , parent ) : boolean",
    "info" : "MethodDeclaration[14417-15660]:MethodDeclaration[14042-15285]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[15664-26535]:MethodDeclaration[15289-26160]"
  }, {
    "left" : "private doPercentTypedAccounting(t , n ) : void",
    "right" : "private doPercentTypedAccounting(t , n ) : void",
    "info" : "MethodDeclaration[26539-27029]:MethodDeclaration[26164-26654]"
  }, {
    "left" : "private visitAssign(t , assign ) : void",
    "right" : "private visitAssign(t , assign ) : void",
    "info" : "MethodDeclaration[27033-31133]:MethodDeclaration[26658-30758]"
  }, {
    "left" : "private visitObjLitKey(t , key , objlit ) : void",
    "right" : "private visitObjLitKey(t , key , objlit ) : void",
    "info" : "MethodDeclaration[31137-33111]:MethodDeclaration[30762-32736]"
  }, {
    "left" : "private propertyIsImplicitCast(type , prop ) : boolean",
    "right" : "private propertyIsImplicitCast(type , prop ) : boolean",
    "info" : "MethodDeclaration[33115-33538]:MethodDeclaration[32740-33163]"
  }, {
    "left" : "private checkDeclaredPropertyInheritance(t , n , ctorType , propertyName , info , propertyType ) : void",
    "right" : "private checkDeclaredPropertyInheritance(t , n , ctorType , propertyName , info , propertyType ) : void",
    "info" : "MethodDeclaration[33542-37419]:MethodDeclaration[33167-36552]"
  }, {
    "left" : "private hasUnknownOrEmptySupertype(ctor ) : boolean",
    "right" : "private hasUnknownOrEmptySupertype(ctor ) : boolean",
    "info" : "MethodDeclaration[37423-38372]:MethodDeclaration[36556-37505]"
  }, {
    "left" : "private visitInterfaceGetprop(t , assign , object , property , lvalue , rvalue ) : void",
    "right" : "private visitInterfaceGetprop(t , assign , object , property , lvalue , rvalue ) : void",
    "info" : "MethodDeclaration[38376-39703]:MethodDeclaration[37509-38836]"
  }, {
    "left" : "private visitAnnotatedAssignGetprop(t , assign , type , object , property , rvalue ) : void",
    "right" : "private visitAnnotatedAssignGetprop(t , assign , type , object , property , rvalue ) : void",
    "info" : "MethodDeclaration[39707-40156]:MethodDeclaration[38840-39289]"
  }, {
    "left" : "package visitName(t , n , parent ) : boolean",
    "right" : "package visitName(t , n , parent ) : boolean",
    "info" : "MethodDeclaration[40160-41565]:MethodDeclaration[39293-40698]"
  }, {
    "left" : "private visitGetProp(t , n , parent ) : void",
    "right" : "private visitGetProp(t , n , parent ) : void",
    "info" : "MethodDeclaration[41569-42901]:MethodDeclaration[40702-42034]"
  }, {
    "left" : "private checkPropertyAccess(childType , propName , t , n ) : void",
    "right" : "private checkPropertyAccess(childType , propName , t , n ) : void",
    "info" : "MethodDeclaration[42905-43996]:MethodDeclaration[42038-43129]"
  }, {
    "left" : "private isPropertyTest(getProp ) : boolean",
    "right" : "private isPropertyTest(getProp ) : boolean",
    "info" : "MethodDeclaration[44000-44970]:MethodDeclaration[43133-44103]"
  }, {
    "left" : "private visitGetElem(t , n ) : void",
    "right" : "private visitGetElem(t , n ) : void",
    "info" : "MethodDeclaration[44974-45422]:MethodDeclaration[44107-44555]"
  }, {
    "left" : "private visitVar(t , n ) : void",
    "right" : "private visitVar(t , n ) : void",
    "info" : "MethodDeclaration[45426-46984]:MethodDeclaration[44559-46117]"
  }, {
    "left" : "private visitNew(t , n ) : void",
    "right" : "private visitNew(t , n ) : void",
    "info" : "MethodDeclaration[46988-47887]:MethodDeclaration[46121-47020]"
  }, {
    "left" : "private visitFunction(t , n ) : void",
    "right" : "private visitFunction(t , n ) : void",
    "info" : "MethodDeclaration[47891-49694]:MethodDeclaration[47024-48827]"
  }, {
    "left" : "private visitCall(t , n ) : void",
    "right" : "private visitCall(t , n ) : void",
    "info" : "MethodDeclaration[49698-51041]:MethodDeclaration[48831-50174]"
  }, {
    "left" : "private visitParameterList(t , call , functionType ) : void",
    "right" : "private visitParameterList(t , call , functionType ) : void",
    "info" : "MethodDeclaration[51045-52495]:MethodDeclaration[50178-51628]"
  }, {
    "left" : "private visitReturn(t , n ) : void",
    "right" : "private visitReturn(t , n ) : void",
    "info" : "MethodDeclaration[52499-53794]:MethodDeclaration[51632-52927]"
  }, {
    "left" : "private visitBinaryOperator(op int, t , n ) : void",
    "right" : "private visitBinaryOperator(op int, t , n ) : void",
    "info" : "MethodDeclaration[53798-55877]:MethodDeclaration[52931-55010]"
  }, {
    "left" : "private checkEnumInitializer(t , value , primitiveType ) : void",
    "right" : "private checkEnumInitializer(t , value , primitiveType ) : void",
    "info" : "MethodDeclaration[55881-57832]:MethodDeclaration[55014-56965]"
  }, {
    "left" : "private isReference(n ) : boolean",
    "right" : "private isReference(n ) : boolean",
    "info" : "MethodDeclaration[57837-58317]:MethodDeclaration[56970-57450]"
  }, {
    "left" : "private getJSType(n ) : ",
    "right" : "private getJSType(n ) : ",
    "info" : "MethodDeclaration[58321-58888]:MethodDeclaration[57454-58021]"
  }, {
    "left" : "private getFunctionType(n ) : ",
    "right" : "private getFunctionType(n ) : ",
    "info" : "MethodDeclaration[58892-59329]:MethodDeclaration[58025-58462]"
  }, {
    "left" : "private ensureTyped(t , n ) : void",
    "right" : "private ensureTyped(t , n ) : void",
    "info" : "MethodDeclaration[59657-59875]:MethodDeclaration[58790-59008]"
  }, {
    "left" : "private ensureTyped(t , n , type ) : void",
    "right" : "private ensureTyped(t , n , type ) : void",
    "info" : "MethodDeclaration[59879-59997]:MethodDeclaration[59012-59130]"
  }, {
    "left" : "private ensureTyped(t , n , type ) : void",
    "right" : "private ensureTyped(t , n , type ) : void",
    "info" : "MethodDeclaration[60001-61667]:MethodDeclaration[59134-60800]"
  }, {
    "left" : "package getTypedPercent() : double",
    "right" : "package getTypedPercent() : double",
    "info" : "MethodDeclaration[61671-61978]:MethodDeclaration[60804-61111]"
  }, {
    "left" : "private getNativeType(typeId ) : ",
    "right" : "private getNativeType(typeId ) : ",
    "info" : "MethodDeclaration[61982-62084]:MethodDeclaration[61115-61217]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2272-2278]:Modifier[2272-2278]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2279-2284]:TYPE_DECLARATION_KIND[2279-2284]"
  }, {
    "left" : "DiagnosticGroup",
    "right" : "DiagnosticGroup",
    "info" : "SimpleType[8569-8584]:SimpleType[8236-8251]"
  }, {
    "left" : "DiagnosticGroup",
    "right" : "DiagnosticGroup",
    "info" : "SimpleType[8607-8622]:SimpleType[8274-8289]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10491-10497]:Modifier[10116-10122]"
  }, {
    "left" : "TypeCheck",
    "right" : "TypeCheck",
    "info" : "SimpleName[10498-10507]:SimpleName[10123-10132]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[10508-10533]:SingleVariableDeclaration[10133-10158]"
  }, {
    "left" : "ReverseAbstractInterpreter reverseInterpreter",
    "right" : "ReverseAbstractInterpreter reverseInterpreter",
    "info" : "SingleVariableDeclaration[10541-10586]:SingleVariableDeclaration[10166-10211]"
  }, {
    "left" : "JSTypeRegistry typeRegistry",
    "right" : "JSTypeRegistry typeRegistry",
    "info" : "SingleVariableDeclaration[10594-10621]:SingleVariableDeclaration[10219-10246]"
  }, {
    "left" : "Scope topScope",
    "right" : "Scope topScope",
    "info" : "SingleVariableDeclaration[10629-10643]:SingleVariableDeclaration[10254-10268]"
  }, {
    "left" : "ScopeCreator scopeCreator",
    "right" : "ScopeCreator scopeCreator",
    "info" : "SingleVariableDeclaration[10651-10676]:SingleVariableDeclaration[10276-10301]"
  }, {
    "left" : "CheckLevel reportMissingOverride",
    "right" : "CheckLevel reportMissingOverride",
    "info" : "SingleVariableDeclaration[10684-10716]:SingleVariableDeclaration[10309-10341]"
  }, {
    "left" : "CheckLevel reportUnknownTypes",
    "right" : "CheckLevel reportUnknownTypes",
    "info" : "SingleVariableDeclaration[10724-10753]:SingleVariableDeclaration[10349-10378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10755-11158]:Block[10380-10783]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[10761-10786]:ExpressionStatement[10386-10411]"
  }, {
    "left" : "this.validator = compiler.getTypeValidator();",
    "right" : "this.validator = compiler.getTypeValidator();",
    "info" : "ExpressionStatement[10791-10836]:ExpressionStatement[10416-10461]"
  }, {
    "left" : "this.reverseInterpreter = reverseInterpreter;",
    "right" : "this.reverseInterpreter = reverseInterpreter;",
    "info" : "ExpressionStatement[10841-10886]:ExpressionStatement[10466-10511]"
  }, {
    "left" : "this.typeRegistry = typeRegistry;",
    "right" : "this.typeRegistry = typeRegistry;",
    "info" : "ExpressionStatement[10891-10924]:ExpressionStatement[10516-10549]"
  }, {
    "left" : "this.topScope = topScope;",
    "right" : "this.topScope = topScope;",
    "info" : "ExpressionStatement[10929-10954]:ExpressionStatement[10554-10579]"
  }, {
    "left" : "this.scopeCreator = scopeCreator;",
    "right" : "this.scopeCreator = scopeCreator;",
    "info" : "ExpressionStatement[10959-10992]:ExpressionStatement[10584-10617]"
  }, {
    "left" : "this.reportMissingOverride = reportMissingOverride;",
    "right" : "this.reportMissingOverride = reportMissingOverride;",
    "info" : "ExpressionStatement[10997-11048]:ExpressionStatement[10622-10673]"
  }, {
    "left" : "this.reportUnknownTypes = reportUnknownTypes;",
    "right" : "this.reportUnknownTypes = reportUnknownTypes;",
    "info" : "ExpressionStatement[11053-11098]:ExpressionStatement[10678-10723]"
  }, {
    "left" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
    "right" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
    "info" : "ExpressionStatement[11103-11154]:ExpressionStatement[10728-10779]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11162-11168]:Modifier[10787-10793]"
  }, {
    "left" : "TypeCheck",
    "right" : "TypeCheck",
    "info" : "SimpleName[11169-11178]:SimpleName[10794-10803]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[11179-11204]:SingleVariableDeclaration[10804-10829]"
  }, {
    "left" : "ReverseAbstractInterpreter reverseInterpreter",
    "right" : "ReverseAbstractInterpreter reverseInterpreter",
    "info" : "SingleVariableDeclaration[11212-11257]:SingleVariableDeclaration[10837-10882]"
  }, {
    "left" : "JSTypeRegistry typeRegistry",
    "right" : "JSTypeRegistry typeRegistry",
    "info" : "SingleVariableDeclaration[11265-11292]:SingleVariableDeclaration[10890-10917]"
  }, {
    "left" : "CheckLevel reportMissingOverride",
    "right" : "CheckLevel reportMissingOverride",
    "info" : "SingleVariableDeclaration[11300-11332]:SingleVariableDeclaration[10925-10957]"
  }, {
    "left" : "CheckLevel reportUnknownTypes",
    "right" : "CheckLevel reportUnknownTypes",
    "info" : "SingleVariableDeclaration[11340-11369]:SingleVariableDeclaration[10965-10994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11371-11493]:Block[10996-11118]"
  }, {
    "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride, reportUnknownTypes);",
    "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride, reportUnknownTypes);",
    "info" : "ConstructorInvocation[11377-11489]:ConstructorInvocation[11002-11114]"
  }, {
    "left" : "TypeCheck",
    "right" : "TypeCheck",
    "info" : "SimpleName[11497-11506]:SimpleName[11122-11131]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[11507-11532]:SingleVariableDeclaration[11132-11157]"
  }, {
    "left" : "ReverseAbstractInterpreter reverseInterpreter",
    "right" : "ReverseAbstractInterpreter reverseInterpreter",
    "info" : "SingleVariableDeclaration[11540-11585]:SingleVariableDeclaration[11165-11210]"
  }, {
    "left" : "JSTypeRegistry typeRegistry",
    "right" : "JSTypeRegistry typeRegistry",
    "info" : "SingleVariableDeclaration[11593-11620]:SingleVariableDeclaration[11218-11245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11622-11738]:Block[11247-11363]"
  }, {
    "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);",
    "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);",
    "info" : "ConstructorInvocation[11628-11734]:ConstructorInvocation[11253-11359]"
  }, {
    "left" : "TypeCheck",
    "right" : "TypeCheck",
    "info" : "SimpleType[11819-11828]:SimpleType[11444-11453]"
  }, {
    "left" : "reportMissingProperties",
    "right" : "reportMissingProperties",
    "info" : "SimpleName[11829-11852]:SimpleName[11454-11477]"
  }, {
    "left" : "boolean report",
    "right" : "boolean report",
    "info" : "SingleVariableDeclaration[11853-11867]:SingleVariableDeclaration[11478-11492]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11869-11929]:Block[11494-11554]"
  }, {
    "left" : "reportMissingProperties = report;",
    "right" : "reportMissingProperties = report;",
    "info" : "ExpressionStatement[11875-11908]:ExpressionStatement[11500-11533]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[11913-11925]:ReturnStatement[11538-11550]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12182-12188]:Modifier[11807-11813]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12189-12193]:PrimitiveType[11814-11818]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[12194-12201]:SimpleName[11819-11826]"
  }, {
    "left" : "Node externsRoot",
    "right" : "Node externsRoot",
    "info" : "SingleVariableDeclaration[12202-12218]:SingleVariableDeclaration[11827-11843]"
  }, {
    "left" : "Node jsRoot",
    "right" : "Node jsRoot",
    "info" : "SingleVariableDeclaration[12220-12231]:SingleVariableDeclaration[11845-11856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12233-12617]:Block[11858-12242]"
  }, {
    "left" : "Preconditions.checkNotNull(scopeCreator);",
    "right" : "Preconditions.checkNotNull(scopeCreator);",
    "info" : "ExpressionStatement[12239-12280]:ExpressionStatement[11864-11905]"
  }, {
    "left" : "Preconditions.checkNotNull(topScope);",
    "right" : "Preconditions.checkNotNull(topScope);",
    "info" : "ExpressionStatement[12285-12322]:ExpressionStatement[11910-11947]"
  }, {
    "left" : "Node externsAndJs = jsRoot.getParent();",
    "right" : "Node externsAndJs = jsRoot.getParent();",
    "info" : "VariableDeclarationStatement[12328-12367]:VariableDeclarationStatement[11953-11992]"
  }, {
    "left" : "Preconditions.checkState(externsAndJs != null);",
    "right" : "Preconditions.checkState(externsAndJs != null);",
    "info" : "ExpressionStatement[12372-12419]:ExpressionStatement[11997-12044]"
  }, {
    "left" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
    "right" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
    "info" : "ExpressionStatement[12424-12517]:ExpressionStatement[12049-12142]"
  }, {
    "left" : "if (externsRoot != null)",
    "right" : "if (externsRoot != null)",
    "info" : "IfStatement[12523-12587]:IfStatement[12148-12212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12548-12587]:Block[12173-12212]"
  }, {
    "left" : "check(externsRoot, true);",
    "right" : "check(externsRoot, true);",
    "info" : "ExpressionStatement[12556-12581]:ExpressionStatement[12181-12206]"
  }, {
    "left" : "check(jsRoot, false);",
    "right" : "check(jsRoot, false);",
    "info" : "ExpressionStatement[12592-12613]:ExpressionStatement[12217-12238]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12679-12685]:Modifier[12304-12310]"
  }, {
    "left" : "Scope",
    "right" : "Scope",
    "info" : "SimpleType[12686-12691]:SimpleType[12311-12316]"
  }, {
    "left" : "processForTesting",
    "right" : "processForTesting",
    "info" : "SimpleName[12692-12709]:SimpleName[12317-12334]"
  }, {
    "left" : "Node externsRoot",
    "right" : "Node externsRoot",
    "info" : "SingleVariableDeclaration[12710-12726]:SingleVariableDeclaration[12335-12351]"
  }, {
    "left" : "Node jsRoot",
    "right" : "Node jsRoot",
    "info" : "SingleVariableDeclaration[12728-12739]:SingleVariableDeclaration[12353-12364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12741-13318]:Block[12366-12943]"
  }, {
    "left" : "Preconditions.checkState(scopeCreator == null);",
    "right" : "Preconditions.checkState(scopeCreator == null);",
    "info" : "ExpressionStatement[12747-12794]:ExpressionStatement[12372-12419]"
  }, {
    "left" : "Preconditions.checkState(topScope == null);",
    "right" : "Preconditions.checkState(topScope == null);",
    "info" : "ExpressionStatement[12799-12842]:ExpressionStatement[12424-12467]"
  }, {
    "left" : "Preconditions.checkState(jsRoot.getParent() != null);",
    "right" : "Preconditions.checkState(jsRoot.getParent() != null);",
    "info" : "ExpressionStatement[12848-12901]:ExpressionStatement[12473-12526]"
  }, {
    "left" : "Node externsAndJsRoot = jsRoot.getParent();",
    "right" : "Node externsAndJsRoot = jsRoot.getParent();",
    "info" : "VariableDeclarationStatement[12906-12949]:VariableDeclarationStatement[12531-12574]"
  }, {
    "left" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
    "right" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
    "info" : "ExpressionStatement[12955-13028]:ExpressionStatement[12580-12653]"
  }, {
    "left" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
    "right" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
    "info" : "ExpressionStatement[13033-13093]:ExpressionStatement[12658-12718]"
  }, {
    "left" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
    "right" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
    "info" : "VariableDeclarationStatement[13099-13213]:VariableDeclarationStatement[12724-12838]"
  }, {
    "left" : "inference.process(externsRoot, jsRoot);",
    "right" : "inference.process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[13219-13258]:ExpressionStatement[12844-12883]"
  }, {
    "left" : "process(externsRoot, jsRoot);",
    "right" : "process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[13263-13292]:ExpressionStatement[12888-12917]"
  }, {
    "left" : "return topScope;",
    "right" : "return topScope;",
    "info" : "ReturnStatement[13298-13314]:ReturnStatement[12923-12939]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13323-13329]:Modifier[12948-12954]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13330-13334]:PrimitiveType[12955-12959]"
  }, {
    "left" : "check",
    "right" : "check",
    "info" : "SimpleName[13335-13340]:SimpleName[12960-12965]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[13341-13350]:SingleVariableDeclaration[12966-12975]"
  }, {
    "left" : "boolean externs",
    "right" : "boolean externs",
    "info" : "SingleVariableDeclaration[13352-13367]:SingleVariableDeclaration[12977-12992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13369-13672]:Block[12994-13297]"
  }, {
    "left" : "Preconditions.checkNotNull(node);",
    "right" : "Preconditions.checkNotNull(node);",
    "info" : "ExpressionStatement[13375-13408]:ExpressionStatement[13000-13033]"
  }, {
    "left" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
    "right" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
    "info" : "VariableDeclarationStatement[13414-13480]:VariableDeclarationStatement[13039-13105]"
  }, {
    "left" : "inExterns = externs;",
    "right" : "inExterns = externs;",
    "info" : "ExpressionStatement[13485-13505]:ExpressionStatement[13110-13130]"
  }, {
    "left" : "t.traverseWithScope(node, topScope);",
    "right" : "t.traverseWithScope(node, topScope);",
    "info" : "ExpressionStatement[13510-13546]:ExpressionStatement[13135-13171]"
  }, {
    "left" : "if (externs)",
    "right" : "if (externs)",
    "info" : "IfStatement[13551-13668]:IfStatement[13176-13293]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13564-13613]:Block[13189-13238]"
  }, {
    "left" : "inferJSDocInfo.process(node, null);",
    "right" : "inferJSDocInfo.process(node, null);",
    "info" : "ExpressionStatement[13572-13607]:ExpressionStatement[13197-13232]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13619-13668]:Block[13244-13293]"
  }, {
    "left" : "inferJSDocInfo.process(null, node);",
    "right" : "inferJSDocInfo.process(null, node);",
    "info" : "ExpressionStatement[13627-13662]:ExpressionStatement[13252-13287]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13677-13684]:Modifier[13302-13309]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13685-13689]:PrimitiveType[13310-13314]"
  }, {
    "left" : "checkNoTypeCheckSection",
    "right" : "checkNoTypeCheckSection",
    "info" : "SimpleName[13690-13713]:SimpleName[13315-13338]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[13714-13720]:SingleVariableDeclaration[13339-13345]"
  }, {
    "left" : "boolean enterSection",
    "right" : "boolean enterSection",
    "info" : "SingleVariableDeclaration[13722-13742]:SingleVariableDeclaration[13347-13367]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13744-14214]:Block[13369-13839]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
    "info" : "SwitchStatement[13750-14210]:SwitchStatement[13375-13835]"
  }, {
    "left" : "case Token.SCRIPT:",
    "right" : "case Token.SCRIPT:",
    "info" : "SwitchCase[13779-13797]:SwitchCase[13404-13422]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[13804-13821]:SwitchCase[13429-13446]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[13828-13843]:SwitchCase[13453-13468]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[13850-13870]:SwitchCase[13475-13495]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[13877-13895]:SwitchCase[13502-13520]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[13904-13938]:VariableDeclarationStatement[13529-13563]"
  }, {
    "left" : "if (info != null && info.isNoTypeCheck())",
    "right" : "if (info != null && info.isNoTypeCheck())",
    "info" : "IfStatement[13947-14129]:IfStatement[13572-13754]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13989-14129]:Block[13614-13754]"
  }, {
    "left" : "if (enterSection)",
    "right" : "if (enterSection)",
    "info" : "IfStatement[14001-14119]:IfStatement[13626-13744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14019-14066]:Block[13644-13691]"
  }, {
    "left" : "noTypeCheckSection++;",
    "right" : "noTypeCheckSection++;",
    "info" : "ExpressionStatement[14033-14054]:ExpressionStatement[13658-13679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14072-14119]:Block[13697-13744]"
  }, {
    "left" : "noTypeCheckSection--;",
    "right" : "noTypeCheckSection--;",
    "info" : "ExpressionStatement[14086-14107]:ExpressionStatement[13711-13732]"
  }, {
    "left" : "validator.setShouldReport(noTypeCheckSection == 0);",
    "right" : "validator.setShouldReport(noTypeCheckSection == 0);",
    "info" : "ExpressionStatement[14138-14189]:ExpressionStatement[13763-13814]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14198-14204]:BreakStatement[13823-13829]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14218-14225]:Modifier[13843-13850]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14226-14230]:PrimitiveType[13851-13855]"
  }, {
    "left" : "report",
    "right" : "report",
    "info" : "SimpleName[14231-14237]:SimpleName[13856-13862]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[14238-14253]:SingleVariableDeclaration[13863-13878]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14255-14261]:SingleVariableDeclaration[13880-13886]"
  }, {
    "left" : "DiagnosticType diagnosticType",
    "right" : "DiagnosticType diagnosticType",
    "info" : "SingleVariableDeclaration[14263-14292]:SingleVariableDeclaration[13888-13917]"
  }, {
    "left" : "String... arguments",
    "right" : "String... arguments",
    "info" : "SingleVariableDeclaration[14300-14319]:SingleVariableDeclaration[13925-13944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14321-14413]:Block[13946-14038]"
  }, {
    "left" : "if (noTypeCheckSection == 0)",
    "right" : "if (noTypeCheckSection == 0)",
    "info" : "IfStatement[14327-14409]:IfStatement[13952-14034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14356-14409]:Block[13981-14034]"
  }, {
    "left" : "t.report(n, diagnosticType, arguments);",
    "right" : "t.report(n, diagnosticType, arguments);",
    "info" : "ExpressionStatement[14364-14403]:ExpressionStatement[13989-14028]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14417-14423]:Modifier[14042-14048]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14424-14431]:PrimitiveType[14049-14056]"
  }, {
    "left" : "shouldTraverse",
    "right" : "shouldTraverse",
    "info" : "SimpleName[14432-14446]:SimpleName[14057-14071]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[14454-14469]:SingleVariableDeclaration[14079-14094]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14471-14477]:SingleVariableDeclaration[14096-14102]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[14479-14490]:SingleVariableDeclaration[14104-14115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14492-15660]:Block[14117-15285]"
  }, {
    "left" : "checkNoTypeCheckSection(n, true);",
    "right" : "checkNoTypeCheckSection(n, true);",
    "info" : "ExpressionStatement[14498-14531]:ExpressionStatement[14123-14156]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final TypeCheck outerThis = this;\n        final Scope outerScope = t.getScope();\n        final FunctionType functionType = (FunctionType) n.getJSType();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final TypeCheck outerThis = this;\n        final Scope outerScope = t.getScope();\n        final FunctionType functionType = (FunctionType) n.getJSType();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
    "info" : "SwitchStatement[14536-15639]:SwitchStatement[14161-15264]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[14565-14585]:SwitchCase[14190-14210]"
  }, {
    "left" : "final TypeCheck outerThis = this;",
    "right" : "final TypeCheck outerThis = this;",
    "info" : "VariableDeclarationStatement[14626-14659]:VariableDeclarationStatement[14251-14284]"
  }, {
    "left" : "final Scope outerScope = t.getScope();",
    "right" : "final Scope outerScope = t.getScope();",
    "info" : "VariableDeclarationStatement[14668-14706]:VariableDeclarationStatement[14293-14331]"
  }, {
    "left" : "final FunctionType functionType = (FunctionType) n.getJSType();",
    "right" : "final FunctionType functionType = (FunctionType) n.getJSType();",
    "info" : "VariableDeclarationStatement[14715-14778]:VariableDeclarationStatement[14340-14403]"
  }, {
    "left" : "final String functionPrivateName = n.getFirstChild().getString();",
    "right" : "final String functionPrivateName = n.getFirstChild().getString();",
    "info" : "VariableDeclarationStatement[14787-14852]:VariableDeclarationStatement[14412-14477]"
  }, {
    "left" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
    "right" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
    "info" : "IfStatement[14861-15410]:IfStatement[14486-15035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15329-15410]:Block[14954-15035]"
  }, {
    "left" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
    "right" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
    "info" : "ExpressionStatement[15341-15400]:ExpressionStatement[14966-15025]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[15627-15633]:BreakStatement[15252-15258]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[15644-15656]:ReturnStatement[15269-15281]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16109-16115]:Modifier[15734-15740]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16116-16120]:PrimitiveType[15741-15745]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[16121-16126]:SimpleName[15746-15751]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[16127-16142]:SingleVariableDeclaration[15752-15767]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[16144-16150]:SingleVariableDeclaration[15769-15775]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[16152-16163]:SingleVariableDeclaration[15777-15788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16165-26535]:Block[15790-26160]"
  }, {
    "left" : "JSType childType;",
    "right" : "JSType childType;",
    "info" : "VariableDeclarationStatement[16171-16188]:VariableDeclarationStatement[15796-15813]"
  }, {
    "left" : "JSType leftType, rightType;",
    "right" : "JSType leftType, rightType;",
    "info" : "VariableDeclarationStatement[16193-16220]:VariableDeclarationStatement[15818-15845]"
  }, {
    "left" : "Node left, right;",
    "right" : "Node left, right;",
    "info" : "VariableDeclarationStatement[16225-16242]:VariableDeclarationStatement[15850-15867]"
  }, {
    "left" : "boolean typeable = true;",
    "right" : "boolean typeable = true;",
    "info" : "VariableDeclarationStatement[16313-16337]:VariableDeclarationStatement[15938-15962]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.LP:\n        // If this is under a FUNCTION node, it is a parameter list and can be\n        // ignored here.\n        if (parent.getType() != Token.FUNCTION) {\n          ensureTyped(t, n, getJSType(n.getFirstChild()));\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.REF_SPECIAL:\n        ensureTyped(t, n);\n        break;\n\n      case Token.GET_REF:\n        ensureTyped(t, n, getJSType(n.getFirstChild()));\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        // Object literal keys are handled with OBJECTLIT\n        if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n          ensureTyped(t, n, NUMBER_TYPE);\n        }\n        break;\n\n      case Token.STRING:\n        // Object literal keys are handled with OBJECTLIT\n        if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n          ensureTyped(t, n, STRING_TYPE);\n        }\n        break;\n\n      case Token.GET:\n      case Token.SET:\n        // Object literal keys are handled with OBJECTLIT\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        typeable = true;\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !NodeUtil.isExpressionNode(parent);\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);\n        if (result != TernaryValue.UNKNOWN) {\n          if (n.getType() == Token.NE) {\n            result = result.not();\n          }\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.SHEQ:\n      case Token.SHNE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted)) {\n          report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n        validator.expectString(t, left, leftType, \"left side of 'in'\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n\n        validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        if (!isReference(n.getFirstChild())) {\n          report(t, n, BAD_DELETE);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(\n            t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.FOR:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        if (n.getType() == Token.OBJECTLIT) {\n          for (Node key : n.children()) {\n            visitObjLitKey(t, key, n);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.LP:\n        // If this is under a FUNCTION node, it is a parameter list and can be\n        // ignored here.\n        if (parent.getType() != Token.FUNCTION) {\n          ensureTyped(t, n, getJSType(n.getFirstChild()));\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.REF_SPECIAL:\n        ensureTyped(t, n);\n        break;\n\n      case Token.GET_REF:\n        ensureTyped(t, n, getJSType(n.getFirstChild()));\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        // Object literal keys are handled with OBJECTLIT\n        if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n          ensureTyped(t, n, NUMBER_TYPE);\n        }\n        break;\n\n      case Token.STRING:\n        // Object literal keys are handled with OBJECTLIT\n        if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n          ensureTyped(t, n, STRING_TYPE);\n        }\n        break;\n\n      case Token.GET:\n      case Token.SET:\n        // Object literal keys are handled with OBJECTLIT\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        typeable = true;\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !NodeUtil.isExpressionNode(parent);\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);\n        if (result != TernaryValue.UNKNOWN) {\n          if (n.getType() == Token.NE) {\n            result = result.not();\n          }\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.SHEQ:\n      case Token.SHNE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted)) {\n          report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n        validator.expectString(t, left, leftType, \"left side of 'in'\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n\n        validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        if (!isReference(n.getFirstChild())) {\n          report(t, n, BAD_DELETE);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(\n            t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.FOR:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        if (n.getType() == Token.OBJECTLIT) {\n          for (Node key : n.children()) {\n            visitObjLitKey(t, key, n);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
    "info" : "SwitchStatement[16343-26309]:SwitchStatement[15968-25934]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[16372-16388]:SwitchCase[15997-16013]"
  }, {
    "left" : "typeable = visitName(t, n, parent);",
    "right" : "typeable = visitName(t, n, parent);",
    "info" : "ExpressionStatement[16397-16432]:ExpressionStatement[16022-16057]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16441-16447]:BreakStatement[16066-16072]"
  }, {
    "left" : "case Token.LP:",
    "right" : "case Token.LP:",
    "info" : "SwitchCase[16455-16469]:SwitchCase[16080-16094]"
  }, {
    "left" : "if (parent.getType() != Token.FUNCTION)",
    "right" : "if (parent.getType() != Token.FUNCTION)",
    "info" : "IfStatement[16582-16737]:IfStatement[16207-16362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16622-16692]:Block[16247-16317]"
  }, {
    "left" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
    "right" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
    "info" : "ExpressionStatement[16634-16682]:ExpressionStatement[16259-16307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16698-16737]:Block[16323-16362]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[16710-16727]:ExpressionStatement[16335-16352]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16746-16752]:BreakStatement[16371-16377]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[16760-16777]:SwitchCase[16385-16402]"
  }, {
    "left" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
    "right" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
    "info" : "ExpressionStatement[16786-16833]:ExpressionStatement[16411-16458]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16842-16848]:BreakStatement[16467-16473]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[16856-16872]:SwitchCase[16481-16497]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[16879-16896]:SwitchCase[16504-16521]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[16905-16937]:ExpressionStatement[16530-16562]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16946-16952]:BreakStatement[16571-16577]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[16960-16976]:SwitchCase[16585-16601]"
  }, {
    "left" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
    "right" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
    "info" : "ExpressionStatement[16985-17033]:ExpressionStatement[16610-16658]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17042-17048]:BreakStatement[16667-16673]"
  }, {
    "left" : "case Token.REF_SPECIAL:",
    "right" : "case Token.REF_SPECIAL:",
    "info" : "SwitchCase[17056-17079]:SwitchCase[16681-16704]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[17088-17106]:ExpressionStatement[16713-16731]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17115-17121]:BreakStatement[16740-16746]"
  }, {
    "left" : "case Token.GET_REF:",
    "right" : "case Token.GET_REF:",
    "info" : "SwitchCase[17129-17148]:SwitchCase[16754-16773]"
  }, {
    "left" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
    "right" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
    "info" : "ExpressionStatement[17157-17205]:ExpressionStatement[16782-16830]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17214-17220]:BreakStatement[16839-16845]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[17228-17244]:SwitchCase[16853-16869]"
  }, {
    "left" : "ensureTyped(t, n, NULL_TYPE);",
    "right" : "ensureTyped(t, n, NULL_TYPE);",
    "info" : "ExpressionStatement[17253-17282]:ExpressionStatement[16878-16907]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17291-17297]:BreakStatement[16916-16922]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[17305-17323]:SwitchCase[16930-16948]"
  }, {
    "left" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
    "right" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
    "info" : "IfStatement[17390-17491]:IfStatement[17015-17116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17438-17491]:Block[17063-17116]"
  }, {
    "left" : "ensureTyped(t, n, NUMBER_TYPE);",
    "right" : "ensureTyped(t, n, NUMBER_TYPE);",
    "info" : "ExpressionStatement[17450-17481]:ExpressionStatement[17075-17106]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17500-17506]:BreakStatement[17125-17131]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[17514-17532]:SwitchCase[17139-17157]"
  }, {
    "left" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
    "right" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
    "info" : "IfStatement[17599-17700]:IfStatement[17224-17325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17647-17700]:Block[17272-17325]"
  }, {
    "left" : "ensureTyped(t, n, STRING_TYPE);",
    "right" : "ensureTyped(t, n, STRING_TYPE);",
    "info" : "ExpressionStatement[17659-17690]:ExpressionStatement[17284-17315]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17709-17715]:BreakStatement[17334-17340]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[17723-17738]:SwitchCase[17348-17363]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[17745-17760]:SwitchCase[17370-17385]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17827-17833]:BreakStatement[17452-17458]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[17841-17861]:SwitchCase[17466-17486]"
  }, {
    "left" : "ensureTyped(t, n, ARRAY_TYPE);",
    "right" : "ensureTyped(t, n, ARRAY_TYPE);",
    "info" : "ExpressionStatement[17870-17900]:ExpressionStatement[17495-17525]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17909-17915]:BreakStatement[17534-17540]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[17923-17941]:SwitchCase[17548-17566]"
  }, {
    "left" : "ensureTyped(t, n, REGEXP_TYPE);",
    "right" : "ensureTyped(t, n, REGEXP_TYPE);",
    "info" : "ExpressionStatement[17950-17981]:ExpressionStatement[17575-17606]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17990-17996]:BreakStatement[17615-17621]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[18004-18023]:SwitchCase[17629-17648]"
  }, {
    "left" : "visitGetProp(t, n, parent);",
    "right" : "visitGetProp(t, n, parent);",
    "info" : "ExpressionStatement[18032-18059]:ExpressionStatement[17657-17684]"
  }, {
    "left" : "typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);",
    "right" : "typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);",
    "info" : "ExpressionStatement[18068-18167]:ExpressionStatement[17693-17792]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18176-18182]:BreakStatement[17801-17807]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[18190-18209]:SwitchCase[17815-17834]"
  }, {
    "left" : "visitGetElem(t, n);",
    "right" : "visitGetElem(t, n);",
    "info" : "ExpressionStatement[18218-18237]:ExpressionStatement[17843-17862]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[18446-18463]:ExpressionStatement[18071-18088]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18472-18478]:BreakStatement[18097-18103]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[18486-18501]:SwitchCase[18111-18126]"
  }, {
    "left" : "visitVar(t, n);",
    "right" : "visitVar(t, n);",
    "info" : "ExpressionStatement[18510-18525]:ExpressionStatement[18135-18150]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[18534-18551]:ExpressionStatement[18159-18176]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18560-18566]:BreakStatement[18185-18191]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[18574-18589]:SwitchCase[18199-18214]"
  }, {
    "left" : "visitNew(t, n);",
    "right" : "visitNew(t, n);",
    "info" : "ExpressionStatement[18598-18613]:ExpressionStatement[18223-18238]"
  }, {
    "left" : "typeable = true;",
    "right" : "typeable = true;",
    "info" : "ExpressionStatement[18622-18638]:ExpressionStatement[18247-18263]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18647-18653]:BreakStatement[18272-18278]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[18661-18677]:SwitchCase[18286-18302]"
  }, {
    "left" : "visitCall(t, n);",
    "right" : "visitCall(t, n);",
    "info" : "ExpressionStatement[18686-18702]:ExpressionStatement[18311-18327]"
  }, {
    "left" : "typeable = !NodeUtil.isExpressionNode(parent);",
    "right" : "typeable = !NodeUtil.isExpressionNode(parent);",
    "info" : "ExpressionStatement[18711-18757]:ExpressionStatement[18336-18382]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18766-18772]:BreakStatement[18391-18397]"
  }, {
    "left" : "case Token.RETURN:",
    "right" : "case Token.RETURN:",
    "info" : "SwitchCase[18780-18798]:SwitchCase[18405-18423]"
  }, {
    "left" : "visitReturn(t, n);",
    "right" : "visitReturn(t, n);",
    "info" : "ExpressionStatement[18807-18825]:ExpressionStatement[18432-18450]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[18834-18851]:ExpressionStatement[18459-18476]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18860-18866]:BreakStatement[18485-18491]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[18874-18889]:SwitchCase[18499-18514]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[18896-18911]:SwitchCase[18521-18536]"
  }, {
    "left" : "left = n.getFirstChild();",
    "right" : "left = n.getFirstChild();",
    "info" : "ExpressionStatement[18920-18945]:ExpressionStatement[18545-18570]"
  }, {
    "left" : "validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");",
    "right" : "validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");",
    "info" : "ExpressionStatement[18954-19039]:ExpressionStatement[18579-18664]"
  }, {
    "left" : "ensureTyped(t, n, NUMBER_TYPE);",
    "right" : "ensureTyped(t, n, NUMBER_TYPE);",
    "info" : "ExpressionStatement[19048-19079]:ExpressionStatement[18673-18704]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19088-19094]:BreakStatement[18713-18719]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[19102-19117]:SwitchCase[18727-18742]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[19126-19158]:ExpressionStatement[18751-18783]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19167-19173]:BreakStatement[18792-18798]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[19181-19197]:SwitchCase[18806-18822]"
  }, {
    "left" : "ensureTyped(t, n, VOID_TYPE);",
    "right" : "ensureTyped(t, n, VOID_TYPE);",
    "info" : "ExpressionStatement[19206-19235]:ExpressionStatement[18831-18860]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19244-19250]:BreakStatement[18869-18875]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[19258-19276]:SwitchCase[18883-18901]"
  }, {
    "left" : "ensureTyped(t, n, STRING_TYPE);",
    "right" : "ensureTyped(t, n, STRING_TYPE);",
    "info" : "ExpressionStatement[19285-19316]:ExpressionStatement[18910-18941]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19325-19331]:BreakStatement[18950-18956]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[19339-19357]:SwitchCase[18964-18982]"
  }, {
    "left" : "childType = getJSType(n.getFirstChild());",
    "right" : "childType = getJSType(n.getFirstChild());",
    "info" : "ExpressionStatement[19366-19407]:ExpressionStatement[18991-19032]"
  }, {
    "left" : "if (!childType.matchesInt32Context())",
    "right" : "if (!childType.matchesInt32Context())",
    "info" : "IfStatement[19416-19571]:IfStatement[19041-19196]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19454-19571]:Block[19079-19196]"
  }, {
    "left" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
    "right" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
    "info" : "ExpressionStatement[19466-19561]:ExpressionStatement[19091-19186]"
  }, {
    "left" : "ensureTyped(t, n, NUMBER_TYPE);",
    "right" : "ensureTyped(t, n, NUMBER_TYPE);",
    "info" : "ExpressionStatement[19580-19611]:ExpressionStatement[19205-19236]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19620-19626]:BreakStatement[19245-19251]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[19634-19649]:SwitchCase[19259-19274]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[19656-19671]:SwitchCase[19281-19296]"
  }, {
    "left" : "left = n.getFirstChild();",
    "right" : "left = n.getFirstChild();",
    "info" : "ExpressionStatement[19680-19705]:ExpressionStatement[19305-19330]"
  }, {
    "left" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
    "right" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
    "info" : "ExpressionStatement[19714-19780]:ExpressionStatement[19339-19405]"
  }, {
    "left" : "ensureTyped(t, n, NUMBER_TYPE);",
    "right" : "ensureTyped(t, n, NUMBER_TYPE);",
    "info" : "ExpressionStatement[19789-19820]:ExpressionStatement[19414-19445]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19829-19835]:BreakStatement[19454-19460]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[19843-19857]:SwitchCase[19468-19482]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[19864-19878]:SwitchCase[19489-19503]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19879-20562]:Block[19504-20187]"
  }, {
    "left" : "leftType = getJSType(n.getFirstChild());",
    "right" : "leftType = getJSType(n.getFirstChild());",
    "info" : "ExpressionStatement[19889-19929]:ExpressionStatement[19514-19554]"
  }, {
    "left" : "rightType = getJSType(n.getLastChild());",
    "right" : "rightType = getJSType(n.getLastChild());",
    "info" : "ExpressionStatement[19938-19978]:ExpressionStatement[19563-19603]"
  }, {
    "left" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
    "right" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[19988-20056]:VariableDeclarationStatement[19613-19681]"
  }, {
    "left" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
    "right" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[20065-20135]:VariableDeclarationStatement[19690-19760]"
  }, {
    "left" : "TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);",
    "right" : "TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);",
    "info" : "VariableDeclarationStatement[20144-20234]:VariableDeclarationStatement[19769-19859]"
  }, {
    "left" : "if (result != TernaryValue.UNKNOWN)",
    "right" : "if (result != TernaryValue.UNKNOWN)",
    "info" : "IfStatement[20243-20498]:IfStatement[19868-20123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20279-20498]:Block[19904-20123]"
  }, {
    "left" : "if (n.getType() == Token.NE)",
    "right" : "if (n.getType() == Token.NE)",
    "info" : "IfStatement[20291-20368]:IfStatement[19916-19993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20320-20368]:Block[19945-19993]"
  }, {
    "left" : "result = result.not();",
    "right" : "result = result.not();",
    "info" : "ExpressionStatement[20334-20356]:ExpressionStatement[19959-19981]"
  }, {
    "left" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
    "right" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
    "info" : "ExpressionStatement[20379-20488]:ExpressionStatement[20004-20113]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[20507-20539]:ExpressionStatement[20132-20164]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20548-20554]:BreakStatement[20173-20179]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[20570-20586]:SwitchCase[20195-20211]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[20593-20609]:SwitchCase[20218-20234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20610-21154]:Block[20235-20779]"
  }, {
    "left" : "leftType = getJSType(n.getFirstChild());",
    "right" : "leftType = getJSType(n.getFirstChild());",
    "info" : "ExpressionStatement[20620-20660]:ExpressionStatement[20245-20285]"
  }, {
    "left" : "rightType = getJSType(n.getLastChild());",
    "right" : "rightType = getJSType(n.getLastChild());",
    "info" : "ExpressionStatement[20669-20709]:ExpressionStatement[20294-20334]"
  }, {
    "left" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
    "right" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[20719-20787]:VariableDeclarationStatement[20344-20412]"
  }, {
    "left" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
    "right" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[20796-20866]:VariableDeclarationStatement[20421-20491]"
  }, {
    "left" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted))",
    "right" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted))",
    "info" : "IfStatement[20875-21090]:IfStatement[20500-20715]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20968-21090]:Block[20593-20715]"
  }, {
    "left" : "report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());",
    "right" : "report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());",
    "info" : "ExpressionStatement[20980-21080]:ExpressionStatement[20605-20705]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[21099-21131]:ExpressionStatement[20724-20756]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21140-21146]:BreakStatement[20765-20771]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[21162-21176]:SwitchCase[20787-20801]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[21183-21197]:SwitchCase[20808-20822]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[21204-21218]:SwitchCase[20829-20843]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[21225-21239]:SwitchCase[20850-20864]"
  }, {
    "left" : "leftType = getJSType(n.getFirstChild());",
    "right" : "leftType = getJSType(n.getFirstChild());",
    "info" : "ExpressionStatement[21248-21288]:ExpressionStatement[20873-20913]"
  }, {
    "left" : "rightType = getJSType(n.getLastChild());",
    "right" : "rightType = getJSType(n.getLastChild());",
    "info" : "ExpressionStatement[21297-21337]:ExpressionStatement[20922-20962]"
  }, {
    "left" : "if (rightType.isNumber())",
    "right" : "if (rightType.isNumber())",
    "info" : "IfStatement[21346-22419]:IfStatement[20971-22044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21372-21483]:Block[20997-21108]"
  }, {
    "left" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
    "right" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
    "info" : "ExpressionStatement[21384-21473]:ExpressionStatement[21009-21098]"
  }, {
    "left" : "if (leftType.isNumber())",
    "right" : "if (leftType.isNumber())",
    "info" : "IfStatement[21489-22419]:IfStatement[21114-22044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21514-21627]:Block[21139-21252]"
  }, {
    "left" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
    "right" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
    "info" : "ExpressionStatement[21526-21617]:ExpressionStatement[21151-21242]"
  }, {
    "left" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
    "right" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
    "info" : "IfStatement[21633-22419]:IfStatement[21258-22044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21725-21753]:Block[21350-21378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21759-22419]:Block[21384-22044]"
  }, {
    "left" : "String message = \"left side of comparison\";",
    "right" : "String message = \"left side of comparison\";",
    "info" : "VariableDeclarationStatement[21970-22013]:VariableDeclarationStatement[21595-21638]"
  }, {
    "left" : "validator.expectString(t, n, leftType, message);",
    "right" : "validator.expectString(t, n, leftType, message);",
    "info" : "ExpressionStatement[22024-22072]:ExpressionStatement[21649-21697]"
  }, {
    "left" : "validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
    "right" : "validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
    "info" : "ExpressionStatement[22083-22186]:ExpressionStatement[21708-21811]"
  }, {
    "left" : "message = \"right side of comparison\";",
    "right" : "message = \"right side of comparison\";",
    "info" : "ExpressionStatement[22197-22234]:ExpressionStatement[21822-21859]"
  }, {
    "left" : "validator.expectString(t, n, rightType, message);",
    "right" : "validator.expectString(t, n, rightType, message);",
    "info" : "ExpressionStatement[22245-22294]:ExpressionStatement[21870-21919]"
  }, {
    "left" : "validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
    "right" : "validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
    "info" : "ExpressionStatement[22305-22409]:ExpressionStatement[21930-22034]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[22428-22460]:ExpressionStatement[22053-22085]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22469-22475]:BreakStatement[22094-22100]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[22483-22497]:SwitchCase[22108-22122]"
  }, {
    "left" : "left = n.getFirstChild();",
    "right" : "left = n.getFirstChild();",
    "info" : "ExpressionStatement[22506-22531]:ExpressionStatement[22131-22156]"
  }, {
    "left" : "right = n.getLastChild();",
    "right" : "right = n.getLastChild();",
    "info" : "ExpressionStatement[22540-22565]:ExpressionStatement[22165-22190]"
  }, {
    "left" : "leftType = getJSType(left);",
    "right" : "leftType = getJSType(left);",
    "info" : "ExpressionStatement[22574-22601]:ExpressionStatement[22199-22226]"
  }, {
    "left" : "rightType = getJSType(right);",
    "right" : "rightType = getJSType(right);",
    "info" : "ExpressionStatement[22610-22639]:ExpressionStatement[22235-22264]"
  }, {
    "left" : "validator.expectObject(t, n, rightType, \"'in' requires an object\");",
    "right" : "validator.expectObject(t, n, rightType, \"'in' requires an object\");",
    "info" : "ExpressionStatement[22648-22715]:ExpressionStatement[22273-22340]"
  }, {
    "left" : "validator.expectString(t, left, leftType, \"left side of 'in'\");",
    "right" : "validator.expectString(t, left, leftType, \"left side of 'in'\");",
    "info" : "ExpressionStatement[22724-22787]:ExpressionStatement[22349-22412]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[22796-22828]:ExpressionStatement[22421-22453]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22837-22843]:BreakStatement[22462-22468]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[22851-22873]:SwitchCase[22476-22498]"
  }, {
    "left" : "left = n.getFirstChild();",
    "right" : "left = n.getFirstChild();",
    "info" : "ExpressionStatement[22882-22907]:ExpressionStatement[22507-22532]"
  }, {
    "left" : "right = n.getLastChild();",
    "right" : "right = n.getLastChild();",
    "info" : "ExpressionStatement[22916-22941]:ExpressionStatement[22541-22566]"
  }, {
    "left" : "leftType = getJSType(left);",
    "right" : "leftType = getJSType(left);",
    "info" : "ExpressionStatement[22950-22977]:ExpressionStatement[22575-22602]"
  }, {
    "left" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
    "right" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[22986-23046]:ExpressionStatement[22611-22671]"
  }, {
    "left" : "validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");",
    "right" : "validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");",
    "info" : "ExpressionStatement[23056-23155]:ExpressionStatement[22681-22780]"
  }, {
    "left" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
    "right" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
    "info" : "ExpressionStatement[23164-23260]:ExpressionStatement[22789-22885]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[23269-23301]:ExpressionStatement[22894-22926]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23310-23316]:BreakStatement[22935-22941]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[23324-23342]:SwitchCase[22949-22967]"
  }, {
    "left" : "visitAssign(t, n);",
    "right" : "visitAssign(t, n);",
    "info" : "ExpressionStatement[23351-23369]:ExpressionStatement[22976-22994]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[23378-23395]:ExpressionStatement[23003-23020]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23404-23410]:BreakStatement[23029-23035]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[23418-23440]:SwitchCase[23043-23065]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[23447-23469]:SwitchCase[23072-23094]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[23476-23499]:SwitchCase[23101-23124]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[23506-23528]:SwitchCase[23131-23153]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[23535-23557]:SwitchCase[23160-23182]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[23564-23588]:SwitchCase[23189-23213]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[23595-23620]:SwitchCase[23220-23245]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[23627-23652]:SwitchCase[23252-23277]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[23659-23681]:SwitchCase[23284-23306]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[23688-23710]:SwitchCase[23313-23335]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[23717-23739]:SwitchCase[23342-23364]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[23746-23761]:SwitchCase[23371-23386]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[23768-23783]:SwitchCase[23393-23408]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[23790-23806]:SwitchCase[23415-23431]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[23813-23828]:SwitchCase[23438-23453]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[23835-23850]:SwitchCase[23460-23475]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[23857-23874]:SwitchCase[23482-23499]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[23881-23899]:SwitchCase[23506-23524]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[23906-23924]:SwitchCase[23531-23549]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[23931-23946]:SwitchCase[23556-23571]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[23953-23968]:SwitchCase[23578-23593]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[23975-23990]:SwitchCase[23600-23615]"
  }, {
    "left" : "visitBinaryOperator(n.getType(), t, n);",
    "right" : "visitBinaryOperator(n.getType(), t, n);",
    "info" : "ExpressionStatement[23999-24038]:ExpressionStatement[23624-23663]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24047-24053]:BreakStatement[23672-23678]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[24061-24080]:SwitchCase[23686-23705]"
  }, {
    "left" : "if (!isReference(n.getFirstChild()))",
    "right" : "if (!isReference(n.getFirstChild()))",
    "info" : "IfStatement[24089-24173]:IfStatement[23714-23798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24126-24173]:Block[23751-23798]"
  }, {
    "left" : "report(t, n, BAD_DELETE);",
    "right" : "report(t, n, BAD_DELETE);",
    "info" : "ExpressionStatement[24138-24163]:ExpressionStatement[23763-23788]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[24182-24214]:ExpressionStatement[23807-23839]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24223-24229]:BreakStatement[23848-23854]"
  }, {
    "left" : "case Token.CASE:",
    "right" : "case Token.CASE:",
    "info" : "SwitchCase[24237-24253]:SwitchCase[23862-23878]"
  }, {
    "left" : "JSType switchType = getJSType(parent.getFirstChild());",
    "right" : "JSType switchType = getJSType(parent.getFirstChild());",
    "info" : "VariableDeclarationStatement[24262-24316]:VariableDeclarationStatement[23887-23941]"
  }, {
    "left" : "JSType caseType = getJSType(n.getFirstChild());",
    "right" : "JSType caseType = getJSType(n.getFirstChild());",
    "info" : "VariableDeclarationStatement[24325-24372]:VariableDeclarationStatement[23950-23997]"
  }, {
    "left" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
    "right" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
    "info" : "ExpressionStatement[24381-24443]:ExpressionStatement[24006-24068]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[24452-24469]:ExpressionStatement[24077-24094]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24478-24484]:BreakStatement[24103-24109]"
  }, {
    "left" : "case Token.WITH:",
    "right" : "case Token.WITH:",
    "info" : "SwitchCase[24492-24508]:SwitchCase[24117-24133]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24509-24730]:Block[24134-24355]"
  }, {
    "left" : "Node child = n.getFirstChild();",
    "right" : "Node child = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[24519-24550]:VariableDeclarationStatement[24144-24175]"
  }, {
    "left" : "childType = getJSType(child);",
    "right" : "childType = getJSType(child);",
    "info" : "ExpressionStatement[24559-24588]:ExpressionStatement[24184-24213]"
  }, {
    "left" : "validator.expectObject(\n            t, child, childType, \"with requires an object\");",
    "right" : "validator.expectObject(\n            t, child, childType, \"with requires an object\");",
    "info" : "ExpressionStatement[24597-24681]:ExpressionStatement[24222-24306]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[24690-24707]:ExpressionStatement[24315-24332]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24716-24722]:BreakStatement[24341-24347]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[24738-24758]:SwitchCase[24363-24383]"
  }, {
    "left" : "visitFunction(t, n);",
    "right" : "visitFunction(t, n);",
    "info" : "ExpressionStatement[24767-24787]:ExpressionStatement[24392-24412]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24796-24802]:BreakStatement[24421-24427]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[24866-24883]:SwitchCase[24491-24508]"
  }, {
    "left" : "case Token.LABEL_NAME:",
    "right" : "case Token.LABEL_NAME:",
    "info" : "SwitchCase[24890-24912]:SwitchCase[24515-24537]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[24919-24937]:SwitchCase[24544-24562]"
  }, {
    "left" : "case Token.BREAK:",
    "right" : "case Token.BREAK:",
    "info" : "SwitchCase[24944-24961]:SwitchCase[24569-24586]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[24968-24985]:SwitchCase[24593-24610]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[24992-25007]:SwitchCase[24617-24632]"
  }, {
    "left" : "case Token.SCRIPT:",
    "right" : "case Token.SCRIPT:",
    "info" : "SwitchCase[25014-25032]:SwitchCase[24639-24657]"
  }, {
    "left" : "case Token.EXPR_RESULT:",
    "right" : "case Token.EXPR_RESULT:",
    "info" : "SwitchCase[25039-25062]:SwitchCase[24664-24687]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[25069-25086]:SwitchCase[24694-24711]"
  }, {
    "left" : "case Token.EMPTY:",
    "right" : "case Token.EMPTY:",
    "info" : "SwitchCase[25093-25110]:SwitchCase[24718-24735]"
  }, {
    "left" : "case Token.DEFAULT:",
    "right" : "case Token.DEFAULT:",
    "info" : "SwitchCase[25117-25136]:SwitchCase[24742-24761]"
  }, {
    "left" : "case Token.CONTINUE:",
    "right" : "case Token.CONTINUE:",
    "info" : "SwitchCase[25143-25163]:SwitchCase[24768-24788]"
  }, {
    "left" : "case Token.DEBUGGER:",
    "right" : "case Token.DEBUGGER:",
    "info" : "SwitchCase[25170-25190]:SwitchCase[24795-24815]"
  }, {
    "left" : "case Token.THROW:",
    "right" : "case Token.THROW:",
    "info" : "SwitchCase[25197-25214]:SwitchCase[24822-24839]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[25223-25240]:ExpressionStatement[24848-24865]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25249-25255]:BreakStatement[24874-24880]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[25312-25326]:SwitchCase[24937-24951]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[25333-25348]:SwitchCase[24958-24973]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[25355-25369]:SwitchCase[24980-24994]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[25376-25393]:SwitchCase[25001-25018]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[25402-25419]:ExpressionStatement[25027-25044]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25428-25434]:BreakStatement[25053-25059]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[25500-25515]:SwitchCase[25125-25140]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[25522-25538]:SwitchCase[25147-25163]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[25545-25566]:SwitchCase[25170-25191]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[25573-25587]:SwitchCase[25198-25212]"
  }, {
    "left" : "if (n.getJSType() != null)",
    "right" : "if (n.getJSType() != null)",
    "info" : "IfStatement[25596-26016]:IfStatement[25221-25641]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25623-25699]:Block[25248-25324]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[25671-25689]:ExpressionStatement[25296-25314]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25705-26016]:Block[25330-25641]"
  }, {
    "left" : "if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType))",
    "right" : "if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType))",
    "info" : "IfStatement[25796-26006]:IfStatement[25421-25631]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25892-25956]:Block[25517-25581]"
  }, {
    "left" : "ensureTyped(t, n, parent.getJSType());",
    "right" : "ensureTyped(t, n, parent.getJSType());",
    "info" : "ExpressionStatement[25906-25944]:ExpressionStatement[25531-25569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25962-26006]:Block[25587-25631]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[25976-25994]:ExpressionStatement[25601-25619]"
  }, {
    "left" : "if (n.getType() == Token.OBJECTLIT)",
    "right" : "if (n.getType() == Token.OBJECTLIT)",
    "info" : "IfStatement[26025-26165]:IfStatement[25650-25790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26061-26165]:Block[25686-25790]"
  }, {
    "left" : "for (Node key : n.children())",
    "right" : "for (Node key : n.children())",
    "info" : "EnhancedForStatement[26073-26155]:EnhancedForStatement[25698-25780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26103-26155]:Block[25728-25780]"
  }, {
    "left" : "visitObjLitKey(t, key, n);",
    "right" : "visitObjLitKey(t, key, n);",
    "info" : "ExpressionStatement[26117-26143]:ExpressionStatement[25742-25768]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26174-26180]:BreakStatement[25799-25805]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[26188-26196]:SwitchCase[25813-25821]"
  }, {
    "left" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
    "right" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
    "info" : "ExpressionStatement[26205-26261]:ExpressionStatement[25830-25886]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[26270-26288]:ExpressionStatement[25895-25913]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26297-26303]:BreakStatement[25922-25928]"
  }, {
    "left" : "typeable = typeable && !inExterns;",
    "right" : "typeable = typeable && !inExterns;",
    "info" : "ExpressionStatement[26392-26426]:ExpressionStatement[26017-26051]"
  }, {
    "left" : "if (typeable)",
    "right" : "if (typeable)",
    "info" : "IfStatement[26432-26491]:IfStatement[26057-26116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26446-26491]:Block[26071-26116]"
  }, {
    "left" : "doPercentTypedAccounting(t, n);",
    "right" : "doPercentTypedAccounting(t, n);",
    "info" : "ExpressionStatement[26454-26485]:ExpressionStatement[26079-26110]"
  }, {
    "left" : "checkNoTypeCheckSection(n, false);",
    "right" : "checkNoTypeCheckSection(n, false);",
    "info" : "ExpressionStatement[26497-26531]:ExpressionStatement[26122-26156]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26645-26652]:Modifier[26270-26277]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[26653-26657]:PrimitiveType[26278-26282]"
  }, {
    "left" : "doPercentTypedAccounting",
    "right" : "doPercentTypedAccounting",
    "info" : "SimpleName[26658-26682]:SimpleName[26283-26307]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[26683-26698]:SingleVariableDeclaration[26308-26323]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[26700-26706]:SingleVariableDeclaration[26325-26331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26708-27029]:Block[26333-26654]"
  }, {
    "left" : "JSType type = n.getJSType();",
    "right" : "JSType type = n.getJSType();",
    "info" : "VariableDeclarationStatement[26714-26742]:VariableDeclarationStatement[26339-26367]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[26747-27025]:IfStatement[26372-26650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26765-26791]:Block[26390-26416]"
  }, {
    "left" : "nullCount++;",
    "right" : "nullCount++;",
    "info" : "ExpressionStatement[26773-26785]:ExpressionStatement[26398-26410]"
  }, {
    "left" : "if (type.isUnknownType())",
    "right" : "if (type.isUnknownType())",
    "info" : "IfStatement[26797-27025]:IfStatement[26422-26650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26823-26992]:Block[26448-26617]"
  }, {
    "left" : "if (reportUnknownTypes.isOn())",
    "right" : "if (reportUnknownTypes.isOn())",
    "info" : "IfStatement[26831-26964]:IfStatement[26456-26589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26862-26964]:Block[26487-26589]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, reportUnknownTypes, UNKNOWN_EXPR_TYPE));",
    "right" : "compiler.report(\n            t.makeError(n, reportUnknownTypes, UNKNOWN_EXPR_TYPE));",
    "info" : "ExpressionStatement[26872-26956]:ExpressionStatement[26497-26581]"
  }, {
    "left" : "unknownCount++;",
    "right" : "unknownCount++;",
    "info" : "ExpressionStatement[26971-26986]:ExpressionStatement[26596-26611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26998-27025]:Block[26623-26650]"
  }, {
    "left" : "typedCount++;",
    "right" : "typedCount++;",
    "info" : "ExpressionStatement[27006-27019]:ExpressionStatement[26631-26644]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27368-27375]:Modifier[26993-27000]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27376-27380]:PrimitiveType[27001-27005]"
  }, {
    "left" : "visitAssign",
    "right" : "visitAssign",
    "info" : "SimpleName[27381-27392]:SimpleName[27006-27017]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[27393-27408]:SingleVariableDeclaration[27018-27033]"
  }, {
    "left" : "Node assign",
    "right" : "Node assign",
    "info" : "SingleVariableDeclaration[27410-27421]:SingleVariableDeclaration[27035-27046]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27423-31133]:Block[27048-30758]"
  }, {
    "left" : "JSDocInfo info = assign.getJSDocInfo();",
    "right" : "JSDocInfo info = assign.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[27429-27468]:VariableDeclarationStatement[27054-27093]"
  }, {
    "left" : "Node lvalue = assign.getFirstChild();",
    "right" : "Node lvalue = assign.getFirstChild();",
    "info" : "VariableDeclarationStatement[27473-27510]:VariableDeclarationStatement[27098-27135]"
  }, {
    "left" : "Node rvalue = assign.getLastChild();",
    "right" : "Node rvalue = assign.getLastChild();",
    "info" : "VariableDeclarationStatement[27515-27551]:VariableDeclarationStatement[27140-27176]"
  }, {
    "left" : "if (lvalue.getType() == Token.GETPROP)",
    "right" : "if (lvalue.getType() == Token.GETPROP)",
    "info" : "IfStatement[27557-30783]:IfStatement[27182-30408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27596-30478]:Block[27221-30103]"
  }, {
    "left" : "Node object = lvalue.getFirstChild();",
    "right" : "Node object = lvalue.getFirstChild();",
    "info" : "VariableDeclarationStatement[27604-27641]:VariableDeclarationStatement[27229-27266]"
  }, {
    "left" : "JSType objectJsType = getJSType(object);",
    "right" : "JSType objectJsType = getJSType(object);",
    "info" : "VariableDeclarationStatement[27648-27688]:VariableDeclarationStatement[27273-27313]"
  }, {
    "left" : "String property = lvalue.getLastChild().getString();",
    "right" : "String property = lvalue.getLastChild().getString();",
    "info" : "VariableDeclarationStatement[27695-27747]:VariableDeclarationStatement[27320-27372]"
  }, {
    "left" : "if (object.getType() == Token.GETPROP)",
    "right" : "if (object.getType() == Token.GETPROP)",
    "info" : "IfStatement[27875-28175]:IfStatement[27500-27800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27914-28175]:Block[27539-27800]"
  }, {
    "left" : "JSType jsType = getJSType(object.getFirstChild());",
    "right" : "JSType jsType = getJSType(object.getFirstChild());",
    "info" : "VariableDeclarationStatement[27924-27974]:VariableDeclarationStatement[27549-27599]"
  }, {
    "left" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
    "right" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
    "info" : "IfStatement[27983-28167]:IfStatement[27608-27792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28078-28167]:Block[27703-27792]"
  }, {
    "left" : "visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);",
    "right" : "visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);",
    "info" : "ExpressionStatement[28090-28157]:ExpressionStatement[27715-27782]"
  }, {
    "left" : "if (info != null && info.hasType())",
    "right" : "if (info != null && info.hasType())",
    "info" : "IfStatement[28227-28439]:IfStatement[27852-28064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28263-28439]:Block[27888-28064]"
  }, {
    "left" : "visitAnnotatedAssignGetprop(t, assign,\n            info.getType().evaluate(t.getScope(), typeRegistry), object,\n            property, rvalue);",
    "right" : "visitAnnotatedAssignGetprop(t, assign,\n            info.getType().evaluate(t.getScope(), typeRegistry), object,\n            property, rvalue);",
    "info" : "ExpressionStatement[28273-28415]:ExpressionStatement[27898-28040]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[28424-28431]:ReturnStatement[28049-28056]"
  }, {
    "left" : "if (info != null && info.hasEnumParameterType())",
    "right" : "if (info != null && info.hasEnumParameterType())",
    "info" : "IfStatement[28491-28702]:IfStatement[28116-28327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28540-28702]:Block[28165-28327]"
  }, {
    "left" : "checkEnumInitializer(\n            t, rvalue, info.getEnumParameterType().evaluate(\n                t.getScope(), typeRegistry));",
    "right" : "checkEnumInitializer(\n            t, rvalue, info.getEnumParameterType().evaluate(\n                t.getScope(), typeRegistry));",
    "info" : "ExpressionStatement[28550-28678]:ExpressionStatement[28175-28303]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[28687-28694]:ReturnStatement[28312-28319]"
  }, {
    "left" : "if (property.equals(\"prototype\"))",
    "right" : "if (property.equals(\"prototype\"))",
    "info" : "IfStatement[28743-29220]:IfStatement[28368-28845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28777-29220]:Block[28402-28845]"
  }, {
    "left" : "if (objectJsType instanceof FunctionType)",
    "right" : "if (objectJsType instanceof FunctionType)",
    "info" : "IfStatement[28787-29196]:IfStatement[28412-28821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28829-29130]:Block[28454-28755]"
  }, {
    "left" : "FunctionType functionType = (FunctionType) objectJsType;",
    "right" : "FunctionType functionType = (FunctionType) objectJsType;",
    "info" : "VariableDeclarationStatement[28841-28897]:VariableDeclarationStatement[28466-28522]"
  }, {
    "left" : "if (functionType.isConstructor())",
    "right" : "if (functionType.isConstructor())",
    "info" : "IfStatement[28908-29120]:IfStatement[28533-28745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28942-29120]:Block[28567-28745]"
  }, {
    "left" : "JSType rvalueType = rvalue.getJSType();",
    "right" : "JSType rvalueType = rvalue.getJSType();",
    "info" : "VariableDeclarationStatement[28956-28995]:VariableDeclarationStatement[28581-28620]"
  }, {
    "left" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
    "right" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
    "info" : "ExpressionStatement[29008-29108]:ExpressionStatement[28633-28733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29136-29196]:Block[28761-28821]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[29205-29212]:ReturnStatement[28830-28837]"
  }, {
    "left" : "if (object.getType() == Token.GETPROP)",
    "right" : "if (object.getType() == Token.GETPROP)",
    "info" : "IfStatement[29270-29973]:IfStatement[28895-29598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29309-29973]:Block[28934-29598]"
  }, {
    "left" : "Node object2 = object.getFirstChild();",
    "right" : "Node object2 = object.getFirstChild();",
    "info" : "VariableDeclarationStatement[29319-29357]:VariableDeclarationStatement[28944-28982]"
  }, {
    "left" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
    "right" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
    "info" : "VariableDeclarationStatement[29366-29432]:VariableDeclarationStatement[28991-29057]"
  }, {
    "left" : "if (\"prototype\".equals(property2))",
    "right" : "if (\"prototype\".equals(property2))",
    "info" : "IfStatement[29442-29965]:IfStatement[29067-29590]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29477-29965]:Block[29102-29590]"
  }, {
    "left" : "JSType jsType = object2.getJSType();",
    "right" : "JSType jsType = object2.getJSType();",
    "info" : "VariableDeclarationStatement[29489-29525]:VariableDeclarationStatement[29114-29150]"
  }, {
    "left" : "if (jsType instanceof FunctionType)",
    "right" : "if (jsType instanceof FunctionType)",
    "info" : "IfStatement[29536-29937]:IfStatement[29161-29562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29572-29867]:Block[29197-29492]"
  }, {
    "left" : "FunctionType functionType = (FunctionType) jsType;",
    "right" : "FunctionType functionType = (FunctionType) jsType;",
    "info" : "VariableDeclarationStatement[29586-29636]:VariableDeclarationStatement[29211-29261]"
  }, {
    "left" : "if (functionType.isConstructor() || functionType.isInterface())",
    "right" : "if (functionType.isConstructor() || functionType.isInterface())",
    "info" : "IfStatement[29649-29855]:IfStatement[29274-29480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29713-29855]:Block[29338-29480]"
  }, {
    "left" : "checkDeclaredPropertyInheritance(\n                  t, assign, functionType, property, info, getJSType(rvalue));",
    "right" : "checkDeclaredPropertyInheritance(\n                  t, assign, functionType, property, info, getJSType(rvalue));",
    "info" : "ExpressionStatement[29729-29841]:ExpressionStatement[29354-29466]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29873-29937]:Block[29498-29562]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[29948-29955]:ReturnStatement[29573-29580]"
  }, {
    "left" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
    "right" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
    "info" : "VariableDeclarationStatement[30013-30103]:VariableDeclarationStatement[29638-29728]"
  }, {
    "left" : "if (type != null)",
    "right" : "if (type != null)",
    "info" : "IfStatement[30110-30472]:IfStatement[29735-30097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30128-30472]:Block[29753-30097]"
  }, {
    "left" : "if (type.hasProperty(property) &&\n            !type.isPropertyTypeInferred(property) &&\n            !propertyIsImplicitCast(type, property))",
    "right" : "if (type.hasProperty(property) &&\n            !type.isPropertyTypeInferred(property) &&\n            !propertyIsImplicitCast(type, property))",
    "info" : "IfStatement[30138-30448]:IfStatement[29763-30073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30279-30448]:Block[29904-30073]"
  }, {
    "left" : "validator.expectCanAssignToPropertyOf(\n              t, assign, getJSType(rvalue),\n              type.getPropertyType(property), object, property);",
    "right" : "validator.expectCanAssignToPropertyOf(\n              t, assign, getJSType(rvalue),\n              type.getPropertyType(property), object, property);",
    "info" : "ExpressionStatement[30291-30438]:ExpressionStatement[29916-30063]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[30457-30464]:ReturnStatement[30082-30089]"
  }, {
    "left" : "if (lvalue.getType() == Token.NAME)",
    "right" : "if (lvalue.getType() == Token.NAME)",
    "info" : "IfStatement[30484-30783]:IfStatement[30109-30408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30520-30783]:Block[30145-30408]"
  }, {
    "left" : "JSType rvalueType = getJSType(assign.getLastChild());",
    "right" : "JSType rvalueType = getJSType(assign.getLastChild());",
    "info" : "VariableDeclarationStatement[30570-30623]:VariableDeclarationStatement[30195-30248]"
  }, {
    "left" : "Var var = t.getScope().getVar(lvalue.getString());",
    "right" : "Var var = t.getScope().getVar(lvalue.getString());",
    "info" : "VariableDeclarationStatement[30630-30680]:VariableDeclarationStatement[30255-30305]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[30687-30777]:IfStatement[30312-30402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30704-30777]:Block[30329-30402]"
  }, {
    "left" : "if (var.isTypeInferred())",
    "right" : "if (var.isTypeInferred())",
    "info" : "IfStatement[30714-30769]:IfStatement[30339-30394]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30740-30769]:Block[30365-30394]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[30752-30759]:ReturnStatement[30377-30384]"
  }, {
    "left" : "JSType leftType = getJSType(lvalue);",
    "right" : "JSType leftType = getJSType(lvalue);",
    "info" : "VariableDeclarationStatement[30814-30850]:VariableDeclarationStatement[30439-30475]"
  }, {
    "left" : "Node rightChild = assign.getLastChild();",
    "right" : "Node rightChild = assign.getLastChild();",
    "info" : "VariableDeclarationStatement[30855-30895]:VariableDeclarationStatement[30480-30520]"
  }, {
    "left" : "JSType rightType = getJSType(rightChild);",
    "right" : "JSType rightType = getJSType(rightChild);",
    "info" : "VariableDeclarationStatement[30900-30941]:VariableDeclarationStatement[30525-30566]"
  }, {
    "left" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
    "right" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
    "info" : "IfStatement[30946-31129]:IfStatement[30571-30754]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31038-31086]:Block[30663-30711]"
  }, {
    "left" : "ensureTyped(t, assign, rightType);",
    "right" : "ensureTyped(t, assign, rightType);",
    "info" : "ExpressionStatement[31046-31080]:ExpressionStatement[30671-30705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31092-31129]:Block[30717-30754]"
  }, {
    "left" : "ensureTyped(t, assign);",
    "right" : "ensureTyped(t, assign);",
    "info" : "ExpressionStatement[31100-31123]:ExpressionStatement[30725-30748]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[31418-31425]:Modifier[31043-31050]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[31426-31430]:PrimitiveType[31051-31055]"
  }, {
    "left" : "visitObjLitKey",
    "right" : "visitObjLitKey",
    "info" : "SimpleName[31431-31445]:SimpleName[31056-31070]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[31446-31461]:SingleVariableDeclaration[31071-31086]"
  }, {
    "left" : "Node key",
    "right" : "Node key",
    "info" : "SingleVariableDeclaration[31463-31471]:SingleVariableDeclaration[31088-31096]"
  }, {
    "left" : "Node objlit",
    "right" : "Node objlit",
    "info" : "SingleVariableDeclaration[31473-31484]:SingleVariableDeclaration[31098-31109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31486-33111]:Block[31111-32736]"
  }, {
    "left" : "Node rvalue = key.getFirstChild();",
    "right" : "Node rvalue = key.getFirstChild();",
    "info" : "VariableDeclarationStatement[31719-31753]:VariableDeclarationStatement[31344-31378]"
  }, {
    "left" : "JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(\n        key, getJSType(rvalue));",
    "right" : "JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(\n        key, getJSType(rvalue));",
    "info" : "VariableDeclarationStatement[31758-31852]:VariableDeclarationStatement[31383-31477]"
  }, {
    "left" : "if (rightType == null)",
    "right" : "if (rightType == null)",
    "info" : "IfStatement[31857-31934]:IfStatement[31482-31559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31880-31934]:Block[31505-31559]"
  }, {
    "left" : "rightType = getNativeType(UNKNOWN_TYPE);",
    "right" : "rightType = getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[31888-31928]:ExpressionStatement[31513-31553]"
  }, {
    "left" : "Node owner = objlit;",
    "right" : "Node owner = objlit;",
    "info" : "VariableDeclarationStatement[31940-31960]:VariableDeclarationStatement[31565-31585]"
  }, {
    "left" : "JSType keyType = getJSType(key);",
    "right" : "JSType keyType = getJSType(key);",
    "info" : "VariableDeclarationStatement[32020-32052]:VariableDeclarationStatement[31645-31677]"
  }, {
    "left" : "boolean valid = validator.expectCanAssignToPropertyOf(t, key,\n        rightType, keyType,\n        owner, NodeUtil.getObjectLitKeyName(key));",
    "right" : "boolean valid = validator.expectCanAssignToPropertyOf(t, key,\n        rightType, keyType,\n        owner, NodeUtil.getObjectLitKeyName(key));",
    "info" : "VariableDeclarationStatement[32057-32197]:VariableDeclarationStatement[31682-31822]"
  }, {
    "left" : "if (valid)",
    "right" : "if (valid)",
    "info" : "IfStatement[32202-32298]:IfStatement[31827-31923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32213-32258]:Block[31838-31883]"
  }, {
    "left" : "ensureTyped(t, key, rightType);",
    "right" : "ensureTyped(t, key, rightType);",
    "info" : "ExpressionStatement[32221-32252]:ExpressionStatement[31846-31877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32264-32298]:Block[31889-31923]"
  }, {
    "left" : "ensureTyped(t, key);",
    "right" : "ensureTyped(t, key);",
    "info" : "ExpressionStatement[32272-32292]:ExpressionStatement[31897-31917]"
  }, {
    "left" : "JSType objlitType = getJSType(objlit);",
    "right" : "JSType objlitType = getJSType(objlit);",
    "info" : "VariableDeclarationStatement[32584-32622]:VariableDeclarationStatement[32209-32247]"
  }, {
    "left" : "ObjectType type = ObjectType.cast(\n        objlitType.restrictByNotNullOrUndefined());",
    "right" : "ObjectType type = ObjectType.cast(\n        objlitType.restrictByNotNullOrUndefined());",
    "info" : "VariableDeclarationStatement[32627-32713]:VariableDeclarationStatement[32252-32338]"
  }, {
    "left" : "if (type != null)",
    "right" : "if (type != null)",
    "info" : "IfStatement[32718-33107]:IfStatement[32343-32732]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32736-33107]:Block[32361-32732]"
  }, {
    "left" : "String property = NodeUtil.getObjectLitKeyName(key);",
    "right" : "String property = NodeUtil.getObjectLitKeyName(key);",
    "info" : "VariableDeclarationStatement[32744-32796]:VariableDeclarationStatement[32369-32421]"
  }, {
    "left" : "if (type.hasProperty(property) &&\n          !type.isPropertyTypeInferred(property) &&\n          !propertyIsImplicitCast(type, property))",
    "right" : "if (type.hasProperty(property) &&\n          !type.isPropertyTypeInferred(property) &&\n          !propertyIsImplicitCast(type, property))",
    "info" : "IfStatement[32803-33087]:IfStatement[32428-32712]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32940-33087]:Block[32565-32712]"
  }, {
    "left" : "validator.expectCanAssignToPropertyOf(\n            t, key, keyType,\n            type.getPropertyType(property), owner, property);",
    "right" : "validator.expectCanAssignToPropertyOf(\n            t, key, keyType,\n            type.getPropertyType(property), owner, property);",
    "info" : "ExpressionStatement[32950-33079]:ExpressionStatement[32575-32704]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[33094-33101]:ReturnStatement[32719-32726]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33229-33236]:Modifier[32854-32861]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[33237-33244]:PrimitiveType[32862-32869]"
  }, {
    "left" : "propertyIsImplicitCast",
    "right" : "propertyIsImplicitCast",
    "info" : "SimpleName[33245-33267]:SimpleName[32870-32892]"
  }, {
    "left" : "ObjectType type",
    "right" : "ObjectType type",
    "info" : "SingleVariableDeclaration[33268-33283]:SingleVariableDeclaration[32893-32908]"
  }, {
    "left" : "String prop",
    "right" : "String prop",
    "info" : "SingleVariableDeclaration[33285-33296]:SingleVariableDeclaration[32910-32921]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33298-33538]:Block[32923-33163]"
  }, {
    "left" : "for (; type != null; type = type.getImplicitPrototype())",
    "right" : "for (; type != null; type = type.getImplicitPrototype())",
    "info" : "ForStatement[33304-33516]:ForStatement[32929-33141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33361-33516]:Block[32986-33141]"
  }, {
    "left" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
    "right" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
    "info" : "VariableDeclarationStatement[33369-33424]:VariableDeclarationStatement[32994-33049]"
  }, {
    "left" : "if (docInfo != null && docInfo.isImplicitCast())",
    "right" : "if (docInfo != null && docInfo.isImplicitCast())",
    "info" : "IfStatement[33431-33510]:IfStatement[33056-33135]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33480-33510]:Block[33105-33135]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[33490-33502]:ReturnStatement[33115-33127]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[33521-33534]:ReturnStatement[33146-33159]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33794-33801]:Modifier[33419-33426]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[33802-33806]:PrimitiveType[33427-33431]"
  }, {
    "left" : "checkDeclaredPropertyInheritance",
    "right" : "checkDeclaredPropertyInheritance",
    "info" : "SimpleName[33807-33839]:SimpleName[33432-33464]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[33847-33862]:SingleVariableDeclaration[33472-33487]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[33864-33870]:SingleVariableDeclaration[33489-33495]"
  }, {
    "left" : "FunctionType ctorType",
    "right" : "FunctionType ctorType",
    "info" : "SingleVariableDeclaration[33872-33893]:SingleVariableDeclaration[33497-33518]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[33895-33914]:SingleVariableDeclaration[33520-33539]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[33922-33936]:SingleVariableDeclaration[33547-33561]"
  }, {
    "left" : "JSType propertyType",
    "right" : "JSType propertyType",
    "info" : "SingleVariableDeclaration[33938-33957]:SingleVariableDeclaration[33563-33582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33959-37419]:Block[33584-36552]"
  }, {
    "left" : "if (hasUnknownOrEmptySupertype(ctorType))",
    "right" : "if (hasUnknownOrEmptySupertype(ctorType))",
    "info" : "IfStatement[34056-34119]:IfStatement[33681-33744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34098-34119]:Block[33723-33744]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[34106-34113]:ReturnStatement[33731-33738]"
  }, {
    "left" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
    "right" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
    "info" : "VariableDeclarationStatement[34125-34187]:VariableDeclarationStatement[33750-33812]"
  }, {
    "left" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getPrototype().hasProperty(propertyName);",
    "right" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getPrototype().hasProperty(propertyName);",
    "info" : "VariableDeclarationStatement[34192-34306]:VariableDeclarationStatement[33817-33931]"
  }, {
    "left" : "boolean declaredOverride = info != null && info.isOverride();",
    "right" : "boolean declaredOverride = info != null && info.isOverride();",
    "info" : "VariableDeclarationStatement[34311-34372]:VariableDeclarationStatement[33936-33997]"
  }, {
    "left" : "boolean foundInterfaceProperty = false;",
    "right" : "boolean foundInterfaceProperty = false;",
    "info" : "VariableDeclarationStatement[34378-34417]:VariableDeclarationStatement[34003-34042]"
  }, {
    "left" : "if (ctorType.isConstructor())",
    "right" : "if (ctorType.isConstructor())",
    "info" : "IfStatement[34422-35924]:IfStatement[34047-35057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34452-35924]:Block[34077-35057]"
  }, {
    "left" : "for (JSType implementedInterface : ctorType.getImplementedInterfaces())",
    "right" : "for (JSType implementedInterface : ctorType.getImplementedInterfaces())",
    "info" : "EnhancedForStatement[34460-35918]:EnhancedForStatement[34085-35051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34532-35918]:Block[34157-35051]"
  }, {
    "left" : "if (implementedInterface.isUnknownType() ||\n            implementedInterface.isEmptyType())",
    "right" : "if (implementedInterface.isUnknownType() ||\n            implementedInterface.isEmptyType())",
    "info" : "IfStatement[34542-34665]:IfStatement[34167-34290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34634-34665]:Block[34259-34290]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[34646-34655]:ContinueStatement[34271-34280]"
  }, {
    "left" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
    "right" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
    "info" : "VariableDeclarationStatement[34674-34768]:VariableDeclarationStatement[34299-34393]"
  }, {
    "left" : "Preconditions.checkNotNull(interfaceType);",
    "right" : "Preconditions.checkNotNull(interfaceType);",
    "info" : "ExpressionStatement[34777-34819]:ExpressionStatement[34402-34444]"
  }, {
    "left" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
    "right" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
    "info" : "VariableDeclarationStatement[34828-34926]:VariableDeclarationStatement[34453-34551]"
  }, {
    "left" : "foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;",
    "right" : "foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;",
    "info" : "ExpressionStatement[34935-35007]:ExpressionStatement[34560-34632]"
  }, {
    "left" : "if (reportMissingOverride.isOn() && !declaredOverride &&\n            interfaceHasProperty)",
    "right" : "if (reportMissingOverride.isOn() && !declaredOverride &&\n            interfaceHasProperty)",
    "info" : "IfStatement[35016-35418]:IfStatement[34641-35043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35107-35418]:Block[34732-35043]"
  }, {
    "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
    "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
    "info" : "ExpressionStatement[35221-35408]:ExpressionStatement[34846-35033]"
  }, {
    "left" : "if (!declaredOverride && !superClassHasProperty)",
    "right" : "if (!declaredOverride && !superClassHasProperty)",
    "info" : "IfStatement[35930-36060]:IfStatement[35063-35193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35979-36060]:Block[35112-35193]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[36047-36054]:ReturnStatement[35180-35187]"
  }, {
    "left" : "JSType topInstanceType = superClassHasProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
    "right" : "JSType topInstanceType = superClassHasProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
    "info" : "VariableDeclarationStatement[36066-36178]:VariableDeclarationStatement[35199-35311]"
  }, {
    "left" : "if (reportMissingOverride.isOn() && ctorType.isConstructor() &&\n        !declaredOverride && superClassHasProperty)",
    "right" : "if (reportMissingOverride.isOn() && ctorType.isConstructor() &&\n        !declaredOverride && superClassHasProperty)",
    "info" : "IfStatement[36183-36552]:IfStatement[35316-35685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36299-36552]:Block[35432-35685]"
  }, {
    "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
    "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
    "info" : "ExpressionStatement[36401-36546]:ExpressionStatement[35534-35679]"
  }, {
    "left" : "if (!declaredOverride)",
    "right" : "if (!declaredOverride)",
    "info" : "IfStatement[36557-36640]:IfStatement[35690-35773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36580-36640]:Block[35713-35773]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[36627-36634]:ReturnStatement[35760-35767]"
  }, {
    "left" : "if (superClassHasProperty)",
    "right" : "if (superClassHasProperty)",
    "info" : "IfStatement[36708-37415]:IfStatement[35841-36548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36735-37177]:Block[35868-36310]"
  }, {
    "left" : "JSType superClassPropType =\n          superClass.getPrototype().getPropertyType(propertyName);",
    "right" : "JSType superClassPropType =\n          superClass.getPrototype().getPropertyType(propertyName);",
    "info" : "VariableDeclarationStatement[36789-36883]:VariableDeclarationStatement[35922-36016]"
  }, {
    "left" : "if (!propertyType.canAssignTo(superClassPropType))",
    "right" : "if (!propertyType.canAssignTo(superClassPropType))",
    "info" : "IfStatement[36890-37171]:IfStatement[36023-36304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36941-37171]:Block[36074-36304]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
    "right" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
    "info" : "ExpressionStatement[36951-37163]:ExpressionStatement[36084-36296]"
  }, {
    "left" : "if (!foundInterfaceProperty)",
    "right" : "if (!foundInterfaceProperty)",
    "info" : "IfStatement[37183-37415]:IfStatement[36316-36548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37212-37415]:Block[36345-36548]"
  }, {
    "left" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
    "right" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
    "info" : "ExpressionStatement[37281-37409]:ExpressionStatement[36414-36542]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37557-37564]:Modifier[36690-36697]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37565-37571]:Modifier[36698-36704]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[37572-37579]:PrimitiveType[36705-36712]"
  }, {
    "left" : "hasUnknownOrEmptySupertype",
    "right" : "hasUnknownOrEmptySupertype",
    "info" : "SimpleName[37580-37606]:SimpleName[36713-36739]"
  }, {
    "left" : "FunctionType ctor",
    "right" : "FunctionType ctor",
    "info" : "SingleVariableDeclaration[37607-37624]:SingleVariableDeclaration[36740-36757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37626-38372]:Block[36759-37505]"
  }, {
    "left" : "Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());",
    "right" : "Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());",
    "info" : "ExpressionStatement[37632-37704]:ExpressionStatement[36765-36837]"
  }, {
    "left" : "Preconditions.checkArgument(!ctor.isUnknownType());",
    "right" : "Preconditions.checkArgument(!ctor.isUnknownType());",
    "info" : "ExpressionStatement[37709-37760]:ExpressionStatement[36842-36893]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[37861-38368]:WhileStatement[36994-37501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37874-38368]:Block[37007-37501]"
  }, {
    "left" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
    "right" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[37882-37971]:VariableDeclarationStatement[37015-37104]"
  }, {
    "left" : "if (maybeSuperInstanceType == null)",
    "right" : "if (maybeSuperInstanceType == null)",
    "info" : "IfStatement[37978-38045]:IfStatement[37111-37178]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38014-38045]:Block[37147-37178]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[38024-38037]:ReturnStatement[37157-37170]"
  }, {
    "left" : "if (maybeSuperInstanceType.isUnknownType() ||\n          maybeSuperInstanceType.isEmptyType())",
    "right" : "if (maybeSuperInstanceType.isUnknownType() ||\n          maybeSuperInstanceType.isEmptyType())",
    "info" : "IfStatement[38052-38176]:IfStatement[37185-37309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38146-38176]:Block[37279-37309]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[38156-38168]:ReturnStatement[37289-37301]"
  }, {
    "left" : "ctor = maybeSuperInstanceType.getConstructor();",
    "right" : "ctor = maybeSuperInstanceType.getConstructor();",
    "info" : "ExpressionStatement[38183-38230]:ExpressionStatement[37316-37363]"
  }, {
    "left" : "if (ctor == null)",
    "right" : "if (ctor == null)",
    "info" : "IfStatement[38237-38286]:IfStatement[37370-37419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38255-38286]:Block[37388-37419]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[38265-38278]:ReturnStatement[37398-37411]"
  }, {
    "left" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
    "right" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
    "info" : "ExpressionStatement[38293-38362]:ExpressionStatement[37426-37495]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38497-38504]:Modifier[37630-37637]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[38505-38509]:PrimitiveType[37638-37642]"
  }, {
    "left" : "visitInterfaceGetprop",
    "right" : "visitInterfaceGetprop",
    "info" : "SimpleName[38510-38531]:SimpleName[37643-37664]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[38532-38547]:SingleVariableDeclaration[37665-37680]"
  }, {
    "left" : "Node assign",
    "right" : "Node assign",
    "info" : "SingleVariableDeclaration[38549-38560]:SingleVariableDeclaration[37682-37693]"
  }, {
    "left" : "Node object",
    "right" : "Node object",
    "info" : "SingleVariableDeclaration[38562-38573]:SingleVariableDeclaration[37695-37706]"
  }, {
    "left" : "String property",
    "right" : "String property",
    "info" : "SingleVariableDeclaration[38581-38596]:SingleVariableDeclaration[37714-37729]"
  }, {
    "left" : "Node lvalue",
    "right" : "Node lvalue",
    "info" : "SingleVariableDeclaration[38598-38609]:SingleVariableDeclaration[37731-37742]"
  }, {
    "left" : "Node rvalue",
    "right" : "Node rvalue",
    "info" : "SingleVariableDeclaration[38611-38622]:SingleVariableDeclaration[37744-37755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38624-39703]:Block[37757-38836]"
  }, {
    "left" : "JSType rvalueType = getJSType(rvalue);",
    "right" : "JSType rvalueType = getJSType(rvalue);",
    "info" : "VariableDeclarationStatement[38631-38669]:VariableDeclarationStatement[37764-37802]"
  }, {
    "left" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
    "right" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
    "info" : "VariableDeclarationStatement[38868-38959]:VariableDeclarationStatement[38001-38092]"
  }, {
    "left" : "if (!rvalueType.isOrdinaryFunction() &&\n        !(rvalue.isQualifiedName() &&\n          rvalue.getQualifiedName().equals(abstractMethodName)))",
    "right" : "if (!rvalueType.isOrdinaryFunction() &&\n        !(rvalue.isQualifiedName() &&\n          rvalue.getQualifiedName().equals(abstractMethodName)))",
    "info" : "IfStatement[38964-39440]:IfStatement[38097-38573]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39107-39440]:Block[38240-38573]"
  }, {
    "left" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
    "right" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
    "info" : "VariableDeclarationStatement[39190-39304]:VariableDeclarationStatement[38323-38437]"
  }, {
    "left" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
    "right" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
    "info" : "ExpressionStatement[39311-39434]:ExpressionStatement[38444-38567]"
  }, {
    "left" : "if (assign.getLastChild().getType() == Token.FUNCTION\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
    "right" : "if (assign.getLastChild().getType() == Token.FUNCTION\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
    "info" : "IfStatement[39446-39699]:IfStatement[38579-38832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39573-39699]:Block[38706-38832]"
  }, {
    "left" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
    "right" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
    "info" : "ExpressionStatement[39581-39693]:ExpressionStatement[38714-38826]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[39859-39866]:Modifier[38992-38999]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39867-39871]:PrimitiveType[39000-39004]"
  }, {
    "left" : "visitAnnotatedAssignGetprop",
    "right" : "visitAnnotatedAssignGetprop",
    "info" : "SimpleName[39872-39899]:SimpleName[39005-39032]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[39900-39915]:SingleVariableDeclaration[39033-39048]"
  }, {
    "left" : "Node assign",
    "right" : "Node assign",
    "info" : "SingleVariableDeclaration[39923-39934]:SingleVariableDeclaration[39056-39067]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[39936-39947]:SingleVariableDeclaration[39069-39080]"
  }, {
    "left" : "Node object",
    "right" : "Node object",
    "info" : "SingleVariableDeclaration[39949-39960]:SingleVariableDeclaration[39082-39093]"
  }, {
    "left" : "String property",
    "right" : "String property",
    "info" : "SingleVariableDeclaration[39962-39977]:SingleVariableDeclaration[39095-39110]"
  }, {
    "left" : "Node rvalue",
    "right" : "Node rvalue",
    "info" : "SingleVariableDeclaration[39979-39990]:SingleVariableDeclaration[39112-39123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39992-40156]:Block[39125-39289]"
  }, {
    "left" : "validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type,\n        object, property);",
    "right" : "validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type,\n        object, property);",
    "info" : "ExpressionStatement[40052-40152]:ExpressionStatement[39185-39285]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[40477-40484]:PrimitiveType[39610-39617]"
  }, {
    "left" : "visitName",
    "right" : "visitName",
    "info" : "SimpleName[40485-40494]:SimpleName[39618-39627]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[40495-40510]:SingleVariableDeclaration[39628-39643]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[40512-40518]:SingleVariableDeclaration[39645-39651]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[40520-40531]:SingleVariableDeclaration[39653-39664]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40533-41565]:Block[39666-40698]"
  }, {
    "left" : "int parentNodeType = parent.getType();",
    "right" : "int parentNodeType = parent.getType();",
    "info" : "VariableDeclarationStatement[40991-41029]:VariableDeclarationStatement[40124-40162]"
  }, {
    "left" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.LP ||\n        parentNodeType == Token.VAR)",
    "right" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.LP ||\n        parentNodeType == Token.VAR)",
    "info" : "IfStatement[41034-41217]:IfStatement[40167-40350]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41190-41217]:Block[40323-40350]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[41198-41211]:ReturnStatement[40331-40344]"
  }, {
    "left" : "JSType type = n.getJSType();",
    "right" : "JSType type = n.getJSType();",
    "info" : "VariableDeclarationStatement[41223-41251]:VariableDeclarationStatement[40356-40384]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[41256-41515]:IfStatement[40389-40648]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41274-41515]:Block[40407-40648]"
  }, {
    "left" : "type = getNativeType(UNKNOWN_TYPE);",
    "right" : "type = getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[41282-41317]:ExpressionStatement[40415-40450]"
  }, {
    "left" : "Var var = t.getScope().getVar(n.getString());",
    "right" : "Var var = t.getScope().getVar(n.getString());",
    "info" : "VariableDeclarationStatement[41324-41369]:VariableDeclarationStatement[40457-40502]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[41376-41509]:IfStatement[40509-40642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41393-41509]:Block[40526-40642]"
  }, {
    "left" : "JSType varType = var.getType();",
    "right" : "JSType varType = var.getType();",
    "info" : "VariableDeclarationStatement[41403-41434]:VariableDeclarationStatement[40536-40567]"
  }, {
    "left" : "if (varType != null)",
    "right" : "if (varType != null)",
    "info" : "IfStatement[41443-41501]:IfStatement[40576-40634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41464-41501]:Block[40597-40634]"
  }, {
    "left" : "type = varType;",
    "right" : "type = varType;",
    "info" : "ExpressionStatement[41476-41491]:ExpressionStatement[40609-40624]"
  }, {
    "left" : "ensureTyped(t, n, type);",
    "right" : "ensureTyped(t, n, type);",
    "info" : "ExpressionStatement[41520-41544]:ExpressionStatement[40653-40677]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[41549-41561]:ReturnStatement[40682-40694]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[41843-41850]:Modifier[40976-40983]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[41851-41855]:PrimitiveType[40984-40988]"
  }, {
    "left" : "visitGetProp",
    "right" : "visitGetProp",
    "info" : "SimpleName[41856-41868]:SimpleName[40989-41001]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[41869-41884]:SingleVariableDeclaration[41002-41017]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41886-41892]:SingleVariableDeclaration[41019-41025]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[41894-41905]:SingleVariableDeclaration[41027-41038]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41907-42901]:Block[41040-42034]"
  }, {
    "left" : "if (n.getJSType() != null && parent.getType() == Token.ASSIGN)",
    "right" : "if (n.getJSType() != null && parent.getType() == Token.ASSIGN)",
    "info" : "IfStatement[42124-42208]:IfStatement[41257-41341]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42187-42208]:Block[41320-41341]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[42195-42202]:ReturnStatement[41328-41335]"
  }, {
    "left" : "Node property = n.getLastChild();",
    "right" : "Node property = n.getLastChild();",
    "info" : "VariableDeclarationStatement[42420-42453]:VariableDeclarationStatement[41553-41586]"
  }, {
    "left" : "Node objNode = n.getFirstChild();",
    "right" : "Node objNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[42458-42491]:VariableDeclarationStatement[41591-41624]"
  }, {
    "left" : "JSType childType = getJSType(objNode);",
    "right" : "JSType childType = getJSType(objNode);",
    "info" : "VariableDeclarationStatement[42496-42534]:VariableDeclarationStatement[41629-41667]"
  }, {
    "left" : "if (!validator.expectNotNullOrUndefined(t, n, childType,\n            childType + \" has no properties\", getNativeType(OBJECT_TYPE)))",
    "right" : "if (!validator.expectNotNullOrUndefined(t, n, childType,\n            childType + \" has no properties\", getNativeType(OBJECT_TYPE)))",
    "info" : "IfStatement[42631-42809]:IfStatement[41764-41942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42763-42809]:Block[41896-41942]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[42771-42789]:ExpressionStatement[41904-41922]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[42796-42803]:ReturnStatement[41929-41936]"
  }, {
    "left" : "checkPropertyAccess(childType, property.getString(), t, n);",
    "right" : "checkPropertyAccess(childType, property.getString(), t, n);",
    "info" : "ExpressionStatement[42815-42874]:ExpressionStatement[41948-42007]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[42879-42897]:ExpressionStatement[42012-42030]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[42972-42979]:Modifier[42105-42112]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[42980-42984]:PrimitiveType[42113-42117]"
  }, {
    "left" : "checkPropertyAccess",
    "right" : "checkPropertyAccess",
    "info" : "SimpleName[42985-43004]:SimpleName[42118-42137]"
  }, {
    "left" : "JSType childType",
    "right" : "JSType childType",
    "info" : "SingleVariableDeclaration[43005-43021]:SingleVariableDeclaration[42138-42154]"
  }, {
    "left" : "String propName",
    "right" : "String propName",
    "info" : "SingleVariableDeclaration[43023-43038]:SingleVariableDeclaration[42156-42171]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[43046-43061]:SingleVariableDeclaration[42179-42194]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43063-43069]:SingleVariableDeclaration[42196-42202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43071-43996]:Block[42204-43129]"
  }, {
    "left" : "ObjectType objectType = childType.dereference();",
    "right" : "ObjectType objectType = childType.dereference();",
    "info" : "VariableDeclarationStatement[43077-43125]:VariableDeclarationStatement[42210-42258]"
  }, {
    "left" : "if (objectType != null)",
    "right" : "if (objectType != null)",
    "info" : "IfStatement[43130-43992]:IfStatement[42263-43125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43154-43842]:Block[42287-42975]"
  }, {
    "left" : "JSType propType = getJSType(n);",
    "right" : "JSType propType = getJSType(n);",
    "info" : "VariableDeclarationStatement[43162-43193]:VariableDeclarationStatement[42295-42326]"
  }, {
    "left" : "if ((!objectType.hasProperty(propName) ||\n           objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) &&\n          propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
    "right" : "if ((!objectType.hasProperty(propName) ||\n           objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) &&\n          propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
    "info" : "IfStatement[43200-43836]:IfStatement[42333-42969]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43386-43836]:Block[42519-42969]"
  }, {
    "left" : "if (objectType instanceof EnumType)",
    "right" : "if (objectType instanceof EnumType)",
    "info" : "IfStatement[43396-43828]:IfStatement[42529-42961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43432-43502]:Block[42565-42635]"
  }, {
    "left" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
    "right" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
    "info" : "ExpressionStatement[43444-43492]:ExpressionStatement[42577-42625]"
  }, {
    "left" : "if (!objectType.isEmptyType() &&\n            reportMissingProperties && !isPropertyTest(n))",
    "right" : "if (!objectType.isEmptyType() &&\n            reportMissingProperties && !isPropertyTest(n))",
    "info" : "IfStatement[43508-43828]:IfStatement[42641-42961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43600-43828]:Block[42733-42961]"
  }, {
    "left" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
    "right" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
    "info" : "IfStatement[43612-43818]:IfStatement[42745-42951]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43674-43818]:Block[42807-42951]"
  }, {
    "left" : "report(t, n, INEXISTENT_PROPERTY, propName,\n                validator.getReadableJSTypeName(n.getFirstChild(), true));",
    "right" : "report(t, n, INEXISTENT_PROPERTY, propName,\n                validator.getReadableJSTypeName(n.getFirstChild(), true));",
    "info" : "ExpressionStatement[43688-43806]:ExpressionStatement[42821-42939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43848-43992]:Block[42981-43125]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44207-44214]:Modifier[43340-43347]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44215-44222]:PrimitiveType[43348-43355]"
  }, {
    "left" : "isPropertyTest",
    "right" : "isPropertyTest",
    "info" : "SimpleName[44223-44237]:SimpleName[43356-43370]"
  }, {
    "left" : "Node getProp",
    "right" : "Node getProp",
    "info" : "SingleVariableDeclaration[44238-44250]:SingleVariableDeclaration[43371-43383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44252-44970]:Block[43385-44103]"
  }, {
    "left" : "Node parent = getProp.getParent();",
    "right" : "Node parent = getProp.getParent();",
    "info" : "VariableDeclarationStatement[44258-44292]:VariableDeclarationStatement[43391-43425]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;\n    }",
    "info" : "SwitchStatement[44297-44948]:SwitchStatement[43430-44081]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[44331-44347]:SwitchCase[43464-43480]"
  }, {
    "left" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
    "right" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
    "info" : "ReturnStatement[44356-44474]:ReturnStatement[43489-43607]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[44482-44496]:SwitchCase[43615-43629]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[44503-44520]:SwitchCase[43636-43653]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[44527-44541]:SwitchCase[43660-43674]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[44548-44563]:SwitchCase[43681-43696]"
  }, {
    "left" : "return NodeUtil.getConditionExpression(parent) == getProp;",
    "right" : "return NodeUtil.getConditionExpression(parent) == getProp;",
    "info" : "ReturnStatement[44572-44630]:ReturnStatement[43705-43763]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[44638-44660]:SwitchCase[43771-43793]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[44667-44685]:SwitchCase[43800-43818]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[44694-44706]:ReturnStatement[43827-43839]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[44714-44729]:SwitchCase[43847-43862]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[44736-44752]:SwitchCase[43869-43885]"
  }, {
    "left" : "return parent.getFirstChild() == getProp;",
    "right" : "return parent.getFirstChild() == getProp;",
    "info" : "ReturnStatement[44761-44802]:ReturnStatement[43894-43935]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[44810-44825]:SwitchCase[43943-43958]"
  }, {
    "left" : "return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;",
    "right" : "return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;",
    "info" : "ReturnStatement[44834-44942]:ReturnStatement[43967-44075]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[44953-44966]:ReturnStatement[44086-44099]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45200-45207]:Modifier[44333-44340]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45208-45212]:PrimitiveType[44341-44345]"
  }, {
    "left" : "visitGetElem",
    "right" : "visitGetElem",
    "info" : "SimpleName[45213-45225]:SimpleName[44346-44358]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[45226-45241]:SingleVariableDeclaration[44359-44374]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[45243-45249]:SingleVariableDeclaration[44376-44382]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45251-45422]:Block[44384-44555]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[45257-45287]:VariableDeclarationStatement[44390-44420]"
  }, {
    "left" : "Node right = n.getLastChild();",
    "right" : "Node right = n.getLastChild();",
    "info" : "VariableDeclarationStatement[45292-45322]:VariableDeclarationStatement[44425-44455]"
  }, {
    "left" : "validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));",
    "right" : "validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));",
    "info" : "ExpressionStatement[45327-45395]:ExpressionStatement[44460-44528]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[45400-45418]:ExpressionStatement[44533-44551]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45648-45655]:Modifier[44781-44788]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45656-45660]:PrimitiveType[44789-44793]"
  }, {
    "left" : "visitVar",
    "right" : "visitVar",
    "info" : "SimpleName[45661-45669]:SimpleName[44794-44802]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[45670-45685]:SingleVariableDeclaration[44803-44818]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[45687-45693]:SingleVariableDeclaration[44820-44826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45695-46984]:Block[44828-46117]"
  }, {
    "left" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
    "right" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
    "info" : "VariableDeclarationStatement[45863-45925]:VariableDeclarationStatement[44996-45058]"
  }, {
    "left" : "for (Node name : n.children())",
    "right" : "for (Node name : n.children())",
    "info" : "EnhancedForStatement[45930-46980]:EnhancedForStatement[45063-46113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45961-46980]:Block[45094-46113]"
  }, {
    "left" : "Node value = name.getFirstChild();",
    "right" : "Node value = name.getFirstChild();",
    "info" : "VariableDeclarationStatement[45969-46003]:VariableDeclarationStatement[45102-45136]"
  }, {
    "left" : "Var var = t.getScope().getVar(name.getString());",
    "right" : "Var var = t.getScope().getVar(name.getString());",
    "info" : "VariableDeclarationStatement[46080-46128]:VariableDeclarationStatement[45213-45261]"
  }, {
    "left" : "if (value != null)",
    "right" : "if (value != null)",
    "info" : "IfStatement[46136-46974]:IfStatement[45269-46107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46155-46974]:Block[45288-46107]"
  }, {
    "left" : "JSType valueType = getJSType(value);",
    "right" : "JSType valueType = getJSType(value);",
    "info" : "VariableDeclarationStatement[46165-46201]:VariableDeclarationStatement[45298-45334]"
  }, {
    "left" : "JSType nameType = var.getType();",
    "right" : "JSType nameType = var.getType();",
    "info" : "VariableDeclarationStatement[46210-46242]:VariableDeclarationStatement[45343-45375]"
  }, {
    "left" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
    "right" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
    "info" : "ExpressionStatement[46251-46322]:ExpressionStatement[45384-45455]"
  }, {
    "left" : "JSDocInfo info = name.getJSDocInfo();",
    "right" : "JSDocInfo info = name.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[46332-46369]:VariableDeclarationStatement[45465-45502]"
  }, {
    "left" : "if (info == null)",
    "right" : "if (info == null)",
    "info" : "IfStatement[46378-46433]:IfStatement[45511-45566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46396-46433]:Block[45529-45566]"
  }, {
    "left" : "info = varInfo;",
    "right" : "info = varInfo;",
    "info" : "ExpressionStatement[46408-46423]:ExpressionStatement[45541-45556]"
  }, {
    "left" : "if (info != null && info.hasEnumParameterType())",
    "right" : "if (info != null && info.hasEnumParameterType())",
    "info" : "IfStatement[46442-46966]:IfStatement[45575-46099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46491-46753]:Block[45624-45886]"
  }, {
    "left" : "checkEnumInitializer(\n              t, value,\n              info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));",
    "right" : "checkEnumInitializer(\n              t, value,\n              info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));",
    "info" : "ExpressionStatement[46617-46743]:ExpressionStatement[45750-45876]"
  }, {
    "left" : "if (var.isTypeInferred())",
    "right" : "if (var.isTypeInferred())",
    "info" : "IfStatement[46759-46966]:IfStatement[45892-46099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46785-46839]:Block[45918-45972]"
  }, {
    "left" : "ensureTyped(t, name, valueType);",
    "right" : "ensureTyped(t, name, valueType);",
    "info" : "ExpressionStatement[46797-46829]:ExpressionStatement[45930-45962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46845-46966]:Block[45978-46099]"
  }, {
    "left" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
    "right" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
    "info" : "ExpressionStatement[46857-46956]:ExpressionStatement[45990-46089]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[47024-47031]:Modifier[46157-46164]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[47032-47036]:PrimitiveType[46165-46169]"
  }, {
    "left" : "visitNew",
    "right" : "visitNew",
    "info" : "SimpleName[47037-47045]:SimpleName[46170-46178]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[47046-47061]:SingleVariableDeclaration[46179-46194]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[47063-47069]:SingleVariableDeclaration[46196-46202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47071-47887]:Block[46204-47020]"
  }, {
    "left" : "Node constructor = n.getFirstChild();",
    "right" : "Node constructor = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[47077-47114]:VariableDeclarationStatement[46210-46247]"
  }, {
    "left" : "FunctionType type = getFunctionType(constructor);",
    "right" : "FunctionType type = getFunctionType(constructor);",
    "info" : "VariableDeclarationStatement[47119-47168]:VariableDeclarationStatement[46252-46301]"
  }, {
    "left" : "if (type != null && type.isConstructor())",
    "right" : "if (type != null && type.isConstructor())",
    "info" : "IfStatement[47173-47883]:IfStatement[46306-47016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47215-47309]:Block[46348-46442]"
  }, {
    "left" : "visitParameterList(t, n, type);",
    "right" : "visitParameterList(t, n, type);",
    "info" : "ExpressionStatement[47223-47254]:ExpressionStatement[46356-46387]"
  }, {
    "left" : "ensureTyped(t, n, type.getInstanceType());",
    "right" : "ensureTyped(t, n, type.getInstanceType());",
    "info" : "ExpressionStatement[47261-47303]:ExpressionStatement[46394-46436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47315-47883]:Block[46448-47016]"
  }, {
    "left" : "if (constructor.getType() != Token.GETPROP)",
    "right" : "if (constructor.getType() != Token.GETPROP)",
    "info" : "IfStatement[47380-47852]:IfStatement[46513-46985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47424-47852]:Block[46557-46985]"
  }, {
    "left" : "Node line;",
    "right" : "Node line;",
    "info" : "VariableDeclarationStatement[47639-47649]:VariableDeclarationStatement[46772-46782]"
  }, {
    "left" : "if (constructor.getLineno() < 0 || constructor.getCharno() < 0)",
    "right" : "if (constructor.getLineno() < 0 || constructor.getCharno() < 0)",
    "info" : "IfStatement[47658-47800]:IfStatement[46791-46933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47722-47753]:Block[46855-46886]"
  }, {
    "left" : "line = n;",
    "right" : "line = n;",
    "info" : "ExpressionStatement[47734-47743]:ExpressionStatement[46867-46876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47759-47800]:Block[46892-46933]"
  }, {
    "left" : "line = constructor;",
    "right" : "line = constructor;",
    "info" : "ExpressionStatement[47771-47790]:ExpressionStatement[46904-46923]"
  }, {
    "left" : "report(t, line, NOT_A_CONSTRUCTOR);",
    "right" : "report(t, line, NOT_A_CONSTRUCTOR);",
    "info" : "ExpressionStatement[47809-47844]:ExpressionStatement[46942-46977]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[47859-47877]:ExpressionStatement[46992-47010]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48132-48139]:Modifier[47265-47272]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[48140-48144]:PrimitiveType[47273-47277]"
  }, {
    "left" : "visitFunction",
    "right" : "visitFunction",
    "info" : "SimpleName[48145-48158]:SimpleName[47278-47291]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[48159-48174]:SingleVariableDeclaration[47292-47307]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[48176-48182]:SingleVariableDeclaration[47309-47315]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48184-49694]:Block[47317-48827]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[48190-48224]:VariableDeclarationStatement[47323-47357]"
  }, {
    "left" : "FunctionType functionType = (FunctionType) n.getJSType();",
    "right" : "FunctionType functionType = (FunctionType) n.getJSType();",
    "info" : "VariableDeclarationStatement[48230-48287]:VariableDeclarationStatement[47363-47420]"
  }, {
    "left" : "String functionPrivateName = n.getFirstChild().getString();",
    "right" : "String functionPrivateName = n.getFirstChild().getString();",
    "info" : "VariableDeclarationStatement[48292-48351]:VariableDeclarationStatement[47425-47484]"
  }, {
    "left" : "if (functionType.isInterface() || functionType.isConstructor())",
    "right" : "if (functionType.isInterface() || functionType.isConstructor())",
    "info" : "IfStatement[48356-49690]:IfStatement[47489-48823]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48420-49690]:Block[47553-48823]"
  }, {
    "left" : "FunctionType baseConstructor = functionType.\n          getPrototype().getImplicitPrototype().getConstructor();",
    "right" : "FunctionType baseConstructor = functionType.\n          getPrototype().getImplicitPrototype().getConstructor();",
    "info" : "VariableDeclarationStatement[48428-48538]:VariableDeclarationStatement[47561-47671]"
  }, {
    "left" : "if (baseConstructor != null &&\n          baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          (baseConstructor.isConstructor() && functionType.isInterface() ||\n           baseConstructor.isInterface() && functionType.isConstructor()))",
    "right" : "if (baseConstructor != null &&\n          baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          (baseConstructor.isConstructor() && functionType.isInterface() ||\n           baseConstructor.isInterface() && functionType.isConstructor()))",
    "info" : "IfStatement[48545-48906]:IfStatement[47678-48039]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48795-48906]:Block[47928-48039]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));",
    "right" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));",
    "info" : "ExpressionStatement[48805-48898]:ExpressionStatement[47938-48031]"
  }, {
    "left" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
    "right" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
    "info" : "EnhancedForStatement[48914-49566]:EnhancedForStatement[48047-48699]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48983-49566]:Block[48116-48699]"
  }, {
    "left" : "boolean badImplementedType = false;",
    "right" : "boolean badImplementedType = false;",
    "info" : "VariableDeclarationStatement[48993-49028]:VariableDeclarationStatement[48126-48161]"
  }, {
    "left" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
    "right" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
    "info" : "VariableDeclarationStatement[49037-49098]:VariableDeclarationStatement[48170-48231]"
  }, {
    "left" : "if (baseInterfaceObj != null)",
    "right" : "if (baseInterfaceObj != null)",
    "info" : "IfStatement[49107-49447]:IfStatement[48240-48580]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49137-49393]:Block[48270-48526]"
  }, {
    "left" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
    "right" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
    "info" : "VariableDeclarationStatement[49149-49233]:VariableDeclarationStatement[48282-48366]"
  }, {
    "left" : "if (interfaceConstructor != null &&\n              !interfaceConstructor.isInterface())",
    "right" : "if (interfaceConstructor != null &&\n              !interfaceConstructor.isInterface())",
    "info" : "IfStatement[49244-49383]:IfStatement[48377-48516]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49331-49383]:Block[48464-48516]"
  }, {
    "left" : "badImplementedType = true;",
    "right" : "badImplementedType = true;",
    "info" : "ExpressionStatement[49345-49371]:ExpressionStatement[48478-48504]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49399-49447]:Block[48532-48580]"
  }, {
    "left" : "badImplementedType = true;",
    "right" : "badImplementedType = true;",
    "info" : "ExpressionStatement[49411-49437]:ExpressionStatement[48544-48570]"
  }, {
    "left" : "if (badImplementedType)",
    "right" : "if (badImplementedType)",
    "info" : "IfStatement[49456-49558]:IfStatement[48589-48691]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49480-49558]:Block[48613-48691]"
  }, {
    "left" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
    "right" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
    "info" : "ExpressionStatement[49492-49548]:ExpressionStatement[48625-48681]"
  }, {
    "left" : "if (functionType.isConstructor())",
    "right" : "if (functionType.isConstructor())",
    "info" : "IfStatement[49573-49684]:IfStatement[48706-48817]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49607-49684]:Block[48740-48817]"
  }, {
    "left" : "validator.expectAllInterfaceProperties(t, n, functionType);",
    "right" : "validator.expectAllInterfaceProperties(t, n, functionType);",
    "info" : "ExpressionStatement[49617-49676]:ExpressionStatement[48750-48809]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49921-49928]:Modifier[49054-49061]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[49929-49933]:PrimitiveType[49062-49066]"
  }, {
    "left" : "visitCall",
    "right" : "visitCall",
    "info" : "SimpleName[49934-49943]:SimpleName[49067-49076]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[49944-49959]:SingleVariableDeclaration[49077-49092]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[49961-49967]:SingleVariableDeclaration[49094-49100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49969-51041]:Block[49102-50174]"
  }, {
    "left" : "Node child = n.getFirstChild();",
    "right" : "Node child = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[49975-50006]:VariableDeclarationStatement[49108-49139]"
  }, {
    "left" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
    "right" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[50011-50078]:VariableDeclarationStatement[49144-49211]"
  }, {
    "left" : "if (!childType.canBeCalled())",
    "right" : "if (!childType.canBeCalled())",
    "info" : "IfStatement[50084-50216]:IfStatement[49217-49349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50114-50216]:Block[49247-49349]"
  }, {
    "left" : "report(t, n, NOT_CALLABLE, childType.toString());",
    "right" : "report(t, n, NOT_CALLABLE, childType.toString());",
    "info" : "ExpressionStatement[50122-50171]:ExpressionStatement[49255-49304]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[50178-50196]:ExpressionStatement[49311-49329]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[50203-50210]:ReturnStatement[49336-49343]"
  }, {
    "left" : "if (childType instanceof FunctionType)",
    "right" : "if (childType instanceof FunctionType)",
    "info" : "IfStatement[50347-50828]:IfStatement[49480-49961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50386-50790]:Block[49519-49923]"
  }, {
    "left" : "FunctionType functionType = (FunctionType) childType;",
    "right" : "FunctionType functionType = (FunctionType) childType;",
    "info" : "VariableDeclarationStatement[50394-50447]:VariableDeclarationStatement[49527-49580]"
  }, {
    "left" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType())",
    "right" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType())",
    "info" : "IfStatement[50521-50682]:IfStatement[49654-49815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50603-50682]:Block[49736-49815]"
  }, {
    "left" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
    "right" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
    "info" : "ExpressionStatement[50613-50674]:ExpressionStatement[49746-49807]"
  }, {
    "left" : "visitParameterList(t, n, functionType);",
    "right" : "visitParameterList(t, n, functionType);",
    "info" : "ExpressionStatement[50690-50729]:ExpressionStatement[49823-49862]"
  }, {
    "left" : "ensureTyped(t, n, functionType.getReturnType());",
    "right" : "ensureTyped(t, n, functionType.getReturnType());",
    "info" : "ExpressionStatement[50736-50784]:ExpressionStatement[49869-49917]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50796-50828]:Block[49929-49961]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[50804-50822]:ExpressionStatement[49937-49955]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[51109-51116]:Modifier[50242-50249]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[51117-51121]:PrimitiveType[50250-50254]"
  }, {
    "left" : "visitParameterList",
    "right" : "visitParameterList",
    "info" : "SimpleName[51122-51140]:SimpleName[50255-50273]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[51141-51156]:SingleVariableDeclaration[50274-50289]"
  }, {
    "left" : "Node call",
    "right" : "Node call",
    "info" : "SingleVariableDeclaration[51158-51167]:SingleVariableDeclaration[50291-50300]"
  }, {
    "left" : "FunctionType functionType",
    "right" : "FunctionType functionType",
    "info" : "SingleVariableDeclaration[51175-51200]:SingleVariableDeclaration[50308-50333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51202-52495]:Block[50335-51628]"
  }, {
    "left" : "Iterator<Node> arguments = call.children().iterator();",
    "right" : "Iterator<Node> arguments = call.children().iterator();",
    "info" : "VariableDeclarationStatement[51208-51262]:VariableDeclarationStatement[50341-50395]"
  }, {
    "left" : "arguments.next();",
    "right" : "arguments.next();",
    "info" : "ExpressionStatement[51267-51284]:ExpressionStatement[50400-50417]"
  }, {
    "left" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
    "right" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
    "info" : "VariableDeclarationStatement[51316-51384]:VariableDeclarationStatement[50449-50517]"
  }, {
    "left" : "int ordinal = 0;",
    "right" : "int ordinal = 0;",
    "info" : "VariableDeclarationStatement[51389-51405]:VariableDeclarationStatement[50522-50538]"
  }, {
    "left" : "Node parameter = null;",
    "right" : "Node parameter = null;",
    "info" : "VariableDeclarationStatement[51410-51432]:VariableDeclarationStatement[50543-50565]"
  }, {
    "left" : "Node argument = null;",
    "right" : "Node argument = null;",
    "info" : "VariableDeclarationStatement[51437-51458]:VariableDeclarationStatement[50570-50591]"
  }, {
    "left" : "while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs()))",
    "right" : "while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs()))",
    "info" : "WhileStatement[51463-51992]:WhileStatement[50596-51125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51586-51992]:Block[50719-51125]"
  }, {
    "left" : "if (parameters.hasNext())",
    "right" : "if (parameters.hasNext())",
    "info" : "IfStatement[51730-51804]:IfStatement[50863-50937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51756-51804]:Block[50889-50937]"
  }, {
    "left" : "parameter = parameters.next();",
    "right" : "parameter = parameters.next();",
    "info" : "ExpressionStatement[51766-51796]:ExpressionStatement[50899-50929]"
  }, {
    "left" : "argument = arguments.next();",
    "right" : "argument = arguments.next();",
    "info" : "ExpressionStatement[51811-51839]:ExpressionStatement[50944-50972]"
  }, {
    "left" : "ordinal++;",
    "right" : "ordinal++;",
    "info" : "ExpressionStatement[51846-51856]:ExpressionStatement[50979-50989]"
  }, {
    "left" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
    "right" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
    "info" : "ExpressionStatement[51864-51986]:ExpressionStatement[50997-51119]"
  }, {
    "left" : "int numArgs = call.getChildCount() - 1;",
    "right" : "int numArgs = call.getChildCount() - 1;",
    "info" : "VariableDeclarationStatement[51998-52037]:VariableDeclarationStatement[51131-51170]"
  }, {
    "left" : "int minArgs = functionType.getMinArguments();",
    "right" : "int minArgs = functionType.getMinArguments();",
    "info" : "VariableDeclarationStatement[52042-52087]:VariableDeclarationStatement[51175-51220]"
  }, {
    "left" : "int maxArgs = functionType.getMaxArguments();",
    "right" : "int maxArgs = functionType.getMaxArguments();",
    "info" : "VariableDeclarationStatement[52092-52137]:VariableDeclarationStatement[51225-51270]"
  }, {
    "left" : "if (minArgs > numArgs || maxArgs < numArgs)",
    "right" : "if (minArgs > numArgs || maxArgs < numArgs)",
    "info" : "IfStatement[52142-52491]:IfStatement[51275-51624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52186-52491]:Block[51319-51624]"
  }, {
    "left" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
    "right" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
    "info" : "ExpressionStatement[52194-52485]:ExpressionStatement[51327-51618]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52724-52731]:Modifier[51857-51864]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[52732-52736]:PrimitiveType[51865-51869]"
  }, {
    "left" : "visitReturn",
    "right" : "visitReturn",
    "info" : "SimpleName[52737-52748]:SimpleName[51870-51881]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[52749-52764]:SingleVariableDeclaration[51882-51897]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[52766-52772]:SingleVariableDeclaration[51899-51905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52774-53794]:Block[51907-52927]"
  }, {
    "left" : "Node function = t.getEnclosingFunction();",
    "right" : "Node function = t.getEnclosingFunction();",
    "info" : "VariableDeclarationStatement[52780-52821]:VariableDeclarationStatement[51913-51954]"
  }, {
    "left" : "if (function == null)",
    "right" : "if (function == null)",
    "info" : "IfStatement[52921-52964]:IfStatement[52054-52097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52943-52964]:Block[52076-52097]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[52951-52958]:ReturnStatement[52084-52091]"
  }, {
    "left" : "JSType jsType = getJSType(function);",
    "right" : "JSType jsType = getJSType(function);",
    "info" : "VariableDeclarationStatement[52969-53005]:VariableDeclarationStatement[52102-52138]"
  }, {
    "left" : "if (jsType instanceof FunctionType)",
    "right" : "if (jsType instanceof FunctionType)",
    "info" : "IfStatement[53011-53790]:IfStatement[52144-52923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53047-53790]:Block[52180-52923]"
  }, {
    "left" : "FunctionType functionType = (FunctionType) jsType;",
    "right" : "FunctionType functionType = (FunctionType) jsType;",
    "info" : "VariableDeclarationStatement[53055-53105]:VariableDeclarationStatement[52188-52238]"
  }, {
    "left" : "JSType returnType = functionType.getReturnType();",
    "right" : "JSType returnType = functionType.getReturnType();",
    "info" : "VariableDeclarationStatement[53113-53162]:VariableDeclarationStatement[52246-52295]"
  }, {
    "left" : "if (returnType == null)",
    "right" : "if (returnType == null)",
    "info" : "IfStatement[53270-53350]:IfStatement[52403-52483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53294-53350]:Block[52427-52483]"
  }, {
    "left" : "returnType = getNativeType(VOID_TYPE);",
    "right" : "returnType = getNativeType(VOID_TYPE);",
    "info" : "ExpressionStatement[53304-53342]:ExpressionStatement[52437-52475]"
  }, {
    "left" : "Node valueNode = n.getFirstChild();",
    "right" : "Node valueNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[53402-53437]:VariableDeclarationStatement[52535-52570]"
  }, {
    "left" : "JSType actualReturnType;",
    "right" : "JSType actualReturnType;",
    "info" : "VariableDeclarationStatement[53444-53468]:VariableDeclarationStatement[52577-52601]"
  }, {
    "left" : "if (valueNode == null)",
    "right" : "if (valueNode == null)",
    "info" : "IfStatement[53475-53647]:IfStatement[52608-52780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53498-53583]:Block[52631-52716]"
  }, {
    "left" : "actualReturnType = getNativeType(VOID_TYPE);",
    "right" : "actualReturnType = getNativeType(VOID_TYPE);",
    "info" : "ExpressionStatement[53508-53552]:ExpressionStatement[52641-52685]"
  }, {
    "left" : "valueNode = n;",
    "right" : "valueNode = n;",
    "info" : "ExpressionStatement[53561-53575]:ExpressionStatement[52694-52708]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53589-53647]:Block[52722-52780]"
  }, {
    "left" : "actualReturnType = getJSType(valueNode);",
    "right" : "actualReturnType = getJSType(valueNode);",
    "info" : "ExpressionStatement[53599-53639]:ExpressionStatement[52732-52772]"
  }, {
    "left" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
    "right" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
    "info" : "ExpressionStatement[53674-53784]:ExpressionStatement[52807-52917]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[54189-54196]:Modifier[53322-53329]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[54197-54201]:PrimitiveType[53330-53334]"
  }, {
    "left" : "visitBinaryOperator",
    "right" : "visitBinaryOperator",
    "info" : "SimpleName[54202-54221]:SimpleName[53335-53354]"
  }, {
    "left" : "int op",
    "right" : "int op",
    "info" : "SingleVariableDeclaration[54222-54228]:SingleVariableDeclaration[53355-53361]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[54230-54245]:SingleVariableDeclaration[53363-53378]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[54247-54253]:SingleVariableDeclaration[53380-53386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54255-55877]:Block[53388-55010]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[54261-54291]:VariableDeclarationStatement[53394-53424]"
  }, {
    "left" : "JSType leftType = getJSType(left);",
    "right" : "JSType leftType = getJSType(left);",
    "info" : "VariableDeclarationStatement[54296-54330]:VariableDeclarationStatement[53429-53463]"
  }, {
    "left" : "Node right = n.getLastChild();",
    "right" : "Node right = n.getLastChild();",
    "info" : "VariableDeclarationStatement[54335-54365]:VariableDeclarationStatement[53468-53498]"
  }, {
    "left" : "JSType rightType = getJSType(right);",
    "right" : "JSType rightType = getJSType(right);",
    "info" : "VariableDeclarationStatement[54370-54406]:VariableDeclarationStatement[53503-53539]"
  }, {
    "left" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n    }",
    "right" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n    }",
    "info" : "SwitchStatement[54411-55850]:SwitchStatement[53544-54983]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[54431-54453]:SwitchCase[53564-53586]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[54460-54482]:SwitchCase[53593-53615]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[54489-54504]:SwitchCase[53622-53637]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[54511-54526]:SwitchCase[53644-53659]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[54533-54556]:SwitchCase[53666-53689]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[54563-54579]:SwitchCase[53696-53712]"
  }, {
    "left" : "if (!leftType.matchesInt32Context())",
    "right" : "if (!leftType.matchesInt32Context())",
    "info" : "IfStatement[54588-54749]:IfStatement[53721-53882]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54625-54749]:Block[53758-53882]"
  }, {
    "left" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
    "right" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
    "info" : "ExpressionStatement[54637-54739]:ExpressionStatement[53770-53872]"
  }, {
    "left" : "if (!rightType.matchesUint32Context())",
    "right" : "if (!rightType.matchesUint32Context())",
    "info" : "IfStatement[54758-54923]:IfStatement[53891-54056]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54797-54923]:Block[53930-54056]"
  }, {
    "left" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
    "right" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
    "info" : "ExpressionStatement[54809-54913]:ExpressionStatement[53942-54046]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[54932-54938]:BreakStatement[54065-54071]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[54946-54968]:SwitchCase[54079-54101]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[54975-54997]:SwitchCase[54108-54130]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[55004-55026]:SwitchCase[54137-54159]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[55033-55055]:SwitchCase[54166-54188]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[55062-55077]:SwitchCase[54195-54210]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[55084-55099]:SwitchCase[54217-54232]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[55106-55121]:SwitchCase[54239-54254]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[55128-55143]:SwitchCase[54261-54276]"
  }, {
    "left" : "validator.expectNumber(t, left, leftType, \"left operand\");",
    "right" : "validator.expectNumber(t, left, leftType, \"left operand\");",
    "info" : "ExpressionStatement[55152-55210]:ExpressionStatement[54285-54343]"
  }, {
    "left" : "validator.expectNumber(t, right, rightType, \"right operand\");",
    "right" : "validator.expectNumber(t, right, rightType, \"right operand\");",
    "info" : "ExpressionStatement[55219-55280]:ExpressionStatement[54352-54413]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[55289-55295]:BreakStatement[54422-54428]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[55303-55328]:SwitchCase[54436-54461]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[55335-55360]:SwitchCase[54468-54493]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[55367-55391]:SwitchCase[54500-54524]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[55398-55416]:SwitchCase[54531-54549]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[55423-55441]:SwitchCase[54556-54574]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[55448-55465]:SwitchCase[54581-54598]"
  }, {
    "left" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
    "right" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
    "info" : "ExpressionStatement[55474-55573]:ExpressionStatement[54607-54706]"
  }, {
    "left" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
    "right" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
    "info" : "ExpressionStatement[55582-55684]:ExpressionStatement[54715-54817]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[55693-55699]:BreakStatement[54826-54832]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[55707-55729]:SwitchCase[54840-54862]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[55736-55751]:SwitchCase[54869-54884]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[55760-55766]:BreakStatement[54893-54899]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[55774-55782]:SwitchCase[54907-54915]"
  }, {
    "left" : "report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));",
    "right" : "report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));",
    "info" : "ExpressionStatement[55791-55844]:ExpressionStatement[54924-54977]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[55855-55873]:ExpressionStatement[54988-55006]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[56544-56551]:Modifier[55677-55684]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[56552-56556]:PrimitiveType[55685-55689]"
  }, {
    "left" : "checkEnumInitializer",
    "right" : "checkEnumInitializer",
    "info" : "SimpleName[56557-56577]:SimpleName[55690-55710]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[56585-56600]:SingleVariableDeclaration[55718-55733]"
  }, {
    "left" : "Node value",
    "right" : "Node value",
    "info" : "SingleVariableDeclaration[56602-56612]:SingleVariableDeclaration[55735-55745]"
  }, {
    "left" : "JSType primitiveType",
    "right" : "JSType primitiveType",
    "info" : "SingleVariableDeclaration[56614-56634]:SingleVariableDeclaration[55747-55767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56636-57832]:Block[55769-56965]"
  }, {
    "left" : "if (value.getType() == Token.OBJECTLIT)",
    "right" : "if (value.getType() == Token.OBJECTLIT)",
    "info" : "IfStatement[56642-57828]:IfStatement[55775-56961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56682-57064]:Block[55815-56197]"
  }, {
    "left" : "for (Node key = value.getFirstChild();\n           key != null; key = key.getNext())",
    "right" : "for (Node key = value.getFirstChild();\n           key != null; key = key.getNext())",
    "info" : "ForStatement[56690-57058]:ForStatement[55823-56191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56774-57058]:Block[55907-56191]"
  }, {
    "left" : "Node propValue = key.getFirstChild();",
    "right" : "Node propValue = key.getFirstChild();",
    "info" : "VariableDeclarationStatement[56784-56821]:VariableDeclarationStatement[55917-55954]"
  }, {
    "left" : "validator.expectCanAssignTo(\n            t, propValue, getJSType(propValue), primitiveType,\n            \"element type must match enum's type\");",
    "right" : "validator.expectCanAssignTo(\n            t, propValue, getJSType(propValue), primitiveType,\n            \"element type must match enum's type\");",
    "info" : "ExpressionStatement[56907-57050]:ExpressionStatement[56040-56183]"
  }, {
    "left" : "if (value.getJSType() instanceof EnumType)",
    "right" : "if (value.getJSType() instanceof EnumType)",
    "info" : "IfStatement[57070-57828]:IfStatement[56203-56961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57113-57753]:Block[56246-56886]"
  }, {
    "left" : "EnumType valueEnumType = (EnumType) value.getJSType();",
    "right" : "EnumType valueEnumType = (EnumType) value.getJSType();",
    "info" : "VariableDeclarationStatement[57464-57518]:VariableDeclarationStatement[56597-56651]"
  }, {
    "left" : "JSType valueEnumPrimitiveType =\n          valueEnumType.getElementsType().getPrimitiveType();",
    "right" : "JSType valueEnumPrimitiveType =\n          valueEnumType.getElementsType().getPrimitiveType();",
    "info" : "VariableDeclarationStatement[57525-57618]:VariableDeclarationStatement[56658-56751]"
  }, {
    "left" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n          primitiveType, \"incompatible enum element types\");",
    "right" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n          primitiveType, \"incompatible enum element types\");",
    "info" : "ExpressionStatement[57625-57747]:ExpressionStatement[56758-56880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57759-57828]:Block[56892-56961]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[58101-58108]:Modifier[57234-57241]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[58109-58115]:Modifier[57242-57248]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[58116-58123]:PrimitiveType[57249-57256]"
  }, {
    "left" : "isReference",
    "right" : "isReference",
    "info" : "SimpleName[58124-58135]:SimpleName[57257-57268]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[58136-58142]:SingleVariableDeclaration[57269-57275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58144-58317]:Block[57277-57450]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.NAME:\n        return true;\n\n      default:\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.NAME:\n        return true;\n\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[58150-58312]:SwitchStatement[57283-57445]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[58179-58198]:SwitchCase[57312-57331]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[58205-58224]:SwitchCase[57338-57357]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[58231-58247]:SwitchCase[57364-57380]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[58256-58268]:ReturnStatement[57389-57401]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[58276-58284]:SwitchCase[57409-57417]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[58293-58306]:ReturnStatement[57426-57439]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[58427-58434]:Modifier[57560-57567]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[58435-58441]:SimpleType[57568-57574]"
  }, {
    "left" : "getJSType",
    "right" : "getJSType",
    "info" : "SimpleName[58442-58451]:SimpleName[57575-57584]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[58452-58458]:SingleVariableDeclaration[57585-57591]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58460-58888]:Block[57593-58021]"
  }, {
    "left" : "JSType jsType = n.getJSType();",
    "right" : "JSType jsType = n.getJSType();",
    "info" : "VariableDeclarationStatement[58466-58496]:VariableDeclarationStatement[57599-57629]"
  }, {
    "left" : "if (jsType == null)",
    "right" : "if (jsType == null)",
    "info" : "IfStatement[58501-58884]:IfStatement[57634-58017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58521-58850]:Block[57654-57983]"
  }, {
    "left" : "return getNativeType(UNKNOWN_TYPE);",
    "right" : "return getNativeType(UNKNOWN_TYPE);",
    "info" : "ReturnStatement[58809-58844]:ReturnStatement[57942-57977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58856-58884]:Block[57989-58017]"
  }, {
    "left" : "return jsType;",
    "right" : "return jsType;",
    "info" : "ReturnStatement[58864-58878]:ReturnStatement[57997-58011]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[58994-59001]:Modifier[58127-58134]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[59002-59014]:SimpleType[58135-58147]"
  }, {
    "left" : "getFunctionType",
    "right" : "getFunctionType",
    "info" : "SimpleName[59015-59030]:SimpleName[58148-58163]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[59031-59037]:SingleVariableDeclaration[58164-58170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59039-59329]:Block[58172-58462]"
  }, {
    "left" : "JSType type = getJSType(n).restrictByNotNullOrUndefined();",
    "right" : "JSType type = getJSType(n).restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[59045-59103]:VariableDeclarationStatement[58178-58236]"
  }, {
    "left" : "if (type.isUnknownType())",
    "right" : "if (type.isUnknownType())",
    "info" : "IfStatement[59108-59325]:IfStatement[58241-58458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59134-59212]:Block[58267-58345]"
  }, {
    "left" : "return typeRegistry.getNativeFunctionType(U2U_CONSTRUCTOR_TYPE);",
    "right" : "return typeRegistry.getNativeFunctionType(U2U_CONSTRUCTOR_TYPE);",
    "info" : "ReturnStatement[59142-59206]:ReturnStatement[58275-58339]"
  }, {
    "left" : "if (type instanceof FunctionType)",
    "right" : "if (type instanceof FunctionType)",
    "info" : "IfStatement[59218-59325]:IfStatement[58351-58458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59252-59293]:Block[58385-58426]"
  }, {
    "left" : "return (FunctionType) type;",
    "right" : "return (FunctionType) type;",
    "info" : "ReturnStatement[59260-59287]:ReturnStatement[58393-58420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59299-59325]:Block[58432-58458]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[59307-59319]:ReturnStatement[58440-58452]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[59768-59775]:Modifier[58901-58908]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[59776-59780]:PrimitiveType[58909-58913]"
  }, {
    "left" : "ensureTyped",
    "right" : "ensureTyped",
    "info" : "SimpleName[59781-59792]:SimpleName[58914-58925]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[59793-59808]:SingleVariableDeclaration[58926-58941]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[59810-59816]:SingleVariableDeclaration[58943-58949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59818-59875]:Block[58951-59008]"
  }, {
    "left" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
    "right" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
    "info" : "ExpressionStatement[59824-59871]:ExpressionStatement[58957-59004]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[59879-59886]:Modifier[59012-59019]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[59887-59891]:PrimitiveType[59020-59024]"
  }, {
    "left" : "ensureTyped",
    "right" : "ensureTyped",
    "info" : "SimpleName[59892-59903]:SimpleName[59025-59036]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[59904-59919]:SingleVariableDeclaration[59037-59052]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[59921-59927]:SingleVariableDeclaration[59054-59060]"
  }, {
    "left" : "JSTypeNative type",
    "right" : "JSTypeNative type",
    "info" : "SingleVariableDeclaration[59929-59946]:SingleVariableDeclaration[59062-59079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59948-59997]:Block[59081-59130]"
  }, {
    "left" : "ensureTyped(t, n, getNativeType(type));",
    "right" : "ensureTyped(t, n, getNativeType(type));",
    "info" : "ExpressionStatement[59954-59993]:ExpressionStatement[59087-59126]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[60813-60820]:Modifier[59946-59953]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[60821-60825]:PrimitiveType[59954-59958]"
  }, {
    "left" : "ensureTyped",
    "right" : "ensureTyped",
    "info" : "SimpleName[60826-60837]:SimpleName[59959-59970]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[60838-60853]:SingleVariableDeclaration[59971-59986]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[60855-60861]:SingleVariableDeclaration[59988-59994]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[60863-60874]:SingleVariableDeclaration[59996-60007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60876-61667]:Block[60009-60800]"
  }, {
    "left" : "Preconditions.checkState(n.getType() != Token.FUNCTION ||\n            type instanceof FunctionType ||\n            type.isUnknownType());",
    "right" : "Preconditions.checkState(n.getType() != Token.FUNCTION ||\n            type instanceof FunctionType ||\n            type.isUnknownType());",
    "info" : "ExpressionStatement[60940-61076]:ExpressionStatement[60073-60209]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[61081-61115]:VariableDeclarationStatement[60214-60248]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[61120-61598]:IfStatement[60253-60731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61138-61598]:Block[60271-60731]"
  }, {
    "left" : "if (info.hasType())",
    "right" : "if (info.hasType())",
    "info" : "IfStatement[61146-61334]:IfStatement[60279-60467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61166-61334]:Block[60299-60467]"
  }, {
    "left" : "JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);",
    "right" : "JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);",
    "info" : "VariableDeclarationStatement[61176-61246]:VariableDeclarationStatement[60309-60379]"
  }, {
    "left" : "validator.expectCanCast(t, n, infoType, type);",
    "right" : "validator.expectCanCast(t, n, infoType, type);",
    "info" : "ExpressionStatement[61255-61301]:ExpressionStatement[60388-60434]"
  }, {
    "left" : "type = infoType;",
    "right" : "type = infoType;",
    "info" : "ExpressionStatement[61310-61326]:ExpressionStatement[60443-60459]"
  }, {
    "left" : "if (info.isImplicitCast() && !inExterns)",
    "right" : "if (info.isImplicitCast() && !inExterns)",
    "info" : "IfStatement[61342-61592]:IfStatement[60475-60725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61383-61592]:Block[60516-60725]"
  }, {
    "left" : "String propName = n.getType() == Token.GETPROP ?\n            n.getLastChild().getString() : \"(missing)\";",
    "right" : "String propName = n.getType() == Token.GETPROP ?\n            n.getLastChild().getString() : \"(missing)\";",
    "info" : "VariableDeclarationStatement[61393-61497]:VariableDeclarationStatement[60526-60630]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
    "right" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
    "info" : "ExpressionStatement[61506-61584]:ExpressionStatement[60639-60717]"
  }, {
    "left" : "if (n.getJSType() == null)",
    "right" : "if (n.getJSType() == null)",
    "info" : "IfStatement[61604-61663]:IfStatement[60737-60796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61631-61663]:Block[60764-60796]"
  }, {
    "left" : "n.setJSType(type);",
    "right" : "n.setJSType(type);",
    "info" : "ExpressionStatement[61639-61657]:ExpressionStatement[60772-60790]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[61791-61797]:PrimitiveType[60924-60930]"
  }, {
    "left" : "getTypedPercent",
    "right" : "getTypedPercent",
    "info" : "SimpleName[61798-61813]:SimpleName[60931-60946]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61816-61978]:Block[60949-61111]"
  }, {
    "left" : "int total = nullCount + unknownCount + typedCount;",
    "right" : "int total = nullCount + unknownCount + typedCount;",
    "info" : "VariableDeclarationStatement[61822-61872]:VariableDeclarationStatement[60955-61005]"
  }, {
    "left" : "if (total == 0)",
    "right" : "if (total == 0)",
    "info" : "IfStatement[61877-61974]:IfStatement[61010-61107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61893-61918]:Block[61026-61051]"
  }, {
    "left" : "return 0.0;",
    "right" : "return 0.0;",
    "info" : "ReturnStatement[61901-61912]:ReturnStatement[61034-61045]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61924-61974]:Block[61057-61107]"
  }, {
    "left" : "return (100.0 * typedCount) / total;",
    "right" : "return (100.0 * typedCount) / total;",
    "info" : "ReturnStatement[61932-61968]:ReturnStatement[61065-61101]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61982-61989]:Modifier[61115-61122]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[61990-61996]:SimpleType[61123-61129]"
  }, {
    "left" : "getNativeType",
    "right" : "getNativeType",
    "info" : "SimpleName[61997-62010]:SimpleName[61130-61143]"
  }, {
    "left" : "JSTypeNative typeId",
    "right" : "JSTypeNative typeId",
    "info" : "SingleVariableDeclaration[62011-62030]:SingleVariableDeclaration[61144-61163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62032-62084]:Block[61165-61217]"
  }, {
    "left" : "return typeRegistry.getNativeType(typeId);",
    "right" : "return typeRegistry.getNativeType(typeId);",
    "info" : "ReturnStatement[62038-62080]:ReturnStatement[61171-61213]"
  } ]
}