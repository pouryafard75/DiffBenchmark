{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "right" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "info" : "FieldDeclaration[1091-1230]:FieldDeclaration[1091-1230]"
    }, {
      "left" : "private final CodeConsumer cc;",
      "right" : "private final CodeConsumer cc;",
      "info" : "FieldDeclaration[1234-1264]:FieldDeclaration[1234-1264]"
    }, {
      "left" : "private final CharsetEncoder outputCharsetEncoder;",
      "right" : "private final CharsetEncoder outputCharsetEncoder;",
      "info" : "FieldDeclaration[1268-1318]:FieldDeclaration[1268-1318]"
    }, {
      "left" : "CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset)",
      "right" : "CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset)",
      "info" : "MethodDeclaration[1322-1882]:MethodDeclaration[1322-1882]"
    }, {
      "left" : "CodeGenerator(CodeConsumer consumer)",
      "right" : "CodeGenerator(CodeConsumer consumer)",
      "info" : "MethodDeclaration[1886-1954]:MethodDeclaration[1886-1954]"
    }, {
      "left" : "void add(String str)",
      "right" : "void add(String str)",
      "info" : "MethodDeclaration[1958-2001]:MethodDeclaration[1958-2001]"
    }, {
      "left" : "private void addIdentifier(String identifier)",
      "right" : "private void addIdentifier(String identifier)",
      "info" : "MethodDeclaration[2005-2108]:MethodDeclaration[2005-2108]"
    }, {
      "left" : "void add(Node n)",
      "right" : "void add(Node n)",
      "info" : "MethodDeclaration[2112-2161]:MethodDeclaration[2112-2161]"
    }, {
      "left" : "void add(Node n, Context context)",
      "right" : "void add(Node n, Context context)",
      "info" : "MethodDeclaration[2165-18624]:MethodDeclaration[2165-18624]"
    }, {
      "left" : "private void addNonEmptyExpression(\n      Node n, Context context, boolean allowNonBlockChild)",
      "right" : "private void addNonEmptyExpression(\n      Node n, Context context, boolean allowNonBlockChild)",
      "info" : "MethodDeclaration[18628-20712]:MethodDeclaration[18628-20712]"
    }, {
      "left" : "void addLeftExpr(Node n, int minPrecedence, Context context)",
      "right" : "void addLeftExpr(Node n, int minPrecedence, Context context)",
      "info" : "MethodDeclaration[21227-21767]:MethodDeclaration[21638-22178]"
    }, {
      "left" : "void addExpr(Node n, int minPrecedence)",
      "right" : "void addExpr(Node n, int minPrecedence)",
      "info" : "MethodDeclaration[21771-21862]:MethodDeclaration[22182-22273]"
    }, {
      "left" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "right" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "info" : "MethodDeclaration[21866-22213]:MethodDeclaration[22277-22624]"
    }, {
      "left" : "void addList(Node firstInList)",
      "right" : "void addList(Node firstInList)",
      "info" : "MethodDeclaration[22217-22300]:MethodDeclaration[22628-22711]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "info" : "MethodDeclaration[22304-22443]:MethodDeclaration[22715-22854]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "info" : "MethodDeclaration[22447-22860]:MethodDeclaration[22858-23271]"
    }, {
      "left" : "void addList(Node firstInList, int[] skipIndexes)",
      "right" : "void addList(Node firstInList, int[] skipIndexes)",
      "info" : "MethodDeclaration[22864-23836]:MethodDeclaration[23275-24247]"
    }, {
      "left" : "void addCaseBody(Node caseBody)",
      "right" : "void addCaseBody(Node caseBody)",
      "info" : "MethodDeclaration[23840-23942]:MethodDeclaration[24251-24353]"
    }, {
      "left" : "void addAllSiblings(Node n)",
      "right" : "void addAllSiblings(Node n)",
      "info" : "MethodDeclaration[23946-24050]:MethodDeclaration[24357-24461]"
    }, {
      "left" : "static String jsString(String s, CharsetEncoder outputCharsetEncoder)",
      "right" : "static String jsString(String s, CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[24054-24923]:MethodDeclaration[24465-25334]"
    }, {
      "left" : "static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "right" : "static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[24927-25111]:MethodDeclaration[25338-25522]"
    }, {
      "left" : "static String escapeToDoubleQuotedJsString(String s)",
      "right" : "static String escapeToDoubleQuotedJsString(String s)",
      "info" : "MethodDeclaration[25115-25320]:MethodDeclaration[25526-25731]"
    }, {
      "left" : "static String regexpEscape(String s)",
      "right" : "static String regexpEscape(String s)",
      "info" : "MethodDeclaration[25449-25525]:MethodDeclaration[25860-25936]"
    }, {
      "left" : "static String strEscape(String s, char quote,\n                          String doublequoteEscape,\n                          String singlequoteEscape,\n                          String backslashEscape,\n                          CharsetEncoder outputCharsetEncoder)",
      "right" : "static String strEscape(String s, char quote,\n                          String doublequoteEscape,\n                          String singlequoteEscape,\n                          String backslashEscape,\n                          CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[25529-28086]:MethodDeclaration[25940-28497]"
    }, {
      "left" : "static String identifierEscape(String s)",
      "right" : "static String identifierEscape(String s)",
      "info" : "MethodDeclaration[28090-28780]:MethodDeclaration[28501-29191]"
    }, {
      "left" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "right" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "info" : "MethodDeclaration[28783-29202]:MethodDeclaration[29194-29613]"
    }, {
      "left" : "private static Node getFirstNonEmptyChild(Node n)",
      "right" : "private static Node getFirstNonEmptyChild(Node n)",
      "info" : "MethodDeclaration[29206-29476]:MethodDeclaration[29617-29887]"
    }, {
      "left" : "enum : Context",
      "right" : "enum : Context",
      "info" : "EnumDeclaration[29681-30083]:EnumDeclaration[30092-30494]"
    }, {
      "left" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "right" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "info" : "MethodDeclaration[30087-30278]:MethodDeclaration[30498-30689]"
    }, {
      "left" : "private  Context getContextForNoInOperator(Context context)",
      "right" : "private  Context getContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[30282-30617]:MethodDeclaration[30693-31028]"
    }, {
      "left" : "private  Context clearContextForNoInOperator(Context context)",
      "right" : "private  Context clearContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[30621-31058]:MethodDeclaration[31032-31469]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "info" : "MethodDeclaration[31062-31412]:MethodDeclaration[31473-31823]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "info" : "MethodDeclaration[31416-32502]:MethodDeclaration[31827-32913]"
    } ],
    "mappings" : [
 {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1322-1335]:SimpleName[1322-1335]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[1343-1364]:SingleVariableDeclaration[1343-1364]"
    }, {
      "left" : "Charset outputCharset",
      "right" : "Charset outputCharset",
      "info" : "SingleVariableDeclaration[1366-1387]:SingleVariableDeclaration[1366-1387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1389-1882]:Block[1389-1882]"
    }, {
      "left" : "cc = consumer;",
      "right" : "cc = consumer;",
      "info" : "ExpressionStatement[1395-1409]:ExpressionStatement[1395-1409]"
    }, {
      "left" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "right" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "info" : "IfStatement[1414-1878]:IfStatement[1414-1878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1479-1803]:Block[1479-1803]"
    }, {
      "left" : "this.outputCharsetEncoder = null;",
      "right" : "this.outputCharsetEncoder = null;",
      "info" : "ExpressionStatement[1764-1797]:ExpressionStatement[1764-1797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1809-1878]:Block[1809-1878]"
    }, {
      "left" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "right" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "info" : "ExpressionStatement[1817-1872]:ExpressionStatement[1817-1872]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1886-1899]:SimpleName[1886-1899]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[1900-1921]:SingleVariableDeclaration[1900-1921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1923-1954]:Block[1923-1954]"
    }, {
      "left" : "this(consumer, null);",
      "right" : "this(consumer, null);",
      "info" : "ConstructorInvocation[1929-1950]:ConstructorInvocation[1929-1950]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1958-1962]:PrimitiveType[1958-1962]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[1963-1966]:SimpleName[1963-1966]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[1967-1977]:SingleVariableDeclaration[1967-1977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1979-2001]:Block[1979-2001]"
    }, {
      "left" : "cc.add(str);",
      "right" : "cc.add(str);",
      "info" : "ExpressionStatement[1985-1997]:ExpressionStatement[1985-1997]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2005-2012]:Modifier[2005-2012]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2013-2017]:PrimitiveType[2013-2017]"
    }, {
      "left" : "addIdentifier",
      "right" : "addIdentifier",
      "info" : "SimpleName[2018-2031]:SimpleName[2018-2031]"
    }, {
      "left" : "String identifier",
      "right" : "String identifier",
      "info" : "SingleVariableDeclaration[2032-2049]:SingleVariableDeclaration[2032-2049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2051-2108]:Block[2051-2108]"
    }, {
      "left" : "cc.addIdentifier(identifierEscape(identifier));",
      "right" : "cc.addIdentifier(identifierEscape(identifier));",
      "info" : "ExpressionStatement[2057-2104]:ExpressionStatement[2057-2104]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2112-2116]:PrimitiveType[2112-2116]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2117-2120]:SimpleName[2117-2120]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2121-2127]:SingleVariableDeclaration[2121-2127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2129-2161]:Block[2129-2161]"
    }, {
      "left" : "add(n, Context.OTHER);",
      "right" : "add(n, Context.OTHER);",
      "info" : "ExpressionStatement[2135-2157]:ExpressionStatement[2135-2157]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2165-2169]:PrimitiveType[2165-2169]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2170-2173]:SimpleName[2170-2173]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2174-2180]:SingleVariableDeclaration[2174-2180]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[2182-2197]:SingleVariableDeclaration[2182-2197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2199-18624]:Block[2199-18624]"
    }, {
      "left" : "if (!cc.continueProcessing())",
      "right" : "if (!cc.continueProcessing())",
      "info" : "IfStatement[2205-2256]:IfStatement[2205-2256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2235-2256]:Block[2235-2256]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[2243-2250]:ReturnStatement[2243-2250]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[2262-2285]:VariableDeclarationStatement[2262-2285]"
    }, {
      "left" : "String opstr = NodeUtil.opToStr(type);",
      "right" : "String opstr = NodeUtil.opToStr(type);",
      "info" : "VariableDeclarationStatement[2290-2328]:VariableDeclarationStatement[2290-2328]"
    }, {
      "left" : "int childCount = n.getChildCount();",
      "right" : "int childCount = n.getChildCount();",
      "info" : "VariableDeclarationStatement[2333-2368]:VariableDeclarationStatement[2333-2368]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[2373-2404]:VariableDeclarationStatement[2373-2404]"
    }, {
      "left" : "Node last = n.getLastChild();",
      "right" : "Node last = n.getLastChild();",
      "info" : "VariableDeclarationStatement[2409-2438]:VariableDeclarationStatement[2409-2438]"
    }, {
      "left" : "if (opstr != null && first != last)",
      "right" : "if (opstr != null && first != last)",
      "info" : "IfStatement[2479-3470]:IfStatement[2479-3470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2515-3470]:Block[2515-3470]"
    }, {
      "left" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
      "right" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
      "info" : "ExpressionStatement[2523-2678]:ExpressionStatement[2523-2678]"
    }, {
      "left" : "int p = NodeUtil.precedence(type);",
      "right" : "int p = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[2685-2719]:VariableDeclarationStatement[2685-2719]"
    }, {
      "left" : "addLeftExpr(first, p, context);",
      "right" : "addLeftExpr(first, p, context);",
      "info" : "ExpressionStatement[2726-2757]:ExpressionStatement[2726-2757]"
    }, {
      "left" : "cc.addOp(opstr, true);",
      "right" : "cc.addOp(opstr, true);",
      "info" : "ExpressionStatement[2764-2786]:ExpressionStatement[2764-2786]"
    }, {
      "left" : "Context rhsContext = getContextForNoInOperator(context);",
      "right" : "Context rhsContext = getContextForNoInOperator(context);",
      "info" : "VariableDeclarationStatement[2901-2957]:VariableDeclarationStatement[2901-2957]"
    }, {
      "left" : "if (last.getType() == type &&\n          NodeUtil.isAssociative(type))",
      "right" : "if (last.getType() == type &&\n          NodeUtil.isAssociative(type))",
      "info" : "IfStatement[3087-3450]:IfStatement[3087-3450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3157-3204]:Block[3157-3204]"
    }, {
      "left" : "addExpr(last, p, rhsContext);",
      "right" : "addExpr(last, p, rhsContext);",
      "info" : "ExpressionStatement[3167-3196]:ExpressionStatement[3167-3196]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
      "right" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
      "info" : "IfStatement[3210-3450]:IfStatement[3210-3450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3275-3393]:Block[3275-3393]"
    }, {
      "left" : "addExpr(last, p, rhsContext);",
      "right" : "addExpr(last, p, rhsContext);",
      "info" : "ExpressionStatement[3356-3385]:ExpressionStatement[3356-3385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3399-3450]:Block[3399-3450]"
    }, {
      "left" : "addExpr(last, p + 1, rhsContext);",
      "right" : "addExpr(last, p + 1, rhsContext);",
      "info" : "ExpressionStatement[3409-3442]:ExpressionStatement[3409-3442]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3457-3464]:ReturnStatement[3457-3464]"
    }, {
      "left" : "cc.startSourceMapping(n);",
      "right" : "cc.startSourceMapping(n);",
      "info" : "ExpressionStatement[3476-3501]:ExpressionStatement[3476-3501]"
    }, {
      "left" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                first.getNext().getChildCount() <= 1);\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 3);\n        if (first.getNext().getType() != Token.EMPTY) {\n          throw new Error(\"Catch conditions not suppored because I think\" +\n                          \" that it may be a netscape only feature.\");\n        }\n\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.getType() == Token.EMPTY) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.getType() == Token.COMMA) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN));\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP));\n        add(\"]\");\n        break;\n\n      case Token.LP:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        addList(first, false, context);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type));\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addLeftExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1);\n        cc.addOp(\":\", true);\n        addExpr(last, 1);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.GET_REF:\n        add(first);\n        break;\n\n      case Token.REF_SPECIAL:\n        Preconditions.checkState(childCount == 1);\n        add(first);\n        add(\".\");\n        add((String) n.getProp(Node.NAME_PROP));\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean stripBlock = n.isSyntheticBlock() ||\n            ((context != Context.PRESERVE_BLOCK) && (n.getChildCount() < 2));\n        if (!stripBlock) {\n          cc.beginBlock();\n        }\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.getType() == Token.VAR) {\n            cc.endStatement();\n          }\n\n          if (c.getType() == Token.FUNCTION) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (type == Token.SCRIPT) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (!stripBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.getType() == Token.VAR) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyExpression(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.getType() == Token.NUMBER);\n        if (needsParens) {\n          add(\"(\");\n        }\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        if (first.getType() == Token.NAME &&\n            \"eval\".equals(first.getString()) &&\n            !first.getBooleanProp(Node.DIRECT_EVAL)) {\n          add(\"(0,eval)\");\n        } else {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyExpression(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyExpression(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n      case Token.THIS:\n      case Token.FALSE:\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(Node.tokenToName(type));\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_VOID:\n        throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parens. Otherwise, when parsed, NEW will bind to the\n        // first viable parens\n        if (NodeUtil.containsCall(first)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(childCount == 0);\n        add(jsString(n.getString(), outputCharsetEncoder));\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        Preconditions.checkState(childCount % 2 == 0);\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext().getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          // Object literal property names don't have to be quoted if they are\n          // not JavaScript keywords\n          if (c.getType() == Token.STRING &&\n              !TokenStream.isKeyword(c.getString()) &&\n              TokenStream.isJSIdentifier(c.getString()) &&\n              // do not encode literally any non-literal characters that were\n              // unicode escaped.\n              NodeUtil.isLatin(c.getString())) {\n            add(c.getString());\n          } else {\n            addExpr(c, 1);\n          }\n          add(\":\");\n          addExpr(c.getNext(), 1);\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (first.getType() != Token.LABEL_NAME) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      // This node is auto generated in anonymous functions and should just get\n      // ignored for our purposes.\n      case Token.SETNAME:\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
      "right" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                first.getNext().getChildCount() <= 1);\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 3);\n        if (first.getNext().getType() != Token.EMPTY) {\n          throw new Error(\"Catch conditions not suppored because I think\" +\n                          \" that it may be a netscape only feature.\");\n        }\n\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.getType() == Token.EMPTY) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.getType() == Token.COMMA) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN));\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP));\n        add(\"]\");\n        break;\n\n      case Token.LP:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        addList(first, false, context);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type));\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addLeftExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1);\n        cc.addOp(\":\", true);\n        addExpr(last, 1);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.GET_REF:\n        add(first);\n        break;\n\n      case Token.REF_SPECIAL:\n        Preconditions.checkState(childCount == 1);\n        add(first);\n        add(\".\");\n        add((String) n.getProp(Node.NAME_PROP));\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean stripBlock = n.isSyntheticBlock() ||\n            ((context != Context.PRESERVE_BLOCK) && (n.getChildCount() < 2));\n        if (!stripBlock) {\n          cc.beginBlock();\n        }\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.getType() == Token.VAR) {\n            cc.endStatement();\n          }\n\n          if (c.getType() == Token.FUNCTION) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (type == Token.SCRIPT) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (!stripBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.getType() == Token.VAR) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyExpression(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.getType() == Token.NUMBER);\n        if (needsParens) {\n          add(\"(\");\n        }\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        if (first.getType() == Token.NAME &&\n            \"eval\".equals(first.getString()) &&\n            !first.getBooleanProp(Node.DIRECT_EVAL)) {\n          add(\"(0,eval)\");\n        } else {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyExpression(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyExpression(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n      case Token.THIS:\n      case Token.FALSE:\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(Node.tokenToName(type));\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_VOID:\n        throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parens. Otherwise, when parsed, NEW will bind to the\n        // first viable parens\n        if (NodeUtil.containsCall(first)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(childCount == 0);\n        add(jsString(n.getString(), outputCharsetEncoder));\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        Preconditions.checkState(childCount % 2 == 0);\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext().getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          // Object literal property names don't have to be quoted if they are\n          // not JavaScript keywords\n          if (c.getType() == Token.STRING &&\n              !TokenStream.isKeyword(c.getString()) &&\n              TokenStream.isJSIdentifier(c.getString()) &&\n              // do not encode literally any non-literal characters that were\n              // unicode escaped.\n              NodeUtil.isLatin(c.getString())) {\n            add(c.getString());\n          } else {\n            addExpr(c, 1);\n          }\n          add(\":\");\n          addExpr(c.getNext(), 1);\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (first.getType() != Token.LABEL_NAME) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      // This node is auto generated in anonymous functions and should just get\n      // ignored for our purposes.\n      case Token.SETNAME:\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
      "info" : "SwitchStatement[3507-18591]:SwitchStatement[3507-18591]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[3529-3544]:SwitchCase[3529-3544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3545-4181]:Block[3545-4181]"
    }, {
      "left" : "Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                first.getNext().getChildCount() <= 1);",
      "right" : "Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                first.getNext().getChildCount() <= 1);",
      "info" : "ExpressionStatement[3555-3678]:ExpressionStatement[3555-3678]"
    }, {
      "left" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
      "right" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
      "info" : "ExpressionStatement[3687-3748]:ExpressionStatement[3687-3748]"
    }, {
      "left" : "add(\"try\");",
      "right" : "add(\"try\");",
      "info" : "ExpressionStatement[3758-3769]:ExpressionStatement[3758-3769]"
    }, {
      "left" : "add(first, Context.PRESERVE_BLOCK);",
      "right" : "add(first, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[3778-3813]:ExpressionStatement[3778-3813]"
    }, {
      "left" : "Node catchblock = first.getNext().getFirstChild();",
      "right" : "Node catchblock = first.getNext().getFirstChild();",
      "info" : "VariableDeclarationStatement[3924-3974]:VariableDeclarationStatement[3924-3974]"
    }, {
      "left" : "if (catchblock != null)",
      "right" : "if (catchblock != null)",
      "info" : "IfStatement[3983-4045]:IfStatement[3983-4045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4007-4045]:Block[4007-4045]"
    }, {
      "left" : "add(catchblock);",
      "right" : "add(catchblock);",
      "info" : "ExpressionStatement[4019-4035]:ExpressionStatement[4019-4035]"
    }, {
      "left" : "if (childCount == 3)",
      "right" : "if (childCount == 3)",
      "info" : "IfStatement[4055-4158]:IfStatement[4055-4158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4076-4158]:Block[4076-4158]"
    }, {
      "left" : "add(\"finally\");",
      "right" : "add(\"finally\");",
      "info" : "ExpressionStatement[4088-4103]:ExpressionStatement[4088-4103]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[4114-4148]:ExpressionStatement[4114-4148]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4167-4173]:BreakStatement[4167-4173]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[4189-4206]:SwitchCase[4189-4206]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[4215-4257]:ExpressionStatement[4215-4257]"
    }, {
      "left" : "if (first.getNext().getType() != Token.EMPTY)",
      "right" : "if (first.getNext().getType() != Token.EMPTY)",
      "info" : "IfStatement[4266-4470]:IfStatement[4266-4470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4312-4470]:Block[4312-4470]"
    }, {
      "left" : "throw new Error(\"Catch conditions not suppored because I think\" +\n                          \" that it may be a netscape only feature.\");",
      "right" : "throw new Error(\"Catch conditions not suppored because I think\" +\n                          \" that it may be a netscape only feature.\");",
      "info" : "ThrowStatement[4324-4460]:ThrowStatement[4324-4460]"
    }, {
      "left" : "add(\"catch(\");",
      "right" : "add(\"catch(\");",
      "info" : "ExpressionStatement[4480-4494]:ExpressionStatement[4480-4494]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[4503-4514]:ExpressionStatement[4503-4514]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[4523-4532]:ExpressionStatement[4523-4532]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[4541-4575]:ExpressionStatement[4541-4575]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4584-4590]:BreakStatement[4584-4590]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[4598-4615]:SwitchCase[4598-4615]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[4624-4666]:ExpressionStatement[4624-4666]"
    }, {
      "left" : "add(\"throw\");",
      "right" : "add(\"throw\");",
      "info" : "ExpressionStatement[4675-4688]:ExpressionStatement[4675-4688]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[4697-4708]:ExpressionStatement[4697-4708]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[4816-4838]:ExpressionStatement[4816-4838]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4847-4853]:BreakStatement[4847-4853]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[4861-4879]:SwitchCase[4861-4879]"
    }, {
      "left" : "add(\"return\");",
      "right" : "add(\"return\");",
      "info" : "ExpressionStatement[4888-4902]:ExpressionStatement[4888-4902]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[4911-5035]:IfStatement[4911-5035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4932-4965]:Block[4932-4965]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[4944-4955]:ExpressionStatement[4944-4955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4971-5035]:Block[4971-5035]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[4983-5025]:ExpressionStatement[4983-5025]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[5044-5062]:ExpressionStatement[5044-5062]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5071-5077]:BreakStatement[5071-5077]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[5085-5100]:SwitchCase[5085-5100]"
    }, {
      "left" : "if (first != null)",
      "right" : "if (first != null)",
      "info" : "IfStatement[5109-5231]:IfStatement[5109-5231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5128-5231]:Block[5128-5231]"
    }, {
      "left" : "add(\"var \");",
      "right" : "add(\"var \");",
      "info" : "ExpressionStatement[5140-5152]:ExpressionStatement[5140-5152]"
    }, {
      "left" : "addList(first, false, getContextForNoInOperator(context));",
      "right" : "addList(first, false, getContextForNoInOperator(context));",
      "info" : "ExpressionStatement[5163-5221]:ExpressionStatement[5163-5221]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5240-5246]:BreakStatement[5240-5246]"
    }, {
      "left" : "case Token.LABEL_NAME:",
      "right" : "case Token.LABEL_NAME:",
      "info" : "SwitchCase[5254-5276]:SwitchCase[5254-5276]"
    }, {
      "left" : "Preconditions.checkState(!n.getString().isEmpty());",
      "right" : "Preconditions.checkState(!n.getString().isEmpty());",
      "info" : "ExpressionStatement[5285-5336]:ExpressionStatement[5285-5336]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[5345-5374]:ExpressionStatement[5345-5374]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5383-5389]:BreakStatement[5383-5389]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[5397-5413]:SwitchCase[5397-5413]"
    }, {
      "left" : "if (first == null || first.getType() == Token.EMPTY)",
      "right" : "if (first == null || first.getType() == Token.EMPTY)",
      "info" : "IfStatement[5422-5974]:IfStatement[5422-5974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5475-5526]:Block[5475-5526]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[5487-5516]:ExpressionStatement[5487-5516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5532-5974]:Block[5532-5974]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[5544-5586]:ExpressionStatement[5544-5586]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[5597-5626]:ExpressionStatement[5597-5626]"
    }, {
      "left" : "cc.addOp(\"=\", true);",
      "right" : "cc.addOp(\"=\", true);",
      "info" : "ExpressionStatement[5637-5657]:ExpressionStatement[5637-5657]"
    }, {
      "left" : "if (first.getType() == Token.COMMA)",
      "right" : "if (first.getType() == Token.COMMA)",
      "info" : "IfStatement[5668-5964]:IfStatement[5668-5964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5704-5780]:Block[5704-5780]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN));",
      "right" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN));",
      "info" : "ExpressionStatement[5718-5768]:ExpressionStatement[5718-5768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5786-5964]:Block[5786-5964]"
    }, {
      "left" : "addExpr(first, 0, getContextForNoInOperator(context));",
      "right" : "addExpr(first, 0, getContextForNoInOperator(context));",
      "info" : "ExpressionStatement[5898-5952]:ExpressionStatement[5898-5952]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5983-5989]:BreakStatement[5983-5989]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[5997-6017]:SwitchCase[5997-6017]"
    }, {
      "left" : "add(\"[\");",
      "right" : "add(\"[\");",
      "info" : "ExpressionStatement[6026-6035]:ExpressionStatement[6026-6035]"
    }, {
      "left" : "addList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP));",
      "right" : "addList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP));",
      "info" : "ExpressionStatement[6044-6102]:ExpressionStatement[6044-6102]"
    }, {
      "left" : "add(\"]\");",
      "right" : "add(\"]\");",
      "info" : "ExpressionStatement[6111-6120]:ExpressionStatement[6111-6120]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6129-6135]:BreakStatement[6129-6135]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[6143-6157]:SwitchCase[6143-6157]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[6166-6175]:ExpressionStatement[6166-6175]"
    }, {
      "left" : "addList(first);",
      "right" : "addList(first);",
      "info" : "ExpressionStatement[6184-6199]:ExpressionStatement[6184-6199]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[6208-6217]:ExpressionStatement[6208-6217]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6226-6232]:BreakStatement[6226-6232]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[6240-6257]:SwitchCase[6240-6257]"
    }, {
      "left" : "addList(first, false, context);",
      "right" : "addList(first, false, context);",
      "info" : "ExpressionStatement[6266-6297]:ExpressionStatement[6266-6297]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6306-6312]:BreakStatement[6306-6312]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[6320-6338]:SwitchCase[6320-6338]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[6347-6389]:ExpressionStatement[6347-6389]"
    }, {
      "left" : "cc.addNumber(n.getDouble());",
      "right" : "cc.addNumber(n.getDouble());",
      "info" : "ExpressionStatement[6398-6426]:ExpressionStatement[6398-6426]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6435-6441]:BreakStatement[6435-6441]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[6449-6467]:SwitchCase[6449-6467]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[6474-6490]:SwitchCase[6474-6490]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[6497-6512]:SwitchCase[6497-6512]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[6519-6537]:SwitchCase[6519-6537]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[6544-6559]:SwitchCase[6544-6559]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[6566-6581]:SwitchCase[6566-6581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6582-6825]:Block[6582-6825]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[6654-6696]:ExpressionStatement[6654-6696]"
    }, {
      "left" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "right" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "info" : "ExpressionStatement[6705-6751]:ExpressionStatement[6705-6751]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type));",
      "right" : "addExpr(first, NodeUtil.precedence(type));",
      "info" : "ExpressionStatement[6760-6802]:ExpressionStatement[6760-6802]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6811-6817]:BreakStatement[6811-6817]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[6833-6849]:SwitchCase[6833-6849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6850-7133]:Block[6850-7133]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[6860-6902]:ExpressionStatement[6860-6902]"
    }, {
      "left" : "int p = NodeUtil.precedence(type);",
      "right" : "int p = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[6911-6945]:VariableDeclarationStatement[6911-6945]"
    }, {
      "left" : "addLeftExpr(first, p + 1, context);",
      "right" : "addLeftExpr(first, p + 1, context);",
      "info" : "ExpressionStatement[6954-6989]:ExpressionStatement[6954-6989]"
    }, {
      "left" : "cc.addOp(\"?\", true);",
      "right" : "cc.addOp(\"?\", true);",
      "info" : "ExpressionStatement[6998-7018]:ExpressionStatement[6998-7018]"
    }, {
      "left" : "addExpr(first.getNext(), 1);",
      "right" : "addExpr(first.getNext(), 1);",
      "info" : "ExpressionStatement[7027-7055]:ExpressionStatement[7027-7055]"
    }, {
      "left" : "cc.addOp(\":\", true);",
      "right" : "cc.addOp(\":\", true);",
      "info" : "ExpressionStatement[7064-7084]:ExpressionStatement[7064-7084]"
    }, {
      "left" : "addExpr(last, 1);",
      "right" : "addExpr(last, 1);",
      "info" : "ExpressionStatement[7093-7110]:ExpressionStatement[7093-7110]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7119-7125]:BreakStatement[7119-7125]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[7141-7159]:SwitchCase[7141-7159]"
    }, {
      "left" : "if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING)",
      "right" : "if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING)",
      "info" : "IfStatement[7168-7324]:IfStatement[7168-7324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7251-7324]:Block[7251-7324]"
    }, {
      "left" : "throw new Error(\"Expected children to be strings\");",
      "right" : "throw new Error(\"Expected children to be strings\");",
      "info" : "ThrowStatement[7263-7314]:ThrowStatement[7263-7314]"
    }, {
      "left" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
      "right" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
      "info" : "VariableDeclarationStatement[7334-7404]:VariableDeclarationStatement[7334-7404]"
    }, {
      "left" : "if (childCount == 2)",
      "right" : "if (childCount == 2)",
      "info" : "IfStatement[7472-7639]:IfStatement[7472-7639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7493-7546]:Block[7493-7546]"
    }, {
      "left" : "add(regexp + last.getString());",
      "right" : "add(regexp + last.getString());",
      "info" : "ExpressionStatement[7505-7536]:ExpressionStatement[7505-7536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7552-7639]:Block[7552-7639]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[7564-7606]:ExpressionStatement[7564-7606]"
    }, {
      "left" : "add(regexp);",
      "right" : "add(regexp);",
      "info" : "ExpressionStatement[7617-7629]:ExpressionStatement[7617-7629]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7648-7654]:BreakStatement[7648-7654]"
    }, {
      "left" : "case Token.GET_REF:",
      "right" : "case Token.GET_REF:",
      "info" : "SwitchCase[7662-7681]:SwitchCase[7662-7681]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[7690-7701]:ExpressionStatement[7690-7701]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7710-7716]:BreakStatement[7710-7716]"
    }, {
      "left" : "case Token.REF_SPECIAL:",
      "right" : "case Token.REF_SPECIAL:",
      "info" : "SwitchCase[7724-7747]:SwitchCase[7724-7747]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[7756-7798]:ExpressionStatement[7756-7798]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[7807-7818]:ExpressionStatement[7807-7818]"
    }, {
      "left" : "add(\".\");",
      "right" : "add(\".\");",
      "info" : "ExpressionStatement[7827-7836]:ExpressionStatement[7827-7836]"
    }, {
      "left" : "add((String) n.getProp(Node.NAME_PROP));",
      "right" : "add((String) n.getProp(Node.NAME_PROP));",
      "info" : "ExpressionStatement[7845-7885]:ExpressionStatement[7845-7885]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7894-7900]:BreakStatement[7894-7900]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[7908-7928]:SwitchCase[7908-7928]"
    }, {
      "left" : "if (n.getClass() != Node.class)",
      "right" : "if (n.getClass() != Node.class)",
      "info" : "IfStatement[7937-8036]:IfStatement[7937-8036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7969-8036]:Block[7969-8036]"
    }, {
      "left" : "throw new Error(\"Unexpected Node subclass.\");",
      "right" : "throw new Error(\"Unexpected Node subclass.\");",
      "info" : "ThrowStatement[7981-8026]:ThrowStatement[7981-8026]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[8045-8087]:ExpressionStatement[8045-8087]"
    }, {
      "left" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
      "right" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
      "info" : "VariableDeclarationStatement[8096-8157]:VariableDeclarationStatement[8096-8157]"
    }, {
      "left" : "if (funcNeedsParens)",
      "right" : "if (funcNeedsParens)",
      "info" : "IfStatement[8166-8218]:IfStatement[8166-8218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8187-8218]:Block[8187-8218]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[8199-8208]:ExpressionStatement[8199-8208]"
    }, {
      "left" : "add(\"function\");",
      "right" : "add(\"function\");",
      "info" : "ExpressionStatement[8228-8244]:ExpressionStatement[8228-8244]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[8253-8264]:ExpressionStatement[8253-8264]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[8274-8295]:ExpressionStatement[8274-8295]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[8304-8338]:ExpressionStatement[8304-8338]"
    }, {
      "left" : "cc.endFunction(context == Context.STATEMENT);",
      "right" : "cc.endFunction(context == Context.STATEMENT);",
      "info" : "ExpressionStatement[8347-8392]:ExpressionStatement[8347-8392]"
    }, {
      "left" : "if (funcNeedsParens)",
      "right" : "if (funcNeedsParens)",
      "info" : "IfStatement[8402-8454]:IfStatement[8402-8454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8423-8454]:Block[8423-8454]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[8435-8444]:ExpressionStatement[8435-8444]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8463-8469]:BreakStatement[8463-8469]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[8477-8495]:SwitchCase[8477-8495]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[8502-8519]:SwitchCase[8502-8519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8520-9542]:Block[8520-9542]"
    }, {
      "left" : "if (n.getClass() != Node.class)",
      "right" : "if (n.getClass() != Node.class)",
      "info" : "IfStatement[8530-8629]:IfStatement[8530-8629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8562-8629]:Block[8562-8629]"
    }, {
      "left" : "throw new Error(\"Unexpected Node subclass.\");",
      "right" : "throw new Error(\"Unexpected Node subclass.\");",
      "info" : "ThrowStatement[8574-8619]:ThrowStatement[8574-8619]"
    }, {
      "left" : "boolean stripBlock = n.isSyntheticBlock() ||\n            ((context != Context.PRESERVE_BLOCK) && (n.getChildCount() < 2));",
      "right" : "boolean stripBlock = n.isSyntheticBlock() ||\n            ((context != Context.PRESERVE_BLOCK) && (n.getChildCount() < 2));",
      "info" : "VariableDeclarationStatement[8638-8760]:VariableDeclarationStatement[8638-8760]"
    }, {
      "left" : "if (!stripBlock)",
      "right" : "if (!stripBlock)",
      "info" : "IfStatement[8769-8824]:IfStatement[8769-8824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8786-8824]:Block[8786-8824]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[8798-8814]:ExpressionStatement[8798-8814]"
    }, {
      "left" : "for (Node c = first; c != null; c = c.getNext())",
      "right" : "for (Node c = first; c != null; c = c.getNext())",
      "info" : "ForStatement[8833-9403]:ForStatement[8833-9403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8882-9403]:Block[8882-9403]"
    }, {
      "left" : "add(c, Context.STATEMENT);",
      "right" : "add(c, Context.STATEMENT);",
      "info" : "ExpressionStatement[8894-8920]:ExpressionStatement[8894-8920]"
    }, {
      "left" : "if (c.getType() == Token.VAR)",
      "right" : "if (c.getType() == Token.VAR)",
      "info" : "IfStatement[9003-9077]:IfStatement[9003-9077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9033-9077]:Block[9033-9077]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[9047-9065]:ExpressionStatement[9047-9065]"
    }, {
      "left" : "if (c.getType() == Token.FUNCTION)",
      "right" : "if (c.getType() == Token.FUNCTION)",
      "info" : "IfStatement[9089-9170]:IfStatement[9089-9170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9124-9170]:Block[9124-9170]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[9138-9158]:ExpressionStatement[9138-9158]"
    }, {
      "left" : "if (type == Token.SCRIPT)",
      "right" : "if (type == Token.SCRIPT)",
      "info" : "IfStatement[9313-9393]:IfStatement[9313-9393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9339-9393]:Block[9339-9393]"
    }, {
      "left" : "cc.notePreferredLineBreak();",
      "right" : "cc.notePreferredLineBreak();",
      "info" : "ExpressionStatement[9353-9381]:ExpressionStatement[9353-9381]"
    }, {
      "left" : "if (!stripBlock)",
      "right" : "if (!stripBlock)",
      "info" : "IfStatement[9412-9519]:IfStatement[9412-9519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9429-9519]:Block[9429-9519]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[9441-9509]:ExpressionStatement[9441-9509]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9528-9534]:BreakStatement[9528-9534]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[9550-9565]:SwitchCase[9550-9565]"
    }, {
      "left" : "if (childCount == 4)",
      "right" : "if (childCount == 4)",
      "info" : "IfStatement[9574-10345]:IfStatement[9574-10345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9595-10054]:Block[9595-10054]"
    }, {
      "left" : "add(\"for(\");",
      "right" : "add(\"for(\");",
      "info" : "ExpressionStatement[9607-9619]:ExpressionStatement[9607-9619]"
    }, {
      "left" : "if (first.getType() == Token.VAR)",
      "right" : "if (first.getType() == Token.VAR)",
      "info" : "IfStatement[9630-9807]:IfStatement[9630-9807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9664-9729]:Block[9664-9729]"
    }, {
      "left" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
      "right" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
      "info" : "ExpressionStatement[9678-9717]:ExpressionStatement[9678-9717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9735-9807]:Block[9735-9807]"
    }, {
      "left" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
      "right" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
      "info" : "ExpressionStatement[9749-9795]:ExpressionStatement[9749-9795]"
    }, {
      "left" : "add(\";\");",
      "right" : "add(\";\");",
      "info" : "ExpressionStatement[9818-9827]:ExpressionStatement[9818-9827]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[9838-9859]:ExpressionStatement[9838-9859]"
    }, {
      "left" : "add(\";\");",
      "right" : "add(\";\");",
      "info" : "ExpressionStatement[9870-9879]:ExpressionStatement[9870-9879]"
    }, {
      "left" : "add(first.getNext().getNext());",
      "right" : "add(first.getNext().getNext());",
      "info" : "ExpressionStatement[9890-9921]:ExpressionStatement[9890-9921]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[9932-9941]:ExpressionStatement[9932-9941]"
    }, {
      "left" : "addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[9952-10044]:ExpressionStatement[9952-10044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10060-10345]:Block[10060-10345]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[10072-10114]:ExpressionStatement[10072-10114]"
    }, {
      "left" : "add(\"for(\");",
      "right" : "add(\"for(\");",
      "info" : "ExpressionStatement[10125-10137]:ExpressionStatement[10125-10137]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[10148-10159]:ExpressionStatement[10148-10159]"
    }, {
      "left" : "add(\"in\");",
      "right" : "add(\"in\");",
      "info" : "ExpressionStatement[10170-10180]:ExpressionStatement[10170-10180]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[10191-10212]:ExpressionStatement[10191-10212]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[10223-10232]:ExpressionStatement[10223-10232]"
    }, {
      "left" : "addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[10243-10335]:ExpressionStatement[10243-10335]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10354-10360]:BreakStatement[10354-10360]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[10368-10382]:SwitchCase[10368-10382]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[10391-10433]:ExpressionStatement[10391-10433]"
    }, {
      "left" : "add(\"do\");",
      "right" : "add(\"do\");",
      "info" : "ExpressionStatement[10442-10452]:ExpressionStatement[10442-10452]"
    }, {
      "left" : "addNonEmptyExpression(first, Context.OTHER, false);",
      "right" : "addNonEmptyExpression(first, Context.OTHER, false);",
      "info" : "ExpressionStatement[10461-10512]:ExpressionStatement[10461-10512]"
    }, {
      "left" : "add(\"while(\");",
      "right" : "add(\"while(\");",
      "info" : "ExpressionStatement[10521-10535]:ExpressionStatement[10521-10535]"
    }, {
      "left" : "add(last);",
      "right" : "add(last);",
      "info" : "ExpressionStatement[10544-10554]:ExpressionStatement[10544-10554]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[10563-10572]:ExpressionStatement[10563-10572]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[10581-10599]:ExpressionStatement[10581-10599]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10608-10614]:BreakStatement[10608-10614]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[10622-10639]:SwitchCase[10622-10639]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[10648-10690]:ExpressionStatement[10648-10690]"
    }, {
      "left" : "add(\"while(\");",
      "right" : "add(\"while(\");",
      "info" : "ExpressionStatement[10699-10713]:ExpressionStatement[10699-10713]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[10722-10733]:ExpressionStatement[10722-10733]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[10742-10751]:ExpressionStatement[10742-10751]"
    }, {
      "left" : "addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[10760-10850]:ExpressionStatement[10760-10850]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10859-10865]:BreakStatement[10859-10865]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[10873-10890]:SwitchCase[10873-10890]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[10899-10941]:ExpressionStatement[10899-10941]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10950-10956]:BreakStatement[10950-10956]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[10964-10983]:SwitchCase[10964-10983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10984-11574]:Block[10984-11574]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
      "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
      "info" : "ExpressionStatement[10994-11121]:ExpressionStatement[10994-11121]"
    }, {
      "left" : "Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");",
      "right" : "Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");",
      "info" : "ExpressionStatement[11130-11249]:ExpressionStatement[11130-11249]"
    }, {
      "left" : "boolean needsParens = (first.getType() == Token.NUMBER);",
      "right" : "boolean needsParens = (first.getType() == Token.NUMBER);",
      "info" : "VariableDeclarationStatement[11258-11314]:VariableDeclarationStatement[11258-11314]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[11323-11371]:IfStatement[11323-11371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11340-11371]:Block[11340-11371]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[11352-11361]:ExpressionStatement[11352-11361]"
    }, {
      "left" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[11380-11435]:ExpressionStatement[11380-11435]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[11444-11492]:IfStatement[11444-11492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11461-11492]:Block[11461-11492]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[11473-11482]:ExpressionStatement[11473-11482]"
    }, {
      "left" : "add(\".\");",
      "right" : "add(\".\");",
      "info" : "ExpressionStatement[11501-11510]:ExpressionStatement[11501-11510]"
    }, {
      "left" : "addIdentifier(last.getString());",
      "right" : "addIdentifier(last.getString());",
      "info" : "ExpressionStatement[11519-11551]:ExpressionStatement[11519-11551]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11560-11566]:BreakStatement[11560-11566]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[11582-11601]:SwitchCase[11582-11601]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
      "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
      "info" : "ExpressionStatement[11610-11736]:ExpressionStatement[11610-11736]"
    }, {
      "left" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[11745-11800]:ExpressionStatement[11745-11800]"
    }, {
      "left" : "add(\"[\");",
      "right" : "add(\"[\");",
      "info" : "ExpressionStatement[11809-11818]:ExpressionStatement[11809-11818]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[11827-11848]:ExpressionStatement[11827-11848]"
    }, {
      "left" : "add(\"]\");",
      "right" : "add(\"]\");",
      "info" : "ExpressionStatement[11857-11866]:ExpressionStatement[11857-11866]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11875-11881]:BreakStatement[11875-11881]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[11889-11905]:SwitchCase[11889-11905]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[11914-11956]:ExpressionStatement[11914-11956]"
    }, {
      "left" : "add(\"with(\");",
      "right" : "add(\"with(\");",
      "info" : "ExpressionStatement[11965-11978]:ExpressionStatement[11965-11978]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[11987-11998]:ExpressionStatement[11987-11998]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12007-12016]:ExpressionStatement[12007-12016]"
    }, {
      "left" : "addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[12025-12115]:ExpressionStatement[12025-12115]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12124-12130]:BreakStatement[12124-12130]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[12138-12153]:SwitchCase[12138-12153]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[12160-12175]:SwitchCase[12160-12175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12176-12673]:Block[12176-12673]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[12186-12228]:ExpressionStatement[12186-12228]"
    }, {
      "left" : "String o = type == Token.INC ? \"++\" : \"--\";",
      "right" : "String o = type == Token.INC ? \"++\" : \"--\";",
      "info" : "VariableDeclarationStatement[12237-12280]:VariableDeclarationStatement[12237-12280]"
    }, {
      "left" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
      "right" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
      "info" : "VariableDeclarationStatement[12289-12337]:VariableDeclarationStatement[12289-12337]"
    }, {
      "left" : "if (postProp != 0)",
      "right" : "if (postProp != 0)",
      "info" : "IfStatement[12455-12650]:IfStatement[12455-12650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12474-12581]:Block[12474-12581]"
    }, {
      "left" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[12486-12541]:ExpressionStatement[12486-12541]"
    }, {
      "left" : "cc.addOp(o, false);",
      "right" : "cc.addOp(o, false);",
      "info" : "ExpressionStatement[12552-12571]:ExpressionStatement[12552-12571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12587-12650]:Block[12587-12650]"
    }, {
      "left" : "cc.addOp(o, false);",
      "right" : "cc.addOp(o, false);",
      "info" : "ExpressionStatement[12599-12618]:ExpressionStatement[12599-12618]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[12629-12640]:ExpressionStatement[12629-12640]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12659-12665]:BreakStatement[12659-12665]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[12681-12697]:SwitchCase[12681-12697]"
    }, {
      "left" : "if (first.getType() == Token.NAME &&\n            \"eval\".equals(first.getString()) &&\n            !first.getBooleanProp(Node.DIRECT_EVAL))",
      "right" : "if (first.getType() == Token.NAME &&\n            \"eval\".equals(first.getString()) &&\n            !first.getBooleanProp(Node.DIRECT_EVAL))",
      "info" : "IfStatement[12976-13235]:IfStatement[12976-13235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13114-13152]:Block[13114-13152]"
    }, {
      "left" : "add(\"(0,eval)\");",
      "right" : "add(\"(0,eval)\");",
      "info" : "ExpressionStatement[13126-13142]:ExpressionStatement[13126-13142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13158-13235]:Block[13158-13235]"
    }, {
      "left" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[13170-13225]:ExpressionStatement[13170-13225]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[13244-13253]:ExpressionStatement[13244-13253]"
    }, {
      "left" : "addList(first.getNext());",
      "right" : "addList(first.getNext());",
      "info" : "ExpressionStatement[13262-13287]:ExpressionStatement[13262-13287]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[13296-13305]:ExpressionStatement[13296-13305]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13314-13320]:BreakStatement[13314-13320]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[13328-13342]:SwitchCase[13328-13342]"
    }, {
      "left" : "boolean hasElse = childCount == 3;",
      "right" : "boolean hasElse = childCount == 3;",
      "info" : "VariableDeclarationStatement[13351-13385]:VariableDeclarationStatement[13351-13385]"
    }, {
      "left" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
      "right" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
      "info" : "VariableDeclarationStatement[13394-13488]:VariableDeclarationStatement[13394-13488]"
    }, {
      "left" : "if (ambiguousElseClause)",
      "right" : "if (ambiguousElseClause)",
      "info" : "IfStatement[13497-13560]:IfStatement[13497-13560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13522-13560]:Block[13522-13560]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[13534-13550]:ExpressionStatement[13534-13550]"
    }, {
      "left" : "add(\"if(\");",
      "right" : "add(\"if(\");",
      "info" : "ExpressionStatement[13570-13581]:ExpressionStatement[13570-13581]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[13590-13601]:ExpressionStatement[13590-13601]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[13610-13619]:ExpressionStatement[13610-13619]"
    }, {
      "left" : "if (hasElse)",
      "right" : "if (hasElse)",
      "info" : "IfStatement[13629-14023]:IfStatement[13629-14023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13642-13881]:Block[13642-13881]"
    }, {
      "left" : "addNonEmptyExpression(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
      "right" : "addNonEmptyExpression(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
      "info" : "ExpressionStatement[13654-13745]:ExpressionStatement[13654-13745]"
    }, {
      "left" : "add(\"else\");",
      "right" : "add(\"else\");",
      "info" : "ExpressionStatement[13756-13768]:ExpressionStatement[13756-13768]"
    }, {
      "left" : "addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[13779-13871]:ExpressionStatement[13779-13871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13887-14023]:Block[13887-14023]"
    }, {
      "left" : "addNonEmptyExpression(first.getNext(), Context.OTHER, false);",
      "right" : "addNonEmptyExpression(first.getNext(), Context.OTHER, false);",
      "info" : "ExpressionStatement[13899-13960]:ExpressionStatement[13899-13960]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[13971-14013]:ExpressionStatement[13971-14013]"
    }, {
      "left" : "if (ambiguousElseClause)",
      "right" : "if (ambiguousElseClause)",
      "info" : "IfStatement[14033-14094]:IfStatement[14033-14094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14058-14094]:Block[14058-14094]"
    }, {
      "left" : "cc.endBlock();",
      "right" : "cc.endBlock();",
      "info" : "ExpressionStatement[14070-14084]:ExpressionStatement[14070-14084]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14103-14109]:BreakStatement[14103-14109]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[14117-14133]:SwitchCase[14117-14133]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[14140-14156]:SwitchCase[14140-14156]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[14163-14180]:SwitchCase[14163-14180]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[14187-14203]:SwitchCase[14187-14203]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[14212-14254]:ExpressionStatement[14212-14254]"
    }, {
      "left" : "add(Node.tokenToName(type));",
      "right" : "add(Node.tokenToName(type));",
      "info" : "ExpressionStatement[14263-14291]:ExpressionStatement[14263-14291]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14300-14306]:BreakStatement[14300-14306]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[14314-14334]:SwitchCase[14314-14334]"
    }, {
      "left" : "Preconditions.checkState(childCount <= 1);",
      "right" : "Preconditions.checkState(childCount <= 1);",
      "info" : "ExpressionStatement[14343-14385]:ExpressionStatement[14343-14385]"
    }, {
      "left" : "add(\"continue\");",
      "right" : "add(\"continue\");",
      "info" : "ExpressionStatement[14394-14410]:ExpressionStatement[14394-14410]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[14419-14635]:IfStatement[14419-14635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14440-14635]:Block[14440-14635]"
    }, {
      "left" : "if (first.getType() != Token.LABEL_NAME)",
      "right" : "if (first.getType() != Token.LABEL_NAME)",
      "info" : "IfStatement[14452-14583]:IfStatement[14452-14583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14493-14583]:Block[14493-14583]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[14507-14571]:ThrowStatement[14507-14571]"
    }, {
      "left" : "add(\" \");",
      "right" : "add(\" \");",
      "info" : "ExpressionStatement[14594-14603]:ExpressionStatement[14594-14603]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[14614-14625]:ExpressionStatement[14614-14625]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[14644-14662]:ExpressionStatement[14644-14662]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14671-14677]:BreakStatement[14671-14677]"
    }, {
      "left" : "case Token.DEBUGGER:",
      "right" : "case Token.DEBUGGER:",
      "info" : "SwitchCase[14685-14705]:SwitchCase[14685-14705]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[14714-14756]:ExpressionStatement[14714-14756]"
    }, {
      "left" : "add(\"debugger\");",
      "right" : "add(\"debugger\");",
      "info" : "ExpressionStatement[14765-14781]:ExpressionStatement[14765-14781]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[14790-14808]:ExpressionStatement[14790-14808]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14817-14823]:BreakStatement[14817-14823]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[14831-14848]:SwitchCase[14831-14848]"
    }, {
      "left" : "Preconditions.checkState(childCount <= 1);",
      "right" : "Preconditions.checkState(childCount <= 1);",
      "info" : "ExpressionStatement[14857-14899]:ExpressionStatement[14857-14899]"
    }, {
      "left" : "add(\"break\");",
      "right" : "add(\"break\");",
      "info" : "ExpressionStatement[14908-14921]:ExpressionStatement[14908-14921]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[14930-15146]:IfStatement[14930-15146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14951-15146]:Block[14951-15146]"
    }, {
      "left" : "if (first.getType() != Token.LABEL_NAME)",
      "right" : "if (first.getType() != Token.LABEL_NAME)",
      "info" : "IfStatement[14963-15094]:IfStatement[14963-15094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15004-15094]:Block[15004-15094]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[15018-15082]:ThrowStatement[15018-15082]"
    }, {
      "left" : "add(\" \");",
      "right" : "add(\" \");",
      "info" : "ExpressionStatement[15105-15114]:ExpressionStatement[15105-15114]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[15125-15136]:ExpressionStatement[15125-15136]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[15155-15173]:ExpressionStatement[15155-15173]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15182-15188]:BreakStatement[15182-15188]"
    }, {
      "left" : "case Token.EXPR_VOID:",
      "right" : "case Token.EXPR_VOID:",
      "info" : "SwitchCase[15196-15217]:SwitchCase[15196-15217]"
    }, {
      "left" : "throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");",
      "right" : "throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");",
      "info" : "ThrowStatement[15226-15290]:ThrowStatement[15226-15290]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[15298-15321]:SwitchCase[15298-15321]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[15330-15372]:ExpressionStatement[15330-15372]"
    }, {
      "left" : "add(first, Context.START_OF_EXPR);",
      "right" : "add(first, Context.START_OF_EXPR);",
      "info" : "ExpressionStatement[15381-15415]:ExpressionStatement[15381-15415]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[15424-15442]:ExpressionStatement[15424-15442]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15451-15457]:BreakStatement[15451-15457]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[15465-15480]:SwitchCase[15465-15480]"
    }, {
      "left" : "add(\"new \");",
      "right" : "add(\"new \");",
      "info" : "ExpressionStatement[15489-15501]:ExpressionStatement[15489-15501]"
    }, {
      "left" : "int precedence = NodeUtil.precedence(type);",
      "right" : "int precedence = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[15510-15553]:VariableDeclarationStatement[15510-15553]"
    }, {
      "left" : "if (NodeUtil.containsCall(first))",
      "right" : "if (NodeUtil.containsCall(first))",
      "info" : "IfStatement[15743-15853]:IfStatement[15743-15853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15777-15853]:Block[15777-15853]"
    }, {
      "left" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
      "right" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
      "info" : "ExpressionStatement[15789-15843]:ExpressionStatement[15789-15843]"
    }, {
      "left" : "addExpr(first, precedence);",
      "right" : "addExpr(first, precedence);",
      "info" : "ExpressionStatement[15862-15889]:ExpressionStatement[15862-15889]"
    }, {
      "left" : "Node next = first.getNext();",
      "right" : "Node next = first.getNext();",
      "info" : "VariableDeclarationStatement[15957-15985]:VariableDeclarationStatement[15957-15985]"
    }, {
      "left" : "if (next != null)",
      "right" : "if (next != null)",
      "info" : "IfStatement[15994-16088]:IfStatement[15994-16088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16012-16088]:Block[16012-16088]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[16024-16033]:ExpressionStatement[16024-16033]"
    }, {
      "left" : "addList(next);",
      "right" : "addList(next);",
      "info" : "ExpressionStatement[16044-16058]:ExpressionStatement[16044-16058]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[16069-16078]:ExpressionStatement[16069-16078]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16097-16103]:BreakStatement[16097-16103]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[16111-16129]:SwitchCase[16111-16129]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[16138-16180]:ExpressionStatement[16138-16180]"
    }, {
      "left" : "add(jsString(n.getString(), outputCharsetEncoder));",
      "right" : "add(jsString(n.getString(), outputCharsetEncoder));",
      "info" : "ExpressionStatement[16189-16240]:ExpressionStatement[16189-16240]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16249-16255]:BreakStatement[16249-16255]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[16263-16282]:SwitchCase[16263-16282]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[16291-16333]:ExpressionStatement[16291-16333]"
    }, {
      "left" : "add(\"delete \");",
      "right" : "add(\"delete \");",
      "info" : "ExpressionStatement[16342-16357]:ExpressionStatement[16342-16357]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[16366-16377]:ExpressionStatement[16366-16377]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16386-16392]:BreakStatement[16386-16392]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[16400-16421]:SwitchCase[16400-16421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16422-17450]:Block[16422-17450]"
    }, {
      "left" : "Preconditions.checkState(childCount % 2 == 0);",
      "right" : "Preconditions.checkState(childCount % 2 == 0);",
      "info" : "ExpressionStatement[16432-16478]:ExpressionStatement[16432-16478]"
    }, {
      "left" : "boolean needsParens = (context == Context.START_OF_EXPR);",
      "right" : "boolean needsParens = (context == Context.START_OF_EXPR);",
      "info" : "VariableDeclarationStatement[16487-16544]:VariableDeclarationStatement[16487-16544]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[16553-16601]:IfStatement[16553-16601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16570-16601]:Block[16570-16601]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[16582-16591]:ExpressionStatement[16582-16591]"
    }, {
      "left" : "add(\"{\");",
      "right" : "add(\"{\");",
      "info" : "ExpressionStatement[16610-16619]:ExpressionStatement[16610-16619]"
    }, {
      "left" : "for (Node c = first; c != null; c = c.getNext().getNext())",
      "right" : "for (Node c = first; c != null; c = c.getNext().getNext())",
      "info" : "ForStatement[16628-17352]:ForStatement[16628-17352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16687-17352]:Block[16687-17352]"
    }, {
      "left" : "if (c != first)",
      "right" : "if (c != first)",
      "info" : "IfStatement[16699-16760]:IfStatement[16699-16760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16715-16760]:Block[16715-16760]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[16729-16748]:ExpressionStatement[16729-16748]"
    }, {
      "left" : "if (c.getType() == Token.STRING &&\n              !TokenStream.isKeyword(c.getString()) &&\n              TokenStream.isJSIdentifier(c.getString()) &&\n              // do not encode literally any non-literal characters that were\n              // unicode escaped.\n              NodeUtil.isLatin(c.getString()))",
      "right" : "if (c.getType() == Token.STRING &&\n              !TokenStream.isKeyword(c.getString()) &&\n              TokenStream.isJSIdentifier(c.getString()) &&\n              // do not encode literally any non-literal characters that were\n              // unicode escaped.\n              NodeUtil.isLatin(c.getString()))",
      "info" : "IfStatement[16888-17287]:IfStatement[16888-17287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17196-17241]:Block[17196-17241]"
    }, {
      "left" : "add(c.getString());",
      "right" : "add(c.getString());",
      "info" : "ExpressionStatement[17210-17229]:ExpressionStatement[17210-17229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17247-17287]:Block[17247-17287]"
    }, {
      "left" : "addExpr(c, 1);",
      "right" : "addExpr(c, 1);",
      "info" : "ExpressionStatement[17261-17275]:ExpressionStatement[17261-17275]"
    }, {
      "left" : "add(\":\");",
      "right" : "add(\":\");",
      "info" : "ExpressionStatement[17298-17307]:ExpressionStatement[17298-17307]"
    }, {
      "left" : "addExpr(c.getNext(), 1);",
      "right" : "addExpr(c.getNext(), 1);",
      "info" : "ExpressionStatement[17318-17342]:ExpressionStatement[17318-17342]"
    }, {
      "left" : "add(\"}\");",
      "right" : "add(\"}\");",
      "info" : "ExpressionStatement[17361-17370]:ExpressionStatement[17361-17370]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[17379-17427]:IfStatement[17379-17427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17396-17427]:Block[17396-17427]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[17408-17417]:ExpressionStatement[17408-17417]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17436-17442]:BreakStatement[17436-17442]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[17458-17476]:SwitchCase[17458-17476]"
    }, {
      "left" : "add(\"switch(\");",
      "right" : "add(\"switch(\");",
      "info" : "ExpressionStatement[17485-17500]:ExpressionStatement[17485-17500]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[17509-17520]:ExpressionStatement[17509-17520]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[17529-17538]:ExpressionStatement[17529-17538]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[17547-17563]:ExpressionStatement[17547-17563]"
    }, {
      "left" : "addAllSiblings(first.getNext());",
      "right" : "addAllSiblings(first.getNext());",
      "info" : "ExpressionStatement[17572-17604]:ExpressionStatement[17572-17604]"
    }, {
      "left" : "cc.endBlock(context == Context.STATEMENT);",
      "right" : "cc.endBlock(context == Context.STATEMENT);",
      "info" : "ExpressionStatement[17613-17655]:ExpressionStatement[17613-17655]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17664-17670]:BreakStatement[17664-17670]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[17678-17694]:SwitchCase[17678-17694]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[17703-17745]:ExpressionStatement[17703-17745]"
    }, {
      "left" : "add(\"case \");",
      "right" : "add(\"case \");",
      "info" : "ExpressionStatement[17754-17767]:ExpressionStatement[17754-17767]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[17776-17787]:ExpressionStatement[17776-17787]"
    }, {
      "left" : "addCaseBody(last);",
      "right" : "addCaseBody(last);",
      "info" : "ExpressionStatement[17796-17814]:ExpressionStatement[17796-17814]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17823-17829]:BreakStatement[17823-17829]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[17837-17856]:SwitchCase[17837-17856]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[17865-17907]:ExpressionStatement[17865-17907]"
    }, {
      "left" : "add(\"default\");",
      "right" : "add(\"default\");",
      "info" : "ExpressionStatement[17916-17931]:ExpressionStatement[17916-17931]"
    }, {
      "left" : "addCaseBody(first);",
      "right" : "addCaseBody(first);",
      "info" : "ExpressionStatement[17940-17959]:ExpressionStatement[17940-17959]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17968-17974]:BreakStatement[17968-17974]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[17982-17999]:SwitchCase[17982-17999]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[18008-18050]:ExpressionStatement[18008-18050]"
    }, {
      "left" : "if (first.getType() != Token.LABEL_NAME)",
      "right" : "if (first.getType() != Token.LABEL_NAME)",
      "info" : "IfStatement[18059-18186]:IfStatement[18059-18186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18100-18186]:Block[18100-18186]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[18112-18176]:ThrowStatement[18112-18176]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[18195-18206]:ExpressionStatement[18195-18206]"
    }, {
      "left" : "add(\":\");",
      "right" : "add(\":\");",
      "info" : "ExpressionStatement[18215-18224]:ExpressionStatement[18215-18224]"
    }, {
      "left" : "addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), true);",
      "right" : "addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), true);",
      "info" : "ExpressionStatement[18233-18322]:ExpressionStatement[18233-18322]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18331-18337]:BreakStatement[18331-18337]"
    }, {
      "left" : "case Token.SETNAME:",
      "right" : "case Token.SETNAME:",
      "info" : "SwitchCase[18460-18479]:SwitchCase[18460-18479]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18488-18494]:BreakStatement[18488-18494]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18502-18510]:SwitchCase[18502-18510]"
    }, {
      "left" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
      "right" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
      "info" : "ThrowStatement[18519-18585]:ThrowStatement[18519-18585]"
    }, {
      "left" : "cc.endSourceMapping(n);",
      "right" : "cc.endSourceMapping(n);",
      "info" : "ExpressionStatement[18597-18620]:ExpressionStatement[18597-18620]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18901-18908]:Modifier[18901-18908]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18909-18913]:PrimitiveType[18909-18913]"
    }, {
      "left" : "addNonEmptyExpression",
      "right" : "addNonEmptyExpression",
      "info" : "SimpleName[18914-18935]:SimpleName[18914-18935]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18943-18949]:SingleVariableDeclaration[18943-18949]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[18951-18966]:SingleVariableDeclaration[18951-18966]"
    }, {
      "left" : "boolean allowNonBlockChild",
      "right" : "boolean allowNonBlockChild",
      "info" : "SingleVariableDeclaration[18968-18994]:SingleVariableDeclaration[18968-18994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18996-20712]:Block[18996-20712]"
    }, {
      "left" : "Node nodeToProcess = n;",
      "right" : "Node nodeToProcess = n;",
      "info" : "VariableDeclarationStatement[19002-19025]:VariableDeclarationStatement[19002-19025]"
    }, {
      "left" : "if (!allowNonBlockChild && n.getType() != Token.BLOCK)",
      "right" : "if (!allowNonBlockChild && n.getType() != Token.BLOCK)",
      "info" : "IfStatement[19031-19140]:IfStatement[19031-19140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19086-19140]:Block[19086-19140]"
    }, {
      "left" : "throw new Error(\"Missing BLOCK child.\");",
      "right" : "throw new Error(\"Missing BLOCK child.\");",
      "info" : "ThrowStatement[19094-19134]:ThrowStatement[19094-19134]"
    }, {
      "left" : "if (n.getType() == Token.BLOCK)",
      "right" : "if (n.getType() == Token.BLOCK)",
      "info" : "IfStatement[19271-20339]:IfStatement[19271-20339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19304-20339]:Block[19304-20339]"
    }, {
      "left" : "int count = getNonEmptyChildCount(n, 2);",
      "right" : "int count = getNonEmptyChildCount(n, 2);",
      "info" : "VariableDeclarationStatement[19312-19352]:VariableDeclarationStatement[19312-19352]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[19359-19612]:IfStatement[19359-19612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19375-19612]:Block[19375-19612]"
    }, {
      "left" : "if (cc.shouldPreserveExtraBlocks())",
      "right" : "if (cc.shouldPreserveExtraBlocks())",
      "info" : "IfStatement[19385-19588]:IfStatement[19385-19588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19421-19538]:Block[19421-19538]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[19433-19449]:ExpressionStatement[19433-19449]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[19460-19528]:ExpressionStatement[19460-19528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19544-19588]:Block[19544-19588]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[19556-19578]:ExpressionStatement[19556-19578]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19597-19604]:ReturnStatement[19597-19604]"
    }, {
      "left" : "if (count == 1)",
      "right" : "if (count == 1)",
      "info" : "IfStatement[19620-20333]:IfStatement[19620-20333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19636-20333]:Block[19636-20333]"
    }, {
      "left" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "right" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "info" : "VariableDeclarationStatement[19804-19854]:VariableDeclarationStatement[19804-19854]"
    }, {
      "left" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "right" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "info" : "VariableDeclarationStatement[19863-19922]:VariableDeclarationStatement[19863-19922]"
    }, {
      "left" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "right" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "info" : "IfStatement[19931-20325]:IfStatement[19931-20325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20001-20220]:Block[20001-20220]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[20013-20029]:ExpressionStatement[20013-20029]"
    }, {
      "left" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "right" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "info" : "ExpressionStatement[20040-20082]:ExpressionStatement[20040-20082]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[20093-20113]:ExpressionStatement[20093-20113]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[20124-20192]:ExpressionStatement[20124-20192]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20203-20210]:ReturnStatement[20203-20210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20226-20325]:Block[20226-20325]"
    }, {
      "left" : "nodeToProcess = firstAndOnlyChild;",
      "right" : "nodeToProcess = firstAndOnlyChild;",
      "info" : "ExpressionStatement[20281-20315]:ExpressionStatement[20281-20315]"
    }, {
      "left" : "if (nodeToProcess.getType() == Token.EMPTY)",
      "right" : "if (nodeToProcess.getType() == Token.EMPTY)",
      "info" : "IfStatement[20345-20708]:IfStatement[20345-20708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20389-20425]:Block[20389-20425]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[20397-20419]:ExpressionStatement[20397-20419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20431-20708]:Block[20431-20708]"
    }, {
      "left" : "add(nodeToProcess, context);",
      "right" : "add(nodeToProcess, context);",
      "info" : "ExpressionStatement[20439-20467]:ExpressionStatement[20439-20467]"
    }, {
      "left" : "if (nodeToProcess.getType() == Token.VAR)",
      "right" : "if (nodeToProcess.getType() == Token.VAR)",
      "info" : "IfStatement[20624-20702]:IfStatement[20624-20702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20666-20702]:Block[20666-20702]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[20676-20694]:ExpressionStatement[20676-20694]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21661-21665]:PrimitiveType[22072-22076]"
    }, {
      "left" : "addLeftExpr",
      "right" : "addLeftExpr",
      "info" : "SimpleName[21666-21677]:SimpleName[22077-22088]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21678-21684]:SingleVariableDeclaration[22089-22095]"
    }, {
      "left" : "int minPrecedence",
      "right" : "int minPrecedence",
      "info" : "SingleVariableDeclaration[21686-21703]:SingleVariableDeclaration[22097-22114]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[21705-21720]:SingleVariableDeclaration[22116-22131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21722-21767]:Block[22133-22178]"
    }, {
      "left" : "addExpr(n, minPrecedence, context);",
      "right" : "addExpr(n, minPrecedence, context);",
      "info" : "ExpressionStatement[21728-21763]:ExpressionStatement[22139-22174]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21771-21775]:PrimitiveType[22182-22186]"
    }, {
      "left" : "addExpr",
      "right" : "addExpr",
      "info" : "SimpleName[21776-21783]:SimpleName[22187-22194]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21784-21790]:SingleVariableDeclaration[22195-22201]"
    }, {
      "left" : "int minPrecedence",
      "right" : "int minPrecedence",
      "info" : "SingleVariableDeclaration[21792-21809]:SingleVariableDeclaration[22203-22220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21811-21862]:Block[22222-22273]"
    }, {
      "left" : "addExpr(n, minPrecedence, Context.OTHER);",
      "right" : "addExpr(n, minPrecedence, Context.OTHER);",
      "info" : "ExpressionStatement[21817-21858]:ExpressionStatement[22228-22269]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21866-21873]:Modifier[22277-22284]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21874-21878]:PrimitiveType[22285-22289]"
    }, {
      "left" : "addExpr",
      "right" : "addExpr",
      "info" : "SimpleName[21879-21886]:SimpleName[22290-22297]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21887-21893]:SingleVariableDeclaration[22298-22304]"
    }, {
      "left" : "int minPrecedence",
      "right" : "int minPrecedence",
      "info" : "SingleVariableDeclaration[21895-21912]:SingleVariableDeclaration[22306-22323]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[21914-21929]:SingleVariableDeclaration[22325-22340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21931-22213]:Block[22342-22624]"
    }, {
      "left" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.getType() == Token.IN)))",
      "right" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.getType() == Token.IN)))",
      "info" : "IfStatement[21937-22209]:IfStatement[22348-22620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22082-22173]:Block[22493-22584]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[22090-22099]:ExpressionStatement[22501-22510]"
    }, {
      "left" : "add(n, clearContextForNoInOperator(context));",
      "right" : "add(n, clearContextForNoInOperator(context));",
      "info" : "ExpressionStatement[22106-22151]:ExpressionStatement[22517-22562]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[22158-22167]:ExpressionStatement[22569-22578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22179-22209]:Block[22590-22620]"
    }, {
      "left" : "add(n, context);",
      "right" : "add(n, context);",
      "info" : "ExpressionStatement[22187-22203]:ExpressionStatement[22598-22614]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22217-22221]:PrimitiveType[22628-22632]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[22222-22229]:SimpleName[22633-22640]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[22230-22246]:SingleVariableDeclaration[22641-22657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22248-22300]:Block[22659-22711]"
    }, {
      "left" : "addList(firstInList, true, Context.OTHER);",
      "right" : "addList(firstInList, true, Context.OTHER);",
      "info" : "ExpressionStatement[22254-22296]:ExpressionStatement[22665-22707]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22304-22308]:PrimitiveType[22715-22719]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[22309-22316]:SimpleName[22720-22727]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[22317-22333]:SingleVariableDeclaration[22728-22744]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[22335-22368]:SingleVariableDeclaration[22746-22779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22370-22443]:Block[22781-22854]"
    }, {
      "left" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "right" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "info" : "ExpressionStatement[22376-22439]:ExpressionStatement[22787-22850]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22447-22451]:PrimitiveType[22858-22862]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[22452-22459]:SimpleName[22863-22870]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[22460-22476]:SingleVariableDeclaration[22871-22887]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[22478-22511]:SingleVariableDeclaration[22889-22922]"
    }, {
      "left" : "Context lhsContext",
      "right" : "Context lhsContext",
      "info" : "SingleVariableDeclaration[22528-22546]:SingleVariableDeclaration[22939-22957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22548-22860]:Block[22959-23271]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[22554-22856]:ForStatement[22965-23267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22609-22856]:Block[23020-23267]"
    }, {
      "left" : "boolean isFirst = n == firstInList;",
      "right" : "boolean isFirst = n == firstInList;",
      "info" : "VariableDeclarationStatement[22617-22652]:VariableDeclarationStatement[23028-23063]"
    }, {
      "left" : "if (isFirst)",
      "right" : "if (isFirst)",
      "info" : "IfStatement[22659-22850]:IfStatement[23070-23261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22672-22752]:Block[23083-23163]"
    }, {
      "left" : "addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "right" : "addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "info" : "ExpressionStatement[22682-22744]:ExpressionStatement[23093-23155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22758-22850]:Block[23169-23261]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[22768-22787]:ExpressionStatement[23179-23198]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0);",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0);",
      "info" : "ExpressionStatement[22796-22842]:ExpressionStatement[23207-23253]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23305-23309]:PrimitiveType[23716-23720]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[23310-23317]:SimpleName[23721-23728]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[23318-23334]:SingleVariableDeclaration[23729-23745]"
    }, {
      "left" : "int[] skipIndexes",
      "right" : "int[] skipIndexes",
      "info" : "SingleVariableDeclaration[23336-23353]:SingleVariableDeclaration[23747-23764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23355-23836]:Block[23766-24247]"
    }, {
      "left" : "int nextSlot = 0;",
      "right" : "int nextSlot = 0;",
      "info" : "VariableDeclarationStatement[23361-23378]:VariableDeclarationStatement[23772-23789]"
    }, {
      "left" : "int nextSkipSlot = 0;",
      "right" : "int nextSkipSlot = 0;",
      "info" : "VariableDeclarationStatement[23383-23404]:VariableDeclarationStatement[23794-23815]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[23409-23832]:ForStatement[23820-24243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23464-23832]:Block[23875-24243]"
    }, {
      "left" : "while (skipIndexes != null && nextSkipSlot < skipIndexes.length)",
      "right" : "while (skipIndexes != null && nextSkipSlot < skipIndexes.length)",
      "info" : "WhileStatement[23472-23721]:WhileStatement[23883-24132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23537-23721]:Block[23948-24132]"
    }, {
      "left" : "if (nextSlot == skipIndexes[nextSkipSlot])",
      "right" : "if (nextSlot == skipIndexes[nextSkipSlot])",
      "info" : "IfStatement[23547-23713]:IfStatement[23958-24124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23590-23679]:Block[24001-24090]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[23602-23621]:ExpressionStatement[24013-24032]"
    }, {
      "left" : "nextSlot++;",
      "right" : "nextSlot++;",
      "info" : "ExpressionStatement[23632-23643]:ExpressionStatement[24043-24054]"
    }, {
      "left" : "nextSkipSlot++;",
      "right" : "nextSkipSlot++;",
      "info" : "ExpressionStatement[23654-23669]:ExpressionStatement[24065-24080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23685-23713]:Block[24096-24124]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23697-23703]:BreakStatement[24108-24114]"
    }, {
      "left" : "if (n != firstInList)",
      "right" : "if (n != firstInList)",
      "info" : "IfStatement[23728-23787]:IfStatement[24139-24198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23750-23787]:Block[24161-24198]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[23760-23779]:ExpressionStatement[24171-24190]"
    }, {
      "left" : "addExpr(n, 1);",
      "right" : "addExpr(n, 1);",
      "info" : "ExpressionStatement[23794-23808]:ExpressionStatement[24205-24219]"
    }, {
      "left" : "nextSlot++;",
      "right" : "nextSlot++;",
      "info" : "ExpressionStatement[23815-23826]:ExpressionStatement[24226-24237]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23840-23844]:PrimitiveType[24251-24255]"
    }, {
      "left" : "addCaseBody",
      "right" : "addCaseBody",
      "info" : "SimpleName[23845-23856]:SimpleName[24256-24267]"
    }, {
      "left" : "Node caseBody",
      "right" : "Node caseBody",
      "info" : "SingleVariableDeclaration[23857-23870]:SingleVariableDeclaration[24268-24281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23872-23942]:Block[24283-24353]"
    }, {
      "left" : "cc.beginCaseBody();",
      "right" : "cc.beginCaseBody();",
      "info" : "ExpressionStatement[23878-23897]:ExpressionStatement[24289-24308]"
    }, {
      "left" : "add(caseBody);",
      "right" : "add(caseBody);",
      "info" : "ExpressionStatement[23902-23916]:ExpressionStatement[24313-24327]"
    }, {
      "left" : "cc.endCaseBody();",
      "right" : "cc.endCaseBody();",
      "info" : "ExpressionStatement[23921-23938]:ExpressionStatement[24332-24349]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23946-23950]:PrimitiveType[24357-24361]"
    }, {
      "left" : "addAllSiblings",
      "right" : "addAllSiblings",
      "info" : "SimpleName[23951-23965]:SimpleName[24362-24376]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23966-23972]:SingleVariableDeclaration[24377-24383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23974-24050]:Block[24385-24461]"
    }, {
      "left" : "for (Node c = n; c != null; c = c.getNext())",
      "right" : "for (Node c = n; c != null; c = c.getNext())",
      "info" : "ForStatement[23980-24046]:ForStatement[24391-24457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24025-24046]:Block[24436-24457]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[24033-24040]:ExpressionStatement[24444-24451]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24134-24140]:Modifier[24545-24551]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[24141-24147]:SimpleType[24552-24558]"
    }, {
      "left" : "jsString",
      "right" : "jsString",
      "info" : "SimpleName[24148-24156]:SimpleName[24559-24567]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[24157-24165]:SingleVariableDeclaration[24568-24576]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[24167-24202]:SingleVariableDeclaration[24578-24613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24204-24923]:Block[24615-25334]"
    }, {
      "left" : "int singleq = 0, doubleq = 0;",
      "right" : "int singleq = 0, doubleq = 0;",
      "info" : "VariableDeclarationStatement[24210-24239]:VariableDeclarationStatement[24621-24650]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[24312-24466]:ForStatement[24723-24877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24349-24466]:Block[24760-24877]"
    }, {
      "left" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "right" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "info" : "SwitchStatement[24357-24460]:SwitchStatement[24768-24871]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[24388-24397]:SwitchCase[24799-24808]"
    }, {
      "left" : "doubleq++;",
      "right" : "doubleq++;",
      "info" : "ExpressionStatement[24398-24408]:ExpressionStatement[24809-24819]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24409-24415]:BreakStatement[24820-24826]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[24424-24434]:SwitchCase[24835-24845]"
    }, {
      "left" : "singleq++;",
      "right" : "singleq++;",
      "info" : "ExpressionStatement[24435-24445]:ExpressionStatement[24846-24856]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24446-24452]:BreakStatement[24857-24863]"
    }, {
      "left" : "String doublequote, singlequote;",
      "right" : "String doublequote, singlequote;",
      "info" : "VariableDeclarationStatement[24472-24504]:VariableDeclarationStatement[24883-24915]"
    }, {
      "left" : "char quote;",
      "right" : "char quote;",
      "info" : "VariableDeclarationStatement[24509-24520]:VariableDeclarationStatement[24920-24931]"
    }, {
      "left" : "if (singleq < doubleq)",
      "right" : "if (singleq < doubleq)",
      "info" : "IfStatement[24525-24822]:IfStatement[24936-25233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24548-24685]:Block[24959-25096]"
    }, {
      "left" : "quote = '\\'';",
      "right" : "quote = '\\'';",
      "info" : "ExpressionStatement[24612-24625]:ExpressionStatement[25023-25036]"
    }, {
      "left" : "doublequote = \"\\\"\";",
      "right" : "doublequote = \"\\\"\";",
      "info" : "ExpressionStatement[24632-24651]:ExpressionStatement[25043-25062]"
    }, {
      "left" : "singlequote = \"\\\\\\'\";",
      "right" : "singlequote = \"\\\\\\'\";",
      "info" : "ExpressionStatement[24658-24679]:ExpressionStatement[25069-25090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24691-24822]:Block[25102-25233]"
    }, {
      "left" : "quote = '\\\"';",
      "right" : "quote = '\\\"';",
      "info" : "ExpressionStatement[24749-24762]:ExpressionStatement[25160-25173]"
    }, {
      "left" : "doublequote = \"\\\\\\\"\";",
      "right" : "doublequote = \"\\\\\\\"\";",
      "info" : "ExpressionStatement[24769-24790]:ExpressionStatement[25180-25201]"
    }, {
      "left" : "singlequote = \"\\'\";",
      "right" : "singlequote = \"\\'\";",
      "info" : "ExpressionStatement[24797-24816]:ExpressionStatement[25208-25227]"
    }, {
      "left" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder);",
      "right" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder);",
      "info" : "ReturnStatement[24828-24919]:ReturnStatement[25239-25330]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24963-24969]:Modifier[25374-25380]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[24970-24976]:SimpleType[25381-25387]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[24977-24989]:SimpleName[25388-25400]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[24990-24998]:SingleVariableDeclaration[25401-25409]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[25000-25035]:SingleVariableDeclaration[25411-25446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25037-25111]:Block[25448-25522]"
    }, {
      "left" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder);",
      "right" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder);",
      "info" : "ReturnStatement[25043-25107]:ReturnStatement[25454-25518]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25203-25209]:Modifier[25614-25620]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[25210-25216]:SimpleType[25621-25627]"
    }, {
      "left" : "escapeToDoubleQuotedJsString",
      "right" : "escapeToDoubleQuotedJsString",
      "info" : "SimpleName[25217-25245]:SimpleName[25628-25656]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[25246-25254]:SingleVariableDeclaration[25657-25665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25256-25320]:Block[25667-25731]"
    }, {
      "left" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null);",
      "right" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null);",
      "info" : "ReturnStatement[25262-25316]:ReturnStatement[25673-25727]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25449-25455]:Modifier[25860-25866]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[25456-25462]:SimpleType[25867-25873]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[25463-25475]:SimpleName[25874-25886]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[25476-25484]:SingleVariableDeclaration[25887-25895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25486-25525]:Block[25897-25936]"
    }, {
      "left" : "return regexpEscape(s, null);",
      "right" : "return regexpEscape(s, null);",
      "info" : "ReturnStatement[25492-25521]:ReturnStatement[25903-25932]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25603-25609]:Modifier[26014-26020]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[25610-25616]:SimpleType[26021-26027]"
    }, {
      "left" : "strEscape",
      "right" : "strEscape",
      "info" : "SimpleName[25617-25626]:SimpleName[26028-26037]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[25627-25635]:SingleVariableDeclaration[26038-26046]"
    }, {
      "left" : "char quote",
      "right" : "char quote",
      "info" : "SingleVariableDeclaration[25637-25647]:SingleVariableDeclaration[26048-26058]"
    }, {
      "left" : "String doublequoteEscape",
      "right" : "String doublequoteEscape",
      "info" : "SingleVariableDeclaration[25675-25699]:SingleVariableDeclaration[26086-26110]"
    }, {
      "left" : "String singlequoteEscape",
      "right" : "String singlequoteEscape",
      "info" : "SingleVariableDeclaration[25727-25751]:SingleVariableDeclaration[26138-26162]"
    }, {
      "left" : "String backslashEscape",
      "right" : "String backslashEscape",
      "info" : "SingleVariableDeclaration[25779-25801]:SingleVariableDeclaration[26190-26212]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[25829-25864]:SingleVariableDeclaration[26240-26275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25866-28086]:Block[26277-28497]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[25872-25911]:VariableDeclarationStatement[26283-26322]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[25916-25933]:ExpressionStatement[26327-26344]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[25938-28034]:ForStatement[26349-28445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25975-28034]:Block[26386-28445]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[25983-26004]:VariableDeclarationStatement[26394-26415]"
    }, {
      "left" : "switch (c) {\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':                       // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c <= 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "right" : "switch (c) {\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':                       // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c <= 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "info" : "SwitchStatement[26011-28028]:SwitchStatement[26422-28439]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[26032-26042]:SwitchCase[26443-26453]"
    }, {
      "left" : "sb.append(\"\\\\n\");",
      "right" : "sb.append(\"\\\\n\");",
      "info" : "ExpressionStatement[26043-26060]:ExpressionStatement[26454-26471]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26061-26067]:BreakStatement[26472-26478]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[26076-26086]:SwitchCase[26487-26497]"
    }, {
      "left" : "sb.append(\"\\\\r\");",
      "right" : "sb.append(\"\\\\r\");",
      "info" : "ExpressionStatement[26087-26104]:ExpressionStatement[26498-26515]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26105-26111]:BreakStatement[26516-26522]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[26120-26130]:SwitchCase[26531-26541]"
    }, {
      "left" : "sb.append(\"\\\\t\");",
      "right" : "sb.append(\"\\\\t\");",
      "info" : "ExpressionStatement[26131-26148]:ExpressionStatement[26542-26559]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26149-26155]:BreakStatement[26560-26566]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[26164-26174]:SwitchCase[26575-26585]"
    }, {
      "left" : "sb.append(backslashEscape);",
      "right" : "sb.append(backslashEscape);",
      "info" : "ExpressionStatement[26175-26202]:ExpressionStatement[26586-26613]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26203-26209]:BreakStatement[26614-26620]"
    }, {
      "left" : "case '\\\"':",
      "right" : "case '\\\"':",
      "info" : "SwitchCase[26218-26228]:SwitchCase[26629-26639]"
    }, {
      "left" : "sb.append(doublequoteEscape);",
      "right" : "sb.append(doublequoteEscape);",
      "info" : "ExpressionStatement[26229-26258]:ExpressionStatement[26640-26669]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26259-26265]:BreakStatement[26670-26676]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[26274-26284]:SwitchCase[26685-26695]"
    }, {
      "left" : "sb.append(singlequoteEscape);",
      "right" : "sb.append(singlequoteEscape);",
      "info" : "ExpressionStatement[26285-26314]:ExpressionStatement[26696-26725]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26315-26321]:BreakStatement[26726-26732]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[26330-26339]:SwitchCase[26741-26750]"
    }, {
      "left" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "right" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "info" : "IfStatement[26412-26651]:IfStatement[26823-27062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26563-26606]:Block[26974-27017]"
    }, {
      "left" : "sb.append(\"\\\\>\");",
      "right" : "sb.append(\"\\\\>\");",
      "info" : "ExpressionStatement[26577-26594]:ExpressionStatement[26988-27005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26612-26651]:Block[27023-27062]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[26626-26639]:ExpressionStatement[27037-27050]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26662-26668]:BreakStatement[27073-27079]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[26677-26686]:SwitchCase[27088-27097]"
    }, {
      "left" : "final String END_SCRIPT = \"/script\";",
      "right" : "final String END_SCRIPT = \"/script\";",
      "info" : "VariableDeclarationStatement[26752-26788]:VariableDeclarationStatement[27163-27199]"
    }, {
      "left" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n              END_SCRIPT.length()))",
      "right" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n              END_SCRIPT.length()))",
      "info" : "IfStatement[26799-26971]:IfStatement[27210-27382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26883-26926]:Block[27294-27337]"
    }, {
      "left" : "sb.append(\"<\\\\\");",
      "right" : "sb.append(\"<\\\\\");",
      "info" : "ExpressionStatement[26897-26914]:ExpressionStatement[27308-27325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26932-26971]:Block[27343-27382]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[26946-26959]:ExpressionStatement[27357-27370]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26982-26988]:BreakStatement[27393-27399]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26997-27005]:SwitchCase[27408-27416]"
    }, {
      "left" : "if (outputCharsetEncoder != null)",
      "right" : "if (outputCharsetEncoder != null)",
      "info" : "IfStatement[27153-28020]:IfStatement[27564-28431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27187-27419]:Block[27598-27830]"
    }, {
      "left" : "if (outputCharsetEncoder.canEncode(c))",
      "right" : "if (outputCharsetEncoder.canEncode(c))",
      "info" : "IfStatement[27201-27407]:IfStatement[27612-27818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27240-27283]:Block[27651-27694]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[27256-27269]:ExpressionStatement[27667-27680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27289-27407]:Block[27700-27818]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[27352-27393]:ExpressionStatement[27763-27804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27425-28020]:Block[27836-28431]"
    }, {
      "left" : "if (c > 0x1f && c <= 0x7f)",
      "right" : "if (c > 0x1f && c <= 0x7f)",
      "info" : "IfStatement[27662-28008]:IfStatement[28073-28419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27689-27732]:Block[28100-28143]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[27705-27718]:ExpressionStatement[28116-28129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27738-28008]:Block[28149-28419]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[27953-27994]:ExpressionStatement[28364-28405]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[28039-28056]:ExpressionStatement[28450-28467]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[28061-28082]:ReturnStatement[28472-28493]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28090-28096]:Modifier[28501-28507]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[28097-28103]:SimpleType[28508-28514]"
    }, {
      "left" : "identifierEscape",
      "right" : "identifierEscape",
      "info" : "SimpleName[28104-28120]:SimpleName[28515-28531]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[28121-28129]:SingleVariableDeclaration[28532-28540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28131-28780]:Block[28542-29191]"
    }, {
      "left" : "if (NodeUtil.isLatin(s))",
      "right" : "if (NodeUtil.isLatin(s))",
      "info" : "IfStatement[28212-28260]:IfStatement[28623-28671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28237-28260]:Block[28648-28671]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[28245-28254]:ReturnStatement[28656-28665]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[28344-28383]:VariableDeclarationStatement[28755-28794]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[28388-28750]:ForStatement[28799-29161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28425-28750]:Block[28836-29161]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[28433-28454]:VariableDeclarationStatement[28844-28865]"
    }, {
      "left" : "if (c > 0x1F && c < 0x7F)",
      "right" : "if (c > 0x1F && c < 0x7F)",
      "info" : "IfStatement[28622-28744]:IfStatement[29033-29155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28648-28679]:Block[29059-29090]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[28658-28671]:ExpressionStatement[29069-29082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28685-28744]:Block[29096-29155]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[28695-28736]:ExpressionStatement[29106-29147]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[28755-28776]:ReturnStatement[29166-29187]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28949-28956]:Modifier[29360-29367]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28957-28963]:Modifier[29368-29374]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[28964-28967]:PrimitiveType[29375-29378]"
    }, {
      "left" : "getNonEmptyChildCount",
      "right" : "getNonEmptyChildCount",
      "info" : "SimpleName[28968-28989]:SimpleName[29379-29400]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28990-28996]:SingleVariableDeclaration[29401-29407]"
    }, {
      "left" : "int maxCount",
      "right" : "int maxCount",
      "info" : "SingleVariableDeclaration[28998-29010]:SingleVariableDeclaration[29409-29421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29012-29202]:Block[29423-29613]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29018-29028]:VariableDeclarationStatement[29429-29439]"
    }, {
      "left" : "Node c = n.getFirstChild();",
      "right" : "Node c = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[29033-29060]:VariableDeclarationStatement[29444-29471]"
    }, {
      "left" : "for (; c != null && i < maxCount; c = c.getNext())",
      "right" : "for (; c != null && i < maxCount; c = c.getNext())",
      "info" : "ForStatement[29065-29184]:ForStatement[29476-29595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29116-29184]:Block[29527-29595]"
    }, {
      "left" : "if (c.getType() != Token.EMPTY)",
      "right" : "if (c.getType() != Token.EMPTY)",
      "info" : "IfStatement[29124-29178]:IfStatement[29535-29589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29156-29178]:Block[29567-29589]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[29166-29170]:ExpressionStatement[29577-29581]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[29189-29198]:ReturnStatement[29600-29609]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29265-29272]:Modifier[29676-29683]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29273-29279]:Modifier[29684-29690]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[29280-29284]:SimpleType[29691-29695]"
    }, {
      "left" : "getFirstNonEmptyChild",
      "right" : "getFirstNonEmptyChild",
      "info" : "SimpleName[29285-29306]:SimpleName[29696-29717]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29307-29313]:SingleVariableDeclaration[29718-29724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29315-29476]:Block[29726-29887]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[29321-29455]:ForStatement[29732-29866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29382-29455]:Block[29793-29866]"
    }, {
      "left" : "if (c.getType() != Token.EMPTY)",
      "right" : "if (c.getType() != Token.EMPTY)",
      "info" : "IfStatement[29390-29449]:IfStatement[29801-29860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29422-29449]:Block[29833-29860]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[29432-29441]:ReturnStatement[29843-29852]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29460-29472]:ReturnStatement[29871-29883]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30087-30094]:Modifier[30498-30505]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[30095-30102]:SimpleType[30506-30513]"
    }, {
      "left" : "getContextForNonEmptyExpression",
      "right" : "getContextForNonEmptyExpression",
      "info" : "SimpleName[30103-30134]:SimpleName[30514-30545]"
    }, {
      "left" : "Context currentContext",
      "right" : "Context currentContext",
      "info" : "SingleVariableDeclaration[30135-30157]:SingleVariableDeclaration[30546-30568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30159-30278]:Block[30570-30689]"
    }, {
      "left" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "right" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "info" : "ReturnStatement[30165-30274]:ReturnStatement[30576-30685]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30447-30454]:Modifier[30858-30865]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[30456-30463]:SimpleType[30867-30874]"
    }, {
      "left" : "getContextForNoInOperator",
      "right" : "getContextForNoInOperator",
      "info" : "SimpleName[30464-30489]:SimpleName[30875-30900]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[30490-30505]:SingleVariableDeclaration[30901-30916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30507-30617]:Block[30918-31028]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "info" : "ReturnStatement[30513-30613]:ReturnStatement[30924-31024]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30905-30912]:Modifier[31316-31323]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[30914-30921]:SimpleType[31325-31332]"
    }, {
      "left" : "clearContextForNoInOperator",
      "right" : "clearContextForNoInOperator",
      "info" : "SimpleName[30922-30949]:SimpleName[31333-31360]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[30950-30965]:SingleVariableDeclaration[31361-31376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30967-31058]:Block[31378-31469]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);",
      "info" : "ReturnStatement[30973-31054]:ReturnStatement[31384-31465]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31136-31143]:Modifier[31547-31554]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31144-31150]:Modifier[31555-31561]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31151-31155]:PrimitiveType[31562-31566]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[31156-31189]:SimpleName[31567-31600]"
    }, {
      "left" : "StringBuilder sb",
      "right" : "StringBuilder sb",
      "info" : "SingleVariableDeclaration[31197-31213]:SingleVariableDeclaration[31608-31624]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[31215-31221]:SingleVariableDeclaration[31626-31632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31223-31412]:Block[31634-31823]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31229-31408]:TryStatement[31640-31819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31233-31288]:Block[31644-31699]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(c, sb);",
      "right" : "appendHexJavaScriptRepresentation(c, sb);",
      "info" : "ExpressionStatement[31241-31282]:ExpressionStatement[31652-31693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31312-31408]:Block[31723-31819]"
    }, {
      "left" : "throw new RuntimeException(ex);",
      "right" : "throw new RuntimeException(ex);",
      "info" : "ThrowStatement[31371-31402]:ThrowStatement[31782-31813]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31647-31654]:Modifier[32058-32065]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31655-31661]:Modifier[32066-32072]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31662-31666]:PrimitiveType[32073-32077]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[31667-31700]:SimpleName[32078-32111]"
    }, {
      "left" : "int codePoint",
      "right" : "int codePoint",
      "info" : "SingleVariableDeclaration[31708-31721]:SingleVariableDeclaration[32119-32132]"
    }, {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[31723-31737]:SingleVariableDeclaration[32134-32148]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31752-31763]:SimpleType[32163-32174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31764-32502]:Block[32175-32913]"
    }, {
      "left" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "right" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "info" : "IfStatement[31770-32274]:IfStatement[32181-32685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31821-32274]:Block[32232-32685]"
    }, {
      "left" : "char[] surrogates = Character.toChars(codePoint);",
      "right" : "char[] surrogates = Character.toChars(codePoint);",
      "info" : "VariableDeclarationStatement[32083-32132]:VariableDeclarationStatement[32494-32543]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "info" : "ExpressionStatement[32139-32193]:ExpressionStatement[32550-32604]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "info" : "ExpressionStatement[32200-32254]:ExpressionStatement[32611-32665]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32261-32268]:ReturnStatement[32672-32679]"
    }, {
      "left" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "right" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "info" : "ExpressionStatement[32279-32498]:ExpressionStatement[32690-32909]"
    } ]
  },
  "interFileMappings" : { }
}