{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "TypeDeclaration[1420-89878]:TypeDeclaration[1420-90015]"
    }, {
      "left" : "static final long MAX_POSITIVE_INTEGER_NUMBER = (long)Math.pow(2, 53);",
      "right" : "static final long MAX_POSITIVE_INTEGER_NUMBER = (long)Math.pow(2, 53);",
      "info" : "FieldDeclaration[1537-1607]:FieldDeclaration[1537-1607]"
    }, {
      "left" : "final static String JSC_PROPERTY_NAME_FN = \"JSCompiler_renameProperty\";",
      "right" : "final static String JSC_PROPERTY_NAME_FN = \"JSCompiler_renameProperty\";",
      "info" : "FieldDeclaration[1611-1682]:FieldDeclaration[1611-1682]"
    }, {
      "left" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "right" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "info" : "FieldDeclaration[1819-2113]:FieldDeclaration[1819-2113]"
    }, {
      "left" : "private NodeUtil()",
      "right" : "private NodeUtil()",
      "info" : "MethodDeclaration[2157-2178]:MethodDeclaration[2157-2178]"
    }, {
      "left" : "static TernaryValue getImpureBooleanValue(Node n)",
      "right" : "static TernaryValue getImpureBooleanValue(Node n)",
      "info" : "MethodDeclaration[2182-3763]:MethodDeclaration[2182-3821]"
    }, {
      "left" : "static TernaryValue getPureBooleanValue(Node n)",
      "right" : "static TernaryValue getPureBooleanValue(Node n)",
      "info" : "MethodDeclaration[3767-5264]:MethodDeclaration[3825-5401]"
    }, {
      "left" : "static String getStringValue(Node n)",
      "right" : "static String getStringValue(Node n)",
      "info" : "MethodDeclaration[5268-6499]:MethodDeclaration[5405-6636]"
    }, {
      "left" : "static String getStringValue(double value)",
      "right" : "static String getStringValue(double value)",
      "info" : "MethodDeclaration[6503-6747]:MethodDeclaration[6640-6884]"
    }, {
      "left" : "static String getArrayElementStringValue(Node n)",
      "right" : "static String getArrayElementStringValue(Node n)",
      "info" : "MethodDeclaration[6751-7288]:MethodDeclaration[6888-7425]"
    }, {
      "left" : "static String arrayToString(Node literal)",
      "right" : "static String arrayToString(Node literal)",
      "info" : "MethodDeclaration[7292-7798]:MethodDeclaration[7429-7935]"
    }, {
      "left" : "static Double getNumberValue(Node n)",
      "right" : "static Double getNumberValue(Node n)",
      "info" : "MethodDeclaration[7802-9515]:MethodDeclaration[7939-9652]"
    }, {
      "left" : "static Double getStringNumberValue(String rawJsString)",
      "right" : "static Double getStringNumberValue(String rawJsString)",
      "info" : "MethodDeclaration[9519-10789]:MethodDeclaration[9656-10926]"
    }, {
      "left" : "static String trimJsWhiteSpace(String s)",
      "right" : "static String trimJsWhiteSpace(String s)",
      "info" : "MethodDeclaration[10793-11148]:MethodDeclaration[10930-11285]"
    }, {
      "left" : "static TernaryValue isStrWhiteSpaceChar(int c)",
      "right" : "static TernaryValue isStrWhiteSpaceChar(int c)",
      "info" : "MethodDeclaration[11152-11802]:MethodDeclaration[11289-11939]"
    }, {
      "left" : "static String getFunctionName(Node n)",
      "right" : "static String getFunctionName(Node n)",
      "info" : "MethodDeclaration[11806-13010]:MethodDeclaration[11943-13147]"
    }, {
      "left" : "public static String getNearestFunctionName(Node n)",
      "right" : "public static String getNearestFunctionName(Node n)",
      "info" : "MethodDeclaration[13014-14117]:MethodDeclaration[13151-14254]"
    }, {
      "left" : "static boolean isImmutableValue(Node n)",
      "right" : "static boolean isImmutableValue(Node n)",
      "info" : "MethodDeclaration[14122-14910]:MethodDeclaration[14259-15047]"
    }, {
      "left" : "static boolean isLiteralValue(Node n, boolean includeFunctions)",
      "right" : "static boolean isLiteralValue(Node n, boolean includeFunctions)",
      "info" : "MethodDeclaration[14914-17004]:MethodDeclaration[15051-17141]"
    }, {
      "left" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "right" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "info" : "MethodDeclaration[17008-18498]:MethodDeclaration[17145-18635]"
    }, {
      "left" : "static boolean isEmptyBlock(Node block)",
      "right" : "static boolean isEmptyBlock(Node block)",
      "info" : "MethodDeclaration[18502-18882]:MethodDeclaration[18639-19019]"
    }, {
      "left" : "static boolean isSimpleOperator(Node n)",
      "right" : "static boolean isSimpleOperator(Node n)",
      "info" : "MethodDeclaration[18886-18977]:MethodDeclaration[19023-19114]"
    }, {
      "left" : "static boolean isSimpleOperatorType(int type)",
      "right" : "static boolean isSimpleOperatorType(int type)",
      "info" : "MethodDeclaration[18981-19958]:MethodDeclaration[19118-20095]"
    }, {
      "left" : "public static Node newExpr(Node child)",
      "right" : "public static Node newExpr(Node child)",
      "info" : "MethodDeclaration[19962-20268]:MethodDeclaration[20099-20405]"
    }, {
      "left" : "static boolean mayEffectMutableState(Node n)",
      "right" : "static boolean mayEffectMutableState(Node n)",
      "info" : "MethodDeclaration[20272-20535]:MethodDeclaration[20409-20672]"
    }, {
      "left" : "static boolean mayEffectMutableState(Node n, AbstractCompiler compiler)",
      "right" : "static boolean mayEffectMutableState(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[20539-20673]:MethodDeclaration[20676-20810]"
    }, {
      "left" : "static boolean mayHaveSideEffects(Node n)",
      "right" : "static boolean mayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[20677-20849]:MethodDeclaration[20814-20986]"
    }, {
      "left" : "static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "right" : "static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[20853-20985]:MethodDeclaration[20990-21122]"
    }, {
      "left" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler)",
      "right" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[20989-25830]:MethodDeclaration[21126-25967]"
    }, {
      "left" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "right" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "info" : "MethodDeclaration[25834-26071]:MethodDeclaration[25971-26208]"
    }, {
      "left" : "static boolean constructorCallHasSideEffects(\n      Node callNode, AbstractCompiler compiler)",
      "right" : "static boolean constructorCallHasSideEffects(\n      Node callNode, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[26075-26613]:MethodDeclaration[26212-26750]"
    }, {
      "left" : "private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
      "right" : "private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
      "info" : "FieldDeclaration[26826-27001]:FieldDeclaration[26963-27138]"
    }, {
      "left" : "private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");",
      "right" : "private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");",
      "info" : "FieldDeclaration[27004-27119]:FieldDeclaration[27141-27256]"
    }, {
      "left" : "private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
      "right" : "private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
      "info" : "FieldDeclaration[27122-27210]:FieldDeclaration[27259-27347]"
    }, {
      "left" : "private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
      "right" : "private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
      "info" : "FieldDeclaration[27213-27331]:FieldDeclaration[27350-27468]"
    }, {
      "left" : "static boolean functionCallHasSideEffects(Node callNode)",
      "right" : "static boolean functionCallHasSideEffects(Node callNode)",
      "info" : "MethodDeclaration[27335-27574]:MethodDeclaration[27472-27711]"
    }, {
      "left" : "static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler)",
      "right" : "static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler)",
      "info" : "MethodDeclaration[27578-29805]:MethodDeclaration[27715-29942]"
    }, {
      "left" : "static boolean callHasLocalResult(Node n)",
      "right" : "static boolean callHasLocalResult(Node n)",
      "info" : "MethodDeclaration[29809-30042]:MethodDeclaration[29946-30179]"
    }, {
      "left" : "static boolean newHasLocalResult(Node n)",
      "right" : "static boolean newHasLocalResult(Node n)",
      "info" : "MethodDeclaration[30046-30248]:MethodDeclaration[30183-30385]"
    }, {
      "left" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "right" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[30252-30624]:MethodDeclaration[30389-30761]"
    }, {
      "left" : "static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "right" : "static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[30628-31216]:MethodDeclaration[30765-31353]"
    }, {
      "left" : "static boolean canBeSideEffected(Node n)",
      "right" : "static boolean canBeSideEffected(Node n)",
      "info" : "MethodDeclaration[31220-31460]:MethodDeclaration[31357-31597]"
    }, {
      "left" : "static boolean canBeSideEffected(Node n, Set<String> knownConstants)",
      "right" : "static boolean canBeSideEffected(Node n, Set<String> knownConstants)",
      "info" : "MethodDeclaration[31464-32799]:MethodDeclaration[31601-32936]"
    }, {
      "left" : "static int precedence(int type)",
      "right" : "static int precedence(int type)",
      "info" : "MethodDeclaration[33236-35252]:MethodDeclaration[33373-35389]"
    }, {
      "left" : "static boolean valueCheck(Node n, Predicate<Node> p)",
      "right" : "static boolean valueCheck(Node n, Predicate<Node> p)",
      "info" : "MethodDeclaration[35256-35866]:MethodDeclaration[35393-36003]"
    }, {
      "left" : "NumbericResultPredicate",
      "right" : "NumbericResultPredicate",
      "info" : "TypeDeclaration[35870-36019]:TypeDeclaration[36007-36156]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[35940-36015]:MethodDeclaration[36077-36152]"
    }, {
      "left" : "static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n      new NumbericResultPredicate();",
      "right" : "static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n      new NumbericResultPredicate();",
      "info" : "FieldDeclaration[36023-36124]:FieldDeclaration[36160-36261]"
    }, {
      "left" : "static boolean isNumericResult(Node n)",
      "right" : "static boolean isNumericResult(Node n)",
      "info" : "MethodDeclaration[36128-36307]:MethodDeclaration[36265-36444]"
    }, {
      "left" : "static boolean isNumericResultHelper(Node n)",
      "right" : "static boolean isNumericResultHelper(Node n)",
      "info" : "MethodDeclaration[36311-37156]:MethodDeclaration[36448-37293]"
    }, {
      "left" : "BooleanResultPredicate",
      "right" : "BooleanResultPredicate",
      "info" : "TypeDeclaration[37160-37308]:TypeDeclaration[37297-37445]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[37229-37304]:MethodDeclaration[37366-37441]"
    }, {
      "left" : "static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n      new BooleanResultPredicate();",
      "right" : "static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n      new BooleanResultPredicate();",
      "info" : "FieldDeclaration[37312-37410]:FieldDeclaration[37449-37547]"
    }, {
      "left" : "static boolean isBooleanResult(Node n)",
      "right" : "static boolean isBooleanResult(Node n)",
      "info" : "MethodDeclaration[37414-37593]:MethodDeclaration[37551-37730]"
    }, {
      "left" : "static boolean isBooleanResultHelper(Node n)",
      "right" : "static boolean isBooleanResultHelper(Node n)",
      "info" : "MethodDeclaration[37597-38177]:MethodDeclaration[37734-38314]"
    }, {
      "left" : "static boolean isUndefined(Node n)",
      "right" : "static boolean isUndefined(Node n)",
      "info" : "MethodDeclaration[38181-38389]:MethodDeclaration[38318-38526]"
    }, {
      "left" : "static boolean isNull(Node n)",
      "right" : "static boolean isNull(Node n)",
      "info" : "MethodDeclaration[38393-38466]:MethodDeclaration[38530-38603]"
    }, {
      "left" : "static boolean isNullOrUndefined(Node n)",
      "right" : "static boolean isNullOrUndefined(Node n)",
      "info" : "MethodDeclaration[38470-38556]:MethodDeclaration[38607-38693]"
    }, {
      "left" : "MayBeStringResultPredicate",
      "right" : "MayBeStringResultPredicate",
      "info" : "TypeDeclaration[38560-38708]:TypeDeclaration[38697-38845]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[38633-38704]:MethodDeclaration[38770-38841]"
    }, {
      "left" : "static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n      new MayBeStringResultPredicate();",
      "right" : "static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n      new MayBeStringResultPredicate();",
      "info" : "FieldDeclaration[38712-38817]:FieldDeclaration[38849-38954]"
    }, {
      "left" : "static boolean mayBeString(Node n)",
      "right" : "static boolean mayBeString(Node n)",
      "info" : "MethodDeclaration[38821-38962]:MethodDeclaration[38958-39099]"
    }, {
      "left" : "static boolean mayBeString(Node n, boolean recurse)",
      "right" : "static boolean mayBeString(Node n, boolean recurse)",
      "info" : "MethodDeclaration[38966-39149]:MethodDeclaration[39103-39286]"
    }, {
      "left" : "static boolean mayBeStringHelper(Node n)",
      "right" : "static boolean mayBeStringHelper(Node n)",
      "info" : "MethodDeclaration[39153-39295]:MethodDeclaration[39290-39432]"
    }, {
      "left" : "static boolean isAssociative(int type)",
      "right" : "static boolean isAssociative(int type)",
      "info" : "MethodDeclaration[39299-39791]:MethodDeclaration[39436-39928]"
    }, {
      "left" : "static boolean isCommutative(int type)",
      "right" : "static boolean isCommutative(int type)",
      "info" : "MethodDeclaration[39795-40323]:MethodDeclaration[39932-40460]"
    }, {
      "left" : "static boolean isAssignmentOp(Node n)",
      "right" : "static boolean isAssignmentOp(Node n)",
      "info" : "MethodDeclaration[40327-40794]:MethodDeclaration[40464-40931]"
    }, {
      "left" : "static int getOpFromAssignmentOp(Node n)",
      "right" : "static int getOpFromAssignmentOp(Node n)",
      "info" : "MethodDeclaration[40798-41561]:MethodDeclaration[40935-41698]"
    }, {
      "left" : "static boolean isExpressionNode(Node n)",
      "right" : "static boolean isExpressionNode(Node n)",
      "info" : "MethodDeclaration[41565-41655]:MethodDeclaration[41702-41792]"
    }, {
      "left" : "static boolean containsFunction(Node n)",
      "right" : "static boolean containsFunction(Node n)",
      "info" : "MethodDeclaration[41659-41853]:MethodDeclaration[41796-41990]"
    }, {
      "left" : "static boolean referencesThis(Node n)",
      "right" : "static boolean referencesThis(Node n)",
      "info" : "MethodDeclaration[41857-42110]:MethodDeclaration[41994-42247]"
    }, {
      "left" : "static boolean isGet(Node n)",
      "right" : "static boolean isGet(Node n)",
      "info" : "MethodDeclaration[42114-42281]:MethodDeclaration[42251-42418]"
    }, {
      "left" : "static boolean isGetProp(Node n)",
      "right" : "static boolean isGetProp(Node n)",
      "info" : "MethodDeclaration[42285-42405]:MethodDeclaration[42422-42542]"
    }, {
      "left" : "static boolean isName(Node n)",
      "right" : "static boolean isName(Node n)",
      "info" : "MethodDeclaration[42409-42520]:MethodDeclaration[42546-42657]"
    }, {
      "left" : "static boolean isNew(Node n)",
      "right" : "static boolean isNew(Node n)",
      "info" : "MethodDeclaration[42524-42632]:MethodDeclaration[42661-42769]"
    }, {
      "left" : "static boolean isVar(Node n)",
      "right" : "static boolean isVar(Node n)",
      "info" : "MethodDeclaration[42636-42744]:MethodDeclaration[42773-42881]"
    }, {
      "left" : "static boolean isVarDeclaration(Node n)",
      "right" : "static boolean isVarDeclaration(Node n)",
      "info" : "MethodDeclaration[42748-43157]:MethodDeclaration[42885-43294]"
    }, {
      "left" : "static Node getAssignedValue(Node n)",
      "right" : "static Node getAssignedValue(Node n)",
      "info" : "MethodDeclaration[43161-43603]:MethodDeclaration[43298-43740]"
    }, {
      "left" : "static boolean isString(Node n)",
      "right" : "static boolean isString(Node n)",
      "info" : "MethodDeclaration[43607-43724]:MethodDeclaration[43744-43861]"
    }, {
      "left" : "static boolean isExprAssign(Node n)",
      "right" : "static boolean isExprAssign(Node n)",
      "info" : "MethodDeclaration[43728-44056]:MethodDeclaration[43865-44193]"
    }, {
      "left" : "static boolean isAssign(Node n)",
      "right" : "static boolean isAssign(Node n)",
      "info" : "MethodDeclaration[44060-44178]:MethodDeclaration[44197-44315]"
    }, {
      "left" : "static boolean isExprCall(Node n)",
      "right" : "static boolean isExprCall(Node n)",
      "info" : "MethodDeclaration[44182-44497]:MethodDeclaration[44319-44634]"
    }, {
      "left" : "static boolean isForIn(Node n)",
      "right" : "static boolean isForIn(Node n)",
      "info" : "MethodDeclaration[44501-44676]:MethodDeclaration[44638-44813]"
    }, {
      "left" : "static boolean isLoopStructure(Node n)",
      "right" : "static boolean isLoopStructure(Node n)",
      "info" : "MethodDeclaration[44680-44962]:MethodDeclaration[44817-45099]"
    }, {
      "left" : "static Node getLoopCodeBlock(Node n)",
      "right" : "static Node getLoopCodeBlock(Node n)",
      "info" : "MethodDeclaration[44966-45369]:MethodDeclaration[45103-45506]"
    }, {
      "left" : "static boolean isWithinLoop(Node n)",
      "right" : "static boolean isWithinLoop(Node n)",
      "info" : "MethodDeclaration[45373-45730]:MethodDeclaration[45510-45867]"
    }, {
      "left" : "static boolean isControlStructure(Node n)",
      "right" : "static boolean isControlStructure(Node n)",
      "info" : "MethodDeclaration[45734-46217]:MethodDeclaration[45871-46354]"
    }, {
      "left" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "right" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "info" : "MethodDeclaration[46221-47102]:MethodDeclaration[46358-47239]"
    }, {
      "left" : "static Node getConditionExpression(Node n)",
      "right" : "static Node getConditionExpression(Node n)",
      "info" : "MethodDeclaration[47106-47906]:MethodDeclaration[47243-48043]"
    }, {
      "left" : "static boolean isStatementBlock(Node n)",
      "right" : "static boolean isStatementBlock(Node n)",
      "info" : "MethodDeclaration[47910-48111]:MethodDeclaration[48047-48248]"
    }, {
      "left" : "static boolean isStatement(Node n)",
      "right" : "static boolean isStatement(Node n)",
      "info" : "MethodDeclaration[48115-48266]:MethodDeclaration[48252-48403]"
    }, {
      "left" : "static boolean isStatementParent(Node parent)",
      "right" : "static boolean isStatementParent(Node parent)",
      "info" : "MethodDeclaration[48270-48731]:MethodDeclaration[48407-48868]"
    }, {
      "left" : "static boolean isSwitchCase(Node n)",
      "right" : "static boolean isSwitchCase(Node n)",
      "info" : "MethodDeclaration[48735-48903]:MethodDeclaration[48872-49040]"
    }, {
      "left" : "static boolean isReferenceName(Node n)",
      "right" : "static boolean isReferenceName(Node n)",
      "info" : "MethodDeclaration[48907-49166]:MethodDeclaration[49044-49303]"
    }, {
      "left" : "static boolean isLabelName(Node n)",
      "right" : "static boolean isLabelName(Node n)",
      "info" : "MethodDeclaration[49170-49320]:MethodDeclaration[49307-49457]"
    }, {
      "left" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "right" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "info" : "MethodDeclaration[49324-49564]:MethodDeclaration[49461-49701]"
    }, {
      "left" : "static boolean isTryCatchNodeContainer(Node n)",
      "right" : "static boolean isTryCatchNodeContainer(Node n)",
      "info" : "MethodDeclaration[49568-49798]:MethodDeclaration[49705-49935]"
    }, {
      "left" : "static void removeChild(Node parent, Node node)",
      "right" : "static void removeChild(Node parent, Node node)",
      "info" : "MethodDeclaration[49802-52266]:MethodDeclaration[49939-52403]"
    }, {
      "left" : "static void maybeAddFinally(Node tryNode)",
      "right" : "static void maybeAddFinally(Node tryNode)",
      "info" : "MethodDeclaration[52270-52582]:MethodDeclaration[52407-52719]"
    }, {
      "left" : "static boolean tryMergeBlock(Node block)",
      "right" : "static boolean tryMergeBlock(Node block)",
      "info" : "MethodDeclaration[52586-53275]:MethodDeclaration[52723-53412]"
    }, {
      "left" : "static boolean isCall(Node n)",
      "right" : "static boolean isCall(Node n)",
      "info" : "MethodDeclaration[53279-53390]:MethodDeclaration[53416-53527]"
    }, {
      "left" : "static boolean isCallOrNew(Node node)",
      "right" : "static boolean isCallOrNew(Node node)",
      "info" : "MethodDeclaration[53394-53584]:MethodDeclaration[53531-53721]"
    }, {
      "left" : "static boolean isFunction(Node n)",
      "right" : "static boolean isFunction(Node n)",
      "info" : "MethodDeclaration[53588-53711]:MethodDeclaration[53725-53848]"
    }, {
      "left" : "static Node getFunctionBody(Node fn)",
      "right" : "static Node getFunctionBody(Node fn)",
      "info" : "MethodDeclaration[53715-53902]:MethodDeclaration[53852-54039]"
    }, {
      "left" : "static boolean isThis(Node node)",
      "right" : "static boolean isThis(Node node)",
      "info" : "MethodDeclaration[53906-54023]:MethodDeclaration[54043-54160]"
    }, {
      "left" : "static boolean isArrayLiteral(Node node)",
      "right" : "static boolean isArrayLiteral(Node node)",
      "info" : "MethodDeclaration[54028-54161]:MethodDeclaration[54165-54298]"
    }, {
      "left" : "static boolean containsCall(Node n)",
      "right" : "static boolean containsCall(Node n)",
      "info" : "MethodDeclaration[54165-54307]:MethodDeclaration[54302-54444]"
    }, {
      "left" : "static boolean isFunctionDeclaration(Node n)",
      "right" : "static boolean isFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[54311-54660]:MethodDeclaration[54448-54797]"
    }, {
      "left" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "right" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[54664-55066]:MethodDeclaration[54801-55203]"
    }, {
      "left" : "static boolean isFunctionExpression(Node n)",
      "right" : "static boolean isFunctionExpression(Node n)",
      "info" : "MethodDeclaration[55070-55836]:MethodDeclaration[55207-55973]"
    }, {
      "left" : "static boolean isEmptyFunctionExpression(Node node)",
      "right" : "static boolean isEmptyFunctionExpression(Node node)",
      "info" : "MethodDeclaration[55840-56164]:MethodDeclaration[55977-56301]"
    }, {
      "left" : "static boolean isVarArgsFunction(Node function)",
      "right" : "static boolean isVarArgsFunction(Node function)",
      "info" : "MethodDeclaration[56168-56534]:MethodDeclaration[56305-56671]"
    }, {
      "left" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "right" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "info" : "MethodDeclaration[56538-57141]:MethodDeclaration[56675-57278]"
    }, {
      "left" : "static boolean isFunctionObjectCall(Node callNode)",
      "right" : "static boolean isFunctionObjectCall(Node callNode)",
      "info" : "MethodDeclaration[57146-57381]:MethodDeclaration[57283-57518]"
    }, {
      "left" : "static boolean isFunctionObjectApply(Node callNode)",
      "right" : "static boolean isFunctionObjectApply(Node callNode)",
      "info" : "MethodDeclaration[57385-57624]:MethodDeclaration[57522-57761]"
    }, {
      "left" : "static boolean isFunctionObjectCallOrApply(Node callNode)",
      "right" : "static boolean isFunctionObjectCallOrApply(Node callNode)",
      "info" : "MethodDeclaration[57628-57953]:MethodDeclaration[57765-58090]"
    }, {
      "left" : "static boolean isSimpleFunctionObjectCall(Node callNode)",
      "right" : "static boolean isSimpleFunctionObjectCall(Node callNode)",
      "info" : "MethodDeclaration[57957-58352]:MethodDeclaration[58094-58489]"
    }, {
      "left" : "static boolean isVarOrSimpleAssignLhs(Node n, Node parent)",
      "right" : "static boolean isVarOrSimpleAssignLhs(Node n, Node parent)",
      "info" : "MethodDeclaration[58356-58891]:MethodDeclaration[58493-59028]"
    }, {
      "left" : "static boolean isLValue(Node node)",
      "right" : "static boolean isLValue(Node node)",
      "info" : "MethodDeclaration[58895-60097]:MethodDeclaration[59032-60234]"
    }, {
      "left" : "static boolean isObjectLitKey(Node node, Node parent)",
      "right" : "static boolean isObjectLitKey(Node node, Node parent)",
      "info" : "MethodDeclaration[60101-60548]:MethodDeclaration[60238-60685]"
    }, {
      "left" : "static String getObjectLitKeyName(Node key)",
      "right" : "static String getObjectLitKeyName(Node key)",
      "info" : "MethodDeclaration[60552-60890]:MethodDeclaration[60689-61027]"
    }, {
      "left" : "static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType)",
      "right" : "static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType)",
      "info" : "MethodDeclaration[60894-61905]:MethodDeclaration[61031-62042]"
    }, {
      "left" : "static boolean isGetOrSetKey(Node node)",
      "right" : "static boolean isGetOrSetKey(Node node)",
      "info" : "MethodDeclaration[61909-62240]:MethodDeclaration[62046-62377]"
    }, {
      "left" : "static String opToStr(int operator)",
      "right" : "static String opToStr(int operator)",
      "info" : "MethodDeclaration[62244-64157]:MethodDeclaration[62381-64294]"
    }, {
      "left" : "static String opToStrNoFail(int operator)",
      "right" : "static String opToStrNoFail(int operator)",
      "info" : "MethodDeclaration[64161-64664]:MethodDeclaration[64298-64801]"
    }, {
      "left" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[64668-64973]:MethodDeclaration[64805-65110]"
    }, {
      "left" : "static boolean containsType(Node node, int type)",
      "right" : "static boolean containsType(Node node, int type)",
      "info" : "MethodDeclaration[64977-65183]:MethodDeclaration[65114-65320]"
    }, {
      "left" : "static void redeclareVarsInsideBranch(Node branch)",
      "right" : "static void redeclareVarsInsideBranch(Node branch)",
      "info" : "MethodDeclaration[65188-65935]:MethodDeclaration[65325-66072]"
    }, {
      "left" : "static void copyNameAnnotations(Node source, Node destination)",
      "right" : "static void copyNameAnnotations(Node source, Node destination)",
      "info" : "MethodDeclaration[65939-66240]:MethodDeclaration[66076-66377]"
    }, {
      "left" : "private static Node getAddingRoot(Node n)",
      "right" : "private static Node getAddingRoot(Node n)",
      "info" : "MethodDeclaration[66244-67066]:MethodDeclaration[66381-67203]"
    }, {
      "left" : "public static Node newFunctionNode(String name, List<Node> params,\n      Node body, int lineno, int charno)",
      "right" : "public static Node newFunctionNode(String name, List<Node> params,\n      Node body, int lineno, int charno)",
      "info" : "MethodDeclaration[67070-67647]:MethodDeclaration[67207-67784]"
    }, {
      "left" : "public static Node newQualifiedNameNode(\n      CodingConvention convention, String name, int lineno, int charno)",
      "right" : "public static Node newQualifiedNameNode(\n      CodingConvention convention, String name, int lineno, int charno)",
      "info" : "MethodDeclaration[67651-68806]:MethodDeclaration[67788-68943]"
    }, {
      "left" : "static Node newQualifiedNameNode(\n      CodingConvention convention, String name, Node basisNode,\n      String originalName)",
      "right" : "static Node newQualifiedNameNode(\n      CodingConvention convention, String name, Node basisNode,\n      String originalName)",
      "info" : "MethodDeclaration[68810-69604]:MethodDeclaration[68947-69741]"
    }, {
      "left" : "public static Node getRootOfQualifiedName(Node qName)",
      "right" : "public static Node getRootOfQualifiedName(Node qName)",
      "info" : "MethodDeclaration[69608-70019]:MethodDeclaration[69745-70156]"
    }, {
      "left" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "right" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "info" : "MethodDeclaration[70023-70554]:MethodDeclaration[70160-70691]"
    }, {
      "left" : "private static Node newName(\n      CodingConvention convention, String name, int lineno, int charno)",
      "right" : "private static Node newName(\n      CodingConvention convention, String name, int lineno, int charno)",
      "info" : "MethodDeclaration[70558-70860]:MethodDeclaration[70695-70997]"
    }, {
      "left" : "static Node newName(\n      CodingConvention convention, String name, Node basisNode)",
      "right" : "static Node newName(\n      CodingConvention convention, String name, Node basisNode)",
      "info" : "MethodDeclaration[70864-71508]:MethodDeclaration[71001-71645]"
    }, {
      "left" : "static Node newName(\n      CodingConvention convention, String name,\n      Node basisNode, String originalName)",
      "right" : "static Node newName(\n      CodingConvention convention, String name,\n      Node basisNode, String originalName)",
      "info" : "MethodDeclaration[71512-72281]:MethodDeclaration[71649-72418]"
    }, {
      "left" : "static boolean isLatin(String s)",
      "right" : "static boolean isLatin(String s)",
      "info" : "MethodDeclaration[72285-73152]:MethodDeclaration[72422-73289]"
    }, {
      "left" : "static boolean isValidPropertyName(String name)",
      "right" : "static boolean isValidPropertyName(String name)",
      "info" : "MethodDeclaration[73156-73817]:MethodDeclaration[73293-73954]"
    }, {
      "left" : "VarCollector",
      "right" : "VarCollector",
      "info" : "TypeDeclaration[73821-74258]:TypeDeclaration[73958-74395]"
    }, {
      "left" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "right" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "info" : "FieldDeclaration[73880-73935]:FieldDeclaration[74017-74072]"
    }, {
      "left" : "public void visit(Node n)",
      "right" : "public void visit(Node n)",
      "info" : "MethodDeclaration[73941-74254]:MethodDeclaration[74078-74391]"
    }, {
      "left" : "public static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "right" : "public static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "info" : "MethodDeclaration[74262-74592]:MethodDeclaration[74399-74729]"
    }, {
      "left" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "right" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "info" : "MethodDeclaration[74596-74894]:MethodDeclaration[74733-75031]"
    }, {
      "left" : "static boolean isPrototypeProperty(Node n)",
      "right" : "static boolean isPrototypeProperty(Node n)",
      "info" : "MethodDeclaration[74898-75134]:MethodDeclaration[75035-75271]"
    }, {
      "left" : "static Node getPrototypeClassName(Node qName)",
      "right" : "static Node getPrototypeClassName(Node qName)",
      "info" : "MethodDeclaration[75138-75497]:MethodDeclaration[75275-75634]"
    }, {
      "left" : "static String getPrototypePropertyName(Node qName)",
      "right" : "static String getPrototypePropertyName(Node qName)",
      "info" : "MethodDeclaration[75501-75859]:MethodDeclaration[75638-75996]"
    }, {
      "left" : "static Node newUndefinedNode(Node srcReferenceNode)",
      "right" : "static Node newUndefinedNode(Node srcReferenceNode)",
      "info" : "MethodDeclaration[75863-76174]:MethodDeclaration[76000-76311]"
    }, {
      "left" : "static Node newVarNode(String name, Node value)",
      "right" : "static Node newVarNode(String name, Node value)",
      "info" : "MethodDeclaration[76178-76647]:MethodDeclaration[76315-76784]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "TypeDeclaration[76651-77003]:TypeDeclaration[76788-77140]"
    }, {
      "left" : "final String name;",
      "right" : "final String name;",
      "info" : "FieldDeclaration[76796-76814]:FieldDeclaration[76933-76951]"
    }, {
      "left" : "MatchNameNode(String name",
      "right" : "MatchNameNode(String name",
      "info" : "MethodDeclaration[76820-76877]:MethodDeclaration[76957-77014]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[76883-76999]:MethodDeclaration[77020-77136]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "TypeDeclaration[77007-77294]:TypeDeclaration[77144-77431]"
    }, {
      "left" : "final int type;",
      "right" : "final int type;",
      "info" : "FieldDeclaration[77139-77154]:FieldDeclaration[77276-77291]"
    }, {
      "left" : "MatchNodeType(int type",
      "right" : "MatchNodeType(int type",
      "info" : "MethodDeclaration[77160-77214]:MethodDeclaration[77297-77351]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[77220-77290]:MethodDeclaration[77357-77427]"
    }, {
      "left" : "MatchDeclaration",
      "right" : "MatchDeclaration",
      "info" : "TypeDeclaration[77299-77541]:TypeDeclaration[77436-77678]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[77434-77537]:MethodDeclaration[77571-77674]"
    }, {
      "left" : "MatchNotFunction",
      "right" : "MatchNotFunction",
      "info" : "TypeDeclaration[77545-77750]:TypeDeclaration[77682-77887]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[77681-77746]:MethodDeclaration[77818-77883]"
    }, {
      "left" : "static final Predicate<Node> MATCH_NOT_FUNCTION = new MatchNotFunction();",
      "right" : "static final Predicate<Node> MATCH_NOT_FUNCTION = new MatchNotFunction();",
      "info" : "FieldDeclaration[77754-77827]:FieldDeclaration[77891-77964]"
    }, {
      "left" : "MatchShallowStatement",
      "right" : "MatchShallowStatement",
      "info" : "TypeDeclaration[77831-78238]:TypeDeclaration[77968-78375]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[77986-78234]:MethodDeclaration[78123-78371]"
    }, {
      "left" : "static int getNodeTypeReferenceCount(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "right" : "static int getNodeTypeReferenceCount(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[78242-78510]:MethodDeclaration[78379-78647]"
    }, {
      "left" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[78514-78825]:MethodDeclaration[78651-78962]"
    }, {
      "left" : "static boolean isNameReferenced(Node node, String name)",
      "right" : "static boolean isNameReferenced(Node node, String name)",
      "info" : "MethodDeclaration[78829-79037]:MethodDeclaration[78966-79174]"
    }, {
      "left" : "static int getNameReferenceCount(Node node, String name)",
      "right" : "static int getNameReferenceCount(Node node, String name)",
      "info" : "MethodDeclaration[79041-79288]:MethodDeclaration[79178-79425]"
    }, {
      "left" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[79292-79819]:MethodDeclaration[79429-79956]"
    }, {
      "left" : "static int getCount(\n      Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred)",
      "right" : "static int getCount(\n      Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[79823-80304]:MethodDeclaration[79960-80441]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "TypeDeclaration[80308-80440]:TypeDeclaration[80445-80577]"
    }, {
      "left" : "void visit(Node node);",
      "right" : "void visit(Node node);",
      "info" : "MethodDeclaration[80414-80436]:MethodDeclaration[80551-80573]"
    }, {
      "left" : "static void visitPreOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPreOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[80444-80898]:MethodDeclaration[80581-81035]"
    }, {
      "left" : "static void visitPostOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPostOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[80902-81359]:MethodDeclaration[81039-81496]"
    }, {
      "left" : "static boolean hasFinally(Node n)",
      "right" : "static boolean hasFinally(Node n)",
      "info" : "MethodDeclaration[81363-81561]:MethodDeclaration[81500-81698]"
    }, {
      "left" : "static Node getCatchBlock(Node n)",
      "right" : "static Node getCatchBlock(Node n)",
      "info" : "MethodDeclaration[81565-81793]:MethodDeclaration[81702-81930]"
    }, {
      "left" : "static boolean hasCatchHandler(Node n)",
      "right" : "static boolean hasCatchHandler(Node n)",
      "info" : "MethodDeclaration[81797-82084]:MethodDeclaration[81934-82221]"
    }, {
      "left" : "public static Node getFunctionParameters(Node fnNode)",
      "right" : "public static Node getFunctionParameters(Node fnNode)",
      "info" : "MethodDeclaration[82088-82433]:MethodDeclaration[82225-82570]"
    }, {
      "left" : "static boolean isConstantName(Node node)",
      "right" : "static boolean isConstantName(Node node)",
      "info" : "MethodDeclaration[82437-83240]:MethodDeclaration[82574-83377]"
    }, {
      "left" : "static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent)",
      "right" : "static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent)",
      "info" : "MethodDeclaration[83244-83733]:MethodDeclaration[83381-83870]"
    }, {
      "left" : "static JSDocInfo getInfoForNameNode(Node nameNode)",
      "right" : "static JSDocInfo getInfoForNameNode(Node nameNode)",
      "info" : "MethodDeclaration[83737-84262]:MethodDeclaration[83874-84399]"
    }, {
      "left" : "public static JSDocInfo getFunctionJSDocInfo(Node n)",
      "right" : "public static JSDocInfo getFunctionJSDocInfo(Node n)",
      "info" : "MethodDeclaration[84266-84906]:MethodDeclaration[84403-85043]"
    }, {
      "left" : "public static String getSourceName(Node n)",
      "right" : "public static String getSourceName(Node n)",
      "info" : "MethodDeclaration[84910-85234]:MethodDeclaration[85047-85371]"
    }, {
      "left" : "static Node newCallNode(Node callTarget, Node... parameters)",
      "right" : "static Node newCallNode(Node callTarget, Node... parameters)",
      "info" : "MethodDeclaration[85238-85633]:MethodDeclaration[85375-85770]"
    }, {
      "left" : "static boolean evaluatesToLocalValue(Node value)",
      "right" : "static boolean evaluatesToLocalValue(Node value)",
      "info" : "MethodDeclaration[85637-85868]:MethodDeclaration[85774-86005]"
    }, {
      "left" : "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals)",
      "right" : "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals)",
      "info" : "MethodDeclaration[85872-88561]:MethodDeclaration[86009-88698]"
    }, {
      "left" : "private static Node getNthSibling(Node first, int index)",
      "right" : "private static Node getNthSibling(Node first, int index)",
      "info" : "MethodDeclaration[88565-88963]:MethodDeclaration[88702-89100]"
    }, {
      "left" : "static Node getArgumentForFunction(Node function, int index)",
      "right" : "static Node getArgumentForFunction(Node function, int index)",
      "info" : "MethodDeclaration[88967-89288]:MethodDeclaration[89104-89425]"
    }, {
      "left" : "static Node getArgumentForCallOrNew(Node call, int index)",
      "right" : "static Node getArgumentForCallOrNew(Node call, int index)",
      "info" : "MethodDeclaration[89292-89599]:MethodDeclaration[89429-89736]"
    }, {
      "left" : "private static boolean isToStringMethodCall(Node call)",
      "right" : "private static boolean isToStringMethodCall(Node call)",
      "info" : "MethodDeclaration[89603-89876]:MethodDeclaration[89740-90013]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2176-2178]:Block[2176-2178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2515-3763]:Block[2515-3821]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n\n      default:\n        return getPureBooleanValue(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      default:\n        return getPureBooleanValue(n);\n    }",
      "info" : "SwitchStatement[2521-3759]:SwitchStatement[2521-3817]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[2550-2568]:SwitchCase[2550-2568]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[2575-2592]:SwitchCase[2575-2592]"
    }, {
      "left" : "return getImpureBooleanValue(n.getLastChild());",
      "right" : "return getImpureBooleanValue(n.getLastChild());",
      "info" : "ReturnStatement[2668-2715]:ReturnStatement[2668-2715]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[2722-2737]:SwitchCase[2722-2737]"
    }, {
      "left" : "TernaryValue value = getImpureBooleanValue(n.getLastChild());",
      "right" : "TernaryValue value = getImpureBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[2746-2807]:VariableDeclarationStatement[2746-2807]"
    }, {
      "left" : "return value.not();",
      "right" : "return value.not();",
      "info" : "ReturnStatement[2816-2835]:ReturnStatement[2816-2835]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[2842-2857]:SwitchCase[2842-2857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2858-3033]:Block[2858-3033]"
    }, {
      "left" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[2868-2928]:VariableDeclarationStatement[2868-2928]"
    }, {
      "left" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
      "right" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[2937-2996]:VariableDeclarationStatement[2937-2996]"
    }, {
      "left" : "return lhs.and(rhs);",
      "right" : "return lhs.and(rhs);",
      "info" : "ReturnStatement[3005-3025]:ReturnStatement[3005-3025]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[3040-3054]:SwitchCase[3040-3054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3056-3230]:Block[3056-3230]"
    }, {
      "left" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[3066-3126]:VariableDeclarationStatement[3066-3126]"
    }, {
      "left" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
      "right" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[3135-3194]:VariableDeclarationStatement[3135-3194]"
    }, {
      "left" : "return lhs.or(rhs);",
      "right" : "return lhs.or(rhs);",
      "info" : "ReturnStatement[3203-3222]:ReturnStatement[3203-3222]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[3237-3253]:SwitchCase[3237-3253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3255-3575]:Block[3255-3575]"
    }, {
      "left" : "TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());",
      "right" : "TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());",
      "info" : "VariableDeclarationStatement[3265-3354]:VariableDeclarationStatement[3265-3354]"
    }, {
      "left" : "TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());",
      "right" : "TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[3363-3429]:VariableDeclarationStatement[3363-3429]"
    }, {
      "left" : "if (trueValue.equals(falseValue))",
      "right" : "if (trueValue.equals(falseValue))",
      "info" : "IfStatement[3438-3567]:IfStatement[3438-3567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3472-3511]:Block[3472-3511]"
    }, {
      "left" : "return trueValue;",
      "right" : "return trueValue;",
      "info" : "ReturnStatement[3484-3501]:ReturnStatement[3484-3501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3517-3567]:Block[3517-3567]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[3529-3557]:ReturnStatement[3529-3557]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[3582-3602]:SwitchCase[3582-3602]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[3609-3630]:SwitchCase[3609-3630]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[3672-3697]:ReturnStatement[3672-3697]"
    }, {
      "left" : "default:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[3706-3714]:SwitchCase[3705-3721]"
    }, {
      "left" : "return getPureBooleanValue(n);",
      "right" : "return getPureBooleanValue(n);",
      "info" : "ReturnStatement[3723-3753]:ReturnStatement[3781-3811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4121-5264]:Block[4179-5401]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n        return TernaryValue.FALSE;\n\n      case Token.VOID:\n          return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n        return TernaryValue.FALSE;\n\n      case Token.VOID:\n        if (!mayHaveSideEffects(n.getFirstChild())) {\n          return TernaryValue.FALSE;\n        }\n        break;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n    }",
      "info" : "SwitchStatement[4127-5226]:SwitchStatement[4185-5363]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[4156-4174]:SwitchCase[4214-4232]"
    }, {
      "left" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
      "right" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
      "info" : "ReturnStatement[4183-4242]:ReturnStatement[4241-4300]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[4250-4268]:SwitchCase[4308-4326]"
    }, {
      "left" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
      "right" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
      "info" : "ReturnStatement[4277-4328]:ReturnStatement[4335-4386]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[4336-4351]:SwitchCase[4394-4409]"
    }, {
      "left" : "return getPureBooleanValue(n.getLastChild()).not();",
      "right" : "return getPureBooleanValue(n.getLastChild()).not();",
      "info" : "ReturnStatement[4360-4411]:ReturnStatement[4418-4469]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[4419-4435]:SwitchCase[4477-4493]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[4442-4459]:SwitchCase[4500-4517]"
    }, {
      "left" : "return TernaryValue.FALSE;",
      "right" : "return TernaryValue.FALSE;",
      "info" : "ReturnStatement[4468-4494]:ReturnStatement[4526-4552]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[4502-4518]:SwitchCase[4560-4576]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[4563-4579]:SwitchCase[4700-4716]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[4588-4616]:VariableDeclarationStatement[4725-4753]"
    }, {
      "left" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "right" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "info" : "IfStatement[4625-4967]:IfStatement[4762-5104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4689-4885]:Block[4826-5022]"
    }, {
      "left" : "return TernaryValue.FALSE;",
      "right" : "return TernaryValue.FALSE;",
      "info" : "ReturnStatement[4849-4875]:ReturnStatement[4986-5012]"
    }, {
      "left" : "if (\"Infinity\".equals(name))",
      "right" : "if (\"Infinity\".equals(name))",
      "info" : "IfStatement[4891-4967]:IfStatement[5028-5104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4920-4967]:Block[5057-5104]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[4932-4957]:ReturnStatement[5069-5094]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4976-4982]:BreakStatement[4686-4692]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[4990-5006]:SwitchCase[5127-5143]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[5013-5031]:SwitchCase[5150-5168]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[5040-5065]:ReturnStatement[5177-5202]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[5073-5093]:SwitchCase[5210-5230]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[5100-5121]:SwitchCase[5237-5258]"
    }, {
      "left" : "if (!mayHaveSideEffects(n))",
      "right" : "if (!mayHaveSideEffects(n))",
      "info" : "IfStatement[5130-5205]:IfStatement[5267-5342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5158-5205]:Block[5295-5342]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[5170-5195]:ReturnStatement[5307-5332]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5214-5220]:BreakStatement[5351-5357]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[5232-5260]:ReturnStatement[5369-5397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5525-6499]:Block[5662-6636]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        return getStringValue(n.getDouble());\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        return arrayToString(n);\n\n      case Token.OBJECTLIT:\n        return \"[object Object]\";\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        return getStringValue(n.getDouble());\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        return arrayToString(n);\n\n      case Token.OBJECTLIT:\n        return \"[object Object]\";\n    }",
      "info" : "SwitchStatement[5574-6478]:SwitchStatement[5711-6615]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[5603-5621]:SwitchCase[5740-5758]"
    }, {
      "left" : "return n.getString();",
      "right" : "return n.getString();",
      "info" : "ReturnStatement[5630-5651]:ReturnStatement[5767-5788]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[5659-5675]:SwitchCase[5796-5812]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[5684-5712]:VariableDeclarationStatement[5821-5849]"
    }, {
      "left" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
      "right" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
      "info" : "IfStatement[5721-5858]:IfStatement[5858-5995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5824-5858]:Block[5961-5995]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[5836-5848]:ReturnStatement[5973-5985]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5867-5873]:BreakStatement[6004-6010]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[5881-5899]:SwitchCase[6018-6036]"
    }, {
      "left" : "return getStringValue(n.getDouble());",
      "right" : "return getStringValue(n.getDouble());",
      "info" : "ReturnStatement[5908-5945]:ReturnStatement[6045-6082]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[5953-5970]:SwitchCase[6090-6107]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[5977-5993]:SwitchCase[6114-6130]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[6000-6016]:SwitchCase[6137-6153]"
    }, {
      "left" : "return Node.tokenToName(n.getType());",
      "right" : "return Node.tokenToName(n.getType());",
      "info" : "ReturnStatement[6025-6062]:ReturnStatement[6162-6199]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[6070-6086]:SwitchCase[6207-6223]"
    }, {
      "left" : "return \"undefined\";",
      "right" : "return \"undefined\";",
      "info" : "ReturnStatement[6095-6114]:ReturnStatement[6232-6251]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[6122-6137]:SwitchCase[6259-6274]"
    }, {
      "left" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[6146-6206]:VariableDeclarationStatement[6283-6343]"
    }, {
      "left" : "if (child != TernaryValue.UNKNOWN)",
      "right" : "if (child != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[6215-6333]:IfStatement[6352-6470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6250-6333]:Block[6387-6470]"
    }, {
      "left" : "return child.toBoolean(true) ? \"false\" : \"true\";",
      "right" : "return child.toBoolean(true) ? \"false\" : \"true\";",
      "info" : "ReturnStatement[6262-6310]:ReturnStatement[6399-6447]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6342-6348]:BreakStatement[6479-6485]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[6356-6376]:SwitchCase[6493-6513]"
    }, {
      "left" : "return arrayToString(n);",
      "right" : "return arrayToString(n);",
      "info" : "ReturnStatement[6385-6409]:ReturnStatement[6522-6546]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[6417-6438]:SwitchCase[6554-6575]"
    }, {
      "left" : "return \"[object Object]\";",
      "right" : "return \"[object Object]\";",
      "info" : "ReturnStatement[6447-6472]:ReturnStatement[6584-6609]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6483-6495]:ReturnStatement[6620-6632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6546-6747]:Block[6683-6884]"
    }, {
      "left" : "long longValue = (long) value;",
      "right" : "long longValue = (long) value;",
      "info" : "VariableDeclarationStatement[6552-6582]:VariableDeclarationStatement[6689-6719]"
    }, {
      "left" : "if (longValue == value)",
      "right" : "if (longValue == value)",
      "info" : "IfStatement[6623-6743]:IfStatement[6760-6880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6647-6693]:Block[6784-6830]"
    }, {
      "left" : "return Long.toString(longValue);",
      "right" : "return Long.toString(longValue);",
      "info" : "ReturnStatement[6655-6687]:ReturnStatement[6792-6824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6699-6743]:Block[6836-6880]"
    }, {
      "left" : "return Double.toString(value);",
      "right" : "return Double.toString(value);",
      "info" : "ReturnStatement[6707-6737]:ReturnStatement[6844-6874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7176-7288]:Block[7313-7425]"
    }, {
      "left" : "return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY)\n        ? \"\" : getStringValue(n);",
      "right" : "return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY)\n        ? \"\" : getStringValue(n);",
      "info" : "ReturnStatement[7182-7284]:ReturnStatement[7319-7421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7334-7798]:Block[7471-7935]"
    }, {
      "left" : "Node first = literal.getFirstChild();",
      "right" : "Node first = literal.getFirstChild();",
      "info" : "VariableDeclarationStatement[7340-7377]:VariableDeclarationStatement[7477-7514]"
    }, {
      "left" : "StringBuilder result = new StringBuilder();",
      "right" : "StringBuilder result = new StringBuilder();",
      "info" : "VariableDeclarationStatement[7382-7425]:VariableDeclarationStatement[7519-7562]"
    }, {
      "left" : "int nextSlot = 0;",
      "right" : "int nextSlot = 0;",
      "info" : "VariableDeclarationStatement[7430-7447]:VariableDeclarationStatement[7567-7584]"
    }, {
      "left" : "int nextSkipSlot = 0;",
      "right" : "int nextSkipSlot = 0;",
      "info" : "VariableDeclarationStatement[7452-7473]:VariableDeclarationStatement[7589-7610]"
    }, {
      "left" : "for (Node n = first; n != null; n = n.getNext())",
      "right" : "for (Node n = first; n != null; n = n.getNext())",
      "info" : "ForStatement[7478-7764]:ForStatement[7615-7901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7527-7764]:Block[7664-7901]"
    }, {
      "left" : "String childValue = getArrayElementStringValue(n);",
      "right" : "String childValue = getArrayElementStringValue(n);",
      "info" : "VariableDeclarationStatement[7535-7585]:VariableDeclarationStatement[7672-7722]"
    }, {
      "left" : "if (childValue == null)",
      "right" : "if (childValue == null)",
      "info" : "IfStatement[7592-7646]:IfStatement[7729-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7616-7646]:Block[7753-7783]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7626-7638]:ReturnStatement[7763-7775]"
    }, {
      "left" : "if (n != first)",
      "right" : "if (n != first)",
      "info" : "IfStatement[7653-7706]:IfStatement[7790-7843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7669-7706]:Block[7806-7843]"
    }, {
      "left" : "result.append(',');",
      "right" : "result.append(',');",
      "info" : "ExpressionStatement[7679-7698]:ExpressionStatement[7816-7835]"
    }, {
      "left" : "result.append(childValue);",
      "right" : "result.append(childValue);",
      "info" : "ExpressionStatement[7713-7739]:ExpressionStatement[7850-7876]"
    }, {
      "left" : "nextSlot++;",
      "right" : "nextSlot++;",
      "info" : "ExpressionStatement[7747-7758]:ExpressionStatement[7884-7895]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[7769-7794]:ReturnStatement[7906-7931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8059-9515]:Block[8196-9652]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        if (mayHaveSideEffects(n.getFirstChild())) {\n          return null;\n        } else {\n          return Double.NaN;\n        }\n\n      case Token.NAME:\n        // Check for known constants\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NEG:\n        if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\")) {\n          return Double.NEGATIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n        }\n        break;\n\n      case Token.STRING:\n        return getStringNumberValue(n.getString());\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        String value = getStringValue(n);\n        return value != null ? getStringNumberValue(value) : null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        if (mayHaveSideEffects(n.getFirstChild())) {\n          return null;\n        } else {\n          return Double.NaN;\n        }\n\n      case Token.NAME:\n        // Check for known constants\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NEG:\n        if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\")) {\n          return Double.NEGATIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n        }\n        break;\n\n      case Token.STRING:\n        return getStringNumberValue(n.getString());\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        String value = getStringValue(n);\n        return value != null ? getStringNumberValue(value) : null;\n    }",
      "info" : "SwitchStatement[8065-9493]:SwitchStatement[8202-9630]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[8094-8110]:SwitchCase[8231-8247]"
    }, {
      "left" : "return 1.0;",
      "right" : "return 1.0;",
      "info" : "ReturnStatement[8119-8130]:ReturnStatement[8256-8267]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[8138-8155]:SwitchCase[8275-8292]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[8162-8178]:SwitchCase[8299-8315]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[8187-8198]:ReturnStatement[8324-8335]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[8206-8224]:SwitchCase[8343-8361]"
    }, {
      "left" : "return n.getDouble();",
      "right" : "return n.getDouble();",
      "info" : "ReturnStatement[8233-8254]:ReturnStatement[8370-8391]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[8262-8278]:SwitchCase[8399-8415]"
    }, {
      "left" : "if (mayHaveSideEffects(n.getFirstChild()))",
      "right" : "if (mayHaveSideEffects(n.getFirstChild()))",
      "info" : "IfStatement[8287-8410]:IfStatement[8424-8547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8330-8364]:Block[8467-8501]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8342-8354]:ReturnStatement[8479-8491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8370-8410]:Block[8507-8547]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[8382-8400]:ReturnStatement[8519-8537]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[8418-8434]:SwitchCase[8555-8571]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[8480-8508]:VariableDeclarationStatement[8617-8645]"
    }, {
      "left" : "if (name.equals(\"undefined\"))",
      "right" : "if (name.equals(\"undefined\"))",
      "info" : "IfStatement[8517-8587]:IfStatement[8654-8724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8547-8587]:Block[8684-8724]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[8559-8577]:ReturnStatement[8696-8714]"
    }, {
      "left" : "if (name.equals(\"NaN\"))",
      "right" : "if (name.equals(\"NaN\"))",
      "info" : "IfStatement[8596-8660]:IfStatement[8733-8797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8620-8660]:Block[8757-8797]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[8632-8650]:ReturnStatement[8769-8787]"
    }, {
      "left" : "if (name.equals(\"Infinity\"))",
      "right" : "if (name.equals(\"Infinity\"))",
      "info" : "IfStatement[8669-8752]:IfStatement[8806-8889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8698-8752]:Block[8835-8889]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[8710-8742]:ReturnStatement[8847-8879]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8761-8773]:ReturnStatement[8898-8910]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[8781-8796]:SwitchCase[8918-8933]"
    }, {
      "left" : "if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\"))",
      "right" : "if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\"))",
      "info" : "IfStatement[8805-8996]:IfStatement[8942-9133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8942-8996]:Block[9079-9133]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[8954-8986]:ReturnStatement[9091-9123]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9005-9017]:ReturnStatement[9142-9154]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[9025-9040]:SwitchCase[9162-9177]"
    }, {
      "left" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[9049-9109]:VariableDeclarationStatement[9186-9246]"
    }, {
      "left" : "if (child != TernaryValue.UNKNOWN)",
      "right" : "if (child != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[9118-9229]:IfStatement[9255-9366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9153-9229]:Block[9290-9366]"
    }, {
      "left" : "return child.toBoolean(true) ? 0.0 : 1.0;",
      "right" : "return child.toBoolean(true) ? 0.0 : 1.0;",
      "info" : "ReturnStatement[9165-9206]:ReturnStatement[9302-9343]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9238-9244]:BreakStatement[9375-9381]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[9252-9270]:SwitchCase[9389-9407]"
    }, {
      "left" : "return getStringNumberValue(n.getString());",
      "right" : "return getStringNumberValue(n.getString());",
      "info" : "ReturnStatement[9279-9322]:ReturnStatement[9416-9459]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[9330-9350]:SwitchCase[9467-9487]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[9357-9378]:SwitchCase[9494-9515]"
    }, {
      "left" : "String value = getStringValue(n);",
      "right" : "String value = getStringValue(n);",
      "info" : "VariableDeclarationStatement[9387-9420]:VariableDeclarationStatement[9524-9557]"
    }, {
      "left" : "return value != null ? getStringNumberValue(value) : null;",
      "right" : "return value != null ? getStringNumberValue(value) : null;",
      "info" : "ReturnStatement[9429-9487]:ReturnStatement[9566-9624]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9499-9511]:ReturnStatement[9636-9648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9574-10789]:Block[9711-10926]"
    }, {
      "left" : "if (rawJsString.contains(\"\\u000b\"))",
      "right" : "if (rawJsString.contains(\"\\u000b\"))",
      "info" : "IfStatement[9580-9689]:IfStatement[9717-9826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9616-9689]:Block[9753-9826]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9671-9683]:ReturnStatement[9808-9820]"
    }, {
      "left" : "String s = trimJsWhiteSpace(rawJsString);",
      "right" : "String s = trimJsWhiteSpace(rawJsString);",
      "info" : "VariableDeclarationStatement[9695-9736]:VariableDeclarationStatement[9832-9873]"
    }, {
      "left" : "if (s.length() == 0)",
      "right" : "if (s.length() == 0)",
      "info" : "IfStatement[9782-9828]:IfStatement[9919-9965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9803-9828]:Block[9940-9965]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[9811-9822]:ReturnStatement[9948-9959]"
    }, {
      "left" : "if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))",
      "right" : "if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))",
      "info" : "IfStatement[9834-10144]:IfStatement[9971-10281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9938-10144]:Block[10075-10281]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9987-10138]:TryStatement[10124-10275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9991-10069]:Block[10128-10206]"
    }, {
      "left" : "return Double.valueOf(Integer.parseInt(s.substring(2), 16));",
      "right" : "return Double.valueOf(Integer.parseInt(s.substring(2), 16));",
      "info" : "ReturnStatement[10001-10061]:ReturnStatement[10138-10198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10102-10138]:Block[10239-10275]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[10112-10130]:ReturnStatement[10249-10267]"
    }, {
      "left" : "if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))",
      "right" : "if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))",
      "info" : "IfStatement[10150-10398]:IfStatement[10287-10535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10308-10398]:Block[10445-10535]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10380-10392]:ReturnStatement[10517-10529]"
    }, {
      "left" : "if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\"))",
      "right" : "if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\"))",
      "info" : "IfStatement[10549-10667]:IfStatement[10686-10804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10641-10667]:Block[10778-10804]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10649-10661]:ReturnStatement[10786-10798]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10673-10785]:TryStatement[10810-10922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10677-10720]:Block[10814-10857]"
    }, {
      "left" : "return Double.parseDouble(s);",
      "right" : "return Double.parseDouble(s);",
      "info" : "ReturnStatement[10685-10714]:ReturnStatement[10822-10851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10753-10785]:Block[10890-10922]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[10761-10779]:ReturnStatement[10898-10916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10834-11148]:Block[10971-11285]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[10840-10854]:VariableDeclarationStatement[10977-10991]"
    }, {
      "left" : "int end = s.length();",
      "right" : "int end = s.length();",
      "info" : "VariableDeclarationStatement[10859-10880]:VariableDeclarationStatement[10996-11017]"
    }, {
      "left" : "while (end > 0\n        && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE)",
      "right" : "while (end > 0\n        && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE)",
      "info" : "WhileStatement[10885-10992]:WhileStatement[11022-11129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10972-10992]:Block[11109-11129]"
    }, {
      "left" : "end--;",
      "right" : "end--;",
      "info" : "ExpressionStatement[10980-10986]:ExpressionStatement[11117-11123]"
    }, {
      "left" : "while (start < end\n        && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE)",
      "right" : "while (start < end\n        && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE)",
      "info" : "WhileStatement[10997-11108]:WhileStatement[11134-11245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11086-11108]:Block[11223-11245]"
    }, {
      "left" : "start++;",
      "right" : "start++;",
      "info" : "ExpressionStatement[11094-11102]:ExpressionStatement[11231-11239]"
    }, {
      "left" : "return s.substring(start, end);",
      "right" : "return s.substring(start, end);",
      "info" : "ReturnStatement[11113-11144]:ReturnStatement[11250-11281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11250-11802]:Block[11387-11939]"
    }, {
      "left" : "switch (c) {\n      case '\\u000B': // <VT>\n        return TernaryValue.UNKNOWN;  // IE says \"no\", EcmaScript says \"yes\"\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return TernaryValue.TRUE;\n      default:\n        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }",
      "right" : "switch (c) {\n      case '\\u000B': // <VT>\n        return TernaryValue.UNKNOWN;  // IE says \"no\", EcmaScript says \"yes\"\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return TernaryValue.TRUE;\n      default:\n        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }",
      "info" : "SwitchStatement[11256-11798]:SwitchStatement[11393-11935]"
    }, {
      "left" : "case '\\u000B':",
      "right" : "case '\\u000B':",
      "info" : "SwitchCase[11275-11289]:SwitchCase[11412-11426]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[11306-11334]:ReturnStatement[11443-11471]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[11381-11390]:SwitchCase[11518-11527]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[11405-11415]:SwitchCase[11542-11552]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[11430-11440]:SwitchCase[11567-11577]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[11455-11465]:SwitchCase[11592-11602]"
    }, {
      "left" : "case '\\u00A0':",
      "right" : "case '\\u00A0':",
      "info" : "SwitchCase[11481-11495]:SwitchCase[11618-11632]"
    }, {
      "left" : "case '\\u000C':",
      "right" : "case '\\u000C':",
      "info" : "SwitchCase[11512-11526]:SwitchCase[11649-11663]"
    }, {
      "left" : "case '\\u2028':",
      "right" : "case '\\u2028':",
      "info" : "SwitchCase[11541-11555]:SwitchCase[11678-11692]"
    }, {
      "left" : "case '\\u2029':",
      "right" : "case '\\u2029':",
      "info" : "SwitchCase[11570-11584]:SwitchCase[11707-11721]"
    }, {
      "left" : "case '\\uFEFF':",
      "right" : "case '\\uFEFF':",
      "info" : "SwitchCase[11599-11613]:SwitchCase[11736-11750]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[11631-11656]:ReturnStatement[11768-11793]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11663-11671]:SwitchCase[11800-11808]"
    }, {
      "left" : "return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;",
      "right" : "return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;",
      "info" : "ReturnStatement[11680-11792]:ReturnStatement[11817-11929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12457-13010]:Block[12594-13147]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[12463-12491]:VariableDeclarationStatement[12600-12628]"
    }, {
      "left" : "String name = n.getFirstChild().getString();",
      "right" : "String name = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[12496-12540]:VariableDeclarationStatement[12633-12677]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
      "info" : "SwitchStatement[12545-13006]:SwitchStatement[12682-13143]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[12579-12595]:SwitchCase[12716-12732]"
    }, {
      "left" : "return parent.getString();",
      "right" : "return parent.getString();",
      "info" : "ReturnStatement[12685-12711]:ReturnStatement[12822-12848]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[12719-12737]:SwitchCase[12856-12874]"
    }, {
      "left" : "return parent.getFirstChild().getQualifiedName();",
      "right" : "return parent.getFirstChild().getQualifiedName();",
      "info" : "ReturnStatement[12839-12888]:ReturnStatement[12976-13025]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12896-12904]:SwitchCase[13033-13041]"
    }, {
      "left" : "return name != null && name.length() != 0 ? name : null;",
      "right" : "return name != null && name.length() != 0 ? name : null;",
      "info" : "ReturnStatement[12944-13000]:ReturnStatement[13081-13137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13667-14117]:Block[13804-14254]"
    }, {
      "left" : "String name = getFunctionName(n);",
      "right" : "String name = getFunctionName(n);",
      "info" : "VariableDeclarationStatement[13673-13706]:VariableDeclarationStatement[13810-13843]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[13711-13755]:IfStatement[13848-13892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13729-13755]:Block[13866-13892]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[13737-13749]:ReturnStatement[13874-13886]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[13812-13840]:VariableDeclarationStatement[13949-13977]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.SET:\n      case Token.GET:\n      case Token.STRING:\n        // Return the name of the literal's key.\n        return parent.getString();\n      case Token.NUMBER:\n        return getStringValue(parent);\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.SET:\n      case Token.GET:\n      case Token.STRING:\n        // Return the name of the literal's key.\n        return parent.getString();\n      case Token.NUMBER:\n        return getStringValue(parent);\n    }",
      "info" : "SwitchStatement[13845-14095]:SwitchStatement[13982-14232]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[13879-13894]:SwitchCase[14016-14031]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[13901-13916]:SwitchCase[14038-14053]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[13923-13941]:SwitchCase[14060-14078]"
    }, {
      "left" : "return parent.getString();",
      "right" : "return parent.getString();",
      "info" : "ReturnStatement[13999-14025]:ReturnStatement[14136-14162]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[14032-14050]:SwitchCase[14169-14187]"
    }, {
      "left" : "return getStringValue(parent);",
      "right" : "return getStringValue(parent);",
      "info" : "ReturnStatement[14059-14089]:ReturnStatement[14196-14226]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14101-14113]:ReturnStatement[14238-14250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14223-14910]:Block[14360-15047]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "info" : "SwitchStatement[14229-14887]:SwitchStatement[14366-15024]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[14258-14276]:SwitchCase[14395-14413]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[14283-14301]:SwitchCase[14420-14438]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[14308-14324]:SwitchCase[14445-14461]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[14331-14347]:SwitchCase[14468-14484]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[14354-14371]:SwitchCase[14491-14508]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14380-14392]:ReturnStatement[14517-14529]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[14399-14414]:SwitchCase[14536-14551]"
    }, {
      "left" : "return isImmutableValue(n.getFirstChild());",
      "right" : "return isImmutableValue(n.getFirstChild());",
      "info" : "ReturnStatement[14423-14466]:ReturnStatement[14560-14603]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[14473-14489]:SwitchCase[14610-14626]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[14496-14511]:SwitchCase[14633-14648]"
    }, {
      "left" : "return isImmutableValue(n.getFirstChild());",
      "right" : "return isImmutableValue(n.getFirstChild());",
      "info" : "ReturnStatement[14520-14563]:ReturnStatement[14657-14700]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[14570-14586]:SwitchCase[14707-14723]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[14595-14623]:VariableDeclarationStatement[14732-14760]"
    }, {
      "left" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "right" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "info" : "ReturnStatement[14776-14881]:ReturnStatement[14913-15018]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14893-14906]:ReturnStatement[15030-15043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15880-17004]:Block[16017-17141]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
      "info" : "SwitchStatement[15886-17000]:SwitchStatement[16023-17137]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[15915-15935]:SwitchCase[16052-16072]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[15944-16189]:ForStatement[16081-16326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16034-16189]:Block[16171-16326]"
    }, {
      "left" : "if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions))",
      "right" : "if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions))",
      "info" : "IfStatement[16046-16179]:IfStatement[16183-16316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16140-16179]:Block[16277-16316]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16154-16167]:ReturnStatement[16291-16304]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16198-16210]:ReturnStatement[16335-16347]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[16218-16236]:SwitchCase[16355-16373]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[16300-16497]:ForStatement[16437-16634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16390-16497]:Block[16527-16634]"
    }, {
      "left" : "if (!isLiteralValue(child, includeFunctions))",
      "right" : "if (!isLiteralValue(child, includeFunctions))",
      "info" : "IfStatement[16402-16487]:IfStatement[16539-16624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16448-16487]:Block[16585-16624]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16462-16475]:ReturnStatement[16599-16612]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16506-16518]:ReturnStatement[16643-16655]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[16526-16547]:SwitchCase[16663-16684]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[16609-16822]:ForStatement[16746-16959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16699-16822]:Block[16836-16959]"
    }, {
      "left" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
      "right" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
      "info" : "IfStatement[16711-16812]:IfStatement[16848-16949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16773-16812]:Block[16910-16949]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16787-16800]:ReturnStatement[16924-16937]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16831-16843]:ReturnStatement[16968-16980]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[16851-16871]:SwitchCase[16988-17008]"
    }, {
      "left" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
      "right" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
      "info" : "ReturnStatement[16880-16942]:ReturnStatement[17017-17079]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16950-16958]:SwitchCase[17087-17095]"
    }, {
      "left" : "return isImmutableValue(n);",
      "right" : "return isImmutableValue(n);",
      "info" : "ReturnStatement[16967-16994]:ReturnStatement[17104-17131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17260-18498]:Block[17397-18635]"
    }, {
      "left" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "right" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "info" : "SwitchStatement[17266-18476]:SwitchStatement[17403-18613]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[17297-17315]:SwitchCase[17434-17452]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[17322-17340]:SwitchCase[17459-17477]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[17347-17363]:SwitchCase[17484-17500]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[17370-17387]:SwitchCase[17507-17524]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17396-17408]:ReturnStatement[17533-17545]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[17485-17500]:SwitchCase[17622-17637]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[17507-17525]:SwitchCase[17644-17662]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[17532-17550]:SwitchCase[17669-17687]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[17557-17574]:SwitchCase[17694-17711]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[17581-17599]:SwitchCase[17718-17736]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[17606-17621]:SwitchCase[17743-17758]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[17628-17642]:SwitchCase[17765-17779]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[17649-17663]:SwitchCase[17786-17800]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[17670-17684]:SwitchCase[17807-17821]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[17691-17705]:SwitchCase[17828-17842]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[17712-17727]:SwitchCase[17849-17864]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[17734-17748]:SwitchCase[17871-17885]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[17755-17770]:SwitchCase[17892-17907]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[17777-17792]:SwitchCase[17914-17929]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[17799-17813]:SwitchCase[17936-17950]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[17820-17835]:SwitchCase[17957-17972]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[17842-17858]:SwitchCase[17979-17995]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[17865-17881]:SwitchCase[18002-18018]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[17888-17903]:SwitchCase[18025-18040]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[17910-17926]:SwitchCase[18047-18063]"
    }, {
      "left" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
      "right" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
      "info" : "ReturnStatement[17935-18054]:ReturnStatement[18072-18191]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[18121-18136]:SwitchCase[18258-18273]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[18143-18158]:SwitchCase[18280-18295]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[18165-18180]:SwitchCase[18302-18317]"
    }, {
      "left" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "right" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "info" : "ReturnStatement[18189-18245]:ReturnStatement[18326-18382]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[18322-18338]:SwitchCase[18459-18475]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[18345-18364]:SwitchCase[18482-18501]"
    }, {
      "left" : "if (val.isQualifiedName())",
      "right" : "if (val.isQualifiedName())",
      "info" : "IfStatement[18373-18470]:IfStatement[18510-18607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18400-18470]:Block[18537-18607]"
    }, {
      "left" : "return defines.contains(val.getQualifiedName());",
      "right" : "return defines.contains(val.getQualifiedName());",
      "info" : "ReturnStatement[18412-18460]:ReturnStatement[18549-18597]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18481-18494]:ReturnStatement[18618-18631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18644-18882]:Block[18781-19019]"
    }, {
      "left" : "if (block.getType() != Token.BLOCK)",
      "right" : "if (block.getType() != Token.BLOCK)",
      "info" : "IfStatement[18650-18713]:IfStatement[18787-18850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18686-18713]:Block[18823-18850]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18694-18707]:ReturnStatement[18831-18844]"
    }, {
      "left" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "right" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "info" : "ForStatement[18719-18861]:ForStatement[18856-18998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18784-18861]:Block[18921-18998]"
    }, {
      "left" : "if (n.getType() != Token.EMPTY)",
      "right" : "if (n.getType() != Token.EMPTY)",
      "info" : "IfStatement[18792-18855]:IfStatement[18929-18992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18824-18855]:Block[18961-18992]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18834-18847]:ReturnStatement[18971-18984]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18866-18878]:ReturnStatement[19003-19015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18926-18977]:Block[19063-19114]"
    }, {
      "left" : "return isSimpleOperatorType(n.getType());",
      "right" : "return isSimpleOperatorType(n.getType());",
      "info" : "ReturnStatement[18932-18973]:ReturnStatement[19069-19110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19201-19958]:Block[19338-20095]"
    }, {
      "left" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[19207-19954]:SwitchStatement[19344-20091]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[19229-19244]:SwitchCase[19366-19381]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[19251-19269]:SwitchCase[19388-19406]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[19276-19294]:SwitchCase[19413-19431]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[19301-19318]:SwitchCase[19438-19455]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[19325-19343]:SwitchCase[19462-19480]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[19350-19367]:SwitchCase[19487-19504]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[19374-19389]:SwitchCase[19511-19526]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[19396-19410]:SwitchCase[19533-19547]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[19417-19431]:SwitchCase[19554-19568]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[19438-19457]:SwitchCase[19575-19594]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[19464-19483]:SwitchCase[19601-19620]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[19490-19504]:SwitchCase[19627-19641]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[19511-19533]:SwitchCase[19648-19670]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[19540-19554]:SwitchCase[19677-19691]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[19561-19576]:SwitchCase[19698-19713]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[19583-19597]:SwitchCase[19720-19734]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[19604-19619]:SwitchCase[19741-19756]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[19626-19641]:SwitchCase[19763-19778]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[19648-19662]:SwitchCase[19785-19799]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[19669-19684]:SwitchCase[19806-19821]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[19691-19706]:SwitchCase[19828-19843]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[19713-19729]:SwitchCase[19850-19866]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[19736-19752]:SwitchCase[19873-19889]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[19759-19774]:SwitchCase[19896-19911]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[19781-19799]:SwitchCase[19918-19936]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[19806-19822]:SwitchCase[19943-19959]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[19829-19844]:SwitchCase[19966-19981]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[19851-19866]:SwitchCase[19988-20003]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[19873-19889]:SwitchCase[20010-20026]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19898-19910]:ReturnStatement[20035-20047]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19918-19926]:SwitchCase[20055-20063]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19935-19948]:ReturnStatement[20072-20085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20158-20268]:Block[20295-20405]"
    }, {
      "left" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
      "right" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
      "info" : "VariableDeclarationStatement[20164-20247]:VariableDeclarationStatement[20301-20384]"
    }, {
      "left" : "return expr;",
      "right" : "return expr;",
      "info" : "ReturnStatement[20252-20264]:ReturnStatement[20389-20401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20487-20535]:Block[20624-20672]"
    }, {
      "left" : "return mayEffectMutableState(n, null);",
      "right" : "return mayEffectMutableState(n, null);",
      "info" : "ReturnStatement[20493-20531]:ReturnStatement[20630-20668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20611-20673]:Block[20748-20810]"
    }, {
      "left" : "return checkForStateChangeHelper(n, true, compiler);",
      "right" : "return checkForStateChangeHelper(n, true, compiler);",
      "info" : "ReturnStatement[20617-20669]:ReturnStatement[20754-20806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20804-20849]:Block[20941-20986]"
    }, {
      "left" : "return mayHaveSideEffects(n, null);",
      "right" : "return mayHaveSideEffects(n, null);",
      "info" : "ReturnStatement[20810-20845]:ReturnStatement[20947-20982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20922-20985]:Block[21059-21122]"
    }, {
      "left" : "return checkForStateChangeHelper(n, false, compiler);",
      "right" : "return checkForStateChangeHelper(n, false, compiler);",
      "info" : "ReturnStatement[20928-20981]:ReturnStatement[21065-21118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21382-25830]:Block[21519-25967]"
    }, {
      "left" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
      "right" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
      "info" : "SwitchStatement[21486-25632]:SwitchStatement[21623-25769]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[21574-21589]:SwitchCase[21711-21726]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[21596-21613]:SwitchCase[21733-21750]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[21620-21643]:SwitchCase[21757-21780]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[21650-21666]:SwitchCase[21787-21803]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[21673-21687]:SwitchCase[21810-21824]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[21694-21708]:SwitchCase[21831-21845]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[21715-21729]:SwitchCase[21852-21866]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[21736-21754]:SwitchCase[21873-21891]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[21761-21775]:SwitchCase[21898-21912]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[21782-21798]:SwitchCase[21919-21935]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[21805-21821]:SwitchCase[21942-21958]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[21828-21845]:SwitchCase[21965-21982]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[21852-21868]:SwitchCase[21989-22005]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[21875-21893]:SwitchCase[22012-22030]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[21900-21918]:SwitchCase[22037-22055]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[21925-21940]:SwitchCase[22062-22077]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[21947-21964]:SwitchCase[22084-22101]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21973-21979]:BreakStatement[22110-22116]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[22034-22051]:SwitchCase[22171-22188]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22060-22072]:ReturnStatement[22197-22209]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[22080-22101]:SwitchCase[22217-22238]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[22110-22168]:IfStatement[22247-22305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22134-22168]:Block[22271-22305]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22146-22158]:ReturnStatement[22283-22295]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[22177-22397]:ForStatement[22314-22534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22238-22397]:Block[22375-22534]"
    }, {
      "left" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
      "info" : "IfStatement[22250-22387]:IfStatement[22387-22524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22349-22387]:Block[22486-22524]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22363-22375]:ReturnStatement[22500-22512]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22406-22419]:ReturnStatement[22543-22556]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[22427-22447]:SwitchCase[22564-22584]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[22454-22472]:SwitchCase[22591-22609]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[22481-22539]:IfStatement[22618-22676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22505-22539]:Block[22642-22676]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22517-22529]:ReturnStatement[22654-22666]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22548-22554]:BreakStatement[22685-22691]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[22562-22577]:SwitchCase[22699-22714]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[22627-22643]:SwitchCase[22764-22780]"
    }, {
      "left" : "if (n.getFirstChild() != null)",
      "right" : "if (n.getFirstChild() != null)",
      "info" : "IfStatement[22676-22741]:IfStatement[22813-22878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22707-22741]:Block[22844-22878]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22719-22731]:ReturnStatement[22856-22868]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22750-22756]:BreakStatement[22887-22893]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[22764-22784]:SwitchCase[22901-22921]"
    }, {
      "left" : "return checkForNewObjects || !isFunctionExpression(n);",
      "right" : "return checkForNewObjects || !isFunctionExpression(n);",
      "info" : "ReturnStatement[23017-23071]:ReturnStatement[23154-23208]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[23079-23094]:SwitchCase[23216-23231]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[23103-23161]:IfStatement[23240-23298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23127-23161]:Block[23264-23298]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23139-23151]:ReturnStatement[23276-23288]"
    }, {
      "left" : "if (!constructorCallHasSideEffects(n))",
      "right" : "if (!constructorCallHasSideEffects(n))",
      "info" : "IfStatement[23171-23332]:IfStatement[23308-23469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23210-23332]:Block[23347-23469]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23316-23322]:BreakStatement[23453-23459]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23341-23353]:ReturnStatement[23478-23490]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[23361-23377]:SwitchCase[23498-23514]"
    }, {
      "left" : "if (!functionCallHasSideEffects(n, compiler))",
      "right" : "if (!functionCallHasSideEffects(n, compiler))",
      "info" : "IfStatement[23491-23656]:IfStatement[23628-23793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23537-23656]:Block[23674-23793]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23640-23646]:BreakStatement[23777-23783]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23665-23677]:ReturnStatement[23802-23814]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[23685-23693]:SwitchCase[23822-23830]"
    }, {
      "left" : "if (isSimpleOperatorType(n.getType()))",
      "right" : "if (isSimpleOperatorType(n.getType()))",
      "info" : "IfStatement[23702-23769]:IfStatement[23839-23906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23741-23769]:Block[23878-23906]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23753-23759]:BreakStatement[23890-23896]"
    }, {
      "left" : "if (isAssignmentOp(n))",
      "right" : "if (isAssignmentOp(n))",
      "info" : "IfStatement[23779-25604]:IfStatement[23916-25741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23802-25604]:Block[23939-25741]"
    }, {
      "left" : "Node assignTarget = n.getFirstChild();",
      "right" : "Node assignTarget = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[23814-23852]:VariableDeclarationStatement[23951-23989]"
    }, {
      "left" : "if (isName(assignTarget))",
      "right" : "if (isName(assignTarget))",
      "info" : "IfStatement[23863-23927]:IfStatement[24000-24064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23889-23927]:Block[24026-24064]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23903-23915]:ReturnStatement[24040-24052]"
    }, {
      "left" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
      "info" : "IfStatement[24160-24407]:IfStatement[24297-24544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24369-24407]:Block[24506-24544]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24383-24395]:ReturnStatement[24520-24532]"
    }, {
      "left" : "if (isGet(assignTarget))",
      "right" : "if (isGet(assignTarget))",
      "info" : "IfStatement[24419-25594]:IfStatement[24556-25731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24444-25322]:Block[24581-25459]"
    }, {
      "left" : "Node current = assignTarget.getFirstChild();",
      "right" : "Node current = assignTarget.getFirstChild();",
      "info" : "VariableDeclarationStatement[24744-24788]:VariableDeclarationStatement[24881-24925]"
    }, {
      "left" : "if (evaluatesToLocalValue(current))",
      "right" : "if (evaluatesToLocalValue(current))",
      "info" : "IfStatement[24801-24880]:IfStatement[24938-25017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24837-24880]:Block[24974-25017]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24853-24866]:ReturnStatement[24990-25003]"
    }, {
      "left" : "while (isGet(current))",
      "right" : "while (isGet(current))",
      "info" : "WhileStatement[25171-25258]:WhileStatement[25308-25395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25194-25258]:Block[25331-25395]"
    }, {
      "left" : "current = current.getFirstChild();",
      "right" : "current = current.getFirstChild();",
      "info" : "ExpressionStatement[25210-25244]:ExpressionStatement[25347-25381]"
    }, {
      "left" : "return !isLiteralValue(current, true);",
      "right" : "return !isLiteralValue(current, true);",
      "info" : "ReturnStatement[25272-25310]:ReturnStatement[25409-25447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25328-25594]:Block[25465-25731]"
    }, {
      "left" : "return !isLiteralValue(assignTarget, true);",
      "right" : "return !isLiteralValue(assignTarget, true);",
      "info" : "ReturnStatement[25539-25582]:ReturnStatement[25676-25719]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25614-25626]:ReturnStatement[25751-25763]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[25638-25807]:ForStatement[25775-25944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25699-25807]:Block[25836-25944]"
    }, {
      "left" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
      "info" : "IfStatement[25707-25801]:IfStatement[25844-25938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25771-25801]:Block[25908-25938]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25781-25793]:ReturnStatement[25918-25930]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25813-25826]:ReturnStatement[25950-25963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26008-26071]:Block[26145-26208]"
    }, {
      "left" : "return constructorCallHasSideEffects(callNode, null);",
      "right" : "return constructorCallHasSideEffects(callNode, null);",
      "info" : "ReturnStatement[26014-26067]:ReturnStatement[26151-26204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26169-26613]:Block[26306-26750]"
    }, {
      "left" : "if (callNode.getType() != Token.NEW)",
      "right" : "if (callNode.getType() != Token.NEW)",
      "info" : "IfStatement[26175-26329]:IfStatement[26312-26466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26212-26329]:Block[26349-26466]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "right" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "info" : "ThrowStatement[26220-26323]:ThrowStatement[26357-26460]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[26335-26398]:IfStatement[26472-26535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26371-26398]:Block[26508-26535]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26379-26392]:ReturnStatement[26516-26529]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[26404-26445]:VariableDeclarationStatement[26541-26582]"
    }, {
      "left" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "right" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "info" : "IfStatement[26450-26591]:IfStatement[26587-26728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26564-26591]:Block[26701-26728]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26572-26585]:ReturnStatement[26709-26722]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26597-26609]:ReturnStatement[26734-26746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27514-27574]:Block[27651-27711]"
    }, {
      "left" : "return functionCallHasSideEffects(callNode, null);",
      "right" : "return functionCallHasSideEffects(callNode, null);",
      "info" : "ReturnStatement[27520-27570]:ReturnStatement[27657-27707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27924-29805]:Block[28061-29942]"
    }, {
      "left" : "if (callNode.getType() != Token.CALL)",
      "right" : "if (callNode.getType() != Token.CALL)",
      "info" : "IfStatement[27930-28086]:IfStatement[28067-28223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27968-28086]:Block[28105-28223]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "right" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "info" : "ThrowStatement[27976-28080]:ThrowStatement[28113-28217]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[28092-28155]:IfStatement[28229-28292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28128-28155]:Block[28265-28292]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28136-28149]:ReturnStatement[28273-28286]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[28161-28202]:VariableDeclarationStatement[28298-28339]"
    }, {
      "left" : "if (nameNode.getType() == Token.NAME)",
      "right" : "if (nameNode.getType() == Token.NAME)",
      "info" : "IfStatement[28256-29783]:IfStatement[28393-29920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28294-28439]:Block[28431-28576]"
    }, {
      "left" : "String name = nameNode.getString();",
      "right" : "String name = nameNode.getString();",
      "info" : "VariableDeclarationStatement[28302-28337]:VariableDeclarationStatement[28439-28474]"
    }, {
      "left" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
      "right" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
      "info" : "IfStatement[28344-28433]:IfStatement[28481-28570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28402-28433]:Block[28539-28570]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28412-28425]:ReturnStatement[28549-28562]"
    }, {
      "left" : "if (nameNode.getType() == Token.GETPROP)",
      "right" : "if (nameNode.getType() == Token.GETPROP)",
      "info" : "IfStatement[28445-29783]:IfStatement[28582-29920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28486-29783]:Block[28623-29920]"
    }, {
      "left" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
      "right" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
      "info" : "IfStatement[28494-28664]:IfStatement[28631-28801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28633-28664]:Block[28770-28801]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28643-28656]:ReturnStatement[28780-28793]"
    }, {
      "left" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
      "right" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
      "info" : "IfStatement[28672-28803]:IfStatement[28809-28940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28772-28803]:Block[28909-28940]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28782-28795]:ReturnStatement[28919-28932]"
    }, {
      "left" : "if (nameNode.getFirstChild().getType() == Token.NAME)",
      "right" : "if (nameNode.getFirstChild().getType() == Token.NAME)",
      "info" : "IfStatement[28987-29148]:IfStatement[29124-29285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29041-29148]:Block[29178-29285]"
    }, {
      "left" : "if (\"Math.floor\".equals(nameNode.getQualifiedName()))",
      "right" : "if (\"Math.floor\".equals(nameNode.getQualifiedName()))",
      "info" : "IfStatement[29051-29140]:IfStatement[29188-29277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29105-29140]:Block[29242-29277]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29117-29130]:ReturnStatement[29254-29267]"
    }, {
      "left" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
      "right" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
      "info" : "IfStatement[29156-29777]:IfStatement[29293-29914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29219-29777]:Block[29356-29914]"
    }, {
      "left" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
      "right" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
      "info" : "IfStatement[29229-29769]:IfStatement[29366-29906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29361-29396]:Block[29498-29533]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29373-29386]:ReturnStatement[29510-29523]"
    }, {
      "left" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
      "right" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
      "info" : "IfStatement[29402-29769]:IfStatement[29539-29906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29558-29769]:Block[29695-29906]"
    }, {
      "left" : "Node param = nameNode.getNext();",
      "right" : "Node param = nameNode.getNext();",
      "info" : "VariableDeclarationStatement[29570-29602]:VariableDeclarationStatement[29707-29739]"
    }, {
      "left" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
      "right" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
      "info" : "IfStatement[29613-29759]:IfStatement[29750-29896]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29746-29759]:ReturnStatement[29883-29896]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29789-29801]:ReturnStatement[29926-29938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29913-30042]:Block[30050-30179]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.CALL);",
      "right" : "Preconditions.checkState(n.getType() == Token.CALL);",
      "info" : "ExpressionStatement[29919-29971]:ExpressionStatement[30056-30108]"
    }, {
      "left" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
      "right" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
      "info" : "ReturnStatement[29976-30038]:ReturnStatement[30113-30175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30148-30248]:Block[30285-30385]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.NEW);",
      "right" : "Preconditions.checkState(n.getType() == Token.NEW);",
      "info" : "ExpressionStatement[30154-30205]:ExpressionStatement[30291-30342]"
    }, {
      "left" : "return n.isOnlyModifiesThisCall();",
      "right" : "return n.isOnlyModifiesThisCall();",
      "info" : "ReturnStatement[30210-30244]:ReturnStatement[30347-30381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30571-30624]:Block[30708-30761]"
    }, {
      "left" : "return nodeTypeMayHaveSideEffects(n, null);",
      "right" : "return nodeTypeMayHaveSideEffects(n, null);",
      "info" : "ReturnStatement[30577-30620]:ReturnStatement[30714-30757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30705-31216]:Block[30842-31353]"
    }, {
      "left" : "if (isAssignmentOp(n))",
      "right" : "if (isAssignmentOp(n))",
      "info" : "IfStatement[30711-30760]:IfStatement[30848-30897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30734-30760]:Block[30871-30897]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30742-30754]:ReturnStatement[30879-30891]"
    }, {
      "left" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "right" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[30766-31212]:SwitchStatement[30903-31349]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[30794-30813]:SwitchCase[30931-30950]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[30820-30835]:SwitchCase[30957-30972]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[30842-30857]:SwitchCase[30979-30994]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[30864-30881]:SwitchCase[31001-31018]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30890-30902]:ReturnStatement[31027-31039]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[30909-30925]:SwitchCase[31046-31062]"
    }, {
      "left" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
      "right" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
      "info" : "ReturnStatement[30934-30990]:ReturnStatement[31071-31127]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[30997-31012]:SwitchCase[31134-31149]"
    }, {
      "left" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
      "right" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
      "info" : "ReturnStatement[31021-31080]:ReturnStatement[31158-31217]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[31087-31103]:SwitchCase[31224-31240]"
    }, {
      "left" : "return n.hasChildren();",
      "right" : "return n.hasChildren();",
      "info" : "ReturnStatement[31146-31169]:ReturnStatement[31283-31306]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[31176-31184]:SwitchCase[31313-31321]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31193-31206]:ReturnStatement[31330-31343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31361-31460]:Block[31498-31597]"
    }, {
      "left" : "Set<String> emptySet = Collections.emptySet();",
      "right" : "Set<String> emptySet = Collections.emptySet();",
      "info" : "VariableDeclarationStatement[31367-31413]:VariableDeclarationStatement[31504-31550]"
    }, {
      "left" : "return canBeSideEffected(n, emptySet);",
      "right" : "return canBeSideEffected(n, emptySet);",
      "info" : "ReturnStatement[31418-31456]:ReturnStatement[31555-31593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31780-32799]:Block[31917-32936]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
      "info" : "SwitchStatement[31786-32623]:SwitchStatement[31923-32760]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[31815-31831]:SwitchCase[31952-31968]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[31838-31853]:SwitchCase[31975-31990]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32053-32065]:ReturnStatement[32190-32202]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[32072-32088]:SwitchCase[32209-32225]"
    }, {
      "left" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
      "right" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
      "info" : "ReturnStatement[32157-32238]:ReturnStatement[32294-32375]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[32312-32331]:SwitchCase[32449-32468]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[32338-32357]:SwitchCase[32475-32494]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32366-32378]:ReturnStatement[32503-32515]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[32386-32406]:SwitchCase[32523-32543]"
    }, {
      "left" : "Preconditions.checkState(isFunctionExpression(n));",
      "right" : "Preconditions.checkState(isFunctionExpression(n));",
      "info" : "ExpressionStatement[32545-32595]:ExpressionStatement[32682-32732]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32604-32617]:ReturnStatement[32741-32754]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[32629-32776]:ForStatement[32766-32913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32690-32776]:Block[32827-32913]"
    }, {
      "left" : "if (canBeSideEffected(c, knownConstants))",
      "right" : "if (canBeSideEffected(c, knownConstants))",
      "info" : "IfStatement[32698-32770]:IfStatement[32835-32907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32740-32770]:Block[32877-32907]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32750-32762]:ReturnStatement[32887-32899]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32782-32795]:ReturnStatement[32919-32932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33268-35252]:Block[33405-35389]"
    }, {
      "left" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.CALL:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      // Data values\n      case Token.ARRAYLIT:\n      case Token.EMPTY:  // TODO(johnlenz): remove this.\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
      "right" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.CALL:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      // Data values\n      case Token.ARRAYLIT:\n      case Token.EMPTY:  // TODO(johnlenz): remove this.\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
      "info" : "SwitchStatement[33274-35248]:SwitchStatement[33411-35385]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[33296-33313]:SwitchCase[33433-33450]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[33315-33324]:ReturnStatement[33452-33461]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[33331-33355]:SwitchCase[33468-33492]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[33362-33387]:SwitchCase[33499-33524]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[33394-33419]:SwitchCase[33531-33556]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[33426-33448]:SwitchCase[33563-33585]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[33455-33477]:SwitchCase[33592-33614]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[33484-33507]:SwitchCase[33621-33644]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[33514-33536]:SwitchCase[33651-33673]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[33543-33565]:SwitchCase[33680-33702]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[33572-33594]:SwitchCase[33709-33731]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[33601-33623]:SwitchCase[33738-33760]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[33630-33652]:SwitchCase[33767-33789]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[33659-33677]:SwitchCase[33796-33814]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[33678-33687]:ReturnStatement[33815-33824]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[33694-33710]:SwitchCase[33831-33847]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[33713-33722]:ReturnStatement[33850-33859]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[33745-33759]:SwitchCase[33882-33896]"
    }, {
      "left" : "return 3;",
      "right" : "return 3;",
      "info" : "ReturnStatement[33764-33773]:ReturnStatement[33901-33910]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[33780-33795]:SwitchCase[33917-33932]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[33799-33808]:ReturnStatement[33936-33945]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[33815-33832]:SwitchCase[33952-33969]"
    }, {
      "left" : "return 5;",
      "right" : "return 5;",
      "info" : "ReturnStatement[33834-33843]:ReturnStatement[33971-33980]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[33850-33868]:SwitchCase[33987-34005]"
    }, {
      "left" : "return 6;",
      "right" : "return 6;",
      "info" : "ReturnStatement[33869-33878]:ReturnStatement[34006-34015]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[33885-33903]:SwitchCase[34022-34040]"
    }, {
      "left" : "return 7;",
      "right" : "return 7;",
      "info" : "ReturnStatement[33904-33913]:ReturnStatement[34041-34050]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[33920-33934]:SwitchCase[34057-34071]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[33941-33955]:SwitchCase[34078-34092]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[33962-33978]:SwitchCase[34099-34115]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[33985-34001]:SwitchCase[34122-34138]"
    }, {
      "left" : "return 8;",
      "right" : "return 8;",
      "info" : "ReturnStatement[34004-34013]:ReturnStatement[34141-34150]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[34020-34034]:SwitchCase[34157-34171]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[34041-34055]:SwitchCase[34178-34192]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[34062-34076]:SwitchCase[34199-34213]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[34083-34097]:SwitchCase[34220-34234]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[34104-34126]:SwitchCase[34241-34263]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[34133-34147]:SwitchCase[34270-34284]"
    }, {
      "left" : "return 9;",
      "right" : "return 9;",
      "info" : "ReturnStatement[34152-34161]:ReturnStatement[34289-34298]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[34168-34183]:SwitchCase[34305-34320]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[34190-34205]:SwitchCase[34327-34342]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[34212-34228]:SwitchCase[34349-34365]"
    }, {
      "left" : "return 10;",
      "right" : "return 10;",
      "info" : "ReturnStatement[34231-34241]:ReturnStatement[34368-34378]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[34248-34263]:SwitchCase[34385-34400]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[34270-34285]:SwitchCase[34407-34422]"
    }, {
      "left" : "return 11;",
      "right" : "return 11;",
      "info" : "ReturnStatement[34289-34299]:ReturnStatement[34426-34436]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[34306-34321]:SwitchCase[34443-34458]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[34328-34343]:SwitchCase[34465-34480]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[34350-34365]:SwitchCase[34487-34502]"
    }, {
      "left" : "return 12;",
      "right" : "return 12;",
      "info" : "ReturnStatement[34369-34379]:ReturnStatement[34506-34516]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[34386-34401]:SwitchCase[34523-34538]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[34408-34423]:SwitchCase[34545-34560]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[34430-34445]:SwitchCase[34567-34582]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[34452-34471]:SwitchCase[34589-34608]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[34478-34496]:SwitchCase[34615-34633]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[34503-34519]:SwitchCase[34640-34656]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[34526-34541]:SwitchCase[34663-34678]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[34548-34566]:SwitchCase[34685-34703]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[34573-34588]:SwitchCase[34710-34725]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[34595-34610]:SwitchCase[34732-34747]"
    }, {
      "left" : "return 13;",
      "right" : "return 13;",
      "info" : "ReturnStatement[34614-34624]:ReturnStatement[34751-34761]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[34632-34648]:SwitchCase[34769-34785]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[34655-34674]:SwitchCase[34792-34811]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[34681-34700]:SwitchCase[34818-34837]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[34728-34748]:SwitchCase[34865-34885]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[34755-34772]:SwitchCase[34892-34909]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[34812-34829]:SwitchCase[34949-34966]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[34836-34856]:SwitchCase[34973-34993]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[34863-34879]:SwitchCase[35000-35016]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[34886-34902]:SwitchCase[35023-35039]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[34909-34927]:SwitchCase[35046-35064]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[34934-34955]:SwitchCase[35071-35092]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[34962-34980]:SwitchCase[35099-35117]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[34987-35005]:SwitchCase[35124-35142]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[35012-35028]:SwitchCase[35149-35165]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[35035-35051]:SwitchCase[35172-35188]"
    }, {
      "left" : "return 15;",
      "right" : "return 15;",
      "info" : "ReturnStatement[35060-35070]:ReturnStatement[35197-35207]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[35078-35086]:SwitchCase[35215-35223]"
    }, {
      "left" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
      "right" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
      "info" : "ThrowStatement[35087-35242]:ThrowStatement[35224-35379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35421-35866]:Block[35558-36003]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return valueCheck(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);\n      case Token.HOOK:\n        return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return valueCheck(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);\n      case Token.HOOK:\n        return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
      "info" : "SwitchStatement[35427-35862]:SwitchStatement[35564-35999]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[35456-35474]:SwitchCase[35593-35611]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[35481-35498]:SwitchCase[35618-35635]"
    }, {
      "left" : "return valueCheck(n.getLastChild(), p);",
      "right" : "return valueCheck(n.getLastChild(), p);",
      "info" : "ReturnStatement[35507-35546]:ReturnStatement[35644-35683]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[35553-35568]:SwitchCase[35690-35705]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[35575-35589]:SwitchCase[35712-35726]"
    }, {
      "left" : "return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);",
      "right" : "return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);",
      "info" : "ReturnStatement[35598-35685]:ReturnStatement[35735-35822]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[35692-35708]:SwitchCase[35829-35845]"
    }, {
      "left" : "return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);",
      "right" : "return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);",
      "info" : "ReturnStatement[35717-35814]:ReturnStatement[35854-35951]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[35821-35829]:SwitchCase[35958-35966]"
    }, {
      "left" : "return p.apply(n);",
      "right" : "return p.apply(n);",
      "info" : "ReturnStatement[35838-35856]:ReturnStatement[35975-35993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35969-36015]:Block[36106-36152]"
    }, {
      "left" : "return isNumericResultHelper(n);",
      "right" : "return isNumericResultHelper(n);",
      "info" : "ReturnStatement[35977-36009]:ReturnStatement[36114-36146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36249-36307]:Block[36386-36444]"
    }, {
      "left" : "return valueCheck(n, NUMBERIC_RESULT_PREDICATE);",
      "right" : "return valueCheck(n, NUMBERIC_RESULT_PREDICATE);",
      "info" : "ReturnStatement[36255-36303]:ReturnStatement[36392-36440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36356-37156]:Block[36493-37293]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ADD:\n        return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.INC:\n      case Token.DEC:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NUMBER:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"NaN\")) {\n          return true;\n        }\n        if (name.equals(\"Infinity\")) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ADD:\n        return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.INC:\n      case Token.DEC:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NUMBER:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"NaN\")) {\n          return true;\n        }\n        if (name.equals(\"Infinity\")) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[36362-37152]:SwitchStatement[36499-37289]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[36391-36406]:SwitchCase[36528-36543]"
    }, {
      "left" : "return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());",
      "right" : "return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());",
      "info" : "ReturnStatement[36415-36500]:ReturnStatement[36552-36637]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[36507-36525]:SwitchCase[36644-36662]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[36532-36549]:SwitchCase[36669-36686]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[36556-36574]:SwitchCase[36693-36711]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[36581-36599]:SwitchCase[36718-36736]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[36606-36621]:SwitchCase[36743-36758]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[36628-36643]:SwitchCase[36765-36780]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[36650-36666]:SwitchCase[36787-36803]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[36673-36688]:SwitchCase[36810-36825]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[36695-36710]:SwitchCase[36832-36847]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[36717-36732]:SwitchCase[36854-36869]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[36739-36754]:SwitchCase[36876-36891]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[36761-36776]:SwitchCase[36898-36913]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[36783-36798]:SwitchCase[36920-36935]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[36805-36820]:SwitchCase[36942-36957]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[36827-36842]:SwitchCase[36964-36979]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[36849-36867]:SwitchCase[36986-37004]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36876-36888]:ReturnStatement[37013-37025]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[36895-36911]:SwitchCase[37032-37048]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[36920-36948]:VariableDeclarationStatement[37057-37085]"
    }, {
      "left" : "if (name.equals(\"NaN\"))",
      "right" : "if (name.equals(\"NaN\"))",
      "info" : "IfStatement[36957-37015]:IfStatement[37094-37152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36981-37015]:Block[37118-37152]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36993-37005]:ReturnStatement[37130-37142]"
    }, {
      "left" : "if (name.equals(\"Infinity\"))",
      "right" : "if (name.equals(\"Infinity\"))",
      "info" : "IfStatement[37024-37087]:IfStatement[37161-37224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37053-37087]:Block[37190-37224]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37065-37077]:ReturnStatement[37202-37214]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37096-37109]:ReturnStatement[37233-37246]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[37116-37124]:SwitchCase[37253-37261]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37133-37146]:ReturnStatement[37270-37283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37258-37304]:Block[37395-37441]"
    }, {
      "left" : "return isBooleanResultHelper(n);",
      "right" : "return isBooleanResultHelper(n);",
      "info" : "ReturnStatement[37266-37298]:ReturnStatement[37403-37435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37536-37593]:Block[37673-37730]"
    }, {
      "left" : "return valueCheck(n, BOOLEAN_RESULT_PREDICATE);",
      "right" : "return valueCheck(n, BOOLEAN_RESULT_PREDICATE);",
      "info" : "ReturnStatement[37542-37589]:ReturnStatement[37679-37726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37642-38177]:Block[37779-38314]"
    }, {
      "left" : "switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n      case Token.DELPROP:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n      case Token.DELPROP:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[37648-38173]:SwitchStatement[37785-38310]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[37697-37713]:SwitchCase[37834-37850]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[37720-37737]:SwitchCase[37857-37874]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[37765-37779]:SwitchCase[37902-37916]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[37786-37800]:SwitchCase[37923-37937]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[37807-37823]:SwitchCase[37944-37960]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[37830-37846]:SwitchCase[37967-37983]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[37853-37867]:SwitchCase[37990-38004]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[37874-37888]:SwitchCase[38011-38025]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[37895-37909]:SwitchCase[38032-38046]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[37916-37930]:SwitchCase[38053-38067]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[37955-37969]:SwitchCase[38092-38106]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[37976-37998]:SwitchCase[38113-38135]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[38024-38039]:SwitchCase[38161-38176]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[38090-38109]:SwitchCase[38227-38246]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38118-38130]:ReturnStatement[38255-38267]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[38137-38145]:SwitchCase[38274-38282]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38154-38167]:ReturnStatement[38291-38304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38216-38389]:Block[38353-38526]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }",
      "right" : "switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }",
      "info" : "SwitchStatement[38222-38367]:SwitchStatement[38359-38504]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[38251-38267]:SwitchCase[38388-38404]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38276-38288]:ReturnStatement[38413-38425]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[38295-38311]:SwitchCase[38432-38448]"
    }, {
      "left" : "return n.getString().equals(\"undefined\");",
      "right" : "return n.getString().equals(\"undefined\");",
      "info" : "ReturnStatement[38320-38361]:ReturnStatement[38457-38498]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38372-38385]:ReturnStatement[38509-38522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38423-38466]:Block[38560-38603]"
    }, {
      "left" : "return n.getType() == Token.NULL;",
      "right" : "return n.getType() == Token.NULL;",
      "info" : "ReturnStatement[38429-38462]:ReturnStatement[38566-38599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38511-38556]:Block[38648-38693]"
    }, {
      "left" : "return isNull(n) || isUndefined(n);",
      "right" : "return isNull(n) || isUndefined(n);",
      "info" : "ReturnStatement[38517-38552]:ReturnStatement[38654-38689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38662-38704]:Block[38799-38841]"
    }, {
      "left" : "return mayBeStringHelper(n);",
      "right" : "return mayBeStringHelper(n);",
      "info" : "ReturnStatement[38670-38698]:ReturnStatement[38807-38835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38924-38962]:Block[39061-39099]"
    }, {
      "left" : "return mayBeString(n, true);",
      "right" : "return mayBeString(n, true);",
      "info" : "ReturnStatement[38930-38958]:ReturnStatement[39067-39095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39018-39149]:Block[39155-39286]"
    }, {
      "left" : "if (recurse)",
      "right" : "if (recurse)",
      "info" : "IfStatement[39024-39145]:IfStatement[39161-39282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39037-39097]:Block[39174-39234]"
    }, {
      "left" : "return valueCheck(n, MAY_BE_STRING_PREDICATE);",
      "right" : "return valueCheck(n, MAY_BE_STRING_PREDICATE);",
      "info" : "ReturnStatement[39045-39091]:ReturnStatement[39182-39228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39103-39145]:Block[39240-39282]"
    }, {
      "left" : "return mayBeStringHelper(n);",
      "right" : "return mayBeStringHelper(n);",
      "info" : "ReturnStatement[39111-39139]:ReturnStatement[39248-39276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39194-39295]:Block[39331-39432]"
    }, {
      "left" : "return !isNumericResult(n) && !isBooleanResult(n)\n        && !isUndefined(n) && !isNull(n);",
      "right" : "return !isNumericResult(n) && !isBooleanResult(n)\n        && !isUndefined(n) && !isNull(n);",
      "info" : "ReturnStatement[39200-39291]:ReturnStatement[39337-39428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39563-39791]:Block[39700-39928]"
    }, {
      "left" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[39569-39787]:SwitchStatement[39706-39924]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[39591-39606]:SwitchCase[39728-39743]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[39613-39628]:SwitchCase[39750-39765]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[39635-39649]:SwitchCase[39772-39786]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[39656-39673]:SwitchCase[39793-39810]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[39680-39698]:SwitchCase[39817-39835]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[39705-39723]:SwitchCase[39842-39860]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39732-39744]:ReturnStatement[39869-39881]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39751-39759]:SwitchCase[39888-39896]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39768-39781]:ReturnStatement[39905-39918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40138-40323]:Block[40275-40460]"
    }, {
      "left" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[40144-40319]:SwitchStatement[40281-40456]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[40166-40181]:SwitchCase[40303-40318]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[40188-40205]:SwitchCase[40325-40342]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[40212-40230]:SwitchCase[40349-40367]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[40237-40255]:SwitchCase[40374-40392]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40264-40276]:ReturnStatement[40401-40413]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[40283-40291]:SwitchCase[40420-40428]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40300-40313]:ReturnStatement[40437-40450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40365-40794]:Block[40502-40931]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "info" : "SwitchStatement[40371-40772]:SwitchStatement[40508-40909]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[40399-40417]:SwitchCase[40536-40554]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[40424-40448]:SwitchCase[40561-40585]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[40455-40480]:SwitchCase[40592-40617]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[40487-40512]:SwitchCase[40624-40649]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[40519-40541]:SwitchCase[40656-40678]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[40548-40570]:SwitchCase[40685-40707]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[40577-40600]:SwitchCase[40714-40737]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[40607-40629]:SwitchCase[40744-40766]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[40636-40658]:SwitchCase[40773-40795]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[40665-40687]:SwitchCase[40802-40824]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[40694-40716]:SwitchCase[40831-40853]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[40723-40745]:SwitchCase[40860-40882]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40754-40766]:ReturnStatement[40891-40903]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40777-40790]:ReturnStatement[40914-40927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40839-41561]:Block[40976-41698]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "info" : "SwitchStatement[40845-41495]:SwitchStatement[40982-41632]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[40873-40897]:SwitchCase[41010-41034]"
    }, {
      "left" : "return Token.BITOR;",
      "right" : "return Token.BITOR;",
      "info" : "ReturnStatement[40906-40925]:ReturnStatement[41043-41062]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[40932-40957]:SwitchCase[41069-41094]"
    }, {
      "left" : "return Token.BITXOR;",
      "right" : "return Token.BITXOR;",
      "info" : "ReturnStatement[40966-40986]:ReturnStatement[41103-41123]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[40993-41018]:SwitchCase[41130-41155]"
    }, {
      "left" : "return Token.BITAND;",
      "right" : "return Token.BITAND;",
      "info" : "ReturnStatement[41027-41047]:ReturnStatement[41164-41184]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[41054-41076]:SwitchCase[41191-41213]"
    }, {
      "left" : "return Token.LSH;",
      "right" : "return Token.LSH;",
      "info" : "ReturnStatement[41085-41102]:ReturnStatement[41222-41239]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[41109-41131]:SwitchCase[41246-41268]"
    }, {
      "left" : "return Token.RSH;",
      "right" : "return Token.RSH;",
      "info" : "ReturnStatement[41140-41157]:ReturnStatement[41277-41294]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[41164-41187]:SwitchCase[41301-41324]"
    }, {
      "left" : "return Token.URSH;",
      "right" : "return Token.URSH;",
      "info" : "ReturnStatement[41196-41214]:ReturnStatement[41333-41351]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[41221-41243]:SwitchCase[41358-41380]"
    }, {
      "left" : "return Token.ADD;",
      "right" : "return Token.ADD;",
      "info" : "ReturnStatement[41252-41269]:ReturnStatement[41389-41406]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[41276-41298]:SwitchCase[41413-41435]"
    }, {
      "left" : "return Token.SUB;",
      "right" : "return Token.SUB;",
      "info" : "ReturnStatement[41307-41324]:ReturnStatement[41444-41461]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[41331-41353]:SwitchCase[41468-41490]"
    }, {
      "left" : "return Token.MUL;",
      "right" : "return Token.MUL;",
      "info" : "ReturnStatement[41362-41379]:ReturnStatement[41499-41516]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[41386-41408]:SwitchCase[41523-41545]"
    }, {
      "left" : "return Token.DIV;",
      "right" : "return Token.DIV;",
      "info" : "ReturnStatement[41417-41434]:ReturnStatement[41554-41571]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[41441-41463]:SwitchCase[41578-41600]"
    }, {
      "left" : "return Token.MOD;",
      "right" : "return Token.MOD;",
      "info" : "ReturnStatement[41472-41489]:ReturnStatement[41609-41626]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Not an assiment op\");",
      "right" : "throw new IllegalArgumentException(\"Not an assiment op\");",
      "info" : "ThrowStatement[41500-41557]:ThrowStatement[41637-41694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41605-41655]:Block[41742-41792]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT;",
      "right" : "return n.getType() == Token.EXPR_RESULT;",
      "info" : "ReturnStatement[41611-41651]:ReturnStatement[41748-41788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41804-41853]:Block[41941-41990]"
    }, {
      "left" : "return containsType(n, Token.FUNCTION);",
      "right" : "return containsType(n, Token.FUNCTION);",
      "info" : "ReturnStatement[41810-41849]:ReturnStatement[41947-41986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41984-42110]:Block[42121-42247]"
    }, {
      "left" : "Node start = (isFunction(n)) ? n.getLastChild() : n;",
      "right" : "Node start = (isFunction(n)) ? n.getLastChild() : n;",
      "info" : "VariableDeclarationStatement[41990-42042]:VariableDeclarationStatement[42127-42179]"
    }, {
      "left" : "return containsType(start, Token.THIS, MATCH_NOT_FUNCTION);",
      "right" : "return containsType(start, Token.THIS, MATCH_NOT_FUNCTION);",
      "info" : "ReturnStatement[42047-42106]:ReturnStatement[42184-42243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42195-42281]:Block[42332-42418]"
    }, {
      "left" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
      "right" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
      "info" : "ReturnStatement[42201-42277]:ReturnStatement[42338-42414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42359-42405]:Block[42496-42542]"
    }, {
      "left" : "return n.getType() == Token.GETPROP;",
      "right" : "return n.getType() == Token.GETPROP;",
      "info" : "ReturnStatement[42365-42401]:ReturnStatement[42502-42538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42477-42520]:Block[42614-42657]"
    }, {
      "left" : "return n.getType() == Token.NAME;",
      "right" : "return n.getType() == Token.NAME;",
      "info" : "ReturnStatement[42483-42516]:ReturnStatement[42620-42653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42590-42632]:Block[42727-42769]"
    }, {
      "left" : "return n.getType() == Token.NEW;",
      "right" : "return n.getType() == Token.NEW;",
      "info" : "ReturnStatement[42596-42628]:ReturnStatement[42733-42765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42702-42744]:Block[42839-42881]"
    }, {
      "left" : "return n.getType() == Token.VAR;",
      "right" : "return n.getType() == Token.VAR;",
      "info" : "ReturnStatement[42708-42740]:ReturnStatement[42845-42877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42950-43157]:Block[43087-43294]"
    }, {
      "left" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
      "right" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
      "info" : "ReturnStatement[43080-43153]:ReturnStatement[43217-43290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43337-43603]:Block[43474-43740]"
    }, {
      "left" : "Preconditions.checkState(isName(n));",
      "right" : "Preconditions.checkState(isName(n));",
      "info" : "ExpressionStatement[43343-43379]:ExpressionStatement[43480-43516]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[43384-43412]:VariableDeclarationStatement[43521-43549]"
    }, {
      "left" : "if (isVar(parent))",
      "right" : "if (isVar(parent))",
      "info" : "IfStatement[43417-43599]:IfStatement[43554-43736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43436-43475]:Block[43573-43612]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[43444-43469]:ReturnStatement[43581-43606]"
    }, {
      "left" : "if (isAssign(parent) && parent.getFirstChild() == n)",
      "right" : "if (isAssign(parent) && parent.getFirstChild() == n)",
      "info" : "IfStatement[43481-43599]:IfStatement[43618-43736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43534-43567]:Block[43671-43704]"
    }, {
      "left" : "return n.getNext();",
      "right" : "return n.getNext();",
      "info" : "ReturnStatement[43542-43561]:ReturnStatement[43679-43698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43573-43599]:Block[43710-43736]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43581-43593]:ReturnStatement[43718-43730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43679-43724]:Block[43816-43861]"
    }, {
      "left" : "return n.getType() == Token.STRING;",
      "right" : "return n.getType() == Token.STRING;",
      "info" : "ReturnStatement[43685-43720]:ReturnStatement[43822-43857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43951-44056]:Block[44088-44193]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
      "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
      "info" : "ReturnStatement[43957-44052]:ReturnStatement[44094-44189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44133-44178]:Block[44270-44315]"
    }, {
      "left" : "return n.getType() == Token.ASSIGN;",
      "right" : "return n.getType() == Token.ASSIGN;",
      "info" : "ReturnStatement[44139-44174]:ReturnStatement[44276-44311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44394-44497]:Block[44531-44634]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
      "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
      "info" : "ReturnStatement[44400-44493]:ReturnStatement[44537-44630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44600-44676]:Block[44737-44813]"
    }, {
      "left" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
      "right" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
      "info" : "ReturnStatement[44606-44672]:ReturnStatement[44743-44809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44799-44962]:Block[44936-45099]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[44805-44958]:SwitchStatement[44942-45095]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[44834-44849]:SwitchCase[44971-44986]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[44856-44870]:SwitchCase[44993-45007]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[44877-44894]:SwitchCase[45014-45031]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44903-44915]:ReturnStatement[45040-45052]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44922-44930]:SwitchCase[45059-45067]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44939-44952]:ReturnStatement[45076-45089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45161-45369]:Block[45298-45506]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "info" : "SwitchStatement[45167-45365]:SwitchStatement[45304-45502]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[45196-45211]:SwitchCase[45333-45348]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[45218-45235]:SwitchCase[45355-45372]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[45244-45268]:ReturnStatement[45381-45405]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[45275-45289]:SwitchCase[45412-45426]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[45298-45323]:ReturnStatement[45435-45460]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[45330-45338]:SwitchCase[45467-45475]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[45347-45359]:ReturnStatement[45484-45496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45518-45730]:Block[45655-45867]"
    }, {
      "left" : "for (Node parent : n.getAncestors())",
      "right" : "for (Node parent : n.getAncestors())",
      "info" : "EnhancedForStatement[45524-45708]:EnhancedForStatement[45661-45845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45561-45708]:Block[45698-45845]"
    }, {
      "left" : "if (NodeUtil.isLoopStructure(parent))",
      "right" : "if (NodeUtil.isLoopStructure(parent))",
      "info" : "IfStatement[45569-45637]:IfStatement[45706-45774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45607-45637]:Block[45744-45774]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45617-45629]:ReturnStatement[45754-45766]"
    }, {
      "left" : "if (NodeUtil.isFunction(parent))",
      "right" : "if (NodeUtil.isFunction(parent))",
      "info" : "IfStatement[45645-45702]:IfStatement[45782-45839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45678-45702]:Block[45815-45839]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45688-45694]:BreakStatement[45825-45831]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45713-45726]:ReturnStatement[45850-45863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45866-46217]:Block[46003-46354]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[45872-46213]:SwitchStatement[46009-46350]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[45901-45916]:SwitchCase[46038-46053]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[45923-45937]:SwitchCase[46060-46074]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[45944-45961]:SwitchCase[46081-46098]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[45968-45984]:SwitchCase[46105-46121]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[45991-46005]:SwitchCase[46128-46142]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[46012-46029]:SwitchCase[46149-46166]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[46036-46051]:SwitchCase[46173-46188]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[46058-46075]:SwitchCase[46195-46212]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[46082-46100]:SwitchCase[46219-46237]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[46107-46123]:SwitchCase[46244-46260]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[46130-46149]:SwitchCase[46267-46286]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46158-46170]:ReturnStatement[46295-46307]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[46177-46185]:SwitchCase[46314-46322]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46194-46207]:ReturnStatement[46331-46344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46392-47102]:Block[46529-47239]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "info" : "SwitchStatement[46398-47098]:SwitchStatement[46535-47235]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[46432-46447]:SwitchCase[46569-46584]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[46454-46471]:SwitchCase[46591-46608]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[46478-46495]:SwitchCase[46615-46632]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[46502-46518]:SwitchCase[46639-46655]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[46527-46561]:ReturnStatement[46664-46698]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[46568-46582]:SwitchCase[46705-46719]"
    }, {
      "left" : "return parent.getFirstChild() == n;",
      "right" : "return parent.getFirstChild() == n;",
      "info" : "ReturnStatement[46591-46626]:ReturnStatement[46728-46763]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[46633-46647]:SwitchCase[46770-46784]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[46656-46691]:ReturnStatement[46793-46828]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[46698-46713]:SwitchCase[46835-46850]"
    }, {
      "left" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "right" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "info" : "ReturnStatement[46722-46787]:ReturnStatement[46859-46924]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[46794-46811]:SwitchCase[46931-46948]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[46820-46854]:ReturnStatement[46957-46991]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[46861-46879]:SwitchCase[46998-47016]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[46886-46902]:SwitchCase[47023-47039]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[46911-46946]:ReturnStatement[47048-47083]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[46953-46972]:SwitchCase[47090-47109]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46981-46993]:ReturnStatement[47118-47130]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[47000-47008]:SwitchCase[47137-47145]"
    }, {
      "left" : "Preconditions.checkState(isControlStructure(parent));",
      "right" : "Preconditions.checkState(isControlStructure(parent));",
      "info" : "ExpressionStatement[47017-47070]:ExpressionStatement[47154-47207]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47079-47092]:ReturnStatement[47216-47229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47360-47906]:Block[47497-48043]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "info" : "SwitchStatement[47366-47827]:SwitchStatement[47503-47964]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[47395-47409]:SwitchCase[47532-47546]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[47416-47433]:SwitchCase[47553-47570]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[47442-47467]:ReturnStatement[47579-47604]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[47474-47488]:SwitchCase[47611-47625]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[47497-47521]:ReturnStatement[47634-47658]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[47528-47543]:SwitchCase[47665-47680]"
    }, {
      "left" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "right" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "info" : "SwitchStatement[47552-47699]:SwitchStatement[47689-47836]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[47591-47598]:SwitchCase[47728-47735]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[47611-47623]:ReturnStatement[47748-47760]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[47634-47641]:SwitchCase[47771-47778]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[47654-47689]:ReturnStatement[47791-47826]"
    }, {
      "left" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "right" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "info" : "ThrowStatement[47708-47777]:ThrowStatement[47845-47914]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[47784-47800]:SwitchCase[47921-47937]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[47809-47821]:ReturnStatement[47946-47958]"
    }, {
      "left" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "right" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "info" : "ThrowStatement[47832-47902]:ThrowStatement[47969-48039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48036-48111]:Block[48173-48248]"
    }, {
      "left" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
      "right" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
      "info" : "ReturnStatement[48042-48107]:ReturnStatement[48179-48244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48216-48266]:Block[48353-48403]"
    }, {
      "left" : "return isStatementParent(n.getParent());",
      "right" : "return isStatementParent(n.getParent());",
      "info" : "ReturnStatement[48222-48262]:ReturnStatement[48359-48399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48316-48731]:Block[48453-48868]"
    }, {
      "left" : "Preconditions.checkState(parent != null);",
      "right" : "Preconditions.checkState(parent != null);",
      "info" : "ExpressionStatement[48517-48558]:ExpressionStatement[48654-48695]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[48563-48727]:SwitchStatement[48700-48864]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[48597-48615]:SwitchCase[48734-48752]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[48622-48639]:SwitchCase[48759-48776]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[48646-48663]:SwitchCase[48783-48800]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[48672-48684]:ReturnStatement[48809-48821]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48691-48699]:SwitchCase[48828-48836]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48708-48721]:ReturnStatement[48845-48858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48828-48903]:Block[48965-49040]"
    }, {
      "left" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
      "right" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
      "info" : "ReturnStatement[48834-48899]:ReturnStatement[48971-49036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49111-49166]:Block[49248-49303]"
    }, {
      "left" : "return isName(n) && !n.getString().isEmpty();",
      "right" : "return isName(n) && !n.getString().isEmpty();",
      "info" : "ReturnStatement[49117-49162]:ReturnStatement[49254-49299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49256-49320]:Block[49393-49457]"
    }, {
      "left" : "return (n != null && n.getType() == Token.LABEL_NAME);",
      "right" : "return (n != null && n.getType() == Token.LABEL_NAME);",
      "info" : "ReturnStatement[49262-49316]:ReturnStatement[49399-49453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49444-49564]:Block[49581-49701]"
    }, {
      "left" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "right" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "info" : "ReturnStatement[49450-49560]:ReturnStatement[49587-49697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49669-49798]:Block[49806-49935]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[49675-49703]:VariableDeclarationStatement[49812-49840]"
    }, {
      "left" : "return parent.getType() == Token.TRY\n        && parent.getFirstChild().getNext() == n;",
      "right" : "return parent.getType() == Token.TRY\n        && parent.getFirstChild().getNext() == n;",
      "info" : "ReturnStatement[49708-49794]:ReturnStatement[49845-49931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49924-52266]:Block[50061-52403]"
    }, {
      "left" : "if (isTryFinallyNode(parent, node))",
      "right" : "if (isTryFinallyNode(parent, node))",
      "info" : "IfStatement[49930-52262]:IfStatement[50067-52399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49966-50239]:Block[50103-50376]"
    }, {
      "left" : "if (NodeUtil.hasCatchHandler(getCatchBlock(parent)))",
      "right" : "if (NodeUtil.hasCatchHandler(getCatchBlock(parent)))",
      "info" : "IfStatement[49974-50233]:IfStatement[50111-50370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50027-50132]:Block[50164-50269]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[50099-50124]:ExpressionStatement[50236-50261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50138-50233]:Block[50275-50370]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[50203-50225]:ExpressionStatement[50340-50362]"
    }, {
      "left" : "if (node.getType() == Token.CATCH)",
      "right" : "if (node.getType() == Token.CATCH)",
      "info" : "IfStatement[50245-52262]:IfStatement[50382-52399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50280-50504]:Block[50417-50641]"
    }, {
      "left" : "Node tryNode = node.getParent().getParent();",
      "right" : "Node tryNode = node.getParent().getParent();",
      "info" : "VariableDeclarationStatement[50361-50405]:VariableDeclarationStatement[50498-50542]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "right" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "info" : "ExpressionStatement[50412-50467]:ExpressionStatement[50549-50604]"
    }, {
      "left" : "node.detachFromParent();",
      "right" : "node.detachFromParent();",
      "info" : "ExpressionStatement[50474-50498]:ExpressionStatement[50611-50635]"
    }, {
      "left" : "if (isTryCatchNodeContainer(node))",
      "right" : "if (isTryCatchNodeContainer(node))",
      "info" : "IfStatement[50510-52262]:IfStatement[50647-52399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50545-50803]:Block[50682-50940]"
    }, {
      "left" : "Node tryNode = node.getParent();",
      "right" : "Node tryNode = node.getParent();",
      "info" : "VariableDeclarationStatement[50674-50706]:VariableDeclarationStatement[50811-50843]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "right" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "info" : "ExpressionStatement[50713-50768]:ExpressionStatement[50850-50905]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[50775-50797]:ExpressionStatement[50912-50934]"
    }, {
      "left" : "if (node.getType() == Token.BLOCK)",
      "right" : "if (node.getType() == Token.BLOCK)",
      "info" : "IfStatement[50809-52262]:IfStatement[50946-52399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50844-50976]:Block[50981-51113]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[50948-50970]:ExpressionStatement[51085-51107]"
    }, {
      "left" : "if (isStatementBlock(parent)\n        || isSwitchCase(node))",
      "right" : "if (isStatementBlock(parent)\n        || isSwitchCase(node))",
      "info" : "IfStatement[50982-52262]:IfStatement[51119-52399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51042-51136]:Block[51179-51273]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[51105-51130]:ExpressionStatement[51242-51267]"
    }, {
      "left" : "if (parent.getType() == Token.VAR)",
      "right" : "if (parent.getType() == Token.VAR)",
      "info" : "IfStatement[51142-52262]:IfStatement[51279-52399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51177-51496]:Block[51314-51633]"
    }, {
      "left" : "if (parent.hasMoreThanOneChild())",
      "right" : "if (parent.hasMoreThanOneChild())",
      "info" : "IfStatement[51185-51490]:IfStatement[51322-51627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51219-51262]:Block[51356-51399]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[51229-51254]:ExpressionStatement[51366-51391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51268-51490]:Block[51405-51627]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[51343-51368]:ExpressionStatement[51480-51505]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[51442-51482]:ExpressionStatement[51579-51619]"
    }, {
      "left" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
      "right" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
      "info" : "IfStatement[51502-52262]:IfStatement[51639-52399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51580-51798]:Block[51717-51935]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[51651-51676]:ExpressionStatement[51788-51813]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[51752-51792]:ExpressionStatement[51889-51929]"
    }, {
      "left" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
      "right" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
      "info" : "IfStatement[51804-52262]:IfStatement[51941-52399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51878-52118]:Block[52015-52255]"
    }, {
      "left" : "parent.replaceChild(node, new Node(Token.EMPTY));",
      "right" : "parent.replaceChild(node, new Node(Token.EMPTY));",
      "info" : "ExpressionStatement[52063-52112]:ExpressionStatement[52200-52249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52124-52262]:Block[52261-52399]"
    }, {
      "left" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
      "right" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
      "info" : "ThrowStatement[52132-52256]:ThrowStatement[52269-52393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52372-52582]:Block[52509-52719]"
    }, {
      "left" : "Preconditions.checkState(tryNode.getType() == Token.TRY);",
      "right" : "Preconditions.checkState(tryNode.getType() == Token.TRY);",
      "info" : "ExpressionStatement[52378-52435]:ExpressionStatement[52515-52572]"
    }, {
      "left" : "if (!NodeUtil.hasFinally(tryNode))",
      "right" : "if (!NodeUtil.hasFinally(tryNode))",
      "info" : "IfStatement[52440-52578]:IfStatement[52577-52715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52475-52578]:Block[52612-52715]"
    }, {
      "left" : "tryNode.addChildrenToBack(new Node(Token.BLOCK)\n          .copyInformationFrom(tryNode));",
      "right" : "tryNode.addChildrenToBack(new Node(Token.BLOCK)\n          .copyInformationFrom(tryNode));",
      "info" : "ExpressionStatement[52483-52572]:ExpressionStatement[52620-52709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52725-53275]:Block[52862-53412]"
    }, {
      "left" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[52731-52788]:ExpressionStatement[52868-52925]"
    }, {
      "left" : "Node parent = block.getParent();",
      "right" : "Node parent = block.getParent();",
      "info" : "VariableDeclarationStatement[52793-52825]:VariableDeclarationStatement[52930-52962]"
    }, {
      "left" : "if (isStatementBlock(parent))",
      "right" : "if (isStatementBlock(parent))",
      "info" : "IfStatement[52956-53271]:IfStatement[53093-53408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52986-53238]:Block[53123-53375]"
    }, {
      "left" : "Node previous = block;",
      "right" : "Node previous = block;",
      "info" : "VariableDeclarationStatement[52994-53016]:VariableDeclarationStatement[53131-53153]"
    }, {
      "left" : "while (block.hasChildren())",
      "right" : "while (block.hasChildren())",
      "info" : "WhileStatement[53023-53180]:WhileStatement[53160-53317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53051-53180]:Block[53188-53317]"
    }, {
      "left" : "Node child = block.removeFirstChild();",
      "right" : "Node child = block.removeFirstChild();",
      "info" : "VariableDeclarationStatement[53061-53099]:VariableDeclarationStatement[53198-53236]"
    }, {
      "left" : "parent.addChildAfter(child, previous);",
      "right" : "parent.addChildAfter(child, previous);",
      "info" : "ExpressionStatement[53108-53146]:ExpressionStatement[53245-53283]"
    }, {
      "left" : "previous = child;",
      "right" : "previous = child;",
      "info" : "ExpressionStatement[53155-53172]:ExpressionStatement[53292-53309]"
    }, {
      "left" : "parent.removeChild(block);",
      "right" : "parent.removeChild(block);",
      "info" : "ExpressionStatement[53187-53213]:ExpressionStatement[53324-53350]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[53220-53232]:ReturnStatement[53357-53369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53244-53271]:Block[53381-53408]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53252-53265]:ReturnStatement[53389-53402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53347-53390]:Block[53484-53527]"
    }, {
      "left" : "return n.getType() == Token.CALL;",
      "right" : "return n.getType() == Token.CALL;",
      "info" : "ReturnStatement[53353-53386]:ReturnStatement[53490-53523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53521-53584]:Block[53658-53721]"
    }, {
      "left" : "return NodeUtil.isCall(node) || NodeUtil.isNew(node);",
      "right" : "return NodeUtil.isCall(node) || NodeUtil.isNew(node);",
      "info" : "ReturnStatement[53527-53580]:ReturnStatement[53664-53717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53664-53711]:Block[53801-53848]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION;",
      "right" : "return n.getType() == Token.FUNCTION;",
      "info" : "ReturnStatement[53670-53707]:ReturnStatement[53807-53844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53818-53902]:Block[53955-54039]"
    }, {
      "left" : "Preconditions.checkArgument(isFunction(fn));",
      "right" : "Preconditions.checkArgument(isFunction(fn));",
      "info" : "ExpressionStatement[53824-53868]:ExpressionStatement[53961-54005]"
    }, {
      "left" : "return fn.getLastChild();",
      "right" : "return fn.getLastChild();",
      "info" : "ReturnStatement[53873-53898]:ReturnStatement[54010-54035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53977-54023]:Block[54114-54160]"
    }, {
      "left" : "return node.getType() == Token.THIS;",
      "right" : "return node.getType() == Token.THIS;",
      "info" : "ReturnStatement[53983-54019]:ReturnStatement[54120-54156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54111-54161]:Block[54248-54298]"
    }, {
      "left" : "return node.getType() == Token.ARRAYLIT;",
      "right" : "return node.getType() == Token.ARRAYLIT;",
      "info" : "ReturnStatement[54117-54157]:ReturnStatement[54254-54294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54262-54307]:Block[54399-54444]"
    }, {
      "left" : "return containsType(n, Token.CALL);",
      "right" : "return containsType(n, Token.CALL);",
      "info" : "ReturnStatement[54268-54303]:ReturnStatement[54405-54440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54595-54660]:Block[54732-54797]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION && isStatement(n);",
      "right" : "return n.getType() == Token.FUNCTION && isStatement(n);",
      "info" : "ReturnStatement[54601-54656]:ReturnStatement[54738-54793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54902-55066]:Block[55039-55203]"
    }, {
      "left" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
      "right" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
      "info" : "ReturnStatement[54908-55062]:ReturnStatement[55045-55199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55770-55836]:Block[55907-55973]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
      "right" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
      "info" : "ReturnStatement[55776-55832]:ReturnStatement[55913-55969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56083-56164]:Block[56220-56301]"
    }, {
      "left" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
      "right" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
      "info" : "ReturnStatement[56089-56160]:ReturnStatement[56226-56297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56362-56534]:Block[56499-56671]"
    }, {
      "left" : "Preconditions.checkArgument(isFunction(function));",
      "right" : "Preconditions.checkArgument(isFunction(function));",
      "info" : "ExpressionStatement[56368-56418]:ExpressionStatement[56505-56555]"
    }, {
      "left" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        MATCH_NOT_FUNCTION);",
      "right" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        MATCH_NOT_FUNCTION);",
      "info" : "ReturnStatement[56423-56530]:ReturnStatement[56560-56667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56706-57141]:Block[56843-57278]"
    }, {
      "left" : "if (callNode.getType() == Token.CALL)",
      "right" : "if (callNode.getType() == Token.CALL)",
      "info" : "IfStatement[56712-57119]:IfStatement[56849-57256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56750-57119]:Block[56887-57256]"
    }, {
      "left" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "right" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[56758-56821]:VariableDeclarationStatement[56895-56958]"
    }, {
      "left" : "if (isGet(functionIndentifyingExpression))",
      "right" : "if (isGet(functionIndentifyingExpression))",
      "info" : "IfStatement[56828-57113]:IfStatement[56965-57250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56871-57113]:Block[57008-57250]"
    }, {
      "left" : "Node last = functionIndentifyingExpression.getLastChild();",
      "right" : "Node last = functionIndentifyingExpression.getLastChild();",
      "info" : "VariableDeclarationStatement[56881-56939]:VariableDeclarationStatement[57018-57076]"
    }, {
      "left" : "if (last != null && last.getType() == Token.STRING)",
      "right" : "if (last != null && last.getType() == Token.STRING)",
      "info" : "IfStatement[56948-57105]:IfStatement[57085-57242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57000-57105]:Block[57137-57242]"
    }, {
      "left" : "String propName = last.getString();",
      "right" : "String propName = last.getString();",
      "info" : "VariableDeclarationStatement[57012-57047]:VariableDeclarationStatement[57149-57184]"
    }, {
      "left" : "return (propName.equals(methodName));",
      "right" : "return (propName.equals(methodName));",
      "info" : "ReturnStatement[57058-57095]:ReturnStatement[57195-57232]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57124-57137]:ReturnStatement[57261-57274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57327-57381]:Block[57464-57518]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"call\");",
      "right" : "return isObjectCallMethod(callNode, \"call\");",
      "info" : "ReturnStatement[57333-57377]:ReturnStatement[57470-57514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57569-57624]:Block[57706-57761]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"apply\");",
      "right" : "return isObjectCallMethod(callNode, \"apply\");",
      "info" : "ReturnStatement[57575-57620]:ReturnStatement[57712-57757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57870-57953]:Block[58007-58090]"
    }, {
      "left" : "return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);",
      "right" : "return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);",
      "info" : "ReturnStatement[57876-57949]:ReturnStatement[58013-58086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58173-58352]:Block[58310-58489]"
    }, {
      "left" : "if (isFunctionObjectCall(callNode))",
      "right" : "if (isFunctionObjectCall(callNode))",
      "info" : "IfStatement[58179-58329]:IfStatement[58316-58466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58215-58329]:Block[58352-58466]"
    }, {
      "left" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
      "right" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
      "info" : "IfStatement[58223-58323]:IfStatement[58360-58460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58293-58323]:Block[58430-58460]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[58303-58315]:ReturnStatement[58440-58452]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58335-58348]:ReturnStatement[58472-58485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58764-58891]:Block[58901-59028]"
    }, {
      "left" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
      "right" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
      "info" : "ReturnStatement[58770-58887]:ReturnStatement[58907-59024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59465-60097]:Block[59602-60234]"
    }, {
      "left" : "int nType = node.getType();",
      "right" : "int nType = node.getType();",
      "info" : "VariableDeclarationStatement[59471-59498]:VariableDeclarationStatement[59608-59635]"
    }, {
      "left" : "Preconditions.checkArgument(nType == Token.NAME || nType == Token.GETPROP ||\n        nType == Token.GETELEM);",
      "right" : "Preconditions.checkArgument(nType == Token.NAME || nType == Token.GETPROP ||\n        nType == Token.GETELEM);",
      "info" : "ExpressionStatement[59503-59612]:ExpressionStatement[59640-59749]"
    }, {
      "left" : "Node parent = node.getParent();",
      "right" : "Node parent = node.getParent();",
      "info" : "VariableDeclarationStatement[59617-59648]:VariableDeclarationStatement[59754-59785]"
    }, {
      "left" : "return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == node)\n        || (NodeUtil.isForIn(parent) && parent.getFirstChild() == node)\n        || NodeUtil.isVar(parent)\n        || (parent.getType() == Token.FUNCTION &&\n            parent.getFirstChild() == node)\n        || parent.getType() == Token.DEC\n        || parent.getType() == Token.INC\n        || parent.getType() == Token.LP\n        || parent.getType() == Token.CATCH;",
      "right" : "return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == node)\n        || (NodeUtil.isForIn(parent) && parent.getFirstChild() == node)\n        || NodeUtil.isVar(parent)\n        || (parent.getType() == Token.FUNCTION &&\n            parent.getFirstChild() == node)\n        || parent.getType() == Token.DEC\n        || parent.getType() == Token.INC\n        || parent.getType() == Token.LP\n        || parent.getType() == Token.CATCH;",
      "info" : "ReturnStatement[59653-60093]:ReturnStatement[59790-60230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60347-60548]:Block[60484-60685]"
    }, {
      "left" : "switch (node.getType()) {\n      case Token.STRING:\n        return parent.getType() == Token.OBJECTLIT;\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
      "right" : "switch (node.getType()) {\n      case Token.STRING:\n        return parent.getType() == Token.OBJECTLIT;\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
      "info" : "SwitchStatement[60353-60526]:SwitchStatement[60490-60663]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[60385-60403]:SwitchCase[60522-60540]"
    }, {
      "left" : "return parent.getType() == Token.OBJECTLIT;",
      "right" : "return parent.getType() == Token.OBJECTLIT;",
      "info" : "ReturnStatement[60412-60455]:ReturnStatement[60549-60592]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[60462-60477]:SwitchCase[60599-60614]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[60484-60499]:SwitchCase[60621-60636]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[60508-60520]:ReturnStatement[60645-60657]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60531-60544]:ReturnStatement[60668-60681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60680-60890]:Block[60817-61027]"
    }, {
      "left" : "switch (key.getType()) {\n      case Token.STRING:\n      case Token.GET:\n      case Token.SET:\n        return key.getString();\n    }",
      "right" : "switch (key.getType()) {\n      case Token.STRING:\n      case Token.GET:\n      case Token.SET:\n        return key.getString();\n    }",
      "info" : "SwitchStatement[60686-60817]:SwitchStatement[60823-60954]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[60717-60735]:SwitchCase[60854-60872]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[60742-60757]:SwitchCase[60879-60894]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[60764-60779]:SwitchCase[60901-60916]"
    }, {
      "left" : "return key.getString();",
      "right" : "return key.getString();",
      "info" : "ReturnStatement[60788-60811]:ReturnStatement[60925-60948]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected node type: \" + key);",
      "right" : "throw new IllegalStateException(\"Unexpected node type: \" + key);",
      "info" : "ThrowStatement[60822-60886]:ThrowStatement[60959-61023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61070-61905]:Block[61207-62042]"
    }, {
      "left" : "if (valueType != null)",
      "right" : "if (valueType != null)",
      "info" : "IfStatement[61076-61879]:IfStatement[61213-62016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61099-61879]:Block[61236-62016]"
    }, {
      "left" : "switch (key.getType()) {\n        case Token.GET:\n          // GET must always return a function type.\n          if (valueType.isFunctionType()) {\n            FunctionType fntype = ((FunctionType) valueType);\n            valueType = fntype.getReturnType();\n          } else {\n            return null;\n          }\n          break;\n        case Token.SET:\n          if (valueType.isFunctionType()) {\n            // SET must always return a function type.\n            FunctionType fntype = ((FunctionType) valueType);\n            Node param = fntype.getParametersNode().getFirstChild();\n            // SET function must always have one parameter.\n            valueType = param.getJSType();\n          } else {\n            return null;\n          }\n          break;\n      }",
      "right" : "switch (key.getType()) {\n        case Token.GET:\n          // GET must always return a function type.\n          if (valueType.isFunctionType()) {\n            FunctionType fntype = ((FunctionType) valueType);\n            valueType = fntype.getReturnType();\n          } else {\n            return null;\n          }\n          break;\n        case Token.SET:\n          if (valueType.isFunctionType()) {\n            // SET must always return a function type.\n            FunctionType fntype = ((FunctionType) valueType);\n            Node param = fntype.getParametersNode().getFirstChild();\n            // SET function must always have one parameter.\n            valueType = param.getJSType();\n          } else {\n            return null;\n          }\n          break;\n      }",
      "info" : "SwitchStatement[61107-61873]:SwitchStatement[61244-62010]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[61140-61155]:SwitchCase[61277-61292]"
    }, {
      "left" : "if (valueType.isFunctionType())",
      "right" : "if (valueType.isFunctionType())",
      "info" : "IfStatement[61219-61418]:IfStatement[61356-61555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61251-61374]:Block[61388-61511]"
    }, {
      "left" : "FunctionType fntype = ((FunctionType) valueType);",
      "right" : "FunctionType fntype = ((FunctionType) valueType);",
      "info" : "VariableDeclarationStatement[61265-61314]:VariableDeclarationStatement[61402-61451]"
    }, {
      "left" : "valueType = fntype.getReturnType();",
      "right" : "valueType = fntype.getReturnType();",
      "info" : "ExpressionStatement[61327-61362]:ExpressionStatement[61464-61499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61380-61418]:Block[61517-61555]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[61394-61406]:ReturnStatement[61531-61543]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61429-61435]:BreakStatement[61566-61572]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[61444-61459]:SwitchCase[61581-61596]"
    }, {
      "left" : "if (valueType.isFunctionType())",
      "right" : "if (valueType.isFunctionType())",
      "info" : "IfStatement[61470-61848]:IfStatement[61607-61985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61502-61804]:Block[61639-61941]"
    }, {
      "left" : "FunctionType fntype = ((FunctionType) valueType);",
      "right" : "FunctionType fntype = ((FunctionType) valueType);",
      "info" : "VariableDeclarationStatement[61571-61620]:VariableDeclarationStatement[61708-61757]"
    }, {
      "left" : "Node param = fntype.getParametersNode().getFirstChild();",
      "right" : "Node param = fntype.getParametersNode().getFirstChild();",
      "info" : "VariableDeclarationStatement[61633-61689]:VariableDeclarationStatement[61770-61826]"
    }, {
      "left" : "valueType = param.getJSType();",
      "right" : "valueType = param.getJSType();",
      "info" : "ExpressionStatement[61762-61792]:ExpressionStatement[61899-61929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61810-61848]:Block[61947-61985]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[61824-61836]:ReturnStatement[61961-61973]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61859-61865]:BreakStatement[61996-62002]"
    }, {
      "left" : "return valueType;",
      "right" : "return valueType;",
      "info" : "ReturnStatement[61884-61901]:ReturnStatement[62021-62038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62116-62240]:Block[62253-62377]"
    }, {
      "left" : "switch (node.getType()) {\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
      "right" : "switch (node.getType()) {\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
      "info" : "SwitchStatement[62122-62218]:SwitchStatement[62259-62355]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[62154-62169]:SwitchCase[62291-62306]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[62176-62191]:SwitchCase[62313-62328]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[62200-62212]:ReturnStatement[62337-62349]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62223-62236]:ReturnStatement[62360-62373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62547-64157]:Block[62684-64294]"
    }, {
      "left" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "right" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "info" : "SwitchStatement[62553-64153]:SwitchStatement[62690-64290]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[62579-62596]:SwitchCase[62716-62733]"
    }, {
      "left" : "return \"|\";",
      "right" : "return \"|\";",
      "info" : "ReturnStatement[62597-62608]:ReturnStatement[62734-62745]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[62615-62629]:SwitchCase[62752-62766]"
    }, {
      "left" : "return \"||\";",
      "right" : "return \"||\";",
      "info" : "ReturnStatement[62630-62642]:ReturnStatement[62767-62779]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[62649-62667]:SwitchCase[62786-62804]"
    }, {
      "left" : "return \"^\";",
      "right" : "return \"^\";",
      "info" : "ReturnStatement[62668-62679]:ReturnStatement[62805-62816]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[62686-62701]:SwitchCase[62823-62838]"
    }, {
      "left" : "return \"&&\";",
      "right" : "return \"&&\";",
      "info" : "ReturnStatement[62702-62714]:ReturnStatement[62839-62851]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[62721-62739]:SwitchCase[62858-62876]"
    }, {
      "left" : "return \"&\";",
      "right" : "return \"&\";",
      "info" : "ReturnStatement[62740-62751]:ReturnStatement[62877-62888]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[62758-62774]:SwitchCase[62895-62911]"
    }, {
      "left" : "return \"===\";",
      "right" : "return \"===\";",
      "info" : "ReturnStatement[62775-62788]:ReturnStatement[62912-62925]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[62795-62809]:SwitchCase[62932-62946]"
    }, {
      "left" : "return \"==\";",
      "right" : "return \"==\";",
      "info" : "ReturnStatement[62810-62822]:ReturnStatement[62947-62959]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[62829-62844]:SwitchCase[62966-62981]"
    }, {
      "left" : "return \"!\";",
      "right" : "return \"!\";",
      "info" : "ReturnStatement[62845-62856]:ReturnStatement[62982-62993]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[62863-62877]:SwitchCase[63000-63014]"
    }, {
      "left" : "return \"!=\";",
      "right" : "return \"!=\";",
      "info" : "ReturnStatement[62878-62890]:ReturnStatement[63015-63027]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[62897-62913]:SwitchCase[63034-63050]"
    }, {
      "left" : "return \"!==\";",
      "right" : "return \"!==\";",
      "info" : "ReturnStatement[62914-62927]:ReturnStatement[63051-63064]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[62934-62949]:SwitchCase[63071-63086]"
    }, {
      "left" : "return \"<<\";",
      "right" : "return \"<<\";",
      "info" : "ReturnStatement[62950-62962]:ReturnStatement[63087-63099]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[62969-62983]:SwitchCase[63106-63120]"
    }, {
      "left" : "return \"in\";",
      "right" : "return \"in\";",
      "info" : "ReturnStatement[62984-62996]:ReturnStatement[63121-63133]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[63003-63017]:SwitchCase[63140-63154]"
    }, {
      "left" : "return \"<=\";",
      "right" : "return \"<=\";",
      "info" : "ReturnStatement[63018-63030]:ReturnStatement[63155-63167]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[63037-63051]:SwitchCase[63174-63188]"
    }, {
      "left" : "return \"<\";",
      "right" : "return \"<\";",
      "info" : "ReturnStatement[63052-63063]:ReturnStatement[63189-63200]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[63070-63086]:SwitchCase[63207-63223]"
    }, {
      "left" : "return \">>>\";",
      "right" : "return \">>>\";",
      "info" : "ReturnStatement[63087-63100]:ReturnStatement[63224-63237]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[63107-63122]:SwitchCase[63244-63259]"
    }, {
      "left" : "return \">>\";",
      "right" : "return \">>\";",
      "info" : "ReturnStatement[63123-63135]:ReturnStatement[63260-63272]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[63142-63156]:SwitchCase[63279-63293]"
    }, {
      "left" : "return \">=\";",
      "right" : "return \">=\";",
      "info" : "ReturnStatement[63157-63169]:ReturnStatement[63294-63306]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[63176-63190]:SwitchCase[63313-63327]"
    }, {
      "left" : "return \">\";",
      "right" : "return \">\";",
      "info" : "ReturnStatement[63191-63202]:ReturnStatement[63328-63339]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[63209-63224]:SwitchCase[63346-63361]"
    }, {
      "left" : "return \"*\";",
      "right" : "return \"*\";",
      "info" : "ReturnStatement[63225-63236]:ReturnStatement[63362-63373]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[63243-63258]:SwitchCase[63380-63395]"
    }, {
      "left" : "return \"/\";",
      "right" : "return \"/\";",
      "info" : "ReturnStatement[63259-63270]:ReturnStatement[63396-63407]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[63277-63292]:SwitchCase[63414-63429]"
    }, {
      "left" : "return \"%\";",
      "right" : "return \"%\";",
      "info" : "ReturnStatement[63293-63304]:ReturnStatement[63430-63441]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[63311-63329]:SwitchCase[63448-63466]"
    }, {
      "left" : "return \"~\";",
      "right" : "return \"~\";",
      "info" : "ReturnStatement[63330-63341]:ReturnStatement[63467-63478]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[63348-63363]:SwitchCase[63485-63500]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[63364-63375]:ReturnStatement[63501-63512]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[63382-63397]:SwitchCase[63519-63534]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[63398-63409]:ReturnStatement[63535-63546]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[63416-63431]:SwitchCase[63553-63568]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[63432-63443]:ReturnStatement[63569-63580]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[63450-63465]:SwitchCase[63587-63602]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[63466-63477]:ReturnStatement[63603-63614]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[63484-63502]:SwitchCase[63621-63639]"
    }, {
      "left" : "return \"=\";",
      "right" : "return \"=\";",
      "info" : "ReturnStatement[63503-63514]:ReturnStatement[63640-63651]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[63521-63545]:SwitchCase[63658-63682]"
    }, {
      "left" : "return \"|=\";",
      "right" : "return \"|=\";",
      "info" : "ReturnStatement[63546-63558]:ReturnStatement[63683-63695]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[63565-63590]:SwitchCase[63702-63727]"
    }, {
      "left" : "return \"^=\";",
      "right" : "return \"^=\";",
      "info" : "ReturnStatement[63591-63603]:ReturnStatement[63728-63740]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[63610-63635]:SwitchCase[63747-63772]"
    }, {
      "left" : "return \"&=\";",
      "right" : "return \"&=\";",
      "info" : "ReturnStatement[63636-63648]:ReturnStatement[63773-63785]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[63655-63677]:SwitchCase[63792-63814]"
    }, {
      "left" : "return \"<<=\";",
      "right" : "return \"<<=\";",
      "info" : "ReturnStatement[63678-63691]:ReturnStatement[63815-63828]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[63698-63720]:SwitchCase[63835-63857]"
    }, {
      "left" : "return \">>=\";",
      "right" : "return \">>=\";",
      "info" : "ReturnStatement[63721-63734]:ReturnStatement[63858-63871]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[63741-63764]:SwitchCase[63878-63901]"
    }, {
      "left" : "return \">>>=\";",
      "right" : "return \">>>=\";",
      "info" : "ReturnStatement[63765-63779]:ReturnStatement[63902-63916]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[63786-63808]:SwitchCase[63923-63945]"
    }, {
      "left" : "return \"+=\";",
      "right" : "return \"+=\";",
      "info" : "ReturnStatement[63809-63821]:ReturnStatement[63946-63958]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[63828-63850]:SwitchCase[63965-63987]"
    }, {
      "left" : "return \"-=\";",
      "right" : "return \"-=\";",
      "info" : "ReturnStatement[63851-63863]:ReturnStatement[63988-64000]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[63870-63892]:SwitchCase[64007-64029]"
    }, {
      "left" : "return \"*=\";",
      "right" : "return \"*=\";",
      "info" : "ReturnStatement[63893-63905]:ReturnStatement[64030-64042]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[63912-63934]:SwitchCase[64049-64071]"
    }, {
      "left" : "return \"/=\";",
      "right" : "return \"/=\";",
      "info" : "ReturnStatement[63935-63947]:ReturnStatement[64072-64084]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[63954-63976]:SwitchCase[64091-64113]"
    }, {
      "left" : "return \"%=\";",
      "right" : "return \"%=\";",
      "info" : "ReturnStatement[63977-63989]:ReturnStatement[64114-64126]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[63996-64012]:SwitchCase[64133-64149]"
    }, {
      "left" : "return \"void\";",
      "right" : "return \"void\";",
      "info" : "ReturnStatement[64013-64027]:ReturnStatement[64150-64164]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[64034-64052]:SwitchCase[64171-64189]"
    }, {
      "left" : "return \"typeof\";",
      "right" : "return \"typeof\";",
      "info" : "ReturnStatement[64053-64069]:ReturnStatement[64190-64206]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[64076-64098]:SwitchCase[64213-64235]"
    }, {
      "left" : "return \"instanceof\";",
      "right" : "return \"instanceof\";",
      "info" : "ReturnStatement[64099-64119]:ReturnStatement[64236-64256]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[64126-64134]:SwitchCase[64263-64271]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[64135-64147]:ReturnStatement[64272-64284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64477-64664]:Block[64614-64801]"
    }, {
      "left" : "String res = opToStr(operator);",
      "right" : "String res = opToStr(operator);",
      "info" : "VariableDeclarationStatement[64483-64514]:VariableDeclarationStatement[64620-64651]"
    }, {
      "left" : "if (res == null)",
      "right" : "if (res == null)",
      "info" : "IfStatement[64519-64644]:IfStatement[64656-64781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64536-64644]:Block[64673-64781]"
    }, {
      "left" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "right" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "info" : "ThrowStatement[64544-64638]:ThrowStatement[64681-64775]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[64649-64660]:ReturnStatement[64786-64797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64899-64973]:Block[65036-65110]"
    }, {
      "left" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[64905-64969]:ReturnStatement[65042-65106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65110-65183]:Block[65247-65320]"
    }, {
      "left" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "right" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[65116-65179]:ReturnStatement[65253-65316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65454-65935]:Block[65591-66072]"
    }, {
      "left" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "right" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "info" : "VariableDeclarationStatement[65460-65516]:VariableDeclarationStatement[65597-65653]"
    }, {
      "left" : "if (vars.isEmpty())",
      "right" : "if (vars.isEmpty())",
      "info" : "IfStatement[65521-65562]:IfStatement[65658-65699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65541-65562]:Block[65678-65699]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[65549-65556]:ReturnStatement[65686-65693]"
    }, {
      "left" : "Node parent = getAddingRoot(branch);",
      "right" : "Node parent = getAddingRoot(branch);",
      "info" : "VariableDeclarationStatement[65568-65604]:VariableDeclarationStatement[65705-65741]"
    }, {
      "left" : "for (Node nameNode : vars)",
      "right" : "for (Node nameNode : vars)",
      "info" : "EnhancedForStatement[65609-65931]:EnhancedForStatement[65746-66068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65636-65931]:Block[65773-66068]"
    }, {
      "left" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
      "right" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
      "info" : "VariableDeclarationStatement[65644-65832]:VariableDeclarationStatement[65781-65969]"
    }, {
      "left" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "right" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "info" : "ExpressionStatement[65839-65890]:ExpressionStatement[65976-66027]"
    }, {
      "left" : "parent.addChildToFront(var);",
      "right" : "parent.addChildToFront(var);",
      "info" : "ExpressionStatement[65897-65925]:ExpressionStatement[66034-66062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66110-66240]:Block[66247-66377]"
    }, {
      "left" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[66116-66236]:IfStatement[66253-66373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66166-66236]:Block[66303-66373]"
    }, {
      "left" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[66174-66230]:ExpressionStatement[66311-66367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66403-67066]:Block[66540-67203]"
    }, {
      "left" : "Node addingRoot = null;",
      "right" : "Node addingRoot = null;",
      "info" : "VariableDeclarationStatement[66409-66432]:VariableDeclarationStatement[66546-66569]"
    }, {
      "left" : "Node ancestor = n;",
      "right" : "Node ancestor = n;",
      "info" : "VariableDeclarationStatement[66437-66455]:VariableDeclarationStatement[66574-66592]"
    }, {
      "left" : "while (null != (ancestor = ancestor.getParent()))",
      "right" : "while (null != (ancestor = ancestor.getParent()))",
      "info" : "WhileStatement[66460-66746]:WhileStatement[66597-66883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66510-66746]:Block[66647-66883]"
    }, {
      "left" : "int type = ancestor.getType();",
      "right" : "int type = ancestor.getType();",
      "info" : "VariableDeclarationStatement[66518-66548]:VariableDeclarationStatement[66655-66685]"
    }, {
      "left" : "if (type == Token.SCRIPT)",
      "right" : "if (type == Token.SCRIPT)",
      "info" : "IfStatement[66555-66740]:IfStatement[66692-66877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66581-66636]:Block[66718-66773]"
    }, {
      "left" : "addingRoot = ancestor;",
      "right" : "addingRoot = ancestor;",
      "info" : "ExpressionStatement[66591-66613]:ExpressionStatement[66728-66750]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[66622-66628]:BreakStatement[66759-66765]"
    }, {
      "left" : "if (type == Token.FUNCTION)",
      "right" : "if (type == Token.FUNCTION)",
      "info" : "IfStatement[66642-66740]:IfStatement[66779-66877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66670-66740]:Block[66807-66877]"
    }, {
      "left" : "addingRoot = ancestor.getLastChild();",
      "right" : "addingRoot = ancestor.getLastChild();",
      "info" : "ExpressionStatement[66680-66717]:ExpressionStatement[66817-66854]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[66726-66732]:BreakStatement[66863-66869]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
      "right" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
      "info" : "ExpressionStatement[66799-66909]:ExpressionStatement[66936-67046]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
      "right" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
      "info" : "ExpressionStatement[66914-67039]:ExpressionStatement[67051-67176]"
    }, {
      "left" : "return addingRoot;",
      "right" : "return addingRoot;",
      "info" : "ReturnStatement[67044-67062]:ReturnStatement[67181-67199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67244-67647]:Block[67381-67784]"
    }, {
      "left" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
      "right" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
      "info" : "VariableDeclarationStatement[67250-67307]:VariableDeclarationStatement[67387-67444]"
    }, {
      "left" : "for (Node param : params)",
      "right" : "for (Node param : params)",
      "info" : "EnhancedForStatement[67312-67389]:EnhancedForStatement[67449-67526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67338-67389]:Block[67475-67526]"
    }, {
      "left" : "parameterParen.addChildToBack(param);",
      "right" : "parameterParen.addChildToBack(param);",
      "info" : "ExpressionStatement[67346-67383]:ExpressionStatement[67483-67520]"
    }, {
      "left" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
      "right" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
      "info" : "VariableDeclarationStatement[67394-67451]:VariableDeclarationStatement[67531-67588]"
    }, {
      "left" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
      "right" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
      "info" : "ExpressionStatement[67456-67542]:ExpressionStatement[67593-67679]"
    }, {
      "left" : "function.addChildToBack(parameterParen);",
      "right" : "function.addChildToBack(parameterParen);",
      "info" : "ExpressionStatement[67547-67587]:ExpressionStatement[67684-67724]"
    }, {
      "left" : "function.addChildToBack(body);",
      "right" : "function.addChildToBack(body);",
      "info" : "ExpressionStatement[67592-67622]:ExpressionStatement[67729-67759]"
    }, {
      "left" : "return function;",
      "right" : "return function;",
      "info" : "ReturnStatement[67627-67643]:ReturnStatement[67764-67780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68046-68806]:Block[68183-68943]"
    }, {
      "left" : "int endPos = name.indexOf('.');",
      "right" : "int endPos = name.indexOf('.');",
      "info" : "VariableDeclarationStatement[68052-68083]:VariableDeclarationStatement[68189-68220]"
    }, {
      "left" : "if (endPos == -1)",
      "right" : "if (endPos == -1)",
      "info" : "IfStatement[68088-68169]:IfStatement[68225-68306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68106-68169]:Block[68243-68306]"
    }, {
      "left" : "return newName(convention, name, lineno, charno);",
      "right" : "return newName(convention, name, lineno, charno);",
      "info" : "ReturnStatement[68114-68163]:ReturnStatement[68251-68300]"
    }, {
      "left" : "Node node = newName(\n        convention, name.substring(0, endPos), lineno, charno);",
      "right" : "Node node = newName(\n        convention, name.substring(0, endPos), lineno, charno);",
      "info" : "VariableDeclarationStatement[68174-68258]:VariableDeclarationStatement[68311-68395]"
    }, {
      "left" : "int startPos;",
      "right" : "int startPos;",
      "info" : "VariableDeclarationStatement[68263-68276]:VariableDeclarationStatement[68400-68413]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[68281-68784]:DoStatement[68418-68921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68284-68762]:Block[68421-68899]"
    }, {
      "left" : "startPos = endPos + 1;",
      "right" : "startPos = endPos + 1;",
      "info" : "ExpressionStatement[68292-68314]:ExpressionStatement[68429-68451]"
    }, {
      "left" : "endPos = name.indexOf('.', startPos);",
      "right" : "endPos = name.indexOf('.', startPos);",
      "info" : "ExpressionStatement[68321-68358]:ExpressionStatement[68458-68495]"
    }, {
      "left" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "right" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "info" : "VariableDeclarationStatement[68365-68498]:VariableDeclarationStatement[68502-68635]"
    }, {
      "left" : "Node propNode = Node.newString(Token.STRING, part, lineno, charno);",
      "right" : "Node propNode = Node.newString(Token.STRING, part, lineno, charno);",
      "info" : "VariableDeclarationStatement[68505-68572]:VariableDeclarationStatement[68642-68709]"
    }, {
      "left" : "if (convention.isConstantKey(part))",
      "right" : "if (convention.isConstantKey(part))",
      "info" : "IfStatement[68579-68686]:IfStatement[68716-68823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68615-68686]:Block[68752-68823]"
    }, {
      "left" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[68625-68678]:ExpressionStatement[68762-68815]"
    }, {
      "left" : "node = new Node(Token.GETPROP, node, propNode, lineno, charno);",
      "right" : "node = new Node(Token.GETPROP, node, propNode, lineno, charno);",
      "info" : "ExpressionStatement[68693-68756]:ExpressionStatement[68830-68893]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[68790-68802]:ReturnStatement[68927-68939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69462-69604]:Block[69599-69741]"
    }, {
      "left" : "Node node = newQualifiedNameNode(convention, name, -1, -1);",
      "right" : "Node node = newQualifiedNameNode(convention, name, -1, -1);",
      "info" : "VariableDeclarationStatement[69468-69527]:VariableDeclarationStatement[69605-69664]"
    }, {
      "left" : "setDebugInformation(node, basisNode, originalName);",
      "right" : "setDebugInformation(node, basisNode, originalName);",
      "info" : "ExpressionStatement[69532-69583]:ExpressionStatement[69669-69720]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[69588-69600]:ReturnStatement[69725-69737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69748-70019]:Block[69885-70156]"
    }, {
      "left" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
      "right" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
      "info" : "ForStatement[69754-70015]:ForStatement[69891-70152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69831-70015]:Block[69968-70152]"
    }, {
      "left" : "int type = current.getType();",
      "right" : "int type = current.getType();",
      "info" : "VariableDeclarationStatement[69839-69868]:VariableDeclarationStatement[69976-70005]"
    }, {
      "left" : "if (type == Token.NAME || type == Token.THIS)",
      "right" : "if (type == Token.NAME || type == Token.THIS)",
      "info" : "IfStatement[69875-69954]:IfStatement[70012-70091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69921-69954]:Block[70058-70091]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[69931-69946]:ReturnStatement[70068-70083]"
    }, {
      "left" : "Preconditions.checkState(type == Token.GETPROP);",
      "right" : "Preconditions.checkState(type == Token.GETPROP);",
      "info" : "ExpressionStatement[69961-70009]:ExpressionStatement[70098-70146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70445-70554]:Block[70582-70691]"
    }, {
      "left" : "node.copyInformationFromForTree(basisNode);",
      "right" : "node.copyInformationFromForTree(basisNode);",
      "info" : "ExpressionStatement[70451-70494]:ExpressionStatement[70588-70631]"
    }, {
      "left" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[70499-70550]:ExpressionStatement[70636-70687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70659-70860]:Block[70796-70997]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, name, lineno, charno);",
      "right" : "Node nameNode = Node.newString(Token.NAME, name, lineno, charno);",
      "info" : "VariableDeclarationStatement[70665-70730]:VariableDeclarationStatement[70802-70867]"
    }, {
      "left" : "if (convention.isConstant(name))",
      "right" : "if (convention.isConstant(name))",
      "info" : "IfStatement[70735-70835]:IfStatement[70872-70972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70768-70835]:Block[70905-70972]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[70776-70829]:ExpressionStatement[70913-70966]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[70840-70856]:ReturnStatement[70977-70993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71275-71508]:Block[71412-71645]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, name);",
      "right" : "Node nameNode = Node.newString(Token.NAME, name);",
      "info" : "VariableDeclarationStatement[71281-71330]:VariableDeclarationStatement[71418-71467]"
    }, {
      "left" : "if (convention.isConstantKey(name))",
      "right" : "if (convention.isConstantKey(name))",
      "info" : "IfStatement[71335-71438]:IfStatement[71472-71575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71371-71438]:Block[71508-71575]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[71379-71432]:ExpressionStatement[71516-71569]"
    }, {
      "left" : "nameNode.copyInformationFrom(basisNode);",
      "right" : "nameNode.copyInformationFrom(basisNode);",
      "info" : "ExpressionStatement[71443-71483]:ExpressionStatement[71580-71620]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[71488-71504]:ReturnStatement[71625-71641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72137-72281]:Block[72274-72418]"
    }, {
      "left" : "Node nameNode = newName(convention, name, basisNode);",
      "right" : "Node nameNode = newName(convention, name, basisNode);",
      "info" : "VariableDeclarationStatement[72143-72196]:VariableDeclarationStatement[72280-72333]"
    }, {
      "left" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[72201-72256]:ExpressionStatement[72338-72393]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[72261-72277]:ReturnStatement[72398-72414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72914-73152]:Block[73051-73289]"
    }, {
      "left" : "char LARGEST_BASIC_LATIN = 0x7f;",
      "right" : "char LARGEST_BASIC_LATIN = 0x7f;",
      "info" : "VariableDeclarationStatement[72920-72952]:VariableDeclarationStatement[73057-73089]"
    }, {
      "left" : "int len = s.length();",
      "right" : "int len = s.length();",
      "info" : "VariableDeclarationStatement[72957-72978]:VariableDeclarationStatement[73094-73115]"
    }, {
      "left" : "for (int index = 0; index < len; index++)",
      "right" : "for (int index = 0; index < len; index++)",
      "info" : "ForStatement[72983-73131]:ForStatement[73120-73268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73025-73131]:Block[73162-73268]"
    }, {
      "left" : "char c = s.charAt(index);",
      "right" : "char c = s.charAt(index);",
      "info" : "VariableDeclarationStatement[73033-73058]:VariableDeclarationStatement[73170-73195]"
    }, {
      "left" : "if (c > LARGEST_BASIC_LATIN)",
      "right" : "if (c > LARGEST_BASIC_LATIN)",
      "info" : "IfStatement[73065-73125]:IfStatement[73202-73262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73094-73125]:Block[73231-73262]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[73104-73117]:ReturnStatement[73241-73254]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[73136-73148]:ReturnStatement[73273-73285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73356-73817]:Block[73493-73954]"
    }, {
      "left" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
      "right" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
      "info" : "ReturnStatement[73362-73813]:ReturnStatement[73499-73950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73967-74254]:Block[74104-74391]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[73975-74248]:IfStatement[74112-74385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74006-74248]:Block[74143-74385]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[74016-74044]:VariableDeclarationStatement[74153-74181]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.VAR)",
      "right" : "if (parent != null && parent.getType() == Token.VAR)",
      "info" : "IfStatement[74053-74240]:IfStatement[74190-74377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74106-74240]:Block[74243-74377]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[74118-74146]:VariableDeclarationStatement[74255-74283]"
    }, {
      "left" : "if (!vars.containsKey(name))",
      "right" : "if (!vars.containsKey(name))",
      "info" : "IfStatement[74157-74230]:IfStatement[74294-74367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74186-74230]:Block[74323-74367]"
    }, {
      "left" : "vars.put(name, n);",
      "right" : "vars.put(name, n);",
      "info" : "ExpressionStatement[74200-74218]:ExpressionStatement[74337-74355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74421-74592]:Block[74558-74729]"
    }, {
      "left" : "VarCollector collector = new VarCollector();",
      "right" : "VarCollector collector = new VarCollector();",
      "info" : "VariableDeclarationStatement[74427-74471]:VariableDeclarationStatement[74564-74608]"
    }, {
      "left" : "visitPreOrder(\n        root,\n        collector,\n        MATCH_NOT_FUNCTION);",
      "right" : "visitPreOrder(\n        root,\n        collector,\n        MATCH_NOT_FUNCTION);",
      "info" : "ExpressionStatement[74476-74552]:ExpressionStatement[74613-74689]"
    }, {
      "left" : "return collector.vars.values();",
      "right" : "return collector.vars.values();",
      "info" : "ReturnStatement[74557-74588]:ReturnStatement[74694-74725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74768-74894]:Block[74905-75031]"
    }, {
      "left" : "if (!isExprAssign(n))",
      "right" : "if (!isExprAssign(n))",
      "info" : "IfStatement[74774-74823]:IfStatement[74911-74960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74796-74823]:Block[74933-74960]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[74804-74817]:ReturnStatement[74941-74954]"
    }, {
      "left" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "right" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "info" : "ReturnStatement[74828-74890]:ReturnStatement[74965-75027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74941-75134]:Block[75078-75271]"
    }, {
      "left" : "String lhsString = n.getQualifiedName();",
      "right" : "String lhsString = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[74947-74987]:VariableDeclarationStatement[75084-75124]"
    }, {
      "left" : "if (lhsString == null)",
      "right" : "if (lhsString == null)",
      "info" : "IfStatement[74992-75042]:IfStatement[75129-75179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75015-75042]:Block[75152-75179]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[75023-75036]:ReturnStatement[75160-75173]"
    }, {
      "left" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "right" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[75047-75099]:VariableDeclarationStatement[75184-75236]"
    }, {
      "left" : "return prototypeIdx != -1;",
      "right" : "return prototypeIdx != -1;",
      "info" : "ReturnStatement[75104-75130]:ReturnStatement[75241-75267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75260-75497]:Block[75397-75634]"
    }, {
      "left" : "Node cur = qName;",
      "right" : "Node cur = qName;",
      "info" : "VariableDeclarationStatement[75266-75283]:VariableDeclarationStatement[75403-75420]"
    }, {
      "left" : "while (isGetProp(cur))",
      "right" : "while (isGetProp(cur))",
      "info" : "WhileStatement[75288-75476]:WhileStatement[75425-75613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75311-75476]:Block[75448-75613]"
    }, {
      "left" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[75319-75470]:IfStatement[75456-75607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75375-75420]:Block[75512-75557]"
    }, {
      "left" : "return cur.getFirstChild();",
      "right" : "return cur.getFirstChild();",
      "info" : "ReturnStatement[75385-75412]:ReturnStatement[75522-75549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75426-75470]:Block[75563-75607]"
    }, {
      "left" : "cur = cur.getFirstChild();",
      "right" : "cur = cur.getFirstChild();",
      "info" : "ExpressionStatement[75436-75462]:ExpressionStatement[75573-75599]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[75481-75493]:ReturnStatement[75618-75630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75638-75859]:Block[75775-75996]"
    }, {
      "left" : "String qNameStr = qName.getQualifiedName();",
      "right" : "String qNameStr = qName.getQualifiedName();",
      "info" : "VariableDeclarationStatement[75644-75687]:VariableDeclarationStatement[75781-75824]"
    }, {
      "left" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "right" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[75692-75747]:VariableDeclarationStatement[75829-75884]"
    }, {
      "left" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "right" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "info" : "VariableDeclarationStatement[75752-75811]:VariableDeclarationStatement[75889-75948]"
    }, {
      "left" : "return qNameStr.substring(memberIndex);",
      "right" : "return qNameStr.substring(memberIndex);",
      "info" : "ReturnStatement[75816-75855]:ReturnStatement[75953-75992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75994-76174]:Block[76131-76311]"
    }, {
      "left" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
      "right" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
      "info" : "VariableDeclarationStatement[76000-76052]:VariableDeclarationStatement[76137-76189]"
    }, {
      "left" : "if (srcReferenceNode != null)",
      "right" : "if (srcReferenceNode != null)",
      "info" : "IfStatement[76057-76153]:IfStatement[76194-76290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76087-76153]:Block[76224-76290]"
    }, {
      "left" : "node.copyInformationFromForTree(srcReferenceNode);",
      "right" : "node.copyInformationFromForTree(srcReferenceNode);",
      "info" : "ExpressionStatement[76097-76147]:ExpressionStatement[76234-76284]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[76158-76170]:ReturnStatement[76295-76307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76317-76647]:Block[76454-76784]"
    }, {
      "left" : "Node nodeName = Node.newString(Token.NAME, name);",
      "right" : "Node nodeName = Node.newString(Token.NAME, name);",
      "info" : "VariableDeclarationStatement[76323-76372]:VariableDeclarationStatement[76460-76509]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[76377-76541]:IfStatement[76514-76678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76396-76541]:Block[76533-76678]"
    }, {
      "left" : "Preconditions.checkState(value.getNext() == null);",
      "right" : "Preconditions.checkState(value.getNext() == null);",
      "info" : "ExpressionStatement[76404-76454]:ExpressionStatement[76541-76591]"
    }, {
      "left" : "nodeName.addChildToBack(value);",
      "right" : "nodeName.addChildToBack(value);",
      "info" : "ExpressionStatement[76461-76492]:ExpressionStatement[76598-76629]"
    }, {
      "left" : "nodeName.copyInformationFrom(value);",
      "right" : "nodeName.copyInformationFrom(value);",
      "info" : "ExpressionStatement[76499-76535]:ExpressionStatement[76636-76672]"
    }, {
      "left" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
      "right" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
      "info" : "VariableDeclarationStatement[76546-76626]:VariableDeclarationStatement[76683-76763]"
    }, {
      "left" : "return var;",
      "right" : "return var;",
      "info" : "ReturnStatement[76632-76643]:ReturnStatement[76769-76780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76846-76877]:Block[76983-77014]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[76854-76871]:ExpressionStatement[76991-77008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76912-76999]:Block[77049-77136]"
    }, {
      "left" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
      "right" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
      "info" : "ReturnStatement[76920-76993]:ReturnStatement[77057-77130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77183-77214]:Block[77320-77351]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[77191-77208]:ExpressionStatement[77328-77345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77249-77290]:Block[77386-77427]"
    }, {
      "left" : "return n.getType() == type;",
      "right" : "return n.getType() == type;",
      "info" : "ReturnStatement[77257-77284]:ReturnStatement[77394-77421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77463-77537]:Block[77600-77674]"
    }, {
      "left" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
      "right" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
      "info" : "ReturnStatement[77471-77531]:ReturnStatement[77608-77668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77710-77746]:Block[77847-77883]"
    }, {
      "left" : "return !isFunction(n);",
      "right" : "return !isFunction(n);",
      "info" : "ReturnStatement[77718-77740]:ReturnStatement[77855-77877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78015-78234]:Block[78152-78371]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[78023-78051]:VariableDeclarationStatement[78160-78188]"
    }, {
      "left" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
      "right" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
      "info" : "ReturnStatement[78058-78228]:ReturnStatement[78195-78365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78431-78510]:Block[78568-78647]"
    }, {
      "left" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[78437-78506]:ReturnStatement[78574-78643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78751-78825]:Block[78888-78962]"
    }, {
      "left" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "right" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "info" : "ReturnStatement[78757-78821]:ReturnStatement[78894-78958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78960-79037]:Block[79097-79174]"
    }, {
      "left" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "right" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[78966-79033]:ReturnStatement[79103-79170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79191-79288]:Block[79328-79425]"
    }, {
      "left" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
      "right" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[79197-79284]:ReturnStatement[79334-79421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79516-79819]:Block[79653-79956]"
    }, {
      "left" : "if (pred.apply(node))",
      "right" : "if (pred.apply(node))",
      "info" : "IfStatement[79522-79570]:IfStatement[79659-79707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79544-79570]:Block[79681-79707]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[79552-79564]:ReturnStatement[79689-79701]"
    }, {
      "left" : "if (!traverseChildrenPred.apply(node))",
      "right" : "if (!traverseChildrenPred.apply(node))",
      "info" : "IfStatement[79576-79642]:IfStatement[79713-79779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79615-79642]:Block[79752-79779]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[79623-79636]:ReturnStatement[79760-79773]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[79648-79796]:ForStatement[79785-79933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79712-79796]:Block[79849-79933]"
    }, {
      "left" : "if (has(c, pred, traverseChildrenPred))",
      "right" : "if (has(c, pred, traverseChildrenPred))",
      "info" : "IfStatement[79720-79790]:IfStatement[79857-79927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79760-79790]:Block[79897-79927]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[79770-79782]:ReturnStatement[79907-79919]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[79802-79815]:ReturnStatement[79939-79952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80031-80304]:Block[80168-80441]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[80037-80051]:VariableDeclarationStatement[80174-80188]"
    }, {
      "left" : "if (pred.apply(n))",
      "right" : "if (pred.apply(n))",
      "info" : "IfStatement[80057-80098]:IfStatement[80194-80235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80076-80098]:Block[80213-80235]"
    }, {
      "left" : "total++;",
      "right" : "total++;",
      "info" : "ExpressionStatement[80084-80092]:ExpressionStatement[80221-80229]"
    }, {
      "left" : "if (traverseChildrenPred.apply(n))",
      "right" : "if (traverseChildrenPred.apply(n))",
      "info" : "IfStatement[80104-80281]:IfStatement[80241-80418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80139-80281]:Block[80276-80418]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[80147-80275]:ForStatement[80284-80412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80208-80275]:Block[80345-80412]"
    }, {
      "left" : "total += getCount(c, pred, traverseChildrenPred);",
      "right" : "total += getCount(c, pred, traverseChildrenPred);",
      "info" : "ExpressionStatement[80218-80267]:ExpressionStatement[80355-80404]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[80287-80300]:ReturnStatement[80424-80437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80682-80898]:Block[80819-81035]"
    }, {
      "left" : "vistor.visit(node);",
      "right" : "vistor.visit(node);",
      "info" : "ExpressionStatement[80688-80707]:ExpressionStatement[80825-80844]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[80713-80894]:IfStatement[80850-81031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80751-80894]:Block[80888-81031]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[80759-80888]:ForStatement[80896-81025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80823-80888]:Block[80960-81025]"
    }, {
      "left" : "visitPreOrder(c, vistor, traverseChildrenPred);",
      "right" : "visitPreOrder(c, vistor, traverseChildrenPred);",
      "info" : "ExpressionStatement[80833-80880]:ExpressionStatement[80970-81017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81142-81359]:Block[81279-81496]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[81148-81330]:IfStatement[81285-81467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81186-81330]:Block[81323-81467]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[81194-81324]:ForStatement[81331-81461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81258-81324]:Block[81395-81461]"
    }, {
      "left" : "visitPostOrder(c, vistor, traverseChildrenPred);",
      "right" : "visitPostOrder(c, vistor, traverseChildrenPred);",
      "info" : "ExpressionStatement[81268-81316]:ExpressionStatement[81405-81453]"
    }, {
      "left" : "vistor.visit(node);",
      "right" : "vistor.visit(node);",
      "info" : "ExpressionStatement[81336-81355]:ExpressionStatement[81473-81492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81462-81561]:Block[81599-81698]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "info" : "ExpressionStatement[81468-81522]:ExpressionStatement[81605-81659]"
    }, {
      "left" : "return n.getChildCount() == 3;",
      "right" : "return n.getChildCount() == 3;",
      "info" : "ReturnStatement[81527-81557]:ReturnStatement[81664-81694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81689-81793]:Block[81826-81930]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "info" : "ExpressionStatement[81695-81749]:ExpressionStatement[81832-81886]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[81754-81789]:ReturnStatement[81891-81926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81944-82084]:Block[82081-82221]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[81950-82006]:ExpressionStatement[82087-82143]"
    }, {
      "left" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
      "right" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
      "info" : "ReturnStatement[82011-82080]:ReturnStatement[82148-82217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82248-82433]:Block[82385-82570]"
    }, {
      "left" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[82320-82384]:ExpressionStatement[82457-82521]"
    }, {
      "left" : "return fnNode.getFirstChild().getNext();",
      "right" : "return fnNode.getFirstChild().getNext();",
      "info" : "ReturnStatement[82389-82429]:ReturnStatement[82526-82566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83180-83240]:Block[83317-83377]"
    }, {
      "left" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "right" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "info" : "ReturnStatement[83186-83236]:ReturnStatement[83323-83373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83408-83733]:Block[83545-83870]"
    }, {
      "left" : "String name = node.getString();",
      "right" : "String name = node.getString();",
      "info" : "VariableDeclarationStatement[83414-83445]:VariableDeclarationStatement[83551-83582]"
    }, {
      "left" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
      "right" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
      "info" : "IfStatement[83450-83729]:IfStatement[83587-83866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83530-83582]:Block[83667-83719]"
    }, {
      "left" : "return convention.isConstantKey(name);",
      "right" : "return convention.isConstantKey(name);",
      "info" : "ReturnStatement[83538-83576]:ReturnStatement[83675-83713]"
    }, {
      "left" : "if (isObjectLitKey(node, parent))",
      "right" : "if (isObjectLitKey(node, parent))",
      "info" : "IfStatement[83588-83729]:IfStatement[83725-83866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83622-83674]:Block[83759-83811]"
    }, {
      "left" : "return convention.isConstantKey(name);",
      "right" : "return convention.isConstantKey(name);",
      "info" : "ReturnStatement[83630-83668]:ReturnStatement[83767-83805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83680-83729]:Block[83817-83866]"
    }, {
      "left" : "return convention.isConstant(name);",
      "right" : "return convention.isConstant(name);",
      "info" : "ReturnStatement[83688-83723]:ReturnStatement[83825-83860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83878-84262]:Block[84015-84399]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[83884-83906]:VariableDeclarationStatement[84021-84043]"
    }, {
      "left" : "Node parent = null;",
      "right" : "Node parent = null;",
      "info" : "VariableDeclarationStatement[83911-83930]:VariableDeclarationStatement[84048-84067]"
    }, {
      "left" : "if (nameNode != null)",
      "right" : "if (nameNode != null)",
      "info" : "IfStatement[83935-84039]:IfStatement[84072-84176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83957-84039]:Block[84094-84176]"
    }, {
      "left" : "info = nameNode.getJSDocInfo();",
      "right" : "info = nameNode.getJSDocInfo();",
      "info" : "ExpressionStatement[83965-83996]:ExpressionStatement[84102-84133]"
    }, {
      "left" : "parent = nameNode.getParent();",
      "right" : "parent = nameNode.getParent();",
      "info" : "ExpressionStatement[84003-84033]:ExpressionStatement[84140-84170]"
    }, {
      "left" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
      "right" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
      "info" : "IfStatement[84045-84241]:IfStatement[84182-84378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84198-84241]:Block[84335-84378]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[84206-84235]:ExpressionStatement[84343-84372]"
    }, {
      "left" : "return info;",
      "right" : "return info;",
      "info" : "ReturnStatement[84246-84258]:ReturnStatement[84383-84395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84370-84906]:Block[84507-85043]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[84376-84432]:ExpressionStatement[84513-84569]"
    }, {
      "left" : "JSDocInfo fnInfo = n.getJSDocInfo();",
      "right" : "JSDocInfo fnInfo = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[84437-84473]:VariableDeclarationStatement[84574-84610]"
    }, {
      "left" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
      "right" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
      "info" : "IfStatement[84478-84883]:IfStatement[84615-85020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84534-84883]:Block[84671-85020]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[84585-84613]:VariableDeclarationStatement[84722-84750]"
    }, {
      "left" : "if (parent.getType() == Token.ASSIGN)",
      "right" : "if (parent.getType() == Token.ASSIGN)",
      "info" : "IfStatement[84620-84877]:IfStatement[84757-85014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84658-84729]:Block[84795-84866]"
    }, {
      "left" : "fnInfo = parent.getJSDocInfo();",
      "right" : "fnInfo = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[84690-84721]:ExpressionStatement[84827-84858]"
    }, {
      "left" : "if (parent.getType() == Token.NAME)",
      "right" : "if (parent.getType() == Token.NAME)",
      "info" : "IfStatement[84735-84877]:IfStatement[84872-85014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84771-84877]:Block[84908-85014]"
    }, {
      "left" : "fnInfo = parent.getParent().getJSDocInfo();",
      "right" : "fnInfo = parent.getParent().getJSDocInfo();",
      "info" : "ExpressionStatement[84826-84869]:ExpressionStatement[84963-85006]"
    }, {
      "left" : "return fnInfo;",
      "right" : "return fnInfo;",
      "info" : "ReturnStatement[84888-84902]:ReturnStatement[85025-85039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85057-85234]:Block[85194-85371]"
    }, {
      "left" : "String sourceName = null;",
      "right" : "String sourceName = null;",
      "info" : "VariableDeclarationStatement[85063-85088]:VariableDeclarationStatement[85200-85225]"
    }, {
      "left" : "while (sourceName == null && n != null)",
      "right" : "while (sourceName == null && n != null)",
      "info" : "WhileStatement[85093-85207]:WhileStatement[85230-85344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85133-85207]:Block[85270-85344]"
    }, {
      "left" : "sourceName = n.getSourceFileName();",
      "right" : "sourceName = n.getSourceFileName();",
      "info" : "ExpressionStatement[85141-85176]:ExpressionStatement[85278-85313]"
    }, {
      "left" : "n = n.getParent();",
      "right" : "n = n.getParent();",
      "info" : "ExpressionStatement[85183-85201]:ExpressionStatement[85320-85338]"
    }, {
      "left" : "return sourceName;",
      "right" : "return sourceName;",
      "info" : "ReturnStatement[85212-85230]:ReturnStatement[85349-85367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85379-85633]:Block[85516-85770]"
    }, {
      "left" : "boolean isFreeCall = !isGet(callTarget);",
      "right" : "boolean isFreeCall = !isGet(callTarget);",
      "info" : "VariableDeclarationStatement[85385-85425]:VariableDeclarationStatement[85522-85562]"
    }, {
      "left" : "Node call = new Node(Token.CALL, callTarget);",
      "right" : "Node call = new Node(Token.CALL, callTarget);",
      "info" : "VariableDeclarationStatement[85430-85475]:VariableDeclarationStatement[85567-85612]"
    }, {
      "left" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
      "right" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
      "info" : "ExpressionStatement[85480-85528]:ExpressionStatement[85617-85665]"
    }, {
      "left" : "for (Node parameter : parameters)",
      "right" : "for (Node parameter : parameters)",
      "info" : "EnhancedForStatement[85533-85612]:EnhancedForStatement[85670-85749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85567-85612]:Block[85704-85749]"
    }, {
      "left" : "call.addChildToBack(parameter);",
      "right" : "call.addChildToBack(parameter);",
      "info" : "ExpressionStatement[85575-85606]:ExpressionStatement[85712-85743]"
    }, {
      "left" : "return call;",
      "right" : "return call;",
      "info" : "ReturnStatement[85617-85629]:ReturnStatement[85754-85766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85790-85868]:Block[85927-86005]"
    }, {
      "left" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
      "right" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
      "info" : "ReturnStatement[85796-85864]:ReturnStatement[85933-86001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86138-88561]:Block[86275-88698]"
    }, {
      "left" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
      "right" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
      "info" : "SwitchStatement[86144-88557]:SwitchStatement[86281-88694]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[86177-86195]:SwitchCase[86314-86332]"
    }, {
      "left" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
      "right" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
      "info" : "ReturnStatement[86393-86556]:ReturnStatement[86530-86693]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[86563-86580]:SwitchCase[86700-86717]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[86589-86648]:ReturnStatement[86726-86785]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[86655-86670]:SwitchCase[86792-86807]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[86677-86691]:SwitchCase[86814-86828]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[86700-86826]:ReturnStatement[86837-86963]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[86833-86849]:SwitchCase[86970-86986]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[86858-86994]:ReturnStatement[86995-87131]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[87001-87016]:SwitchCase[87138-87153]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[87023-87038]:SwitchCase[87160-87175]"
    }, {
      "left" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
      "right" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
      "info" : "IfStatement[87047-87215]:IfStatement[87184-87352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87093-87175]:Block[87230-87312]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
      "info" : "ReturnStatement[87105-87165]:ReturnStatement[87242-87302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87181-87215]:Block[87318-87352]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[87193-87205]:ReturnStatement[87330-87342]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[87222-87238]:SwitchCase[87359-87375]"
    }, {
      "left" : "return locals.apply(value);",
      "right" : "return locals.apply(value);",
      "info" : "ReturnStatement[87247-87274]:ReturnStatement[87384-87411]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[87281-87297]:SwitchCase[87418-87434]"
    }, {
      "left" : "return isImmutableValue(value) || locals.apply(value);",
      "right" : "return isImmutableValue(value) || locals.apply(value);",
      "info" : "ReturnStatement[87306-87360]:ReturnStatement[87443-87497]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[87367-87386]:SwitchCase[87504-87523]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[87393-87412]:SwitchCase[87530-87549]"
    }, {
      "left" : "return locals.apply(value);",
      "right" : "return locals.apply(value);",
      "info" : "ReturnStatement[87497-87524]:ReturnStatement[87634-87661]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[87531-87547]:SwitchCase[87668-87684]"
    }, {
      "left" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
      "right" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
      "info" : "ReturnStatement[87556-87667]:ReturnStatement[87693-87804]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[87674-87689]:SwitchCase[87811-87826]"
    }, {
      "left" : "return newHasLocalResult(value)\n               || locals.apply(value);",
      "right" : "return newHasLocalResult(value)\n               || locals.apply(value);",
      "info" : "ReturnStatement[87698-87768]:ReturnStatement[87835-87905]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[87775-87795]:SwitchCase[87912-87932]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[87802-87820]:SwitchCase[87939-87957]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[87827-87847]:SwitchCase[87964-87984]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[87854-87875]:SwitchCase[87991-88012]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[87951-87963]:ReturnStatement[88088-88100]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[87970-87989]:SwitchCase[88107-88126]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[87996-88010]:SwitchCase[88133-88147]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[88099-88111]:ReturnStatement[88236-88248]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[88118-88126]:SwitchCase[88255-88263]"
    }, {
      "left" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
      "right" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
      "info" : "IfStatement[88272-88411]:IfStatement[88409-88548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88377-88411]:Block[88514-88548]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[88389-88401]:ReturnStatement[88526-88538]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
      "right" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
      "info" : "ThrowStatement[88421-88551]:ThrowStatement[88558-88688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88812-88963]:Block[88949-89100]"
    }, {
      "left" : "Node sibling = first;",
      "right" : "Node sibling = first;",
      "info" : "VariableDeclarationStatement[88818-88839]:VariableDeclarationStatement[88955-88976]"
    }, {
      "left" : "while (index != 0 && sibling != null)",
      "right" : "while (index != 0 && sibling != null)",
      "info" : "WhileStatement[88844-88939]:WhileStatement[88981-89076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88882-88939]:Block[89019-89076]"
    }, {
      "left" : "sibling = sibling.getNext();",
      "right" : "sibling = sibling.getNext();",
      "info" : "ExpressionStatement[88890-88918]:ExpressionStatement[89027-89055]"
    }, {
      "left" : "index--;",
      "right" : "index--;",
      "info" : "ExpressionStatement[88925-88933]:ExpressionStatement[89062-89070]"
    }, {
      "left" : "return sibling;",
      "right" : "return sibling;",
      "info" : "ReturnStatement[88944-88959]:ReturnStatement[89081-89096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89137-89288]:Block[89274-89425]"
    }, {
      "left" : "Preconditions.checkState(isFunction(function));",
      "right" : "Preconditions.checkState(isFunction(function));",
      "info" : "ExpressionStatement[89143-89190]:ExpressionStatement[89280-89327]"
    }, {
      "left" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
      "right" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
      "info" : "ReturnStatement[89195-89284]:ReturnStatement[89332-89421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89473-89599]:Block[89610-89736]"
    }, {
      "left" : "Preconditions.checkState(isCallOrNew(call));",
      "right" : "Preconditions.checkState(isCallOrNew(call));",
      "info" : "ExpressionStatement[89479-89523]:ExpressionStatement[89616-89660]"
    }, {
      "left" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
      "right" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
      "info" : "ReturnStatement[89528-89595]:ReturnStatement[89665-89732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89658-89876]:Block[89795-90013]"
    }, {
      "left" : "Node getNode = call.getFirstChild();",
      "right" : "Node getNode = call.getFirstChild();",
      "info" : "VariableDeclarationStatement[89664-89700]:VariableDeclarationStatement[89801-89837]"
    }, {
      "left" : "if (isGet(getNode))",
      "right" : "if (isGet(getNode))",
      "info" : "IfStatement[89705-89854]:IfStatement[89842-89991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89725-89854]:Block[89862-89991]"
    }, {
      "left" : "Node propNode = getNode.getLastChild();",
      "right" : "Node propNode = getNode.getLastChild();",
      "info" : "VariableDeclarationStatement[89733-89772]:VariableDeclarationStatement[89870-89909]"
    }, {
      "left" : "return isString(propNode) && \"toString\".equals(propNode.getString());",
      "right" : "return isString(propNode) && \"toString\".equals(propNode.getString());",
      "info" : "ReturnStatement[89779-89848]:ReturnStatement[89916-89985]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[89859-89872]:ReturnStatement[89996-90009]"
    } ]
  },
  "interFileMappings" : { }
}