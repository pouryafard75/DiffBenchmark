{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1808-1882]:FieldDeclaration[1808-1882]"
    }, {
      "left" : "Collapse",
      "right" : "Collapse",
      "info" : "TypeDeclaration[1886-2465]:TypeDeclaration[1886-2465]"
    }, {
      "left" : "final Node startNode;",
      "right" : "final Node startNode;",
      "info" : "FieldDeclaration[1998-2124]:FieldDeclaration[1998-2124]"
    }, {
      "left" : "final Node endNode;",
      "right" : "final Node endNode;",
      "info" : "FieldDeclaration[2130-2233]:FieldDeclaration[2130-2233]"
    }, {
      "left" : "final Node parent;",
      "right" : "final Node parent;",
      "info" : "FieldDeclaration[2239-2304]:FieldDeclaration[2239-2304]"
    }, {
      "left" : "Collapse(Node startNode, Node endNode, Node parent)",
      "right" : "Collapse(Node startNode, Node endNode, Node parent)",
      "info" : "MethodDeclaration[2310-2461]:MethodDeclaration[2310-2461]"
    }, {
      "left" : "private final List<Collapse> collapses = Lists.newArrayList();",
      "right" : "private final List<Collapse> collapses = Lists.newArrayList();",
      "info" : "FieldDeclaration[2469-2578]:FieldDeclaration[2469-2578]"
    }, {
      "left" : "private final Set<Node> nodesToCollapse = Sets.newHashSet();",
      "right" : "private final Set<Node> nodesToCollapse = Sets.newHashSet();",
      "info" : "FieldDeclaration[2582-2860]:FieldDeclaration[2582-2860]"
    }, {
      "left" : "CollapseVariableDeclarations(AbstractCompiler compiler)",
      "right" : "CollapseVariableDeclarations(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[2864-3031]:MethodDeclaration[2864-3031]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[3035-3315]:MethodDeclaration[3035-3315]"
    }, {
      "left" : "private final Set<Var> blacklistedVars = Sets.newHashSet();",
      "right" : "private final Set<Var> blacklistedVars = Sets.newHashSet();",
      "info" : "FieldDeclaration[3811-3870]:FieldDeclaration[3811-3870]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[3876-4985]:MethodDeclaration[3876-4985]"
    }, {
      "left" : "private void blacklistStubVars(NodeTraversal t, Node varNode)",
      "right" : "private void blacklistStubVars(NodeTraversal t, Node varNode)",
      "info" : "MethodDeclaration[4991-5296]:MethodDeclaration[4991-5296]"
    }, {
      "left" : "private void applyCollapses()",
      "right" : "private void applyCollapses()",
      "info" : "MethodDeclaration[5721-6850]:MethodDeclaration[5849-6978]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1962-1969]:Modifier[1962-1969]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1970-1976]:Modifier[1970-1976]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1977-1982]:TYPE_DECLARATION_KIND[1977-1982]"
    }, {
      "left" : "Collapse",
      "right" : "Collapse",
      "info" : "SimpleName[1983-1991]:SimpleName[1983-1991]"
    }, {
      "left" : "Collapse",
      "right" : "Collapse",
      "info" : "SimpleName[2310-2318]:SimpleName[2310-2318]"
    }, {
      "left" : "Node startNode",
      "right" : "Node startNode",
      "info" : "SingleVariableDeclaration[2319-2333]:SingleVariableDeclaration[2319-2333]"
    }, {
      "left" : "Node endNode",
      "right" : "Node endNode",
      "info" : "SingleVariableDeclaration[2335-2347]:SingleVariableDeclaration[2335-2347]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[2349-2360]:SingleVariableDeclaration[2349-2360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2362-2461]:Block[2362-2461]"
    }, {
      "left" : "this.startNode = startNode;",
      "right" : "this.startNode = startNode;",
      "info" : "ExpressionStatement[2370-2397]:ExpressionStatement[2370-2397]"
    }, {
      "left" : "this.endNode = endNode;",
      "right" : "this.endNode = endNode;",
      "info" : "ExpressionStatement[2404-2427]:ExpressionStatement[2404-2427]"
    }, {
      "left" : "this.parent = parent;",
      "right" : "this.parent = parent;",
      "info" : "ExpressionStatement[2434-2455]:ExpressionStatement[2434-2455]"
    }, {
      "left" : "CollapseVariableDeclarations",
      "right" : "CollapseVariableDeclarations",
      "info" : "SimpleName[2864-2892]:SimpleName[2864-2892]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[2893-2918]:SingleVariableDeclaration[2893-2918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2920-3031]:Block[2920-3031]"
    }, {
      "left" : "Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());",
      "right" : "Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());",
      "info" : "ExpressionStatement[2926-2997]:ExpressionStatement[2926-2997]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[3002-3027]:ExpressionStatement[3002-3027]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3035-3044]:MarkerAnnotation[3035-3044]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3047-3053]:Modifier[3047-3053]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3054-3058]:PrimitiveType[3054-3058]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[3059-3066]:SimpleName[3059-3066]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[3067-3079]:SingleVariableDeclaration[3067-3079]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[3081-3090]:SingleVariableDeclaration[3081-3090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3092-3315]:Block[3092-3315]"
    }, {
      "left" : "collapses.clear();",
      "right" : "collapses.clear();",
      "info" : "ExpressionStatement[3098-3116]:ExpressionStatement[3098-3116]"
    }, {
      "left" : "nodesToCollapse.clear();",
      "right" : "nodesToCollapse.clear();",
      "info" : "ExpressionStatement[3121-3145]:ExpressionStatement[3121-3145]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new GatherCollapses());",
      "right" : "NodeTraversal.traverse(compiler, root, new GatherCollapses());",
      "info" : "ExpressionStatement[3151-3213]:ExpressionStatement[3151-3213]"
    }, {
      "left" : "if (!collapses.isEmpty())",
      "right" : "if (!collapses.isEmpty())",
      "info" : "IfStatement[3219-3311]:IfStatement[3219-3311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3245-3311]:Block[3245-3311]"
    }, {
      "left" : "applyCollapses();",
      "right" : "applyCollapses();",
      "info" : "ExpressionStatement[3253-3270]:ExpressionStatement[3253-3270]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[3277-3305]:ExpressionStatement[3277-3305]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3876-3885]:MarkerAnnotation[3876-3885]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3890-3896]:Modifier[3890-3896]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3897-3901]:PrimitiveType[3897-3901]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[3902-3907]:SimpleName[3902-3907]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[3908-3923]:SingleVariableDeclaration[3908-3923]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3925-3931]:SingleVariableDeclaration[3925-3931]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[3933-3944]:SingleVariableDeclaration[3933-3944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3946-4985]:Block[3946-4985]"
    }, {
      "left" : "if (n.isVar())",
      "right" : "if (n.isVar())",
      "info" : "IfStatement[3954-4011]:IfStatement[3954-4011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3969-4011]:Block[3969-4011]"
    }, {
      "left" : "blacklistStubVars(t, n);",
      "right" : "blacklistStubVars(t, n);",
      "info" : "ExpressionStatement[3979-4003]:ExpressionStatement[3979-4003]"
    }, {
      "left" : "if (!n.isVar() && !canBeRedeclared(n, t.getScope()))",
      "right" : "if (!n.isVar() && !canBeRedeclared(n, t.getScope()))",
      "info" : "IfStatement[4054-4114]:IfStatement[4054-4114]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4107-4114]:ReturnStatement[4107-4114]"
    }, {
      "left" : "if (nodesToCollapse.contains(n))",
      "right" : "if (nodesToCollapse.contains(n))",
      "info" : "IfStatement[4177-4217]:IfStatement[4177-4217]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4210-4217]:ReturnStatement[4210-4217]"
    }, {
      "left" : "if (parent.isIf())",
      "right" : "if (parent.isIf())",
      "info" : "IfStatement[4328-4354]:IfStatement[4328-4354]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4347-4354]:ReturnStatement[4347-4354]"
    }, {
      "left" : "Node varNode = n;",
      "right" : "Node varNode = n;",
      "info" : "VariableDeclarationStatement[4362-4379]:VariableDeclarationStatement[4362-4379]"
    }, {
      "left" : "boolean hasVar = n.isVar();",
      "right" : "boolean hasVar = n.isVar();",
      "info" : "VariableDeclarationStatement[4387-4414]:VariableDeclarationStatement[4387-4414]"
    }, {
      "left" : "n = n.getNext();",
      "right" : "n = n.getNext();",
      "info" : "ExpressionStatement[4488-4504]:ExpressionStatement[4488-4504]"
    }, {
      "left" : "boolean hasNodesToCollapse = false;",
      "right" : "boolean hasNodesToCollapse = false;",
      "info" : "VariableDeclarationStatement[4512-4547]:VariableDeclarationStatement[4512-4547]"
    }, {
      "left" : "while (n != null &&\n          (n.isVar() || canBeRedeclared(n, t.getScope())))",
      "right" : "while (n != null &&\n          (n.isVar() || canBeRedeclared(n, t.getScope())))",
      "info" : "WhileStatement[4555-4833]:WhileStatement[4555-4833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4634-4833]:Block[4634-4833]"
    }, {
      "left" : "if (n.isVar())",
      "right" : "if (n.isVar())",
      "info" : "IfStatement[4645-4731]:IfStatement[4645-4731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4660-4731]:Block[4660-4731]"
    }, {
      "left" : "blacklistStubVars(t, n);",
      "right" : "blacklistStubVars(t, n);",
      "info" : "ExpressionStatement[4672-4696]:ExpressionStatement[4672-4696]"
    }, {
      "left" : "hasVar = true;",
      "right" : "hasVar = true;",
      "info" : "ExpressionStatement[4707-4721]:ExpressionStatement[4707-4721]"
    }, {
      "left" : "nodesToCollapse.add(n);",
      "right" : "nodesToCollapse.add(n);",
      "info" : "ExpressionStatement[4741-4764]:ExpressionStatement[4741-4764]"
    }, {
      "left" : "hasNodesToCollapse = true;",
      "right" : "hasNodesToCollapse = true;",
      "info" : "ExpressionStatement[4773-4799]:ExpressionStatement[4773-4799]"
    }, {
      "left" : "n = n.getNext();",
      "right" : "n = n.getNext();",
      "info" : "ExpressionStatement[4809-4825]:ExpressionStatement[4809-4825]"
    }, {
      "left" : "if (hasNodesToCollapse && hasVar)",
      "right" : "if (hasNodesToCollapse && hasVar)",
      "info" : "IfStatement[4841-4979]:IfStatement[4841-4979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4875-4979]:Block[4875-4979]"
    }, {
      "left" : "nodesToCollapse.add(varNode);",
      "right" : "nodesToCollapse.add(varNode);",
      "info" : "ExpressionStatement[4885-4914]:ExpressionStatement[4885-4914]"
    }, {
      "left" : "collapses.add(new Collapse(varNode, n, parent));",
      "right" : "collapses.add(new Collapse(varNode, n, parent));",
      "info" : "ExpressionStatement[4923-4971]:ExpressionStatement[4923-4971]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4991-4998]:Modifier[4991-4998]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4999-5003]:PrimitiveType[4999-5003]"
    }, {
      "left" : "blacklistStubVars",
      "right" : "blacklistStubVars",
      "info" : "SimpleName[5004-5021]:SimpleName[5004-5021]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[5022-5037]:SingleVariableDeclaration[5022-5037]"
    }, {
      "left" : "Node varNode",
      "right" : "Node varNode",
      "info" : "SingleVariableDeclaration[5039-5051]:SingleVariableDeclaration[5039-5051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5053-5296]:Block[5053-5296]"
    }, {
      "left" : "for (Node child = varNode.getFirstChild();\n           child != null; child = child.getNext())",
      "right" : "for (Node child = varNode.getFirstChild();\n           child != null; child = child.getNext())",
      "info" : "ForStatement[5061-5290]:ForStatement[5061-5290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5155-5290]:Block[5155-5290]"
    }, {
      "left" : "if (child.getFirstChild() == null)",
      "right" : "if (child.getFirstChild() == null)",
      "info" : "IfStatement[5165-5282]:IfStatement[5165-5282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5200-5282]:Block[5200-5282]"
    }, {
      "left" : "blacklistedVars.add(t.getScope().getVar(child.getString()));",
      "right" : "blacklistedVars.add(t.getScope().getVar(child.getString()));",
      "info" : "ExpressionStatement[5212-5272]:ExpressionStatement[5212-5272]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5721-5728]:Modifier[5849-5856]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5729-5733]:PrimitiveType[5857-5861]"
    }, {
      "left" : "applyCollapses",
      "right" : "applyCollapses",
      "info" : "SimpleName[5734-5748]:SimpleName[5862-5876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5751-6850]:Block[5879-6978]"
    }, {
      "left" : "for (Collapse collapse : collapses)",
      "right" : "for (Collapse collapse : collapses)",
      "info" : "EnhancedForStatement[5757-6846]:EnhancedForStatement[5885-6974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5793-6846]:Block[5921-6974]"
    }, {
      "left" : "Node var = new Node(Token.VAR);",
      "right" : "Node var = new Node(Token.VAR);",
      "info" : "VariableDeclarationStatement[5802-5833]:VariableDeclarationStatement[5930-5961]"
    }, {
      "left" : "var.copyInformationFrom(collapse.startNode);",
      "right" : "var.copyInformationFrom(collapse.startNode);",
      "info" : "ExpressionStatement[5840-5884]:ExpressionStatement[5968-6012]"
    }, {
      "left" : "collapse.parent.addChildBefore(var, collapse.startNode);",
      "right" : "collapse.parent.addChildBefore(var, collapse.startNode);",
      "info" : "ExpressionStatement[5891-5947]:ExpressionStatement[6019-6075]"
    }, {
      "left" : "boolean redeclaration = false;",
      "right" : "boolean redeclaration = false;",
      "info" : "VariableDeclarationStatement[5955-5985]:VariableDeclarationStatement[6083-6113]"
    }, {
      "left" : "for (Node n = collapse.startNode; n != collapse.endNode)",
      "right" : "for (Node n = collapse.startNode; n != collapse.endNode)",
      "info" : "ForStatement[5992-6688]:ForStatement[6120-6816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6050-6688]:Block[6178-6816]"
    }, {
      "left" : "Node next = n.getNext();",
      "right" : "Node next = n.getNext();",
      "info" : "VariableDeclarationStatement[6060-6084]:VariableDeclarationStatement[6188-6212]"
    }, {
      "left" : "Preconditions.checkState(var.getNext() == n);",
      "right" : "Preconditions.checkState(var.getNext() == n);",
      "info" : "ExpressionStatement[6094-6139]:ExpressionStatement[6222-6267]"
    }, {
      "left" : "collapse.parent.removeChildAfter(var);",
      "right" : "collapse.parent.removeChildAfter(var);",
      "info" : "ExpressionStatement[6148-6186]:ExpressionStatement[6276-6314]"
    }, {
      "left" : "if (n.isVar())",
      "right" : "if (n.isVar())",
      "info" : "IfStatement[6196-6662]:IfStatement[6324-6790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6211-6323]:Block[6339-6451]"
    }, {
      "left" : "while(n.hasChildren())",
      "right" : "while(n.hasChildren())",
      "info" : "WhileStatement[6223-6313]:WhileStatement[6351-6441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6246-6313]:Block[6374-6441]"
    }, {
      "left" : "var.addChildToBack(n.removeFirstChild());",
      "right" : "var.addChildToBack(n.removeFirstChild());",
      "info" : "ExpressionStatement[6260-6301]:ExpressionStatement[6388-6429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6329-6662]:Block[6457-6790]"
    }, {
      "left" : "Node assign = n.getFirstChild();",
      "right" : "Node assign = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[6341-6373]:VariableDeclarationStatement[6469-6501]"
    }, {
      "left" : "Node lhs = assign.getFirstChild();",
      "right" : "Node lhs = assign.getFirstChild();",
      "info" : "VariableDeclarationStatement[6384-6418]:VariableDeclarationStatement[6512-6546]"
    }, {
      "left" : "Preconditions.checkState(lhs.isName());",
      "right" : "Preconditions.checkState(lhs.isName());",
      "info" : "ExpressionStatement[6429-6468]:ExpressionStatement[6557-6596]"
    }, {
      "left" : "Node rhs = assign.getLastChild();",
      "right" : "Node rhs = assign.getLastChild();",
      "info" : "VariableDeclarationStatement[6479-6512]:VariableDeclarationStatement[6607-6640]"
    }, {
      "left" : "lhs.addChildToBack(rhs.detachFromParent());",
      "right" : "lhs.addChildToBack(rhs.detachFromParent());",
      "info" : "ExpressionStatement[6523-6566]:ExpressionStatement[6651-6694]"
    }, {
      "left" : "var.addChildToBack(lhs.detachFromParent());",
      "right" : "var.addChildToBack(lhs.detachFromParent());",
      "info" : "ExpressionStatement[6577-6620]:ExpressionStatement[6705-6748]"
    }, {
      "left" : "redeclaration = true;",
      "right" : "redeclaration = true;",
      "info" : "ExpressionStatement[6631-6652]:ExpressionStatement[6759-6780]"
    }, {
      "left" : "n = next;",
      "right" : "n = next;",
      "info" : "ExpressionStatement[6671-6680]:ExpressionStatement[6799-6808]"
    }, {
      "left" : "if (redeclaration)",
      "right" : "if (redeclaration)",
      "info" : "IfStatement[6696-6840]:IfStatement[6824-6968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6715-6840]:Block[6843-6968]"
    }, {
      "left" : "JSDocInfo info = new JSDocInfo();",
      "right" : "JSDocInfo info = new JSDocInfo();",
      "info" : "VariableDeclarationStatement[6725-6758]:VariableDeclarationStatement[6853-6886]"
    }, {
      "left" : "info.addSuppression(\"duplicate\");",
      "right" : "info.addSuppression(\"duplicate\");",
      "info" : "ExpressionStatement[6767-6800]:ExpressionStatement[6895-6928]"
    }, {
      "left" : "var.setJSDocInfo(info);",
      "right" : "var.setJSDocInfo(info);",
      "info" : "ExpressionStatement[6809-6832]:ExpressionStatement[6937-6960]"
    } ]
  },
  "interFileMappings" : { }
}