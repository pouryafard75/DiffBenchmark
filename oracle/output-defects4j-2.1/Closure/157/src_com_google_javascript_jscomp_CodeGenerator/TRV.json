{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "right" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "info" : "FieldDeclaration[1168-1307]:FieldDeclaration[1168-1307]"
    }, {
      "left" : "private final CodeConsumer cc;",
      "right" : "private final CodeConsumer cc;",
      "info" : "FieldDeclaration[1311-1341]:FieldDeclaration[1311-1341]"
    }, {
      "left" : "private final CharsetEncoder outputCharsetEncoder;",
      "right" : "private final CharsetEncoder outputCharsetEncoder;",
      "info" : "FieldDeclaration[1345-1395]:FieldDeclaration[1345-1395]"
    }, {
      "left" : "CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset)",
      "right" : "CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset)",
      "info" : "MethodDeclaration[1399-1959]:MethodDeclaration[1399-1959]"
    }, {
      "left" : "CodeGenerator(CodeConsumer consumer)",
      "right" : "CodeGenerator(CodeConsumer consumer)",
      "info" : "MethodDeclaration[1963-2031]:MethodDeclaration[1963-2031]"
    }, {
      "left" : "public void tagAsStrict()",
      "right" : "public void tagAsStrict()",
      "info" : "MethodDeclaration[2035-2150]:MethodDeclaration[2035-2150]"
    }, {
      "left" : "void add(String str)",
      "right" : "void add(String str)",
      "info" : "MethodDeclaration[2154-2197]:MethodDeclaration[2154-2197]"
    }, {
      "left" : "private void addIdentifier(String identifier)",
      "right" : "private void addIdentifier(String identifier)",
      "info" : "MethodDeclaration[2201-2304]:MethodDeclaration[2201-2304]"
    }, {
      "left" : "void add(Node n)",
      "right" : "void add(Node n)",
      "info" : "MethodDeclaration[2308-2357]:MethodDeclaration[2308-2357]"
    }, {
      "left" : "private boolean isIndirectEval(Node n)",
      "right" : "private boolean isIndirectEval(Node n)",
      "info" : "MethodDeclaration[21653-21877]:MethodDeclaration[22469-22693]"
    }, {
      "left" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "right" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "info" : "MethodDeclaration[21881-24037]:MethodDeclaration[22697-24853]"
    }, {
      "left" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "right" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "info" : "MethodDeclaration[24041-24956]:MethodDeclaration[24857-25772]"
    }, {
      "left" : "void addLeftExpr(Node n, int minPrecedence, Context context)",
      "right" : "void addLeftExpr(Node n, int minPrecedence, Context context)",
      "info" : "MethodDeclaration[24960-25500]:MethodDeclaration[25776-26316]"
    }, {
      "left" : "void addExpr(Node n, int minPrecedence)",
      "right" : "void addExpr(Node n, int minPrecedence)",
      "info" : "MethodDeclaration[25504-25595]:MethodDeclaration[26320-26411]"
    }, {
      "left" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "right" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "info" : "MethodDeclaration[25599-25946]:MethodDeclaration[26415-26762]"
    }, {
      "left" : "void addList(Node firstInList)",
      "right" : "void addList(Node firstInList)",
      "info" : "MethodDeclaration[25950-26033]:MethodDeclaration[26766-26849]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "info" : "MethodDeclaration[26037-26176]:MethodDeclaration[26853-26992]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "info" : "MethodDeclaration[26180-26593]:MethodDeclaration[26996-27409]"
    }, {
      "left" : "void addArrayList(Node firstInList)",
      "right" : "void addArrayList(Node firstInList)",
      "info" : "MethodDeclaration[26597-27283]:MethodDeclaration[27413-28099]"
    }, {
      "left" : "void addCaseBody(Node caseBody)",
      "right" : "void addCaseBody(Node caseBody)",
      "info" : "MethodDeclaration[27287-27389]:MethodDeclaration[28103-28205]"
    }, {
      "left" : "void addAllSiblings(Node n)",
      "right" : "void addAllSiblings(Node n)",
      "info" : "MethodDeclaration[27393-27497]:MethodDeclaration[28209-28313]"
    }, {
      "left" : "static String jsString(String s, CharsetEncoder outputCharsetEncoder)",
      "right" : "static String jsString(String s, CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[27501-28370]:MethodDeclaration[28317-29186]"
    }, {
      "left" : "static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "right" : "static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[28374-28558]:MethodDeclaration[29190-29374]"
    }, {
      "left" : "static String escapeToDoubleQuotedJsString(String s)",
      "right" : "static String escapeToDoubleQuotedJsString(String s)",
      "info" : "MethodDeclaration[28562-28767]:MethodDeclaration[29378-29583]"
    }, {
      "left" : "static String regexpEscape(String s)",
      "right" : "static String regexpEscape(String s)",
      "info" : "MethodDeclaration[28896-28972]:MethodDeclaration[29712-29788]"
    }, {
      "left" : "static String strEscape(String s, char quote,\n                          String doublequoteEscape,\n                          String singlequoteEscape,\n                          String backslashEscape,\n                          CharsetEncoder outputCharsetEncoder)",
      "right" : "static String strEscape(String s, char quote,\n                          String doublequoteEscape,\n                          String singlequoteEscape,\n                          String backslashEscape,\n                          CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[28976-31841]:MethodDeclaration[29792-32657]"
    }, {
      "left" : "static String identifierEscape(String s)",
      "right" : "static String identifierEscape(String s)",
      "info" : "MethodDeclaration[31845-32535]:MethodDeclaration[32661-33351]"
    }, {
      "left" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "right" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "info" : "MethodDeclaration[32538-33055]:MethodDeclaration[33354-33871]"
    }, {
      "left" : "private static Node getFirstNonEmptyChild(Node n)",
      "right" : "private static Node getFirstNonEmptyChild(Node n)",
      "info" : "MethodDeclaration[33059-33489]:MethodDeclaration[33875-34305]"
    }, {
      "left" : "enum : Context",
      "right" : "enum : Context",
      "info" : "EnumDeclaration[33694-34096]:EnumDeclaration[34510-34912]"
    }, {
      "left" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "right" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "info" : "MethodDeclaration[34100-34291]:MethodDeclaration[34916-35107]"
    }, {
      "left" : "private  Context getContextForNoInOperator(Context context)",
      "right" : "private  Context getContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[34295-34630]:MethodDeclaration[35111-35446]"
    }, {
      "left" : "private  Context clearContextForNoInOperator(Context context)",
      "right" : "private  Context clearContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[34634-35071]:MethodDeclaration[35450-35887]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "info" : "MethodDeclaration[35075-35425]:MethodDeclaration[35891-36241]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "info" : "MethodDeclaration[35429-36515]:MethodDeclaration[36245-37331]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1466-1959]:Block[1466-1959]"
    }, {
      "left" : "cc = consumer;",
      "right" : "cc = consumer;",
      "info" : "ExpressionStatement[1472-1486]:ExpressionStatement[1472-1486]"
    }, {
      "left" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "right" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "info" : "IfStatement[1491-1955]:IfStatement[1491-1955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1556-1880]:Block[1556-1880]"
    }, {
      "left" : "this.outputCharsetEncoder = null;",
      "right" : "this.outputCharsetEncoder = null;",
      "info" : "ExpressionStatement[1841-1874]:ExpressionStatement[1841-1874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1886-1955]:Block[1886-1955]"
    }, {
      "left" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "right" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "info" : "ExpressionStatement[1894-1949]:ExpressionStatement[1894-1949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2000-2031]:Block[2000-2031]"
    }, {
      "left" : "this(consumer, null);",
      "right" : "this(consumer, null);",
      "info" : "ConstructorInvocation[2006-2027]:ConstructorInvocation[2006-2027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2119-2150]:Block[2119-2150]"
    }, {
      "left" : "add(\"'use strict';\");",
      "right" : "add(\"'use strict';\");",
      "info" : "ExpressionStatement[2125-2146]:ExpressionStatement[2125-2146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2175-2197]:Block[2175-2197]"
    }, {
      "left" : "cc.add(str);",
      "right" : "cc.add(str);",
      "info" : "ExpressionStatement[2181-2193]:ExpressionStatement[2181-2193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2247-2304]:Block[2247-2304]"
    }, {
      "left" : "cc.addIdentifier(identifierEscape(identifier));",
      "right" : "cc.addIdentifier(identifierEscape(identifier));",
      "info" : "ExpressionStatement[2253-2300]:ExpressionStatement[2253-2300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2325-2357]:Block[2325-2357]"
    }, {
      "left" : "add(n, Context.OTHER);",
      "right" : "add(n, Context.OTHER);",
      "info" : "ExpressionStatement[2331-2353]:ExpressionStatement[2331-2353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21755-21877]:Block[22571-22693]"
    }, {
      "left" : "return n.getType() == Token.NAME && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "right" : "return n.getType() == Token.NAME && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "info" : "ReturnStatement[21761-21873]:ReturnStatement[22577-22689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22248-24037]:Block[23064-24853]"
    }, {
      "left" : "Node nodeToProcess = n;",
      "right" : "Node nodeToProcess = n;",
      "info" : "VariableDeclarationStatement[22254-22277]:VariableDeclarationStatement[23070-23093]"
    }, {
      "left" : "if (!allowNonBlockChild && n.getType() != Token.BLOCK)",
      "right" : "if (!allowNonBlockChild && n.getType() != Token.BLOCK)",
      "info" : "IfStatement[22283-22392]:IfStatement[23099-23208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22338-22392]:Block[23154-23208]"
    }, {
      "left" : "throw new Error(\"Missing BLOCK child.\");",
      "right" : "throw new Error(\"Missing BLOCK child.\");",
      "info" : "ThrowStatement[22346-22386]:ThrowStatement[23162-23202]"
    }, {
      "left" : "if (n.getType() == Token.BLOCK)",
      "right" : "if (n.getType() == Token.BLOCK)",
      "info" : "IfStatement[22523-23664]:IfStatement[23339-24480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22555-23664]:Block[23371-24480]"
    }, {
      "left" : "int count = getNonEmptyChildCount(n, 2);",
      "right" : "int count = getNonEmptyChildCount(n, 2);",
      "info" : "VariableDeclarationStatement[22563-22603]:VariableDeclarationStatement[23379-23419]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[22610-22863]:IfStatement[23426-23679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22626-22863]:Block[23442-23679]"
    }, {
      "left" : "if (cc.shouldPreserveExtraBlocks())",
      "right" : "if (cc.shouldPreserveExtraBlocks())",
      "info" : "IfStatement[22636-22839]:IfStatement[23452-23655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22672-22789]:Block[23488-23605]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[22684-22700]:ExpressionStatement[23500-23516]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[22711-22779]:ExpressionStatement[23527-23595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22795-22839]:Block[23611-23655]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[22807-22829]:ExpressionStatement[23623-23645]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22848-22855]:ReturnStatement[23664-23671]"
    }, {
      "left" : "if (count == 1)",
      "right" : "if (count == 1)",
      "info" : "IfStatement[22871-23584]:IfStatement[23687-24400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22887-23584]:Block[23703-24400]"
    }, {
      "left" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "right" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "info" : "VariableDeclarationStatement[23055-23105]:VariableDeclarationStatement[23871-23921]"
    }, {
      "left" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "right" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "info" : "VariableDeclarationStatement[23114-23173]:VariableDeclarationStatement[23930-23989]"
    }, {
      "left" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "right" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "info" : "IfStatement[23182-23576]:IfStatement[23998-24392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23252-23471]:Block[24068-24287]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[23264-23280]:ExpressionStatement[24080-24096]"
    }, {
      "left" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "right" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "info" : "ExpressionStatement[23291-23333]:ExpressionStatement[24107-24149]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[23344-23364]:ExpressionStatement[24160-24180]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[23375-23443]:ExpressionStatement[24191-24259]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[23454-23461]:ReturnStatement[24270-24277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23477-23576]:Block[24293-24392]"
    }, {
      "left" : "nodeToProcess = firstAndOnlyChild;",
      "right" : "nodeToProcess = firstAndOnlyChild;",
      "info" : "ExpressionStatement[23532-23566]:ExpressionStatement[24348-24382]"
    }, {
      "left" : "if (count > 1)",
      "right" : "if (count > 1)",
      "info" : "IfStatement[23592-23658]:IfStatement[24408-24474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23607-23658]:Block[24423-24474]"
    }, {
      "left" : "context = Context.PRESERVE_BLOCK;",
      "right" : "context = Context.PRESERVE_BLOCK;",
      "info" : "ExpressionStatement[23617-23650]:ExpressionStatement[24433-24466]"
    }, {
      "left" : "if (nodeToProcess.getType() == Token.EMPTY)",
      "right" : "if (nodeToProcess.getType() == Token.EMPTY)",
      "info" : "IfStatement[23670-24033]:IfStatement[24486-24849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23714-23750]:Block[24530-24566]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[23722-23744]:ExpressionStatement[24538-24560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23756-24033]:Block[24572-24849]"
    }, {
      "left" : "add(nodeToProcess, context);",
      "right" : "add(nodeToProcess, context);",
      "info" : "ExpressionStatement[23764-23792]:ExpressionStatement[24580-24608]"
    }, {
      "left" : "if (nodeToProcess.getType() == Token.VAR)",
      "right" : "if (nodeToProcess.getType() == Token.VAR)",
      "info" : "IfStatement[23949-24027]:IfStatement[24765-24843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23991-24027]:Block[24807-24843]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[24001-24019]:ExpressionStatement[24817-24835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24183-24956]:Block[24999-25772]"
    }, {
      "left" : "if (n.getType() == Token.LABEL)",
      "right" : "if (n.getType() == Token.LABEL)",
      "info" : "IfStatement[24189-24952]:IfStatement[25005-25768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24221-24866]:Block[25037-25682]"
    }, {
      "left" : "Node labeledStatement = n.getLastChild();",
      "right" : "Node labeledStatement = n.getLastChild();",
      "info" : "VariableDeclarationStatement[24229-24270]:VariableDeclarationStatement[25045-25086]"
    }, {
      "left" : "if (labeledStatement.getType() != Token.BLOCK)",
      "right" : "if (labeledStatement.getType() != Token.BLOCK)",
      "info" : "IfStatement[24277-24860]:IfStatement[25093-25676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24324-24392]:Block[25140-25208]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "right" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "info" : "ReturnStatement[24334-24384]:ReturnStatement[25150-25200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24398-24860]:Block[25214-25676]"
    }, {
      "left" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "right" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "info" : "IfStatement[24573-24852]:IfStatement[25389-25668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24611-24691]:Block[25427-25507]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "right" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "info" : "ReturnStatement[24623-24681]:ReturnStatement[25439-25497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24697-24852]:Block[25513-25668]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24829-24842]:ReturnStatement[25645-25658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24872-24952]:Block[25688-25768]"
    }, {
      "left" : "return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);",
      "right" : "return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);",
      "info" : "ReturnStatement[24880-24946]:ReturnStatement[25696-25762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25455-25500]:Block[26271-26316]"
    }, {
      "left" : "addExpr(n, minPrecedence, context);",
      "right" : "addExpr(n, minPrecedence, context);",
      "info" : "ExpressionStatement[25461-25496]:ExpressionStatement[26277-26312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25544-25595]:Block[26360-26411]"
    }, {
      "left" : "addExpr(n, minPrecedence, Context.OTHER);",
      "right" : "addExpr(n, minPrecedence, Context.OTHER);",
      "info" : "ExpressionStatement[25550-25591]:ExpressionStatement[26366-26407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25664-25946]:Block[26480-26762]"
    }, {
      "left" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.getType() == Token.IN)))",
      "right" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.getType() == Token.IN)))",
      "info" : "IfStatement[25670-25942]:IfStatement[26486-26758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25815-25906]:Block[26631-26722]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[25823-25832]:ExpressionStatement[26639-26648]"
    }, {
      "left" : "add(n, clearContextForNoInOperator(context));",
      "right" : "add(n, clearContextForNoInOperator(context));",
      "info" : "ExpressionStatement[25839-25884]:ExpressionStatement[26655-26700]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[25891-25900]:ExpressionStatement[26707-26716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25912-25942]:Block[26728-26758]"
    }, {
      "left" : "add(n, context);",
      "right" : "add(n, context);",
      "info" : "ExpressionStatement[25920-25936]:ExpressionStatement[26736-26752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25981-26033]:Block[26797-26849]"
    }, {
      "left" : "addList(firstInList, true, Context.OTHER);",
      "right" : "addList(firstInList, true, Context.OTHER);",
      "info" : "ExpressionStatement[25987-26029]:ExpressionStatement[26803-26845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26103-26176]:Block[26919-26992]"
    }, {
      "left" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "right" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "info" : "ExpressionStatement[26109-26172]:ExpressionStatement[26925-26988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26281-26593]:Block[27097-27409]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[26287-26589]:ForStatement[27103-27405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26342-26589]:Block[27158-27405]"
    }, {
      "left" : "boolean isFirst = n == firstInList;",
      "right" : "boolean isFirst = n == firstInList;",
      "info" : "VariableDeclarationStatement[26350-26385]:VariableDeclarationStatement[27166-27201]"
    }, {
      "left" : "if (isFirst)",
      "right" : "if (isFirst)",
      "info" : "IfStatement[26392-26583]:IfStatement[27208-27399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26405-26485]:Block[27221-27301]"
    }, {
      "left" : "addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "right" : "addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "info" : "ExpressionStatement[26415-26477]:ExpressionStatement[27231-27293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26491-26583]:Block[27307-27399]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[26501-26520]:ExpressionStatement[27317-27336]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0);",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0);",
      "info" : "ExpressionStatement[26529-26575]:ExpressionStatement[27345-27391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26984-27283]:Block[27800-28099]"
    }, {
      "left" : "boolean lastWasEmpty = false;",
      "right" : "boolean lastWasEmpty = false;",
      "info" : "VariableDeclarationStatement[26990-27019]:VariableDeclarationStatement[27806-27835]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[27024-27222]:ForStatement[27840-28038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27079-27222]:Block[27895-28038]"
    }, {
      "left" : "if (n != firstInList)",
      "right" : "if (n != firstInList)",
      "info" : "IfStatement[27087-27146]:IfStatement[27903-27962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27109-27146]:Block[27925-27962]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[27119-27138]:ExpressionStatement[27935-27954]"
    }, {
      "left" : "addExpr(n, 1);",
      "right" : "addExpr(n, 1);",
      "info" : "ExpressionStatement[27153-27167]:ExpressionStatement[27969-27983]"
    }, {
      "left" : "lastWasEmpty = n.getType() == Token.EMPTY;",
      "right" : "lastWasEmpty = n.getType() == Token.EMPTY;",
      "info" : "ExpressionStatement[27174-27216]:ExpressionStatement[27990-28032]"
    }, {
      "left" : "if (lastWasEmpty)",
      "right" : "if (lastWasEmpty)",
      "info" : "IfStatement[27228-27279]:IfStatement[28044-28095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27246-27279]:Block[28062-28095]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[27254-27273]:ExpressionStatement[28070-28089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27319-27389]:Block[28135-28205]"
    }, {
      "left" : "cc.beginCaseBody();",
      "right" : "cc.beginCaseBody();",
      "info" : "ExpressionStatement[27325-27344]:ExpressionStatement[28141-28160]"
    }, {
      "left" : "add(caseBody);",
      "right" : "add(caseBody);",
      "info" : "ExpressionStatement[27349-27363]:ExpressionStatement[28165-28179]"
    }, {
      "left" : "cc.endCaseBody();",
      "right" : "cc.endCaseBody();",
      "info" : "ExpressionStatement[27368-27385]:ExpressionStatement[28184-28201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27421-27497]:Block[28237-28313]"
    }, {
      "left" : "for (Node c = n; c != null; c = c.getNext())",
      "right" : "for (Node c = n; c != null; c = c.getNext())",
      "info" : "ForStatement[27427-27493]:ForStatement[28243-28309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27472-27493]:Block[28288-28309]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[27480-27487]:ExpressionStatement[28296-28303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27651-28370]:Block[28467-29186]"
    }, {
      "left" : "int singleq = 0, doubleq = 0;",
      "right" : "int singleq = 0, doubleq = 0;",
      "info" : "VariableDeclarationStatement[27657-27686]:VariableDeclarationStatement[28473-28502]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[27759-27913]:ForStatement[28575-28729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27796-27913]:Block[28612-28729]"
    }, {
      "left" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "right" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "info" : "SwitchStatement[27804-27907]:SwitchStatement[28620-28723]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[27835-27844]:SwitchCase[28651-28660]"
    }, {
      "left" : "doubleq++;",
      "right" : "doubleq++;",
      "info" : "ExpressionStatement[27845-27855]:ExpressionStatement[28661-28671]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27856-27862]:BreakStatement[28672-28678]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[27871-27881]:SwitchCase[28687-28697]"
    }, {
      "left" : "singleq++;",
      "right" : "singleq++;",
      "info" : "ExpressionStatement[27882-27892]:ExpressionStatement[28698-28708]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27893-27899]:BreakStatement[28709-28715]"
    }, {
      "left" : "String doublequote, singlequote;",
      "right" : "String doublequote, singlequote;",
      "info" : "VariableDeclarationStatement[27919-27951]:VariableDeclarationStatement[28735-28767]"
    }, {
      "left" : "char quote;",
      "right" : "char quote;",
      "info" : "VariableDeclarationStatement[27956-27967]:VariableDeclarationStatement[28772-28783]"
    }, {
      "left" : "if (singleq < doubleq)",
      "right" : "if (singleq < doubleq)",
      "info" : "IfStatement[27972-28269]:IfStatement[28788-29085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27995-28132]:Block[28811-28948]"
    }, {
      "left" : "quote = '\\'';",
      "right" : "quote = '\\'';",
      "info" : "ExpressionStatement[28059-28072]:ExpressionStatement[28875-28888]"
    }, {
      "left" : "doublequote = \"\\\"\";",
      "right" : "doublequote = \"\\\"\";",
      "info" : "ExpressionStatement[28079-28098]:ExpressionStatement[28895-28914]"
    }, {
      "left" : "singlequote = \"\\\\\\'\";",
      "right" : "singlequote = \"\\\\\\'\";",
      "info" : "ExpressionStatement[28105-28126]:ExpressionStatement[28921-28942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28138-28269]:Block[28954-29085]"
    }, {
      "left" : "quote = '\\\"';",
      "right" : "quote = '\\\"';",
      "info" : "ExpressionStatement[28196-28209]:ExpressionStatement[29012-29025]"
    }, {
      "left" : "doublequote = \"\\\\\\\"\";",
      "right" : "doublequote = \"\\\\\\\"\";",
      "info" : "ExpressionStatement[28216-28237]:ExpressionStatement[29032-29053]"
    }, {
      "left" : "singlequote = \"\\'\";",
      "right" : "singlequote = \"\\'\";",
      "info" : "ExpressionStatement[28244-28263]:ExpressionStatement[29060-29079]"
    }, {
      "left" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder);",
      "right" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder);",
      "info" : "ReturnStatement[28275-28366]:ReturnStatement[29091-29182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28484-28558]:Block[29300-29374]"
    }, {
      "left" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder);",
      "right" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder);",
      "info" : "ReturnStatement[28490-28554]:ReturnStatement[29306-29370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28703-28767]:Block[29519-29583]"
    }, {
      "left" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null);",
      "right" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null);",
      "info" : "ReturnStatement[28709-28763]:ReturnStatement[29525-29579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28933-28972]:Block[29749-29788]"
    }, {
      "left" : "return regexpEscape(s, null);",
      "right" : "return regexpEscape(s, null);",
      "info" : "ReturnStatement[28939-28968]:ReturnStatement[29755-29784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29313-31841]:Block[30129-32657]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "right" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "info" : "VariableDeclarationStatement[29319-29372]:VariableDeclarationStatement[30135-30188]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[29377-29394]:ExpressionStatement[30193-30210]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[29399-31789]:ForStatement[30215-32605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29436-31789]:Block[30252-32605]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[29444-29465]:VariableDeclarationStatement[30260-30281]"
    }, {
      "left" : "switch (c) {\n        case '\\0': sb.append(\"\\\\0\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c <= 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "right" : "switch (c) {\n        case '\\0': sb.append(\"\\\\0\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c <= 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "info" : "SwitchStatement[29472-31783]:SwitchStatement[30288-32599]"
    }, {
      "left" : "case '\\0':",
      "right" : "case '\\0':",
      "info" : "SwitchCase[29493-29503]:SwitchCase[30309-30319]"
    }, {
      "left" : "sb.append(\"\\\\0\");",
      "right" : "sb.append(\"\\\\0\");",
      "info" : "ExpressionStatement[29504-29521]:ExpressionStatement[30320-30337]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29522-29528]:BreakStatement[30338-30344]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[29537-29547]:SwitchCase[30353-30363]"
    }, {
      "left" : "sb.append(\"\\\\n\");",
      "right" : "sb.append(\"\\\\n\");",
      "info" : "ExpressionStatement[29548-29565]:ExpressionStatement[30364-30381]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29566-29572]:BreakStatement[30382-30388]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[29581-29591]:SwitchCase[30397-30407]"
    }, {
      "left" : "sb.append(\"\\\\r\");",
      "right" : "sb.append(\"\\\\r\");",
      "info" : "ExpressionStatement[29592-29609]:ExpressionStatement[30408-30425]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29610-29616]:BreakStatement[30426-30432]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[29625-29635]:SwitchCase[30441-30451]"
    }, {
      "left" : "sb.append(\"\\\\t\");",
      "right" : "sb.append(\"\\\\t\");",
      "info" : "ExpressionStatement[29636-29653]:ExpressionStatement[30452-30469]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29654-29660]:BreakStatement[30470-30476]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[29669-29679]:SwitchCase[30485-30495]"
    }, {
      "left" : "sb.append(backslashEscape);",
      "right" : "sb.append(backslashEscape);",
      "info" : "ExpressionStatement[29680-29707]:ExpressionStatement[30496-30523]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29708-29714]:BreakStatement[30524-30530]"
    }, {
      "left" : "case '\\\"':",
      "right" : "case '\\\"':",
      "info" : "SwitchCase[29723-29733]:SwitchCase[30539-30549]"
    }, {
      "left" : "sb.append(doublequoteEscape);",
      "right" : "sb.append(doublequoteEscape);",
      "info" : "ExpressionStatement[29734-29763]:ExpressionStatement[30550-30579]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29764-29770]:BreakStatement[30580-30586]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[29779-29789]:SwitchCase[30595-30605]"
    }, {
      "left" : "sb.append(singlequoteEscape);",
      "right" : "sb.append(singlequoteEscape);",
      "info" : "ExpressionStatement[29790-29819]:ExpressionStatement[30606-30635]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29820-29826]:BreakStatement[30636-30642]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[29835-29844]:SwitchCase[30651-30660]"
    }, {
      "left" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "right" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "info" : "IfStatement[29917-30156]:IfStatement[30733-30972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30068-30111]:Block[30884-30927]"
    }, {
      "left" : "sb.append(\"\\\\>\");",
      "right" : "sb.append(\"\\\\>\");",
      "info" : "ExpressionStatement[30082-30099]:ExpressionStatement[30898-30915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30117-30156]:Block[30933-30972]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[30131-30144]:ExpressionStatement[30947-30960]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30167-30173]:BreakStatement[30983-30989]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[30182-30191]:SwitchCase[30998-31007]"
    }, {
      "left" : "final String END_SCRIPT = \"/script\";",
      "right" : "final String END_SCRIPT = \"/script\";",
      "info" : "VariableDeclarationStatement[30245-30281]:VariableDeclarationStatement[31061-31097]"
    }, {
      "left" : "final String START_COMMENT = \"!--\";",
      "right" : "final String START_COMMENT = \"!--\";",
      "info" : "VariableDeclarationStatement[30328-30363]:VariableDeclarationStatement[31144-31179]"
    }, {
      "left" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length()))",
      "right" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length()))",
      "info" : "IfStatement[30375-30726]:IfStatement[31191-31542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30475-30518]:Block[31291-31334]"
    }, {
      "left" : "sb.append(\"<\\\\\");",
      "right" : "sb.append(\"<\\\\\");",
      "info" : "ExpressionStatement[30489-30506]:ExpressionStatement[31305-31322]"
    }, {
      "left" : "if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length()))",
      "right" : "if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length()))",
      "info" : "IfStatement[30524-30726]:IfStatement[31340-31542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30638-30681]:Block[31454-31497]"
    }, {
      "left" : "sb.append(\"<\\\\\");",
      "right" : "sb.append(\"<\\\\\");",
      "info" : "ExpressionStatement[30652-30669]:ExpressionStatement[31468-31485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30687-30726]:Block[31503-31542]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[30701-30714]:ExpressionStatement[31517-31530]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30737-30743]:BreakStatement[31553-31559]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[30752-30760]:SwitchCase[31568-31576]"
    }, {
      "left" : "if (outputCharsetEncoder != null)",
      "right" : "if (outputCharsetEncoder != null)",
      "info" : "IfStatement[30908-31775]:IfStatement[31724-32591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30942-31174]:Block[31758-31990]"
    }, {
      "left" : "if (outputCharsetEncoder.canEncode(c))",
      "right" : "if (outputCharsetEncoder.canEncode(c))",
      "info" : "IfStatement[30956-31162]:IfStatement[31772-31978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30995-31038]:Block[31811-31854]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[31011-31024]:ExpressionStatement[31827-31840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31044-31162]:Block[31860-31978]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[31107-31148]:ExpressionStatement[31923-31964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31180-31775]:Block[31996-32591]"
    }, {
      "left" : "if (c > 0x1f && c <= 0x7f)",
      "right" : "if (c > 0x1f && c <= 0x7f)",
      "info" : "IfStatement[31417-31763]:IfStatement[32233-32579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31444-31487]:Block[32260-32303]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[31460-31473]:ExpressionStatement[32276-32289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31493-31763]:Block[32309-32579]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[31708-31749]:ExpressionStatement[32524-32565]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[31794-31811]:ExpressionStatement[32610-32627]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[31816-31837]:ReturnStatement[32632-32653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31886-32535]:Block[32702-33351]"
    }, {
      "left" : "if (NodeUtil.isLatin(s))",
      "right" : "if (NodeUtil.isLatin(s))",
      "info" : "IfStatement[31967-32015]:IfStatement[32783-32831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31992-32015]:Block[32808-32831]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[32000-32009]:ReturnStatement[32816-32825]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[32099-32138]:VariableDeclarationStatement[32915-32954]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[32143-32505]:ForStatement[32959-33321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32180-32505]:Block[32996-33321]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[32188-32209]:VariableDeclarationStatement[33004-33025]"
    }, {
      "left" : "if (c > 0x1F && c < 0x7F)",
      "right" : "if (c > 0x1F && c < 0x7F)",
      "info" : "IfStatement[32377-32499]:IfStatement[33193-33315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32403-32434]:Block[33219-33250]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32413-32426]:ExpressionStatement[33229-33242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32440-32499]:Block[33256-33315]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[32450-32491]:ExpressionStatement[33266-33307]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[32510-32531]:ReturnStatement[33326-33347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32767-33055]:Block[33583-33871]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[32773-32783]:VariableDeclarationStatement[33589-33599]"
    }, {
      "left" : "Node c = n.getFirstChild();",
      "right" : "Node c = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[32788-32815]:VariableDeclarationStatement[33604-33631]"
    }, {
      "left" : "for (; c != null && i < maxCount; c = c.getNext())",
      "right" : "for (; c != null && i < maxCount; c = c.getNext())",
      "info" : "ForStatement[32820-33037]:ForStatement[33636-33853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32871-33037]:Block[33687-33853]"
    }, {
      "left" : "if (c.getType() == Token.BLOCK)",
      "right" : "if (c.getType() == Token.BLOCK)",
      "info" : "IfStatement[32879-33031]:IfStatement[33695-33847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32911-32971]:Block[33727-33787]"
    }, {
      "left" : "i += getNonEmptyChildCount(c, maxCount-i);",
      "right" : "i += getNonEmptyChildCount(c, maxCount-i);",
      "info" : "ExpressionStatement[32921-32963]:ExpressionStatement[33737-33779]"
    }, {
      "left" : "if (c.getType() != Token.EMPTY)",
      "right" : "if (c.getType() != Token.EMPTY)",
      "info" : "IfStatement[32977-33031]:IfStatement[33793-33847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33009-33031]:Block[33825-33847]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[33019-33023]:ExpressionStatement[33835-33839]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[33042-33051]:ReturnStatement[33858-33867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33168-33489]:Block[33984-34305]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[33174-33468]:ForStatement[33990-34284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33235-33468]:Block[34051-34284]"
    }, {
      "left" : "if (c.getType() == Token.BLOCK)",
      "right" : "if (c.getType() == Token.BLOCK)",
      "info" : "IfStatement[33243-33462]:IfStatement[34059-34278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33275-33397]:Block[34091-34213]"
    }, {
      "left" : "Node result = getFirstNonEmptyChild(c);",
      "right" : "Node result = getFirstNonEmptyChild(c);",
      "info" : "VariableDeclarationStatement[33285-33324]:VariableDeclarationStatement[34101-34140]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[33333-33389]:IfStatement[34149-34205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33353-33389]:Block[34169-34205]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[33365-33379]:ReturnStatement[34181-34195]"
    }, {
      "left" : "if (c.getType() != Token.EMPTY)",
      "right" : "if (c.getType() != Token.EMPTY)",
      "info" : "IfStatement[33403-33462]:IfStatement[34219-34278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33435-33462]:Block[34251-34278]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[33445-33454]:ReturnStatement[34261-34270]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33473-33485]:ReturnStatement[34289-34301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34172-34291]:Block[34988-35107]"
    }, {
      "left" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "right" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "info" : "ReturnStatement[34178-34287]:ReturnStatement[34994-35103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34520-34630]:Block[35336-35446]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "info" : "ReturnStatement[34526-34626]:ReturnStatement[35342-35442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34980-35071]:Block[35796-35887]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);",
      "info" : "ReturnStatement[34986-35067]:ReturnStatement[35802-35883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35236-35425]:Block[36052-36241]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[35242-35421]:TryStatement[36058-36237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35246-35301]:Block[36062-36117]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(c, sb);",
      "right" : "appendHexJavaScriptRepresentation(c, sb);",
      "info" : "ExpressionStatement[35254-35295]:ExpressionStatement[36070-36111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35325-35421]:Block[36141-36237]"
    }, {
      "left" : "throw new RuntimeException(ex);",
      "right" : "throw new RuntimeException(ex);",
      "info" : "ThrowStatement[35384-35415]:ThrowStatement[36200-36231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35777-36515]:Block[36593-37331]"
    }, {
      "left" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "right" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "info" : "IfStatement[35783-36287]:IfStatement[36599-37103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35834-36287]:Block[36650-37103]"
    }, {
      "left" : "char[] surrogates = Character.toChars(codePoint);",
      "right" : "char[] surrogates = Character.toChars(codePoint);",
      "info" : "VariableDeclarationStatement[36096-36145]:VariableDeclarationStatement[36912-36961]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "info" : "ExpressionStatement[36152-36206]:ExpressionStatement[36968-37022]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "info" : "ExpressionStatement[36213-36267]:ExpressionStatement[37029-37083]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36274-36281]:ReturnStatement[37090-37097]"
    }, {
      "left" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "right" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "info" : "ExpressionStatement[36292-36511]:ExpressionStatement[37108-37327]"
    } ]
  },
  "interFileMappings" : { }
}