{
  "matchedElements" : [
 {
    "left" : "class : Metaphone",
    "right" : "class : Metaphone",
    "info" : "TypeDeclaration[948-14405]:TypeDeclaration[948-14429]"
  }, {
    "left" : "VOWELS",
    "right" : "VOWELS",
    "info" : "FieldDeclaration[1739-1845]:FieldDeclaration[1739-1845]"
  }, {
    "left" : "FRONTV",
    "right" : "FRONTV",
    "info" : "FieldDeclaration[1851-1957]:FieldDeclaration[1851-1957]"
  }, {
    "left" : "VARSON",
    "right" : "VARSON",
    "info" : "FieldDeclaration[1963-2069]:FieldDeclaration[1963-2069]"
  }, {
    "left" : "maxCodeLen",
    "right" : "maxCodeLen",
    "info" : "FieldDeclaration[2075-2165]:FieldDeclaration[2075-2165]"
  }, {
    "left" : "public Metaphone()",
    "right" : "public Metaphone()",
    "info" : "MethodDeclaration[2171-2282]:MethodDeclaration[2171-2282]"
  }, {
    "left" : "public metaphone(txt ) : ",
    "right" : "public metaphone(txt ) : ",
    "info" : "MethodDeclaration[2288-11537]:MethodDeclaration[2288-11561]"
  }, {
    "left" : "private isVowel(string , index int) : boolean",
    "right" : "private isVowel(string , index int) : boolean",
    "info" : "MethodDeclaration[11540-11652]:MethodDeclaration[11564-11676]"
  }, {
    "left" : "private isPreviousChar(string , index int, c char) : boolean",
    "right" : "private isPreviousChar(string , index int, c char) : boolean",
    "info" : "MethodDeclaration[11655-11876]:MethodDeclaration[11679-11900]"
  }, {
    "left" : "private isNextChar(string , index int, c char) : boolean",
    "right" : "private isNextChar(string , index int, c char) : boolean",
    "info" : "MethodDeclaration[11879-12101]:MethodDeclaration[11903-12125]"
  }, {
    "left" : "private regionMatch(string , index int, test ) : boolean",
    "right" : "private regionMatch(string , index int, test ) : boolean",
    "info" : "MethodDeclaration[12104-12416]:MethodDeclaration[12128-12440]"
  }, {
    "left" : "private isLastChar(wdsz int, n int) : boolean",
    "right" : "private isLastChar(wdsz int, n int) : boolean",
    "info" : "MethodDeclaration[12419-12491]:MethodDeclaration[12443-12515]"
  }, {
    "left" : "public encode(pObject ) : ",
    "right" : "public encode(pObject ) : ",
    "info" : "MethodDeclaration[12507-13378]:MethodDeclaration[12531-13402]"
  }, {
    "left" : "public encode(pString ) : ",
    "right" : "public encode(pString ) : ",
    "info" : "MethodDeclaration[13384-13662]:MethodDeclaration[13408-13686]"
  }, {
    "left" : "public isMetaphoneEqual(str1 , str2 ) : boolean",
    "right" : "public isMetaphoneEqual(str1 , str2 ) : boolean",
    "info" : "MethodDeclaration[13668-14104]:MethodDeclaration[13692-14128]"
  }, {
    "left" : "public getMaxCodeLen() : int",
    "right" : "public getMaxCodeLen() : int",
    "info" : "MethodDeclaration[14110-14230]:MethodDeclaration[14134-14254]"
  }, {
    "left" : "public setMaxCodeLen(maxCodeLen int) : void",
    "right" : "public setMaxCodeLen(maxCodeLen int) : void",
    "info" : "MethodDeclaration[14236-14402]:MethodDeclaration[14260-14426]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1684-1690]:Modifier[1684-1690]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1691-1696]:TYPE_DECLARATION_KIND[1691-1696]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2239-2245]:Modifier[2239-2245]"
  }, {
    "left" : "Metaphone",
    "right" : "Metaphone",
    "info" : "SimpleName[2246-2255]:SimpleName[2246-2255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2258-2282]:Block[2258-2282]"
  }, {
    "left" : "super();",
    "right" : "super();",
    "info" : "SuperConstructorInvocation[2268-2276]:SuperConstructorInvocation[2268-2276]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2767-2773]:Modifier[2767-2773]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[2774-2780]:SimpleType[2774-2780]"
  }, {
    "left" : "metaphone",
    "right" : "metaphone",
    "info" : "SimpleName[2781-2790]:SimpleName[2781-2790]"
  }, {
    "left" : "String txt",
    "right" : "String txt",
    "info" : "SingleVariableDeclaration[2791-2801]:SingleVariableDeclaration[2791-2801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2803-11537]:Block[2803-11561]"
  }, {
    "left" : "boolean hard = false ;",
    "right" : "boolean hard = false ;",
    "info" : "VariableDeclarationStatement[2813-2835]:VariableDeclarationStatement[2813-2835]"
  }, {
    "left" : "if ((txt == null) || (txt.length() == 0))",
    "right" : "if ((txt == null) || (txt.length() == 0))",
    "info" : "IfStatement[2844-2921]:IfStatement[2844-2921]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2886-2921]:Block[2886-2921]"
  }, {
    "left" : "return \"\" ;",
    "right" : "return \"\" ;",
    "info" : "ReturnStatement[2900-2911]:ReturnStatement[2900-2911]"
  }, {
    "left" : "if (txt.length() == 1)",
    "right" : "if (txt.length() == 1)",
    "info" : "IfStatement[2968-3041]:IfStatement[2968-3065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2991-3041]:Block[2991-3065]"
  }, {
    "left" : "return txt.toUpperCase() ;",
    "right" : "return txt.toUpperCase(java.util.Locale.ENGLISH) ;",
    "info" : "ReturnStatement[3005-3031]:ReturnStatement[3005-3055]"
  }, {
    "left" : "char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;",
    "right" : "char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;",
    "info" : "VariableDeclarationStatement[3057-3128]:VariableDeclarationStatement[3081-3152]"
  }, {
    "left" : "StringBuffer local = new StringBuffer(40);",
    "right" : "StringBuffer local = new StringBuffer(40);",
    "info" : "VariableDeclarationStatement[3144-3186]:VariableDeclarationStatement[3168-3210]"
  }, {
    "left" : "StringBuffer code = new StringBuffer(10) ;",
    "right" : "StringBuffer code = new StringBuffer(10) ;",
    "info" : "VariableDeclarationStatement[3209-3251]:VariableDeclarationStatement[3233-3275]"
  }, {
    "left" : "switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        }",
    "right" : "switch(inwd[0]) {\n        case 'K' : \n        case 'G' : \n        case 'P' : /* looking for KN, etc*/\n            if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A': /* looking for AE */\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W' : /* looking for WR or WH */\n            if (inwd[1] == 'R') {   // WR -> R\n                local.append(inwd, 1, inwd.length - 1); \n                break ;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                local.setCharAt(0, 'W'); // WH -> W\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X' : /* initial X becomes S */\n            inwd[0] = 'S';\n            local.append(inwd);\n            break ;\n        default :\n            local.append(inwd);\n        }",
    "info" : "SwitchStatement[3322-4426]:SwitchStatement[3346-4450]"
  }, {
    "left" : "case 'K' :",
    "right" : "case 'K' :",
    "info" : "SwitchCase[3348-3358]:SwitchCase[3372-3382]"
  }, {
    "left" : "case 'G' :",
    "right" : "case 'G' :",
    "info" : "SwitchCase[3368-3378]:SwitchCase[3392-3402]"
  }, {
    "left" : "case 'P' :",
    "right" : "case 'P' :",
    "info" : "SwitchCase[3388-3398]:SwitchCase[3412-3422]"
  }, {
    "left" : "if (inwd[1] == 'N')",
    "right" : "if (inwd[1] == 'N')",
    "info" : "IfStatement[3436-3584]:IfStatement[3460-3608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3456-3527]:Block[3480-3551]"
  }, {
    "left" : "local.append(inwd, 1, inwd.length - 1);",
    "right" : "local.append(inwd, 1, inwd.length - 1);",
    "info" : "ExpressionStatement[3474-3513]:ExpressionStatement[3498-3537]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3533-3584]:Block[3557-3608]"
  }, {
    "left" : "local.append(inwd);",
    "right" : "local.append(inwd);",
    "info" : "ExpressionStatement[3551-3570]:ExpressionStatement[3575-3594]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[3597-3603]:BreakStatement[3621-3627]"
  }, {
    "left" : "case 'A':",
    "right" : "case 'A':",
    "info" : "SwitchCase[3612-3621]:SwitchCase[3636-3645]"
  }, {
    "left" : "if (inwd[1] == 'E')",
    "right" : "if (inwd[1] == 'E')",
    "info" : "IfStatement[3655-3803]:IfStatement[3679-3827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3675-3746]:Block[3699-3770]"
  }, {
    "left" : "local.append(inwd, 1, inwd.length - 1);",
    "right" : "local.append(inwd, 1, inwd.length - 1);",
    "info" : "ExpressionStatement[3693-3732]:ExpressionStatement[3717-3756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3752-3803]:Block[3776-3827]"
  }, {
    "left" : "local.append(inwd);",
    "right" : "local.append(inwd);",
    "info" : "ExpressionStatement[3770-3789]:ExpressionStatement[3794-3813]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[3816-3822]:BreakStatement[3840-3846]"
  }, {
    "left" : "case 'W' :",
    "right" : "case 'W' :",
    "info" : "SwitchCase[3831-3841]:SwitchCase[3855-3865]"
  }, {
    "left" : "if (inwd[1] == 'R')",
    "right" : "if (inwd[1] == 'R')",
    "info" : "IfStatement[3881-4010]:IfStatement[3905-4034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3901-4010]:Block[3925-4034]"
  }, {
    "left" : "local.append(inwd, 1, inwd.length - 1);",
    "right" : "local.append(inwd, 1, inwd.length - 1);",
    "info" : "ExpressionStatement[3932-3971]:ExpressionStatement[3956-3995]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[3989-3996]:BreakStatement[4013-4020]"
  }, {
    "left" : "if (inwd[1] == 'H')",
    "right" : "if (inwd[1] == 'H')",
    "info" : "IfStatement[4023-4223]:IfStatement[4047-4247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4043-4166]:Block[4067-4190]"
  }, {
    "left" : "local.append(inwd, 1, inwd.length - 1);",
    "right" : "local.append(inwd, 1, inwd.length - 1);",
    "info" : "ExpressionStatement[4061-4100]:ExpressionStatement[4085-4124]"
  }, {
    "left" : "local.setCharAt(0, 'W');",
    "right" : "local.setCharAt(0, 'W');",
    "info" : "ExpressionStatement[4117-4141]:ExpressionStatement[4141-4165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4172-4223]:Block[4196-4247]"
  }, {
    "left" : "local.append(inwd);",
    "right" : "local.append(inwd);",
    "info" : "ExpressionStatement[4190-4209]:ExpressionStatement[4214-4233]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4236-4242]:BreakStatement[4260-4266]"
  }, {
    "left" : "case 'X' :",
    "right" : "case 'X' :",
    "info" : "SwitchCase[4251-4261]:SwitchCase[4275-4285]"
  }, {
    "left" : "inwd[0] = 'S';",
    "right" : "inwd[0] = 'S';",
    "info" : "ExpressionStatement[4300-4314]:ExpressionStatement[4324-4338]"
  }, {
    "left" : "local.append(inwd);",
    "right" : "local.append(inwd);",
    "info" : "ExpressionStatement[4327-4346]:ExpressionStatement[4351-4370]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[4359-4366]:BreakStatement[4383-4390]"
  }, {
    "left" : "default :",
    "right" : "default :",
    "info" : "SwitchCase[4375-4384]:SwitchCase[4399-4408]"
  }, {
    "left" : "local.append(inwd);",
    "right" : "local.append(inwd);",
    "info" : "ExpressionStatement[4397-4416]:ExpressionStatement[4421-4440]"
  }, {
    "left" : "int wdsz = local.length();",
    "right" : "int wdsz = local.length();",
    "info" : "VariableDeclarationStatement[4488-4514]:VariableDeclarationStatement[4512-4538]"
  }, {
    "left" : "int n = 0 ;",
    "right" : "int n = 0 ;",
    "info" : "VariableDeclarationStatement[4523-4534]:VariableDeclarationStatement[4547-4558]"
  }, {
    "left" : "while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz))",
    "right" : "while ((code.length() < this.getMaxCodeLen()) && \n        \t   (n < wdsz))",
    "info" : "WhileStatement[4544-11499]:WhileStatement[4568-11523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4619-11499]:Block[4643-11523]"
  }, {
    "left" : "char symb = local.charAt(n) ;",
    "right" : "char symb = local.charAt(n) ;",
    "info" : "VariableDeclarationStatement[4666-4695]:VariableDeclarationStatement[4690-4719]"
  }, {
    "left" : "if ((symb != 'C') && (isPreviousChar( local, n, symb )))",
    "right" : "if ((symb != 'C') && (isPreviousChar( local, n, symb )))",
    "info" : "IfStatement[4757-11337]:IfStatement[4781-11361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4815-4852]:Block[4839-4876]"
  }, {
    "left" : "n++ ;",
    "right" : "n++ ;",
    "info" : "ExpressionStatement[4833-4838]:ExpressionStatement[4857-4862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4858-11337]:Block[4882-11361]"
  }, {
    "left" : "switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                }",
    "right" : "switch(symb) {\n                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n                    if (n == 0) { \n                        code.append(symb);\n                    }\n                    break ; // only use vowel if leading char\n                case 'B' :\n                    if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n\t\t\t\t\t\tbreak;\n                    }\n                    code.append(symb);\n                    break;\n                case 'C' : // lots of C special cases\n                    /* discard if SCI, SCE or SCY */\n                    if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                        code.append('X'); \n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        break; // CI,CE,CY -> S\n                    }\n                    if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H') ) { // SCH->sk\n                        code.append('K') ; \n                        break ;\n                    }\n                    if (isNextChar(local, n, 'H')) { // detect CH\n                        if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2) ) { // CH consonant -> K consonant\n                            code.append('K');\n                        } else { \n                            code.append('X'); // CHvowel -> X\n                        }\n                    } else { \n                        code.append('K');\n                    }\n                    break ;\n                case 'D' :\n                    if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                        code.append('J'); n += 2 ;\n                    } else { \n                        code.append('T');\n                    }\n                    break ;\n                case 'G' : // GH silent at end or before consonant\n                    if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2)) {\n                        break;\n                    }\n                    if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ) ) {\n                        break; // silent G\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true ;\n                    } else {\n                        hard = false ;\n                    }\n                    if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break ;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break ; // terminal H\n                    }\n                    if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local,n+1)) {\n                        code.append('H'); // Hvowel\n                    }\n                    break;\n                case 'F': \n                case 'J' : \n                case 'L' :\n                case 'M': \n                case 'N' : \n                case 'R' :\n                    code.append(symb); \n                    break;\n                case 'K' :\n                    if (n > 0) { // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb); // initial K\n                    }\n                    break ;\n                case 'P' :\n                    if (isNextChar(local,n,'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'Q' :\n                    code.append('K');\n                    break;\n                case 'S' :\n                    if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T' :\n                    if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\")) {\n                        code.append('X'); \n                        break;\n                    }\n                    if (regionMatch(local,n,\"TCH\")) {\n\t\t\t\t\t\t// Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local,n,\"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break ;\n                case 'V' :\n                    code.append('F'); break ;\n                case 'W' : case 'Y' : // silent if not followed by vowel\n                    if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1)) {\n                        code.append(symb);\n                    }\n                    break ;\n                case 'X' :\n                    code.append('K'); code.append('S');\n                    break ;\n                case 'Z' :\n                    code.append('S'); break ;\n                }",
    "info" : "SwitchStatement[4887-11287]:SwitchStatement[4911-11311]"
  }, {
    "left" : "case 'A' :",
    "right" : "case 'A' :",
    "info" : "SwitchCase[4918-4928]:SwitchCase[4942-4952]"
  }, {
    "left" : "case 'E' :",
    "right" : "case 'E' :",
    "info" : "SwitchCase[4929-4939]:SwitchCase[4953-4963]"
  }, {
    "left" : "case 'I' :",
    "right" : "case 'I' :",
    "info" : "SwitchCase[4940-4950]:SwitchCase[4964-4974]"
  }, {
    "left" : "case 'O' :",
    "right" : "case 'O' :",
    "info" : "SwitchCase[4951-4961]:SwitchCase[4975-4985]"
  }, {
    "left" : "case 'U' :",
    "right" : "case 'U' :",
    "info" : "SwitchCase[4962-4972]:SwitchCase[4986-4996]"
  }, {
    "left" : "if (n == 0)",
    "right" : "if (n == 0)",
    "info" : "IfStatement[4993-5072]:IfStatement[5017-5096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5005-5072]:Block[5029-5096]"
  }, {
    "left" : "code.append(symb);",
    "right" : "code.append(symb);",
    "info" : "ExpressionStatement[5032-5050]:ExpressionStatement[5056-5074]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[5093-5100]:BreakStatement[5117-5124]"
  }, {
    "left" : "case 'B' :",
    "right" : "case 'B' :",
    "info" : "SwitchCase[5151-5161]:SwitchCase[5175-5185]"
  }, {
    "left" : "if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n))",
    "right" : "if ( isPreviousChar(local, n, 'M') && \n                         isLastChar(wdsz, n))",
    "info" : "IfStatement[5182-5338]:IfStatement[5206-5362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5268-5338]:Block[5292-5362]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5310-5316]:BreakStatement[5334-5340]"
  }, {
    "left" : "code.append(symb);",
    "right" : "code.append(symb);",
    "info" : "ExpressionStatement[5359-5377]:ExpressionStatement[5383-5401]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5398-5404]:BreakStatement[5422-5428]"
  }, {
    "left" : "case 'C' :",
    "right" : "case 'C' :",
    "info" : "SwitchCase[5421-5431]:SwitchCase[5445-5455]"
  }, {
    "left" : "if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0))",
    "right" : "if ( isPreviousChar(local, n, 'S') && \n                         !isLastChar(wdsz, n) && \n                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0))",
    "info" : "IfStatement[5532-5746]:IfStatement[5556-5770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5691-5746]:Block[5715-5770]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5718-5724]:BreakStatement[5742-5748]"
  }, {
    "left" : "if (regionMatch(local, n, \"CIA\"))",
    "right" : "if (regionMatch(local, n, \"CIA\"))",
    "info" : "IfStatement[5767-5912]:IfStatement[5791-5936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5801-5912]:Block[5825-5936]"
  }, {
    "left" : "code.append('X');",
    "right" : "code.append('X');",
    "info" : "ExpressionStatement[5841-5858]:ExpressionStatement[5865-5882]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5884-5890]:BreakStatement[5908-5914]"
  }, {
    "left" : "if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0))",
    "right" : "if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0))",
    "info" : "IfStatement[5933-6143]:IfStatement[5957-6167]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6030-6143]:Block[6054-6167]"
  }, {
    "left" : "code.append('S');",
    "right" : "code.append('S');",
    "info" : "ExpressionStatement[6056-6073]:ExpressionStatement[6080-6097]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6098-6104]:BreakStatement[6122-6128]"
  }, {
    "left" : "if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H'))",
    "right" : "if (isPreviousChar(local, n, 'S') &&\n\t\t\t\t\t\tisNextChar(local, n, 'H'))",
    "info" : "IfStatement[6164-6345]:IfStatement[6188-6369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6235-6345]:Block[6259-6369]"
  }, {
    "left" : "code.append('K') ;",
    "right" : "code.append('K') ;",
    "info" : "ExpressionStatement[6272-6290]:ExpressionStatement[6296-6314]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[6316-6323]:BreakStatement[6340-6347]"
  }, {
    "left" : "if (isNextChar(local, n, 'H'))",
    "right" : "if (isNextChar(local, n, 'H'))",
    "info" : "IfStatement[6366-6835]:IfStatement[6390-6859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6397-6763]:Block[6421-6787]"
  }, {
    "left" : "if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2))",
    "right" : "if ((n == 0) && \n                        \t(wdsz >= 3) && \n                            isVowel(local,2))",
    "info" : "IfStatement[6436-6741]:IfStatement[6460-6765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6541-6645]:Block[6565-6669]"
  }, {
    "left" : "code.append('K');",
    "right" : "code.append('K');",
    "info" : "ExpressionStatement[6602-6619]:ExpressionStatement[6626-6643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6651-6741]:Block[6675-6765]"
  }, {
    "left" : "code.append('X');",
    "right" : "code.append('X');",
    "info" : "ExpressionStatement[6682-6699]:ExpressionStatement[6706-6723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6769-6835]:Block[6793-6859]"
  }, {
    "left" : "code.append('K');",
    "right" : "code.append('K');",
    "info" : "ExpressionStatement[6796-6813]:ExpressionStatement[6820-6837]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[6856-6863]:BreakStatement[6880-6887]"
  }, {
    "left" : "case 'D' :",
    "right" : "case 'D' :",
    "info" : "SwitchCase[6880-6890]:SwitchCase[6904-6914]"
  }, {
    "left" : "if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0))",
    "right" : "if (!isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'G') && \n                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0))",
    "info" : "IfStatement[6911-7233]:IfStatement[6935-7257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7066-7161]:Block[7090-7185]"
  }, {
    "left" : "code.append('J');",
    "right" : "code.append('J');",
    "info" : "ExpressionStatement[7113-7130]:ExpressionStatement[7137-7154]"
  }, {
    "left" : "n += 2 ;",
    "right" : "n += 2 ;",
    "info" : "ExpressionStatement[7131-7139]:ExpressionStatement[7155-7163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7167-7233]:Block[7191-7257]"
  }, {
    "left" : "code.append('T');",
    "right" : "code.append('T');",
    "info" : "ExpressionStatement[7194-7211]:ExpressionStatement[7218-7235]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[7254-7261]:BreakStatement[7278-7285]"
  }, {
    "left" : "case 'G' :",
    "right" : "case 'G' :",
    "info" : "SwitchCase[7278-7288]:SwitchCase[7302-7312]"
  }, {
    "left" : "if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H'))",
    "right" : "if (isLastChar(wdsz, n + 1) && \n                        isNextChar(local, n, 'H'))",
    "info" : "IfStatement[7349-7486]:IfStatement[7373-7510]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7432-7486]:Block[7456-7510]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7458-7464]:BreakStatement[7482-7488]"
  }, {
    "left" : "if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2))",
    "right" : "if (!isLastChar(wdsz, n + 1) &&  \n                        isNextChar(local,n,'H') && \n                        !isVowel(local,n+2))",
    "info" : "IfStatement[7507-7692]:IfStatement[7531-7716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7638-7692]:Block[7662-7716]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7664-7670]:BreakStatement[7688-7694]"
  }, {
    "left" : "if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ))",
    "right" : "if ((n > 0) && \n                    \t( regionMatch(local, n, \"GN\") ||\n\t\t\t\t\t      regionMatch(local, n, \"GNED\") ))",
    "info" : "IfStatement[7713-7894]:IfStatement[7737-7918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7828-7894]:Block[7852-7918]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7854-7860]:BreakStatement[7878-7884]"
  }, {
    "left" : "if (isPreviousChar(local, n, 'G'))",
    "right" : "if (isPreviousChar(local, n, 'G'))",
    "info" : "IfStatement[7915-8079]:IfStatement[7939-8103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7950-8011]:Block[7974-8035]"
  }, {
    "left" : "hard = true ;",
    "right" : "hard = true ;",
    "info" : "ExpressionStatement[7976-7989]:ExpressionStatement[8000-8013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8017-8079]:Block[8041-8103]"
  }, {
    "left" : "hard = false ;",
    "right" : "hard = false ;",
    "info" : "ExpressionStatement[8043-8057]:ExpressionStatement[8067-8081]"
  }, {
    "left" : "if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard))",
    "right" : "if (!isLastChar(wdsz, n) && \n                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n                        (!hard))",
    "info" : "IfStatement[8100-8369]:IfStatement[8124-8393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8233-8298]:Block[8257-8322]"
  }, {
    "left" : "code.append('J');",
    "right" : "code.append('J');",
    "info" : "ExpressionStatement[8259-8276]:ExpressionStatement[8283-8300]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8304-8369]:Block[8328-8393]"
  }, {
    "left" : "code.append('K');",
    "right" : "code.append('K');",
    "info" : "ExpressionStatement[8330-8347]:ExpressionStatement[8354-8371]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[8390-8397]:BreakStatement[8414-8421]"
  }, {
    "left" : "case 'H':",
    "right" : "case 'H':",
    "info" : "SwitchCase[8414-8423]:SwitchCase[8438-8447]"
  }, {
    "left" : "if (isLastChar(wdsz, n))",
    "right" : "if (isLastChar(wdsz, n))",
    "info" : "IfStatement[8444-8538]:IfStatement[8468-8562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8469-8538]:Block[8493-8562]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[8495-8502]:BreakStatement[8519-8526]"
  }, {
    "left" : "if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0))",
    "right" : "if ((n > 0) && \n                        (VARSON.indexOf(local.charAt(n - 1)) >= 0))",
    "info" : "IfStatement[8559-8697]:IfStatement[8583-8721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8643-8697]:Block[8667-8721]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8669-8675]:BreakStatement[8693-8699]"
  }, {
    "left" : "if (isVowel(local,n+1))",
    "right" : "if (isVowel(local,n+1))",
    "info" : "IfStatement[8718-8817]:IfStatement[8742-8841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8742-8817]:Block[8766-8841]"
  }, {
    "left" : "code.append('H');",
    "right" : "code.append('H');",
    "info" : "ExpressionStatement[8768-8785]:ExpressionStatement[8792-8809]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8838-8844]:BreakStatement[8862-8868]"
  }, {
    "left" : "case 'F':",
    "right" : "case 'F':",
    "info" : "SwitchCase[8861-8870]:SwitchCase[8885-8894]"
  }, {
    "left" : "case 'J' :",
    "right" : "case 'J' :",
    "info" : "SwitchCase[8888-8898]:SwitchCase[8912-8922]"
  }, {
    "left" : "case 'L' :",
    "right" : "case 'L' :",
    "info" : "SwitchCase[8916-8926]:SwitchCase[8940-8950]"
  }, {
    "left" : "case 'M':",
    "right" : "case 'M':",
    "info" : "SwitchCase[8943-8952]:SwitchCase[8967-8976]"
  }, {
    "left" : "case 'N' :",
    "right" : "case 'N' :",
    "info" : "SwitchCase[8970-8980]:SwitchCase[8994-9004]"
  }, {
    "left" : "case 'R' :",
    "right" : "case 'R' :",
    "info" : "SwitchCase[8998-9008]:SwitchCase[9022-9032]"
  }, {
    "left" : "code.append(symb);",
    "right" : "code.append(symb);",
    "info" : "ExpressionStatement[9029-9047]:ExpressionStatement[9053-9071]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9069-9075]:BreakStatement[9093-9099]"
  }, {
    "left" : "case 'K' :",
    "right" : "case 'K' :",
    "info" : "SwitchCase[9092-9102]:SwitchCase[9116-9126]"
  }, {
    "left" : "if (n > 0)",
    "right" : "if (n > 0)",
    "info" : "IfStatement[9123-9392]:IfStatement[9147-9416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9134-9307]:Block[9158-9331]"
  }, {
    "left" : "if (!isPreviousChar(local, n, 'C'))",
    "right" : "if (!isPreviousChar(local, n, 'C'))",
    "info" : "IfStatement[9175-9285]:IfStatement[9199-9309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9211-9285]:Block[9235-9309]"
  }, {
    "left" : "code.append(symb);",
    "right" : "code.append(symb);",
    "info" : "ExpressionStatement[9241-9259]:ExpressionStatement[9265-9283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9313-9392]:Block[9337-9416]"
  }, {
    "left" : "code.append(symb);",
    "right" : "code.append(symb);",
    "info" : "ExpressionStatement[9339-9357]:ExpressionStatement[9363-9381]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[9413-9420]:BreakStatement[9437-9444]"
  }, {
    "left" : "case 'P' :",
    "right" : "case 'P' :",
    "info" : "SwitchCase[9437-9447]:SwitchCase[9461-9471]"
  }, {
    "left" : "if (isNextChar(local,n,'H'))",
    "right" : "if (isNextChar(local,n,'H'))",
    "info" : "IfStatement[9468-9669]:IfStatement[9492-9693]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9497-9597]:Block[9521-9621]"
  }, {
    "left" : "code.append('F');",
    "right" : "code.append('F');",
    "info" : "ExpressionStatement[9558-9575]:ExpressionStatement[9582-9599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9603-9669]:Block[9627-9693]"
  }, {
    "left" : "code.append(symb);",
    "right" : "code.append(symb);",
    "info" : "ExpressionStatement[9629-9647]:ExpressionStatement[9653-9671]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[9690-9697]:BreakStatement[9714-9721]"
  }, {
    "left" : "case 'Q' :",
    "right" : "case 'Q' :",
    "info" : "SwitchCase[9714-9724]:SwitchCase[9738-9748]"
  }, {
    "left" : "code.append('K');",
    "right" : "code.append('K');",
    "info" : "ExpressionStatement[9745-9762]:ExpressionStatement[9769-9786]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9783-9789]:BreakStatement[9807-9813]"
  }, {
    "left" : "case 'S' :",
    "right" : "case 'S' :",
    "info" : "SwitchCase[9806-9816]:SwitchCase[9830-9840]"
  }, {
    "left" : "if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\"))",
    "right" : "if (regionMatch(local,n,\"SH\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIO\") || \n\t\t\t\t\t    regionMatch(local,n,\"SIA\"))",
    "info" : "IfStatement[9837-10084]:IfStatement[9861-10108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9948-10013]:Block[9972-10037]"
  }, {
    "left" : "code.append('X');",
    "right" : "code.append('X');",
    "info" : "ExpressionStatement[9974-9991]:ExpressionStatement[9998-10015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10019-10084]:Block[10043-10108]"
  }, {
    "left" : "code.append('S');",
    "right" : "code.append('S');",
    "info" : "ExpressionStatement[10045-10062]:ExpressionStatement[10069-10086]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10105-10111]:BreakStatement[10129-10135]"
  }, {
    "left" : "case 'T' :",
    "right" : "case 'T' :",
    "info" : "SwitchCase[10128-10138]:SwitchCase[10152-10162]"
  }, {
    "left" : "if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\"))",
    "right" : "if (regionMatch(local,n,\"TIA\") || \n\t\t\t\t\t\tregionMatch(local,n,\"TIO\"))",
    "info" : "IfStatement[10159-10325]:IfStatement[10183-10349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10228-10325]:Block[10252-10349]"
  }, {
    "left" : "code.append('X');",
    "right" : "code.append('X');",
    "info" : "ExpressionStatement[10254-10271]:ExpressionStatement[10278-10295]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10297-10303]:BreakStatement[10321-10327]"
  }, {
    "left" : "if (regionMatch(local,n,\"TCH\"))",
    "right" : "if (regionMatch(local,n,\"TCH\"))",
    "info" : "IfStatement[10346-10460]:IfStatement[10370-10484]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10378-10460]:Block[10402-10484]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10432-10438]:BreakStatement[10456-10462]"
  }, {
    "left" : "if (regionMatch(local,n,\"TH\"))",
    "right" : "if (regionMatch(local,n,\"TH\"))",
    "info" : "IfStatement[10560-10727]:IfStatement[10584-10751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10591-10656]:Block[10615-10680]"
  }, {
    "left" : "code.append('0');",
    "right" : "code.append('0');",
    "info" : "ExpressionStatement[10617-10634]:ExpressionStatement[10641-10658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10662-10727]:Block[10686-10751]"
  }, {
    "left" : "code.append('T');",
    "right" : "code.append('T');",
    "info" : "ExpressionStatement[10688-10705]:ExpressionStatement[10712-10729]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[10748-10755]:BreakStatement[10772-10779]"
  }, {
    "left" : "case 'V' :",
    "right" : "case 'V' :",
    "info" : "SwitchCase[10772-10782]:SwitchCase[10796-10806]"
  }, {
    "left" : "code.append('F');",
    "right" : "code.append('F');",
    "info" : "ExpressionStatement[10803-10820]:ExpressionStatement[10827-10844]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[10821-10828]:BreakStatement[10845-10852]"
  }, {
    "left" : "case 'W' :",
    "right" : "case 'W' :",
    "info" : "SwitchCase[10845-10855]:SwitchCase[10869-10879]"
  }, {
    "left" : "case 'Y' :",
    "right" : "case 'Y' :",
    "info" : "SwitchCase[10856-10866]:SwitchCase[10880-10890]"
  }, {
    "left" : "if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1))",
    "right" : "if (!isLastChar(wdsz,n) && \n                    \tisVowel(local,n+1))",
    "info" : "IfStatement[10922-11057]:IfStatement[10946-11081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10991-11057]:Block[11015-11081]"
  }, {
    "left" : "code.append(symb);",
    "right" : "code.append(symb);",
    "info" : "ExpressionStatement[11017-11035]:ExpressionStatement[11041-11059]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[11078-11085]:BreakStatement[11102-11109]"
  }, {
    "left" : "case 'X' :",
    "right" : "case 'X' :",
    "info" : "SwitchCase[11102-11112]:SwitchCase[11126-11136]"
  }, {
    "left" : "code.append('K');",
    "right" : "code.append('K');",
    "info" : "ExpressionStatement[11133-11150]:ExpressionStatement[11157-11174]"
  }, {
    "left" : "code.append('S');",
    "right" : "code.append('S');",
    "info" : "ExpressionStatement[11151-11168]:ExpressionStatement[11175-11192]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[11189-11196]:BreakStatement[11213-11220]"
  }, {
    "left" : "case 'Z' :",
    "right" : "case 'Z' :",
    "info" : "SwitchCase[11213-11223]:SwitchCase[11237-11247]"
  }, {
    "left" : "code.append('S');",
    "right" : "code.append('S');",
    "info" : "ExpressionStatement[11244-11261]:ExpressionStatement[11268-11285]"
  }, {
    "left" : "break ;",
    "right" : "break ;",
    "info" : "BreakStatement[11262-11269]:BreakStatement[11286-11293]"
  }, {
    "left" : "n++ ;",
    "right" : "n++ ;",
    "info" : "ExpressionStatement[11318-11323]:ExpressionStatement[11342-11347]"
  }, {
    "left" : "if (code.length() > this.getMaxCodeLen())",
    "right" : "if (code.length() > this.getMaxCodeLen())",
    "info" : "IfStatement[11379-11489]:IfStatement[11403-11513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11421-11489]:Block[11445-11513]"
  }, {
    "left" : "code.setLength(this.getMaxCodeLen());",
    "right" : "code.setLength(this.getMaxCodeLen());",
    "info" : "ExpressionStatement[11437-11474]:ExpressionStatement[11461-11498]"
  }, {
    "left" : "return code.toString();",
    "right" : "return code.toString();",
    "info" : "ReturnStatement[11508-11531]:ReturnStatement[11532-11555]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11540-11547]:Modifier[11564-11571]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11548-11555]:PrimitiveType[11572-11579]"
  }, {
    "left" : "isVowel",
    "right" : "isVowel",
    "info" : "SimpleName[11556-11563]:SimpleName[11580-11587]"
  }, {
    "left" : "StringBuffer string",
    "right" : "StringBuffer string",
    "info" : "SingleVariableDeclaration[11564-11583]:SingleVariableDeclaration[11588-11607]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[11585-11594]:SingleVariableDeclaration[11609-11618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11596-11652]:Block[11620-11676]"
  }, {
    "left" : "return VOWELS.indexOf(string.charAt(index)) >= 0;",
    "right" : "return VOWELS.indexOf(string.charAt(index)) >= 0;",
    "info" : "ReturnStatement[11600-11649]:ReturnStatement[11624-11673]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11655-11662]:Modifier[11679-11686]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11663-11670]:PrimitiveType[11687-11694]"
  }, {
    "left" : "isPreviousChar",
    "right" : "isPreviousChar",
    "info" : "SimpleName[11671-11685]:SimpleName[11695-11709]"
  }, {
    "left" : "StringBuffer string",
    "right" : "StringBuffer string",
    "info" : "SingleVariableDeclaration[11686-11705]:SingleVariableDeclaration[11710-11729]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[11707-11716]:SingleVariableDeclaration[11731-11740]"
  }, {
    "left" : "char c",
    "right" : "char c",
    "info" : "SingleVariableDeclaration[11718-11724]:SingleVariableDeclaration[11742-11748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11726-11876]:Block[11750-11900]"
  }, {
    "left" : "boolean matches = false;",
    "right" : "boolean matches = false;",
    "info" : "VariableDeclarationStatement[11730-11754]:VariableDeclarationStatement[11754-11778]"
  }, {
    "left" : "if( index > 0 &&\n\t\t    index < string.length())",
    "right" : "if( index > 0 &&\n\t\t    index < string.length())",
    "info" : "IfStatement[11757-11855]:IfStatement[11781-11879]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11806-11855]:Block[11830-11879]"
  }, {
    "left" : "matches = string.charAt(index - 1) == c;",
    "right" : "matches = string.charAt(index - 1) == c;",
    "info" : "ExpressionStatement[11811-11851]:ExpressionStatement[11835-11875]"
  }, {
    "left" : "return matches;",
    "right" : "return matches;",
    "info" : "ReturnStatement[11858-11873]:ReturnStatement[11882-11897]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11879-11886]:Modifier[11903-11910]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11887-11894]:PrimitiveType[11911-11918]"
  }, {
    "left" : "isNextChar",
    "right" : "isNextChar",
    "info" : "SimpleName[11895-11905]:SimpleName[11919-11929]"
  }, {
    "left" : "StringBuffer string",
    "right" : "StringBuffer string",
    "info" : "SingleVariableDeclaration[11906-11925]:SingleVariableDeclaration[11930-11949]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[11927-11936]:SingleVariableDeclaration[11951-11960]"
  }, {
    "left" : "char c",
    "right" : "char c",
    "info" : "SingleVariableDeclaration[11938-11944]:SingleVariableDeclaration[11962-11968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11946-12101]:Block[11970-12125]"
  }, {
    "left" : "boolean matches = false;",
    "right" : "boolean matches = false;",
    "info" : "VariableDeclarationStatement[11950-11974]:VariableDeclarationStatement[11974-11998]"
  }, {
    "left" : "if( index >= 0 &&\n\t\t    index < string.length() - 1)",
    "right" : "if( index >= 0 &&\n\t\t    index < string.length() - 1)",
    "info" : "IfStatement[11977-12080]:IfStatement[12001-12104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12031-12080]:Block[12055-12104]"
  }, {
    "left" : "matches = string.charAt(index + 1) == c;",
    "right" : "matches = string.charAt(index + 1) == c;",
    "info" : "ExpressionStatement[12036-12076]:ExpressionStatement[12060-12100]"
  }, {
    "left" : "return matches;",
    "right" : "return matches;",
    "info" : "ReturnStatement[12083-12098]:ReturnStatement[12107-12122]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12104-12111]:Modifier[12128-12135]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12112-12119]:PrimitiveType[12136-12143]"
  }, {
    "left" : "regionMatch",
    "right" : "regionMatch",
    "info" : "SimpleName[12120-12131]:SimpleName[12144-12155]"
  }, {
    "left" : "StringBuffer string",
    "right" : "StringBuffer string",
    "info" : "SingleVariableDeclaration[12132-12151]:SingleVariableDeclaration[12156-12175]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[12153-12162]:SingleVariableDeclaration[12177-12186]"
  }, {
    "left" : "String test",
    "right" : "String test",
    "info" : "SingleVariableDeclaration[12164-12175]:SingleVariableDeclaration[12188-12199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12177-12416]:Block[12201-12440]"
  }, {
    "left" : "boolean matches = false;",
    "right" : "boolean matches = false;",
    "info" : "VariableDeclarationStatement[12181-12205]:VariableDeclarationStatement[12205-12229]"
  }, {
    "left" : "if( index >= 0 &&\n\t\t    (index + test.length() - 1) < string.length())",
    "right" : "if( index >= 0 &&\n\t\t    (index + test.length() - 1) < string.length())",
    "info" : "IfStatement[12208-12395]:IfStatement[12232-12419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12280-12395]:Block[12304-12419]"
  }, {
    "left" : "String substring = string.substring( index, index + test.length());",
    "right" : "String substring = string.substring( index, index + test.length());",
    "info" : "VariableDeclarationStatement[12285-12352]:VariableDeclarationStatement[12309-12376]"
  }, {
    "left" : "matches = substring.equals( test );",
    "right" : "matches = substring.equals( test );",
    "info" : "ExpressionStatement[12356-12391]:ExpressionStatement[12380-12415]"
  }, {
    "left" : "return matches;",
    "right" : "return matches;",
    "info" : "ReturnStatement[12398-12413]:ReturnStatement[12422-12437]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12419-12426]:Modifier[12443-12450]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12427-12434]:PrimitiveType[12451-12458]"
  }, {
    "left" : "isLastChar",
    "right" : "isLastChar",
    "info" : "SimpleName[12435-12445]:SimpleName[12459-12469]"
  }, {
    "left" : "int wdsz",
    "right" : "int wdsz",
    "info" : "SingleVariableDeclaration[12446-12454]:SingleVariableDeclaration[12470-12478]"
  }, {
    "left" : "int n",
    "right" : "int n",
    "info" : "SingleVariableDeclaration[12456-12461]:SingleVariableDeclaration[12480-12485]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12463-12491]:Block[12487-12515]"
  }, {
    "left" : "return n + 1 == wdsz;",
    "right" : "return n + 1 == wdsz;",
    "info" : "ReturnStatement[12467-12488]:ReturnStatement[12491-12512]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13087-13093]:Modifier[13111-13117]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[13094-13100]:SimpleType[13118-13124]"
  }, {
    "left" : "encode",
    "right" : "encode",
    "info" : "SimpleName[13101-13107]:SimpleName[13125-13131]"
  }, {
    "left" : "Object pObject",
    "right" : "Object pObject",
    "info" : "SingleVariableDeclaration[13108-13122]:SingleVariableDeclaration[13132-13146]"
  }, {
    "left" : "EncoderException",
    "right" : "EncoderException",
    "info" : "SimpleType[13131-13147]:SimpleType[13155-13171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13148-13378]:Block[13172-13402]"
  }, {
    "left" : "if (!(pObject instanceof java.lang.String))",
    "right" : "if (!(pObject instanceof java.lang.String))",
    "info" : "IfStatement[13158-13328]:IfStatement[13182-13352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13202-13328]:Block[13226-13352]"
  }, {
    "left" : "throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");",
    "right" : "throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");",
    "info" : "ThrowStatement[13216-13317]:ThrowStatement[13240-13341]"
  }, {
    "left" : "return metaphone((String) pObject);",
    "right" : "return metaphone((String) pObject);",
    "info" : "ReturnStatement[13337-13372]:ReturnStatement[13361-13396]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13580-13586]:Modifier[13604-13610]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[13587-13593]:SimpleType[13611-13617]"
  }, {
    "left" : "encode",
    "right" : "encode",
    "info" : "SimpleName[13594-13600]:SimpleName[13618-13624]"
  }, {
    "left" : "String pString",
    "right" : "String pString",
    "info" : "SingleVariableDeclaration[13601-13615]:SingleVariableDeclaration[13625-13639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13617-13662]:Block[13641-13686]"
  }, {
    "left" : "return metaphone(pString);",
    "right" : "return metaphone(pString);",
    "info" : "ReturnStatement[13627-13653]:ReturnStatement[13651-13677]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13983-13989]:Modifier[14007-14013]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13990-13997]:PrimitiveType[14014-14021]"
  }, {
    "left" : "isMetaphoneEqual",
    "right" : "isMetaphoneEqual",
    "info" : "SimpleName[13998-14014]:SimpleName[14022-14038]"
  }, {
    "left" : "String str1",
    "right" : "String str1",
    "info" : "SingleVariableDeclaration[14015-14026]:SingleVariableDeclaration[14039-14050]"
  }, {
    "left" : "String str2",
    "right" : "String str2",
    "info" : "SingleVariableDeclaration[14028-14039]:SingleVariableDeclaration[14052-14063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14041-14104]:Block[14065-14128]"
  }, {
    "left" : "return metaphone(str1).equals(metaphone(str2));",
    "right" : "return metaphone(str1).equals(metaphone(str2));",
    "info" : "ReturnStatement[14051-14098]:ReturnStatement[14075-14122]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14176-14182]:Modifier[14200-14206]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14183-14186]:PrimitiveType[14207-14210]"
  }, {
    "left" : "getMaxCodeLen",
    "right" : "getMaxCodeLen",
    "info" : "SimpleName[14187-14200]:SimpleName[14211-14224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14203-14230]:Block[14227-14254]"
  }, {
    "left" : "return this.maxCodeLen;",
    "right" : "return this.maxCodeLen;",
    "info" : "ReturnStatement[14205-14228]:ReturnStatement[14229-14252]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14327-14333]:Modifier[14351-14357]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14334-14338]:PrimitiveType[14358-14362]"
  }, {
    "left" : "setMaxCodeLen",
    "right" : "setMaxCodeLen",
    "info" : "SimpleName[14339-14352]:SimpleName[14363-14376]"
  }, {
    "left" : "int maxCodeLen",
    "right" : "int maxCodeLen",
    "info" : "SingleVariableDeclaration[14353-14367]:SingleVariableDeclaration[14377-14391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14369-14402]:Block[14393-14426]"
  }, {
    "left" : "this.maxCodeLen = maxCodeLen;",
    "right" : "this.maxCodeLen = maxCodeLen;",
    "info" : "ExpressionStatement[14371-14400]:ExpressionStatement[14395-14424]"
  } ]
}