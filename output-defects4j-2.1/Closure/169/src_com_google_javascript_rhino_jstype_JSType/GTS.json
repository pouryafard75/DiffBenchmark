{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "TypeDeclaration[1967-42841]:TypeDeclaration[1967-42979]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[2674-2722]:FieldDeclaration[2674-2722]"
    }, {
      "left" : "private boolean resolved = false;",
      "right" : "private boolean resolved = false;",
      "info" : "FieldDeclaration[2726-2759]:FieldDeclaration[2726-2759]"
    }, {
      "left" : "private JSType resolveResult = null;",
      "right" : "private JSType resolveResult = null;",
      "info" : "FieldDeclaration[2762-2798]:FieldDeclaration[2762-2798]"
    }, {
      "left" : "private boolean inTemplatedCheckVisit = false;",
      "right" : "private boolean inTemplatedCheckVisit = false;",
      "info" : "FieldDeclaration[2802-2848]:FieldDeclaration[2802-2848]"
    }, {
      "left" : "public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
      "right" : "public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
      "info" : "FieldDeclaration[2852-2921]:FieldDeclaration[2852-2921]"
    }, {
      "left" : "public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
      "right" : "public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
      "info" : "FieldDeclaration[2925-3004]:FieldDeclaration[2925-3004]"
    }, {
      "left" : "public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
      "right" : "public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
      "info" : "FieldDeclaration[3008-3084]:FieldDeclaration[3008-3084]"
    }, {
      "left" : "public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
      "right" : "public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
      "info" : "FieldDeclaration[3088-3183]:FieldDeclaration[3088-3183]"
    }, {
      "left" : "static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    @Override\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
      "right" : "static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    @Override\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
      "info" : "FieldDeclaration[3187-3589]:FieldDeclaration[3187-3589]"
    }, {
      "left" : "public int compare(JSType t1, JSType t2)",
      "right" : "public int compare(JSType t1, JSType t2)",
      "info" : "MethodDeclaration[3469-3584]:MethodDeclaration[3469-3584]"
    }, {
      "left" : "public static final int ENUMDECL = 1;",
      "right" : "public static final int ENUMDECL = 1;",
      "info" : "FieldDeclaration[3639-3676]:FieldDeclaration[3639-3676]"
    }, {
      "left" : "public static final int NOT_ENUMDECL = 0;",
      "right" : "public static final int NOT_ENUMDECL = 0;",
      "info" : "FieldDeclaration[3679-3720]:FieldDeclaration[3679-3720]"
    }, {
      "left" : "final JSTypeRegistry registry;",
      "right" : "final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[3724-3754]:FieldDeclaration[3724-3754]"
    }, {
      "left" : "JSType(JSTypeRegistry registry)",
      "right" : "JSType(JSTypeRegistry registry)",
      "info" : "MethodDeclaration[3758-3825]:MethodDeclaration[3758-3825]"
    }, {
      "left" : "JSType getNativeType(JSTypeNative typeId)",
      "right" : "JSType getNativeType(JSTypeNative typeId)",
      "info" : "MethodDeclaration[3829-3974]:MethodDeclaration[3829-3974]"
    }, {
      "left" : "public JSDocInfo getJSDocInfo()",
      "right" : "public JSDocInfo getJSDocInfo()",
      "info" : "MethodDeclaration[3978-4210]:MethodDeclaration[3978-4210]"
    }, {
      "left" : "public String getDisplayName()",
      "right" : "public String getDisplayName()",
      "info" : "MethodDeclaration[4214-4689]:MethodDeclaration[4214-4689]"
    }, {
      "left" : "public boolean hasDisplayName()",
      "right" : "public boolean hasDisplayName()",
      "info" : "MethodDeclaration[4693-4904]:MethodDeclaration[4693-4904]"
    }, {
      "left" : "public boolean hasProperty(String pname)",
      "right" : "public boolean hasProperty(String pname)",
      "info" : "MethodDeclaration[4908-5041]:MethodDeclaration[4908-5041]"
    }, {
      "left" : "public boolean isNoType()",
      "right" : "public boolean isNoType()",
      "info" : "MethodDeclaration[5045-5094]:MethodDeclaration[5045-5094]"
    }, {
      "left" : "public boolean isNoResolvedType()",
      "right" : "public boolean isNoResolvedType()",
      "info" : "MethodDeclaration[5098-5155]:MethodDeclaration[5098-5155]"
    }, {
      "left" : "public boolean isNoObjectType()",
      "right" : "public boolean isNoObjectType()",
      "info" : "MethodDeclaration[5159-5214]:MethodDeclaration[5159-5214]"
    }, {
      "left" : "public final boolean isEmptyType()",
      "right" : "public final boolean isEmptyType()",
      "info" : "MethodDeclaration[5218-5423]:MethodDeclaration[5218-5423]"
    }, {
      "left" : "public boolean isNumberObjectType()",
      "right" : "public boolean isNumberObjectType()",
      "info" : "MethodDeclaration[5427-5486]:MethodDeclaration[5427-5486]"
    }, {
      "left" : "public boolean isNumberValueType()",
      "right" : "public boolean isNumberValueType()",
      "info" : "MethodDeclaration[5490-5548]:MethodDeclaration[5490-5548]"
    }, {
      "left" : "public boolean isFunctionPrototypeType()",
      "right" : "public boolean isFunctionPrototypeType()",
      "info" : "MethodDeclaration[5552-5670]:MethodDeclaration[5552-5670]"
    }, {
      "left" : "public boolean isStringObjectType()",
      "right" : "public boolean isStringObjectType()",
      "info" : "MethodDeclaration[5674-5733]:MethodDeclaration[5674-5733]"
    }, {
      "left" : "boolean isTheObjectType()",
      "right" : "boolean isTheObjectType()",
      "info" : "MethodDeclaration[5737-5786]:MethodDeclaration[5737-5786]"
    }, {
      "left" : "public boolean isStringValueType()",
      "right" : "public boolean isStringValueType()",
      "info" : "MethodDeclaration[5790-5848]:MethodDeclaration[5790-5848]"
    }, {
      "left" : "public final boolean isString()",
      "right" : "public final boolean isString()",
      "info" : "MethodDeclaration[5852-6102]:MethodDeclaration[5852-6102]"
    }, {
      "left" : "public final boolean isNumber()",
      "right" : "public final boolean isNumber()",
      "info" : "MethodDeclaration[6106-6356]:MethodDeclaration[6106-6356]"
    }, {
      "left" : "public boolean isArrayType()",
      "right" : "public boolean isArrayType()",
      "info" : "MethodDeclaration[6360-6412]:MethodDeclaration[6360-6412]"
    }, {
      "left" : "public boolean isBooleanObjectType()",
      "right" : "public boolean isBooleanObjectType()",
      "info" : "MethodDeclaration[6416-6476]:MethodDeclaration[6416-6476]"
    }, {
      "left" : "public boolean isBooleanValueType()",
      "right" : "public boolean isBooleanValueType()",
      "info" : "MethodDeclaration[6480-6539]:MethodDeclaration[6480-6539]"
    }, {
      "left" : "public boolean isRegexpType()",
      "right" : "public boolean isRegexpType()",
      "info" : "MethodDeclaration[6543-6596]:MethodDeclaration[6543-6596]"
    }, {
      "left" : "public boolean isDateType()",
      "right" : "public boolean isDateType()",
      "info" : "MethodDeclaration[6600-6651]:MethodDeclaration[6600-6651]"
    }, {
      "left" : "public boolean isNullType()",
      "right" : "public boolean isNullType()",
      "info" : "MethodDeclaration[6655-6706]:MethodDeclaration[6655-6706]"
    }, {
      "left" : "public boolean isVoidType()",
      "right" : "public boolean isVoidType()",
      "info" : "MethodDeclaration[6710-6761]:MethodDeclaration[6710-6761]"
    }, {
      "left" : "public boolean isAllType()",
      "right" : "public boolean isAllType()",
      "info" : "MethodDeclaration[6765-6815]:MethodDeclaration[6765-6815]"
    }, {
      "left" : "public boolean isUnknownType()",
      "right" : "public boolean isUnknownType()",
      "info" : "MethodDeclaration[6819-6873]:MethodDeclaration[6819-6873]"
    }, {
      "left" : "public boolean isCheckedUnknownType()",
      "right" : "public boolean isCheckedUnknownType()",
      "info" : "MethodDeclaration[6877-6938]:MethodDeclaration[6877-6938]"
    }, {
      "left" : "public final boolean isUnionType()",
      "right" : "public final boolean isUnionType()",
      "info" : "MethodDeclaration[6942-7021]:MethodDeclaration[6942-7021]"
    }, {
      "left" : "public boolean isStruct()",
      "right" : "public boolean isStruct()",
      "info" : "MethodDeclaration[7025-7503]:MethodDeclaration[7025-7503]"
    }, {
      "left" : "public boolean isDict()",
      "right" : "public boolean isDict()",
      "info" : "MethodDeclaration[7507-7837]:MethodDeclaration[7507-7837]"
    }, {
      "left" : "public UnionType toMaybeUnionType()",
      "right" : "public UnionType toMaybeUnionType()",
      "info" : "MethodDeclaration[7841-8053]:MethodDeclaration[7841-8053]"
    }, {
      "left" : "public final boolean isGlobalThisType()",
      "right" : "public final boolean isGlobalThisType()",
      "info" : "MethodDeclaration[8057-8224]:MethodDeclaration[8057-8224]"
    }, {
      "left" : "public final boolean isFunctionType()",
      "right" : "public final boolean isFunctionType()",
      "info" : "MethodDeclaration[8228-8391]:MethodDeclaration[8228-8391]"
    }, {
      "left" : "public FunctionType toMaybeFunctionType()",
      "right" : "public FunctionType toMaybeFunctionType()",
      "info" : "MethodDeclaration[8395-8949]:MethodDeclaration[8395-8949]"
    }, {
      "left" : "public static FunctionType toMaybeFunctionType(JSType type)",
      "right" : "public static FunctionType toMaybeFunctionType(JSType type)",
      "info" : "MethodDeclaration[8953-9140]:MethodDeclaration[8953-9140]"
    }, {
      "left" : "public final boolean isEnumElementType()",
      "right" : "public final boolean isEnumElementType()",
      "info" : "MethodDeclaration[9144-9235]:MethodDeclaration[9144-9235]"
    }, {
      "left" : "public EnumElementType toMaybeEnumElementType()",
      "right" : "public EnumElementType toMaybeEnumElementType()",
      "info" : "MethodDeclaration[9239-9415]:MethodDeclaration[9239-9415]"
    }, {
      "left" : "public boolean isEnumType()",
      "right" : "public boolean isEnumType()",
      "info" : "MethodDeclaration[9419-9490]:MethodDeclaration[9419-9490]"
    }, {
      "left" : "public EnumType toMaybeEnumType()",
      "right" : "public EnumType toMaybeEnumType()",
      "info" : "MethodDeclaration[9494-9642]:MethodDeclaration[9494-9642]"
    }, {
      "left" : "boolean isNamedType()",
      "right" : "boolean isNamedType()",
      "info" : "MethodDeclaration[9646-9691]:MethodDeclaration[9646-9691]"
    }, {
      "left" : "public boolean isRecordType()",
      "right" : "public boolean isRecordType()",
      "info" : "MethodDeclaration[9695-9770]:MethodDeclaration[9695-9770]"
    }, {
      "left" : "RecordType toMaybeRecordType()",
      "right" : "RecordType toMaybeRecordType()",
      "info" : "MethodDeclaration[9774-9926]:MethodDeclaration[9774-9926]"
    }, {
      "left" : "public final boolean isParameterizedType()",
      "right" : "public final boolean isParameterizedType()",
      "info" : "MethodDeclaration[9930-10025]:MethodDeclaration[9930-10025]"
    }, {
      "left" : "public ParameterizedType toMaybeParameterizedType()",
      "right" : "public ParameterizedType toMaybeParameterizedType()",
      "info" : "MethodDeclaration[10029-10207]:MethodDeclaration[10029-10207]"
    }, {
      "left" : "public static ParameterizedType toMaybeParameterizedType(JSType type)",
      "right" : "public static ParameterizedType toMaybeParameterizedType(JSType type)",
      "info" : "MethodDeclaration[10211-10418]:MethodDeclaration[10211-10418]"
    }, {
      "left" : "public final boolean isTemplateType()",
      "right" : "public final boolean isTemplateType()",
      "info" : "MethodDeclaration[10422-10507]:MethodDeclaration[10422-10507]"
    }, {
      "left" : "public TemplateType toMaybeTemplateType()",
      "right" : "public TemplateType toMaybeTemplateType()",
      "info" : "MethodDeclaration[10511-10674]:MethodDeclaration[10511-10674]"
    }, {
      "left" : "public static TemplateType toMaybeTemplateType(JSType type)",
      "right" : "public static TemplateType toMaybeTemplateType(JSType type)",
      "info" : "MethodDeclaration[10678-10865]:MethodDeclaration[10678-10865]"
    }, {
      "left" : "public boolean hasAnyTemplate()",
      "right" : "public boolean hasAnyTemplate()",
      "info" : "MethodDeclaration[10869-11193]:MethodDeclaration[10869-11193]"
    }, {
      "left" : "boolean hasAnyTemplateInternal()",
      "right" : "boolean hasAnyTemplateInternal()",
      "info" : "MethodDeclaration[11197-11253]:MethodDeclaration[11197-11253]"
    }, {
      "left" : "public boolean isObject()",
      "right" : "public boolean isObject()",
      "info" : "MethodDeclaration[11257-11432]:MethodDeclaration[11257-11432]"
    }, {
      "left" : "public boolean isConstructor()",
      "right" : "public boolean isConstructor()",
      "info" : "MethodDeclaration[11436-11622]:MethodDeclaration[11436-11622]"
    }, {
      "left" : "public boolean isNominalType()",
      "right" : "public boolean isNominalType()",
      "info" : "MethodDeclaration[11626-11781]:MethodDeclaration[11626-11781]"
    }, {
      "left" : "public final boolean isNominalConstructor()",
      "right" : "public final boolean isNominalConstructor()",
      "info" : "MethodDeclaration[11785-12446]:MethodDeclaration[11785-12446]"
    }, {
      "left" : "public boolean isInstanceType()",
      "right" : "public boolean isInstanceType()",
      "info" : "MethodDeclaration[12450-12653]:MethodDeclaration[12450-12653]"
    }, {
      "left" : "public boolean isInterface()",
      "right" : "public boolean isInterface()",
      "info" : "MethodDeclaration[12657-12840]:MethodDeclaration[12657-12840]"
    }, {
      "left" : "public boolean isOrdinaryFunction()",
      "right" : "public boolean isOrdinaryFunction()",
      "info" : "MethodDeclaration[12844-13042]:MethodDeclaration[12844-13042]"
    }, {
      "left" : "public final boolean isEquivalentTo(JSType that)",
      "right" : "public final boolean isEquivalentTo(JSType that)",
      "info" : "MethodDeclaration[13046-13201]:MethodDeclaration[13046-13222]"
    }, {
      "left" : "public final boolean isInvariant(JSType that)",
      "right" : "public final boolean isInvariant(JSType that)",
      "info" : "MethodDeclaration[13205-13384]:MethodDeclaration[13226-13427]"
    }, {
      "left" : "public final boolean differsFrom(JSType that)",
      "right" : "public final boolean differsFrom(JSType that)",
      "info" : "MethodDeclaration[13388-13868]:MethodDeclaration[13431-13934]"
    }, {
      "left" : "boolean checkEquivalenceHelper(JSType that, boolean tolerateUnknowns)",
      "right" : "boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod)",
      "info" : "MethodDeclaration[13872-17326]:MethodDeclaration[13938-17464]"
    }, {
      "left" : "public static boolean isEquivalent(JSType typeA, JSType typeB)",
      "right" : "public static boolean isEquivalent(JSType typeA, JSType typeB)",
      "info" : "MethodDeclaration[17330-17498]:MethodDeclaration[17468-17636]"
    }, {
      "left" : "public boolean equals(Object jsType)",
      "right" : "public boolean equals(Object jsType)",
      "info" : "MethodDeclaration[17502-17645]:MethodDeclaration[17640-17783]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[17649-17730]:MethodDeclaration[17787-17868]"
    }, {
      "left" : "public final boolean matchesInt32Context()",
      "right" : "public final boolean matchesInt32Context()",
      "info" : "MethodDeclaration[17734-18098]:MethodDeclaration[17872-18236]"
    }, {
      "left" : "public final boolean matchesUint32Context()",
      "right" : "public final boolean matchesUint32Context()",
      "info" : "MethodDeclaration[18102-18366]:MethodDeclaration[18240-18504]"
    }, {
      "left" : "public boolean matchesNumberContext()",
      "right" : "public boolean matchesNumberContext()",
      "info" : "MethodDeclaration[18370-18581]:MethodDeclaration[18508-18719]"
    }, {
      "left" : "public boolean matchesStringContext()",
      "right" : "public boolean matchesStringContext()",
      "info" : "MethodDeclaration[18585-19044]:MethodDeclaration[18723-19182]"
    }, {
      "left" : "public boolean matchesObjectContext()",
      "right" : "public boolean matchesObjectContext()",
      "info" : "MethodDeclaration[19048-19449]:MethodDeclaration[19186-19587]"
    }, {
      "left" : "public JSType findPropertyType(String propertyName)",
      "right" : "public JSType findPropertyType(String propertyName)",
      "info" : "MethodDeclaration[19453-20042]:MethodDeclaration[19591-20180]"
    }, {
      "left" : "public boolean canBeCalled()",
      "right" : "public boolean canBeCalled()",
      "info" : "MethodDeclaration[20046-20285]:MethodDeclaration[20184-20423]"
    }, {
      "left" : "public boolean canAssignTo(JSType that)",
      "right" : "public boolean canAssignTo(JSType that)",
      "info" : "MethodDeclaration[20289-20633]:MethodDeclaration[20427-20771]"
    }, {
      "left" : "public JSType autoboxesTo()",
      "right" : "public JSType autoboxesTo()",
      "info" : "MethodDeclaration[20637-20841]:MethodDeclaration[20775-20979]"
    }, {
      "left" : "public JSType unboxesTo()",
      "right" : "public JSType unboxesTo()",
      "info" : "MethodDeclaration[20845-21044]:MethodDeclaration[20983-21182]"
    }, {
      "left" : "public ObjectType toObjectType()",
      "right" : "public ObjectType toObjectType()",
      "info" : "MethodDeclaration[21048-21434]:MethodDeclaration[21186-21572]"
    }, {
      "left" : "public JSType autobox()",
      "right" : "public JSType autobox()",
      "info" : "MethodDeclaration[21438-21770]:MethodDeclaration[21576-21908]"
    }, {
      "left" : "public final ObjectType dereference()",
      "right" : "public final ObjectType dereference()",
      "info" : "MethodDeclaration[21774-22015]:MethodDeclaration[21912-22153]"
    }, {
      "left" : "public final boolean canTestForEqualityWith(JSType that)",
      "right" : "public final boolean canTestForEqualityWith(JSType that)",
      "info" : "MethodDeclaration[22019-22436]:MethodDeclaration[22157-22574]"
    }, {
      "left" : "public TernaryValue testForEquality(JSType that)",
      "right" : "public TernaryValue testForEquality(JSType that)",
      "info" : "MethodDeclaration[22440-23124]:MethodDeclaration[22578-23262]"
    }, {
      "left" : "TernaryValue testForEqualityHelper(JSType aType, JSType bType)",
      "right" : "TernaryValue testForEqualityHelper(JSType aType, JSType bType)",
      "info" : "MethodDeclaration[23128-24486]:MethodDeclaration[23266-24624]"
    }, {
      "left" : "public final boolean canTestForShallowEqualityWith(JSType that)",
      "right" : "public final boolean canTestForShallowEqualityWith(JSType that)",
      "info" : "MethodDeclaration[24490-25382]:MethodDeclaration[24628-25520]"
    }, {
      "left" : "public boolean isNullable()",
      "right" : "public boolean isNullable()",
      "info" : "MethodDeclaration[25386-25539]:MethodDeclaration[25524-25677]"
    }, {
      "left" : "public JSType collapseUnion()",
      "right" : "public JSType collapseUnion()",
      "info" : "MethodDeclaration[25543-25665]:MethodDeclaration[25681-25803]"
    }, {
      "left" : "public JSType getLeastSupertype(JSType that)",
      "right" : "public JSType getLeastSupertype(JSType that)",
      "info" : "MethodDeclaration[25669-26368]:MethodDeclaration[25807-26506]"
    }, {
      "left" : "static JSType getLeastSupertype(JSType thisType, JSType thatType)",
      "right" : "static JSType getLeastSupertype(JSType thisType, JSType thatType)",
      "info" : "MethodDeclaration[26372-26764]:MethodDeclaration[26510-26902]"
    }, {
      "left" : "public JSType getGreatestSubtype(JSType that)",
      "right" : "public JSType getGreatestSubtype(JSType that)",
      "info" : "MethodDeclaration[26768-27289]:MethodDeclaration[26906-27427]"
    }, {
      "left" : "static JSType getGreatestSubtype(JSType thisType, JSType thatType)",
      "right" : "static JSType getGreatestSubtype(JSType thisType, JSType thatType)",
      "info" : "MethodDeclaration[27293-29465]:MethodDeclaration[27431-29603]"
    }, {
      "left" : "static JSType filterNoResolvedType(JSType type)",
      "right" : "static JSType filterNoResolvedType(JSType type)",
      "info" : "MethodDeclaration[29469-30611]:MethodDeclaration[29607-30749]"
    }, {
      "left" : "public JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome)",
      "right" : "public JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome)",
      "info" : "MethodDeclaration[30615-31596]:MethodDeclaration[30753-31734]"
    }, {
      "left" : "public abstract BooleanLiteralSet getPossibleToBooleanOutcomes();",
      "right" : "public abstract BooleanLiteralSet getPossibleToBooleanOutcomes();",
      "info" : "MethodDeclaration[31600-32418]:MethodDeclaration[31738-32556]"
    }, {
      "left" : "public TypePair getTypesUnderEquality(JSType that)",
      "right" : "public TypePair getTypesUnderEquality(JSType that)",
      "info" : "MethodDeclaration[32422-33551]:MethodDeclaration[32560-33689]"
    }, {
      "left" : "public TypePair getTypesUnderInequality(JSType that)",
      "right" : "public TypePair getTypesUnderInequality(JSType that)",
      "info" : "MethodDeclaration[33555-34768]:MethodDeclaration[33693-34906]"
    }, {
      "left" : "public TypePair getTypesUnderShallowEquality(JSType that)",
      "right" : "public TypePair getTypesUnderShallowEquality(JSType that)",
      "info" : "MethodDeclaration[34772-35324]:MethodDeclaration[34910-35462]"
    }, {
      "left" : "public TypePair getTypesUnderShallowInequality(JSType that)",
      "right" : "public TypePair getTypesUnderShallowInequality(JSType that)",
      "info" : "MethodDeclaration[35328-36324]:MethodDeclaration[35466-36462]"
    }, {
      "left" : "public JSType restrictByNotNullOrUndefined()",
      "right" : "public JSType restrictByNotNullOrUndefined()",
      "info" : "MethodDeclaration[36328-36513]:MethodDeclaration[36466-36651]"
    }, {
      "left" : "public boolean isSubtype(JSType that)",
      "right" : "public boolean isSubtype(JSType that)",
      "info" : "MethodDeclaration[36517-37898]:MethodDeclaration[36655-38036]"
    }, {
      "left" : "static boolean isSubtypeHelper(JSType thisType, JSType thatType)",
      "right" : "static boolean isSubtypeHelper(JSType thisType, JSType thatType)",
      "info" : "MethodDeclaration[37902-38742]:MethodDeclaration[38040-38880]"
    }, {
      "left" : "public abstract <T> T visit(Visitor<T> visitor);",
      "right" : "public abstract <T> T visit(Visitor<T> visitor);",
      "info" : "MethodDeclaration[38746-38951]:MethodDeclaration[38884-39089]"
    }, {
      "left" : "public final JSType forceResolve(ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "public final JSType forceResolve(ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[38955-39371]:MethodDeclaration[39093-39509]"
    }, {
      "left" : "public final JSType resolve(ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "public final JSType resolve(ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[39376-40496]:MethodDeclaration[39514-40634]"
    }, {
      "left" : "abstract JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope);",
      "right" : "abstract JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope);",
      "info" : "MethodDeclaration[40500-40607]:MethodDeclaration[40638-40745]"
    }, {
      "left" : "void setResolvedTypeInternal(JSType type)",
      "right" : "void setResolvedTypeInternal(JSType type)",
      "info" : "MethodDeclaration[40611-40705]:MethodDeclaration[40749-40843]"
    }, {
      "left" : "public final boolean isResolved()",
      "right" : "public final boolean isResolved()",
      "info" : "MethodDeclaration[40709-40814]:MethodDeclaration[40847-40952]"
    }, {
      "left" : "public final void clearResolved()",
      "right" : "public final void clearResolved()",
      "info" : "MethodDeclaration[40818-40941]:MethodDeclaration[40956-41079]"
    }, {
      "left" : "static final JSType safeResolve(\n      JSType type, ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "static final JSType safeResolve(\n      JSType type, ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[40945-41160]:MethodDeclaration[41083-41298]"
    }, {
      "left" : "public boolean setValidator(Predicate<JSType> validator)",
      "right" : "public boolean setValidator(Predicate<JSType> validator)",
      "info" : "MethodDeclaration[41164-41528]:MethodDeclaration[41302-41666]"
    }, {
      "left" : "TypePair",
      "right" : "TypePair",
      "info" : "TypeDeclaration[41532-41737]:TypeDeclaration[41670-41875]"
    }, {
      "left" : "public final JSType typeA;",
      "right" : "public final JSType typeA;",
      "info" : "FieldDeclaration[41567-41593]:FieldDeclaration[41705-41731]"
    }, {
      "left" : "public final JSType typeB;",
      "right" : "public final JSType typeB;",
      "info" : "FieldDeclaration[41598-41624]:FieldDeclaration[41736-41762]"
    }, {
      "left" : "public TypePair(JSType typeA, JSType typeB)",
      "right" : "public TypePair(JSType typeA, JSType typeB)",
      "info" : "MethodDeclaration[41630-41733]:MethodDeclaration[41768-41871]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[41741-41912]:MethodDeclaration[41879-42050]"
    }, {
      "left" : "public String toDebugHashCodeString()",
      "right" : "public String toDebugHashCodeString()",
      "info" : "MethodDeclaration[41916-42098]:MethodDeclaration[42054-42236]"
    }, {
      "left" : "public final String toAnnotationString()",
      "right" : "public final String toAnnotationString()",
      "info" : "MethodDeclaration[42102-42308]:MethodDeclaration[42240-42446]"
    }, {
      "left" : "abstract String toStringHelper(boolean forAnnotations);",
      "right" : "abstract String toStringHelper(boolean forAnnotations);",
      "info" : "MethodDeclaration[42312-42500]:MethodDeclaration[42450-42638]"
    }, {
      "left" : "public void matchConstraint(JSType constraint)",
      "right" : "public void matchConstraint(JSType constraint)",
      "info" : "MethodDeclaration[42504-42839]:MethodDeclaration[42642-42977]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3524-3584]:Block[3524-3584]"
    }, {
      "left" : "return t1.toString().compareTo(t2.toString());",
      "right" : "return t1.toString().compareTo(t2.toString());",
      "info" : "ReturnStatement[3532-3578]:ReturnStatement[3532-3578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3790-3825]:Block[3790-3825]"
    }, {
      "left" : "this.registry = registry;",
      "right" : "this.registry = registry;",
      "info" : "ExpressionStatement[3796-3821]:ExpressionStatement[3796-3821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3926-3974]:Block[3926-3974]"
    }, {
      "left" : "return registry.getNativeType(typeId);",
      "right" : "return registry.getNativeType(typeId);",
      "info" : "ReturnStatement[3932-3970]:ReturnStatement[3932-3970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4188-4210]:Block[4188-4210]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4194-4206]:ReturnStatement[4194-4206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4667-4689]:Block[4667-4689]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4673-4685]:ReturnStatement[4673-4685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4798-4904]:Block[4798-4904]"
    }, {
      "left" : "String displayName = getDisplayName();",
      "right" : "String displayName = getDisplayName();",
      "info" : "VariableDeclarationStatement[4804-4842]:VariableDeclarationStatement[4804-4842]"
    }, {
      "left" : "return displayName != null && !displayName.isEmpty();",
      "right" : "return displayName != null && !displayName.isEmpty();",
      "info" : "ReturnStatement[4847-4900]:ReturnStatement[4847-4900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5018-5041]:Block[5018-5041]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5024-5037]:ReturnStatement[5024-5037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5071-5094]:Block[5071-5094]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5077-5090]:ReturnStatement[5077-5090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5132-5155]:Block[5132-5155]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5138-5151]:ReturnStatement[5138-5151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5191-5214]:Block[5191-5214]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5197-5210]:ReturnStatement[5197-5210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5253-5423]:Block[5253-5423]"
    }, {
      "left" : "return isNoType() || isNoObjectType() || isNoResolvedType() ||\n        (registry.getNativeFunctionType(\n             JSTypeNative.LEAST_FUNCTION_TYPE) == this);",
      "right" : "return isNoType() || isNoObjectType() || isNoResolvedType() ||\n        (registry.getNativeFunctionType(\n             JSTypeNative.LEAST_FUNCTION_TYPE) == this);",
      "info" : "ReturnStatement[5259-5419]:ReturnStatement[5259-5419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5463-5486]:Block[5463-5486]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5469-5482]:ReturnStatement[5469-5482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5525-5548]:Block[5525-5548]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5531-5544]:ReturnStatement[5531-5544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5647-5670]:Block[5647-5670]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5653-5666]:ReturnStatement[5653-5666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5710-5733]:Block[5710-5733]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5716-5729]:ReturnStatement[5716-5729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5763-5786]:Block[5763-5786]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5769-5782]:ReturnStatement[5769-5782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5825-5848]:Block[5825-5848]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5831-5844]:ReturnStatement[5831-5844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6004-6102]:Block[6004-6102]"
    }, {
      "left" : "return this.isSubtype(\n        getNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE));",
      "right" : "return this.isSubtype(\n        getNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE));",
      "info" : "ReturnStatement[6010-6098]:ReturnStatement[6010-6098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6258-6356]:Block[6258-6356]"
    }, {
      "left" : "return this.isSubtype(\n        getNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE));",
      "right" : "return this.isSubtype(\n        getNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE));",
      "info" : "ReturnStatement[6264-6352]:ReturnStatement[6264-6352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6389-6412]:Block[6389-6412]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6395-6408]:ReturnStatement[6395-6408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6453-6476]:Block[6453-6476]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6459-6472]:ReturnStatement[6459-6472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6516-6539]:Block[6516-6539]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6522-6535]:ReturnStatement[6522-6535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6573-6596]:Block[6573-6596]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6579-6592]:ReturnStatement[6579-6592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6628-6651]:Block[6628-6651]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6634-6647]:ReturnStatement[6634-6647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6683-6706]:Block[6683-6706]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6689-6702]:ReturnStatement[6689-6702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6738-6761]:Block[6738-6761]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6744-6757]:ReturnStatement[6744-6757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6792-6815]:Block[6792-6815]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6798-6811]:ReturnStatement[6798-6811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6850-6873]:Block[6850-6873]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6856-6869]:ReturnStatement[6856-6869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6915-6938]:Block[6915-6938]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6921-6934]:ReturnStatement[6921-6934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6977-7021]:Block[6977-7021]"
    }, {
      "left" : "return toMaybeUnionType() != null;",
      "right" : "return toMaybeUnionType() != null;",
      "info" : "ReturnStatement[6983-7017]:ReturnStatement[6983-7017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7201-7503]:Block[7201-7503]"
    }, {
      "left" : "if (isObject())",
      "right" : "if (isObject())",
      "info" : "IfStatement[7207-7481]:IfStatement[7207-7481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7223-7481]:Block[7223-7481]"
    }, {
      "left" : "FunctionType ctor = toObjectType().getConstructor();",
      "right" : "FunctionType ctor = toObjectType().getConstructor();",
      "info" : "VariableDeclarationStatement[7231-7283]:VariableDeclarationStatement[7231-7283]"
    }, {
      "left" : "return ctor != null && ctor.makesStructs();",
      "right" : "return ctor != null && ctor.makesStructs();",
      "info" : "ReturnStatement[7432-7475]:ReturnStatement[7432-7475]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7486-7499]:ReturnStatement[7486-7499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7679-7837]:Block[7679-7837]"
    }, {
      "left" : "if (isObject())",
      "right" : "if (isObject())",
      "info" : "IfStatement[7685-7815]:IfStatement[7685-7815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7701-7815]:Block[7701-7815]"
    }, {
      "left" : "FunctionType ctor = toObjectType().getConstructor();",
      "right" : "FunctionType ctor = toObjectType().getConstructor();",
      "info" : "VariableDeclarationStatement[7709-7761]:VariableDeclarationStatement[7709-7761]"
    }, {
      "left" : "return ctor != null && ctor.makesDicts();",
      "right" : "return ctor != null && ctor.makesDicts();",
      "info" : "ReturnStatement[7768-7809]:ReturnStatement[7768-7809]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7820-7833]:ReturnStatement[7820-7833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8031-8053]:Block[8031-8053]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8037-8049]:ReturnStatement[8037-8049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8150-8224]:Block[8150-8224]"
    }, {
      "left" : "return this == registry.getNativeType(JSTypeNative.GLOBAL_THIS);",
      "right" : "return this == registry.getNativeType(JSTypeNative.GLOBAL_THIS);",
      "info" : "ReturnStatement[8156-8220]:ReturnStatement[8156-8220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8344-8391]:Block[8344-8391]"
    }, {
      "left" : "return toMaybeFunctionType() != null;",
      "right" : "return toMaybeFunctionType() != null;",
      "info" : "ReturnStatement[8350-8387]:ReturnStatement[8350-8387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8927-8949]:Block[8927-8949]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8933-8945]:ReturnStatement[8933-8945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9074-9140]:Block[9074-9140]"
    }, {
      "left" : "return type == null ? null : type.toMaybeFunctionType();",
      "right" : "return type == null ? null : type.toMaybeFunctionType();",
      "info" : "ReturnStatement[9080-9136]:ReturnStatement[9080-9136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9185-9235]:Block[9185-9235]"
    }, {
      "left" : "return toMaybeEnumElementType() != null;",
      "right" : "return toMaybeEnumElementType() != null;",
      "info" : "ReturnStatement[9191-9231]:ReturnStatement[9191-9231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9393-9415]:Block[9393-9415]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9399-9411]:ReturnStatement[9399-9411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9447-9490]:Block[9447-9490]"
    }, {
      "left" : "return toMaybeEnumType() != null;",
      "right" : "return toMaybeEnumType() != null;",
      "info" : "ReturnStatement[9453-9486]:ReturnStatement[9453-9486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9620-9642]:Block[9620-9642]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9626-9638]:ReturnStatement[9626-9638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9668-9691]:Block[9668-9691]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9674-9687]:ReturnStatement[9674-9687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9725-9770]:Block[9725-9770]"
    }, {
      "left" : "return toMaybeRecordType() != null;",
      "right" : "return toMaybeRecordType() != null;",
      "info" : "ReturnStatement[9731-9766]:ReturnStatement[9731-9766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9904-9926]:Block[9904-9926]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9910-9922]:ReturnStatement[9910-9922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9973-10025]:Block[9973-10025]"
    }, {
      "left" : "return toMaybeParameterizedType() != null;",
      "right" : "return toMaybeParameterizedType() != null;",
      "info" : "ReturnStatement[9979-10021]:ReturnStatement[9979-10021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10185-10207]:Block[10185-10207]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10191-10203]:ReturnStatement[10191-10203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10347-10418]:Block[10347-10418]"
    }, {
      "left" : "return type == null ? null : type.toMaybeParameterizedType();",
      "right" : "return type == null ? null : type.toMaybeParameterizedType();",
      "info" : "ReturnStatement[10353-10414]:ReturnStatement[10353-10414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10460-10507]:Block[10460-10507]"
    }, {
      "left" : "return toMaybeTemplateType() != null;",
      "right" : "return toMaybeTemplateType() != null;",
      "info" : "ReturnStatement[10466-10503]:ReturnStatement[10466-10503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10652-10674]:Block[10652-10674]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10658-10670]:ReturnStatement[10658-10670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10799-10865]:Block[10799-10865]"
    }, {
      "left" : "return type == null ? null : type.toMaybeTemplateType();",
      "right" : "return type == null ? null : type.toMaybeTemplateType();",
      "info" : "ReturnStatement[10805-10861]:ReturnStatement[10805-10861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10901-11193]:Block[10901-11193]"
    }, {
      "left" : "if (!this.inTemplatedCheckVisit)",
      "right" : "if (!this.inTemplatedCheckVisit)",
      "info" : "IfStatement[10907-11189]:IfStatement[10907-11189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10940-11100]:Block[10940-11100]"
    }, {
      "left" : "this.inTemplatedCheckVisit = true;",
      "right" : "this.inTemplatedCheckVisit = true;",
      "info" : "ExpressionStatement[10948-10982]:ExpressionStatement[10948-10982]"
    }, {
      "left" : "boolean result = hasAnyTemplateInternal();",
      "right" : "boolean result = hasAnyTemplateInternal();",
      "info" : "VariableDeclarationStatement[10989-11031]:VariableDeclarationStatement[10989-11031]"
    }, {
      "left" : "this.inTemplatedCheckVisit = false;",
      "right" : "this.inTemplatedCheckVisit = false;",
      "info" : "ExpressionStatement[11038-11073]:ExpressionStatement[11038-11073]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11080-11094]:ReturnStatement[11080-11094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11106-11189]:Block[11106-11189]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11170-11183]:ReturnStatement[11170-11183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11230-11253]:Block[11230-11253]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11236-11249]:ReturnStatement[11236-11249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11409-11432]:Block[11409-11432]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11415-11428]:ReturnStatement[11415-11428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11599-11622]:Block[11599-11622]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11605-11618]:ReturnStatement[11605-11618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11758-11781]:Block[11758-11781]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11764-11777]:ReturnStatement[11764-11777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11958-12446]:Block[11958-12446]"
    }, {
      "left" : "if (isConstructor() || isInterface())",
      "right" : "if (isConstructor() || isInterface())",
      "info" : "IfStatement[11964-12424]:IfStatement[11964-12424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12002-12424]:Block[12002-12424]"
    }, {
      "left" : "FunctionType fn = toMaybeFunctionType();",
      "right" : "FunctionType fn = toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[12010-12050]:VariableDeclarationStatement[12010-12050]"
    }, {
      "left" : "if (fn == null)",
      "right" : "if (fn == null)",
      "info" : "IfStatement[12057-12104]:IfStatement[12057-12104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12073-12104]:Block[12073-12104]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12083-12096]:ReturnStatement[12083-12096]"
    }, {
      "left" : "if (fn.getSource() != null)",
      "right" : "if (fn.getSource() != null)",
      "info" : "IfStatement[12272-12330]:IfStatement[12272-12330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12300-12330]:Block[12300-12330]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12310-12322]:ReturnStatement[12310-12322]"
    }, {
      "left" : "return fn.isNativeObjectType();",
      "right" : "return fn.isNativeObjectType();",
      "info" : "ReturnStatement[12387-12418]:ReturnStatement[12387-12418]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12429-12442]:ReturnStatement[12429-12442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12630-12653]:Block[12630-12653]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12636-12649]:ReturnStatement[12636-12649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12817-12840]:Block[12817-12840]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12823-12836]:ReturnStatement[12823-12836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13019-13042]:Block[13019-13042]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13025-13038]:ReturnStatement[13025-13038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13148-13201]:Block[13148-13222]"
    }, {
      "left" : "return checkEquivalenceHelper(that, false);",
      "right" : "return checkEquivalenceHelper(that, EquivalenceMethod.IDENTITY);",
      "info" : "ReturnStatement[13154-13197]:ReturnStatement[13154-13218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13331-13384]:Block[13352-13427]"
    }, {
      "left" : "return checkEquivalenceHelper(that, false);",
      "right" : "return checkEquivalenceHelper(that, EquivalenceMethod.INVARIANT);",
      "info" : "ReturnStatement[13337-13380]:ReturnStatement[13358-13423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13815-13868]:Block[13858-13934]"
    }, {
      "left" : "return !checkEquivalenceHelper(that, true);",
      "right" : "return !checkEquivalenceHelper(that, EquivalenceMethod.DATA_FLOW);",
      "info" : "ReturnStatement[13821-13864]:ReturnStatement[13864-13930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13983-17326]:Block[14051-17464]"
    }, {
      "left" : "if (this == that)",
      "right" : "if (this == that)",
      "info" : "IfStatement[13989-14033]:IfStatement[14057-14101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14007-14033]:Block[14075-14101]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14015-14027]:ReturnStatement[14083-14095]"
    }, {
      "left" : "boolean thisUnknown = isUnknownType();",
      "right" : "boolean thisUnknown = isUnknownType();",
      "info" : "VariableDeclarationStatement[14039-14077]:VariableDeclarationStatement[14107-14145]"
    }, {
      "left" : "boolean thatUnknown = that.isUnknownType();",
      "right" : "boolean thatUnknown = that.isUnknownType();",
      "info" : "VariableDeclarationStatement[14082-14125]:VariableDeclarationStatement[14150-14193]"
    }, {
      "left" : "if (thisUnknown || thatUnknown)",
      "right" : "if (thisUnknown || thatUnknown)",
      "info" : "IfStatement[14130-14781]:IfStatement[14198-14953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14162-14781]:Block[14230-14953]"
    }, {
      "left" : "if (tolerateUnknowns)",
      "right" : "if (eqMethod == EquivalenceMethod.DATA_FLOW)",
      "info" : "IfStatement[14170-14775]:IfStatement[14420-14947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14192-14449]:Block[14465-14621]"
    }, {
      "left" : "return thisUnknown && thatUnknown;",
      "right" : "return thisUnknown && thatUnknown;",
      "info" : "ReturnStatement[14407-14441]:ReturnStatement[14579-14613]"
    }, {
      "left" : "if (thisUnknown && thatUnknown &&\n          (isNominalType() ^ that.isNominalType()))",
      "right" : "if (thisUnknown && thatUnknown &&\n          (isNominalType() ^ that.isNominalType()))",
      "info" : "IfStatement[14455-14775]:IfStatement[14627-14947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14541-14775]:Block[14713-14947]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14754-14767]:ReturnStatement[14926-14939]"
    }, {
      "left" : "if (isUnionType() && that.isUnionType())",
      "right" : "if (isUnionType() && that.isUnionType())",
      "info" : "IfStatement[14787-14955]:IfStatement[14959-15119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14828-14955]:Block[15000-15119]"
    }, {
      "left" : "return this.toMaybeUnionType().checkUnionEquivalenceHelper(\n          that.toMaybeUnionType(), tolerateUnknowns);",
      "right" : "return this.toMaybeUnionType().checkUnionEquivalenceHelper(\n          that.toMaybeUnionType(), eqMethod);",
      "info" : "ReturnStatement[14836-14949]:ReturnStatement[15008-15113]"
    }, {
      "left" : "if (isFunctionType() && that.isFunctionType())",
      "right" : "if (isFunctionType() && that.isFunctionType())",
      "info" : "IfStatement[14961-15144]:IfStatement[15125-15300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15008-15144]:Block[15172-15300]"
    }, {
      "left" : "return this.toMaybeFunctionType().checkFunctionEquivalenceHelper(\n          that.toMaybeFunctionType(), tolerateUnknowns);",
      "right" : "return this.toMaybeFunctionType().checkFunctionEquivalenceHelper(\n          that.toMaybeFunctionType(), eqMethod);",
      "info" : "ReturnStatement[15016-15138]:ReturnStatement[15180-15294]"
    }, {
      "left" : "if (isRecordType() && that.isRecordType())",
      "right" : "if (isRecordType() && that.isRecordType())",
      "info" : "IfStatement[15150-15323]:IfStatement[15306-15471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15193-15323]:Block[15349-15471]"
    }, {
      "left" : "return this.toMaybeRecordType().checkRecordEquivalenceHelper(\n          that.toMaybeRecordType(), tolerateUnknowns);",
      "right" : "return this.toMaybeRecordType().checkRecordEquivalenceHelper(\n          that.toMaybeRecordType(), eqMethod);",
      "info" : "ReturnStatement[15201-15317]:ReturnStatement[15357-15465]"
    }, {
      "left" : "ParameterizedType thisParamType = toMaybeParameterizedType();",
      "right" : "ParameterizedType thisParamType = toMaybeParameterizedType();",
      "info" : "VariableDeclarationStatement[15329-15390]:VariableDeclarationStatement[15477-15538]"
    }, {
      "left" : "ParameterizedType thatParamType = that.toMaybeParameterizedType();",
      "right" : "ParameterizedType thatParamType = that.toMaybeParameterizedType();",
      "info" : "VariableDeclarationStatement[15395-15461]:VariableDeclarationStatement[15543-15609]"
    }, {
      "left" : "if (thisParamType != null || thatParamType != null)",
      "right" : "if (thisParamType != null || thatParamType != null)",
      "info" : "IfStatement[15466-16455]:IfStatement[15614-16609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15518-16455]:Block[15666-16609]"
    }, {
      "left" : "boolean paramsMatch = false;",
      "right" : "boolean paramsMatch = false;",
      "info" : "VariableDeclarationStatement[15593-15621]:VariableDeclarationStatement[15741-15769]"
    }, {
      "left" : "if (thisParamType != null && thatParamType != null)",
      "right" : "if (thisParamType != null && thatParamType != null)",
      "info" : "IfStatement[15628-16117]:IfStatement[15776-16279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15680-15833]:Block[15828-15973]"
    }, {
      "left" : "paramsMatch = thisParamType.getParameterType().checkEquivalenceHelper(\n            thatParamType.getParameterType(), tolerateUnknowns);",
      "right" : "paramsMatch = thisParamType.getParameterType().checkEquivalenceHelper(\n            thatParamType.getParameterType(), eqMethod);",
      "info" : "ExpressionStatement[15690-15825]:ExpressionStatement[15838-15965]"
    }, {
      "left" : "if (tolerateUnknowns)",
      "right" : "if (eqMethod == EquivalenceMethod.IDENTITY)",
      "info" : "IfStatement[15839-16117]:IfStatement[15979-16279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15861-16073]:Block[16067-16279]"
    }, {
      "left" : "paramsMatch = true;",
      "right" : "paramsMatch = true;",
      "info" : "ExpressionStatement[16046-16065]:ExpressionStatement[16252-16271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16079-16117]:Block[16023-16061]"
    }, {
      "left" : "paramsMatch = false;",
      "right" : "paramsMatch = false;",
      "info" : "ExpressionStatement[16089-16109]:ExpressionStatement[16033-16053]"
    }, {
      "left" : "JSType thisRootType = thisParamType == null ?\n          this : thisParamType.getReferencedTypeInternal();",
      "right" : "JSType thisRootType = thisParamType == null ?\n          this : thisParamType.getReferencedTypeInternal();",
      "info" : "VariableDeclarationStatement[16125-16230]:VariableDeclarationStatement[16287-16392]"
    }, {
      "left" : "JSType thatRootType = thatParamType == null ?\n          that : thatParamType.getReferencedTypeInternal();",
      "right" : "JSType thatRootType = thatParamType == null ?\n          that : thatParamType.getReferencedTypeInternal();",
      "info" : "VariableDeclarationStatement[16237-16342]:VariableDeclarationStatement[16399-16504]"
    }, {
      "left" : "return paramsMatch &&\n          thisRootType.checkEquivalenceHelper(thatRootType, tolerateUnknowns);",
      "right" : "return paramsMatch &&\n          thisRootType.checkEquivalenceHelper(thatRootType, eqMethod);",
      "info" : "ReturnStatement[16349-16449]:ReturnStatement[16511-16603]"
    }, {
      "left" : "if (isNominalType() && that.isNominalType())",
      "right" : "if (isNominalType() && that.isNominalType())",
      "info" : "IfStatement[16461-16619]:IfStatement[16615-16773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16506-16619]:Block[16660-16773]"
    }, {
      "left" : "return toObjectType().getReferenceName().equals(\n          that.toObjectType().getReferenceName());",
      "right" : "return toObjectType().getReferenceName().equals(\n          that.toObjectType().getReferenceName());",
      "info" : "ReturnStatement[16514-16613]:ReturnStatement[16668-16767]"
    }, {
      "left" : "if (this instanceof ProxyObjectType)",
      "right" : "if (this instanceof ProxyObjectType)",
      "info" : "IfStatement[16653-16837]:IfStatement[16807-16983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16690-16837]:Block[16844-16983]"
    }, {
      "left" : "return ((ProxyObjectType) this)\n          .getReferencedTypeInternal().checkEquivalenceHelper(\n              that, tolerateUnknowns);",
      "right" : "return ((ProxyObjectType) this)\n          .getReferencedTypeInternal().checkEquivalenceHelper(\n              that, eqMethod);",
      "info" : "ReturnStatement[16698-16831]:ReturnStatement[16852-16977]"
    }, {
      "left" : "if (that instanceof ProxyObjectType)",
      "right" : "if (that instanceof ProxyObjectType)",
      "info" : "IfStatement[16843-17017]:IfStatement[16989-17155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16880-17017]:Block[17026-17155]"
    }, {
      "left" : "return checkEquivalenceHelper(\n          ((ProxyObjectType) that).getReferencedTypeInternal(),\n          tolerateUnknowns);",
      "right" : "return checkEquivalenceHelper(\n          ((ProxyObjectType) that).getReferencedTypeInternal(),\n          eqMethod);",
      "info" : "ReturnStatement[16888-17011]:ReturnStatement[17034-17149]"
    }, {
      "left" : "return this == that;",
      "right" : "return this == that;",
      "info" : "ReturnStatement[17302-17322]:ReturnStatement[17440-17460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17393-17498]:Block[17531-17636]"
    }, {
      "left" : "return (typeA == null || typeB == null) ?\n        typeA == typeB : typeA.isEquivalentTo(typeB);",
      "right" : "return (typeA == null || typeB == null) ?\n        typeA == typeB : typeA.isEquivalentTo(typeB);",
      "info" : "ReturnStatement[17399-17494]:ReturnStatement[17537-17632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17551-17645]:Block[17689-17783]"
    }, {
      "left" : "return (jsType instanceof JSType) ?\n        isEquivalentTo((JSType) jsType) : false;",
      "right" : "return (jsType instanceof JSType) ?\n        isEquivalentTo((JSType) jsType) : false;",
      "info" : "ReturnStatement[17557-17641]:ReturnStatement[17695-17779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17683-17730]:Block[17821-17868]"
    }, {
      "left" : "return System.identityHashCode(this);",
      "right" : "return System.identityHashCode(this);",
      "info" : "ReturnStatement[17689-17726]:ReturnStatement[17827-17864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18058-18098]:Block[18196-18236]"
    }, {
      "left" : "return matchesNumberContext();",
      "right" : "return matchesNumberContext();",
      "info" : "ReturnStatement[18064-18094]:ReturnStatement[18202-18232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18326-18366]:Block[18464-18504]"
    }, {
      "left" : "return matchesNumberContext();",
      "right" : "return matchesNumberContext();",
      "info" : "ReturnStatement[18332-18362]:ReturnStatement[18470-18500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18558-18581]:Block[18696-18719]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18564-18577]:ReturnStatement[18702-18715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19021-19044]:Block[19159-19182]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19027-19040]:ReturnStatement[19165-19178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19426-19449]:Block[19564-19587]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19432-19445]:ReturnStatement[19570-19583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19855-20042]:Block[19993-20180]"
    }, {
      "left" : "ObjectType autoboxObjType = ObjectType.cast(autoboxesTo());",
      "right" : "ObjectType autoboxObjType = ObjectType.cast(autoboxesTo());",
      "info" : "VariableDeclarationStatement[19861-19920]:VariableDeclarationStatement[19999-20058]"
    }, {
      "left" : "if (autoboxObjType != null)",
      "right" : "if (autoboxObjType != null)",
      "info" : "IfStatement[19925-20020]:IfStatement[20063-20158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19953-20020]:Block[20091-20158]"
    }, {
      "left" : "return autoboxObjType.findPropertyType(propertyName);",
      "right" : "return autoboxObjType.findPropertyType(propertyName);",
      "info" : "ReturnStatement[19961-20014]:ReturnStatement[20099-20152]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20026-20038]:ReturnStatement[20164-20176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20262-20285]:Block[20400-20423]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20268-20281]:ReturnStatement[20406-20419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20553-20633]:Block[20691-20771]"
    }, {
      "left" : "if (this.isSubtype(that))",
      "right" : "if (this.isSubtype(that))",
      "info" : "IfStatement[20559-20611]:IfStatement[20697-20749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20585-20611]:Block[20723-20749]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20593-20605]:ReturnStatement[20731-20743]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20616-20629]:ReturnStatement[20754-20767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20819-20841]:Block[20957-20979]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20825-20837]:ReturnStatement[20963-20975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21022-21044]:Block[21160-21182]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21028-21040]:ReturnStatement[21166-21178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21363-21434]:Block[21501-21572]"
    }, {
      "left" : "return this instanceof ObjectType ? (ObjectType) this : null;",
      "right" : "return this instanceof ObjectType ? (ObjectType) this : null;",
      "info" : "ReturnStatement[21369-21430]:ReturnStatement[21507-21568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21611-21770]:Block[21749-21908]"
    }, {
      "left" : "JSType restricted = restrictByNotNullOrUndefined();",
      "right" : "JSType restricted = restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[21617-21668]:VariableDeclarationStatement[21755-21806]"
    }, {
      "left" : "JSType autobox = restricted.autoboxesTo();",
      "right" : "JSType autobox = restricted.autoboxesTo();",
      "info" : "VariableDeclarationStatement[21673-21715]:VariableDeclarationStatement[21811-21853]"
    }, {
      "left" : "return autobox == null ? restricted : autobox;",
      "right" : "return autobox == null ? restricted : autobox;",
      "info" : "ReturnStatement[21720-21766]:ReturnStatement[21858-21904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21973-22015]:Block[22111-22153]"
    }, {
      "left" : "return autobox().toObjectType();",
      "right" : "return autobox().toObjectType();",
      "info" : "ReturnStatement[21979-22011]:ReturnStatement[22117-22149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22376-22436]:Block[22514-22574]"
    }, {
      "left" : "return this.testForEquality(that).equals(UNKNOWN);",
      "right" : "return this.testForEquality(that).equals(UNKNOWN);",
      "info" : "ReturnStatement[22382-22432]:ReturnStatement[22520-22570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23073-23124]:Block[23211-23262]"
    }, {
      "left" : "return testForEqualityHelper(this, that);",
      "right" : "return testForEqualityHelper(this, that);",
      "info" : "ReturnStatement[23079-23120]:ReturnStatement[23217-23258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23191-24486]:Block[23329-24624]"
    }, {
      "left" : "if (bType.isAllType() || bType.isUnknownType() ||\n        bType.isNoResolvedType() ||\n        aType.isAllType() || aType.isUnknownType() ||\n        aType.isNoResolvedType())",
      "right" : "if (bType.isAllType() || bType.isUnknownType() ||\n        bType.isNoResolvedType() ||\n        aType.isAllType() || aType.isUnknownType() ||\n        aType.isNoResolvedType())",
      "info" : "IfStatement[23197-23400]:IfStatement[23335-23538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23371-23400]:Block[23509-23538]"
    }, {
      "left" : "return UNKNOWN;",
      "right" : "return UNKNOWN;",
      "info" : "ReturnStatement[23379-23394]:ReturnStatement[23517-23532]"
    }, {
      "left" : "boolean aIsEmpty = aType.isEmptyType();",
      "right" : "boolean aIsEmpty = aType.isEmptyType();",
      "info" : "VariableDeclarationStatement[23406-23445]:VariableDeclarationStatement[23544-23583]"
    }, {
      "left" : "boolean bIsEmpty = bType.isEmptyType();",
      "right" : "boolean bIsEmpty = bType.isEmptyType();",
      "info" : "VariableDeclarationStatement[23450-23489]:VariableDeclarationStatement[23588-23627]"
    }, {
      "left" : "if (aIsEmpty || bIsEmpty)",
      "right" : "if (aIsEmpty || bIsEmpty)",
      "info" : "IfStatement[23494-23642]:IfStatement[23632-23780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23520-23642]:Block[23658-23780]"
    }, {
      "left" : "if (aIsEmpty && bIsEmpty)",
      "right" : "if (aIsEmpty && bIsEmpty)",
      "info" : "IfStatement[23528-23636]:IfStatement[23666-23774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23554-23597]:Block[23692-23735]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[23564-23589]:ReturnStatement[23702-23727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23603-23636]:Block[23741-23774]"
    }, {
      "left" : "return UNKNOWN;",
      "right" : "return UNKNOWN;",
      "info" : "ReturnStatement[23613-23628]:ReturnStatement[23751-23766]"
    }, {
      "left" : "if (aType.isFunctionType() || bType.isFunctionType())",
      "right" : "if (aType.isFunctionType() || bType.isFunctionType())",
      "info" : "IfStatement[23648-24356]:IfStatement[23786-24494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23702-24356]:Block[23840-24494]"
    }, {
      "left" : "JSType otherType = aType.isFunctionType() ? bType : aType;",
      "right" : "JSType otherType = aType.isFunctionType() ? bType : aType;",
      "info" : "VariableDeclarationStatement[23710-23768]:VariableDeclarationStatement[23848-23906]"
    }, {
      "left" : "JSType meet = otherType.getGreatestSubtype(\n          getNativeType(JSTypeNative.OBJECT_TYPE));",
      "right" : "JSType meet = otherType.getGreatestSubtype(\n          getNativeType(JSTypeNative.OBJECT_TYPE));",
      "info" : "VariableDeclarationStatement[24106-24201]:VariableDeclarationStatement[24244-24339]"
    }, {
      "left" : "if (meet.isNoType() || meet.isNoObjectType())",
      "right" : "if (meet.isNoType() || meet.isNoObjectType())",
      "info" : "IfStatement[24208-24350]:IfStatement[24346-24488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24254-24298]:Block[24392-24436]"
    }, {
      "left" : "return TernaryValue.FALSE;",
      "right" : "return TernaryValue.FALSE;",
      "info" : "ReturnStatement[24264-24290]:ReturnStatement[24402-24428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24304-24350]:Block[24442-24488]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[24314-24342]:ReturnStatement[24452-24480]"
    }, {
      "left" : "if (bType.isEnumElementType() || bType.isUnionType())",
      "right" : "if (bType.isEnumElementType() || bType.isUnionType())",
      "info" : "IfStatement[24361-24465]:IfStatement[24499-24603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24415-24465]:Block[24553-24603]"
    }, {
      "left" : "return bType.testForEquality(aType);",
      "right" : "return bType.testForEquality(aType);",
      "info" : "ReturnStatement[24423-24459]:ReturnStatement[24561-24597]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24470-24482]:ReturnStatement[24608-24620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24886-25382]:Block[25024-25520]"
    }, {
      "left" : "if (isEmptyType() || that.isEmptyType())",
      "right" : "if (isEmptyType() || that.isEmptyType())",
      "info" : "IfStatement[24892-24994]:IfStatement[25030-25132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24933-24994]:Block[25071-25132]"
    }, {
      "left" : "return isSubtype(that) || that.isSubtype(this);",
      "right" : "return isSubtype(that) || that.isSubtype(this);",
      "info" : "ReturnStatement[24941-24988]:ReturnStatement[25079-25126]"
    }, {
      "left" : "JSType inf = getGreatestSubtype(that);",
      "right" : "JSType inf = getGreatestSubtype(that);",
      "info" : "VariableDeclarationStatement[25000-25038]:VariableDeclarationStatement[25138-25176]"
    }, {
      "left" : "return !inf.isEmptyType() ||\n        // Our getGreatestSubtype relation on functions is pretty bad.\n        // Let's just say it's always ok to compare two functions.\n        // Once the TODO in FunctionType is fixed, we should be able to\n        // remove this.\n        inf == registry.getNativeType(JSTypeNative.LEAST_FUNCTION_TYPE);",
      "right" : "return !inf.isEmptyType() ||\n        // Our getGreatestSubtype relation on functions is pretty bad.\n        // Let's just say it's always ok to compare two functions.\n        // Once the TODO in FunctionType is fixed, we should be able to\n        // remove this.\n        inf == registry.getNativeType(JSTypeNative.LEAST_FUNCTION_TYPE);",
      "info" : "ReturnStatement[25043-25378]:ReturnStatement[25181-25516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25468-25539]:Block[25606-25677]"
    }, {
      "left" : "return this.isSubtype(getNativeType(JSTypeNative.NULL_TYPE));",
      "right" : "return this.isSubtype(getNativeType(JSTypeNative.NULL_TYPE));",
      "info" : "ReturnStatement[25474-25535]:ReturnStatement[25612-25673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25643-25665]:Block[25781-25803]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[25649-25661]:ReturnStatement[25787-25799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26150-26368]:Block[26288-26506]"
    }, {
      "left" : "if (that.isUnionType())",
      "right" : "if (that.isUnionType())",
      "info" : "IfStatement[26156-26322]:IfStatement[26294-26460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26180-26322]:Block[26318-26460]"
    }, {
      "left" : "return that.toMaybeUnionType().getLeastSupertype(this);",
      "right" : "return that.toMaybeUnionType().getLeastSupertype(this);",
      "info" : "ReturnStatement[26261-26316]:ReturnStatement[26399-26454]"
    }, {
      "left" : "return getLeastSupertype(this, that);",
      "right" : "return getLeastSupertype(this, that);",
      "info" : "ReturnStatement[26327-26364]:ReturnStatement[26465-26502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26560-26764]:Block[26698-26902]"
    }, {
      "left" : "boolean areEquivalent = thisType.isEquivalentTo(thatType);",
      "right" : "boolean areEquivalent = thisType.isEquivalentTo(thatType);",
      "info" : "VariableDeclarationStatement[26566-26624]:VariableDeclarationStatement[26704-26762]"
    }, {
      "left" : "return areEquivalent ? thisType :\n        filterNoResolvedType(\n            thisType.registry.createUnionType(thisType, thatType));",
      "right" : "return areEquivalent ? thisType :\n        filterNoResolvedType(\n            thisType.registry.createUnionType(thisType, thatType));",
      "info" : "ReturnStatement[26629-26760]:ReturnStatement[26767-26898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27241-27289]:Block[27379-27427]"
    }, {
      "left" : "return getGreatestSubtype(this, that);",
      "right" : "return getGreatestSubtype(this, that);",
      "info" : "ReturnStatement[27247-27285]:ReturnStatement[27385-27423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27483-29465]:Block[27621-29603]"
    }, {
      "left" : "if (thisType.isFunctionType() && thatType.isFunctionType())",
      "right" : "if (thisType.isFunctionType() && thatType.isFunctionType())",
      "info" : "IfStatement[27489-28939]:IfStatement[27627-29077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27549-27928]:Block[27687-28066]"
    }, {
      "left" : "return thisType.toMaybeFunctionType().supAndInfHelper(\n          thatType.toMaybeFunctionType(), false);",
      "right" : "return thisType.toMaybeFunctionType().supAndInfHelper(\n          thatType.toMaybeFunctionType(), false);",
      "info" : "ReturnStatement[27818-27922]:ReturnStatement[27956-28060]"
    }, {
      "left" : "if (thisType.isEquivalentTo(thatType))",
      "right" : "if (thisType.isEquivalentTo(thatType))",
      "info" : "IfStatement[27934-28939]:IfStatement[28072-29077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27973-28003]:Block[28111-28141]"
    }, {
      "left" : "return thisType;",
      "right" : "return thisType;",
      "info" : "ReturnStatement[27981-27997]:ReturnStatement[28119-28135]"
    }, {
      "left" : "if (thisType.isUnknownType() || thatType.isUnknownType())",
      "right" : "if (thisType.isUnknownType() || thatType.isUnknownType())",
      "info" : "IfStatement[28009-28939]:IfStatement[28147-29077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28067-28319]:Block[28205-28457]"
    }, {
      "left" : "return thisType.isEquivalentTo(thatType) ? thisType :\n          thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "return thisType.isEquivalentTo(thatType) ? thisType :\n          thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "ReturnStatement[28199-28313]:ReturnStatement[28337-28451]"
    }, {
      "left" : "if (thisType.isSubtype(thatType))",
      "right" : "if (thisType.isSubtype(thatType))",
      "info" : "IfStatement[28325-28939]:IfStatement[28463-29077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28359-28411]:Block[28497-28549]"
    }, {
      "left" : "return filterNoResolvedType(thisType);",
      "right" : "return filterNoResolvedType(thisType);",
      "info" : "ReturnStatement[28367-28405]:ReturnStatement[28505-28543]"
    }, {
      "left" : "if (thatType.isSubtype(thisType))",
      "right" : "if (thatType.isSubtype(thisType))",
      "info" : "IfStatement[28417-28939]:IfStatement[28555-29077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28451-28503]:Block[28589-28641]"
    }, {
      "left" : "return filterNoResolvedType(thatType);",
      "right" : "return filterNoResolvedType(thatType);",
      "info" : "ReturnStatement[28459-28497]:ReturnStatement[28597-28635]"
    }, {
      "left" : "if (thisType.isUnionType())",
      "right" : "if (thisType.isUnionType())",
      "info" : "IfStatement[28509-28939]:IfStatement[28647-29077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28537-28601]:Block[28675-28739]"
    }, {
      "left" : "return thisType.toMaybeUnionType().meet(thatType);",
      "right" : "return thisType.toMaybeUnionType().meet(thatType);",
      "info" : "ReturnStatement[28545-28595]:ReturnStatement[28683-28733]"
    }, {
      "left" : "if (thatType.isUnionType())",
      "right" : "if (thatType.isUnionType())",
      "info" : "IfStatement[28607-28939]:IfStatement[28745-29077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28635-28699]:Block[28773-28837]"
    }, {
      "left" : "return thatType.toMaybeUnionType().meet(thisType);",
      "right" : "return thatType.toMaybeUnionType().meet(thisType);",
      "info" : "ReturnStatement[28643-28693]:ReturnStatement[28781-28831]"
    }, {
      "left" : "if (thisType.isRecordType())",
      "right" : "if (thisType.isRecordType())",
      "info" : "IfStatement[28705-28939]:IfStatement[28843-29077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28734-28819]:Block[28872-28957]"
    }, {
      "left" : "return thisType.toMaybeRecordType().getGreatestSubtypeHelper(thatType);",
      "right" : "return thisType.toMaybeRecordType().getGreatestSubtypeHelper(thatType);",
      "info" : "ReturnStatement[28742-28813]:ReturnStatement[28880-28951]"
    }, {
      "left" : "if (thatType.isRecordType())",
      "right" : "if (thatType.isRecordType())",
      "info" : "IfStatement[28825-28939]:IfStatement[28963-29077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28854-28939]:Block[28992-29077]"
    }, {
      "left" : "return thatType.toMaybeRecordType().getGreatestSubtypeHelper(thisType);",
      "right" : "return thatType.toMaybeRecordType().getGreatestSubtypeHelper(thisType);",
      "info" : "ReturnStatement[28862-28933]:ReturnStatement[29000-29071]"
    }, {
      "left" : "if (thisType.isEnumElementType())",
      "right" : "if (thisType.isEnumElementType())",
      "info" : "IfStatement[28945-29277]:IfStatement[29083-29415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28979-29108]:Block[29117-29246]"
    }, {
      "left" : "JSType inf = thisType.toMaybeEnumElementType().meet(thatType);",
      "right" : "JSType inf = thisType.toMaybeEnumElementType().meet(thatType);",
      "info" : "VariableDeclarationStatement[28987-29049]:VariableDeclarationStatement[29125-29187]"
    }, {
      "left" : "if (inf != null)",
      "right" : "if (inf != null)",
      "info" : "IfStatement[29056-29102]:IfStatement[29194-29240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29073-29102]:Block[29211-29240]"
    }, {
      "left" : "return inf;",
      "right" : "return inf;",
      "info" : "ReturnStatement[29083-29094]:ReturnStatement[29221-29232]"
    }, {
      "left" : "if (thatType.isEnumElementType())",
      "right" : "if (thatType.isEnumElementType())",
      "info" : "IfStatement[29114-29277]:IfStatement[29252-29415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29148-29277]:Block[29286-29415]"
    }, {
      "left" : "JSType inf = thatType.toMaybeEnumElementType().meet(thisType);",
      "right" : "JSType inf = thatType.toMaybeEnumElementType().meet(thisType);",
      "info" : "VariableDeclarationStatement[29156-29218]:VariableDeclarationStatement[29294-29356]"
    }, {
      "left" : "if (inf != null)",
      "right" : "if (inf != null)",
      "info" : "IfStatement[29225-29271]:IfStatement[29363-29409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29242-29271]:Block[29380-29409]"
    }, {
      "left" : "return inf;",
      "right" : "return inf;",
      "info" : "ReturnStatement[29252-29263]:ReturnStatement[29390-29401]"
    }, {
      "left" : "if (thisType.isObject() && thatType.isObject())",
      "right" : "if (thisType.isObject() && thatType.isObject())",
      "info" : "IfStatement[29283-29404]:IfStatement[29421-29542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29331-29404]:Block[29469-29542]"
    }, {
      "left" : "return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
      "right" : "return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
      "info" : "ReturnStatement[29339-29398]:ReturnStatement[29477-29536]"
    }, {
      "left" : "return thisType.getNativeType(JSTypeNative.NO_TYPE);",
      "right" : "return thisType.getNativeType(JSTypeNative.NO_TYPE);",
      "info" : "ReturnStatement[29409-29461]:ReturnStatement[29547-29599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29762-30611]:Block[29900-30749]"
    }, {
      "left" : "if (type.isNoResolvedType())",
      "right" : "if (type.isNoResolvedType())",
      "info" : "IfStatement[29768-30590]:IfStatement[29906-30728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29797-30005]:Block[29935-30143]"
    }, {
      "left" : "return type.getNativeType(JSTypeNative.NO_RESOLVED_TYPE);",
      "right" : "return type.getNativeType(JSTypeNative.NO_RESOLVED_TYPE);",
      "info" : "ReturnStatement[29942-29999]:ReturnStatement[30080-30137]"
    }, {
      "left" : "if (type.isUnionType())",
      "right" : "if (type.isUnionType())",
      "info" : "IfStatement[30011-30590]:IfStatement[30149-30728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30035-30590]:Block[30173-30728]"
    }, {
      "left" : "UnionType unionType = type.toMaybeUnionType();",
      "right" : "UnionType unionType = type.toMaybeUnionType();",
      "info" : "VariableDeclarationStatement[30043-30089]:VariableDeclarationStatement[30181-30227]"
    }, {
      "left" : "boolean needsFiltering = false;",
      "right" : "boolean needsFiltering = false;",
      "info" : "VariableDeclarationStatement[30096-30127]:VariableDeclarationStatement[30234-30265]"
    }, {
      "left" : "for (JSType alt : unionType.getAlternates())",
      "right" : "for (JSType alt : unionType.getAlternates())",
      "info" : "EnhancedForStatement[30134-30286]:EnhancedForStatement[30272-30424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30179-30286]:Block[30317-30424]"
    }, {
      "left" : "if (alt.isNoResolvedType())",
      "right" : "if (alt.isNoResolvedType())",
      "info" : "IfStatement[30189-30278]:IfStatement[30327-30416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30217-30278]:Block[30355-30416]"
    }, {
      "left" : "needsFiltering = true;",
      "right" : "needsFiltering = true;",
      "info" : "ExpressionStatement[30229-30251]:ExpressionStatement[30367-30389]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30262-30268]:BreakStatement[30400-30406]"
    }, {
      "left" : "if (needsFiltering)",
      "right" : "if (needsFiltering)",
      "info" : "IfStatement[30294-30584]:IfStatement[30432-30722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30314-30584]:Block[30452-30722]"
    }, {
      "left" : "UnionTypeBuilder builder = new UnionTypeBuilder(type.registry);",
      "right" : "UnionTypeBuilder builder = new UnionTypeBuilder(type.registry);",
      "info" : "VariableDeclarationStatement[30324-30387]:VariableDeclarationStatement[30462-30525]"
    }, {
      "left" : "for (JSType alt : unionType.getAlternates())",
      "right" : "for (JSType alt : unionType.getAlternates())",
      "info" : "EnhancedForStatement[30396-30544]:EnhancedForStatement[30534-30682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30441-30544]:Block[30579-30682]"
    }, {
      "left" : "if (!alt.isNoResolvedType())",
      "right" : "if (!alt.isNoResolvedType())",
      "info" : "IfStatement[30453-30534]:IfStatement[30591-30672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30482-30534]:Block[30620-30672]"
    }, {
      "left" : "builder.addAlternate(alt);",
      "right" : "builder.addAlternate(alt);",
      "info" : "ExpressionStatement[30496-30522]:ExpressionStatement[30634-30660]"
    }, {
      "left" : "return builder.build();",
      "right" : "return builder.build();",
      "info" : "ReturnStatement[30553-30576]:ReturnStatement[30691-30714]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[30595-30607]:ReturnStatement[30733-30745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31259-31596]:Block[31397-31734]"
    }, {
      "left" : "if (outcome && this == getNativeType(JSTypeNative.UNKNOWN_TYPE))",
      "right" : "if (outcome && this == getNativeType(JSTypeNative.UNKNOWN_TYPE))",
      "info" : "IfStatement[31265-31400]:IfStatement[31403-31538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31330-31400]:Block[31468-31538]"
    }, {
      "left" : "return getNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE);",
      "right" : "return getNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE);",
      "info" : "ReturnStatement[31338-31394]:ReturnStatement[31476-31532]"
    }, {
      "left" : "BooleanLiteralSet literals = getPossibleToBooleanOutcomes();",
      "right" : "BooleanLiteralSet literals = getPossibleToBooleanOutcomes();",
      "info" : "VariableDeclarationStatement[31406-31466]:VariableDeclarationStatement[31544-31604]"
    }, {
      "left" : "if (literals.contains(outcome))",
      "right" : "if (literals.contains(outcome))",
      "info" : "IfStatement[31471-31592]:IfStatement[31609-31730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31503-31529]:Block[31641-31667]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[31511-31523]:ReturnStatement[31649-31661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31535-31592]:Block[31673-31730]"
    }, {
      "left" : "return getNativeType(JSTypeNative.NO_TYPE);",
      "right" : "return getNativeType(JSTypeNative.NO_TYPE);",
      "info" : "ReturnStatement[31543-31586]:ReturnStatement[31681-31724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33094-33551]:Block[33232-33689]"
    }, {
      "left" : "if (that.isUnionType())",
      "right" : "if (that.isUnionType())",
      "info" : "IfStatement[33120-33268]:IfStatement[33258-33406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33144-33268]:Block[33282-33406]"
    }, {
      "left" : "TypePair p = that.toMaybeUnionType().getTypesUnderEquality(this);",
      "right" : "TypePair p = that.toMaybeUnionType().getTypesUnderEquality(this);",
      "info" : "VariableDeclarationStatement[33152-33217]:VariableDeclarationStatement[33290-33355]"
    }, {
      "left" : "return new TypePair(p.typeB, p.typeA);",
      "right" : "return new TypePair(p.typeB, p.typeA);",
      "info" : "ReturnStatement[33224-33262]:ReturnStatement[33362-33400]"
    }, {
      "left" : "switch (this.testForEquality(that)) {\n      case FALSE:\n        return new TypePair(null, null);\n\n      case TRUE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }",
      "right" : "switch (this.testForEquality(that)) {\n      case FALSE:\n        return new TypePair(null, null);\n\n      case TRUE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }",
      "info" : "SwitchStatement[33293-33474]:SwitchStatement[33431-33612]"
    }, {
      "left" : "case FALSE:",
      "right" : "case FALSE:",
      "info" : "SwitchCase[33337-33348]:SwitchCase[33475-33486]"
    }, {
      "left" : "return new TypePair(null, null);",
      "right" : "return new TypePair(null, null);",
      "info" : "ReturnStatement[33357-33389]:ReturnStatement[33495-33527]"
    }, {
      "left" : "case TRUE:",
      "right" : "case TRUE:",
      "info" : "SwitchCase[33397-33407]:SwitchCase[33535-33545]"
    }, {
      "left" : "case UNKNOWN:",
      "right" : "case UNKNOWN:",
      "info" : "SwitchCase[33414-33427]:SwitchCase[33552-33565]"
    }, {
      "left" : "return new TypePair(this, that);",
      "right" : "return new TypePair(this, that);",
      "info" : "ReturnStatement[33436-33468]:ReturnStatement[33574-33606]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[33513-33547]:ThrowStatement[33651-33685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34244-34768]:Block[34382-34906]"
    }, {
      "left" : "if (that.isUnionType())",
      "right" : "if (that.isUnionType())",
      "info" : "IfStatement[34270-34420]:IfStatement[34408-34558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34294-34420]:Block[34432-34558]"
    }, {
      "left" : "TypePair p = that.toMaybeUnionType().getTypesUnderInequality(this);",
      "right" : "TypePair p = that.toMaybeUnionType().getTypesUnderInequality(this);",
      "info" : "VariableDeclarationStatement[34302-34369]:VariableDeclarationStatement[34440-34507]"
    }, {
      "left" : "return new TypePair(p.typeB, p.typeA);",
      "right" : "return new TypePair(p.typeB, p.typeA);",
      "info" : "ReturnStatement[34376-34414]:ReturnStatement[34514-34552]"
    }, {
      "left" : "switch (this.testForEquality(that)) {\n      case TRUE:\n        JSType noType = getNativeType(JSTypeNative.NO_TYPE);\n        return new TypePair(noType, noType);\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }",
      "right" : "switch (this.testForEquality(that)) {\n      case TRUE:\n        JSType noType = getNativeType(JSTypeNative.NO_TYPE);\n        return new TypePair(noType, noType);\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }",
      "info" : "SwitchStatement[34445-34691]:SwitchStatement[34583-34829]"
    }, {
      "left" : "case TRUE:",
      "right" : "case TRUE:",
      "info" : "SwitchCase[34489-34499]:SwitchCase[34627-34637]"
    }, {
      "left" : "JSType noType = getNativeType(JSTypeNative.NO_TYPE);",
      "right" : "JSType noType = getNativeType(JSTypeNative.NO_TYPE);",
      "info" : "VariableDeclarationStatement[34508-34560]:VariableDeclarationStatement[34646-34698]"
    }, {
      "left" : "return new TypePair(noType, noType);",
      "right" : "return new TypePair(noType, noType);",
      "info" : "ReturnStatement[34569-34605]:ReturnStatement[34707-34743]"
    }, {
      "left" : "case FALSE:",
      "right" : "case FALSE:",
      "info" : "SwitchCase[34613-34624]:SwitchCase[34751-34762]"
    }, {
      "left" : "case UNKNOWN:",
      "right" : "case UNKNOWN:",
      "info" : "SwitchCase[34631-34644]:SwitchCase[34769-34782]"
    }, {
      "left" : "return new TypePair(this, that);",
      "right" : "return new TypePair(this, that);",
      "info" : "ReturnStatement[34653-34685]:ReturnStatement[34791-34823]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[34730-34764]:ThrowStatement[34868-34902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35220-35324]:Block[35358-35462]"
    }, {
      "left" : "JSType commonType = getGreatestSubtype(that);",
      "right" : "JSType commonType = getGreatestSubtype(that);",
      "info" : "VariableDeclarationStatement[35226-35271]:VariableDeclarationStatement[35364-35409]"
    }, {
      "left" : "return new TypePair(commonType, commonType);",
      "right" : "return new TypePair(commonType, commonType);",
      "info" : "ReturnStatement[35276-35320]:ReturnStatement[35414-35458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35779-36324]:Block[35917-36462]"
    }, {
      "left" : "if (that.isUnionType())",
      "right" : "if (that.isUnionType())",
      "info" : "IfStatement[35804-35961]:IfStatement[35942-36099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35828-35961]:Block[35966-36099]"
    }, {
      "left" : "TypePair p = that.toMaybeUnionType().getTypesUnderShallowInequality(this);",
      "right" : "TypePair p = that.toMaybeUnionType().getTypesUnderShallowInequality(this);",
      "info" : "VariableDeclarationStatement[35836-35910]:VariableDeclarationStatement[35974-36048]"
    }, {
      "left" : "return new TypePair(p.typeB, p.typeA);",
      "right" : "return new TypePair(p.typeB, p.typeA);",
      "info" : "ReturnStatement[35917-35955]:ReturnStatement[36055-36093]"
    }, {
      "left" : "if (this.isNullType() && that.isNullType() ||\n        this.isVoidType() && that.isVoidType())",
      "right" : "if (this.isNullType() && that.isNullType() ||\n        this.isVoidType() && that.isVoidType())",
      "info" : "IfStatement[36128-36320]:IfStatement[36266-36458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36222-36268]:Block[36360-36406]"
    }, {
      "left" : "return new TypePair(null, null);",
      "right" : "return new TypePair(null, null);",
      "info" : "ReturnStatement[36230-36262]:ReturnStatement[36368-36400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36274-36320]:Block[36412-36458]"
    }, {
      "left" : "return new TypePair(this, that);",
      "right" : "return new TypePair(this, that);",
      "info" : "ReturnStatement[36282-36314]:ReturnStatement[36420-36452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36491-36513]:Block[36629-36651]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[36497-36509]:ReturnStatement[36635-36647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37853-37898]:Block[37991-38036]"
    }, {
      "left" : "return isSubtypeHelper(this, that);",
      "right" : "return isSubtypeHelper(this, that);",
      "info" : "ReturnStatement[37859-37894]:ReturnStatement[37997-38032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38071-38742]:Block[38209-38880]"
    }, {
      "left" : "if (thatType.isUnknownType())",
      "right" : "if (thatType.isUnknownType())",
      "info" : "IfStatement[38092-38148]:IfStatement[38230-38286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38122-38148]:Block[38260-38286]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38130-38142]:ReturnStatement[38268-38280]"
    }, {
      "left" : "if (thatType.isAllType())",
      "right" : "if (thatType.isAllType())",
      "info" : "IfStatement[38169-38221]:IfStatement[38307-38359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38195-38221]:Block[38333-38359]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38203-38215]:ReturnStatement[38341-38353]"
    }, {
      "left" : "if (thisType.isEquivalentTo(thatType))",
      "right" : "if (thisType.isEquivalentTo(thatType))",
      "info" : "IfStatement[38242-38307]:IfStatement[38380-38445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38281-38307]:Block[38419-38445]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38289-38301]:ReturnStatement[38427-38439]"
    }, {
      "left" : "if (thatType.isUnionType())",
      "right" : "if (thatType.isUnionType())",
      "info" : "IfStatement[38326-38546]:IfStatement[38464-38684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38354-38546]:Block[38492-38684]"
    }, {
      "left" : "UnionType union = thatType.toMaybeUnionType();",
      "right" : "UnionType union = thatType.toMaybeUnionType();",
      "info" : "VariableDeclarationStatement[38362-38408]:VariableDeclarationStatement[38500-38546]"
    }, {
      "left" : "for (JSType element : union.alternates)",
      "right" : "for (JSType element : union.alternates)",
      "info" : "EnhancedForStatement[38415-38540]:EnhancedForStatement[38553-38678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38455-38540]:Block[38593-38678]"
    }, {
      "left" : "if (thisType.isSubtype(element))",
      "right" : "if (thisType.isSubtype(element))",
      "info" : "IfStatement[38465-38532]:IfStatement[38603-38670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38498-38532]:Block[38636-38670]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38510-38522]:ReturnStatement[38648-38660]"
    }, {
      "left" : "if (thatType instanceof ProxyObjectType)",
      "right" : "if (thatType instanceof ProxyObjectType)",
      "info" : "IfStatement[38570-38720]:IfStatement[38708-38858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38611-38720]:Block[38749-38858]"
    }, {
      "left" : "return thisType.isSubtype(\n          ((ProxyObjectType) thatType).getReferencedTypeInternal());",
      "right" : "return thisType.isSubtype(\n          ((ProxyObjectType) thatType).getReferencedTypeInternal());",
      "info" : "ReturnStatement[38619-38714]:ReturnStatement[38757-38852]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38725-38738]:ReturnStatement[38863-38876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39151-39371]:Block[39289-39509]"
    }, {
      "left" : "ResolveMode oldResolveMode = registry.getResolveMode();",
      "right" : "ResolveMode oldResolveMode = registry.getResolveMode();",
      "info" : "VariableDeclarationStatement[39157-39212]:VariableDeclarationStatement[39295-39350]"
    }, {
      "left" : "registry.setResolveMode(ResolveMode.IMMEDIATE);",
      "right" : "registry.setResolveMode(ResolveMode.IMMEDIATE);",
      "info" : "ExpressionStatement[39217-39264]:ExpressionStatement[39355-39402]"
    }, {
      "left" : "JSType result = resolve(t, scope);",
      "right" : "JSType result = resolve(t, scope);",
      "info" : "VariableDeclarationStatement[39269-39303]:VariableDeclarationStatement[39407-39441]"
    }, {
      "left" : "registry.setResolveMode(oldResolveMode);",
      "right" : "registry.setResolveMode(oldResolveMode);",
      "info" : "ExpressionStatement[39308-39348]:ExpressionStatement[39446-39486]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[39353-39367]:ReturnStatement[39491-39505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40048-40496]:Block[40186-40634]"
    }, {
      "left" : "if (resolved)",
      "right" : "if (resolved)",
      "info" : "IfStatement[40054-40340]:IfStatement[40192-40478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40068-40340]:Block[40206-40478]"
    }, {
      "left" : "if (resolveResult == null)",
      "right" : "if (resolveResult == null)",
      "info" : "IfStatement[40204-40306]:IfStatement[40342-40444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40231-40306]:Block[40369-40444]"
    }, {
      "left" : "return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "ReturnStatement[40241-40298]:ReturnStatement[40379-40436]"
    }, {
      "left" : "return resolveResult;",
      "right" : "return resolveResult;",
      "info" : "ReturnStatement[40313-40334]:ReturnStatement[40451-40472]"
    }, {
      "left" : "resolved = true;",
      "right" : "resolved = true;",
      "info" : "ExpressionStatement[40345-40361]:ExpressionStatement[40483-40499]"
    }, {
      "left" : "resolveResult = resolveInternal(t, scope);",
      "right" : "resolveResult = resolveInternal(t, scope);",
      "info" : "ExpressionStatement[40366-40408]:ExpressionStatement[40504-40546]"
    }, {
      "left" : "resolveResult.setResolvedTypeInternal(resolveResult);",
      "right" : "resolveResult.setResolvedTypeInternal(resolveResult);",
      "info" : "ExpressionStatement[40413-40466]:ExpressionStatement[40551-40604]"
    }, {
      "left" : "return resolveResult;",
      "right" : "return resolveResult;",
      "info" : "ReturnStatement[40471-40492]:ReturnStatement[40609-40630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40653-40705]:Block[40791-40843]"
    }, {
      "left" : "resolveResult = type;",
      "right" : "resolveResult = type;",
      "info" : "ExpressionStatement[40659-40680]:ExpressionStatement[40797-40818]"
    }, {
      "left" : "resolved = true;",
      "right" : "resolved = true;",
      "info" : "ExpressionStatement[40685-40701]:ExpressionStatement[40823-40839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40788-40814]:Block[40926-40952]"
    }, {
      "left" : "return resolved;",
      "right" : "return resolved;",
      "info" : "ReturnStatement[40794-40810]:ReturnStatement[40932-40948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40888-40941]:Block[41026-41079]"
    }, {
      "left" : "resolved = false;",
      "right" : "resolved = false;",
      "info" : "ExpressionStatement[40894-40911]:ExpressionStatement[41032-41049]"
    }, {
      "left" : "resolveResult = null;",
      "right" : "resolveResult = null;",
      "info" : "ExpressionStatement[40916-40937]:ExpressionStatement[41054-41075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41098-41160]:Block[41236-41298]"
    }, {
      "left" : "return type == null ? null : type.resolve(t, scope);",
      "right" : "return type == null ? null : type.resolve(t, scope);",
      "info" : "ReturnStatement[41104-41156]:ReturnStatement[41242-41294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41489-41528]:Block[41627-41666]"
    }, {
      "left" : "return validator.apply(this);",
      "right" : "return validator.apply(this);",
      "info" : "ReturnStatement[41495-41524]:ReturnStatement[41633-41662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41674-41733]:Block[41812-41871]"
    }, {
      "left" : "this.typeA = typeA;",
      "right" : "this.typeA = typeA;",
      "info" : "ExpressionStatement[41682-41701]:ExpressionStatement[41820-41839]"
    }, {
      "left" : "this.typeB = typeB;",
      "right" : "this.typeB = typeB;",
      "info" : "ExpressionStatement[41708-41727]:ExpressionStatement[41846-41865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41873-41912]:Block[42011-42050]"
    }, {
      "left" : "return toStringHelper(false);",
      "right" : "return toStringHelper(false);",
      "info" : "ReturnStatement[41879-41908]:ReturnStatement[42017-42046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42053-42098]:Block[42191-42236]"
    }, {
      "left" : "return \"{\" + this.hashCode() + \"}\";",
      "right" : "return \"{\" + this.hashCode() + \"}\";",
      "info" : "ReturnStatement[42059-42094]:ReturnStatement[42197-42232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42270-42308]:Block[42408-42446]"
    }, {
      "left" : "return toStringHelper(true);",
      "right" : "return toStringHelper(true);",
      "info" : "ReturnStatement[42276-42304]:ReturnStatement[42414-42442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42837-42839]:Block[42975-42977]"
    } ]
  },
  "interFileMappings" : { }
}