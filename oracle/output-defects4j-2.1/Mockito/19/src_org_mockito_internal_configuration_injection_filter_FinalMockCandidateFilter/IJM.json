{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FinalMockCandidateFilter",
      "right" : "FinalMockCandidateFilter",
      "info" : "TypeDeclaration[406-1737]:TypeDeclaration[429-1780]"
    }, {
      "left" : "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance)",
      "right" : "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance)",
      "info" : "MethodDeclaration[812-1735]:MethodDeclaration[835-1778]"
    }, {
      "left" : "public Object thenInject()",
      "right" : "public Object thenInject()",
      "info" : "MethodDeclaration[1089-1568]:MethodDeclaration[1132-1611]"
    }, {
      "left" : "public Object thenInject()",
      "right" : "public Object thenInject()",
      "info" : "MethodDeclaration[1646-1717]:MethodDeclaration[1689-1760]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[930-1735]:Block[973-1778]"
    }, {
      "left" : "if(mocks.size() == 1)",
      "right" : "if(mocks.size() == 1)",
      "info" : "IfStatement[940-1593]:IfStatement[983-1636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[962-1593]:Block[1005-1636]"
    }, {
      "left" : "final Object matchingMock = mocks.iterator().next();",
      "right" : "final Object matchingMock = mocks.iterator().next();",
      "info" : "VariableDeclarationStatement[976-1028]:VariableDeclarationStatement[1019-1071]"
    }, {
      "left" : "return new OngoingInjecter() {\n                public Object thenInject() {\n                    try {\n                        if (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\n                            new FieldSetter(fieldInstance, field).set(matchingMock);\n                        }\n                    } catch (RuntimeException e) {\n                        new Reporter().cannotInjectDependency(field, matchingMock, e);\n                    }\n                    return matchingMock;\n                }\n            };",
      "right" : "return new OngoingInjecter() {\n                public Object thenInject() {\n                    try {\n                        if (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\n                            new FieldSetter(fieldInstance, field).set(matchingMock);\n                        }\n                    } catch (RuntimeException e) {\n                        new Reporter().cannotInjectDependency(field, matchingMock, e);\n                    }\n                    return matchingMock;\n                }\n            };",
      "info" : "ReturnStatement[1042-1583]:ReturnStatement[1085-1626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1116-1568]:Block[1159-1611]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1138-1509]:TryStatement[1181-1552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1142-1371]:Block[1185-1414]"
    }, {
      "left" : "if (!new BeanPropertySetter(fieldInstance, field).set(matchingMock))",
      "right" : "if (!new BeanPropertySetter(fieldInstance, field).set(matchingMock))",
      "info" : "IfStatement[1168-1349]:IfStatement[1211-1392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1237-1349]:Block[1280-1392]"
    }, {
      "left" : "new FieldSetter(fieldInstance, field).set(matchingMock);",
      "right" : "new FieldSetter(fieldInstance, field).set(matchingMock);",
      "info" : "ExpressionStatement[1267-1323]:ExpressionStatement[1310-1366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1399-1509]:Block[1442-1552]"
    }, {
      "left" : "new Reporter().cannotInjectDependency(field, matchingMock, e);",
      "right" : "new Reporter().cannotInjectDependency(field, matchingMock, e);",
      "info" : "ExpressionStatement[1425-1487]:ExpressionStatement[1468-1530]"
    }, {
      "left" : "return matchingMock;",
      "right" : "return matchingMock;",
      "info" : "ReturnStatement[1530-1550]:ReturnStatement[1573-1593]"
    }, {
      "left" : "return new OngoingInjecter() {\n            public Object thenInject() {\n                return null;\n            }\n        };",
      "right" : "return new OngoingInjecter() {\n            public Object thenInject() {\n                return null;\n            }\n        };",
      "info" : "ReturnStatement[1603-1728]:ReturnStatement[1646-1771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1673-1717]:Block[1716-1760]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[1691-1703]:ReturnStatement[1734-1746]"
    } ]
  },
  "interFileMappings" : { }
}