{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "RecordReaderFactory",
      "right" : "RecordReaderFactory",
      "info" : "TypeDeclaration[2038-11167]:TypeDeclaration[2038-11323]"
    }, {
      "left" : "static final Log LOG = LogFactory.getLog(RecordReaderFactory.class);",
      "right" : "static final Log LOG = LogFactory.getLog(RecordReaderFactory.class);",
      "info" : "FieldDeclaration[2224-2292]:FieldDeclaration[2224-2292]"
    }, {
      "left" : "private static final boolean isLogInfoEnabled = LOG.isInfoEnabled();",
      "right" : "private static final boolean isLogInfoEnabled = LOG.isInfoEnabled();",
      "info" : "FieldDeclaration[2295-2363]:FieldDeclaration[2295-2363]"
    }, {
      "left" : "public static TreeReaderFactory.TreeReader createTreeReader(int colId,\n      Configuration conf,\n      List<OrcProto.Type> fileSchema,\n      boolean[] included,\n      boolean skipCorrupt) throws IOException",
      "right" : "public static TreeReaderFactory.TreeReader createTreeReader(int colId,\n      Configuration conf,\n      List<OrcProto.Type> fileSchema,\n      boolean[] included,\n      boolean skipCorrupt) throws IOException",
      "info" : "MethodDeclaration[2367-3339]:MethodDeclaration[2367-3339]"
    }, {
      "left" : "private static boolean checkAcidSchema(List<OrcProto.Type> fileSchema)",
      "right" : "private static boolean checkAcidSchema(List<OrcProto.Type> fileSchema)",
      "info" : "MethodDeclaration[3343-3730]:MethodDeclaration[3516-3886]"
    }, {
      "left" : "private static List<OrcProto.Type> getMatchingSchema(List<OrcProto.Type> fileSchema,\n      List<OrcProto.Type> schemaOnRead)",
      "right" : "private static List<OrcProto.Type> getMatchingSchema(List<OrcProto.Type> fileSchema,\n      List<OrcProto.Type> schemaOnRead)",
      "info" : "MethodDeclaration[3734-6034]:MethodDeclaration[3890-6190]"
    }, {
      "left" : "private static List<OrcProto.Type> getSchemaOnRead(int numCols, Configuration conf)",
      "right" : "private static List<OrcProto.Type> getSchemaOnRead(int numCols, Configuration conf)",
      "info" : "MethodDeclaration[6038-7077]:MethodDeclaration[6194-7233]"
    }, {
      "left" : "private static List<OrcProto.Type> getOrcTypes(ObjectInspector inspector)",
      "right" : "private static List<OrcProto.Type> getOrcTypes(ObjectInspector inspector)",
      "info" : "MethodDeclaration[7081-7274]:MethodDeclaration[7237-7430]"
    }, {
      "left" : "private static void getOrcTypesImpl(List<OrcProto.Type> result, ObjectInspector inspector)",
      "right" : "private static void getOrcTypesImpl(List<OrcProto.Type> result, ObjectInspector inspector)",
      "info" : "MethodDeclaration[7278-11165]:MethodDeclaration[7434-11321]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2187-2193]:Modifier[2187-2193]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2194-2199]:TYPE_DECLARATION_KIND[2194-2199]"
    }, {
      "left" : "RecordReaderFactory",
      "right" : "RecordReaderFactory",
      "info" : "SimpleName[2200-2219]:SimpleName[2200-2219]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2367-2373]:Modifier[2367-2373]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2374-2380]:Modifier[2374-2380]"
    }, {
      "left" : "TreeReaderFactory.TreeReader",
      "right" : "TreeReaderFactory.TreeReader",
      "info" : "SimpleType[2381-2409]:SimpleType[2381-2409]"
    }, {
      "left" : "createTreeReader",
      "right" : "createTreeReader",
      "info" : "SimpleName[2410-2426]:SimpleName[2410-2426]"
    }, {
      "left" : "int colId",
      "right" : "int colId",
      "info" : "SingleVariableDeclaration[2427-2436]:SingleVariableDeclaration[2427-2436]"
    }, {
      "left" : "Configuration conf",
      "right" : "Configuration conf",
      "info" : "SingleVariableDeclaration[2444-2462]:SingleVariableDeclaration[2444-2462]"
    }, {
      "left" : "List<OrcProto.Type> fileSchema",
      "right" : "List<OrcProto.Type> fileSchema",
      "info" : "SingleVariableDeclaration[2470-2500]:SingleVariableDeclaration[2470-2500]"
    }, {
      "left" : "boolean[] included",
      "right" : "boolean[] included",
      "info" : "SingleVariableDeclaration[2508-2526]:SingleVariableDeclaration[2508-2526]"
    }, {
      "left" : "boolean skipCorrupt",
      "right" : "boolean skipCorrupt",
      "info" : "SingleVariableDeclaration[2534-2553]:SingleVariableDeclaration[2534-2553]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2562-2573]:SimpleType[2562-2573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2574-3339]:Block[2574-3339]"
    }, {
      "left" : "final boolean isAcid = checkAcidSchema(fileSchema);",
      "right" : "final boolean isAcid = checkAcidSchema(fileSchema);",
      "info" : "VariableDeclarationStatement[2580-2631]:VariableDeclarationStatement[2580-2631]"
    }, {
      "left" : "final List<OrcProto.Type> originalFileSchema;",
      "right" : "final List<OrcProto.Type> originalFileSchema;",
      "info" : "VariableDeclarationStatement[2636-2681]:VariableDeclarationStatement[2636-2681]"
    }, {
      "left" : "if (isAcid)",
      "right" : "if (isAcid)",
      "info" : "IfStatement[2686-2871]:IfStatement[2686-2871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2698-2819]:Block[2698-2819]"
    }, {
      "left" : "originalFileSchema = fileSchema.subList(fileSchema.get(0).getSubtypesCount(),\n          fileSchema.size());",
      "right" : "originalFileSchema = fileSchema.subList(fileSchema.get(0).getSubtypesCount(),\n          fileSchema.size());",
      "info" : "ExpressionStatement[2706-2813]:ExpressionStatement[2706-2813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2825-2871]:Block[2825-2871]"
    }, {
      "left" : "originalFileSchema = fileSchema;",
      "right" : "originalFileSchema = fileSchema;",
      "info" : "ExpressionStatement[2833-2865]:ExpressionStatement[2833-2865]"
    }, {
      "left" : "final int numCols = originalFileSchema.get(0).getSubtypesCount();",
      "right" : "final int numCols = originalFileSchema.get(0).getSubtypesCount();",
      "info" : "VariableDeclarationStatement[2876-2941]:VariableDeclarationStatement[2876-2941]"
    }, {
      "left" : "List<OrcProto.Type> schemaOnRead = getSchemaOnRead(numCols, conf);",
      "right" : "List<OrcProto.Type> schemaOnRead = getSchemaOnRead(numCols, conf);",
      "info" : "VariableDeclarationStatement[2946-3012]:VariableDeclarationStatement[2946-3012]"
    }, {
      "left" : "List<OrcProto.Type> schemaUsed = getMatchingSchema(fileSchema, schemaOnRead);",
      "right" : "List<OrcProto.Type> schemaUsed = getMatchingSchema(fileSchema, schemaOnRead);",
      "info" : "VariableDeclarationStatement[3017-3094]:VariableDeclarationStatement[3017-3094]"
    }, {
      "left" : "if (schemaUsed == null)",
      "right" : "if (schemaUsed == null)",
      "info" : "IfStatement[3099-3335]:IfStatement[3099-3335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3123-3221]:Block[3123-3221]"
    }, {
      "left" : "return TreeReaderFactory.createTreeReader(colId, fileSchema, included, skipCorrupt);",
      "right" : "return TreeReaderFactory.createTreeReader(colId, fileSchema, included, skipCorrupt);",
      "info" : "ReturnStatement[3131-3215]:ReturnStatement[3131-3215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3227-3335]:Block[3227-3335]"
    }, {
      "left" : "return ConversionTreeReaderFactory.createTreeReader(colId, schemaUsed, included, skipCorrupt);",
      "right" : "return ConversionTreeReaderFactory.createTreeReader(colId, schemaUsed, included, skipCorrupt);",
      "info" : "ReturnStatement[3235-3329]:ReturnStatement[3235-3329]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3343-3350]:Modifier[3516-3523]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3351-3357]:Modifier[3343-3349]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3358-3365]:PrimitiveType[3531-3538]"
    }, {
      "left" : "checkAcidSchema",
      "right" : "checkAcidSchema",
      "info" : "SimpleName[3366-3381]:SimpleName[3539-3554]"
    }, {
      "left" : "List",
      "right" : "List",
      "info" : "SimpleType[3382-3386]:SimpleType[3350-3354]"
    }, {
      "left" : "List<OrcProto.Type> fileSchema",
      "right" : "List<OrcProto.Type> fileSchema",
      "info" : "SingleVariableDeclaration[3382-3412]:SingleVariableDeclaration[3555-3585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3414-3730]:Block[3587-3886]"
    }, {
      "left" : "if (fileSchema.get(0).getKind().equals(OrcProto.Type.Kind.STRUCT))",
      "right" : "if (fileSchema.get(0).getKind().equals(OrcProto.Type.Kind.STRUCT))",
      "info" : "IfStatement[3420-3708]:IfStatement[3593-3864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3487-3708]:Block[3660-3864]"
    }, {
      "left" : "List",
      "right" : "List",
      "info" : "SimpleType[3495-3499]:SimpleType[3555-3559]"
    }, {
      "left" : "List<String> acidFields = OrcRecordUpdater.getAcidEventFields();",
      "right" : "List<String> acidFields = getAcidEventFields();",
      "info" : "VariableDeclarationStatement[3495-3559]:VariableDeclarationStatement[3668-3715]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3500-3506]:SimpleType[3355-3361]"
    }, {
      "left" : "List<String> rootFields = fileSchema.get(0).getFieldNamesList();",
      "right" : "List<String> rootFields = fileSchema.get(0).getFieldNamesList();",
      "info" : "VariableDeclarationStatement[3566-3630]:VariableDeclarationStatement[3722-3786]"
    }, {
      "left" : "if (acidFields.equals(rootFields))",
      "right" : "if (acidFields.equals(rootFields))",
      "info" : "IfStatement[3637-3702]:IfStatement[3793-3858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3672-3702]:Block[3828-3858]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3682-3694]:ReturnStatement[3838-3850]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3713-3726]:ReturnStatement[3869-3882]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3734-3741]:Modifier[3890-3897]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3742-3748]:Modifier[3898-3904]"
    }, {
      "left" : "List<OrcProto.Type>",
      "right" : "List<OrcProto.Type>",
      "info" : "ParameterizedType[3749-3768]:ParameterizedType[3905-3924]"
    }, {
      "left" : "getMatchingSchema",
      "right" : "getMatchingSchema",
      "info" : "SimpleName[3769-3786]:SimpleName[3925-3942]"
    }, {
      "left" : "List<OrcProto.Type> fileSchema",
      "right" : "List<OrcProto.Type> fileSchema",
      "info" : "SingleVariableDeclaration[3787-3817]:SingleVariableDeclaration[3943-3973]"
    }, {
      "left" : "List<OrcProto.Type> schemaOnRead",
      "right" : "List<OrcProto.Type> schemaOnRead",
      "info" : "SingleVariableDeclaration[3825-3857]:SingleVariableDeclaration[3981-4013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3859-6034]:Block[4015-6190]"
    }, {
      "left" : "if (schemaOnRead == null)",
      "right" : "if (schemaOnRead == null)",
      "info" : "IfStatement[3865-4028]:IfStatement[4021-4184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3891-4028]:Block[4047-4184]"
    }, {
      "left" : "if (isLogInfoEnabled)",
      "right" : "if (isLogInfoEnabled)",
      "info" : "IfStatement[3899-4003]:IfStatement[4055-4159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3921-4003]:Block[4077-4159]"
    }, {
      "left" : "LOG.info(\"Schema is not specified on read. Using file schema.\");",
      "right" : "LOG.info(\"Schema is not specified on read. Using file schema.\");",
      "info" : "ExpressionStatement[3931-3995]:ExpressionStatement[4087-4151]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4010-4022]:ReturnStatement[4166-4178]"
    }, {
      "left" : "if (fileSchema.size() != schemaOnRead.size())",
      "right" : "if (fileSchema.size() != schemaOnRead.size())",
      "info" : "IfStatement[4034-6012]:IfStatement[4190-6168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4080-4288]:Block[4236-4444]"
    }, {
      "left" : "if (isLogInfoEnabled)",
      "right" : "if (isLogInfoEnabled)",
      "info" : "IfStatement[4088-4263]:IfStatement[4244-4419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4110-4263]:Block[4266-4419]"
    }, {
      "left" : "LOG.info(\"Schema on read column count does not match file schema's column count.\" +\n            \" Falling back to using file schema.\");",
      "right" : "LOG.info(\"Schema on read column count does not match file schema's column count.\" +\n            \" Falling back to using file schema.\");",
      "info" : "ExpressionStatement[4120-4255]:ExpressionStatement[4276-4411]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4270-4282]:ReturnStatement[4426-4438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4294-6012]:Block[4450-6168]"
    }, {
      "left" : "List<OrcProto.Type> result = Lists.newArrayList(fileSchema);",
      "right" : "List<OrcProto.Type> result = Lists.newArrayList(fileSchema);",
      "info" : "VariableDeclarationStatement[4302-4362]:VariableDeclarationStatement[4458-4518]"
    }, {
      "left" : "boolean canPromoteType = false;",
      "right" : "boolean canPromoteType = false;",
      "info" : "VariableDeclarationStatement[4541-4572]:VariableDeclarationStatement[4697-4728]"
    }, {
      "left" : "for (int i = 0; i < fileSchema.size(); i++)",
      "right" : "for (int i = 0; i < fileSchema.size(); i++)",
      "info" : "ForStatement[4579-5804]:ForStatement[4735-5960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4623-5804]:Block[4779-5960]"
    }, {
      "left" : "OrcProto.Type fColType = fileSchema.get(i);",
      "right" : "OrcProto.Type fColType = fileSchema.get(i);",
      "info" : "VariableDeclarationStatement[4633-4676]:VariableDeclarationStatement[4789-4832]"
    }, {
      "left" : "OrcProto.Type rColType = schemaOnRead.get(i);",
      "right" : "OrcProto.Type rColType = schemaOnRead.get(i);",
      "info" : "VariableDeclarationStatement[4685-4730]:VariableDeclarationStatement[4841-4886]"
    }, {
      "left" : "if (!fColType.getKind().equals(rColType.getKind()))",
      "right" : "if (!fColType.getKind().equals(rColType.getKind()))",
      "info" : "IfStatement[4739-5796]:IfStatement[4895-5952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4791-5796]:Block[4947-5952]"
    }, {
      "left" : "if (fColType.getKind().equals(OrcProto.Type.Kind.SHORT))",
      "right" : "if (fColType.getKind().equals(OrcProto.Type.Kind.SHORT))",
      "info" : "IfStatement[4804-5786]:IfStatement[4960-5942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4861-5303]:Block[5017-5459]"
    }, {
      "left" : "if (rColType.getKind().equals(OrcProto.Type.Kind.INT) ||\n                rColType.getKind().equals(OrcProto.Type.Kind.LONG))",
      "right" : "if (rColType.getKind().equals(OrcProto.Type.Kind.INT) ||\n                rColType.getKind().equals(OrcProto.Type.Kind.LONG))",
      "info" : "IfStatement[4876-5290]:IfStatement[5032-5446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5001-5231]:Block[5157-5387]"
    }, {
      "left" : "result.set(i, result.get(i).toBuilder().setKind(rColType.getKind()).build());",
      "right" : "result.set(i, result.get(i).toBuilder().setKind(rColType.getKind()).build());",
      "info" : "ExpressionStatement[5103-5180]:ExpressionStatement[5259-5336]"
    }, {
      "left" : "canPromoteType = true;",
      "right" : "canPromoteType = true;",
      "info" : "ExpressionStatement[5195-5217]:ExpressionStatement[5351-5373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5237-5290]:Block[5393-5446]"
    }, {
      "left" : "canPromoteType = false;",
      "right" : "canPromoteType = false;",
      "info" : "ExpressionStatement[5253-5276]:ExpressionStatement[5409-5432]"
    }, {
      "left" : "if (fColType.getKind().equals(OrcProto.Type.Kind.INT))",
      "right" : "if (fColType.getKind().equals(OrcProto.Type.Kind.INT))",
      "info" : "IfStatement[5309-5786]:IfStatement[5465-5942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5364-5731]:Block[5520-5887]"
    }, {
      "left" : "if (rColType.getKind().equals(OrcProto.Type.Kind.LONG))",
      "right" : "if (rColType.getKind().equals(OrcProto.Type.Kind.LONG))",
      "info" : "IfStatement[5379-5718]:IfStatement[5535-5874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5435-5659]:Block[5591-5815]"
    }, {
      "left" : "result.set(i, result.get(i).toBuilder().setKind(rColType.getKind()).build());",
      "right" : "result.set(i, result.get(i).toBuilder().setKind(rColType.getKind()).build());",
      "info" : "ExpressionStatement[5531-5608]:ExpressionStatement[5687-5764]"
    }, {
      "left" : "canPromoteType = true;",
      "right" : "canPromoteType = true;",
      "info" : "ExpressionStatement[5623-5645]:ExpressionStatement[5779-5801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5665-5718]:Block[5821-5874]"
    }, {
      "left" : "canPromoteType = false;",
      "right" : "canPromoteType = false;",
      "info" : "ExpressionStatement[5681-5704]:ExpressionStatement[5837-5860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5737-5786]:Block[5893-5942]"
    }, {
      "left" : "canPromoteType = false;",
      "right" : "canPromoteType = false;",
      "info" : "ExpressionStatement[5751-5774]:ExpressionStatement[5907-5930]"
    }, {
      "left" : "if (canPromoteType)",
      "right" : "if (canPromoteType)",
      "info" : "IfStatement[5812-6006]:IfStatement[5968-6162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5832-6006]:Block[5988-6162]"
    }, {
      "left" : "if (isLogInfoEnabled)",
      "right" : "if (isLogInfoEnabled)",
      "info" : "IfStatement[5842-5975]:IfStatement[5998-6131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5864-5975]:Block[6020-6131]"
    }, {
      "left" : "LOG.info(\"Integer type promotion happened in ORC record reader. Using promoted schema.\");",
      "right" : "LOG.info(\"Integer type promotion happened in ORC record reader. Using promoted schema.\");",
      "info" : "ExpressionStatement[5876-5965]:ExpressionStatement[6032-6121]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[5984-5998]:ReturnStatement[6140-6154]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6018-6030]:ReturnStatement[6174-6186]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6038-6045]:Modifier[6194-6201]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6046-6052]:Modifier[6202-6208]"
    }, {
      "left" : "List<OrcProto.Type>",
      "right" : "List<OrcProto.Type>",
      "info" : "ParameterizedType[6053-6072]:ParameterizedType[6209-6228]"
    }, {
      "left" : "getSchemaOnRead",
      "right" : "getSchemaOnRead",
      "info" : "SimpleName[6073-6088]:SimpleName[6229-6244]"
    }, {
      "left" : "int numCols",
      "right" : "int numCols",
      "info" : "SingleVariableDeclaration[6089-6100]:SingleVariableDeclaration[6245-6256]"
    }, {
      "left" : "Configuration conf",
      "right" : "Configuration conf",
      "info" : "SingleVariableDeclaration[6102-6120]:SingleVariableDeclaration[6258-6276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6122-7077]:Block[6278-7233]"
    }, {
      "left" : "String columnTypeProperty = conf.get(serdeConstants.LIST_COLUMN_TYPES);",
      "right" : "String columnTypeProperty = conf.get(serdeConstants.LIST_COLUMN_TYPES);",
      "info" : "VariableDeclarationStatement[6128-6199]:VariableDeclarationStatement[6284-6355]"
    }, {
      "left" : "final String columnNameProperty = conf.get(serdeConstants.LIST_COLUMNS);",
      "right" : "final String columnNameProperty = conf.get(serdeConstants.LIST_COLUMNS);",
      "info" : "VariableDeclarationStatement[6204-6276]:VariableDeclarationStatement[6360-6432]"
    }, {
      "left" : "if (columnTypeProperty == null || columnNameProperty == null)",
      "right" : "if (columnTypeProperty == null || columnNameProperty == null)",
      "info" : "IfStatement[6281-6369]:IfStatement[6437-6525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6343-6369]:Block[6499-6525]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6351-6363]:ReturnStatement[6507-6519]"
    }, {
      "left" : "ArrayList<String> columnNames = Lists.newArrayList(columnNameProperty.split(\",\"));",
      "right" : "ArrayList<String> columnNames = Lists.newArrayList(columnNameProperty.split(\",\"));",
      "info" : "VariableDeclarationStatement[6375-6457]:VariableDeclarationStatement[6531-6613]"
    }, {
      "left" : "ArrayList<TypeInfo> fieldTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeProperty);",
      "right" : "ArrayList<TypeInfo> fieldTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeProperty);",
      "info" : "VariableDeclarationStatement[6462-6556]:VariableDeclarationStatement[6618-6712]"
    }, {
      "left" : "StructTypeInfo structTypeInfo = new StructTypeInfo();",
      "right" : "StructTypeInfo structTypeInfo = new StructTypeInfo();",
      "info" : "VariableDeclarationStatement[6561-6614]:VariableDeclarationStatement[6717-6770]"
    }, {
      "left" : "structTypeInfo.setAllStructFieldNames(Lists.newArrayList(columnNames.subList(0, numCols)));",
      "right" : "structTypeInfo.setAllStructFieldNames(Lists.newArrayList(columnNames.subList(0, numCols)));",
      "info" : "ExpressionStatement[6756-6847]:ExpressionStatement[6912-7003]"
    }, {
      "left" : "structTypeInfo.setAllStructFieldTypeInfos(Lists.newArrayList(fieldTypes.subList(0, numCols)));",
      "right" : "structTypeInfo.setAllStructFieldTypeInfos(Lists.newArrayList(fieldTypes.subList(0, numCols)));",
      "info" : "ExpressionStatement[6852-6946]:ExpressionStatement[7008-7102]"
    }, {
      "left" : "ObjectInspector oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(structTypeInfo);",
      "right" : "ObjectInspector oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(structTypeInfo);",
      "info" : "VariableDeclarationStatement[6951-7045]:VariableDeclarationStatement[7107-7201]"
    }, {
      "left" : "return getOrcTypes(oi);",
      "right" : "return getOrcTypes(oi);",
      "info" : "ReturnStatement[7050-7073]:ReturnStatement[7206-7229]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7081-7088]:Modifier[7237-7244]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7089-7095]:Modifier[7245-7251]"
    }, {
      "left" : "List<OrcProto.Type>",
      "right" : "List<OrcProto.Type>",
      "info" : "ParameterizedType[7096-7115]:ParameterizedType[7252-7271]"
    }, {
      "left" : "getOrcTypes",
      "right" : "getOrcTypes",
      "info" : "SimpleName[7116-7127]:SimpleName[7272-7283]"
    }, {
      "left" : "ObjectInspector inspector",
      "right" : "ObjectInspector inspector",
      "info" : "SingleVariableDeclaration[7128-7153]:SingleVariableDeclaration[7284-7309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7155-7274]:Block[7311-7430]"
    }, {
      "left" : "List<OrcProto.Type> result = Lists.newArrayList();",
      "right" : "List<OrcProto.Type> result = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[7161-7211]:VariableDeclarationStatement[7317-7367]"
    }, {
      "left" : "getOrcTypesImpl(result, inspector);",
      "right" : "getOrcTypesImpl(result, inspector);",
      "info" : "ExpressionStatement[7216-7251]:ExpressionStatement[7372-7407]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[7256-7270]:ReturnStatement[7412-7426]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7278-7285]:Modifier[7434-7441]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7286-7292]:Modifier[7442-7448]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7293-7297]:PrimitiveType[7449-7453]"
    }, {
      "left" : "getOrcTypesImpl",
      "right" : "getOrcTypesImpl",
      "info" : "SimpleName[7298-7313]:SimpleName[7454-7469]"
    }, {
      "left" : "List<OrcProto.Type> result",
      "right" : "List<OrcProto.Type> result",
      "info" : "SingleVariableDeclaration[7314-7340]:SingleVariableDeclaration[7470-7496]"
    }, {
      "left" : "ObjectInspector inspector",
      "right" : "ObjectInspector inspector",
      "info" : "SingleVariableDeclaration[7342-7367]:SingleVariableDeclaration[7498-7523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7369-11165]:Block[7525-11321]"
    }, {
      "left" : "OrcProto.Type.Builder type = OrcProto.Type.newBuilder();",
      "right" : "OrcProto.Type.Builder type = OrcProto.Type.newBuilder();",
      "info" : "VariableDeclarationStatement[7375-7431]:VariableDeclarationStatement[7531-7587]"
    }, {
      "left" : "switch (inspector.getCategory()) {\n      case PRIMITIVE:\n        switch (((PrimitiveObjectInspector) inspector).getPrimitiveCategory()) {\n          case BOOLEAN:\n            type.setKind(OrcProto.Type.Kind.BOOLEAN);\n            break;\n          case BYTE:\n            type.setKind(OrcProto.Type.Kind.BYTE);\n            break;\n          case SHORT:\n            type.setKind(OrcProto.Type.Kind.SHORT);\n            break;\n          case INT:\n            type.setKind(OrcProto.Type.Kind.INT);\n            break;\n          case LONG:\n            type.setKind(OrcProto.Type.Kind.LONG);\n            break;\n          case FLOAT:\n            type.setKind(OrcProto.Type.Kind.FLOAT);\n            break;\n          case DOUBLE:\n            type.setKind(OrcProto.Type.Kind.DOUBLE);\n            break;\n          case STRING:\n            type.setKind(OrcProto.Type.Kind.STRING);\n            break;\n          case CHAR:\n            // The char length needs to be written to file and should be available\n            // from the object inspector\n            CharTypeInfo charTypeInfo = (CharTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();\n            type.setKind(OrcProto.Type.Kind.CHAR);\n            type.setMaximumLength(charTypeInfo.getLength());\n            break;\n          case VARCHAR:\n            // The varchar length needs to be written to file and should be available\n            // from the object inspector\n            VarcharTypeInfo typeInfo = (VarcharTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();\n            type.setKind(OrcProto.Type.Kind.VARCHAR);\n            type.setMaximumLength(typeInfo.getLength());\n            break;\n          case BINARY:\n            type.setKind(OrcProto.Type.Kind.BINARY);\n            break;\n          case TIMESTAMP:\n            type.setKind(OrcProto.Type.Kind.TIMESTAMP);\n            break;\n          case DATE:\n            type.setKind(OrcProto.Type.Kind.DATE);\n            break;\n          case DECIMAL:\n            DecimalTypeInfo decTypeInfo = (DecimalTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();\n            type.setKind(OrcProto.Type.Kind.DECIMAL);\n            type.setPrecision(decTypeInfo.precision());\n            type.setScale(decTypeInfo.scale());\n            break;\n          default:\n            throw new IllegalArgumentException(\"Unknown primitive category: \" +\n                ((PrimitiveObjectInspector) inspector).getPrimitiveCategory());\n        }\n        result.add(type.build());\n        break;\n      case LIST:\n        type.setKind(OrcProto.Type.Kind.LIST);\n        result.add(type.build());\n        getOrcTypesImpl(result, ((ListObjectInspector) inspector).getListElementObjectInspector());\n        break;\n      case MAP:\n        type.setKind(OrcProto.Type.Kind.MAP);\n        result.add(type.build());\n        getOrcTypesImpl(result, ((MapObjectInspector) inspector).getMapKeyObjectInspector());\n        getOrcTypesImpl(result, ((MapObjectInspector) inspector).getMapValueObjectInspector());\n        break;\n      case STRUCT:\n        type.setKind(OrcProto.Type.Kind.STRUCT);\n        result.add(type.build());\n        for (StructField field : ((StructObjectInspector) inspector).getAllStructFieldRefs()) {\n          getOrcTypesImpl(result, field.getFieldObjectInspector());\n        }\n        break;\n      case UNION:\n        type.setKind(OrcProto.Type.Kind.UNION);\n        result.add(type.build());\n        for (ObjectInspector oi : ((UnionObjectInspector) inspector).getObjectInspectors()) {\n          getOrcTypesImpl(result, oi);\n        }\n        break;\n      default:\n        throw new IllegalArgumentException(\"Unknown category: \" + inspector.getCategory());\n    }",
      "right" : "switch (inspector.getCategory()) {\n      case PRIMITIVE:\n        switch (((PrimitiveObjectInspector) inspector).getPrimitiveCategory()) {\n          case BOOLEAN:\n            type.setKind(OrcProto.Type.Kind.BOOLEAN);\n            break;\n          case BYTE:\n            type.setKind(OrcProto.Type.Kind.BYTE);\n            break;\n          case SHORT:\n            type.setKind(OrcProto.Type.Kind.SHORT);\n            break;\n          case INT:\n            type.setKind(OrcProto.Type.Kind.INT);\n            break;\n          case LONG:\n            type.setKind(OrcProto.Type.Kind.LONG);\n            break;\n          case FLOAT:\n            type.setKind(OrcProto.Type.Kind.FLOAT);\n            break;\n          case DOUBLE:\n            type.setKind(OrcProto.Type.Kind.DOUBLE);\n            break;\n          case STRING:\n            type.setKind(OrcProto.Type.Kind.STRING);\n            break;\n          case CHAR:\n            // The char length needs to be written to file and should be available\n            // from the object inspector\n            CharTypeInfo charTypeInfo = (CharTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();\n            type.setKind(OrcProto.Type.Kind.CHAR);\n            type.setMaximumLength(charTypeInfo.getLength());\n            break;\n          case VARCHAR:\n            // The varchar length needs to be written to file and should be available\n            // from the object inspector\n            VarcharTypeInfo typeInfo = (VarcharTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();\n            type.setKind(OrcProto.Type.Kind.VARCHAR);\n            type.setMaximumLength(typeInfo.getLength());\n            break;\n          case BINARY:\n            type.setKind(OrcProto.Type.Kind.BINARY);\n            break;\n          case TIMESTAMP:\n            type.setKind(OrcProto.Type.Kind.TIMESTAMP);\n            break;\n          case DATE:\n            type.setKind(OrcProto.Type.Kind.DATE);\n            break;\n          case DECIMAL:\n            DecimalTypeInfo decTypeInfo = (DecimalTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();\n            type.setKind(OrcProto.Type.Kind.DECIMAL);\n            type.setPrecision(decTypeInfo.precision());\n            type.setScale(decTypeInfo.scale());\n            break;\n          default:\n            throw new IllegalArgumentException(\"Unknown primitive category: \" +\n                ((PrimitiveObjectInspector) inspector).getPrimitiveCategory());\n        }\n        result.add(type.build());\n        break;\n      case LIST:\n        type.setKind(OrcProto.Type.Kind.LIST);\n        result.add(type.build());\n        getOrcTypesImpl(result, ((ListObjectInspector) inspector).getListElementObjectInspector());\n        break;\n      case MAP:\n        type.setKind(OrcProto.Type.Kind.MAP);\n        result.add(type.build());\n        getOrcTypesImpl(result, ((MapObjectInspector) inspector).getMapKeyObjectInspector());\n        getOrcTypesImpl(result, ((MapObjectInspector) inspector).getMapValueObjectInspector());\n        break;\n      case STRUCT:\n        type.setKind(OrcProto.Type.Kind.STRUCT);\n        result.add(type.build());\n        for (StructField field : ((StructObjectInspector) inspector).getAllStructFieldRefs()) {\n          getOrcTypesImpl(result, field.getFieldObjectInspector());\n        }\n        break;\n      case UNION:\n        type.setKind(OrcProto.Type.Kind.UNION);\n        result.add(type.build());\n        for (ObjectInspector oi : ((UnionObjectInspector) inspector).getObjectInspectors()) {\n          getOrcTypesImpl(result, oi);\n        }\n        break;\n      default:\n        throw new IllegalArgumentException(\"Unknown category: \" + inspector.getCategory());\n    }",
      "info" : "SwitchStatement[7436-11161]:SwitchStatement[7592-11317]"
    }, {
      "left" : "case PRIMITIVE:",
      "right" : "case PRIMITIVE:",
      "info" : "SwitchCase[7477-7492]:SwitchCase[7633-7648]"
    }, {
      "left" : "switch (((PrimitiveObjectInspector) inspector).getPrimitiveCategory()) {\n          case BOOLEAN:\n            type.setKind(OrcProto.Type.Kind.BOOLEAN);\n            break;\n          case BYTE:\n            type.setKind(OrcProto.Type.Kind.BYTE);\n            break;\n          case SHORT:\n            type.setKind(OrcProto.Type.Kind.SHORT);\n            break;\n          case INT:\n            type.setKind(OrcProto.Type.Kind.INT);\n            break;\n          case LONG:\n            type.setKind(OrcProto.Type.Kind.LONG);\n            break;\n          case FLOAT:\n            type.setKind(OrcProto.Type.Kind.FLOAT);\n            break;\n          case DOUBLE:\n            type.setKind(OrcProto.Type.Kind.DOUBLE);\n            break;\n          case STRING:\n            type.setKind(OrcProto.Type.Kind.STRING);\n            break;\n          case CHAR:\n            // The char length needs to be written to file and should be available\n            // from the object inspector\n            CharTypeInfo charTypeInfo = (CharTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();\n            type.setKind(OrcProto.Type.Kind.CHAR);\n            type.setMaximumLength(charTypeInfo.getLength());\n            break;\n          case VARCHAR:\n            // The varchar length needs to be written to file and should be available\n            // from the object inspector\n            VarcharTypeInfo typeInfo = (VarcharTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();\n            type.setKind(OrcProto.Type.Kind.VARCHAR);\n            type.setMaximumLength(typeInfo.getLength());\n            break;\n          case BINARY:\n            type.setKind(OrcProto.Type.Kind.BINARY);\n            break;\n          case TIMESTAMP:\n            type.setKind(OrcProto.Type.Kind.TIMESTAMP);\n            break;\n          case DATE:\n            type.setKind(OrcProto.Type.Kind.DATE);\n            break;\n          case DECIMAL:\n            DecimalTypeInfo decTypeInfo = (DecimalTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();\n            type.setKind(OrcProto.Type.Kind.DECIMAL);\n            type.setPrecision(decTypeInfo.precision());\n            type.setScale(decTypeInfo.scale());\n            break;\n          default:\n            throw new IllegalArgumentException(\"Unknown primitive category: \" +\n                ((PrimitiveObjectInspector) inspector).getPrimitiveCategory());\n        }",
      "right" : "switch (((PrimitiveObjectInspector) inspector).getPrimitiveCategory()) {\n          case BOOLEAN:\n            type.setKind(OrcProto.Type.Kind.BOOLEAN);\n            break;\n          case BYTE:\n            type.setKind(OrcProto.Type.Kind.BYTE);\n            break;\n          case SHORT:\n            type.setKind(OrcProto.Type.Kind.SHORT);\n            break;\n          case INT:\n            type.setKind(OrcProto.Type.Kind.INT);\n            break;\n          case LONG:\n            type.setKind(OrcProto.Type.Kind.LONG);\n            break;\n          case FLOAT:\n            type.setKind(OrcProto.Type.Kind.FLOAT);\n            break;\n          case DOUBLE:\n            type.setKind(OrcProto.Type.Kind.DOUBLE);\n            break;\n          case STRING:\n            type.setKind(OrcProto.Type.Kind.STRING);\n            break;\n          case CHAR:\n            // The char length needs to be written to file and should be available\n            // from the object inspector\n            CharTypeInfo charTypeInfo = (CharTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();\n            type.setKind(OrcProto.Type.Kind.CHAR);\n            type.setMaximumLength(charTypeInfo.getLength());\n            break;\n          case VARCHAR:\n            // The varchar length needs to be written to file and should be available\n            // from the object inspector\n            VarcharTypeInfo typeInfo = (VarcharTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();\n            type.setKind(OrcProto.Type.Kind.VARCHAR);\n            type.setMaximumLength(typeInfo.getLength());\n            break;\n          case BINARY:\n            type.setKind(OrcProto.Type.Kind.BINARY);\n            break;\n          case TIMESTAMP:\n            type.setKind(OrcProto.Type.Kind.TIMESTAMP);\n            break;\n          case DATE:\n            type.setKind(OrcProto.Type.Kind.DATE);\n            break;\n          case DECIMAL:\n            DecimalTypeInfo decTypeInfo = (DecimalTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();\n            type.setKind(OrcProto.Type.Kind.DECIMAL);\n            type.setPrecision(decTypeInfo.precision());\n            type.setScale(decTypeInfo.scale());\n            break;\n          default:\n            throw new IllegalArgumentException(\"Unknown primitive category: \" +\n                ((PrimitiveObjectInspector) inspector).getPrimitiveCategory());\n        }",
      "info" : "SwitchStatement[7501-9936]:SwitchStatement[7657-10092]"
    }, {
      "left" : "case BOOLEAN:",
      "right" : "case BOOLEAN:",
      "info" : "SwitchCase[7584-7597]:SwitchCase[7740-7753]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.BOOLEAN);",
      "right" : "type.setKind(OrcProto.Type.Kind.BOOLEAN);",
      "info" : "ExpressionStatement[7610-7651]:ExpressionStatement[7766-7807]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7664-7670]:BreakStatement[7820-7826]"
    }, {
      "left" : "case BYTE:",
      "right" : "case BYTE:",
      "info" : "SwitchCase[7681-7691]:SwitchCase[7837-7847]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.BYTE);",
      "right" : "type.setKind(OrcProto.Type.Kind.BYTE);",
      "info" : "ExpressionStatement[7704-7742]:ExpressionStatement[7860-7898]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7755-7761]:BreakStatement[7911-7917]"
    }, {
      "left" : "case SHORT:",
      "right" : "case SHORT:",
      "info" : "SwitchCase[7772-7783]:SwitchCase[7928-7939]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.SHORT);",
      "right" : "type.setKind(OrcProto.Type.Kind.SHORT);",
      "info" : "ExpressionStatement[7796-7835]:ExpressionStatement[7952-7991]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7848-7854]:BreakStatement[8004-8010]"
    }, {
      "left" : "case INT:",
      "right" : "case INT:",
      "info" : "SwitchCase[7865-7874]:SwitchCase[8021-8030]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.INT);",
      "right" : "type.setKind(OrcProto.Type.Kind.INT);",
      "info" : "ExpressionStatement[7887-7924]:ExpressionStatement[8043-8080]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7937-7943]:BreakStatement[8093-8099]"
    }, {
      "left" : "case LONG:",
      "right" : "case LONG:",
      "info" : "SwitchCase[7954-7964]:SwitchCase[8110-8120]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.LONG);",
      "right" : "type.setKind(OrcProto.Type.Kind.LONG);",
      "info" : "ExpressionStatement[7977-8015]:ExpressionStatement[8133-8171]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8028-8034]:BreakStatement[8184-8190]"
    }, {
      "left" : "case FLOAT:",
      "right" : "case FLOAT:",
      "info" : "SwitchCase[8045-8056]:SwitchCase[8201-8212]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.FLOAT);",
      "right" : "type.setKind(OrcProto.Type.Kind.FLOAT);",
      "info" : "ExpressionStatement[8069-8108]:ExpressionStatement[8225-8264]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8121-8127]:BreakStatement[8277-8283]"
    }, {
      "left" : "case DOUBLE:",
      "right" : "case DOUBLE:",
      "info" : "SwitchCase[8138-8150]:SwitchCase[8294-8306]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.DOUBLE);",
      "right" : "type.setKind(OrcProto.Type.Kind.DOUBLE);",
      "info" : "ExpressionStatement[8163-8203]:ExpressionStatement[8319-8359]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8216-8222]:BreakStatement[8372-8378]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[8233-8245]:SwitchCase[8389-8401]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.STRING);",
      "right" : "type.setKind(OrcProto.Type.Kind.STRING);",
      "info" : "ExpressionStatement[8258-8298]:ExpressionStatement[8414-8454]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8311-8317]:BreakStatement[8467-8473]"
    }, {
      "left" : "case CHAR:",
      "right" : "case CHAR:",
      "info" : "SwitchCase[8328-8338]:SwitchCase[8484-8494]"
    }, {
      "left" : "CharTypeInfo charTypeInfo = (CharTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();",
      "right" : "CharTypeInfo charTypeInfo = (CharTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();",
      "info" : "VariableDeclarationStatement[8475-8588]:VariableDeclarationStatement[8631-8744]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.CHAR);",
      "right" : "type.setKind(OrcProto.Type.Kind.CHAR);",
      "info" : "ExpressionStatement[8601-8639]:ExpressionStatement[8757-8795]"
    }, {
      "left" : "type.setMaximumLength(charTypeInfo.getLength());",
      "right" : "type.setMaximumLength(charTypeInfo.getLength());",
      "info" : "ExpressionStatement[8652-8700]:ExpressionStatement[8808-8856]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8713-8719]:BreakStatement[8869-8875]"
    }, {
      "left" : "case VARCHAR:",
      "right" : "case VARCHAR:",
      "info" : "SwitchCase[8730-8743]:SwitchCase[8886-8899]"
    }, {
      "left" : "VarcharTypeInfo typeInfo = (VarcharTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();",
      "right" : "VarcharTypeInfo typeInfo = (VarcharTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();",
      "info" : "VariableDeclarationStatement[8883-8998]:VariableDeclarationStatement[9039-9154]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.VARCHAR);",
      "right" : "type.setKind(OrcProto.Type.Kind.VARCHAR);",
      "info" : "ExpressionStatement[9011-9052]:ExpressionStatement[9167-9208]"
    }, {
      "left" : "type.setMaximumLength(typeInfo.getLength());",
      "right" : "type.setMaximumLength(typeInfo.getLength());",
      "info" : "ExpressionStatement[9065-9109]:ExpressionStatement[9221-9265]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9122-9128]:BreakStatement[9278-9284]"
    }, {
      "left" : "case BINARY:",
      "right" : "case BINARY:",
      "info" : "SwitchCase[9139-9151]:SwitchCase[9295-9307]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.BINARY);",
      "right" : "type.setKind(OrcProto.Type.Kind.BINARY);",
      "info" : "ExpressionStatement[9164-9204]:ExpressionStatement[9320-9360]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9217-9223]:BreakStatement[9373-9379]"
    }, {
      "left" : "case TIMESTAMP:",
      "right" : "case TIMESTAMP:",
      "info" : "SwitchCase[9234-9249]:SwitchCase[9390-9405]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.TIMESTAMP);",
      "right" : "type.setKind(OrcProto.Type.Kind.TIMESTAMP);",
      "info" : "ExpressionStatement[9262-9305]:ExpressionStatement[9418-9461]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9318-9324]:BreakStatement[9474-9480]"
    }, {
      "left" : "case DATE:",
      "right" : "case DATE:",
      "info" : "SwitchCase[9335-9345]:SwitchCase[9491-9501]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.DATE);",
      "right" : "type.setKind(OrcProto.Type.Kind.DATE);",
      "info" : "ExpressionStatement[9358-9396]:ExpressionStatement[9514-9552]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9409-9415]:BreakStatement[9565-9571]"
    }, {
      "left" : "case DECIMAL:",
      "right" : "case DECIMAL:",
      "info" : "SwitchCase[9426-9439]:SwitchCase[9582-9595]"
    }, {
      "left" : "DecimalTypeInfo decTypeInfo = (DecimalTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();",
      "right" : "DecimalTypeInfo decTypeInfo = (DecimalTypeInfo) ((PrimitiveObjectInspector) inspector)\n                .getTypeInfo();",
      "info" : "VariableDeclarationStatement[9452-9570]:VariableDeclarationStatement[9608-9726]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.DECIMAL);",
      "right" : "type.setKind(OrcProto.Type.Kind.DECIMAL);",
      "info" : "ExpressionStatement[9583-9624]:ExpressionStatement[9739-9780]"
    }, {
      "left" : "type.setPrecision(decTypeInfo.precision());",
      "right" : "type.setPrecision(decTypeInfo.precision());",
      "info" : "ExpressionStatement[9637-9680]:ExpressionStatement[9793-9836]"
    }, {
      "left" : "type.setScale(decTypeInfo.scale());",
      "right" : "type.setScale(decTypeInfo.scale());",
      "info" : "ExpressionStatement[9693-9728]:ExpressionStatement[9849-9884]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9741-9747]:BreakStatement[9897-9903]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9758-9766]:SwitchCase[9914-9922]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unknown primitive category: \" +\n                ((PrimitiveObjectInspector) inspector).getPrimitiveCategory());",
      "right" : "throw new IllegalArgumentException(\"Unknown primitive category: \" +\n                ((PrimitiveObjectInspector) inspector).getPrimitiveCategory());",
      "info" : "ThrowStatement[9779-9926]:ThrowStatement[9935-10082]"
    }, {
      "left" : "result.add(type.build());",
      "right" : "result.add(type.build());",
      "info" : "ExpressionStatement[9945-9970]:ExpressionStatement[10101-10126]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9979-9985]:BreakStatement[10135-10141]"
    }, {
      "left" : "case LIST:",
      "right" : "case LIST:",
      "info" : "SwitchCase[9992-10002]:SwitchCase[10148-10158]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.LIST);",
      "right" : "type.setKind(OrcProto.Type.Kind.LIST);",
      "info" : "ExpressionStatement[10011-10049]:ExpressionStatement[10167-10205]"
    }, {
      "left" : "result.add(type.build());",
      "right" : "result.add(type.build());",
      "info" : "ExpressionStatement[10058-10083]:ExpressionStatement[10214-10239]"
    }, {
      "left" : "getOrcTypesImpl(result, ((ListObjectInspector) inspector).getListElementObjectInspector());",
      "right" : "getOrcTypesImpl(result, ((ListObjectInspector) inspector).getListElementObjectInspector());",
      "info" : "ExpressionStatement[10092-10183]:ExpressionStatement[10248-10339]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10192-10198]:BreakStatement[10348-10354]"
    }, {
      "left" : "case MAP:",
      "right" : "case MAP:",
      "info" : "SwitchCase[10205-10214]:SwitchCase[10361-10370]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.MAP);",
      "right" : "type.setKind(OrcProto.Type.Kind.MAP);",
      "info" : "ExpressionStatement[10223-10260]:ExpressionStatement[10379-10416]"
    }, {
      "left" : "result.add(type.build());",
      "right" : "result.add(type.build());",
      "info" : "ExpressionStatement[10269-10294]:ExpressionStatement[10425-10450]"
    }, {
      "left" : "getOrcTypesImpl(result, ((MapObjectInspector) inspector).getMapKeyObjectInspector());",
      "right" : "getOrcTypesImpl(result, ((MapObjectInspector) inspector).getMapKeyObjectInspector());",
      "info" : "ExpressionStatement[10303-10388]:ExpressionStatement[10459-10544]"
    }, {
      "left" : "getOrcTypesImpl(result, ((MapObjectInspector) inspector).getMapValueObjectInspector());",
      "right" : "getOrcTypesImpl(result, ((MapObjectInspector) inspector).getMapValueObjectInspector());",
      "info" : "ExpressionStatement[10397-10484]:ExpressionStatement[10553-10640]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10493-10499]:BreakStatement[10649-10655]"
    }, {
      "left" : "case STRUCT:",
      "right" : "case STRUCT:",
      "info" : "SwitchCase[10506-10518]:SwitchCase[10662-10674]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.STRUCT);",
      "right" : "type.setKind(OrcProto.Type.Kind.STRUCT);",
      "info" : "ExpressionStatement[10527-10567]:ExpressionStatement[10683-10723]"
    }, {
      "left" : "result.add(type.build());",
      "right" : "result.add(type.build());",
      "info" : "ExpressionStatement[10576-10601]:ExpressionStatement[10732-10757]"
    }, {
      "left" : "for (StructField field : ((StructObjectInspector) inspector).getAllStructFieldRefs())",
      "right" : "for (StructField field : ((StructObjectInspector) inspector).getAllStructFieldRefs())",
      "info" : "EnhancedForStatement[10610-10775]:EnhancedForStatement[10766-10931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10696-10775]:Block[10852-10931]"
    }, {
      "left" : "getOrcTypesImpl(result, field.getFieldObjectInspector());",
      "right" : "getOrcTypesImpl(result, field.getFieldObjectInspector());",
      "info" : "ExpressionStatement[10708-10765]:ExpressionStatement[10864-10921]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10784-10790]:BreakStatement[10940-10946]"
    }, {
      "left" : "case UNION:",
      "right" : "case UNION:",
      "info" : "SwitchCase[10797-10808]:SwitchCase[10953-10964]"
    }, {
      "left" : "type.setKind(OrcProto.Type.Kind.UNION);",
      "right" : "type.setKind(OrcProto.Type.Kind.UNION);",
      "info" : "ExpressionStatement[10817-10856]:ExpressionStatement[10973-11012]"
    }, {
      "left" : "result.add(type.build());",
      "right" : "result.add(type.build());",
      "info" : "ExpressionStatement[10865-10890]:ExpressionStatement[11021-11046]"
    }, {
      "left" : "for (ObjectInspector oi : ((UnionObjectInspector) inspector).getObjectInspectors())",
      "right" : "for (ObjectInspector oi : ((UnionObjectInspector) inspector).getObjectInspectors())",
      "info" : "EnhancedForStatement[10899-11033]:EnhancedForStatement[11055-11189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10983-11033]:Block[11139-11189]"
    }, {
      "left" : "getOrcTypesImpl(result, oi);",
      "right" : "getOrcTypesImpl(result, oi);",
      "info" : "ExpressionStatement[10995-11023]:ExpressionStatement[11151-11179]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11042-11048]:BreakStatement[11198-11204]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11055-11063]:SwitchCase[11211-11219]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unknown category: \" + inspector.getCategory());",
      "right" : "throw new IllegalArgumentException(\"Unknown category: \" + inspector.getCategory());",
      "info" : "ThrowStatement[11072-11155]:ThrowStatement[11228-11311]"
    } ]
  },
  "interFileMappings" : { }
}