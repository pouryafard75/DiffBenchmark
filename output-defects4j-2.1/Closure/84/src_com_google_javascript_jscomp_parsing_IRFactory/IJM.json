{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "IRFactory",
      "right" : "IRFactory",
      "info" : "TypeDeclaration[3934-46096]:TypeDeclaration[3934-46931]"
    }, {
      "left" : "private final String sourceString;",
      "right" : "private final String sourceString;",
      "info" : "FieldDeclaration[4025-4059]:FieldDeclaration[4025-4059]"
    }, {
      "left" : "private final String sourceName;",
      "right" : "private final String sourceName;",
      "info" : "FieldDeclaration[4062-4094]:FieldDeclaration[4062-4094]"
    }, {
      "left" : "private final Config config;",
      "right" : "private final Config config;",
      "info" : "FieldDeclaration[4097-4125]:FieldDeclaration[4097-4125]"
    }, {
      "left" : "private final ErrorReporter errorReporter;",
      "right" : "private final ErrorReporter errorReporter;",
      "info" : "FieldDeclaration[4128-4170]:FieldDeclaration[4128-4170]"
    }, {
      "left" : "private final TransformDispatcher transformDispatcher;",
      "right" : "private final TransformDispatcher transformDispatcher;",
      "info" : "FieldDeclaration[4173-4227]:FieldDeclaration[4173-4227]"
    }, {
      "left" : "private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
      "right" : "private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
      "info" : "FieldDeclaration[4265-4342]:FieldDeclaration[4265-4342]"
    }, {
      "left" : "Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
      "right" : "Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
      "info" : "FieldDeclaration[4471-4521]:FieldDeclaration[4471-4521]"
    }, {
      "left" : "Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
      "right" : "Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
      "info" : "FieldDeclaration[4524-4626]:FieldDeclaration[4524-4626]"
    }, {
      "left" : "JSDocInfo fileOverviewInfo = null;",
      "right" : "JSDocInfo fileOverviewInfo = null;",
      "info" : "FieldDeclaration[4629-4663]:FieldDeclaration[4629-4663]"
    }, {
      "left" : "private Node templateNode;",
      "right" : "private Node templateNode;",
      "info" : "FieldDeclaration[4785-4811]:FieldDeclaration[4785-4811]"
    }, {
      "left" : "private IRFactory(String sourceString,\n                    String sourceName,\n                    Config config,\n                    ErrorReporter errorReporter)",
      "right" : "private IRFactory(String sourceString,\n                    String sourceName,\n                    Config config,\n                    ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[4894-5383]:MethodDeclaration[4894-5383]"
    }, {
      "left" : "private Node createTemplateNode()",
      "right" : "private Node createTemplateNode()",
      "info" : "MethodDeclaration[5619-5833]:MethodDeclaration[5619-5833]"
    }, {
      "left" : "public static Node transformTree(AstRoot node,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter)",
      "right" : "public static Node transformTree(AstRoot node,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[5837-6525]:MethodDeclaration[5837-6525]"
    }, {
      "left" : "private void setFileOverviewJsDoc(Node irNode)",
      "right" : "private void setFileOverviewJsDoc(Node irNode)",
      "info" : "MethodDeclaration[6529-7070]:MethodDeclaration[6529-7070]"
    }, {
      "left" : "private Node transformBlock(AstNode node)",
      "right" : "private Node transformBlock(AstNode node)",
      "info" : "MethodDeclaration[7074-7544]:MethodDeclaration[7074-7544]"
    }, {
      "left" : "private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser)",
      "right" : "private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser)",
      "info" : "MethodDeclaration[7548-7891]:MethodDeclaration[7548-7891]"
    }, {
      "left" : "private void handlePossibleFileOverviewJsDoc(Comment comment)",
      "right" : "private void handlePossibleFileOverviewJsDoc(Comment comment)",
      "info" : "MethodDeclaration[7895-8107]:MethodDeclaration[7895-8107]"
    }, {
      "left" : "private JSDocInfo handleJsDoc(AstNode node)",
      "right" : "private JSDocInfo handleJsDoc(AstNode node)",
      "info" : "MethodDeclaration[8111-8481]:MethodDeclaration[8111-8481]"
    }, {
      "left" : "private Node transform(AstNode node)",
      "right" : "private Node transform(AstNode node)",
      "info" : "MethodDeclaration[8485-9466]:MethodDeclaration[8485-9466]"
    }, {
      "left" : "private JsDocInfoParser createJsDocInfoParser(Comment node)",
      "right" : "private JsDocInfoParser createJsDocInfoParser(Comment node)",
      "info" : "MethodDeclaration[9470-10676]:MethodDeclaration[9470-10676]"
    }, {
      "left" : "private int position2charno(int position)",
      "right" : "private int position2charno(int position)",
      "info" : "MethodDeclaration[10680-10949]:MethodDeclaration[10680-10949]"
    }, {
      "left" : "private Node justTransform(AstNode node)",
      "right" : "private Node justTransform(AstNode node)",
      "info" : "MethodDeclaration[10953-11045]:MethodDeclaration[10953-11045]"
    }, {
      "left" : "TransformDispatcher",
      "right" : "TransformDispatcher",
      "info" : "TypeDeclaration[11049-30110]:TypeDeclaration[11049-30945]"
    }, {
      "left" : "private Node processGeneric(\n        com.google.javascript.jscomp.mozilla.rhino.Node n)",
      "right" : "private Node processGeneric(\n        com.google.javascript.jscomp.mozilla.rhino.Node n)",
      "info" : "MethodDeclaration[11122-11432]:MethodDeclaration[11122-11432]"
    }, {
      "left" : "private Node transformAsString(AstNode n)",
      "right" : "private Node transformAsString(AstNode n)",
      "info" : "MethodDeclaration[11438-12164]:MethodDeclaration[11438-12164]"
    }, {
      "left" : "Node processArrayLiteral(ArrayLiteral literalNode)",
      "right" : "Node processArrayLiteral(ArrayLiteral literalNode)",
      "info" : "MethodDeclaration[12170-13032]:MethodDeclaration[12170-13032]"
    }, {
      "left" : "Node processAssignment(Assignment assignmentNode)",
      "right" : "Node processAssignment(Assignment assignmentNode)",
      "info" : "MethodDeclaration[13038-13190]:MethodDeclaration[13038-13414]"
    }, {
      "left" : "Node processAstRoot(AstRoot rootNode)",
      "right" : "Node processAstRoot(AstRoot rootNode)",
      "info" : "MethodDeclaration[13196-13487]:MethodDeclaration[13420-13711]"
    }, {
      "left" : "private void parseDirectives(Node node)",
      "right" : "private void parseDirectives(Node node)",
      "info" : "MethodDeclaration[13493-14344]:MethodDeclaration[13717-14568]"
    }, {
      "left" : "private boolean isDirective(Node n)",
      "right" : "private boolean isDirective(Node n)",
      "info" : "MethodDeclaration[14350-14660]:MethodDeclaration[14574-14884]"
    }, {
      "left" : "Node processBlock(Block blockNode)",
      "right" : "Node processBlock(Block blockNode)",
      "info" : "MethodDeclaration[14666-14762]:MethodDeclaration[14890-14986]"
    }, {
      "left" : "Node processBreakStatement(BreakStatement statementNode)",
      "right" : "Node processBreakStatement(BreakStatement statementNode)",
      "info" : "MethodDeclaration[14768-15157]:MethodDeclaration[14992-15381]"
    }, {
      "left" : "Node processCatchClause(CatchClause clauseNode)",
      "right" : "Node processCatchClause(CatchClause clauseNode)",
      "info" : "MethodDeclaration[15163-15651]:MethodDeclaration[15387-15875]"
    }, {
      "left" : "Node processConditionalExpression(ConditionalExpression exprNode)",
      "right" : "Node processConditionalExpression(ConditionalExpression exprNode)",
      "info" : "MethodDeclaration[15657-15943]:MethodDeclaration[15881-16167]"
    }, {
      "left" : "Node processContinueStatement(ContinueStatement statementNode)",
      "right" : "Node processContinueStatement(ContinueStatement statementNode)",
      "info" : "MethodDeclaration[15949-16337]:MethodDeclaration[16173-16561]"
    }, {
      "left" : "Node processDoLoop(DoLoop loopNode)",
      "right" : "Node processDoLoop(DoLoop loopNode)",
      "info" : "MethodDeclaration[16343-16535]:MethodDeclaration[16567-16759]"
    }, {
      "left" : "Node processElementGet(ElementGet getNode)",
      "right" : "Node processElementGet(ElementGet getNode)",
      "info" : "MethodDeclaration[16541-16738]:MethodDeclaration[16765-16962]"
    }, {
      "left" : "Node processEmptyExpression(EmptyExpression exprNode)",
      "right" : "Node processEmptyExpression(EmptyExpression exprNode)",
      "info" : "MethodDeclaration[16744-16878]:MethodDeclaration[16968-17102]"
    }, {
      "left" : "Node processExpressionStatement(ExpressionStatement statementNode)",
      "right" : "Node processExpressionStatement(ExpressionStatement statementNode)",
      "info" : "MethodDeclaration[16884-17132]:MethodDeclaration[17108-17356]"
    }, {
      "left" : "Node processForInLoop(ForInLoop loopNode)",
      "right" : "Node processForInLoop(ForInLoop loopNode)",
      "info" : "MethodDeclaration[17138-17387]:MethodDeclaration[17362-17611]"
    }, {
      "left" : "Node processForLoop(ForLoop loopNode)",
      "right" : "Node processForLoop(ForLoop loopNode)",
      "info" : "MethodDeclaration[17393-17723]:MethodDeclaration[17617-17947]"
    }, {
      "left" : "Node processFunctionCall(FunctionCall callNode)",
      "right" : "Node processFunctionCall(FunctionCall callNode)",
      "info" : "MethodDeclaration[17729-18227]:MethodDeclaration[17953-18451]"
    }, {
      "left" : "Node processFunctionNode(FunctionNode functionNode)",
      "right" : "Node processFunctionNode(FunctionNode functionNode)",
      "info" : "MethodDeclaration[18232-20265]:MethodDeclaration[18456-20489]"
    }, {
      "left" : "Node processIfStatement(IfStatement statementNode)",
      "right" : "Node processIfStatement(IfStatement statementNode)",
      "info" : "MethodDeclaration[20271-20670]:MethodDeclaration[20495-20894]"
    }, {
      "left" : "Node processInfixExpression(InfixExpression exprNode)",
      "right" : "Node processInfixExpression(InfixExpression exprNode)",
      "info" : "MethodDeclaration[20676-21392]:MethodDeclaration[20900-21616]"
    }, {
      "left" : "Node processKeywordLiteral(KeywordLiteral literalNode)",
      "right" : "Node processKeywordLiteral(KeywordLiteral literalNode)",
      "info" : "MethodDeclaration[21398-21539]:MethodDeclaration[21622-21763]"
    }, {
      "left" : "Node processLabel(Label labelNode)",
      "right" : "Node processLabel(Label labelNode)",
      "info" : "MethodDeclaration[21545-21668]:MethodDeclaration[21769-21892]"
    }, {
      "left" : "Node processLabeledStatement(LabeledStatement statementNode)",
      "right" : "Node processLabeledStatement(LabeledStatement statementNode)",
      "info" : "MethodDeclaration[21674-22354]:MethodDeclaration[21898-22578]"
    }, {
      "left" : "Node processName(Name nameNode)",
      "right" : "Node processName(Name nameNode)",
      "info" : "MethodDeclaration[22360-22479]:MethodDeclaration[22584-22703]"
    }, {
      "left" : "Node processNewExpression(NewExpression exprNode)",
      "right" : "Node processNewExpression(NewExpression exprNode)",
      "info" : "MethodDeclaration[22485-22600]:MethodDeclaration[22709-22824]"
    }, {
      "left" : "Node processNumberLiteral(NumberLiteral literalNode)",
      "right" : "Node processNumberLiteral(NumberLiteral literalNode)",
      "info" : "MethodDeclaration[22606-22733]:MethodDeclaration[22830-22957]"
    }, {
      "left" : "Node processObjectLiteral(ObjectLiteral literalNode)",
      "right" : "Node processObjectLiteral(ObjectLiteral literalNode)",
      "info" : "MethodDeclaration[22739-23557]:MethodDeclaration[22963-23781]"
    }, {
      "left" : "Node processObjectProperty(ObjectProperty propertyNode)",
      "right" : "Node processObjectProperty(ObjectProperty propertyNode)",
      "info" : "MethodDeclaration[23563-23691]:MethodDeclaration[23787-23915]"
    }, {
      "left" : "Node processParenthesizedExpression(ParenthesizedExpression exprNode)",
      "right" : "Node processParenthesizedExpression(ParenthesizedExpression exprNode)",
      "info" : "MethodDeclaration[23697-23921]:MethodDeclaration[23921-24145]"
    }, {
      "left" : "Node processPropertyGet(PropertyGet getNode)",
      "right" : "Node processPropertyGet(PropertyGet getNode)",
      "info" : "MethodDeclaration[23927-24135]:MethodDeclaration[24151-24359]"
    }, {
      "left" : "Node processRegExpLiteral(RegExpLiteral literalNode)",
      "right" : "Node processRegExpLiteral(RegExpLiteral literalNode)",
      "info" : "MethodDeclaration[24141-24774]:MethodDeclaration[24365-24998]"
    }, {
      "left" : "Node processReturnStatement(ReturnStatement statementNode)",
      "right" : "Node processReturnStatement(ReturnStatement statementNode)",
      "info" : "MethodDeclaration[24780-25052]:MethodDeclaration[25004-25276]"
    }, {
      "left" : "Node processScope(Scope scopeNode)",
      "right" : "Node processScope(Scope scopeNode)",
      "info" : "MethodDeclaration[25058-25154]:MethodDeclaration[25282-25378]"
    }, {
      "left" : "Node processStringLiteral(StringLiteral literalNode)",
      "right" : "Node processStringLiteral(StringLiteral literalNode)",
      "info" : "MethodDeclaration[25160-25304]:MethodDeclaration[25384-25528]"
    }, {
      "left" : "Node processSwitchCase(SwitchCase caseNode)",
      "right" : "Node processSwitchCase(SwitchCase caseNode)",
      "info" : "MethodDeclaration[25310-26033]:MethodDeclaration[25534-26257]"
    }, {
      "left" : "Node processSwitchStatement(SwitchStatement statementNode)",
      "right" : "Node processSwitchStatement(SwitchStatement statementNode)",
      "info" : "MethodDeclaration[26039-26341]:MethodDeclaration[26263-26565]"
    }, {
      "left" : "Node processThrowStatement(ThrowStatement statementNode)",
      "right" : "Node processThrowStatement(ThrowStatement statementNode)",
      "info" : "MethodDeclaration[26347-26512]:MethodDeclaration[26571-26736]"
    }, {
      "left" : "Node processTryStatement(TryStatement statementNode)",
      "right" : "Node processTryStatement(TryStatement statementNode)",
      "info" : "MethodDeclaration[26518-27611]:MethodDeclaration[26742-27835]"
    }, {
      "left" : "Node processUnaryExpression(UnaryExpression exprNode)",
      "right" : "Node processUnaryExpression(UnaryExpression exprNode)",
      "info" : "MethodDeclaration[27617-28137]:MethodDeclaration[27841-28743]"
    }, {
      "left" : "Node processVariableDeclaration(VariableDeclaration declarationNode)",
      "right" : "Node processVariableDeclaration(VariableDeclaration declarationNode)",
      "info" : "MethodDeclaration[28144-28419]:MethodDeclaration[28979-29254]"
    }, {
      "left" : "Node processVariableInitializer(VariableInitializer initializerNode)",
      "right" : "Node processVariableInitializer(VariableInitializer initializerNode)",
      "info" : "MethodDeclaration[28425-28770]:MethodDeclaration[29260-29605]"
    }, {
      "left" : "Node processWhileLoop(WhileLoop loopNode)",
      "right" : "Node processWhileLoop(WhileLoop loopNode)",
      "info" : "MethodDeclaration[28776-28977]:MethodDeclaration[29611-29812]"
    }, {
      "left" : "Node processWithStatement(WithStatement statementNode)",
      "right" : "Node processWithStatement(WithStatement statementNode)",
      "info" : "MethodDeclaration[28983-29212]:MethodDeclaration[29818-30047]"
    }, {
      "left" : "Node processIllegalToken(AstNode node)",
      "right" : "Node processIllegalToken(AstNode node)",
      "info" : "MethodDeclaration[29218-29535]:MethodDeclaration[30053-30370]"
    }, {
      "left" : "void reportDestructuringAssign(AstNode node)",
      "right" : "void reportDestructuringAssign(AstNode node)",
      "info" : "MethodDeclaration[29541-29726]:MethodDeclaration[30376-30561]"
    }, {
      "left" : "void reportGetter(AstNode node)",
      "right" : "void reportGetter(AstNode node)",
      "info" : "MethodDeclaration[29732-29916]:MethodDeclaration[30567-30751]"
    }, {
      "left" : "void reportSetter(AstNode node)",
      "right" : "void reportSetter(AstNode node)",
      "info" : "MethodDeclaration[29922-30106]:MethodDeclaration[30757-30941]"
    }, {
      "left" : "private static int transformTokenType(int token)",
      "right" : "private static int transformTokenType(int token)",
      "info" : "MethodDeclaration[30114-45157]:MethodDeclaration[30949-45992]"
    }, {
      "left" : "private Node newNode(int type)",
      "right" : "private Node newNode(int type)",
      "info" : "MethodDeclaration[45233-45325]:MethodDeclaration[46068-46160]"
    }, {
      "left" : "private Node newNode(int type, Node child1)",
      "right" : "private Node newNode(int type, Node child1)",
      "info" : "MethodDeclaration[45329-45442]:MethodDeclaration[46164-46277]"
    }, {
      "left" : "private Node newNode(int type, Node child1, Node child2)",
      "right" : "private Node newNode(int type, Node child1, Node child2)",
      "info" : "MethodDeclaration[45446-45580]:MethodDeclaration[46281-46415]"
    }, {
      "left" : "private Node newNode(int type, Node child1, Node child2, Node child3)",
      "right" : "private Node newNode(int type, Node child1, Node child2, Node child3)",
      "info" : "MethodDeclaration[45584-45739]:MethodDeclaration[46419-46574]"
    }, {
      "left" : "private Node newStringNode(String value)",
      "right" : "private Node newStringNode(String value)",
      "info" : "MethodDeclaration[45743-45852]:MethodDeclaration[46578-46687]"
    }, {
      "left" : "private Node newStringNode(int type, String value)",
      "right" : "private Node newStringNode(int type, String value)",
      "info" : "MethodDeclaration[45856-45981]:MethodDeclaration[46691-46816]"
    }, {
      "left" : "private Node newNumberNode(Double value)",
      "right" : "private Node newNumberNode(Double value)",
      "info" : "MethodDeclaration[45985-46094]:MethodDeclaration[46820-46929]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5056-5383]:Block[5056-5383]"
    }, {
      "left" : "this.sourceString = sourceString;",
      "right" : "this.sourceString = sourceString;",
      "info" : "ExpressionStatement[5062-5095]:ExpressionStatement[5062-5095]"
    }, {
      "left" : "this.sourceName = sourceName;",
      "right" : "this.sourceName = sourceName;",
      "info" : "ExpressionStatement[5100-5129]:ExpressionStatement[5100-5129]"
    }, {
      "left" : "this.config = config;",
      "right" : "this.config = config;",
      "info" : "ExpressionStatement[5134-5155]:ExpressionStatement[5134-5155]"
    }, {
      "left" : "this.errorReporter = errorReporter;",
      "right" : "this.errorReporter = errorReporter;",
      "info" : "ExpressionStatement[5160-5195]:ExpressionStatement[5160-5195]"
    }, {
      "left" : "this.transformDispatcher = new TransformDispatcher();",
      "right" : "this.transformDispatcher = new TransformDispatcher();",
      "info" : "ExpressionStatement[5200-5253]:ExpressionStatement[5200-5253]"
    }, {
      "left" : "this.templateNode = createTemplateNode();",
      "right" : "this.templateNode = createTemplateNode();",
      "info" : "ExpressionStatement[5338-5379]:ExpressionStatement[5338-5379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5653-5833]:Block[5653-5833]"
    }, {
      "left" : "Node templateNode = new Node(Token.SCRIPT);",
      "right" : "Node templateNode = new Node(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[5701-5744]:VariableDeclarationStatement[5701-5744]"
    }, {
      "left" : "templateNode.putProp(Node.SOURCENAME_PROP, sourceName);",
      "right" : "templateNode.putProp(Node.SOURCENAME_PROP, sourceName);",
      "info" : "ExpressionStatement[5749-5804]:ExpressionStatement[5749-5804]"
    }, {
      "left" : "return templateNode;",
      "right" : "return templateNode;",
      "info" : "ReturnStatement[5809-5829]:ReturnStatement[5809-5829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6054-6525]:Block[6054-6525]"
    }, {
      "left" : "IRFactory irFactory = new IRFactory(sourceString, node.getSourceName(),\n        config, errorReporter);",
      "right" : "IRFactory irFactory = new IRFactory(sourceString, node.getSourceName(),\n        config, errorReporter);",
      "info" : "VariableDeclarationStatement[6060-6163]:VariableDeclarationStatement[6060-6163]"
    }, {
      "left" : "Node irNode = irFactory.transform(node);",
      "right" : "Node irNode = irFactory.transform(node);",
      "info" : "VariableDeclarationStatement[6168-6208]:VariableDeclarationStatement[6168-6208]"
    }, {
      "left" : "if (node.getComments() != null)",
      "right" : "if (node.getComments() != null)",
      "info" : "IfStatement[6214-6456]:IfStatement[6214-6456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6246-6456]:Block[6246-6456]"
    }, {
      "left" : "for (Comment comment : node.getComments())",
      "right" : "for (Comment comment : node.getComments())",
      "info" : "EnhancedForStatement[6254-6450]:EnhancedForStatement[6254-6450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6297-6450]:Block[6297-6450]"
    }, {
      "left" : "if (comment.getCommentType() == JSDOC && !comment.isParsed())",
      "right" : "if (comment.getCommentType() == JSDOC && !comment.isParsed())",
      "info" : "IfStatement[6307-6442]:IfStatement[6307-6442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6369-6442]:Block[6369-6442]"
    }, {
      "left" : "irFactory.handlePossibleFileOverviewJsDoc(comment);",
      "right" : "irFactory.handlePossibleFileOverviewJsDoc(comment);",
      "info" : "ExpressionStatement[6381-6432]:ExpressionStatement[6381-6432]"
    }, {
      "left" : "irFactory.setFileOverviewJsDoc(irNode);",
      "right" : "irFactory.setFileOverviewJsDoc(irNode);",
      "info" : "ExpressionStatement[6462-6501]:ExpressionStatement[6462-6501]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[6507-6521]:ReturnStatement[6507-6521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6576-7070]:Block[6576-7070]"
    }, {
      "left" : "irNode.setJSDocInfo(rootNodeJsDocHolder.getJSDocInfo());",
      "right" : "irNode.setJSDocInfo(rootNodeJsDocHolder.getJSDocInfo());",
      "info" : "ExpressionStatement[6739-6795]:ExpressionStatement[6739-6795]"
    }, {
      "left" : "if (fileOverviewInfo != null)",
      "right" : "if (fileOverviewInfo != null)",
      "info" : "IfStatement[6800-7066]:IfStatement[6800-7066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6830-7066]:Block[6830-7066]"
    }, {
      "left" : "if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null))",
      "right" : "if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null))",
      "info" : "IfStatement[6838-7015]:IfStatement[6838-7015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6933-7015]:Block[6933-7015]"
    }, {
      "left" : "fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());",
      "right" : "fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());",
      "info" : "ExpressionStatement[6943-7007]:ExpressionStatement[6943-7007]"
    }, {
      "left" : "irNode.setJSDocInfo(fileOverviewInfo);",
      "right" : "irNode.setJSDocInfo(fileOverviewInfo);",
      "info" : "ExpressionStatement[7022-7060]:ExpressionStatement[7022-7060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7116-7544]:Block[7116-7544]"
    }, {
      "left" : "Node irNode = transform(node);",
      "right" : "Node irNode = transform(node);",
      "info" : "VariableDeclarationStatement[7122-7152]:VariableDeclarationStatement[7122-7152]"
    }, {
      "left" : "if (irNode.getType() != Token.BLOCK)",
      "right" : "if (irNode.getType() != Token.BLOCK)",
      "info" : "IfStatement[7157-7521]:IfStatement[7157-7521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7194-7521]:Block[7194-7521]"
    }, {
      "left" : "if (irNode.getType() == Token.EMPTY)",
      "right" : "if (irNode.getType() == Token.EMPTY)",
      "info" : "IfStatement[7202-7515]:IfStatement[7202-7515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7239-7323]:Block[7239-7323]"
    }, {
      "left" : "irNode.setType(Token.BLOCK);",
      "right" : "irNode.setType(Token.BLOCK);",
      "info" : "ExpressionStatement[7249-7277]:ExpressionStatement[7249-7277]"
    }, {
      "left" : "irNode.setWasEmptyNode(true);",
      "right" : "irNode.setWasEmptyNode(true);",
      "info" : "ExpressionStatement[7286-7315]:ExpressionStatement[7286-7315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7329-7515]:Block[7329-7515]"
    }, {
      "left" : "Node newBlock = newNode(Token.BLOCK, irNode);",
      "right" : "Node newBlock = newNode(Token.BLOCK, irNode);",
      "info" : "VariableDeclarationStatement[7339-7384]:VariableDeclarationStatement[7339-7384]"
    }, {
      "left" : "newBlock.setLineno(irNode.getLineno());",
      "right" : "newBlock.setLineno(irNode.getLineno());",
      "info" : "ExpressionStatement[7393-7432]:ExpressionStatement[7393-7432]"
    }, {
      "left" : "newBlock.setCharno(irNode.getCharno());",
      "right" : "newBlock.setCharno(irNode.getCharno());",
      "info" : "ExpressionStatement[7441-7480]:ExpressionStatement[7441-7480]"
    }, {
      "left" : "irNode = newBlock;",
      "right" : "irNode = newBlock;",
      "info" : "ExpressionStatement[7489-7507]:ExpressionStatement[7489-7507]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[7526-7540]:ReturnStatement[7526-7540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7708-7891]:Block[7708-7891]"
    }, {
      "left" : "if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo)",
      "right" : "if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo)",
      "info" : "IfStatement[7714-7869]:IfStatement[7714-7869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7778-7869]:Block[7778-7869]"
    }, {
      "left" : "fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();",
      "right" : "fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();",
      "info" : "ExpressionStatement[7786-7844]:ExpressionStatement[7786-7844]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7851-7863]:ReturnStatement[7851-7863]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7874-7887]:ReturnStatement[7874-7887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7957-8107]:Block[7957-8107]"
    }, {
      "left" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);",
      "right" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);",
      "info" : "VariableDeclarationStatement[7963-8024]:VariableDeclarationStatement[7963-8024]"
    }, {
      "left" : "comment.setParsed(true);",
      "right" : "comment.setParsed(true);",
      "info" : "ExpressionStatement[8029-8053]:ExpressionStatement[8029-8053]"
    }, {
      "left" : "handlePossibleFileOverviewJsDoc(jsDocParser);",
      "right" : "handlePossibleFileOverviewJsDoc(jsDocParser);",
      "info" : "ExpressionStatement[8058-8103]:ExpressionStatement[8058-8103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8155-8481]:Block[8155-8481]"
    }, {
      "left" : "Comment comment = node.getJsDocNode();",
      "right" : "Comment comment = node.getJsDocNode();",
      "info" : "VariableDeclarationStatement[8161-8199]:VariableDeclarationStatement[8161-8199]"
    }, {
      "left" : "if (comment != null)",
      "right" : "if (comment != null)",
      "info" : "IfStatement[8204-8460]:IfStatement[8204-8460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8225-8460]:Block[8225-8460]"
    }, {
      "left" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);",
      "right" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);",
      "info" : "VariableDeclarationStatement[8233-8294]:VariableDeclarationStatement[8233-8294]"
    }, {
      "left" : "comment.setParsed(true);",
      "right" : "comment.setParsed(true);",
      "info" : "ExpressionStatement[8301-8325]:ExpressionStatement[8301-8325]"
    }, {
      "left" : "if (!handlePossibleFileOverviewJsDoc(jsDocParser))",
      "right" : "if (!handlePossibleFileOverviewJsDoc(jsDocParser))",
      "info" : "IfStatement[8332-8454]:IfStatement[8332-8454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8383-8454]:Block[8383-8454]"
    }, {
      "left" : "return jsDocParser.retrieveAndResetParsedJSDocInfo();",
      "right" : "return jsDocParser.retrieveAndResetParsedJSDocInfo();",
      "info" : "ReturnStatement[8393-8446]:ReturnStatement[8393-8446]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8465-8477]:ReturnStatement[8465-8477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8522-9466]:Block[8522-9466]"
    }, {
      "left" : "JSDocInfo jsDocInfo = handleJsDoc(node);",
      "right" : "JSDocInfo jsDocInfo = handleJsDoc(node);",
      "info" : "VariableDeclarationStatement[8528-8568]:VariableDeclarationStatement[8528-8568]"
    }, {
      "left" : "Node irNode = justTransform(node);",
      "right" : "Node irNode = justTransform(node);",
      "info" : "VariableDeclarationStatement[8573-8607]:VariableDeclarationStatement[8573-8607]"
    }, {
      "left" : "if (jsDocInfo != null)",
      "right" : "if (jsDocInfo != null)",
      "info" : "IfStatement[8612-8680]:IfStatement[8612-8680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8635-8680]:Block[8635-8680]"
    }, {
      "left" : "irNode.setJSDocInfo(jsDocInfo);",
      "right" : "irNode.setJSDocInfo(jsDocInfo);",
      "info" : "ExpressionStatement[8643-8674]:ExpressionStatement[8643-8674]"
    }, {
      "left" : "if (irNode.getType() == Token.FUNCTION &&\n        irNode.getFirstChild().getLineno() != -1)",
      "right" : "if (irNode.getType() == Token.FUNCTION &&\n        irNode.getFirstChild().getLineno() != -1)",
      "info" : "IfStatement[8760-9443]:IfStatement[8760-9443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8852-8979]:Block[8852-8979]"
    }, {
      "left" : "irNode.setLineno(irNode.getFirstChild().getLineno());",
      "right" : "irNode.setLineno(irNode.getFirstChild().getLineno());",
      "info" : "ExpressionStatement[8860-8913]:ExpressionStatement[8860-8913]"
    }, {
      "left" : "irNode.setCharno(irNode.getFirstChild().getCharno());",
      "right" : "irNode.setCharno(irNode.getFirstChild().getCharno());",
      "info" : "ExpressionStatement[8920-8973]:ExpressionStatement[8920-8973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8985-9443]:Block[8985-9443]"
    }, {
      "left" : "if (irNode.getLineno() == -1)",
      "right" : "if (irNode.getLineno() == -1)",
      "info" : "IfStatement[8993-9437]:IfStatement[8993-9437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9023-9437]:Block[9023-9437]"
    }, {
      "left" : "int lineno = node.getLineno();",
      "right" : "int lineno = node.getLineno();",
      "info" : "VariableDeclarationStatement[9265-9295]:VariableDeclarationStatement[9265-9295]"
    }, {
      "left" : "irNode.setLineno(lineno);",
      "right" : "irNode.setLineno(lineno);",
      "info" : "ExpressionStatement[9304-9329]:ExpressionStatement[9304-9329]"
    }, {
      "left" : "int charno = position2charno(node.getAbsolutePosition());",
      "right" : "int charno = position2charno(node.getAbsolutePosition());",
      "info" : "VariableDeclarationStatement[9338-9395]:VariableDeclarationStatement[9338-9395]"
    }, {
      "left" : "irNode.setCharno(charno);",
      "right" : "irNode.setCharno(charno);",
      "info" : "ExpressionStatement[9404-9429]:ExpressionStatement[9404-9429]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[9448-9462]:ReturnStatement[9448-9462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9947-10676]:Block[9947-10676]"
    }, {
      "left" : "String comment = node.getValue();",
      "right" : "String comment = node.getValue();",
      "info" : "VariableDeclarationStatement[9953-9986]:VariableDeclarationStatement[9953-9986]"
    }, {
      "left" : "int lineno = node.getLineno();",
      "right" : "int lineno = node.getLineno();",
      "info" : "VariableDeclarationStatement[9991-10021]:VariableDeclarationStatement[9991-10021]"
    }, {
      "left" : "int position = node.getAbsolutePosition();",
      "right" : "int position = node.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[10026-10068]:VariableDeclarationStatement[10026-10068]"
    }, {
      "left" : "int numOpeningChars = 3;",
      "right" : "int numOpeningChars = 3;",
      "info" : "VariableDeclarationStatement[10148-10172]:VariableDeclarationStatement[10148-10172]"
    }, {
      "left" : "JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          sourceName,\n          config,\n          errorReporter);",
      "right" : "JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          sourceName,\n          config,\n          errorReporter);",
      "info" : "VariableDeclarationStatement[10177-10498]:VariableDeclarationStatement[10177-10498]"
    }, {
      "left" : "jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);",
      "right" : "jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);",
      "info" : "ExpressionStatement[10503-10563]:ExpressionStatement[10503-10563]"
    }, {
      "left" : "jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);",
      "right" : "jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);",
      "info" : "ExpressionStatement[10568-10623]:ExpressionStatement[10568-10623]"
    }, {
      "left" : "jsdocParser.parse();",
      "right" : "jsdocParser.parse();",
      "info" : "ExpressionStatement[10628-10648]:ExpressionStatement[10628-10648]"
    }, {
      "left" : "return jsdocParser;",
      "right" : "return jsdocParser;",
      "info" : "ReturnStatement[10653-10672]:ReturnStatement[10653-10672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10722-10949]:Block[10722-10949]"
    }, {
      "left" : "int lineIndex = sourceString.lastIndexOf('\\n', position);",
      "right" : "int lineIndex = sourceString.lastIndexOf('\\n', position);",
      "info" : "VariableDeclarationStatement[10728-10785]:VariableDeclarationStatement[10728-10785]"
    }, {
      "left" : "if (lineIndex == -1)",
      "right" : "if (lineIndex == -1)",
      "info" : "IfStatement[10790-10945]:IfStatement[10790-10945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10811-10841]:Block[10811-10841]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[10819-10835]:ReturnStatement[10819-10835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10847-10945]:Block[10847-10945]"
    }, {
      "left" : "return position - lineIndex - 1;",
      "right" : "return position - lineIndex - 1;",
      "info" : "ReturnStatement[10907-10939]:ReturnStatement[10907-10939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10994-11045]:Block[10994-11045]"
    }, {
      "left" : "return transformDispatcher.process(node);",
      "right" : "return transformDispatcher.process(node);",
      "info" : "ReturnStatement[11000-11041]:ReturnStatement[11000-11041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11210-11432]:Block[11210-11432]"
    }, {
      "left" : "Node node = newNode(transformTokenType(n.getType()));",
      "right" : "Node node = newNode(transformTokenType(n.getType()));",
      "info" : "VariableDeclarationStatement[11218-11271]:VariableDeclarationStatement[11218-11271]"
    }, {
      "left" : "for (com.google.javascript.jscomp.mozilla.rhino.Node child : n)",
      "right" : "for (com.google.javascript.jscomp.mozilla.rhino.Node child : n)",
      "info" : "EnhancedForStatement[11278-11407]:EnhancedForStatement[11278-11407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11342-11407]:Block[11342-11407]"
    }, {
      "left" : "node.addChildToBack(transform((AstNode)child));",
      "right" : "node.addChildToBack(transform((AstNode)child));",
      "info" : "ExpressionStatement[11352-11399]:ExpressionStatement[11352-11399]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[11414-11426]:ReturnStatement[11414-11426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11922-12164]:Block[11922-12164]"
    }, {
      "left" : "Node ret = transform(n);",
      "right" : "Node ret = transform(n);",
      "info" : "VariableDeclarationStatement[11930-11954]:VariableDeclarationStatement[11930-11954]"
    }, {
      "left" : "if (ret.getType() == Token.STRING)",
      "right" : "if (ret.getType() == Token.STRING)",
      "info" : "IfStatement[11961-12140]:IfStatement[11961-12140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11996-12057]:Block[11996-12057]"
    }, {
      "left" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "right" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "info" : "ExpressionStatement[12006-12049]:ExpressionStatement[12006-12049]"
    }, {
      "left" : "if (ret.getType() == Token.NAME)",
      "right" : "if (ret.getType() == Token.NAME)",
      "info" : "IfStatement[12063-12140]:IfStatement[12063-12140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12096-12140]:Block[12096-12140]"
    }, {
      "left" : "ret.setType(Token.STRING);",
      "right" : "ret.setType(Token.STRING);",
      "info" : "ExpressionStatement[12106-12132]:ExpressionStatement[12106-12132]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[12147-12158]:ReturnStatement[12147-12158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12235-13032]:Block[12235-13032]"
    }, {
      "left" : "if (literalNode.isDestructuring())",
      "right" : "if (literalNode.isDestructuring())",
      "info" : "IfStatement[12243-12335]:IfStatement[12243-12335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12278-12335]:Block[12278-12335]"
    }, {
      "left" : "reportDestructuringAssign(literalNode);",
      "right" : "reportDestructuringAssign(literalNode);",
      "info" : "ExpressionStatement[12288-12327]:ExpressionStatement[12288-12327]"
    }, {
      "left" : "Node node = newNode(Token.ARRAYLIT);",
      "right" : "Node node = newNode(Token.ARRAYLIT);",
      "info" : "VariableDeclarationStatement[12343-12379]:VariableDeclarationStatement[12343-12379]"
    }, {
      "left" : "int skipCount = 0;",
      "right" : "int skipCount = 0;",
      "info" : "VariableDeclarationStatement[12386-12404]:VariableDeclarationStatement[12386-12404]"
    }, {
      "left" : "for (AstNode child : literalNode.getElements())",
      "right" : "for (AstNode child : literalNode.getElements())",
      "info" : "EnhancedForStatement[12411-12611]:EnhancedForStatement[12411-12611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12459-12611]:Block[12459-12611]"
    }, {
      "left" : "Node c = transform(child);",
      "right" : "Node c = transform(child);",
      "info" : "VariableDeclarationStatement[12469-12495]:VariableDeclarationStatement[12469-12495]"
    }, {
      "left" : "if (c.getType() == Token.EMPTY)",
      "right" : "if (c.getType() == Token.EMPTY)",
      "info" : "IfStatement[12504-12570]:IfStatement[12504-12570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12536-12570]:Block[12536-12570]"
    }, {
      "left" : "skipCount++;",
      "right" : "skipCount++;",
      "info" : "ExpressionStatement[12548-12560]:ExpressionStatement[12548-12560]"
    }, {
      "left" : "node.addChildToBack(c);",
      "right" : "node.addChildToBack(c);",
      "info" : "ExpressionStatement[12579-12602]:ExpressionStatement[12579-12602]"
    }, {
      "left" : "if (skipCount > 0)",
      "right" : "if (skipCount > 0)",
      "info" : "IfStatement[12618-13007]:IfStatement[12618-13007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12637-13007]:Block[12637-13007]"
    }, {
      "left" : "int[] skipIndexes = new int[skipCount];",
      "right" : "int[] skipIndexes = new int[skipCount];",
      "info" : "VariableDeclarationStatement[12647-12686]:VariableDeclarationStatement[12647-12686]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[12695-12705]:VariableDeclarationStatement[12695-12705]"
    }, {
      "left" : "int j = 0;",
      "right" : "int j = 0;",
      "info" : "VariableDeclarationStatement[12714-12724]:VariableDeclarationStatement[12714-12724]"
    }, {
      "left" : "for (Node child : node.children())",
      "right" : "for (Node child : node.children())",
      "info" : "EnhancedForStatement[12733-12940]:EnhancedForStatement[12733-12940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12768-12940]:Block[12768-12940]"
    }, {
      "left" : "if (child.getType() == Token.EMPTY)",
      "right" : "if (child.getType() == Token.EMPTY)",
      "info" : "IfStatement[12780-12915]:IfStatement[12780-12915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12816-12915]:Block[12816-12915]"
    }, {
      "left" : "node.removeChild(child);",
      "right" : "node.removeChild(child);",
      "info" : "ExpressionStatement[12830-12854]:ExpressionStatement[12830-12854]"
    }, {
      "left" : "skipIndexes[j] = i;",
      "right" : "skipIndexes[j] = i;",
      "info" : "ExpressionStatement[12867-12886]:ExpressionStatement[12867-12886]"
    }, {
      "left" : "j++;",
      "right" : "j++;",
      "info" : "ExpressionStatement[12899-12903]:ExpressionStatement[12899-12903]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[12926-12930]:ExpressionStatement[12926-12930]"
    }, {
      "left" : "node.putProp(Node.SKIP_INDEXES_PROP, skipIndexes);",
      "right" : "node.putProp(Node.SKIP_INDEXES_PROP, skipIndexes);",
      "info" : "ExpressionStatement[12949-12999]:ExpressionStatement[12949-12999]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[13014-13026]:ReturnStatement[13014-13026]"
    }, {
      "left" : "Node assign = processInfixExpression(assignmentNode);",
      "right" : "Node assign = processInfixExpression(assignmentNode);",
      "info" : "VariableDeclarationStatement[13110-13163]:VariableDeclarationStatement[13110-13163]"
    }, {
      "left" : "return assign;",
      "right" : "return assign;",
      "info" : "ReturnStatement[13170-13184]:ReturnStatement[13394-13408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13248-13487]:Block[13472-13711]"
    }, {
      "left" : "Node node = newNode(Token.SCRIPT);",
      "right" : "Node node = newNode(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[13256-13290]:VariableDeclarationStatement[13480-13514]"
    }, {
      "left" : "for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode)",
      "right" : "for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode)",
      "info" : "EnhancedForStatement[13297-13433]:EnhancedForStatement[13521-13657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13368-13433]:Block[13592-13657]"
    }, {
      "left" : "node.addChildToBack(transform((AstNode)child));",
      "right" : "node.addChildToBack(transform((AstNode)child));",
      "info" : "ExpressionStatement[13378-13425]:ExpressionStatement[13602-13649]"
    }, {
      "left" : "parseDirectives(node);",
      "right" : "parseDirectives(node);",
      "info" : "ExpressionStatement[13440-13462]:ExpressionStatement[13664-13686]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[13469-13481]:ReturnStatement[13693-13705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13868-14344]:Block[14092-14568]"
    }, {
      "left" : "Set<String> directives = null;",
      "right" : "Set<String> directives = null;",
      "info" : "VariableDeclarationStatement[13940-13970]:VariableDeclarationStatement[14164-14194]"
    }, {
      "left" : "while (isDirective(node.getFirstChild()))",
      "right" : "while (isDirective(node.getFirstChild()))",
      "info" : "WhileStatement[13977-14257]:WhileStatement[14201-14481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14019-14257]:Block[14243-14481]"
    }, {
      "left" : "String directive = node.removeFirstChild().getFirstChild().getString();",
      "right" : "String directive = node.removeFirstChild().getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[14029-14100]:VariableDeclarationStatement[14253-14324]"
    }, {
      "left" : "if (directives == null)",
      "right" : "if (directives == null)",
      "info" : "IfStatement[14109-14249]:IfStatement[14333-14473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14133-14195]:Block[14357-14419]"
    }, {
      "left" : "directives = Sets.newHashSet(directive);",
      "right" : "directives = Sets.newHashSet(directive);",
      "info" : "ExpressionStatement[14145-14185]:ExpressionStatement[14369-14409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14201-14249]:Block[14425-14473]"
    }, {
      "left" : "directives.add(directive);",
      "right" : "directives.add(directive);",
      "info" : "ExpressionStatement[14213-14239]:ExpressionStatement[14437-14463]"
    }, {
      "left" : "if (directives != null)",
      "right" : "if (directives != null)",
      "info" : "IfStatement[14265-14338]:IfStatement[14489-14562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14289-14338]:Block[14513-14562]"
    }, {
      "left" : "node.setDirectives(directives);",
      "right" : "node.setDirectives(directives);",
      "info" : "ExpressionStatement[14299-14330]:ExpressionStatement[14523-14554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14386-14660]:Block[14610-14884]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[14394-14422]:IfStatement[14618-14646]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14409-14422]:ReturnStatement[14633-14646]"
    }, {
      "left" : "int nType = n.getType();",
      "right" : "int nType = n.getType();",
      "info" : "VariableDeclarationStatement[14430-14454]:VariableDeclarationStatement[14654-14678]"
    }, {
      "left" : "return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n          n.getFirstChild().getType() == Token.STRING &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());",
      "right" : "return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n          n.getFirstChild().getType() == Token.STRING &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());",
      "info" : "ReturnStatement[14461-14654]:ReturnStatement[14685-14878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14715-14762]:Block[14939-14986]"
    }, {
      "left" : "return processGeneric(blockNode);",
      "right" : "return processGeneric(blockNode);",
      "info" : "ReturnStatement[14723-14756]:ReturnStatement[14947-14980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14839-15157]:Block[15063-15381]"
    }, {
      "left" : "Node node = newNode(Token.BREAK);",
      "right" : "Node node = newNode(Token.BREAK);",
      "info" : "VariableDeclarationStatement[14847-14880]:VariableDeclarationStatement[15071-15104]"
    }, {
      "left" : "if (statementNode.getBreakLabel() != null)",
      "right" : "if (statementNode.getBreakLabel() != null)",
      "info" : "IfStatement[14887-15132]:IfStatement[15111-15356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14930-15132]:Block[15154-15356]"
    }, {
      "left" : "Node labelName = transform(statementNode.getBreakLabel());",
      "right" : "Node labelName = transform(statementNode.getBreakLabel());",
      "info" : "VariableDeclarationStatement[14940-14998]:VariableDeclarationStatement[15164-15222]"
    }, {
      "left" : "labelName.setType(Token.LABEL_NAME);",
      "right" : "labelName.setType(Token.LABEL_NAME);",
      "info" : "ExpressionStatement[15048-15084]:ExpressionStatement[15272-15308]"
    }, {
      "left" : "node.addChildToBack(labelName);",
      "right" : "node.addChildToBack(labelName);",
      "info" : "ExpressionStatement[15093-15124]:ExpressionStatement[15317-15348]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[15139-15151]:ReturnStatement[15363-15375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15225-15651]:Block[15449-15875]"
    }, {
      "left" : "AstNode catchVar = clauseNode.getVarName();",
      "right" : "AstNode catchVar = clauseNode.getVarName();",
      "info" : "VariableDeclarationStatement[15233-15276]:VariableDeclarationStatement[15457-15500]"
    }, {
      "left" : "Node node = newNode(Token.CATCH, transform(catchVar));",
      "right" : "Node node = newNode(Token.CATCH, transform(catchVar));",
      "info" : "VariableDeclarationStatement[15283-15337]:VariableDeclarationStatement[15507-15561]"
    }, {
      "left" : "if (clauseNode.getCatchCondition() != null)",
      "right" : "if (clauseNode.getCatchCondition() != null)",
      "info" : "IfStatement[15344-15561]:IfStatement[15568-15785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15388-15561]:Block[15612-15785]"
    }, {
      "left" : "errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[15398-15553]:ExpressionStatement[15622-15777]"
    }, {
      "left" : "node.addChildToBack(transformBlock(clauseNode.getBody()));",
      "right" : "node.addChildToBack(transformBlock(clauseNode.getBody()));",
      "info" : "ExpressionStatement[15568-15626]:ExpressionStatement[15792-15850]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[15633-15645]:ReturnStatement[15857-15869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15737-15943]:Block[15961-16167]"
    }, {
      "left" : "return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));",
      "right" : "return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));",
      "info" : "ReturnStatement[15745-15937]:ReturnStatement[15969-16161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16026-16337]:Block[16250-16561]"
    }, {
      "left" : "Node node = newNode(Token.CONTINUE);",
      "right" : "Node node = newNode(Token.CONTINUE);",
      "info" : "VariableDeclarationStatement[16034-16070]:VariableDeclarationStatement[16258-16294]"
    }, {
      "left" : "if (statementNode.getLabel() != null)",
      "right" : "if (statementNode.getLabel() != null)",
      "info" : "IfStatement[16077-16312]:IfStatement[16301-16536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16115-16312]:Block[16339-16536]"
    }, {
      "left" : "Node labelName = transform(statementNode.getLabel());",
      "right" : "Node labelName = transform(statementNode.getLabel());",
      "info" : "VariableDeclarationStatement[16125-16178]:VariableDeclarationStatement[16349-16402]"
    }, {
      "left" : "labelName.setType(Token.LABEL_NAME);",
      "right" : "labelName.setType(Token.LABEL_NAME);",
      "info" : "ExpressionStatement[16228-16264]:ExpressionStatement[16452-16488]"
    }, {
      "left" : "node.addChildToBack(labelName);",
      "right" : "node.addChildToBack(labelName);",
      "info" : "ExpressionStatement[16273-16304]:ExpressionStatement[16497-16528]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[16319-16331]:ReturnStatement[16543-16555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16393-16535]:Block[16617-16759]"
    }, {
      "left" : "return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));",
      "right" : "return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));",
      "info" : "ReturnStatement[16401-16529]:ReturnStatement[16625-16753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16598-16738]:Block[16822-16962]"
    }, {
      "left" : "return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));",
      "right" : "return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));",
      "info" : "ReturnStatement[16606-16732]:ReturnStatement[16830-16956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16812-16878]:Block[17036-17102]"
    }, {
      "left" : "Node node = newNode(Token.EMPTY);",
      "right" : "Node node = newNode(Token.EMPTY);",
      "info" : "VariableDeclarationStatement[16820-16853]:VariableDeclarationStatement[17044-17077]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[16860-16872]:ReturnStatement[17084-17096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16965-17132]:Block[17189-17356]"
    }, {
      "left" : "Node node = newNode(transformTokenType(statementNode.getType()));",
      "right" : "Node node = newNode(transformTokenType(statementNode.getType()));",
      "info" : "VariableDeclarationStatement[16973-17038]:VariableDeclarationStatement[17197-17262]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getExpression()));",
      "right" : "node.addChildToBack(transform(statementNode.getExpression()));",
      "info" : "ExpressionStatement[17045-17107]:ExpressionStatement[17269-17331]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[17114-17126]:ReturnStatement[17338-17350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17194-17387]:Block[17418-17611]"
    }, {
      "left" : "return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));",
      "right" : "return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));",
      "info" : "ReturnStatement[17202-17381]:ReturnStatement[17426-17605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17445-17723]:Block[17669-17947]"
    }, {
      "left" : "Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));",
      "right" : "Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));",
      "info" : "VariableDeclarationStatement[17453-17635]:VariableDeclarationStatement[17677-17859]"
    }, {
      "left" : "node.addChildToBack(transformBlock(loopNode.getBody()));",
      "right" : "node.addChildToBack(transformBlock(loopNode.getBody()));",
      "info" : "ExpressionStatement[17642-17698]:ExpressionStatement[17866-17922]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[17705-17717]:ReturnStatement[17929-17941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17791-18227]:Block[18015-18451]"
    }, {
      "left" : "Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));",
      "right" : "Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));",
      "info" : "VariableDeclarationStatement[17799-17919]:VariableDeclarationStatement[18023-18143]"
    }, {
      "left" : "for (AstNode child : callNode.getArguments())",
      "right" : "for (AstNode child : callNode.getArguments())",
      "info" : "EnhancedForStatement[17926-18028]:EnhancedForStatement[18150-18252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17972-18028]:Block[18196-18252]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[17982-18020]:ExpressionStatement[18206-18244]"
    }, {
      "left" : "int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();",
      "right" : "int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();",
      "info" : "VariableDeclarationStatement[18036-18105]:VariableDeclarationStatement[18260-18329]"
    }, {
      "left" : "node.setLineno(callNode.getLineno());",
      "right" : "node.setLineno(callNode.getLineno());",
      "info" : "ExpressionStatement[18112-18149]:ExpressionStatement[18336-18373]"
    }, {
      "left" : "node.setCharno(position2charno(leftParamPos));",
      "right" : "node.setCharno(position2charno(leftParamPos));",
      "info" : "ExpressionStatement[18156-18202]:ExpressionStatement[18380-18426]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[18209-18221]:ReturnStatement[18433-18445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18296-20265]:Block[18520-20489]"
    }, {
      "left" : "Name name = functionNode.getFunctionName();",
      "right" : "Name name = functionNode.getFunctionName();",
      "info" : "VariableDeclarationStatement[18304-18347]:VariableDeclarationStatement[18528-18571]"
    }, {
      "left" : "Boolean isUnnamedFunction = false;",
      "right" : "Boolean isUnnamedFunction = false;",
      "info" : "VariableDeclarationStatement[18354-18388]:VariableDeclarationStatement[18578-18612]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[18395-18515]:IfStatement[18619-18739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18413-18515]:Block[18637-18739]"
    }, {
      "left" : "name = new Name();",
      "right" : "name = new Name();",
      "info" : "ExpressionStatement[18423-18441]:ExpressionStatement[18647-18665]"
    }, {
      "left" : "name.setIdentifier(\"\");",
      "right" : "name.setIdentifier(\"\");",
      "info" : "ExpressionStatement[18450-18473]:ExpressionStatement[18674-18697]"
    }, {
      "left" : "isUnnamedFunction = true;",
      "right" : "isUnnamedFunction = true;",
      "info" : "ExpressionStatement[18482-18507]:ExpressionStatement[18706-18731]"
    }, {
      "left" : "Node node = newNode(Token.FUNCTION);",
      "right" : "Node node = newNode(Token.FUNCTION);",
      "info" : "VariableDeclarationStatement[18522-18558]:VariableDeclarationStatement[18746-18782]"
    }, {
      "left" : "Node newName = transform(name);",
      "right" : "Node newName = transform(name);",
      "info" : "VariableDeclarationStatement[18565-18596]:VariableDeclarationStatement[18789-18820]"
    }, {
      "left" : "if (isUnnamedFunction)",
      "right" : "if (isUnnamedFunction)",
      "info" : "IfStatement[18603-19115]:IfStatement[18827-19339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18626-19115]:Block[18850-19339]"
    }, {
      "left" : "newName.setLineno(functionNode.getLineno());",
      "right" : "newName.setLineno(functionNode.getLineno());",
      "info" : "ExpressionStatement[18736-18780]:ExpressionStatement[18960-19004]"
    }, {
      "left" : "int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();",
      "right" : "int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();",
      "info" : "VariableDeclarationStatement[18968-19053]:VariableDeclarationStatement[19192-19277]"
    }, {
      "left" : "newName.setCharno(position2charno(lpColumn));",
      "right" : "newName.setCharno(position2charno(lpColumn));",
      "info" : "ExpressionStatement[19062-19107]:ExpressionStatement[19286-19331]"
    }, {
      "left" : "node.addChildToBack(newName);",
      "right" : "node.addChildToBack(newName);",
      "info" : "ExpressionStatement[19123-19152]:ExpressionStatement[19347-19376]"
    }, {
      "left" : "Node lp = newNode(Token.LP);",
      "right" : "Node lp = newNode(Token.LP);",
      "info" : "VariableDeclarationStatement[19159-19187]:VariableDeclarationStatement[19383-19411]"
    }, {
      "left" : "Name fnName = functionNode.getFunctionName();",
      "right" : "Name fnName = functionNode.getFunctionName();",
      "info" : "VariableDeclarationStatement[19642-19687]:VariableDeclarationStatement[19866-19911]"
    }, {
      "left" : "if (fnName != null)",
      "right" : "if (fnName != null)",
      "info" : "IfStatement[19694-19828]:IfStatement[19918-20052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19714-19765]:Block[19938-19989]"
    }, {
      "left" : "lp.setLineno(fnName.getLineno());",
      "right" : "lp.setLineno(fnName.getLineno());",
      "info" : "ExpressionStatement[19724-19757]:ExpressionStatement[19948-19981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19771-19828]:Block[19995-20052]"
    }, {
      "left" : "lp.setLineno(functionNode.getLineno());",
      "right" : "lp.setLineno(functionNode.getLineno());",
      "info" : "ExpressionStatement[19781-19820]:ExpressionStatement[20005-20044]"
    }, {
      "left" : "int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();",
      "right" : "int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[19835-19922]:VariableDeclarationStatement[20059-20146]"
    }, {
      "left" : "lp.setCharno(position2charno(lparenCharno));",
      "right" : "lp.setCharno(position2charno(lparenCharno));",
      "info" : "ExpressionStatement[19930-19974]:ExpressionStatement[20154-20198]"
    }, {
      "left" : "for (AstNode param : functionNode.getParams())",
      "right" : "for (AstNode param : functionNode.getParams())",
      "info" : "EnhancedForStatement[19981-20082]:EnhancedForStatement[20205-20306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20028-20082]:Block[20252-20306]"
    }, {
      "left" : "lp.addChildToBack(transform(param));",
      "right" : "lp.addChildToBack(transform(param));",
      "info" : "ExpressionStatement[20038-20074]:ExpressionStatement[20262-20298]"
    }, {
      "left" : "node.addChildToBack(lp);",
      "right" : "node.addChildToBack(lp);",
      "info" : "ExpressionStatement[20089-20113]:ExpressionStatement[20313-20337]"
    }, {
      "left" : "Node bodyNode = transform(functionNode.getBody());",
      "right" : "Node bodyNode = transform(functionNode.getBody());",
      "info" : "VariableDeclarationStatement[20121-20171]:VariableDeclarationStatement[20345-20395]"
    }, {
      "left" : "parseDirectives(bodyNode);",
      "right" : "parseDirectives(bodyNode);",
      "info" : "ExpressionStatement[20178-20204]:ExpressionStatement[20402-20428]"
    }, {
      "left" : "node.addChildToBack(bodyNode);",
      "right" : "node.addChildToBack(bodyNode);",
      "info" : "ExpressionStatement[20211-20241]:ExpressionStatement[20435-20465]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[20247-20259]:ReturnStatement[20471-20483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20336-20670]:Block[20560-20894]"
    }, {
      "left" : "Node node = newNode(Token.IF);",
      "right" : "Node node = newNode(Token.IF);",
      "info" : "VariableDeclarationStatement[20344-20374]:VariableDeclarationStatement[20568-20598]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getCondition()));",
      "right" : "node.addChildToBack(transform(statementNode.getCondition()));",
      "info" : "ExpressionStatement[20381-20442]:ExpressionStatement[20605-20666]"
    }, {
      "left" : "node.addChildToBack(transformBlock(statementNode.getThenPart()));",
      "right" : "node.addChildToBack(transformBlock(statementNode.getThenPart()));",
      "info" : "ExpressionStatement[20449-20514]:ExpressionStatement[20673-20738]"
    }, {
      "left" : "if (statementNode.getElsePart() != null)",
      "right" : "if (statementNode.getElsePart() != null)",
      "info" : "IfStatement[20521-20645]:IfStatement[20745-20869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20562-20645]:Block[20786-20869]"
    }, {
      "left" : "node.addChildToBack(transformBlock(statementNode.getElsePart()));",
      "right" : "node.addChildToBack(transformBlock(statementNode.getElsePart()));",
      "info" : "ExpressionStatement[20572-20637]:ExpressionStatement[20796-20861]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[20652-20664]:ReturnStatement[20876-20888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20744-21392]:Block[20968-21616]"
    }, {
      "left" : "Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));",
      "right" : "Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));",
      "info" : "VariableDeclarationStatement[20752-20904]:VariableDeclarationStatement[20976-21128]"
    }, {
      "left" : "n.setLineno(exprNode.getLineno());",
      "right" : "n.setLineno(exprNode.getLineno());",
      "info" : "ExpressionStatement[21007-21041]:ExpressionStatement[21231-21265]"
    }, {
      "left" : "n.setCharno(position2charno(exprNode.getAbsolutePosition() +\n          exprNode.getOperatorPosition()));",
      "right" : "n.setCharno(position2charno(exprNode.getAbsolutePosition() +\n          exprNode.getOperatorPosition()));",
      "info" : "ExpressionStatement[21266-21370]:ExpressionStatement[21490-21594]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[21377-21386]:ReturnStatement[21601-21610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21467-21539]:Block[21691-21763]"
    }, {
      "left" : "return newNode(transformTokenType(literalNode.getType()));",
      "right" : "return newNode(transformTokenType(literalNode.getType()));",
      "info" : "ReturnStatement[21475-21533]:ReturnStatement[21699-21757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21594-21668]:Block[21818-21892]"
    }, {
      "left" : "return newStringNode(Token.LABEL_NAME, labelNode.getName());",
      "right" : "return newStringNode(Token.LABEL_NAME, labelNode.getName());",
      "info" : "ReturnStatement[21602-21662]:ReturnStatement[21826-21886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21749-22354]:Block[21973-22578]"
    }, {
      "left" : "Node node = newNode(Token.LABEL);",
      "right" : "Node node = newNode(Token.LABEL);",
      "info" : "VariableDeclarationStatement[21757-21790]:VariableDeclarationStatement[21981-22014]"
    }, {
      "left" : "Node prev = null;",
      "right" : "Node prev = null;",
      "info" : "VariableDeclarationStatement[21797-21814]:VariableDeclarationStatement[22021-22038]"
    }, {
      "left" : "Node cur = node;",
      "right" : "Node cur = node;",
      "info" : "VariableDeclarationStatement[21821-21837]:VariableDeclarationStatement[22045-22061]"
    }, {
      "left" : "for (Label label : statementNode.getLabels())",
      "right" : "for (Label label : statementNode.getLabels())",
      "info" : "EnhancedForStatement[21844-22261]:EnhancedForStatement[22068-22485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21890-22261]:Block[22114-22485]"
    }, {
      "left" : "if (prev != null)",
      "right" : "if (prev != null)",
      "info" : "IfStatement[21900-21965]:IfStatement[22124-22189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21918-21965]:Block[22142-22189]"
    }, {
      "left" : "prev.addChildToBack(cur);",
      "right" : "prev.addChildToBack(cur);",
      "info" : "ExpressionStatement[21930-21955]:ExpressionStatement[22154-22179]"
    }, {
      "left" : "cur.addChildToBack(transform(label));",
      "right" : "cur.addChildToBack(transform(label));",
      "info" : "ExpressionStatement[21974-22011]:ExpressionStatement[22198-22235]"
    }, {
      "left" : "cur.setLineno(label.getLineno());",
      "right" : "cur.setLineno(label.getLineno());",
      "info" : "ExpressionStatement[22021-22054]:ExpressionStatement[22245-22278]"
    }, {
      "left" : "int clauseAbsolutePosition =\n            position2charno(label.getAbsolutePosition());",
      "right" : "int clauseAbsolutePosition =\n            position2charno(label.getAbsolutePosition());",
      "info" : "VariableDeclarationStatement[22063-22149]:VariableDeclarationStatement[22287-22373]"
    }, {
      "left" : "cur.setCharno(clauseAbsolutePosition);",
      "right" : "cur.setCharno(clauseAbsolutePosition);",
      "info" : "ExpressionStatement[22158-22196]:ExpressionStatement[22382-22420]"
    }, {
      "left" : "prev = cur;",
      "right" : "prev = cur;",
      "info" : "ExpressionStatement[22206-22217]:ExpressionStatement[22430-22441]"
    }, {
      "left" : "cur = newNode(Token.LABEL);",
      "right" : "cur = newNode(Token.LABEL);",
      "info" : "ExpressionStatement[22226-22253]:ExpressionStatement[22450-22477]"
    }, {
      "left" : "prev.addChildToBack(transform(statementNode.getStatement()));",
      "right" : "prev.addChildToBack(transform(statementNode.getStatement()));",
      "info" : "ExpressionStatement[22268-22329]:ExpressionStatement[22492-22553]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[22336-22348]:ReturnStatement[22560-22572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22406-22479]:Block[22630-22703]"
    }, {
      "left" : "return newStringNode(Token.NAME, nameNode.getIdentifier());",
      "right" : "return newStringNode(Token.NAME, nameNode.getIdentifier());",
      "info" : "ReturnStatement[22414-22473]:ReturnStatement[22638-22697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22549-22600]:Block[22773-22824]"
    }, {
      "left" : "return processFunctionCall(exprNode);",
      "right" : "return processFunctionCall(exprNode);",
      "info" : "ReturnStatement[22557-22594]:ReturnStatement[22781-22818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22673-22733]:Block[22897-22957]"
    }, {
      "left" : "return newNumberNode(literalNode.getNumber());",
      "right" : "return newNumberNode(literalNode.getNumber());",
      "info" : "ReturnStatement[22681-22727]:ReturnStatement[22905-22951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22806-23557]:Block[23030-23781]"
    }, {
      "left" : "if (literalNode.isDestructuring())",
      "right" : "if (literalNode.isDestructuring())",
      "info" : "IfStatement[22814-22906]:IfStatement[23038-23130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22849-22906]:Block[23073-23130]"
    }, {
      "left" : "reportDestructuringAssign(literalNode);",
      "right" : "reportDestructuringAssign(literalNode);",
      "info" : "ExpressionStatement[22859-22898]:ExpressionStatement[23083-23122]"
    }, {
      "left" : "Node node = newNode(Token.OBJECTLIT);",
      "right" : "Node node = newNode(Token.OBJECTLIT);",
      "info" : "VariableDeclarationStatement[22914-22951]:VariableDeclarationStatement[23138-23175]"
    }, {
      "left" : "for (ObjectProperty el : literalNode.getElements())",
      "right" : "for (ObjectProperty el : literalNode.getElements())",
      "info" : "EnhancedForStatement[22958-23532]:EnhancedForStatement[23182-23756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23010-23532]:Block[23234-23756]"
    }, {
      "left" : "if (!config.acceptES5)",
      "right" : "if (!config.acceptES5)",
      "info" : "IfStatement[23020-23239]:IfStatement[23244-23463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23043-23239]:Block[23267-23463]"
    }, {
      "left" : "if (el.isGetter())",
      "right" : "if (el.isGetter())",
      "info" : "IfStatement[23055-23229]:IfStatement[23279-23453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23074-23139]:Block[23298-23363]"
    }, {
      "left" : "reportGetter(el);",
      "right" : "reportGetter(el);",
      "info" : "ExpressionStatement[23088-23105]:ExpressionStatement[23312-23329]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23118-23127]:ContinueStatement[23342-23351]"
    }, {
      "left" : "if (el.isSetter())",
      "right" : "if (el.isSetter())",
      "info" : "IfStatement[23145-23229]:IfStatement[23369-23453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23164-23229]:Block[23388-23453]"
    }, {
      "left" : "reportSetter(el);",
      "right" : "reportSetter(el);",
      "info" : "ExpressionStatement[23178-23195]:ExpressionStatement[23402-23419]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23208-23217]:ContinueStatement[23432-23441]"
    }, {
      "left" : "Node key = transformAsString(el.getLeft());",
      "right" : "Node key = transformAsString(el.getLeft());",
      "info" : "VariableDeclarationStatement[23249-23292]:VariableDeclarationStatement[23473-23516]"
    }, {
      "left" : "if (el.isGetter())",
      "right" : "if (el.isGetter())",
      "info" : "IfStatement[23301-23435]:IfStatement[23525-23659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23320-23365]:Block[23544-23589]"
    }, {
      "left" : "key.setType(Token.GET);",
      "right" : "key.setType(Token.GET);",
      "info" : "ExpressionStatement[23332-23355]:ExpressionStatement[23556-23579]"
    }, {
      "left" : "if (el.isSetter())",
      "right" : "if (el.isSetter())",
      "info" : "IfStatement[23371-23435]:IfStatement[23595-23659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23390-23435]:Block[23614-23659]"
    }, {
      "left" : "key.setType(Token.SET);",
      "right" : "key.setType(Token.SET);",
      "info" : "ExpressionStatement[23402-23425]:ExpressionStatement[23626-23649]"
    }, {
      "left" : "key.addChildToFront(transform(el.getRight()));",
      "right" : "key.addChildToFront(transform(el.getRight()));",
      "info" : "ExpressionStatement[23444-23490]:ExpressionStatement[23668-23714]"
    }, {
      "left" : "node.addChildToBack(key);",
      "right" : "node.addChildToBack(key);",
      "info" : "ExpressionStatement[23499-23524]:ExpressionStatement[23723-23748]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[23539-23551]:ReturnStatement[23763-23775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23633-23691]:Block[23857-23915]"
    }, {
      "left" : "return processInfixExpression(propertyNode);",
      "right" : "return processInfixExpression(propertyNode);",
      "info" : "ReturnStatement[23641-23685]:ReturnStatement[23865-23909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23781-23921]:Block[24005-24145]"
    }, {
      "left" : "Node node = transform(exprNode.getExpression());",
      "right" : "Node node = transform(exprNode.getExpression());",
      "info" : "VariableDeclarationStatement[23789-23837]:VariableDeclarationStatement[24013-24061]"
    }, {
      "left" : "node.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);",
      "right" : "node.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);",
      "info" : "ExpressionStatement[23844-23896]:ExpressionStatement[24068-24120]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[23903-23915]:ReturnStatement[24127-24139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23986-24135]:Block[24210-24359]"
    }, {
      "left" : "return newNode(\n          Token.GETPROP,\n          transform(getNode.getTarget()),\n          transformAsString(getNode.getProperty()));",
      "right" : "return newNode(\n          Token.GETPROP,\n          transform(getNode.getTarget()),\n          transformAsString(getNode.getProperty()));",
      "info" : "ReturnStatement[23994-24129]:ReturnStatement[24218-24353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24208-24774]:Block[24432-24998]"
    }, {
      "left" : "Node literalStringNode = newStringNode(literalNode.getValue());",
      "right" : "Node literalStringNode = newStringNode(literalNode.getValue());",
      "info" : "VariableDeclarationStatement[24216-24279]:VariableDeclarationStatement[24440-24503]"
    }, {
      "left" : "literalStringNode.setLineno(literalNode.getLineno());",
      "right" : "literalStringNode.setLineno(literalNode.getLineno());",
      "info" : "ExpressionStatement[24325-24378]:ExpressionStatement[24549-24602]"
    }, {
      "left" : "Node node = newNode(Token.REGEXP, literalStringNode);",
      "right" : "Node node = newNode(Token.REGEXP, literalStringNode);",
      "info" : "VariableDeclarationStatement[24385-24438]:VariableDeclarationStatement[24609-24662]"
    }, {
      "left" : "String flags = literalNode.getFlags();",
      "right" : "String flags = literalNode.getFlags();",
      "info" : "VariableDeclarationStatement[24445-24483]:VariableDeclarationStatement[24669-24707]"
    }, {
      "left" : "if (flags != null && !flags.isEmpty())",
      "right" : "if (flags != null && !flags.isEmpty())",
      "info" : "IfStatement[24490-24749]:IfStatement[24714-24973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24529-24749]:Block[24753-24973]"
    }, {
      "left" : "Node flagsNode = newStringNode(flags);",
      "right" : "Node flagsNode = newStringNode(flags);",
      "info" : "VariableDeclarationStatement[24539-24577]:VariableDeclarationStatement[24763-24801]"
    }, {
      "left" : "flagsNode.setLineno(literalNode.getLineno());",
      "right" : "flagsNode.setLineno(literalNode.getLineno());",
      "info" : "ExpressionStatement[24656-24701]:ExpressionStatement[24880-24925]"
    }, {
      "left" : "node.addChildToBack(flagsNode);",
      "right" : "node.addChildToBack(flagsNode);",
      "info" : "ExpressionStatement[24710-24741]:ExpressionStatement[24934-24965]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[24756-24768]:ReturnStatement[24980-24992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24853-25052]:Block[25077-25276]"
    }, {
      "left" : "Node node = newNode(Token.RETURN);",
      "right" : "Node node = newNode(Token.RETURN);",
      "info" : "VariableDeclarationStatement[24861-24895]:VariableDeclarationStatement[25085-25119]"
    }, {
      "left" : "if (statementNode.getReturnValue() != null)",
      "right" : "if (statementNode.getReturnValue() != null)",
      "info" : "IfStatement[24902-25027]:IfStatement[25126-25251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24946-25027]:Block[25170-25251]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getReturnValue()));",
      "right" : "node.addChildToBack(transform(statementNode.getReturnValue()));",
      "info" : "ExpressionStatement[24956-25019]:ExpressionStatement[25180-25243]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[25034-25046]:ReturnStatement[25258-25270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25107-25154]:Block[25331-25378]"
    }, {
      "left" : "return processGeneric(scopeNode);",
      "right" : "return processGeneric(scopeNode);",
      "info" : "ReturnStatement[25115-25148]:ReturnStatement[25339-25372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25227-25304]:Block[25451-25528]"
    }, {
      "left" : "Node n = newStringNode(literalNode.getValue());",
      "right" : "Node n = newStringNode(literalNode.getValue());",
      "info" : "VariableDeclarationStatement[25235-25282]:VariableDeclarationStatement[25459-25506]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[25289-25298]:ReturnStatement[25513-25522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25368-26033]:Block[25592-26257]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "VariableDeclarationStatement[25376-25386]:VariableDeclarationStatement[25600-25610]"
    }, {
      "left" : "if (caseNode.isDefault())",
      "right" : "if (caseNode.isDefault())",
      "info" : "IfStatement[25393-25584]:IfStatement[25617-25808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25419-25467]:Block[25643-25691]"
    }, {
      "left" : "node = newNode(Token.DEFAULT);",
      "right" : "node = newNode(Token.DEFAULT);",
      "info" : "ExpressionStatement[25429-25459]:ExpressionStatement[25653-25683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25473-25584]:Block[25697-25808]"
    }, {
      "left" : "AstNode expr = caseNode.getExpression();",
      "right" : "AstNode expr = caseNode.getExpression();",
      "info" : "VariableDeclarationStatement[25483-25523]:VariableDeclarationStatement[25707-25747]"
    }, {
      "left" : "node = newNode(Token.CASE, transform(expr));",
      "right" : "node = newNode(Token.CASE, transform(expr));",
      "info" : "ExpressionStatement[25532-25576]:ExpressionStatement[25756-25800]"
    }, {
      "left" : "Node block = newNode(Token.BLOCK);",
      "right" : "Node block = newNode(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[25591-25625]:VariableDeclarationStatement[25815-25849]"
    }, {
      "left" : "block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "right" : "block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "info" : "ExpressionStatement[25632-25686]:ExpressionStatement[25856-25910]"
    }, {
      "left" : "block.setLineno(caseNode.getLineno());",
      "right" : "block.setLineno(caseNode.getLineno());",
      "info" : "ExpressionStatement[25693-25731]:ExpressionStatement[25917-25955]"
    }, {
      "left" : "block.setCharno(position2charno(caseNode.getAbsolutePosition()));",
      "right" : "block.setCharno(position2charno(caseNode.getAbsolutePosition()));",
      "info" : "ExpressionStatement[25738-25803]:ExpressionStatement[25962-26027]"
    }, {
      "left" : "if (caseNode.getStatements() != null)",
      "right" : "if (caseNode.getStatements() != null)",
      "info" : "IfStatement[25810-25974]:IfStatement[26034-26198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25848-25974]:Block[26072-26198]"
    }, {
      "left" : "for (AstNode child : caseNode.getStatements())",
      "right" : "for (AstNode child : caseNode.getStatements())",
      "info" : "EnhancedForStatement[25858-25966]:EnhancedForStatement[26082-26190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25905-25966]:Block[26129-26190]"
    }, {
      "left" : "block.addChildToBack(transform(child));",
      "right" : "block.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[25917-25956]:ExpressionStatement[26141-26180]"
    }, {
      "left" : "node.addChildToBack(block);",
      "right" : "node.addChildToBack(block);",
      "info" : "ExpressionStatement[25981-26008]:ExpressionStatement[26205-26232]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[26015-26027]:ReturnStatement[26239-26251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26112-26341]:Block[26336-26565]"
    }, {
      "left" : "Node node = newNode(Token.SWITCH,\n          transform(statementNode.getExpression()));",
      "right" : "Node node = newNode(Token.SWITCH,\n          transform(statementNode.getExpression()));",
      "info" : "VariableDeclarationStatement[26120-26206]:VariableDeclarationStatement[26344-26430]"
    }, {
      "left" : "for (AstNode child : statementNode.getCases())",
      "right" : "for (AstNode child : statementNode.getCases())",
      "info" : "EnhancedForStatement[26213-26316]:EnhancedForStatement[26437-26540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26260-26316]:Block[26484-26540]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[26270-26308]:ExpressionStatement[26494-26532]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[26323-26335]:ReturnStatement[26547-26559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26418-26512]:Block[26642-26736]"
    }, {
      "left" : "return newNode(Token.THROW,\n          transform(statementNode.getExpression()));",
      "right" : "return newNode(Token.THROW,\n          transform(statementNode.getExpression()));",
      "info" : "ReturnStatement[26426-26506]:ReturnStatement[26650-26730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26585-27611]:Block[26809-27835]"
    }, {
      "left" : "Node node = newNode(Token.TRY,\n          transformBlock(statementNode.getTryBlock()));",
      "right" : "Node node = newNode(Token.TRY,\n          transformBlock(statementNode.getTryBlock()));",
      "info" : "VariableDeclarationStatement[26593-26679]:VariableDeclarationStatement[26817-26903]"
    }, {
      "left" : "Node block = newNode(Token.BLOCK);",
      "right" : "Node block = newNode(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[26686-26720]:VariableDeclarationStatement[26910-26944]"
    }, {
      "left" : "boolean lineSet = false;",
      "right" : "boolean lineSet = false;",
      "info" : "VariableDeclarationStatement[26727-26751]:VariableDeclarationStatement[26951-26975]"
    }, {
      "left" : "for (CatchClause cc : statementNode.getCatchClauses())",
      "right" : "for (CatchClause cc : statementNode.getCatchClauses())",
      "info" : "EnhancedForStatement[26759-27074]:EnhancedForStatement[26983-27298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26814-27074]:Block[27038-27298]"
    }, {
      "left" : "if (lineSet == false)",
      "right" : "if (lineSet == false)",
      "info" : "IfStatement[26915-27021]:IfStatement[27139-27245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26937-27021]:Block[27161-27245]"
    }, {
      "left" : "block.setLineno(cc.getLineno());",
      "right" : "block.setLineno(cc.getLineno());",
      "info" : "ExpressionStatement[26951-26983]:ExpressionStatement[27175-27207]"
    }, {
      "left" : "lineSet = true;",
      "right" : "lineSet = true;",
      "info" : "ExpressionStatement[26996-27011]:ExpressionStatement[27220-27235]"
    }, {
      "left" : "block.addChildToBack(transform(cc));",
      "right" : "block.addChildToBack(transform(cc));",
      "info" : "ExpressionStatement[27030-27066]:ExpressionStatement[27254-27290]"
    }, {
      "left" : "node.addChildToBack(block);",
      "right" : "node.addChildToBack(block);",
      "info" : "ExpressionStatement[27081-27108]:ExpressionStatement[27305-27332]"
    }, {
      "left" : "AstNode finallyBlock = statementNode.getFinallyBlock();",
      "right" : "AstNode finallyBlock = statementNode.getFinallyBlock();",
      "info" : "VariableDeclarationStatement[27116-27171]:VariableDeclarationStatement[27340-27395]"
    }, {
      "left" : "if (finallyBlock != null)",
      "right" : "if (finallyBlock != null)",
      "info" : "IfStatement[27178-27272]:IfStatement[27402-27496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27204-27272]:Block[27428-27496]"
    }, {
      "left" : "node.addChildToBack(transformBlock(finallyBlock));",
      "right" : "node.addChildToBack(transformBlock(finallyBlock));",
      "info" : "ExpressionStatement[27214-27264]:ExpressionStatement[27438-27488]"
    }, {
      "left" : "if ((lineSet == false) && (finallyBlock != null))",
      "right" : "if ((lineSet == false) && (finallyBlock != null))",
      "info" : "IfStatement[27475-27585]:IfStatement[27699-27809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27525-27585]:Block[27749-27809]"
    }, {
      "left" : "block.setLineno(finallyBlock.getLineno());",
      "right" : "block.setLineno(finallyBlock.getLineno());",
      "info" : "ExpressionStatement[27535-27577]:ExpressionStatement[27759-27801]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[27593-27605]:ReturnStatement[27817-27829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27685-28137]:Block[27909-28743]"
    }, {
      "left" : "int type = transformTokenType(exprNode.getType());",
      "right" : "int type = transformTokenType(exprNode.getType());",
      "info" : "VariableDeclarationStatement[27693-27743]:VariableDeclarationStatement[27917-27967]"
    }, {
      "left" : "Node operand = transform(exprNode.getOperand());",
      "right" : "Node operand = transform(exprNode.getOperand());",
      "info" : "VariableDeclarationStatement[27750-27798]:VariableDeclarationStatement[27974-28022]"
    }, {
      "left" : "if (type == Token.NEG && operand.getType() == Token.NUMBER)",
      "right" : "if (type == Token.NEG && operand.getType() == Token.NUMBER)",
      "info" : "IfStatement[27805-28131]:IfStatement[28029-28737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27865-27947]:Block[28089-28171]"
    }, {
      "left" : "operand.setDouble(-operand.getDouble());",
      "right" : "operand.setDouble(-operand.getDouble());",
      "info" : "ExpressionStatement[27875-27915]:ExpressionStatement[28099-28139]"
    }, {
      "left" : "return operand;",
      "right" : "return operand;",
      "info" : "ReturnStatement[27924-27939]:ReturnStatement[28148-28163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27953-28131]:Block[28177-28737]"
    }, {
      "left" : "Node node = newNode(type, operand);",
      "right" : "Node node = newNode(type, operand);",
      "info" : "VariableDeclarationStatement[27964-27999]:VariableDeclarationStatement[28570-28605]"
    }, {
      "left" : "if (exprNode.isPostfix())",
      "right" : "if (exprNode.isPostfix())",
      "info" : "IfStatement[28008-28102]:IfStatement[28614-28708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28034-28102]:Block[28640-28708]"
    }, {
      "left" : "node.putBooleanProp(Node.INCRDECR_PROP, true);",
      "right" : "node.putBooleanProp(Node.INCRDECR_PROP, true);",
      "info" : "ExpressionStatement[28046-28092]:ExpressionStatement[28652-28698]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[28111-28123]:ReturnStatement[28717-28729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28227-28419]:Block[29062-29254]"
    }, {
      "left" : "Node node = newNode(Token.VAR);",
      "right" : "Node node = newNode(Token.VAR);",
      "info" : "VariableDeclarationStatement[28235-28266]:VariableDeclarationStatement[29070-29101]"
    }, {
      "left" : "for (VariableInitializer child : declarationNode.getVariables())",
      "right" : "for (VariableInitializer child : declarationNode.getVariables())",
      "info" : "EnhancedForStatement[28273-28394]:EnhancedForStatement[29108-29229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28338-28394]:Block[29173-29229]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[28348-28386]:ExpressionStatement[29183-29221]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[28401-28413]:ReturnStatement[29236-29248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28508-28770]:Block[29343-29605]"
    }, {
      "left" : "Node node = transform(initializerNode.getTarget());",
      "right" : "Node node = transform(initializerNode.getTarget());",
      "info" : "VariableDeclarationStatement[28516-28567]:VariableDeclarationStatement[29351-29402]"
    }, {
      "left" : "if (initializerNode.getInitializer() != null)",
      "right" : "if (initializerNode.getInitializer() != null)",
      "info" : "IfStatement[28574-28745]:IfStatement[29409-29580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28620-28745]:Block[29455-29580]"
    }, {
      "left" : "node.addChildToBack(transform(initializerNode.getInitializer()));",
      "right" : "node.addChildToBack(transform(initializerNode.getInitializer()));",
      "info" : "ExpressionStatement[28630-28695]:ExpressionStatement[29465-29530]"
    }, {
      "left" : "node.setLineno(node.getLineno());",
      "right" : "node.setLineno(node.getLineno());",
      "info" : "ExpressionStatement[28704-28737]:ExpressionStatement[29539-29572]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[28752-28764]:ReturnStatement[29587-29599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28832-28977]:Block[29667-29812]"
    }, {
      "left" : "return newNode(\n          Token.WHILE,\n          transform(loopNode.getCondition()),\n          transformBlock(loopNode.getBody()));",
      "right" : "return newNode(\n          Token.WHILE,\n          transform(loopNode.getCondition()),\n          transformBlock(loopNode.getBody()));",
      "info" : "ReturnStatement[28840-28971]:ReturnStatement[29675-29806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29052-29212]:Block[29887-30047]"
    }, {
      "left" : "return newNode(\n          Token.WITH,\n          transform(statementNode.getExpression()),\n          transformBlock(statementNode.getStatement()));",
      "right" : "return newNode(\n          Token.WITH,\n          transform(statementNode.getExpression()),\n          transformBlock(statementNode.getStatement()));",
      "info" : "ReturnStatement[29060-29206]:ReturnStatement[29895-30041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29271-29535]:Block[30106-30370]"
    }, {
      "left" : "errorReporter.error(\n          \"Unsupported syntax: \" +\n          com.google.javascript.jscomp.mozilla.rhino.Token.typeToName(\n              node.getType()),\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"Unsupported syntax: \" +\n          com.google.javascript.jscomp.mozilla.rhino.Token.typeToName(\n              node.getType()),\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[29279-29494]:ExpressionStatement[30114-30329]"
    }, {
      "left" : "return newNode(Token.EMPTY);",
      "right" : "return newNode(Token.EMPTY);",
      "info" : "ReturnStatement[29501-29529]:ReturnStatement[30336-30364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29586-29726]:Block[30421-30561]"
    }, {
      "left" : "errorReporter.error(\n          \"destructuring assignment forbidden\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"destructuring assignment forbidden\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[29594-29720]:ExpressionStatement[30429-30555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29764-29916]:Block[30599-30751]"
    }, {
      "left" : "errorReporter.error(\n          \"getters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"getters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[29772-29910]:ExpressionStatement[30607-30745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29954-30106]:Block[30789-30941]"
    }, {
      "left" : "errorReporter.error(\n          \"setters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"setters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[29962-30100]:ExpressionStatement[30797-30935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30163-45157]:Block[30998-45992]"
    }, {
      "left" : "switch (token) {\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:\n        return Token.ERROR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:\n        return Token.EOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:\n        return Token.EOL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:\n        return Token.ENTERWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:\n        return Token.LEAVEWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:\n        return Token.GOTO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:\n        return Token.IFEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:\n        return Token.IFNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:\n        return Token.SETNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NE:\n        return Token.NE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LT:\n        return Token.LT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LE:\n        return Token.LE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GT:\n        return Token.GT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GE:\n        return Token.GE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.POS:\n        return Token.POS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:\n        return Token.SETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:\n        return Token.SETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:\n        return Token.BINDNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:\n        return Token.RETHROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IN:\n        return Token.IN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:\n        return Token.LOCAL_LOAD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:\n        return Token.GETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:\n        return Token.SETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:\n        return Token.CATCH_SCOPE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:\n        return Token.ENUM_INIT_KEYS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:\n        return Token.ENUM_INIT_VALUES;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:\n        return Token.ENUM_NEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:\n        return Token.ENUM_ID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:\n        return Token.THISFN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:\n        return Token.RETURN_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:\n        return Token.GET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:\n        return Token.SET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:\n        return Token.DEL_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:\n        return Token.REF_CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:\n        return Token.REF_SPECIAL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:\n        return Token.DEFAULTNAMESPACE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:\n        return Token.ESCXMLTEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:\n        return Token.ESCXMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:\n        return Token.REF_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:\n        return Token.REF_NS_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:\n        return Token.REF_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:\n        return Token.REF_NS_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:\n        return Token.TRY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:\n        return Token.SEMI;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LB:\n        return Token.LB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RB:\n        return Token.RB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LC:\n        return Token.LC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RC:\n        return Token.RC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LP:\n        return Token.LP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RP:\n        return Token.RP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:\n        return Token.COLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OR:\n        return Token.OR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.AND:\n        return Token.AND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INC:\n        return Token.INC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:\n        return Token.DOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:\n        return Token.EXPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:\n        return Token.IMPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IF:\n        return Token.IF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:\n        return Token.ELSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:\n        return Token.DEFAULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DO:\n        return Token.DO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:\n        return Token.FINALLY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:\n        return Token.RESERVED;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:\n        return Token.TARGET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:\n        return Token.LOOP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:\n        return Token.JSR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:\n        return Token.TYPEOFNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:\n        return Token.USE_STACK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:\n        return Token.SETPROP_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:\n        return Token.SETELEM_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:\n        return Token.LOCAL_BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:\n        return Token.SET_REF_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:\n        return Token.DOTDOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:\n        return Token.COLONCOLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XML:\n        return Token.XML;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:\n        return Token.DOTQUERY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:\n        return Token.XMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:\n        return Token.XMLEND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:\n        return Token.TO_OBJECT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:\n        return Token.TO_DOUBLE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET:\n        return Token.GET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET:\n        return Token.SET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:\n        return Token.SETCONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }",
      "right" : "switch (token) {\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:\n        return Token.ERROR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:\n        return Token.EOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:\n        return Token.EOL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:\n        return Token.ENTERWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:\n        return Token.LEAVEWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:\n        return Token.GOTO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:\n        return Token.IFEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:\n        return Token.IFNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:\n        return Token.SETNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NE:\n        return Token.NE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LT:\n        return Token.LT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LE:\n        return Token.LE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GT:\n        return Token.GT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GE:\n        return Token.GE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.POS:\n        return Token.POS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:\n        return Token.SETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:\n        return Token.SETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:\n        return Token.BINDNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:\n        return Token.RETHROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IN:\n        return Token.IN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:\n        return Token.LOCAL_LOAD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:\n        return Token.GETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:\n        return Token.SETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:\n        return Token.CATCH_SCOPE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:\n        return Token.ENUM_INIT_KEYS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:\n        return Token.ENUM_INIT_VALUES;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:\n        return Token.ENUM_NEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:\n        return Token.ENUM_ID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:\n        return Token.THISFN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:\n        return Token.RETURN_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:\n        return Token.GET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:\n        return Token.SET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:\n        return Token.DEL_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:\n        return Token.REF_CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:\n        return Token.REF_SPECIAL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:\n        return Token.DEFAULTNAMESPACE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:\n        return Token.ESCXMLTEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:\n        return Token.ESCXMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:\n        return Token.REF_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:\n        return Token.REF_NS_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:\n        return Token.REF_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:\n        return Token.REF_NS_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:\n        return Token.TRY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:\n        return Token.SEMI;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LB:\n        return Token.LB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RB:\n        return Token.RB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LC:\n        return Token.LC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RC:\n        return Token.RC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LP:\n        return Token.LP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RP:\n        return Token.RP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:\n        return Token.COLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OR:\n        return Token.OR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.AND:\n        return Token.AND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INC:\n        return Token.INC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:\n        return Token.DOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:\n        return Token.EXPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:\n        return Token.IMPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IF:\n        return Token.IF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:\n        return Token.ELSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:\n        return Token.DEFAULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DO:\n        return Token.DO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:\n        return Token.FINALLY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:\n        return Token.RESERVED;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:\n        return Token.TARGET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:\n        return Token.LOOP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:\n        return Token.JSR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:\n        return Token.TYPEOFNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:\n        return Token.USE_STACK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:\n        return Token.SETPROP_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:\n        return Token.SETELEM_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:\n        return Token.LOCAL_BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:\n        return Token.SET_REF_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:\n        return Token.DOTDOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:\n        return Token.COLONCOLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XML:\n        return Token.XML;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:\n        return Token.DOTQUERY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:\n        return Token.XMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:\n        return Token.XMLEND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:\n        return Token.TO_OBJECT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:\n        return Token.TO_DOUBLE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET:\n        return Token.GET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET:\n        return Token.SET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:\n        return Token.SETCONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }",
      "info" : "SwitchStatement[30169-45066]:SwitchStatement[31004-45901]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:",
      "info" : "SwitchCase[30192-30252]:SwitchCase[31027-31087]"
    }, {
      "left" : "return Token.ERROR;",
      "right" : "return Token.ERROR;",
      "info" : "ReturnStatement[30261-30280]:ReturnStatement[31096-31115]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:",
      "info" : "SwitchCase[30287-30345]:SwitchCase[31122-31180]"
    }, {
      "left" : "return Token.EOF;",
      "right" : "return Token.EOF;",
      "info" : "ReturnStatement[30354-30371]:ReturnStatement[31189-31206]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:",
      "info" : "SwitchCase[30378-30436]:SwitchCase[31213-31271]"
    }, {
      "left" : "return Token.EOL;",
      "right" : "return Token.EOL;",
      "info" : "ReturnStatement[30445-30462]:ReturnStatement[31280-31297]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:",
      "info" : "SwitchCase[30469-30533]:SwitchCase[31304-31368]"
    }, {
      "left" : "return Token.ENTERWITH;",
      "right" : "return Token.ENTERWITH;",
      "info" : "ReturnStatement[30542-30565]:ReturnStatement[31377-31400]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:",
      "info" : "SwitchCase[30572-30636]:SwitchCase[31407-31471]"
    }, {
      "left" : "return Token.LEAVEWITH;",
      "right" : "return Token.LEAVEWITH;",
      "info" : "ReturnStatement[30645-30668]:ReturnStatement[31480-31503]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:",
      "info" : "SwitchCase[30675-30736]:SwitchCase[31510-31571]"
    }, {
      "left" : "return Token.RETURN;",
      "right" : "return Token.RETURN;",
      "info" : "ReturnStatement[30745-30765]:ReturnStatement[31580-31600]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:",
      "info" : "SwitchCase[30772-30831]:SwitchCase[31607-31666]"
    }, {
      "left" : "return Token.GOTO;",
      "right" : "return Token.GOTO;",
      "info" : "ReturnStatement[30840-30858]:ReturnStatement[31675-31693]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:",
      "info" : "SwitchCase[30865-30924]:SwitchCase[31700-31759]"
    }, {
      "left" : "return Token.IFEQ;",
      "right" : "return Token.IFEQ;",
      "info" : "ReturnStatement[30933-30951]:ReturnStatement[31768-31786]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:",
      "info" : "SwitchCase[30958-31017]:SwitchCase[31793-31852]"
    }, {
      "left" : "return Token.IFNE;",
      "right" : "return Token.IFNE;",
      "info" : "ReturnStatement[31026-31044]:ReturnStatement[31861-31879]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:",
      "info" : "SwitchCase[31051-31113]:SwitchCase[31886-31948]"
    }, {
      "left" : "return Token.SETNAME;",
      "right" : "return Token.SETNAME;",
      "info" : "ReturnStatement[31122-31143]:ReturnStatement[31957-31978]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:",
      "info" : "SwitchCase[31150-31210]:SwitchCase[31985-32045]"
    }, {
      "left" : "return Token.BITOR;",
      "right" : "return Token.BITOR;",
      "info" : "ReturnStatement[31219-31238]:ReturnStatement[32054-32073]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:",
      "info" : "SwitchCase[31245-31306]:SwitchCase[32080-32141]"
    }, {
      "left" : "return Token.BITXOR;",
      "right" : "return Token.BITXOR;",
      "info" : "ReturnStatement[31315-31335]:ReturnStatement[32150-32170]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:",
      "info" : "SwitchCase[31342-31403]:SwitchCase[32177-32238]"
    }, {
      "left" : "return Token.BITAND;",
      "right" : "return Token.BITAND;",
      "info" : "ReturnStatement[31412-31432]:ReturnStatement[32247-32267]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:",
      "info" : "SwitchCase[31439-31496]:SwitchCase[32274-32331]"
    }, {
      "left" : "return Token.EQ;",
      "right" : "return Token.EQ;",
      "info" : "ReturnStatement[31505-31521]:ReturnStatement[32340-32356]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NE:",
      "info" : "SwitchCase[31528-31585]:SwitchCase[32363-32420]"
    }, {
      "left" : "return Token.NE;",
      "right" : "return Token.NE;",
      "info" : "ReturnStatement[31594-31610]:ReturnStatement[32429-32445]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LT:",
      "info" : "SwitchCase[31617-31674]:SwitchCase[32452-32509]"
    }, {
      "left" : "return Token.LT;",
      "right" : "return Token.LT;",
      "info" : "ReturnStatement[31683-31699]:ReturnStatement[32518-32534]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LE:",
      "info" : "SwitchCase[31706-31763]:SwitchCase[32541-32598]"
    }, {
      "left" : "return Token.LE;",
      "right" : "return Token.LE;",
      "info" : "ReturnStatement[31772-31788]:ReturnStatement[32607-32623]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GT:",
      "info" : "SwitchCase[31795-31852]:SwitchCase[32630-32687]"
    }, {
      "left" : "return Token.GT;",
      "right" : "return Token.GT;",
      "info" : "ReturnStatement[31861-31877]:ReturnStatement[32696-32712]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GE:",
      "info" : "SwitchCase[31884-31941]:SwitchCase[32719-32776]"
    }, {
      "left" : "return Token.GE;",
      "right" : "return Token.GE;",
      "info" : "ReturnStatement[31950-31966]:ReturnStatement[32785-32801]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:",
      "info" : "SwitchCase[31973-32031]:SwitchCase[32808-32866]"
    }, {
      "left" : "return Token.LSH;",
      "right" : "return Token.LSH;",
      "info" : "ReturnStatement[32040-32057]:ReturnStatement[32875-32892]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:",
      "info" : "SwitchCase[32064-32122]:SwitchCase[32899-32957]"
    }, {
      "left" : "return Token.RSH;",
      "right" : "return Token.RSH;",
      "info" : "ReturnStatement[32131-32148]:ReturnStatement[32966-32983]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:",
      "info" : "SwitchCase[32155-32214]:SwitchCase[32990-33049]"
    }, {
      "left" : "return Token.URSH;",
      "right" : "return Token.URSH;",
      "info" : "ReturnStatement[32223-32241]:ReturnStatement[33058-33076]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:",
      "info" : "SwitchCase[32248-32306]:SwitchCase[33083-33141]"
    }, {
      "left" : "return Token.ADD;",
      "right" : "return Token.ADD;",
      "info" : "ReturnStatement[32315-32332]:ReturnStatement[33150-33167]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:",
      "info" : "SwitchCase[32339-32397]:SwitchCase[33174-33232]"
    }, {
      "left" : "return Token.SUB;",
      "right" : "return Token.SUB;",
      "info" : "ReturnStatement[32406-32423]:ReturnStatement[33241-33258]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:",
      "info" : "SwitchCase[32430-32488]:SwitchCase[33265-33323]"
    }, {
      "left" : "return Token.MUL;",
      "right" : "return Token.MUL;",
      "info" : "ReturnStatement[32497-32514]:ReturnStatement[33332-33349]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:",
      "info" : "SwitchCase[32521-32579]:SwitchCase[33356-33414]"
    }, {
      "left" : "return Token.DIV;",
      "right" : "return Token.DIV;",
      "info" : "ReturnStatement[32588-32605]:ReturnStatement[33423-33440]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:",
      "info" : "SwitchCase[32612-32670]:SwitchCase[33447-33505]"
    }, {
      "left" : "return Token.MOD;",
      "right" : "return Token.MOD;",
      "info" : "ReturnStatement[32679-32696]:ReturnStatement[33514-33531]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:",
      "info" : "SwitchCase[32703-32761]:SwitchCase[33538-33596]"
    }, {
      "left" : "return Token.NOT;",
      "right" : "return Token.NOT;",
      "info" : "ReturnStatement[32770-32787]:ReturnStatement[33605-33622]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:",
      "info" : "SwitchCase[32794-32855]:SwitchCase[33629-33690]"
    }, {
      "left" : "return Token.BITNOT;",
      "right" : "return Token.BITNOT;",
      "info" : "ReturnStatement[32864-32884]:ReturnStatement[33699-33719]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.POS:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.POS:",
      "info" : "SwitchCase[32891-32949]:SwitchCase[33726-33784]"
    }, {
      "left" : "return Token.POS;",
      "right" : "return Token.POS;",
      "info" : "ReturnStatement[32958-32975]:ReturnStatement[33793-33810]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:",
      "info" : "SwitchCase[32982-33040]:SwitchCase[33817-33875]"
    }, {
      "left" : "return Token.NEG;",
      "right" : "return Token.NEG;",
      "info" : "ReturnStatement[33049-33066]:ReturnStatement[33884-33901]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:",
      "info" : "SwitchCase[33073-33131]:SwitchCase[33908-33966]"
    }, {
      "left" : "return Token.NEW;",
      "right" : "return Token.NEW;",
      "info" : "ReturnStatement[33140-33157]:ReturnStatement[33975-33992]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:",
      "info" : "SwitchCase[33164-33226]:SwitchCase[33999-34061]"
    }, {
      "left" : "return Token.DELPROP;",
      "right" : "return Token.DELPROP;",
      "info" : "ReturnStatement[33235-33256]:ReturnStatement[34070-34091]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:",
      "info" : "SwitchCase[33263-33324]:SwitchCase[34098-34159]"
    }, {
      "left" : "return Token.TYPEOF;",
      "right" : "return Token.TYPEOF;",
      "info" : "ReturnStatement[33333-33353]:ReturnStatement[34168-34188]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:",
      "info" : "SwitchCase[33360-33422]:SwitchCase[34195-34257]"
    }, {
      "left" : "return Token.GETPROP;",
      "right" : "return Token.GETPROP;",
      "info" : "ReturnStatement[33431-33452]:ReturnStatement[34266-34287]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:",
      "info" : "SwitchCase[33459-33521]:SwitchCase[34294-34356]"
    }, {
      "left" : "return Token.SETPROP;",
      "right" : "return Token.SETPROP;",
      "info" : "ReturnStatement[33530-33551]:ReturnStatement[34365-34386]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:",
      "info" : "SwitchCase[33558-33620]:SwitchCase[34393-34455]"
    }, {
      "left" : "return Token.GETELEM;",
      "right" : "return Token.GETELEM;",
      "info" : "ReturnStatement[33629-33650]:ReturnStatement[34464-34485]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:",
      "info" : "SwitchCase[33657-33719]:SwitchCase[34492-34554]"
    }, {
      "left" : "return Token.SETELEM;",
      "right" : "return Token.SETELEM;",
      "info" : "ReturnStatement[33728-33749]:ReturnStatement[34563-34584]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:",
      "info" : "SwitchCase[33756-33815]:SwitchCase[34591-34650]"
    }, {
      "left" : "return Token.CALL;",
      "right" : "return Token.CALL;",
      "info" : "ReturnStatement[33824-33842]:ReturnStatement[34659-34677]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:",
      "info" : "SwitchCase[33849-33908]:SwitchCase[34684-34743]"
    }, {
      "left" : "return Token.NAME;",
      "right" : "return Token.NAME;",
      "info" : "ReturnStatement[33917-33935]:ReturnStatement[34752-34770]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:",
      "info" : "SwitchCase[33942-34003]:SwitchCase[34777-34838]"
    }, {
      "left" : "return Token.NUMBER;",
      "right" : "return Token.NUMBER;",
      "info" : "ReturnStatement[34012-34032]:ReturnStatement[34847-34867]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:",
      "info" : "SwitchCase[34039-34100]:SwitchCase[34874-34935]"
    }, {
      "left" : "return Token.STRING;",
      "right" : "return Token.STRING;",
      "info" : "ReturnStatement[34109-34129]:ReturnStatement[34944-34964]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:",
      "info" : "SwitchCase[34136-34195]:SwitchCase[34971-35030]"
    }, {
      "left" : "return Token.NULL;",
      "right" : "return Token.NULL;",
      "info" : "ReturnStatement[34204-34222]:ReturnStatement[35039-35057]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:",
      "info" : "SwitchCase[34229-34288]:SwitchCase[35064-35123]"
    }, {
      "left" : "return Token.THIS;",
      "right" : "return Token.THIS;",
      "info" : "ReturnStatement[34297-34315]:ReturnStatement[35132-35150]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:",
      "info" : "SwitchCase[34322-34382]:SwitchCase[35157-35217]"
    }, {
      "left" : "return Token.FALSE;",
      "right" : "return Token.FALSE;",
      "info" : "ReturnStatement[34391-34410]:ReturnStatement[35226-35245]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:",
      "info" : "SwitchCase[34417-34476]:SwitchCase[35252-35311]"
    }, {
      "left" : "return Token.TRUE;",
      "right" : "return Token.TRUE;",
      "info" : "ReturnStatement[34485-34503]:ReturnStatement[35320-35338]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:",
      "info" : "SwitchCase[34510-34569]:SwitchCase[35345-35404]"
    }, {
      "left" : "return Token.SHEQ;",
      "right" : "return Token.SHEQ;",
      "info" : "ReturnStatement[34578-34596]:ReturnStatement[35413-35431]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:",
      "info" : "SwitchCase[34603-34662]:SwitchCase[35438-35497]"
    }, {
      "left" : "return Token.SHNE;",
      "right" : "return Token.SHNE;",
      "info" : "ReturnStatement[34671-34689]:ReturnStatement[35506-35524]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:",
      "info" : "SwitchCase[34696-34757]:SwitchCase[35531-35592]"
    }, {
      "left" : "return Token.REGEXP;",
      "right" : "return Token.REGEXP;",
      "info" : "ReturnStatement[34766-34786]:ReturnStatement[35601-35621]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:",
      "info" : "SwitchCase[34793-34856]:SwitchCase[35628-35691]"
    }, {
      "left" : "return Token.BINDNAME;",
      "right" : "return Token.BINDNAME;",
      "info" : "ReturnStatement[34865-34887]:ReturnStatement[35700-35722]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:",
      "info" : "SwitchCase[34894-34954]:SwitchCase[35729-35789]"
    }, {
      "left" : "return Token.THROW;",
      "right" : "return Token.THROW;",
      "info" : "ReturnStatement[34963-34982]:ReturnStatement[35798-35817]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:",
      "info" : "SwitchCase[34989-35051]:SwitchCase[35824-35886]"
    }, {
      "left" : "return Token.RETHROW;",
      "right" : "return Token.RETHROW;",
      "info" : "ReturnStatement[35060-35081]:ReturnStatement[35895-35916]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IN:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IN:",
      "info" : "SwitchCase[35088-35145]:SwitchCase[35923-35980]"
    }, {
      "left" : "return Token.IN;",
      "right" : "return Token.IN;",
      "info" : "ReturnStatement[35154-35170]:ReturnStatement[35989-36005]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:",
      "info" : "SwitchCase[35177-35242]:SwitchCase[36012-36077]"
    }, {
      "left" : "return Token.INSTANCEOF;",
      "right" : "return Token.INSTANCEOF;",
      "info" : "ReturnStatement[35251-35275]:ReturnStatement[36086-36110]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:",
      "info" : "SwitchCase[35282-35347]:SwitchCase[36117-36182]"
    }, {
      "left" : "return Token.LOCAL_LOAD;",
      "right" : "return Token.LOCAL_LOAD;",
      "info" : "ReturnStatement[35356-35380]:ReturnStatement[36191-36215]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:",
      "info" : "SwitchCase[35387-35448]:SwitchCase[36222-36283]"
    }, {
      "left" : "return Token.GETVAR;",
      "right" : "return Token.GETVAR;",
      "info" : "ReturnStatement[35457-35477]:ReturnStatement[36292-36312]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:",
      "info" : "SwitchCase[35484-35545]:SwitchCase[36319-36380]"
    }, {
      "left" : "return Token.SETVAR;",
      "right" : "return Token.SETVAR;",
      "info" : "ReturnStatement[35554-35574]:ReturnStatement[36389-36409]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:",
      "info" : "SwitchCase[35581-35647]:SwitchCase[36416-36482]"
    }, {
      "left" : "return Token.CATCH_SCOPE;",
      "right" : "return Token.CATCH_SCOPE;",
      "info" : "ReturnStatement[35656-35681]:ReturnStatement[36491-36516]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:",
      "info" : "SwitchCase[35688-35757]:SwitchCase[36523-36592]"
    }, {
      "left" : "return Token.ENUM_INIT_KEYS;",
      "right" : "return Token.ENUM_INIT_KEYS;",
      "info" : "ReturnStatement[35766-35794]:ReturnStatement[36601-36629]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:",
      "info" : "SwitchCase[35801-35872]:SwitchCase[36636-36707]"
    }, {
      "left" : "return Token.ENUM_INIT_VALUES;",
      "right" : "return Token.ENUM_INIT_VALUES;",
      "info" : "ReturnStatement[35881-35911]:ReturnStatement[36716-36746]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:",
      "info" : "SwitchCase[35918-35982]:SwitchCase[36753-36817]"
    }, {
      "left" : "return Token.ENUM_NEXT;",
      "right" : "return Token.ENUM_NEXT;",
      "info" : "ReturnStatement[35991-36014]:ReturnStatement[36826-36849]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:",
      "info" : "SwitchCase[36021-36083]:SwitchCase[36856-36918]"
    }, {
      "left" : "return Token.ENUM_ID;",
      "right" : "return Token.ENUM_ID;",
      "info" : "ReturnStatement[36092-36113]:ReturnStatement[36927-36948]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:",
      "info" : "SwitchCase[36120-36181]:SwitchCase[36955-37016]"
    }, {
      "left" : "return Token.THISFN;",
      "right" : "return Token.THISFN;",
      "info" : "ReturnStatement[36190-36210]:ReturnStatement[37025-37045]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:",
      "info" : "SwitchCase[36217-36285]:SwitchCase[37052-37120]"
    }, {
      "left" : "return Token.RETURN_RESULT;",
      "right" : "return Token.RETURN_RESULT;",
      "info" : "ReturnStatement[36294-36321]:ReturnStatement[37129-37156]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:",
      "info" : "SwitchCase[36328-36391]:SwitchCase[37163-37226]"
    }, {
      "left" : "return Token.ARRAYLIT;",
      "right" : "return Token.ARRAYLIT;",
      "info" : "ReturnStatement[36400-36422]:ReturnStatement[37235-37257]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:",
      "info" : "SwitchCase[36429-36493]:SwitchCase[37264-37328]"
    }, {
      "left" : "return Token.OBJECTLIT;",
      "right" : "return Token.OBJECTLIT;",
      "info" : "ReturnStatement[36502-36525]:ReturnStatement[37337-37360]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:",
      "info" : "SwitchCase[36532-36594]:SwitchCase[37367-37429]"
    }, {
      "left" : "return Token.GET_REF;",
      "right" : "return Token.GET_REF;",
      "info" : "ReturnStatement[36603-36624]:ReturnStatement[37438-37459]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:",
      "info" : "SwitchCase[36631-36693]:SwitchCase[37466-37528]"
    }, {
      "left" : "return Token.SET_REF;",
      "right" : "return Token.SET_REF;",
      "info" : "ReturnStatement[36702-36723]:ReturnStatement[37537-37558]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:",
      "info" : "SwitchCase[36730-36792]:SwitchCase[37565-37627]"
    }, {
      "left" : "return Token.DEL_REF;",
      "right" : "return Token.DEL_REF;",
      "info" : "ReturnStatement[36801-36822]:ReturnStatement[37636-37657]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:",
      "info" : "SwitchCase[36829-36892]:SwitchCase[37664-37727]"
    }, {
      "left" : "return Token.REF_CALL;",
      "right" : "return Token.REF_CALL;",
      "info" : "ReturnStatement[36901-36923]:ReturnStatement[37736-37758]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:",
      "info" : "SwitchCase[36930-36996]:SwitchCase[37765-37831]"
    }, {
      "left" : "return Token.REF_SPECIAL;",
      "right" : "return Token.REF_SPECIAL;",
      "info" : "ReturnStatement[37005-37030]:ReturnStatement[37840-37865]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:",
      "info" : "SwitchCase[37037-37108]:SwitchCase[37872-37943]"
    }, {
      "left" : "return Token.DEFAULTNAMESPACE;",
      "right" : "return Token.DEFAULTNAMESPACE;",
      "info" : "ReturnStatement[37117-37147]:ReturnStatement[37952-37982]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:",
      "info" : "SwitchCase[37154-37219]:SwitchCase[37989-38054]"
    }, {
      "left" : "return Token.ESCXMLTEXT;",
      "right" : "return Token.ESCXMLTEXT;",
      "info" : "ReturnStatement[37228-37252]:ReturnStatement[38063-38087]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:",
      "info" : "SwitchCase[37259-37324]:SwitchCase[38094-38159]"
    }, {
      "left" : "return Token.ESCXMLATTR;",
      "right" : "return Token.ESCXMLATTR;",
      "info" : "ReturnStatement[37333-37357]:ReturnStatement[38168-38192]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:",
      "info" : "SwitchCase[37364-37429]:SwitchCase[38199-38264]"
    }, {
      "left" : "return Token.REF_MEMBER;",
      "right" : "return Token.REF_MEMBER;",
      "info" : "ReturnStatement[37438-37462]:ReturnStatement[38273-38297]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:",
      "info" : "SwitchCase[37469-37537]:SwitchCase[38304-38372]"
    }, {
      "left" : "return Token.REF_NS_MEMBER;",
      "right" : "return Token.REF_NS_MEMBER;",
      "info" : "ReturnStatement[37546-37573]:ReturnStatement[38381-38408]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:",
      "info" : "SwitchCase[37580-37643]:SwitchCase[38415-38478]"
    }, {
      "left" : "return Token.REF_NAME;",
      "right" : "return Token.REF_NAME;",
      "info" : "ReturnStatement[37652-37674]:ReturnStatement[38487-38509]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:",
      "info" : "SwitchCase[37681-37747]:SwitchCase[38516-38582]"
    }, {
      "left" : "return Token.REF_NS_NAME;",
      "right" : "return Token.REF_NS_NAME;",
      "info" : "ReturnStatement[37756-37781]:ReturnStatement[38591-38616]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:",
      "info" : "SwitchCase[37788-37846]:SwitchCase[38623-38681]"
    }, {
      "left" : "return Token.TRY;",
      "right" : "return Token.TRY;",
      "info" : "ReturnStatement[37855-37872]:ReturnStatement[38690-38707]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:",
      "info" : "SwitchCase[37879-37938]:SwitchCase[38714-38773]"
    }, {
      "left" : "return Token.SEMI;",
      "right" : "return Token.SEMI;",
      "info" : "ReturnStatement[37947-37965]:ReturnStatement[38782-38800]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LB:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LB:",
      "info" : "SwitchCase[37972-38029]:SwitchCase[38807-38864]"
    }, {
      "left" : "return Token.LB;",
      "right" : "return Token.LB;",
      "info" : "ReturnStatement[38038-38054]:ReturnStatement[38873-38889]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RB:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RB:",
      "info" : "SwitchCase[38061-38118]:SwitchCase[38896-38953]"
    }, {
      "left" : "return Token.RB;",
      "right" : "return Token.RB;",
      "info" : "ReturnStatement[38127-38143]:ReturnStatement[38962-38978]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LC:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LC:",
      "info" : "SwitchCase[38150-38207]:SwitchCase[38985-39042]"
    }, {
      "left" : "return Token.LC;",
      "right" : "return Token.LC;",
      "info" : "ReturnStatement[38216-38232]:ReturnStatement[39051-39067]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RC:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RC:",
      "info" : "SwitchCase[38239-38296]:SwitchCase[39074-39131]"
    }, {
      "left" : "return Token.RC;",
      "right" : "return Token.RC;",
      "info" : "ReturnStatement[38305-38321]:ReturnStatement[39140-39156]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LP:",
      "info" : "SwitchCase[38328-38385]:SwitchCase[39163-39220]"
    }, {
      "left" : "return Token.LP;",
      "right" : "return Token.LP;",
      "info" : "ReturnStatement[38394-38410]:ReturnStatement[39229-39245]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RP:",
      "info" : "SwitchCase[38417-38474]:SwitchCase[39252-39309]"
    }, {
      "left" : "return Token.RP;",
      "right" : "return Token.RP;",
      "info" : "ReturnStatement[38483-38499]:ReturnStatement[39318-39334]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:",
      "info" : "SwitchCase[38506-38566]:SwitchCase[39341-39401]"
    }, {
      "left" : "return Token.COMMA;",
      "right" : "return Token.COMMA;",
      "info" : "ReturnStatement[38575-38594]:ReturnStatement[39410-39429]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:",
      "info" : "SwitchCase[38601-38662]:SwitchCase[39436-39497]"
    }, {
      "left" : "return Token.ASSIGN;",
      "right" : "return Token.ASSIGN;",
      "info" : "ReturnStatement[38671-38691]:ReturnStatement[39506-39526]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[38698-38765]:SwitchCase[39533-39600]"
    }, {
      "left" : "return Token.ASSIGN_BITOR;",
      "right" : "return Token.ASSIGN_BITOR;",
      "info" : "ReturnStatement[38774-38800]:ReturnStatement[39609-39635]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[38807-38875]:SwitchCase[39642-39710]"
    }, {
      "left" : "return Token.ASSIGN_BITXOR;",
      "right" : "return Token.ASSIGN_BITXOR;",
      "info" : "ReturnStatement[38884-38911]:ReturnStatement[39719-39746]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[38918-38986]:SwitchCase[39753-39821]"
    }, {
      "left" : "return Token.ASSIGN_BITAND;",
      "right" : "return Token.ASSIGN_BITAND;",
      "info" : "ReturnStatement[38995-39022]:ReturnStatement[39830-39857]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:",
      "info" : "SwitchCase[39029-39094]:SwitchCase[39864-39929]"
    }, {
      "left" : "return Token.ASSIGN_LSH;",
      "right" : "return Token.ASSIGN_LSH;",
      "info" : "ReturnStatement[39103-39127]:ReturnStatement[39938-39962]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:",
      "info" : "SwitchCase[39134-39199]:SwitchCase[39969-40034]"
    }, {
      "left" : "return Token.ASSIGN_RSH;",
      "right" : "return Token.ASSIGN_RSH;",
      "info" : "ReturnStatement[39208-39232]:ReturnStatement[40043-40067]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:",
      "info" : "SwitchCase[39239-39305]:SwitchCase[40074-40140]"
    }, {
      "left" : "return Token.ASSIGN_URSH;",
      "right" : "return Token.ASSIGN_URSH;",
      "info" : "ReturnStatement[39314-39339]:ReturnStatement[40149-40174]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:",
      "info" : "SwitchCase[39346-39411]:SwitchCase[40181-40246]"
    }, {
      "left" : "return Token.ASSIGN_ADD;",
      "right" : "return Token.ASSIGN_ADD;",
      "info" : "ReturnStatement[39420-39444]:ReturnStatement[40255-40279]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:",
      "info" : "SwitchCase[39451-39516]:SwitchCase[40286-40351]"
    }, {
      "left" : "return Token.ASSIGN_SUB;",
      "right" : "return Token.ASSIGN_SUB;",
      "info" : "ReturnStatement[39525-39549]:ReturnStatement[40360-40384]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:",
      "info" : "SwitchCase[39556-39621]:SwitchCase[40391-40456]"
    }, {
      "left" : "return Token.ASSIGN_MUL;",
      "right" : "return Token.ASSIGN_MUL;",
      "info" : "ReturnStatement[39630-39654]:ReturnStatement[40465-40489]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:",
      "info" : "SwitchCase[39661-39726]:SwitchCase[40496-40561]"
    }, {
      "left" : "return Token.ASSIGN_DIV;",
      "right" : "return Token.ASSIGN_DIV;",
      "info" : "ReturnStatement[39735-39759]:ReturnStatement[40570-40594]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:",
      "info" : "SwitchCase[39766-39831]:SwitchCase[40601-40666]"
    }, {
      "left" : "return Token.ASSIGN_MOD;",
      "right" : "return Token.ASSIGN_MOD;",
      "info" : "ReturnStatement[39840-39864]:ReturnStatement[40675-40699]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:",
      "info" : "SwitchCase[39871-39930]:SwitchCase[40706-40765]"
    }, {
      "left" : "return Token.HOOK;",
      "right" : "return Token.HOOK;",
      "info" : "ReturnStatement[39939-39957]:ReturnStatement[40774-40792]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:",
      "info" : "SwitchCase[39964-40024]:SwitchCase[40799-40859]"
    }, {
      "left" : "return Token.COLON;",
      "right" : "return Token.COLON;",
      "info" : "ReturnStatement[40033-40052]:ReturnStatement[40868-40887]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.OR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.OR:",
      "info" : "SwitchCase[40059-40116]:SwitchCase[40894-40951]"
    }, {
      "left" : "return Token.OR;",
      "right" : "return Token.OR;",
      "info" : "ReturnStatement[40125-40141]:ReturnStatement[40960-40976]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.AND:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.AND:",
      "info" : "SwitchCase[40148-40206]:SwitchCase[40983-41041]"
    }, {
      "left" : "return Token.AND;",
      "right" : "return Token.AND;",
      "info" : "ReturnStatement[40215-40232]:ReturnStatement[41050-41067]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.INC:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.INC:",
      "info" : "SwitchCase[40239-40297]:SwitchCase[41074-41132]"
    }, {
      "left" : "return Token.INC;",
      "right" : "return Token.INC;",
      "info" : "ReturnStatement[40306-40323]:ReturnStatement[41141-41158]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:",
      "info" : "SwitchCase[40330-40388]:SwitchCase[41165-41223]"
    }, {
      "left" : "return Token.DEC;",
      "right" : "return Token.DEC;",
      "info" : "ReturnStatement[40397-40414]:ReturnStatement[41232-41249]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:",
      "info" : "SwitchCase[40421-40479]:SwitchCase[41256-41314]"
    }, {
      "left" : "return Token.DOT;",
      "right" : "return Token.DOT;",
      "info" : "ReturnStatement[40488-40505]:ReturnStatement[41323-41340]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:",
      "info" : "SwitchCase[40512-40575]:SwitchCase[41347-41410]"
    }, {
      "left" : "return Token.FUNCTION;",
      "right" : "return Token.FUNCTION;",
      "info" : "ReturnStatement[40584-40606]:ReturnStatement[41419-41441]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:",
      "info" : "SwitchCase[40613-40674]:SwitchCase[41448-41509]"
    }, {
      "left" : "return Token.EXPORT;",
      "right" : "return Token.EXPORT;",
      "info" : "ReturnStatement[40683-40703]:ReturnStatement[41518-41538]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:",
      "info" : "SwitchCase[40710-40771]:SwitchCase[41545-41606]"
    }, {
      "left" : "return Token.IMPORT;",
      "right" : "return Token.IMPORT;",
      "info" : "ReturnStatement[40780-40800]:ReturnStatement[41615-41635]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IF:",
      "info" : "SwitchCase[40807-40864]:SwitchCase[41642-41699]"
    }, {
      "left" : "return Token.IF;",
      "right" : "return Token.IF;",
      "info" : "ReturnStatement[40873-40889]:ReturnStatement[41708-41724]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:",
      "info" : "SwitchCase[40896-40955]:SwitchCase[41731-41790]"
    }, {
      "left" : "return Token.ELSE;",
      "right" : "return Token.ELSE;",
      "info" : "ReturnStatement[40964-40982]:ReturnStatement[41799-41817]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:",
      "info" : "SwitchCase[40989-41050]:SwitchCase[41824-41885]"
    }, {
      "left" : "return Token.SWITCH;",
      "right" : "return Token.SWITCH;",
      "info" : "ReturnStatement[41059-41079]:ReturnStatement[41894-41914]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:",
      "info" : "SwitchCase[41086-41145]:SwitchCase[41921-41980]"
    }, {
      "left" : "return Token.CASE;",
      "right" : "return Token.CASE;",
      "info" : "ReturnStatement[41154-41172]:ReturnStatement[41989-42007]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:",
      "info" : "SwitchCase[41179-41241]:SwitchCase[42014-42076]"
    }, {
      "left" : "return Token.DEFAULT;",
      "right" : "return Token.DEFAULT;",
      "info" : "ReturnStatement[41250-41271]:ReturnStatement[42085-42106]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:",
      "info" : "SwitchCase[41278-41338]:SwitchCase[42113-42173]"
    }, {
      "left" : "return Token.WHILE;",
      "right" : "return Token.WHILE;",
      "info" : "ReturnStatement[41347-41366]:ReturnStatement[42182-42201]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DO:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DO:",
      "info" : "SwitchCase[41373-41430]:SwitchCase[42208-42265]"
    }, {
      "left" : "return Token.DO;",
      "right" : "return Token.DO;",
      "info" : "ReturnStatement[41439-41455]:ReturnStatement[42274-42290]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:",
      "info" : "SwitchCase[41462-41520]:SwitchCase[42297-42355]"
    }, {
      "left" : "return Token.FOR;",
      "right" : "return Token.FOR;",
      "info" : "ReturnStatement[41529-41546]:ReturnStatement[42364-42381]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:",
      "info" : "SwitchCase[41553-41613]:SwitchCase[42388-42448]"
    }, {
      "left" : "return Token.BREAK;",
      "right" : "return Token.BREAK;",
      "info" : "ReturnStatement[41622-41641]:ReturnStatement[42457-42476]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:",
      "info" : "SwitchCase[41648-41711]:SwitchCase[42483-42546]"
    }, {
      "left" : "return Token.CONTINUE;",
      "right" : "return Token.CONTINUE;",
      "info" : "ReturnStatement[41720-41742]:ReturnStatement[42555-42577]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:",
      "info" : "SwitchCase[41749-41807]:SwitchCase[42584-42642]"
    }, {
      "left" : "return Token.VAR;",
      "right" : "return Token.VAR;",
      "info" : "ReturnStatement[41816-41833]:ReturnStatement[42651-42668]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:",
      "info" : "SwitchCase[41840-41899]:SwitchCase[42675-42734]"
    }, {
      "left" : "return Token.WITH;",
      "right" : "return Token.WITH;",
      "info" : "ReturnStatement[41908-41926]:ReturnStatement[42743-42761]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:",
      "info" : "SwitchCase[41933-41993]:SwitchCase[42768-42828]"
    }, {
      "left" : "return Token.CATCH;",
      "right" : "return Token.CATCH;",
      "info" : "ReturnStatement[42002-42021]:ReturnStatement[42837-42856]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:",
      "info" : "SwitchCase[42028-42090]:SwitchCase[42863-42925]"
    }, {
      "left" : "return Token.FINALLY;",
      "right" : "return Token.FINALLY;",
      "info" : "ReturnStatement[42099-42120]:ReturnStatement[42934-42955]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:",
      "info" : "SwitchCase[42127-42186]:SwitchCase[42962-43021]"
    }, {
      "left" : "return Token.VOID;",
      "right" : "return Token.VOID;",
      "info" : "ReturnStatement[42195-42213]:ReturnStatement[43030-43048]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:",
      "info" : "SwitchCase[42220-42283]:SwitchCase[43055-43118]"
    }, {
      "left" : "return Token.RESERVED;",
      "right" : "return Token.RESERVED;",
      "info" : "ReturnStatement[42292-42314]:ReturnStatement[43127-43149]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:",
      "info" : "SwitchCase[42321-42381]:SwitchCase[43156-43216]"
    }, {
      "left" : "return Token.EMPTY;",
      "right" : "return Token.EMPTY;",
      "info" : "ReturnStatement[42390-42409]:ReturnStatement[43225-43244]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:",
      "info" : "SwitchCase[42416-42476]:SwitchCase[43251-43311]"
    }, {
      "left" : "return Token.BLOCK;",
      "right" : "return Token.BLOCK;",
      "info" : "ReturnStatement[42485-42504]:ReturnStatement[43320-43339]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:",
      "info" : "SwitchCase[42511-42571]:SwitchCase[43346-43406]"
    }, {
      "left" : "return Token.LABEL;",
      "right" : "return Token.LABEL;",
      "info" : "ReturnStatement[42580-42599]:ReturnStatement[43415-43434]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:",
      "info" : "SwitchCase[42606-42667]:SwitchCase[43441-43502]"
    }, {
      "left" : "return Token.TARGET;",
      "right" : "return Token.TARGET;",
      "info" : "ReturnStatement[42676-42696]:ReturnStatement[43511-43531]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:",
      "info" : "SwitchCase[42703-42762]:SwitchCase[43538-43597]"
    }, {
      "left" : "return Token.LOOP;",
      "right" : "return Token.LOOP;",
      "info" : "ReturnStatement[42771-42789]:ReturnStatement[43606-43624]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:",
      "info" : "SwitchCase[42796-42860]:SwitchCase[43631-43695]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:",
      "info" : "SwitchCase[42867-42933]:SwitchCase[43702-43768]"
    }, {
      "left" : "return Token.EXPR_RESULT;",
      "right" : "return Token.EXPR_RESULT;",
      "info" : "ReturnStatement[42942-42967]:ReturnStatement[43777-43802]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:",
      "info" : "SwitchCase[42974-43032]:SwitchCase[43809-43867]"
    }, {
      "left" : "return Token.JSR;",
      "right" : "return Token.JSR;",
      "info" : "ReturnStatement[43041-43058]:ReturnStatement[43876-43893]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:",
      "info" : "SwitchCase[43065-43126]:SwitchCase[43900-43961]"
    }, {
      "left" : "return Token.SCRIPT;",
      "right" : "return Token.SCRIPT;",
      "info" : "ReturnStatement[43135-43155]:ReturnStatement[43970-43990]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:",
      "info" : "SwitchCase[43162-43227]:SwitchCase[43997-44062]"
    }, {
      "left" : "return Token.TYPEOFNAME;",
      "right" : "return Token.TYPEOFNAME;",
      "info" : "ReturnStatement[43236-43260]:ReturnStatement[44071-44095]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:",
      "info" : "SwitchCase[43267-43331]:SwitchCase[44102-44166]"
    }, {
      "left" : "return Token.USE_STACK;",
      "right" : "return Token.USE_STACK;",
      "info" : "ReturnStatement[43340-43363]:ReturnStatement[44175-44198]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:",
      "info" : "SwitchCase[43370-43435]:SwitchCase[44205-44270]"
    }, {
      "left" : "return Token.SETPROP_OP;",
      "right" : "return Token.SETPROP_OP;",
      "info" : "ReturnStatement[43444-43468]:ReturnStatement[44279-44303]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:",
      "info" : "SwitchCase[43475-43540]:SwitchCase[44310-44375]"
    }, {
      "left" : "return Token.SETELEM_OP;",
      "right" : "return Token.SETELEM_OP;",
      "info" : "ReturnStatement[43549-43573]:ReturnStatement[44384-44408]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:",
      "info" : "SwitchCase[43580-43646]:SwitchCase[44415-44481]"
    }, {
      "left" : "return Token.LOCAL_BLOCK;",
      "right" : "return Token.LOCAL_BLOCK;",
      "info" : "ReturnStatement[43655-43680]:ReturnStatement[44490-44515]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:",
      "info" : "SwitchCase[43687-43752]:SwitchCase[44522-44587]"
    }, {
      "left" : "return Token.SET_REF_OP;",
      "right" : "return Token.SET_REF_OP;",
      "info" : "ReturnStatement[43761-43785]:ReturnStatement[44596-44620]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:",
      "info" : "SwitchCase[43792-43853]:SwitchCase[44627-44688]"
    }, {
      "left" : "return Token.DOTDOT;",
      "right" : "return Token.DOTDOT;",
      "info" : "ReturnStatement[43862-43882]:ReturnStatement[44697-44717]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:",
      "info" : "SwitchCase[43889-43954]:SwitchCase[44724-44789]"
    }, {
      "left" : "return Token.COLONCOLON;",
      "right" : "return Token.COLONCOLON;",
      "info" : "ReturnStatement[43963-43987]:ReturnStatement[44798-44822]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XML:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XML:",
      "info" : "SwitchCase[43994-44052]:SwitchCase[44829-44887]"
    }, {
      "left" : "return Token.XML;",
      "right" : "return Token.XML;",
      "info" : "ReturnStatement[44061-44078]:ReturnStatement[44896-44913]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:",
      "info" : "SwitchCase[44085-44148]:SwitchCase[44920-44983]"
    }, {
      "left" : "return Token.DOTQUERY;",
      "right" : "return Token.DOTQUERY;",
      "info" : "ReturnStatement[44157-44179]:ReturnStatement[44992-45014]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:",
      "info" : "SwitchCase[44186-44248]:SwitchCase[45021-45083]"
    }, {
      "left" : "return Token.XMLATTR;",
      "right" : "return Token.XMLATTR;",
      "info" : "ReturnStatement[44257-44278]:ReturnStatement[45092-45113]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:",
      "info" : "SwitchCase[44285-44346]:SwitchCase[45120-45181]"
    }, {
      "left" : "return Token.XMLEND;",
      "right" : "return Token.XMLEND;",
      "info" : "ReturnStatement[44355-44375]:ReturnStatement[45190-45210]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:",
      "info" : "SwitchCase[44382-44446]:SwitchCase[45217-45281]"
    }, {
      "left" : "return Token.TO_OBJECT;",
      "right" : "return Token.TO_OBJECT;",
      "info" : "ReturnStatement[44455-44478]:ReturnStatement[45290-45313]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:",
      "info" : "SwitchCase[44485-44549]:SwitchCase[45320-45384]"
    }, {
      "left" : "return Token.TO_DOUBLE;",
      "right" : "return Token.TO_DOUBLE;",
      "info" : "ReturnStatement[44558-44581]:ReturnStatement[45393-45416]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GET:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GET:",
      "info" : "SwitchCase[44588-44646]:SwitchCase[45423-45481]"
    }, {
      "left" : "return Token.GET;",
      "right" : "return Token.GET;",
      "info" : "ReturnStatement[44655-44672]:ReturnStatement[45490-45507]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET:",
      "info" : "SwitchCase[44679-44737]:SwitchCase[45514-45572]"
    }, {
      "left" : "return Token.SET;",
      "right" : "return Token.SET;",
      "info" : "ReturnStatement[44746-44763]:ReturnStatement[45581-45598]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:",
      "info" : "SwitchCase[44770-44830]:SwitchCase[45605-45665]"
    }, {
      "left" : "return Token.CONST;",
      "right" : "return Token.CONST;",
      "info" : "ReturnStatement[44839-44858]:ReturnStatement[45674-45693]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:",
      "info" : "SwitchCase[44865-44928]:SwitchCase[45700-45763]"
    }, {
      "left" : "return Token.SETCONST;",
      "right" : "return Token.SETCONST;",
      "info" : "ReturnStatement[44937-44959]:ReturnStatement[45772-45794]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:",
      "info" : "SwitchCase[44966-45029]:SwitchCase[45801-45864]"
    }, {
      "left" : "return Token.DEBUGGER;",
      "right" : "return Token.DEBUGGER;",
      "info" : "ReturnStatement[45038-45060]:ReturnStatement[45873-45895]"
    }, {
      "left" : "throw new IllegalStateException(String.valueOf(token));",
      "right" : "throw new IllegalStateException(String.valueOf(token));",
      "info" : "ThrowStatement[45098-45153]:ThrowStatement[45933-45988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45264-45325]:Block[46099-46160]"
    }, {
      "left" : "return new Node(type).clonePropsFrom(templateNode);",
      "right" : "return new Node(type).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45270-45321]:ReturnStatement[46105-46156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45373-45442]:Block[46208-46277]"
    }, {
      "left" : "return new Node(type, child1).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45379-45438]:ReturnStatement[46214-46273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45503-45580]:Block[46338-46415]"
    }, {
      "left" : "return new Node(type, child1, child2).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1, child2).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45509-45576]:ReturnStatement[46344-46411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45654-45739]:Block[46489-46574]"
    }, {
      "left" : "return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45660-45735]:ReturnStatement[46495-46570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45784-45852]:Block[46619-46687]"
    }, {
      "left" : "return Node.newString(value).clonePropsFrom(templateNode);",
      "right" : "return Node.newString(value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45790-45848]:ReturnStatement[46625-46683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45907-45981]:Block[46742-46816]"
    }, {
      "left" : "return Node.newString(type, value).clonePropsFrom(templateNode);",
      "right" : "return Node.newString(type, value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[45913-45977]:ReturnStatement[46748-46812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46026-46094]:Block[46861-46929]"
    }, {
      "left" : "return Node.newNumber(value).clonePropsFrom(templateNode);",
      "right" : "return Node.newNumber(value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[46032-46090]:ReturnStatement[46867-46925]"
    } ]
  },
  "interFileMappings" : { }
}