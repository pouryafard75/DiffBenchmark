{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "TypeDeclaration[1777-53334]:TypeDeclaration[1777-53398]"
    }, {
      "left" : "CompilerOptions options = null;",
      "right" : "CompilerOptions options = null;",
      "info" : "FieldDeclaration[2326-2357]:FieldDeclaration[2326-2357]"
    }, {
      "left" : "private PassConfig passes = null;",
      "right" : "private PassConfig passes = null;",
      "info" : "FieldDeclaration[2361-2394]:FieldDeclaration[2361-2394]"
    }, {
      "left" : "private List<CompilerInput> externs;",
      "right" : "private List<CompilerInput> externs;",
      "info" : "FieldDeclaration[2422-2458]:FieldDeclaration[2422-2458]"
    }, {
      "left" : "private List<JSModule> modules;",
      "right" : "private List<JSModule> modules;",
      "info" : "FieldDeclaration[2489-2520]:FieldDeclaration[2489-2520]"
    }, {
      "left" : "private JSModuleGraph moduleGraph;",
      "right" : "private JSModuleGraph moduleGraph;",
      "info" : "FieldDeclaration[2674-2708]:FieldDeclaration[2674-2708]"
    }, {
      "left" : "private List<CompilerInput> inputs;",
      "right" : "private List<CompilerInput> inputs;",
      "info" : "FieldDeclaration[2738-2773]:FieldDeclaration[2738-2773]"
    }, {
      "left" : "private ErrorManager errorManager;",
      "right" : "private ErrorManager errorManager;",
      "info" : "FieldDeclaration[2835-2869]:FieldDeclaration[2835-2869]"
    }, {
      "left" : "Node externsRoot;",
      "right" : "Node externsRoot;",
      "info" : "FieldDeclaration[2900-2917]:FieldDeclaration[2900-2917]"
    }, {
      "left" : "Node jsRoot;",
      "right" : "Node jsRoot;",
      "info" : "FieldDeclaration[2920-2932]:FieldDeclaration[2920-2932]"
    }, {
      "left" : "Node externAndJsRoot;",
      "right" : "Node externAndJsRoot;",
      "info" : "FieldDeclaration[2935-2956]:FieldDeclaration[2935-2956]"
    }, {
      "left" : "private Map<String, CompilerInput> inputsByName;",
      "right" : "private Map<String, CompilerInput> inputsByName;",
      "info" : "FieldDeclaration[2960-3008]:FieldDeclaration[2960-3008]"
    }, {
      "left" : "private SourceMap sourceMap;",
      "right" : "private SourceMap sourceMap;",
      "info" : "FieldDeclaration[3012-3069]:FieldDeclaration[3012-3069]"
    }, {
      "left" : "private String externExports = null;",
      "right" : "private String externExports = null;",
      "info" : "FieldDeclaration[3073-3157]:FieldDeclaration[3073-3157]"
    }, {
      "left" : "private int uniqueNameId = 0;",
      "right" : "private int uniqueNameId = 0;",
      "info" : "FieldDeclaration[3161-3281]:FieldDeclaration[3161-3281]"
    }, {
      "left" : "private boolean normalized = false;",
      "right" : "private boolean normalized = false;",
      "info" : "FieldDeclaration[3285-3473]:FieldDeclaration[3285-3473]"
    }, {
      "left" : "private boolean useThreads = true;",
      "right" : "private boolean useThreads = true;",
      "info" : "FieldDeclaration[3477-3544]:FieldDeclaration[3477-3544]"
    }, {
      "left" : "private boolean hasRegExpGlobalReferences = true;",
      "right" : "private boolean hasRegExpGlobalReferences = true;",
      "info" : "FieldDeclaration[3548-3698]:FieldDeclaration[3548-3698]"
    }, {
      "left" : "private FunctionInformationMap functionInformationMap;",
      "right" : "private FunctionInformationMap functionInformationMap;",
      "info" : "FieldDeclaration[3702-3794]:FieldDeclaration[3702-3794]"
    }, {
      "left" : "private final StringBuilder debugLog = new StringBuilder();",
      "right" : "private final StringBuilder debugLog = new StringBuilder();",
      "info" : "FieldDeclaration[3798-3888]:FieldDeclaration[3798-3888]"
    }, {
      "left" : "CodingConvention defaultCodingConvention = new GoogleCodingConvention();",
      "right" : "CodingConvention defaultCodingConvention = new GoogleCodingConvention();",
      "info" : "FieldDeclaration[3892-4017]:FieldDeclaration[3892-4017]"
    }, {
      "left" : "private JSTypeRegistry typeRegistry;",
      "right" : "private JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[4021-4057]:FieldDeclaration[4021-4057]"
    }, {
      "left" : "private Config parserConfig = null;",
      "right" : "private Config parserConfig = null;",
      "info" : "FieldDeclaration[4060-4095]:FieldDeclaration[4060-4095]"
    }, {
      "left" : "private ReverseAbstractInterpreter abstractInterpreter;",
      "right" : "private ReverseAbstractInterpreter abstractInterpreter;",
      "info" : "FieldDeclaration[4099-4154]:FieldDeclaration[4099-4154]"
    }, {
      "left" : "private TypeValidator typeValidator;",
      "right" : "private TypeValidator typeValidator;",
      "info" : "FieldDeclaration[4157-4193]:FieldDeclaration[4157-4193]"
    }, {
      "left" : "public PerformanceTracker tracker;",
      "right" : "public PerformanceTracker tracker;",
      "info" : "FieldDeclaration[4197-4231]:FieldDeclaration[4197-4231]"
    }, {
      "left" : "private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
      "right" : "private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
      "info" : "FieldDeclaration[4314-4432]:FieldDeclaration[4314-4432]"
    }, {
      "left" : "private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
      "right" : "private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
      "info" : "FieldDeclaration[4510-4604]:FieldDeclaration[4510-4604]"
    }, {
      "left" : "public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
      "right" : "public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
      "info" : "FieldDeclaration[4608-4832]:FieldDeclaration[4608-4832]"
    }, {
      "left" : "public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
      "right" : "public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
      "info" : "FieldDeclaration[4835-5014]:FieldDeclaration[4835-5014]"
    }, {
      "left" : "private static final long COMPILER_STACK_SIZE = 1048576L;",
      "right" : "private static final long COMPILER_STACK_SIZE = 1048576L;",
      "info" : "FieldDeclaration[5018-5075]:FieldDeclaration[5018-5075]"
    }, {
      "left" : "private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
      "right" : "private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
      "info" : "FieldDeclaration[5080-5355]:FieldDeclaration[5080-5355]"
    }, {
      "left" : "private final PrintStream outStream;",
      "right" : "private final PrintStream outStream;",
      "info" : "FieldDeclaration[5359-5395]:FieldDeclaration[5359-5395]"
    }, {
      "left" : "public Compiler()",
      "right" : "public Compiler()",
      "info" : "MethodDeclaration[5399-5536]:MethodDeclaration[5399-5536]"
    }, {
      "left" : "public Compiler(PrintStream stream)",
      "right" : "public Compiler(PrintStream stream)",
      "info" : "MethodDeclaration[5540-5736]:MethodDeclaration[5540-5736]"
    }, {
      "left" : "public Compiler(ErrorManager errorManager)",
      "right" : "public Compiler(ErrorManager errorManager)",
      "info" : "MethodDeclaration[5740-5905]:MethodDeclaration[5740-5905]"
    }, {
      "left" : "public void setErrorManager(ErrorManager errorManager)",
      "right" : "public void setErrorManager(ErrorManager errorManager)",
      "info" : "MethodDeclaration[5909-6214]:MethodDeclaration[5909-6214]"
    }, {
      "left" : "private MessageFormatter createMessageFormatter()",
      "right" : "private MessageFormatter createMessageFormatter()",
      "info" : "MethodDeclaration[6218-6507]:MethodDeclaration[6218-6507]"
    }, {
      "left" : "public void initOptions(CompilerOptions options)",
      "right" : "public void initOptions(CompilerOptions options)",
      "info" : "MethodDeclaration[6511-7116]:MethodDeclaration[6511-7116]"
    }, {
      "left" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options)",
      "right" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[7120-7406]:MethodDeclaration[7120-7406]"
    }, {
      "left" : "public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,\n      CompilerOptions options)",
      "right" : "public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[7410-7778]:MethodDeclaration[7410-7778]"
    }, {
      "left" : "static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
      "right" : "static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
      "info" : "FieldDeclaration[7782-7998]:FieldDeclaration[7782-7998]"
    }, {
      "left" : "public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options)",
      "right" : "public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[8002-8325]:MethodDeclaration[8002-8325]"
    }, {
      "left" : "public void initModules(\n      List<JSSourceFile> externs, List<JSModule> modules,\n      CompilerOptions options)",
      "right" : "public void initModules(\n      List<JSSourceFile> externs, List<JSModule> modules,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[8329-9407]:MethodDeclaration[8329-9407]"
    }, {
      "left" : "private void initBasedOnOptions()",
      "right" : "private void initBasedOnOptions()",
      "info" : "MethodDeclaration[9411-9663]:MethodDeclaration[9411-9663]"
    }, {
      "left" : "private List<CompilerInput> makeCompilerInput(\n      List<JSSourceFile> files, boolean isExtern)",
      "right" : "private List<CompilerInput> makeCompilerInput(\n      List<JSSourceFile> files, boolean isExtern)",
      "info" : "MethodDeclaration[9667-9940]:MethodDeclaration[9667-9940]"
    }, {
      "left" : "private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
      "right" : "private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
      "info" : "FieldDeclaration[9944-10114]:FieldDeclaration[9944-10114]"
    }, {
      "left" : "private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
      "right" : "private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
      "info" : "FieldDeclaration[10118-10313]:FieldDeclaration[10118-10313]"
    }, {
      "left" : "private void checkFirstModule(List<JSModule> modules)",
      "right" : "private void checkFirstModule(List<JSModule> modules)",
      "info" : "MethodDeclaration[10317-10836]:MethodDeclaration[10317-10836]"
    }, {
      "left" : "private static void fillEmptyModules(List<JSModule> modules)",
      "right" : "private static void fillEmptyModules(List<JSModule> modules)",
      "info" : "MethodDeclaration[10840-11189]:MethodDeclaration[10840-11189]"
    }, {
      "left" : "public void rebuildInputsFromModules()",
      "right" : "public void rebuildInputsFromModules()",
      "info" : "MethodDeclaration[11193-11553]:MethodDeclaration[11193-11553]"
    }, {
      "left" : "private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules)",
      "right" : "private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules)",
      "info" : "MethodDeclaration[11557-12286]:MethodDeclaration[11557-12286]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
      "right" : "static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
      "info" : "FieldDeclaration[12290-12410]:FieldDeclaration[12290-12410]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
      "right" : "static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
      "info" : "FieldDeclaration[12413-12564]:FieldDeclaration[12413-12564]"
    }, {
      "left" : "void initInputsByNameMap()",
      "right" : "void initInputsByNameMap()",
      "info" : "MethodDeclaration[12568-13265]:MethodDeclaration[12568-13265]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
      "info" : "MethodDeclaration[13269-13437]:MethodDeclaration[13269-13437]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSSourceFile[] input, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSSourceFile[] input, CompilerOptions options)",
      "info" : "MethodDeclaration[13441-13611]:MethodDeclaration[13441-13611]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
      "info" : "MethodDeclaration[13615-13785]:MethodDeclaration[13615-13785]"
    }, {
      "left" : "public Result compile(JSSourceFile[] externs,\n                        JSSourceFile[] inputs,\n                        CompilerOptions options)",
      "right" : "public Result compile(JSSourceFile[] externs,\n                        JSSourceFile[] inputs,\n                        CompilerOptions options)",
      "info" : "MethodDeclaration[13789-14110]:MethodDeclaration[13789-14110]"
    }, {
      "left" : "public Result compile(List<JSSourceFile> externs,\n      List<JSSourceFile> inputs, CompilerOptions options)",
      "right" : "public Result compile(List<JSSourceFile> externs,\n      List<JSSourceFile> inputs, CompilerOptions options)",
      "info" : "MethodDeclaration[14114-14649]:MethodDeclaration[14114-14649]"
    }, {
      "left" : "public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options)",
      "right" : "public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options)",
      "info" : "MethodDeclaration[14653-14976]:MethodDeclaration[14653-14976]"
    }, {
      "left" : "public Result compileModules(List<JSSourceFile> externs,\n      List<JSModule> modules, CompilerOptions options)",
      "right" : "public Result compileModules(List<JSSourceFile> externs,\n      List<JSModule> modules, CompilerOptions options)",
      "info" : "MethodDeclaration[14980-15528]:MethodDeclaration[14980-15528]"
    }, {
      "left" : "private Result compile()",
      "right" : "private Result compile()",
      "info" : "MethodDeclaration[15532-15735]:MethodDeclaration[15532-15735]"
    }, {
      "left" : "public Result call() throws Exception",
      "right" : "public Result call() throws Exception",
      "info" : "MethodDeclaration[15621-15723]:MethodDeclaration[15621-15723]"
    }, {
      "left" : "public void disableThreads()",
      "right" : "public void disableThreads()",
      "info" : "MethodDeclaration[15739-15902]:MethodDeclaration[15739-15902]"
    }, {
      "left" : "private <T> T runInCompilerThread(final Callable<T> callable)",
      "right" : "private <T> T runInCompilerThread(final Callable<T> callable)",
      "info" : "MethodDeclaration[15906-17450]:MethodDeclaration[15906-17450]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[16586-16943]:MethodDeclaration[16586-16943]"
    }, {
      "left" : "private void compileInternal()",
      "right" : "private void compileInternal()",
      "info" : "MethodDeclaration[17454-18282]:MethodDeclaration[17454-18282]"
    }, {
      "left" : "public void parse()",
      "right" : "public void parse()",
      "info" : "MethodDeclaration[18286-18330]:MethodDeclaration[18286-18330]"
    }, {
      "left" : "PassConfig getPassConfig()",
      "right" : "PassConfig getPassConfig()",
      "info" : "MethodDeclaration[18334-18460]:MethodDeclaration[18334-18460]"
    }, {
      "left" : "PassConfig createPassConfigInternal()",
      "right" : "PassConfig createPassConfigInternal()",
      "info" : "MethodDeclaration[18464-18659]:MethodDeclaration[18464-18659]"
    }, {
      "left" : "public void setPassConfig(PassConfig passes)",
      "right" : "public void setPassConfig(PassConfig passes)",
      "info" : "MethodDeclaration[18663-19407]:MethodDeclaration[18663-19407]"
    }, {
      "left" : "boolean precheck()",
      "right" : "boolean precheck()",
      "info" : "MethodDeclaration[19411-19647]:MethodDeclaration[19411-19647]"
    }, {
      "left" : "public void check()",
      "right" : "public void check()",
      "info" : "MethodDeclaration[19651-20673]:MethodDeclaration[19651-20673]"
    }, {
      "left" : "private void externExports()",
      "right" : "private void externExports()",
      "info" : "MethodDeclaration[20677-20939]:MethodDeclaration[20677-20939]"
    }, {
      "left" : "void process(CompilerPass p)",
      "right" : "void process(CompilerPass p)",
      "info" : "MethodDeclaration[20943-21013]:MethodDeclaration[20943-21013]"
    }, {
      "left" : "private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
      "right" : "private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
      "info" : "FieldDeclaration[21017-21238]:FieldDeclaration[21017-21238]"
    }, {
      "left" : "protected CompilerPass createInternal(AbstractCompiler compiler)",
      "right" : "protected CompilerPass createInternal(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[21107-21233]:MethodDeclaration[21107-21233]"
    }, {
      "left" : "private void maybeSanityCheck()",
      "right" : "private void maybeSanityCheck()",
      "info" : "MethodDeclaration[21242-21358]:MethodDeclaration[21242-21358]"
    }, {
      "left" : "private void runSanityCheck()",
      "right" : "private void runSanityCheck()",
      "info" : "MethodDeclaration[21362-21456]:MethodDeclaration[21362-21456]"
    }, {
      "left" : "void removeTryCatchFinally()",
      "right" : "void removeTryCatchFinally()",
      "info" : "MethodDeclaration[21460-21735]:MethodDeclaration[21460-21735]"
    }, {
      "left" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n      Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
      "right" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n      Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
      "info" : "MethodDeclaration[21739-22228]:MethodDeclaration[21739-22228]"
    }, {
      "left" : "private void runCustomPasses(CustomPassExecutionTime executionTime)",
      "right" : "private void runCustomPasses(CustomPassExecutionTime executionTime)",
      "info" : "MethodDeclaration[22232-22668]:MethodDeclaration[22232-22668]"
    }, {
      "left" : "private Tracer currentTracer = null;",
      "right" : "private Tracer currentTracer = null;",
      "info" : "FieldDeclaration[22672-22708]:FieldDeclaration[22672-22708]"
    }, {
      "left" : "private String currentPassName = null;",
      "right" : "private String currentPassName = null;",
      "info" : "FieldDeclaration[22711-22749]:FieldDeclaration[22711-22749]"
    }, {
      "left" : "void startPass(String passName)",
      "right" : "void startPass(String passName)",
      "info" : "MethodDeclaration[22753-22964]:MethodDeclaration[22753-22964]"
    }, {
      "left" : "void endPass()",
      "right" : "void endPass()",
      "info" : "MethodDeclaration[22968-23311]:MethodDeclaration[22968-23311]"
    }, {
      "left" : "Tracer newTracer(String passName)",
      "right" : "Tracer newTracer(String passName)",
      "info" : "MethodDeclaration[23315-23648]:MethodDeclaration[23315-23648]"
    }, {
      "left" : "void stopTracer(Tracer t, String passName)",
      "right" : "void stopTracer(Tracer t, String passName)",
      "info" : "MethodDeclaration[23652-23815]:MethodDeclaration[23652-23815]"
    }, {
      "left" : "public Result getResult()",
      "right" : "public Result getResult()",
      "info" : "MethodDeclaration[23819-24224]:MethodDeclaration[23819-24224]"
    }, {
      "left" : "public JSError[] getMessages()",
      "right" : "public JSError[] getMessages()",
      "info" : "MethodDeclaration[24228-24368]:MethodDeclaration[24228-24368]"
    }, {
      "left" : "public JSError[] getErrors()",
      "right" : "public JSError[] getErrors()",
      "info" : "MethodDeclaration[24372-24502]:MethodDeclaration[24372-24502]"
    }, {
      "left" : "public JSError[] getWarnings()",
      "right" : "public JSError[] getWarnings()",
      "info" : "MethodDeclaration[24506-24642]:MethodDeclaration[24506-24642]"
    }, {
      "left" : "public Node getRoot()",
      "right" : "public Node getRoot()",
      "info" : "MethodDeclaration[24646-24792]:MethodDeclaration[24646-24792]"
    }, {
      "left" : "private int nextUniqueNameId()",
      "right" : "private int nextUniqueNameId()",
      "info" : "MethodDeclaration[24796-24918]:MethodDeclaration[24796-24918]"
    }, {
      "left" : "void resetUniqueNameId()",
      "right" : "void resetUniqueNameId()",
      "info" : "MethodDeclaration[24922-25046]:MethodDeclaration[24922-25046]"
    }, {
      "left" : "Supplier<String> getUniqueNameIdSupplier()",
      "right" : "Supplier<String> getUniqueNameIdSupplier()",
      "info" : "MethodDeclaration[25050-25277]:MethodDeclaration[25050-25277]"
    }, {
      "left" : "public String get()",
      "right" : "public String get()",
      "info" : "MethodDeclaration[25181-25266]:MethodDeclaration[25181-25266]"
    }, {
      "left" : "void setNormalized()",
      "right" : "void setNormalized()",
      "info" : "MethodDeclaration[25281-25481]:MethodDeclaration[25281-25481]"
    }, {
      "left" : "void setUnnormalized()",
      "right" : "void setUnnormalized()",
      "info" : "MethodDeclaration[25485-25690]:MethodDeclaration[25485-25690]"
    }, {
      "left" : "boolean isNormalized()",
      "right" : "boolean isNormalized()",
      "info" : "MethodDeclaration[25694-25757]:MethodDeclaration[25694-25757]"
    }, {
      "left" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
      "right" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
      "info" : "MethodDeclaration[25761-26142]:MethodDeclaration[25761-26142]"
    }, {
      "left" : "public CompilerInput getInput(String name)",
      "right" : "public CompilerInput getInput(String name)",
      "info" : "MethodDeclaration[26453-26548]:MethodDeclaration[26453-26548]"
    }, {
      "left" : "public CompilerInput newExternInput(String name)",
      "right" : "public CompilerInput newExternInput(String name)",
      "info" : "MethodDeclaration[26552-26959]:MethodDeclaration[26552-26959]"
    }, {
      "left" : "void addIncrementalSourceAst(JsAst ast)",
      "right" : "void addIncrementalSourceAst(JsAst ast)",
      "info" : "MethodDeclaration[26963-27318]:MethodDeclaration[26963-27318]"
    }, {
      "left" : "JSModuleGraph getModuleGraph()",
      "right" : "JSModuleGraph getModuleGraph()",
      "info" : "MethodDeclaration[27322-27394]:MethodDeclaration[27322-27394]"
    }, {
      "left" : "public JSTypeRegistry getTypeRegistry()",
      "right" : "public JSTypeRegistry getTypeRegistry()",
      "info" : "MethodDeclaration[27398-27597]:MethodDeclaration[27398-27597]"
    }, {
      "left" : "ScopeCreator getScopeCreator()",
      "right" : "ScopeCreator getScopeCreator()",
      "info" : "MethodDeclaration[27601-27695]:MethodDeclaration[27601-27695]"
    }, {
      "left" : "public Scope getTopScope()",
      "right" : "public Scope getTopScope()",
      "info" : "MethodDeclaration[27699-27785]:MethodDeclaration[27699-27785]"
    }, {
      "left" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
      "right" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
      "info" : "MethodDeclaration[27789-28354]:MethodDeclaration[27789-28354]"
    }, {
      "left" : "TypeValidator getTypeValidator()",
      "right" : "TypeValidator getTypeValidator()",
      "info" : "MethodDeclaration[28358-28520]:MethodDeclaration[28358-28520]"
    }, {
      "left" : "Node parseInputs()",
      "right" : "Node parseInputs()",
      "info" : "MethodDeclaration[28692-32773]:MethodDeclaration[28692-32773]"
    }, {
      "left" : "public Node parse(JSSourceFile file)",
      "right" : "public Node parse(JSSourceFile file)",
      "info" : "MethodDeclaration[32777-32949]:MethodDeclaration[32777-32949]"
    }, {
      "left" : "Node parseSyntheticCode(String js)",
      "right" : "Node parseSyntheticCode(String js)",
      "info" : "MethodDeclaration[32953-33184]:MethodDeclaration[32953-33184]"
    }, {
      "left" : "void initCompilerOptionsIfTesting()",
      "right" : "void initCompilerOptionsIfTesting()",
      "info" : "MethodDeclaration[33188-33408]:MethodDeclaration[33188-33408]"
    }, {
      "left" : "Node parseSyntheticCode(String fileName, String js)",
      "right" : "Node parseSyntheticCode(String fileName, String js)",
      "info" : "MethodDeclaration[33412-33572]:MethodDeclaration[33412-33572]"
    }, {
      "left" : "Node parseTestCode(String js)",
      "right" : "Node parseTestCode(String js)",
      "info" : "MethodDeclaration[33576-33903]:MethodDeclaration[33576-33903]"
    }, {
      "left" : "ErrorReporter getDefaultErrorReporter()",
      "right" : "ErrorReporter getDefaultErrorReporter()",
      "info" : "MethodDeclaration[33907-33997]:MethodDeclaration[33907-33997]"
    }, {
      "left" : "public String toSource()",
      "right" : "public String toSource()",
      "info" : "MethodDeclaration[34189-34887]:MethodDeclaration[34189-34887]"
    }, {
      "left" : "public String call() throws Exception",
      "right" : "public String call() throws Exception",
      "info" : "MethodDeclaration[34341-34875]:MethodDeclaration[34341-34875]"
    }, {
      "left" : "public String[] toSourceArray()",
      "right" : "public String[] toSourceArray()",
      "info" : "MethodDeclaration[34891-35667]:MethodDeclaration[34891-35667]"
    }, {
      "left" : "public String[] call() throws Exception",
      "right" : "public String[] call() throws Exception",
      "info" : "MethodDeclaration[35062-35655]:MethodDeclaration[35062-35655]"
    }, {
      "left" : "public String toSource(final JSModule module)",
      "right" : "public String toSource(final JSModule module)",
      "info" : "MethodDeclaration[35671-36454]:MethodDeclaration[35671-36454]"
    }, {
      "left" : "public String call() throws Exception",
      "right" : "public String call() throws Exception",
      "info" : "MethodDeclaration[35852-36442]:MethodDeclaration[35852-36442]"
    }, {
      "left" : "public String[] toSourceArray(final JSModule module)",
      "right" : "public String[] toSourceArray(final JSModule module)",
      "info" : "MethodDeclaration[36459-37397]:MethodDeclaration[36459-37397]"
    }, {
      "left" : "public String[] call() throws Exception",
      "right" : "public String[] call() throws Exception",
      "info" : "MethodDeclaration[36663-37385]:MethodDeclaration[36663-37385]"
    }, {
      "left" : "public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root)",
      "right" : "public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root)",
      "info" : "MethodDeclaration[37401-39452]:MethodDeclaration[37401-39452]"
    }, {
      "left" : "public Void call() throws Exception",
      "right" : "public Void call() throws Exception",
      "info" : "MethodDeclaration[37938-39440]:MethodDeclaration[37938-39440]"
    }, {
      "left" : "String toSource(Node n)",
      "right" : "String toSource(Node n)",
      "info" : "MethodDeclaration[39456-39664]:MethodDeclaration[39456-39664]"
    }, {
      "left" : "private String toSource(Node n, SourceMap sourceMap)",
      "right" : "private String toSource(Node n, SourceMap sourceMap)",
      "info" : "MethodDeclaration[39668-40162]:MethodDeclaration[39668-40226]"
    }, {
      "left" : "CodeBuilder",
      "right" : "CodeBuilder",
      "info" : "TypeDeclaration[40166-41911]:TypeDeclaration[40230-41975]"
    }, {
      "left" : "private final StringBuilder sb = new StringBuilder();",
      "right" : "private final StringBuilder sb = new StringBuilder();",
      "info" : "FieldDeclaration[40363-40416]:FieldDeclaration[40427-40480]"
    }, {
      "left" : "private int lineCount = 0;",
      "right" : "private int lineCount = 0;",
      "info" : "FieldDeclaration[40421-40447]:FieldDeclaration[40485-40511]"
    }, {
      "left" : "private int colCount = 0;",
      "right" : "private int colCount = 0;",
      "info" : "FieldDeclaration[40452-40477]:FieldDeclaration[40516-40541]"
    }, {
      "left" : "void reset()",
      "right" : "void reset()",
      "info" : "MethodDeclaration[40483-40592]:MethodDeclaration[40547-40656]"
    }, {
      "left" : "CodeBuilder append(String str)",
      "right" : "CodeBuilder append(String str)",
      "info" : "MethodDeclaration[40598-41164]:MethodDeclaration[40662-41228]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[41170-41292]:MethodDeclaration[41234-41356]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[41298-41404]:MethodDeclaration[41362-41468]"
    }, {
      "left" : "int getLineIndex()",
      "right" : "int getLineIndex()",
      "info" : "MethodDeclaration[41410-41539]:MethodDeclaration[41474-41603]"
    }, {
      "left" : "int getColumnIndex()",
      "right" : "int getColumnIndex()",
      "info" : "MethodDeclaration[41545-41677]:MethodDeclaration[41609-41741]"
    }, {
      "left" : "boolean endsWith(String suffix)",
      "right" : "boolean endsWith(String suffix)",
      "info" : "MethodDeclaration[41683-41907]:MethodDeclaration[41747-41971]"
    }, {
      "left" : "public void optimize()",
      "right" : "public void optimize()",
      "info" : "MethodDeclaration[42089-42735]:MethodDeclaration[42153-42799]"
    }, {
      "left" : "void setCssRenamingMap(CssRenamingMap map)",
      "right" : "void setCssRenamingMap(CssRenamingMap map)",
      "info" : "MethodDeclaration[42739-42833]:MethodDeclaration[42803-42897]"
    }, {
      "left" : "CssRenamingMap getCssRenamingMap()",
      "right" : "CssRenamingMap getCssRenamingMap()",
      "info" : "MethodDeclaration[42837-42924]:MethodDeclaration[42901-42988]"
    }, {
      "left" : "public void processDefines()",
      "right" : "public void processDefines()",
      "info" : "MethodDeclaration[42928-43415]:MethodDeclaration[42992-43479]"
    }, {
      "left" : "boolean isInliningForbidden()",
      "right" : "boolean isInliningForbidden()",
      "info" : "MethodDeclaration[43419-43622]:MethodDeclaration[43483-43686]"
    }, {
      "left" : "ControlFlowGraph<Node> computeCFG()",
      "right" : "ControlFlowGraph<Node> computeCFG()",
      "info" : "MethodDeclaration[43626-43941]:MethodDeclaration[43690-44005]"
    }, {
      "left" : "public void normalize()",
      "right" : "public void normalize()",
      "info" : "MethodDeclaration[43945-44090]:MethodDeclaration[44009-44154]"
    }, {
      "left" : "void prepareAst(Node root)",
      "right" : "void prepareAst(Node root)",
      "info" : "MethodDeclaration[44094-44297]:MethodDeclaration[44158-44361]"
    }, {
      "left" : "void recordFunctionInformation()",
      "right" : "void recordFunctionInformation()",
      "info" : "MethodDeclaration[44301-44715]:MethodDeclaration[44365-44779]"
    }, {
      "left" : "protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
      "right" : "protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
      "info" : "FieldDeclaration[44719-44824]:FieldDeclaration[44783-44888]"
    }, {
      "left" : "private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
      "right" : "private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
      "info" : "FieldDeclaration[44827-44932]:FieldDeclaration[44891-44996]"
    }, {
      "left" : "void addChangeHandler(CodeChangeHandler handler)",
      "right" : "void addChangeHandler(CodeChangeHandler handler)",
      "info" : "MethodDeclaration[44936-45039]:MethodDeclaration[45000-45103]"
    }, {
      "left" : "void removeChangeHandler(CodeChangeHandler handler)",
      "right" : "void removeChangeHandler(CodeChangeHandler handler)",
      "info" : "MethodDeclaration[45043-45152]:MethodDeclaration[45107-45216]"
    }, {
      "left" : "public void reportCodeChange()",
      "right" : "public void reportCodeChange()",
      "info" : "MethodDeclaration[45156-45490]:MethodDeclaration[45220-45554]"
    }, {
      "left" : "public CodingConvention getCodingConvention()",
      "right" : "public CodingConvention getCodingConvention()",
      "info" : "MethodDeclaration[45494-45721]:MethodDeclaration[45558-45785]"
    }, {
      "left" : "public boolean isIdeMode()",
      "right" : "public boolean isIdeMode()",
      "info" : "MethodDeclaration[45725-45797]:MethodDeclaration[45789-45861]"
    }, {
      "left" : "Config getParserConfig()",
      "right" : "Config getParserConfig()",
      "info" : "MethodDeclaration[45801-45967]:MethodDeclaration[45865-46031]"
    }, {
      "left" : "public boolean isTypeCheckingEnabled()",
      "right" : "public boolean isTypeCheckingEnabled()",
      "info" : "MethodDeclaration[45971-46058]:MethodDeclaration[46035-46122]"
    }, {
      "left" : "public void report(JSError error)",
      "right" : "public void report(JSError error)",
      "info" : "MethodDeclaration[46239-46595]:MethodDeclaration[46303-46659]"
    }, {
      "left" : "public CheckLevel getErrorLevel(JSError error)",
      "right" : "public CheckLevel getErrorLevel(JSError error)",
      "info" : "MethodDeclaration[46599-46864]:MethodDeclaration[46663-46928]"
    }, {
      "left" : "void throwInternalError(String message, Exception cause)",
      "right" : "void throwInternalError(String message, Exception cause)",
      "info" : "MethodDeclaration[46868-47256]:MethodDeclaration[46932-47320]"
    }, {
      "left" : "public int getErrorCount()",
      "right" : "public int getErrorCount()",
      "info" : "MethodDeclaration[47261-47378]:MethodDeclaration[47325-47442]"
    }, {
      "left" : "public int getWarningCount()",
      "right" : "public int getWarningCount()",
      "info" : "MethodDeclaration[47382-47505]:MethodDeclaration[47446-47569]"
    }, {
      "left" : "boolean hasHaltingErrors()",
      "right" : "boolean hasHaltingErrors()",
      "info" : "MethodDeclaration[47509-47601]:MethodDeclaration[47573-47665]"
    }, {
      "left" : "public boolean hasErrors()",
      "right" : "public boolean hasErrors()",
      "info" : "MethodDeclaration[47605-48086]:MethodDeclaration[47669-48150]"
    }, {
      "left" : "void addToDebugLog(String str)",
      "right" : "void addToDebugLog(String str)",
      "info" : "MethodDeclaration[48090-48271]:MethodDeclaration[48154-48335]"
    }, {
      "left" : "private SourceFile getSourceFileByName(String sourceName)",
      "right" : "private SourceFile getSourceFileByName(String sourceName)",
      "info" : "MethodDeclaration[48275-48468]:MethodDeclaration[48339-48532]"
    }, {
      "left" : "public String getSourceLine(String sourceName, int lineNumber)",
      "right" : "public String getSourceLine(String sourceName, int lineNumber)",
      "info" : "MethodDeclaration[48472-48735]:MethodDeclaration[48536-48799]"
    }, {
      "left" : "public Region getSourceRegion(String sourceName, int lineNumber)",
      "right" : "public Region getSourceRegion(String sourceName, int lineNumber)",
      "info" : "MethodDeclaration[48739-49006]:MethodDeclaration[48803-49070]"
    }, {
      "left" : "Node getNodeForCodeInsertion(JSModule module)",
      "right" : "Node getNodeForCodeInsertion(JSModule module)",
      "info" : "MethodDeclaration[49194-49645]:MethodDeclaration[49258-49709]"
    }, {
      "left" : "public SourceMap getSourceMap()",
      "right" : "public SourceMap getSourceMap()",
      "info" : "MethodDeclaration[49649-49708]:MethodDeclaration[49713-49772]"
    }, {
      "left" : "VariableMap getVariableMap()",
      "right" : "VariableMap getVariableMap()",
      "info" : "MethodDeclaration[49712-49809]:MethodDeclaration[49776-49873]"
    }, {
      "left" : "VariableMap getPropertyMap()",
      "right" : "VariableMap getPropertyMap()",
      "info" : "MethodDeclaration[49813-49910]:MethodDeclaration[49877-49974]"
    }, {
      "left" : "CompilerOptions getOptions()",
      "right" : "CompilerOptions getOptions()",
      "info" : "MethodDeclaration[49914-49968]:MethodDeclaration[49978-50032]"
    }, {
      "left" : "FunctionInformationMap getFunctionalInformationMap()",
      "right" : "FunctionInformationMap getFunctionalInformationMap()",
      "info" : "MethodDeclaration[49972-50065]:MethodDeclaration[50036-50129]"
    }, {
      "left" : "public static void setLoggingLevel(Level level)",
      "right" : "public static void setLoggingLevel(Level level)",
      "info" : "MethodDeclaration[50069-50236]:MethodDeclaration[50133-50300]"
    }, {
      "left" : "public String getAstDotGraph() throws IOException",
      "right" : "public String getAstDotGraph() throws IOException",
      "info" : "MethodDeclaration[50240-50590]:MethodDeclaration[50304-50654]"
    }, {
      "left" : "public ErrorManager getErrorManager()",
      "right" : "public ErrorManager getErrorManager()",
      "info" : "MethodDeclaration[50594-50749]:MethodDeclaration[50658-50813]"
    }, {
      "left" : "List<CompilerInput> getInputsInOrder()",
      "right" : "List<CompilerInput> getInputsInOrder()",
      "info" : "MethodDeclaration[50753-50873]:MethodDeclaration[50817-50937]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "TypeDeclaration[50877-51915]:TypeDeclaration[50941-51979]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[51543-51591]:FieldDeclaration[51607-51655]"
    }, {
      "left" : "Node externsRoot;",
      "right" : "Node externsRoot;",
      "info" : "FieldDeclaration[51597-51614]:FieldDeclaration[51661-51678]"
    }, {
      "left" : "private Node jsRoot;",
      "right" : "private Node jsRoot;",
      "info" : "FieldDeclaration[51619-51639]:FieldDeclaration[51683-51703]"
    }, {
      "left" : "private List<CompilerInput> externs;",
      "right" : "private List<CompilerInput> externs;",
      "info" : "FieldDeclaration[51644-51680]:FieldDeclaration[51708-51744]"
    }, {
      "left" : "private List<CompilerInput> inputs;",
      "right" : "private List<CompilerInput> inputs;",
      "info" : "FieldDeclaration[51685-51720]:FieldDeclaration[51749-51784]"
    }, {
      "left" : "private List<JSModule> modules;",
      "right" : "private List<JSModule> modules;",
      "info" : "FieldDeclaration[51725-51756]:FieldDeclaration[51789-51820]"
    }, {
      "left" : "private PassConfig.State passConfigState;",
      "right" : "private PassConfig.State passConfigState;",
      "info" : "FieldDeclaration[51761-51802]:FieldDeclaration[51825-51866]"
    }, {
      "left" : "private JSTypeRegistry typeRegistry;",
      "right" : "private JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[51807-51843]:FieldDeclaration[51871-51907]"
    }, {
      "left" : "private boolean normalized;",
      "right" : "private boolean normalized;",
      "info" : "FieldDeclaration[51848-51875]:FieldDeclaration[51912-51939]"
    }, {
      "left" : "private IntermediateState()",
      "right" : "private IntermediateState()",
      "info" : "MethodDeclaration[51881-51911]:MethodDeclaration[51945-51975]"
    }, {
      "left" : "public IntermediateState getState()",
      "right" : "public IntermediateState getState()",
      "info" : "MethodDeclaration[51919-52417]:MethodDeclaration[51983-52481]"
    }, {
      "left" : "public void setState(IntermediateState state)",
      "right" : "public void setState(IntermediateState state)",
      "info" : "MethodDeclaration[52421-52934]:MethodDeclaration[52485-52998]"
    }, {
      "left" : "List<CompilerInput> getInputsForTesting()",
      "right" : "List<CompilerInput> getInputsForTesting()",
      "info" : "MethodDeclaration[52938-53025]:MethodDeclaration[53002-53089]"
    }, {
      "left" : "List<CompilerInput> getExternsForTesting()",
      "right" : "List<CompilerInput> getExternsForTesting()",
      "info" : "MethodDeclaration[53029-53118]:MethodDeclaration[53093-53182]"
    }, {
      "left" : "boolean hasRegExpGlobalReferences()",
      "right" : "boolean hasRegExpGlobalReferences()",
      "info" : "MethodDeclaration[53122-53213]:MethodDeclaration[53186-53277]"
    }, {
      "left" : "void setHasRegExpGlobalReferences(boolean references)",
      "right" : "void setHasRegExpGlobalReferences(boolean references)",
      "info" : "MethodDeclaration[53217-53332]:MethodDeclaration[53281-53396]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5501-5536]:Block[5501-5536]"
    }, {
      "left" : "this((PrintStream) null);",
      "right" : "this((PrintStream) null);",
      "info" : "ConstructorInvocation[5507-5532]:ConstructorInvocation[5507-5532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5671-5736]:Block[5671-5736]"
    }, {
      "left" : "addChangeHandler(recentChange);",
      "right" : "addChangeHandler(recentChange);",
      "info" : "ExpressionStatement[5677-5708]:ExpressionStatement[5677-5708]"
    }, {
      "left" : "outStream = stream;",
      "right" : "outStream = stream;",
      "info" : "ExpressionStatement[5713-5732]:ExpressionStatement[5713-5732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5853-5905]:Block[5853-5905]"
    }, {
      "left" : "this();",
      "right" : "this();",
      "info" : "ConstructorInvocation[5859-5866]:ConstructorInvocation[5859-5866]"
    }, {
      "left" : "setErrorManager(errorManager);",
      "right" : "setErrorManager(errorManager);",
      "info" : "ExpressionStatement[5871-5901]:ExpressionStatement[5871-5901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6080-6214]:Block[6080-6214]"
    }, {
      "left" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
      "right" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
      "info" : "ExpressionStatement[6086-6172]:ExpressionStatement[6086-6172]"
    }, {
      "left" : "this.errorManager = errorManager;",
      "right" : "this.errorManager = errorManager;",
      "info" : "ExpressionStatement[6177-6210]:ExpressionStatement[6177-6210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6382-6507]:Block[6382-6507]"
    }, {
      "left" : "boolean colorize = options.shouldColorizeErrorOutput();",
      "right" : "boolean colorize = options.shouldColorizeErrorOutput();",
      "info" : "VariableDeclarationStatement[6388-6443]:VariableDeclarationStatement[6388-6443]"
    }, {
      "left" : "return options.errorFormat.toFormatter(this, colorize);",
      "right" : "return options.errorFormat.toFormatter(this, colorize);",
      "info" : "ReturnStatement[6448-6503]:ReturnStatement[6448-6503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6674-7116]:Block[6674-7116]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[6680-6703]:ExpressionStatement[6680-6703]"
    }, {
      "left" : "if (errorManager == null)",
      "right" : "if (errorManager == null)",
      "info" : "IfStatement[6708-7112]:IfStatement[6708-7112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6734-7112]:Block[6734-7112]"
    }, {
      "left" : "if (outStream == null)",
      "right" : "if (outStream == null)",
      "info" : "IfStatement[6742-7106]:IfStatement[6742-7106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6765-6870]:Block[6765-6870]"
    }, {
      "left" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
      "right" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
      "info" : "ExpressionStatement[6775-6862]:ExpressionStatement[6775-6862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6876-7106]:Block[6876-7106]"
    }, {
      "left" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
      "right" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
      "info" : "VariableDeclarationStatement[6886-6997]:VariableDeclarationStatement[6886-6997]"
    }, {
      "left" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
      "right" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
      "info" : "ExpressionStatement[7006-7064]:ExpressionStatement[7006-7064]"
    }, {
      "left" : "setErrorManager(printer);",
      "right" : "setErrorManager(printer);",
      "info" : "ExpressionStatement[7073-7098]:ExpressionStatement[7073-7098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7289-7406]:Block[7289-7406]"
    }, {
      "left" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
      "right" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
      "info" : "ExpressionStatement[7295-7402]:ExpressionStatement[7295-7402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7587-7778]:Block[7587-7778]"
    }, {
      "left" : "JSModule module = new JSModule(\"[singleton]\");",
      "right" : "JSModule module = new JSModule(\"[singleton]\");",
      "info" : "VariableDeclarationStatement[7593-7639]:VariableDeclarationStatement[7593-7639]"
    }, {
      "left" : "for (JSSourceFile input : inputs)",
      "right" : "for (JSSourceFile input : inputs)",
      "info" : "EnhancedForStatement[7644-7710]:EnhancedForStatement[7644-7710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7678-7710]:Block[7678-7710]"
    }, {
      "left" : "module.add(input);",
      "right" : "module.add(input);",
      "info" : "ExpressionStatement[7686-7704]:ExpressionStatement[7686-7704]"
    }, {
      "left" : "initModules(externs, Lists.newArrayList(module), options);",
      "right" : "initModules(externs, Lists.newArrayList(module), options);",
      "info" : "ExpressionStatement[7716-7774]:ExpressionStatement[7716-7774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8203-8325]:Block[8203-8325]"
    }, {
      "left" : "initModules(Lists.<JSSourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
      "right" : "initModules(Lists.<JSSourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
      "info" : "ExpressionStatement[8209-8321]:ExpressionStatement[8209-8321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8552-9407]:Block[8552-9407]"
    }, {
      "left" : "initOptions(options);",
      "right" : "initOptions(options);",
      "info" : "ExpressionStatement[8558-8579]:ExpressionStatement[8558-8579]"
    }, {
      "left" : "checkFirstModule(modules);",
      "right" : "checkFirstModule(modules);",
      "info" : "ExpressionStatement[8585-8611]:ExpressionStatement[8585-8611]"
    }, {
      "left" : "fillEmptyModules(modules);",
      "right" : "fillEmptyModules(modules);",
      "info" : "ExpressionStatement[8616-8642]:ExpressionStatement[8616-8642]"
    }, {
      "left" : "this.externs = makeCompilerInput(externs, true);",
      "right" : "this.externs = makeCompilerInput(externs, true);",
      "info" : "ExpressionStatement[8648-8696]:ExpressionStatement[8648-8696]"
    }, {
      "left" : "this.modules = modules;",
      "right" : "this.modules = modules;",
      "info" : "ExpressionStatement[8804-8827]:ExpressionStatement[8804-8827]"
    }, {
      "left" : "if (modules.size() > 1)",
      "right" : "if (modules.size() > 1)",
      "info" : "IfStatement[8832-9296]:IfStatement[8832-9296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8856-9252]:Block[8856-9252]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8864-9246]:TryStatement[8864-9246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8868-8932]:Block[8868-8932]"
    }, {
      "left" : "this.moduleGraph = new JSModuleGraph(modules);",
      "right" : "this.moduleGraph = new JSModuleGraph(modules);",
      "info" : "ExpressionStatement[8878-8924]:ExpressionStatement[8878-8924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8983-9246]:Block[8983-9246]"
    }, {
      "left" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
      "right" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
      "info" : "ExpressionStatement[9101-9222]:ExpressionStatement[9101-9222]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9231-9238]:ReturnStatement[9231-9238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9258-9296]:Block[9258-9296]"
    }, {
      "left" : "this.moduleGraph = null;",
      "right" : "this.moduleGraph = null;",
      "info" : "ExpressionStatement[9266-9290]:ExpressionStatement[9266-9290]"
    }, {
      "left" : "this.inputs = getAllInputsFromModules(modules);",
      "right" : "this.inputs = getAllInputsFromModules(modules);",
      "info" : "ExpressionStatement[9302-9349]:ExpressionStatement[9302-9349]"
    }, {
      "left" : "initBasedOnOptions();",
      "right" : "initBasedOnOptions();",
      "info" : "ExpressionStatement[9354-9375]:ExpressionStatement[9354-9375]"
    }, {
      "left" : "initInputsByNameMap();",
      "right" : "initInputsByNameMap();",
      "info" : "ExpressionStatement[9381-9403]:ExpressionStatement[9381-9403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9527-9663]:Block[9527-9663]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[9576-9659]:IfStatement[9576-9659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9617-9659]:Block[9617-9659]"
    }, {
      "left" : "sourceMap = new SourceMap();",
      "right" : "sourceMap = new SourceMap();",
      "info" : "ExpressionStatement[9625-9653]:ExpressionStatement[9625-9653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9764-9940]:Block[9764-9940]"
    }, {
      "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[9770-9820]:VariableDeclarationStatement[9770-9820]"
    }, {
      "left" : "for (JSSourceFile file : files)",
      "right" : "for (JSSourceFile file : files)",
      "info" : "EnhancedForStatement[9825-9917]:EnhancedForStatement[9825-9917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9857-9917]:Block[9857-9917]"
    }, {
      "left" : "inputs.add(new CompilerInput(file, isExtern));",
      "right" : "inputs.add(new CompilerInput(file, isExtern));",
      "info" : "ExpressionStatement[9865-9911]:ExpressionStatement[9865-9911]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[9922-9936]:ReturnStatement[9922-9936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10504-10836]:Block[10504-10836]"
    }, {
      "left" : "if (modules.isEmpty())",
      "right" : "if (modules.isEmpty())",
      "info" : "IfStatement[10510-10832]:IfStatement[10510-10832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10533-10593]:Block[10533-10593]"
    }, {
      "left" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
      "right" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
      "info" : "ExpressionStatement[10541-10587]:ExpressionStatement[10541-10587]"
    }, {
      "left" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
      "right" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
      "info" : "IfStatement[10599-10832]:IfStatement[10599-10832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10663-10832]:Block[10663-10832]"
    }, {
      "left" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
      "right" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
      "info" : "ExpressionStatement[10744-10826]:ExpressionStatement[10744-10826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11013-11189]:Block[11013-11189]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[11019-11185]:EnhancedForStatement[11019-11185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11051-11185]:Block[11051-11185]"
    }, {
      "left" : "if (module.getInputs().isEmpty())",
      "right" : "if (module.getInputs().isEmpty())",
      "info" : "IfStatement[11059-11179]:IfStatement[11059-11179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11093-11179]:Block[11093-11179]"
    }, {
      "left" : "module.add(JSSourceFile.fromCode(\"[\" + module.getName() + \"]\", \"\"));",
      "right" : "module.add(JSSourceFile.fromCode(\"[\" + module.getName() + \"]\", \"\"));",
      "info" : "ExpressionStatement[11103-11171]:ExpressionStatement[11103-11171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11474-11553]:Block[11474-11553]"
    }, {
      "left" : "inputs = getAllInputsFromModules(modules);",
      "right" : "inputs = getAllInputsFromModules(modules);",
      "info" : "ExpressionStatement[11480-11522]:ExpressionStatement[11480-11522]"
    }, {
      "left" : "initInputsByNameMap();",
      "right" : "initInputsByNameMap();",
      "info" : "ExpressionStatement[11527-11549]:ExpressionStatement[11527-11549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11753-12286]:Block[11753-12286]"
    }, {
      "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[11759-11809]:VariableDeclarationStatement[11759-11809]"
    }, {
      "left" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
      "right" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
      "info" : "VariableDeclarationStatement[11814-11865]:VariableDeclarationStatement[11814-11865]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[11870-12263]:EnhancedForStatement[11870-12263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11902-12263]:Block[11902-12263]"
    }, {
      "left" : "for (CompilerInput input : module.getInputs())",
      "right" : "for (CompilerInput input : module.getInputs())",
      "info" : "EnhancedForStatement[11910-12257]:EnhancedForStatement[11910-12257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11957-12257]:Block[11957-12257]"
    }, {
      "left" : "String inputName = input.getName();",
      "right" : "String inputName = input.getName();",
      "info" : "VariableDeclarationStatement[11967-12002]:VariableDeclarationStatement[11967-12002]"
    }, {
      "left" : "inputs.add(input);",
      "right" : "inputs.add(input);",
      "info" : "ExpressionStatement[12190-12208]:ExpressionStatement[12190-12208]"
    }, {
      "left" : "inputMap.put(inputName, module);",
      "right" : "inputMap.put(inputName, module);",
      "info" : "ExpressionStatement[12217-12249]:ExpressionStatement[12217-12249]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[12268-12282]:ReturnStatement[12268-12282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12707-13265]:Block[12707-13265]"
    }, {
      "left" : "inputsByName = new HashMap<String, CompilerInput>();",
      "right" : "inputsByName = new HashMap<String, CompilerInput>();",
      "info" : "ExpressionStatement[12713-12765]:ExpressionStatement[12713-12765]"
    }, {
      "left" : "for (CompilerInput input : externs)",
      "right" : "for (CompilerInput input : externs)",
      "info" : "EnhancedForStatement[12770-13017]:EnhancedForStatement[12770-13017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12806-13017]:Block[12806-13017]"
    }, {
      "left" : "String name = input.getName();",
      "right" : "String name = input.getName();",
      "info" : "VariableDeclarationStatement[12814-12844]:VariableDeclarationStatement[12814-12844]"
    }, {
      "left" : "if (!inputsByName.containsKey(name))",
      "right" : "if (!inputsByName.containsKey(name))",
      "info" : "IfStatement[12851-13011]:IfStatement[12851-13011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12888-12936]:Block[12888-12936]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[12898-12928]:ExpressionStatement[12898-12928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12942-13011]:Block[12942-13011]"
    }, {
      "left" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, name));",
      "right" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, name));",
      "info" : "ExpressionStatement[12952-13003]:ExpressionStatement[12952-13003]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[13022-13261]:EnhancedForStatement[13022-13261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13057-13261]:Block[13057-13261]"
    }, {
      "left" : "String name = input.getName();",
      "right" : "String name = input.getName();",
      "info" : "VariableDeclarationStatement[13065-13095]:VariableDeclarationStatement[13065-13095]"
    }, {
      "left" : "if (!inputsByName.containsKey(name))",
      "right" : "if (!inputsByName.containsKey(name))",
      "info" : "IfStatement[13102-13255]:IfStatement[13102-13255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13139-13187]:Block[13139-13187]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[13149-13179]:ExpressionStatement[13149-13179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13193-13255]:Block[13193-13255]"
    }, {
      "left" : "report(JSError.make(DUPLICATE_INPUT, name));",
      "right" : "report(JSError.make(DUPLICATE_INPUT, name));",
      "info" : "ExpressionStatement[13203-13247]:ExpressionStatement[13203-13247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13364-13437]:Block[13364-13437]"
    }, {
      "left" : "return compile(extern, new JSSourceFile[] { input }, options);",
      "right" : "return compile(extern, new JSSourceFile[] { input }, options);",
      "info" : "ReturnStatement[13371-13433]:ReturnStatement[13371-13433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13538-13611]:Block[13538-13611]"
    }, {
      "left" : "return compile(new JSSourceFile[] { extern }, input, options);",
      "right" : "return compile(new JSSourceFile[] { extern }, input, options);",
      "info" : "ReturnStatement[13545-13607]:ReturnStatement[13545-13607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13710-13785]:Block[13710-13785]"
    }, {
      "left" : "return compile(new JSSourceFile[] { extern }, modules, options);",
      "right" : "return compile(new JSSourceFile[] { extern }, modules, options);",
      "info" : "ReturnStatement[13717-13781]:ReturnStatement[13717-13781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13975-14110]:Block[13975-14110]"
    }, {
      "left" : "return compile(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs),\n        options);",
      "right" : "return compile(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs),\n        options);",
      "info" : "ReturnStatement[13981-14106]:ReturnStatement[13981-14106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14266-14649]:Block[14266-14649]"
    }, {
      "left" : "Preconditions.checkState(jsRoot == null);",
      "right" : "Preconditions.checkState(jsRoot == null);",
      "info" : "ExpressionStatement[14326-14367]:ExpressionStatement[14326-14367]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14373-14645]:TryStatement[14373-14645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14377-14507]:Block[14377-14507]"
    }, {
      "left" : "init(externs, inputs, options);",
      "right" : "init(externs, inputs, options);",
      "info" : "ExpressionStatement[14385-14416]:ExpressionStatement[14385-14416]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[14423-14477]:IfStatement[14423-14477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14440-14477]:Block[14440-14477]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[14450-14469]:ReturnStatement[14450-14469]"
    }, {
      "left" : "return compile();",
      "right" : "return compile();",
      "info" : "ReturnStatement[14484-14501]:ReturnStatement[14484-14501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14516-14645]:Block[14516-14645]"
    }, {
      "left" : "Tracer t = newTracer(\"generateReport\");",
      "right" : "Tracer t = newTracer(\"generateReport\");",
      "info" : "VariableDeclarationStatement[14524-14563]:VariableDeclarationStatement[14524-14563]"
    }, {
      "left" : "errorManager.generateReport();",
      "right" : "errorManager.generateReport();",
      "info" : "ExpressionStatement[14570-14600]:ExpressionStatement[14570-14600]"
    }, {
      "left" : "stopTracer(t, \"generateReport\");",
      "right" : "stopTracer(t, \"generateReport\");",
      "info" : "ExpressionStatement[14607-14639]:ExpressionStatement[14607-14639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14837-14976]:Block[14837-14976]"
    }, {
      "left" : "return compileModules(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
      "right" : "return compileModules(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
      "info" : "ReturnStatement[14843-14972]:ReturnStatement[14843-14972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15137-15528]:Block[15137-15528]"
    }, {
      "left" : "Preconditions.checkState(jsRoot == null);",
      "right" : "Preconditions.checkState(jsRoot == null);",
      "info" : "ExpressionStatement[15197-15238]:ExpressionStatement[15197-15238]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15244-15524]:TryStatement[15244-15524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15248-15386]:Block[15248-15386]"
    }, {
      "left" : "initModules(externs, modules, options);",
      "right" : "initModules(externs, modules, options);",
      "info" : "ExpressionStatement[15256-15295]:ExpressionStatement[15256-15295]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[15302-15356]:IfStatement[15302-15356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15319-15356]:Block[15319-15356]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[15329-15348]:ReturnStatement[15329-15348]"
    }, {
      "left" : "return compile();",
      "right" : "return compile();",
      "info" : "ReturnStatement[15363-15380]:ReturnStatement[15363-15380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15395-15524]:Block[15395-15524]"
    }, {
      "left" : "Tracer t = newTracer(\"generateReport\");",
      "right" : "Tracer t = newTracer(\"generateReport\");",
      "info" : "VariableDeclarationStatement[15403-15442]:VariableDeclarationStatement[15403-15442]"
    }, {
      "left" : "errorManager.generateReport();",
      "right" : "errorManager.generateReport();",
      "info" : "ExpressionStatement[15449-15479]:ExpressionStatement[15449-15479]"
    }, {
      "left" : "stopTracer(t, \"generateReport\");",
      "right" : "stopTracer(t, \"generateReport\");",
      "info" : "ExpressionStatement[15486-15518]:ExpressionStatement[15486-15518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15557-15735]:Block[15557-15735]"
    }, {
      "left" : "return runInCompilerThread(new Callable<Result>() {\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<Result>() {\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
      "info" : "ReturnStatement[15563-15731]:ReturnStatement[15563-15731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15659-15723]:Block[15659-15723]"
    }, {
      "left" : "compileInternal();",
      "right" : "compileInternal();",
      "info" : "ExpressionStatement[15669-15687]:ExpressionStatement[15669-15687]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[15696-15715]:ReturnStatement[15696-15715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15873-15902]:Block[15873-15902]"
    }, {
      "left" : "useThreads = false;",
      "right" : "useThreads = false;",
      "info" : "ExpressionStatement[15879-15898]:ExpressionStatement[15879-15898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16001-17450]:Block[16001-17450]"
    }, {
      "left" : "final boolean dumpTraceReport = options.tracer.isOn();",
      "right" : "final boolean dumpTraceReport = options.tracer.isOn();",
      "info" : "VariableDeclarationStatement[16389-16443]:VariableDeclarationStatement[16389-16443]"
    }, {
      "left" : "final Object[] result = new Object[1];",
      "right" : "final Object[] result = new Object[1];",
      "info" : "VariableDeclarationStatement[16448-16486]:VariableDeclarationStatement[16448-16486]"
    }, {
      "left" : "final Throwable[] exception = new Throwable[1];",
      "right" : "final Throwable[] exception = new Throwable[1];",
      "info" : "VariableDeclarationStatement[16491-16538]:VariableDeclarationStatement[16491-16538]"
    }, {
      "left" : "Runnable runnable = new Runnable() {\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
      "right" : "Runnable runnable = new Runnable() {\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
      "info" : "VariableDeclarationStatement[16543-16950]:VariableDeclarationStatement[16543-16950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16604-16943]:Block[16604-16943]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16614-16935]:TryStatement[16614-16935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16618-16758]:Block[16618-16758]"
    }, {
      "left" : "if (dumpTraceReport)",
      "right" : "if (dumpTraceReport)",
      "info" : "IfStatement[16630-16709]:IfStatement[16630-16709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16651-16709]:Block[16651-16709]"
    }, {
      "left" : "Tracer.initCurrentThreadTrace();",
      "right" : "Tracer.initCurrentThreadTrace();",
      "info" : "ExpressionStatement[16665-16697]:ExpressionStatement[16665-16697]"
    }, {
      "left" : "result[0] = callable.call();",
      "right" : "result[0] = callable.call();",
      "info" : "ExpressionStatement[16720-16748]:ExpressionStatement[16720-16748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16779-16818]:Block[16779-16818]"
    }, {
      "left" : "exception[0] = e;",
      "right" : "exception[0] = e;",
      "info" : "ExpressionStatement[16791-16808]:ExpressionStatement[16791-16808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16827-16935]:Block[16827-16935]"
    }, {
      "left" : "if (dumpTraceReport)",
      "right" : "if (dumpTraceReport)",
      "info" : "IfStatement[16839-16925]:IfStatement[16839-16925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16860-16925]:Block[16860-16925]"
    }, {
      "left" : "Tracer.logAndClearCurrentThreadTrace();",
      "right" : "Tracer.logAndClearCurrentThreadTrace();",
      "info" : "ExpressionStatement[16874-16913]:ExpressionStatement[16874-16913]"
    }, {
      "left" : "if (useThreads)",
      "right" : "if (useThreads)",
      "info" : "IfStatement[16956-17272]:IfStatement[16956-17272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16972-17237]:Block[16972-17237]"
    }, {
      "left" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
      "right" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
      "info" : "VariableDeclarationStatement[16980-17054]:VariableDeclarationStatement[16980-17054]"
    }, {
      "left" : "th.start();",
      "right" : "th.start();",
      "info" : "ExpressionStatement[17061-17072]:ExpressionStatement[17061-17072]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[17079-17231]:WhileStatement[17079-17231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17092-17231]:Block[17092-17231]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17102-17223]:TryStatement[17102-17223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17106-17155]:Block[17106-17155]"
    }, {
      "left" : "th.join();",
      "right" : "th.join();",
      "info" : "ExpressionStatement[17118-17128]:ExpressionStatement[17118-17128]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17139-17145]:BreakStatement[17139-17145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17192-17223]:Block[17192-17223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17243-17272]:Block[17243-17272]"
    }, {
      "left" : "runnable.run();",
      "right" : "runnable.run();",
      "info" : "ExpressionStatement[17251-17266]:ExpressionStatement[17251-17266]"
    }, {
      "left" : "if (exception[0] != null)",
      "right" : "if (exception[0] != null)",
      "info" : "IfStatement[17338-17419]:IfStatement[17338-17419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17364-17419]:Block[17364-17419]"
    }, {
      "left" : "throw new RuntimeException(exception[0]);",
      "right" : "throw new RuntimeException(exception[0]);",
      "info" : "ThrowStatement[17372-17413]:ThrowStatement[17372-17413]"
    }, {
      "left" : "return (T) result[0];",
      "right" : "return (T) result[0];",
      "info" : "ReturnStatement[17425-17446]:ReturnStatement[17425-17446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17485-18282]:Block[17485-18282]"
    }, {
      "left" : "parse();",
      "right" : "parse();",
      "info" : "ExpressionStatement[17491-17499]:ExpressionStatement[17491-17499]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[17504-17542]:IfStatement[17504-17542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17521-17542]:Block[17521-17542]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17529-17536]:ReturnStatement[17529-17536]"
    }, {
      "left" : "if (!precheck())",
      "right" : "if (!precheck())",
      "info" : "IfStatement[17548-17586]:IfStatement[17548-17586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17565-17586]:Block[17565-17586]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17573-17580]:ReturnStatement[17573-17580]"
    }, {
      "left" : "if (options.nameAnonymousFunctionsOnly)",
      "right" : "if (options.nameAnonymousFunctionsOnly)",
      "info" : "IfStatement[17592-17739]:IfStatement[17592-17739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17632-17739]:Block[17632-17739]"
    }, {
      "left" : "check();",
      "right" : "check();",
      "info" : "ExpressionStatement[17711-17719]:ExpressionStatement[17711-17719]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17726-17733]:ReturnStatement[17726-17733]"
    }, {
      "left" : "if (!options.skipAllPasses)",
      "right" : "if (!options.skipAllPasses)",
      "info" : "IfStatement[17745-18108]:IfStatement[17745-18108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17773-18108]:Block[17773-18108]"
    }, {
      "left" : "check();",
      "right" : "check();",
      "info" : "ExpressionStatement[17781-17789]:ExpressionStatement[17781-17789]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[17796-17838]:IfStatement[17796-17838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17813-17838]:Block[17813-17838]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17823-17830]:ReturnStatement[17823-17830]"
    }, {
      "left" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
      "right" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
      "info" : "IfStatement[17846-17965]:IfStatement[17846-17965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17931-17965]:Block[17931-17965]"
    }, {
      "left" : "externExports();",
      "right" : "externExports();",
      "info" : "ExpressionStatement[17941-17957]:ExpressionStatement[17941-17957]"
    }, {
      "left" : "if (!options.ideMode)",
      "right" : "if (!options.ideMode)",
      "info" : "IfStatement[18051-18102]:IfStatement[18051-18102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18073-18102]:Block[18073-18102]"
    }, {
      "left" : "optimize();",
      "right" : "optimize();",
      "info" : "ExpressionStatement[18083-18094]:ExpressionStatement[18083-18094]"
    }, {
      "left" : "if (options.recordFunctionInformation)",
      "right" : "if (options.recordFunctionInformation)",
      "info" : "IfStatement[18114-18195]:IfStatement[18114-18195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18153-18195]:Block[18153-18195]"
    }, {
      "left" : "recordFunctionInformation();",
      "right" : "recordFunctionInformation();",
      "info" : "ExpressionStatement[18161-18189]:ExpressionStatement[18161-18189]"
    }, {
      "left" : "if (options.devMode == DevMode.START_AND_END)",
      "right" : "if (options.devMode == DevMode.START_AND_END)",
      "info" : "IfStatement[18201-18278]:IfStatement[18201-18278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18247-18278]:Block[18247-18278]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[18255-18272]:ExpressionStatement[18255-18272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18306-18330]:Block[18306-18330]"
    }, {
      "left" : "parseInputs();",
      "right" : "parseInputs();",
      "info" : "ExpressionStatement[18312-18326]:ExpressionStatement[18312-18326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18361-18460]:Block[18361-18460]"
    }, {
      "left" : "if (passes == null)",
      "right" : "if (passes == null)",
      "info" : "IfStatement[18367-18437]:IfStatement[18367-18437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18387-18437]:Block[18387-18437]"
    }, {
      "left" : "passes = createPassConfigInternal();",
      "right" : "passes = createPassConfigInternal();",
      "info" : "ExpressionStatement[18395-18431]:ExpressionStatement[18395-18431]"
    }, {
      "left" : "return passes;",
      "right" : "return passes;",
      "info" : "ReturnStatement[18442-18456]:ReturnStatement[18442-18456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18611-18659]:Block[18611-18659]"
    }, {
      "left" : "return new DefaultPassConfig(options);",
      "right" : "return new DefaultPassConfig(options);",
      "info" : "ReturnStatement[18617-18655]:ReturnStatement[18617-18655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18909-19407]:Block[18909-19407]"
    }, {
      "left" : "Preconditions.checkNotNull(passes);",
      "right" : "Preconditions.checkNotNull(passes);",
      "info" : "ExpressionStatement[19224-19259]:ExpressionStatement[19224-19259]"
    }, {
      "left" : "if (this.passes != null)",
      "right" : "if (this.passes != null)",
      "info" : "IfStatement[19265-19377]:IfStatement[19265-19377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19290-19377]:Block[19290-19377]"
    }, {
      "left" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
      "right" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
      "info" : "ThrowStatement[19298-19371]:ThrowStatement[19298-19371]"
    }, {
      "left" : "this.passes = passes;",
      "right" : "this.passes = passes;",
      "info" : "ExpressionStatement[19382-19403]:ExpressionStatement[19382-19403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19625-19647]:Block[19625-19647]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19631-19643]:ReturnStatement[19631-19643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19671-20673]:Block[19671-20673]"
    }, {
      "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
      "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
      "info" : "ExpressionStatement[19677-19732]:ExpressionStatement[19677-19732]"
    }, {
      "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "info" : "VariableDeclarationStatement[19738-19804]:VariableDeclarationStatement[19738-19804]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[19809-19909]:IfStatement[19809-19909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19852-19909]:Block[19852-19909]"
    }, {
      "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "info" : "ExpressionStatement[19860-19903]:ExpressionStatement[19860-19903]"
    }, {
      "left" : "phaseOptimizer.consume(getPassConfig().getChecks());",
      "right" : "phaseOptimizer.consume(getPassConfig().getChecks());",
      "info" : "ExpressionStatement[19914-19966]:ExpressionStatement[19914-19966]"
    }, {
      "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[19971-20015]:ExpressionStatement[19971-20015]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[20020-20058]:IfStatement[20020-20058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20037-20058]:Block[20037-20058]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20045-20052]:ReturnStatement[20045-20052]"
    }, {
      "left" : "if (options.nameAnonymousFunctionsOnly)",
      "right" : "if (options.nameAnonymousFunctionsOnly)",
      "info" : "IfStatement[20141-20202]:IfStatement[20141-20202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20181-20202]:Block[20181-20202]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20189-20196]:ReturnStatement[20189-20196]"
    }, {
      "left" : "if (options.removeTryCatchFinally)",
      "right" : "if (options.removeTryCatchFinally)",
      "info" : "IfStatement[20208-20281]:IfStatement[20208-20281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20243-20281]:Block[20243-20281]"
    }, {
      "left" : "removeTryCatchFinally();",
      "right" : "removeTryCatchFinally();",
      "info" : "ExpressionStatement[20251-20275]:ExpressionStatement[20251-20275]"
    }, {
      "left" : "if (!options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
      "right" : "if (!options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
      "info" : "IfStatement[20287-20601]:IfStatement[20287-20601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20466-20601]:Block[20466-20601]"
    }, {
      "left" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
      "right" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
      "info" : "ExpressionStatement[20474-20595]:ExpressionStatement[20474-20595]"
    }, {
      "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
      "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
      "info" : "ExpressionStatement[20607-20669]:ExpressionStatement[20607-20669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20706-20939]:Block[20706-20939]"
    }, {
      "left" : "logger.info(\"Creating extern file for exports\");",
      "right" : "logger.info(\"Creating extern file for exports\");",
      "info" : "ExpressionStatement[20712-20760]:ExpressionStatement[20712-20760]"
    }, {
      "left" : "startPass(\"externExports\");",
      "right" : "startPass(\"externExports\");",
      "info" : "ExpressionStatement[20765-20792]:ExpressionStatement[20765-20792]"
    }, {
      "left" : "ExternExportsPass pass = new ExternExportsPass(this);",
      "right" : "ExternExportsPass pass = new ExternExportsPass(this);",
      "info" : "VariableDeclarationStatement[20798-20851]:VariableDeclarationStatement[20798-20851]"
    }, {
      "left" : "process(pass);",
      "right" : "process(pass);",
      "info" : "ExpressionStatement[20856-20870]:ExpressionStatement[20856-20870]"
    }, {
      "left" : "externExports = pass.getGeneratedExterns();",
      "right" : "externExports = pass.getGeneratedExterns();",
      "info" : "ExpressionStatement[20876-20919]:ExpressionStatement[20876-20919]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[20925-20935]:ExpressionStatement[20925-20935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20972-21013]:Block[20972-21013]"
    }, {
      "left" : "p.process(externsRoot, jsRoot);",
      "right" : "p.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[20978-21009]:ExpressionStatement[20978-21009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21186-21233]:Block[21186-21233]"
    }, {
      "left" : "return new SanityCheck(compiler);",
      "right" : "return new SanityCheck(compiler);",
      "info" : "ReturnStatement[21194-21227]:ReturnStatement[21194-21227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21274-21358]:Block[21274-21358]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[21280-21354]:IfStatement[21280-21354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21323-21354]:Block[21323-21354]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[21331-21348]:ExpressionStatement[21331-21348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21392-21456]:Block[21392-21456]"
    }, {
      "left" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
      "right" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[21398-21452]:ExpressionStatement[21398-21452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21565-21735]:Block[21565-21735]"
    }, {
      "left" : "logger.info(\"Remove try/catch/finally\");",
      "right" : "logger.info(\"Remove try/catch/finally\");",
      "info" : "ExpressionStatement[21571-21611]:ExpressionStatement[21571-21611]"
    }, {
      "left" : "startPass(\"removeTryCatchFinally\");",
      "right" : "startPass(\"removeTryCatchFinally\");",
      "info" : "ExpressionStatement[21616-21651]:ExpressionStatement[21616-21651]"
    }, {
      "left" : "RemoveTryCatch r = new RemoveTryCatch(this);",
      "right" : "RemoveTryCatch r = new RemoveTryCatch(this);",
      "info" : "VariableDeclarationStatement[21656-21700]:VariableDeclarationStatement[21656-21700]"
    }, {
      "left" : "process(r);",
      "right" : "process(r);",
      "info" : "ExpressionStatement[21705-21716]:ExpressionStatement[21705-21716]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[21721-21731]:ExpressionStatement[21721-21731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22017-22228]:Block[22017-22228]"
    }, {
      "left" : "logger.info(\"Strip code\");",
      "right" : "logger.info(\"Strip code\");",
      "info" : "ExpressionStatement[22023-22049]:ExpressionStatement[22023-22049]"
    }, {
      "left" : "startPass(\"stripCode\");",
      "right" : "startPass(\"stripCode\");",
      "info" : "ExpressionStatement[22054-22077]:ExpressionStatement[22054-22077]"
    }, {
      "left" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
      "right" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
      "info" : "VariableDeclarationStatement[22082-22193]:VariableDeclarationStatement[22082-22193]"
    }, {
      "left" : "process(r);",
      "right" : "process(r);",
      "info" : "ExpressionStatement[22198-22209]:ExpressionStatement[22198-22209]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[22214-22224]:ExpressionStatement[22214-22224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22385-22668]:Block[22385-22668]"
    }, {
      "left" : "if (options.customPasses != null)",
      "right" : "if (options.customPasses != null)",
      "info" : "IfStatement[22391-22664]:IfStatement[22391-22664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22425-22664]:Block[22425-22664]"
    }, {
      "left" : "Tracer t = newTracer(\"runCustomPasses\");",
      "right" : "Tracer t = newTracer(\"runCustomPasses\");",
      "info" : "VariableDeclarationStatement[22433-22473]:VariableDeclarationStatement[22433-22473]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[22480-22658]:TryStatement[22480-22658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22484-22598]:Block[22484-22598]"
    }, {
      "left" : "for (CompilerPass p : options.customPasses.get(executionTime))",
      "right" : "for (CompilerPass p : options.customPasses.get(executionTime))",
      "info" : "EnhancedForStatement[22494-22590]:EnhancedForStatement[22494-22590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22557-22590]:Block[22557-22590]"
    }, {
      "left" : "process(p);",
      "right" : "process(p);",
      "info" : "ExpressionStatement[22569-22580]:ExpressionStatement[22569-22580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22607-22658]:Block[22607-22658]"
    }, {
      "left" : "stopTracer(t, \"runCustomPasses\");",
      "right" : "stopTracer(t, \"runCustomPasses\");",
      "info" : "ExpressionStatement[22617-22650]:ExpressionStatement[22617-22650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22833-22964]:Block[22833-22964]"
    }, {
      "left" : "Preconditions.checkState(currentTracer == null);",
      "right" : "Preconditions.checkState(currentTracer == null);",
      "info" : "ExpressionStatement[22839-22887]:ExpressionStatement[22839-22887]"
    }, {
      "left" : "currentPassName = passName;",
      "right" : "currentPassName = passName;",
      "info" : "ExpressionStatement[22892-22919]:ExpressionStatement[22892-22919]"
    }, {
      "left" : "currentTracer = newTracer(passName);",
      "right" : "currentTracer = newTracer(passName);",
      "info" : "ExpressionStatement[22924-22960]:ExpressionStatement[22924-22960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23025-23311]:Block[23025-23311]"
    }, {
      "left" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
      "right" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
      "info" : "ExpressionStatement[23031-23138]:ExpressionStatement[23031-23138]"
    }, {
      "left" : "stopTracer(currentTracer, currentPassName);",
      "right" : "stopTracer(currentTracer, currentPassName);",
      "info" : "ExpressionStatement[23143-23186]:ExpressionStatement[23143-23186]"
    }, {
      "left" : "String passToCheck = currentPassName;",
      "right" : "String passToCheck = currentPassName;",
      "info" : "VariableDeclarationStatement[23191-23228]:VariableDeclarationStatement[23191-23228]"
    }, {
      "left" : "currentPassName = null;",
      "right" : "currentPassName = null;",
      "info" : "ExpressionStatement[23233-23256]:ExpressionStatement[23233-23256]"
    }, {
      "left" : "currentTracer = null;",
      "right" : "currentTracer = null;",
      "info" : "ExpressionStatement[23261-23282]:ExpressionStatement[23261-23282]"
    }, {
      "left" : "maybeSanityCheck();",
      "right" : "maybeSanityCheck();",
      "info" : "ExpressionStatement[23288-23307]:ExpressionStatement[23288-23307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23412-23648]:Block[23412-23648]"
    }, {
      "left" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
      "right" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
      "info" : "VariableDeclarationStatement[23418-23520]:VariableDeclarationStatement[23418-23520]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[23525-23600]:IfStatement[23525-23600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23552-23600]:Block[23552-23600]"
    }, {
      "left" : "tracker.recordPassStart(passName);",
      "right" : "tracker.recordPassStart(passName);",
      "info" : "ExpressionStatement[23560-23594]:ExpressionStatement[23560-23594]"
    }, {
      "left" : "return new Tracer(\"Compiler\", comment);",
      "right" : "return new Tracer(\"Compiler\", comment);",
      "info" : "ReturnStatement[23605-23644]:ReturnStatement[23605-23644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23695-23815]:Block[23695-23815]"
    }, {
      "left" : "long result = t.stop();",
      "right" : "long result = t.stop();",
      "info" : "VariableDeclarationStatement[23701-23724]:VariableDeclarationStatement[23701-23724]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[23729-23811]:IfStatement[23729-23811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23756-23811]:Block[23756-23811]"
    }, {
      "left" : "tracker.recordPassStop(passName, result);",
      "right" : "tracker.recordPassStop(passName, result);",
      "info" : "ExpressionStatement[23764-23805]:ExpressionStatement[23764-23805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23901-24224]:Block[23901-24224]"
    }, {
      "left" : "PassConfig.State state = getPassConfig().getIntermediateState();",
      "right" : "PassConfig.State state = getPassConfig().getIntermediateState();",
      "info" : "VariableDeclarationStatement[23907-23971]:VariableDeclarationStatement[23907-23971]"
    }, {
      "left" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames);",
      "right" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames);",
      "info" : "ReturnStatement[23976-24220]:ReturnStatement[23976-24220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24339-24368]:Block[24339-24368]"
    }, {
      "left" : "return getErrors();",
      "right" : "return getErrors();",
      "info" : "ReturnStatement[24345-24364]:ReturnStatement[24345-24364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24460-24502]:Block[24460-24502]"
    }, {
      "left" : "return errorManager.getErrors();",
      "right" : "return errorManager.getErrors();",
      "info" : "ReturnStatement[24466-24498]:ReturnStatement[24466-24498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24598-24642]:Block[24598-24642]"
    }, {
      "left" : "return errorManager.getWarnings();",
      "right" : "return errorManager.getWarnings();",
      "info" : "ReturnStatement[24604-24638]:ReturnStatement[24604-24638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24759-24792]:Block[24759-24792]"
    }, {
      "left" : "return externAndJsRoot;",
      "right" : "return externAndJsRoot;",
      "info" : "ReturnStatement[24765-24788]:ReturnStatement[24765-24788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24886-24918]:Block[24886-24918]"
    }, {
      "left" : "return uniqueNameId++;",
      "right" : "return uniqueNameId++;",
      "info" : "ReturnStatement[24892-24914]:ReturnStatement[24892-24914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25019-25046]:Block[25019-25046]"
    }, {
      "left" : "uniqueNameId = 0;",
      "right" : "uniqueNameId = 0;",
      "info" : "ExpressionStatement[25025-25042]:ExpressionStatement[25025-25042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25105-25277]:Block[25105-25277]"
    }, {
      "left" : "final Compiler self = this;",
      "right" : "final Compiler self = this;",
      "info" : "VariableDeclarationStatement[25111-25138]:VariableDeclarationStatement[25111-25138]"
    }, {
      "left" : "return new Supplier<String>() {\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
      "right" : "return new Supplier<String>() {\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
      "info" : "ReturnStatement[25143-25273]:ReturnStatement[25143-25273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25201-25266]:Block[25201-25266]"
    }, {
      "left" : "return String.valueOf(self.nextUniqueNameId());",
      "right" : "return String.valueOf(self.nextUniqueNameId());",
      "info" : "ReturnStatement[25211-25258]:ReturnStatement[25211-25258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25453-25481]:Block[25453-25481]"
    }, {
      "left" : "normalized = true;",
      "right" : "normalized = true;",
      "info" : "ExpressionStatement[25459-25477]:ExpressionStatement[25459-25477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25661-25690]:Block[25661-25690]"
    }, {
      "left" : "normalized = false;",
      "right" : "normalized = false;",
      "info" : "ExpressionStatement[25667-25686]:ExpressionStatement[25667-25686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25729-25757]:Block[25729-25757]"
    }, {
      "left" : "return normalized;",
      "right" : "return normalized;",
      "info" : "ReturnStatement[25735-25753]:ReturnStatement[25735-25753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25824-26142]:Block[25824-26142]"
    }, {
      "left" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
      "right" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
      "info" : "IfStatement[25830-26138]:IfStatement[25830-26138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25905-26082]:Block[25905-26082]"
    }, {
      "left" : "return n1.checkTreeTypeAwareEqualsSilent(n2);",
      "right" : "return n1.checkTreeTypeAwareEqualsSilent(n2);",
      "info" : "ReturnStatement[26031-26076]:ReturnStatement[26031-26076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26088-26138]:Block[26088-26138]"
    }, {
      "left" : "return n1.checkTreeEqualsSilent(n2);",
      "right" : "return n1.checkTreeEqualsSilent(n2);",
      "info" : "ReturnStatement[26096-26132]:ReturnStatement[26096-26132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26508-26548]:Block[26508-26548]"
    }, {
      "left" : "return inputsByName.get(name);",
      "right" : "return inputsByName.get(name);",
      "info" : "ReturnStatement[26514-26544]:ReturnStatement[26514-26544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26613-26959]:Block[26613-26959]"
    }, {
      "left" : "if (inputsByName.containsKey(name))",
      "right" : "if (inputsByName.containsKey(name))",
      "info" : "IfStatement[26619-26741]:IfStatement[26619-26741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26655-26741]:Block[26655-26741]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
      "right" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
      "info" : "ThrowStatement[26663-26735]:ThrowStatement[26663-26735]"
    }, {
      "left" : "SourceAst ast = new SyntheticAst(name);",
      "right" : "SourceAst ast = new SyntheticAst(name);",
      "info" : "VariableDeclarationStatement[26746-26785]:VariableDeclarationStatement[26746-26785]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(ast, name, true);",
      "right" : "CompilerInput input = new CompilerInput(ast, name, true);",
      "info" : "VariableDeclarationStatement[26790-26847]:VariableDeclarationStatement[26790-26847]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[26852-26882]:ExpressionStatement[26852-26882]"
    }, {
      "left" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
      "right" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
      "info" : "ExpressionStatement[26887-26937]:ExpressionStatement[26887-26937]"
    }, {
      "left" : "return input;",
      "right" : "return input;",
      "info" : "ReturnStatement[26942-26955]:ReturnStatement[26942-26955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27082-27318]:Block[27082-27318]"
    }, {
      "left" : "String sourceName = ast.getSourceFile().getName();",
      "right" : "String sourceName = ast.getSourceFile().getName();",
      "info" : "VariableDeclarationStatement[27088-27138]:VariableDeclarationStatement[27088-27138]"
    }, {
      "left" : "Preconditions.checkState(\n        getInput(sourceName) == null,\n        \"Duplicate input of name \" + sourceName);",
      "right" : "Preconditions.checkState(\n        getInput(sourceName) == null,\n        \"Duplicate input of name \" + sourceName);",
      "info" : "ExpressionStatement[27143-27256]:ExpressionStatement[27143-27256]"
    }, {
      "left" : "inputsByName.put(sourceName, new CompilerInput(ast));",
      "right" : "inputsByName.put(sourceName, new CompilerInput(ast));",
      "info" : "ExpressionStatement[27261-27314]:ExpressionStatement[27261-27314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27365-27394]:Block[27365-27394]"
    }, {
      "left" : "return moduleGraph;",
      "right" : "return moduleGraph;",
      "info" : "ReturnStatement[27371-27390]:ReturnStatement[27371-27390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27450-27597]:Block[27450-27597]"
    }, {
      "left" : "if (typeRegistry == null)",
      "right" : "if (typeRegistry == null)",
      "info" : "IfStatement[27456-27568]:IfStatement[27456-27568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27482-27568]:Block[27482-27568]"
    }, {
      "left" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
      "right" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
      "info" : "ExpressionStatement[27490-27562]:ExpressionStatement[27490-27562]"
    }, {
      "left" : "return typeRegistry;",
      "right" : "return typeRegistry;",
      "info" : "ReturnStatement[27573-27593]:ReturnStatement[27573-27593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27644-27695]:Block[27644-27695]"
    }, {
      "left" : "return getPassConfig().getScopeCreator();",
      "right" : "return getPassConfig().getScopeCreator();",
      "info" : "ReturnStatement[27650-27691]:ReturnStatement[27650-27691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27738-27785]:Block[27738-27785]"
    }, {
      "left" : "return getPassConfig().getTopScope();",
      "right" : "return getPassConfig().getTopScope();",
      "info" : "ReturnStatement[27744-27781]:ReturnStatement[27744-27781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27867-28354]:Block[27867-28354]"
    }, {
      "left" : "if (abstractInterpreter == null)",
      "right" : "if (abstractInterpreter == null)",
      "info" : "IfStatement[27873-28318]:IfStatement[27873-28318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27906-28318]:Block[27906-28318]"
    }, {
      "left" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
      "right" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
      "info" : "VariableDeclarationStatement[27914-28070]:VariableDeclarationStatement[27914-28070]"
    }, {
      "left" : "if (options.closurePass)",
      "right" : "if (options.closurePass)",
      "info" : "IfStatement[28077-28271]:IfStatement[28077-28271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28102-28271]:Block[28102-28271]"
    }, {
      "left" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
      "right" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
      "info" : "ExpressionStatement[28112-28263]:ExpressionStatement[28112-28263]"
    }, {
      "left" : "abstractInterpreter = interpreter;",
      "right" : "abstractInterpreter = interpreter;",
      "info" : "ExpressionStatement[28278-28312]:ExpressionStatement[28278-28312]"
    }, {
      "left" : "return abstractInterpreter;",
      "right" : "return abstractInterpreter;",
      "info" : "ReturnStatement[28323-28350]:ReturnStatement[28323-28350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28403-28520]:Block[28403-28520]"
    }, {
      "left" : "if (typeValidator == null)",
      "right" : "if (typeValidator == null)",
      "info" : "IfStatement[28409-28490]:IfStatement[28409-28490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28436-28490]:Block[28436-28490]"
    }, {
      "left" : "typeValidator = new TypeValidator(this);",
      "right" : "typeValidator = new TypeValidator(this);",
      "info" : "ExpressionStatement[28444-28484]:ExpressionStatement[28444-28484]"
    }, {
      "left" : "return typeValidator;",
      "right" : "return typeValidator;",
      "info" : "ReturnStatement[28495-28516]:ReturnStatement[28495-28516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28871-32773]:Block[28871-32773]"
    }, {
      "left" : "boolean devMode = options.devMode != DevMode.OFF;",
      "right" : "boolean devMode = options.devMode != DevMode.OFF;",
      "info" : "VariableDeclarationStatement[28877-28926]:VariableDeclarationStatement[28877-28926]"
    }, {
      "left" : "if (externsRoot != null)",
      "right" : "if (externsRoot != null)",
      "info" : "IfStatement[29045-29113]:IfStatement[29045-29113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29070-29113]:Block[29070-29113]"
    }, {
      "left" : "externsRoot.detachChildren();",
      "right" : "externsRoot.detachChildren();",
      "info" : "ExpressionStatement[29078-29107]:ExpressionStatement[29078-29107]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[29118-29176]:IfStatement[29118-29176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29138-29176]:Block[29138-29176]"
    }, {
      "left" : "jsRoot.detachChildren();",
      "right" : "jsRoot.detachChildren();",
      "info" : "ExpressionStatement[29146-29170]:ExpressionStatement[29146-29170]"
    }, {
      "left" : "jsRoot = new Node(Token.BLOCK);",
      "right" : "jsRoot = new Node(Token.BLOCK);",
      "info" : "ExpressionStatement[29212-29243]:ExpressionStatement[29212-29243]"
    }, {
      "left" : "jsRoot.setIsSyntheticBlock(true);",
      "right" : "jsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[29248-29281]:ExpressionStatement[29248-29281]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[29287-29469]:IfStatement[29287-29469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29314-29469]:Block[29314-29469]"
    }, {
      "left" : "tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);",
      "right" : "tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);",
      "info" : "ExpressionStatement[29322-29407]:ExpressionStatement[29322-29407]"
    }, {
      "left" : "addChangeHandler(tracker.getCodeChangeHandler());",
      "right" : "addChangeHandler(tracker.getCodeChangeHandler());",
      "info" : "ExpressionStatement[29414-29463]:ExpressionStatement[29414-29463]"
    }, {
      "left" : "Tracer tracer = newTracer(\"parseInputs\");",
      "right" : "Tracer tracer = newTracer(\"parseInputs\");",
      "info" : "VariableDeclarationStatement[29475-29516]:VariableDeclarationStatement[29475-29516]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29522-32769]:TryStatement[29522-32769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29526-32712]:Block[29526-32712]"
    }, {
      "left" : "externsRoot = new Node(Token.BLOCK);",
      "right" : "externsRoot = new Node(Token.BLOCK);",
      "info" : "ExpressionStatement[29566-29602]:ExpressionStatement[29566-29602]"
    }, {
      "left" : "externsRoot.setIsSyntheticBlock(true);",
      "right" : "externsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[29609-29647]:ExpressionStatement[29609-29647]"
    }, {
      "left" : "for (CompilerInput input : externs)",
      "right" : "for (CompilerInput input : externs)",
      "info" : "EnhancedForStatement[29654-29839]:EnhancedForStatement[29654-29839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29690-29839]:Block[29690-29839]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[29700-29732]:VariableDeclarationStatement[29700-29732]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[29741-29792]:IfStatement[29741-29792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29758-29792]:Block[29758-29792]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29770-29782]:ReturnStatement[29770-29782]"
    }, {
      "left" : "externsRoot.addChildToBack(n);",
      "right" : "externsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[29801-29831]:ExpressionStatement[29801-29831]"
    }, {
      "left" : "if (options.manageClosureDependencies)",
      "right" : "if (options.manageClosureDependencies)",
      "info" : "IfStatement[29900-30641]:IfStatement[29900-30641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29939-30641]:Block[29939-30641]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[29949-30295]:EnhancedForStatement[29949-30295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29984-30295]:Block[29984-30295]"
    }, {
      "left" : "input.setCompiler(this);",
      "right" : "input.setCompiler(this);",
      "info" : "ExpressionStatement[29996-30020]:ExpressionStatement[29996-30020]"
    }, {
      "left" : "for (String provide : input.getProvides())",
      "right" : "for (String provide : input.getProvides())",
      "info" : "EnhancedForStatement[30170-30285]:EnhancedForStatement[30170-30285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30213-30285]:Block[30213-30285]"
    }, {
      "left" : "getTypeRegistry().forwardDeclareType(provide);",
      "right" : "getTypeRegistry().forwardDeclareType(provide);",
      "info" : "ExpressionStatement[30227-30273]:ExpressionStatement[30227-30273]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[30305-30633]:TryStatement[30305-30633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30309-30461]:Block[30309-30461]"
    }, {
      "left" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(inputs);",
      "right" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(inputs);",
      "info" : "ExpressionStatement[30321-30451]:ExpressionStatement[30321-30451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30500-30633]:Block[30500-30633]"
    }, {
      "left" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
      "right" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
      "info" : "ExpressionStatement[30512-30600]:ExpressionStatement[30512-30600]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30611-30623]:ReturnStatement[30611-30623]"
    }, {
      "left" : "boolean staleInputs = false;",
      "right" : "boolean staleInputs = false;",
      "info" : "VariableDeclarationStatement[30707-30735]:VariableDeclarationStatement[30707-30735]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[30742-31646]:EnhancedForStatement[30742-31646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30777-31646]:Block[30777-31646]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[30787-30819]:VariableDeclarationStatement[30787-30819]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[30828-30879]:IfStatement[30828-30879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30845-30879]:Block[30845-30879]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30857-30869]:ReturnStatement[30857-30869]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[30949-30995]:IfStatement[30949-30995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30964-30995]:Block[30964-30995]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[30976-30985]:ContinueStatement[30976-30985]"
    }, {
      "left" : "if (n.getJSDocInfo() != null)",
      "right" : "if (n.getJSDocInfo() != null)",
      "info" : "IfStatement[31005-31638]:IfStatement[31005-31638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31035-31638]:Block[31035-31638]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[31047-31081]:VariableDeclarationStatement[31047-31081]"
    }, {
      "left" : "if (info.isExterns())",
      "right" : "if (info.isExterns())",
      "info" : "IfStatement[31092-31628]:IfStatement[31092-31628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31114-31508]:Block[31114-31508]"
    }, {
      "left" : "externsRoot.addChildToBack(n);",
      "right" : "externsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[31318-31348]:ExpressionStatement[31318-31348]"
    }, {
      "left" : "input.setIsExtern(true);",
      "right" : "input.setIsExtern(true);",
      "info" : "ExpressionStatement[31361-31385]:ExpressionStatement[31361-31385]"
    }, {
      "left" : "input.getModule().remove(input);",
      "right" : "input.getModule().remove(input);",
      "info" : "ExpressionStatement[31399-31431]:ExpressionStatement[31399-31431]"
    }, {
      "left" : "externs.add(input);",
      "right" : "externs.add(input);",
      "info" : "ExpressionStatement[31445-31464]:ExpressionStatement[31445-31464]"
    }, {
      "left" : "staleInputs = true;",
      "right" : "staleInputs = true;",
      "info" : "ExpressionStatement[31477-31496]:ExpressionStatement[31477-31496]"
    }, {
      "left" : "if (info.isNoCompile())",
      "right" : "if (info.isNoCompile())",
      "info" : "IfStatement[31514-31628]:IfStatement[31514-31628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31538-31628]:Block[31538-31628]"
    }, {
      "left" : "input.getModule().remove(input);",
      "right" : "input.getModule().remove(input);",
      "info" : "ExpressionStatement[31552-31584]:ExpressionStatement[31552-31584]"
    }, {
      "left" : "staleInputs = true;",
      "right" : "staleInputs = true;",
      "info" : "ExpressionStatement[31597-31616]:ExpressionStatement[31597-31616]"
    }, {
      "left" : "if (staleInputs)",
      "right" : "if (staleInputs)",
      "info" : "IfStatement[31654-31751]:IfStatement[31654-31751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31671-31751]:Block[31671-31751]"
    }, {
      "left" : "fillEmptyModules(modules);",
      "right" : "fillEmptyModules(modules);",
      "info" : "ExpressionStatement[31681-31707]:ExpressionStatement[31681-31707]"
    }, {
      "left" : "rebuildInputsFromModules();",
      "right" : "rebuildInputsFromModules();",
      "info" : "ExpressionStatement[31716-31743]:ExpressionStatement[31716-31743]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[31783-32557]:EnhancedForStatement[31783-32557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31818-32557]:Block[31818-32557]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[31828-31860]:VariableDeclarationStatement[31828-31860]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[31869-31915]:IfStatement[31869-31915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31884-31915]:Block[31884-31915]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[31896-31905]:ContinueStatement[31896-31905]"
    }, {
      "left" : "if (devMode)",
      "right" : "if (devMode)",
      "info" : "IfStatement[31925-32043]:IfStatement[31925-32043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31938-32043]:Block[31938-32043]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[31950-31967]:ExpressionStatement[31950-31967]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[31978-32033]:IfStatement[31978-32033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31995-32033]:Block[31995-32033]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32009-32021]:ReturnStatement[32009-32021]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
      "right" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
      "info" : "IfStatement[32053-32514]:IfStatement[32053-32514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32149-32514]:Block[32149-32514]"
    }, {
      "left" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
      "right" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
      "info" : "VariableDeclarationStatement[32310-32456]:VariableDeclarationStatement[32310-32456]"
    }, {
      "left" : "NodeTraversal.traverse(this, n, sia);",
      "right" : "NodeTraversal.traverse(this, n, sia);",
      "info" : "ExpressionStatement[32467-32504]:ExpressionStatement[32467-32504]"
    }, {
      "left" : "jsRoot.addChildToBack(n);",
      "right" : "jsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[32524-32549]:ExpressionStatement[32524-32549]"
    }, {
      "left" : "externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);",
      "right" : "externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);",
      "info" : "ExpressionStatement[32565-32626]:ExpressionStatement[32565-32626]"
    }, {
      "left" : "externAndJsRoot.setIsSyntheticBlock(true);",
      "right" : "externAndJsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[32633-32675]:ExpressionStatement[32633-32675]"
    }, {
      "left" : "return externAndJsRoot;",
      "right" : "return externAndJsRoot;",
      "info" : "ReturnStatement[32683-32706]:ReturnStatement[32683-32706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32721-32769]:Block[32721-32769]"
    }, {
      "left" : "stopTracer(tracer, \"parseInputs\");",
      "right" : "stopTracer(tracer, \"parseInputs\");",
      "info" : "ExpressionStatement[32729-32763]:ExpressionStatement[32729-32763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32814-32949]:Block[32814-32949]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[32820-32851]:ExpressionStatement[32820-32851]"
    }, {
      "left" : "addToDebugLog(\"Parsing: \" + file.getName());",
      "right" : "addToDebugLog(\"Parsing: \" + file.getName());",
      "info" : "ExpressionStatement[32856-32900]:ExpressionStatement[32856-32900]"
    }, {
      "left" : "return new JsAst(file).getAstRoot(this);",
      "right" : "return new JsAst(file).getAstRoot(this);",
      "info" : "ReturnStatement[32905-32945]:ReturnStatement[32905-32945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33000-33184]:Block[33000-33184]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [synthetic] \", js));",
      "right" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [synthetic] \", js));",
      "info" : "VariableDeclarationStatement[33006-33099]:VariableDeclarationStatement[33006-33099]"
    }, {
      "left" : "inputsByName.put(input.getName(), input);",
      "right" : "inputsByName.put(input.getName(), input);",
      "info" : "ExpressionStatement[33104-33145]:ExpressionStatement[33104-33145]"
    }, {
      "left" : "return input.getAstRoot(this);",
      "right" : "return input.getAstRoot(this);",
      "info" : "ReturnStatement[33150-33180]:ReturnStatement[33150-33180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33224-33408]:Block[33224-33408]"
    }, {
      "left" : "if (options == null)",
      "right" : "if (options == null)",
      "info" : "IfStatement[33230-33404]:IfStatement[33230-33404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33251-33404]:Block[33251-33404]"
    }, {
      "left" : "initOptions(new CompilerOptions());",
      "right" : "initOptions(new CompilerOptions());",
      "info" : "ExpressionStatement[33363-33398]:ExpressionStatement[33363-33398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33476-33572]:Block[33476-33572]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[33482-33513]:ExpressionStatement[33482-33513]"
    }, {
      "left" : "return parse(JSSourceFile.fromCode(fileName, js));",
      "right" : "return parse(JSSourceFile.fromCode(fileName, js));",
      "info" : "ReturnStatement[33518-33568]:ReturnStatement[33518-33568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33606-33903]:Block[33606-33903]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[33612-33643]:ExpressionStatement[33612-33643]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [testcode] \", js));",
      "right" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [testcode] \", js));",
      "info" : "VariableDeclarationStatement[33648-33740]:VariableDeclarationStatement[33648-33740]"
    }, {
      "left" : "if (inputsByName == null)",
      "right" : "if (inputsByName == null)",
      "info" : "IfStatement[33745-33818]:IfStatement[33745-33818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33771-33818]:Block[33771-33818]"
    }, {
      "left" : "inputsByName = Maps.newHashMap();",
      "right" : "inputsByName = Maps.newHashMap();",
      "info" : "ExpressionStatement[33779-33812]:ExpressionStatement[33779-33812]"
    }, {
      "left" : "inputsByName.put(input.getName(), input);",
      "right" : "inputsByName.put(input.getName(), input);",
      "info" : "ExpressionStatement[33823-33864]:ExpressionStatement[33823-33864]"
    }, {
      "left" : "return input.getAstRoot(this);",
      "right" : "return input.getAstRoot(this);",
      "info" : "ReturnStatement[33869-33899]:ReturnStatement[33869-33899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33959-33997]:Block[33959-33997]"
    }, {
      "left" : "return defaultErrorReporter;",
      "right" : "return defaultErrorReporter;",
      "info" : "ReturnStatement[33965-33993]:ReturnStatement[33965-33993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34277-34887]:Block[34277-34887]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
      "info" : "ReturnStatement[34283-34883]:ReturnStatement[34283-34883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34379-34875]:Block[34379-34875]"
    }, {
      "left" : "Tracer tracer = newTracer(\"toSource\");",
      "right" : "Tracer tracer = newTracer(\"toSource\");",
      "info" : "VariableDeclarationStatement[34389-34427]:VariableDeclarationStatement[34389-34427]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[34436-34867]:TryStatement[34436-34867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34440-34805]:Block[34440-34805]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[34452-34487]:VariableDeclarationStatement[34452-34487]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[34498-34763]:IfStatement[34498-34763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34518-34763]:Block[34518-34763]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[34532-34542]:VariableDeclarationStatement[34532-34542]"
    }, {
      "left" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
      "right" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
      "info" : "ForStatement[34555-34751]:ForStatement[34555-34751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34691-34751]:Block[34691-34751]"
    }, {
      "left" : "toSource(cb, i++, scriptNode);",
      "right" : "toSource(cb, i++, scriptNode);",
      "info" : "ExpressionStatement[34707-34737]:ExpressionStatement[34707-34737]"
    }, {
      "left" : "return cb.toString();",
      "right" : "return cb.toString();",
      "info" : "ReturnStatement[34774-34795]:ReturnStatement[34774-34795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34814-34867]:Block[34814-34867]"
    }, {
      "left" : "stopTracer(tracer, \"toSource\");",
      "right" : "stopTracer(tracer, \"toSource\");",
      "info" : "ExpressionStatement[34826-34857]:ExpressionStatement[34826-34857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34996-35667]:Block[34996-35667]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
      "info" : "ReturnStatement[35002-35663]:ReturnStatement[35002-35663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35102-35655]:Block[35102-35655]"
    }, {
      "left" : "Tracer tracer = newTracer(\"toSourceArray\");",
      "right" : "Tracer tracer = newTracer(\"toSourceArray\");",
      "info" : "VariableDeclarationStatement[35112-35155]:VariableDeclarationStatement[35112-35155]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[35164-35647]:TryStatement[35164-35647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35168-35580]:Block[35168-35580]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[35180-35210]:VariableDeclarationStatement[35180-35210]"
    }, {
      "left" : "String[] sources = new String[numInputs];",
      "right" : "String[] sources = new String[numInputs];",
      "info" : "VariableDeclarationStatement[35221-35262]:VariableDeclarationStatement[35221-35262]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[35273-35308]:VariableDeclarationStatement[35273-35308]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[35319-35544]:ForStatement[35319-35544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35355-35544]:Block[35355-35544]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[35369-35427]:VariableDeclarationStatement[35369-35427]"
    }, {
      "left" : "cb.reset();",
      "right" : "cb.reset();",
      "info" : "ExpressionStatement[35440-35451]:ExpressionStatement[35440-35451]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[35464-35492]:ExpressionStatement[35464-35492]"
    }, {
      "left" : "sources[i] = cb.toString();",
      "right" : "sources[i] = cb.toString();",
      "info" : "ExpressionStatement[35505-35532]:ExpressionStatement[35505-35532]"
    }, {
      "left" : "return sources;",
      "right" : "return sources;",
      "info" : "ReturnStatement[35555-35570]:ReturnStatement[35555-35570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35589-35647]:Block[35589-35647]"
    }, {
      "left" : "stopTracer(tracer, \"toSourceArray\");",
      "right" : "stopTracer(tracer, \"toSourceArray\");",
      "info" : "ExpressionStatement[35601-35637]:ExpressionStatement[35601-35637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35788-36454]:Block[35788-36454]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
      "info" : "ReturnStatement[35794-36450]:ReturnStatement[35794-36450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35890-36442]:Block[35890-36442]"
    }, {
      "left" : "List<CompilerInput> inputs = module.getInputs();",
      "right" : "List<CompilerInput> inputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[35900-35948]:VariableDeclarationStatement[35900-35948]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[35957-35987]:VariableDeclarationStatement[35957-35987]"
    }, {
      "left" : "if (numInputs == 0)",
      "right" : "if (numInputs == 0)",
      "info" : "IfStatement[35996-36048]:IfStatement[35996-36048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36016-36048]:Block[36016-36048]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[36028-36038]:ReturnStatement[36028-36038]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[36057-36092]:VariableDeclarationStatement[36057-36092]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[36101-36404]:ForStatement[36101-36404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36137-36404]:Block[36137-36404]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[36149-36207]:VariableDeclarationStatement[36149-36207]"
    }, {
      "left" : "if (scriptNode == null)",
      "right" : "if (scriptNode == null)",
      "info" : "IfStatement[36218-36355]:IfStatement[36218-36355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36242-36355]:Block[36242-36355]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
      "right" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
      "info" : "ThrowStatement[36256-36343]:ThrowStatement[36256-36343]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[36366-36394]:ExpressionStatement[36366-36394]"
    }, {
      "left" : "return cb.toString();",
      "right" : "return cb.toString();",
      "info" : "ReturnStatement[36413-36434]:ReturnStatement[36413-36434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36597-37397]:Block[36597-37397]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
      "info" : "ReturnStatement[36603-37393]:ReturnStatement[36603-37393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36703-37385]:Block[36703-37385]"
    }, {
      "left" : "List<CompilerInput> inputs = module.getInputs();",
      "right" : "List<CompilerInput> inputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[36713-36761]:VariableDeclarationStatement[36713-36761]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[36770-36800]:VariableDeclarationStatement[36770-36800]"
    }, {
      "left" : "if (numInputs == 0)",
      "right" : "if (numInputs == 0)",
      "info" : "IfStatement[36809-36872]:IfStatement[36809-36872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36829-36872]:Block[36829-36872]"
    }, {
      "left" : "return new String[0];",
      "right" : "return new String[0];",
      "info" : "ReturnStatement[36841-36862]:ReturnStatement[36841-36862]"
    }, {
      "left" : "String[] sources = new String[numInputs];",
      "right" : "String[] sources = new String[numInputs];",
      "info" : "VariableDeclarationStatement[36882-36923]:VariableDeclarationStatement[36882-36923]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[36932-36967]:VariableDeclarationStatement[36932-36967]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[36976-37353]:ForStatement[36976-37353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37012-37353]:Block[37012-37353]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[37024-37082]:VariableDeclarationStatement[37024-37082]"
    }, {
      "left" : "if (scriptNode == null)",
      "right" : "if (scriptNode == null)",
      "info" : "IfStatement[37093-37243]:IfStatement[37093-37243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37117-37243]:Block[37117-37243]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
      "right" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
      "info" : "ThrowStatement[37131-37231]:ThrowStatement[37131-37231]"
    }, {
      "left" : "cb.reset();",
      "right" : "cb.reset();",
      "info" : "ExpressionStatement[37255-37266]:ExpressionStatement[37255-37266]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[37277-37305]:ExpressionStatement[37277-37305]"
    }, {
      "left" : "sources[i] = cb.toString();",
      "right" : "sources[i] = cb.toString();",
      "info" : "ExpressionStatement[37316-37343]:ExpressionStatement[37316-37343]"
    }, {
      "left" : "return sources;",
      "right" : "return sources;",
      "info" : "ReturnStatement[37362-37377]:ReturnStatement[37362-37377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37883-39452]:Block[37883-39452]"
    }, {
      "left" : "runInCompilerThread(new Callable<Void>() {\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.getType() == Token.SCRIPT);\n\n          String delimiter = options.inputDelimiter;\n\n          String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        String code = toSource(root, sourceMap);\n        if (!code.isEmpty()) {\n          cb.append(code);\n          if (!code.endsWith(\";\")) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
      "right" : "runInCompilerThread(new Callable<Void>() {\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.getType() == Token.SCRIPT);\n\n          String delimiter = options.inputDelimiter;\n\n          String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        String code = toSource(root, sourceMap);\n        if (!code.isEmpty()) {\n          cb.append(code);\n          if (!code.endsWith(\";\")) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
      "info" : "ExpressionStatement[37889-39448]:ExpressionStatement[37889-39448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37974-39440]:Block[37974-39440]"
    }, {
      "left" : "if (options.printInputDelimiter)",
      "right" : "if (options.printInputDelimiter)",
      "info" : "IfStatement[37984-38679]:IfStatement[37984-38679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38017-38679]:Block[38017-38679]"
    }, {
      "left" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
      "right" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
      "info" : "IfStatement[38029-38169]:IfStatement[38029-38169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38077-38169]:Block[38077-38169]"
    }, {
      "left" : "cb.append(\"\\n\");",
      "right" : "cb.append(\"\\n\");",
      "info" : "ExpressionStatement[38091-38107]:ExpressionStatement[38091-38107]"
    }, {
      "left" : "Preconditions.checkState(root.getType() == Token.SCRIPT);",
      "right" : "Preconditions.checkState(root.getType() == Token.SCRIPT);",
      "info" : "ExpressionStatement[38180-38237]:ExpressionStatement[38180-38237]"
    }, {
      "left" : "String delimiter = options.inputDelimiter;",
      "right" : "String delimiter = options.inputDelimiter;",
      "info" : "VariableDeclarationStatement[38249-38291]:VariableDeclarationStatement[38249-38291]"
    }, {
      "left" : "String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);",
      "right" : "String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);",
      "info" : "VariableDeclarationStatement[38303-38366]:VariableDeclarationStatement[38303-38366]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[38377-38422]:ExpressionStatement[38377-38422]"
    }, {
      "left" : "Preconditions.checkState(!sourceName.isEmpty());",
      "right" : "Preconditions.checkState(!sourceName.isEmpty());",
      "info" : "ExpressionStatement[38433-38481]:ExpressionStatement[38433-38481]"
    }, {
      "left" : "delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
      "right" : "delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
      "info" : "ExpressionStatement[38493-38610]:ExpressionStatement[38493-38610]"
    }, {
      "left" : "cb.append(delimiter)\n            .append(\"\\n\");",
      "right" : "cb.append(delimiter)\n            .append(\"\\n\");",
      "info" : "ExpressionStatement[38622-38669]:ExpressionStatement[38622-38669]"
    }, {
      "left" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
      "right" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
      "info" : "IfStatement[38688-38899]:IfStatement[38688-38899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38777-38899]:Block[38777-38899]"
    }, {
      "left" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
      "right" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
      "info" : "ExpressionStatement[38789-38889]:ExpressionStatement[38789-38889]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[39068-39216]:IfStatement[39068-39216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39109-39216]:Block[39109-39216]"
    }, {
      "left" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
      "right" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
      "info" : "ExpressionStatement[39121-39206]:ExpressionStatement[39121-39206]"
    }, {
      "left" : "String code = toSource(root, sourceMap);",
      "right" : "String code = toSource(root, sourceMap);",
      "info" : "VariableDeclarationStatement[39226-39266]:VariableDeclarationStatement[39226-39266]"
    }, {
      "left" : "if (!code.isEmpty())",
      "right" : "if (!code.isEmpty())",
      "info" : "IfStatement[39275-39411]:IfStatement[39275-39411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39296-39411]:Block[39296-39411]"
    }, {
      "left" : "cb.append(code);",
      "right" : "cb.append(code);",
      "info" : "ExpressionStatement[39308-39324]:ExpressionStatement[39308-39324]"
    }, {
      "left" : "if (!code.endsWith(\";\"))",
      "right" : "if (!code.endsWith(\";\"))",
      "info" : "IfStatement[39335-39401]:IfStatement[39335-39401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39360-39401]:Block[39360-39401]"
    }, {
      "left" : "cb.append(\";\");",
      "right" : "cb.append(\";\");",
      "info" : "ExpressionStatement[39374-39389]:ExpressionStatement[39374-39389]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39420-39432]:ReturnStatement[39420-39432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39593-39664]:Block[39593-39664]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[39599-39630]:ExpressionStatement[39599-39630]"
    }, {
      "left" : "return toSource(n, null);",
      "right" : "return toSource(n, null);",
      "info" : "ReturnStatement[39635-39660]:ReturnStatement[39635-39660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39783-40162]:Block[39783-40226]"
    }, {
      "left" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
      "right" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
      "info" : "VariableDeclarationStatement[39789-39846]:VariableDeclarationStatement[39789-39846]"
    }, {
      "left" : "builder.setPrettyPrint(options.prettyPrint);",
      "right" : "builder.setPrettyPrint(options.prettyPrint);",
      "info" : "ExpressionStatement[39851-39895]:ExpressionStatement[39851-39895]"
    }, {
      "left" : "builder.setLineBreak(options.lineBreak);",
      "right" : "builder.setLineBreak(options.lineBreak);",
      "info" : "ExpressionStatement[39900-39940]:ExpressionStatement[39900-39940]"
    }, {
      "left" : "builder.setSourceMap(sourceMap);",
      "right" : "builder.setSourceMap(sourceMap);",
      "info" : "ExpressionStatement[39945-39977]:ExpressionStatement[39945-39977]"
    }, {
      "left" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
      "right" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
      "info" : "ExpressionStatement[39982-40044]:ExpressionStatement[39982-40044]"
    }, {
      "left" : "builder.setOutputCharset(charset);",
      "right" : "builder.setOutputCharset(charset);",
      "info" : "ExpressionStatement[40095-40129]:ExpressionStatement[40159-40193]"
    }, {
      "left" : "return builder.build();",
      "right" : "return builder.build();",
      "info" : "ReturnStatement[40135-40158]:ReturnStatement[40199-40222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40562-40592]:Block[40626-40656]"
    }, {
      "left" : "sb.setLength(0);",
      "right" : "sb.setLength(0);",
      "info" : "ExpressionStatement[40570-40586]:ExpressionStatement[40634-40650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40685-41164]:Block[40749-41228]"
    }, {
      "left" : "sb.append(str);",
      "right" : "sb.append(str);",
      "info" : "ExpressionStatement[40693-40708]:ExpressionStatement[40757-40772]"
    }, {
      "left" : "int index = -1;",
      "right" : "int index = -1;",
      "info" : "VariableDeclarationStatement[40782-40797]:VariableDeclarationStatement[40846-40861]"
    }, {
      "left" : "int lastIndex = index;",
      "right" : "int lastIndex = index;",
      "info" : "VariableDeclarationStatement[40804-40826]:VariableDeclarationStatement[40868-40890]"
    }, {
      "left" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
      "right" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
      "info" : "WhileStatement[40833-40942]:WhileStatement[40897-41006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40885-40942]:Block[40949-41006]"
    }, {
      "left" : "++lineCount;",
      "right" : "++lineCount;",
      "info" : "ExpressionStatement[40895-40907]:ExpressionStatement[40959-40971]"
    }, {
      "left" : "lastIndex = index;",
      "right" : "lastIndex = index;",
      "info" : "ExpressionStatement[40916-40934]:ExpressionStatement[40980-40998]"
    }, {
      "left" : "if (lastIndex == -1)",
      "right" : "if (lastIndex == -1)",
      "info" : "IfStatement[40950-41138]:IfStatement[41014-41202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40971-41072]:Block[41035-41136]"
    }, {
      "left" : "colCount += str.length();",
      "right" : "colCount += str.length();",
      "info" : "ExpressionStatement[41039-41064]:ExpressionStatement[41103-41128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41078-41138]:Block[41142-41202]"
    }, {
      "left" : "colCount = str.length() - (lastIndex + 1);",
      "right" : "colCount = str.length() - (lastIndex + 1);",
      "info" : "ExpressionStatement[41088-41130]:ExpressionStatement[41152-41194]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[41146-41158]:ReturnStatement[41210-41222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41257-41292]:Block[41321-41356]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[41265-41286]:ReturnStatement[41329-41350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41371-41404]:Block[41435-41468]"
    }, {
      "left" : "return sb.length();",
      "right" : "return sb.length();",
      "info" : "ReturnStatement[41379-41398]:ReturnStatement[41443-41462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41508-41539]:Block[41572-41603]"
    }, {
      "left" : "return lineCount;",
      "right" : "return lineCount;",
      "info" : "ReturnStatement[41516-41533]:ReturnStatement[41580-41597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41647-41677]:Block[41711-41741]"
    }, {
      "left" : "return colCount;",
      "right" : "return colCount;",
      "info" : "ReturnStatement[41655-41671]:ReturnStatement[41719-41735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41782-41907]:Block[41846-41971]"
    }, {
      "left" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
      "right" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
      "info" : "ReturnStatement[41790-41901]:ReturnStatement[41854-41965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42112-42735]:Block[42176-42799]"
    }, {
      "left" : "normalize();",
      "right" : "normalize();",
      "info" : "ExpressionStatement[42386-42398]:ExpressionStatement[42450-42462]"
    }, {
      "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "info" : "VariableDeclarationStatement[42404-42470]:VariableDeclarationStatement[42468-42534]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[42475-42575]:IfStatement[42539-42639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42518-42575]:Block[42582-42639]"
    }, {
      "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "info" : "ExpressionStatement[42526-42569]:ExpressionStatement[42590-42633]"
    }, {
      "left" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
      "right" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
      "info" : "ExpressionStatement[42580-42639]:ExpressionStatement[42644-42703]"
    }, {
      "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[42644-42688]:ExpressionStatement[42708-42752]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[42693-42731]:IfStatement[42757-42795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42710-42731]:Block[42774-42795]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[42718-42725]:ReturnStatement[42782-42789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42794-42833]:Block[42858-42897]"
    }, {
      "left" : "options.cssRenamingMap = map;",
      "right" : "options.cssRenamingMap = map;",
      "info" : "ExpressionStatement[42800-42829]:ExpressionStatement[42864-42893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42884-42924]:Block[42948-42988]"
    }, {
      "left" : "return options.cssRenamingMap;",
      "right" : "return options.cssRenamingMap;",
      "info" : "ReturnStatement[42890-42920]:ReturnStatement[42954-42984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43306-43415]:Block[43370-43479]"
    }, {
      "left" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
      "right" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[43312-43411]:ExpressionStatement[43376-43475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43449-43622]:Block[43513-43686]"
    }, {
      "left" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
      "right" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
      "info" : "ReturnStatement[43455-43618]:ReturnStatement[43519-43682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43694-43941]:Block[43758-44005]"
    }, {
      "left" : "logger.info(\"Computing Control Flow Graph\");",
      "right" : "logger.info(\"Computing Control Flow Graph\");",
      "info" : "ExpressionStatement[43700-43744]:ExpressionStatement[43764-43808]"
    }, {
      "left" : "Tracer tracer = newTracer(\"computeCFG\");",
      "right" : "Tracer tracer = newTracer(\"computeCFG\");",
      "info" : "VariableDeclarationStatement[43749-43789]:VariableDeclarationStatement[43813-43853]"
    }, {
      "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);",
      "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);",
      "info" : "VariableDeclarationStatement[43794-43856]:VariableDeclarationStatement[43858-43920]"
    }, {
      "left" : "process(cfa);",
      "right" : "process(cfa);",
      "info" : "ExpressionStatement[43861-43874]:ExpressionStatement[43925-43938]"
    }, {
      "left" : "stopTracer(tracer, \"computeCFG\");",
      "right" : "stopTracer(tracer, \"computeCFG\");",
      "info" : "ExpressionStatement[43879-43912]:ExpressionStatement[43943-43976]"
    }, {
      "left" : "return cfa.getCfg();",
      "right" : "return cfa.getCfg();",
      "info" : "ReturnStatement[43917-43937]:ReturnStatement[43981-44001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43969-44090]:Block[44033-44154]"
    }, {
      "left" : "logger.info(\"Normalizing\");",
      "right" : "logger.info(\"Normalizing\");",
      "info" : "ExpressionStatement[43975-44002]:ExpressionStatement[44039-44066]"
    }, {
      "left" : "startPass(\"normalize\");",
      "right" : "startPass(\"normalize\");",
      "info" : "ExpressionStatement[44007-44030]:ExpressionStatement[44071-44094]"
    }, {
      "left" : "process(new Normalize(this, false));",
      "right" : "process(new Normalize(this, false));",
      "info" : "ExpressionStatement[44035-44071]:ExpressionStatement[44099-44135]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[44076-44086]:ExpressionStatement[44140-44150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44133-44297]:Block[44197-44361]"
    }, {
      "left" : "Tracer tracer = newTracer(\"prepareAst\");",
      "right" : "Tracer tracer = newTracer(\"prepareAst\");",
      "info" : "VariableDeclarationStatement[44139-44179]:VariableDeclarationStatement[44203-44243]"
    }, {
      "left" : "CompilerPass pass = new PrepareAst(this);",
      "right" : "CompilerPass pass = new PrepareAst(this);",
      "info" : "VariableDeclarationStatement[44184-44225]:VariableDeclarationStatement[44248-44289]"
    }, {
      "left" : "pass.process(null, root);",
      "right" : "pass.process(null, root);",
      "info" : "ExpressionStatement[44230-44255]:ExpressionStatement[44294-44319]"
    }, {
      "left" : "stopTracer(tracer, \"prepareAst\");",
      "right" : "stopTracer(tracer, \"prepareAst\");",
      "info" : "ExpressionStatement[44260-44293]:ExpressionStatement[44324-44357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44334-44715]:Block[44398-44779]"
    }, {
      "left" : "logger.info(\"Recording function information\");",
      "right" : "logger.info(\"Recording function information\");",
      "info" : "ExpressionStatement[44340-44386]:ExpressionStatement[44404-44450]"
    }, {
      "left" : "startPass(\"recordFunctionInformation\");",
      "right" : "startPass(\"recordFunctionInformation\");",
      "info" : "ExpressionStatement[44391-44430]:ExpressionStatement[44455-44494]"
    }, {
      "left" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
      "right" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
      "info" : "VariableDeclarationStatement[44435-44597]:VariableDeclarationStatement[44499-44661]"
    }, {
      "left" : "process(recordFunctionInfoPass);",
      "right" : "process(recordFunctionInfoPass);",
      "info" : "ExpressionStatement[44602-44634]:ExpressionStatement[44666-44698]"
    }, {
      "left" : "functionInformationMap = recordFunctionInfoPass.getMap();",
      "right" : "functionInformationMap = recordFunctionInfoPass.getMap();",
      "info" : "ExpressionStatement[44639-44696]:ExpressionStatement[44703-44760]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[44701-44711]:ExpressionStatement[44765-44775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44997-45039]:Block[45061-45103]"
    }, {
      "left" : "codeChangeHandlers.add(handler);",
      "right" : "codeChangeHandlers.add(handler);",
      "info" : "ExpressionStatement[45003-45035]:ExpressionStatement[45067-45099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45107-45152]:Block[45171-45216]"
    }, {
      "left" : "codeChangeHandlers.remove(handler);",
      "right" : "codeChangeHandlers.remove(handler);",
      "info" : "ExpressionStatement[45113-45148]:ExpressionStatement[45177-45212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45390-45490]:Block[45454-45554]"
    }, {
      "left" : "for (CodeChangeHandler handler : codeChangeHandlers)",
      "right" : "for (CodeChangeHandler handler : codeChangeHandlers)",
      "info" : "EnhancedForStatement[45396-45486]:EnhancedForStatement[45460-45550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45449-45486]:Block[45513-45550]"
    }, {
      "left" : "handler.reportChange();",
      "right" : "handler.reportChange();",
      "info" : "ExpressionStatement[45457-45480]:ExpressionStatement[45521-45544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45552-45721]:Block[45616-45785]"
    }, {
      "left" : "CodingConvention convention = options.getCodingConvention();",
      "right" : "CodingConvention convention = options.getCodingConvention();",
      "info" : "VariableDeclarationStatement[45558-45618]:VariableDeclarationStatement[45622-45682]"
    }, {
      "left" : "convention = convention != null ? convention : defaultCodingConvention;",
      "right" : "convention = convention != null ? convention : defaultCodingConvention;",
      "info" : "ExpressionStatement[45623-45694]:ExpressionStatement[45687-45758]"
    }, {
      "left" : "return convention;",
      "right" : "return convention;",
      "info" : "ReturnStatement[45699-45717]:ReturnStatement[45763-45781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45764-45797]:Block[45828-45861]"
    }, {
      "left" : "return options.ideMode;",
      "right" : "return options.ideMode;",
      "info" : "ReturnStatement[45770-45793]:ReturnStatement[45834-45857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45838-45967]:Block[45902-46031]"
    }, {
      "left" : "if (parserConfig == null)",
      "right" : "if (parserConfig == null)",
      "info" : "IfStatement[45844-45938]:IfStatement[45908-46002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45870-45938]:Block[45934-46002]"
    }, {
      "left" : "parserConfig = ParserRunner.createConfig(isIdeMode());",
      "right" : "parserConfig = ParserRunner.createConfig(isIdeMode());",
      "info" : "ExpressionStatement[45878-45932]:ExpressionStatement[45942-45996]"
    }, {
      "left" : "return parserConfig;",
      "right" : "return parserConfig;",
      "info" : "ReturnStatement[45943-45963]:ReturnStatement[46007-46027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46022-46058]:Block[46086-46122]"
    }, {
      "left" : "return options.checkTypes;",
      "right" : "return options.checkTypes;",
      "info" : "ReturnStatement[46028-46054]:ReturnStatement[46092-46118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46285-46595]:Block[46349-46659]"
    }, {
      "left" : "CheckLevel level = error.level;",
      "right" : "CheckLevel level = error.level;",
      "info" : "VariableDeclarationStatement[46291-46322]:VariableDeclarationStatement[46355-46386]"
    }, {
      "left" : "WarningsGuard guard = options.getWarningsGuard();",
      "right" : "WarningsGuard guard = options.getWarningsGuard();",
      "info" : "VariableDeclarationStatement[46327-46376]:VariableDeclarationStatement[46391-46440]"
    }, {
      "left" : "if (guard != null)",
      "right" : "if (guard != null)",
      "info" : "IfStatement[46381-46519]:IfStatement[46445-46583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46400-46519]:Block[46464-46583]"
    }, {
      "left" : "CheckLevel newLevel = guard.level(error);",
      "right" : "CheckLevel newLevel = guard.level(error);",
      "info" : "VariableDeclarationStatement[46408-46449]:VariableDeclarationStatement[46472-46513]"
    }, {
      "left" : "if (newLevel != null)",
      "right" : "if (newLevel != null)",
      "info" : "IfStatement[46456-46513]:IfStatement[46520-46577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46478-46513]:Block[46542-46577]"
    }, {
      "left" : "level = newLevel;",
      "right" : "level = newLevel;",
      "info" : "ExpressionStatement[46488-46505]:ExpressionStatement[46552-46569]"
    }, {
      "left" : "if (level.isOn())",
      "right" : "if (level.isOn())",
      "info" : "IfStatement[46525-46591]:IfStatement[46589-46655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46543-46591]:Block[46607-46655]"
    }, {
      "left" : "errorManager.report(level, error);",
      "right" : "errorManager.report(level, error);",
      "info" : "ExpressionStatement[46551-46585]:ExpressionStatement[46615-46649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46658-46864]:Block[46722-46928]"
    }, {
      "left" : "Preconditions.checkNotNull(options);",
      "right" : "Preconditions.checkNotNull(options);",
      "info" : "ExpressionStatement[46664-46700]:ExpressionStatement[46728-46764]"
    }, {
      "left" : "WarningsGuard guards = options.getWarningsGuard();",
      "right" : "WarningsGuard guards = options.getWarningsGuard();",
      "info" : "VariableDeclarationStatement[46705-46755]:VariableDeclarationStatement[46769-46819]"
    }, {
      "left" : "if (guards == null)",
      "right" : "if (guards == null)",
      "info" : "IfStatement[46760-46860]:IfStatement[46824-46924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46780-46813]:Block[46844-46877]"
    }, {
      "left" : "return error.level;",
      "right" : "return error.level;",
      "info" : "ReturnStatement[46788-46807]:ReturnStatement[46852-46871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46819-46860]:Block[46883-46924]"
    }, {
      "left" : "return guards.level(error);",
      "right" : "return guards.level(error);",
      "info" : "ReturnStatement[46827-46854]:ReturnStatement[46891-46918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46980-47256]:Block[47044-47320]"
    }, {
      "left" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
      "right" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
      "info" : "VariableDeclarationStatement[46986-47093]:VariableDeclarationStatement[47050-47157]"
    }, {
      "left" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
      "right" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
      "info" : "VariableDeclarationStatement[47099-47162]:VariableDeclarationStatement[47163-47226]"
    }, {
      "left" : "if (cause != null)",
      "right" : "if (cause != null)",
      "info" : "IfStatement[47167-47239]:IfStatement[47231-47303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47186-47239]:Block[47250-47303]"
    }, {
      "left" : "e.setStackTrace(cause.getStackTrace());",
      "right" : "e.setStackTrace(cause.getStackTrace());",
      "info" : "ExpressionStatement[47194-47233]:ExpressionStatement[47258-47297]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[47244-47252]:ThrowStatement[47308-47316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47332-47378]:Block[47396-47442]"
    }, {
      "left" : "return errorManager.getErrorCount();",
      "right" : "return errorManager.getErrorCount();",
      "info" : "ReturnStatement[47338-47374]:ReturnStatement[47402-47438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47457-47505]:Block[47521-47569]"
    }, {
      "left" : "return errorManager.getWarningCount();",
      "right" : "return errorManager.getWarningCount();",
      "info" : "ReturnStatement[47463-47501]:ReturnStatement[47527-47565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47548-47601]:Block[47612-47665]"
    }, {
      "left" : "return !isIdeMode() && getErrorCount() > 0;",
      "right" : "return !isIdeMode() && getErrorCount() > 0;",
      "info" : "ReturnStatement[47554-47597]:ReturnStatement[47618-47661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48050-48086]:Block[48114-48150]"
    }, {
      "left" : "return hasHaltingErrors();",
      "right" : "return hasHaltingErrors();",
      "info" : "ReturnStatement[48056-48082]:ReturnStatement[48120-48146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48191-48271]:Block[48255-48335]"
    }, {
      "left" : "debugLog.append(str);",
      "right" : "debugLog.append(str);",
      "info" : "ExpressionStatement[48197-48218]:ExpressionStatement[48261-48282]"
    }, {
      "left" : "debugLog.append('\\n');",
      "right" : "debugLog.append('\\n');",
      "info" : "ExpressionStatement[48223-48245]:ExpressionStatement[48287-48309]"
    }, {
      "left" : "logger.fine(str);",
      "right" : "logger.fine(str);",
      "info" : "ExpressionStatement[48250-48267]:ExpressionStatement[48314-48331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48333-48468]:Block[48397-48532]"
    }, {
      "left" : "if (inputsByName.containsKey(sourceName))",
      "right" : "if (inputsByName.containsKey(sourceName))",
      "info" : "IfStatement[48339-48447]:IfStatement[48403-48511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48381-48447]:Block[48445-48511]"
    }, {
      "left" : "return inputsByName.get(sourceName).getSourceFile();",
      "right" : "return inputsByName.get(sourceName).getSourceFile();",
      "info" : "ReturnStatement[48389-48441]:ReturnStatement[48453-48505]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48452-48464]:ReturnStatement[48516-48528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48535-48735]:Block[48599-48799]"
    }, {
      "left" : "if (lineNumber < 1)",
      "right" : "if (lineNumber < 1)",
      "info" : "IfStatement[48541-48587]:IfStatement[48605-48651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48561-48587]:Block[48625-48651]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48569-48581]:ReturnStatement[48633-48645]"
    }, {
      "left" : "SourceFile input = getSourceFileByName(sourceName);",
      "right" : "SourceFile input = getSourceFileByName(sourceName);",
      "info" : "VariableDeclarationStatement[48592-48643]:VariableDeclarationStatement[48656-48707]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[48648-48714]:IfStatement[48712-48778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48667-48714]:Block[48731-48778]"
    }, {
      "left" : "return input.getLine(lineNumber);",
      "right" : "return input.getLine(lineNumber);",
      "info" : "ReturnStatement[48675-48708]:ReturnStatement[48739-48772]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48719-48731]:ReturnStatement[48783-48795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48804-49006]:Block[48868-49070]"
    }, {
      "left" : "if (lineNumber < 1)",
      "right" : "if (lineNumber < 1)",
      "info" : "IfStatement[48810-48856]:IfStatement[48874-48920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48830-48856]:Block[48894-48920]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48838-48850]:ReturnStatement[48902-48914]"
    }, {
      "left" : "SourceFile input = getSourceFileByName(sourceName);",
      "right" : "SourceFile input = getSourceFileByName(sourceName);",
      "info" : "VariableDeclarationStatement[48861-48912]:VariableDeclarationStatement[48925-48976]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[48917-48985]:IfStatement[48981-49049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48936-48985]:Block[49000-49049]"
    }, {
      "left" : "return input.getRegion(lineNumber);",
      "right" : "return input.getRegion(lineNumber);",
      "info" : "ReturnStatement[48944-48979]:ReturnStatement[49008-49043]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48990-49002]:ReturnStatement[49054-49066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49252-49645]:Block[49316-49709]"
    }, {
      "left" : "if (module == null)",
      "right" : "if (module == null)",
      "info" : "IfStatement[49258-49423]:IfStatement[49322-49487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49278-49423]:Block[49342-49487]"
    }, {
      "left" : "if (inputs.isEmpty())",
      "right" : "if (inputs.isEmpty())",
      "info" : "IfStatement[49286-49371]:IfStatement[49350-49435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49308-49371]:Block[49372-49435]"
    }, {
      "left" : "throw new IllegalStateException(\"No inputs\");",
      "right" : "throw new IllegalStateException(\"No inputs\");",
      "info" : "ThrowStatement[49318-49363]:ThrowStatement[49382-49427]"
    }, {
      "left" : "return inputs.get(0).getAstRoot(this);",
      "right" : "return inputs.get(0).getAstRoot(this);",
      "info" : "ReturnStatement[49379-49417]:ReturnStatement[49443-49481]"
    }, {
      "left" : "List<CompilerInput> moduleInputs = module.getInputs();",
      "right" : "List<CompilerInput> moduleInputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[49429-49483]:VariableDeclarationStatement[49493-49547]"
    }, {
      "left" : "if (moduleInputs.size() > 0)",
      "right" : "if (moduleInputs.size() > 0)",
      "info" : "IfStatement[49488-49575]:IfStatement[49552-49639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49517-49575]:Block[49581-49639]"
    }, {
      "left" : "return moduleInputs.get(0).getAstRoot(this);",
      "right" : "return moduleInputs.get(0).getAstRoot(this);",
      "info" : "ReturnStatement[49525-49569]:ReturnStatement[49589-49633]"
    }, {
      "left" : "throw new IllegalStateException(\"Root module has no inputs\");",
      "right" : "throw new IllegalStateException(\"Root module has no inputs\");",
      "info" : "ThrowStatement[49580-49641]:ThrowStatement[49644-49705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49681-49708]:Block[49745-49772]"
    }, {
      "left" : "return sourceMap;",
      "right" : "return sourceMap;",
      "info" : "ReturnStatement[49687-49704]:ReturnStatement[49751-49768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49741-49809]:Block[49805-49873]"
    }, {
      "left" : "return getPassConfig().getIntermediateState().variableMap;",
      "right" : "return getPassConfig().getIntermediateState().variableMap;",
      "info" : "ReturnStatement[49747-49805]:ReturnStatement[49811-49869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49842-49910]:Block[49906-49974]"
    }, {
      "left" : "return getPassConfig().getIntermediateState().propertyMap;",
      "right" : "return getPassConfig().getIntermediateState().propertyMap;",
      "info" : "ReturnStatement[49848-49906]:ReturnStatement[49912-49970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49943-49968]:Block[50007-50032]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[49949-49964]:ReturnStatement[50013-50028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50025-50065]:Block[50089-50129]"
    }, {
      "left" : "return functionInformationMap;",
      "right" : "return functionInformationMap;",
      "info" : "ReturnStatement[50031-50061]:ReturnStatement[50095-50125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50203-50236]:Block[50267-50300]"
    }, {
      "left" : "logger.setLevel(level);",
      "right" : "logger.setLevel(level);",
      "info" : "ExpressionStatement[50209-50232]:ExpressionStatement[50273-50296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50366-50590]:Block[50430-50654]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[50372-50586]:IfStatement[50436-50650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50392-50556]:Block[50456-50620]"
    }, {
      "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);",
      "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);",
      "info" : "VariableDeclarationStatement[50400-50462]:VariableDeclarationStatement[50464-50526]"
    }, {
      "left" : "cfa.process(null, jsRoot);",
      "right" : "cfa.process(null, jsRoot);",
      "info" : "ExpressionStatement[50469-50495]:ExpressionStatement[50533-50559]"
    }, {
      "left" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
      "right" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
      "info" : "ReturnStatement[50502-50550]:ReturnStatement[50566-50614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50562-50586]:Block[50626-50650]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[50570-50580]:ReturnStatement[50634-50644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50644-50749]:Block[50708-50813]"
    }, {
      "left" : "if (options == null)",
      "right" : "if (options == null)",
      "info" : "IfStatement[50650-50720]:IfStatement[50714-50784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50671-50720]:Block[50735-50784]"
    }, {
      "left" : "initOptions(new CompilerOptions());",
      "right" : "initOptions(new CompilerOptions());",
      "info" : "ExpressionStatement[50679-50714]:ExpressionStatement[50743-50778]"
    }, {
      "left" : "return errorManager;",
      "right" : "return errorManager;",
      "info" : "ReturnStatement[50725-50745]:ReturnStatement[50789-50809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50804-50873]:Block[50868-50937]"
    }, {
      "left" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
      "right" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
      "info" : "ReturnStatement[50810-50869]:ReturnStatement[50874-50933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51909-51911]:Block[51973-51975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52047-52417]:Block[52111-52481]"
    }, {
      "left" : "IntermediateState state = new IntermediateState();",
      "right" : "IntermediateState state = new IntermediateState();",
      "info" : "VariableDeclarationStatement[52053-52103]:VariableDeclarationStatement[52117-52167]"
    }, {
      "left" : "state.externsRoot = externsRoot;",
      "right" : "state.externsRoot = externsRoot;",
      "info" : "ExpressionStatement[52108-52140]:ExpressionStatement[52172-52204]"
    }, {
      "left" : "state.jsRoot = jsRoot;",
      "right" : "state.jsRoot = jsRoot;",
      "info" : "ExpressionStatement[52145-52167]:ExpressionStatement[52209-52231]"
    }, {
      "left" : "state.externs = externs;",
      "right" : "state.externs = externs;",
      "info" : "ExpressionStatement[52172-52196]:ExpressionStatement[52236-52260]"
    }, {
      "left" : "state.inputs = inputs;",
      "right" : "state.inputs = inputs;",
      "info" : "ExpressionStatement[52201-52223]:ExpressionStatement[52265-52287]"
    }, {
      "left" : "state.modules = modules;",
      "right" : "state.modules = modules;",
      "info" : "ExpressionStatement[52228-52252]:ExpressionStatement[52292-52316]"
    }, {
      "left" : "state.passConfigState = getPassConfig().getIntermediateState();",
      "right" : "state.passConfigState = getPassConfig().getIntermediateState();",
      "info" : "ExpressionStatement[52257-52320]:ExpressionStatement[52321-52384]"
    }, {
      "left" : "state.typeRegistry = typeRegistry;",
      "right" : "state.typeRegistry = typeRegistry;",
      "info" : "ExpressionStatement[52325-52359]:ExpressionStatement[52389-52423]"
    }, {
      "left" : "state.normalized = normalized;",
      "right" : "state.normalized = normalized;",
      "info" : "ExpressionStatement[52364-52394]:ExpressionStatement[52428-52458]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[52400-52413]:ReturnStatement[52464-52477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52600-52934]:Block[52664-52998]"
    }, {
      "left" : "externsRoot = state.externsRoot;",
      "right" : "externsRoot = state.externsRoot;",
      "info" : "ExpressionStatement[52606-52638]:ExpressionStatement[52670-52702]"
    }, {
      "left" : "jsRoot = state.jsRoot;",
      "right" : "jsRoot = state.jsRoot;",
      "info" : "ExpressionStatement[52643-52665]:ExpressionStatement[52707-52729]"
    }, {
      "left" : "externs = state.externs;",
      "right" : "externs = state.externs;",
      "info" : "ExpressionStatement[52670-52694]:ExpressionStatement[52734-52758]"
    }, {
      "left" : "inputs = state.inputs;",
      "right" : "inputs = state.inputs;",
      "info" : "ExpressionStatement[52699-52721]:ExpressionStatement[52763-52785]"
    }, {
      "left" : "modules = state.modules;",
      "right" : "modules = state.modules;",
      "info" : "ExpressionStatement[52726-52750]:ExpressionStatement[52790-52814]"
    }, {
      "left" : "passes = createPassConfigInternal();",
      "right" : "passes = createPassConfigInternal();",
      "info" : "ExpressionStatement[52755-52791]:ExpressionStatement[52819-52855]"
    }, {
      "left" : "getPassConfig().setIntermediateState(state.passConfigState);",
      "right" : "getPassConfig().setIntermediateState(state.passConfigState);",
      "info" : "ExpressionStatement[52796-52856]:ExpressionStatement[52860-52920]"
    }, {
      "left" : "typeRegistry = state.typeRegistry;",
      "right" : "typeRegistry = state.typeRegistry;",
      "info" : "ExpressionStatement[52861-52895]:ExpressionStatement[52925-52959]"
    }, {
      "left" : "normalized = state.normalized;",
      "right" : "normalized = state.normalized;",
      "info" : "ExpressionStatement[52900-52930]:ExpressionStatement[52964-52994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53001-53025]:Block[53065-53089]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[53007-53021]:ReturnStatement[53071-53085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53093-53118]:Block[53157-53182]"
    }, {
      "left" : "return externs;",
      "right" : "return externs;",
      "info" : "ReturnStatement[53099-53114]:ReturnStatement[53163-53178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53170-53213]:Block[53234-53277]"
    }, {
      "left" : "return hasRegExpGlobalReferences;",
      "right" : "return hasRegExpGlobalReferences;",
      "info" : "ReturnStatement[53176-53209]:ReturnStatement[53240-53273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53283-53332]:Block[53347-53396]"
    }, {
      "left" : "hasRegExpGlobalReferences = references;",
      "right" : "hasRegExpGlobalReferences = references;",
      "info" : "ExpressionStatement[53289-53328]:ExpressionStatement[53353-53392]"
    } ]
  },
  "interFileMappings" : { }
}