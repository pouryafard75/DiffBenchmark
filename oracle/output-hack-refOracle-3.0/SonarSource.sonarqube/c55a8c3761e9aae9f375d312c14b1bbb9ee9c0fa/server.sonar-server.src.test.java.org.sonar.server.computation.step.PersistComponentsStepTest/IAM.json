{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PersistComponentsStepTest",
      "right" : "PersistComponentsStepTest",
      "info" : "TypeDeclaration[1957-33820]:TypeDeclaration[2134-35459]"
    }, {
      "left" : "private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd\");",
      "right" : "private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd\");",
      "info" : "FieldDeclaration[2047-2134]:FieldDeclaration[2224-2311]"
    }, {
      "left" : "private static final String PROJECT_KEY = \"PROJECT_KEY\";",
      "right" : "private static final String PROJECT_KEY = \"PROJECT_KEY\";",
      "info" : "FieldDeclaration[2138-2194]:FieldDeclaration[2315-2371]"
    }, {
      "left" : "@ClassRule\n  public static DbTester dbTester = new DbTester();",
      "right" : "@ClassRule\n  public static DbTester dbTester = new DbTester();",
      "info" : "FieldDeclaration[2198-2260]:FieldDeclaration[2375-2437]"
    }, {
      "left" : "@Rule\n  public TreeRootHolderRule treeRootHolder = new TreeRootHolderRule();",
      "right" : "@Rule\n  public TreeRootHolderRule treeRootHolder = new TreeRootHolderRule();",
      "info" : "FieldDeclaration[2264-2340]:FieldDeclaration[2441-2517]"
    }, {
      "left" : "@Rule\n  public BatchReportReaderRule reportReader = new BatchReportReaderRule();",
      "right" : "@Rule\n  public BatchReportReaderRule reportReader = new BatchReportReaderRule();",
      "info" : "FieldDeclaration[2344-2424]:FieldDeclaration[2521-2601]"
    }, {
      "left" : "DbIdsRepository dbIdsRepository;",
      "right" : "DbIdsRepository dbIdsRepository;",
      "info" : "FieldDeclaration[2428-2460]:FieldDeclaration[2605-2637]"
    }, {
      "left" : "DbSession session;",
      "right" : "DbSession session;",
      "info" : "FieldDeclaration[2464-2482]:FieldDeclaration[2683-2701]"
    }, {
      "left" : "DbClient dbClient;",
      "right" : "DbClient dbClient;",
      "info" : "FieldDeclaration[2486-2504]:FieldDeclaration[2705-2723]"
    }, {
      "left" : "long now;",
      "right" : "Date now;",
      "info" : "FieldDeclaration[2508-2517]:FieldDeclaration[2727-2736]"
    }, {
      "left" : "PersistComponentsStep sut;",
      "right" : "PersistComponentsStep sut;",
      "info" : "FieldDeclaration[2521-2547]:FieldDeclaration[2740-2766]"
    }, {
      "left" : "public void setup() throws Exception",
      "right" : "public void setup() throws Exception",
      "info" : "MethodDeclaration[2551-2992]:MethodDeclaration[2770-3261]"
    }, {
      "left" : "protected ComputationStep step()",
      "right" : "protected ComputationStep step()",
      "info" : "MethodDeclaration[2996-3062]:MethodDeclaration[3265-3331]"
    }, {
      "left" : "public void tearDown()",
      "right" : "public void tearDown()",
      "info" : "MethodDeclaration[3066-3124]:MethodDeclaration[3335-3393]"
    }, {
      "left" : "public void persist_components() throws Exception",
      "right" : "public void persist_components() throws Exception",
      "info" : "MethodDeclaration[3128-8267]:MethodDeclaration[3397-8788]"
    }, {
      "left" : "public void persist_file_directly_attached_on_root_directory() throws Exception",
      "right" : "public void persist_file_directly_attached_on_root_directory() throws Exception",
      "info" : "MethodDeclaration[8271-9704]:MethodDeclaration[8792-10225]"
    }, {
      "left" : "public void persist_unit_test() throws Exception",
      "right" : "public void persist_unit_test() throws Exception",
      "info" : "MethodDeclaration[9708-11125]:MethodDeclaration[10229-11646]"
    }, {
      "left" : "public void persist_only_new_components() throws Exception",
      "right" : "public void persist_only_new_components() throws Exception",
      "info" : "MethodDeclaration[11129-14533]:MethodDeclaration[11650-15054]"
    }, {
      "left" : "public void compute_parent_project_id() throws Exception",
      "right" : "public void compute_parent_project_id() throws Exception",
      "info" : "MethodDeclaration[14537-17285]:MethodDeclaration[15058-17806]"
    }, {
      "left" : "public void persist_multi_modules() throws Exception",
      "right" : "public void persist_multi_modules() throws Exception",
      "info" : "MethodDeclaration[17289-20061]:MethodDeclaration[17810-20582]"
    }, {
      "left" : "public void nothing_to_persist() throws Exception",
      "right" : "public void nothing_to_persist() throws Exception",
      "info" : "MethodDeclaration[20065-25184]:MethodDeclaration[20586-25705]"
    }, {
      "left" : "public void update_module_name() throws Exception",
      "right" : "public void update_module_name() throws Exception",
      "info" : "MethodDeclaration[25188-26619]:MethodDeclaration[25709-27140]"
    }, {
      "left" : "public void update_module_description() throws Exception",
      "right" : "public void update_module_description() throws Exception",
      "info" : "MethodDeclaration[26623-28163]:MethodDeclaration[27144-28684]"
    }, {
      "left" : "public void update_module_path() throws Exception",
      "right" : "public void update_module_path() throws Exception",
      "info" : "MethodDeclaration[28167-29396]:MethodDeclaration[28688-29917]"
    }, {
      "left" : "public void update_module_uuid_when_moving_a_module() throws Exception",
      "right" : "public void update_module_uuid_when_moving_a_module() throws Exception",
      "info" : "MethodDeclaration[29400-33817]:MethodDeclaration[29921-34338]"
    } ],
    "mappings" : [
 {
      "left" : "@Category(DbTests.class)",
      "right" : "@Category(DbTests.class)",
      "info" : "SingleMemberAnnotation[1957-1981]:SingleMemberAnnotation[2134-2158]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1982-1988]:Modifier[2159-2165]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1989-1994]:TYPE_DECLARATION_KIND[2166-2171]"
    }, {
      "left" : "PersistComponentsStepTest",
      "right" : "PersistComponentsStepTest",
      "info" : "SimpleName[1995-2020]:SimpleName[2172-2197]"
    }, {
      "left" : "BaseStepTest",
      "right" : "BaseStepTest",
      "info" : "SimpleType[2029-2041]:SimpleType[2206-2218]"
    }, {
      "left" : "long",
      "right" : "Date",
      "info" : "PrimitiveType[2508-2512]:SimpleType[2727-2731]"
    }, {
      "left" : "@Before",
      "right" : "@Before",
      "info" : "MarkerAnnotation[2551-2558]:MarkerAnnotation[2770-2777]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2561-2567]:Modifier[2780-2786]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2568-2572]:PrimitiveType[2787-2791]"
    }, {
      "left" : "setup",
      "right" : "setup",
      "info" : "SimpleName[2573-2578]:SimpleName[2792-2797]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[2588-2597]:SimpleType[2807-2816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2598-2992]:Block[2817-3261]"
    }, {
      "left" : "dbTester.truncateTables();",
      "right" : "dbTester.truncateTables();",
      "info" : "ExpressionStatement[2604-2630]:ExpressionStatement[2823-2849]"
    }, {
      "left" : "session = dbTester.myBatis().openSession(false);",
      "right" : "session = dbTester.myBatis().openSession(false);",
      "info" : "ExpressionStatement[2635-2683]:ExpressionStatement[2854-2902]"
    }, {
      "left" : "dbClient = new DbClient(dbTester.database(), dbTester.myBatis(), new ComponentDao(), new SnapshotDao());",
      "right" : "dbClient = new DbClient(dbTester.database(), dbTester.myBatis(), new ComponentDao(), new SnapshotDao());",
      "info" : "ExpressionStatement[2688-2792]:ExpressionStatement[2907-3011]"
    }, {
      "left" : "dbIdsRepository = new DbIdsRepository();",
      "right" : "dbIdsRepository = new DbIdsRepository();",
      "info" : "ExpressionStatement[2798-2838]:ExpressionStatement[3017-3057]"
    }, {
      "left" : "now = DATE_FORMAT.parse(\"2015-06-02\").getTime();",
      "right" : "now = DATE_FORMAT.parse(\"2015-06-02\");",
      "info" : "ExpressionStatement[2844-2892]:ExpressionStatement[3063-3101]"
    }, {
      "left" : "DATE_FORMAT.parse(\"2015-06-02\")",
      "right" : "DATE_FORMAT.parse(\"2015-06-02\")",
      "info" : "MethodInvocation[2850-2881]:MethodInvocation[3069-3100]"
    }, {
      "left" : "DATE_FORMAT.parse(\"2015-06-02\").getTime()",
      "right" : "now.getTime()",
      "info" : "MethodInvocation[2850-2891]:MethodInvocation[3137-3150]"
    }, {
      "left" : "sut = new PersistComponentsStep( dbClient, treeRootHolder, reportReader, dbIdsRepository);",
      "right" : "sut = new PersistComponentsStep( dbClient, treeRootHolder, reportReader, dbIdsRepository, system2);",
      "info" : "ExpressionStatement[2898-2988]:ExpressionStatement[3158-3257]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2996-3005]:MarkerAnnotation[3265-3274]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3008-3017]:Modifier[3277-3286]"
    }, {
      "left" : "ComputationStep",
      "right" : "ComputationStep",
      "info" : "SimpleType[3018-3033]:SimpleType[3287-3302]"
    }, {
      "left" : "step",
      "right" : "step",
      "info" : "SimpleName[3034-3038]:SimpleName[3303-3307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3041-3062]:Block[3310-3331]"
    }, {
      "left" : "return sut;",
      "right" : "return sut;",
      "info" : "ReturnStatement[3047-3058]:ReturnStatement[3316-3327]"
    }, {
      "left" : "@After",
      "right" : "@After",
      "info" : "MarkerAnnotation[3066-3072]:MarkerAnnotation[3335-3341]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3075-3081]:Modifier[3344-3350]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3082-3086]:PrimitiveType[3351-3355]"
    }, {
      "left" : "tearDown",
      "right" : "tearDown",
      "info" : "SimpleName[3087-3095]:SimpleName[3356-3364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3098-3124]:Block[3367-3393]"
    }, {
      "left" : "session.close();",
      "right" : "session.close();",
      "info" : "ExpressionStatement[3104-3120]:ExpressionStatement[3373-3389]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3128-3133]:MarkerAnnotation[3397-3402]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3136-3142]:Modifier[3405-3411]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3143-3147]:PrimitiveType[3412-3416]"
    }, {
      "left" : "persist_components",
      "right" : "persist_components",
      "info" : "SimpleName[3148-3166]:SimpleName[3417-3435]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[3176-3185]:SimpleType[3445-3454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3186-8267]:Block[3455-8788]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .setDescription(\"Project description\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .setDescription(\"Project description\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[3192-3454]:ExpressionStatement[3461-3723]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setPath(\"module\")\n      .setName(\"Module\")\n      .setDescription(\"Module description\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setPath(\"module\")\n      .setName(\"Module\")\n      .setDescription(\"Module description\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[3459-3744]:ExpressionStatement[3728-4013]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(4)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(4)\n      .build());",
      "info" : "ExpressionStatement[3749-3951]:ExpressionStatement[4018-4220]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .setLanguage(\"java\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .setLanguage(\"java\")\n      .build());",
      "info" : "ExpressionStatement[3956-4167]:ExpressionStatement[4225-4436]"
    }, {
      "left" : "Component file = new DumbComponent(Component.Type.FILE, 4, \"DEFG\", \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "right" : "Component file = new DumbComponent(Component.Type.FILE, 4, \"DEFG\", \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "info" : "VariableDeclarationStatement[4173-4281]:VariableDeclarationStatement[4442-4550]"
    }, {
      "left" : "Component directory = new DumbComponent(Component.Type.DIRECTORY, 3, \"CDEF\", \"MODULE_KEY:src/main/java/dir\", file);",
      "right" : "Component directory = new DumbComponent(Component.Type.DIRECTORY, 3, \"CDEF\", \"MODULE_KEY:src/main/java/dir\", file);",
      "info" : "VariableDeclarationStatement[4286-4401]:VariableDeclarationStatement[4555-4670]"
    }, {
      "left" : "Component module = new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\", directory);",
      "right" : "Component module = new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\", directory);",
      "info" : "VariableDeclarationStatement[4406-4502]:VariableDeclarationStatement[4675-4771]"
    }, {
      "left" : "Component project = new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY, module);",
      "right" : "Component project = new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY, module);",
      "info" : "VariableDeclarationStatement[4507-4601]:VariableDeclarationStatement[4776-4870]"
    }, {
      "left" : "treeRootHolder.setRoot(project);",
      "right" : "treeRootHolder.setRoot(project);",
      "info" : "ExpressionStatement[4606-4638]:ExpressionStatement[4875-4907]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[4644-4658]:ExpressionStatement[4913-4927]"
    }, {
      "left" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "right" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "info" : "ExpressionStatement[4664-4727]:ExpressionStatement[4955-5018]"
    }, {
      "left" : "ComponentDto projectDto = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto projectDto = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[4733-4825]:VariableDeclarationStatement[5024-5116]"
    }, {
      "left" : "assertThat(projectDto).isNotNull();",
      "right" : "assertThat(projectDto).isNotNull();",
      "info" : "ExpressionStatement[4830-4865]:ExpressionStatement[5121-5156]"
    }, {
      "left" : "assertThat(projectDto.name()).isEqualTo(\"Project\");",
      "right" : "assertThat(projectDto.name()).isEqualTo(\"Project\");",
      "info" : "ExpressionStatement[4870-4921]:ExpressionStatement[5161-5212]"
    }, {
      "left" : "assertThat(projectDto.description()).isEqualTo(\"Project description\");",
      "right" : "assertThat(projectDto.description()).isEqualTo(\"Project description\");",
      "info" : "ExpressionStatement[4926-4996]:ExpressionStatement[5217-5287]"
    }, {
      "left" : "assertThat(projectDto.path()).isNull();",
      "right" : "assertThat(projectDto.path()).isNull();",
      "info" : "ExpressionStatement[5001-5040]:ExpressionStatement[5292-5331]"
    }, {
      "left" : "assertThat(projectDto.uuid()).isEqualTo(\"ABCD\");",
      "right" : "assertThat(projectDto.uuid()).isEqualTo(\"ABCD\");",
      "info" : "ExpressionStatement[5045-5093]:ExpressionStatement[5336-5384]"
    }, {
      "left" : "assertThat(projectDto.moduleUuid()).isNull();",
      "right" : "assertThat(projectDto.moduleUuid()).isNull();",
      "info" : "ExpressionStatement[5098-5143]:ExpressionStatement[5389-5434]"
    }, {
      "left" : "assertThat(projectDto.moduleUuidPath()).isEqualTo(\".\" + projectDto.uuid() + \".\");",
      "right" : "assertThat(projectDto.moduleUuidPath()).isEqualTo(\".\" + projectDto.uuid() + \".\");",
      "info" : "ExpressionStatement[5148-5229]:ExpressionStatement[5439-5520]"
    }, {
      "left" : "assertThat(projectDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "right" : "assertThat(projectDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "info" : "ExpressionStatement[5234-5300]:ExpressionStatement[5525-5591]"
    }, {
      "left" : "assertThat(projectDto.qualifier()).isEqualTo(\"TRK\");",
      "right" : "assertThat(projectDto.qualifier()).isEqualTo(\"TRK\");",
      "info" : "ExpressionStatement[5305-5357]:ExpressionStatement[5596-5648]"
    }, {
      "left" : "assertThat(projectDto.scope()).isEqualTo(\"PRJ\");",
      "right" : "assertThat(projectDto.scope()).isEqualTo(\"PRJ\");",
      "info" : "ExpressionStatement[5362-5410]:ExpressionStatement[5653-5701]"
    }, {
      "left" : "assertThat(projectDto.parentProjectId()).isNull();",
      "right" : "assertThat(projectDto.parentProjectId()).isNull();",
      "info" : "ExpressionStatement[5415-5465]:ExpressionStatement[5706-5756]"
    }, {
      "left" : "ComponentDto moduleDto = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto moduleDto = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[5471-5563]:VariableDeclarationStatement[5820-5912]"
    }, {
      "left" : "assertThat(moduleDto).isNotNull();",
      "right" : "assertThat(moduleDto).isNotNull();",
      "info" : "ExpressionStatement[5568-5602]:ExpressionStatement[5917-5951]"
    }, {
      "left" : "assertThat(moduleDto.name()).isEqualTo(\"Module\");",
      "right" : "assertThat(moduleDto.name()).isEqualTo(\"Module\");",
      "info" : "ExpressionStatement[5607-5656]:ExpressionStatement[5956-6005]"
    }, {
      "left" : "assertThat(moduleDto.description()).isEqualTo(\"Module description\");",
      "right" : "assertThat(moduleDto.description()).isEqualTo(\"Module description\");",
      "info" : "ExpressionStatement[5661-5729]:ExpressionStatement[6010-6078]"
    }, {
      "left" : "assertThat(moduleDto.path()).isEqualTo(\"module\");",
      "right" : "assertThat(moduleDto.path()).isEqualTo(\"module\");",
      "info" : "ExpressionStatement[5734-5783]:ExpressionStatement[6083-6132]"
    }, {
      "left" : "assertThat(moduleDto.uuid()).isEqualTo(\"BCDE\");",
      "right" : "assertThat(moduleDto.uuid()).isEqualTo(\"BCDE\");",
      "info" : "ExpressionStatement[5788-5835]:ExpressionStatement[6137-6184]"
    }, {
      "left" : "assertThat(moduleDto.moduleUuid()).isEqualTo(projectDto.uuid());",
      "right" : "assertThat(moduleDto.moduleUuid()).isEqualTo(projectDto.uuid());",
      "info" : "ExpressionStatement[5840-5904]:ExpressionStatement[6189-6253]"
    }, {
      "left" : "assertThat(moduleDto.moduleUuidPath()).isEqualTo(projectDto.moduleUuidPath() + moduleDto.uuid() + \".\");",
      "right" : "assertThat(moduleDto.moduleUuidPath()).isEqualTo(projectDto.moduleUuidPath() + moduleDto.uuid() + \".\");",
      "info" : "ExpressionStatement[5909-6012]:ExpressionStatement[6258-6361]"
    }, {
      "left" : "assertThat(moduleDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "right" : "assertThat(moduleDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "info" : "ExpressionStatement[6017-6082]:ExpressionStatement[6366-6431]"
    }, {
      "left" : "assertThat(moduleDto.qualifier()).isEqualTo(\"BRC\");",
      "right" : "assertThat(moduleDto.qualifier()).isEqualTo(\"BRC\");",
      "info" : "ExpressionStatement[6087-6138]:ExpressionStatement[6436-6487]"
    }, {
      "left" : "assertThat(moduleDto.scope()).isEqualTo(\"PRJ\");",
      "right" : "assertThat(moduleDto.scope()).isEqualTo(\"PRJ\");",
      "info" : "ExpressionStatement[6143-6190]:ExpressionStatement[6492-6539]"
    }, {
      "left" : "assertThat(moduleDto.parentProjectId()).isEqualTo(projectDto.getId());",
      "right" : "assertThat(moduleDto.parentProjectId()).isEqualTo(projectDto.getId());",
      "info" : "ExpressionStatement[6195-6265]:ExpressionStatement[6544-6614]"
    }, {
      "left" : "ComponentDto directoryDto = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\");",
      "right" : "ComponentDto directoryDto = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[6271-6384]:VariableDeclarationStatement[6677-6790]"
    }, {
      "left" : "assertThat(directoryDto).isNotNull();",
      "right" : "assertThat(directoryDto).isNotNull();",
      "info" : "ExpressionStatement[6389-6426]:ExpressionStatement[6795-6832]"
    }, {
      "left" : "assertThat(directoryDto.name()).isEqualTo(\"src/main/java/dir\");",
      "right" : "assertThat(directoryDto.name()).isEqualTo(\"src/main/java/dir\");",
      "info" : "ExpressionStatement[6431-6494]:ExpressionStatement[6837-6900]"
    }, {
      "left" : "assertThat(directoryDto.description()).isNull();",
      "right" : "assertThat(directoryDto.description()).isNull();",
      "info" : "ExpressionStatement[6499-6547]:ExpressionStatement[6905-6953]"
    }, {
      "left" : "assertThat(directoryDto.path()).isEqualTo(\"src/main/java/dir\");",
      "right" : "assertThat(directoryDto.path()).isEqualTo(\"src/main/java/dir\");",
      "info" : "ExpressionStatement[6552-6615]:ExpressionStatement[6958-7021]"
    }, {
      "left" : "assertThat(directoryDto.uuid()).isEqualTo(\"CDEF\");",
      "right" : "assertThat(directoryDto.uuid()).isEqualTo(\"CDEF\");",
      "info" : "ExpressionStatement[6620-6670]:ExpressionStatement[7026-7076]"
    }, {
      "left" : "assertThat(directoryDto.moduleUuid()).isEqualTo(moduleDto.uuid());",
      "right" : "assertThat(directoryDto.moduleUuid()).isEqualTo(moduleDto.uuid());",
      "info" : "ExpressionStatement[6675-6741]:ExpressionStatement[7081-7147]"
    }, {
      "left" : "assertThat(directoryDto.moduleUuidPath()).isEqualTo(moduleDto.moduleUuidPath());",
      "right" : "assertThat(directoryDto.moduleUuidPath()).isEqualTo(moduleDto.moduleUuidPath());",
      "info" : "ExpressionStatement[6746-6826]:ExpressionStatement[7152-7232]"
    }, {
      "left" : "assertThat(directoryDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "right" : "assertThat(directoryDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "info" : "ExpressionStatement[6831-6899]:ExpressionStatement[7237-7305]"
    }, {
      "left" : "assertThat(directoryDto.qualifier()).isEqualTo(\"DIR\");",
      "right" : "assertThat(directoryDto.qualifier()).isEqualTo(\"DIR\");",
      "info" : "ExpressionStatement[6904-6958]:ExpressionStatement[7310-7364]"
    }, {
      "left" : "assertThat(directoryDto.scope()).isEqualTo(\"DIR\");",
      "right" : "assertThat(directoryDto.scope()).isEqualTo(\"DIR\");",
      "info" : "ExpressionStatement[6963-7013]:ExpressionStatement[7369-7419]"
    }, {
      "left" : "assertThat(directoryDto.parentProjectId()).isEqualTo(moduleDto.getId());",
      "right" : "assertThat(directoryDto.parentProjectId()).isEqualTo(moduleDto.getId());",
      "info" : "ExpressionStatement[7018-7090]:ExpressionStatement[7424-7496]"
    }, {
      "left" : "ComponentDto fileDto = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "right" : "ComponentDto fileDto = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "info" : "VariableDeclarationStatement[7096-7213]:VariableDeclarationStatement[7562-7679]"
    }, {
      "left" : "assertThat(fileDto).isNotNull();",
      "right" : "assertThat(fileDto).isNotNull();",
      "info" : "ExpressionStatement[7218-7250]:ExpressionStatement[7684-7716]"
    }, {
      "left" : "assertThat(fileDto.name()).isEqualTo(\"Foo.java\");",
      "right" : "assertThat(fileDto.name()).isEqualTo(\"Foo.java\");",
      "info" : "ExpressionStatement[7255-7304]:ExpressionStatement[7721-7770]"
    }, {
      "left" : "assertThat(fileDto.description()).isNull();",
      "right" : "assertThat(fileDto.description()).isNull();",
      "info" : "ExpressionStatement[7309-7352]:ExpressionStatement[7775-7818]"
    }, {
      "left" : "assertThat(fileDto.path()).isEqualTo(\"src/main/java/dir/Foo.java\");",
      "right" : "assertThat(fileDto.path()).isEqualTo(\"src/main/java/dir/Foo.java\");",
      "info" : "ExpressionStatement[7357-7424]:ExpressionStatement[7823-7890]"
    }, {
      "left" : "assertThat(fileDto.language()).isEqualTo(\"java\");",
      "right" : "assertThat(fileDto.language()).isEqualTo(\"java\");",
      "info" : "ExpressionStatement[7429-7478]:ExpressionStatement[7895-7944]"
    }, {
      "left" : "assertThat(fileDto.uuid()).isEqualTo(\"DEFG\");",
      "right" : "assertThat(fileDto.uuid()).isEqualTo(\"DEFG\");",
      "info" : "ExpressionStatement[7483-7528]:ExpressionStatement[7949-7994]"
    }, {
      "left" : "assertThat(fileDto.moduleUuid()).isEqualTo(moduleDto.uuid());",
      "right" : "assertThat(fileDto.moduleUuid()).isEqualTo(moduleDto.uuid());",
      "info" : "ExpressionStatement[7533-7594]:ExpressionStatement[7999-8060]"
    }, {
      "left" : "assertThat(fileDto.moduleUuidPath()).isEqualTo(moduleDto.moduleUuidPath());",
      "right" : "assertThat(fileDto.moduleUuidPath()).isEqualTo(moduleDto.moduleUuidPath());",
      "info" : "ExpressionStatement[7599-7674]:ExpressionStatement[8065-8140]"
    }, {
      "left" : "assertThat(fileDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "right" : "assertThat(fileDto.projectUuid()).isEqualTo(projectDto.uuid());",
      "info" : "ExpressionStatement[7679-7742]:ExpressionStatement[8145-8208]"
    }, {
      "left" : "assertThat(fileDto.qualifier()).isEqualTo(\"FIL\");",
      "right" : "assertThat(fileDto.qualifier()).isEqualTo(\"FIL\");",
      "info" : "ExpressionStatement[7747-7796]:ExpressionStatement[8213-8262]"
    }, {
      "left" : "assertThat(fileDto.scope()).isEqualTo(\"FIL\");",
      "right" : "assertThat(fileDto.scope()).isEqualTo(\"FIL\");",
      "info" : "ExpressionStatement[7801-7846]:ExpressionStatement[8267-8312]"
    }, {
      "left" : "assertThat(fileDto.parentProjectId()).isEqualTo(moduleDto.getId());",
      "right" : "assertThat(fileDto.parentProjectId()).isEqualTo(moduleDto.getId());",
      "info" : "ExpressionStatement[7851-7918]:ExpressionStatement[8317-8384]"
    }, {
      "left" : "assertThat(dbIdsRepository.getComponentId(project)).isEqualTo(projectDto.getId());",
      "right" : "assertThat(dbIdsRepository.getComponentId(project)).isEqualTo(projectDto.getId());",
      "info" : "ExpressionStatement[7924-8006]:ExpressionStatement[8445-8527]"
    }, {
      "left" : "assertThat(dbIdsRepository.getComponentId(module)).isEqualTo(moduleDto.getId());",
      "right" : "assertThat(dbIdsRepository.getComponentId(module)).isEqualTo(moduleDto.getId());",
      "info" : "ExpressionStatement[8011-8091]:ExpressionStatement[8532-8612]"
    }, {
      "left" : "assertThat(dbIdsRepository.getComponentId(directory)).isEqualTo(directoryDto.getId());",
      "right" : "assertThat(dbIdsRepository.getComponentId(directory)).isEqualTo(directoryDto.getId());",
      "info" : "ExpressionStatement[8096-8182]:ExpressionStatement[8617-8703]"
    }, {
      "left" : "assertThat(dbIdsRepository.getComponentId(file)).isEqualTo(fileDto.getId());",
      "right" : "assertThat(dbIdsRepository.getComponentId(file)).isEqualTo(fileDto.getId());",
      "info" : "ExpressionStatement[8187-8263]:ExpressionStatement[8708-8784]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[8271-8276]:MarkerAnnotation[8792-8797]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8279-8285]:Modifier[8800-8806]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8286-8290]:PrimitiveType[8807-8811]"
    }, {
      "left" : "persist_file_directly_attached_on_root_directory",
      "right" : "persist_file_directly_attached_on_root_directory",
      "info" : "SimpleName[8291-8339]:SimpleName[8812-8860]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[8349-8358]:SimpleType[8870-8879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8359-9704]:Block[8880-10225]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[8365-8582]:ExpressionStatement[8886-9103]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"/\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"/\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[8587-8773]:ExpressionStatement[9108-9294]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"pom.xml\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"pom.xml\")\n      .build());",
      "info" : "ExpressionStatement[8778-8943]:ExpressionStatement[9299-9464]"
    }, {
      "left" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.DIRECTORY, 2, \"CDEF\", PROJECT_KEY + \":/\",\n        new DumbComponent(Component.Type.FILE, 3, \"DEFG\", PROJECT_KEY + \":pom.xml\"))));",
      "right" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.DIRECTORY, 2, \"CDEF\", PROJECT_KEY + \":/\",\n        new DumbComponent(Component.Type.FILE, 3, \"DEFG\", PROJECT_KEY + \":pom.xml\"))));",
      "info" : "ExpressionStatement[8949-9206]:ExpressionStatement[9470-9727]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[9212-9226]:ExpressionStatement[9733-9747]"
    }, {
      "left" : "ComponentDto directory = dbClient.componentDao().selectNullableByKey(session, \"PROJECT_KEY:/\");",
      "right" : "ComponentDto directory = dbClient.componentDao().selectNullableByKey(session, \"PROJECT_KEY:/\");",
      "info" : "VariableDeclarationStatement[9232-9327]:VariableDeclarationStatement[9753-9848]"
    }, {
      "left" : "assertThat(directory).isNotNull();",
      "right" : "assertThat(directory).isNotNull();",
      "info" : "ExpressionStatement[9332-9366]:ExpressionStatement[9853-9887]"
    }, {
      "left" : "assertThat(directory.name()).isEqualTo(\"/\");",
      "right" : "assertThat(directory.name()).isEqualTo(\"/\");",
      "info" : "ExpressionStatement[9371-9415]:ExpressionStatement[9892-9936]"
    }, {
      "left" : "assertThat(directory.path()).isEqualTo(\"/\");",
      "right" : "assertThat(directory.path()).isEqualTo(\"/\");",
      "info" : "ExpressionStatement[9420-9464]:ExpressionStatement[9941-9985]"
    }, {
      "left" : "ComponentDto file = dbClient.componentDao().selectNullableByKey(session, \"PROJECT_KEY:pom.xml\");",
      "right" : "ComponentDto file = dbClient.componentDao().selectNullableByKey(session, \"PROJECT_KEY:pom.xml\");",
      "info" : "VariableDeclarationStatement[9470-9566]:VariableDeclarationStatement[9991-10087]"
    }, {
      "left" : "assertThat(file).isNotNull();",
      "right" : "assertThat(file).isNotNull();",
      "info" : "ExpressionStatement[9571-9600]:ExpressionStatement[10092-10121]"
    }, {
      "left" : "assertThat(file.name()).isEqualTo(\"pom.xml\");",
      "right" : "assertThat(file.name()).isEqualTo(\"pom.xml\");",
      "info" : "ExpressionStatement[9605-9650]:ExpressionStatement[10126-10171]"
    }, {
      "left" : "assertThat(file.path()).isEqualTo(\"pom.xml\");",
      "right" : "assertThat(file.path()).isEqualTo(\"pom.xml\");",
      "info" : "ExpressionStatement[9655-9700]:ExpressionStatement[10176-10221]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[9708-9713]:MarkerAnnotation[10229-10234]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9716-9722]:Modifier[10237-10243]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9723-9727]:PrimitiveType[10244-10248]"
    }, {
      "left" : "persist_unit_test",
      "right" : "persist_unit_test",
      "info" : "SimpleName[9728-9745]:SimpleName[10249-10266]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[9755-9764]:SimpleType[10276-10285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9765-11125]:Block[10286-11646]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[9771-9988]:ExpressionStatement[10292-10509]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/test/java/dir\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/test/java/dir\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[9993-10195]:ExpressionStatement[10514-10716]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/test/java/dir/FooTest.java\")\n      .setIsTest(true)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/test/java/dir/FooTest.java\")\n      .setIsTest(true)\n      .build());",
      "info" : "ExpressionStatement[10200-10411]:ExpressionStatement[10721-10932]"
    }, {
      "left" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.DIRECTORY, 2, \"CDEF\", PROJECT_KEY + \":src/test/java/dir\",\n        new DumbComponent(Component.Type.FILE, 3, \"DEFG\", PROJECT_KEY + \":src/test/java/dir/FooTest.java\"))));",
      "right" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.DIRECTORY, 2, \"CDEF\", PROJECT_KEY + \":src/test/java/dir\",\n        new DumbComponent(Component.Type.FILE, 3, \"DEFG\", PROJECT_KEY + \":src/test/java/dir/FooTest.java\"))));",
      "info" : "ExpressionStatement[10417-10713]:ExpressionStatement[10938-11234]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[10719-10733]:ExpressionStatement[11240-11254]"
    }, {
      "left" : "ComponentDto file = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY + \":src/test/java/dir/FooTest.java\");",
      "right" : "ComponentDto file = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY + \":src/test/java/dir/FooTest.java\");",
      "info" : "VariableDeclarationStatement[10739-10861]:VariableDeclarationStatement[11260-11382]"
    }, {
      "left" : "assertThat(file).isNotNull();",
      "right" : "assertThat(file).isNotNull();",
      "info" : "ExpressionStatement[10866-10895]:ExpressionStatement[11387-11416]"
    }, {
      "left" : "assertThat(file.name()).isEqualTo(\"FooTest.java\");",
      "right" : "assertThat(file.name()).isEqualTo(\"FooTest.java\");",
      "info" : "ExpressionStatement[10900-10950]:ExpressionStatement[11421-11471]"
    }, {
      "left" : "assertThat(file.path()).isEqualTo(\"src/test/java/dir/FooTest.java\");",
      "right" : "assertThat(file.path()).isEqualTo(\"src/test/java/dir/FooTest.java\");",
      "info" : "ExpressionStatement[10955-11023]:ExpressionStatement[11476-11544]"
    }, {
      "left" : "assertThat(file.qualifier()).isEqualTo(\"UTS\");",
      "right" : "assertThat(file.qualifier()).isEqualTo(\"UTS\");",
      "info" : "ExpressionStatement[11028-11074]:ExpressionStatement[11549-11595]"
    }, {
      "left" : "assertThat(file.scope()).isEqualTo(\"FIL\");",
      "right" : "assertThat(file.scope()).isEqualTo(\"FIL\");",
      "info" : "ExpressionStatement[11079-11121]:ExpressionStatement[11600-11642]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[11129-11134]:MarkerAnnotation[11650-11655]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11137-11143]:Modifier[11658-11664]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11144-11148]:PrimitiveType[11665-11669]"
    }, {
      "left" : "persist_only_new_components",
      "right" : "persist_only_new_components",
      "info" : "SimpleName[11149-11176]:SimpleName[11670-11697]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[11186-11195]:SimpleType[11707-11716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11196-14533]:Block[11717-15054]"
    }, {
      "left" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "right" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "info" : "VariableDeclarationStatement[11243-11344]:VariableDeclarationStatement[11764-11865]"
    }, {
      "left" : "dbClient.componentDao().insert(session, project);",
      "right" : "dbClient.componentDao().insert(session, project);",
      "info" : "ExpressionStatement[11349-11398]:ExpressionStatement[11870-11919]"
    }, {
      "left" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\");",
      "right" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\");",
      "info" : "VariableDeclarationStatement[11403-11511]:VariableDeclarationStatement[11924-12032]"
    }, {
      "left" : "dbClient.componentDao().insert(session, module);",
      "right" : "dbClient.componentDao().insert(session, module);",
      "info" : "ExpressionStatement[11516-11564]:ExpressionStatement[12037-12085]"
    }, {
      "left" : "session.commit();",
      "right" : "session.commit();",
      "info" : "ExpressionStatement[11569-11586]:ExpressionStatement[12090-12107]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[11592-11809]:ExpressionStatement[12113-12330]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[11814-12030]:ExpressionStatement[12335-12551]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(4)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(4)\n      .build());",
      "info" : "ExpressionStatement[12035-12237]:ExpressionStatement[12556-12758]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .build());",
      "info" : "ExpressionStatement[12242-12426]:ExpressionStatement[12763-12947]"
    }, {
      "left" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\",\n        new DumbComponent(Component.Type.DIRECTORY, 3, \"CDEF\", \"MODULE_KEY:src/main/java/dir\",\n          new DumbComponent(Component.Type.FILE, 4, \"DEFG\", \"MODULE_KEY:src/main/java/dir/Foo.java\")))));",
      "right" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\",\n        new DumbComponent(Component.Type.DIRECTORY, 3, \"CDEF\", \"MODULE_KEY:src/main/java/dir\",\n          new DumbComponent(Component.Type.FILE, 4, \"DEFG\", \"MODULE_KEY:src/main/java/dir/Foo.java\")))));",
      "info" : "ExpressionStatement[12432-12793]:ExpressionStatement[12953-13314]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[12799-12813]:ExpressionStatement[13320-13334]"
    }, {
      "left" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "right" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "info" : "ExpressionStatement[12819-12882]:ExpressionStatement[13340-13403]"
    }, {
      "left" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[12888-12985]:VariableDeclarationStatement[13409-13506]"
    }, {
      "left" : "assertThat(projectReloaded.getId()).isEqualTo(project.getId());",
      "right" : "assertThat(projectReloaded.getId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[12990-13053]:ExpressionStatement[13511-13574]"
    }, {
      "left" : "assertThat(projectReloaded.uuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(projectReloaded.uuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[13058-13119]:ExpressionStatement[13579-13640]"
    }, {
      "left" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[13125-13222]:VariableDeclarationStatement[13646-13743]"
    }, {
      "left" : "assertThat(moduleReloaded.getId()).isEqualTo(module.getId());",
      "right" : "assertThat(moduleReloaded.getId()).isEqualTo(module.getId());",
      "info" : "ExpressionStatement[13227-13288]:ExpressionStatement[13748-13809]"
    }, {
      "left" : "assertThat(moduleReloaded.uuid()).isEqualTo(module.uuid());",
      "right" : "assertThat(moduleReloaded.uuid()).isEqualTo(module.uuid());",
      "info" : "ExpressionStatement[13293-13352]:ExpressionStatement[13814-13873]"
    }, {
      "left" : "assertThat(moduleReloaded.moduleUuid()).isEqualTo(module.moduleUuid());",
      "right" : "assertThat(moduleReloaded.moduleUuid()).isEqualTo(module.moduleUuid());",
      "info" : "ExpressionStatement[13357-13428]:ExpressionStatement[13878-13949]"
    }, {
      "left" : "assertThat(moduleReloaded.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "right" : "assertThat(moduleReloaded.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "info" : "ExpressionStatement[13433-13512]:ExpressionStatement[13954-14033]"
    }, {
      "left" : "assertThat(moduleReloaded.projectUuid()).isEqualTo(module.projectUuid());",
      "right" : "assertThat(moduleReloaded.projectUuid()).isEqualTo(module.projectUuid());",
      "info" : "ExpressionStatement[13517-13590]:ExpressionStatement[14038-14111]"
    }, {
      "left" : "assertThat(moduleReloaded.parentProjectId()).isEqualTo(module.parentProjectId());",
      "right" : "assertThat(moduleReloaded.parentProjectId()).isEqualTo(module.parentProjectId());",
      "info" : "ExpressionStatement[13595-13676]:ExpressionStatement[14116-14197]"
    }, {
      "left" : "ComponentDto directory = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\");",
      "right" : "ComponentDto directory = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[13682-13792]:VariableDeclarationStatement[14203-14313]"
    }, {
      "left" : "assertThat(directory).isNotNull();",
      "right" : "assertThat(directory).isNotNull();",
      "info" : "ExpressionStatement[13797-13831]:ExpressionStatement[14318-14352]"
    }, {
      "left" : "assertThat(directory.moduleUuid()).isEqualTo(module.uuid());",
      "right" : "assertThat(directory.moduleUuid()).isEqualTo(module.uuid());",
      "info" : "ExpressionStatement[13836-13896]:ExpressionStatement[14357-14417]"
    }, {
      "left" : "assertThat(directory.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "right" : "assertThat(directory.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "info" : "ExpressionStatement[13901-13975]:ExpressionStatement[14422-14496]"
    }, {
      "left" : "assertThat(directory.projectUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(directory.projectUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[13980-14042]:ExpressionStatement[14501-14563]"
    }, {
      "left" : "assertThat(directory.parentProjectId()).isEqualTo(module.getId());",
      "right" : "assertThat(directory.parentProjectId()).isEqualTo(module.getId());",
      "info" : "ExpressionStatement[14047-14113]:ExpressionStatement[14568-14634]"
    }, {
      "left" : "ComponentDto file = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "right" : "ComponentDto file = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "info" : "VariableDeclarationStatement[14119-14233]:VariableDeclarationStatement[14640-14754]"
    }, {
      "left" : "assertThat(file).isNotNull();",
      "right" : "assertThat(file).isNotNull();",
      "info" : "ExpressionStatement[14238-14267]:ExpressionStatement[14759-14788]"
    }, {
      "left" : "assertThat(file.moduleUuid()).isEqualTo(module.uuid());",
      "right" : "assertThat(file.moduleUuid()).isEqualTo(module.uuid());",
      "info" : "ExpressionStatement[14272-14327]:ExpressionStatement[14793-14848]"
    }, {
      "left" : "assertThat(file.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "right" : "assertThat(file.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "info" : "ExpressionStatement[14332-14401]:ExpressionStatement[14853-14922]"
    }, {
      "left" : "assertThat(file.projectUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(file.projectUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[14406-14463]:ExpressionStatement[14927-14984]"
    }, {
      "left" : "assertThat(file.parentProjectId()).isEqualTo(module.getId());",
      "right" : "assertThat(file.parentProjectId()).isEqualTo(module.getId());",
      "info" : "ExpressionStatement[14468-14529]:ExpressionStatement[14989-15050]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[14537-14542]:MarkerAnnotation[15058-15063]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14545-14551]:Modifier[15066-15072]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14552-14556]:PrimitiveType[15073-15077]"
    }, {
      "left" : "compute_parent_project_id",
      "right" : "compute_parent_project_id",
      "info" : "SimpleName[14557-14582]:SimpleName[15078-15103]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[14592-14601]:SimpleType[15113-15122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14602-17285]:Block[15123-17806]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[14608-14825]:ExpressionStatement[15129-15346]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[14830-15046]:ExpressionStatement[15351-15567]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"SUB_MODULE_1_KEY\")\n      .setName(\"Sub Module 1\")\n      .addChildRef(4)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"SUB_MODULE_1_KEY\")\n      .setName(\"Sub Module 1\")\n      .addChildRef(4)\n      .build());",
      "info" : "ExpressionStatement[15051-15279]:ExpressionStatement[15572-15800]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"SUB_MODULE_2_KEY\")\n      .setName(\"Sub Module 2\")\n      .addChildRef(5)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"SUB_MODULE_2_KEY\")\n      .setName(\"Sub Module 2\")\n      .addChildRef(5)\n      .build());",
      "info" : "ExpressionStatement[15284-15512]:ExpressionStatement[15805-16033]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(5)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(5)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .build());",
      "info" : "ExpressionStatement[15517-15697]:ExpressionStatement[16038-16218]"
    }, {
      "left" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\",\n        new DumbComponent(Component.Type.MODULE, 3, \"CDEF\", \"SUB_MODULE_1_KEY\",\n          new DumbComponent(Component.Type.MODULE, 4, \"DEFG\", \"SUB_MODULE_2_KEY\",\n            new DumbComponent(Component.Type.DIRECTORY, 5, \"EFGH\", \"SUB_MODULE_2_KEY:src/main/java/dir\"))))));",
      "right" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\",\n        new DumbComponent(Component.Type.MODULE, 3, \"CDEF\", \"SUB_MODULE_1_KEY\",\n          new DumbComponent(Component.Type.MODULE, 4, \"DEFG\", \"SUB_MODULE_2_KEY\",\n            new DumbComponent(Component.Type.DIRECTORY, 5, \"EFGH\", \"SUB_MODULE_2_KEY:src/main/java/dir\"))))));",
      "info" : "ExpressionStatement[15703-16136]:ExpressionStatement[16224-16657]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[16142-16156]:ExpressionStatement[16663-16677]"
    }, {
      "left" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(5);",
      "right" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(5);",
      "info" : "ExpressionStatement[16162-16225]:ExpressionStatement[16683-16746]"
    }, {
      "left" : "ComponentDto project = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto project = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[16231-16320]:VariableDeclarationStatement[16752-16841]"
    }, {
      "left" : "assertThat(project).isNotNull();",
      "right" : "assertThat(project).isNotNull();",
      "info" : "ExpressionStatement[16325-16357]:ExpressionStatement[16846-16878]"
    }, {
      "left" : "assertThat(project.parentProjectId()).isNull();",
      "right" : "assertThat(project.parentProjectId()).isNull();",
      "info" : "ExpressionStatement[16362-16409]:ExpressionStatement[16883-16930]"
    }, {
      "left" : "ComponentDto module = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto module = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[16415-16504]:VariableDeclarationStatement[16936-17025]"
    }, {
      "left" : "assertThat(module).isNotNull();",
      "right" : "assertThat(module).isNotNull();",
      "info" : "ExpressionStatement[16509-16540]:ExpressionStatement[17030-17061]"
    }, {
      "left" : "assertThat(module.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(module.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[16545-16609]:ExpressionStatement[17066-17130]"
    }, {
      "left" : "ComponentDto subModule1 = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_1_KEY\");",
      "right" : "ComponentDto subModule1 = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_1_KEY\");",
      "info" : "VariableDeclarationStatement[16615-16714]:VariableDeclarationStatement[17136-17235]"
    }, {
      "left" : "assertThat(subModule1).isNotNull();",
      "right" : "assertThat(subModule1).isNotNull();",
      "info" : "ExpressionStatement[16719-16754]:ExpressionStatement[17240-17275]"
    }, {
      "left" : "assertThat(subModule1.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(subModule1.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[16759-16827]:ExpressionStatement[17280-17348]"
    }, {
      "left" : "ComponentDto subModule2 = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_2_KEY\");",
      "right" : "ComponentDto subModule2 = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_2_KEY\");",
      "info" : "VariableDeclarationStatement[16833-16932]:VariableDeclarationStatement[17354-17453]"
    }, {
      "left" : "assertThat(subModule2).isNotNull();",
      "right" : "assertThat(subModule2).isNotNull();",
      "info" : "ExpressionStatement[16937-16972]:ExpressionStatement[17458-17493]"
    }, {
      "left" : "assertThat(subModule2.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(subModule2.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[16977-17045]:ExpressionStatement[17498-17566]"
    }, {
      "left" : "ComponentDto directory = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_2_KEY:src/main/java/dir\");",
      "right" : "ComponentDto directory = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_2_KEY:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[17051-17167]:VariableDeclarationStatement[17572-17688]"
    }, {
      "left" : "assertThat(directory).isNotNull();",
      "right" : "assertThat(directory).isNotNull();",
      "info" : "ExpressionStatement[17172-17206]:ExpressionStatement[17693-17727]"
    }, {
      "left" : "assertThat(directory.parentProjectId()).isEqualTo(subModule2.getId());",
      "right" : "assertThat(directory.parentProjectId()).isEqualTo(subModule2.getId());",
      "info" : "ExpressionStatement[17211-17281]:ExpressionStatement[17732-17802]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[17289-17294]:MarkerAnnotation[17810-17815]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17297-17303]:Modifier[17818-17824]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17304-17308]:PrimitiveType[17825-17829]"
    }, {
      "left" : "persist_multi_modules",
      "right" : "persist_multi_modules",
      "info" : "SimpleName[17309-17330]:SimpleName[17830-17851]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[17340-17349]:SimpleType[17861-17870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17350-20061]:Block[17871-20582]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .addChildRef(4)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .addChildRef(4)\n      .build());",
      "info" : "ExpressionStatement[17356-17595]:ExpressionStatement[17877-18116]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_A\")\n      .setName(\"Module A\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_A\")\n      .setName(\"Module A\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[17600-17816]:ExpressionStatement[18121-18337]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"SUB_MODULE_A\")\n      .setName(\"Sub Module A\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"SUB_MODULE_A\")\n      .setName(\"Sub Module A\")\n      .build());",
      "info" : "ExpressionStatement[17821-18023]:ExpressionStatement[18342-18544]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_B\")\n      .setName(\"Module B\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_B\")\n      .setName(\"Module B\")\n      .build());",
      "info" : "ExpressionStatement[18028-18222]:ExpressionStatement[18549-18743]"
    }, {
      "left" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_A\",\n        new DumbComponent(Component.Type.MODULE, 3, \"DEFG\", \"SUB_MODULE_A\")),\n      new DumbComponent(Component.Type.MODULE, 4, \"CDEF\", \"MODULE_B\")));",
      "right" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_A\",\n        new DumbComponent(Component.Type.MODULE, 3, \"DEFG\", \"SUB_MODULE_A\")),\n      new DumbComponent(Component.Type.MODULE, 4, \"CDEF\", \"MODULE_B\")));",
      "info" : "ExpressionStatement[18228-18537]:ExpressionStatement[18749-19058]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[18543-18557]:ExpressionStatement[19064-19078]"
    }, {
      "left" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "right" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "info" : "ExpressionStatement[18563-18626]:ExpressionStatement[19084-19147]"
    }, {
      "left" : "ComponentDto project = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto project = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[18632-18721]:VariableDeclarationStatement[19153-19242]"
    }, {
      "left" : "assertThat(project).isNotNull();",
      "right" : "assertThat(project).isNotNull();",
      "info" : "ExpressionStatement[18726-18758]:ExpressionStatement[19247-19279]"
    }, {
      "left" : "assertThat(project.moduleUuid()).isNull();",
      "right" : "assertThat(project.moduleUuid()).isNull();",
      "info" : "ExpressionStatement[18763-18805]:ExpressionStatement[19284-19326]"
    }, {
      "left" : "assertThat(project.moduleUuidPath()).isEqualTo(\".\" + project.uuid() + \".\");",
      "right" : "assertThat(project.moduleUuidPath()).isEqualTo(\".\" + project.uuid() + \".\");",
      "info" : "ExpressionStatement[18810-18885]:ExpressionStatement[19331-19406]"
    }, {
      "left" : "assertThat(project.parentProjectId()).isNull();",
      "right" : "assertThat(project.parentProjectId()).isNull();",
      "info" : "ExpressionStatement[18890-18937]:ExpressionStatement[19411-19458]"
    }, {
      "left" : "ComponentDto moduleA = dbClient.componentDao().selectNullableByKey(session, \"MODULE_A\");",
      "right" : "ComponentDto moduleA = dbClient.componentDao().selectNullableByKey(session, \"MODULE_A\");",
      "info" : "VariableDeclarationStatement[18943-19031]:VariableDeclarationStatement[19464-19552]"
    }, {
      "left" : "assertThat(moduleA).isNotNull();",
      "right" : "assertThat(moduleA).isNotNull();",
      "info" : "ExpressionStatement[19036-19068]:ExpressionStatement[19557-19589]"
    }, {
      "left" : "assertThat(moduleA.moduleUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(moduleA.moduleUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[19073-19132]:ExpressionStatement[19594-19653]"
    }, {
      "left" : "assertThat(moduleA.moduleUuidPath()).isEqualTo(project.moduleUuidPath() + moduleA.uuid() + \".\");",
      "right" : "assertThat(moduleA.moduleUuidPath()).isEqualTo(project.moduleUuidPath() + moduleA.uuid() + \".\");",
      "info" : "ExpressionStatement[19137-19233]:ExpressionStatement[19658-19754]"
    }, {
      "left" : "assertThat(moduleA.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(moduleA.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[19238-19303]:ExpressionStatement[19759-19824]"
    }, {
      "left" : "ComponentDto subModuleA = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_A\");",
      "right" : "ComponentDto subModuleA = dbClient.componentDao().selectNullableByKey(session, \"SUB_MODULE_A\");",
      "info" : "VariableDeclarationStatement[19309-19404]:VariableDeclarationStatement[19830-19925]"
    }, {
      "left" : "assertThat(subModuleA).isNotNull();",
      "right" : "assertThat(subModuleA).isNotNull();",
      "info" : "ExpressionStatement[19409-19444]:ExpressionStatement[19930-19965]"
    }, {
      "left" : "assertThat(subModuleA.moduleUuid()).isEqualTo(moduleA.uuid());",
      "right" : "assertThat(subModuleA.moduleUuid()).isEqualTo(moduleA.uuid());",
      "info" : "ExpressionStatement[19449-19511]:ExpressionStatement[19970-20032]"
    }, {
      "left" : "assertThat(subModuleA.moduleUuidPath()).isEqualTo(moduleA.moduleUuidPath() + subModuleA.uuid() + \".\");",
      "right" : "assertThat(subModuleA.moduleUuidPath()).isEqualTo(moduleA.moduleUuidPath() + subModuleA.uuid() + \".\");",
      "info" : "ExpressionStatement[19516-19618]:ExpressionStatement[20037-20139]"
    }, {
      "left" : "assertThat(subModuleA.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(subModuleA.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[19623-19691]:ExpressionStatement[20144-20212]"
    }, {
      "left" : "ComponentDto moduleB = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B\");",
      "right" : "ComponentDto moduleB = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B\");",
      "info" : "VariableDeclarationStatement[19697-19785]:VariableDeclarationStatement[20218-20306]"
    }, {
      "left" : "assertThat(moduleB).isNotNull();",
      "right" : "assertThat(moduleB).isNotNull();",
      "info" : "ExpressionStatement[19790-19822]:ExpressionStatement[20311-20343]"
    }, {
      "left" : "assertThat(moduleB.moduleUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(moduleB.moduleUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[19827-19886]:ExpressionStatement[20348-20407]"
    }, {
      "left" : "assertThat(moduleB.moduleUuidPath()).isEqualTo(project.moduleUuidPath() + moduleB.uuid() + \".\");",
      "right" : "assertThat(moduleB.moduleUuidPath()).isEqualTo(project.moduleUuidPath() + moduleB.uuid() + \".\");",
      "info" : "ExpressionStatement[19891-19987]:ExpressionStatement[20412-20508]"
    }, {
      "left" : "assertThat(moduleB.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(moduleB.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[19992-20057]:ExpressionStatement[20513-20578]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[20065-20070]:MarkerAnnotation[20586-20591]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20073-20079]:Modifier[20594-20600]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20080-20084]:PrimitiveType[20601-20605]"
    }, {
      "left" : "nothing_to_persist",
      "right" : "nothing_to_persist",
      "info" : "SimpleName[20085-20103]:SimpleName[20606-20624]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[20113-20122]:SimpleType[20634-20643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20123-25184]:Block[20644-25705]"
    }, {
      "left" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "right" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "info" : "VariableDeclarationStatement[20129-20230]:VariableDeclarationStatement[20650-20751]"
    }, {
      "left" : "dbClient.componentDao().insert(session, project);",
      "right" : "dbClient.componentDao().insert(session, project);",
      "info" : "ExpressionStatement[20235-20284]:ExpressionStatement[20756-20805]"
    }, {
      "left" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\");",
      "right" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\");",
      "info" : "VariableDeclarationStatement[20289-20397]:VariableDeclarationStatement[20810-20918]"
    }, {
      "left" : "dbClient.componentDao().insert(session, module);",
      "right" : "dbClient.componentDao().insert(session, module);",
      "info" : "ExpressionStatement[20402-20450]:ExpressionStatement[20923-20971]"
    }, {
      "left" : "ComponentDto directory = ComponentTesting.newDirectory(module, \"src/main/java/dir\").setUuid(\"CDEF\").setKey(\"MODULE_KEY:src/main/java/dir\");",
      "right" : "ComponentDto directory = ComponentTesting.newDirectory(module, \"src/main/java/dir\").setUuid(\"CDEF\").setKey(\"MODULE_KEY:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[20455-20594]:VariableDeclarationStatement[20976-21115]"
    }, {
      "left" : "ComponentDto file = ComponentTesting.newFileDto(module, \"DEFG\").setPath(\"src/main/java/dir/Foo.java\").setName(\"Foo.java\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "right" : "ComponentDto file = ComponentTesting.newFileDto(module, \"DEFG\").setPath(\"src/main/java/dir/Foo.java\").setName(\"Foo.java\").setKey(\"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "info" : "VariableDeclarationStatement[20599-20769]:VariableDeclarationStatement[21120-21290]"
    }, {
      "left" : "dbClient.componentDao().insert(session, directory, file);",
      "right" : "dbClient.componentDao().insert(session, directory, file);",
      "info" : "ExpressionStatement[20774-20831]:ExpressionStatement[21295-21352]"
    }, {
      "left" : "session.commit();",
      "right" : "session.commit();",
      "info" : "ExpressionStatement[20836-20853]:ExpressionStatement[21357-21374]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[20859-21076]:ExpressionStatement[21380-21597]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[21081-21297]:ExpressionStatement[21602-21818]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(4)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(4)\n      .build());",
      "info" : "ExpressionStatement[21302-21504]:ExpressionStatement[21823-22025]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .build());",
      "info" : "ExpressionStatement[21509-21693]:ExpressionStatement[22030-22214]"
    }, {
      "left" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\",\n        new DumbComponent(Component.Type.DIRECTORY, 3, \"CDEF\", \"MODULE_KEY:src/main/java/dir\",\n          new DumbComponent(Component.Type.FILE, 4, \"DEFG\", \"MODULE_KEY:src/main/java/dir/Foo.java\")))));",
      "right" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\",\n        new DumbComponent(Component.Type.DIRECTORY, 3, \"CDEF\", \"MODULE_KEY:src/main/java/dir\",\n          new DumbComponent(Component.Type.FILE, 4, \"DEFG\", \"MODULE_KEY:src/main/java/dir/Foo.java\")))));",
      "info" : "ExpressionStatement[21699-22060]:ExpressionStatement[22220-22581]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[22066-22080]:ExpressionStatement[22587-22601]"
    }, {
      "left" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "right" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(4);",
      "info" : "ExpressionStatement[22086-22149]:ExpressionStatement[22607-22670]"
    }, {
      "left" : "assertThat(dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY).getId()).isEqualTo(project.getId());",
      "right" : "assertThat(dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY).getId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[22154-22267]:ExpressionStatement[22675-22788]"
    }, {
      "left" : "assertThat(dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\").getId()).isEqualTo(module.getId());",
      "right" : "assertThat(dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\").getId()).isEqualTo(module.getId());",
      "info" : "ExpressionStatement[22272-22385]:ExpressionStatement[22793-22906]"
    }, {
      "left" : "assertThat(dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\").getId()).isEqualTo(directory.getId());",
      "right" : "assertThat(dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\").getId()).isEqualTo(directory.getId());",
      "info" : "ExpressionStatement[22390-22524]:ExpressionStatement[22911-23045]"
    }, {
      "left" : "assertThat(dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\").getId()).isEqualTo(file.getId());",
      "right" : "assertThat(dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\").getId()).isEqualTo(file.getId());",
      "info" : "ExpressionStatement[22529-22667]:ExpressionStatement[23050-23188]"
    }, {
      "left" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[22673-22770]:VariableDeclarationStatement[23194-23291]"
    }, {
      "left" : "assertThat(projectReloaded.getId()).isEqualTo(project.getId());",
      "right" : "assertThat(projectReloaded.getId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[22775-22838]:ExpressionStatement[23296-23359]"
    }, {
      "left" : "assertThat(projectReloaded.uuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(projectReloaded.uuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[22843-22904]:ExpressionStatement[23364-23425]"
    }, {
      "left" : "assertThat(projectReloaded.moduleUuid()).isEqualTo(project.moduleUuid());",
      "right" : "assertThat(projectReloaded.moduleUuid()).isEqualTo(project.moduleUuid());",
      "info" : "ExpressionStatement[22909-22982]:ExpressionStatement[23430-23503]"
    }, {
      "left" : "assertThat(projectReloaded.moduleUuidPath()).isEqualTo(project.moduleUuidPath());",
      "right" : "assertThat(projectReloaded.moduleUuidPath()).isEqualTo(project.moduleUuidPath());",
      "info" : "ExpressionStatement[22987-23068]:ExpressionStatement[23508-23589]"
    }, {
      "left" : "assertThat(projectReloaded.projectUuid()).isEqualTo(project.projectUuid());",
      "right" : "assertThat(projectReloaded.projectUuid()).isEqualTo(project.projectUuid());",
      "info" : "ExpressionStatement[23073-23148]:ExpressionStatement[23594-23669]"
    }, {
      "left" : "assertThat(projectReloaded.parentProjectId()).isEqualTo(project.parentProjectId());",
      "right" : "assertThat(projectReloaded.parentProjectId()).isEqualTo(project.parentProjectId());",
      "info" : "ExpressionStatement[23153-23236]:ExpressionStatement[23674-23757]"
    }, {
      "left" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[23242-23339]:VariableDeclarationStatement[23763-23860]"
    }, {
      "left" : "assertThat(moduleReloaded.getId()).isEqualTo(module.getId());",
      "right" : "assertThat(moduleReloaded.getId()).isEqualTo(module.getId());",
      "info" : "ExpressionStatement[23344-23405]:ExpressionStatement[23865-23926]"
    }, {
      "left" : "assertThat(moduleReloaded.uuid()).isEqualTo(module.uuid());",
      "right" : "assertThat(moduleReloaded.uuid()).isEqualTo(module.uuid());",
      "info" : "ExpressionStatement[23410-23469]:ExpressionStatement[23931-23990]"
    }, {
      "left" : "assertThat(moduleReloaded.moduleUuid()).isEqualTo(module.moduleUuid());",
      "right" : "assertThat(moduleReloaded.moduleUuid()).isEqualTo(module.moduleUuid());",
      "info" : "ExpressionStatement[23474-23545]:ExpressionStatement[23995-24066]"
    }, {
      "left" : "assertThat(moduleReloaded.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "right" : "assertThat(moduleReloaded.moduleUuidPath()).isEqualTo(module.moduleUuidPath());",
      "info" : "ExpressionStatement[23550-23629]:ExpressionStatement[24071-24150]"
    }, {
      "left" : "assertThat(moduleReloaded.projectUuid()).isEqualTo(module.projectUuid());",
      "right" : "assertThat(moduleReloaded.projectUuid()).isEqualTo(module.projectUuid());",
      "info" : "ExpressionStatement[23634-23707]:ExpressionStatement[24155-24228]"
    }, {
      "left" : "assertThat(moduleReloaded.parentProjectId()).isEqualTo(module.parentProjectId());",
      "right" : "assertThat(moduleReloaded.parentProjectId()).isEqualTo(module.parentProjectId());",
      "info" : "ExpressionStatement[23712-23793]:ExpressionStatement[24233-24314]"
    }, {
      "left" : "ComponentDto directoryReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\");",
      "right" : "ComponentDto directoryReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[23799-23917]:VariableDeclarationStatement[24320-24438]"
    }, {
      "left" : "assertThat(directoryReloaded).isNotNull();",
      "right" : "assertThat(directoryReloaded).isNotNull();",
      "info" : "ExpressionStatement[23922-23964]:ExpressionStatement[24443-24485]"
    }, {
      "left" : "assertThat(directoryReloaded.uuid()).isEqualTo(directory.uuid());",
      "right" : "assertThat(directoryReloaded.uuid()).isEqualTo(directory.uuid());",
      "info" : "ExpressionStatement[23969-24034]:ExpressionStatement[24490-24555]"
    }, {
      "left" : "assertThat(directoryReloaded.moduleUuid()).isEqualTo(directory.moduleUuid());",
      "right" : "assertThat(directoryReloaded.moduleUuid()).isEqualTo(directory.moduleUuid());",
      "info" : "ExpressionStatement[24039-24116]:ExpressionStatement[24560-24637]"
    }, {
      "left" : "assertThat(directoryReloaded.moduleUuidPath()).isEqualTo(directory.moduleUuidPath());",
      "right" : "assertThat(directoryReloaded.moduleUuidPath()).isEqualTo(directory.moduleUuidPath());",
      "info" : "ExpressionStatement[24121-24206]:ExpressionStatement[24642-24727]"
    }, {
      "left" : "assertThat(directoryReloaded.projectUuid()).isEqualTo(directory.projectUuid());",
      "right" : "assertThat(directoryReloaded.projectUuid()).isEqualTo(directory.projectUuid());",
      "info" : "ExpressionStatement[24211-24290]:ExpressionStatement[24732-24811]"
    }, {
      "left" : "assertThat(directoryReloaded.parentProjectId()).isEqualTo(directory.parentProjectId());",
      "right" : "assertThat(directoryReloaded.parentProjectId()).isEqualTo(directory.parentProjectId());",
      "info" : "ExpressionStatement[24295-24382]:ExpressionStatement[24816-24903]"
    }, {
      "left" : "assertThat(directoryReloaded.name()).isEqualTo(directory.name());",
      "right" : "assertThat(directoryReloaded.name()).isEqualTo(directory.name());",
      "info" : "ExpressionStatement[24387-24452]:ExpressionStatement[24908-24973]"
    }, {
      "left" : "assertThat(directoryReloaded.path()).isEqualTo(directory.path());",
      "right" : "assertThat(directoryReloaded.path()).isEqualTo(directory.path());",
      "info" : "ExpressionStatement[24457-24522]:ExpressionStatement[24978-25043]"
    }, {
      "left" : "ComponentDto fileReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "right" : "ComponentDto fileReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY:src/main/java/dir/Foo.java\");",
      "info" : "VariableDeclarationStatement[24528-24650]:VariableDeclarationStatement[25049-25171]"
    }, {
      "left" : "assertThat(fileReloaded).isNotNull();",
      "right" : "assertThat(fileReloaded).isNotNull();",
      "info" : "ExpressionStatement[24655-24692]:ExpressionStatement[25176-25213]"
    }, {
      "left" : "assertThat(fileReloaded.uuid()).isEqualTo(file.uuid());",
      "right" : "assertThat(fileReloaded.uuid()).isEqualTo(file.uuid());",
      "info" : "ExpressionStatement[24697-24752]:ExpressionStatement[25218-25273]"
    }, {
      "left" : "assertThat(fileReloaded.moduleUuid()).isEqualTo(file.moduleUuid());",
      "right" : "assertThat(fileReloaded.moduleUuid()).isEqualTo(file.moduleUuid());",
      "info" : "ExpressionStatement[24757-24824]:ExpressionStatement[25278-25345]"
    }, {
      "left" : "assertThat(fileReloaded.moduleUuidPath()).isEqualTo(file.moduleUuidPath());",
      "right" : "assertThat(fileReloaded.moduleUuidPath()).isEqualTo(file.moduleUuidPath());",
      "info" : "ExpressionStatement[24829-24904]:ExpressionStatement[25350-25425]"
    }, {
      "left" : "assertThat(fileReloaded.projectUuid()).isEqualTo(file.projectUuid());",
      "right" : "assertThat(fileReloaded.projectUuid()).isEqualTo(file.projectUuid());",
      "info" : "ExpressionStatement[24909-24978]:ExpressionStatement[25430-25499]"
    }, {
      "left" : "assertThat(fileReloaded.parentProjectId()).isEqualTo(file.parentProjectId());",
      "right" : "assertThat(fileReloaded.parentProjectId()).isEqualTo(file.parentProjectId());",
      "info" : "ExpressionStatement[24983-25060]:ExpressionStatement[25504-25581]"
    }, {
      "left" : "assertThat(fileReloaded.name()).isEqualTo(file.name());",
      "right" : "assertThat(fileReloaded.name()).isEqualTo(file.name());",
      "info" : "ExpressionStatement[25065-25120]:ExpressionStatement[25586-25641]"
    }, {
      "left" : "assertThat(fileReloaded.path()).isEqualTo(file.path());",
      "right" : "assertThat(fileReloaded.path()).isEqualTo(file.path());",
      "info" : "ExpressionStatement[25125-25180]:ExpressionStatement[25646-25701]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[25188-25193]:MarkerAnnotation[25709-25714]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25196-25202]:Modifier[25717-25723]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25203-25207]:PrimitiveType[25724-25728]"
    }, {
      "left" : "update_module_name",
      "right" : "update_module_name",
      "info" : "SimpleName[25208-25226]:SimpleName[25729-25747]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[25236-25245]:SimpleType[25757-25766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25246-26619]:Block[25767-27140]"
    }, {
      "left" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "right" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "info" : "VariableDeclarationStatement[25252-25353]:VariableDeclarationStatement[25773-25874]"
    }, {
      "left" : "dbClient.componentDao().insert(session, project);",
      "right" : "dbClient.componentDao().insert(session, project);",
      "info" : "ExpressionStatement[25358-25407]:ExpressionStatement[25879-25928]"
    }, {
      "left" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\").setPath(\"path\");",
      "right" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\").setPath(\"path\");",
      "info" : "VariableDeclarationStatement[25412-25536]:VariableDeclarationStatement[25933-26057]"
    }, {
      "left" : "dbClient.componentDao().insert(session, module);",
      "right" : "dbClient.componentDao().insert(session, module);",
      "info" : "ExpressionStatement[25541-25589]:ExpressionStatement[26062-26110]"
    }, {
      "left" : "session.commit();",
      "right" : "session.commit();",
      "info" : "ExpressionStatement[25594-25611]:ExpressionStatement[26115-26132]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"New project name\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"New project name\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[25617-25843]:ExpressionStatement[26138-26364]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"New module name\")\n      .setPath(\"New path\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"New module name\")\n      .setPath(\"New path\")\n      .build());",
      "info" : "ExpressionStatement[25848-26078]:ExpressionStatement[26369-26599]"
    }, {
      "left" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\")));",
      "right" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\")));",
      "info" : "ExpressionStatement[26084-26247]:ExpressionStatement[26605-26768]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[26257-26271]:ExpressionStatement[26778-26792]"
    }, {
      "left" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[26277-26374]:VariableDeclarationStatement[26798-26895]"
    }, {
      "left" : "assertThat(projectReloaded.name()).isEqualTo(\"New project name\");",
      "right" : "assertThat(projectReloaded.name()).isEqualTo(\"New project name\");",
      "info" : "ExpressionStatement[26379-26444]:ExpressionStatement[26900-26965]"
    }, {
      "left" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[26450-26547]:VariableDeclarationStatement[26971-27068]"
    }, {
      "left" : "assertThat(moduleReloaded.name()).isEqualTo(\"New module name\");",
      "right" : "assertThat(moduleReloaded.name()).isEqualTo(\"New module name\");",
      "info" : "ExpressionStatement[26552-26615]:ExpressionStatement[27073-27136]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[26623-26628]:MarkerAnnotation[27144-27149]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26631-26637]:Modifier[27152-27158]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26638-26642]:PrimitiveType[27159-27163]"
    }, {
      "left" : "update_module_description",
      "right" : "update_module_description",
      "info" : "SimpleName[26643-26668]:SimpleName[27164-27189]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[26678-26687]:SimpleType[27199-27208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26688-28163]:Block[27209-28684]"
    }, {
      "left" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\").setDescription(\"Project description\");",
      "right" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\").setDescription(\"Project description\");",
      "info" : "VariableDeclarationStatement[26694-26833]:VariableDeclarationStatement[27215-27354]"
    }, {
      "left" : "dbClient.componentDao().insert(session, project);",
      "right" : "dbClient.componentDao().insert(session, project);",
      "info" : "ExpressionStatement[26838-26887]:ExpressionStatement[27359-27408]"
    }, {
      "left" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\");",
      "right" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\");",
      "info" : "VariableDeclarationStatement[26892-27000]:VariableDeclarationStatement[27413-27521]"
    }, {
      "left" : "dbClient.componentDao().insert(session, module);",
      "right" : "dbClient.componentDao().insert(session, module);",
      "info" : "ExpressionStatement[27005-27053]:ExpressionStatement[27526-27574]"
    }, {
      "left" : "session.commit();",
      "right" : "session.commit();",
      "info" : "ExpressionStatement[27058-27075]:ExpressionStatement[27579-27596]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .setDescription(\"New project description\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .setDescription(\"New project description\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[27081-27347]:ExpressionStatement[27602-27868]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .setDescription(\"New module description\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .setDescription(\"New module description\")\n      .build());",
      "info" : "ExpressionStatement[27352-27594]:ExpressionStatement[27873-28115]"
    }, {
      "left" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\")));",
      "right" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\")));",
      "info" : "ExpressionStatement[27600-27763]:ExpressionStatement[28121-28284]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[27773-27787]:ExpressionStatement[28294-28308]"
    }, {
      "left" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "right" : "ComponentDto projectReloaded = dbClient.componentDao().selectNullableByKey(session, PROJECT_KEY);",
      "info" : "VariableDeclarationStatement[27793-27890]:VariableDeclarationStatement[28314-28411]"
    }, {
      "left" : "assertThat(projectReloaded.description()).isEqualTo(\"New project description\");",
      "right" : "assertThat(projectReloaded.description()).isEqualTo(\"New project description\");",
      "info" : "ExpressionStatement[27895-27974]:ExpressionStatement[28416-28495]"
    }, {
      "left" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[27980-28077]:VariableDeclarationStatement[28501-28598]"
    }, {
      "left" : "assertThat(moduleReloaded.description()).isEqualTo(\"New module description\");",
      "right" : "assertThat(moduleReloaded.description()).isEqualTo(\"New module description\");",
      "info" : "ExpressionStatement[28082-28159]:ExpressionStatement[28603-28680]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[28167-28172]:MarkerAnnotation[28688-28693]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28175-28181]:Modifier[28696-28702]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28182-28186]:PrimitiveType[28703-28707]"
    }, {
      "left" : "update_module_path",
      "right" : "update_module_path",
      "info" : "SimpleName[28187-28205]:SimpleName[28708-28726]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[28215-28224]:SimpleType[28736-28745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28225-29396]:Block[28746-29917]"
    }, {
      "left" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "right" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "info" : "VariableDeclarationStatement[28231-28332]:VariableDeclarationStatement[28752-28853]"
    }, {
      "left" : "dbClient.componentDao().insert(session, project);",
      "right" : "dbClient.componentDao().insert(session, project);",
      "info" : "ExpressionStatement[28337-28386]:ExpressionStatement[28858-28907]"
    }, {
      "left" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\").setPath(\"path\");",
      "right" : "ComponentDto module = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_KEY\").setName(\"Module\").setPath(\"path\");",
      "info" : "VariableDeclarationStatement[28391-28515]:VariableDeclarationStatement[28912-29036]"
    }, {
      "left" : "dbClient.componentDao().insert(session, module);",
      "right" : "dbClient.componentDao().insert(session, module);",
      "info" : "ExpressionStatement[28520-28568]:ExpressionStatement[29041-29089]"
    }, {
      "left" : "session.commit();",
      "right" : "session.commit();",
      "info" : "ExpressionStatement[28573-28590]:ExpressionStatement[29094-29111]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[28596-28813]:ExpressionStatement[29117-29334]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .setPath(\"New path\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_KEY\")\n      .setName(\"Module\")\n      .setPath(\"New path\")\n      .build());",
      "info" : "ExpressionStatement[28818-29039]:ExpressionStatement[29339-29560]"
    }, {
      "left" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\")));",
      "right" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"BCDE\", \"MODULE_KEY\")));",
      "info" : "ExpressionStatement[29045-29208]:ExpressionStatement[29566-29729]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[29214-29228]:ExpressionStatement[29735-29749]"
    }, {
      "left" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "right" : "ComponentDto moduleReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_KEY\");",
      "info" : "VariableDeclarationStatement[29234-29331]:VariableDeclarationStatement[29755-29852]"
    }, {
      "left" : "assertThat(moduleReloaded.path()).isEqualTo(\"New path\");",
      "right" : "assertThat(moduleReloaded.path()).isEqualTo(\"New path\");",
      "info" : "ExpressionStatement[29336-29392]:ExpressionStatement[29857-29913]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[29400-29405]:MarkerAnnotation[29921-29926]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29408-29414]:Modifier[29929-29935]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29415-29419]:PrimitiveType[29936-29940]"
    }, {
      "left" : "update_module_uuid_when_moving_a_module",
      "right" : "update_module_uuid_when_moving_a_module",
      "info" : "SimpleName[29420-29459]:SimpleName[29941-29980]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[29469-29478]:SimpleType[29990-29999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29479-33817]:Block[30000-34338]"
    }, {
      "left" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "right" : "ComponentDto project = ComponentTesting.newProjectDto(\"ABCD\").setKey(PROJECT_KEY).setName(\"Project\");",
      "info" : "VariableDeclarationStatement[29485-29586]:VariableDeclarationStatement[30006-30107]"
    }, {
      "left" : "dbClient.componentDao().insert(session, project);",
      "right" : "dbClient.componentDao().insert(session, project);",
      "info" : "ExpressionStatement[29591-29640]:ExpressionStatement[30112-30161]"
    }, {
      "left" : "ComponentDto moduleA = ComponentTesting.newModuleDto(\"EDCB\", project).setKey(\"MODULE_A\").setName(\"Module A\");",
      "right" : "ComponentDto moduleA = ComponentTesting.newModuleDto(\"EDCB\", project).setKey(\"MODULE_A\").setName(\"Module A\");",
      "info" : "VariableDeclarationStatement[29645-29754]:VariableDeclarationStatement[30166-30275]"
    }, {
      "left" : "ComponentDto moduleB = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_B\").setName(\"Module B\");",
      "right" : "ComponentDto moduleB = ComponentTesting.newModuleDto(\"BCDE\", project).setKey(\"MODULE_B\").setName(\"Module B\");",
      "info" : "VariableDeclarationStatement[29759-29868]:VariableDeclarationStatement[30280-30389]"
    }, {
      "left" : "dbClient.componentDao().insert(session, moduleA, moduleB);",
      "right" : "dbClient.componentDao().insert(session, moduleA, moduleB);",
      "info" : "ExpressionStatement[29873-29931]:ExpressionStatement[30394-30452]"
    }, {
      "left" : "ComponentDto directory = ComponentTesting.newDirectory(moduleB, \"src/main/java/dir\").setUuid(\"CDEF\").setKey(\"MODULE_B:src/main/java/dir\");",
      "right" : "ComponentDto directory = ComponentTesting.newDirectory(moduleB, \"src/main/java/dir\").setUuid(\"CDEF\").setKey(\"MODULE_B:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[29936-30074]:VariableDeclarationStatement[30457-30595]"
    }, {
      "left" : "ComponentDto file = ComponentTesting.newFileDto(moduleB, \"DEFG\").setPath(\"src/main/java/dir/Foo.java\").setName(\"Foo.java\").setKey(\"MODULE_B:src/main/java/dir/Foo.java\");",
      "right" : "ComponentDto file = ComponentTesting.newFileDto(moduleB, \"DEFG\").setPath(\"src/main/java/dir/Foo.java\").setName(\"Foo.java\").setKey(\"MODULE_B:src/main/java/dir/Foo.java\");",
      "info" : "VariableDeclarationStatement[30079-30248]:VariableDeclarationStatement[30600-30769]"
    }, {
      "left" : "dbClient.componentDao().insert(session, directory, file);",
      "right" : "dbClient.componentDao().insert(session, directory, file);",
      "info" : "ExpressionStatement[30253-30310]:ExpressionStatement[30774-30831]"
    }, {
      "left" : "session.commit();",
      "right" : "session.commit();",
      "info" : "ExpressionStatement[30315-30332]:ExpressionStatement[30836-30853]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(1)\n      .setType(Constants.ComponentType.PROJECT)\n      .setKey(PROJECT_KEY)\n      .setName(\"Project\")\n      .addChildRef(2)\n      .build());",
      "info" : "ExpressionStatement[30338-30555]:ExpressionStatement[30859-31076]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_A\")\n      .setName(\"Module A\")\n      .addChildRef(3)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(2)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_A\")\n      .setName(\"Module A\")\n      .addChildRef(3)\n      .build());",
      "info" : "ExpressionStatement[30560-30776]:ExpressionStatement[31081-31297]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_B\")\n      .setName(\"Module B\")\n      .addChildRef(4)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(3)\n      .setType(Constants.ComponentType.MODULE)\n      .setKey(\"MODULE_B\")\n      .setName(\"Module B\")\n      .addChildRef(4)\n      .build());",
      "info" : "ExpressionStatement[30829-31045]:ExpressionStatement[31350-31566]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(5)\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(4)\n      .setType(Constants.ComponentType.DIRECTORY)\n      .setPath(\"src/main/java/dir\")\n      .addChildRef(5)\n      .build());",
      "info" : "ExpressionStatement[31050-31252]:ExpressionStatement[31571-31773]"
    }, {
      "left" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(5)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .build());",
      "right" : "reportReader.putComponent(BatchReport.Component.newBuilder()\n      .setRef(5)\n      .setType(Constants.ComponentType.FILE)\n      .setPath(\"src/main/java/dir/Foo.java\")\n      .build());",
      "info" : "ExpressionStatement[31257-31441]:ExpressionStatement[31778-31962]"
    }, {
      "left" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"EDCB\", \"MODULE_A\",\n        new DumbComponent(Component.Type.MODULE, 3, \"BCDE\", \"MODULE_B\",\n          new DumbComponent(Component.Type.DIRECTORY, 4, \"CDEF\", \"MODULE_B:src/main/java/dir\",\n            new DumbComponent(Component.Type.FILE, 5, \"DEFG\", \"MODULE_B:src/main/java/dir/Foo.java\"))))));",
      "right" : "treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT, 1, \"ABCD\", PROJECT_KEY,\n      new DumbComponent(Component.Type.MODULE, 2, \"EDCB\", \"MODULE_A\",\n        new DumbComponent(Component.Type.MODULE, 3, \"BCDE\", \"MODULE_B\",\n          new DumbComponent(Component.Type.DIRECTORY, 4, \"CDEF\", \"MODULE_B:src/main/java/dir\",\n            new DumbComponent(Component.Type.FILE, 5, \"DEFG\", \"MODULE_B:src/main/java/dir/Foo.java\"))))));",
      "info" : "ExpressionStatement[31447-31879]:ExpressionStatement[31968-32400]"
    }, {
      "left" : "sut.execute();",
      "right" : "sut.execute();",
      "info" : "ExpressionStatement[31885-31899]:ExpressionStatement[32406-32420]"
    }, {
      "left" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(5);",
      "right" : "assertThat(dbTester.countRowsOfTable(\"projects\")).isEqualTo(5);",
      "info" : "ExpressionStatement[31905-31968]:ExpressionStatement[32426-32489]"
    }, {
      "left" : "ComponentDto moduleAreloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_A\");",
      "right" : "ComponentDto moduleAreloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_A\");",
      "info" : "VariableDeclarationStatement[31974-32070]:VariableDeclarationStatement[32495-32591]"
    }, {
      "left" : "assertThat(moduleAreloaded).isNotNull();",
      "right" : "assertThat(moduleAreloaded).isNotNull();",
      "info" : "ExpressionStatement[32075-32115]:ExpressionStatement[32596-32636]"
    }, {
      "left" : "ComponentDto moduleBReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B\");",
      "right" : "ComponentDto moduleBReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B\");",
      "info" : "VariableDeclarationStatement[32121-32217]:VariableDeclarationStatement[32642-32738]"
    }, {
      "left" : "assertThat(moduleBReloaded).isNotNull();",
      "right" : "assertThat(moduleBReloaded).isNotNull();",
      "info" : "ExpressionStatement[32222-32262]:ExpressionStatement[32743-32783]"
    }, {
      "left" : "assertThat(moduleBReloaded.uuid()).isEqualTo(moduleB.uuid());",
      "right" : "assertThat(moduleBReloaded.uuid()).isEqualTo(moduleB.uuid());",
      "info" : "ExpressionStatement[32267-32328]:ExpressionStatement[32788-32849]"
    }, {
      "left" : "assertThat(moduleBReloaded.moduleUuid()).isEqualTo(moduleAreloaded.uuid());",
      "right" : "assertThat(moduleBReloaded.moduleUuid()).isEqualTo(moduleAreloaded.uuid());",
      "info" : "ExpressionStatement[32333-32408]:ExpressionStatement[32854-32929]"
    }, {
      "left" : "assertThat(moduleBReloaded.moduleUuidPath()).isEqualTo(moduleAreloaded.moduleUuidPath() + moduleBReloaded.uuid() + \".\");",
      "right" : "assertThat(moduleBReloaded.moduleUuidPath()).isEqualTo(moduleAreloaded.moduleUuidPath() + moduleBReloaded.uuid() + \".\");",
      "info" : "ExpressionStatement[32413-32533]:ExpressionStatement[32934-33054]"
    }, {
      "left" : "assertThat(moduleBReloaded.projectUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(moduleBReloaded.projectUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[32538-32606]:ExpressionStatement[33059-33127]"
    }, {
      "left" : "assertThat(moduleBReloaded.parentProjectId()).isEqualTo(project.getId());",
      "right" : "assertThat(moduleBReloaded.parentProjectId()).isEqualTo(project.getId());",
      "info" : "ExpressionStatement[32611-32684]:ExpressionStatement[33132-33205]"
    }, {
      "left" : "ComponentDto directoryReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B:src/main/java/dir\");",
      "right" : "ComponentDto directoryReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B:src/main/java/dir\");",
      "info" : "VariableDeclarationStatement[32690-32806]:VariableDeclarationStatement[33211-33327]"
    }, {
      "left" : "assertThat(directoryReloaded).isNotNull();",
      "right" : "assertThat(directoryReloaded).isNotNull();",
      "info" : "ExpressionStatement[32811-32853]:ExpressionStatement[33332-33374]"
    }, {
      "left" : "assertThat(directoryReloaded.uuid()).isEqualTo(directory.uuid());",
      "right" : "assertThat(directoryReloaded.uuid()).isEqualTo(directory.uuid());",
      "info" : "ExpressionStatement[32858-32923]:ExpressionStatement[33379-33444]"
    }, {
      "left" : "assertThat(directoryReloaded.moduleUuid()).isEqualTo(moduleBReloaded.uuid());",
      "right" : "assertThat(directoryReloaded.moduleUuid()).isEqualTo(moduleBReloaded.uuid());",
      "info" : "ExpressionStatement[32928-33005]:ExpressionStatement[33449-33526]"
    }, {
      "left" : "assertThat(directoryReloaded.moduleUuidPath()).isEqualTo(moduleBReloaded.moduleUuidPath());",
      "right" : "assertThat(directoryReloaded.moduleUuidPath()).isEqualTo(moduleBReloaded.moduleUuidPath());",
      "info" : "ExpressionStatement[33010-33101]:ExpressionStatement[33531-33622]"
    }, {
      "left" : "assertThat(directoryReloaded.projectUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(directoryReloaded.projectUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[33106-33176]:ExpressionStatement[33627-33697]"
    }, {
      "left" : "assertThat(directoryReloaded.parentProjectId()).isEqualTo(moduleBReloaded.getId());",
      "right" : "assertThat(directoryReloaded.parentProjectId()).isEqualTo(moduleBReloaded.getId());",
      "info" : "ExpressionStatement[33181-33264]:ExpressionStatement[33702-33785]"
    }, {
      "left" : "ComponentDto fileReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B:src/main/java/dir/Foo.java\");",
      "right" : "ComponentDto fileReloaded = dbClient.componentDao().selectNullableByKey(session, \"MODULE_B:src/main/java/dir/Foo.java\");",
      "info" : "VariableDeclarationStatement[33270-33390]:VariableDeclarationStatement[33791-33911]"
    }, {
      "left" : "assertThat(fileReloaded).isNotNull();",
      "right" : "assertThat(fileReloaded).isNotNull();",
      "info" : "ExpressionStatement[33395-33432]:ExpressionStatement[33916-33953]"
    }, {
      "left" : "assertThat(fileReloaded.uuid()).isEqualTo(file.uuid());",
      "right" : "assertThat(fileReloaded.uuid()).isEqualTo(file.uuid());",
      "info" : "ExpressionStatement[33437-33492]:ExpressionStatement[33958-34013]"
    }, {
      "left" : "assertThat(fileReloaded.moduleUuid()).isEqualTo(moduleBReloaded.uuid());",
      "right" : "assertThat(fileReloaded.moduleUuid()).isEqualTo(moduleBReloaded.uuid());",
      "info" : "ExpressionStatement[33497-33569]:ExpressionStatement[34018-34090]"
    }, {
      "left" : "assertThat(fileReloaded.moduleUuidPath()).isEqualTo(moduleBReloaded.moduleUuidPath());",
      "right" : "assertThat(fileReloaded.moduleUuidPath()).isEqualTo(moduleBReloaded.moduleUuidPath());",
      "info" : "ExpressionStatement[33574-33660]:ExpressionStatement[34095-34181]"
    }, {
      "left" : "assertThat(fileReloaded.projectUuid()).isEqualTo(project.uuid());",
      "right" : "assertThat(fileReloaded.projectUuid()).isEqualTo(project.uuid());",
      "info" : "ExpressionStatement[33665-33730]:ExpressionStatement[34186-34251]"
    }, {
      "left" : "assertThat(fileReloaded.parentProjectId()).isEqualTo(moduleBReloaded.getId());",
      "right" : "assertThat(fileReloaded.parentProjectId()).isEqualTo(moduleBReloaded.getId());",
      "info" : "ExpressionStatement[33735-33813]:ExpressionStatement[34256-34334]"
    } ]
  },
  "interFileMappings" : { }
}