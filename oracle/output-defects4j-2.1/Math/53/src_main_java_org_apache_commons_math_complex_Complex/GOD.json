{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Complex",
      "right" : "Complex",
      "info" : "TypeDeclaration[1247-36271]:TypeDeclaration[1247-36339]"
    }, {
      "left" : "public static final Complex I = new Complex(0.0, 1.0);",
      "right" : "public static final Complex I = new Complex(0.0, 1.0);",
      "info" : "FieldDeclaration[2025-2148]:FieldDeclaration[2025-2148]"
    }, {
      "left" : "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",
      "right" : "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",
      "info" : "FieldDeclaration[2191-2315]:FieldDeclaration[2191-2315]"
    }, {
      "left" : "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
      "right" : "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
      "info" : "FieldDeclaration[2360-2513]:FieldDeclaration[2360-2513]"
    }, {
      "left" : "public static final Complex ONE = new Complex(1.0, 0.0);",
      "right" : "public static final Complex ONE = new Complex(1.0, 0.0);",
      "info" : "FieldDeclaration[2519-2629]:FieldDeclaration[2519-2629]"
    }, {
      "left" : "public static final Complex ZERO = new Complex(0.0, 0.0);",
      "right" : "public static final Complex ZERO = new Complex(0.0, 0.0);",
      "info" : "FieldDeclaration[2635-2746]:FieldDeclaration[2635-2746]"
    }, {
      "left" : "private static final long serialVersionUID = -6195664516687396620L;",
      "right" : "private static final long serialVersionUID = -6195664516687396620L;",
      "info" : "FieldDeclaration[2752-2862]:FieldDeclaration[2752-2862]"
    }, {
      "left" : "private final double imaginary;",
      "right" : "private final double imaginary;",
      "info" : "FieldDeclaration[2868-2930]:FieldDeclaration[2868-2930]"
    }, {
      "left" : "private final double real;",
      "right" : "private final double real;",
      "info" : "FieldDeclaration[2936-2988]:FieldDeclaration[2936-2988]"
    }, {
      "left" : "private final transient boolean isNaN;",
      "right" : "private final transient boolean isNaN;",
      "info" : "FieldDeclaration[2994-3095]:FieldDeclaration[2994-3095]"
    }, {
      "left" : "private final transient boolean isInfinite;",
      "right" : "private final transient boolean isInfinite;",
      "info" : "FieldDeclaration[3101-3203]:FieldDeclaration[3101-3203]"
    }, {
      "left" : "public Complex(double real, double imaginary)",
      "right" : "public Complex(double real, double imaginary)",
      "info" : "MethodDeclaration[3209-3669]:MethodDeclaration[3209-3669]"
    }, {
      "left" : "public double abs()",
      "right" : "public double abs()",
      "info" : "MethodDeclaration[3675-4702]:MethodDeclaration[3675-4702]"
    }, {
      "left" : "public Complex add(Complex rhs)\n        throws NullArgumentException",
      "right" : "public Complex add(Complex rhs)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[4708-5558]:MethodDeclaration[4708-5626]"
    }, {
      "left" : "public Complex conjugate()",
      "right" : "public Complex conjugate()",
      "info" : "MethodDeclaration[5564-6297]:MethodDeclaration[5632-6365]"
    }, {
      "left" : "public Complex divide(Complex rhs)\n        throws NullArgumentException",
      "right" : "public Complex divide(Complex rhs)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[6303-8759]:MethodDeclaration[6371-8827]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[8765-9959]:MethodDeclaration[8833-10027]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[9965-10330]:MethodDeclaration[10033-10398]"
    }, {
      "left" : "public double getImaginary()",
      "right" : "public double getImaginary()",
      "info" : "MethodDeclaration[10336-10489]:MethodDeclaration[10404-10557]"
    }, {
      "left" : "public double getReal()",
      "right" : "public double getReal()",
      "info" : "MethodDeclaration[10495-10628]:MethodDeclaration[10563-10696]"
    }, {
      "left" : "public boolean isNaN()",
      "right" : "public boolean isNaN()",
      "info" : "MethodDeclaration[10634-10906]:MethodDeclaration[10702-10974]"
    }, {
      "left" : "public boolean isInfinite()",
      "right" : "public boolean isInfinite()",
      "info" : "MethodDeclaration[10912-11369]:MethodDeclaration[10980-11437]"
    }, {
      "left" : "public Complex multiply(Complex rhs)\n        throws NullArgumentException",
      "right" : "public Complex multiply(Complex rhs)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[11375-12950]:MethodDeclaration[11443-13018]"
    }, {
      "left" : "public Complex multiply(double rhs)",
      "right" : "public Complex multiply(double rhs)",
      "info" : "MethodDeclaration[12956-14257]:MethodDeclaration[13024-14325]"
    }, {
      "left" : "public Complex negate()",
      "right" : "public Complex negate()",
      "info" : "MethodDeclaration[14263-14682]:MethodDeclaration[14331-14750]"
    }, {
      "left" : "public Complex subtract(Complex rhs)\n        throws NullArgumentException",
      "right" : "public Complex subtract(Complex rhs)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[14688-15640]:MethodDeclaration[14756-15708]"
    }, {
      "left" : "public Complex acos()",
      "right" : "public Complex acos()",
      "info" : "MethodDeclaration[15646-16364]:MethodDeclaration[15714-16432]"
    }, {
      "left" : "public Complex asin()",
      "right" : "public Complex asin()",
      "info" : "MethodDeclaration[16370-17076]:MethodDeclaration[16438-17144]"
    }, {
      "left" : "public Complex atan()",
      "right" : "public Complex atan()",
      "info" : "MethodDeclaration[17082-17819]:MethodDeclaration[17150-17887]"
    }, {
      "left" : "public Complex cos()",
      "right" : "public Complex cos()",
      "info" : "MethodDeclaration[17825-19090]:MethodDeclaration[17893-19158]"
    }, {
      "left" : "public Complex cosh()",
      "right" : "public Complex cosh()",
      "info" : "MethodDeclaration[19096-20398]:MethodDeclaration[19164-20466]"
    }, {
      "left" : "public Complex exp()",
      "right" : "public Complex exp()",
      "info" : "MethodDeclaration[20404-21705]:MethodDeclaration[20472-21773]"
    }, {
      "left" : "public Complex log()",
      "right" : "public Complex log()",
      "info" : "MethodDeclaration[21711-23149]:MethodDeclaration[21779-23217]"
    }, {
      "left" : "public Complex pow(Complex x)\n        throws NullArgumentException",
      "right" : "public Complex pow(Complex x)\n        throws NullArgumentException",
      "info" : "MethodDeclaration[23155-23999]:MethodDeclaration[23223-24067]"
    }, {
      "left" : "public Complex sin()",
      "right" : "public Complex sin()",
      "info" : "MethodDeclaration[24005-25264]:MethodDeclaration[24073-25332]"
    }, {
      "left" : "public Complex sinh()",
      "right" : "public Complex sinh()",
      "info" : "MethodDeclaration[25270-26568]:MethodDeclaration[25338-26636]"
    }, {
      "left" : "public Complex sqrt()",
      "right" : "public Complex sqrt()",
      "info" : "MethodDeclaration[26574-28461]:MethodDeclaration[26642-28529]"
    }, {
      "left" : "public Complex sqrt1z()",
      "right" : "public Complex sqrt1z()",
      "info" : "MethodDeclaration[28467-29277]:MethodDeclaration[28535-29345]"
    }, {
      "left" : "public Complex tan()",
      "right" : "public Complex tan()",
      "info" : "MethodDeclaration[29283-30732]:MethodDeclaration[29351-30800]"
    }, {
      "left" : "public Complex tanh()",
      "right" : "public Complex tanh()",
      "info" : "MethodDeclaration[30738-32195]:MethodDeclaration[30806-32263]"
    }, {
      "left" : "public double getArgument()",
      "right" : "public double getArgument()",
      "info" : "MethodDeclaration[32203-33120]:MethodDeclaration[32271-33188]"
    }, {
      "left" : "public List<Complex> nthRoot(int n) throws IllegalArgumentException",
      "right" : "public List<Complex> nthRoot(int n) throws IllegalArgumentException",
      "info" : "MethodDeclaration[33126-35292]:MethodDeclaration[33194-35360]"
    }, {
      "left" : "protected Complex createComplex(double realPart, double imaginaryPart)",
      "right" : "protected Complex createComplex(double realPart, double imaginaryPart)",
      "info" : "MethodDeclaration[35298-35666]:MethodDeclaration[35366-35734]"
    }, {
      "left" : "protected final Object readResolve()",
      "right" : "protected final Object readResolve()",
      "info" : "MethodDeclaration[35672-36028]:MethodDeclaration[35740-36096]"
    }, {
      "left" : "public ComplexField getField()",
      "right" : "public ComplexField getField()",
      "info" : "MethodDeclaration[36034-36140]:MethodDeclaration[36102-36208]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[36146-36269]:MethodDeclaration[36214-36337]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3421-3669]:Block[3421-3669]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[3431-3439]:SuperConstructorInvocation[3431-3439]"
    }, {
      "left" : "this.real = real;",
      "right" : "this.real = real;",
      "info" : "ExpressionStatement[3448-3465]:ExpressionStatement[3448-3465]"
    }, {
      "left" : "this.imaginary = imaginary;",
      "right" : "this.imaginary = imaginary;",
      "info" : "ExpressionStatement[3474-3501]:ExpressionStatement[3474-3501]"
    }, {
      "left" : "isNaN = Double.isNaN(real) || Double.isNaN(imaginary);",
      "right" : "isNaN = Double.isNaN(real) || Double.isNaN(imaginary);",
      "info" : "ExpressionStatement[3511-3565]:ExpressionStatement[3511-3565]"
    }, {
      "left" : "isInfinite = !isNaN &&\n        (Double.isInfinite(real) || Double.isInfinite(imaginary));",
      "right" : "isInfinite = !isNaN &&\n        (Double.isInfinite(real) || Double.isInfinite(imaginary));",
      "info" : "ExpressionStatement[3574-3663]:ExpressionStatement[3574-3663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4056-4702]:Block[4056-4702]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[4066-4119]:IfStatement[4066-4119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4077-4119]:Block[4077-4119]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[4091-4109]:ReturnStatement[4091-4109]"
    }, {
      "left" : "if (isInfinite())",
      "right" : "if (isInfinite())",
      "info" : "IfStatement[4129-4203]:IfStatement[4129-4203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4147-4203]:Block[4147-4203]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[4161-4193]:ReturnStatement[4161-4193]"
    }, {
      "left" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
      "right" : "if (FastMath.abs(real) < FastMath.abs(imaginary))",
      "info" : "IfStatement[4213-4696]:IfStatement[4213-4696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4263-4479]:Block[4263-4479]"
    }, {
      "left" : "if (imaginary == 0.0)",
      "right" : "if (imaginary == 0.0)",
      "info" : "IfStatement[4277-4357]:IfStatement[4277-4357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4299-4357]:Block[4299-4357]"
    }, {
      "left" : "return FastMath.abs(real);",
      "right" : "return FastMath.abs(real);",
      "info" : "ReturnStatement[4317-4343]:ReturnStatement[4317-4343]"
    }, {
      "left" : "double q = real / imaginary;",
      "right" : "double q = real / imaginary;",
      "info" : "VariableDeclarationStatement[4370-4398]:VariableDeclarationStatement[4370-4398]"
    }, {
      "left" : "return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);",
      "right" : "return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);",
      "info" : "ReturnStatement[4411-4469]:ReturnStatement[4411-4469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4485-4696]:Block[4485-4696]"
    }, {
      "left" : "if (real == 0.0)",
      "right" : "if (real == 0.0)",
      "info" : "IfStatement[4499-4579]:IfStatement[4499-4579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4516-4579]:Block[4516-4579]"
    }, {
      "left" : "return FastMath.abs(imaginary);",
      "right" : "return FastMath.abs(imaginary);",
      "info" : "ReturnStatement[4534-4565]:ReturnStatement[4534-4565]"
    }, {
      "left" : "double q = imaginary / real;",
      "right" : "double q = imaginary / real;",
      "info" : "VariableDeclarationStatement[4592-4620]:VariableDeclarationStatement[4592-4620]"
    }, {
      "left" : "return FastMath.abs(real) * FastMath.sqrt(1 + q * q);",
      "right" : "return FastMath.abs(real) * FastMath.sqrt(1 + q * q);",
      "info" : "ReturnStatement[4633-4686]:ReturnStatement[4633-4686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5418-5558]:Block[5418-5626]"
    }, {
      "left" : "MathUtils.checkNotNull(rhs);",
      "right" : "MathUtils.checkNotNull(rhs);",
      "info" : "ExpressionStatement[5428-5456]:ExpressionStatement[5428-5456]"
    }, {
      "left" : "return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());",
      "right" : "return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());",
      "info" : "ReturnStatement[5465-5552]:ReturnStatement[5533-5620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6187-6297]:Block[6255-6365]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[6197-6243]:IfStatement[6265-6311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6208-6243]:Block[6276-6311]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[6222-6233]:ReturnStatement[6290-6301]"
    }, {
      "left" : "return createComplex(real, -imaginary);",
      "right" : "return createComplex(real, -imaginary);",
      "info" : "ReturnStatement[6252-6291]:ReturnStatement[6320-6359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7941-8759]:Block[8009-8827]"
    }, {
      "left" : "MathUtils.checkNotNull(rhs);",
      "right" : "MathUtils.checkNotNull(rhs);",
      "info" : "ExpressionStatement[7951-7979]:ExpressionStatement[8019-8047]"
    }, {
      "left" : "if (isNaN || rhs.isNaN)",
      "right" : "if (isNaN || rhs.isNaN)",
      "info" : "IfStatement[7988-8047]:IfStatement[8056-8115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8012-8047]:Block[8080-8115]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[8026-8037]:ReturnStatement[8094-8105]"
    }, {
      "left" : "double c = rhs.getReal();",
      "right" : "double c = rhs.getReal();",
      "info" : "VariableDeclarationStatement[8057-8082]:VariableDeclarationStatement[8125-8150]"
    }, {
      "left" : "double d = rhs.getImaginary();",
      "right" : "double d = rhs.getImaginary();",
      "info" : "VariableDeclarationStatement[8091-8121]:VariableDeclarationStatement[8159-8189]"
    }, {
      "left" : "if (c == 0.0 && d == 0.0)",
      "right" : "if (c == 0.0 && d == 0.0)",
      "info" : "IfStatement[8130-8191]:IfStatement[8198-8259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8156-8191]:Block[8224-8259]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[8170-8181]:ReturnStatement[8238-8249]"
    }, {
      "left" : "if (rhs.isInfinite() && !isInfinite())",
      "right" : "if (rhs.isInfinite() && !isInfinite())",
      "info" : "IfStatement[8201-8276]:IfStatement[8269-8344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8240-8276]:Block[8308-8344]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[8254-8266]:ReturnStatement[8322-8334]"
    }, {
      "left" : "if (FastMath.abs(c) < FastMath.abs(d))",
      "right" : "if (FastMath.abs(c) < FastMath.abs(d))",
      "info" : "IfStatement[8286-8753]:IfStatement[8354-8821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8325-8536]:Block[8393-8604]"
    }, {
      "left" : "double q = c / d;",
      "right" : "double q = c / d;",
      "info" : "VariableDeclarationStatement[8339-8356]:VariableDeclarationStatement[8407-8424]"
    }, {
      "left" : "double denominator = c * q + d;",
      "right" : "double denominator = c * q + d;",
      "info" : "VariableDeclarationStatement[8369-8400]:VariableDeclarationStatement[8437-8468]"
    }, {
      "left" : "return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);",
      "right" : "return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);",
      "info" : "ReturnStatement[8413-8526]:ReturnStatement[8481-8594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8542-8753]:Block[8610-8821]"
    }, {
      "left" : "double q = d / c;",
      "right" : "double q = d / c;",
      "info" : "VariableDeclarationStatement[8556-8573]:VariableDeclarationStatement[8624-8641]"
    }, {
      "left" : "double denominator = d * q + c;",
      "right" : "double denominator = d * q + c;",
      "info" : "VariableDeclarationStatement[8586-8617]:VariableDeclarationStatement[8654-8685]"
    }, {
      "left" : "return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);",
      "right" : "return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);",
      "info" : "ReturnStatement[8630-8743]:ReturnStatement[8698-8811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9606-9959]:Block[9674-10027]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[9616-9671]:IfStatement[9684-9739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9635-9671]:Block[9703-9739]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9649-9661]:ReturnStatement[9717-9729]"
    }, {
      "left" : "if (other instanceof Complex)",
      "right" : "if (other instanceof Complex)",
      "info" : "IfStatement[9680-9931]:IfStatement[9748-9999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9709-9931]:Block[9777-9999]"
    }, {
      "left" : "Complex rhs = (Complex)other;",
      "right" : "Complex rhs = (Complex)other;",
      "info" : "VariableDeclarationStatement[9723-9752]:VariableDeclarationStatement[9791-9820]"
    }, {
      "left" : "if (rhs.isNaN)",
      "right" : "if (rhs.isNaN)",
      "info" : "IfStatement[9765-9921]:IfStatement[9833-9989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9780-9825]:Block[9848-9893]"
    }, {
      "left" : "return isNaN;",
      "right" : "return isNaN;",
      "info" : "ReturnStatement[9798-9811]:ReturnStatement[9866-9879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9831-9921]:Block[9899-9989]"
    }, {
      "left" : "return (real == rhs.real) && (imaginary == rhs.imaginary);",
      "right" : "return (real == rhs.real) && (imaginary == rhs.imaginary);",
      "info" : "ReturnStatement[9849-9907]:ReturnStatement[9917-9975]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9940-9953]:ReturnStatement[10008-10021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10181-10330]:Block[10249-10398]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[10191-10235]:IfStatement[10259-10303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10202-10235]:Block[10270-10303]"
    }, {
      "left" : "return 7;",
      "right" : "return 7;",
      "info" : "ReturnStatement[10216-10225]:ReturnStatement[10284-10293]"
    }, {
      "left" : "return 37 * (17 * MathUtils.hash(imaginary) +\n            MathUtils.hash(real));",
      "right" : "return 37 * (17 * MathUtils.hash(imaginary) +\n            MathUtils.hash(real));",
      "info" : "ReturnStatement[10244-10324]:ReturnStatement[10312-10392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10456-10489]:Block[10524-10557]"
    }, {
      "left" : "return imaginary;",
      "right" : "return imaginary;",
      "info" : "ReturnStatement[10466-10483]:ReturnStatement[10534-10551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10600-10628]:Block[10668-10696]"
    }, {
      "left" : "return real;",
      "right" : "return real;",
      "info" : "ReturnStatement[10610-10622]:ReturnStatement[10678-10690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10877-10906]:Block[10945-10974]"
    }, {
      "left" : "return isNaN;",
      "right" : "return isNaN;",
      "info" : "ReturnStatement[10887-10900]:ReturnStatement[10955-10968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11335-11369]:Block[11403-11437]"
    }, {
      "left" : "return isInfinite;",
      "right" : "return isInfinite;",
      "info" : "ReturnStatement[11345-11363]:ReturnStatement[11413-11431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12439-12950]:Block[12507-13018]"
    }, {
      "left" : "MathUtils.checkNotNull(rhs);",
      "right" : "MathUtils.checkNotNull(rhs);",
      "info" : "ExpressionStatement[12449-12477]:ExpressionStatement[12517-12545]"
    }, {
      "left" : "if (isNaN || rhs.isNaN)",
      "right" : "if (isNaN || rhs.isNaN)",
      "info" : "IfStatement[12486-12545]:IfStatement[12554-12613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12510-12545]:Block[12578-12613]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[12524-12535]:ReturnStatement[12592-12603]"
    }, {
      "left" : "if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||\n            Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary))",
      "right" : "if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||\n            Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary))",
      "info" : "IfStatement[12554-12808]:IfStatement[12622-12876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12693-12808]:Block[12761-12876]"
    }, {
      "left" : "return INF;",
      "right" : "return INF;",
      "info" : "ReturnStatement[12787-12798]:ReturnStatement[12855-12866]"
    }, {
      "left" : "return createComplex(real * rhs.real - imaginary * rhs.imaginary,\n                real * rhs.imaginary + imaginary * rhs.real);",
      "right" : "return createComplex(real * rhs.real - imaginary * rhs.imaginary,\n                real * rhs.imaginary + imaginary * rhs.real);",
      "info" : "ReturnStatement[12817-12944]:ReturnStatement[12885-13012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13892-14257]:Block[13960-14325]"
    }, {
      "left" : "if (isNaN || Double.isNaN(rhs))",
      "right" : "if (isNaN || Double.isNaN(rhs))",
      "info" : "IfStatement[13902-13969]:IfStatement[13970-14037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13934-13969]:Block[14002-14037]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[13948-13959]:ReturnStatement[14016-14027]"
    }, {
      "left" : "if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||\n            Double.isInfinite(rhs))",
      "right" : "if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||\n            Double.isInfinite(rhs))",
      "info" : "IfStatement[13978-14192]:IfStatement[14046-14260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14077-14192]:Block[14145-14260]"
    }, {
      "left" : "return INF;",
      "right" : "return INF;",
      "info" : "ReturnStatement[14171-14182]:ReturnStatement[14239-14250]"
    }, {
      "left" : "return createComplex(real * rhs, imaginary * rhs);",
      "right" : "return createComplex(real * rhs, imaginary * rhs);",
      "info" : "ReturnStatement[14201-14251]:ReturnStatement[14269-14319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14570-14682]:Block[14638-14750]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[14580-14626]:IfStatement[14648-14694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14591-14626]:Block[14659-14694]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[14605-14616]:ReturnStatement[14673-14684]"
    }, {
      "left" : "return createComplex(-real, -imaginary);",
      "right" : "return createComplex(-real, -imaginary);",
      "info" : "ReturnStatement[14636-14676]:ReturnStatement[14704-14744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15431-15640]:Block[15499-15708]"
    }, {
      "left" : "MathUtils.checkNotNull(rhs);",
      "right" : "MathUtils.checkNotNull(rhs);",
      "info" : "ExpressionStatement[15441-15469]:ExpressionStatement[15509-15537]"
    }, {
      "left" : "if (isNaN || rhs.isNaN)",
      "right" : "if (isNaN || rhs.isNaN)",
      "info" : "IfStatement[15478-15537]:IfStatement[15546-15605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15502-15537]:Block[15570-15605]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[15516-15527]:ReturnStatement[15584-15595]"
    }, {
      "left" : "return createComplex(real - rhs.getReal(),\n            imaginary - rhs.getImaginary());",
      "right" : "return createComplex(real - rhs.getReal(),\n            imaginary - rhs.getImaginary());",
      "info" : "ReturnStatement[15547-15634]:ReturnStatement[15615-15702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16191-16364]:Block[16259-16432]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[16201-16247]:IfStatement[16269-16315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16212-16247]:Block[16280-16315]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[16226-16237]:ReturnStatement[16294-16305]"
    }, {
      "left" : "return this.add(this.sqrt1z().multiply(Complex.I)).log()\n              .multiply(Complex.I.negate());",
      "right" : "return this.add(this.sqrt1z().multiply(Complex.I)).log()\n              .multiply(Complex.I.negate());",
      "info" : "ReturnStatement[16257-16358]:ReturnStatement[16325-16426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16908-17076]:Block[16976-17144]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[16918-16964]:IfStatement[16986-17032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16929-16964]:Block[16997-17032]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[16943-16954]:ReturnStatement[17011-17022]"
    }, {
      "left" : "return sqrt1z().add(this.multiply(Complex.I)).log()\n              .multiply(Complex.I.negate());",
      "right" : "return sqrt1z().add(this.multiply(Complex.I)).log()\n              .multiply(Complex.I.negate());",
      "info" : "ReturnStatement[16974-17070]:ReturnStatement[17042-17138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17616-17819]:Block[17684-17887]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[17626-17672]:IfStatement[17694-17740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17637-17672]:Block[17705-17740]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[17651-17662]:ReturnStatement[17719-17730]"
    }, {
      "left" : "return this.add(Complex.I).divide(Complex.I.subtract(this)).log()\n            .multiply(Complex.I.divide(createComplex(2.0, 0.0)));",
      "right" : "return this.add(Complex.I).divide(Complex.I.subtract(this)).log()\n            .multiply(Complex.I.divide(createComplex(2.0, 0.0)));",
      "info" : "ReturnStatement[17682-17813]:ReturnStatement[17750-17881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18888-19090]:Block[18956-19158]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[18898-18944]:IfStatement[18966-19012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18909-18944]:Block[18977-19012]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[18923-18934]:ReturnStatement[18991-19002]"
    }, {
      "left" : "return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),\n            -FastMath.sin(real) * MathUtils.sinh(imaginary));",
      "right" : "return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),\n            -FastMath.sin(real) * MathUtils.sinh(imaginary));",
      "info" : "ReturnStatement[18954-19084]:ReturnStatement[19022-19152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20197-20398]:Block[20265-20466]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[20207-20253]:IfStatement[20275-20321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20218-20253]:Block[20286-20321]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[20232-20243]:ReturnStatement[20300-20311]"
    }, {
      "left" : "return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),\n            MathUtils.sinh(real) * FastMath.sin(imaginary));",
      "right" : "return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),\n            MathUtils.sinh(real) * FastMath.sin(imaginary));",
      "info" : "ReturnStatement[20263-20392]:ReturnStatement[20331-20460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21496-21705]:Block[21564-21773]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[21506-21552]:IfStatement[21574-21620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21517-21552]:Block[21585-21620]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[21531-21542]:ReturnStatement[21599-21610]"
    }, {
      "left" : "double expReal = FastMath.exp(real);",
      "right" : "double expReal = FastMath.exp(real);",
      "info" : "VariableDeclarationStatement[21562-21598]:VariableDeclarationStatement[21630-21666]"
    }, {
      "left" : "return createComplex(expReal *  FastMath.cos(imaginary), expReal * FastMath.sin(imaginary));",
      "right" : "return createComplex(expReal *  FastMath.cos(imaginary), expReal * FastMath.sin(imaginary));",
      "info" : "ReturnStatement[21607-21699]:ReturnStatement[21675-21767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22990-23149]:Block[23058-23217]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[23000-23046]:IfStatement[23068-23114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23011-23046]:Block[23079-23114]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[23025-23036]:ReturnStatement[23093-23104]"
    }, {
      "left" : "return createComplex(FastMath.log(abs()),\n            FastMath.atan2(imaginary, real));",
      "right" : "return createComplex(FastMath.log(abs()),\n            FastMath.atan2(imaginary, real));",
      "info" : "ReturnStatement[23056-23143]:ReturnStatement[23124-23211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23912-23999]:Block[23980-24067]"
    }, {
      "left" : "MathUtils.checkNotNull(x);",
      "right" : "MathUtils.checkNotNull(x);",
      "info" : "ExpressionStatement[23922-23948]:ExpressionStatement[23990-24016]"
    }, {
      "left" : "return this.log().multiply(x).exp();",
      "right" : "return this.log().multiply(x).exp();",
      "info" : "ReturnStatement[23957-23993]:ReturnStatement[24025-24061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25063-25264]:Block[25131-25332]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[25073-25119]:IfStatement[25141-25187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25084-25119]:Block[25152-25187]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[25098-25109]:ReturnStatement[25166-25177]"
    }, {
      "left" : "return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),\n            FastMath.cos(real) * MathUtils.sinh(imaginary));",
      "right" : "return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),\n            FastMath.cos(real) * MathUtils.sinh(imaginary));",
      "info" : "ReturnStatement[25129-25258]:ReturnStatement[25197-25326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26367-26568]:Block[26435-26636]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[26377-26423]:IfStatement[26445-26491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26388-26423]:Block[26456-26491]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[26402-26413]:ReturnStatement[26470-26481]"
    }, {
      "left" : "return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),\n            MathUtils.cosh(real) * FastMath.sin(imaginary));",
      "right" : "return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),\n            MathUtils.cosh(real) * FastMath.sin(imaginary));",
      "info" : "ReturnStatement[26433-26562]:ReturnStatement[26501-26630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27989-28461]:Block[28057-28529]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[27999-28045]:IfStatement[28067-28113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28010-28045]:Block[28078-28113]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[28024-28035]:ReturnStatement[28092-28103]"
    }, {
      "left" : "if (real == 0.0 && imaginary == 0.0)",
      "right" : "if (real == 0.0 && imaginary == 0.0)",
      "info" : "IfStatement[28055-28147]:IfStatement[28123-28215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28092-28147]:Block[28160-28215]"
    }, {
      "left" : "return createComplex(0.0, 0.0);",
      "right" : "return createComplex(0.0, 0.0);",
      "info" : "ReturnStatement[28106-28137]:ReturnStatement[28174-28205]"
    }, {
      "left" : "double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);",
      "right" : "double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);",
      "info" : "VariableDeclarationStatement[28157-28218]:VariableDeclarationStatement[28225-28286]"
    }, {
      "left" : "if (real >= 0.0)",
      "right" : "if (real >= 0.0)",
      "info" : "IfStatement[28227-28455]:IfStatement[28295-28523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28244-28315]:Block[28312-28383]"
    }, {
      "left" : "return createComplex(t, imaginary / (2.0 * t));",
      "right" : "return createComplex(t, imaginary / (2.0 * t));",
      "info" : "ReturnStatement[28258-28305]:ReturnStatement[28326-28373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28321-28455]:Block[28389-28523]"
    }, {
      "left" : "return createComplex(FastMath.abs(imaginary) / (2.0 * t),\n                MathUtils.indicator(imaginary) * t);",
      "right" : "return createComplex(FastMath.abs(imaginary) / (2.0 * t),\n                MathUtils.indicator(imaginary) * t);",
      "info" : "ReturnStatement[28335-28445]:ReturnStatement[28403-28513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29193-29277]:Block[29261-29345]"
    }, {
      "left" : "return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",
      "right" : "return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();",
      "info" : "ReturnStatement[29203-29271]:ReturnStatement[29271-29339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30432-30732]:Block[30500-30800]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[30442-30488]:IfStatement[30510-30556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30453-30488]:Block[30521-30556]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[30467-30478]:ReturnStatement[30535-30546]"
    }, {
      "left" : "double real2 = 2.0 * real;",
      "right" : "double real2 = 2.0 * real;",
      "info" : "VariableDeclarationStatement[30498-30524]:VariableDeclarationStatement[30566-30592]"
    }, {
      "left" : "double imaginary2 = 2.0 * imaginary;",
      "right" : "double imaginary2 = 2.0 * imaginary;",
      "info" : "VariableDeclarationStatement[30533-30569]:VariableDeclarationStatement[30601-30637]"
    }, {
      "left" : "double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);",
      "right" : "double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);",
      "info" : "VariableDeclarationStatement[30578-30638]:VariableDeclarationStatement[30646-30706]"
    }, {
      "left" : "return createComplex(FastMath.sin(real2) / d, MathUtils.sinh(imaginary2) / d);",
      "right" : "return createComplex(FastMath.sin(real2) / d, MathUtils.sinh(imaginary2) / d);",
      "info" : "ReturnStatement[30648-30726]:ReturnStatement[30716-30794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31895-32195]:Block[31963-32263]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[31905-31951]:IfStatement[31973-32019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31916-31951]:Block[31984-32019]"
    }, {
      "left" : "return NaN;",
      "right" : "return NaN;",
      "info" : "ReturnStatement[31930-31941]:ReturnStatement[31998-32009]"
    }, {
      "left" : "double real2 = 2.0 * real;",
      "right" : "double real2 = 2.0 * real;",
      "info" : "VariableDeclarationStatement[31961-31987]:VariableDeclarationStatement[32029-32055]"
    }, {
      "left" : "double imaginary2 = 2.0 * imaginary;",
      "right" : "double imaginary2 = 2.0 * imaginary;",
      "info" : "VariableDeclarationStatement[31996-32032]:VariableDeclarationStatement[32064-32100]"
    }, {
      "left" : "double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);",
      "right" : "double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);",
      "info" : "VariableDeclarationStatement[32041-32101]:VariableDeclarationStatement[32109-32169]"
    }, {
      "left" : "return createComplex(MathUtils.sinh(real2) / d, FastMath.sin(imaginary2) / d);",
      "right" : "return createComplex(MathUtils.sinh(real2) / d, FastMath.sin(imaginary2) / d);",
      "info" : "ReturnStatement[32111-32189]:ReturnStatement[32179-32257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33055-33120]:Block[33123-33188]"
    }, {
      "left" : "return FastMath.atan2(getImaginary(), getReal());",
      "right" : "return FastMath.atan2(getImaginary(), getReal());",
      "info" : "ReturnStatement[33065-33114]:ReturnStatement[33133-33182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34135-35292]:Block[34203-35360]"
    }, {
      "left" : "if (n <= 0)",
      "right" : "if (n <= 0)",
      "info" : "IfStatement[34146-34341]:IfStatement[34214-34409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34158-34341]:Block[34226-34409]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                    LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,\n                    n);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                    LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,\n                    n);",
      "info" : "ThrowStatement[34172-34331]:ThrowStatement[34240-34399]"
    }, {
      "left" : "List<Complex> result = new ArrayList<Complex>();",
      "right" : "List<Complex> result = new ArrayList<Complex>();",
      "info" : "VariableDeclarationStatement[34351-34399]:VariableDeclarationStatement[34419-34467]"
    }, {
      "left" : "if (isNaN)",
      "right" : "if (isNaN)",
      "info" : "IfStatement[34409-34487]:IfStatement[34477-34555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34420-34487]:Block[34488-34555]"
    }, {
      "left" : "result.add(NaN);",
      "right" : "result.add(NaN);",
      "info" : "ExpressionStatement[34434-34450]:ExpressionStatement[34502-34518]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[34463-34477]:ReturnStatement[34531-34545]"
    }, {
      "left" : "if (isInfinite())",
      "right" : "if (isInfinite())",
      "info" : "IfStatement[34497-34582]:IfStatement[34565-34650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34515-34582]:Block[34583-34650]"
    }, {
      "left" : "result.add(INF);",
      "right" : "result.add(INF);",
      "info" : "ExpressionStatement[34529-34545]:ExpressionStatement[34597-34613]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[34558-34572]:ReturnStatement[34626-34640]"
    }, {
      "left" : "final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);",
      "right" : "final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);",
      "info" : "VariableDeclarationStatement[34667-34724]:VariableDeclarationStatement[34735-34792]"
    }, {
      "left" : "final double nthPhi = getArgument()/n;",
      "right" : "final double nthPhi = getArgument()/n;",
      "info" : "VariableDeclarationStatement[34804-34842]:VariableDeclarationStatement[34872-34910]"
    }, {
      "left" : "final double slice = 2 * FastMath.PI / n;",
      "right" : "final double slice = 2 * FastMath.PI / n;",
      "info" : "VariableDeclarationStatement[34851-34892]:VariableDeclarationStatement[34919-34960]"
    }, {
      "left" : "double innerPart = nthPhi;",
      "right" : "double innerPart = nthPhi;",
      "info" : "VariableDeclarationStatement[34901-34927]:VariableDeclarationStatement[34969-34995]"
    }, {
      "left" : "for (int k = 0; k < n ; k++)",
      "right" : "for (int k = 0; k < n ; k++)",
      "info" : "ForStatement[34936-35262]:ForStatement[35004-35330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34965-35262]:Block[35033-35330]"
    }, {
      "left" : "final double realPart      = nthRootOfAbs *  FastMath.cos(innerPart);",
      "right" : "final double realPart      = nthRootOfAbs *  FastMath.cos(innerPart);",
      "info" : "VariableDeclarationStatement[35005-35074]:VariableDeclarationStatement[35073-35142]"
    }, {
      "left" : "final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);",
      "right" : "final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);",
      "info" : "VariableDeclarationStatement[35087-35156]:VariableDeclarationStatement[35155-35224]"
    }, {
      "left" : "result.add(createComplex(realPart, imaginaryPart));",
      "right" : "result.add(createComplex(realPart, imaginaryPart));",
      "info" : "ExpressionStatement[35169-35220]:ExpressionStatement[35237-35288]"
    }, {
      "left" : "innerPart += slice;",
      "right" : "innerPart += slice;",
      "info" : "ExpressionStatement[35233-35252]:ExpressionStatement[35301-35320]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[35272-35286]:ReturnStatement[35340-35354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35606-35666]:Block[35674-35734]"
    }, {
      "left" : "return new Complex(realPart, imaginaryPart);",
      "right" : "return new Complex(realPart, imaginaryPart);",
      "info" : "ReturnStatement[35616-35660]:ReturnStatement[35684-35728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35974-36028]:Block[36042-36096]"
    }, {
      "left" : "return createComplex(real, imaginary);",
      "right" : "return createComplex(real, imaginary);",
      "info" : "ReturnStatement[35984-36022]:ReturnStatement[36052-36090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36090-36140]:Block[36158-36208]"
    }, {
      "left" : "return ComplexField.getInstance();",
      "right" : "return ComplexField.getInstance();",
      "info" : "ReturnStatement[36100-36134]:ReturnStatement[36168-36202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36210-36269]:Block[36278-36337]"
    }, {
      "left" : "return \"(\" + real + \", \" + imaginary + \")\";",
      "right" : "return \"(\" + real + \", \" + imaginary + \")\";",
      "info" : "ReturnStatement[36220-36263]:ReturnStatement[36288-36331]"
    } ]
  },
  "interFileMappings" : { }
}