{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "TypeDeclaration[3894-53658]:TypeDeclaration[3894-53822]"
    }, {
      "left" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "right" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "info" : "FieldDeclaration[4400-4577]:FieldDeclaration[4400-4577]"
    }, {
      "left" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "right" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "info" : "FieldDeclaration[4581-4768]:FieldDeclaration[4581-4768]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "info" : "FieldDeclaration[4772-4951]:FieldDeclaration[4772-4951]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[4955-4995]:FieldDeclaration[4955-4995]"
    }, {
      "left" : "private final ErrorReporter typeParsingErrorReporter;",
      "right" : "private final ErrorReporter typeParsingErrorReporter;",
      "info" : "FieldDeclaration[4998-5051]:FieldDeclaration[4998-5051]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[5054-5092]:FieldDeclaration[5054-5092]"
    }, {
      "left" : "private final CodingConvention codingConvention;",
      "right" : "private final CodingConvention codingConvention;",
      "info" : "FieldDeclaration[5095-5143]:FieldDeclaration[5095-5143]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[5146-5188]:FieldDeclaration[5146-5188]"
    }, {
      "left" : "private List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "right" : "private List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "info" : "FieldDeclaration[5191-5263]:FieldDeclaration[5191-5263]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "TypeDeclaration[5267-5940]:TypeDeclaration[5267-5940]"
    }, {
      "left" : "final Node node;",
      "right" : "final Node node;",
      "info" : "FieldDeclaration[5446-5462]:FieldDeclaration[5446-5462]"
    }, {
      "left" : "final JSType type;",
      "right" : "final JSType type;",
      "info" : "FieldDeclaration[5467-5485]:FieldDeclaration[5467-5485]"
    }, {
      "left" : "DeferredSetType(Node node, JSType type)",
      "right" : "DeferredSetType(Node node, JSType type)",
      "info" : "MethodDeclaration[5491-5828]:MethodDeclaration[5491-5828]"
    }, {
      "left" : "void resolve(Scope scope)",
      "right" : "void resolve(Scope scope)",
      "info" : "MethodDeclaration[5834-5936]:MethodDeclaration[5834-5936]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[5944-6046]:MethodDeclaration[5944-6046]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "info" : "MethodDeclaration[6050-6388]:MethodDeclaration[6050-6388]"
    }, {
      "left" : "public Scope createScope(Node root, Scope parent)",
      "right" : "public Scope createScope(Node root, Scope parent)",
      "info" : "MethodDeclaration[6392-8145]:MethodDeclaration[6392-8145]"
    }, {
      "left" : "Scope createInitialScope(Node root)",
      "right" : "Scope createInitialScope(Node root)",
      "info" : "MethodDeclaration[8149-9893]:MethodDeclaration[8149-9893]"
    }, {
      "left" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "right" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "info" : "MethodDeclaration[9897-10201]:MethodDeclaration[9897-10201]"
    }, {
      "left" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "right" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "info" : "MethodDeclaration[10205-10365]:MethodDeclaration[10205-10365]"
    }, {
      "left" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "right" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "info" : "MethodDeclaration[10369-10488]:MethodDeclaration[10369-10488]"
    }, {
      "left" : "DiscoverEnums",
      "right" : "DiscoverEnums",
      "info" : "TypeDeclaration[10492-11355]:TypeDeclaration[10492-11355]"
    }, {
      "left" : "private final JSTypeRegistry registry;",
      "right" : "private final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[10565-10603]:FieldDeclaration[10565-10603]"
    }, {
      "left" : "DiscoverEnums(JSTypeRegistry registry)",
      "right" : "DiscoverEnums(JSTypeRegistry registry)",
      "info" : "MethodDeclaration[10609-10687]:MethodDeclaration[10609-10687]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "info" : "MethodDeclaration[10693-11351]:MethodDeclaration[10693-11351]"
    }, {
      "left" : "private static Node getPrototypePropertyOwner(Node n)",
      "right" : "private static Node getPrototypePropertyOwner(Node n)",
      "info" : "MethodDeclaration[11359-11997]:MethodDeclaration[11359-11997]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "TypeDeclaration[12001-31734]:TypeDeclaration[12001-31898]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[12092-12164]:FieldDeclaration[12092-12164]"
    }, {
      "left" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "right" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[12170-12254]:FieldDeclaration[12170-12254]"
    }, {
      "left" : "private String sourceName = null;",
      "right" : "private String sourceName = null;",
      "info" : "FieldDeclaration[12260-12355]:FieldDeclaration[12260-12355]"
    }, {
      "left" : "private AbstractScopeBuilder(Scope scope)",
      "right" : "private AbstractScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[12361-12436]:MethodDeclaration[12361-12436]"
    }, {
      "left" : "void setDeferredType(Node node, JSType type)",
      "right" : "void setDeferredType(Node node, JSType type)",
      "info" : "MethodDeclaration[12442-12555]:MethodDeclaration[12442-12555]"
    }, {
      "left" : "void resolveTypes()",
      "right" : "void resolveTypes()",
      "info" : "MethodDeclaration[12561-13061]:MethodDeclaration[12561-13061]"
    }, {
      "left" : "public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent)",
      "right" : "public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent)",
      "info" : "MethodDeclaration[13067-13603]:MethodDeclaration[13067-13603]"
    }, {
      "left" : "public abstract void visit(NodeTraversal t, Node n, Node parent);",
      "right" : "public abstract void visit(NodeTraversal t, Node n, Node parent);",
      "info" : "MethodDeclaration[13609-13688]:MethodDeclaration[13609-13688]"
    }, {
      "left" : "JSType getDeclaredTypeInAnnotation(\n        NodeTraversal t, Node node, JSDocInfo info)",
      "right" : "JSType getDeclaredTypeInAnnotation(\n        NodeTraversal t, Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[13694-14092]:MethodDeclaration[13694-14092]"
    }, {
      "left" : "JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "right" : "JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[14098-15773]:MethodDeclaration[14098-15773]"
    }, {
      "left" : "void define(Node n, Node parent)",
      "right" : "void define(Node n, Node parent)",
      "info" : "MethodDeclaration[15779-18911]:MethodDeclaration[15779-18911]"
    }, {
      "left" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "right" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "info" : "MethodDeclaration[18917-20656]:MethodDeclaration[18917-20656]"
    }, {
      "left" : "private FunctionType getFunctionType(String name,\n        Node rValue, JSDocInfo info, @Nullable Node lvalueNode)",
      "right" : "private FunctionType getFunctionType(String name,\n        Node rValue, JSDocInfo info, @Nullable Node lvalueNode)",
      "info" : "MethodDeclaration[20662-24925]:MethodDeclaration[20662-25089]"
    }, {
      "left" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "right" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "info" : "MethodDeclaration[24931-25758]:MethodDeclaration[25095-25922]"
    }, {
      "left" : "private EnumType getEnumType(String name, Node parent,\n        Node value, JSType elementsType)",
      "right" : "private EnumType getEnumType(String name, Node parent,\n        Node value, JSType elementsType)",
      "info" : "MethodDeclaration[25764-27979]:MethodDeclaration[25928-28143]"
    }, {
      "left" : "private void defineSlot(Node name, Node parent, JSType type)",
      "right" : "private void defineSlot(Node name, Node parent, JSType type)",
      "info" : "MethodDeclaration[27985-28509]:MethodDeclaration[28149-28673]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "info" : "MethodDeclaration[28515-31730]:MethodDeclaration[28679-31894]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "TypeDeclaration[31738-50470]:TypeDeclaration[31902-50634]"
    }, {
      "left" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "right" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "info" : "FieldDeclaration[31924-32078]:FieldDeclaration[32088-32242]"
    }, {
      "left" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "right" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[32084-32358]:FieldDeclaration[32248-32522]"
    }, {
      "left" : "private GlobalScopeBuilder(Scope scope)",
      "right" : "private GlobalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[32364-32431]:MethodDeclaration[32528-32595]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[32437-36840]:MethodDeclaration[32601-37004]"
    }, {
      "left" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "right" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "info" : "MethodDeclaration[36846-38779]:MethodDeclaration[37010-38943]"
    }, {
      "left" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "right" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "info" : "MethodDeclaration[38785-39901]:MethodDeclaration[38949-40065]"
    }, {
      "left" : "// TODO(nicksantos): Kill this.\n    private void checkForOldStyleTypedef(NodeTraversal t, Node candidate)",
      "right" : "// TODO(nicksantos): Kill this.\n    private void checkForOldStyleTypedef(NodeTraversal t, Node candidate)",
      "info" : "MethodDeclaration[39907-41057]:MethodDeclaration[40071-41221]"
    }, {
      "left" : "private void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "private void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[41063-45525]:MethodDeclaration[41227-45689]"
    }, {
      "left" : "private ObjectType getObjectSlot(String slotName)",
      "right" : "private ObjectType getObjectSlot(String slotName)",
      "info" : "MethodDeclaration[45531-46079]:MethodDeclaration[45695-46243]"
    }, {
      "left" : "private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info,\n        Node n, Node rhsValue)",
      "right" : "private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info,\n        Node n, Node rhsValue)",
      "info" : "MethodDeclaration[46085-46954]:MethodDeclaration[46249-47118]"
    }, {
      "left" : "private void resolveStubDeclarations()",
      "right" : "private void resolveStubDeclarations()",
      "info" : "MethodDeclaration[46960-48288]:MethodDeclaration[47124-48452]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "TypeDeclaration[48294-48700]:TypeDeclaration[48458-48864]"
    }, {
      "left" : "private final Node node;",
      "right" : "private final Node node;",
      "info" : "FieldDeclaration[48410-48434]:FieldDeclaration[48574-48598]"
    }, {
      "left" : "private final boolean isExtern;",
      "right" : "private final boolean isExtern;",
      "info" : "FieldDeclaration[48441-48472]:FieldDeclaration[48605-48636]"
    }, {
      "left" : "private final String ownerName;",
      "right" : "private final String ownerName;",
      "info" : "FieldDeclaration[48479-48510]:FieldDeclaration[48643-48674]"
    }, {
      "left" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "right" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "info" : "MethodDeclaration[48518-48694]:MethodDeclaration[48682-48858]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "TypeDeclaration[48706-50441]:TypeDeclaration[48870-50605]"
    }, {
      "left" : "private final ObjectType thisType;",
      "right" : "private final ObjectType thisType;",
      "info" : "FieldDeclaration[48918-48952]:FieldDeclaration[49082-49116]"
    }, {
      "left" : "CollectProperties(ObjectType thisType)",
      "right" : "CollectProperties(ObjectType thisType)",
      "info" : "MethodDeclaration[48960-49042]:MethodDeclaration[49124-49206]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[49050-49448]:MethodDeclaration[49214-49612]"
    }, {
      "left" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo)",
      "right" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo)",
      "info" : "MethodDeclaration[49456-50435]:MethodDeclaration[49620-50599]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "TypeDeclaration[50500-53631]:TypeDeclaration[50664-53795]"
    }, {
      "left" : "private LocalScopeBuilder(Scope scope)",
      "right" : "private LocalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[50675-50808]:MethodDeclaration[50839-50972]"
    }, {
      "left" : "void build()",
      "right" : "void build()",
      "info" : "MethodDeclaration[50814-50962]:MethodDeclaration[50978-51126]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[50968-51820]:MethodDeclaration[51132-51984]"
    }, {
      "left" : "private void handleFunctionInputs(Node fnNode)",
      "right" : "private void handleFunctionInputs(Node fnNode)",
      "info" : "MethodDeclaration[51826-52691]:MethodDeclaration[51990-52855]"
    }, {
      "left" : "private void declareArguments(Node functionNode)",
      "right" : "private void declareArguments(Node functionNode)",
      "info" : "MethodDeclaration[52697-53603]:MethodDeclaration[52861-53767]"
    } ],
    "mappings" : [
 {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[4341-4346]:Modifier[4341-4346]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4347-4352]:TYPE_DECLARATION_KIND[4347-4352]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[4353-4370]:SimpleName[4353-4370]"
    }, {
      "left" : "ScopeCreator",
      "right" : "ScopeCreator",
      "info" : "SimpleType[4382-4394]:SimpleType[4382-4394]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5410-5417]:Modifier[5410-5417]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5418-5423]:TYPE_DECLARATION_KIND[5418-5423]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[5424-5439]:SimpleName[5424-5439]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[5491-5506]:SimpleName[5491-5506]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[5507-5516]:SingleVariableDeclaration[5507-5516]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[5518-5529]:SingleVariableDeclaration[5518-5529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5531-5828]:Block[5531-5828]"
    }, {
      "left" : "Preconditions.checkNotNull(node);",
      "right" : "Preconditions.checkNotNull(node);",
      "info" : "ExpressionStatement[5539-5572]:ExpressionStatement[5539-5572]"
    }, {
      "left" : "Preconditions.checkNotNull(type);",
      "right" : "Preconditions.checkNotNull(type);",
      "info" : "ExpressionStatement[5579-5612]:ExpressionStatement[5579-5612]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[5619-5636]:ExpressionStatement[5619-5636]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[5643-5660]:ExpressionStatement[5643-5660]"
    }, {
      "left" : "node.setJSType(type);",
      "right" : "node.setJSType(type);",
      "info" : "ExpressionStatement[5801-5822]:ExpressionStatement[5801-5822]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5834-5838]:PrimitiveType[5834-5838]"
    }, {
      "left" : "resolve",
      "right" : "resolve",
      "info" : "SimpleName[5839-5846]:SimpleName[5839-5846]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[5847-5858]:SingleVariableDeclaration[5847-5858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5860-5936]:Block[5860-5936]"
    }, {
      "left" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "right" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "info" : "ExpressionStatement[5868-5930]:ExpressionStatement[5868-5930]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[5944-5961]:SimpleName[5944-5961]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[5962-5987]:SingleVariableDeclaration[5962-5987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5989-6046]:Block[5989-6046]"
    }, {
      "left" : "this(compiler, compiler.getCodingConvention());",
      "right" : "this(compiler, compiler.getCodingConvention());",
      "info" : "ConstructorInvocation[5995-6042]:ConstructorInvocation[5995-6042]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[6050-6067]:SimpleName[6050-6067]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[6068-6093]:SingleVariableDeclaration[6068-6093]"
    }, {
      "left" : "CodingConvention codingConvention",
      "right" : "CodingConvention codingConvention",
      "info" : "SingleVariableDeclaration[6101-6134]:SingleVariableDeclaration[6101-6134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6136-6388]:Block[6136-6388]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[6142-6167]:ExpressionStatement[6142-6167]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[6172-6217]:ExpressionStatement[6172-6217]"
    }, {
      "left" : "this.codingConvention = codingConvention;",
      "right" : "this.codingConvention = codingConvention;",
      "info" : "ExpressionStatement[6222-6263]:ExpressionStatement[6222-6263]"
    }, {
      "left" : "this.typeRegistry = compiler.getTypeRegistry();",
      "right" : "this.typeRegistry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[6268-6315]:ExpressionStatement[6268-6315]"
    }, {
      "left" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "right" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "info" : "ExpressionStatement[6320-6384]:ExpressionStatement[6320-6384]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6529-6535]:Modifier[6529-6535]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[6536-6541]:SimpleType[6536-6541]"
    }, {
      "left" : "createScope",
      "right" : "createScope",
      "info" : "SimpleName[6542-6553]:SimpleName[6542-6553]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[6554-6563]:SingleVariableDeclaration[6554-6563]"
    }, {
      "left" : "Scope parent",
      "right" : "Scope parent",
      "info" : "SingleVariableDeclaration[6565-6577]:SingleVariableDeclaration[6565-6577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6579-8145]:Block[6579-8145]"
    }, {
      "left" : "Scope newScope = null;",
      "right" : "Scope newScope = null;",
      "info" : "VariableDeclarationStatement[6774-6796]:VariableDeclarationStatement[6774-6796]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[6801-8120]:IfStatement[6801-8120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6821-7930]:Block[6821-7930]"
    }, {
      "left" : "newScope = createInitialScope(root);",
      "right" : "newScope = createInitialScope(root);",
      "info" : "ExpressionStatement[6880-6916]:ExpressionStatement[6880-6916]"
    }, {
      "left" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(newScope);",
      "right" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[6924-6991]:VariableDeclarationStatement[6924-6991]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "info" : "ExpressionStatement[6998-7051]:ExpressionStatement[6998-7051]"
    }, {
      "left" : "scopeBuilder.resolveStubDeclarations();",
      "right" : "scopeBuilder.resolveStubDeclarations();",
      "info" : "ExpressionStatement[7058-7097]:ExpressionStatement[7058-7097]"
    }, {
      "left" : "scopeBuilder.resolveTypes();",
      "right" : "scopeBuilder.resolveTypes();",
      "info" : "ExpressionStatement[7104-7132]:ExpressionStatement[7104-7132]"
    }, {
      "left" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "right" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "info" : "EnhancedForStatement[7308-7800]:EnhancedForStatement[7308-7800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7366-7800]:Block[7366-7800]"
    }, {
      "left" : "JSType type = functionNode.getJSType();",
      "right" : "JSType type = functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[7376-7415]:VariableDeclarationStatement[7376-7415]"
    }, {
      "left" : "if (type != null && type instanceof FunctionType)",
      "right" : "if (type != null && type instanceof FunctionType)",
      "info" : "IfStatement[7424-7792]:IfStatement[7424-7792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7474-7792]:Block[7474-7792]"
    }, {
      "left" : "FunctionType fnType = (FunctionType) type;",
      "right" : "FunctionType fnType = (FunctionType) type;",
      "info" : "VariableDeclarationStatement[7486-7528]:VariableDeclarationStatement[7486-7528]"
    }, {
      "left" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "right" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[7539-7586]:VariableDeclarationStatement[7539-7586]"
    }, {
      "left" : "if (!fnThisType.isUnknownType())",
      "right" : "if (!fnThisType.isUnknownType())",
      "info" : "IfStatement[7597-7782]:IfStatement[7597-7782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7630-7782]:Block[7630-7782]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n                scopeBuilder.new CollectProperties(fnThisType));",
      "right" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n                scopeBuilder.new CollectProperties(fnThisType));",
      "info" : "ExpressionStatement[7644-7770]:ExpressionStatement[7644-7770]"
    }, {
      "left" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes);",
      "right" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes);",
      "info" : "ExpressionStatement[7808-7924]:ExpressionStatement[7808-7924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7936-8120]:Block[7936-8120]"
    }, {
      "left" : "newScope = new Scope(parent, root);",
      "right" : "newScope = new Scope(parent, root);",
      "info" : "ExpressionStatement[7944-7979]:ExpressionStatement[7944-7979]"
    }, {
      "left" : "LocalScopeBuilder scopeBuilder = new LocalScopeBuilder(newScope);",
      "right" : "LocalScopeBuilder scopeBuilder = new LocalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[7986-8051]:VariableDeclarationStatement[7986-8051]"
    }, {
      "left" : "scopeBuilder.build();",
      "right" : "scopeBuilder.build();",
      "info" : "ExpressionStatement[8058-8079]:ExpressionStatement[8058-8079]"
    }, {
      "left" : "scopeBuilder.resolveTypes();",
      "right" : "scopeBuilder.resolveTypes();",
      "info" : "ExpressionStatement[8086-8114]:ExpressionStatement[8086-8114]"
    }, {
      "left" : "return newScope;",
      "right" : "return newScope;",
      "info" : "ReturnStatement[8125-8141]:ReturnStatement[8125-8141]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[8277-8295]:MarkerAnnotation[8277-8295]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[8298-8303]:SimpleType[8298-8303]"
    }, {
      "left" : "createInitialScope",
      "right" : "createInitialScope",
      "info" : "SimpleName[8304-8322]:SimpleName[8304-8322]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[8323-8332]:SingleVariableDeclaration[8323-8332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8334-9893]:Block[8334-9893]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new DiscoverEnums(typeRegistry));",
      "right" : "NodeTraversal.traverse(compiler, root, new DiscoverEnums(typeRegistry));",
      "info" : "ExpressionStatement[8341-8413]:ExpressionStatement[8341-8413]"
    }, {
      "left" : "Scope s = new Scope(root, compiler);",
      "right" : "Scope s = new Scope(root, compiler);",
      "info" : "VariableDeclarationStatement[8419-8455]:VariableDeclarationStatement[8419-8455]"
    }, {
      "left" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8460-8510]:ExpressionStatement[8460-8510]"
    }, {
      "left" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8515-8574]:ExpressionStatement[8515-8574]"
    }, {
      "left" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8579-8628]:ExpressionStatement[8579-8628]"
    }, {
      "left" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8633-8683]:ExpressionStatement[8633-8683]"
    }, {
      "left" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8688-8743]:ExpressionStatement[8688-8743]"
    }, {
      "left" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8748-8801]:ExpressionStatement[8748-8801]"
    }, {
      "left" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8806-8864]:ExpressionStatement[8806-8864]"
    }, {
      "left" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8869-8920]:ExpressionStatement[8869-8920]"
    }, {
      "left" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8925-8981]:ExpressionStatement[8925-8981]"
    }, {
      "left" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8986-9046]:ExpressionStatement[8986-9046]"
    }, {
      "left" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9051-9102]:ExpressionStatement[9051-9102]"
    }, {
      "left" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9107-9165]:ExpressionStatement[9107-9165]"
    }, {
      "left" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9170-9227]:ExpressionStatement[9170-9227]"
    }, {
      "left" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9232-9287]:ExpressionStatement[9232-9287]"
    }, {
      "left" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[9292-9346]:ExpressionStatement[9292-9346]"
    }, {
      "left" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "right" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "info" : "ExpressionStatement[9351-9401]:ExpressionStatement[9351-9401]"
    }, {
      "left" : "declareNativeValueType(s, \"goog.typedef\", NO_TYPE);",
      "right" : "declareNativeValueType(s, \"goog.typedef\", NO_TYPE);",
      "info" : "ExpressionStatement[9586-9637]:ExpressionStatement[9586-9637]"
    }, {
      "left" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "right" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "info" : "ExpressionStatement[9815-9874]:ExpressionStatement[9815-9874]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[9880-9889]:ReturnStatement[9880-9889]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9897-9904]:Modifier[9897-9904]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9905-9909]:PrimitiveType[9905-9909]"
    }, {
      "left" : "declareNativeFunctionType",
      "right" : "declareNativeFunctionType",
      "info" : "SimpleName[9910-9935]:SimpleName[9910-9935]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[9936-9947]:SingleVariableDeclaration[9936-9947]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[9949-9965]:SingleVariableDeclaration[9949-9965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9967-10201]:Block[9967-10201]"
    }, {
      "left" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "right" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "info" : "VariableDeclarationStatement[9973-10030]:VariableDeclarationStatement[9973-10030]"
    }, {
      "left" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "right" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "info" : "ExpressionStatement[10035-10103]:ExpressionStatement[10035-10103]"
    }, {
      "left" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "right" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "info" : "ExpressionStatement[10108-10197]:ExpressionStatement[10108-10197]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10205-10212]:Modifier[10205-10212]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10213-10217]:PrimitiveType[10213-10217]"
    }, {
      "left" : "declareNativeValueType",
      "right" : "declareNativeValueType",
      "info" : "SimpleName[10218-10240]:SimpleName[10218-10240]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[10241-10252]:SingleVariableDeclaration[10241-10252]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[10254-10265]:SingleVariableDeclaration[10254-10265]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[10273-10289]:SingleVariableDeclaration[10273-10289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10291-10365]:Block[10291-10365]"
    }, {
      "left" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "right" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "info" : "ExpressionStatement[10297-10361]:ExpressionStatement[10297-10361]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10369-10376]:Modifier[10369-10376]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10377-10381]:PrimitiveType[10377-10381]"
    }, {
      "left" : "declareNativeType",
      "right" : "declareNativeType",
      "info" : "SimpleName[10382-10399]:SimpleName[10382-10399]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[10400-10411]:SingleVariableDeclaration[10400-10411]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[10413-10424]:SingleVariableDeclaration[10413-10424]"
    }, {
      "left" : "JSType t",
      "right" : "JSType t",
      "info" : "SingleVariableDeclaration[10426-10434]:SingleVariableDeclaration[10426-10434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10436-10488]:Block[10436-10488]"
    }, {
      "left" : "scope.declare(name, null, t, null, false);",
      "right" : "scope.declare(name, null, t, null, false);",
      "info" : "ExpressionStatement[10442-10484]:ExpressionStatement[10442-10484]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10492-10499]:Modifier[10492-10499]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10500-10506]:Modifier[10500-10506]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[10507-10512]:TYPE_DECLARATION_KIND[10507-10512]"
    }, {
      "left" : "DiscoverEnums",
      "right" : "DiscoverEnums",
      "info" : "SimpleName[10513-10526]:SimpleName[10513-10526]"
    }, {
      "left" : "AbstractShallowCallback",
      "right" : "AbstractShallowCallback",
      "info" : "SimpleType[10535-10558]:SimpleType[10535-10558]"
    }, {
      "left" : "DiscoverEnums",
      "right" : "DiscoverEnums",
      "info" : "SimpleName[10609-10622]:SimpleName[10609-10622]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[10623-10646]:SingleVariableDeclaration[10623-10646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10648-10687]:Block[10648-10687]"
    }, {
      "left" : "this.registry = registry;",
      "right" : "this.registry = registry;",
      "info" : "ExpressionStatement[10656-10681]:ExpressionStatement[10656-10681]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10693-10702]:MarkerAnnotation[10693-10702]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10707-10713]:Modifier[10707-10713]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10714-10718]:PrimitiveType[10714-10718]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[10719-10724]:SimpleName[10719-10724]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[10725-10740]:SingleVariableDeclaration[10725-10740]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[10742-10751]:SingleVariableDeclaration[10742-10751]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[10753-10764]:SingleVariableDeclaration[10753-10764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10766-11351]:Block[10766-11351]"
    }, {
      "left" : "Node nameNode = null;",
      "right" : "Node nameNode = null;",
      "info" : "VariableDeclarationStatement[10774-10795]:VariableDeclarationStatement[10774-10795]"
    }, {
      "left" : "switch (node.getType()) {\n        case Token.NAME:\n          nameNode = node;\n          break;\n        case Token.VAR:\n          if (node.hasOneChild()) {\n            nameNode = node.getFirstChild();\n          }\n          break;\n        case Token.ASSIGN:\n          nameNode = node.getFirstChild();\n          break;\n      }",
      "right" : "switch (node.getType()) {\n        case Token.NAME:\n          nameNode = node;\n          break;\n        case Token.VAR:\n          if (node.hasOneChild()) {\n            nameNode = node.getFirstChild();\n          }\n          break;\n        case Token.ASSIGN:\n          nameNode = node.getFirstChild();\n          break;\n      }",
      "info" : "SwitchStatement[10802-11125]:SwitchStatement[10802-11125]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[10836-10852]:SwitchCase[10836-10852]"
    }, {
      "left" : "nameNode = node;",
      "right" : "nameNode = node;",
      "info" : "ExpressionStatement[10863-10879]:ExpressionStatement[10863-10879]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10890-10896]:BreakStatement[10890-10896]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[10905-10920]:SwitchCase[10905-10920]"
    }, {
      "left" : "if (node.hasOneChild())",
      "right" : "if (node.hasOneChild())",
      "info" : "IfStatement[10931-11013]:IfStatement[10931-11013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10955-11013]:Block[10955-11013]"
    }, {
      "left" : "nameNode = node.getFirstChild();",
      "right" : "nameNode = node.getFirstChild();",
      "info" : "ExpressionStatement[10969-11001]:ExpressionStatement[10969-11001]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11024-11030]:BreakStatement[11024-11030]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[11039-11057]:SwitchCase[11039-11057]"
    }, {
      "left" : "nameNode = node.getFirstChild();",
      "right" : "nameNode = node.getFirstChild();",
      "info" : "ExpressionStatement[11068-11100]:ExpressionStatement[11068-11100]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11111-11117]:BreakStatement[11111-11117]"
    }, {
      "left" : "if (nameNode != null)",
      "right" : "if (nameNode != null)",
      "info" : "IfStatement[11133-11345]:IfStatement[11133-11345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11155-11345]:Block[11155-11345]"
    }, {
      "left" : "JSDocInfo info = node.getJSDocInfo();",
      "right" : "JSDocInfo info = node.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[11165-11202]:VariableDeclarationStatement[11165-11202]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[11211-11337]:IfStatement[11211-11337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11260-11337]:Block[11260-11337]"
    }, {
      "left" : "registry.identifyEnumName(nameNode.getQualifiedName());",
      "right" : "registry.identifyEnumName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[11272-11327]:ExpressionStatement[11272-11327]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11565-11572]:Modifier[11565-11572]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11573-11579]:Modifier[11573-11579]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[11580-11584]:SimpleType[11580-11584]"
    }, {
      "left" : "getPrototypePropertyOwner",
      "right" : "getPrototypePropertyOwner",
      "info" : "SimpleName[11585-11610]:SimpleName[11585-11610]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11611-11617]:SingleVariableDeclaration[11611-11617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11619-11997]:Block[11619-11997]"
    }, {
      "left" : "if (n.getType() == Token.GETPROP)",
      "right" : "if (n.getType() == Token.GETPROP)",
      "info" : "IfStatement[11625-11976]:IfStatement[11625-11976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11659-11976]:Block[11659-11976]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[11667-11703]:VariableDeclarationStatement[11667-11703]"
    }, {
      "left" : "if (firstChild.getType() == Token.GETPROP &&\n          firstChild.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (firstChild.getType() == Token.GETPROP &&\n          firstChild.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[11710-11970]:IfStatement[11710-11970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11824-11970]:Block[11824-11970]"
    }, {
      "left" : "Node maybeOwner = firstChild.getFirstChild();",
      "right" : "Node maybeOwner = firstChild.getFirstChild();",
      "info" : "VariableDeclarationStatement[11834-11879]:VariableDeclarationStatement[11834-11879]"
    }, {
      "left" : "if (maybeOwner.isQualifiedName())",
      "right" : "if (maybeOwner.isQualifiedName())",
      "info" : "IfStatement[11888-11962]:IfStatement[11888-11962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11922-11962]:Block[11922-11962]"
    }, {
      "left" : "return maybeOwner;",
      "right" : "return maybeOwner;",
      "info" : "ReturnStatement[11934-11952]:ReturnStatement[11934-11952]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11981-11993]:ReturnStatement[11981-11993]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12001-12008]:Modifier[12001-12008]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[12009-12017]:Modifier[12009-12017]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[12018-12023]:TYPE_DECLARATION_KIND[12018-12023]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[12024-12044]:SimpleName[12024-12044]"
    }, {
      "left" : "NodeTraversal.Callback",
      "right" : "NodeTraversal.Callback",
      "info" : "SimpleType[12062-12084]:SimpleType[12062-12084]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12361-12368]:Modifier[12361-12368]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[12369-12389]:SimpleName[12369-12389]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[12390-12401]:SingleVariableDeclaration[12390-12401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12403-12436]:Block[12403-12436]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[12411-12430]:ExpressionStatement[12411-12430]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12442-12446]:PrimitiveType[12442-12446]"
    }, {
      "left" : "setDeferredType",
      "right" : "setDeferredType",
      "info" : "SimpleName[12447-12462]:SimpleName[12447-12462]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[12463-12472]:SingleVariableDeclaration[12463-12472]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[12474-12485]:SingleVariableDeclaration[12474-12485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12487-12555]:Block[12487-12555]"
    }, {
      "left" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "right" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "info" : "ExpressionStatement[12495-12549]:ExpressionStatement[12495-12549]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12561-12565]:PrimitiveType[12561-12565]"
    }, {
      "left" : "resolveTypes",
      "right" : "resolveTypes",
      "info" : "SimpleName[12566-12578]:SimpleName[12566-12578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12581-13061]:Block[12581-13061]"
    }, {
      "left" : "for (DeferredSetType deferred : deferredSetTypes)",
      "right" : "for (DeferredSetType deferred : deferredSetTypes)",
      "info" : "EnhancedForStatement[12638-12730]:EnhancedForStatement[12638-12730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12688-12730]:Block[12688-12730]"
    }, {
      "left" : "deferred.resolve(scope);",
      "right" : "deferred.resolve(scope);",
      "info" : "ExpressionStatement[12698-12722]:ExpressionStatement[12698-12722]"
    }, {
      "left" : "Iterator<Var> vars = scope.getVars();",
      "right" : "Iterator<Var> vars = scope.getVars();",
      "info" : "VariableDeclarationStatement[12793-12830]:VariableDeclarationStatement[12793-12830]"
    }, {
      "left" : "while (vars.hasNext())",
      "right" : "while (vars.hasNext())",
      "info" : "WhileStatement[12837-12928]:WhileStatement[12837-12928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12860-12928]:Block[12860-12928]"
    }, {
      "left" : "vars.next().resolveType(typeParsingErrorReporter);",
      "right" : "vars.next().resolveType(typeParsingErrorReporter);",
      "info" : "ExpressionStatement[12870-12920]:ExpressionStatement[12870-12920]"
    }, {
      "left" : "typeRegistry.resolveTypesInScope(scope);",
      "right" : "typeRegistry.resolveTypesInScope(scope);",
      "info" : "ExpressionStatement[13015-13055]:ExpressionStatement[13015-13055]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13067-13076]:MarkerAnnotation[13067-13076]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13081-13087]:Modifier[13081-13087]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[13088-13093]:Modifier[13088-13093]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13094-13101]:PrimitiveType[13094-13101]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[13102-13116]:SimpleName[13102-13116]"
    }, {
      "left" : "NodeTraversal nodeTraversal",
      "right" : "NodeTraversal nodeTraversal",
      "info" : "SingleVariableDeclaration[13117-13144]:SingleVariableDeclaration[13117-13144]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13146-13152]:SingleVariableDeclaration[13146-13152]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[13162-13173]:SingleVariableDeclaration[13162-13173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13175-13603]:Block[13175-13603]"
    }, {
      "left" : "if (n.getType() == Token.FUNCTION ||\n          n.getType() == Token.SCRIPT)",
      "right" : "if (n.getType() == Token.FUNCTION ||\n          n.getType() == Token.SCRIPT)",
      "info" : "IfStatement[13183-13331]:IfStatement[13183-13331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13259-13331]:Block[13259-13331]"
    }, {
      "left" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "right" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "info" : "ExpressionStatement[13269-13323]:ExpressionStatement[13269-13323]"
    }, {
      "left" : "return parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "right" : "return parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "info" : "ReturnStatement[13463-13597]:ReturnStatement[13463-13597]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13609-13618]:MarkerAnnotation[13609-13618]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13623-13629]:Modifier[13623-13629]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[13630-13638]:Modifier[13630-13638]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13639-13643]:PrimitiveType[13639-13643]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[13644-13649]:SimpleName[13644-13649]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[13650-13665]:SingleVariableDeclaration[13650-13665]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13667-13673]:SingleVariableDeclaration[13667-13673]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[13675-13686]:SingleVariableDeclaration[13675-13686]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[13924-13930]:SimpleType[13924-13930]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[13931-13958]:SimpleName[13931-13958]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[13968-13983]:SingleVariableDeclaration[13968-13983]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[13985-13994]:SingleVariableDeclaration[13985-13994]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[13996-14010]:SingleVariableDeclaration[13996-14010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14012-14092]:Block[14012-14092]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(t.getSourceName(), node, info);",
      "right" : "return getDeclaredTypeInAnnotation(t.getSourceName(), node, info);",
      "info" : "ReturnStatement[14020-14086]:ReturnStatement[14020-14086]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[14098-14104]:SimpleType[14098-14104]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[14105-14132]:SimpleName[14105-14132]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[14133-14150]:SingleVariableDeclaration[14133-14150]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[14160-14169]:SingleVariableDeclaration[14160-14169]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[14171-14185]:SingleVariableDeclaration[14171-14185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14187-15773]:Block[14187-15773]"
    }, {
      "left" : "JSType jsType = null;",
      "right" : "JSType jsType = null;",
      "info" : "VariableDeclarationStatement[14195-14216]:VariableDeclarationStatement[14195-14216]"
    }, {
      "left" : "Node objNode = node.getType() == Token.GETPROP ?\n          node.getFirstChild() : null;",
      "right" : "Node objNode = node.getType() == Token.GETPROP ?\n          node.getFirstChild() : null;",
      "info" : "VariableDeclarationStatement[14223-14310]:VariableDeclarationStatement[14223-14310]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[14317-15746]:IfStatement[14317-15746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14335-15746]:Block[14335-15746]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[14345-15738]:IfStatement[14345-15738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14365-14441]:Block[14365-14441]"
    }, {
      "left" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "right" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[14377-14431]:ExpressionStatement[14377-14431]"
    }, {
      "left" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "right" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "info" : "IfStatement[14447-15738]:IfStatement[14447-15738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14504-15738]:Block[14504-15738]"
    }, {
      "left" : "String fnName = node.getQualifiedName();",
      "right" : "String fnName = node.getQualifiedName();",
      "info" : "VariableDeclarationStatement[14516-14556]:VariableDeclarationStatement[14516-14556]"
    }, {
      "left" : "if (info.isConstructor() && typeRegistry.getType(fnName) != null)",
      "right" : "if (info.isConstructor() && typeRegistry.getType(fnName) != null)",
      "info" : "IfStatement[14624-14728]:IfStatement[14624-14728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14690-14728]:Block[14690-14728]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14704-14716]:ReturnStatement[14704-14716]"
    }, {
      "left" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(\n                  fnName, compiler, node, sourceName, scope)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferParameterTypes(info)\n              .inferInheritance(info);",
      "right" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(\n                  fnName, compiler, node, sourceName, scope)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferParameterTypes(info)\n              .inferInheritance(info);",
      "info" : "VariableDeclarationStatement[14740-15029]:VariableDeclarationStatement[14740-15029]"
    }, {
      "left" : "boolean searchedForThisType = false;",
      "right" : "boolean searchedForThisType = false;",
      "info" : "VariableDeclarationStatement[15078-15114]:VariableDeclarationStatement[15078-15114]"
    }, {
      "left" : "if (objNode != null)",
      "right" : "if (objNode != null)",
      "info" : "IfStatement[15125-15575]:IfStatement[15125-15575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15146-15575]:Block[15146-15575]"
    }, {
      "left" : "if (objNode.getType() == Token.GETPROP &&\n                objNode.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (objNode.getType() == Token.GETPROP &&\n                objNode.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[15160-15563]:IfStatement[15160-15563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15274-15399]:Block[15274-15399]"
    }, {
      "left" : "builder.inferThisType(info, objNode.getFirstChild());",
      "right" : "builder.inferThisType(info, objNode.getFirstChild());",
      "info" : "ExpressionStatement[15290-15343]:ExpressionStatement[15290-15343]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[15358-15385]:ExpressionStatement[15358-15385]"
    }, {
      "left" : "if (objNode.getType() == Token.THIS)",
      "right" : "if (objNode.getType() == Token.THIS)",
      "info" : "IfStatement[15405-15563]:IfStatement[15405-15563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15442-15563]:Block[15442-15563]"
    }, {
      "left" : "builder.inferThisType(info, objNode.getJSType());",
      "right" : "builder.inferThisType(info, objNode.getJSType());",
      "info" : "ExpressionStatement[15458-15507]:ExpressionStatement[15458-15507]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[15522-15549]:ExpressionStatement[15522-15549]"
    }, {
      "left" : "if (!searchedForThisType)",
      "right" : "if (!searchedForThisType)",
      "info" : "IfStatement[15587-15680]:IfStatement[15587-15680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15613-15680]:Block[15613-15680]"
    }, {
      "left" : "builder.inferThisType(info, (Node) null);",
      "right" : "builder.inferThisType(info, (Node) null);",
      "info" : "ExpressionStatement[15627-15668]:ExpressionStatement[15627-15668]"
    }, {
      "left" : "jsType = builder.buildAndRegister();",
      "right" : "jsType = builder.buildAndRegister();",
      "info" : "ExpressionStatement[15692-15728]:ExpressionStatement[15692-15728]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[15753-15767]:ReturnStatement[15753-15767]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16269-16273]:PrimitiveType[16269-16273]"
    }, {
      "left" : "define",
      "right" : "define",
      "info" : "SimpleName[16274-16280]:SimpleName[16274-16280]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16281-16287]:SingleVariableDeclaration[16281-16287]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[16289-16300]:SingleVariableDeclaration[16289-16300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16302-18911]:Block[16302-18911]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[16310-16355]:ExpressionStatement[16310-16355]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[16363-16397]:VariableDeclarationStatement[16363-16397]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.CATCH:\n          Node catchName = n.getFirstChild();\n          defineSlot(catchName, n, null);\n          break;\n\n        case Token.VAR:\n          if (n.getChildCount() > 1) {\n            if (info != null) {\n              // multiple children\n              compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));\n            }\n            for (Node name : n.children()) {\n              defineName(name, n, parent, name.getJSDocInfo());\n            }\n          } else {\n            Node name = n.getFirstChild();\n            defineName(name, n, parent,\n                (info != null) ? info : name.getJSDocInfo());\n          }\n          break;\n\n        case Token.FUNCTION:\n          int parentType = parent.getType();\n          Preconditions.checkState(\n              (scope.isLocal() || parentType != Token.ASSIGN) &&\n              parentType != Token.NAME,\n              \"function defined as standalone function when it is being \" +\n              \"assigned\");\n          String functionName = n.getFirstChild().getString();\n          FunctionType functionType = getFunctionType(functionName, n, info,\n              null);\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineSlot(n.getFirstChild(), n, functionType);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // TODO(nicksantos): We should support direct assignment to a\n          // prototype, as in:\n          // Foo.prototype = {\n          //   a: function() { ... },\n          //   b: function() { ... }\n          // };\n          // Right now (6/23/08), we understand most of this syntax, but we\n          // don't tie the \"a\" and \"b\" methods to the context of Foo.\n\n          Node rvalue = n.getLastChild();\n          Node lvalue = n.getFirstChild();\n          info = (info != null) ? info : rvalue.getJSDocInfo();\n          if (rvalue.getType() == Token.FUNCTION ||\n              info != null && info.isConstructor()) {\n            getFunctionType(lvalue.getQualifiedName(), rvalue, info,\n                lvalue);\n          } else if (info != null && info.hasEnumParameterType()) {\n            JSType type = getEnumType(lvalue.getQualifiedName(), n, rvalue,\n                info.getEnumParameterType().evaluate(scope, typeRegistry));\n            if (type != null) {\n              setDeferredType(lvalue, type);\n            }\n          }\n          break;\n\n        default:\n          throw new IllegalStateException(Integer.toString(n.getType()));\n      }",
      "right" : "switch (n.getType()) {\n        case Token.CATCH:\n          Node catchName = n.getFirstChild();\n          defineSlot(catchName, n, null);\n          break;\n\n        case Token.VAR:\n          if (n.getChildCount() > 1) {\n            if (info != null) {\n              // multiple children\n              compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));\n            }\n            for (Node name : n.children()) {\n              defineName(name, n, parent, name.getJSDocInfo());\n            }\n          } else {\n            Node name = n.getFirstChild();\n            defineName(name, n, parent,\n                (info != null) ? info : name.getJSDocInfo());\n          }\n          break;\n\n        case Token.FUNCTION:\n          int parentType = parent.getType();\n          Preconditions.checkState(\n              (scope.isLocal() || parentType != Token.ASSIGN) &&\n              parentType != Token.NAME,\n              \"function defined as standalone function when it is being \" +\n              \"assigned\");\n          String functionName = n.getFirstChild().getString();\n          FunctionType functionType = getFunctionType(functionName, n, info,\n              null);\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineSlot(n.getFirstChild(), n, functionType);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // TODO(nicksantos): We should support direct assignment to a\n          // prototype, as in:\n          // Foo.prototype = {\n          //   a: function() { ... },\n          //   b: function() { ... }\n          // };\n          // Right now (6/23/08), we understand most of this syntax, but we\n          // don't tie the \"a\" and \"b\" methods to the context of Foo.\n\n          Node rvalue = n.getLastChild();\n          Node lvalue = n.getFirstChild();\n          info = (info != null) ? info : rvalue.getJSDocInfo();\n          if (rvalue.getType() == Token.FUNCTION ||\n              info != null && info.isConstructor()) {\n            getFunctionType(lvalue.getQualifiedName(), rvalue, info,\n                lvalue);\n          } else if (info != null && info.hasEnumParameterType()) {\n            JSType type = getEnumType(lvalue.getQualifiedName(), n, rvalue,\n                info.getEnumParameterType().evaluate(scope, typeRegistry));\n            if (type != null) {\n              setDeferredType(lvalue, type);\n            }\n          }\n          break;\n\n        default:\n          throw new IllegalStateException(Integer.toString(n.getType()));\n      }",
      "info" : "SwitchStatement[16404-18905]:SwitchStatement[16404-18905]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[16435-16452]:SwitchCase[16435-16452]"
    }, {
      "left" : "Node catchName = n.getFirstChild();",
      "right" : "Node catchName = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[16463-16498]:VariableDeclarationStatement[16463-16498]"
    }, {
      "left" : "defineSlot(catchName, n, null);",
      "right" : "defineSlot(catchName, n, null);",
      "info" : "ExpressionStatement[16509-16540]:ExpressionStatement[16509-16540]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16551-16557]:BreakStatement[16551-16557]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[16567-16582]:SwitchCase[16567-16582]"
    }, {
      "left" : "if (n.getChildCount() > 1)",
      "right" : "if (n.getChildCount() > 1)",
      "info" : "IfStatement[16593-17079]:IfStatement[16593-17079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16620-16915]:Block[16620-16915]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[16634-16780]:IfStatement[16634-16780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16652-16780]:Block[16652-16780]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "right" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "info" : "ExpressionStatement[16703-16766]:ExpressionStatement[16703-16766]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[16793-16903]:EnhancedForStatement[16793-16903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16824-16903]:Block[16824-16903]"
    }, {
      "left" : "defineName(name, n, parent, name.getJSDocInfo());",
      "right" : "defineName(name, n, parent, name.getJSDocInfo());",
      "info" : "ExpressionStatement[16840-16889]:ExpressionStatement[16840-16889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16921-17079]:Block[16921-17079]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[16935-16965]:VariableDeclarationStatement[16935-16965]"
    }, {
      "left" : "defineName(name, n, parent,\n                (info != null) ? info : name.getJSDocInfo());",
      "right" : "defineName(name, n, parent,\n                (info != null) ? info : name.getJSDocInfo());",
      "info" : "ExpressionStatement[16978-17067]:ExpressionStatement[16978-17067]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17090-17096]:BreakStatement[17090-17096]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[17106-17126]:SwitchCase[17106-17126]"
    }, {
      "left" : "int parentType = parent.getType();",
      "right" : "int parentType = parent.getType();",
      "info" : "VariableDeclarationStatement[17137-17171]:VariableDeclarationStatement[17137-17171]"
    }, {
      "left" : "Preconditions.checkState(\n              (scope.isLocal() || parentType != Token.ASSIGN) &&\n              parentType != Token.NAME,\n              \"function defined as standalone function when it is being \" +\n              \"assigned\");",
      "right" : "Preconditions.checkState(\n              (scope.isLocal() || parentType != Token.ASSIGN) &&\n              parentType != Token.NAME,\n              \"function defined as standalone function when it is being \" +\n              \"assigned\");",
      "info" : "ExpressionStatement[17182-17415]:ExpressionStatement[17182-17415]"
    }, {
      "left" : "String functionName = n.getFirstChild().getString();",
      "right" : "String functionName = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[17426-17478]:VariableDeclarationStatement[17426-17478]"
    }, {
      "left" : "FunctionType functionType = getFunctionType(functionName, n, info,\n              null);",
      "right" : "FunctionType functionType = getFunctionType(functionName, n, info,\n              null);",
      "info" : "VariableDeclarationStatement[17489-17576]:VariableDeclarationStatement[17489-17576]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[17587-17699]:IfStatement[17587-17699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17626-17699]:Block[17626-17699]"
    }, {
      "left" : "defineSlot(n.getFirstChild(), n, functionType);",
      "right" : "defineSlot(n.getFirstChild(), n, functionType);",
      "info" : "ExpressionStatement[17640-17687]:ExpressionStatement[17640-17687]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17710-17716]:BreakStatement[17710-17716]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[17726-17744]:SwitchCase[17726-17744]"
    }, {
      "left" : "Node rvalue = n.getLastChild();",
      "right" : "Node rvalue = n.getLastChild();",
      "info" : "VariableDeclarationStatement[18127-18158]:VariableDeclarationStatement[18127-18158]"
    }, {
      "left" : "Node lvalue = n.getFirstChild();",
      "right" : "Node lvalue = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[18169-18201]:VariableDeclarationStatement[18169-18201]"
    }, {
      "left" : "info = (info != null) ? info : rvalue.getJSDocInfo();",
      "right" : "info = (info != null) ? info : rvalue.getJSDocInfo();",
      "info" : "ExpressionStatement[18212-18265]:ExpressionStatement[18212-18265]"
    }, {
      "left" : "if (rvalue.getType() == Token.FUNCTION ||\n              info != null && info.isConstructor())",
      "right" : "if (rvalue.getType() == Token.FUNCTION ||\n              info != null && info.isConstructor())",
      "info" : "IfStatement[18276-18788]:IfStatement[18276-18788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18370-18477]:Block[18370-18477]"
    }, {
      "left" : "getFunctionType(lvalue.getQualifiedName(), rvalue, info,\n                lvalue);",
      "right" : "getFunctionType(lvalue.getQualifiedName(), rvalue, info,\n                lvalue);",
      "info" : "ExpressionStatement[18384-18465]:ExpressionStatement[18384-18465]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[18483-18788]:IfStatement[18483-18788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18532-18788]:Block[18532-18788]"
    }, {
      "left" : "JSType type = getEnumType(lvalue.getQualifiedName(), n, rvalue,\n                info.getEnumParameterType().evaluate(scope, typeRegistry));",
      "right" : "JSType type = getEnumType(lvalue.getQualifiedName(), n, rvalue,\n                info.getEnumParameterType().evaluate(scope, typeRegistry));",
      "info" : "VariableDeclarationStatement[18546-18685]:VariableDeclarationStatement[18546-18685]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[18698-18776]:IfStatement[18698-18776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18716-18776]:Block[18716-18776]"
    }, {
      "left" : "setDeferredType(lvalue, type);",
      "right" : "setDeferredType(lvalue, type);",
      "info" : "ExpressionStatement[18732-18762]:ExpressionStatement[18732-18762]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18799-18805]:BreakStatement[18799-18805]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18815-18823]:SwitchCase[18815-18823]"
    }, {
      "left" : "throw new IllegalStateException(Integer.toString(n.getType()));",
      "right" : "throw new IllegalStateException(Integer.toString(n.getType()));",
      "info" : "ThrowStatement[18834-18897]:ThrowStatement[18834-18897]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19301-19308]:Modifier[19301-19308]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19309-19313]:PrimitiveType[19309-19313]"
    }, {
      "left" : "defineName",
      "right" : "defineName",
      "info" : "SimpleName[19314-19324]:SimpleName[19314-19324]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[19325-19334]:SingleVariableDeclaration[19325-19334]"
    }, {
      "left" : "Node var",
      "right" : "Node var",
      "info" : "SingleVariableDeclaration[19336-19344]:SingleVariableDeclaration[19336-19344]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[19346-19357]:SingleVariableDeclaration[19346-19357]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[19359-19373]:SingleVariableDeclaration[19359-19373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19375-20656]:Block[19375-20656]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[19383-19417]:VariableDeclarationStatement[19383-19417]"
    }, {
      "left" : "if (value != null && value.getType() == Token.FUNCTION)",
      "right" : "if (value != null && value.getType() == Token.FUNCTION)",
      "info" : "IfStatement[19425-20650]:IfStatement[19425-20650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19481-19851]:Block[19481-19851]"
    }, {
      "left" : "String functionName = name.getString();",
      "right" : "String functionName = name.getString();",
      "info" : "VariableDeclarationStatement[19511-19550]:VariableDeclarationStatement[19511-19550]"
    }, {
      "left" : "FunctionType functionType =\n            getFunctionType(functionName, value, info, null);",
      "right" : "FunctionType functionType =\n            getFunctionType(functionName, value, info, null);",
      "info" : "VariableDeclarationStatement[19559-19648]:VariableDeclarationStatement[19559-19648]"
    }, {
      "left" : "if (functionType.isReturnTypeInferred() &&\n            scope.isLocal())",
      "right" : "if (functionType.isReturnTypeInferred() &&\n            scope.isLocal())",
      "info" : "IfStatement[19657-19843]:IfStatement[19657-19843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19729-19779]:Block[19729-19779]"
    }, {
      "left" : "defineSlot(name, var, null);",
      "right" : "defineSlot(name, var, null);",
      "info" : "ExpressionStatement[19741-19769]:ExpressionStatement[19741-19769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19785-19843]:Block[19785-19843]"
    }, {
      "left" : "defineSlot(name, var, functionType);",
      "right" : "defineSlot(name, var, functionType);",
      "info" : "ExpressionStatement[19797-19833]:ExpressionStatement[19797-19833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19857-20650]:Block[19857-20650]"
    }, {
      "left" : "JSType type = null;",
      "right" : "JSType type = null;",
      "info" : "VariableDeclarationStatement[19894-19913]:VariableDeclarationStatement[19894-19913]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[19922-20604]:IfStatement[19922-20604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19940-20220]:Block[19940-20220]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(sourceName);",
      "right" : "CompilerInput input = compiler.getInput(sourceName);",
      "info" : "VariableDeclarationStatement[20002-20054]:VariableDeclarationStatement[20002-20054]"
    }, {
      "left" : "Preconditions.checkNotNull(input, sourceName);",
      "right" : "Preconditions.checkNotNull(input, sourceName);",
      "info" : "ExpressionStatement[20065-20111]:ExpressionStatement[20065-20111]"
    }, {
      "left" : "type = input.isExtern() ?\n              typeRegistry.getNativeType(UNKNOWN_TYPE) : null;",
      "right" : "type = input.isExtern() ?\n              typeRegistry.getNativeType(UNKNOWN_TYPE) : null;",
      "info" : "ExpressionStatement[20122-20210]:ExpressionStatement[20122-20210]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[20226-20604]:IfStatement[20226-20604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20259-20403]:Block[20259-20403]"
    }, {
      "left" : "type = getEnumType(name.getString(), var, value,\n              info.getEnumParameterType().evaluate(scope, typeRegistry));",
      "right" : "type = getEnumType(name.getString(), var, value,\n              info.getEnumParameterType().evaluate(scope, typeRegistry));",
      "info" : "ExpressionStatement[20271-20393]:ExpressionStatement[20271-20393]"
    }, {
      "left" : "if (info.isConstructor())",
      "right" : "if (info.isConstructor())",
      "info" : "IfStatement[20409-20604]:IfStatement[20409-20604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20435-20517]:Block[20435-20517]"
    }, {
      "left" : "type = getFunctionType(name.getString(), value, info, name);",
      "right" : "type = getFunctionType(name.getString(), value, info, name);",
      "info" : "ExpressionStatement[20447-20507]:ExpressionStatement[20447-20507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20523-20604]:Block[20523-20604]"
    }, {
      "left" : "type = getDeclaredTypeInAnnotation(sourceName, name, info);",
      "right" : "type = getDeclaredTypeInAnnotation(sourceName, name, info);",
      "info" : "ExpressionStatement[20535-20594]:ExpressionStatement[20535-20594]"
    }, {
      "left" : "defineSlot(name, var, type);",
      "right" : "defineSlot(name, var, type);",
      "info" : "ExpressionStatement[20614-20642]:ExpressionStatement[20614-20642]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21267-21274]:Modifier[21267-21274]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[21275-21287]:SimpleType[21275-21287]"
    }, {
      "left" : "getFunctionType",
      "right" : "getFunctionType",
      "info" : "SimpleName[21288-21303]:SimpleName[21288-21303]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[21304-21315]:SingleVariableDeclaration[21304-21315]"
    }, {
      "left" : "Node rValue",
      "right" : "Node rValue",
      "info" : "SingleVariableDeclaration[21325-21336]:SingleVariableDeclaration[21325-21336]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[21338-21352]:SingleVariableDeclaration[21338-21352]"
    }, {
      "left" : "@Nullable Node lvalueNode",
      "right" : "@Nullable Node lvalueNode",
      "info" : "SingleVariableDeclaration[21354-21379]:SingleVariableDeclaration[21354-21379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21381-24925]:Block[21381-25089]"
    }, {
      "left" : "FunctionType functionType = null;",
      "right" : "FunctionType functionType = null;",
      "info" : "VariableDeclarationStatement[21389-21422]:VariableDeclarationStatement[21389-21422]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName())",
      "right" : "if (rValue != null && rValue.isQualifiedName())",
      "info" : "IfStatement[21464-21900]:IfStatement[21464-21900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21512-21900]:Block[21512-21900]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[21522-21572]:VariableDeclarationStatement[21522-21572]"
    }, {
      "left" : "if (var != null && var.getType() instanceof FunctionType)",
      "right" : "if (var != null && var.getType() instanceof FunctionType)",
      "info" : "IfStatement[21581-21863]:IfStatement[21581-21863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21639-21863]:Block[21639-21863]"
    }, {
      "left" : "functionType = (FunctionType) var.getType();",
      "right" : "functionType = (FunctionType) var.getType();",
      "info" : "ExpressionStatement[21651-21695]:ExpressionStatement[21651-21695]"
    }, {
      "left" : "if (functionType != null && functionType.isConstructor())",
      "right" : "if (functionType != null && functionType.isConstructor())",
      "info" : "IfStatement[21706-21853]:IfStatement[21706-21853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21764-21853]:Block[21764-21853]"
    }, {
      "left" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "right" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "info" : "ExpressionStatement[21778-21841]:ExpressionStatement[21778-21841]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[21872-21892]:ReturnStatement[21872-21892]"
    }, {
      "left" : "Node owner = null;",
      "right" : "Node owner = null;",
      "info" : "VariableDeclarationStatement[21908-21926]:VariableDeclarationStatement[21908-21926]"
    }, {
      "left" : "if (lvalueNode != null)",
      "right" : "if (lvalueNode != null)",
      "info" : "IfStatement[21933-22021]:IfStatement[21933-22021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21957-22021]:Block[21957-22021]"
    }, {
      "left" : "owner = getPrototypePropertyOwner(lvalueNode);",
      "right" : "owner = getPrototypePropertyOwner(lvalueNode);",
      "info" : "ExpressionStatement[21967-22013]:ExpressionStatement[21967-22013]"
    }, {
      "left" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "right" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "info" : "VariableDeclarationStatement[22029-22083]:VariableDeclarationStatement[22029-22083]"
    }, {
      "left" : "boolean isFnLiteral =\n          rValue != null && rValue.getType() == Token.FUNCTION;",
      "right" : "boolean isFnLiteral =\n          rValue != null && rValue.getType() == Token.FUNCTION;",
      "info" : "VariableDeclarationStatement[22090-22175]:VariableDeclarationStatement[22090-22175]"
    }, {
      "left" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "right" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "info" : "VariableDeclarationStatement[22182-22224]:VariableDeclarationStatement[22182-22224]"
    }, {
      "left" : "Node parametersNode = isFnLiteral ?\n          rValue.getFirstChild().getNext() : null;",
      "right" : "Node parametersNode = isFnLiteral ?\n          rValue.getFirstChild().getNext() : null;",
      "info" : "VariableDeclarationStatement[22231-22317]:VariableDeclarationStatement[22231-22317]"
    }, {
      "left" : "if (functionType == null && info != null && info.hasType())",
      "right" : "if (functionType == null && info != null && info.hasType())",
      "info" : "IfStatement[22325-22723]:IfStatement[22393-22791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22385-22723]:Block[22453-22791]"
    }, {
      "left" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "right" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[22395-22454]:VariableDeclarationStatement[22463-22522]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[22536-22579]:ExpressionStatement[22604-22647]"
    }, {
      "left" : "if (type.isFunctionType())",
      "right" : "if (type.isFunctionType())",
      "info" : "IfStatement[22588-22715]:IfStatement[22656-22783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22615-22715]:Block[22683-22783]"
    }, {
      "left" : "functionType = (FunctionType) type;",
      "right" : "functionType = (FunctionType) type;",
      "info" : "ExpressionStatement[22627-22662]:ExpressionStatement[22695-22730]"
    }, {
      "left" : "functionType.setJSDocInfo(info);",
      "right" : "functionType.setJSDocInfo(info);",
      "info" : "ExpressionStatement[22673-22705]:ExpressionStatement[22741-22773]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[22731-24259]:IfStatement[22799-24379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22757-24259]:Block[22825-24379]"
    }, {
      "left" : "if (info == null ||\n            !FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "right" : "if (info == null ||\n            !FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "info" : "IfStatement[22767-24251]:IfStatement[22835-24371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22853-24251]:Block[22921-24371]"
    }, {
      "left" : "if (lvalueNode != null && lvalueNode.getType() == Token.GETPROP &&\n              lvalueNode.isQualifiedName())",
      "right" : "if (lvalueNode != null && lvalueNode.getType() == Token.GETPROP &&\n              lvalueNode.isQualifiedName())",
      "info" : "IfStatement[23251-24241]:IfStatement[23319-24361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23362-24241]:Block[23430-24361]"
    }, {
      "left" : "Var var = scope.getVar(\n                lvalueNode.getFirstChild().getQualifiedName());",
      "right" : "Var var = scope.getVar(\n                lvalueNode.getFirstChild().getQualifiedName());",
      "info" : "VariableDeclarationStatement[23376-23463]:VariableDeclarationStatement[23444-23531]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[23476-24229]:IfStatement[23544-24349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23493-24229]:Block[23561-24349]"
    }, {
      "left" : "ObjectType ownerType = ObjectType.cast(var.getType());",
      "right" : "ObjectType ownerType = ObjectType.cast(var.getType());",
      "info" : "VariableDeclarationStatement[23509-23563]:VariableDeclarationStatement[23577-23631]"
    }, {
      "left" : "FunctionType propType = null;",
      "right" : "FunctionType propType = null;",
      "info" : "VariableDeclarationStatement[23578-23607]:VariableDeclarationStatement[23646-23675]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[23622-23807]:IfStatement[23690-23875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23645-23807]:Block[23713-23875]"
    }, {
      "left" : "String propName = lvalueNode.getLastChild().getString();",
      "right" : "String propName = lvalueNode.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[23663-23719]:VariableDeclarationStatement[23731-23787]"
    }, {
      "left" : "propType = findOverriddenFunction(ownerType, propName);",
      "right" : "propType = findOverriddenFunction(ownerType, propName);",
      "info" : "ExpressionStatement[23736-23791]:ExpressionStatement[23804-23859]"
    }, {
      "left" : "if (propType != null)",
      "right" : "if (propType != null)",
      "info" : "IfStatement[23823-24215]:IfStatement[23891-24335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23845-24215]:Block[23913-24335]"
    }, {
      "left" : "functionType =\n                    new FunctionTypeBuilder(\n                        name, compiler, errorRoot, sourceName, scope)\n                    .setSourceNode(fnRoot)\n                    .inferFromOverriddenFunction(propType, parametersNode)\n                    .inferThisType(info, owner)\n                    .buildAndRegister();",
      "right" : "functionType =\n                    new FunctionTypeBuilder(\n                        name, compiler, errorRoot, sourceName, scope)\n                    .setSourceNode(fnRoot)\n                    .inferFromOverriddenFunction(propType, parametersNode)\n                    .inferThisType(info, owner)\n                    .inferReturnStatements(fnBlock)\n                    .buildAndRegister();",
      "info" : "ExpressionStatement[23863-24199]:ExpressionStatement[23931-24319]"
    }, {
      "left" : "new FunctionTypeBuilder(\n                        name, compiler, errorRoot, sourceName, scope)\n                    .setSourceNode(fnRoot)\n                    .inferFromOverriddenFunction(propType, parametersNode)\n                    .inferThisType(info, owner)\n                    .buildAndRegister()",
      "right" : "new FunctionTypeBuilder(\n                        name, compiler, errorRoot, sourceName, scope)\n                    .setSourceNode(fnRoot)\n                    .inferFromOverriddenFunction(propType, parametersNode)\n                    .inferThisType(info, owner)\n                    .inferReturnStatements(fnBlock)",
      "info" : "MethodInvocation[23898-24198]:MethodInvocation[23966-24278]"
    }, {
      "left" : "buildAndRegister",
      "right" : "inferReturnStatements",
      "info" : "SimpleName[24180-24196]:SimpleName[24248-24269]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[24300-24731]:IfStatement[24420-24895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24326-24731]:Block[24446-24895]"
    }, {
      "left" : "functionType =\n            new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                scope)\n            .setSourceNode(fnRoot)\n            .inferTemplateTypeName(info)\n            .inferReturnType(info)\n            .inferInheritance(info)\n            .inferThisType(info, owner)\n            .inferParameterTypes(parametersNode, info)\n            .buildAndRegister();",
      "right" : "functionType =\n            new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                scope)\n            .setSourceNode(fnRoot)\n            .inferTemplateTypeName(info)\n            .inferReturnType(info)\n            .inferInheritance(info)\n            .inferThisType(info, owner)\n            .inferParameterTypes(parametersNode, info)\n            .inferReturnStatements(fnBlock)\n            .buildAndRegister();",
      "info" : "ExpressionStatement[24336-24723]:ExpressionStatement[24456-24887]"
    }, {
      "left" : "new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                scope)\n            .setSourceNode(fnRoot)\n            .inferTemplateTypeName(info)\n            .inferReturnType(info)\n            .inferInheritance(info)\n            .inferThisType(info, owner)\n            .inferParameterTypes(parametersNode, info)\n            .buildAndRegister()",
      "right" : "new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                scope)\n            .setSourceNode(fnRoot)\n            .inferTemplateTypeName(info)\n            .inferReturnType(info)\n            .inferInheritance(info)\n            .inferThisType(info, owner)\n            .inferParameterTypes(parametersNode, info)\n            .inferReturnStatements(fnBlock)",
      "info" : "MethodInvocation[24363-24722]:MethodInvocation[24483-24854]"
    }, {
      "left" : "buildAndRegister",
      "right" : "inferReturnStatements",
      "info" : "SimpleName[24704-24720]:SimpleName[24824-24845]"
    }, {
      "left" : "if (rValue != null)",
      "right" : "if (rValue != null)",
      "info" : "IfStatement[24797-24873]:IfStatement[24961-25037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24817-24873]:Block[24981-25037]"
    }, {
      "left" : "setDeferredType(rValue, functionType);",
      "right" : "setDeferredType(rValue, functionType);",
      "info" : "ExpressionStatement[24827-24865]:ExpressionStatement[24991-25029]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[24899-24919]:ReturnStatement[25063-25083]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25018-25025]:Modifier[25182-25189]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[25026-25038]:SimpleType[25190-25202]"
    }, {
      "left" : "findOverriddenFunction",
      "right" : "findOverriddenFunction",
      "info" : "SimpleName[25039-25061]:SimpleName[25203-25225]"
    }, {
      "left" : "ObjectType ownerType",
      "right" : "ObjectType ownerType",
      "info" : "SingleVariableDeclaration[25071-25091]:SingleVariableDeclaration[25235-25255]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[25093-25108]:SingleVariableDeclaration[25257-25272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25110-25758]:Block[25274-25922]"
    }, {
      "left" : "JSType propType = ownerType.getPropertyType(propName);",
      "right" : "JSType propType = ownerType.getPropertyType(propName);",
      "info" : "VariableDeclarationStatement[25204-25258]:VariableDeclarationStatement[25368-25422]"
    }, {
      "left" : "if (propType instanceof FunctionType)",
      "right" : "if (propType instanceof FunctionType)",
      "info" : "IfStatement[25265-25732]:IfStatement[25429-25896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25303-25352]:Block[25467-25516]"
    }, {
      "left" : "return (FunctionType) propType;",
      "right" : "return (FunctionType) propType;",
      "info" : "ReturnStatement[25313-25344]:ReturnStatement[25477-25508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25358-25732]:Block[25522-25896]"
    }, {
      "left" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "right" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "info" : "EnhancedForStatement[25470-25724]:EnhancedForStatement[25634-25888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25553-25724]:Block[25717-25888]"
    }, {
      "left" : "propType = iface.getPropertyType(propName);",
      "right" : "propType = iface.getPropertyType(propName);",
      "info" : "ExpressionStatement[25565-25608]:ExpressionStatement[25729-25772]"
    }, {
      "left" : "if (propType instanceof FunctionType)",
      "right" : "if (propType instanceof FunctionType)",
      "info" : "IfStatement[25619-25714]:IfStatement[25783-25878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25657-25714]:Block[25821-25878]"
    }, {
      "left" : "return (FunctionType) propType;",
      "right" : "return (FunctionType) propType;",
      "info" : "ReturnStatement[25671-25702]:ReturnStatement[25835-25866]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25740-25752]:ReturnStatement[25904-25916]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26410-26417]:Modifier[26574-26581]"
    }, {
      "left" : "EnumType",
      "right" : "EnumType",
      "info" : "SimpleType[26418-26426]:SimpleType[26582-26590]"
    }, {
      "left" : "getEnumType",
      "right" : "getEnumType",
      "info" : "SimpleName[26427-26438]:SimpleName[26591-26602]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[26439-26450]:SingleVariableDeclaration[26603-26614]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[26452-26463]:SingleVariableDeclaration[26616-26627]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[26473-26483]:SingleVariableDeclaration[26637-26647]"
    }, {
      "left" : "JSType elementsType",
      "right" : "JSType elementsType",
      "info" : "SingleVariableDeclaration[26485-26504]:SingleVariableDeclaration[26649-26668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26506-27979]:Block[26670-28143]"
    }, {
      "left" : "EnumType enumType = null;",
      "right" : "EnumType enumType = null;",
      "info" : "VariableDeclarationStatement[26514-26539]:VariableDeclarationStatement[26678-26703]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[26576-27669]:IfStatement[26740-27833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26595-27669]:Block[26759-27833]"
    }, {
      "left" : "if (value.getType() == Token.OBJECTLIT)",
      "right" : "if (value.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[26605-27661]:IfStatement[26769-27825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26645-27428]:Block[26809-27592]"
    }, {
      "left" : "enumType = typeRegistry.createEnumType(name, elementsType);",
      "right" : "enumType = typeRegistry.createEnumType(name, elementsType);",
      "info" : "ExpressionStatement[26692-26751]:ExpressionStatement[26856-26915]"
    }, {
      "left" : "Node key = value.getFirstChild();",
      "right" : "Node key = value.getFirstChild();",
      "info" : "VariableDeclarationStatement[26800-26833]:VariableDeclarationStatement[26964-26997]"
    }, {
      "left" : "while (key != null)",
      "right" : "while (key != null)",
      "info" : "WhileStatement[26844-27418]:WhileStatement[27008-27582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26864-27418]:Block[27028-27582]"
    }, {
      "left" : "String keyName = NodeUtil.getStringValue(key);",
      "right" : "String keyName = NodeUtil.getStringValue(key);",
      "info" : "VariableDeclarationStatement[26878-26924]:VariableDeclarationStatement[27042-27088]"
    }, {
      "left" : "if (enumType.hasOwnProperty(keyName))",
      "right" : "if (enumType.hasOwnProperty(keyName))",
      "info" : "IfStatement[26938-27317]:IfStatement[27102-27481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26976-27072]:Block[27140-27236]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, key, ENUM_DUP, keyName));",
      "right" : "compiler.report(JSError.make(sourceName, key, ENUM_DUP, keyName));",
      "info" : "ExpressionStatement[26992-27058]:ExpressionStatement[27156-27222]"
    }, {
      "left" : "if (!codingConvention.isValidEnumKey(keyName))",
      "right" : "if (!codingConvention.isValidEnumKey(keyName))",
      "info" : "IfStatement[27078-27317]:IfStatement[27242-27481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27125-27249]:Block[27289-27413]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[27141-27235]:ExpressionStatement[27305-27399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27255-27317]:Block[27419-27481]"
    }, {
      "left" : "enumType.defineElement(keyName);",
      "right" : "enumType.defineElement(keyName);",
      "info" : "ExpressionStatement[27271-27303]:ExpressionStatement[27435-27467]"
    }, {
      "left" : "key = key.getNext();",
      "right" : "key = key.getNext();",
      "info" : "ExpressionStatement[27330-27350]:ExpressionStatement[27494-27514]"
    }, {
      "left" : "key = (key == null) ? null : key.getNext();",
      "right" : "key = (key == null) ? null : key.getNext();",
      "info" : "ExpressionStatement[27363-27406]:ExpressionStatement[27527-27570]"
    }, {
      "left" : "if (value.isQualifiedName())",
      "right" : "if (value.isQualifiedName())",
      "info" : "IfStatement[27434-27661]:IfStatement[27598-27825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27463-27661]:Block[27627-27825]"
    }, {
      "left" : "Var var = scope.getVar(value.getQualifiedName());",
      "right" : "Var var = scope.getVar(value.getQualifiedName());",
      "info" : "VariableDeclarationStatement[27475-27524]:VariableDeclarationStatement[27639-27688]"
    }, {
      "left" : "if (var != null && var.getType() instanceof EnumType)",
      "right" : "if (var != null && var.getType() instanceof EnumType)",
      "info" : "IfStatement[27535-27651]:IfStatement[27699-27815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27589-27651]:Block[27753-27815]"
    }, {
      "left" : "enumType = (EnumType) var.getType();",
      "right" : "enumType = (EnumType) var.getType();",
      "info" : "ExpressionStatement[27603-27639]:ExpressionStatement[27767-27803]"
    }, {
      "left" : "if (enumType == null)",
      "right" : "if (enumType == null)",
      "info" : "IfStatement[27677-27949]:IfStatement[27841-28113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27699-27785]:Block[27863-27949]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, parent, ENUM_INITIALIZER));",
      "right" : "compiler.report(JSError.make(sourceName, parent, ENUM_INITIALIZER));",
      "info" : "ExpressionStatement[27709-27777]:ExpressionStatement[27873-27941]"
    }, {
      "left" : "if (scope.isGlobal())",
      "right" : "if (scope.isGlobal())",
      "info" : "IfStatement[27791-27949]:IfStatement[27955-28113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27813-27949]:Block[27977-28113]"
    }, {
      "left" : "if (name != null && !name.isEmpty())",
      "right" : "if (name != null && !name.isEmpty())",
      "info" : "IfStatement[27823-27941]:IfStatement[27987-28105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27860-27941]:Block[28024-28105]"
    }, {
      "left" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "right" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "info" : "ExpressionStatement[27872-27931]:ExpressionStatement[28036-28095]"
    }, {
      "left" : "return enumType;",
      "right" : "return enumType;",
      "info" : "ReturnStatement[27957-27973]:ReturnStatement[28121-28137]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28389-28396]:Modifier[28553-28560]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28397-28401]:PrimitiveType[28561-28565]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[28402-28412]:SimpleName[28566-28576]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[28413-28422]:SingleVariableDeclaration[28577-28586]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[28424-28435]:SingleVariableDeclaration[28588-28599]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[28437-28448]:SingleVariableDeclaration[28601-28612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28450-28509]:Block[28614-28673]"
    }, {
      "left" : "defineSlot(name, parent, type, type == null);",
      "right" : "defineSlot(name, parent, type, type == null);",
      "info" : "ExpressionStatement[28458-28503]:ExpressionStatement[28622-28667]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28998-29002]:PrimitiveType[29162-29166]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[29003-29013]:SimpleName[29167-29177]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29014-29020]:SingleVariableDeclaration[29178-29184]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[29022-29033]:SingleVariableDeclaration[29186-29197]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[29035-29046]:SingleVariableDeclaration[29199-29210]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[29048-29064]:SingleVariableDeclaration[29212-29228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29066-31730]:Block[29230-31894]"
    }, {
      "left" : "Preconditions.checkArgument(inferred || type != null);",
      "right" : "Preconditions.checkArgument(inferred || type != null);",
      "info" : "ExpressionStatement[29074-29128]:ExpressionStatement[29238-29292]"
    }, {
      "left" : "boolean shouldDeclareOnGlobalThis = false;",
      "right" : "boolean shouldDeclareOnGlobalThis = false;",
      "info" : "VariableDeclarationStatement[29198-29240]:VariableDeclarationStatement[29362-29404]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[29247-29860]:IfStatement[29411-30024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29278-29661]:Block[29442-29825]"
    }, {
      "left" : "Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);",
      "right" : "Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);",
      "info" : "ExpressionStatement[29288-29501]:ExpressionStatement[29452-29665]"
    }, {
      "left" : "shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);",
      "right" : "shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[29510-29653]:ExpressionStatement[29674-29817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29667-29860]:Block[29831-30024]"
    }, {
      "left" : "Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));",
      "right" : "Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));",
      "info" : "ExpressionStatement[29677-29852]:ExpressionStatement[29841-30016]"
    }, {
      "left" : "String variableName = n.getQualifiedName();",
      "right" : "String variableName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[29867-29910]:VariableDeclarationStatement[30031-30074]"
    }, {
      "left" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "right" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "info" : "ExpressionStatement[29917-29970]:ExpressionStatement[30081-30134]"
    }, {
      "left" : "if (scope.isDeclared(variableName, false))",
      "right" : "if (scope.isDeclared(variableName, false))",
      "info" : "IfStatement[30014-31724]:IfStatement[30178-31888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30057-30223]:Block[30221-30387]"
    }, {
      "left" : "Var oldVar = scope.getVar(variableName);",
      "right" : "Var oldVar = scope.getVar(variableName);",
      "info" : "VariableDeclarationStatement[30067-30107]:VariableDeclarationStatement[30231-30271]"
    }, {
      "left" : "validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);",
      "right" : "validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);",
      "info" : "ExpressionStatement[30116-30215]:ExpressionStatement[30280-30379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30229-31724]:Block[30393-31888]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[30239-30301]:IfStatement[30403-30465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30254-30301]:Block[30418-30465]"
    }, {
      "left" : "setDeferredType(n, type);",
      "right" : "setDeferredType(n, type);",
      "info" : "ExpressionStatement[30266-30291]:ExpressionStatement[30430-30455]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(sourceName);",
      "right" : "CompilerInput input = compiler.getInput(sourceName);",
      "info" : "VariableDeclarationStatement[30310-30362]:VariableDeclarationStatement[30474-30526]"
    }, {
      "left" : "scope.declare(variableName, n, type, input, inferred);",
      "right" : "scope.declare(variableName, n, type, input, inferred);",
      "info" : "ExpressionStatement[30371-30425]:ExpressionStatement[30535-30589]"
    }, {
      "left" : "if (shouldDeclareOnGlobalThis)",
      "right" : "if (shouldDeclareOnGlobalThis)",
      "info" : "IfStatement[30435-30981]:IfStatement[30599-31145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30466-30981]:Block[30630-31145]"
    }, {
      "left" : "ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);",
      "right" : "ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);",
      "info" : "VariableDeclarationStatement[30478-30575]:VariableDeclarationStatement[30642-30739]"
    }, {
      "left" : "boolean isExtern = input.isExtern();",
      "right" : "boolean isExtern = input.isExtern();",
      "info" : "VariableDeclarationStatement[30586-30622]:VariableDeclarationStatement[30750-30786]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[30633-30971]:IfStatement[30797-31135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30647-30875]:Block[30811-31039]"
    }, {
      "left" : "globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    typeRegistry.getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);",
      "right" : "globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    typeRegistry.getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);",
      "info" : "ExpressionStatement[30661-30863]:ExpressionStatement[30825-31027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30881-30971]:Block[31045-31135]"
    }, {
      "left" : "globalThis.defineDeclaredProperty(variableName, type, isExtern);",
      "right" : "globalThis.defineDeclaredProperty(variableName, type, isExtern);",
      "info" : "ExpressionStatement[30895-30959]:ExpressionStatement[31059-31123]"
    }, {
      "left" : "if (scope.isGlobal() && type instanceof FunctionType)",
      "right" : "if (scope.isGlobal() && type instanceof FunctionType)",
      "info" : "IfStatement[31090-31716]:IfStatement[31254-31880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31144-31716]:Block[31308-31880]"
    }, {
      "left" : "FunctionType fnType = (FunctionType) type;",
      "right" : "FunctionType fnType = (FunctionType) type;",
      "info" : "VariableDeclarationStatement[31156-31198]:VariableDeclarationStatement[31320-31362]"
    }, {
      "left" : "if (fnType.isConstructor() || fnType.isInterface())",
      "right" : "if (fnType.isConstructor() || fnType.isInterface())",
      "info" : "IfStatement[31209-31706]:IfStatement[31373-31870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31261-31706]:Block[31425-31870]"
    }, {
      "left" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "right" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[31275-31339]:VariableDeclarationStatement[31439-31503]"
    }, {
      "left" : "scope.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    typeRegistry.getNativeType(OBJECT_TYPE)));",
      "right" : "scope.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    typeRegistry.getNativeType(OBJECT_TYPE)));",
      "info" : "ExpressionStatement[31352-31694]:ExpressionStatement[31516-31858]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31849-31856]:Modifier[32013-32020]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[31857-31862]:Modifier[32021-32026]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[31863-31868]:TYPE_DECLARATION_KIND[32027-32032]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[31869-31887]:SimpleName[32033-32051]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[31896-31916]:SimpleType[32060-32080]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32364-32371]:Modifier[32528-32535]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[32372-32390]:SimpleName[32536-32554]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[32391-32402]:SingleVariableDeclaration[32555-32566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32404-32431]:Block[32568-32595]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[32412-32425]:SuperConstructorInvocation[32576-32589]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32681-32690]:MarkerAnnotation[32845-32854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32691-32697]:Modifier[32855-32861]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32698-32702]:PrimitiveType[32862-32866]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[32703-32708]:SimpleName[32867-32872]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[32709-32724]:SingleVariableDeclaration[32873-32888]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32726-32732]:SingleVariableDeclaration[32890-32896]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[32734-32745]:SingleVariableDeclaration[32898-32909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32747-36840]:Block[32911-37004]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.CALL:\n          SubclassRelationship relationship =\n              codingConvention.getClassesDefinedByCall(n);\n          if (relationship != null) {\n            ObjectType superClass = ObjectType.cast(\n                typeRegistry.getType(relationship.superclassName));\n            ObjectType subClass = ObjectType.cast(\n                typeRegistry.getType(relationship.subclassName));\n            if (superClass != null && subClass != null) {\n              FunctionType superCtor = superClass.getConstructor();\n              FunctionType subCtor = subClass.getConstructor();\n\n              if (relationship.type == SubclassType.INHERITS) {\n                validator.expectSuperType(t, n, superClass, subClass);\n              }\n\n              if (superCtor != null && subCtor != null) {\n                codingConvention.applySubclassRelationship(\n                    superCtor, subCtor, relationship.type);\n              }\n            }\n          }\n\n          String singletonGetterClassName =\n              codingConvention.getSingletonGetterClassName(n);\n          if (singletonGetterClassName != null) {\n            ObjectType objectType = ObjectType.cast(\n                typeRegistry.getType(singletonGetterClassName));\n            if (objectType != null) {\n              FunctionType functionType = objectType.getConstructor();\n\n              if (functionType != null) {\n                FunctionType getterType =\n                    typeRegistry.createFunctionType(objectType);\n                codingConvention.applySingletonGetter(functionType, getterType,\n                                                      objectType);\n              }\n            }\n          }\n\n          DelegateRelationship delegateRelationship =\n              codingConvention.getDelegateRelationship(n);\n          if (delegateRelationship != null) {\n            applyDelegateRelationship(delegateRelationship);\n          }\n\n          ObjectLiteralCast objectLiteralCast =\n              codingConvention.getObjectLiteralCast(t, n);\n          if (objectLiteralCast != null) {\n            ObjectType type = ObjectType.cast(\n                typeRegistry.getType(objectLiteralCast.typeName));\n            if (type != null && type.getConstructor() != null) {\n              setDeferredType(objectLiteralCast.objectNode, type);\n            } else {\n              compiler.report(JSError.make(t.getSourceName(), n,\n                                           CONSTRUCTOR_EXPECTED));\n            }\n          }\n          break;\n\n        case Token.FUNCTION:\n          if (!t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // VARs and ASSIGNs are handled separately.\n          if (parent.getType() == Token.ASSIGN ||\n              parent.getType() == Token.NAME) {\n            return;\n          }\n          define(n, parent);\n          break;\n\n        case Token.ASSIGN:\n          // Handle constructor and enum definitions.\n          define(n, parent);\n\n          // Handle typedefs.\n          checkForOldStyleTypedef(t, n);\n\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          define(n, parent);\n          break;\n\n        case Token.VAR:\n          define(n, parent);\n\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForOldStyleTypedef(t, n);\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName()) {\n            checkForTypedef(t, n, n.getJSDocInfo());\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.CALL:\n          SubclassRelationship relationship =\n              codingConvention.getClassesDefinedByCall(n);\n          if (relationship != null) {\n            ObjectType superClass = ObjectType.cast(\n                typeRegistry.getType(relationship.superclassName));\n            ObjectType subClass = ObjectType.cast(\n                typeRegistry.getType(relationship.subclassName));\n            if (superClass != null && subClass != null) {\n              FunctionType superCtor = superClass.getConstructor();\n              FunctionType subCtor = subClass.getConstructor();\n\n              if (relationship.type == SubclassType.INHERITS) {\n                validator.expectSuperType(t, n, superClass, subClass);\n              }\n\n              if (superCtor != null && subCtor != null) {\n                codingConvention.applySubclassRelationship(\n                    superCtor, subCtor, relationship.type);\n              }\n            }\n          }\n\n          String singletonGetterClassName =\n              codingConvention.getSingletonGetterClassName(n);\n          if (singletonGetterClassName != null) {\n            ObjectType objectType = ObjectType.cast(\n                typeRegistry.getType(singletonGetterClassName));\n            if (objectType != null) {\n              FunctionType functionType = objectType.getConstructor();\n\n              if (functionType != null) {\n                FunctionType getterType =\n                    typeRegistry.createFunctionType(objectType);\n                codingConvention.applySingletonGetter(functionType, getterType,\n                                                      objectType);\n              }\n            }\n          }\n\n          DelegateRelationship delegateRelationship =\n              codingConvention.getDelegateRelationship(n);\n          if (delegateRelationship != null) {\n            applyDelegateRelationship(delegateRelationship);\n          }\n\n          ObjectLiteralCast objectLiteralCast =\n              codingConvention.getObjectLiteralCast(t, n);\n          if (objectLiteralCast != null) {\n            ObjectType type = ObjectType.cast(\n                typeRegistry.getType(objectLiteralCast.typeName));\n            if (type != null && type.getConstructor() != null) {\n              setDeferredType(objectLiteralCast.objectNode, type);\n            } else {\n              compiler.report(JSError.make(t.getSourceName(), n,\n                                           CONSTRUCTOR_EXPECTED));\n            }\n          }\n          break;\n\n        case Token.FUNCTION:\n          if (!t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // VARs and ASSIGNs are handled separately.\n          if (parent.getType() == Token.ASSIGN ||\n              parent.getType() == Token.NAME) {\n            return;\n          }\n          define(n, parent);\n          break;\n\n        case Token.ASSIGN:\n          // Handle constructor and enum definitions.\n          define(n, parent);\n\n          // Handle typedefs.\n          checkForOldStyleTypedef(t, n);\n\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          define(n, parent);\n          break;\n\n        case Token.VAR:\n          define(n, parent);\n\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForOldStyleTypedef(t, n);\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName()) {\n            checkForTypedef(t, n, n.getJSDocInfo());\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "info" : "SwitchStatement[32755-36834]:SwitchStatement[32919-36998]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[32786-32802]:SwitchCase[32950-32966]"
    }, {
      "left" : "SubclassRelationship relationship =\n              codingConvention.getClassesDefinedByCall(n);",
      "right" : "SubclassRelationship relationship =\n              codingConvention.getClassesDefinedByCall(n);",
      "info" : "VariableDeclarationStatement[32813-32907]:VariableDeclarationStatement[32977-33071]"
    }, {
      "left" : "if (relationship != null)",
      "right" : "if (relationship != null)",
      "info" : "IfStatement[32918-33746]:IfStatement[33082-33910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32944-33746]:Block[33108-33910]"
    }, {
      "left" : "ObjectType superClass = ObjectType.cast(\n                typeRegistry.getType(relationship.superclassName));",
      "right" : "ObjectType superClass = ObjectType.cast(\n                typeRegistry.getType(relationship.superclassName));",
      "info" : "VariableDeclarationStatement[32958-33066]:VariableDeclarationStatement[33122-33230]"
    }, {
      "left" : "ObjectType subClass = ObjectType.cast(\n                typeRegistry.getType(relationship.subclassName));",
      "right" : "ObjectType subClass = ObjectType.cast(\n                typeRegistry.getType(relationship.subclassName));",
      "info" : "VariableDeclarationStatement[33079-33183]:VariableDeclarationStatement[33243-33347]"
    }, {
      "left" : "if (superClass != null && subClass != null)",
      "right" : "if (superClass != null && subClass != null)",
      "info" : "IfStatement[33196-33734]:IfStatement[33360-33898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33240-33734]:Block[33404-33898]"
    }, {
      "left" : "FunctionType superCtor = superClass.getConstructor();",
      "right" : "FunctionType superCtor = superClass.getConstructor();",
      "info" : "VariableDeclarationStatement[33256-33309]:VariableDeclarationStatement[33420-33473]"
    }, {
      "left" : "FunctionType subCtor = subClass.getConstructor();",
      "right" : "FunctionType subCtor = subClass.getConstructor();",
      "info" : "VariableDeclarationStatement[33324-33373]:VariableDeclarationStatement[33488-33537]"
    }, {
      "left" : "if (relationship.type == SubclassType.INHERITS)",
      "right" : "if (relationship.type == SubclassType.INHERITS)",
      "info" : "IfStatement[33389-33525]:IfStatement[33553-33689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33437-33525]:Block[33601-33689]"
    }, {
      "left" : "validator.expectSuperType(t, n, superClass, subClass);",
      "right" : "validator.expectSuperType(t, n, superClass, subClass);",
      "info" : "ExpressionStatement[33455-33509]:ExpressionStatement[33619-33673]"
    }, {
      "left" : "if (superCtor != null && subCtor != null)",
      "right" : "if (superCtor != null && subCtor != null)",
      "info" : "IfStatement[33541-33720]:IfStatement[33705-33884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33583-33720]:Block[33747-33884]"
    }, {
      "left" : "codingConvention.applySubclassRelationship(\n                    superCtor, subCtor, relationship.type);",
      "right" : "codingConvention.applySubclassRelationship(\n                    superCtor, subCtor, relationship.type);",
      "info" : "ExpressionStatement[33601-33704]:ExpressionStatement[33765-33868]"
    }, {
      "left" : "String singletonGetterClassName =\n              codingConvention.getSingletonGetterClassName(n);",
      "right" : "String singletonGetterClassName =\n              codingConvention.getSingletonGetterClassName(n);",
      "info" : "VariableDeclarationStatement[33758-33854]:VariableDeclarationStatement[33922-34018]"
    }, {
      "left" : "if (singletonGetterClassName != null)",
      "right" : "if (singletonGetterClassName != null)",
      "info" : "IfStatement[33865-34470]:IfStatement[34029-34634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33903-34470]:Block[34067-34634]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(\n                typeRegistry.getType(singletonGetterClassName));",
      "right" : "ObjectType objectType = ObjectType.cast(\n                typeRegistry.getType(singletonGetterClassName));",
      "info" : "VariableDeclarationStatement[33917-34022]:VariableDeclarationStatement[34081-34186]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[34035-34458]:IfStatement[34199-34622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34059-34458]:Block[34223-34622]"
    }, {
      "left" : "FunctionType functionType = objectType.getConstructor();",
      "right" : "FunctionType functionType = objectType.getConstructor();",
      "info" : "VariableDeclarationStatement[34075-34131]:VariableDeclarationStatement[34239-34295]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[34147-34444]:IfStatement[34311-34608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34173-34444]:Block[34337-34608]"
    }, {
      "left" : "FunctionType getterType =\n                    typeRegistry.createFunctionType(objectType);",
      "right" : "FunctionType getterType =\n                    typeRegistry.createFunctionType(objectType);",
      "info" : "VariableDeclarationStatement[34191-34281]:VariableDeclarationStatement[34355-34445]"
    }, {
      "left" : "codingConvention.applySingletonGetter(functionType, getterType,\n                                                      objectType);",
      "right" : "codingConvention.applySingletonGetter(functionType, getterType,\n                                                      objectType);",
      "info" : "ExpressionStatement[34298-34428]:ExpressionStatement[34462-34592]"
    }, {
      "left" : "DelegateRelationship delegateRelationship =\n              codingConvention.getDelegateRelationship(n);",
      "right" : "DelegateRelationship delegateRelationship =\n              codingConvention.getDelegateRelationship(n);",
      "info" : "VariableDeclarationStatement[34482-34584]:VariableDeclarationStatement[34646-34748]"
    }, {
      "left" : "if (delegateRelationship != null)",
      "right" : "if (delegateRelationship != null)",
      "info" : "IfStatement[34595-34703]:IfStatement[34759-34867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34629-34703]:Block[34793-34867]"
    }, {
      "left" : "applyDelegateRelationship(delegateRelationship);",
      "right" : "applyDelegateRelationship(delegateRelationship);",
      "info" : "ExpressionStatement[34643-34691]:ExpressionStatement[34807-34855]"
    }, {
      "left" : "ObjectLiteralCast objectLiteralCast =\n              codingConvention.getObjectLiteralCast(t, n);",
      "right" : "ObjectLiteralCast objectLiteralCast =\n              codingConvention.getObjectLiteralCast(t, n);",
      "info" : "VariableDeclarationStatement[34715-34811]:VariableDeclarationStatement[34879-34975]"
    }, {
      "left" : "if (objectLiteralCast != null)",
      "right" : "if (objectLiteralCast != null)",
      "info" : "IfStatement[34822-35279]:IfStatement[34986-35443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34853-35279]:Block[35017-35443]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n                typeRegistry.getType(objectLiteralCast.typeName));",
      "right" : "ObjectType type = ObjectType.cast(\n                typeRegistry.getType(objectLiteralCast.typeName));",
      "info" : "VariableDeclarationStatement[34867-34968]:VariableDeclarationStatement[35031-35132]"
    }, {
      "left" : "if (type != null && type.getConstructor() != null)",
      "right" : "if (type != null && type.getConstructor() != null)",
      "info" : "IfStatement[34981-35267]:IfStatement[35145-35431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35032-35114]:Block[35196-35278]"
    }, {
      "left" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "right" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "info" : "ExpressionStatement[35048-35100]:ExpressionStatement[35212-35264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35120-35267]:Block[35284-35431]"
    }, {
      "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                                           CONSTRUCTOR_EXPECTED));",
      "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                                           CONSTRUCTOR_EXPECTED));",
      "info" : "ExpressionStatement[35136-35253]:ExpressionStatement[35300-35417]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35290-35296]:BreakStatement[35454-35460]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[35306-35326]:SwitchCase[35470-35490]"
    }, {
      "left" : "if (!t.getInput().isExtern())",
      "right" : "if (!t.getInput().isExtern())",
      "info" : "IfStatement[35337-35419]:IfStatement[35501-35583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35367-35419]:Block[35531-35583]"
    }, {
      "left" : "nonExternFunctions.add(n);",
      "right" : "nonExternFunctions.add(n);",
      "info" : "ExpressionStatement[35381-35407]:ExpressionStatement[35545-35571]"
    }, {
      "left" : "if (parent.getType() == Token.ASSIGN ||\n              parent.getType() == Token.NAME)",
      "right" : "if (parent.getType() == Token.ASSIGN ||\n              parent.getType() == Token.NAME)",
      "info" : "IfStatement[35485-35604]:IfStatement[35649-35768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35571-35604]:Block[35735-35768]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[35585-35592]:ReturnStatement[35749-35756]"
    }, {
      "left" : "define(n, parent);",
      "right" : "define(n, parent);",
      "info" : "ExpressionStatement[35615-35633]:ExpressionStatement[35779-35797]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35644-35650]:BreakStatement[35808-35814]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[35660-35678]:SwitchCase[35824-35842]"
    }, {
      "left" : "define(n, parent);",
      "right" : "define(n, parent);",
      "info" : "ExpressionStatement[35743-35761]:ExpressionStatement[35907-35925]"
    }, {
      "left" : "checkForOldStyleTypedef(t, n);",
      "right" : "checkForOldStyleTypedef(t, n);",
      "info" : "ExpressionStatement[35803-35833]:ExpressionStatement[35967-35997]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[35895-35931]:VariableDeclarationStatement[36059-36095]"
    }, {
      "left" : "if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName())",
      "right" : "if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName())",
      "info" : "IfStatement[35942-36157]:IfStatement[36106-36321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36031-36157]:Block[36195-36321]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "info" : "ExpressionStatement[36045-36145]:ExpressionStatement[36209-36309]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36168-36174]:BreakStatement[36332-36338]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[36184-36201]:SwitchCase[36348-36365]"
    }, {
      "left" : "define(n, parent);",
      "right" : "define(n, parent);",
      "info" : "ExpressionStatement[36212-36230]:ExpressionStatement[36376-36394]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36241-36247]:BreakStatement[36405-36411]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[36257-36272]:SwitchCase[36421-36436]"
    }, {
      "left" : "define(n, parent);",
      "right" : "define(n, parent);",
      "info" : "ExpressionStatement[36283-36301]:ExpressionStatement[36447-36465]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[36343-36489]:IfStatement[36507-36653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36364-36489]:Block[36528-36653]"
    }, {
      "left" : "checkForOldStyleTypedef(t, n);",
      "right" : "checkForOldStyleTypedef(t, n);",
      "info" : "ExpressionStatement[36378-36408]:ExpressionStatement[36542-36572]"
    }, {
      "left" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "right" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "info" : "ExpressionStatement[36421-36477]:ExpressionStatement[36585-36641]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36500-36506]:BreakStatement[36664-36670]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[36516-36535]:SwitchCase[36680-36699]"
    }, {
      "left" : "if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName())",
      "right" : "if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName())",
      "info" : "IfStatement[36586-36809]:IfStatement[36750-36973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36666-36809]:Block[36830-36973]"
    }, {
      "left" : "checkForTypedef(t, n, n.getJSDocInfo());",
      "right" : "checkForTypedef(t, n, n.getJSDocInfo());",
      "info" : "ExpressionStatement[36680-36720]:ExpressionStatement[36844-36884]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "info" : "ExpressionStatement[36733-36797]:ExpressionStatement[36897-36961]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36820-36826]:BreakStatement[36984-36990]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36846-36853]:Modifier[37010-37017]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36854-36858]:PrimitiveType[37018-37022]"
    }, {
      "left" : "applyDelegateRelationship",
      "right" : "applyDelegateRelationship",
      "info" : "SimpleName[36859-36884]:SimpleName[37023-37048]"
    }, {
      "left" : "DelegateRelationship delegateRelationship",
      "right" : "DelegateRelationship delegateRelationship",
      "info" : "SingleVariableDeclaration[36894-36935]:SingleVariableDeclaration[37058-37099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36937-38779]:Block[37101-38943]"
    }, {
      "left" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "right" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "info" : "VariableDeclarationStatement[36945-37055]:VariableDeclarationStatement[37109-37219]"
    }, {
      "left" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "right" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "info" : "VariableDeclarationStatement[37062-37178]:VariableDeclarationStatement[37226-37342]"
    }, {
      "left" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "right" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "info" : "VariableDeclarationStatement[37185-37313]:VariableDeclarationStatement[37349-37477]"
    }, {
      "left" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "right" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "info" : "IfStatement[37320-38773]:IfStatement[37484-38937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37430-38773]:Block[37594-38937]"
    }, {
      "left" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "right" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "info" : "VariableDeclarationStatement[37440-37502]:VariableDeclarationStatement[37604-37666]"
    }, {
      "left" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "right" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "info" : "VariableDeclarationStatement[37511-37579]:VariableDeclarationStatement[37675-37743]"
    }, {
      "left" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "right" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "info" : "VariableDeclarationStatement[37588-37658]:VariableDeclarationStatement[37752-37822]"
    }, {
      "left" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "right" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "info" : "IfStatement[37668-38765]:IfStatement[37832-38929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37764-38765]:Block[37928-38929]"
    }, {
      "left" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[37776-37873]:VariableDeclarationStatement[37940-38037]"
    }, {
      "left" : "functionParamBuilder.addRequiredParams(\n              typeRegistry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "right" : "functionParamBuilder.addRequiredParams(\n              typeRegistry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "info" : "ExpressionStatement[37884-37988]:ExpressionStatement[38048-38152]"
    }, {
      "left" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "right" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "info" : "VariableDeclarationStatement[37999-38177]:VariableDeclarationStatement[38163-38341]"
    }, {
      "left" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + \"(Proxy)\",\n              null, null, null);",
      "right" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + \"(Proxy)\",\n              null, null, null);",
      "info" : "VariableDeclarationStatement[38288-38450]:VariableDeclarationStatement[38452-38614]"
    }, {
      "left" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "right" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "info" : "ExpressionStatement[38461-38515]:ExpressionStatement[38625-38679]"
    }, {
      "left" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "right" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "info" : "ExpressionStatement[38527-38686]:ExpressionStatement[38691-38850]"
    }, {
      "left" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "right" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "info" : "ExpressionStatement[38697-38755]:ExpressionStatement[38861-38919]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38946-38953]:Modifier[39110-39117]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38954-38958]:PrimitiveType[39118-39122]"
    }, {
      "left" : "checkForTypedef",
      "right" : "checkForTypedef",
      "info" : "SimpleName[38959-38974]:SimpleName[39123-39138]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[38984-38999]:SingleVariableDeclaration[39148-39163]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[39001-39015]:SingleVariableDeclaration[39165-39179]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[39017-39031]:SingleVariableDeclaration[39181-39195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39033-39901]:Block[39197-40065]"
    }, {
      "left" : "if (info == null || !info.hasTypedefType())",
      "right" : "if (info == null || !info.hasTypedefType())",
      "info" : "IfStatement[39041-39110]:IfStatement[39205-39274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39085-39110]:Block[39249-39274]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[39095-39102]:ReturnStatement[39259-39266]"
    }, {
      "left" : "String typedef = candidate.getQualifiedName();",
      "right" : "String typedef = candidate.getQualifiedName();",
      "info" : "VariableDeclarationStatement[39118-39164]:VariableDeclarationStatement[39282-39328]"
    }, {
      "left" : "if (typedef == null)",
      "right" : "if (typedef == null)",
      "info" : "IfStatement[39171-39217]:IfStatement[39335-39381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39192-39217]:Block[39356-39381]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[39202-39209]:ReturnStatement[39366-39373]"
    }, {
      "left" : "typeRegistry.forwardDeclareType(typedef);",
      "right" : "typeRegistry.forwardDeclareType(typedef);",
      "info" : "ExpressionStatement[39391-39432]:ExpressionStatement[39555-39596]"
    }, {
      "left" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "right" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[39440-39510]:VariableDeclarationStatement[39604-39674]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[39517-39675]:IfStatement[39681-39839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39539-39675]:Block[39703-39839]"
    }, {
      "left" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[39549-39667]:ExpressionStatement[39713-39831]"
    }, {
      "left" : "typeRegistry.declareType(typedef, realType);",
      "right" : "typeRegistry.declareType(typedef, realType);",
      "info" : "ExpressionStatement[39683-39727]:ExpressionStatement[39847-39891]"
    }, {
      "left" : "if (candidate.getType() == Token.GETPROP)",
      "right" : "if (candidate.getType() == Token.GETPROP)",
      "info" : "IfStatement[39734-39895]:IfStatement[39898-40059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39776-39895]:Block[39940-40059]"
    }, {
      "left" : "defineSlot(candidate, candidate.getParent(),\n            typeRegistry.getNativeType(NO_TYPE), false);",
      "right" : "defineSlot(candidate, candidate.getParent(),\n            typeRegistry.getNativeType(NO_TYPE), false);",
      "info" : "ExpressionStatement[39786-39887]:ExpressionStatement[39950-40051]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40069-40076]:Modifier[40233-40240]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40077-40081]:PrimitiveType[40241-40245]"
    }, {
      "left" : "checkForOldStyleTypedef",
      "right" : "checkForOldStyleTypedef",
      "info" : "SimpleName[40082-40105]:SimpleName[40246-40269]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[40106-40121]:SingleVariableDeclaration[40270-40285]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[40123-40137]:SingleVariableDeclaration[40287-40301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40139-41057]:Block[40303-41221]"
    }, {
      "left" : "String typedef = codingConvention.identifyTypeDefAssign(candidate);",
      "right" : "String typedef = codingConvention.identifyTypeDefAssign(candidate);",
      "info" : "VariableDeclarationStatement[40175-40242]:VariableDeclarationStatement[40339-40406]"
    }, {
      "left" : "if (typedef != null)",
      "right" : "if (typedef != null)",
      "info" : "IfStatement[40249-41051]:IfStatement[40413-41215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40270-41051]:Block[40434-41215]"
    }, {
      "left" : "typeRegistry.forwardDeclareType(typedef);",
      "right" : "typeRegistry.forwardDeclareType(typedef);",
      "info" : "ExpressionStatement[40452-40493]:ExpressionStatement[40616-40657]"
    }, {
      "left" : "JSDocInfo info = candidate.getJSDocInfo();",
      "right" : "JSDocInfo info = candidate.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[40503-40545]:VariableDeclarationStatement[40667-40709]"
    }, {
      "left" : "JSType realType = null;",
      "right" : "JSType realType = null;",
      "info" : "VariableDeclarationStatement[40554-40577]:VariableDeclarationStatement[40718-40741]"
    }, {
      "left" : "if (info != null && info.getType() != null)",
      "right" : "if (info != null && info.getType() != null)",
      "info" : "IfStatement[40586-40708]:IfStatement[40750-40872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40630-40708]:Block[40794-40872]"
    }, {
      "left" : "realType = info.getType().evaluate(scope, typeRegistry);",
      "right" : "realType = info.getType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[40642-40698]:ExpressionStatement[40806-40862]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[40718-40884]:IfStatement[40882-41048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40740-40884]:Block[40904-41048]"
    }, {
      "left" : "compiler.report(\n              JSError.make(\n                  t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n              JSError.make(\n                  t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[40752-40874]:ExpressionStatement[40916-41038]"
    }, {
      "left" : "typeRegistry.declareType(typedef, realType);",
      "right" : "typeRegistry.declareType(typedef, realType);",
      "info" : "ExpressionStatement[40894-40938]:ExpressionStatement[41058-41102]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41486-41493]:Modifier[41650-41657]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41494-41498]:PrimitiveType[41658-41662]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[41499-41524]:SimpleName[41663-41688]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[41525-41540]:SingleVariableDeclaration[41689-41704]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[41542-41556]:SingleVariableDeclaration[41706-41720]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41566-41572]:SingleVariableDeclaration[41730-41736]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[41574-41585]:SingleVariableDeclaration[41738-41749]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[41587-41600]:SingleVariableDeclaration[41751-41764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41602-45525]:Block[41766-45689]"
    }, {
      "left" : "Node ownerNode = n.getFirstChild();",
      "right" : "Node ownerNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[41610-41645]:VariableDeclarationStatement[41774-41809]"
    }, {
      "left" : "String ownerName = ownerNode.getQualifiedName();",
      "right" : "String ownerName = ownerNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[41652-41700]:VariableDeclarationStatement[41816-41864]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[41707-41743]:VariableDeclarationStatement[41871-41907]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[41750-41797]:VariableDeclarationStatement[41914-41961]"
    }, {
      "left" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "right" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "info" : "ExpressionStatement[41804-41868]:ExpressionStatement[41968-42032]"
    }, {
      "left" : "if (\"prototype\".equals(propName))",
      "right" : "if (\"prototype\".equals(propName))",
      "info" : "IfStatement[42111-42396]:IfStatement[42275-42560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42145-42396]:Block[42309-42560]"
    }, {
      "left" : "Var qVar = scope.getVar(qName);",
      "right" : "Var qVar = scope.getVar(qName);",
      "info" : "VariableDeclarationStatement[42155-42186]:VariableDeclarationStatement[42319-42350]"
    }, {
      "left" : "if (qVar != null)",
      "right" : "if (qVar != null)",
      "info" : "IfStatement[42195-42388]:IfStatement[42359-42552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42213-42388]:Block[42377-42552]"
    }, {
      "left" : "if (!qVar.isTypeInferred())",
      "right" : "if (!qVar.isTypeInferred())",
      "info" : "IfStatement[42225-42345]:IfStatement[42389-42509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42253-42345]:Block[42417-42509]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[42326-42333]:ReturnStatement[42490-42497]"
    }, {
      "left" : "scope.undeclare(qVar);",
      "right" : "scope.undeclare(qVar);",
      "info" : "ExpressionStatement[42356-42378]:ExpressionStatement[42520-42542]"
    }, {
      "left" : "JSType valueType = getDeclaredGetPropType(t, info, n, rhsValue);",
      "right" : "JSType valueType = getDeclaredGetPropType(t, info, n, rhsValue);",
      "info" : "VariableDeclarationStatement[42985-43049]:VariableDeclarationStatement[43149-43213]"
    }, {
      "left" : "if (valueType == null && rhsValue != null)",
      "right" : "if (valueType == null && rhsValue != null)",
      "info" : "IfStatement[43056-43185]:IfStatement[43220-43349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43099-43185]:Block[43263-43349]"
    }, {
      "left" : "valueType = rhsValue.getJSType();",
      "right" : "valueType = rhsValue.getJSType();",
      "info" : "ExpressionStatement[43144-43177]:ExpressionStatement[43308-43341]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[43193-44196]:IfStatement[43357-44360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43216-44196]:Block[43380-44360]"
    }, {
      "left" : "if (parent.getType() == Token.EXPR_RESULT)",
      "right" : "if (parent.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[43226-44171]:IfStatement[43390-44335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43269-43387]:Block[43433-43551]"
    }, {
      "left" : "stubDeclarations.add(new StubDeclaration(\n              n, t.getInput().isExtern(), ownerName));",
      "right" : "stubDeclarations.add(new StubDeclaration(\n              n, t.getInput().isExtern(), ownerName));",
      "info" : "ExpressionStatement[43281-43377]:ExpressionStatement[43445-43541]"
    }, {
      "left" : "if (rhsValue != null &&\n                   rhsValue.getType() == Token.TRUE)",
      "right" : "if (rhsValue != null &&\n                   rhsValue.getType() == Token.TRUE)",
      "info" : "IfStatement[43393-44171]:IfStatement[43557-44335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43470-44171]:Block[43634-44335]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[43550-43598]:VariableDeclarationStatement[43714-43762]"
    }, {
      "left" : "if (ownerType instanceof FunctionType)",
      "right" : "if (ownerType instanceof FunctionType)",
      "info" : "IfStatement[43609-44161]:IfStatement[43773-44325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43648-44161]:Block[43812-44325]"
    }, {
      "left" : "JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();",
      "right" : "JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();",
      "info" : "VariableDeclarationStatement[43662-43730]:VariableDeclarationStatement[43826-43894]"
    }, {
      "left" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "right" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "info" : "VariableDeclarationStatement[43743-43810]:VariableDeclarationStatement[43907-43974]"
    }, {
      "left" : "JSType delegateType = delegateName == null ?\n                null : typeRegistry.getType(delegateName);",
      "right" : "JSType delegateType = delegateName == null ?\n                null : typeRegistry.getType(delegateName);",
      "info" : "VariableDeclarationStatement[43823-43926]:VariableDeclarationStatement[43987-44090]"
    }, {
      "left" : "if (delegateType != null &&\n                ownerTypeOfThis.isSubtype(delegateType))",
      "right" : "if (delegateType != null &&\n                ownerTypeOfThis.isSubtype(delegateType))",
      "info" : "IfStatement[43939-44149]:IfStatement[44103-44313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44024-44149]:Block[44188-44313]"
    }, {
      "left" : "defineSlot(n, parent, typeRegistry.getNativeType(BOOLEAN_TYPE),\n                         true);",
      "right" : "defineSlot(n, parent, typeRegistry.getNativeType(BOOLEAN_TYPE),\n                         true);",
      "info" : "ExpressionStatement[44040-44135]:ExpressionStatement[44204-44299]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[44181-44188]:ReturnStatement[44345-44352]"
    }, {
      "left" : "boolean inferred = true;",
      "right" : "boolean inferred = true;",
      "info" : "VariableDeclarationStatement[44204-44228]:VariableDeclarationStatement[44368-44392]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[44235-44445]:IfStatement[44399-44609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44253-44445]:Block[44417-44609]"
    }, {
      "left" : "inferred = !(info.hasType() || info.hasEnumParameterType() ||\n            FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "right" : "inferred = !(info.hasType() || info.hasEnumParameterType() ||\n            FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "info" : "ExpressionStatement[44310-44437]:ExpressionStatement[44474-44601]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[44453-44657]:IfStatement[44617-44821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44467-44657]:Block[44631-44821]"
    }, {
      "left" : "inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            !scope.isDeclared(qName, false));",
      "right" : "inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            !scope.isDeclared(qName, false));",
      "info" : "ExpressionStatement[44519-44649]:ExpressionStatement[44683-44813]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[44665-45519]:IfStatement[44829-45683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44680-45519]:Block[44844-45683]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[44690-44738]:VariableDeclarationStatement[44854-44902]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[44747-45326]:IfStatement[44911-45490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44770-45326]:Block[44934-45490]"
    }, {
      "left" : "boolean isExtern = t.getInput().isExtern();",
      "right" : "boolean isExtern = t.getInput().isExtern();",
      "info" : "VariableDeclarationStatement[44883-44926]:VariableDeclarationStatement[45047-45090]"
    }, {
      "left" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "right" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "info" : "IfStatement[44937-45316]:IfStatement[45101-45480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45152-45316]:Block[45316-45480]"
    }, {
      "left" : "ownerType.defineDeclaredProperty(propName, valueType, isExtern);",
      "right" : "ownerType.defineDeclaredProperty(propName, valueType, isExtern);",
      "info" : "ExpressionStatement[45240-45304]:ExpressionStatement[45404-45468]"
    }, {
      "left" : "defineSlot(n, parent, valueType, inferred);",
      "right" : "defineSlot(n, parent, valueType, inferred);",
      "info" : "ExpressionStatement[45468-45511]:ExpressionStatement[45632-45675]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45751-45758]:Modifier[45915-45922]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[45759-45769]:SimpleType[45923-45933]"
    }, {
      "left" : "getObjectSlot",
      "right" : "getObjectSlot",
      "info" : "SimpleName[45770-45783]:SimpleName[45934-45947]"
    }, {
      "left" : "String slotName",
      "right" : "String slotName",
      "info" : "SingleVariableDeclaration[45784-45799]:SingleVariableDeclaration[45948-45963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45801-46079]:Block[45965-46243]"
    }, {
      "left" : "Var ownerVar = scope.getVar(slotName);",
      "right" : "Var ownerVar = scope.getVar(slotName);",
      "info" : "VariableDeclarationStatement[45809-45847]:VariableDeclarationStatement[45973-46011]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[45854-46054]:IfStatement[46018-46218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45876-46054]:Block[46040-46218]"
    }, {
      "left" : "JSType ownerVarType = ownerVar.getType();",
      "right" : "JSType ownerVarType = ownerVar.getType();",
      "info" : "VariableDeclarationStatement[45886-45927]:VariableDeclarationStatement[46050-46091]"
    }, {
      "left" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "right" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "info" : "ReturnStatement[45936-46046]:ReturnStatement[46100-46210]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[46061-46073]:ReturnStatement[46225-46237]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46448-46455]:Modifier[46612-46619]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[46456-46462]:SimpleType[46620-46626]"
    }, {
      "left" : "getDeclaredGetPropType",
      "right" : "getDeclaredGetPropType",
      "info" : "SimpleName[46463-46485]:SimpleName[46627-46649]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[46486-46501]:SingleVariableDeclaration[46650-46665]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[46503-46517]:SingleVariableDeclaration[46667-46681]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46527-46533]:SingleVariableDeclaration[46691-46697]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[46535-46548]:SingleVariableDeclaration[46699-46712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46550-46954]:Block[46714-47118]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[46558-46948]:IfStatement[46722-47112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46594-46659]:Block[46758-46823]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "right" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "info" : "ReturnStatement[46604-46651]:ReturnStatement[46768-46815]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[46665-46948]:IfStatement[46829-47112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46714-46753]:Block[46878-46917]"
    }, {
      "left" : "return n.getJSType();",
      "right" : "return n.getJSType();",
      "info" : "ReturnStatement[46724-46745]:ReturnStatement[46888-46909]"
    }, {
      "left" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.FUNCTION)",
      "right" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.FUNCTION)",
      "info" : "IfStatement[46759-46948]:IfStatement[46923-47112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46831-46877]:Block[46995-47041]"
    }, {
      "left" : "return rhsValue.getJSType();",
      "right" : "return rhsValue.getJSType();",
      "info" : "ReturnStatement[46841-46869]:ReturnStatement[47005-47033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46883-46948]:Block[47047-47112]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "right" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "info" : "ReturnStatement[46893-46940]:ReturnStatement[47057-47104]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47091-47098]:Modifier[47255-47262]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47099-47103]:PrimitiveType[47263-47267]"
    }, {
      "left" : "resolveStubDeclarations",
      "right" : "resolveStubDeclarations",
      "info" : "SimpleName[47104-47127]:SimpleName[47268-47291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47130-48288]:Block[47294-48452]"
    }, {
      "left" : "for (StubDeclaration stub : stubDeclarations)",
      "right" : "for (StubDeclaration stub : stubDeclarations)",
      "info" : "EnhancedForStatement[47138-48282]:EnhancedForStatement[47302-48446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47184-48282]:Block[47348-48446]"
    }, {
      "left" : "Node n = stub.node;",
      "right" : "Node n = stub.node;",
      "info" : "VariableDeclarationStatement[47194-47213]:VariableDeclarationStatement[47358-47377]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[47222-47250]:VariableDeclarationStatement[47386-47414]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[47259-47295]:VariableDeclarationStatement[47423-47459]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[47304-47351]:VariableDeclarationStatement[47468-47515]"
    }, {
      "left" : "String ownerName = stub.ownerName;",
      "right" : "String ownerName = stub.ownerName;",
      "info" : "VariableDeclarationStatement[47360-47394]:VariableDeclarationStatement[47524-47558]"
    }, {
      "left" : "boolean isExtern = stub.isExtern;",
      "right" : "boolean isExtern = stub.isExtern;",
      "info" : "VariableDeclarationStatement[47403-47436]:VariableDeclarationStatement[47567-47600]"
    }, {
      "left" : "if (scope.isDeclared(qName, false))",
      "right" : "if (scope.isDeclared(qName, false))",
      "info" : "IfStatement[47446-47513]:IfStatement[47610-47677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47482-47513]:Block[47646-47677]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[47494-47503]:ContinueStatement[47658-47667]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[47630-47678]:VariableDeclarationStatement[47794-47842]"
    }, {
      "left" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "right" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[47687-47759]:VariableDeclarationStatement[47851-47923]"
    }, {
      "left" : "defineSlot(n, parent, unknownType, true);",
      "right" : "defineSlot(n, parent, unknownType, true);",
      "info" : "ExpressionStatement[47768-47809]:ExpressionStatement[47932-47973]"
    }, {
      "left" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "right" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "info" : "IfStatement[47819-48274]:IfStatement[47983-48438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47907-48140]:Block[48071-48304]"
    }, {
      "left" : "ownerType.defineInferredProperty(\n              propName, unknownType, isExtern);",
      "right" : "ownerType.defineInferredProperty(\n              propName, unknownType, isExtern);",
      "info" : "ExpressionStatement[48049-48130]:ExpressionStatement[48213-48294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48146-48274]:Block[48310-48438]"
    }, {
      "left" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "right" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "info" : "ExpressionStatement[48158-48264]:ExpressionStatement[48322-48428]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48366-48373]:Modifier[48530-48537]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[48374-48379]:Modifier[48538-48543]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[48380-48385]:TYPE_DECLARATION_KIND[48544-48549]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[48386-48401]:SimpleName[48550-48565]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48518-48525]:Modifier[48682-48689]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[48526-48541]:SimpleName[48690-48705]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[48542-48551]:SingleVariableDeclaration[48706-48715]"
    }, {
      "left" : "boolean isExtern",
      "right" : "boolean isExtern",
      "info" : "SingleVariableDeclaration[48553-48569]:SingleVariableDeclaration[48717-48733]"
    }, {
      "left" : "String ownerName",
      "right" : "String ownerName",
      "info" : "SingleVariableDeclaration[48571-48587]:SingleVariableDeclaration[48735-48751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48589-48694]:Block[48753-48858]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[48599-48616]:ExpressionStatement[48763-48780]"
    }, {
      "left" : "this.isExtern = isExtern;",
      "right" : "this.isExtern = isExtern;",
      "info" : "ExpressionStatement[48625-48650]:ExpressionStatement[48789-48814]"
    }, {
      "left" : "this.ownerName = ownerName;",
      "right" : "this.ownerName = ownerName;",
      "info" : "ExpressionStatement[48659-48686]:ExpressionStatement[48823-48850]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48832-48839]:Modifier[48996-49003]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[48840-48845]:Modifier[49004-49009]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[48846-48851]:TYPE_DECLARATION_KIND[49010-49015]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[48852-48869]:SimpleName[49016-49033]"
    }, {
      "left" : "AbstractShallowCallback",
      "right" : "AbstractShallowCallback",
      "info" : "SimpleType[48886-48909]:SimpleType[49050-49073]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[48960-48977]:SimpleName[49124-49141]"
    }, {
      "left" : "ObjectType thisType",
      "right" : "ObjectType thisType",
      "info" : "SingleVariableDeclaration[48978-48997]:SingleVariableDeclaration[49142-49161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48999-49042]:Block[49163-49206]"
    }, {
      "left" : "this.thisType = thisType;",
      "right" : "this.thisType = thisType;",
      "info" : "ExpressionStatement[49009-49034]:ExpressionStatement[49173-49198]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49050-49056]:Modifier[49214-49220]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49057-49061]:PrimitiveType[49221-49225]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[49062-49067]:SimpleName[49226-49231]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[49068-49083]:SingleVariableDeclaration[49232-49247]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49085-49091]:SingleVariableDeclaration[49249-49255]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[49093-49104]:SingleVariableDeclaration[49257-49268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49106-49448]:Block[49270-49612]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.EXPR_RESULT)",
      "right" : "if (parent != null && parent.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[49116-49440]:IfStatement[49280-49604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49177-49440]:Block[49341-49604]"
    }, {
      "left" : "switch (n.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, n.getFirstChild(), n);\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, n, n);\n              break;\n          }",
      "right" : "switch (n.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, n.getFirstChild(), n);\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, n, n);\n              break;\n          }",
      "info" : "SwitchStatement[49189-49430]:SwitchStatement[49353-49594]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[49224-49242]:SwitchCase[49388-49406]"
    }, {
      "left" : "maybeCollectMember(t, n.getFirstChild(), n);",
      "right" : "maybeCollectMember(t, n.getFirstChild(), n);",
      "info" : "ExpressionStatement[49257-49301]:ExpressionStatement[49421-49465]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49316-49322]:BreakStatement[49480-49486]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[49335-49354]:SwitchCase[49499-49518]"
    }, {
      "left" : "maybeCollectMember(t, n, n);",
      "right" : "maybeCollectMember(t, n, n);",
      "info" : "ExpressionStatement[49369-49397]:ExpressionStatement[49533-49561]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49412-49418]:BreakStatement[49576-49582]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49456-49463]:Modifier[49620-49627]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49464-49468]:PrimitiveType[49628-49632]"
    }, {
      "left" : "maybeCollectMember",
      "right" : "maybeCollectMember",
      "info" : "SimpleName[49469-49487]:SimpleName[49633-49651]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[49488-49503]:SingleVariableDeclaration[49652-49667]"
    }, {
      "left" : "Node member",
      "right" : "Node member",
      "info" : "SingleVariableDeclaration[49515-49526]:SingleVariableDeclaration[49679-49690]"
    }, {
      "left" : "Node nodeWithJsDocInfo",
      "right" : "Node nodeWithJsDocInfo",
      "info" : "SingleVariableDeclaration[49528-49550]:SingleVariableDeclaration[49692-49714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49552-50435]:Block[49716-50599]"
    }, {
      "left" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "right" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[49562-49612]:VariableDeclarationStatement[49726-49776]"
    }, {
      "left" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
      "right" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
      "info" : "IfStatement[49808-49966]:IfStatement[49972-50130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49937-49966]:Block[50101-50130]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[49949-49956]:ReturnStatement[50113-50120]"
    }, {
      "left" : "member.getFirstChild().setJSType(thisType);",
      "right" : "member.getFirstChild().setJSType(thisType);",
      "info" : "ExpressionStatement[49976-50019]:ExpressionStatement[50140-50183]"
    }, {
      "left" : "JSType jsType = getDeclaredTypeInAnnotation(t, member, info);",
      "right" : "JSType jsType = getDeclaredTypeInAnnotation(t, member, info);",
      "info" : "VariableDeclarationStatement[50028-50089]:VariableDeclarationStatement[50192-50253]"
    }, {
      "left" : "Node name = member.getLastChild();",
      "right" : "Node name = member.getLastChild();",
      "info" : "VariableDeclarationStatement[50098-50132]:VariableDeclarationStatement[50262-50296]"
    }, {
      "left" : "if (jsType != null &&\n            (name.getType() == Token.NAME || name.getType() == Token.STRING))",
      "right" : "if (jsType != null &&\n            (name.getType() == Token.NAME || name.getType() == Token.STRING))",
      "info" : "IfStatement[50141-50427]:IfStatement[50305-50591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50241-50427]:Block[50405-50591]"
    }, {
      "left" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              false /* functions with implementations are not in externs */);",
      "right" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              false /* functions with implementations are not in externs */);",
      "info" : "ExpressionStatement[50253-50417]:ExpressionStatement[50417-50581]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50602-50609]:Modifier[50766-50773]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[50610-50615]:Modifier[50774-50779]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[50616-50621]:TYPE_DECLARATION_KIND[50780-50785]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[50622-50639]:SimpleName[50786-50803]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[50648-50668]:SimpleType[50812-50832]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50742-50749]:Modifier[50906-50913]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[50750-50767]:SimpleName[50914-50931]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[50768-50779]:SingleVariableDeclaration[50932-50943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50781-50808]:Block[50945-50972]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[50789-50802]:SuperConstructorInvocation[50953-50966]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50875-50879]:PrimitiveType[51039-51043]"
    }, {
      "left" : "build",
      "right" : "build",
      "info" : "SimpleName[50880-50885]:SimpleName[51044-51049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50888-50962]:Block[51052-51126]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "right" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "info" : "ExpressionStatement[50896-50956]:ExpressionStatement[51060-51120]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[51226-51235]:MarkerAnnotation[51390-51399]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51236-51242]:Modifier[51400-51406]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51243-51247]:PrimitiveType[51407-51411]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[51248-51253]:SimpleName[51412-51417]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[51254-51269]:SingleVariableDeclaration[51418-51433]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[51271-51277]:SingleVariableDeclaration[51435-51441]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[51279-51290]:SingleVariableDeclaration[51443-51454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51292-51820]:Block[51456-51984]"
    }, {
      "left" : "if (n == scope.getRootNode())",
      "right" : "if (n == scope.getRootNode())",
      "info" : "IfStatement[51300-51337]:IfStatement[51464-51501]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[51330-51337]:ReturnStatement[51494-51501]"
    }, {
      "left" : "if (n.getType() == Token.LP && parent == scope.getRootNode())",
      "right" : "if (n.getType() == Token.LP && parent == scope.getRootNode())",
      "info" : "IfStatement[51345-51470]:IfStatement[51509-51634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51407-51470]:Block[51571-51634]"
    }, {
      "left" : "handleFunctionInputs(parent);",
      "right" : "handleFunctionInputs(parent);",
      "info" : "ExpressionStatement[51417-51446]:ExpressionStatement[51581-51610]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[51455-51462]:ReturnStatement[51619-51626]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.FUNCTION:\n          // VARs and ASSIGNs are handled separately.\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          define(n, parent);\n          break;\n\n        case Token.CATCH:\n        case Token.VAR:\n          define(n, parent);\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.FUNCTION:\n          // VARs and ASSIGNs are handled separately.\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          define(n, parent);\n          break;\n\n        case Token.CATCH:\n        case Token.VAR:\n          define(n, parent);\n          break;\n      }",
      "info" : "SwitchStatement[51478-51814]:SwitchStatement[51642-51978]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[51509-51529]:SwitchCase[51673-51693]"
    }, {
      "left" : "if (parent.getType() == Token.NAME)",
      "right" : "if (parent.getType() == Token.NAME)",
      "info" : "IfStatement[51594-51663]:IfStatement[51758-51827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51630-51663]:Block[51794-51827]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[51644-51651]:ReturnStatement[51808-51815]"
    }, {
      "left" : "define(n, parent);",
      "right" : "define(n, parent);",
      "info" : "ExpressionStatement[51674-51692]:ExpressionStatement[51838-51856]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51703-51709]:BreakStatement[51867-51873]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[51719-51736]:SwitchCase[51883-51900]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[51745-51760]:SwitchCase[51909-51924]"
    }, {
      "left" : "define(n, parent);",
      "right" : "define(n, parent);",
      "info" : "ExpressionStatement[51771-51789]:ExpressionStatement[51935-51953]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51800-51806]:BreakStatement[51964-51970]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51888-51895]:Modifier[52052-52059]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51896-51900]:PrimitiveType[52060-52064]"
    }, {
      "left" : "handleFunctionInputs",
      "right" : "handleFunctionInputs",
      "info" : "SimpleName[51901-51921]:SimpleName[52065-52085]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[51922-51933]:SingleVariableDeclaration[52086-52097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51935-52691]:Block[52099-52855]"
    }, {
      "left" : "Node fnNameNode = fnNode.getFirstChild();",
      "right" : "Node fnNameNode = fnNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[51979-52020]:VariableDeclarationStatement[52143-52184]"
    }, {
      "left" : "String fnName = fnNameNode.getString();",
      "right" : "String fnName = fnNameNode.getString();",
      "info" : "VariableDeclarationStatement[52027-52066]:VariableDeclarationStatement[52191-52230]"
    }, {
      "left" : "if (!fnName.isEmpty())",
      "right" : "if (!fnName.isEmpty())",
      "info" : "IfStatement[52073-52652]:IfStatement[52237-52816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52096-52652]:Block[52260-52816]"
    }, {
      "left" : "Scope.Var fnVar = scope.getVar(fnName);",
      "right" : "Scope.Var fnVar = scope.getVar(fnName);",
      "info" : "VariableDeclarationStatement[52106-52145]:VariableDeclarationStatement[52270-52309]"
    }, {
      "left" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "right" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "info" : "IfStatement[52154-52644]:IfStatement[52318-52808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52564-52644]:Block[52728-52808]"
    }, {
      "left" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "right" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "info" : "ExpressionStatement[52576-52634]:ExpressionStatement[52740-52798]"
    }, {
      "left" : "declareArguments(fnNode);",
      "right" : "declareArguments(fnNode);",
      "info" : "ExpressionStatement[52660-52685]:ExpressionStatement[52824-52849]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52760-52767]:Modifier[52924-52931]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52768-52772]:PrimitiveType[52932-52936]"
    }, {
      "left" : "declareArguments",
      "right" : "declareArguments",
      "info" : "SimpleName[52773-52789]:SimpleName[52937-52953]"
    }, {
      "left" : "Node functionNode",
      "right" : "Node functionNode",
      "info" : "SingleVariableDeclaration[52790-52807]:SingleVariableDeclaration[52954-52971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52809-53603]:Block[52973-53767]"
    }, {
      "left" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "right" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[52817-52877]:VariableDeclarationStatement[52981-53041]"
    }, {
      "left" : "Node body = astParameters.getNext();",
      "right" : "Node body = astParameters.getNext();",
      "info" : "VariableDeclarationStatement[52884-52920]:VariableDeclarationStatement[53048-53084]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) functionNode.getJSType();",
      "right" : "FunctionType functionType = (FunctionType) functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[52927-52995]:VariableDeclarationStatement[53091-53159]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[53002-53597]:IfStatement[53166-53761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53028-53597]:Block[53192-53761]"
    }, {
      "left" : "Node jsDocParameters = functionType.getParametersNode();",
      "right" : "Node jsDocParameters = functionType.getParametersNode();",
      "info" : "VariableDeclarationStatement[53038-53094]:VariableDeclarationStatement[53202-53258]"
    }, {
      "left" : "if (jsDocParameters != null)",
      "right" : "if (jsDocParameters != null)",
      "info" : "IfStatement[53103-53589]:IfStatement[53267-53753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53132-53589]:Block[53296-53753]"
    }, {
      "left" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "right" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[53144-53198]:VariableDeclarationStatement[53308-53362]"
    }, {
      "left" : "for (Node astParameter : astParameters.children())",
      "right" : "for (Node astParameter : astParameters.children())",
      "info" : "EnhancedForStatement[53209-53579]:EnhancedForStatement[53373-53743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53260-53579]:Block[53424-53743]"
    }, {
      "left" : "if (jsDocParameter != null)",
      "right" : "if (jsDocParameter != null)",
      "info" : "IfStatement[53274-53567]:IfStatement[53438-53731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53302-53480]:Block[53466-53644]"
    }, {
      "left" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);",
      "right" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);",
      "info" : "ExpressionStatement[53318-53409]:ExpressionStatement[53482-53573]"
    }, {
      "left" : "jsDocParameter = jsDocParameter.getNext();",
      "right" : "jsDocParameter = jsDocParameter.getNext();",
      "info" : "ExpressionStatement[53424-53466]:ExpressionStatement[53588-53630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53486-53567]:Block[53650-53731]"
    }, {
      "left" : "defineSlot(astParameter, functionNode, null, true);",
      "right" : "defineSlot(astParameter, functionNode, null, true);",
      "info" : "ExpressionStatement[53502-53553]:ExpressionStatement[53666-53717]"
    } ]
  },
  "interFileMappings" : { }
}