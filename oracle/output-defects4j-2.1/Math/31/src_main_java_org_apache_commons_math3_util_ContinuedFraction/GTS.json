{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ContinuedFraction",
      "right" : "ContinuedFraction",
      "info" : "TypeDeclaration[1042-7378]:TypeDeclaration[1042-6313]"
    }, {
      "left" : "private static final double DEFAULT_EPSILON = 10e-9;",
      "right" : "private static final double DEFAULT_EPSILON = 10e-9;",
      "info" : "FieldDeclaration[1420-1516]:FieldDeclaration[1420-1516]"
    }, {
      "left" : "protected ContinuedFraction()",
      "right" : "protected ContinuedFraction()",
      "info" : "MethodDeclaration[1522-1620]:MethodDeclaration[1522-1620]"
    }, {
      "left" : "protected abstract double getA(int n, double x);",
      "right" : "protected abstract double getA(int n, double x);",
      "info" : "MethodDeclaration[1626-1971]:MethodDeclaration[1626-1971]"
    }, {
      "left" : "protected abstract double getB(int n, double x);",
      "right" : "protected abstract double getB(int n, double x);",
      "info" : "MethodDeclaration[1977-2322]:MethodDeclaration[1977-2322]"
    }, {
      "left" : "public double evaluate(double x)",
      "right" : "public double evaluate(double x)",
      "info" : "MethodDeclaration[2328-2681]:MethodDeclaration[2328-2681]"
    }, {
      "left" : "public double evaluate(double x, double epsilon)",
      "right" : "public double evaluate(double x, double epsilon)",
      "info" : "MethodDeclaration[2687-3093]:MethodDeclaration[2687-3093]"
    }, {
      "left" : "public double evaluate(double x, int maxIterations)",
      "right" : "public double evaluate(double x, int maxIterations)",
      "info" : "MethodDeclaration[3099-3525]:MethodDeclaration[3099-3525]"
    }, {
      "left" : "public double evaluate(double x, double epsilon, int maxIterations)",
      "right" : "public double evaluate(double x, double epsilon, int maxIterations)",
      "info" : "MethodDeclaration[3531-7375]:MethodDeclaration[3531-6310]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1596-1620]:Block[1596-1620]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[1606-1614]:SuperConstructorInvocation[1606-1614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2610-2681]:Block[2610-2681]"
    }, {
      "left" : "return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",
      "right" : "return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",
      "info" : "ReturnStatement[2620-2675]:ReturnStatement[2620-2675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3030-3093]:Block[3030-3093]"
    }, {
      "left" : "return evaluate(x, epsilon, Integer.MAX_VALUE);",
      "right" : "return evaluate(x, epsilon, Integer.MAX_VALUE);",
      "info" : "ReturnStatement[3040-3087]:ReturnStatement[3040-3087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3458-3525]:Block[3458-3525]"
    }, {
      "left" : "return evaluate(x, DEFAULT_EPSILON, maxIterations);",
      "right" : "return evaluate(x, DEFAULT_EPSILON, maxIterations);",
      "info" : "ReturnStatement[3468-3519]:ReturnStatement[3468-3519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4643-7375]:Block[4643-6310]"
    }, {
      "left" : "final double small = 1e-50;",
      "right" : "final double small = 1e-50;",
      "info" : "VariableDeclarationStatement[4653-4680]:VariableDeclarationStatement[4653-4680]"
    }, {
      "left" : "double hPrev = getA(0, x);",
      "right" : "double hPrev = getA(0, x);",
      "info" : "VariableDeclarationStatement[4689-4715]:VariableDeclarationStatement[4689-4715]"
    }, {
      "left" : "if (Precision.equals(hPrev, 0.0, small))",
      "right" : "if (Precision.equals(hPrev, 0.0, small))",
      "info" : "IfStatement[4795-4874]:IfStatement[4795-4874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4836-4874]:Block[4836-4874]"
    }, {
      "left" : "hPrev = small;",
      "right" : "hPrev = small;",
      "info" : "ExpressionStatement[4850-4864]:ExpressionStatement[4850-4864]"
    }, {
      "left" : "int n = 1;",
      "right" : "int n = 1;",
      "info" : "VariableDeclarationStatement[4884-4894]:VariableDeclarationStatement[4884-4894]"
    }, {
      "left" : "double dPrev = 0.0;",
      "right" : "double dPrev = 0.0;",
      "info" : "VariableDeclarationStatement[4903-4922]:VariableDeclarationStatement[4903-4922]"
    }, {
      "left" : "double cPrev = hPrev;",
      "right" : "double cPrev = hPrev;",
      "info" : "VariableDeclarationStatement[4981-5002]:VariableDeclarationStatement[4931-4952]"
    }, {
      "left" : "double hN = hPrev;",
      "right" : "double hN = hPrev;",
      "info" : "VariableDeclarationStatement[5011-5029]:VariableDeclarationStatement[4961-4979]"
    }, {
      "left" : "while (n < maxIterations)",
      "right" : "while (n < maxIterations)",
      "info" : "WhileStatement[5039-7137]:WhileStatement[4989-6072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5065-7137]:Block[5015-6072]"
    }, {
      "left" : "final double a = getA(n, x);",
      "right" : "final double a = getA(n, x);",
      "info" : "VariableDeclarationStatement[5079-5107]:VariableDeclarationStatement[5029-5057]"
    }, {
      "left" : "final double b = getB(n, x);",
      "right" : "final double b = getB(n, x);",
      "info" : "VariableDeclarationStatement[5120-5148]:VariableDeclarationStatement[5070-5098]"
    }, {
      "left" : "double q2 = a * q1 + b * dPrev;",
      "right" : "double dN = a + b * dPrev;",
      "info" : "VariableDeclarationStatement[5206-5237]:VariableDeclarationStatement[5112-5138]"
    }, {
      "left" : "hN = cPrev * deltaN;",
      "right" : "hN = hPrev * deltaN;",
      "info" : "ExpressionStatement[6462-6482]:ExpressionStatement[5447-5467]"
    }, {
      "left" : "if (Double.isInfinite(hN))",
      "right" : "if (Double.isInfinite(hN))",
      "info" : "IfStatement[6496-6693]:IfStatement[5481-5678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6523-6693]:Block[5508-5678]"
    }, {
      "left" : "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                               x);",
      "right" : "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                               x);",
      "info" : "ThrowStatement[6541-6679]:ThrowStatement[5526-5664]"
    }, {
      "left" : "if (Double.isNaN(hN))",
      "right" : "if (Double.isNaN(hN))",
      "info" : "IfStatement[6706-6893]:IfStatement[5691-5878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6728-6893]:Block[5713-5878]"
    }, {
      "left" : "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                               x);",
      "right" : "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                               x);",
      "info" : "ThrowStatement[6746-6879]:ThrowStatement[5731-5864]"
    }, {
      "left" : "if (FastMath.abs(deltaN - 1.0) < epsilon)",
      "right" : "if (FastMath.abs(deltaN - 1.0) < epsilon)",
      "info" : "IfStatement[6907-6987]:IfStatement[5892-5972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6949-6987]:Block[5934-5972]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6967-6973]:BreakStatement[5952-5958]"
    }, {
      "left" : "dPrev = q1;",
      "right" : "dPrev = dN;",
      "info" : "ExpressionStatement[7001-7012]:ExpressionStatement[5986-5997]"
    }, {
      "left" : "p0 = hPrev;",
      "right" : "cPrev = cN;",
      "info" : "ExpressionStatement[7054-7065]:ExpressionStatement[6010-6021]"
    }, {
      "left" : "hPrev = cN;",
      "right" : "hPrev = hN;",
      "info" : "ExpressionStatement[7078-7089]:ExpressionStatement[6034-6045]"
    }, {
      "left" : "n++;",
      "right" : "n++;",
      "info" : "ExpressionStatement[7123-7127]:ExpressionStatement[6058-6062]"
    }, {
      "left" : "if (n >= maxIterations)",
      "right" : "if (n >= maxIterations)",
      "info" : "IfStatement[7147-7349]:IfStatement[6082-6284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7171-7349]:Block[6106-6284]"
    }, {
      "left" : "throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);",
      "right" : "throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);",
      "info" : "ThrowStatement[7185-7339]:ThrowStatement[6120-6274]"
    }, {
      "left" : "return hN;",
      "right" : "return hN;",
      "info" : "ReturnStatement[7359-7369]:ReturnStatement[6294-6304]"
    } ]
  },
  "interFileMappings" : { }
}