{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[3287-3435]:FieldDeclaration[3287-3435]"
    }, {
      "left" : "public static final int FULL = DateFormat.FULL;",
      "right" : "public static final int FULL = DateFormat.FULL;",
      "info" : "FieldDeclaration[3441-3553]:FieldDeclaration[3441-3553]"
    }, {
      "left" : "public static final int LONG = DateFormat.LONG;",
      "right" : "public static final int LONG = DateFormat.LONG;",
      "info" : "FieldDeclaration[3558-3670]:FieldDeclaration[3558-3670]"
    }, {
      "left" : "public static final int MEDIUM = DateFormat.MEDIUM;",
      "right" : "public static final int MEDIUM = DateFormat.MEDIUM;",
      "info" : "FieldDeclaration[3675-3793]:FieldDeclaration[3675-3793]"
    }, {
      "left" : "public static final int SHORT = DateFormat.SHORT;",
      "right" : "public static final int SHORT = DateFormat.SHORT;",
      "info" : "FieldDeclaration[3798-3913]:FieldDeclaration[3798-3913]"
    }, {
      "left" : "private static String cDefaultPattern;",
      "right" : "private static String cDefaultPattern;",
      "info" : "FieldDeclaration[3923-3961]:FieldDeclaration[3923-3961]"
    }, {
      "left" : "private static Map cInstanceCache = new HashMap(7);",
      "right" : "private static Map cInstanceCache = new HashMap(7);",
      "info" : "FieldDeclaration[3967-4018]:FieldDeclaration[3967-4018]"
    }, {
      "left" : "private static Map cDateInstanceCache = new HashMap(7);",
      "right" : "private static Map cDateInstanceCache = new HashMap(7);",
      "info" : "FieldDeclaration[4023-4078]:FieldDeclaration[4023-4078]"
    }, {
      "left" : "private static Map cTimeInstanceCache = new HashMap(7);",
      "right" : "private static Map cTimeInstanceCache = new HashMap(7);",
      "info" : "FieldDeclaration[4083-4138]:FieldDeclaration[4083-4138]"
    }, {
      "left" : "private static Map cDateTimeInstanceCache = new HashMap(7);",
      "right" : "private static Map cDateTimeInstanceCache = new HashMap(7);",
      "info" : "FieldDeclaration[4143-4202]:FieldDeclaration[4143-4202]"
    }, {
      "left" : "private static Map cTimeZoneDisplayCache = new HashMap(7);",
      "right" : "private static Map cTimeZoneDisplayCache = new HashMap(7);",
      "info" : "FieldDeclaration[4207-4265]:FieldDeclaration[4207-4265]"
    }, {
      "left" : "private final String mPattern;",
      "right" : "private final String mPattern;",
      "info" : "FieldDeclaration[4271-4337]:FieldDeclaration[4271-4337]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[4342-4413]:FieldDeclaration[4342-4413]"
    }, {
      "left" : "private final boolean mTimeZoneForced;",
      "right" : "private final boolean mTimeZoneForced;",
      "info" : "FieldDeclaration[4418-4529]:FieldDeclaration[4418-4529]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[4534-4598]:FieldDeclaration[4534-4598]"
    }, {
      "left" : "private final boolean mLocaleForced;",
      "right" : "private final boolean mLocaleForced;",
      "info" : "FieldDeclaration[4603-4704]:FieldDeclaration[4603-4704]"
    }, {
      "left" : "private transient Rule[] mRules;",
      "right" : "private transient Rule[] mRules;",
      "info" : "FieldDeclaration[4709-4782]:FieldDeclaration[4709-4782]"
    }, {
      "left" : "private transient int mMaxLengthEstimate;",
      "right" : "private transient int mMaxLengthEstimate;",
      "info" : "FieldDeclaration[4787-4881]:FieldDeclaration[4787-4881]"
    }, {
      "left" : "public static FastDateFormat getInstance()",
      "right" : "public static FastDateFormat getInstance()",
      "info" : "MethodDeclaration[4965-5233]:MethodDeclaration[4965-5233]"
    }, {
      "left" : "public static FastDateFormat getInstance(String pattern)",
      "right" : "public static FastDateFormat getInstance(String pattern)",
      "info" : "MethodDeclaration[5239-5672]:MethodDeclaration[5239-5672]"
    }, {
      "left" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
      "right" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
      "info" : "MethodDeclaration[5678-6216]:MethodDeclaration[5678-6216]"
    }, {
      "left" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
      "right" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
      "info" : "MethodDeclaration[6222-6724]:MethodDeclaration[6222-6724]"
    }, {
      "left" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
      "right" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[6730-7738]:MethodDeclaration[6730-7738]"
    }, {
      "left" : "public static FastDateFormat getDateInstance(int style)",
      "right" : "public static FastDateFormat getDateInstance(int style)",
      "info" : "MethodDeclaration[7822-8296]:MethodDeclaration[7822-8296]"
    }, {
      "left" : "public static FastDateFormat getDateInstance(int style, Locale locale)",
      "right" : "public static FastDateFormat getDateInstance(int style, Locale locale)",
      "info" : "MethodDeclaration[8302-8856]:MethodDeclaration[8302-8856]"
    }, {
      "left" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
      "right" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
      "info" : "MethodDeclaration[8862-9449]:MethodDeclaration[8862-9449]"
    }, {
      "left" : "public static FastDateFormat getTimeInstance(int style)",
      "right" : "public static FastDateFormat getTimeInstance(int style)",
      "info" : "MethodDeclaration[11043-11517]:MethodDeclaration[10987-11461]"
    }, {
      "left" : "public static FastDateFormat getTimeInstance(int style, Locale locale)",
      "right" : "public static FastDateFormat getTimeInstance(int style, Locale locale)",
      "info" : "MethodDeclaration[11523-12077]:MethodDeclaration[11467-12021]"
    }, {
      "left" : "public static FastDateFormat getTimeInstance(int style, TimeZone timeZone)",
      "right" : "public static FastDateFormat getTimeInstance(int style, TimeZone timeZone)",
      "info" : "MethodDeclaration[12087-12674]:MethodDeclaration[12031-12618]"
    }, {
      "left" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
      "right" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[12684-14184]:MethodDeclaration[12628-14128]"
    }, {
      "left" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle)",
      "right" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle)",
      "info" : "MethodDeclaration[14268-14882]:MethodDeclaration[14212-14826]"
    }, {
      "left" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, Locale locale)",
      "right" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, Locale locale)",
      "info" : "MethodDeclaration[14892-15586]:MethodDeclaration[14836-15530]"
    }, {
      "left" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, TimeZone timeZone)",
      "right" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, TimeZone timeZone)",
      "info" : "MethodDeclaration[15596-16323]:MethodDeclaration[15540-16267]"
    }, {
      "left" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
      "right" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
      "info" : "MethodDeclaration[18118-18985]:MethodDeclaration[18006-18873]"
    }, {
      "left" : "private static synchronized String getDefaultPattern()",
      "right" : "private static synchronized String getDefaultPattern()",
      "info" : "MethodDeclaration[18991-19299]:MethodDeclaration[18879-19187]"
    }, {
      "left" : "protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale)",
      "right" : "protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[19402-20469]:MethodDeclaration[19290-20357]"
    }, {
      "left" : "protected void init()",
      "right" : "protected void init()",
      "info" : "MethodDeclaration[20475-20850]:MethodDeclaration[20363-20738]"
    }, {
      "left" : "protected List parsePattern()",
      "right" : "protected List parsePattern()",
      "info" : "MethodDeclaration[20959-26143]:MethodDeclaration[20847-26031]"
    }, {
      "left" : "protected String parseToken(String pattern, int[] indexRef)",
      "right" : "protected String parseToken(String pattern, int[] indexRef)",
      "info" : "MethodDeclaration[26149-27863]:MethodDeclaration[26037-27751]"
    }, {
      "left" : "protected NumberRule selectNumberRule(int field, int padding)",
      "right" : "protected NumberRule selectNumberRule(int field, int padding)",
      "info" : "MethodDeclaration[27869-28417]:MethodDeclaration[27757-28305]"
    }, {
      "left" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
      "right" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
      "info" : "MethodDeclaration[28523-29379]:MethodDeclaration[28411-29267]"
    }, {
      "left" : "public String format(long millis)",
      "right" : "public String format(long millis)",
      "info" : "MethodDeclaration[29385-29660]:MethodDeclaration[29273-29548]"
    }, {
      "left" : "public String format(Date date)",
      "right" : "public String format(Date date)",
      "info" : "MethodDeclaration[29666-30013]:MethodDeclaration[29554-29901]"
    }, {
      "left" : "public String format(Calendar calendar)",
      "right" : "public String format(Calendar calendar)",
      "info" : "MethodDeclaration[30019-30309]:MethodDeclaration[29907-30197]"
    }, {
      "left" : "public StringBuffer format(long millis, StringBuffer buf)",
      "right" : "public StringBuffer format(long millis, StringBuffer buf)",
      "info" : "MethodDeclaration[30315-30721]:MethodDeclaration[30203-30609]"
    }, {
      "left" : "public StringBuffer format(Date date, StringBuffer buf)",
      "right" : "public StringBuffer format(Date date, StringBuffer buf)",
      "info" : "MethodDeclaration[30727-31157]:MethodDeclaration[30615-31045]"
    }, {
      "left" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
      "right" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
      "info" : "MethodDeclaration[31163-31678]:MethodDeclaration[31051-31566]"
    }, {
      "left" : "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf)",
      "right" : "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf)",
      "info" : "MethodDeclaration[31684-32195]:MethodDeclaration[31572-32083]"
    }, {
      "left" : "public Object parseObject(String source, ParsePosition pos)",
      "right" : "public Object parseObject(String source, ParsePosition pos)",
      "info" : "MethodDeclaration[32294-32633]:MethodDeclaration[32182-32521]"
    }, {
      "left" : "public String getPattern()",
      "right" : "public String getPattern()",
      "info" : "MethodDeclaration[32738-32950]:MethodDeclaration[32626-32838]"
    }, {
      "left" : "public TimeZone getTimeZone()",
      "right" : "public TimeZone getTimeZone()",
      "info" : "MethodDeclaration[32956-33375]:MethodDeclaration[32844-33263]"
    }, {
      "left" : "public boolean getTimeZoneOverridesCalendar()",
      "right" : "public boolean getTimeZoneOverridesCalendar()",
      "info" : "MethodDeclaration[33381-33704]:MethodDeclaration[33269-33592]"
    }, {
      "left" : "public Locale getLocale()",
      "right" : "public Locale getLocale()",
      "info" : "MethodDeclaration[33710-33871]:MethodDeclaration[33598-33759]"
    }, {
      "left" : "public int getMaxLengthEstimate()",
      "right" : "public int getMaxLengthEstimate()",
      "info" : "MethodDeclaration[33877-34235]:MethodDeclaration[33765-34123]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[34333-35108]:MethodDeclaration[34221-34996]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[35114-35518]:MethodDeclaration[35002-35406]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[35524-35730]:MethodDeclaration[35412-35618]"
    }, {
      "left" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
      "right" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
      "info" : "MethodDeclaration[35833-36312]:MethodDeclaration[35721-36200]"
    }, {
      "left" : "Rule",
      "right" : "Rule",
      "info" : "TypeDeclaration[36413-36975]:TypeDeclaration[36301-36863]"
    }, {
      "left" : "int estimateLength();",
      "right" : "int estimateLength();",
      "info" : "MethodDeclaration[36505-36657]:MethodDeclaration[36393-36545]"
    }, {
      "left" : "void appendTo(StringBuffer buffer, Calendar calendar);",
      "right" : "void appendTo(StringBuffer buffer, Calendar calendar);",
      "info" : "MethodDeclaration[36675-36969]:MethodDeclaration[36563-36857]"
    }, {
      "left" : "NumberRule",
      "right" : "NumberRule",
      "info" : "TypeDeclaration[36981-37374]:TypeDeclaration[36869-37262]"
    }, {
      "left" : "void appendTo(StringBuffer buffer, int value);",
      "right" : "void appendTo(StringBuffer buffer, int value);",
      "info" : "MethodDeclaration[37100-37368]:MethodDeclaration[36988-37256]"
    }, {
      "left" : "CharacterLiteral",
      "right" : "CharacterLiteral",
      "info" : "TypeDeclaration[37380-38113]:TypeDeclaration[37268-38001]"
    }, {
      "left" : "private final char mValue;",
      "right" : "private final char mValue;",
      "info" : "FieldDeclaration[37525-37551]:FieldDeclaration[37413-37439]"
    }, {
      "left" : "CharacterLiteral(char value)",
      "right" : "CharacterLiteral(char value)",
      "info" : "MethodDeclaration[37561-37821]:MethodDeclaration[37449-37709]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[37831-37941]:MethodDeclaration[37719-37829]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[37951-38107]:MethodDeclaration[37839-37995]"
    }, {
      "left" : "StringLiteral",
      "right" : "StringLiteral",
      "info" : "TypeDeclaration[38119-38848]:TypeDeclaration[38007-38736]"
    }, {
      "left" : "private final String mValue;",
      "right" : "private final String mValue;",
      "info" : "FieldDeclaration[38251-38279]:FieldDeclaration[38139-38167]"
    }, {
      "left" : "StringLiteral(String value)",
      "right" : "StringLiteral(String value)",
      "info" : "MethodDeclaration[38289-38542]:MethodDeclaration[38177-38430]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[38552-38676]:MethodDeclaration[38440-38564]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[38686-38842]:MethodDeclaration[38574-38730]"
    }, {
      "left" : "TextField",
      "right" : "TextField",
      "info" : "TypeDeclaration[38854-39927]:TypeDeclaration[38742-39815]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[38987-39012]:FieldDeclaration[38875-38900]"
    }, {
      "left" : "private final String[] mValues;",
      "right" : "private final String[] mValues;",
      "info" : "FieldDeclaration[39021-39052]:FieldDeclaration[38909-38940]"
    }, {
      "left" : "TextField(int field, String[] values)",
      "right" : "TextField(int field, String[] values)",
      "info" : "MethodDeclaration[39062-39389]:MethodDeclaration[38950-39277]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[39399-39732]:MethodDeclaration[39287-39620]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[39742-39921]:MethodDeclaration[39630-39809]"
    }, {
      "left" : "UnpaddedNumberField",
      "right" : "UnpaddedNumberField",
      "info" : "TypeDeclaration[39933-41217]:TypeDeclaration[39821-41105]"
    }, {
      "left" : "static final UnpaddedNumberField INSTANCE_YEAR = new UnpaddedNumberField(Calendar.YEAR);",
      "right" : "static final UnpaddedNumberField INSTANCE_YEAR = new UnpaddedNumberField(Calendar.YEAR);",
      "info" : "FieldDeclaration[40078-40166]:FieldDeclaration[39966-40054]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[40184-40209]:FieldDeclaration[40072-40097]"
    }, {
      "left" : "UnpaddedNumberField(int field)",
      "right" : "UnpaddedNumberField(int field)",
      "info" : "MethodDeclaration[40219-40454]:MethodDeclaration[40107-40342]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[40464-40574]:MethodDeclaration[40352-40462]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[40584-40757]:MethodDeclaration[40472-40645]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[40767-41211]:MethodDeclaration[40655-41099]"
    }, {
      "left" : "UnpaddedMonthField",
      "right" : "UnpaddedMonthField",
      "info" : "TypeDeclaration[41223-42283]:TypeDeclaration[41111-42171]"
    }, {
      "left" : "static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();",
      "right" : "static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();",
      "info" : "FieldDeclaration[41366-41434]:FieldDeclaration[41254-41322]"
    }, {
      "left" : "UnpaddedMonthField()",
      "right" : "UnpaddedMonthField()",
      "info" : "MethodDeclaration[41444-41602]:MethodDeclaration[41332-41490]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[41612-41722]:MethodDeclaration[41500-41610]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[41732-41917]:MethodDeclaration[41620-41805]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[41927-42277]:MethodDeclaration[41815-42165]"
    }, {
      "left" : "PaddedNumberField",
      "right" : "PaddedNumberField",
      "info" : "TypeDeclaration[42289-44153]:TypeDeclaration[42177-44041]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[42429-42454]:FieldDeclaration[42317-42342]"
    }, {
      "left" : "private final int mSize;",
      "right" : "private final int mSize;",
      "info" : "FieldDeclaration[42463-42487]:FieldDeclaration[42351-42375]"
    }, {
      "left" : "PaddedNumberField(int field, int size)",
      "right" : "PaddedNumberField(int field, int size)",
      "info" : "MethodDeclaration[42497-42958]:MethodDeclaration[42385-42846]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[42968-43078]:MethodDeclaration[42856-42966]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[43088-43261]:MethodDeclaration[42976-43149]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[43271-44147]:MethodDeclaration[43159-44035]"
    }, {
      "left" : "TwoDigitNumberField",
      "right" : "TwoDigitNumberField",
      "info" : "TypeDeclaration[44159-45249]:TypeDeclaration[44047-45137]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[44304-44329]:FieldDeclaration[44192-44217]"
    }, {
      "left" : "TwoDigitNumberField(int field)",
      "right" : "TwoDigitNumberField(int field)",
      "info" : "MethodDeclaration[44339-44575]:MethodDeclaration[44227-44463]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[44585-44695]:MethodDeclaration[44473-44583]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[44705-44878]:MethodDeclaration[44593-44766]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[44888-45243]:MethodDeclaration[44776-45131]"
    }, {
      "left" : "TwoDigitYearField",
      "right" : "TwoDigitYearField",
      "info" : "TypeDeclaration[45255-46174]:TypeDeclaration[45143-46062]"
    }, {
      "left" : "static final TwoDigitYearField INSTANCE = new TwoDigitYearField();",
      "right" : "static final TwoDigitYearField INSTANCE = new TwoDigitYearField();",
      "info" : "FieldDeclaration[45396-45462]:FieldDeclaration[45284-45350]"
    }, {
      "left" : "TwoDigitYearField()",
      "right" : "TwoDigitYearField()",
      "info" : "MethodDeclaration[45472-45617]:MethodDeclaration[45360-45505]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[45627-45737]:MethodDeclaration[45515-45625]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[45747-45933]:MethodDeclaration[45635-45821]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[45943-46168]:MethodDeclaration[45831-46056]"
    }, {
      "left" : "TwoDigitMonthField",
      "right" : "TwoDigitMonthField",
      "info" : "TypeDeclaration[46180-47104]:TypeDeclaration[46068-46992]"
    }, {
      "left" : "static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();",
      "right" : "static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();",
      "info" : "FieldDeclaration[46323-46391]:FieldDeclaration[46211-46279]"
    }, {
      "left" : "TwoDigitMonthField()",
      "right" : "TwoDigitMonthField()",
      "info" : "MethodDeclaration[46401-46548]:MethodDeclaration[46289-46436]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[46558-46668]:MethodDeclaration[46446-46556]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[46678-46863]:MethodDeclaration[46566-46751]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[46873-47098]:MethodDeclaration[46761-46986]"
    }, {
      "left" : "TwelveHourField",
      "right" : "TwelveHourField",
      "info" : "TypeDeclaration[47110-48207]:TypeDeclaration[46998-48095]"
    }, {
      "left" : "private final NumberRule mRule;",
      "right" : "private final NumberRule mRule;",
      "info" : "FieldDeclaration[47254-47285]:FieldDeclaration[47142-47173]"
    }, {
      "left" : "TwelveHourField(NumberRule rule)",
      "right" : "TwelveHourField(NumberRule rule)",
      "info" : "MethodDeclaration[47295-47554]:MethodDeclaration[47183-47442]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[47564-47695]:MethodDeclaration[47452-47583]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[47705-48035]:MethodDeclaration[47593-47923]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, int value)",
      "right" : "public void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[48045-48201]:MethodDeclaration[47933-48089]"
    }, {
      "left" : "TwentyFourHourField",
      "right" : "TwentyFourHourField",
      "info" : "TypeDeclaration[48213-49336]:TypeDeclaration[48101-49224]"
    }, {
      "left" : "private final NumberRule mRule;",
      "right" : "private final NumberRule mRule;",
      "info" : "FieldDeclaration[48366-48397]:FieldDeclaration[48254-48285]"
    }, {
      "left" : "TwentyFourHourField(NumberRule rule)",
      "right" : "TwentyFourHourField(NumberRule rule)",
      "info" : "MethodDeclaration[48407-48674]:MethodDeclaration[48295-48562]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[48684-48815]:MethodDeclaration[48572-48703]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[48825-49164]:MethodDeclaration[48713-49052]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, int value)",
      "right" : "public void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[49174-49330]:MethodDeclaration[49062-49218]"
    }, {
      "left" : "TimeZoneNameRule",
      "right" : "TimeZoneNameRule",
      "info" : "TypeDeclaration[49342-51752]:TypeDeclaration[49230-51640]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[49476-49509]:FieldDeclaration[49364-49397]"
    }, {
      "left" : "private final boolean mTimeZoneForced;",
      "right" : "private final boolean mTimeZoneForced;",
      "info" : "FieldDeclaration[49518-49556]:FieldDeclaration[49406-49444]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[49565-49594]:FieldDeclaration[49453-49482]"
    }, {
      "left" : "private final int mStyle;",
      "right" : "private final int mStyle;",
      "info" : "FieldDeclaration[49603-49628]:FieldDeclaration[49491-49516]"
    }, {
      "left" : "private final String mStandard;",
      "right" : "private final String mStandard;",
      "info" : "FieldDeclaration[49637-49668]:FieldDeclaration[49525-49556]"
    }, {
      "left" : "private final String mDaylight;",
      "right" : "private final String mDaylight;",
      "info" : "FieldDeclaration[49677-49708]:FieldDeclaration[49565-49596]"
    }, {
      "left" : "TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style)",
      "right" : "TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style)",
      "info" : "MethodDeclaration[49718-50600]:MethodDeclaration[49606-50488]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[50610-50945]:MethodDeclaration[50498-50833]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[50955-51746]:MethodDeclaration[50843-51634]"
    }, {
      "left" : "TimeZoneNumberRule",
      "right" : "TimeZoneNumberRule",
      "info" : "TypeDeclaration[51758-53469]:TypeDeclaration[51646-53357]"
    }, {
      "left" : "static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);",
      "right" : "static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);",
      "info" : "FieldDeclaration[51954-52032]:FieldDeclaration[51842-51920]"
    }, {
      "left" : "static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);",
      "right" : "static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);",
      "info" : "FieldDeclaration[52041-52123]:FieldDeclaration[51929-52011]"
    }, {
      "left" : "final boolean mColon;",
      "right" : "final boolean mColon;",
      "info" : "FieldDeclaration[52141-52162]:FieldDeclaration[52029-52050]"
    }, {
      "left" : "TimeZoneNumberRule(boolean colon)",
      "right" : "TimeZoneNumberRule(boolean colon)",
      "info" : "MethodDeclaration[52180-52476]:MethodDeclaration[52068-52364]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[52486-52596]:MethodDeclaration[52374-52484]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[52606-53451]:MethodDeclaration[52494-53339]"
    }, {
      "left" : "TimeZoneDisplayKey",
      "right" : "TimeZoneDisplayKey",
      "info" : "TypeDeclaration[53553-55123]:TypeDeclaration[53441-55011]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[53694-53727]:FieldDeclaration[53582-53615]"
    }, {
      "left" : "private final int mStyle;",
      "right" : "private final int mStyle;",
      "info" : "FieldDeclaration[53736-53761]:FieldDeclaration[53624-53649]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[53770-53799]:FieldDeclaration[53658-53687]"
    }, {
      "left" : "TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale)",
      "right" : "TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale)",
      "info" : "MethodDeclaration[53809-54456]:MethodDeclaration[53697-54344]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[54466-54601]:MethodDeclaration[54354-54489]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[54611-55117]:MethodDeclaration[54499-55005]"
    }, {
      "left" : "Pair",
      "right" : "Pair",
      "info" : "TypeDeclaration[55207-56692]:TypeDeclaration[55095-56580]"
    }, {
      "left" : "private final Object mObj1;",
      "right" : "private final Object mObj1;",
      "info" : "FieldDeclaration[55422-55449]:FieldDeclaration[55310-55337]"
    }, {
      "left" : "private final Object mObj2;",
      "right" : "private final Object mObj2;",
      "info" : "FieldDeclaration[55458-55485]:FieldDeclaration[55346-55373]"
    }, {
      "left" : "public Pair(Object obj1, Object obj2)",
      "right" : "public Pair(Object obj1, Object obj2)",
      "info" : "MethodDeclaration[55495-55801]:MethodDeclaration[55383-55689]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[55811-56315]:MethodDeclaration[55699-56203]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[56325-56539]:MethodDeclaration[56213-56427]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[56549-56686]:MethodDeclaration[56437-56574]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5165-5233]:Block[5165-5233]"
    }, {
      "left" : "return getInstance(getDefaultPattern(), null, null);",
      "right" : "return getInstance(getDefaultPattern(), null, null);",
      "info" : "ReturnStatement[5175-5227]:ReturnStatement[5175-5227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5616-5672]:Block[5616-5672]"
    }, {
      "left" : "return getInstance(pattern, null, null);",
      "right" : "return getInstance(pattern, null, null);",
      "info" : "ReturnStatement[5626-5666]:ReturnStatement[5626-5666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6156-6216]:Block[6156-6216]"
    }, {
      "left" : "return getInstance(pattern, timeZone, null);",
      "right" : "return getInstance(pattern, timeZone, null);",
      "info" : "ReturnStatement[6166-6210]:ReturnStatement[6166-6210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6666-6724]:Block[6666-6724]"
    }, {
      "left" : "return getInstance(pattern, null, locale);",
      "right" : "return getInstance(pattern, null, locale);",
      "info" : "ReturnStatement[6676-6718]:ReturnStatement[6676-6718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7336-7738]:Block[7336-7738]"
    }, {
      "left" : "FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);",
      "right" : "FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);",
      "info" : "VariableDeclarationStatement[7346-7421]:VariableDeclarationStatement[7346-7421]"
    }, {
      "left" : "FastDateFormat format = (FastDateFormat) cInstanceCache.get(emptyFormat);",
      "right" : "FastDateFormat format = (FastDateFormat) cInstanceCache.get(emptyFormat);",
      "info" : "VariableDeclarationStatement[7430-7503]:VariableDeclarationStatement[7430-7503]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[7512-7709]:IfStatement[7512-7709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7532-7709]:Block[7532-7709]"
    }, {
      "left" : "format = emptyFormat;",
      "right" : "format = emptyFormat;",
      "info" : "ExpressionStatement[7546-7567]:ExpressionStatement[7546-7567]"
    }, {
      "left" : "format.init();",
      "right" : "format.init();",
      "info" : "ExpressionStatement[7580-7594]:ExpressionStatement[7580-7594]"
    }, {
      "left" : "cInstanceCache.put(format, format);",
      "right" : "cInstanceCache.put(format, format);",
      "info" : "ExpressionStatement[7648-7683]:ExpressionStatement[7648-7683]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[7718-7732]:ReturnStatement[7718-7732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8238-8296]:Block[8238-8296]"
    }, {
      "left" : "return getDateInstance(style, null, null);",
      "right" : "return getDateInstance(style, null, null);",
      "info" : "ReturnStatement[8248-8290]:ReturnStatement[8248-8290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8796-8856]:Block[8796-8856]"
    }, {
      "left" : "return getDateInstance(style, null, locale);",
      "right" : "return getDateInstance(style, null, locale);",
      "info" : "ReturnStatement[8806-8850]:ReturnStatement[8806-8850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9387-9449]:Block[9387-9449]"
    }, {
      "left" : "return getDateInstance(style, timeZone, null);",
      "right" : "return getDateInstance(style, timeZone, null);",
      "info" : "ReturnStatement[9397-9443]:ReturnStatement[9397-9443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11459-11517]:Block[11403-11461]"
    }, {
      "left" : "return getTimeInstance(style, null, null);",
      "right" : "return getTimeInstance(style, null, null);",
      "info" : "ReturnStatement[11469-11511]:ReturnStatement[11413-11455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12017-12077]:Block[11961-12021]"
    }, {
      "left" : "return getTimeInstance(style, null, locale);",
      "right" : "return getTimeInstance(style, null, locale);",
      "info" : "ReturnStatement[12027-12071]:ReturnStatement[11971-12015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12612-12674]:Block[12556-12618]"
    }, {
      "left" : "return getTimeInstance(style, timeZone, null);",
      "right" : "return getTimeInstance(style, timeZone, null);",
      "info" : "ReturnStatement[12622-12668]:ReturnStatement[12566-12612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13268-14184]:Block[13212-14128]"
    }, {
      "left" : "Object key = new Integer(style);",
      "right" : "Object key = new Integer(style);",
      "info" : "VariableDeclarationStatement[13278-13310]:VariableDeclarationStatement[13222-13254]"
    }, {
      "left" : "if (timeZone != null)",
      "right" : "if (timeZone != null)",
      "info" : "IfStatement[13319-13395]:IfStatement[13263-13339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13341-13395]:Block[13285-13339]"
    }, {
      "left" : "key = new Pair(key, timeZone);",
      "right" : "key = new Pair(key, timeZone);",
      "info" : "ExpressionStatement[13355-13385]:ExpressionStatement[13299-13329]"
    }, {
      "left" : "if (locale != null)",
      "right" : "if (locale != null)",
      "info" : "IfStatement[13404-13476]:IfStatement[13348-13420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13424-13476]:Block[13368-13420]"
    }, {
      "left" : "key = new Pair(key, locale);",
      "right" : "key = new Pair(key, locale);",
      "info" : "ExpressionStatement[13438-13466]:ExpressionStatement[13382-13410]"
    }, {
      "left" : "FastDateFormat format = (FastDateFormat) cTimeInstanceCache.get(key);",
      "right" : "FastDateFormat format = (FastDateFormat) cTimeInstanceCache.get(key);",
      "info" : "VariableDeclarationStatement[13486-13555]:VariableDeclarationStatement[13430-13499]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[13564-14155]:IfStatement[13508-14099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13584-14155]:Block[13528-14099]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[13598-13679]:IfStatement[13542-13623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13618-13679]:Block[13562-13623]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[13636-13665]:ExpressionStatement[13580-13609]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13693-14145]:TryStatement[13637-14089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13697-14006]:Block[13641-13950]"
    }, {
      "left" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);",
      "right" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);",
      "info" : "VariableDeclarationStatement[13715-13805]:VariableDeclarationStatement[13659-13749]"
    }, {
      "left" : "String pattern = formatter.toPattern();",
      "right" : "String pattern = formatter.toPattern();",
      "info" : "VariableDeclarationStatement[13822-13861]:VariableDeclarationStatement[13766-13805]"
    }, {
      "left" : "format = getInstance(pattern, timeZone, locale);",
      "right" : "format = getInstance(pattern, timeZone, locale);",
      "info" : "ExpressionStatement[13878-13926]:ExpressionStatement[13822-13870]"
    }, {
      "left" : "cTimeInstanceCache.put(key, format);",
      "right" : "cTimeInstanceCache.put(key, format);",
      "info" : "ExpressionStatement[13943-13979]:ExpressionStatement[13887-13923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14037-14145]:Block[13981-14089]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "right" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "info" : "ThrowStatement[14055-14131]:ThrowStatement[13999-14075]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[14164-14178]:ReturnStatement[14108-14122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14805-14882]:Block[14749-14826]"
    }, {
      "left" : "return getDateTimeInstance(dateStyle, timeStyle, null, null);",
      "right" : "return getDateTimeInstance(dateStyle, timeStyle, null, null);",
      "info" : "ReturnStatement[14815-14876]:ReturnStatement[14759-14820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15507-15586]:Block[15451-15530]"
    }, {
      "left" : "return getDateTimeInstance(dateStyle, timeStyle, null, locale);",
      "right" : "return getDateTimeInstance(dateStyle, timeStyle, null, locale);",
      "info" : "ReturnStatement[15517-15580]:ReturnStatement[15461-15524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16242-16323]:Block[16186-16267]"
    }, {
      "left" : "return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);",
      "right" : "return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);",
      "info" : "ReturnStatement[16252-16317]:ReturnStatement[16196-16261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18601-18985]:Block[18489-18873]"
    }, {
      "left" : "Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);",
      "right" : "Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);",
      "info" : "VariableDeclarationStatement[18611-18676]:VariableDeclarationStatement[18499-18564]"
    }, {
      "left" : "String value = (String) cTimeZoneDisplayCache.get(key);",
      "right" : "String value = (String) cTimeZoneDisplayCache.get(key);",
      "info" : "VariableDeclarationStatement[18685-18740]:VariableDeclarationStatement[18573-18628]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[18749-18957]:IfStatement[18637-18845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18768-18957]:Block[18656-18845]"
    }, {
      "left" : "value = tz.getDisplayName(daylight, style, locale);",
      "right" : "value = tz.getDisplayName(daylight, style, locale);",
      "info" : "ExpressionStatement[18845-18896]:ExpressionStatement[18733-18784]"
    }, {
      "left" : "cTimeZoneDisplayCache.put(key, value);",
      "right" : "cTimeZoneDisplayCache.put(key, value);",
      "info" : "ExpressionStatement[18909-18947]:ExpressionStatement[18797-18835]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[18966-18979]:ReturnStatement[18854-18867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19145-19299]:Block[19033-19187]"
    }, {
      "left" : "if (cDefaultPattern == null)",
      "right" : "if (cDefaultPattern == null)",
      "info" : "IfStatement[19155-19261]:IfStatement[19043-19149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19184-19261]:Block[19072-19149]"
    }, {
      "left" : "cDefaultPattern = new SimpleDateFormat().toPattern();",
      "right" : "cDefaultPattern = new SimpleDateFormat().toPattern();",
      "info" : "ExpressionStatement[19198-19251]:ExpressionStatement[19086-19139]"
    }, {
      "left" : "return cDefaultPattern;",
      "right" : "return cDefaultPattern;",
      "info" : "ReturnStatement[19270-19293]:ReturnStatement[19158-19181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19964-20469]:Block[19852-20357]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[19974-19982]:SuperConstructorInvocation[19862-19870]"
    }, {
      "left" : "if (pattern == null)",
      "right" : "if (pattern == null)",
      "info" : "IfStatement[19991-20103]:IfStatement[19879-19991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20012-20103]:Block[19900-19991]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The pattern must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The pattern must not be null\");",
      "info" : "ThrowStatement[20026-20093]:ThrowStatement[19914-19981]"
    }, {
      "left" : "mPattern = pattern;",
      "right" : "mPattern = pattern;",
      "info" : "ExpressionStatement[20112-20131]:ExpressionStatement[20000-20019]"
    }, {
      "left" : "mTimeZoneForced = (timeZone != null);",
      "right" : "mTimeZoneForced = (timeZone != null);",
      "info" : "ExpressionStatement[20149-20186]:ExpressionStatement[20037-20074]"
    }, {
      "left" : "if (timeZone == null)",
      "right" : "if (timeZone == null)",
      "info" : "IfStatement[20195-20274]:IfStatement[20083-20162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20217-20274]:Block[20105-20162]"
    }, {
      "left" : "timeZone = TimeZone.getDefault();",
      "right" : "timeZone = TimeZone.getDefault();",
      "info" : "ExpressionStatement[20231-20264]:ExpressionStatement[20119-20152]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[20283-20304]:ExpressionStatement[20171-20192]"
    }, {
      "left" : "mLocaleForced = (locale != null);",
      "right" : "mLocaleForced = (locale != null);",
      "info" : "ExpressionStatement[20322-20355]:ExpressionStatement[20210-20243]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[20364-20437]:IfStatement[20252-20325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20384-20437]:Block[20272-20325]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[20398-20427]:ExpressionStatement[20286-20315]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[20446-20463]:ExpressionStatement[20334-20351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20567-20850]:Block[20455-20738]"
    }, {
      "left" : "List rulesList = parsePattern();",
      "right" : "List rulesList = parsePattern();",
      "info" : "VariableDeclarationStatement[20577-20609]:VariableDeclarationStatement[20465-20497]"
    }, {
      "left" : "mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);",
      "right" : "mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);",
      "info" : "ExpressionStatement[20618-20682]:ExpressionStatement[20506-20570]"
    }, {
      "left" : "int len = 0;",
      "right" : "int len = 0;",
      "info" : "VariableDeclarationStatement[20692-20704]:VariableDeclarationStatement[20580-20592]"
    }, {
      "left" : "for (int i=mRules.length; --i >= 0)",
      "right" : "for (int i=mRules.length; --i >= 0)",
      "info" : "ForStatement[20713-20809]:ForStatement[20601-20697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20751-20809]:Block[20639-20697]"
    }, {
      "left" : "len += mRules[i].estimateLength();",
      "right" : "len += mRules[i].estimateLength();",
      "info" : "ExpressionStatement[20765-20799]:ExpressionStatement[20653-20687]"
    }, {
      "left" : "mMaxLengthEstimate = len;",
      "right" : "mMaxLengthEstimate = len;",
      "info" : "ExpressionStatement[20819-20844]:ExpressionStatement[20707-20732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21181-26143]:Block[21069-26031]"
    }, {
      "left" : "DateFormatSymbols symbols = new DateFormatSymbols(mLocale);",
      "right" : "DateFormatSymbols symbols = new DateFormatSymbols(mLocale);",
      "info" : "VariableDeclarationStatement[21191-21250]:VariableDeclarationStatement[21079-21138]"
    }, {
      "left" : "List rules = new ArrayList();",
      "right" : "List rules = new ArrayList();",
      "info" : "VariableDeclarationStatement[21259-21288]:VariableDeclarationStatement[21147-21176]"
    }, {
      "left" : "String[] ERAs = symbols.getEras();",
      "right" : "String[] ERAs = symbols.getEras();",
      "info" : "VariableDeclarationStatement[21298-21332]:VariableDeclarationStatement[21186-21220]"
    }, {
      "left" : "String[] months = symbols.getMonths();",
      "right" : "String[] months = symbols.getMonths();",
      "info" : "VariableDeclarationStatement[21341-21379]:VariableDeclarationStatement[21229-21267]"
    }, {
      "left" : "String[] shortMonths = symbols.getShortMonths();",
      "right" : "String[] shortMonths = symbols.getShortMonths();",
      "info" : "VariableDeclarationStatement[21388-21436]:VariableDeclarationStatement[21276-21324]"
    }, {
      "left" : "String[] weekdays = symbols.getWeekdays();",
      "right" : "String[] weekdays = symbols.getWeekdays();",
      "info" : "VariableDeclarationStatement[21445-21487]:VariableDeclarationStatement[21333-21375]"
    }, {
      "left" : "String[] shortWeekdays = symbols.getShortWeekdays();",
      "right" : "String[] shortWeekdays = symbols.getShortWeekdays();",
      "info" : "VariableDeclarationStatement[21496-21548]:VariableDeclarationStatement[21384-21436]"
    }, {
      "left" : "String[] AmPmStrings = symbols.getAmPmStrings();",
      "right" : "String[] AmPmStrings = symbols.getAmPmStrings();",
      "info" : "VariableDeclarationStatement[21557-21605]:VariableDeclarationStatement[21445-21493]"
    }, {
      "left" : "int length = mPattern.length();",
      "right" : "int length = mPattern.length();",
      "info" : "VariableDeclarationStatement[21615-21646]:VariableDeclarationStatement[21503-21534]"
    }, {
      "left" : "int[] indexRef = new int[1];",
      "right" : "int[] indexRef = new int[1];",
      "info" : "VariableDeclarationStatement[21655-21683]:VariableDeclarationStatement[21543-21571]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[21693-26114]:ForStatement[21581-26002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21726-26114]:Block[21614-26002]"
    }, {
      "left" : "indexRef[0] = i;",
      "right" : "indexRef[0] = i;",
      "info" : "ExpressionStatement[21740-21756]:ExpressionStatement[21628-21644]"
    }, {
      "left" : "String token = parseToken(mPattern, indexRef);",
      "right" : "String token = parseToken(mPattern, indexRef);",
      "info" : "VariableDeclarationStatement[21769-21815]:VariableDeclarationStatement[21657-21703]"
    }, {
      "left" : "i = indexRef[0];",
      "right" : "i = indexRef[0];",
      "info" : "ExpressionStatement[21828-21844]:ExpressionStatement[21716-21732]"
    }, {
      "left" : "int tokenLen = token.length();",
      "right" : "int tokenLen = token.length();",
      "info" : "VariableDeclarationStatement[21858-21888]:VariableDeclarationStatement[21746-21776]"
    }, {
      "left" : "if (tokenLen == 0)",
      "right" : "if (tokenLen == 0)",
      "info" : "IfStatement[21901-21958]:IfStatement[21789-21846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21920-21958]:Block[21808-21846]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21938-21944]:BreakStatement[21826-21832]"
    }, {
      "left" : "Rule rule;",
      "right" : "Rule rule;",
      "info" : "VariableDeclarationStatement[21972-21982]:VariableDeclarationStatement[21860-21870]"
    }, {
      "left" : "char c = token.charAt(0);",
      "right" : "char c = token.charAt(0);",
      "info" : "VariableDeclarationStatement[21995-22020]:VariableDeclarationStatement[21883-21908]"
    }, {
      "left" : "switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }",
      "right" : "switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }",
      "info" : "SwitchStatement[22034-26074]:SwitchStatement[21922-25962]"
    }, {
      "left" : "case 'G':",
      "right" : "case 'G':",
      "info" : "SwitchCase[22059-22068]:SwitchCase[21947-21956]"
    }, {
      "left" : "rule = new TextField(Calendar.ERA, ERAs);",
      "right" : "rule = new TextField(Calendar.ERA, ERAs);",
      "info" : "ExpressionStatement[22110-22151]:ExpressionStatement[21998-22039]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22168-22174]:BreakStatement[22056-22062]"
    }, {
      "left" : "case 'y':",
      "right" : "case 'y':",
      "info" : "SwitchCase[22187-22196]:SwitchCase[22075-22084]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[22230-22418]:IfStatement[22118-22306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22249-22338]:Block[22137-22226]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.YEAR, tokenLen);",
      "info" : "ExpressionStatement[22271-22320]:ExpressionStatement[22159-22208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22344-22418]:Block[22232-22306]"
    }, {
      "left" : "rule = TwoDigitYearField.INSTANCE;",
      "right" : "rule = TwoDigitYearField.INSTANCE;",
      "info" : "ExpressionStatement[22366-22400]:ExpressionStatement[22254-22288]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22435-22441]:BreakStatement[22323-22329]"
    }, {
      "left" : "case 'M':",
      "right" : "case 'M':",
      "info" : "SwitchCase[22454-22463]:SwitchCase[22342-22351]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[22515-22915]:IfStatement[22403-22803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22534-22619]:Block[22422-22507]"
    }, {
      "left" : "rule = new TextField(Calendar.MONTH, months);",
      "right" : "rule = new TextField(Calendar.MONTH, months);",
      "info" : "ExpressionStatement[22556-22601]:ExpressionStatement[22444-22489]"
    }, {
      "left" : "if (tokenLen == 3)",
      "right" : "if (tokenLen == 3)",
      "info" : "IfStatement[22625-22915]:IfStatement[22513-22803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22644-22734]:Block[22532-22622]"
    }, {
      "left" : "rule = new TextField(Calendar.MONTH, shortMonths);",
      "right" : "rule = new TextField(Calendar.MONTH, shortMonths);",
      "info" : "ExpressionStatement[22666-22716]:ExpressionStatement[22554-22604]"
    }, {
      "left" : "if (tokenLen == 2)",
      "right" : "if (tokenLen == 2)",
      "info" : "IfStatement[22740-22915]:IfStatement[22628-22803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22759-22834]:Block[22647-22722]"
    }, {
      "left" : "rule = TwoDigitMonthField.INSTANCE;",
      "right" : "rule = TwoDigitMonthField.INSTANCE;",
      "info" : "ExpressionStatement[22781-22816]:ExpressionStatement[22669-22704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22840-22915]:Block[22728-22803]"
    }, {
      "left" : "rule = UnpaddedMonthField.INSTANCE;",
      "right" : "rule = UnpaddedMonthField.INSTANCE;",
      "info" : "ExpressionStatement[22862-22897]:ExpressionStatement[22750-22785]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22932-22938]:BreakStatement[22820-22826]"
    }, {
      "left" : "case 'd':",
      "right" : "case 'd':",
      "info" : "SwitchCase[22951-22960]:SwitchCase[22839-22848]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);",
      "info" : "ExpressionStatement[23002-23059]:ExpressionStatement[22890-22947]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23076-23082]:BreakStatement[22964-22970]"
    }, {
      "left" : "case 'h':",
      "right" : "case 'h':",
      "info" : "SwitchCase[23095-23104]:SwitchCase[22983-22992]"
    }, {
      "left" : "rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));",
      "right" : "rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));",
      "info" : "ExpressionStatement[23154-23224]:ExpressionStatement[23042-23112]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23241-23247]:BreakStatement[23129-23135]"
    }, {
      "left" : "case 'H':",
      "right" : "case 'H':",
      "info" : "SwitchCase[23260-23269]:SwitchCase[23148-23157]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);",
      "info" : "ExpressionStatement[23317-23373]:ExpressionStatement[23205-23261]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23390-23396]:BreakStatement[23278-23284]"
    }, {
      "left" : "case 'm':",
      "right" : "case 'm':",
      "info" : "SwitchCase[23409-23418]:SwitchCase[23297-23306]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.MINUTE, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.MINUTE, tokenLen);",
      "info" : "ExpressionStatement[23462-23513]:ExpressionStatement[23350-23401]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23530-23536]:BreakStatement[23418-23424]"
    }, {
      "left" : "case 's':",
      "right" : "case 's':",
      "info" : "SwitchCase[23549-23558]:SwitchCase[23437-23446]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.SECOND, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.SECOND, tokenLen);",
      "info" : "ExpressionStatement[23604-23655]:ExpressionStatement[23492-23543]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23672-23678]:BreakStatement[23560-23566]"
    }, {
      "left" : "case 'S':",
      "right" : "case 'S':",
      "info" : "SwitchCase[23691-23700]:SwitchCase[23579-23588]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);",
      "info" : "ExpressionStatement[23741-23797]:ExpressionStatement[23629-23685]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23814-23820]:BreakStatement[23702-23708]"
    }, {
      "left" : "case 'E':",
      "right" : "case 'E':",
      "info" : "SwitchCase[23833-23842]:SwitchCase[23721-23730]"
    }, {
      "left" : "rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);",
      "right" : "rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);",
      "info" : "ExpressionStatement[23881-23965]:ExpressionStatement[23769-23853]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23982-23988]:BreakStatement[23870-23876]"
    }, {
      "left" : "case 'D':",
      "right" : "case 'D':",
      "info" : "SwitchCase[24001-24010]:SwitchCase[23889-23898]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);",
      "info" : "ExpressionStatement[24051-24107]:ExpressionStatement[23939-23995]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24124-24130]:BreakStatement[24012-24018]"
    }, {
      "left" : "case 'F':",
      "right" : "case 'F':",
      "info" : "SwitchCase[24143-24152]:SwitchCase[24031-24040]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);",
      "info" : "ExpressionStatement[24202-24267]:ExpressionStatement[24090-24155]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24284-24290]:BreakStatement[24172-24178]"
    }, {
      "left" : "case 'w':",
      "right" : "case 'w':",
      "info" : "SwitchCase[24303-24312]:SwitchCase[24191-24200]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);",
      "info" : "ExpressionStatement[24354-24411]:ExpressionStatement[24242-24299]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24428-24434]:BreakStatement[24316-24322]"
    }, {
      "left" : "case 'W':",
      "right" : "case 'W':",
      "info" : "SwitchCase[24447-24456]:SwitchCase[24335-24344]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);",
      "info" : "ExpressionStatement[24499-24557]:ExpressionStatement[24387-24445]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24574-24580]:BreakStatement[24462-24468]"
    }, {
      "left" : "case 'a':",
      "right" : "case 'a':",
      "info" : "SwitchCase[24593-24602]:SwitchCase[24481-24490]"
    }, {
      "left" : "rule = new TextField(Calendar.AM_PM, AmPmStrings);",
      "right" : "rule = new TextField(Calendar.AM_PM, AmPmStrings);",
      "info" : "ExpressionStatement[24642-24692]:ExpressionStatement[24530-24580]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24709-24715]:BreakStatement[24597-24603]"
    }, {
      "left" : "case 'k':",
      "right" : "case 'k':",
      "info" : "SwitchCase[24728-24737]:SwitchCase[24616-24625]"
    }, {
      "left" : "rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));",
      "right" : "rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));",
      "info" : "ExpressionStatement[24777-24858]:ExpressionStatement[24665-24746]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24875-24881]:BreakStatement[24763-24769]"
    }, {
      "left" : "case 'K':",
      "right" : "case 'K':",
      "info" : "SwitchCase[24894-24903]:SwitchCase[24782-24791]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.HOUR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.HOUR, tokenLen);",
      "info" : "ExpressionStatement[24945-24994]:ExpressionStatement[24833-24882]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25011-25017]:BreakStatement[24899-24905]"
    }, {
      "left" : "case 'z':",
      "right" : "case 'z':",
      "info" : "SwitchCase[25030-25039]:SwitchCase[24918-24927]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[25076-25342]:IfStatement[24964-25230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25095-25215]:Block[24983-25103]"
    }, {
      "left" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);",
      "right" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);",
      "info" : "ExpressionStatement[25117-25197]:ExpressionStatement[25005-25085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25221-25342]:Block[25109-25230]"
    }, {
      "left" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);",
      "right" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);",
      "info" : "ExpressionStatement[25243-25324]:ExpressionStatement[25131-25212]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25359-25365]:BreakStatement[25247-25253]"
    }, {
      "left" : "case 'Z':",
      "right" : "case 'Z':",
      "info" : "SwitchCase[25378-25387]:SwitchCase[25266-25275]"
    }, {
      "left" : "if (tokenLen == 1)",
      "right" : "if (tokenLen == 1)",
      "info" : "IfStatement[25425-25615]:IfStatement[25313-25503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25444-25528]:Block[25332-25416]"
    }, {
      "left" : "rule = TimeZoneNumberRule.INSTANCE_NO_COLON;",
      "right" : "rule = TimeZoneNumberRule.INSTANCE_NO_COLON;",
      "info" : "ExpressionStatement[25466-25510]:ExpressionStatement[25354-25398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25534-25615]:Block[25422-25503]"
    }, {
      "left" : "rule = TimeZoneNumberRule.INSTANCE_COLON;",
      "right" : "rule = TimeZoneNumberRule.INSTANCE_COLON;",
      "info" : "ExpressionStatement[25556-25597]:ExpressionStatement[25444-25485]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25632-25638]:BreakStatement[25520-25526]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[25651-25661]:SwitchCase[25539-25549]"
    }, {
      "left" : "String sub = token.substring(1);",
      "right" : "String sub = token.substring(1);",
      "info" : "VariableDeclarationStatement[25694-25726]:VariableDeclarationStatement[25582-25614]"
    }, {
      "left" : "if (sub.length() == 1)",
      "right" : "if (sub.length() == 1)",
      "info" : "IfStatement[25743-25925]:IfStatement[25631-25813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25766-25849]:Block[25654-25737]"
    }, {
      "left" : "rule = new CharacterLiteral(sub.charAt(0));",
      "right" : "rule = new CharacterLiteral(sub.charAt(0));",
      "info" : "ExpressionStatement[25788-25831]:ExpressionStatement[25676-25719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25855-25925]:Block[25743-25813]"
    }, {
      "left" : "rule = new StringLiteral(sub);",
      "right" : "rule = new StringLiteral(sub);",
      "info" : "ExpressionStatement[25877-25907]:ExpressionStatement[25765-25795]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25942-25948]:BreakStatement[25830-25836]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25961-25969]:SwitchCase[25849-25857]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Illegal pattern component: \" + token);",
      "right" : "throw new IllegalArgumentException(\"Illegal pattern component: \" + token);",
      "info" : "ThrowStatement[25986-26060]:ThrowStatement[25874-25948]"
    }, {
      "left" : "rules.add(rule);",
      "right" : "rules.add(rule);",
      "info" : "ExpressionStatement[26088-26104]:ExpressionStatement[25976-25992]"
    }, {
      "left" : "return rules;",
      "right" : "return rules;",
      "info" : "ReturnStatement[26124-26137]:ReturnStatement[26012-26025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26383-27863]:Block[26271-27751]"
    }, {
      "left" : "StringBuffer buf = new StringBuffer();",
      "right" : "StringBuffer buf = new StringBuffer();",
      "info" : "VariableDeclarationStatement[26393-26431]:VariableDeclarationStatement[26281-26319]"
    }, {
      "left" : "int i = indexRef[0];",
      "right" : "int i = indexRef[0];",
      "info" : "VariableDeclarationStatement[26441-26461]:VariableDeclarationStatement[26329-26349]"
    }, {
      "left" : "int length = pattern.length();",
      "right" : "int length = pattern.length();",
      "info" : "VariableDeclarationStatement[26470-26500]:VariableDeclarationStatement[26358-26388]"
    }, {
      "left" : "char c = pattern.charAt(i);",
      "right" : "char c = pattern.charAt(i);",
      "info" : "VariableDeclarationStatement[26510-26537]:VariableDeclarationStatement[26398-26425]"
    }, {
      "left" : "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')",
      "right" : "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')",
      "info" : "IfStatement[26546-27800]:IfStatement[26434-27688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26596-26996]:Block[26484-26884]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[26706-26720]:ExpressionStatement[26594-26608]"
    }, {
      "left" : "while (i + 1 < length)",
      "right" : "while (i + 1 < length)",
      "info" : "WhileStatement[26734-26986]:WhileStatement[26622-26874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26757-26986]:Block[26645-26874]"
    }, {
      "left" : "char peek = pattern.charAt(i + 1);",
      "right" : "char peek = pattern.charAt(i + 1);",
      "info" : "VariableDeclarationStatement[26775-26809]:VariableDeclarationStatement[26663-26697]"
    }, {
      "left" : "if (peek == c)",
      "right" : "if (peek == c)",
      "info" : "IfStatement[26826-26972]:IfStatement[26714-26860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26841-26920]:Block[26729-26808]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[26863-26877]:ExpressionStatement[26751-26765]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[26898-26902]:ExpressionStatement[26786-26790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26926-26972]:Block[26814-26860]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26948-26954]:BreakStatement[26836-26842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27002-27800]:Block[26890-27688]"
    }, {
      "left" : "buf.append('\\'');",
      "right" : "buf.append('\\'');",
      "info" : "ExpressionStatement[27065-27082]:ExpressionStatement[26953-26970]"
    }, {
      "left" : "boolean inLiteral = false;",
      "right" : "boolean inLiteral = false;",
      "info" : "VariableDeclarationStatement[27096-27122]:VariableDeclarationStatement[26984-27010]"
    }, {
      "left" : "for (; i < length; i++)",
      "right" : "for (; i < length; i++)",
      "info" : "ForStatement[27136-27790]:ForStatement[27024-27678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27160-27790]:Block[27048-27678]"
    }, {
      "left" : "c = pattern.charAt(i);",
      "right" : "c = pattern.charAt(i);",
      "info" : "ExpressionStatement[27178-27200]:ExpressionStatement[27066-27088]"
    }, {
      "left" : "if (c == '\\'')",
      "right" : "if (c == '\\'')",
      "info" : "IfStatement[27218-27776]:IfStatement[27106-27664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27233-27548]:Block[27121-27436]"
    }, {
      "left" : "if (i + 1 < length && pattern.charAt(i + 1) == '\\'')",
      "right" : "if (i + 1 < length && pattern.charAt(i + 1) == '\\'')",
      "info" : "IfStatement[27255-27530]:IfStatement[27143-27418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27308-27453]:Block[27196-27341]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[27388-27392]:ExpressionStatement[27276-27280]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[27417-27431]:ExpressionStatement[27305-27319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27459-27530]:Block[27347-27418]"
    }, {
      "left" : "inLiteral = !inLiteral;",
      "right" : "inLiteral = !inLiteral;",
      "info" : "ExpressionStatement[27485-27508]:ExpressionStatement[27373-27396]"
    }, {
      "left" : "if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'))",
      "right" : "if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'))",
      "info" : "IfStatement[27554-27776]:IfStatement[27442-27664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27645-27716]:Block[27533-27604]"
    }, {
      "left" : "i--;",
      "right" : "i--;",
      "info" : "ExpressionStatement[27667-27671]:ExpressionStatement[27555-27559]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27692-27698]:BreakStatement[27580-27586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27722-27776]:Block[27610-27664]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[27744-27758]:ExpressionStatement[27632-27646]"
    }, {
      "left" : "indexRef[0] = i;",
      "right" : "indexRef[0] = i;",
      "info" : "ExpressionStatement[27810-27826]:ExpressionStatement[27698-27714]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[27835-27857]:ReturnStatement[27723-27745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28164-28417]:Block[28052-28305]"
    }, {
      "left" : "switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }",
      "right" : "switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }",
      "info" : "SwitchStatement[28174-28411]:SwitchStatement[28062-28299]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[28201-28208]:SwitchCase[28089-28096]"
    }, {
      "left" : "return new UnpaddedNumberField(field);",
      "right" : "return new UnpaddedNumberField(field);",
      "info" : "ReturnStatement[28221-28259]:ReturnStatement[28109-28147]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[28268-28275]:SwitchCase[28156-28163]"
    }, {
      "left" : "return new TwoDigitNumberField(field);",
      "right" : "return new TwoDigitNumberField(field);",
      "info" : "ReturnStatement[28288-28326]:ReturnStatement[28176-28214]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[28335-28343]:SwitchCase[28223-28231]"
    }, {
      "left" : "return new PaddedNumberField(field, padding);",
      "right" : "return new PaddedNumberField(field, padding);",
      "info" : "ReturnStatement[28356-28401]:ReturnStatement[28244-28289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28914-29379]:Block[28802-29267]"
    }, {
      "left" : "if (obj instanceof Date)",
      "right" : "if (obj instanceof Date)",
      "info" : "IfStatement[28924-29373]:IfStatement[28812-29261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28949-29011]:Block[28837-28899]"
    }, {
      "left" : "return format((Date) obj, toAppendTo);",
      "right" : "return format((Date) obj, toAppendTo);",
      "info" : "ReturnStatement[28963-29001]:ReturnStatement[28851-28889]"
    }, {
      "left" : "if (obj instanceof Calendar)",
      "right" : "if (obj instanceof Calendar)",
      "info" : "IfStatement[29017-29373]:IfStatement[28905-29261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29046-29112]:Block[28934-29000]"
    }, {
      "left" : "return format((Calendar) obj, toAppendTo);",
      "right" : "return format((Calendar) obj, toAppendTo);",
      "info" : "ReturnStatement[29060-29102]:ReturnStatement[28948-28990]"
    }, {
      "left" : "if (obj instanceof Long)",
      "right" : "if (obj instanceof Long)",
      "info" : "IfStatement[29118-29373]:IfStatement[29006-29261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29143-29219]:Block[29031-29107]"
    }, {
      "left" : "return format(((Long) obj).longValue(), toAppendTo);",
      "right" : "return format(((Long) obj).longValue(), toAppendTo);",
      "info" : "ReturnStatement[29157-29209]:ReturnStatement[29045-29097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29225-29373]:Block[29113-29261]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unknown class: \" +\n                (obj == null ? \"<null>\" : obj.getClass().getName()));",
      "right" : "throw new IllegalArgumentException(\"Unknown class: \" +\n                (obj == null ? \"<null>\" : obj.getClass().getName()));",
      "info" : "ThrowStatement[29239-29363]:ThrowStatement[29127-29251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29612-29660]:Block[29500-29548]"
    }, {
      "left" : "return format(new Date(millis));",
      "right" : "return format(new Date(millis));",
      "info" : "ReturnStatement[29622-29654]:ReturnStatement[29510-29542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29847-30013]:Block[29735-29901]"
    }, {
      "left" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "right" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "info" : "VariableDeclarationStatement[29857-29903]:VariableDeclarationStatement[29745-29791]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[29912-29928]:ExpressionStatement[29800-29816]"
    }, {
      "left" : "return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();",
      "right" : "return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();",
      "info" : "ReturnStatement[29937-30007]:ReturnStatement[29825-29895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30220-30309]:Block[30108-30197]"
    }, {
      "left" : "return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();",
      "right" : "return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();",
      "info" : "ReturnStatement[30230-30303]:ReturnStatement[30118-30191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30668-30721]:Block[30556-30609]"
    }, {
      "left" : "return format(new Date(millis), buf);",
      "right" : "return format(new Date(millis), buf);",
      "info" : "ReturnStatement[30678-30715]:ReturnStatement[30566-30603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31035-31157]:Block[30923-31045]"
    }, {
      "left" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "right" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "info" : "VariableDeclarationStatement[31045-31091]:VariableDeclarationStatement[30933-30979]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[31100-31116]:ExpressionStatement[30988-31004]"
    }, {
      "left" : "return applyRules(c, buf);",
      "right" : "return applyRules(c, buf);",
      "info" : "ReturnStatement[31125-31151]:ReturnStatement[31013-31039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31491-31678]:Block[31379-31566]"
    }, {
      "left" : "if (mTimeZoneForced)",
      "right" : "if (mTimeZoneForced)",
      "info" : "IfStatement[31501-31630]:IfStatement[31389-31518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31522-31630]:Block[31410-31518]"
    }, {
      "left" : "calendar = (Calendar) calendar.clone();",
      "right" : "calendar = (Calendar) calendar.clone();",
      "info" : "ExpressionStatement[31536-31575]:ExpressionStatement[31424-31463]"
    }, {
      "left" : "calendar.setTimeZone(mTimeZone);",
      "right" : "calendar.setTimeZone(mTimeZone);",
      "info" : "ExpressionStatement[31588-31620]:ExpressionStatement[31476-31508]"
    }, {
      "left" : "return applyRules(calendar, buf);",
      "right" : "return applyRules(calendar, buf);",
      "info" : "ReturnStatement[31639-31672]:ReturnStatement[31527-31560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32008-32195]:Block[31896-32083]"
    }, {
      "left" : "Rule[] rules = mRules;",
      "right" : "Rule[] rules = mRules;",
      "info" : "VariableDeclarationStatement[32018-32040]:VariableDeclarationStatement[31906-31928]"
    }, {
      "left" : "int len = mRules.length;",
      "right" : "int len = mRules.length;",
      "info" : "VariableDeclarationStatement[32049-32073]:VariableDeclarationStatement[31937-31961]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[32082-32169]:ForStatement[31970-32057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32112-32169]:Block[32000-32057]"
    }, {
      "left" : "rules[i].appendTo(buf, calendar);",
      "right" : "rules[i].appendTo(buf, calendar);",
      "info" : "ExpressionStatement[32126-32159]:ExpressionStatement[32014-32047]"
    }, {
      "left" : "return buf;",
      "right" : "return buf;",
      "info" : "ReturnStatement[32178-32189]:ReturnStatement[32066-32077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32550-32633]:Block[32438-32521]"
    }, {
      "left" : "pos.setIndex(0);",
      "right" : "pos.setIndex(0);",
      "info" : "ExpressionStatement[32560-32576]:ExpressionStatement[32448-32464]"
    }, {
      "left" : "pos.setErrorIndex(0);",
      "right" : "pos.setErrorIndex(0);",
      "info" : "ExpressionStatement[32585-32606]:ExpressionStatement[32473-32494]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32615-32627]:ReturnStatement[32503-32515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32918-32950]:Block[32806-32838]"
    }, {
      "left" : "return mPattern;",
      "right" : "return mPattern;",
      "info" : "ReturnStatement[32928-32944]:ReturnStatement[32816-32832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33342-33375]:Block[33230-33263]"
    }, {
      "left" : "return mTimeZone;",
      "right" : "return mTimeZone;",
      "info" : "ReturnStatement[33352-33369]:ReturnStatement[33240-33257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33665-33704]:Block[33553-33592]"
    }, {
      "left" : "return mTimeZoneForced;",
      "right" : "return mTimeZoneForced;",
      "info" : "ReturnStatement[33675-33698]:ReturnStatement[33563-33586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33840-33871]:Block[33728-33759]"
    }, {
      "left" : "return mLocale;",
      "right" : "return mLocale;",
      "info" : "ReturnStatement[33850-33865]:ReturnStatement[33738-33753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34193-34235]:Block[34081-34123]"
    }, {
      "left" : "return mMaxLengthEstimate;",
      "right" : "return mMaxLengthEstimate;",
      "info" : "ReturnStatement[34203-34229]:ReturnStatement[34091-34117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34526-35108]:Block[34414-34996]"
    }, {
      "left" : "if (obj instanceof FastDateFormat == false)",
      "right" : "if (obj instanceof FastDateFormat == false)",
      "info" : "IfStatement[34536-34617]:IfStatement[34424-34505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34580-34617]:Block[34468-34505]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34594-34607]:ReturnStatement[34482-34495]"
    }, {
      "left" : "FastDateFormat other = (FastDateFormat) obj;",
      "right" : "FastDateFormat other = (FastDateFormat) obj;",
      "info" : "VariableDeclarationStatement[34626-34670]:VariableDeclarationStatement[34514-34558]"
    }, {
      "left" : "if (\n            (mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&\n            (mTimeZone == other.mTimeZone || mTimeZone.equals(other.mTimeZone)) &&\n            (mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&\n            (mTimeZoneForced == other.mTimeZoneForced) &&\n            (mLocaleForced == other.mLocaleForced))",
      "right" : "if (\n            (mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&\n            (mTimeZone == other.mTimeZone || mTimeZone.equals(other.mTimeZone)) &&\n            (mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&\n            (mTimeZoneForced == other.mTimeZoneForced) &&\n            (mLocaleForced == other.mLocaleForced))",
      "info" : "IfStatement[34679-35080]:IfStatement[34567-34968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35044-35080]:Block[34932-34968]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35058-35070]:ReturnStatement[34946-34958]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35089-35102]:ReturnStatement[34977-34990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35266-35518]:Block[35154-35406]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[35276-35290]:VariableDeclarationStatement[35164-35178]"
    }, {
      "left" : "total += mPattern.hashCode();",
      "right" : "total += mPattern.hashCode();",
      "info" : "ExpressionStatement[35299-35328]:ExpressionStatement[35187-35216]"
    }, {
      "left" : "total += mTimeZone.hashCode();",
      "right" : "total += mTimeZone.hashCode();",
      "info" : "ExpressionStatement[35337-35367]:ExpressionStatement[35225-35255]"
    }, {
      "left" : "total += (mTimeZoneForced ? 1 : 0);",
      "right" : "total += (mTimeZoneForced ? 1 : 0);",
      "info" : "ExpressionStatement[35376-35411]:ExpressionStatement[35264-35299]"
    }, {
      "left" : "total += mLocale.hashCode();",
      "right" : "total += mLocale.hashCode();",
      "info" : "ExpressionStatement[35420-35448]:ExpressionStatement[35308-35336]"
    }, {
      "left" : "total += (mLocaleForced ? 1 : 0);",
      "right" : "total += (mLocaleForced ? 1 : 0);",
      "info" : "ExpressionStatement[35457-35490]:ExpressionStatement[35345-35378]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[35499-35512]:ReturnStatement[35387-35400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35672-35730]:Block[35560-35618]"
    }, {
      "left" : "return \"FastDateFormat[\" + mPattern + \"]\";",
      "right" : "return \"FastDateFormat[\" + mPattern + \"]\";",
      "info" : "ReturnStatement[35682-35724]:ReturnStatement[35570-35612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36257-36312]:Block[36145-36200]"
    }, {
      "left" : "in.defaultReadObject();",
      "right" : "in.defaultReadObject();",
      "info" : "ExpressionStatement[36267-36290]:ExpressionStatement[36155-36178]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[36299-36306]:ExpressionStatement[36187-36194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37782-37821]:Block[37670-37709]"
    }, {
      "left" : "mValue = value;",
      "right" : "mValue = value;",
      "info" : "ExpressionStatement[37796-37811]:ExpressionStatement[37684-37699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37908-37941]:Block[37796-37829]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[37922-37931]:ReturnStatement[37810-37819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38061-38107]:Block[37949-37995]"
    }, {
      "left" : "buffer.append(mValue);",
      "right" : "buffer.append(mValue);",
      "info" : "ExpressionStatement[38075-38097]:ExpressionStatement[37963-37985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38503-38542]:Block[38391-38430]"
    }, {
      "left" : "mValue = value;",
      "right" : "mValue = value;",
      "info" : "ExpressionStatement[38517-38532]:ExpressionStatement[38405-38420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38629-38676]:Block[38517-38564]"
    }, {
      "left" : "return mValue.length();",
      "right" : "return mValue.length();",
      "info" : "ReturnStatement[38643-38666]:ReturnStatement[38531-38554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38796-38842]:Block[38684-38730]"
    }, {
      "left" : "buffer.append(mValue);",
      "right" : "buffer.append(mValue);",
      "info" : "ExpressionStatement[38810-38832]:ExpressionStatement[38698-38720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39320-39389]:Block[39208-39277]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[39334-39349]:ExpressionStatement[39222-39237]"
    }, {
      "left" : "mValues = values;",
      "right" : "mValues = values;",
      "info" : "ExpressionStatement[39362-39379]:ExpressionStatement[39250-39267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39476-39732]:Block[39364-39620]"
    }, {
      "left" : "int max = 0;",
      "right" : "int max = 0;",
      "info" : "VariableDeclarationStatement[39490-39502]:VariableDeclarationStatement[39378-39390]"
    }, {
      "left" : "for (int i=mValues.length; --i >= 0)",
      "right" : "for (int i=mValues.length; --i >= 0)",
      "info" : "ForStatement[39515-39698]:ForStatement[39403-39586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39554-39698]:Block[39442-39586]"
    }, {
      "left" : "int len = mValues[i].length();",
      "right" : "int len = mValues[i].length();",
      "info" : "VariableDeclarationStatement[39572-39602]:VariableDeclarationStatement[39460-39490]"
    }, {
      "left" : "if (len > max)",
      "right" : "if (len > max)",
      "info" : "IfStatement[39619-39684]:IfStatement[39507-39572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39634-39684]:Block[39522-39572]"
    }, {
      "left" : "max = len;",
      "right" : "max = len;",
      "info" : "ExpressionStatement[39656-39666]:ExpressionStatement[39544-39554]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[39711-39722]:ReturnStatement[39599-39610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39852-39921]:Block[39740-39809]"
    }, {
      "left" : "buffer.append(mValues[calendar.get(mField)]);",
      "right" : "buffer.append(mValues[calendar.get(mField)]);",
      "info" : "ExpressionStatement[39866-39911]:ExpressionStatement[39754-39799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40415-40454]:Block[40303-40342]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[40429-40444]:ExpressionStatement[40317-40332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40541-40574]:Block[40429-40462]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[40555-40564]:ReturnStatement[40443-40452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40694-40757]:Block[40582-40645]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[40708-40747]:ExpressionStatement[40596-40635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40875-41211]:Block[40763-41099]"
    }, {
      "left" : "if (value < 10)",
      "right" : "if (value < 10)",
      "info" : "IfStatement[40889-41201]:IfStatement[40777-41089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40905-40972]:Block[40793-40860]"
    }, {
      "left" : "buffer.append((char)(value + '0'));",
      "right" : "buffer.append((char)(value + '0'));",
      "info" : "ExpressionStatement[40923-40958]:ExpressionStatement[40811-40846]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[40978-41201]:IfStatement[40866-41089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40995-41124]:Block[40883-41012]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[41013-41053]:ExpressionStatement[40901-40941]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[41070-41110]:ExpressionStatement[40958-40998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41130-41201]:Block[41018-41089]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[41148-41187]:ExpressionStatement[41036-41075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41570-41602]:Block[41458-41490]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[41584-41592]:SuperConstructorInvocation[41472-41480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41689-41722]:Block[41577-41610]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[41703-41712]:ReturnStatement[41591-41600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41842-41917]:Block[41730-41805]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "right" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "info" : "ExpressionStatement[41856-41907]:ExpressionStatement[41744-41795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42035-42277]:Block[41923-42165]"
    }, {
      "left" : "if (value < 10)",
      "right" : "if (value < 10)",
      "info" : "IfStatement[42049-42267]:IfStatement[41937-42155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42065-42132]:Block[41953-42020]"
    }, {
      "left" : "buffer.append((char)(value + '0'));",
      "right" : "buffer.append((char)(value + '0'));",
      "info" : "ExpressionStatement[42083-42118]:ExpressionStatement[41971-42006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42138-42267]:Block[42026-42155]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[42156-42196]:ExpressionStatement[42044-42084]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[42213-42253]:ExpressionStatement[42101-42141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42723-42958]:Block[42611-42846]"
    }, {
      "left" : "if (size < 3)",
      "right" : "if (size < 3)",
      "info" : "IfStatement[42737-42894]:IfStatement[42625-42782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42751-42894]:Block[42639-42782]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[42843-42880]:ThrowStatement[42731-42768]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[42907-42922]:ExpressionStatement[42795-42810]"
    }, {
      "left" : "mSize = size;",
      "right" : "mSize = size;",
      "info" : "ExpressionStatement[42935-42948]:ExpressionStatement[42823-42836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43045-43078]:Block[42933-42966]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[43059-43068]:ReturnStatement[42947-42956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43198-43261]:Block[43086-43149]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[43212-43251]:ExpressionStatement[43100-43139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43379-44147]:Block[43267-44035]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[43393-44137]:IfStatement[43281-44025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43410-43647]:Block[43298-43535]"
    }, {
      "left" : "for (int i = mSize; --i >= 2)",
      "right" : "for (int i = mSize; --i >= 2)",
      "info" : "ForStatement[43428-43519]:ForStatement[43316-43407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43460-43519]:Block[43348-43407]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[43482-43501]:ExpressionStatement[43370-43389]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[43536-43576]:ExpressionStatement[43424-43464]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[43593-43633]:ExpressionStatement[43481-43521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43653-44137]:Block[43541-44025]"
    }, {
      "left" : "int digits;",
      "right" : "int digits;",
      "info" : "VariableDeclarationStatement[43671-43682]:VariableDeclarationStatement[43559-43570]"
    }, {
      "left" : "if (value < 1000)",
      "right" : "if (value < 1000)",
      "info" : "IfStatement[43699-43954]:IfStatement[43587-43842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43717-43768]:Block[43605-43656]"
    }, {
      "left" : "digits = 3;",
      "right" : "digits = 3;",
      "info" : "ExpressionStatement[43739-43750]:ExpressionStatement[43627-43638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43774-43954]:Block[43662-43842]"
    }, {
      "left" : "Validate.isTrue(value > -1, \"Negative values should not be possible\", value);",
      "right" : "Validate.isTrue(value > -1, \"Negative values should not be possible\", value);",
      "info" : "ExpressionStatement[43796-43873]:ExpressionStatement[43684-43761]"
    }, {
      "left" : "digits = Integer.toString(value).length();",
      "right" : "digits = Integer.toString(value).length();",
      "info" : "ExpressionStatement[43894-43936]:ExpressionStatement[43782-43824]"
    }, {
      "left" : "for (int i = mSize; --i >= digits)",
      "right" : "for (int i = mSize; --i >= digits)",
      "info" : "ForStatement[43971-44067]:ForStatement[43859-43955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44008-44067]:Block[43896-43955]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[44030-44049]:ExpressionStatement[43918-43937]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[44084-44123]:ExpressionStatement[43972-44011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44536-44575]:Block[44424-44463]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[44550-44565]:ExpressionStatement[44438-44453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44662-44695]:Block[44550-44583]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[44676-44685]:ReturnStatement[44564-44573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44815-44878]:Block[44703-44766]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[44829-44868]:ExpressionStatement[44717-44756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44996-45243]:Block[44884-45131]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[45010-45233]:IfStatement[44898-45121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45027-45156]:Block[44915-45044]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[45045-45085]:ExpressionStatement[44933-44973]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[45102-45142]:ExpressionStatement[44990-45030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45162-45233]:Block[45050-45121]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[45180-45219]:ExpressionStatement[45068-45107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45585-45617]:Block[45473-45505]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[45599-45607]:SuperConstructorInvocation[45487-45495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45704-45737]:Block[45592-45625]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[45718-45727]:ReturnStatement[45606-45615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45857-45933]:Block[45745-45821]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.YEAR) % 100);",
      "right" : "appendTo(buffer, calendar.get(Calendar.YEAR) % 100);",
      "info" : "ExpressionStatement[45871-45923]:ExpressionStatement[45759-45811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46051-46168]:Block[45939-46056]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[46065-46105]:ExpressionStatement[45953-45993]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[46118-46158]:ExpressionStatement[46006-46046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46516-46548]:Block[46404-46436]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[46530-46538]:SuperConstructorInvocation[46418-46426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46635-46668]:Block[46523-46556]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[46649-46658]:ReturnStatement[46537-46546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46788-46863]:Block[46676-46751]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "right" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "info" : "ExpressionStatement[46802-46853]:ExpressionStatement[46690-46741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46981-47098]:Block[46869-46986]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[46995-47035]:ExpressionStatement[46883-46923]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[47048-47088]:ExpressionStatement[46936-46976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47517-47554]:Block[47405-47442]"
    }, {
      "left" : "mRule = rule;",
      "right" : "mRule = rule;",
      "info" : "ExpressionStatement[47531-47544]:ExpressionStatement[47419-47432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47641-47695]:Block[47529-47583]"
    }, {
      "left" : "return mRule.estimateLength();",
      "right" : "return mRule.estimateLength();",
      "info" : "ReturnStatement[47655-47685]:ReturnStatement[47543-47573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47815-48035]:Block[47703-47923]"
    }, {
      "left" : "int value = calendar.get(Calendar.HOUR);",
      "right" : "int value = calendar.get(Calendar.HOUR);",
      "info" : "VariableDeclarationStatement[47829-47869]:VariableDeclarationStatement[47717-47757]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[47882-47982]:IfStatement[47770-47870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47898-47982]:Block[47786-47870]"
    }, {
      "left" : "value = calendar.getLeastMaximum(Calendar.HOUR) + 1;",
      "right" : "value = calendar.getLeastMaximum(Calendar.HOUR) + 1;",
      "info" : "ExpressionStatement[47916-47968]:ExpressionStatement[47804-47856]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[47995-48025]:ExpressionStatement[47883-47913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48147-48201]:Block[48035-48089]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[48161-48191]:ExpressionStatement[48049-48079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48637-48674]:Block[48525-48562]"
    }, {
      "left" : "mRule = rule;",
      "right" : "mRule = rule;",
      "info" : "ExpressionStatement[48651-48664]:ExpressionStatement[48539-48552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48761-48815]:Block[48649-48703]"
    }, {
      "left" : "return mRule.estimateLength();",
      "right" : "return mRule.estimateLength();",
      "info" : "ReturnStatement[48775-48805]:ReturnStatement[48663-48693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48935-49164]:Block[48823-49052]"
    }, {
      "left" : "int value = calendar.get(Calendar.HOUR_OF_DAY);",
      "right" : "int value = calendar.get(Calendar.HOUR_OF_DAY);",
      "info" : "VariableDeclarationStatement[48949-48996]:VariableDeclarationStatement[48837-48884]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[49009-49111]:IfStatement[48897-48999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49025-49111]:Block[48913-48999]"
    }, {
      "left" : "value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;",
      "right" : "value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;",
      "info" : "ExpressionStatement[49043-49097]:ExpressionStatement[48931-48985]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[49124-49154]:ExpressionStatement[49012-49042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49276-49330]:Block[49164-49218]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[49290-49320]:ExpressionStatement[49178-49208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50154-50600]:Block[50042-50488]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[50168-50189]:ExpressionStatement[50056-50077]"
    }, {
      "left" : "mTimeZoneForced = timeZoneForced;",
      "right" : "mTimeZoneForced = timeZoneForced;",
      "info" : "ExpressionStatement[50202-50235]:ExpressionStatement[50090-50123]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[50248-50265]:ExpressionStatement[50136-50153]"
    }, {
      "left" : "mStyle = style;",
      "right" : "mStyle = style;",
      "info" : "ExpressionStatement[50278-50293]:ExpressionStatement[50166-50181]"
    }, {
      "left" : "if (timeZoneForced)",
      "right" : "if (timeZoneForced)",
      "info" : "IfStatement[50307-50590]:IfStatement[50195-50478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50327-50501]:Block[50215-50389]"
    }, {
      "left" : "mStandard = getTimeZoneDisplay(timeZone, false, style, locale);",
      "right" : "mStandard = getTimeZoneDisplay(timeZone, false, style, locale);",
      "info" : "ExpressionStatement[50345-50408]:ExpressionStatement[50233-50296]"
    }, {
      "left" : "mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);",
      "right" : "mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);",
      "info" : "ExpressionStatement[50425-50487]:ExpressionStatement[50313-50375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50507-50590]:Block[50395-50478]"
    }, {
      "left" : "mStandard = null;",
      "right" : "mStandard = null;",
      "info" : "ExpressionStatement[50525-50542]:ExpressionStatement[50413-50430]"
    }, {
      "left" : "mDaylight = null;",
      "right" : "mDaylight = null;",
      "info" : "ExpressionStatement[50559-50576]:ExpressionStatement[50447-50464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50687-50945]:Block[50575-50833]"
    }, {
      "left" : "if (mTimeZoneForced)",
      "right" : "if (mTimeZoneForced)",
      "info" : "IfStatement[50701-50935]:IfStatement[50589-50823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50722-50810]:Block[50610-50698]"
    }, {
      "left" : "return Math.max(mStandard.length(), mDaylight.length());",
      "right" : "return Math.max(mStandard.length(), mDaylight.length());",
      "info" : "ReturnStatement[50740-50796]:ReturnStatement[50628-50684]"
    }, {
      "left" : "if (mStyle == TimeZone.SHORT)",
      "right" : "if (mStyle == TimeZone.SHORT)",
      "info" : "IfStatement[50816-50935]:IfStatement[50704-50823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50846-50887]:Block[50734-50775]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[50864-50873]:ReturnStatement[50752-50761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50893-50935]:Block[50781-50823]"
    }, {
      "left" : "return 40;",
      "right" : "return 40;",
      "info" : "ReturnStatement[50911-50921]:ReturnStatement[50799-50809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51065-51746]:Block[50953-51634]"
    }, {
      "left" : "if (mTimeZoneForced)",
      "right" : "if (mTimeZoneForced)",
      "info" : "IfStatement[51079-51736]:IfStatement[50967-51624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51100-51343]:Block[50988-51231]"
    }, {
      "left" : "if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "right" : "if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "info" : "IfStatement[51118-51329]:IfStatement[51006-51217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51193-51258]:Block[51081-51146]"
    }, {
      "left" : "buffer.append(mDaylight);",
      "right" : "buffer.append(mDaylight);",
      "info" : "ExpressionStatement[51215-51240]:ExpressionStatement[51103-51128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51264-51329]:Block[51152-51217]"
    }, {
      "left" : "buffer.append(mStandard);",
      "right" : "buffer.append(mStandard);",
      "info" : "ExpressionStatement[51286-51311]:ExpressionStatement[51174-51199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51349-51736]:Block[51237-51624]"
    }, {
      "left" : "TimeZone timeZone = calendar.getTimeZone();",
      "right" : "TimeZone timeZone = calendar.getTimeZone();",
      "info" : "VariableDeclarationStatement[51367-51410]:VariableDeclarationStatement[51255-51298]"
    }, {
      "left" : "if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "right" : "if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "info" : "IfStatement[51427-51722]:IfStatement[51315-51610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51501-51608]:Block[51389-51496]"
    }, {
      "left" : "buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));",
      "right" : "buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));",
      "info" : "ExpressionStatement[51523-51590]:ExpressionStatement[51411-51478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51614-51722]:Block[51502-51610]"
    }, {
      "left" : "buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));",
      "right" : "buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));",
      "info" : "ExpressionStatement[51636-51704]:ExpressionStatement[51524-51592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52437-52476]:Block[52325-52364]"
    }, {
      "left" : "mColon = colon;",
      "right" : "mColon = colon;",
      "info" : "ExpressionStatement[52451-52466]:ExpressionStatement[52339-52354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52563-52596]:Block[52451-52484]"
    }, {
      "left" : "return 5;",
      "right" : "return 5;",
      "info" : "ReturnStatement[52577-52586]:ReturnStatement[52465-52474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52716-53451]:Block[52604-53339]"
    }, {
      "left" : "int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);",
      "right" : "int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);",
      "info" : "VariableDeclarationStatement[52730-52814]:VariableDeclarationStatement[52618-52702]"
    }, {
      "left" : "if (offset < 0)",
      "right" : "if (offset < 0)",
      "info" : "IfStatement[52840-52998]:IfStatement[52728-52886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52856-52941]:Block[52744-52829]"
    }, {
      "left" : "buffer.append('-');",
      "right" : "buffer.append('-');",
      "info" : "ExpressionStatement[52874-52893]:ExpressionStatement[52762-52781]"
    }, {
      "left" : "offset = -offset;",
      "right" : "offset = -offset;",
      "info" : "ExpressionStatement[52910-52927]:ExpressionStatement[52798-52815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52947-52998]:Block[52835-52886]"
    }, {
      "left" : "buffer.append('+');",
      "right" : "buffer.append('+');",
      "info" : "ExpressionStatement[52965-52984]:ExpressionStatement[52853-52872]"
    }, {
      "left" : "int hours = offset / (60 * 60 * 1000);",
      "right" : "int hours = offset / (60 * 60 * 1000);",
      "info" : "VariableDeclarationStatement[53024-53062]:VariableDeclarationStatement[52912-52950]"
    }, {
      "left" : "buffer.append((char)(hours / 10 + '0'));",
      "right" : "buffer.append((char)(hours / 10 + '0'));",
      "info" : "ExpressionStatement[53075-53115]:ExpressionStatement[52963-53003]"
    }, {
      "left" : "buffer.append((char)(hours % 10 + '0'));",
      "right" : "buffer.append((char)(hours % 10 + '0'));",
      "info" : "ExpressionStatement[53128-53168]:ExpressionStatement[53016-53056]"
    }, {
      "left" : "if (mColon)",
      "right" : "if (mColon)",
      "info" : "IfStatement[53194-53257]:IfStatement[53082-53145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53206-53257]:Block[53094-53145]"
    }, {
      "left" : "buffer.append(':');",
      "right" : "buffer.append(':');",
      "info" : "ExpressionStatement[53224-53243]:ExpressionStatement[53112-53131]"
    }, {
      "left" : "int minutes = offset / (60 * 1000) - 60 * hours;",
      "right" : "int minutes = offset / (60 * 1000) - 60 * hours;",
      "info" : "VariableDeclarationStatement[53283-53331]:VariableDeclarationStatement[53171-53219]"
    }, {
      "left" : "buffer.append((char)(minutes / 10 + '0'));",
      "right" : "buffer.append((char)(minutes / 10 + '0'));",
      "info" : "ExpressionStatement[53344-53386]:ExpressionStatement[53232-53274]"
    }, {
      "left" : "buffer.append((char)(minutes % 10 + '0'));",
      "right" : "buffer.append((char)(minutes % 10 + '0'));",
      "info" : "ExpressionStatement[53399-53441]:ExpressionStatement[53287-53329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54274-54456]:Block[54162-54344]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[54288-54309]:ExpressionStatement[54176-54197]"
    }, {
      "left" : "if (daylight)",
      "right" : "if (daylight)",
      "info" : "IfStatement[54322-54388]:IfStatement[54210-54276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54336-54388]:Block[54224-54276]"
    }, {
      "left" : "style |= 0x80000000;",
      "right" : "style |= 0x80000000;",
      "info" : "ExpressionStatement[54354-54374]:ExpressionStatement[54242-54262]"
    }, {
      "left" : "mStyle = style;",
      "right" : "mStyle = style;",
      "info" : "ExpressionStatement[54401-54416]:ExpressionStatement[54289-54304]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[54429-54446]:ExpressionStatement[54317-54334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54537-54601]:Block[54425-54489]"
    }, {
      "left" : "return mStyle * 31 + mLocale.hashCode();",
      "right" : "return mStyle * 31 + mLocale.hashCode();",
      "info" : "ReturnStatement[54551-54591]:ReturnStatement[54439-54479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54694-55117]:Block[54582-55005]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[54708-54769]:IfStatement[54596-54657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54725-54769]:Block[54613-54657]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[54743-54755]:ReturnStatement[54631-54643]"
    }, {
      "left" : "if (obj instanceof TimeZoneDisplayKey)",
      "right" : "if (obj instanceof TimeZoneDisplayKey)",
      "info" : "IfStatement[54782-55081]:IfStatement[54670-54969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54821-55081]:Block[54709-54969]"
    }, {
      "left" : "TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;",
      "right" : "TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;",
      "info" : "VariableDeclarationStatement[54839-54890]:VariableDeclarationStatement[54727-54778]"
    }, {
      "left" : "return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);",
      "right" : "return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);",
      "info" : "ReturnStatement[54907-55067]:ReturnStatement[54795-54955]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55094-55107]:ReturnStatement[54982-54995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55738-55801]:Block[55626-55689]"
    }, {
      "left" : "mObj1 = obj1;",
      "right" : "mObj1 = obj1;",
      "info" : "ExpressionStatement[55752-55765]:ExpressionStatement[55640-55653]"
    }, {
      "left" : "mObj2 = obj2;",
      "right" : "mObj2 = obj2;",
      "info" : "ExpressionStatement[55778-55791]:ExpressionStatement[55666-55679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55894-56315]:Block[55782-56203]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[55908-55969]:IfStatement[55796-55857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55925-55969]:Block[55813-55857]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[55943-55955]:ReturnStatement[55831-55843]"
    }, {
      "left" : "if (!(obj instanceof Pair))",
      "right" : "if (!(obj instanceof Pair))",
      "info" : "IfStatement[55983-56056]:IfStatement[55871-55944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56011-56056]:Block[55899-55944]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56029-56042]:ReturnStatement[55917-55930]"
    }, {
      "left" : "Pair key = (Pair)obj;",
      "right" : "Pair key = (Pair)obj;",
      "info" : "VariableDeclarationStatement[56070-56091]:VariableDeclarationStatement[55958-55979]"
    }, {
      "left" : "return\n                (mObj1 == null ?\n                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n                (mObj2 == null ?\n                 key.mObj2 == null : mObj2.equals(key.mObj2));",
      "right" : "return\n                (mObj1 == null ?\n                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n                (mObj2 == null ?\n                 key.mObj2 == null : mObj2.equals(key.mObj2));",
      "info" : "ReturnStatement[56105-56305]:ReturnStatement[55993-56193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56396-56539]:Block[56284-56427]"
    }, {
      "left" : "return\n                (mObj1 == null ? 0 : mObj1.hashCode()) +\n                (mObj2 == null ? 0 : mObj2.hashCode());",
      "right" : "return\n                (mObj1 == null ? 0 : mObj1.hashCode()) +\n                (mObj2 == null ? 0 : mObj2.hashCode());",
      "info" : "ReturnStatement[56410-56529]:ReturnStatement[56298-56417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56623-56686]:Block[56511-56574]"
    }, {
      "left" : "return \"[\" + mObj1 + ':' + mObj2 + ']';",
      "right" : "return \"[\" + mObj1 + ':' + mObj2 + ']';",
      "info" : "ReturnStatement[56637-56676]:ReturnStatement[56525-56564]"
    } ]
  },
  "interFileMappings" : { }
}