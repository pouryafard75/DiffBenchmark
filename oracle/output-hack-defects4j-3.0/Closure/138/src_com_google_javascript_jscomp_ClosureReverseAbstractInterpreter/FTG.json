{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ClosureReverseAbstractInterpreter",
      "right" : "ClosureReverseAbstractInterpreter",
      "info" : "TypeDeclaration[1578-8485]:TypeDeclaration[1578-8438]"
    }, {
      "left" : "private final Visitor<JSType> restrictToArrayVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          // Ideally, we would like to return any subtype of Array.\n          // Since that's not possible, we don't restrict the type.\n          return topType;\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          JSType arrayType = getNativeType(ARRAY_TYPE);\n          return arrayType.isSubtype(type) ? arrayType : null;\n        }\n      };",
      "right" : "private final Visitor<JSType> restrictToArrayVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          // Ideally, we would like to return any subtype of Array.\n          // Since that's not possible, we don't restrict the type.\n          return topType;\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          JSType arrayType = getNativeType(ARRAY_TYPE);\n          return arrayType.isSubtype(type) ? arrayType : null;\n        }\n      };",
      "info" : "FieldDeclaration[1785-2406]:FieldDeclaration[1785-2406]"
    }, {
      "left" : "protected JSType caseTopType(JSType topType)",
      "right" : "protected JSType caseTopType(JSType topType)",
      "info" : "MethodDeclaration[1957-2193]:MethodDeclaration[1957-2193]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[2203-2397]:MethodDeclaration[2203-2397]"
    }, {
      "left" : "private final Visitor<JSType> restrictToNotArrayVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type;\n        }\n      };",
      "right" : "private final Visitor<JSType> restrictToNotArrayVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type;\n        }\n      };",
      "info" : "FieldDeclaration[2410-2745]:FieldDeclaration[2410-2745]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[2587-2736]:MethodDeclaration[2587-2736]"
    }, {
      "left" : "private final Visitor<JSType> restrictToObjectVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          return getNativeType(NO_OBJECT_TYPE);\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return type;\n        }\n      };",
      "right" : "private final Visitor<JSType> restrictToObjectVisitor =\n      new RestrictByTrueTypeOfResultVisitor() {\n        @Override\n        protected JSType caseTopType(JSType topType) {\n          return getNativeType(NO_OBJECT_TYPE);\n        }\n\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return type;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return type;\n        }\n      };",
      "info" : "FieldDeclaration[2749-3326]:FieldDeclaration[2749-3326]"
    }, {
      "left" : "protected JSType caseTopType(JSType topType)",
      "right" : "protected JSType caseTopType(JSType topType)",
      "info" : "MethodDeclaration[2975-3097]:MethodDeclaration[2975-3097]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[3107-3205]:MethodDeclaration[3107-3205]"
    }, {
      "left" : "public JSType caseFunctionType(FunctionType type)",
      "right" : "public JSType caseFunctionType(FunctionType type)",
      "info" : "MethodDeclaration[3215-3317]:MethodDeclaration[3215-3317]"
    }, {
      "left" : "private final Visitor<JSType> restrictToNotObjectVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return null;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return null;\n        }\n      };",
      "right" : "private final Visitor<JSType> restrictToNotObjectVisitor =\n      new RestrictByFalseTypeOfResultVisitor() {\n        @Override\n        public JSType caseObjectType(ObjectType type) {\n          return null;\n        }\n\n        @Override\n        public JSType caseFunctionType(FunctionType type) {\n          return null;\n        }\n      };",
      "info" : "FieldDeclaration[3330-3728]:FieldDeclaration[3330-3728]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[3509-3607]:MethodDeclaration[3509-3607]"
    }, {
      "left" : "public JSType caseFunctionType(FunctionType type)",
      "right" : "public JSType caseFunctionType(FunctionType type)",
      "info" : "MethodDeclaration[3617-3719]:MethodDeclaration[3617-3719]"
    }, {
      "left" : "private Map<String, Function<TypeRestriction, JSType>> restricters;",
      "right" : "private Map<String, Function<TypeRestriction, JSType>> restricters;",
      "info" : "FieldDeclaration[3732-3842]:FieldDeclaration[3732-3842]"
    }, {
      "left" : "ClosureReverseAbstractInterpreter(CodingConvention convention,\n      final JSTypeRegistry typeRegistry)",
      "right" : "ClosureReverseAbstractInterpreter(CodingConvention convention,\n      final JSTypeRegistry typeRegistry)",
      "info" : "MethodDeclaration[3846-6694]:MethodDeclaration[3846-6694]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[4228-4420]:MethodDeclaration[4228-4420]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[4501-4707]:MethodDeclaration[4501-4707]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[4797-5031]:MethodDeclaration[4797-5031]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[5114-5239]:MethodDeclaration[5114-5239]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[5323-5449]:MethodDeclaration[5323-5449]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[5532-5657]:MethodDeclaration[5532-5657]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[5742-5869]:MethodDeclaration[5742-5869]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[5951-6265]:MethodDeclaration[5951-6265]"
    }, {
      "left" : "public JSType apply(TypeRestriction p)",
      "right" : "public JSType apply(TypeRestriction p)",
      "info" : "MethodDeclaration[6348-6665]:MethodDeclaration[6348-6665]"
    }, {
      "left" : "public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome)",
      "right" : "public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome)",
      "info" : "MethodDeclaration[6698-7760]:MethodDeclaration[6698-7713]"
    }, {
      "left" : "private FlowScope restrictParameter(Node parameter, JSType type,\n      FlowScope blindScope, Function<TypeRestriction, JSType> restriction,\n      boolean outcome)",
      "right" : "private FlowScope restrictParameter(Node parameter, JSType type,\n      FlowScope blindScope, Function<TypeRestriction, JSType> restriction,\n      boolean outcome)",
      "info" : "MethodDeclaration[7764-8250]:MethodDeclaration[7717-8203]"
    }, {
      "left" : "TypeRestriction",
      "right" : "TypeRestriction",
      "info" : "TypeDeclaration[8254-8483]:TypeDeclaration[8207-8436]"
    }, {
      "left" : "private final JSType type;",
      "right" : "private final JSType type;",
      "info" : "FieldDeclaration[8297-8323]:FieldDeclaration[8250-8276]"
    }, {
      "left" : "private final boolean outcome;",
      "right" : "private final boolean outcome;",
      "info" : "FieldDeclaration[8328-8358]:FieldDeclaration[8281-8311]"
    }, {
      "left" : "private TypeRestriction(JSType type, boolean outcome)",
      "right" : "private TypeRestriction(JSType type, boolean outcome)",
      "info" : "MethodDeclaration[8364-8479]:MethodDeclaration[8317-8432]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1692-1697]:TYPE_DECLARATION_KIND[1692-1697]"
    }, {
      "left" : "ClosureReverseAbstractInterpreter",
      "right" : "ClosureReverseAbstractInterpreter",
      "info" : "SimpleName[1698-1731]:SimpleName[1698-1731]"
    }, {
      "left" : "ChainableReverseAbstractInterpreter",
      "right" : "ChainableReverseAbstractInterpreter",
      "info" : "SimpleType[1744-1779]:SimpleType[1744-1779]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1957-1966]:MarkerAnnotation[1957-1966]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1975-1984]:Modifier[1975-1984]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[1985-1991]:SimpleType[1985-1991]"
    }, {
      "left" : "caseTopType",
      "right" : "caseTopType",
      "info" : "SimpleName[1992-2003]:SimpleName[1992-2003]"
    }, {
      "left" : "JSType topType",
      "right" : "JSType topType",
      "info" : "SingleVariableDeclaration[2004-2018]:SingleVariableDeclaration[2004-2018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2020-2193]:Block[2020-2193]"
    }, {
      "left" : "return topType;",
      "right" : "return topType;",
      "info" : "ReturnStatement[2168-2183]:ReturnStatement[2168-2183]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2203-2212]:MarkerAnnotation[2203-2212]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2221-2227]:Modifier[2221-2227]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[2228-2234]:SimpleType[2228-2234]"
    }, {
      "left" : "caseObjectType",
      "right" : "caseObjectType",
      "info" : "SimpleName[2235-2249]:SimpleName[2235-2249]"
    }, {
      "left" : "ObjectType type",
      "right" : "ObjectType type",
      "info" : "SingleVariableDeclaration[2250-2265]:SingleVariableDeclaration[2250-2265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2267-2397]:Block[2267-2397]"
    }, {
      "left" : "JSType arrayType = getNativeType(ARRAY_TYPE);",
      "right" : "JSType arrayType = getNativeType(ARRAY_TYPE);",
      "info" : "VariableDeclarationStatement[2279-2324]:VariableDeclarationStatement[2279-2324]"
    }, {
      "left" : "return arrayType.isSubtype(type) ? arrayType : null;",
      "right" : "return arrayType.isSubtype(type) ? arrayType : null;",
      "info" : "ReturnStatement[2335-2387]:ReturnStatement[2335-2387]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2587-2596]:MarkerAnnotation[2587-2596]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2605-2611]:Modifier[2605-2611]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[2612-2618]:SimpleType[2612-2618]"
    }, {
      "left" : "caseObjectType",
      "right" : "caseObjectType",
      "info" : "SimpleName[2619-2633]:SimpleName[2619-2633]"
    }, {
      "left" : "ObjectType type",
      "right" : "ObjectType type",
      "info" : "SingleVariableDeclaration[2634-2649]:SingleVariableDeclaration[2634-2649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2651-2736]:Block[2651-2736]"
    }, {
      "left" : "return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type;",
      "right" : "return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type;",
      "info" : "ReturnStatement[2663-2726]:ReturnStatement[2663-2726]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2975-2984]:MarkerAnnotation[2975-2984]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2993-3002]:Modifier[2993-3002]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[3003-3009]:SimpleType[3003-3009]"
    }, {
      "left" : "caseTopType",
      "right" : "caseTopType",
      "info" : "SimpleName[3010-3021]:SimpleName[3010-3021]"
    }, {
      "left" : "JSType topType",
      "right" : "JSType topType",
      "info" : "SingleVariableDeclaration[3022-3036]:SingleVariableDeclaration[3022-3036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3038-3097]:Block[3038-3097]"
    }, {
      "left" : "return getNativeType(NO_OBJECT_TYPE);",
      "right" : "return getNativeType(NO_OBJECT_TYPE);",
      "info" : "ReturnStatement[3050-3087]:ReturnStatement[3050-3087]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3107-3116]:MarkerAnnotation[3107-3116]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3125-3131]:Modifier[3125-3131]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[3132-3138]:SimpleType[3132-3138]"
    }, {
      "left" : "caseObjectType",
      "right" : "caseObjectType",
      "info" : "SimpleName[3139-3153]:SimpleName[3139-3153]"
    }, {
      "left" : "ObjectType type",
      "right" : "ObjectType type",
      "info" : "SingleVariableDeclaration[3154-3169]:SingleVariableDeclaration[3154-3169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3171-3205]:Block[3171-3205]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[3183-3195]:ReturnStatement[3183-3195]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3215-3224]:MarkerAnnotation[3215-3224]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3233-3239]:Modifier[3233-3239]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[3240-3246]:SimpleType[3240-3246]"
    }, {
      "left" : "caseFunctionType",
      "right" : "caseFunctionType",
      "info" : "SimpleName[3247-3263]:SimpleName[3247-3263]"
    }, {
      "left" : "FunctionType type",
      "right" : "FunctionType type",
      "info" : "SingleVariableDeclaration[3264-3281]:SingleVariableDeclaration[3264-3281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3283-3317]:Block[3283-3317]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[3295-3307]:ReturnStatement[3295-3307]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3509-3518]:MarkerAnnotation[3509-3518]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3527-3533]:Modifier[3527-3533]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[3534-3540]:SimpleType[3534-3540]"
    }, {
      "left" : "caseObjectType",
      "right" : "caseObjectType",
      "info" : "SimpleName[3541-3555]:SimpleName[3541-3555]"
    }, {
      "left" : "ObjectType type",
      "right" : "ObjectType type",
      "info" : "SingleVariableDeclaration[3556-3571]:SingleVariableDeclaration[3556-3571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3573-3607]:Block[3573-3607]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3585-3597]:ReturnStatement[3585-3597]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3617-3626]:MarkerAnnotation[3617-3626]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3635-3641]:Modifier[3635-3641]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[3642-3648]:SimpleType[3642-3648]"
    }, {
      "left" : "caseFunctionType",
      "right" : "caseFunctionType",
      "info" : "SimpleName[3649-3665]:SimpleName[3649-3665]"
    }, {
      "left" : "FunctionType type",
      "right" : "FunctionType type",
      "info" : "SingleVariableDeclaration[3666-3683]:SingleVariableDeclaration[3666-3683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3685-3719]:Block[3685-3719]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3697-3709]:ReturnStatement[3697-3709]"
    }, {
      "left" : "ClosureReverseAbstractInterpreter",
      "right" : "ClosureReverseAbstractInterpreter",
      "info" : "SimpleName[3916-3949]:SimpleName[3916-3949]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[3950-3977]:SingleVariableDeclaration[3950-3977]"
    }, {
      "left" : "final JSTypeRegistry typeRegistry",
      "right" : "final JSTypeRegistry typeRegistry",
      "info" : "SingleVariableDeclaration[3985-4018]:SingleVariableDeclaration[3985-4018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4020-6694]:Block[4020-6694]"
    }, {
      "left" : "super(convention, typeRegistry);",
      "right" : "super(convention, typeRegistry);",
      "info" : "SuperConstructorInvocation[4026-4058]:SuperConstructorInvocation[4026-4058]"
    }, {
      "left" : "this.restricters =\n      new ImmutableMap.Builder<String, Function<TypeRestriction, JSType>>()\n      .put(\"isDef\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getRestrictedWithoutUndefined(p.type);\n          } else {\n            return null;\n          }\n         }\n      })\n      .put(\"isNull\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getNativeType(NULL_TYPE);\n          } else {\n            return getRestrictedWithoutNull(p.type);\n          }\n        }\n      })\n      .put(\"isDefAndNotNull\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getRestrictedWithoutUndefined(\n                getRestrictedWithoutNull(p.type));\n          } else {\n            return null;\n          }\n        }\n      })\n      .put(\"isString\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);\n        }\n      })\n      .put(\"isBoolean\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome);\n        }\n      })\n      .put(\"isNumber\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);\n        }\n      })\n      .put(\"isFunction\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome);\n        }\n      })\n      .put(\"isArray\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.type == null) {\n            return p.outcome ? getNativeType(ARRAY_TYPE) : null;\n          }\n\n          Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :\n              restrictToNotArrayVisitor;\n          return p.type.visit(visitor);\n        }\n      })\n      .put(\"isObject\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.type == null) {\n            return p.outcome ? getNativeType(OBJECT_TYPE) : null;\n          }\n\n          Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :\n              restrictToNotObjectVisitor;\n          return p.type.visit(visitor);\n        }\n      })\n      .build();",
      "right" : "this.restricters =\n      new ImmutableMap.Builder<String, Function<TypeRestriction, JSType>>()\n      .put(\"isDef\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getRestrictedWithoutUndefined(p.type);\n          } else {\n            return null;\n          }\n         }\n      })\n      .put(\"isNull\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getNativeType(NULL_TYPE);\n          } else {\n            return getRestrictedWithoutNull(p.type);\n          }\n        }\n      })\n      .put(\"isDefAndNotNull\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.outcome) {\n            return getRestrictedWithoutUndefined(\n                getRestrictedWithoutNull(p.type));\n          } else {\n            return null;\n          }\n        }\n      })\n      .put(\"isString\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);\n        }\n      })\n      .put(\"isBoolean\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome);\n        }\n      })\n      .put(\"isNumber\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);\n        }\n      })\n      .put(\"isFunction\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome);\n        }\n      })\n      .put(\"isArray\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.type == null) {\n            return p.outcome ? getNativeType(ARRAY_TYPE) : null;\n          }\n\n          Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :\n              restrictToNotArrayVisitor;\n          return p.type.visit(visitor);\n        }\n      })\n      .put(\"isObject\", new Function<TypeRestriction, JSType>() {\n        public JSType apply(TypeRestriction p) {\n          if (p.type == null) {\n            return p.outcome ? getNativeType(OBJECT_TYPE) : null;\n          }\n\n          Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :\n              restrictToNotObjectVisitor;\n          return p.type.visit(visitor);\n        }\n      })\n      .build();",
      "info" : "ExpressionStatement[4063-6690]:ExpressionStatement[4063-6690]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4228-4234]:Modifier[4228-4234]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[4235-4241]:SimpleType[4235-4241]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[4242-4247]:SimpleName[4242-4247]"
    }, {
      "left" : "TypeRestriction p",
      "right" : "TypeRestriction p",
      "info" : "SingleVariableDeclaration[4248-4265]:SingleVariableDeclaration[4248-4265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4267-4420]:Block[4267-4420]"
    }, {
      "left" : "if (p.outcome)",
      "right" : "if (p.outcome)",
      "info" : "IfStatement[4279-4409]:IfStatement[4279-4409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4294-4365]:Block[4294-4365]"
    }, {
      "left" : "return getRestrictedWithoutUndefined(p.type);",
      "right" : "return getRestrictedWithoutUndefined(p.type);",
      "info" : "ReturnStatement[4308-4353]:ReturnStatement[4308-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4371-4409]:Block[4371-4409]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4385-4397]:ReturnStatement[4385-4397]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4501-4507]:Modifier[4501-4507]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[4508-4514]:SimpleType[4508-4514]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[4515-4520]:SimpleName[4515-4520]"
    }, {
      "left" : "TypeRestriction p",
      "right" : "TypeRestriction p",
      "info" : "SingleVariableDeclaration[4521-4538]:SingleVariableDeclaration[4521-4538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4540-4707]:Block[4540-4707]"
    }, {
      "left" : "if (p.outcome)",
      "right" : "if (p.outcome)",
      "info" : "IfStatement[4552-4697]:IfStatement[4552-4697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4567-4625]:Block[4567-4625]"
    }, {
      "left" : "return getNativeType(NULL_TYPE);",
      "right" : "return getNativeType(NULL_TYPE);",
      "info" : "ReturnStatement[4581-4613]:ReturnStatement[4581-4613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4631-4697]:Block[4631-4697]"
    }, {
      "left" : "return getRestrictedWithoutNull(p.type);",
      "right" : "return getRestrictedWithoutNull(p.type);",
      "info" : "ReturnStatement[4645-4685]:ReturnStatement[4645-4685]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4797-4803]:Modifier[4797-4803]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[4804-4810]:SimpleType[4804-4810]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[4811-4816]:SimpleName[4811-4816]"
    }, {
      "left" : "TypeRestriction p",
      "right" : "TypeRestriction p",
      "info" : "SingleVariableDeclaration[4817-4834]:SingleVariableDeclaration[4817-4834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4836-5031]:Block[4836-5031]"
    }, {
      "left" : "if (p.outcome)",
      "right" : "if (p.outcome)",
      "info" : "IfStatement[4848-5021]:IfStatement[4848-5021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4863-4977]:Block[4863-4977]"
    }, {
      "left" : "return getRestrictedWithoutUndefined(\n                getRestrictedWithoutNull(p.type));",
      "right" : "return getRestrictedWithoutUndefined(\n                getRestrictedWithoutNull(p.type));",
      "info" : "ReturnStatement[4877-4965]:ReturnStatement[4877-4965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4983-5021]:Block[4983-5021]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4997-5009]:ReturnStatement[4997-5009]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5114-5120]:Modifier[5114-5120]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[5121-5127]:SimpleType[5121-5127]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[5128-5133]:SimpleName[5128-5133]"
    }, {
      "left" : "TypeRestriction p",
      "right" : "TypeRestriction p",
      "info" : "SingleVariableDeclaration[5134-5151]:SingleVariableDeclaration[5134-5151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5153-5239]:Block[5153-5239]"
    }, {
      "left" : "return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);",
      "right" : "return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);",
      "info" : "ReturnStatement[5165-5229]:ReturnStatement[5165-5229]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5323-5329]:Modifier[5323-5329]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[5330-5336]:SimpleType[5330-5336]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[5337-5342]:SimpleName[5337-5342]"
    }, {
      "left" : "TypeRestriction p",
      "right" : "TypeRestriction p",
      "info" : "SingleVariableDeclaration[5343-5360]:SingleVariableDeclaration[5343-5360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5362-5449]:Block[5362-5449]"
    }, {
      "left" : "return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome);",
      "right" : "return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome);",
      "info" : "ReturnStatement[5374-5439]:ReturnStatement[5374-5439]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5532-5538]:Modifier[5532-5538]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[5539-5545]:SimpleType[5539-5545]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[5546-5551]:SimpleName[5546-5551]"
    }, {
      "left" : "TypeRestriction p",
      "right" : "TypeRestriction p",
      "info" : "SingleVariableDeclaration[5552-5569]:SingleVariableDeclaration[5552-5569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5571-5657]:Block[5571-5657]"
    }, {
      "left" : "return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);",
      "right" : "return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);",
      "info" : "ReturnStatement[5583-5647]:ReturnStatement[5583-5647]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5742-5748]:Modifier[5742-5748]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[5749-5755]:SimpleType[5749-5755]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[5756-5761]:SimpleName[5756-5761]"
    }, {
      "left" : "TypeRestriction p",
      "right" : "TypeRestriction p",
      "info" : "SingleVariableDeclaration[5762-5779]:SingleVariableDeclaration[5762-5779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5781-5869]:Block[5781-5869]"
    }, {
      "left" : "return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome);",
      "right" : "return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome);",
      "info" : "ReturnStatement[5793-5859]:ReturnStatement[5793-5859]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5951-5957]:Modifier[5951-5957]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[5958-5964]:SimpleType[5958-5964]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[5965-5970]:SimpleName[5965-5970]"
    }, {
      "left" : "TypeRestriction p",
      "right" : "TypeRestriction p",
      "info" : "SingleVariableDeclaration[5971-5988]:SingleVariableDeclaration[5971-5988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5990-6265]:Block[5990-6265]"
    }, {
      "left" : "if (p.type == null)",
      "right" : "if (p.type == null)",
      "info" : "IfStatement[6002-6100]:IfStatement[6002-6100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6022-6100]:Block[6022-6100]"
    }, {
      "left" : "return p.outcome ? getNativeType(ARRAY_TYPE) : null;",
      "right" : "return p.outcome ? getNativeType(ARRAY_TYPE) : null;",
      "info" : "ReturnStatement[6036-6088]:ReturnStatement[6036-6088]"
    }, {
      "left" : "Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :\n              restrictToNotArrayVisitor;",
      "right" : "Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :\n              restrictToNotArrayVisitor;",
      "info" : "VariableDeclarationStatement[6112-6215]:VariableDeclarationStatement[6112-6215]"
    }, {
      "left" : "return p.type.visit(visitor);",
      "right" : "return p.type.visit(visitor);",
      "info" : "ReturnStatement[6226-6255]:ReturnStatement[6226-6255]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6348-6354]:Modifier[6348-6354]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[6355-6361]:SimpleType[6355-6361]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[6362-6367]:SimpleName[6362-6367]"
    }, {
      "left" : "TypeRestriction p",
      "right" : "TypeRestriction p",
      "info" : "SingleVariableDeclaration[6368-6385]:SingleVariableDeclaration[6368-6385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6387-6665]:Block[6387-6665]"
    }, {
      "left" : "if (p.type == null)",
      "right" : "if (p.type == null)",
      "info" : "IfStatement[6399-6498]:IfStatement[6399-6498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6419-6498]:Block[6419-6498]"
    }, {
      "left" : "return p.outcome ? getNativeType(OBJECT_TYPE) : null;",
      "right" : "return p.outcome ? getNativeType(OBJECT_TYPE) : null;",
      "info" : "ReturnStatement[6433-6486]:ReturnStatement[6433-6486]"
    }, {
      "left" : "Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :\n              restrictToNotObjectVisitor;",
      "right" : "Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :\n              restrictToNotObjectVisitor;",
      "info" : "VariableDeclarationStatement[6510-6615]:VariableDeclarationStatement[6510-6615]"
    }, {
      "left" : "return p.type.visit(visitor);",
      "right" : "return p.type.visit(visitor);",
      "info" : "ReturnStatement[6626-6655]:ReturnStatement[6626-6655]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6698-6707]:MarkerAnnotation[6698-6707]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6710-6716]:Modifier[6710-6716]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[6717-6726]:SimpleType[6717-6726]"
    }, {
      "left" : "getPreciserScopeKnowingConditionOutcome",
      "right" : "getPreciserScopeKnowingConditionOutcome",
      "info" : "SimpleName[6727-6766]:SimpleName[6727-6766]"
    }, {
      "left" : "Node condition",
      "right" : "Node condition",
      "info" : "SingleVariableDeclaration[6767-6781]:SingleVariableDeclaration[6767-6781]"
    }, {
      "left" : "FlowScope blindScope",
      "right" : "FlowScope blindScope",
      "info" : "SingleVariableDeclaration[6789-6809]:SingleVariableDeclaration[6789-6809]"
    }, {
      "left" : "boolean outcome",
      "right" : "boolean outcome",
      "info" : "SingleVariableDeclaration[6811-6826]:SingleVariableDeclaration[6811-6826]"
    }, {
      "left" : "condition.getType() == CALL && condition.getChildCount() == 2",
      "right" : "condition.getType() == CALL && condition.getChildCount() == 2",
      "info" : "InfixExpression[6838-6899]:InfixExpression[6838-6899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6901-7662]:Block[6828-7713]"
    }, {
      "left" : "Node callee = condition.getFirstChild();",
      "right" : "Node callee = condition.getFirstChild();",
      "info" : "VariableDeclarationStatement[6909-6949]:VariableDeclarationStatement[6909-6949]"
    }, {
      "left" : "Node param = condition.getLastChild();",
      "right" : "Node param = condition.getLastChild();",
      "info" : "VariableDeclarationStatement[6956-6994]:VariableDeclarationStatement[6956-6994]"
    }, {
      "left" : "if (callee.getType() == GETPROP && param.isQualifiedName())",
      "right" : "if (condition.getType() == CALL && condition.getChildCount() == 2)",
      "info" : "IfStatement[7001-7656]:IfStatement[6834-7615]"
    }, {
      "left" : "callee.getType() == GETPROP && param.isQualifiedName()",
      "right" : "callee.getType() == GETPROP && param.isQualifiedName()",
      "info" : "InfixExpression[7005-7059]:InfixExpression[7005-7059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7061-7656]:Block[6901-7615]"
    }, {
      "left" : "JSType paramType =  getTypeIfRefinable(param, blindScope);",
      "right" : "JSType paramType =  getTypeIfRefinable(param, blindScope);",
      "info" : "VariableDeclarationStatement[7071-7129]:VariableDeclarationStatement[7071-7129]"
    }, {
      "left" : "if (paramType != null)",
      "right" : "if (callee.getType() == GETPROP && param.isQualifiedName())",
      "info" : "IfStatement[7138-7648]:IfStatement[7001-7609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7161-7648]:Block[7061-7609]"
    }, {
      "left" : "Node left = callee.getFirstChild();",
      "right" : "Node left = callee.getFirstChild();",
      "info" : "VariableDeclarationStatement[7171-7206]:VariableDeclarationStatement[7138-7173]"
    }, {
      "left" : "Node right = callee.getLastChild();",
      "right" : "Node right = callee.getLastChild();",
      "info" : "VariableDeclarationStatement[7215-7250]:VariableDeclarationStatement[7182-7217]"
    }, {
      "left" : "if (left.getType() == NAME && \"goog\".equals(left.getString()) &&\n            right.getType() == STRING)",
      "right" : "if (left.getType() == NAME && \"goog\".equals(left.getString()) &&\n            right.getType() == STRING)",
      "info" : "IfStatement[7259-7638]:IfStatement[7226-7601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7363-7638]:Block[7330-7601]"
    }, {
      "left" : "Function<TypeRestriction, JSType> restricter =\n              restricters.get(right.getString());",
      "right" : "Function<TypeRestriction, JSType> restricter =\n              restricters.get(right.getString());",
      "info" : "VariableDeclarationStatement[7375-7471]:VariableDeclarationStatement[7342-7438]"
    }, {
      "left" : "if (restricter != null)",
      "right" : "if (restricter != null)",
      "info" : "IfStatement[7482-7626]:IfStatement[7449-7591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7506-7626]:Block[7473-7591]"
    }, {
      "left" : "return restrictParameter(param, paramType, blindScope, restricter,\n                outcome);",
      "right" : "return restrictParameter(param, paramType, blindScope, restricter,\n                outcome);",
      "info" : "ReturnStatement[7520-7612]:ReturnStatement[7487-7579]"
    }, {
      "left" : "return nextPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome);",
      "right" : "return nextPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome);",
      "info" : "ReturnStatement[7667-7756]:ReturnStatement[7620-7709]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7764-7771]:Modifier[7717-7724]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[7772-7781]:SimpleType[7725-7734]"
    }, {
      "left" : "restrictParameter",
      "right" : "restrictParameter",
      "info" : "SimpleName[7782-7799]:SimpleName[7735-7752]"
    }, {
      "left" : "Node parameter",
      "right" : "Node parameter",
      "info" : "SingleVariableDeclaration[7800-7814]:SingleVariableDeclaration[7753-7767]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[7816-7827]:SingleVariableDeclaration[7769-7780]"
    }, {
      "left" : "FlowScope blindScope",
      "right" : "FlowScope blindScope",
      "info" : "SingleVariableDeclaration[7835-7855]:SingleVariableDeclaration[7788-7808]"
    }, {
      "left" : "Function<TypeRestriction, JSType> restriction",
      "right" : "Function<TypeRestriction, JSType> restriction",
      "info" : "SingleVariableDeclaration[7857-7902]:SingleVariableDeclaration[7810-7855]"
    }, {
      "left" : "boolean outcome",
      "right" : "boolean outcome",
      "info" : "SingleVariableDeclaration[7910-7925]:SingleVariableDeclaration[7863-7878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7927-8250]:Block[7880-8203]"
    }, {
      "left" : "type = restriction.apply(new TypeRestriction(type, outcome));",
      "right" : "type = restriction.apply(new TypeRestriction(type, outcome));",
      "info" : "ExpressionStatement[7952-8013]:ExpressionStatement[7905-7966]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[8045-8246]:IfStatement[7998-8199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8063-8208]:Block[8016-8161]"
    }, {
      "left" : "FlowScope informed = blindScope.createChildFlowScope();",
      "right" : "FlowScope informed = blindScope.createChildFlowScope();",
      "info" : "VariableDeclarationStatement[8071-8126]:VariableDeclarationStatement[8024-8079]"
    }, {
      "left" : "declareNameInScope(informed, parameter, type);",
      "right" : "declareNameInScope(informed, parameter, type);",
      "info" : "ExpressionStatement[8133-8179]:ExpressionStatement[8086-8132]"
    }, {
      "left" : "return informed;",
      "right" : "return informed;",
      "info" : "ReturnStatement[8186-8202]:ReturnStatement[8139-8155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8214-8246]:Block[8167-8199]"
    }, {
      "left" : "return blindScope;",
      "right" : "return blindScope;",
      "info" : "ReturnStatement[8222-8240]:ReturnStatement[8175-8193]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8254-8261]:Modifier[8207-8214]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8262-8268]:Modifier[8215-8221]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[8269-8274]:TYPE_DECLARATION_KIND[8222-8227]"
    }, {
      "left" : "TypeRestriction",
      "right" : "TypeRestriction",
      "info" : "SimpleName[8275-8290]:SimpleName[8228-8243]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8364-8371]:Modifier[8317-8324]"
    }, {
      "left" : "TypeRestriction",
      "right" : "TypeRestriction",
      "info" : "SimpleName[8372-8387]:SimpleName[8325-8340]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[8388-8399]:SingleVariableDeclaration[8341-8352]"
    }, {
      "left" : "boolean outcome",
      "right" : "boolean outcome",
      "info" : "SingleVariableDeclaration[8401-8416]:SingleVariableDeclaration[8354-8369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8418-8479]:Block[8371-8432]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[8426-8443]:ExpressionStatement[8379-8396]"
    }, {
      "left" : "this.outcome = outcome;",
      "right" : "this.outcome = outcome;",
      "info" : "ExpressionStatement[8450-8473]:ExpressionStatement[8403-8426]"
    } ]
  },
  "interFileMappings" : { }
}