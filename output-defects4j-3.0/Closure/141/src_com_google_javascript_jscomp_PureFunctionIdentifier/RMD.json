{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PureFunctionIdentifier",
      "right" : "PureFunctionIdentifier",
      "info" : "TypeDeclaration[1462-21479]:TypeDeclaration[1462-22191]"
    }, {
      "left" : "static final DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION =\n      DiagnosticType.error(\n          \"JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION\",\n          \"@nosideeffects may only appear in externs files.\");",
      "right" : "static final DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION =\n      DiagnosticType.error(\n          \"JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION\",\n          \"@nosideeffects may only appear in externs files.\");",
      "info" : "FieldDeclaration[2154-2359]:FieldDeclaration[2154-2359]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2363-2403]:FieldDeclaration[2363-2403]"
    }, {
      "left" : "private final DefinitionProvider definitionProvider;",
      "right" : "private final DefinitionProvider definitionProvider;",
      "info" : "FieldDeclaration[2406-2458]:FieldDeclaration[2406-2458]"
    }, {
      "left" : "private final Map<Node, FunctionInformation> functionSideEffectMap;",
      "right" : "private final Map<Node, FunctionInformation> functionSideEffectMap;",
      "info" : "FieldDeclaration[2510-2577]:FieldDeclaration[2510-2577]"
    }, {
      "left" : "private final List<Node> allFunctionCalls;",
      "right" : "private final List<Node> allFunctionCalls;",
      "info" : "FieldDeclaration[2661-2703]:FieldDeclaration[2661-2703]"
    }, {
      "left" : "private Node externs;",
      "right" : "private Node externs;",
      "info" : "FieldDeclaration[2823-2844]:FieldDeclaration[2823-2844]"
    }, {
      "left" : "private Node root;",
      "right" : "private Node root;",
      "info" : "FieldDeclaration[2847-2865]:FieldDeclaration[2847-2865]"
    }, {
      "left" : "public PureFunctionIdentifier(AbstractCompiler compiler,\n                                DefinitionProvider definitionProvider)",
      "right" : "public PureFunctionIdentifier(AbstractCompiler compiler,\n                                DefinitionProvider definitionProvider)",
      "info" : "MethodDeclaration[2869-3231]:MethodDeclaration[2869-3231]"
    }, {
      "left" : "public void process(Node externsAst, Node srcAst)",
      "right" : "public void process(Node externsAst, Node srcAst)",
      "info" : "MethodDeclaration[3235-3827]:MethodDeclaration[3235-3827]"
    }, {
      "left" : "String getDebugReport()",
      "right" : "String getDebugReport()",
      "info" : "MethodDeclaration[3831-5688]:MethodDeclaration[3831-5688]"
    }, {
      "left" : "private static Collection<Definition> getCallableDefinitions(\n      DefinitionProvider definitionProvider, Node name)",
      "right" : "private static Collection<Definition> getCallableDefinitions(\n      DefinitionProvider definitionProvider, Node name)",
      "info" : "MethodDeclaration[5692-6855]:MethodDeclaration[5692-7567]"
    }, {
      "left" : "private void propagateSideEffects()",
      "right" : "private void propagateSideEffects()",
      "info" : "MethodDeclaration[6859-9062]:MethodDeclaration[7571-9774]"
    }, {
      "left" : "private void markPureFunctionCalls()",
      "right" : "private void markPureFunctionCalls()",
      "info" : "MethodDeclaration[9066-10035]:MethodDeclaration[9778-10747]"
    }, {
      "left" : "FunctionAnalyzer",
      "right" : "FunctionAnalyzer",
      "info" : "TypeDeclaration[10039-15583]:TypeDeclaration[10751-16295]"
    }, {
      "left" : "private final boolean inExterns;",
      "right" : "private final boolean inExterns;",
      "info" : "FieldDeclaration[10275-10307]:FieldDeclaration[10987-11019]"
    }, {
      "left" : "FunctionAnalyzer(boolean inExterns)",
      "right" : "FunctionAnalyzer(boolean inExterns)",
      "info" : "MethodDeclaration[10313-10390]:MethodDeclaration[11025-11102]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal traversal,\n                                  Node node,\n                                  Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal traversal,\n                                  Node node,\n                                  Node parent)",
      "info" : "MethodDeclaration[10396-10949]:MethodDeclaration[11108-11661]"
    }, {
      "left" : "public void visit(NodeTraversal traversal, Node node, Node parent)",
      "right" : "public void visit(NodeTraversal traversal, Node node, Node parent)",
      "info" : "MethodDeclaration[10955-12726]:MethodDeclaration[11667-13438]"
    }, {
      "left" : "private void visitAssignmentOrUnaryOperatorLhs(\n        FunctionInformation sideEffectInfo, Scope scope, Node lhs)",
      "right" : "private void visitAssignmentOrUnaryOperatorLhs(\n        FunctionInformation sideEffectInfo, Scope scope, Node lhs)",
      "info" : "MethodDeclaration[12732-13578]:MethodDeclaration[13444-14290]"
    }, {
      "left" : "private void visitCall(FunctionInformation sideEffectInfo, Node node)",
      "right" : "private void visitCall(FunctionInformation sideEffectInfo, Node node)",
      "info" : "MethodDeclaration[13584-13761]:MethodDeclaration[14296-14473]"
    }, {
      "left" : "private void visitFunction(NodeTraversal traversal,\n                               Node node,\n                               Node parent,\n                               Node gramp)",
      "right" : "private void visitFunction(NodeTraversal traversal,\n                               Node node,\n                               Node parent,\n                               Node gramp)",
      "info" : "MethodDeclaration[13767-14554]:MethodDeclaration[14479-15266]"
    }, {
      "left" : "private void visitThrow(FunctionInformation sideEffectInfo)",
      "right" : "private void visitThrow(FunctionInformation sideEffectInfo)",
      "info" : "MethodDeclaration[14560-14735]:MethodDeclaration[15272-15447]"
    }, {
      "left" : "private boolean hasNoSideEffectsAnnotation(Node node,\n                                               Node parent,\n                                               Node gramp)",
      "right" : "private boolean hasNoSideEffectsAnnotation(Node node,\n                                               Node parent,\n                                               Node gramp)",
      "info" : "MethodDeclaration[14741-15579]:MethodDeclaration[15453-16291]"
    }, {
      "left" : "SideEffectPropagationCallback",
      "right" : "SideEffectPropagationCallback",
      "info" : "TypeDeclaration[15587-17047]:TypeDeclaration[16299-17759]"
    }, {
      "left" : "public boolean traverseEdge(FunctionInformation callee,\n                                Node callSite,\n                                FunctionInformation caller)",
      "right" : "public boolean traverseEdge(FunctionInformation callee,\n                                Node callSite,\n                                FunctionInformation caller)",
      "info" : "MethodDeclaration[15786-17043]:MethodDeclaration[16498-17755]"
    }, {
      "left" : "private static Node getCallThisObject(Node callSite)",
      "right" : "private static Node getCallThisObject(Node callSite)",
      "info" : "MethodDeclaration[17051-17890]:MethodDeclaration[17763-18602]"
    }, {
      "left" : "FunctionInformation",
      "right" : "FunctionInformation",
      "info" : "TypeDeclaration[17894-21477]:TypeDeclaration[18606-22189]"
    }, {
      "left" : "private final boolean extern;",
      "right" : "private final boolean extern;",
      "info" : "FieldDeclaration[18074-18103]:FieldDeclaration[18786-18815]"
    }, {
      "left" : "private final List<Node> callsInFunctionBody = Lists.newArrayList();",
      "right" : "private final List<Node> callsInFunctionBody = Lists.newArrayList();",
      "info" : "FieldDeclaration[18108-18176]:FieldDeclaration[18820-18888]"
    }, {
      "left" : "private boolean pureFunction = false;",
      "right" : "private boolean pureFunction = false;",
      "info" : "FieldDeclaration[18181-18218]:FieldDeclaration[18893-18930]"
    }, {
      "left" : "private boolean functionThrows = false;",
      "right" : "private boolean functionThrows = false;",
      "info" : "FieldDeclaration[18223-18262]:FieldDeclaration[18935-18974]"
    }, {
      "left" : "private boolean taintsGlobalState = false;",
      "right" : "private boolean taintsGlobalState = false;",
      "info" : "FieldDeclaration[18267-18309]:FieldDeclaration[18979-19021]"
    }, {
      "left" : "private boolean taintsThis = false;",
      "right" : "private boolean taintsThis = false;",
      "info" : "FieldDeclaration[18314-18349]:FieldDeclaration[19026-19061]"
    }, {
      "left" : "private boolean taintsUnknown = false;",
      "right" : "private boolean taintsUnknown = false;",
      "info" : "FieldDeclaration[18354-18392]:FieldDeclaration[19066-19104]"
    }, {
      "left" : "FunctionInformation(boolean extern)",
      "right" : "FunctionInformation(boolean extern)",
      "info" : "MethodDeclaration[18398-18493]:MethodDeclaration[19110-19205]"
    }, {
      "left" : "boolean isExtern()",
      "right" : "boolean isExtern()",
      "info" : "MethodDeclaration[18499-18604]:MethodDeclaration[19211-19316]"
    }, {
      "left" : "boolean mayBePure()",
      "right" : "boolean mayBePure()",
      "info" : "MethodDeclaration[18610-18844]:MethodDeclaration[19322-19556]"
    }, {
      "left" : "boolean mayHaveSideEffects()",
      "right" : "boolean mayHaveSideEffects()",
      "info" : "MethodDeclaration[18850-18982]:MethodDeclaration[19562-19694]"
    }, {
      "left" : "void setIsPure()",
      "right" : "void setIsPure()",
      "info" : "MethodDeclaration[18988-19119]:MethodDeclaration[19700-19831]"
    }, {
      "left" : "void setTaintsGlobalState()",
      "right" : "void setTaintsGlobalState()",
      "info" : "MethodDeclaration[19125-19301]:MethodDeclaration[19837-20013]"
    }, {
      "left" : "void setTaintsThis()",
      "right" : "void setTaintsThis()",
      "info" : "MethodDeclaration[19307-19466]:MethodDeclaration[20019-20178]"
    }, {
      "left" : "void setFunctionThrows()",
      "right" : "void setFunctionThrows()",
      "info" : "MethodDeclaration[19472-19631]:MethodDeclaration[20184-20343]"
    }, {
      "left" : "void setTaintsUnknown()",
      "right" : "void setTaintsUnknown()",
      "info" : "MethodDeclaration[19637-19845]:MethodDeclaration[20349-20557]"
    }, {
      "left" : "boolean mutatesGlobalState()",
      "right" : "boolean mutatesGlobalState()",
      "info" : "MethodDeclaration[19851-20006]:MethodDeclaration[20563-20718]"
    }, {
      "left" : "boolean mutatesThis()",
      "right" : "boolean mutatesThis()",
      "info" : "MethodDeclaration[20012-20130]:MethodDeclaration[20724-20842]"
    }, {
      "left" : "boolean functionThrows()",
      "right" : "boolean functionThrows()",
      "info" : "MethodDeclaration[20136-20270]:MethodDeclaration[20848-20982]"
    }, {
      "left" : "private void checkInvariant()",
      "right" : "private void checkInvariant()",
      "info" : "MethodDeclaration[20276-20618]:MethodDeclaration[20988-21330]"
    }, {
      "left" : "void appendCall(Node callNode)",
      "right" : "void appendCall(Node callNode)",
      "info" : "MethodDeclaration[20624-20791]:MethodDeclaration[21336-21503]"
    }, {
      "left" : "List<Node> getCallsInFunctionBody()",
      "right" : "List<Node> getCallsInFunctionBody()",
      "info" : "MethodDeclaration[20797-20934]:MethodDeclaration[21509-21646]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[20940-21473]:MethodDeclaration[21652-22185]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2097-2102]:TYPE_DECLARATION_KIND[2097-2102]"
    }, {
      "left" : "PureFunctionIdentifier",
      "right" : "PureFunctionIdentifier",
      "info" : "SimpleName[2103-2125]:SimpleName[2103-2125]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[2137-2149]:SimpleType[2137-2149]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2869-2875]:Modifier[2869-2875]"
    }, {
      "left" : "PureFunctionIdentifier",
      "right" : "PureFunctionIdentifier",
      "info" : "SimpleName[2876-2898]:SimpleName[2876-2898]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[2899-2924]:SingleVariableDeclaration[2899-2924]"
    }, {
      "left" : "DefinitionProvider definitionProvider",
      "right" : "DefinitionProvider definitionProvider",
      "info" : "SingleVariableDeclaration[2958-2995]:SingleVariableDeclaration[2958-2995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2997-3231]:Block[2997-3231]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[3003-3028]:ExpressionStatement[3003-3028]"
    }, {
      "left" : "this.definitionProvider = definitionProvider;",
      "right" : "this.definitionProvider = definitionProvider;",
      "info" : "ExpressionStatement[3033-3078]:ExpressionStatement[3033-3078]"
    }, {
      "left" : "this.functionSideEffectMap = Maps.newHashMap();",
      "right" : "this.functionSideEffectMap = Maps.newHashMap();",
      "info" : "ExpressionStatement[3083-3130]:ExpressionStatement[3083-3130]"
    }, {
      "left" : "this.allFunctionCalls = Lists.newArrayList();",
      "right" : "this.allFunctionCalls = Lists.newArrayList();",
      "info" : "ExpressionStatement[3135-3180]:ExpressionStatement[3135-3180]"
    }, {
      "left" : "this.externs = null;",
      "right" : "this.externs = null;",
      "info" : "ExpressionStatement[3185-3205]:ExpressionStatement[3185-3205]"
    }, {
      "left" : "this.root = null;",
      "right" : "this.root = null;",
      "info" : "ExpressionStatement[3210-3227]:ExpressionStatement[3210-3227]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3235-3244]:MarkerAnnotation[3235-3244]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3247-3253]:Modifier[3247-3253]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3254-3258]:PrimitiveType[3254-3258]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[3259-3266]:SimpleName[3259-3266]"
    }, {
      "left" : "Node externsAst",
      "right" : "Node externsAst",
      "info" : "SingleVariableDeclaration[3267-3282]:SingleVariableDeclaration[3267-3282]"
    }, {
      "left" : "Node srcAst",
      "right" : "Node srcAst",
      "info" : "SingleVariableDeclaration[3284-3295]:SingleVariableDeclaration[3284-3295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3297-3827]:Block[3297-3827]"
    }, {
      "left" : "if (externs != null || root != null)",
      "right" : "if (externs != null || root != null)",
      "info" : "IfStatement[3303-3569]:IfStatement[3303-3569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3340-3569]:Block[3340-3569]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"It is illegal to call PureFunctionIdentifier.process \" +\n          \"twice the same instance.  Please use a new \" +\n          \"PureFunctionIdentifier instance each time.\");",
      "right" : "throw new IllegalStateException(\n          \"It is illegal to call PureFunctionIdentifier.process \" +\n          \"twice the same instance.  Please use a new \" +\n          \"PureFunctionIdentifier instance each time.\");",
      "info" : "ThrowStatement[3348-3563]:ThrowStatement[3348-3563]"
    }, {
      "left" : "externs = externsAst;",
      "right" : "externs = externsAst;",
      "info" : "ExpressionStatement[3575-3596]:ExpressionStatement[3575-3596]"
    }, {
      "left" : "root = srcAst;",
      "right" : "root = srcAst;",
      "info" : "ExpressionStatement[3601-3615]:ExpressionStatement[3601-3615]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, externs, new FunctionAnalyzer(true));",
      "right" : "NodeTraversal.traverse(compiler, externs, new FunctionAnalyzer(true));",
      "info" : "ExpressionStatement[3621-3691]:ExpressionStatement[3621-3691]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new FunctionAnalyzer(false));",
      "right" : "NodeTraversal.traverse(compiler, root, new FunctionAnalyzer(false));",
      "info" : "ExpressionStatement[3696-3764]:ExpressionStatement[3696-3764]"
    }, {
      "left" : "propagateSideEffects();",
      "right" : "propagateSideEffects();",
      "info" : "ExpressionStatement[3770-3793]:ExpressionStatement[3770-3793]"
    }, {
      "left" : "markPureFunctionCalls();",
      "right" : "markPureFunctionCalls();",
      "info" : "ExpressionStatement[3799-3823]:ExpressionStatement[3799-3823]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3988-3994]:SimpleType[3988-3994]"
    }, {
      "left" : "getDebugReport",
      "right" : "getDebugReport",
      "info" : "SimpleName[3995-4009]:SimpleName[3995-4009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4012-5688]:Block[4012-5688]"
    }, {
      "left" : "Preconditions.checkNotNull(externs);",
      "right" : "Preconditions.checkNotNull(externs);",
      "info" : "ExpressionStatement[4018-4054]:ExpressionStatement[4018-4054]"
    }, {
      "left" : "Preconditions.checkNotNull(root);",
      "right" : "Preconditions.checkNotNull(root);",
      "info" : "ExpressionStatement[4059-4092]:ExpressionStatement[4059-4092]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[4098-4137]:VariableDeclarationStatement[4098-4137]"
    }, {
      "left" : "FunctionNames functionNames = new FunctionNames(compiler);",
      "right" : "FunctionNames functionNames = new FunctionNames(compiler);",
      "info" : "VariableDeclarationStatement[4143-4201]:VariableDeclarationStatement[4143-4201]"
    }, {
      "left" : "functionNames.process(null, externs);",
      "right" : "functionNames.process(null, externs);",
      "info" : "ExpressionStatement[4206-4243]:ExpressionStatement[4206-4243]"
    }, {
      "left" : "functionNames.process(null, root);",
      "right" : "functionNames.process(null, root);",
      "info" : "ExpressionStatement[4248-4282]:ExpressionStatement[4248-4282]"
    }, {
      "left" : "sb.append(\"Pure functions:\\n\");",
      "right" : "sb.append(\"Pure functions:\\n\");",
      "info" : "ExpressionStatement[4288-4319]:ExpressionStatement[4288-4319]"
    }, {
      "left" : "for (Map.Entry<Node, FunctionInformation> entry :\n             functionSideEffectMap.entrySet())",
      "right" : "for (Map.Entry<Node, FunctionInformation> entry :\n             functionSideEffectMap.entrySet())",
      "info" : "EnhancedForStatement[4324-4725]:EnhancedForStatement[4324-4725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4421-4725]:Block[4421-4725]"
    }, {
      "left" : "Node function = entry.getKey();",
      "right" : "Node function = entry.getKey();",
      "info" : "VariableDeclarationStatement[4429-4460]:VariableDeclarationStatement[4429-4460]"
    }, {
      "left" : "FunctionInformation functionInfo = entry.getValue();",
      "right" : "FunctionInformation functionInfo = entry.getValue();",
      "info" : "VariableDeclarationStatement[4467-4519]:VariableDeclarationStatement[4467-4519]"
    }, {
      "left" : "boolean isPure =\n          functionInfo.mayBePure() && !functionInfo.mayHaveSideEffects();",
      "right" : "boolean isPure =\n          functionInfo.mayBePure() && !functionInfo.mayHaveSideEffects();",
      "info" : "VariableDeclarationStatement[4527-4617]:VariableDeclarationStatement[4527-4617]"
    }, {
      "left" : "if (isPure)",
      "right" : "if (isPure)",
      "info" : "IfStatement[4624-4719]:IfStatement[4624-4719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4636-4719]:Block[4636-4719]"
    }, {
      "left" : "sb.append(\"  \" + functionNames.getFunctionName(function) + \"\\n\");",
      "right" : "sb.append(\"  \" + functionNames.getFunctionName(function) + \"\\n\");",
      "info" : "ExpressionStatement[4646-4711]:ExpressionStatement[4646-4711]"
    }, {
      "left" : "sb.append(\"\\n\");",
      "right" : "sb.append(\"\\n\");",
      "info" : "ExpressionStatement[4730-4746]:ExpressionStatement[4730-4746]"
    }, {
      "left" : "for (Map.Entry<Node, FunctionInformation> entry :\n             functionSideEffectMap.entrySet())",
      "right" : "for (Map.Entry<Node, FunctionInformation> entry :\n             functionSideEffectMap.entrySet())",
      "info" : "EnhancedForStatement[4752-5657]:EnhancedForStatement[4752-5657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4849-5657]:Block[4849-5657]"
    }, {
      "left" : "Node function = entry.getKey();",
      "right" : "Node function = entry.getKey();",
      "info" : "VariableDeclarationStatement[4857-4888]:VariableDeclarationStatement[4857-4888]"
    }, {
      "left" : "FunctionInformation functionInfo = entry.getValue();",
      "right" : "FunctionInformation functionInfo = entry.getValue();",
      "info" : "VariableDeclarationStatement[4895-4947]:VariableDeclarationStatement[4895-4947]"
    }, {
      "left" : "Set<String> depFunctionNames = Sets.newHashSet();",
      "right" : "Set<String> depFunctionNames = Sets.newHashSet();",
      "info" : "VariableDeclarationStatement[4955-5004]:VariableDeclarationStatement[4955-5004]"
    }, {
      "left" : "for (Node callSite : functionInfo.getCallsInFunctionBody())",
      "right" : "for (Node callSite : functionInfo.getCallsInFunctionBody())",
      "info" : "EnhancedForStatement[5011-5489]:EnhancedForStatement[5011-5489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5071-5489]:Block[5071-5489]"
    }, {
      "left" : "Collection<Definition> defs =\n            getCallableDefinitions(definitionProvider,\n                                   callSite.getFirstChild());",
      "right" : "Collection<Definition> defs =\n            getCallableDefinitions(definitionProvider,\n                                   callSite.getFirstChild());",
      "info" : "VariableDeclarationStatement[5081-5227]:VariableDeclarationStatement[5081-5227]"
    }, {
      "left" : "if (defs == null)",
      "right" : "if (defs == null)",
      "info" : "IfStatement[5237-5337]:IfStatement[5237-5337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5255-5337]:Block[5255-5337]"
    }, {
      "left" : "depFunctionNames.add(\"<null def list>\");",
      "right" : "depFunctionNames.add(\"<null def list>\");",
      "info" : "ExpressionStatement[5267-5307]:ExpressionStatement[5267-5307]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[5318-5327]:ContinueStatement[5318-5327]"
    }, {
      "left" : "for (Definition def : defs)",
      "right" : "for (Definition def : defs)",
      "info" : "EnhancedForStatement[5347-5481]:EnhancedForStatement[5347-5481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5375-5481]:Block[5375-5481]"
    }, {
      "left" : "depFunctionNames.add(\n              functionNames.getFunctionName(def.getRValue()));",
      "right" : "depFunctionNames.add(\n              functionNames.getFunctionName(def.getRValue()));",
      "info" : "ExpressionStatement[5387-5471]:ExpressionStatement[5387-5471]"
    }, {
      "left" : "sb.append(functionNames.getFunctionName(function) + \" \" +\n                functionInfo.toString() +\n                \" Calls: \" + depFunctionNames + \"\\n\");",
      "right" : "sb.append(functionNames.getFunctionName(function) + \" \" +\n                functionInfo.toString() +\n                \" Calls: \" + depFunctionNames + \"\\n\");",
      "info" : "ExpressionStatement[5497-5651]:ExpressionStatement[5497-5651]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[5663-5684]:ReturnStatement[5663-5684]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6168-6175]:Modifier[6168-6175]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6176-6182]:Modifier[6176-6182]"
    }, {
      "left" : "Collection<Definition>",
      "right" : "Collection<Definition>",
      "info" : "ParameterizedType[6183-6205]:ParameterizedType[6183-6205]"
    }, {
      "left" : "getCallableDefinitions",
      "right" : "getCallableDefinitions",
      "info" : "SimpleName[6206-6228]:SimpleName[6206-6228]"
    }, {
      "left" : "DefinitionProvider definitionProvider",
      "right" : "DefinitionProvider definitionProvider",
      "info" : "SingleVariableDeclaration[6236-6273]:SingleVariableDeclaration[6236-6273]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[6275-6284]:SingleVariableDeclaration[6275-6284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6286-6855]:Block[6286-7567]"
    }, {
      "left" : "List<Definition> result = Lists.newArrayList();",
      "right" : "List<Definition> result = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[6294-6341]:VariableDeclarationStatement[6355-6402]"
    }, {
      "left" : "NodeUtil.isGetProp(name)",
      "right" : "NodeUtil.isGetProp(name)",
      "info" : "MethodInvocation[6354-6378]:MethodInvocation[6296-6320]"
    }, {
      "left" : "NodeUtil.isName(name)",
      "right" : "NodeUtil.isName(name)",
      "info" : "MethodInvocation[6383-6404]:MethodInvocation[6324-6345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6406-6436]:Block[7537-7563]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6416-6428]:ReturnStatement[7545-7557]"
    }, {
      "left" : "Collection<Definition> decls =\n          definitionProvider.getDefinitionsReferencedAt(name);",
      "right" : "Collection<Definition> decls =\n          definitionProvider.getDefinitionsReferencedAt(name);",
      "info" : "VariableDeclarationStatement[6443-6536]:VariableDeclarationStatement[6410-6503]"
    }, {
      "left" : "if (decls == null)",
      "right" : "if (decls == null)",
      "info" : "IfStatement[6543-6592]:IfStatement[6510-6559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6562-6592]:Block[6529-6559]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6572-6584]:ReturnStatement[6539-6551]"
    }, {
      "left" : "for (Definition current : decls)",
      "right" : "for (Definition current : decls)",
      "info" : "EnhancedForStatement[6600-6829]:EnhancedForStatement[6567-6796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6633-6829]:Block[6600-6796]"
    }, {
      "left" : "Node rValue = current.getRValue();",
      "right" : "Node rValue = current.getRValue();",
      "info" : "VariableDeclarationStatement[6643-6677]:VariableDeclarationStatement[6610-6644]"
    }, {
      "left" : "if ((rValue != null) && NodeUtil.isFunction(rValue))",
      "right" : "if ((rValue != null) && NodeUtil.isFunction(rValue))",
      "info" : "IfStatement[6686-6821]:IfStatement[6653-6788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6739-6781]:Block[6706-6748]"
    }, {
      "left" : "result.add(current);",
      "right" : "result.add(current);",
      "info" : "ExpressionStatement[6751-6771]:ExpressionStatement[6718-6738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6787-6821]:Block[6754-6788]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6799-6811]:ReturnStatement[6766-6778]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[6837-6851]:ReturnStatement[6804-6818]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7126-7133]:Modifier[7838-7845]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7134-7138]:PrimitiveType[7846-7850]"
    }, {
      "left" : "propagateSideEffects",
      "right" : "propagateSideEffects",
      "info" : "SimpleName[7139-7159]:SimpleName[7851-7871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7162-9062]:Block[7874-9774]"
    }, {
      "left" : "DiGraph<FunctionInformation, Node> sideEffectGraph =\n        new LinkedDirectedGraph<FunctionInformation, Node>();",
      "right" : "DiGraph<FunctionInformation, Node> sideEffectGraph =\n        new LinkedDirectedGraph<FunctionInformation, Node>();",
      "info" : "VariableDeclarationStatement[7239-7353]:VariableDeclarationStatement[7951-8065]"
    }, {
      "left" : "for (FunctionInformation functionInfo : functionSideEffectMap.values())",
      "right" : "for (FunctionInformation functionInfo : functionSideEffectMap.values())",
      "info" : "EnhancedForStatement[7385-7512]:EnhancedForStatement[8097-8224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7457-7512]:Block[8169-8224]"
    }, {
      "left" : "sideEffectGraph.createNode(functionInfo);",
      "right" : "sideEffectGraph.createNode(functionInfo);",
      "info" : "ExpressionStatement[7465-7506]:ExpressionStatement[8177-8218]"
    }, {
      "left" : "for (FunctionInformation functionInfo : functionSideEffectMap.values())",
      "right" : "for (FunctionInformation functionInfo : functionSideEffectMap.values())",
      "info" : "EnhancedForStatement[7583-8669]:EnhancedForStatement[8295-9381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7655-8669]:Block[8367-9381]"
    }, {
      "left" : "if (!functionInfo.mayHaveSideEffects())",
      "right" : "if (!functionInfo.mayHaveSideEffects())",
      "info" : "IfStatement[7663-7730]:IfStatement[8375-8442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7703-7730]:Block[8415-8442]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[7713-7722]:ContinueStatement[8425-8434]"
    }, {
      "left" : "for (Node callSite : functionInfo.getCallsInFunctionBody())",
      "right" : "for (Node callSite : functionInfo.getCallsInFunctionBody())",
      "info" : "EnhancedForStatement[7738-8663]:EnhancedForStatement[8450-9375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7798-8663]:Block[8510-9375]"
    }, {
      "left" : "Node callee = callSite.getFirstChild();",
      "right" : "Node callee = callSite.getFirstChild();",
      "info" : "VariableDeclarationStatement[7808-7847]:VariableDeclarationStatement[8520-8559]"
    }, {
      "left" : "Collection<Definition> defs =\n            getCallableDefinitions(definitionProvider, callee);",
      "right" : "Collection<Definition> defs =\n            getCallableDefinitions(definitionProvider, callee);",
      "info" : "VariableDeclarationStatement[7856-7949]:VariableDeclarationStatement[8568-8661]"
    }, {
      "left" : "if (defs == null)",
      "right" : "if (defs == null)",
      "info" : "IfStatement[7958-8383]:IfStatement[8670-9095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7976-8383]:Block[8688-9095]"
    }, {
      "left" : "functionInfo.setTaintsUnknown();",
      "right" : "functionInfo.setTaintsUnknown();",
      "info" : "ExpressionStatement[8324-8356]:ExpressionStatement[9036-9068]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8367-8373]:BreakStatement[9079-9085]"
    }, {
      "left" : "for (Definition def : defs)",
      "right" : "for (Definition def : defs)",
      "info" : "EnhancedForStatement[8393-8655]:EnhancedForStatement[9105-9367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8421-8655]:Block[9133-9367]"
    }, {
      "left" : "Node defValue = def.getRValue();",
      "right" : "Node defValue = def.getRValue();",
      "info" : "VariableDeclarationStatement[8433-8465]:VariableDeclarationStatement[9145-9177]"
    }, {
      "left" : "FunctionInformation dep = functionSideEffectMap.get(defValue);",
      "right" : "FunctionInformation dep = functionSideEffectMap.get(defValue);",
      "info" : "VariableDeclarationStatement[8476-8538]:VariableDeclarationStatement[9188-9250]"
    }, {
      "left" : "Preconditions.checkNotNull(dep);",
      "right" : "Preconditions.checkNotNull(dep);",
      "info" : "ExpressionStatement[8549-8581]:ExpressionStatement[9261-9293]"
    }, {
      "left" : "sideEffectGraph.connect(dep, callSite, functionInfo);",
      "right" : "sideEffectGraph.connect(dep, callSite, functionInfo);",
      "info" : "ExpressionStatement[8592-8645]:ExpressionStatement[9304-9357]"
    }, {
      "left" : "FixedPointGraphTraversal.newTraversal(new SideEffectPropagationCallback())\n        .computeFixedPoint(sideEffectGraph);",
      "right" : "FixedPointGraphTraversal.newTraversal(new SideEffectPropagationCallback())\n        .computeFixedPoint(sideEffectGraph);",
      "info" : "ExpressionStatement[8734-8853]:ExpressionStatement[9446-9565]"
    }, {
      "left" : "for (FunctionInformation functionInfo : functionSideEffectMap.values())",
      "right" : "for (FunctionInformation functionInfo : functionSideEffectMap.values())",
      "info" : "EnhancedForStatement[8899-9058]:EnhancedForStatement[9611-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8971-9058]:Block[9683-9770]"
    }, {
      "left" : "if (functionInfo.mayBePure())",
      "right" : "if (functionInfo.mayBePure())",
      "info" : "IfStatement[8979-9052]:IfStatement[9691-9764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9009-9052]:Block[9721-9764]"
    }, {
      "left" : "functionInfo.setIsPure();",
      "right" : "functionInfo.setIsPure();",
      "info" : "ExpressionStatement[9019-9044]:ExpressionStatement[9731-9756]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9140-9147]:Modifier[9852-9859]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9148-9152]:PrimitiveType[9860-9864]"
    }, {
      "left" : "markPureFunctionCalls",
      "right" : "markPureFunctionCalls",
      "info" : "SimpleName[9153-9174]:SimpleName[9865-9886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9177-10035]:Block[9889-10747]"
    }, {
      "left" : "for (Node callNode : allFunctionCalls)",
      "right" : "for (Node callNode : allFunctionCalls)",
      "info" : "EnhancedForStatement[9183-10031]:EnhancedForStatement[9895-10743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9222-10031]:Block[9934-10743]"
    }, {
      "left" : "Node name = callNode.getFirstChild();",
      "right" : "Node name = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[9230-9267]:VariableDeclarationStatement[9942-9979]"
    }, {
      "left" : "Collection<Definition> defs =\n          getCallableDefinitions(definitionProvider, name);",
      "right" : "Collection<Definition> defs =\n          getCallableDefinitions(definitionProvider, name);",
      "info" : "VariableDeclarationStatement[9274-9363]:VariableDeclarationStatement[9986-10075]"
    }, {
      "left" : "if (defs == null)",
      "right" : "if (defs == null)",
      "info" : "IfStatement[9370-9415]:IfStatement[10082-10127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9388-9415]:Block[10100-10127]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[9398-9407]:ContinueStatement[10110-10119]"
    }, {
      "left" : "boolean hasSideEffects = false;",
      "right" : "boolean hasSideEffects = false;",
      "info" : "VariableDeclarationStatement[9423-9454]:VariableDeclarationStatement[10135-10166]"
    }, {
      "left" : "for (Definition def : defs)",
      "right" : "for (Definition def : defs)",
      "info" : "EnhancedForStatement[9461-9944]:EnhancedForStatement[10173-10656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9489-9944]:Block[10201-10656]"
    }, {
      "left" : "FunctionInformation functionInfo =\n            functionSideEffectMap.get(def.getRValue());",
      "right" : "FunctionInformation functionInfo =\n            functionSideEffectMap.get(def.getRValue());",
      "info" : "VariableDeclarationStatement[9499-9589]:VariableDeclarationStatement[10211-10301]"
    }, {
      "left" : "Preconditions.checkNotNull(functionInfo);",
      "right" : "Preconditions.checkNotNull(functionInfo);",
      "info" : "ExpressionStatement[9598-9639]:ExpressionStatement[10310-10351]"
    }, {
      "left" : "if ((NodeUtil.isCall(callNode) && functionInfo.mayHaveSideEffects()) ||\n            (NodeUtil.isNew(callNode) && (functionInfo.mutatesGlobalState() ||\n                                          functionInfo.functionThrows())))",
      "right" : "if ((NodeUtil.isCall(callNode) && functionInfo.mayHaveSideEffects()) ||\n            (NodeUtil.isNew(callNode) && (functionInfo.mutatesGlobalState() ||\n                                          functionInfo.functionThrows())))",
      "info" : "IfStatement[9649-9936]:IfStatement[10361-10648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9875-9936]:Block[10587-10648]"
    }, {
      "left" : "hasSideEffects = true;",
      "right" : "hasSideEffects = true;",
      "info" : "ExpressionStatement[9887-9909]:ExpressionStatement[10599-10621]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9920-9926]:BreakStatement[10632-10638]"
    }, {
      "left" : "if (!hasSideEffects)",
      "right" : "if (!hasSideEffects)",
      "info" : "IfStatement[9952-10025]:IfStatement[10664-10737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9973-10025]:Block[10685-10737]"
    }, {
      "left" : "callNode.setIsNoSideEffectsCall();",
      "right" : "callNode.setIsNoSideEffectsCall();",
      "info" : "ExpressionStatement[9983-10017]:ExpressionStatement[10695-10729]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10218-10225]:Modifier[10930-10937]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[10226-10231]:TYPE_DECLARATION_KIND[10938-10943]"
    }, {
      "left" : "FunctionAnalyzer",
      "right" : "FunctionAnalyzer",
      "info" : "SimpleName[10232-10248]:SimpleName[10944-10960]"
    }, {
      "left" : "Callback",
      "right" : "Callback",
      "info" : "SimpleType[10260-10268]:SimpleType[10972-10980]"
    }, {
      "left" : "FunctionAnalyzer",
      "right" : "FunctionAnalyzer",
      "info" : "SimpleName[10313-10329]:SimpleName[11025-11041]"
    }, {
      "left" : "boolean inExterns",
      "right" : "boolean inExterns",
      "info" : "SingleVariableDeclaration[10330-10347]:SingleVariableDeclaration[11042-11059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10349-10390]:Block[11061-11102]"
    }, {
      "left" : "this.inExterns = inExterns;",
      "right" : "this.inExterns = inExterns;",
      "info" : "ExpressionStatement[10357-10384]:ExpressionStatement[11069-11096]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10396-10405]:MarkerAnnotation[11108-11117]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10410-10416]:Modifier[11122-11128]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10417-10424]:PrimitiveType[11129-11136]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[10425-10439]:SimpleName[11137-11151]"
    }, {
      "left" : "NodeTraversal traversal",
      "right" : "NodeTraversal traversal",
      "info" : "SingleVariableDeclaration[10440-10463]:SingleVariableDeclaration[11152-11175]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[10499-10508]:SingleVariableDeclaration[11211-11220]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[10544-10555]:SingleVariableDeclaration[11256-11267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10557-10949]:Block[11269-11661]"
    }, {
      "left" : "if (NodeUtil.isFunction(node))",
      "right" : "if (NodeUtil.isFunction(node))",
      "info" : "IfStatement[10787-10923]:IfStatement[11499-11635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10818-10923]:Block[11530-11635]"
    }, {
      "left" : "Node gramp = parent.getParent();",
      "right" : "Node gramp = parent.getParent();",
      "info" : "VariableDeclarationStatement[10828-10860]:VariableDeclarationStatement[11540-11572]"
    }, {
      "left" : "visitFunction(traversal, node, parent, gramp);",
      "right" : "visitFunction(traversal, node, parent, gramp);",
      "info" : "ExpressionStatement[10869-10915]:ExpressionStatement[11581-11627]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10931-10943]:ReturnStatement[11643-11655]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10955-10964]:MarkerAnnotation[11667-11676]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10969-10975]:Modifier[11681-11687]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10976-10980]:PrimitiveType[11688-11692]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[10981-10986]:SimpleName[11693-11698]"
    }, {
      "left" : "NodeTraversal traversal",
      "right" : "NodeTraversal traversal",
      "info" : "SingleVariableDeclaration[10987-11010]:SingleVariableDeclaration[11699-11722]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[11012-11021]:SingleVariableDeclaration[11724-11733]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[11023-11034]:SingleVariableDeclaration[11735-11746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11036-12726]:Block[11748-13438]"
    }, {
      "left" : "if (inExterns)",
      "right" : "if (inExterns)",
      "info" : "IfStatement[11045-11085]:IfStatement[11757-11797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11060-11085]:Block[11772-11797]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11070-11077]:ReturnStatement[11782-11789]"
    }, {
      "left" : "if (!NodeUtil.nodeTypeMayHaveSideEffects(node))",
      "right" : "if (!NodeUtil.nodeTypeMayHaveSideEffects(node))",
      "info" : "IfStatement[11093-11166]:IfStatement[11805-11878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11141-11166]:Block[11853-11878]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11151-11158]:ReturnStatement[11863-11870]"
    }, {
      "left" : "if (NodeUtil.isCall(node) || NodeUtil.isNew(node))",
      "right" : "if (NodeUtil.isCall(node) || NodeUtil.isNew(node))",
      "info" : "IfStatement[11174-11270]:IfStatement[11886-11982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11225-11270]:Block[11937-11982]"
    }, {
      "left" : "allFunctionCalls.add(node);",
      "right" : "allFunctionCalls.add(node);",
      "info" : "ExpressionStatement[11235-11262]:ExpressionStatement[11947-11974]"
    }, {
      "left" : "Node enclosingFunction = traversal.getEnclosingFunction();",
      "right" : "Node enclosingFunction = traversal.getEnclosingFunction();",
      "info" : "VariableDeclarationStatement[11278-11336]:VariableDeclarationStatement[11990-12048]"
    }, {
      "left" : "if (enclosingFunction != null)",
      "right" : "if (enclosingFunction != null)",
      "info" : "IfStatement[11343-12720]:IfStatement[12055-13432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11374-12720]:Block[12086-13432]"
    }, {
      "left" : "FunctionInformation sideEffectInfo =\n            functionSideEffectMap.get(enclosingFunction);",
      "right" : "FunctionInformation sideEffectInfo =\n            functionSideEffectMap.get(enclosingFunction);",
      "info" : "VariableDeclarationStatement[11384-11478]:VariableDeclarationStatement[12096-12190]"
    }, {
      "left" : "Preconditions.checkNotNull(sideEffectInfo);",
      "right" : "Preconditions.checkNotNull(sideEffectInfo);",
      "info" : "ExpressionStatement[11487-11530]:ExpressionStatement[12199-12242]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(node))",
      "right" : "if (NodeUtil.isAssignmentOp(node))",
      "info" : "IfStatement[11540-12712]:IfStatement[12252-13424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11575-11706]:Block[12287-12418]"
    }, {
      "left" : "visitAssignmentOrUnaryOperatorLhs(\n              sideEffectInfo, traversal.getScope(), node.getFirstChild());",
      "right" : "visitAssignmentOrUnaryOperatorLhs(\n              sideEffectInfo, traversal.getScope(), node.getFirstChild());",
      "info" : "ExpressionStatement[11587-11696]:ExpressionStatement[12299-12408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11712-12712]:Block[12424-13424]"
    }, {
      "left" : "switch(node.getType()) {\n            case Token.CALL:\n            case Token.NEW:\n              visitCall(sideEffectInfo, node);\n              break;\n            case Token.DELPROP:\n            case Token.DEC:\n            case Token.INC:\n              visitAssignmentOrUnaryOperatorLhs(\n                  sideEffectInfo, traversal.getScope(), node.getFirstChild());\n              break;\n            case Token.NAME:\n\n              // Variable definition are not side effects.\n              // Just check that the name appears in the context of a\n              // variable declaration.\n              Preconditions.checkArgument(\n                  NodeUtil.isVarDeclaration(node));\n              break;\n            case Token.THROW:\n              visitThrow(sideEffectInfo);\n              break;\n            default:\n              throw new IllegalArgumentException(\n                  \"Unhandled side effect node type \" +\n                  Token.name(node.getType()));\n          }",
      "right" : "switch(node.getType()) {\n            case Token.CALL:\n            case Token.NEW:\n              visitCall(sideEffectInfo, node);\n              break;\n            case Token.DELPROP:\n            case Token.DEC:\n            case Token.INC:\n              visitAssignmentOrUnaryOperatorLhs(\n                  sideEffectInfo, traversal.getScope(), node.getFirstChild());\n              break;\n            case Token.NAME:\n\n              // Variable definition are not side effects.\n              // Just check that the name appears in the context of a\n              // variable declaration.\n              Preconditions.checkArgument(\n                  NodeUtil.isVarDeclaration(node));\n              break;\n            case Token.THROW:\n              visitThrow(sideEffectInfo);\n              break;\n            default:\n              throw new IllegalArgumentException(\n                  \"Unhandled side effect node type \" +\n                  Token.name(node.getType()));\n          }",
      "info" : "SwitchStatement[11724-12702]:SwitchStatement[12436-13414]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[11761-11777]:SwitchCase[12473-12489]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[11790-11805]:SwitchCase[12502-12517]"
    }, {
      "left" : "visitCall(sideEffectInfo, node);",
      "right" : "visitCall(sideEffectInfo, node);",
      "info" : "ExpressionStatement[11820-11852]:ExpressionStatement[12532-12564]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11867-11873]:BreakStatement[12579-12585]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[11886-11905]:SwitchCase[12598-12617]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[11918-11933]:SwitchCase[12630-12645]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[11946-11961]:SwitchCase[12658-12673]"
    }, {
      "left" : "visitAssignmentOrUnaryOperatorLhs(\n                  sideEffectInfo, traversal.getScope(), node.getFirstChild());",
      "right" : "visitAssignmentOrUnaryOperatorLhs(\n                  sideEffectInfo, traversal.getScope(), node.getFirstChild());",
      "info" : "ExpressionStatement[11976-12089]:ExpressionStatement[12688-12801]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12104-12110]:BreakStatement[12816-12822]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[12123-12139]:SwitchCase[12835-12851]"
    }, {
      "left" : "Preconditions.checkArgument(\n                  NodeUtil.isVarDeclaration(node));",
      "right" : "Preconditions.checkArgument(\n                  NodeUtil.isVarDeclaration(node));",
      "info" : "ExpressionStatement[12323-12403]:ExpressionStatement[13035-13115]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12418-12424]:BreakStatement[13130-13136]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[12437-12454]:SwitchCase[13149-13166]"
    }, {
      "left" : "visitThrow(sideEffectInfo);",
      "right" : "visitThrow(sideEffectInfo);",
      "info" : "ExpressionStatement[12469-12496]:ExpressionStatement[13181-13208]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12511-12517]:BreakStatement[13223-13229]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12530-12538]:SwitchCase[13242-13250]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                  \"Unhandled side effect node type \" +\n                  Token.name(node.getType()));",
      "right" : "throw new IllegalArgumentException(\n                  \"Unhandled side effect node type \" +\n                  Token.name(node.getType()));",
      "info" : "ThrowStatement[12553-12690]:ThrowStatement[13265-13402]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12989-12996]:Modifier[13701-13708]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12997-13001]:PrimitiveType[13709-13713]"
    }, {
      "left" : "visitAssignmentOrUnaryOperatorLhs",
      "right" : "visitAssignmentOrUnaryOperatorLhs",
      "info" : "SimpleName[13002-13035]:SimpleName[13714-13747]"
    }, {
      "left" : "FunctionInformation sideEffectInfo",
      "right" : "FunctionInformation sideEffectInfo",
      "info" : "SingleVariableDeclaration[13045-13079]:SingleVariableDeclaration[13757-13791]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[13081-13092]:SingleVariableDeclaration[13793-13804]"
    }, {
      "left" : "Node lhs",
      "right" : "Node lhs",
      "info" : "SingleVariableDeclaration[13094-13102]:SingleVariableDeclaration[13806-13814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13104-13578]:Block[13816-14290]"
    }, {
      "left" : "if (NodeUtil.isName(lhs))",
      "right" : "if (NodeUtil.isName(lhs))",
      "info" : "IfStatement[13112-13572]:IfStatement[13824-14284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13138-13304]:Block[13850-14016]"
    }, {
      "left" : "Var var = scope.getVar(lhs.getString());",
      "right" : "Var var = scope.getVar(lhs.getString());",
      "info" : "VariableDeclarationStatement[13148-13188]:VariableDeclarationStatement[13860-13900]"
    }, {
      "left" : "if (var == null || var.scope != scope)",
      "right" : "if (var == null || var.scope != scope)",
      "info" : "IfStatement[13197-13296]:IfStatement[13909-14008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13236-13296]:Block[13948-14008]"
    }, {
      "left" : "sideEffectInfo.setTaintsGlobalState();",
      "right" : "sideEffectInfo.setTaintsGlobalState();",
      "info" : "ExpressionStatement[13248-13286]:ExpressionStatement[13960-13998]"
    }, {
      "left" : "if (NodeUtil.isGetProp(lhs))",
      "right" : "if (NodeUtil.isGetProp(lhs))",
      "info" : "IfStatement[13310-13572]:IfStatement[14022-14284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13339-13514]:Block[14051-14226]"
    }, {
      "left" : "if (NodeUtil.isThis(lhs.getFirstChild()))",
      "right" : "if (NodeUtil.isThis(lhs.getFirstChild()))",
      "info" : "IfStatement[13349-13506]:IfStatement[14061-14218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13391-13444]:Block[14103-14156]"
    }, {
      "left" : "sideEffectInfo.setTaintsThis();",
      "right" : "sideEffectInfo.setTaintsThis();",
      "info" : "ExpressionStatement[13403-13434]:ExpressionStatement[14115-14146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13450-13506]:Block[14162-14218]"
    }, {
      "left" : "sideEffectInfo.setTaintsUnknown();",
      "right" : "sideEffectInfo.setTaintsUnknown();",
      "info" : "ExpressionStatement[13462-13496]:ExpressionStatement[14174-14208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13520-13572]:Block[14232-14284]"
    }, {
      "left" : "sideEffectInfo.setTaintsUnknown();",
      "right" : "sideEffectInfo.setTaintsUnknown();",
      "info" : "ExpressionStatement[13530-13564]:ExpressionStatement[14242-14276]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13645-13652]:Modifier[14357-14364]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13653-13657]:PrimitiveType[14365-14369]"
    }, {
      "left" : "visitCall",
      "right" : "visitCall",
      "info" : "SimpleName[13658-13667]:SimpleName[14370-14379]"
    }, {
      "left" : "FunctionInformation sideEffectInfo",
      "right" : "FunctionInformation sideEffectInfo",
      "info" : "SingleVariableDeclaration[13668-13702]:SingleVariableDeclaration[14380-14414]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[13704-13713]:SingleVariableDeclaration[14416-14425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13715-13761]:Block[14427-14473]"
    }, {
      "left" : "sideEffectInfo.appendCall(node);",
      "right" : "sideEffectInfo.appendCall(node);",
      "info" : "ExpressionStatement[13723-13755]:ExpressionStatement[14435-14467]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13848-13855]:Modifier[14560-14567]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13856-13860]:PrimitiveType[14568-14572]"
    }, {
      "left" : "visitFunction",
      "right" : "visitFunction",
      "info" : "SimpleName[13861-13874]:SimpleName[14573-14586]"
    }, {
      "left" : "NodeTraversal traversal",
      "right" : "NodeTraversal traversal",
      "info" : "SingleVariableDeclaration[13875-13898]:SingleVariableDeclaration[14587-14610]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[13931-13940]:SingleVariableDeclaration[14643-14652]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[13973-13984]:SingleVariableDeclaration[14685-14696]"
    }, {
      "left" : "Node gramp",
      "right" : "Node gramp",
      "info" : "SingleVariableDeclaration[14017-14027]:SingleVariableDeclaration[14729-14739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14029-14554]:Block[14741-15266]"
    }, {
      "left" : "Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));",
      "right" : "Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));",
      "info" : "ExpressionStatement[14037-14107]:ExpressionStatement[14749-14819]"
    }, {
      "left" : "FunctionInformation sideEffectInfo = new FunctionInformation(inExterns);",
      "right" : "FunctionInformation sideEffectInfo = new FunctionInformation(inExterns);",
      "info" : "VariableDeclarationStatement[14115-14187]:VariableDeclarationStatement[14827-14899]"
    }, {
      "left" : "functionSideEffectMap.put(node, sideEffectInfo);",
      "right" : "functionSideEffectMap.put(node, sideEffectInfo);",
      "info" : "ExpressionStatement[14194-14242]:ExpressionStatement[14906-14954]"
    }, {
      "left" : "if (hasNoSideEffectsAnnotation(node, parent, gramp))",
      "right" : "if (hasNoSideEffectsAnnotation(node, parent, gramp))",
      "info" : "IfStatement[14250-14548]:IfStatement[14962-15260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14303-14471]:Block[15015-15183]"
    }, {
      "left" : "if (inExterns)",
      "right" : "if (inExterns)",
      "info" : "IfStatement[14313-14463]:IfStatement[15025-15175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14328-14377]:Block[15040-15089]"
    }, {
      "left" : "sideEffectInfo.setIsPure();",
      "right" : "sideEffectInfo.setIsPure();",
      "info" : "ExpressionStatement[14340-14367]:ExpressionStatement[15052-15079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14383-14463]:Block[15095-15175]"
    }, {
      "left" : "traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);",
      "right" : "traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);",
      "info" : "ExpressionStatement[14395-14453]:ExpressionStatement[15107-15165]"
    }, {
      "left" : "if (inExterns)",
      "right" : "if (inExterns)",
      "info" : "IfStatement[14477-14548]:IfStatement[15189-15260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14492-14548]:Block[15204-15260]"
    }, {
      "left" : "sideEffectInfo.setTaintsGlobalState();",
      "right" : "sideEffectInfo.setTaintsGlobalState();",
      "info" : "ExpressionStatement[14502-14540]:ExpressionStatement[15214-15252]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14626-14633]:Modifier[15338-15345]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14634-14638]:PrimitiveType[15346-15350]"
    }, {
      "left" : "visitThrow",
      "right" : "visitThrow",
      "info" : "SimpleName[14639-14649]:SimpleName[15351-15361]"
    }, {
      "left" : "FunctionInformation sideEffectInfo",
      "right" : "FunctionInformation sideEffectInfo",
      "info" : "SingleVariableDeclaration[14650-14684]:SingleVariableDeclaration[15362-15396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14686-14735]:Block[15398-15447]"
    }, {
      "left" : "sideEffectInfo.setFunctionThrows();",
      "right" : "sideEffectInfo.setFunctionThrows();",
      "info" : "ExpressionStatement[14694-14729]:ExpressionStatement[15406-15441]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14842-14849]:Modifier[15554-15561]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14850-14857]:PrimitiveType[15562-15569]"
    }, {
      "left" : "hasNoSideEffectsAnnotation",
      "right" : "hasNoSideEffectsAnnotation",
      "info" : "SimpleName[14858-14884]:SimpleName[15570-15596]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[14885-14894]:SingleVariableDeclaration[15597-15606]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14943-14954]:SingleVariableDeclaration[15655-15666]"
    }, {
      "left" : "Node gramp",
      "right" : "Node gramp",
      "info" : "SingleVariableDeclaration[15003-15013]:SingleVariableDeclaration[15715-15725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15015-15579]:Block[15727-16291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15023-15174]:Block[15735-15886]"
    }, {
      "left" : "JSDocInfo docInfo = node.getJSDocInfo();",
      "right" : "JSDocInfo docInfo = node.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[15033-15073]:VariableDeclarationStatement[15745-15785]"
    }, {
      "left" : "if (docInfo != null && docInfo.isNoSideEffects())",
      "right" : "if (docInfo != null && docInfo.isNoSideEffects())",
      "info" : "IfStatement[15082-15166]:IfStatement[15794-15878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15132-15166]:Block[15844-15878]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15144-15156]:ReturnStatement[15856-15868]"
    }, {
      "left" : "if (NodeUtil.isName(parent))",
      "right" : "if (NodeUtil.isName(parent))",
      "info" : "IfStatement[15182-15573]:IfStatement[15894-16285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15211-15378]:Block[15923-16090]"
    }, {
      "left" : "JSDocInfo docInfo = gramp.getJSDocInfo();",
      "right" : "JSDocInfo docInfo = gramp.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[15221-15262]:VariableDeclarationStatement[15933-15974]"
    }, {
      "left" : "return gramp.hasOneChild() &&\n            docInfo != null &&\n            docInfo.isNoSideEffects();",
      "right" : "return gramp.hasOneChild() &&\n            docInfo != null &&\n            docInfo.isNoSideEffects();",
      "info" : "ReturnStatement[15271-15370]:ReturnStatement[15983-16082]"
    }, {
      "left" : "if (NodeUtil.isAssign(parent))",
      "right" : "if (NodeUtil.isAssign(parent))",
      "info" : "IfStatement[15384-15573]:IfStatement[16096-16285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15415-15536]:Block[16127-16248]"
    }, {
      "left" : "JSDocInfo docInfo = parent.getJSDocInfo();",
      "right" : "JSDocInfo docInfo = parent.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[15425-15467]:VariableDeclarationStatement[16137-16179]"
    }, {
      "left" : "return docInfo != null && docInfo.isNoSideEffects();",
      "right" : "return docInfo != null && docInfo.isNoSideEffects();",
      "info" : "ReturnStatement[15476-15528]:ReturnStatement[16188-16240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15542-15573]:Block[16254-16285]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15552-15565]:ReturnStatement[16264-16277]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15672-15679]:Modifier[16384-16391]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15680-15686]:Modifier[16392-16398]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[15687-15692]:TYPE_DECLARATION_KIND[16399-16404]"
    }, {
      "left" : "SideEffectPropagationCallback",
      "right" : "SideEffectPropagationCallback",
      "info" : "SimpleName[15693-15722]:SimpleName[16405-16434]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15786-15792]:Modifier[16498-16504]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15793-15800]:PrimitiveType[16505-16512]"
    }, {
      "left" : "traverseEdge",
      "right" : "traverseEdge",
      "info" : "SimpleName[15801-15813]:SimpleName[16513-16525]"
    }, {
      "left" : "FunctionInformation callee",
      "right" : "FunctionInformation callee",
      "info" : "SingleVariableDeclaration[15814-15840]:SingleVariableDeclaration[16526-16552]"
    }, {
      "left" : "Node callSite",
      "right" : "Node callSite",
      "info" : "SingleVariableDeclaration[15874-15887]:SingleVariableDeclaration[16586-16599]"
    }, {
      "left" : "FunctionInformation caller",
      "right" : "FunctionInformation caller",
      "info" : "SingleVariableDeclaration[15921-15947]:SingleVariableDeclaration[16633-16659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15949-17043]:Block[16661-17755]"
    }, {
      "left" : "Preconditions.checkArgument(callSite.getType() == Token.CALL ||\n                                  callSite.getType() == Token.NEW);",
      "right" : "Preconditions.checkArgument(callSite.getType() == Token.CALL ||\n                                  callSite.getType() == Token.NEW);",
      "info" : "ExpressionStatement[15957-16088]:ExpressionStatement[16669-16800]"
    }, {
      "left" : "boolean changed = false;",
      "right" : "boolean changed = false;",
      "info" : "VariableDeclarationStatement[16096-16120]:VariableDeclarationStatement[16808-16832]"
    }, {
      "left" : "if (!caller.mutatesGlobalState() && callee.mutatesGlobalState())",
      "right" : "if (!caller.mutatesGlobalState() && callee.mutatesGlobalState())",
      "info" : "IfStatement[16127-16264]:IfStatement[16839-16976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16192-16264]:Block[16904-16976]"
    }, {
      "left" : "caller.setTaintsGlobalState();",
      "right" : "caller.setTaintsGlobalState();",
      "info" : "ExpressionStatement[16202-16232]:ExpressionStatement[16914-16944]"
    }, {
      "left" : "changed = true;",
      "right" : "changed = true;",
      "info" : "ExpressionStatement[16241-16256]:ExpressionStatement[16953-16968]"
    }, {
      "left" : "if (!caller.functionThrows() && callee.functionThrows())",
      "right" : "if (!caller.functionThrows() && callee.functionThrows())",
      "info" : "IfStatement[16272-16398]:IfStatement[16984-17110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16329-16398]:Block[17041-17110]"
    }, {
      "left" : "caller.setFunctionThrows();",
      "right" : "caller.setFunctionThrows();",
      "info" : "ExpressionStatement[16339-16366]:ExpressionStatement[17051-17078]"
    }, {
      "left" : "changed = true;",
      "right" : "changed = true;",
      "info" : "ExpressionStatement[16375-16390]:ExpressionStatement[17087-17102]"
    }, {
      "left" : "if (callee.mutatesThis())",
      "right" : "if (callee.mutatesThis())",
      "info" : "IfStatement[16406-17014]:IfStatement[17118-17726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16432-17014]:Block[17144-17726]"
    }, {
      "left" : "if (callSite.getType() != Token.NEW)",
      "right" : "if (callSite.getType() != Token.NEW)",
      "info" : "IfStatement[16575-17006]:IfStatement[17287-17718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16612-17006]:Block[17324-17718]"
    }, {
      "left" : "Node objectNode = getCallThisObject(callSite);",
      "right" : "Node objectNode = getCallThisObject(callSite);",
      "info" : "VariableDeclarationStatement[16624-16670]:VariableDeclarationStatement[17336-17382]"
    }, {
      "left" : "if (objectNode != null && NodeUtil.isThis(objectNode))",
      "right" : "if (objectNode != null && NodeUtil.isThis(objectNode))",
      "info" : "IfStatement[16681-16996]:IfStatement[17393-17708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16736-16872]:Block[17448-17584]"
    }, {
      "left" : "if (!caller.mutatesThis())",
      "right" : "if (!caller.mutatesThis())",
      "info" : "IfStatement[16750-16860]:IfStatement[17462-17572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16777-16860]:Block[17489-17572]"
    }, {
      "left" : "caller.setTaintsThis();",
      "right" : "caller.setTaintsThis();",
      "info" : "ExpressionStatement[16793-16816]:ExpressionStatement[17505-17528]"
    }, {
      "left" : "changed = true;",
      "right" : "changed = true;",
      "info" : "ExpressionStatement[16831-16846]:ExpressionStatement[17543-17558]"
    }, {
      "left" : "if (!caller.mutatesGlobalState())",
      "right" : "if (!caller.mutatesGlobalState())",
      "info" : "IfStatement[16878-16996]:IfStatement[17590-17708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16912-16996]:Block[17624-17708]"
    }, {
      "left" : "caller.setTaintsGlobalState();",
      "right" : "caller.setTaintsGlobalState();",
      "info" : "ExpressionStatement[16926-16956]:ExpressionStatement[17638-17668]"
    }, {
      "left" : "changed = true;",
      "right" : "changed = true;",
      "info" : "ExpressionStatement[16969-16984]:ExpressionStatement[17681-17696]"
    }, {
      "left" : "return changed;",
      "right" : "return changed;",
      "info" : "ReturnStatement[17022-17037]:ReturnStatement[17734-17749]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17425-17432]:Modifier[18137-18144]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17433-17439]:Modifier[18145-18151]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17440-17444]:SimpleType[18152-18156]"
    }, {
      "left" : "getCallThisObject",
      "right" : "getCallThisObject",
      "info" : "SimpleName[17445-17462]:SimpleName[18157-18174]"
    }, {
      "left" : "Node callSite",
      "right" : "Node callSite",
      "info" : "SingleVariableDeclaration[17463-17476]:SingleVariableDeclaration[18175-18188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17478-17890]:Block[18190-18602]"
    }, {
      "left" : "Node foo = callSite.getFirstChild();",
      "right" : "Node foo = callSite.getFirstChild();",
      "info" : "VariableDeclarationStatement[17484-17520]:VariableDeclarationStatement[18196-18232]"
    }, {
      "left" : "if (!NodeUtil.isGetProp(foo))",
      "right" : "if (!NodeUtil.isGetProp(foo))",
      "info" : "IfStatement[17525-17656]:IfStatement[18237-18368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17555-17656]:Block[18267-18368]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17638-17650]:ReturnStatement[18350-18362]"
    }, {
      "left" : "Node object = null;",
      "right" : "Node object = null;",
      "info" : "VariableDeclarationStatement[17662-17681]:VariableDeclarationStatement[18374-18393]"
    }, {
      "left" : "String propString = foo.getLastChild().getString();",
      "right" : "String propString = foo.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[17687-17738]:VariableDeclarationStatement[18399-18450]"
    }, {
      "left" : "if (propString.equals(\"call\") || propString.equals(\"apply\"))",
      "right" : "if (propString.equals(\"call\") || propString.equals(\"apply\"))",
      "info" : "IfStatement[17743-17886]:IfStatement[18455-18598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17804-17839]:Block[18516-18551]"
    }, {
      "left" : "return foo.getNext();",
      "right" : "return foo.getNext();",
      "info" : "ReturnStatement[17812-17833]:ReturnStatement[18524-18545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17845-17886]:Block[18557-18598]"
    }, {
      "left" : "return foo.getFirstChild();",
      "right" : "return foo.getFirstChild();",
      "info" : "ReturnStatement[17853-17880]:ReturnStatement[18565-18592]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18027-18034]:Modifier[18739-18746]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18035-18041]:Modifier[18747-18753]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[18042-18047]:TYPE_DECLARATION_KIND[18754-18759]"
    }, {
      "left" : "FunctionInformation",
      "right" : "FunctionInformation",
      "info" : "SimpleName[18048-18067]:SimpleName[18760-18779]"
    }, {
      "left" : "FunctionInformation",
      "right" : "FunctionInformation",
      "info" : "SimpleName[18398-18417]:SimpleName[19110-19129]"
    }, {
      "left" : "boolean extern",
      "right" : "boolean extern",
      "info" : "SingleVariableDeclaration[18418-18432]:SingleVariableDeclaration[19130-19144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18434-18493]:Block[19146-19205]"
    }, {
      "left" : "this.extern = extern;",
      "right" : "this.extern = extern;",
      "info" : "ExpressionStatement[18442-18463]:ExpressionStatement[19154-19175]"
    }, {
      "left" : "checkInvariant();",
      "right" : "checkInvariant();",
      "info" : "ExpressionStatement[18470-18487]:ExpressionStatement[19182-19199]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18557-18564]:PrimitiveType[19269-19276]"
    }, {
      "left" : "isExtern",
      "right" : "isExtern",
      "info" : "SimpleName[18565-18573]:SimpleName[19277-19285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18576-18604]:Block[19288-19316]"
    }, {
      "left" : "return extern;",
      "right" : "return extern;",
      "info" : "ReturnStatement[18584-18598]:ReturnStatement[19296-19310]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18688-18695]:PrimitiveType[19400-19407]"
    }, {
      "left" : "mayBePure",
      "right" : "mayBePure",
      "info" : "SimpleName[18696-18705]:SimpleName[19408-19417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18708-18844]:Block[19420-19556]"
    }, {
      "left" : "return !(functionThrows ||\n               taintsGlobalState ||\n               taintsThis ||\n               taintsUnknown);",
      "right" : "return !(functionThrows ||\n               taintsGlobalState ||\n               taintsThis ||\n               taintsUnknown);",
      "info" : "ReturnStatement[18716-18838]:ReturnStatement[19428-19550]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18918-18925]:PrimitiveType[19630-19637]"
    }, {
      "left" : "mayHaveSideEffects",
      "right" : "mayHaveSideEffects",
      "info" : "SimpleName[18926-18944]:SimpleName[19638-19656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18947-18982]:Block[19659-19694]"
    }, {
      "left" : "return !pureFunction;",
      "right" : "return !pureFunction;",
      "info" : "ReturnStatement[18955-18976]:ReturnStatement[19667-19688]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19044-19048]:PrimitiveType[19756-19760]"
    }, {
      "left" : "setIsPure",
      "right" : "setIsPure",
      "info" : "SimpleName[19049-19058]:SimpleName[19761-19770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19061-19119]:Block[19773-19831]"
    }, {
      "left" : "pureFunction = true;",
      "right" : "pureFunction = true;",
      "info" : "ExpressionStatement[19069-19089]:ExpressionStatement[19781-19801]"
    }, {
      "left" : "checkInvariant();",
      "right" : "checkInvariant();",
      "info" : "ExpressionStatement[19096-19113]:ExpressionStatement[19808-19825]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19210-19214]:PrimitiveType[19922-19926]"
    }, {
      "left" : "setTaintsGlobalState",
      "right" : "setTaintsGlobalState",
      "info" : "SimpleName[19215-19235]:SimpleName[19927-19947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19238-19301]:Block[19950-20013]"
    }, {
      "left" : "taintsGlobalState = true;",
      "right" : "taintsGlobalState = true;",
      "info" : "ExpressionStatement[19246-19271]:ExpressionStatement[19958-19983]"
    }, {
      "left" : "checkInvariant();",
      "right" : "checkInvariant();",
      "info" : "ExpressionStatement[19278-19295]:ExpressionStatement[19990-20007]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19389-19393]:PrimitiveType[20101-20105]"
    }, {
      "left" : "setTaintsThis",
      "right" : "setTaintsThis",
      "info" : "SimpleName[19394-19407]:SimpleName[20106-20119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19410-19466]:Block[20122-20178]"
    }, {
      "left" : "taintsThis = true;",
      "right" : "taintsThis = true;",
      "info" : "ExpressionStatement[19418-19436]:ExpressionStatement[20130-20148]"
    }, {
      "left" : "checkInvariant();",
      "right" : "checkInvariant();",
      "info" : "ExpressionStatement[19443-19460]:ExpressionStatement[20155-20172]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19546-19550]:PrimitiveType[20258-20262]"
    }, {
      "left" : "setFunctionThrows",
      "right" : "setFunctionThrows",
      "info" : "SimpleName[19551-19568]:SimpleName[20263-20280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19571-19631]:Block[20283-20343]"
    }, {
      "left" : "functionThrows = true;",
      "right" : "functionThrows = true;",
      "info" : "ExpressionStatement[19579-19601]:ExpressionStatement[20291-20313]"
    }, {
      "left" : "checkInvariant();",
      "right" : "checkInvariant();",
      "info" : "ExpressionStatement[19608-19625]:ExpressionStatement[20320-20337]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19762-19766]:PrimitiveType[20474-20478]"
    }, {
      "left" : "setTaintsUnknown",
      "right" : "setTaintsUnknown",
      "info" : "SimpleName[19767-19783]:SimpleName[20479-20495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19786-19845]:Block[20498-20557]"
    }, {
      "left" : "taintsUnknown = true;",
      "right" : "taintsUnknown = true;",
      "info" : "ExpressionStatement[19794-19815]:ExpressionStatement[20506-20527]"
    }, {
      "left" : "checkInvariant();",
      "right" : "checkInvariant();",
      "info" : "ExpressionStatement[19822-19839]:ExpressionStatement[20534-20551]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19921-19928]:PrimitiveType[20633-20640]"
    }, {
      "left" : "mutatesGlobalState",
      "right" : "mutatesGlobalState",
      "info" : "SimpleName[19929-19947]:SimpleName[20641-20659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19950-20006]:Block[20662-20718]"
    }, {
      "left" : "return taintsGlobalState || taintsUnknown;",
      "right" : "return taintsGlobalState || taintsUnknown;",
      "info" : "ReturnStatement[19958-20000]:ReturnStatement[20670-20712]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20076-20083]:PrimitiveType[20788-20795]"
    }, {
      "left" : "mutatesThis",
      "right" : "mutatesThis",
      "info" : "SimpleName[20084-20095]:SimpleName[20796-20807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20098-20130]:Block[20810-20842]"
    }, {
      "left" : "return taintsThis;",
      "right" : "return taintsThis;",
      "info" : "ReturnStatement[20106-20124]:ReturnStatement[20818-20836]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20209-20216]:PrimitiveType[20921-20928]"
    }, {
      "left" : "functionThrows",
      "right" : "functionThrows",
      "info" : "SimpleName[20217-20231]:SimpleName[20929-20943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20234-20270]:Block[20946-20982]"
    }, {
      "left" : "return functionThrows;",
      "right" : "return functionThrows;",
      "info" : "ReturnStatement[20242-20264]:ReturnStatement[20954-20976]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20409-20416]:Modifier[21121-21128]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20417-20421]:PrimitiveType[21129-21133]"
    }, {
      "left" : "checkInvariant",
      "right" : "checkInvariant",
      "info" : "SimpleName[20422-20436]:SimpleName[21134-21148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20439-20618]:Block[21151-21330]"
    }, {
      "left" : "boolean invariant = mayBePure() || mayHaveSideEffects();",
      "right" : "boolean invariant = mayBePure() || mayHaveSideEffects();",
      "info" : "VariableDeclarationStatement[20447-20503]:VariableDeclarationStatement[21159-21215]"
    }, {
      "left" : "if (!invariant)",
      "right" : "if (!invariant)",
      "info" : "IfStatement[20510-20612]:IfStatement[21222-21324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20526-20612]:Block[21238-21324]"
    }, {
      "left" : "throw new IllegalStateException(\"Invariant failed.  \" + toString());",
      "right" : "throw new IllegalStateException(\"Invariant failed.  \" + toString());",
      "info" : "ThrowStatement[20536-20604]:ThrowStatement[21248-21316]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20712-20716]:PrimitiveType[21424-21428]"
    }, {
      "left" : "appendCall",
      "right" : "appendCall",
      "info" : "SimpleName[20717-20727]:SimpleName[21429-21439]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[20728-20741]:SingleVariableDeclaration[21440-21453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20743-20791]:Block[21455-21503]"
    }, {
      "left" : "callsInFunctionBody.add(callNode);",
      "right" : "callsInFunctionBody.add(callNode);",
      "info" : "ExpressionStatement[20751-20785]:ExpressionStatement[21463-21497]"
    }, {
      "left" : "List<Node>",
      "right" : "List<Node>",
      "info" : "ParameterizedType[20857-20867]:ParameterizedType[21569-21579]"
    }, {
      "left" : "getCallsInFunctionBody",
      "right" : "getCallsInFunctionBody",
      "info" : "SimpleName[20868-20890]:SimpleName[21580-21602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20893-20934]:Block[21605-21646]"
    }, {
      "left" : "return callsInFunctionBody;",
      "right" : "return callsInFunctionBody;",
      "info" : "ReturnStatement[20901-20928]:ReturnStatement[21613-21640]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20940-20949]:MarkerAnnotation[21652-21661]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20954-20960]:Modifier[21666-21672]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[20961-20967]:SimpleType[21673-21679]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[20968-20976]:SimpleName[21680-21688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20979-21473]:Block[21691-22185]"
    }, {
      "left" : "List<String> status = Lists.newArrayList();",
      "right" : "List<String> status = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[20987-21030]:VariableDeclarationStatement[21699-21742]"
    }, {
      "left" : "if (extern)",
      "right" : "if (extern)",
      "info" : "IfStatement[21037-21088]:IfStatement[21749-21800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21049-21088]:Block[21761-21800]"
    }, {
      "left" : "status.add(\"extern\");",
      "right" : "status.add(\"extern\");",
      "info" : "ExpressionStatement[21059-21080]:ExpressionStatement[21771-21792]"
    }, {
      "left" : "if (pureFunction)",
      "right" : "if (pureFunction)",
      "info" : "IfStatement[21096-21151]:IfStatement[21808-21863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21114-21151]:Block[21826-21863]"
    }, {
      "left" : "status.add(\"pure\");",
      "right" : "status.add(\"pure\");",
      "info" : "ExpressionStatement[21124-21143]:ExpressionStatement[21836-21855]"
    }, {
      "left" : "if (taintsThis)",
      "right" : "if (taintsThis)",
      "info" : "IfStatement[21159-21212]:IfStatement[21871-21924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21175-21212]:Block[21887-21924]"
    }, {
      "left" : "status.add(\"this\");",
      "right" : "status.add(\"this\");",
      "info" : "ExpressionStatement[21185-21204]:ExpressionStatement[21897-21916]"
    }, {
      "left" : "if (taintsGlobalState)",
      "right" : "if (taintsGlobalState)",
      "info" : "IfStatement[21220-21282]:IfStatement[21932-21994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21243-21282]:Block[21955-21994]"
    }, {
      "left" : "status.add(\"global\");",
      "right" : "status.add(\"global\");",
      "info" : "ExpressionStatement[21253-21274]:ExpressionStatement[21965-21986]"
    }, {
      "left" : "if (functionThrows)",
      "right" : "if (functionThrows)",
      "info" : "IfStatement[21290-21348]:IfStatement[22002-22060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21310-21348]:Block[22022-22060]"
    }, {
      "left" : "status.add(\"throw\");",
      "right" : "status.add(\"throw\");",
      "info" : "ExpressionStatement[21320-21340]:ExpressionStatement[22032-22052]"
    }, {
      "left" : "if (taintsUnknown)",
      "right" : "if (taintsUnknown)",
      "info" : "IfStatement[21356-21415]:IfStatement[22068-22127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21375-21415]:Block[22087-22127]"
    }, {
      "left" : "status.add(\"complex\");",
      "right" : "status.add(\"complex\");",
      "info" : "ExpressionStatement[21385-21407]:ExpressionStatement[22097-22119]"
    }, {
      "left" : "return \"Side effects: \" + status.toString();",
      "right" : "return \"Side effects: \" + status.toString();",
      "info" : "ReturnStatement[21423-21467]:ReturnStatement[22135-22179]"
    } ]
  },
  "interFileMappings" : { }
}